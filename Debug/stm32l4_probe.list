
stm32l4_probe.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001211c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001894  080122b0  080122b0  000222b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013b44  08013b44  000303ec  2**0
                  CONTENTS
  4 .ARM          00000008  08013b44  08013b44  00023b44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013b4c  08013b4c  000303ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013b4c  08013b4c  00023b4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013b50  08013b50  00023b50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003ec  20000000  08013b54  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002a08  200003f0  08013f40  000303f0  2**3
                  ALLOC
 10 ._user_heap_stack 00001000  20002df8  08013f40  00032df8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000303ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e916  00000000  00000000  0003041c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003965  00000000  00000000  0004ed32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a70  00000000  00000000  00052698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001968  00000000  00000000  00054108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b2cb  00000000  00000000  00055a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f6bc  00000000  00000000  00080d3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00102280  00000000  00000000  000a03f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001a2677  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000873c  00000000  00000000  001a26c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200003f0 	.word	0x200003f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08012294 	.word	0x08012294

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200003f4 	.word	0x200003f4
 80001cc:	08012294 	.word	0x08012294

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_ldivmod>:
 8000c88:	b97b      	cbnz	r3, 8000caa <__aeabi_ldivmod+0x22>
 8000c8a:	b972      	cbnz	r2, 8000caa <__aeabi_ldivmod+0x22>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bfbe      	ittt	lt
 8000c90:	2000      	movlt	r0, #0
 8000c92:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c96:	e006      	blt.n	8000ca6 <__aeabi_ldivmod+0x1e>
 8000c98:	bf08      	it	eq
 8000c9a:	2800      	cmpeq	r0, #0
 8000c9c:	bf1c      	itt	ne
 8000c9e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ca2:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ca6:	f000 b9f5 	b.w	8001094 <__aeabi_idiv0>
 8000caa:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cae:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb2:	2900      	cmp	r1, #0
 8000cb4:	db09      	blt.n	8000cca <__aeabi_ldivmod+0x42>
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	db1a      	blt.n	8000cf0 <__aeabi_ldivmod+0x68>
 8000cba:	f000 f883 	bl	8000dc4 <__udivmoddi4>
 8000cbe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc6:	b004      	add	sp, #16
 8000cc8:	4770      	bx	lr
 8000cca:	4240      	negs	r0, r0
 8000ccc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	db1b      	blt.n	8000d0c <__aeabi_ldivmod+0x84>
 8000cd4:	f000 f876 	bl	8000dc4 <__udivmoddi4>
 8000cd8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce0:	b004      	add	sp, #16
 8000ce2:	4240      	negs	r0, r0
 8000ce4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce8:	4252      	negs	r2, r2
 8000cea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cee:	4770      	bx	lr
 8000cf0:	4252      	negs	r2, r2
 8000cf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf6:	f000 f865 	bl	8000dc4 <__udivmoddi4>
 8000cfa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d02:	b004      	add	sp, #16
 8000d04:	4240      	negs	r0, r0
 8000d06:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0a:	4770      	bx	lr
 8000d0c:	4252      	negs	r2, r2
 8000d0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d12:	f000 f857 	bl	8000dc4 <__udivmoddi4>
 8000d16:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d1e:	b004      	add	sp, #16
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	4770      	bx	lr

08000d28 <__aeabi_uldivmod>:
 8000d28:	b953      	cbnz	r3, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2a:	b94a      	cbnz	r2, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2c:	2900      	cmp	r1, #0
 8000d2e:	bf08      	it	eq
 8000d30:	2800      	cmpeq	r0, #0
 8000d32:	bf1c      	itt	ne
 8000d34:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000d38:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000d3c:	f000 b9aa 	b.w	8001094 <__aeabi_idiv0>
 8000d40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d48:	f000 f83c 	bl	8000dc4 <__udivmoddi4>
 8000d4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d54:	b004      	add	sp, #16
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_d2lz>:
 8000d58:	b538      	push	{r3, r4, r5, lr}
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	4604      	mov	r4, r0
 8000d60:	460d      	mov	r5, r1
 8000d62:	f7ff febb 	bl	8000adc <__aeabi_dcmplt>
 8000d66:	b928      	cbnz	r0, 8000d74 <__aeabi_d2lz+0x1c>
 8000d68:	4620      	mov	r0, r4
 8000d6a:	4629      	mov	r1, r5
 8000d6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d70:	f000 b80a 	b.w	8000d88 <__aeabi_d2ulz>
 8000d74:	4620      	mov	r0, r4
 8000d76:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d7a:	f000 f805 	bl	8000d88 <__aeabi_d2ulz>
 8000d7e:	4240      	negs	r0, r0
 8000d80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d84:	bd38      	pop	{r3, r4, r5, pc}
 8000d86:	bf00      	nop

08000d88 <__aeabi_d2ulz>:
 8000d88:	b5d0      	push	{r4, r6, r7, lr}
 8000d8a:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <__aeabi_d2ulz+0x34>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	4606      	mov	r6, r0
 8000d90:	460f      	mov	r7, r1
 8000d92:	f7ff fc31 	bl	80005f8 <__aeabi_dmul>
 8000d96:	f7ff ff07 	bl	8000ba8 <__aeabi_d2uiz>
 8000d9a:	4604      	mov	r4, r0
 8000d9c:	f7ff fbb2 	bl	8000504 <__aeabi_ui2d>
 8000da0:	4b07      	ldr	r3, [pc, #28]	; (8000dc0 <__aeabi_d2ulz+0x38>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	f7ff fc28 	bl	80005f8 <__aeabi_dmul>
 8000da8:	4602      	mov	r2, r0
 8000daa:	460b      	mov	r3, r1
 8000dac:	4630      	mov	r0, r6
 8000dae:	4639      	mov	r1, r7
 8000db0:	f7ff fa6a 	bl	8000288 <__aeabi_dsub>
 8000db4:	f7ff fef8 	bl	8000ba8 <__aeabi_d2uiz>
 8000db8:	4621      	mov	r1, r4
 8000dba:	bdd0      	pop	{r4, r6, r7, pc}
 8000dbc:	3df00000 	.word	0x3df00000
 8000dc0:	41f00000 	.word	0x41f00000

08000dc4 <__udivmoddi4>:
 8000dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dc8:	9d08      	ldr	r5, [sp, #32]
 8000dca:	4604      	mov	r4, r0
 8000dcc:	468e      	mov	lr, r1
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d14d      	bne.n	8000e6e <__udivmoddi4+0xaa>
 8000dd2:	428a      	cmp	r2, r1
 8000dd4:	4694      	mov	ip, r2
 8000dd6:	d969      	bls.n	8000eac <__udivmoddi4+0xe8>
 8000dd8:	fab2 f282 	clz	r2, r2
 8000ddc:	b152      	cbz	r2, 8000df4 <__udivmoddi4+0x30>
 8000dde:	fa01 f302 	lsl.w	r3, r1, r2
 8000de2:	f1c2 0120 	rsb	r1, r2, #32
 8000de6:	fa20 f101 	lsr.w	r1, r0, r1
 8000dea:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dee:	ea41 0e03 	orr.w	lr, r1, r3
 8000df2:	4094      	lsls	r4, r2
 8000df4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df8:	0c21      	lsrs	r1, r4, #16
 8000dfa:	fbbe f6f8 	udiv	r6, lr, r8
 8000dfe:	fa1f f78c 	uxth.w	r7, ip
 8000e02:	fb08 e316 	mls	r3, r8, r6, lr
 8000e06:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e0a:	fb06 f107 	mul.w	r1, r6, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d90a      	bls.n	8000e28 <__udivmoddi4+0x64>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000e1a:	f080 811f 	bcs.w	800105c <__udivmoddi4+0x298>
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	f240 811c 	bls.w	800105c <__udivmoddi4+0x298>
 8000e24:	3e02      	subs	r6, #2
 8000e26:	4463      	add	r3, ip
 8000e28:	1a5b      	subs	r3, r3, r1
 8000e2a:	b2a4      	uxth	r4, r4
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3310 	mls	r3, r8, r0, r3
 8000e34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e38:	fb00 f707 	mul.w	r7, r0, r7
 8000e3c:	42a7      	cmp	r7, r4
 8000e3e:	d90a      	bls.n	8000e56 <__udivmoddi4+0x92>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e48:	f080 810a 	bcs.w	8001060 <__udivmoddi4+0x29c>
 8000e4c:	42a7      	cmp	r7, r4
 8000e4e:	f240 8107 	bls.w	8001060 <__udivmoddi4+0x29c>
 8000e52:	4464      	add	r4, ip
 8000e54:	3802      	subs	r0, #2
 8000e56:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e5a:	1be4      	subs	r4, r4, r7
 8000e5c:	2600      	movs	r6, #0
 8000e5e:	b11d      	cbz	r5, 8000e68 <__udivmoddi4+0xa4>
 8000e60:	40d4      	lsrs	r4, r2
 8000e62:	2300      	movs	r3, #0
 8000e64:	e9c5 4300 	strd	r4, r3, [r5]
 8000e68:	4631      	mov	r1, r6
 8000e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6e:	428b      	cmp	r3, r1
 8000e70:	d909      	bls.n	8000e86 <__udivmoddi4+0xc2>
 8000e72:	2d00      	cmp	r5, #0
 8000e74:	f000 80ef 	beq.w	8001056 <__udivmoddi4+0x292>
 8000e78:	2600      	movs	r6, #0
 8000e7a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e7e:	4630      	mov	r0, r6
 8000e80:	4631      	mov	r1, r6
 8000e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e86:	fab3 f683 	clz	r6, r3
 8000e8a:	2e00      	cmp	r6, #0
 8000e8c:	d14a      	bne.n	8000f24 <__udivmoddi4+0x160>
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	d302      	bcc.n	8000e98 <__udivmoddi4+0xd4>
 8000e92:	4282      	cmp	r2, r0
 8000e94:	f200 80f9 	bhi.w	800108a <__udivmoddi4+0x2c6>
 8000e98:	1a84      	subs	r4, r0, r2
 8000e9a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e9e:	2001      	movs	r0, #1
 8000ea0:	469e      	mov	lr, r3
 8000ea2:	2d00      	cmp	r5, #0
 8000ea4:	d0e0      	beq.n	8000e68 <__udivmoddi4+0xa4>
 8000ea6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000eaa:	e7dd      	b.n	8000e68 <__udivmoddi4+0xa4>
 8000eac:	b902      	cbnz	r2, 8000eb0 <__udivmoddi4+0xec>
 8000eae:	deff      	udf	#255	; 0xff
 8000eb0:	fab2 f282 	clz	r2, r2
 8000eb4:	2a00      	cmp	r2, #0
 8000eb6:	f040 8092 	bne.w	8000fde <__udivmoddi4+0x21a>
 8000eba:	eba1 010c 	sub.w	r1, r1, ip
 8000ebe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ec2:	fa1f fe8c 	uxth.w	lr, ip
 8000ec6:	2601      	movs	r6, #1
 8000ec8:	0c20      	lsrs	r0, r4, #16
 8000eca:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ece:	fb07 1113 	mls	r1, r7, r3, r1
 8000ed2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed6:	fb0e f003 	mul.w	r0, lr, r3
 8000eda:	4288      	cmp	r0, r1
 8000edc:	d908      	bls.n	8000ef0 <__udivmoddi4+0x12c>
 8000ede:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee2:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000ee6:	d202      	bcs.n	8000eee <__udivmoddi4+0x12a>
 8000ee8:	4288      	cmp	r0, r1
 8000eea:	f200 80cb 	bhi.w	8001084 <__udivmoddi4+0x2c0>
 8000eee:	4643      	mov	r3, r8
 8000ef0:	1a09      	subs	r1, r1, r0
 8000ef2:	b2a4      	uxth	r4, r4
 8000ef4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ef8:	fb07 1110 	mls	r1, r7, r0, r1
 8000efc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f00:	fb0e fe00 	mul.w	lr, lr, r0
 8000f04:	45a6      	cmp	lr, r4
 8000f06:	d908      	bls.n	8000f1a <__udivmoddi4+0x156>
 8000f08:	eb1c 0404 	adds.w	r4, ip, r4
 8000f0c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000f10:	d202      	bcs.n	8000f18 <__udivmoddi4+0x154>
 8000f12:	45a6      	cmp	lr, r4
 8000f14:	f200 80bb 	bhi.w	800108e <__udivmoddi4+0x2ca>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	eba4 040e 	sub.w	r4, r4, lr
 8000f1e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f22:	e79c      	b.n	8000e5e <__udivmoddi4+0x9a>
 8000f24:	f1c6 0720 	rsb	r7, r6, #32
 8000f28:	40b3      	lsls	r3, r6
 8000f2a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f2e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f32:	fa20 f407 	lsr.w	r4, r0, r7
 8000f36:	fa01 f306 	lsl.w	r3, r1, r6
 8000f3a:	431c      	orrs	r4, r3
 8000f3c:	40f9      	lsrs	r1, r7
 8000f3e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f42:	fa00 f306 	lsl.w	r3, r0, r6
 8000f46:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f4a:	0c20      	lsrs	r0, r4, #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fb09 1118 	mls	r1, r9, r8, r1
 8000f54:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f58:	fb08 f00e 	mul.w	r0, r8, lr
 8000f5c:	4288      	cmp	r0, r1
 8000f5e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f62:	d90b      	bls.n	8000f7c <__udivmoddi4+0x1b8>
 8000f64:	eb1c 0101 	adds.w	r1, ip, r1
 8000f68:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000f6c:	f080 8088 	bcs.w	8001080 <__udivmoddi4+0x2bc>
 8000f70:	4288      	cmp	r0, r1
 8000f72:	f240 8085 	bls.w	8001080 <__udivmoddi4+0x2bc>
 8000f76:	f1a8 0802 	sub.w	r8, r8, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1a09      	subs	r1, r1, r0
 8000f7e:	b2a4      	uxth	r4, r4
 8000f80:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f84:	fb09 1110 	mls	r1, r9, r0, r1
 8000f88:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f8c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f90:	458e      	cmp	lr, r1
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x1e2>
 8000f94:	eb1c 0101 	adds.w	r1, ip, r1
 8000f98:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000f9c:	d26c      	bcs.n	8001078 <__udivmoddi4+0x2b4>
 8000f9e:	458e      	cmp	lr, r1
 8000fa0:	d96a      	bls.n	8001078 <__udivmoddi4+0x2b4>
 8000fa2:	3802      	subs	r0, #2
 8000fa4:	4461      	add	r1, ip
 8000fa6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000faa:	fba0 9402 	umull	r9, r4, r0, r2
 8000fae:	eba1 010e 	sub.w	r1, r1, lr
 8000fb2:	42a1      	cmp	r1, r4
 8000fb4:	46c8      	mov	r8, r9
 8000fb6:	46a6      	mov	lr, r4
 8000fb8:	d356      	bcc.n	8001068 <__udivmoddi4+0x2a4>
 8000fba:	d053      	beq.n	8001064 <__udivmoddi4+0x2a0>
 8000fbc:	b15d      	cbz	r5, 8000fd6 <__udivmoddi4+0x212>
 8000fbe:	ebb3 0208 	subs.w	r2, r3, r8
 8000fc2:	eb61 010e 	sbc.w	r1, r1, lr
 8000fc6:	fa01 f707 	lsl.w	r7, r1, r7
 8000fca:	fa22 f306 	lsr.w	r3, r2, r6
 8000fce:	40f1      	lsrs	r1, r6
 8000fd0:	431f      	orrs	r7, r3
 8000fd2:	e9c5 7100 	strd	r7, r1, [r5]
 8000fd6:	2600      	movs	r6, #0
 8000fd8:	4631      	mov	r1, r6
 8000fda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fde:	f1c2 0320 	rsb	r3, r2, #32
 8000fe2:	40d8      	lsrs	r0, r3
 8000fe4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fe8:	fa21 f303 	lsr.w	r3, r1, r3
 8000fec:	4091      	lsls	r1, r2
 8000fee:	4301      	orrs	r1, r0
 8000ff0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ff4:	fa1f fe8c 	uxth.w	lr, ip
 8000ff8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ffc:	fb07 3610 	mls	r6, r7, r0, r3
 8001000:	0c0b      	lsrs	r3, r1, #16
 8001002:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001006:	fb00 f60e 	mul.w	r6, r0, lr
 800100a:	429e      	cmp	r6, r3
 800100c:	fa04 f402 	lsl.w	r4, r4, r2
 8001010:	d908      	bls.n	8001024 <__udivmoddi4+0x260>
 8001012:	eb1c 0303 	adds.w	r3, ip, r3
 8001016:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800101a:	d22f      	bcs.n	800107c <__udivmoddi4+0x2b8>
 800101c:	429e      	cmp	r6, r3
 800101e:	d92d      	bls.n	800107c <__udivmoddi4+0x2b8>
 8001020:	3802      	subs	r0, #2
 8001022:	4463      	add	r3, ip
 8001024:	1b9b      	subs	r3, r3, r6
 8001026:	b289      	uxth	r1, r1
 8001028:	fbb3 f6f7 	udiv	r6, r3, r7
 800102c:	fb07 3316 	mls	r3, r7, r6, r3
 8001030:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001034:	fb06 f30e 	mul.w	r3, r6, lr
 8001038:	428b      	cmp	r3, r1
 800103a:	d908      	bls.n	800104e <__udivmoddi4+0x28a>
 800103c:	eb1c 0101 	adds.w	r1, ip, r1
 8001040:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8001044:	d216      	bcs.n	8001074 <__udivmoddi4+0x2b0>
 8001046:	428b      	cmp	r3, r1
 8001048:	d914      	bls.n	8001074 <__udivmoddi4+0x2b0>
 800104a:	3e02      	subs	r6, #2
 800104c:	4461      	add	r1, ip
 800104e:	1ac9      	subs	r1, r1, r3
 8001050:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001054:	e738      	b.n	8000ec8 <__udivmoddi4+0x104>
 8001056:	462e      	mov	r6, r5
 8001058:	4628      	mov	r0, r5
 800105a:	e705      	b.n	8000e68 <__udivmoddi4+0xa4>
 800105c:	4606      	mov	r6, r0
 800105e:	e6e3      	b.n	8000e28 <__udivmoddi4+0x64>
 8001060:	4618      	mov	r0, r3
 8001062:	e6f8      	b.n	8000e56 <__udivmoddi4+0x92>
 8001064:	454b      	cmp	r3, r9
 8001066:	d2a9      	bcs.n	8000fbc <__udivmoddi4+0x1f8>
 8001068:	ebb9 0802 	subs.w	r8, r9, r2
 800106c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001070:	3801      	subs	r0, #1
 8001072:	e7a3      	b.n	8000fbc <__udivmoddi4+0x1f8>
 8001074:	4646      	mov	r6, r8
 8001076:	e7ea      	b.n	800104e <__udivmoddi4+0x28a>
 8001078:	4620      	mov	r0, r4
 800107a:	e794      	b.n	8000fa6 <__udivmoddi4+0x1e2>
 800107c:	4640      	mov	r0, r8
 800107e:	e7d1      	b.n	8001024 <__udivmoddi4+0x260>
 8001080:	46d0      	mov	r8, sl
 8001082:	e77b      	b.n	8000f7c <__udivmoddi4+0x1b8>
 8001084:	3b02      	subs	r3, #2
 8001086:	4461      	add	r1, ip
 8001088:	e732      	b.n	8000ef0 <__udivmoddi4+0x12c>
 800108a:	4630      	mov	r0, r6
 800108c:	e709      	b.n	8000ea2 <__udivmoddi4+0xde>
 800108e:	4464      	add	r4, ip
 8001090:	3802      	subs	r0, #2
 8001092:	e742      	b.n	8000f1a <__udivmoddi4+0x156>

08001094 <__aeabi_idiv0>:
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop

08001098 <ST7565_Select>:
uint8_t lcdRdy = 1;

//------------------------------------------------------------------------------

inline static void ST7565_Select()
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
#ifdef CS_PORT
	//-- если захотим переделать под HAL ------------------
	#ifdef ST7565_SPI_HAL
		//HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
		CS_GPIO_Port->BSRR = ( CS_Pin << 16 );
 800109c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80010a0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80010a4:	619a      	str	r2, [r3, #24]
	#ifdef ST7565_SPI_CMSIS
		CS_GPIO_Port->BSRR = ( CS_Pin << 16 );
	#endif
	//-----------------------------------------------------
#endif
}
 80010a6:	bf00      	nop
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr

080010b0 <ST7565_Unselect>:

//------------------------------------------------------------------------------

inline static void ST7565_Unselect()
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
#ifdef CS_PORT
	//-- если захотим переделать под HAL ------------------
	#ifdef ST7565_SPI_HAL
		//HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
		CS_GPIO_Port->BSRR = CS_Pin;
 80010b4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80010b8:	2210      	movs	r2, #16
 80010ba:	619a      	str	r2, [r3, #24]
	#ifdef ST7565_SPI_CMSIS
		CS_GPIO_Port->BSRR = CS_Pin;
	#endif
	//-----------------------------------------------------
#endif
}
 80010bc:	bf00      	nop
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
	...

080010c8 <ST7565_Reset>:
	* @brief	 ( описание ):  аппарвтный сброс дисплея
	* @param	( параметры ):	
	* @return  ( возвращает ):	
*******************************************************************************/
void ST7565_Reset()
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
	RES_GPIO_Port->BSRR = (RES_Pin << 16);//HAL_GPIO_WritePin(RES_GPIO_Port, RES_Pin, GPIO_PIN_RESET );
 80010cc:	4b07      	ldr	r3, [pc, #28]	; (80010ec <ST7565_Reset+0x24>)
 80010ce:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80010d2:	619a      	str	r2, [r3, #24]
	HAL_Delay(1);
 80010d4:	2001      	movs	r0, #1
 80010d6:	f004 ff6d 	bl	8005fb4 <HAL_Delay>
	
	RES_GPIO_Port->BSRR = RES_Pin;//HAL_GPIO_WritePin(RES_GPIO_Port, RES_Pin, GPIO_PIN_SET );
 80010da:	4b04      	ldr	r3, [pc, #16]	; (80010ec <ST7565_Reset+0x24>)
 80010dc:	2204      	movs	r2, #4
 80010de:	619a      	str	r2, [r3, #24]
	HAL_Delay(1);
 80010e0:	2001      	movs	r0, #1
 80010e2:	f004 ff67 	bl	8005fb4 <HAL_Delay>
}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	48000c00 	.word	0x48000c00

080010f0 <ST7565_w_dats>:
//--------------------------------------------------------------------------------
#ifdef SET_NEW_PROC
inline static void ST7565_w_dats(uint8_t *Data, uint16_t len)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	460b      	mov	r3, r1
 80010fa:	807b      	strh	r3, [r7, #2]
	DC_GPIO_Port->BSRR = DC_Pin;//HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 80010fc:	4b1d      	ldr	r3, [pc, #116]	; (8001174 <ST7565_w_dats+0x84>)
 80010fe:	2220      	movs	r2, #32
 8001100:	619a      	str	r2, [r3, #24]

	if (with_dma) {
 8001102:	4b1d      	ldr	r3, [pc, #116]	; (8001178 <ST7565_w_dats+0x88>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d018      	beq.n	800113c <ST7565_w_dats+0x4c>
		lcdRdy = 0;
 800110a:	4b1c      	ldr	r3, [pc, #112]	; (800117c <ST7565_w_dats+0x8c>)
 800110c:	2200      	movs	r2, #0
 800110e:	701a      	strb	r2, [r3, #0]
		if (HAL_SPI_Transmit_DMA(&ST7565_SPI_HAL, Data, len) != HAL_OK) devError |= devLCD;
 8001110:	887b      	ldrh	r3, [r7, #2]
 8001112:	461a      	mov	r2, r3
 8001114:	6879      	ldr	r1, [r7, #4]
 8001116:	481a      	ldr	r0, [pc, #104]	; (8001180 <ST7565_w_dats+0x90>)
 8001118:	f009 fd4c 	bl	800abb4 <HAL_SPI_Transmit_DMA>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d006      	beq.n	8001130 <ST7565_w_dats+0x40>
 8001122:	4b18      	ldr	r3, [pc, #96]	; (8001184 <ST7565_w_dats+0x94>)
 8001124:	881b      	ldrh	r3, [r3, #0]
 8001126:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800112a:	b29a      	uxth	r2, r3
 800112c:	4b15      	ldr	r3, [pc, #84]	; (8001184 <ST7565_w_dats+0x94>)
 800112e:	801a      	strh	r2, [r3, #0]
		while (!lcdRdy) {};
 8001130:	bf00      	nop
 8001132:	4b12      	ldr	r3, [pc, #72]	; (800117c <ST7565_w_dats+0x8c>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d0fb      	beq.n	8001132 <ST7565_w_dats+0x42>
	} else {
		if (HAL_SPI_Transmit(&ST7565_SPI_HAL, Data, len, HAL_MAX_DELAY) != HAL_OK) devError |= devLCD;
		while (HAL_SPI_GetState(&ST7565_SPI_HAL) != HAL_SPI_STATE_READY) {};
	}
}
 800113a:	e017      	b.n	800116c <ST7565_w_dats+0x7c>
		if (HAL_SPI_Transmit(&ST7565_SPI_HAL, Data, len, HAL_MAX_DELAY) != HAL_OK) devError |= devLCD;
 800113c:	887a      	ldrh	r2, [r7, #2]
 800113e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001142:	6879      	ldr	r1, [r7, #4]
 8001144:	480e      	ldr	r0, [pc, #56]	; (8001180 <ST7565_w_dats+0x90>)
 8001146:	f009 f884 	bl	800a252 <HAL_SPI_Transmit>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d006      	beq.n	800115e <ST7565_w_dats+0x6e>
 8001150:	4b0c      	ldr	r3, [pc, #48]	; (8001184 <ST7565_w_dats+0x94>)
 8001152:	881b      	ldrh	r3, [r3, #0]
 8001154:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001158:	b29a      	uxth	r2, r3
 800115a:	4b0a      	ldr	r3, [pc, #40]	; (8001184 <ST7565_w_dats+0x94>)
 800115c:	801a      	strh	r2, [r3, #0]
		while (HAL_SPI_GetState(&ST7565_SPI_HAL) != HAL_SPI_STATE_READY) {};
 800115e:	bf00      	nop
 8001160:	4807      	ldr	r0, [pc, #28]	; (8001180 <ST7565_w_dats+0x90>)
 8001162:	f00a f8c5 	bl	800b2f0 <HAL_SPI_GetState>
 8001166:	4603      	mov	r3, r0
 8001168:	2b01      	cmp	r3, #1
 800116a:	d1f9      	bne.n	8001160 <ST7565_w_dats+0x70>
}
 800116c:	bf00      	nop
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	48000400 	.word	0x48000400
 8001178:	2000080c 	.word	0x2000080c
 800117c:	20000000 	.word	0x20000000
 8001180:	20000918 	.word	0x20000918
 8001184:	20001450 	.word	0x20001450

08001188 <ST7565_w_cmds>:
//
inline static void ST7565_w_cmds(uint8_t *Command, uint16_t len)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	460b      	mov	r3, r1
 8001192:	807b      	strh	r3, [r7, #2]
	DC_GPIO_Port->BSRR = (DC_Pin << 16);//HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
 8001194:	4b1e      	ldr	r3, [pc, #120]	; (8001210 <ST7565_w_cmds+0x88>)
 8001196:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800119a:	619a      	str	r2, [r3, #24]

	if (with_dma) {
 800119c:	4b1d      	ldr	r3, [pc, #116]	; (8001214 <ST7565_w_cmds+0x8c>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d018      	beq.n	80011d6 <ST7565_w_cmds+0x4e>
		lcdRdy = 0;
 80011a4:	4b1c      	ldr	r3, [pc, #112]	; (8001218 <ST7565_w_cmds+0x90>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	701a      	strb	r2, [r3, #0]
		if (HAL_SPI_Transmit_DMA(&ST7565_SPI_HAL, Command, len) != HAL_OK) devError |= devLCD;
 80011aa:	887b      	ldrh	r3, [r7, #2]
 80011ac:	461a      	mov	r2, r3
 80011ae:	6879      	ldr	r1, [r7, #4]
 80011b0:	481a      	ldr	r0, [pc, #104]	; (800121c <ST7565_w_cmds+0x94>)
 80011b2:	f009 fcff 	bl	800abb4 <HAL_SPI_Transmit_DMA>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d006      	beq.n	80011ca <ST7565_w_cmds+0x42>
 80011bc:	4b18      	ldr	r3, [pc, #96]	; (8001220 <ST7565_w_cmds+0x98>)
 80011be:	881b      	ldrh	r3, [r3, #0]
 80011c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011c4:	b29a      	uxth	r2, r3
 80011c6:	4b16      	ldr	r3, [pc, #88]	; (8001220 <ST7565_w_cmds+0x98>)
 80011c8:	801a      	strh	r2, [r3, #0]
		while (!lcdRdy) {};
 80011ca:	bf00      	nop
 80011cc:	4b12      	ldr	r3, [pc, #72]	; (8001218 <ST7565_w_cmds+0x90>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d0fb      	beq.n	80011cc <ST7565_w_cmds+0x44>
	} else {
		if (HAL_SPI_Transmit(&ST7565_SPI_HAL, Command, len, HAL_MAX_DELAY) != HAL_OK) devError |= devLCD;
		while (HAL_SPI_GetState(&ST7565_SPI_HAL) != HAL_SPI_STATE_READY) {};
	}
}
 80011d4:	e017      	b.n	8001206 <ST7565_w_cmds+0x7e>
		if (HAL_SPI_Transmit(&ST7565_SPI_HAL, Command, len, HAL_MAX_DELAY) != HAL_OK) devError |= devLCD;
 80011d6:	887a      	ldrh	r2, [r7, #2]
 80011d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011dc:	6879      	ldr	r1, [r7, #4]
 80011de:	480f      	ldr	r0, [pc, #60]	; (800121c <ST7565_w_cmds+0x94>)
 80011e0:	f009 f837 	bl	800a252 <HAL_SPI_Transmit>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d006      	beq.n	80011f8 <ST7565_w_cmds+0x70>
 80011ea:	4b0d      	ldr	r3, [pc, #52]	; (8001220 <ST7565_w_cmds+0x98>)
 80011ec:	881b      	ldrh	r3, [r3, #0]
 80011ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011f2:	b29a      	uxth	r2, r3
 80011f4:	4b0a      	ldr	r3, [pc, #40]	; (8001220 <ST7565_w_cmds+0x98>)
 80011f6:	801a      	strh	r2, [r3, #0]
		while (HAL_SPI_GetState(&ST7565_SPI_HAL) != HAL_SPI_STATE_READY) {};
 80011f8:	bf00      	nop
 80011fa:	4808      	ldr	r0, [pc, #32]	; (800121c <ST7565_w_cmds+0x94>)
 80011fc:	f00a f878 	bl	800b2f0 <HAL_SPI_GetState>
 8001200:	4603      	mov	r3, r0
 8001202:	2b01      	cmp	r3, #1
 8001204:	d1f9      	bne.n	80011fa <ST7565_w_cmds+0x72>
}
 8001206:	bf00      	nop
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	48000400 	.word	0x48000400
 8001214:	2000080c 	.word	0x2000080c
 8001218:	20000000 	.word	0x20000000
 800121c:	20000918 	.word	0x20000918
 8001220:	20001450 	.word	0x20001450

08001224 <ST7565_SetX>:
inline static void ST7565_SetX(uint8_t x)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	71fb      	strb	r3, [r7, #7]
	uint8_t bytes[] = { ((x & 0xf0) >> 4) | 0x10, x & 0x0f };
 800122e:	79fb      	ldrb	r3, [r7, #7]
 8001230:	091b      	lsrs	r3, r3, #4
 8001232:	b2db      	uxtb	r3, r3
 8001234:	f043 0310 	orr.w	r3, r3, #16
 8001238:	b2db      	uxtb	r3, r3
 800123a:	733b      	strb	r3, [r7, #12]
 800123c:	79fb      	ldrb	r3, [r7, #7]
 800123e:	f003 030f 	and.w	r3, r3, #15
 8001242:	b2db      	uxtb	r3, r3
 8001244:	737b      	strb	r3, [r7, #13]
	ST7565_w_cmds(bytes, 2);
 8001246:	f107 030c 	add.w	r3, r7, #12
 800124a:	2102      	movs	r1, #2
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff ff9b 	bl	8001188 <ST7565_w_cmds>
}
 8001252:	bf00      	nop
 8001254:	3710      	adds	r7, #16
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <ST7565_SetY>:
//
inline static void ST7565_SetY(uint8_t y)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b084      	sub	sp, #16
 800125e:	af00      	add	r7, sp, #0
 8001260:	4603      	mov	r3, r0
 8001262:	71fb      	strb	r3, [r7, #7]
	uint8_t byte = (y & 0x07) | 0xB0;
 8001264:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001268:	f003 0307 	and.w	r3, r3, #7
 800126c:	b25b      	sxtb	r3, r3
 800126e:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8001272:	b25b      	sxtb	r3, r3
 8001274:	b2db      	uxtb	r3, r3
 8001276:	73fb      	strb	r3, [r7, #15]
	ST7565_w_cmds(&byte, 1);
 8001278:	f107 030f 	add.w	r3, r7, #15
 800127c:	2101      	movs	r1, #1
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff ff82 	bl	8001188 <ST7565_w_cmds>
}
 8001284:	bf00      	nop
 8001286:	3710      	adds	r7, #16
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}

0800128c <ST7565_Display_fill>:
								( данные отправляются сразу на дисплей и записываются в буфер кадра )
								Функцию ST7565_Update() вызывать не нужно
	* @return  ( возвращает ):	
*******************************************************************************/
void ST7565_Display_fill(uint8_t fill)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
 8001292:	4603      	mov	r3, r0
 8001294:	71fb      	strb	r3, [r7, #7]
uint8_t page;//, column;
	
	memset(ST7565_buffer, fill, (SCREEN_WIDTH * SCREEN_HEIGHT / 8));	// отчистка памяти заполняем массив значением 0x00
 8001296:	79fb      	ldrb	r3, [r7, #7]
 8001298:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800129c:	4619      	mov	r1, r3
 800129e:	4814      	ldr	r0, [pc, #80]	; (80012f0 <ST7565_Display_fill+0x64>)
 80012a0:	f00c fd3a 	bl	800dd18 <memset>
	
	ST7565_Select();
 80012a4:	f7ff fef8 	bl	8001098 <ST7565_Select>
#ifdef SET_NEW_PROC
	uint8_t dta[] = {0, 0x10, 0};
 80012a8:	4a12      	ldr	r2, [pc, #72]	; (80012f4 <ST7565_Display_fill+0x68>)
 80012aa:	f107 030c 	add.w	r3, r7, #12
 80012ae:	6812      	ldr	r2, [r2, #0]
 80012b0:	4611      	mov	r1, r2
 80012b2:	8019      	strh	r1, [r3, #0]
 80012b4:	3302      	adds	r3, #2
 80012b6:	0c12      	lsrs	r2, r2, #16
 80012b8:	701a      	strb	r2, [r3, #0]
#endif
	for (page = 0xB7; page >= 0xB0; page-- ) {
 80012ba:	23b7      	movs	r3, #183	; 0xb7
 80012bc:	73fb      	strb	r3, [r7, #15]
 80012be:	e00e      	b.n	80012de <ST7565_Display_fill+0x52>
		ST7565_w_cmd(page);  //set page address
		ST7565_w_cmd(0x10);  //set Column address MSB   
		ST7565_w_cmd(0x00);  //set column address LSB
		for (column = 0; column < 131; column++) ST7565_w_dat(fill);
#else
		dta[0] = page;
 80012c0:	7bfb      	ldrb	r3, [r7, #15]
 80012c2:	733b      	strb	r3, [r7, #12]
		ST7565_w_cmds(dta, sizeof(dta));
 80012c4:	f107 030c 	add.w	r3, r7, #12
 80012c8:	2103      	movs	r1, #3
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff ff5c 	bl	8001188 <ST7565_w_cmds>
		ST7565_w_dats(ST7565_buffer, 131);
 80012d0:	2183      	movs	r1, #131	; 0x83
 80012d2:	4807      	ldr	r0, [pc, #28]	; (80012f0 <ST7565_Display_fill+0x64>)
 80012d4:	f7ff ff0c 	bl	80010f0 <ST7565_w_dats>
	for (page = 0xB7; page >= 0xB0; page-- ) {
 80012d8:	7bfb      	ldrb	r3, [r7, #15]
 80012da:	3b01      	subs	r3, #1
 80012dc:	73fb      	strb	r3, [r7, #15]
 80012de:	7bfb      	ldrb	r3, [r7, #15]
 80012e0:	2baf      	cmp	r3, #175	; 0xaf
 80012e2:	d8ed      	bhi.n	80012c0 <ST7565_Display_fill+0x34>
#endif
    }
		
	ST7565_Unselect();
 80012e4:	f7ff fee4 	bl	80010b0 <ST7565_Unselect>
}
 80012e8:	bf00      	nop
 80012ea:	3710      	adds	r7, #16
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	2000040c 	.word	0x2000040c
 80012f4:	080122b0 	.word	0x080122b0

080012f8 <ST7565_Init>:
	* @brief	 ( описание ):  инициализация дисплея ( при другой инициализации можно поменять параметры внутри функции )
	* @param	( параметры ):	
	* @return  ( возвращает ):	
*******************************************************************************/
void ST7565_Init()
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
	ST7565_Select();
 80012fe:	f7ff fecb 	bl	8001098 <ST7565_Select>
	ST7565_w_cmd(CMD_DISPLAY_ON);    		//Display on
	// Инвертирование экрана CMD_SET_DISP_NORMAL - OFF    CMD_SET_DISP_REVERSE - ON
	ST7565_w_cmd(CMD_SET_DISP_NORMAL);
	//HAL_Delay(1);//1
#else
	uint8_t dta[] = {
 8001302:	4a09      	ldr	r2, [pc, #36]	; (8001328 <ST7565_Init+0x30>)
 8001304:	1d3b      	adds	r3, r7, #4
 8001306:	ca07      	ldmia	r2, {r0, r1, r2}
 8001308:	c303      	stmia	r3!, {r0, r1}
 800130a:	801a      	strh	r2, [r3, #0]
	};
	#if defined (SCREEN_ORIENTATION_180)
		dta[1] = CMD_SET_ADC_REVERSE;    	//ADC selection(SEG0->SEG128)  CMD_SET_ADC_NORMAL горизонтально «нормальная» (не перевернутая)
		dta[2] = CMD_SET_COM_NORMAL;    		//SHL selection(COM0->COM64)   CMD_SET_COM_REVERSE вертикально «перевернутая» (дополняет команду выше)
	#endif
	ST7565_w_cmds(dta, sizeof(dta));
 800130c:	1d3b      	adds	r3, r7, #4
 800130e:	210a      	movs	r1, #10
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff ff39 	bl	8001188 <ST7565_w_cmds>
#endif
	
	ST7565_Display_fill(0);
 8001316:	2000      	movs	r0, #0
 8001318:	f7ff ffb8 	bl	800128c <ST7565_Display_fill>
	
	ST7565_Unselect();
 800131c:	f7ff fec8 	bl	80010b0 <ST7565_Unselect>
   
}
 8001320:	bf00      	nop
 8001322:	3710      	adds	r7, #16
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	080122b4 	.word	0x080122b4

0800132c <ST7565_CMD_DISPLAY>:
//--------------------------------------------------------------------------------
void ST7565_CMD_DISPLAY(uint8_t byte)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	4603      	mov	r3, r0
 8001334:	71fb      	strb	r3, [r7, #7]
#ifdef SET_NEW_PROC
	ST7565_w_cmds(&byte, 1);
 8001336:	1dfb      	adds	r3, r7, #7
 8001338:	2101      	movs	r1, #1
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff ff24 	bl	8001188 <ST7565_w_cmds>
#else
	ST7565_w_cmd(byte);
#endif
}
 8001340:	bf00      	nop
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}

08001348 <ST7565_Draw_pixel>:
	* @param	( параметры ):	координата X(0 - 127) и координата Y(0 - 63)  color 1 or 0
	* @return  ( возвращает ):	
*******************************************************************************/
// X(0 - 127)  Y(0 - 63)
void ST7565_Draw_pixel(int16_t x, int16_t y, uint8_t color)
{
 8001348:	b480      	push	{r7}
 800134a:	b085      	sub	sp, #20
 800134c:	af00      	add	r7, sp, #0
 800134e:	4603      	mov	r3, r0
 8001350:	80fb      	strh	r3, [r7, #6]
 8001352:	460b      	mov	r3, r1
 8001354:	80bb      	strh	r3, [r7, #4]
 8001356:	4613      	mov	r3, r2
 8001358:	70fb      	strb	r3, [r7, #3]
    if (x >= SCREEN_WIDTH || x < 0 || y >= SCREEN_HEIGHT || y < 0) return;
 800135a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800135e:	2b7f      	cmp	r3, #127	; 0x7f
 8001360:	dc4c      	bgt.n	80013fc <ST7565_Draw_pixel+0xb4>
 8001362:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001366:	2b00      	cmp	r3, #0
 8001368:	db48      	blt.n	80013fc <ST7565_Draw_pixel+0xb4>
 800136a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800136e:	2b3f      	cmp	r3, #63	; 0x3f
 8001370:	dc44      	bgt.n	80013fc <ST7565_Draw_pixel+0xb4>
 8001372:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001376:	2b00      	cmp	r3, #0
 8001378:	db40      	blt.n	80013fc <ST7565_Draw_pixel+0xb4>

    uint16_t array_pos = x + ((y >> 3) * SCREEN_WIDTH );
 800137a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800137e:	10db      	asrs	r3, r3, #3
 8001380:	b21b      	sxth	r3, r3
 8001382:	b29b      	uxth	r3, r3
 8001384:	01db      	lsls	r3, r3, #7
 8001386:	b29a      	uxth	r2, r3
 8001388:	88fb      	ldrh	r3, [r7, #6]
 800138a:	4413      	add	r3, r2
 800138c:	81fb      	strh	r3, [r7, #14]

    if (color) {
 800138e:	78fb      	ldrb	r3, [r7, #3]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d018      	beq.n	80013c6 <ST7565_Draw_pixel+0x7e>
        ST7565_buffer[array_pos] |= 1 << (y % 8);
 8001394:	89fb      	ldrh	r3, [r7, #14]
 8001396:	4a1c      	ldr	r2, [pc, #112]	; (8001408 <ST7565_Draw_pixel+0xc0>)
 8001398:	5cd3      	ldrb	r3, [r2, r3]
 800139a:	b25a      	sxtb	r2, r3
 800139c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80013a0:	4259      	negs	r1, r3
 80013a2:	f003 0307 	and.w	r3, r3, #7
 80013a6:	f001 0107 	and.w	r1, r1, #7
 80013aa:	bf58      	it	pl
 80013ac:	424b      	negpl	r3, r1
 80013ae:	b21b      	sxth	r3, r3
 80013b0:	4619      	mov	r1, r3
 80013b2:	2301      	movs	r3, #1
 80013b4:	408b      	lsls	r3, r1
 80013b6:	b25b      	sxtb	r3, r3
 80013b8:	4313      	orrs	r3, r2
 80013ba:	b25a      	sxtb	r2, r3
 80013bc:	89fb      	ldrh	r3, [r7, #14]
 80013be:	b2d1      	uxtb	r1, r2
 80013c0:	4a11      	ldr	r2, [pc, #68]	; (8001408 <ST7565_Draw_pixel+0xc0>)
 80013c2:	54d1      	strb	r1, [r2, r3]
 80013c4:	e01b      	b.n	80013fe <ST7565_Draw_pixel+0xb6>
    } else {
        ST7565_buffer[array_pos] &= 0xFF ^ 1 << (y % 8);
 80013c6:	89fb      	ldrh	r3, [r7, #14]
 80013c8:	4a0f      	ldr	r2, [pc, #60]	; (8001408 <ST7565_Draw_pixel+0xc0>)
 80013ca:	5cd3      	ldrb	r3, [r2, r3]
 80013cc:	b25a      	sxtb	r2, r3
 80013ce:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80013d2:	4259      	negs	r1, r3
 80013d4:	f003 0307 	and.w	r3, r3, #7
 80013d8:	f001 0107 	and.w	r1, r1, #7
 80013dc:	bf58      	it	pl
 80013de:	424b      	negpl	r3, r1
 80013e0:	b21b      	sxth	r3, r3
 80013e2:	4619      	mov	r1, r3
 80013e4:	2301      	movs	r3, #1
 80013e6:	408b      	lsls	r3, r1
 80013e8:	b25b      	sxtb	r3, r3
 80013ea:	43db      	mvns	r3, r3
 80013ec:	b25b      	sxtb	r3, r3
 80013ee:	4013      	ands	r3, r2
 80013f0:	b25a      	sxtb	r2, r3
 80013f2:	89fb      	ldrh	r3, [r7, #14]
 80013f4:	b2d1      	uxtb	r1, r2
 80013f6:	4a04      	ldr	r2, [pc, #16]	; (8001408 <ST7565_Draw_pixel+0xc0>)
 80013f8:	54d1      	strb	r1, [r2, r3]
 80013fa:	e000      	b.n	80013fe <ST7565_Draw_pixel+0xb6>
    if (x >= SCREEN_WIDTH || x < 0 || y >= SCREEN_HEIGHT || y < 0) return;
 80013fc:	bf00      	nop
    }
}
 80013fe:	3714      	adds	r7, #20
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr
 8001408:	2000040c 	.word	0x2000040c

0800140c <ST7565_Update>:
	* @brief	 ( описание ):  вывод буффера кадра на дисплей
	* @param	( параметры ):	
	* @return  ( возвращает ):	
*******************************************************************************/
void ST7565_Update()
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
uint8_t x, y;
		
	ST7565_Select();
 8001412:	f7ff fe41 	bl	8001098 <ST7565_Select>

  	for (y = 0; y < 8; y++) {
 8001416:	2300      	movs	r3, #0
 8001418:	71bb      	strb	r3, [r7, #6]
 800141a:	e01d      	b.n	8001458 <ST7565_Update+0x4c>
		ST7565_SetX(0);	
 800141c:	2000      	movs	r0, #0
 800141e:	f7ff ff01 	bl	8001224 <ST7565_SetX>
		ST7565_SetY(y);
 8001422:	79bb      	ldrb	r3, [r7, #6]
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff ff18 	bl	800125a <ST7565_SetY>
		for (x = 0; x < 128; x++) {
 800142a:	2300      	movs	r3, #0
 800142c:	71fb      	strb	r3, [r7, #7]
 800142e:	e00c      	b.n	800144a <ST7565_Update+0x3e>
			ST7565_w_dats(&ST7565_buffer[x + 128 * y], 1);
 8001430:	79fa      	ldrb	r2, [r7, #7]
 8001432:	79bb      	ldrb	r3, [r7, #6]
 8001434:	01db      	lsls	r3, r3, #7
 8001436:	4413      	add	r3, r2
 8001438:	4a0d      	ldr	r2, [pc, #52]	; (8001470 <ST7565_Update+0x64>)
 800143a:	4413      	add	r3, r2
 800143c:	2101      	movs	r1, #1
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff fe56 	bl	80010f0 <ST7565_w_dats>
		for (x = 0; x < 128; x++) {
 8001444:	79fb      	ldrb	r3, [r7, #7]
 8001446:	3301      	adds	r3, #1
 8001448:	71fb      	strb	r3, [r7, #7]
 800144a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144e:	2b00      	cmp	r3, #0
 8001450:	daee      	bge.n	8001430 <ST7565_Update+0x24>
  	for (y = 0; y < 8; y++) {
 8001452:	79bb      	ldrb	r3, [r7, #6]
 8001454:	3301      	adds	r3, #1
 8001456:	71bb      	strb	r3, [r7, #6]
 8001458:	79bb      	ldrb	r3, [r7, #6]
 800145a:	2b07      	cmp	r3, #7
 800145c:	d9de      	bls.n	800141c <ST7565_Update+0x10>
		}
	}
	
	ST7565_Unselect();
 800145e:	f7ff fe27 	bl	80010b0 <ST7565_Unselect>
	HAL_Delay(100);
 8001462:	2064      	movs	r0, #100	; 0x64
 8001464:	f004 fda6 	bl	8005fb4 <HAL_Delay>
}
 8001468:	bf00      	nop
 800146a:	3708      	adds	r7, #8
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	2000040c 	.word	0x2000040c

08001474 <ST7565_DrawChar>:
	* @brief	 ( описание ):  функция записывает 1 символ в буфер кадра
	* @param	( параметры ):	координаты X(0 - 127)  Y(0 - 63), символ, шрифт, множитель, цвет 1 или 0
	* @return  ( возвращает ):	
*******************************************************************************/
void ST7565_DrawChar(int16_t x, int16_t y, unsigned char ch, FontDef_t* Font, uint8_t multiplier, uint8_t color)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b088      	sub	sp, #32
 8001478:	af00      	add	r7, sp, #0
 800147a:	607b      	str	r3, [r7, #4]
 800147c:	4603      	mov	r3, r0
 800147e:	81fb      	strh	r3, [r7, #14]
 8001480:	460b      	mov	r3, r1
 8001482:	81bb      	strh	r3, [r7, #12]
 8001484:	4613      	mov	r3, r2
 8001486:	72fb      	strb	r3, [r7, #11]
uint16_t i, j;
uint16_t b;
int16_t X = x, Y = y;
 8001488:	89fb      	ldrh	r3, [r7, #14]
 800148a:	833b      	strh	r3, [r7, #24]
 800148c:	89bb      	ldrh	r3, [r7, #12]
 800148e:	82fb      	strh	r3, [r7, #22]
int16_t xx, yy;
	
	if (multiplier < 1) multiplier = 1;
 8001490:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001494:	2b00      	cmp	r3, #0
 8001496:	d102      	bne.n	800149e <ST7565_DrawChar+0x2a>
 8001498:	2301      	movs	r3, #1
 800149a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	
	// Check available space in LCD
	if (SCREEN_WIDTH >= ( x + Font->FontWidth) || SCREEN_HEIGHT >= ( y + Font->FontHeight)) {
 800149e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	7812      	ldrb	r2, [r2, #0]
 80014a6:	4413      	add	r3, r2
 80014a8:	2b80      	cmp	r3, #128	; 0x80
 80014aa:	dd07      	ble.n	80014bc <ST7565_DrawChar+0x48>
 80014ac:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80014b0:	687a      	ldr	r2, [r7, #4]
 80014b2:	7852      	ldrb	r2, [r2, #1]
 80014b4:	4413      	add	r3, r2
 80014b6:	2b40      	cmp	r3, #64	; 0x40
 80014b8:	f300 8154 	bgt.w	8001764 <ST7565_DrawChar+0x2f0>
		// Go through font
		for (i = 0; i < Font->FontHeight; i++) {
 80014bc:	2300      	movs	r3, #0
 80014be:	83fb      	strh	r3, [r7, #30]
 80014c0:	e149      	b.n	8001756 <ST7565_DrawChar+0x2e2>
			if (ch < 127) {
 80014c2:	7afb      	ldrb	r3, [r7, #11]
 80014c4:	2b7e      	cmp	r3, #126	; 0x7e
 80014c6:	d80f      	bhi.n	80014e8 <ST7565_DrawChar+0x74>
				b = Font->data[(ch - 32) * Font->FontHeight + i];
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	f8d3 2002 	ldr.w	r2, [r3, #2]
 80014ce:	7afb      	ldrb	r3, [r7, #11]
 80014d0:	3b20      	subs	r3, #32
 80014d2:	6879      	ldr	r1, [r7, #4]
 80014d4:	7849      	ldrb	r1, [r1, #1]
 80014d6:	fb03 f101 	mul.w	r1, r3, r1
 80014da:	8bfb      	ldrh	r3, [r7, #30]
 80014dc:	440b      	add	r3, r1
 80014de:	005b      	lsls	r3, r3, #1
 80014e0:	4413      	add	r3, r2
 80014e2:	881b      	ldrh	r3, [r3, #0]
 80014e4:	837b      	strh	r3, [r7, #26]
 80014e6:	e0af      	b.n	8001648 <ST7565_DrawChar+0x1d4>
			} else if (ch > 191) {
 80014e8:	7afb      	ldrb	r3, [r7, #11]
 80014ea:	2bbf      	cmp	r3, #191	; 0xbf
 80014ec:	d90f      	bls.n	800150e <ST7565_DrawChar+0x9a>
				// +96 это так как латинские символы и знаки в шрифтах занимают 96 позиций
				// и если в шрифте который содержит сперва латиницу и спец символы и потом 
				// только кирилицу то нужно добавлять 95 если шрифт 
				// содержит только кирилицу то +96 не нужно
				b = Font->data[((ch - 192) + 96) * Font->FontHeight + i];
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	f8d3 2002 	ldr.w	r2, [r3, #2]
 80014f4:	7afb      	ldrb	r3, [r7, #11]
 80014f6:	3b60      	subs	r3, #96	; 0x60
 80014f8:	6879      	ldr	r1, [r7, #4]
 80014fa:	7849      	ldrb	r1, [r1, #1]
 80014fc:	fb03 f101 	mul.w	r1, r3, r1
 8001500:	8bfb      	ldrh	r3, [r7, #30]
 8001502:	440b      	add	r3, r1
 8001504:	005b      	lsls	r3, r3, #1
 8001506:	4413      	add	r3, r2
 8001508:	881b      	ldrh	r3, [r3, #0]
 800150a:	837b      	strh	r3, [r7, #26]
 800150c:	e09c      	b.n	8001648 <ST7565_DrawChar+0x1d4>
			} else if (ch == 168) {	// 168 символ по ASCII - Ё
 800150e:	7afb      	ldrb	r3, [r7, #11]
 8001510:	2ba8      	cmp	r3, #168	; 0xa8
 8001512:	d111      	bne.n	8001538 <ST7565_DrawChar+0xc4>
				// 160 эллемент ( символ Ё ) 
				b = Font->data[160 * Font->FontHeight + i];
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	f8d3 2002 	ldr.w	r2, [r3, #2]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	785b      	ldrb	r3, [r3, #1]
 800151e:	4619      	mov	r1, r3
 8001520:	460b      	mov	r3, r1
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	440b      	add	r3, r1
 8001526:	015b      	lsls	r3, r3, #5
 8001528:	4619      	mov	r1, r3
 800152a:	8bfb      	ldrh	r3, [r7, #30]
 800152c:	440b      	add	r3, r1
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	4413      	add	r3, r2
 8001532:	881b      	ldrh	r3, [r3, #0]
 8001534:	837b      	strh	r3, [r7, #26]
 8001536:	e087      	b.n	8001648 <ST7565_DrawChar+0x1d4>
			} else if (ch == 184) {	// 184 символ по ASCII - ё
 8001538:	7afb      	ldrb	r3, [r7, #11]
 800153a:	2bb8      	cmp	r3, #184	; 0xb8
 800153c:	d111      	bne.n	8001562 <ST7565_DrawChar+0xee>
				// 161 эллемент  ( символ ё ) 
				b = Font->data[161 * Font->FontHeight + i];
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	f8d3 1002 	ldr.w	r1, [r3, #2]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	785b      	ldrb	r3, [r3, #1]
 8001548:	461a      	mov	r2, r3
 800154a:	4613      	mov	r3, r2
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	4413      	add	r3, r2
 8001550:	015b      	lsls	r3, r3, #5
 8001552:	441a      	add	r2, r3
 8001554:	8bfb      	ldrh	r3, [r7, #30]
 8001556:	4413      	add	r3, r2
 8001558:	005b      	lsls	r3, r3, #1
 800155a:	440b      	add	r3, r1
 800155c:	881b      	ldrh	r3, [r3, #0]
 800155e:	837b      	strh	r3, [r7, #26]
 8001560:	e072      	b.n	8001648 <ST7565_DrawChar+0x1d4>
			} else if (ch == 170) {	// 168 символ по ASCII - Є
 8001562:	7afb      	ldrb	r3, [r7, #11]
 8001564:	2baa      	cmp	r3, #170	; 0xaa
 8001566:	d10f      	bne.n	8001588 <ST7565_DrawChar+0x114>
				// 162 эллемент ( символ Є )
				b = Font->data[162 * Font->FontHeight + i];
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	f8d3 2002 	ldr.w	r2, [r3, #2]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	785b      	ldrb	r3, [r3, #1]
 8001572:	4619      	mov	r1, r3
 8001574:	23a2      	movs	r3, #162	; 0xa2
 8001576:	fb03 f101 	mul.w	r1, r3, r1
 800157a:	8bfb      	ldrh	r3, [r7, #30]
 800157c:	440b      	add	r3, r1
 800157e:	005b      	lsls	r3, r3, #1
 8001580:	4413      	add	r3, r2
 8001582:	881b      	ldrh	r3, [r3, #0]
 8001584:	837b      	strh	r3, [r7, #26]
 8001586:	e05f      	b.n	8001648 <ST7565_DrawChar+0x1d4>
			} else if (ch == 175) {	// 184 символ по ASCII - Ї
 8001588:	7afb      	ldrb	r3, [r7, #11]
 800158a:	2baf      	cmp	r3, #175	; 0xaf
 800158c:	d10f      	bne.n	80015ae <ST7565_DrawChar+0x13a>
				// 163 эллемент  ( символ Ї )
				b = Font->data[163 * Font->FontHeight + i];
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	f8d3 2002 	ldr.w	r2, [r3, #2]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	785b      	ldrb	r3, [r3, #1]
 8001598:	4619      	mov	r1, r3
 800159a:	23a3      	movs	r3, #163	; 0xa3
 800159c:	fb03 f101 	mul.w	r1, r3, r1
 80015a0:	8bfb      	ldrh	r3, [r7, #30]
 80015a2:	440b      	add	r3, r1
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	4413      	add	r3, r2
 80015a8:	881b      	ldrh	r3, [r3, #0]
 80015aa:	837b      	strh	r3, [r7, #26]
 80015ac:	e04c      	b.n	8001648 <ST7565_DrawChar+0x1d4>
			} else if (ch == 178) {	// 168 символ по ASCII - І
 80015ae:	7afb      	ldrb	r3, [r7, #11]
 80015b0:	2bb2      	cmp	r3, #178	; 0xb2
 80015b2:	d10f      	bne.n	80015d4 <ST7565_DrawChar+0x160>
				// 164 эллемент ( символ І )
				b = Font->data[164 * Font->FontHeight + i];
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	f8d3 2002 	ldr.w	r2, [r3, #2]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	785b      	ldrb	r3, [r3, #1]
 80015be:	4619      	mov	r1, r3
 80015c0:	23a4      	movs	r3, #164	; 0xa4
 80015c2:	fb03 f101 	mul.w	r1, r3, r1
 80015c6:	8bfb      	ldrh	r3, [r7, #30]
 80015c8:	440b      	add	r3, r1
 80015ca:	005b      	lsls	r3, r3, #1
 80015cc:	4413      	add	r3, r2
 80015ce:	881b      	ldrh	r3, [r3, #0]
 80015d0:	837b      	strh	r3, [r7, #26]
 80015d2:	e039      	b.n	8001648 <ST7565_DrawChar+0x1d4>
			}
			else if (ch == 179) {	// 184 символ по ASCII - і
 80015d4:	7afb      	ldrb	r3, [r7, #11]
 80015d6:	2bb3      	cmp	r3, #179	; 0xb3
 80015d8:	d111      	bne.n	80015fe <ST7565_DrawChar+0x18a>
				// 165 эллемент  ( символ і )
				b = Font->data[165 * Font->FontHeight + i];
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	f8d3 2002 	ldr.w	r2, [r3, #2]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	785b      	ldrb	r3, [r3, #1]
 80015e4:	4619      	mov	r1, r3
 80015e6:	460b      	mov	r3, r1
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	440b      	add	r3, r1
 80015ec:	0159      	lsls	r1, r3, #5
 80015ee:	4419      	add	r1, r3
 80015f0:	8bfb      	ldrh	r3, [r7, #30]
 80015f2:	440b      	add	r3, r1
 80015f4:	005b      	lsls	r3, r3, #1
 80015f6:	4413      	add	r3, r2
 80015f8:	881b      	ldrh	r3, [r3, #0]
 80015fa:	837b      	strh	r3, [r7, #26]
 80015fc:	e024      	b.n	8001648 <ST7565_DrawChar+0x1d4>
			} else if (ch == 186) {	// 184 символ по ASCII - є
 80015fe:	7afb      	ldrb	r3, [r7, #11]
 8001600:	2bba      	cmp	r3, #186	; 0xba
 8001602:	d10f      	bne.n	8001624 <ST7565_DrawChar+0x1b0>
				// 166 эллемент  ( символ є )
				b = Font->data[166 * Font->FontHeight + i];
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	f8d3 2002 	ldr.w	r2, [r3, #2]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	785b      	ldrb	r3, [r3, #1]
 800160e:	4619      	mov	r1, r3
 8001610:	23a6      	movs	r3, #166	; 0xa6
 8001612:	fb03 f101 	mul.w	r1, r3, r1
 8001616:	8bfb      	ldrh	r3, [r7, #30]
 8001618:	440b      	add	r3, r1
 800161a:	005b      	lsls	r3, r3, #1
 800161c:	4413      	add	r3, r2
 800161e:	881b      	ldrh	r3, [r3, #0]
 8001620:	837b      	strh	r3, [r7, #26]
 8001622:	e011      	b.n	8001648 <ST7565_DrawChar+0x1d4>
			} else if (ch == 191) {	// 168 символ по ASCII - ї
 8001624:	7afb      	ldrb	r3, [r7, #11]
 8001626:	2bbf      	cmp	r3, #191	; 0xbf
 8001628:	d10e      	bne.n	8001648 <ST7565_DrawChar+0x1d4>
				// 167 эллемент ( символ ї )
				b = Font->data[167 * Font->FontHeight + i];
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	f8d3 2002 	ldr.w	r2, [r3, #2]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	785b      	ldrb	r3, [r3, #1]
 8001634:	4619      	mov	r1, r3
 8001636:	23a7      	movs	r3, #167	; 0xa7
 8001638:	fb03 f101 	mul.w	r1, r3, r1
 800163c:	8bfb      	ldrh	r3, [r7, #30]
 800163e:	440b      	add	r3, r1
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	4413      	add	r3, r2
 8001644:	881b      	ldrh	r3, [r3, #0]
 8001646:	837b      	strh	r3, [r7, #26]
			}
			//-----------------------------------------------------------------------------
			
			for (j = 0; j < Font->FontWidth; j++) {
 8001648:	2300      	movs	r3, #0
 800164a:	83bb      	strh	r3, [r7, #28]
 800164c:	e071      	b.n	8001732 <ST7565_DrawChar+0x2be>
				if ((b << j) & 0x8000) {
 800164e:	8b7a      	ldrh	r2, [r7, #26]
 8001650:	8bbb      	ldrh	r3, [r7, #28]
 8001652:	fa02 f303 	lsl.w	r3, r2, r3
 8001656:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d02d      	beq.n	80016ba <ST7565_DrawChar+0x246>
					for (yy = 0; yy < multiplier; yy++){
 800165e:	2300      	movs	r3, #0
 8001660:	827b      	strh	r3, [r7, #18]
 8001662:	e023      	b.n	80016ac <ST7565_DrawChar+0x238>
						for (xx = 0; xx < multiplier; xx++){
 8001664:	2300      	movs	r3, #0
 8001666:	82bb      	strh	r3, [r7, #20]
 8001668:	e014      	b.n	8001694 <ST7565_DrawChar+0x220>
							ST7565_Draw_pixel(X + xx, Y + yy, color);
 800166a:	8b3a      	ldrh	r2, [r7, #24]
 800166c:	8abb      	ldrh	r3, [r7, #20]
 800166e:	4413      	add	r3, r2
 8001670:	b29b      	uxth	r3, r3
 8001672:	b218      	sxth	r0, r3
 8001674:	8afa      	ldrh	r2, [r7, #22]
 8001676:	8a7b      	ldrh	r3, [r7, #18]
 8001678:	4413      	add	r3, r2
 800167a:	b29b      	uxth	r3, r3
 800167c:	b21b      	sxth	r3, r3
 800167e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8001682:	4619      	mov	r1, r3
 8001684:	f7ff fe60 	bl	8001348 <ST7565_Draw_pixel>
						for (xx = 0; xx < multiplier; xx++){
 8001688:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800168c:	b29b      	uxth	r3, r3
 800168e:	3301      	adds	r3, #1
 8001690:	b29b      	uxth	r3, r3
 8001692:	82bb      	strh	r3, [r7, #20]
 8001694:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001698:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800169c:	429a      	cmp	r2, r3
 800169e:	dbe4      	blt.n	800166a <ST7565_DrawChar+0x1f6>
					for (yy = 0; yy < multiplier; yy++){
 80016a0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80016a4:	b29b      	uxth	r3, r3
 80016a6:	3301      	adds	r3, #1
 80016a8:	b29b      	uxth	r3, r3
 80016aa:	827b      	strh	r3, [r7, #18]
 80016ac:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80016b0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80016b4:	429a      	cmp	r2, r3
 80016b6:	dbd5      	blt.n	8001664 <ST7565_DrawChar+0x1f0>
 80016b8:	e031      	b.n	800171e <ST7565_DrawChar+0x2aa>
						}
					}
				} else {// если фон очищать то оставляем если чтоб фон оставался старый то коментируем эту часть -------------
					for (yy = 0; yy < multiplier; yy++){
 80016ba:	2300      	movs	r3, #0
 80016bc:	827b      	strh	r3, [r7, #18]
 80016be:	e028      	b.n	8001712 <ST7565_DrawChar+0x29e>
						for (xx = 0; xx < multiplier; xx++){
 80016c0:	2300      	movs	r3, #0
 80016c2:	82bb      	strh	r3, [r7, #20]
 80016c4:	e019      	b.n	80016fa <ST7565_DrawChar+0x286>
							ST7565_Draw_pixel(X + xx, Y + yy, !color);
 80016c6:	8b3a      	ldrh	r2, [r7, #24]
 80016c8:	8abb      	ldrh	r3, [r7, #20]
 80016ca:	4413      	add	r3, r2
 80016cc:	b29b      	uxth	r3, r3
 80016ce:	b218      	sxth	r0, r3
 80016d0:	8afa      	ldrh	r2, [r7, #22]
 80016d2:	8a7b      	ldrh	r3, [r7, #18]
 80016d4:	4413      	add	r3, r2
 80016d6:	b29b      	uxth	r3, r3
 80016d8:	b219      	sxth	r1, r3
 80016da:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80016de:	2b00      	cmp	r3, #0
 80016e0:	bf0c      	ite	eq
 80016e2:	2301      	moveq	r3, #1
 80016e4:	2300      	movne	r3, #0
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	461a      	mov	r2, r3
 80016ea:	f7ff fe2d 	bl	8001348 <ST7565_Draw_pixel>
						for (xx = 0; xx < multiplier; xx++){
 80016ee:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80016f2:	b29b      	uxth	r3, r3
 80016f4:	3301      	adds	r3, #1
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	82bb      	strh	r3, [r7, #20]
 80016fa:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80016fe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001702:	429a      	cmp	r2, r3
 8001704:	dbdf      	blt.n	80016c6 <ST7565_DrawChar+0x252>
					for (yy = 0; yy < multiplier; yy++){
 8001706:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800170a:	b29b      	uxth	r3, r3
 800170c:	3301      	adds	r3, #1
 800170e:	b29b      	uxth	r3, r3
 8001710:	827b      	strh	r3, [r7, #18]
 8001712:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001716:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800171a:	429a      	cmp	r2, r3
 800171c:	dbd0      	blt.n	80016c0 <ST7565_DrawChar+0x24c>
						}
					}
				}
				//----------------------------------------------------------------------------------------------------
				X += multiplier;
 800171e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001722:	b29a      	uxth	r2, r3
 8001724:	8b3b      	ldrh	r3, [r7, #24]
 8001726:	4413      	add	r3, r2
 8001728:	b29b      	uxth	r3, r3
 800172a:	833b      	strh	r3, [r7, #24]
			for (j = 0; j < Font->FontWidth; j++) {
 800172c:	8bbb      	ldrh	r3, [r7, #28]
 800172e:	3301      	adds	r3, #1
 8001730:	83bb      	strh	r3, [r7, #28]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	b29b      	uxth	r3, r3
 8001738:	8bba      	ldrh	r2, [r7, #28]
 800173a:	429a      	cmp	r2, r3
 800173c:	d387      	bcc.n	800164e <ST7565_DrawChar+0x1da>
			}
			X = x;
 800173e:	89fb      	ldrh	r3, [r7, #14]
 8001740:	833b      	strh	r3, [r7, #24]
			Y += multiplier;
 8001742:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001746:	b29a      	uxth	r2, r3
 8001748:	8afb      	ldrh	r3, [r7, #22]
 800174a:	4413      	add	r3, r2
 800174c:	b29b      	uxth	r3, r3
 800174e:	82fb      	strh	r3, [r7, #22]
		for (i = 0; i < Font->FontHeight; i++) {
 8001750:	8bfb      	ldrh	r3, [r7, #30]
 8001752:	3301      	adds	r3, #1
 8001754:	83fb      	strh	r3, [r7, #30]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	785b      	ldrb	r3, [r3, #1]
 800175a:	b29b      	uxth	r3, r3
 800175c:	8bfa      	ldrh	r2, [r7, #30]
 800175e:	429a      	cmp	r2, r3
 8001760:	f4ff aeaf 	bcc.w	80014c2 <ST7565_DrawChar+0x4e>
		}
		
	}
}
 8001764:	bf00      	nop
 8001766:	3720      	adds	r7, #32
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}

0800176c <ST7565_Print>:
 * @brief	 ( описание ):  функция записывает строку в буфер кадра ( поддерживает кириллицу ( в том числе и Укр. язык) и латиницу
 * @param	( параметры ):	координаты X(0 - 127)  Y(0 - 63), символ, шрифт, множитель, цвет 1 или 0
 * @return  ( возвращает ):
*******************************************************************************/
void ST7565_Print(int16_t x, int16_t y, char *str, FontDef_t *Font, uint8_t multiplier, uint8_t color)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b088      	sub	sp, #32
 8001770:	af02      	add	r7, sp, #8
 8001772:	60ba      	str	r2, [r7, #8]
 8001774:	607b      	str	r3, [r7, #4]
 8001776:	4603      	mov	r3, r0
 8001778:	81fb      	strh	r3, [r7, #14]
 800177a:	460b      	mov	r3, r1
 800177c:	81bb      	strh	r3, [r7, #12]
unsigned char buff_char;
uint16_t len = strlen(str);
 800177e:	68b8      	ldr	r0, [r7, #8]
 8001780:	f7fe fd26 	bl	80001d0 <strlen>
 8001784:	4603      	mov	r3, r0
 8001786:	82bb      	strh	r3, [r7, #20]

	if (multiplier < 1) multiplier = 1;
 8001788:	f897 3020 	ldrb.w	r3, [r7, #32]
 800178c:	2b00      	cmp	r3, #0
 800178e:	f040 809c 	bne.w	80018ca <ST7565_Print+0x15e>
 8001792:	2301      	movs	r3, #1
 8001794:	f887 3020 	strb.w	r3, [r7, #32]
	
	while (len--) {
 8001798:	e097      	b.n	80018ca <ST7565_Print+0x15e>
		//---------------------------------------------------------------------
		// проверка на кириллицу UTF-8, если латиница то пропускаем if
		// Расширенные символы ASCII Win-1251 кириллица (код символа 128-255)
		// проверяем первый байт из двух ( так как UTF-8 ето два байта )
		// если он больше либо равен 0xC0 ( первый байт в кириллеце будет равен 0xD0 либо 0xD1 именно в алфавите )
		if ( (uint8_t)*str >= 0xC0 ) {	// код 0xC0 соответствует символу кириллица 'A' по ASCII Win-1251
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	2bbf      	cmp	r3, #191	; 0xbf
 80017a0:	d974      	bls.n	800188c <ST7565_Print+0x120>
			// проверяем какой именно байт первый 0xD0 либо 0xD1
			switch ((uint8_t)*str) {
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	2bd0      	cmp	r3, #208	; 0xd0
 80017a8:	d002      	beq.n	80017b0 <ST7565_Print+0x44>
 80017aa:	2bd1      	cmp	r3, #209	; 0xd1
 80017ac:	d02c      	beq.n	8001808 <ST7565_Print+0x9c>
 80017ae:	e05b      	b.n	8001868 <ST7565_Print+0xfc>
				case 0xD0:
				//{
					// увеличиваем массив так как нам нужен второй байт
					str++;
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	3301      	adds	r3, #1
 80017b4:	60bb      	str	r3, [r7, #8]
					// проверяем второй байт там сам символ
					if ((uint8_t)*str == 0x81) { buff_char = 0xA8; break; }		// байт символа Ё ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	2b81      	cmp	r3, #129	; 0x81
 80017bc:	d102      	bne.n	80017c4 <ST7565_Print+0x58>
 80017be:	23a8      	movs	r3, #168	; 0xa8
 80017c0:	75fb      	strb	r3, [r7, #23]
 80017c2:	e051      	b.n	8001868 <ST7565_Print+0xfc>
					else if ((uint8_t)*str >= 0x90 && (uint8_t)*str <= 0xBF) { buff_char = (*str) + 0x30; }	// байт символов А...Я а...п  делаем здвиг на +48
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	2b8f      	cmp	r3, #143	; 0x8f
 80017ca:	d908      	bls.n	80017de <ST7565_Print+0x72>
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	2bbf      	cmp	r3, #191	; 0xbf
 80017d2:	d804      	bhi.n	80017de <ST7565_Print+0x72>
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	3330      	adds	r3, #48	; 0x30
 80017da:	75fb      	strb	r3, [r7, #23]
					else if ((uint8_t)*str == 0x84) { buff_char = 0xAA; break; }		// байт символа Є ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					else if ((uint8_t)*str == 0x86) { buff_char = 0xB2; break; }		// байт символа І ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					else if ((uint8_t)*str == 0x87) { buff_char = 0xAF; break; }		// байт символа Ї ( если нужнф еще символы добавляем тут и в функции DrawChar() )
				break;
 80017dc:	e041      	b.n	8001862 <ST7565_Print+0xf6>
					else if ((uint8_t)*str == 0x84) { buff_char = 0xAA; break; }		// байт символа Є ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 80017de:	68bb      	ldr	r3, [r7, #8]
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	2b84      	cmp	r3, #132	; 0x84
 80017e4:	d102      	bne.n	80017ec <ST7565_Print+0x80>
 80017e6:	23aa      	movs	r3, #170	; 0xaa
 80017e8:	75fb      	strb	r3, [r7, #23]
 80017ea:	e03d      	b.n	8001868 <ST7565_Print+0xfc>
					else if ((uint8_t)*str == 0x86) { buff_char = 0xB2; break; }		// байт символа І ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	2b86      	cmp	r3, #134	; 0x86
 80017f2:	d102      	bne.n	80017fa <ST7565_Print+0x8e>
 80017f4:	23b2      	movs	r3, #178	; 0xb2
 80017f6:	75fb      	strb	r3, [r7, #23]
 80017f8:	e036      	b.n	8001868 <ST7565_Print+0xfc>
					else if ((uint8_t)*str == 0x87) { buff_char = 0xAF; break; }		// байт символа Ї ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	2b87      	cmp	r3, #135	; 0x87
 8001800:	d12f      	bne.n	8001862 <ST7565_Print+0xf6>
 8001802:	23af      	movs	r3, #175	; 0xaf
 8001804:	75fb      	strb	r3, [r7, #23]
 8001806:	e02f      	b.n	8001868 <ST7565_Print+0xfc>
				//}
				case 0xD1:
				//{
					// увеличиваем массив так как нам нужен второй байт
					str++;
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	3301      	adds	r3, #1
 800180c:	60bb      	str	r3, [r7, #8]
					// проверяем второй байт там сам символ
					if ((uint8_t)*str == 0x91) { buff_char = 0xB8; break; }		// байт символа ё ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	2b91      	cmp	r3, #145	; 0x91
 8001814:	d102      	bne.n	800181c <ST7565_Print+0xb0>
 8001816:	23b8      	movs	r3, #184	; 0xb8
 8001818:	75fb      	strb	r3, [r7, #23]
 800181a:	e025      	b.n	8001868 <ST7565_Print+0xfc>
					else if ((uint8_t)*str >= 0x80 && (uint8_t)*str <= 0x8F) { buff_char = (*str) + 0x70; }	// байт символов п...я	елаем здвиг на +112
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	b25b      	sxtb	r3, r3
 8001822:	2b00      	cmp	r3, #0
 8001824:	da08      	bge.n	8001838 <ST7565_Print+0xcc>
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	2b8f      	cmp	r3, #143	; 0x8f
 800182c:	d804      	bhi.n	8001838 <ST7565_Print+0xcc>
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	3370      	adds	r3, #112	; 0x70
 8001834:	75fb      	strb	r3, [r7, #23]
					else if ((uint8_t)*str == 0x94) { buff_char = 0xBA; break; }		// байт символа є ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					else if ((uint8_t)*str == 0x96) { buff_char = 0xB3; break; }		// байт символа і ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					else if ((uint8_t)*str == 0x97) { buff_char = 0xBF; break; }		// байт символа ї ( если нужнф еще символы добавляем тут и в функции DrawChar() )
				break;
 8001836:	e016      	b.n	8001866 <ST7565_Print+0xfa>
					else if ((uint8_t)*str == 0x94) { buff_char = 0xBA; break; }		// байт символа є ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	2b94      	cmp	r3, #148	; 0x94
 800183e:	d102      	bne.n	8001846 <ST7565_Print+0xda>
 8001840:	23ba      	movs	r3, #186	; 0xba
 8001842:	75fb      	strb	r3, [r7, #23]
 8001844:	e010      	b.n	8001868 <ST7565_Print+0xfc>
					else if ((uint8_t)*str == 0x96) { buff_char = 0xB3; break; }		// байт символа і ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	2b96      	cmp	r3, #150	; 0x96
 800184c:	d102      	bne.n	8001854 <ST7565_Print+0xe8>
 800184e:	23b3      	movs	r3, #179	; 0xb3
 8001850:	75fb      	strb	r3, [r7, #23]
 8001852:	e009      	b.n	8001868 <ST7565_Print+0xfc>
					else if ((uint8_t)*str == 0x97) { buff_char = 0xBF; break; }		// байт символа ї ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	2b97      	cmp	r3, #151	; 0x97
 800185a:	d104      	bne.n	8001866 <ST7565_Print+0xfa>
 800185c:	23bf      	movs	r3, #191	; 0xbf
 800185e:	75fb      	strb	r3, [r7, #23]
 8001860:	e002      	b.n	8001868 <ST7565_Print+0xfc>
				break;
 8001862:	bf00      	nop
 8001864:	e000      	b.n	8001868 <ST7565_Print+0xfc>
				break;
 8001866:	bf00      	nop
				//}
			}
			// уменьшаем еще переменную так как израсходывали 2 байта для кириллицы
			len--;
 8001868:	8abb      	ldrh	r3, [r7, #20]
 800186a:	3b01      	subs	r3, #1
 800186c:	82bb      	strh	r3, [r7, #20]
			ST7565_DrawChar(x, y, buff_char, Font, multiplier, color);
 800186e:	7dfa      	ldrb	r2, [r7, #23]
 8001870:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8001874:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8001878:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800187c:	9301      	str	r3, [sp, #4]
 800187e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001882:	9300      	str	r3, [sp, #0]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	f7ff fdf5 	bl	8001474 <ST7565_DrawChar>
 800188a:	e00e      	b.n	80018aa <ST7565_Print+0x13e>
		} else {
			ST7565_DrawChar(x, y, *str, Font, multiplier, color);
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	781a      	ldrb	r2, [r3, #0]
 8001890:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8001894:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8001898:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800189c:	9301      	str	r3, [sp, #4]
 800189e:	f897 3020 	ldrb.w	r3, [r7, #32]
 80018a2:	9300      	str	r3, [sp, #0]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	f7ff fde5 	bl	8001474 <ST7565_DrawChar>
		}
		
		x += (Font->FontWidth * multiplier);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	b29a      	uxth	r2, r3
 80018b0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80018b4:	b29b      	uxth	r3, r3
 80018b6:	fb12 f303 	smulbb	r3, r2, r3
 80018ba:	b29a      	uxth	r2, r3
 80018bc:	89fb      	ldrh	r3, [r7, #14]
 80018be:	4413      	add	r3, r2
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	81fb      	strh	r3, [r7, #14]
		str++;
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	3301      	adds	r3, #1
 80018c8:	60bb      	str	r3, [r7, #8]
	while (len--) {
 80018ca:	8abb      	ldrh	r3, [r7, #20]
 80018cc:	1e5a      	subs	r2, r3, #1
 80018ce:	82ba      	strh	r2, [r7, #20]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	f47f af62 	bne.w	800179a <ST7565_Print+0x2e>
	}
}
 80018d6:	bf00      	nop
 80018d8:	bf00      	nop
 80018da:	3718      	adds	r7, #24
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}

080018e0 <ST7565_DrawLine>:
	* @param	( параметры ):	координаты начальной точки и конечной и цвет 0 или 1
								X(0 - 127)  Y(0 - 63)
	* @return  ( возвращает ):	
*******************************************************************************/
void ST7565_DrawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint8_t c)
{
 80018e0:	b590      	push	{r4, r7, lr}
 80018e2:	b087      	sub	sp, #28
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	4604      	mov	r4, r0
 80018e8:	4608      	mov	r0, r1
 80018ea:	4611      	mov	r1, r2
 80018ec:	461a      	mov	r2, r3
 80018ee:	4623      	mov	r3, r4
 80018f0:	80fb      	strh	r3, [r7, #6]
 80018f2:	4603      	mov	r3, r0
 80018f4:	80bb      	strh	r3, [r7, #4]
 80018f6:	460b      	mov	r3, r1
 80018f8:	807b      	strh	r3, [r7, #2]
 80018fa:	4613      	mov	r3, r2
 80018fc:	803b      	strh	r3, [r7, #0]
int16_t dx, dy, sx, sy, err, e2, i, tmp;
	
	/* Check for overflow */
	if (x0 >= SCREEN_WIDTH)  x0 = SCREEN_WIDTH  - 1;
 80018fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001902:	2b7f      	cmp	r3, #127	; 0x7f
 8001904:	dd01      	ble.n	800190a <ST7565_DrawLine+0x2a>
 8001906:	237f      	movs	r3, #127	; 0x7f
 8001908:	80fb      	strh	r3, [r7, #6]
	if (x1 >= SCREEN_WIDTH)  x1 = SCREEN_WIDTH  - 1;
 800190a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800190e:	2b7f      	cmp	r3, #127	; 0x7f
 8001910:	dd01      	ble.n	8001916 <ST7565_DrawLine+0x36>
 8001912:	237f      	movs	r3, #127	; 0x7f
 8001914:	807b      	strh	r3, [r7, #2]
	if (y0 >= SCREEN_HEIGHT) y0 = SCREEN_HEIGHT - 1;
 8001916:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800191a:	2b3f      	cmp	r3, #63	; 0x3f
 800191c:	dd01      	ble.n	8001922 <ST7565_DrawLine+0x42>
 800191e:	233f      	movs	r3, #63	; 0x3f
 8001920:	80bb      	strh	r3, [r7, #4]
	if (y1 >= SCREEN_HEIGHT) y1 = SCREEN_HEIGHT - 1;
 8001922:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001926:	2b3f      	cmp	r3, #63	; 0x3f
 8001928:	dd01      	ble.n	800192e <ST7565_DrawLine+0x4e>
 800192a:	233f      	movs	r3, #63	; 0x3f
 800192c:	803b      	strh	r3, [r7, #0]
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 800192e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001932:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001936:	429a      	cmp	r2, r3
 8001938:	da05      	bge.n	8001946 <ST7565_DrawLine+0x66>
 800193a:	887a      	ldrh	r2, [r7, #2]
 800193c:	88fb      	ldrh	r3, [r7, #6]
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	b29b      	uxth	r3, r3
 8001942:	b21b      	sxth	r3, r3
 8001944:	e004      	b.n	8001950 <ST7565_DrawLine+0x70>
 8001946:	88fa      	ldrh	r2, [r7, #6]
 8001948:	887b      	ldrh	r3, [r7, #2]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	b29b      	uxth	r3, r3
 800194e:	b21b      	sxth	r3, r3
 8001950:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 8001952:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001956:	f9b7 3000 	ldrsh.w	r3, [r7]
 800195a:	429a      	cmp	r2, r3
 800195c:	da05      	bge.n	800196a <ST7565_DrawLine+0x8a>
 800195e:	883a      	ldrh	r2, [r7, #0]
 8001960:	88bb      	ldrh	r3, [r7, #4]
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	b29b      	uxth	r3, r3
 8001966:	b21b      	sxth	r3, r3
 8001968:	e004      	b.n	8001974 <ST7565_DrawLine+0x94>
 800196a:	88ba      	ldrh	r2, [r7, #4]
 800196c:	883b      	ldrh	r3, [r7, #0]
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	b29b      	uxth	r3, r3
 8001972:	b21b      	sxth	r3, r3
 8001974:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1; 
 8001976:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800197a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800197e:	429a      	cmp	r2, r3
 8001980:	da01      	bge.n	8001986 <ST7565_DrawLine+0xa6>
 8001982:	2301      	movs	r3, #1
 8001984:	e001      	b.n	800198a <ST7565_DrawLine+0xaa>
 8001986:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800198a:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1; 
 800198c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001990:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001994:	429a      	cmp	r2, r3
 8001996:	da01      	bge.n	800199c <ST7565_DrawLine+0xbc>
 8001998:	2301      	movs	r3, #1
 800199a:	e001      	b.n	80019a0 <ST7565_DrawLine+0xc0>
 800199c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019a0:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2; 
 80019a2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80019a6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80019aa:	429a      	cmp	r2, r3
 80019ac:	dd06      	ble.n	80019bc <ST7565_DrawLine+0xdc>
 80019ae:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80019b2:	0fda      	lsrs	r2, r3, #31
 80019b4:	4413      	add	r3, r2
 80019b6:	105b      	asrs	r3, r3, #1
 80019b8:	b21b      	sxth	r3, r3
 80019ba:	e006      	b.n	80019ca <ST7565_DrawLine+0xea>
 80019bc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80019c0:	0fda      	lsrs	r2, r3, #31
 80019c2:	4413      	add	r3, r2
 80019c4:	105b      	asrs	r3, r3, #1
 80019c6:	425b      	negs	r3, r3
 80019c8:	b21b      	sxth	r3, r3
 80019ca:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 80019cc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d130      	bne.n	8001a36 <ST7565_DrawLine+0x156>
		if (y1 < y0) {
 80019d4:	f9b7 2000 	ldrsh.w	r2, [r7]
 80019d8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80019dc:	429a      	cmp	r2, r3
 80019de:	da05      	bge.n	80019ec <ST7565_DrawLine+0x10c>
			tmp = y1;
 80019e0:	883b      	ldrh	r3, [r7, #0]
 80019e2:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 80019e4:	88bb      	ldrh	r3, [r7, #4]
 80019e6:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 80019e8:	893b      	ldrh	r3, [r7, #8]
 80019ea:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 80019ec:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80019f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	da05      	bge.n	8001a04 <ST7565_DrawLine+0x124>
			tmp = x1;
 80019f8:	887b      	ldrh	r3, [r7, #2]
 80019fa:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 80019fc:	88fb      	ldrh	r3, [r7, #6]
 80019fe:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8001a00:	893b      	ldrh	r3, [r7, #8]
 8001a02:	80fb      	strh	r3, [r7, #6]
		}
		
		// Vertical line
		for (i = y0; i <= y1; i++) ST7565_Draw_pixel(x0, i, c);
 8001a04:	88bb      	ldrh	r3, [r7, #4]
 8001a06:	82bb      	strh	r3, [r7, #20]
 8001a08:	e00e      	b.n	8001a28 <ST7565_DrawLine+0x148>
 8001a0a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001a0e:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 8001a12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7ff fc96 	bl	8001348 <ST7565_Draw_pixel>
 8001a1c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001a20:	b29b      	uxth	r3, r3
 8001a22:	3301      	adds	r3, #1
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	82bb      	strh	r3, [r7, #20]
 8001a28:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001a2c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	ddea      	ble.n	8001a0a <ST7565_DrawLine+0x12a>
		
		return;
 8001a34:	e06e      	b.n	8001b14 <ST7565_DrawLine+0x234>
	}
	
	if (dy == 0) {
 8001a36:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d130      	bne.n	8001aa0 <ST7565_DrawLine+0x1c0>
		if (y1 < y0) {
 8001a3e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001a42:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001a46:	429a      	cmp	r2, r3
 8001a48:	da05      	bge.n	8001a56 <ST7565_DrawLine+0x176>
			tmp = y1;
 8001a4a:	883b      	ldrh	r3, [r7, #0]
 8001a4c:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8001a4e:	88bb      	ldrh	r3, [r7, #4]
 8001a50:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8001a52:	893b      	ldrh	r3, [r7, #8]
 8001a54:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 8001a56:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001a5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	da05      	bge.n	8001a6e <ST7565_DrawLine+0x18e>
			tmp = x1;
 8001a62:	887b      	ldrh	r3, [r7, #2]
 8001a64:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8001a66:	88fb      	ldrh	r3, [r7, #6]
 8001a68:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8001a6a:	893b      	ldrh	r3, [r7, #8]
 8001a6c:	80fb      	strh	r3, [r7, #6]
		}
		
		// Horizontal line
		for (i = x0; i <= x1; i++) ST7565_Draw_pixel(i, y0, c);
 8001a6e:	88fb      	ldrh	r3, [r7, #6]
 8001a70:	82bb      	strh	r3, [r7, #20]
 8001a72:	e00e      	b.n	8001a92 <ST7565_DrawLine+0x1b2>
 8001a74:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001a78:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001a7c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7ff fc61 	bl	8001348 <ST7565_Draw_pixel>
 8001a86:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001a8a:	b29b      	uxth	r3, r3
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	b29b      	uxth	r3, r3
 8001a90:	82bb      	strh	r3, [r7, #20]
 8001a92:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001a96:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	ddea      	ble.n	8001a74 <ST7565_DrawLine+0x194>
		
		return;
 8001a9e:	e039      	b.n	8001b14 <ST7565_DrawLine+0x234>
	}
	
	while (1) {
		ST7565_Draw_pixel(x0, y0, c);
 8001aa0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001aa4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001aa8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7ff fc4b 	bl	8001348 <ST7565_Draw_pixel>
		if (x0 == x1 && y0 == y1) break;
 8001ab2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001ab6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d105      	bne.n	8001aca <ST7565_DrawLine+0x1ea>
 8001abe:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001ac2:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d023      	beq.n	8001b12 <ST7565_DrawLine+0x232>

		e2 = err; 
 8001aca:	8afb      	ldrh	r3, [r7, #22]
 8001acc:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 8001ace:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001ad2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001ad6:	425b      	negs	r3, r3
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	dd09      	ble.n	8001af0 <ST7565_DrawLine+0x210>
			err -= dy;
 8001adc:	8afa      	ldrh	r2, [r7, #22]
 8001ade:	8a3b      	ldrh	r3, [r7, #16]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 8001ae6:	88fa      	ldrh	r2, [r7, #6]
 8001ae8:	89fb      	ldrh	r3, [r7, #14]
 8001aea:	4413      	add	r3, r2
 8001aec:	b29b      	uxth	r3, r3
 8001aee:	80fb      	strh	r3, [r7, #6]
		} 
		if (e2 < dy) {
 8001af0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001af4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	dad1      	bge.n	8001aa0 <ST7565_DrawLine+0x1c0>
			err += dx;
 8001afc:	8afa      	ldrh	r2, [r7, #22]
 8001afe:	8a7b      	ldrh	r3, [r7, #18]
 8001b00:	4413      	add	r3, r2
 8001b02:	b29b      	uxth	r3, r3
 8001b04:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 8001b06:	88ba      	ldrh	r2, [r7, #4]
 8001b08:	89bb      	ldrh	r3, [r7, #12]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	b29b      	uxth	r3, r3
 8001b0e:	80bb      	strh	r3, [r7, #4]
		ST7565_Draw_pixel(x0, y0, c);
 8001b10:	e7c6      	b.n	8001aa0 <ST7565_DrawLine+0x1c0>
		if (x0 == x1 && y0 == y1) break;
 8001b12:	bf00      	nop
		} 
	}
}
 8001b14:	371c      	adds	r7, #28
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd90      	pop	{r4, r7, pc}

08001b1a <ST7565_DrawRectangle>:
	* @param	( параметры ):	координаты верхнего левого и ширина и высота и цвет
								X(0 - 127)  Y(0 - 63)
	* @return  ( возвращает ):	
*******************************************************************************/
void ST7565_DrawRectangle(int16_t x, int16_t y, int16_t w, int16_t h, uint8_t c)
{
 8001b1a:	b590      	push	{r4, r7, lr}
 8001b1c:	b085      	sub	sp, #20
 8001b1e:	af02      	add	r7, sp, #8
 8001b20:	4604      	mov	r4, r0
 8001b22:	4608      	mov	r0, r1
 8001b24:	4611      	mov	r1, r2
 8001b26:	461a      	mov	r2, r3
 8001b28:	4623      	mov	r3, r4
 8001b2a:	80fb      	strh	r3, [r7, #6]
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	80bb      	strh	r3, [r7, #4]
 8001b30:	460b      	mov	r3, r1
 8001b32:	807b      	strh	r3, [r7, #2]
 8001b34:	4613      	mov	r3, r2
 8001b36:	803b      	strh	r3, [r7, #0]
	// Check input parameters
	if (x >= SCREEN_WIDTH || y >= SCREEN_HEIGHT) return;
 8001b38:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b3c:	2b7f      	cmp	r3, #127	; 0x7f
 8001b3e:	dc6a      	bgt.n	8001c16 <ST7565_DrawRectangle+0xfc>
 8001b40:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001b44:	2b3f      	cmp	r3, #63	; 0x3f
 8001b46:	dc66      	bgt.n	8001c16 <ST7565_DrawRectangle+0xfc>
	
	// Check width and height
	if ((x + w) >= SCREEN_WIDTH)  w = SCREEN_WIDTH  - x;
 8001b48:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001b4c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001b50:	4413      	add	r3, r2
 8001b52:	2b7f      	cmp	r3, #127	; 0x7f
 8001b54:	dd04      	ble.n	8001b60 <ST7565_DrawRectangle+0x46>
 8001b56:	88fb      	ldrh	r3, [r7, #6]
 8001b58:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001b5c:	b29b      	uxth	r3, r3
 8001b5e:	807b      	strh	r3, [r7, #2]
	if ((y + h) >= SCREEN_HEIGHT) h = SCREEN_HEIGHT - y;
 8001b60:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001b64:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001b68:	4413      	add	r3, r2
 8001b6a:	2b3f      	cmp	r3, #63	; 0x3f
 8001b6c:	dd04      	ble.n	8001b78 <ST7565_DrawRectangle+0x5e>
 8001b6e:	88bb      	ldrh	r3, [r7, #4]
 8001b70:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	803b      	strh	r3, [r7, #0]
	
	// Draw 4 lines
	ST7565_DrawLine(x, y, x + w, y, c);         // Top line
 8001b78:	88fa      	ldrh	r2, [r7, #6]
 8001b7a:	887b      	ldrh	r3, [r7, #2]
 8001b7c:	4413      	add	r3, r2
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	b21a      	sxth	r2, r3
 8001b82:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8001b86:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001b8a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001b8e:	7e3b      	ldrb	r3, [r7, #24]
 8001b90:	9300      	str	r3, [sp, #0]
 8001b92:	4623      	mov	r3, r4
 8001b94:	f7ff fea4 	bl	80018e0 <ST7565_DrawLine>
	ST7565_DrawLine(x, y + h, x + w, y + h, c); // Bottom line
 8001b98:	88ba      	ldrh	r2, [r7, #4]
 8001b9a:	883b      	ldrh	r3, [r7, #0]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	b219      	sxth	r1, r3
 8001ba2:	88fa      	ldrh	r2, [r7, #6]
 8001ba4:	887b      	ldrh	r3, [r7, #2]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	b21c      	sxth	r4, r3
 8001bac:	88ba      	ldrh	r2, [r7, #4]
 8001bae:	883b      	ldrh	r3, [r7, #0]
 8001bb0:	4413      	add	r3, r2
 8001bb2:	b29b      	uxth	r3, r3
 8001bb4:	b21a      	sxth	r2, r3
 8001bb6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001bba:	7e3b      	ldrb	r3, [r7, #24]
 8001bbc:	9300      	str	r3, [sp, #0]
 8001bbe:	4613      	mov	r3, r2
 8001bc0:	4622      	mov	r2, r4
 8001bc2:	f7ff fe8d 	bl	80018e0 <ST7565_DrawLine>
	ST7565_DrawLine(x, y, x, y + h, c);         // Left line
 8001bc6:	88ba      	ldrh	r2, [r7, #4]
 8001bc8:	883b      	ldrh	r3, [r7, #0]
 8001bca:	4413      	add	r3, r2
 8001bcc:	b29b      	uxth	r3, r3
 8001bce:	b21c      	sxth	r4, r3
 8001bd0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001bd4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001bd8:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001bdc:	7e3b      	ldrb	r3, [r7, #24]
 8001bde:	9300      	str	r3, [sp, #0]
 8001be0:	4623      	mov	r3, r4
 8001be2:	f7ff fe7d 	bl	80018e0 <ST7565_DrawLine>
	ST7565_DrawLine(x + w, y, x + w, y + h, c); // Right line
 8001be6:	88fa      	ldrh	r2, [r7, #6]
 8001be8:	887b      	ldrh	r3, [r7, #2]
 8001bea:	4413      	add	r3, r2
 8001bec:	b29b      	uxth	r3, r3
 8001bee:	b218      	sxth	r0, r3
 8001bf0:	88fa      	ldrh	r2, [r7, #6]
 8001bf2:	887b      	ldrh	r3, [r7, #2]
 8001bf4:	4413      	add	r3, r2
 8001bf6:	b29b      	uxth	r3, r3
 8001bf8:	b21c      	sxth	r4, r3
 8001bfa:	88ba      	ldrh	r2, [r7, #4]
 8001bfc:	883b      	ldrh	r3, [r7, #0]
 8001bfe:	4413      	add	r3, r2
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	b21a      	sxth	r2, r3
 8001c04:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001c08:	7e3b      	ldrb	r3, [r7, #24]
 8001c0a:	9300      	str	r3, [sp, #0]
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	4622      	mov	r2, r4
 8001c10:	f7ff fe66 	bl	80018e0 <ST7565_DrawLine>
 8001c14:	e000      	b.n	8001c18 <ST7565_DrawRectangle+0xfe>
	if (x >= SCREEN_WIDTH || y >= SCREEN_HEIGHT) return;
 8001c16:	bf00      	nop
}
 8001c18:	370c      	adds	r7, #12
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd90      	pop	{r4, r7, pc}

08001c1e <ST7565_DrawFilledRectangle>:
	* @param	( параметры ):	координаты верхнего левого и ширина и высота и цвет
								X(0 - 127)  Y(0 - 63)
	* @return  ( возвращает ):	
*******************************************************************************/
void ST7565_DrawFilledRectangle(int16_t x, int16_t y, int16_t w, int16_t h, uint8_t c)
{
 8001c1e:	b590      	push	{r4, r7, lr}
 8001c20:	b087      	sub	sp, #28
 8001c22:	af02      	add	r7, sp, #8
 8001c24:	4604      	mov	r4, r0
 8001c26:	4608      	mov	r0, r1
 8001c28:	4611      	mov	r1, r2
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	4623      	mov	r3, r4
 8001c2e:	80fb      	strh	r3, [r7, #6]
 8001c30:	4603      	mov	r3, r0
 8001c32:	80bb      	strh	r3, [r7, #4]
 8001c34:	460b      	mov	r3, r1
 8001c36:	807b      	strh	r3, [r7, #2]
 8001c38:	4613      	mov	r3, r2
 8001c3a:	803b      	strh	r3, [r7, #0]
uint8_t i;
	
	// Check input parameters
	if (x >= SCREEN_WIDTH || y >= SCREEN_HEIGHT) return;
 8001c3c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c40:	2b7f      	cmp	r3, #127	; 0x7f
 8001c42:	dc41      	bgt.n	8001cc8 <ST7565_DrawFilledRectangle+0xaa>
 8001c44:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001c48:	2b3f      	cmp	r3, #63	; 0x3f
 8001c4a:	dc3d      	bgt.n	8001cc8 <ST7565_DrawFilledRectangle+0xaa>
	
	// Check width and height
	if ((x + w) >= SCREEN_WIDTH)  w = SCREEN_WIDTH  - x;
 8001c4c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001c50:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001c54:	4413      	add	r3, r2
 8001c56:	2b7f      	cmp	r3, #127	; 0x7f
 8001c58:	dd04      	ble.n	8001c64 <ST7565_DrawFilledRectangle+0x46>
 8001c5a:	88fb      	ldrh	r3, [r7, #6]
 8001c5c:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001c60:	b29b      	uxth	r3, r3
 8001c62:	807b      	strh	r3, [r7, #2]
	if ((y + h) >= SCREEN_HEIGHT) h = SCREEN_HEIGHT - y;
 8001c64:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001c68:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001c6c:	4413      	add	r3, r2
 8001c6e:	2b3f      	cmp	r3, #63	; 0x3f
 8001c70:	dd04      	ble.n	8001c7c <ST7565_DrawFilledRectangle+0x5e>
 8001c72:	88bb      	ldrh	r3, [r7, #4]
 8001c74:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8001c78:	b29b      	uxth	r3, r3
 8001c7a:	803b      	strh	r3, [r7, #0]
	
	for (i = 0; i <= h; i++) ST7565_DrawLine(x, y + i, x + w, y + i, c);
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	73fb      	strb	r3, [r7, #15]
 8001c80:	e01c      	b.n	8001cbc <ST7565_DrawFilledRectangle+0x9e>
 8001c82:	7bfb      	ldrb	r3, [r7, #15]
 8001c84:	b29a      	uxth	r2, r3
 8001c86:	88bb      	ldrh	r3, [r7, #4]
 8001c88:	4413      	add	r3, r2
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	b219      	sxth	r1, r3
 8001c8e:	88fa      	ldrh	r2, [r7, #6]
 8001c90:	887b      	ldrh	r3, [r7, #2]
 8001c92:	4413      	add	r3, r2
 8001c94:	b29b      	uxth	r3, r3
 8001c96:	b21c      	sxth	r4, r3
 8001c98:	7bfb      	ldrb	r3, [r7, #15]
 8001c9a:	b29a      	uxth	r2, r3
 8001c9c:	88bb      	ldrh	r3, [r7, #4]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	b29b      	uxth	r3, r3
 8001ca2:	b21a      	sxth	r2, r3
 8001ca4:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001ca8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001cac:	9300      	str	r3, [sp, #0]
 8001cae:	4613      	mov	r3, r2
 8001cb0:	4622      	mov	r2, r4
 8001cb2:	f7ff fe15 	bl	80018e0 <ST7565_DrawLine>
 8001cb6:	7bfb      	ldrb	r3, [r7, #15]
 8001cb8:	3301      	adds	r3, #1
 8001cba:	73fb      	strb	r3, [r7, #15]
 8001cbc:	7bfa      	ldrb	r2, [r7, #15]
 8001cbe:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	dddd      	ble.n	8001c82 <ST7565_DrawFilledRectangle+0x64>
 8001cc6:	e000      	b.n	8001cca <ST7565_DrawFilledRectangle+0xac>
	if (x >= SCREEN_WIDTH || y >= SCREEN_HEIGHT) return;
 8001cc8:	bf00      	nop
}
 8001cca:	3714      	adds	r7, #20
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd90      	pop	{r4, r7, pc}

08001cd0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001cd4:	f3bf 8f4f 	dsb	sy
}
 8001cd8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001cda:	4b06      	ldr	r3, [pc, #24]	; (8001cf4 <__NVIC_SystemReset+0x24>)
 8001cdc:	68db      	ldr	r3, [r3, #12]
 8001cde:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001ce2:	4904      	ldr	r1, [pc, #16]	; (8001cf4 <__NVIC_SystemReset+0x24>)
 8001ce4:	4b04      	ldr	r3, [pc, #16]	; (8001cf8 <__NVIC_SystemReset+0x28>)
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001cea:	f3bf 8f4f 	dsb	sy
}
 8001cee:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001cf0:	bf00      	nop
 8001cf2:	e7fd      	b.n	8001cf0 <__NVIC_SystemReset+0x20>
 8001cf4:	e000ed00 	.word	0xe000ed00
 8001cf8:	05fa0004 	.word	0x05fa0004

08001cfc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001cfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d00:	b0c2      	sub	sp, #264	; 0x108
 8001d02:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d04:	f004 f8e1 	bl	8005eca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d08:	f001 f840 	bl	8002d8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d0c:	f001 fa78 	bl	8003200 <MX_GPIO_Init>
  MX_TIM4_Init();
 8001d10:	f001 f9a6 	bl	8003060 <MX_TIM4_Init>
  MX_DMA_Init();
 8001d14:	f001 fa22 	bl	800315c <MX_DMA_Init>
  MX_RTC_Init();
 8001d18:	f001 f8ca 	bl	8002eb0 <MX_RTC_Init>
  MX_USART2_UART_Init();
 8001d1c:	f001 f9ee 	bl	80030fc <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8001d20:	f001 f960 	bl	8002fe4 <MX_SPI2_Init>
  MX_SPI1_Init();
 8001d24:	f001 f920 	bl	8002f68 <MX_SPI1_Init>
  MX_I2C1_Init();
 8001d28:	f001 f882 	bl	8002e30 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */


  if (HAL_TIM_Base_Start_IT(tikPort) != HAL_OK) devError |= devTIK;
 8001d2c:	4b09      	ldr	r3, [pc, #36]	; (8001d54 <main+0x58>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4618      	mov	r0, r3
 8001d32:	f009 fe4d 	bl	800b9d0 <HAL_TIM_Base_Start_IT>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d006      	beq.n	8001d4a <main+0x4e>
 8001d3c:	4b06      	ldr	r3, [pc, #24]	; (8001d58 <main+0x5c>)
 8001d3e:	881b      	ldrh	r3, [r3, #0]
 8001d40:	f043 0301 	orr.w	r3, r3, #1
 8001d44:	b29a      	uxth	r2, r3
 8001d46:	4b04      	ldr	r3, [pc, #16]	; (8001d58 <main+0x5c>)
 8001d48:	801a      	strh	r2, [r3, #0]

  for (int8_t i = 0; i < 4; i++) {
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
 8001d50:	e017      	b.n	8001d82 <main+0x86>
 8001d52:	bf00      	nop
 8001d54:	20000008 	.word	0x20000008
 8001d58:	20001450 	.word	0x20001450
	  errLedOn(true);
 8001d5c:	2001      	movs	r0, #1
 8001d5e:	f001 fd89 	bl	8003874 <errLedOn>
	  HAL_Delay(150);
 8001d62:	2096      	movs	r0, #150	; 0x96
 8001d64:	f004 f926 	bl	8005fb4 <HAL_Delay>
	  errLedOn(false);
 8001d68:	2000      	movs	r0, #0
 8001d6a:	f001 fd83 	bl	8003874 <errLedOn>
	  HAL_Delay(150);
 8001d6e:	2096      	movs	r0, #150	; 0x96
 8001d70:	f004 f920 	bl	8005fb4 <HAL_Delay>
  for (int8_t i = 0; i < 4; i++) {
 8001d74:	f997 30e7 	ldrsb.w	r3, [r7, #231]	; 0xe7
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
 8001d82:	f997 30e7 	ldrsb.w	r3, [r7, #231]	; 0xe7
 8001d86:	2b03      	cmp	r3, #3
 8001d88:	dde8      	ble.n	8001d5c <main+0x60>
  }

  if (HAL_UART_Receive_IT(cmdPort, &rxByte, 1) != HAL_OK) devError |= devUART;
 8001d8a:	4bc7      	ldr	r3, [pc, #796]	; (80020a8 <main+0x3ac>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	49c6      	ldr	r1, [pc, #792]	; (80020ac <main+0x3b0>)
 8001d92:	4618      	mov	r0, r3
 8001d94:	f00a faf4 	bl	800c380 <HAL_UART_Receive_IT>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d006      	beq.n	8001dac <main+0xb0>
 8001d9e:	4bc4      	ldr	r3, [pc, #784]	; (80020b0 <main+0x3b4>)
 8001da0:	881b      	ldrh	r3, [r3, #0]
 8001da2:	f043 0302 	orr.w	r3, r3, #2
 8001da6:	b29a      	uxth	r2, r3
 8001da8:	4bc1      	ldr	r3, [pc, #772]	; (80020b0 <main+0x3b4>)
 8001daa:	801a      	strh	r2, [r3, #0]

  set_Date(epoch);
 8001dac:	4bc1      	ldr	r3, [pc, #772]	; (80020b4 <main+0x3b8>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4618      	mov	r0, r3
 8001db2:	f001 fd85 	bl	80038c0 <set_Date>

  HAL_Delay(250);
 8001db6:	20fa      	movs	r0, #250	; 0xfa
 8001db8:	f004 f8fc 	bl	8005fb4 <HAL_Delay>

  Report(1, "[que:%u] Start application ver.%s\r\n", cntEvt, ver);
 8001dbc:	4bbe      	ldr	r3, [pc, #760]	; (80020b8 <main+0x3bc>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	4bbd      	ldr	r3, [pc, #756]	; (80020bc <main+0x3c0>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	49bd      	ldr	r1, [pc, #756]	; (80020c0 <main+0x3c4>)
 8001dca:	2001      	movs	r0, #1
 8001dcc:	f001 fe72 	bl	8003ab4 <Report>

#ifdef SET_W25FLASH
    chipPresent = W25qxx_Init();
 8001dd0:	f003 fc02 	bl	80055d8 <W25qxx_Init>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	461a      	mov	r2, r3
 8001dd8:	4bba      	ldr	r3, [pc, #744]	; (80020c4 <main+0x3c8>)
 8001dda:	701a      	strb	r2, [r3, #0]
    uint32_t cid = W25qxx_getChipID();
 8001ddc:	f003 fcb6 	bl	800574c <W25qxx_getChipID>
 8001de0:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
    if ( chipPresent && ((cid >= W25Q10) && (cid <= W25Q128)) ) validChipID = true;
 8001de4:	4bb7      	ldr	r3, [pc, #732]	; (80020c4 <main+0x3c8>)
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d00a      	beq.n	8001e02 <main+0x106>
 8001dec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d006      	beq.n	8001e02 <main+0x106>
 8001df4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001df8:	2b08      	cmp	r3, #8
 8001dfa:	d802      	bhi.n	8001e02 <main+0x106>
 8001dfc:	4bb2      	ldr	r3, [pc, #712]	; (80020c8 <main+0x3cc>)
 8001dfe:	2201      	movs	r2, #1
 8001e00:	701a      	strb	r2, [r3, #0]
    list_sector = W25qxx_getPageSize() << 1;//2;
 8001e02:	f003 fcc7 	bl	8005794 <W25qxx_getPageSize>
 8001e06:	4603      	mov	r3, r0
 8001e08:	005b      	lsls	r3, r3, #1
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	4baf      	ldr	r3, [pc, #700]	; (80020cc <main+0x3d0>)
 8001e0e:	601a      	str	r2, [r3, #0]

#endif

#ifdef SET_NEW_RDA

    rdaID = rda5807_init(&Freq);
 8001e10:	48af      	ldr	r0, [pc, #700]	; (80020d0 <main+0x3d4>)
 8001e12:	f002 fa29 	bl	8004268 <rda5807_init>
 8001e16:	4603      	mov	r3, r0
 8001e18:	461a      	mov	r2, r3
 8001e1a:	4bae      	ldr	r3, [pc, #696]	; (80020d4 <main+0x3d8>)
 8001e1c:	701a      	strb	r2, [r3, #0]
    RSSI = rda5807_rssi();
 8001e1e:	f002 fa91 	bl	8004344 <rda5807_rssi>
 8001e22:	4603      	mov	r3, r0
 8001e24:	461a      	mov	r2, r3
 8001e26:	4bac      	ldr	r3, [pc, #688]	; (80020d8 <main+0x3dc>)
 8001e28:	801a      	strh	r2, [r3, #0]
    rda5807_SetVolume(Volume);
 8001e2a:	4bac      	ldr	r3, [pc, #688]	; (80020dc <main+0x3e0>)
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f002 fc66 	bl	8004700 <rda5807_SetVolume>
    rda5807_SetBassBoost(BassBoost);
 8001e34:	4baa      	ldr	r3, [pc, #680]	; (80020e0 <main+0x3e4>)
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f002 fca9 	bl	8004790 <rda5807_SetBassBoost>
    stereo = rda5807_Get_StereoMonoFlag();
 8001e3e:	f002 fdbd 	bl	80049bc <rda5807_Get_StereoMonoFlag>
 8001e42:	4603      	mov	r3, r0
 8001e44:	461a      	mov	r2, r3
 8001e46:	4ba7      	ldr	r3, [pc, #668]	; (80020e4 <main+0x3e8>)
 8001e48:	701a      	strb	r2, [r3, #0]
    Chan = rda5807_Get_Channel();
 8001e4a:	f002 fdcf 	bl	80049ec <rda5807_Get_Channel>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	461a      	mov	r2, r3
 8001e52:	4ba5      	ldr	r3, [pc, #660]	; (80020e8 <main+0x3ec>)
 8001e54:	801a      	strh	r2, [r3, #0]
#endif

#ifdef SET_DISPLAY

	#ifdef FONT_6x8
  		FontDef_t Font_6x8 = { 6, 8, Font6x8 };
 8001e56:	4aa5      	ldr	r2, [pc, #660]	; (80020ec <main+0x3f0>)
 8001e58:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001e5c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e60:	6018      	str	r0, [r3, #0]
 8001e62:	3304      	adds	r3, #4
 8001e64:	8019      	strh	r1, [r3, #0]
  		lfnt = &Font_6x8;
 8001e66:	4aa2      	ldr	r2, [pc, #648]	; (80020f0 <main+0x3f4>)
 8001e68:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001e6c:	6013      	str	r3, [r2, #0]
	#endif


  	uint16_t lin1 = 1;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
  	uint16_t lin2 = lin1 + Font_6x8.FontHeight;//chipID...
 8001e74:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 8001e78:	b29a      	uxth	r2, r3
 8001e7a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8001e7e:	4413      	add	r3, r2
 8001e80:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
  	uint16_t lin3 = lin2 + Font_6x8.FontHeight + 1;//Band...
 8001e84:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 8001e88:	b29a      	uxth	r2, r3
 8001e8a:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 8001e8e:	4413      	add	r3, r2
 8001e90:	b29b      	uxth	r3, r3
 8001e92:	3301      	adds	r3, #1
 8001e94:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
  	uint16_t lin4 = lin3 + Font_6x8.FontHeight + 1;//Volume...//Freq...
 8001e98:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 8001e9c:	b29a      	uxth	r2, r3
 8001e9e:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 8001ea2:	4413      	add	r3, r2
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8
  	uint16_t lin5 = lin4 + Font_6x8.FontHeight + 1;//Freq...//Volume...
 8001eac:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 8001eb0:	b29a      	uxth	r2, r3
 8001eb2:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 8001eb6:	4413      	add	r3, r2
 8001eb8:	b29b      	uxth	r3, r3
 8001eba:	3301      	adds	r3, #1
 8001ebc:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
  	uint16_t lin6 = lin5 + Font_6x8.FontHeight + 1;//Station
 8001ec0:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 8001ec4:	b29a      	uxth	r2, r3
 8001ec6:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8001eca:	4413      	add	r3, r2
 8001ecc:	b29b      	uxth	r3, r3
 8001ece:	3301      	adds	r3, #1
 8001ed0:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
  	char st[64];
  	char sta[32];
  	char stb[32];

  	ST7565_Reset();
 8001ed4:	f7ff f8f8 	bl	80010c8 <ST7565_Reset>
  	ST7565_Init();
 8001ed8:	f7ff fa0e 	bl	80012f8 <ST7565_Init>

  	ST7565_CMD_DISPLAY(CMD_DISPLAY_ON);
 8001edc:	20af      	movs	r0, #175	; 0xaf
 8001ede:	f7ff fa25 	bl	800132c <ST7565_CMD_DISPLAY>

    int dl = sprintf(tmp, "Ver.%s", ver);
 8001ee2:	4b76      	ldr	r3, [pc, #472]	; (80020bc <main+0x3c0>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	4982      	ldr	r1, [pc, #520]	; (80020f4 <main+0x3f8>)
 8001eea:	4883      	ldr	r0, [pc, #524]	; (80020f8 <main+0x3fc>)
 8001eec:	f00c fb86 	bl	800e5fc <siprintf>
 8001ef0:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
    uint16_t x = ((SCREEN_WIDTH - (Font_6x8.FontWidth * dl)) >> 1) & 0x7f;
 8001ef4:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 8001ef8:	461a      	mov	r2, r3
 8001efa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001efe:	fb02 f303 	mul.w	r3, r2, r3
 8001f02:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001f06:	105b      	asrs	r3, r3, #1
 8001f08:	b29b      	uxth	r3, r3
 8001f0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f0e:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
    ST7565_Print(x, SCREEN_HEIGHT - Font_6x8.FontHeight, tmp, &Font_6x8, 1, PIX_ON);//печатаем надпись с указаным шрифтом и цветом(PIX_ON-белый, PIX_OFF-черный)
 8001f12:	f9b7 00b2 	ldrsh.w	r0, [r7, #178]	; 0xb2
 8001f16:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	b219      	sxth	r1, r3
 8001f24:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001f28:	2201      	movs	r2, #1
 8001f2a:	9201      	str	r2, [sp, #4]
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	9200      	str	r2, [sp, #0]
 8001f30:	4a71      	ldr	r2, [pc, #452]	; (80020f8 <main+0x3fc>)
 8001f32:	f7ff fc1b 	bl	800176c <ST7565_Print>

	#if defined(SET_RDA_CHIP) || defined(SET_NEW_RDA)
    	int il = sprintf(st, "RDA5807 chipID:0x%x", rdaID);
 8001f36:	4b67      	ldr	r3, [pc, #412]	; (80020d4 <main+0x3d8>)
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001f40:	496e      	ldr	r1, [pc, #440]	; (80020fc <main+0x400>)
 8001f42:	4618      	mov	r0, r3
 8001f44:	f00c fb5a 	bl	800e5fc <siprintf>
 8001f48:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
    	uint16_t xf = ((SCREEN_WIDTH - (Font_6x8.FontWidth * il)) >> 1) & 0x7f;
 8001f4c:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 8001f50:	461a      	mov	r2, r3
 8001f52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001f56:	fb02 f303 	mul.w	r3, r2, r3
 8001f5a:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001f5e:	105b      	asrs	r3, r3, #1
 8001f60:	b29b      	uxth	r3, r3
 8001f62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f66:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
    	if (!xf) xf = 1;
 8001f6a:	f8b7 30da 	ldrh.w	r3, [r7, #218]	; 0xda
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d102      	bne.n	8001f78 <main+0x27c>
 8001f72:	2301      	movs	r3, #1
 8001f74:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
    	ST7565_Print(xf, lin2, st, &Font_6x8, 1, PIX_ON);
 8001f78:	f9b7 00da 	ldrsh.w	r0, [r7, #218]	; 0xda
 8001f7c:	f9b7 10bc 	ldrsh.w	r1, [r7, #188]	; 0xbc
 8001f80:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001f84:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001f88:	2401      	movs	r4, #1
 8001f8a:	9401      	str	r4, [sp, #4]
 8001f8c:	2401      	movs	r4, #1
 8001f8e:	9400      	str	r4, [sp, #0]
 8001f90:	f7ff fbec 	bl	800176c <ST7565_Print>

    	int it = sprintf(stb, "FM Band:%s", allBands[Band]);//(uint16_t)lBand, (uint16_t)rBand);
 8001f94:	4b5a      	ldr	r3, [pc, #360]	; (8002100 <main+0x404>)
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	461a      	mov	r2, r3
 8001f9a:	4b5a      	ldr	r3, [pc, #360]	; (8002104 <main+0x408>)
 8001f9c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001fa0:	f107 0310 	add.w	r3, r7, #16
 8001fa4:	4958      	ldr	r1, [pc, #352]	; (8002108 <main+0x40c>)
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f00c fb28 	bl	800e5fc <siprintf>
 8001fac:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
    	int lit = it;
 8001fb0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001fb4:	60fb      	str	r3, [r7, #12]
    	xf = ((SCREEN_WIDTH - (Font_6x8.FontWidth * it)) >> 1) & 0x7f;
 8001fb6:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 8001fba:	461a      	mov	r2, r3
 8001fbc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001fc0:	fb02 f303 	mul.w	r3, r2, r3
 8001fc4:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001fc8:	105b      	asrs	r3, r3, #1
 8001fca:	b29b      	uxth	r3, r3
 8001fcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001fd0:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
    	if ((!xf) || (xf > (SCREEN_WIDTH - 3))) xf = 1;
 8001fd4:	f8b7 30da 	ldrh.w	r3, [r7, #218]	; 0xda
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d003      	beq.n	8001fe4 <main+0x2e8>
 8001fdc:	f8b7 30da 	ldrh.w	r3, [r7, #218]	; 0xda
 8001fe0:	2b7d      	cmp	r3, #125	; 0x7d
 8001fe2:	d902      	bls.n	8001fea <main+0x2ee>
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
    	ST7565_Print(xf, lin3, stb, &Font_6x8, 1, PIX_ON);
 8001fea:	f9b7 00da 	ldrsh.w	r0, [r7, #218]	; 0xda
 8001fee:	f9b7 10ba 	ldrsh.w	r1, [r7, #186]	; 0xba
 8001ff2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001ff6:	f107 0210 	add.w	r2, r7, #16
 8001ffa:	2401      	movs	r4, #1
 8001ffc:	9401      	str	r4, [sp, #4]
 8001ffe:	2401      	movs	r4, #1
 8002000:	9400      	str	r4, [sp, #0]
 8002002:	f7ff fbb3 	bl	800176c <ST7565_Print>

    	int im = sprintf(st, "Vol:%u Bass:%u", Volume, BassBoost);
 8002006:	4b35      	ldr	r3, [pc, #212]	; (80020dc <main+0x3e0>)
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	461a      	mov	r2, r3
 800200c:	4b34      	ldr	r3, [pc, #208]	; (80020e0 <main+0x3e4>)
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8002014:	493d      	ldr	r1, [pc, #244]	; (800210c <main+0x410>)
 8002016:	f00c faf1 	bl	800e5fc <siprintf>
 800201a:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
    	int lim = im;
 800201e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002022:	60bb      	str	r3, [r7, #8]
    	xf = ((SCREEN_WIDTH - (Font_6x8.FontWidth * im)) >> 1) & 0x7f;
 8002024:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 8002028:	461a      	mov	r2, r3
 800202a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800202e:	fb02 f303 	mul.w	r3, r2, r3
 8002032:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002036:	105b      	asrs	r3, r3, #1
 8002038:	b29b      	uxth	r3, r3
 800203a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800203e:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
    	if ((!xf) || (xf > (SCREEN_WIDTH - 3))) xf = 1;
 8002042:	f8b7 30da 	ldrh.w	r3, [r7, #218]	; 0xda
 8002046:	2b00      	cmp	r3, #0
 8002048:	d003      	beq.n	8002052 <main+0x356>
 800204a:	f8b7 30da 	ldrh.w	r3, [r7, #218]	; 0xda
 800204e:	2b7d      	cmp	r3, #125	; 0x7d
 8002050:	d902      	bls.n	8002058 <main+0x35c>
 8002052:	2301      	movs	r3, #1
 8002054:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
    	ST7565_Print(xf, lin4, st, &Font_6x8, 1, PIX_ON);
 8002058:	f9b7 00da 	ldrsh.w	r0, [r7, #218]	; 0xda
 800205c:	f9b7 10b8 	ldrsh.w	r1, [r7, #184]	; 0xb8
 8002060:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002064:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002068:	2401      	movs	r4, #1
 800206a:	9401      	str	r4, [sp, #4]
 800206c:	2401      	movs	r4, #1
 800206e:	9400      	str	r4, [sp, #0]
 8002070:	f7ff fb7c 	bl	800176c <ST7565_Print>

    	if (stereo)
 8002074:	4b1b      	ldr	r3, [pc, #108]	; (80020e4 <main+0x3e8>)
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d04c      	beq.n	8002116 <main+0x41a>
    		il = sprintf(st, "Rssi:%u Freq:%.1f S", RSSI, Freq);
 800207c:	4b16      	ldr	r3, [pc, #88]	; (80020d8 <main+0x3dc>)
 800207e:	881b      	ldrh	r3, [r3, #0]
 8002080:	461c      	mov	r4, r3
 8002082:	4b13      	ldr	r3, [pc, #76]	; (80020d0 <main+0x3d4>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4618      	mov	r0, r3
 8002088:	f7fe fa5e 	bl	8000548 <__aeabi_f2d>
 800208c:	4602      	mov	r2, r0
 800208e:	460b      	mov	r3, r1
 8002090:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8002094:	e9cd 2300 	strd	r2, r3, [sp]
 8002098:	4622      	mov	r2, r4
 800209a:	491d      	ldr	r1, [pc, #116]	; (8002110 <main+0x414>)
 800209c:	f00c faae 	bl	800e5fc <siprintf>
 80020a0:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
 80020a4:	e036      	b.n	8002114 <main+0x418>
 80020a6:	bf00      	nop
 80020a8:	20000010 	.word	0x20000010
 80020ac:	20001460 	.word	0x20001460
 80020b0:	20001450 	.word	0x20001450
 80020b4:	20000018 	.word	0x20000018
 80020b8:	2000186c 	.word	0x2000186c
 80020bc:	20000004 	.word	0x20000004
 80020c0:	08012428 	.word	0x08012428
 80020c4:	20002c80 	.word	0x20002c80
 80020c8:	20002c81 	.word	0x20002c81
 80020cc:	20001878 	.word	0x20001878
 80020d0:	200001b8 	.word	0x200001b8
 80020d4:	20002c94 	.word	0x20002c94
 80020d8:	20002c92 	.word	0x20002c92
 80020dc:	200001c3 	.word	0x200001c3
 80020e0:	20002c96 	.word	0x20002c96
 80020e4:	20002c98 	.word	0x20002c98
 80020e8:	20002c90 	.word	0x20002c90
 80020ec:	08012714 	.word	0x08012714
 80020f0:	20002c84 	.word	0x20002c84
 80020f4:	0801244c 	.word	0x0801244c
 80020f8:	20000fd0 	.word	0x20000fd0
 80020fc:	08012454 	.word	0x08012454
 8002100:	200001c0 	.word	0x200001c0
 8002104:	200001cc 	.word	0x200001cc
 8002108:	08012468 	.word	0x08012468
 800210c:	08012474 	.word	0x08012474
 8002110:	08012484 	.word	0x08012484
 8002114:	e013      	b.n	800213e <main+0x442>
    	else
    		il = sprintf(st, "Rssi:%u Freq:%.1f", RSSI, Freq);
 8002116:	4bae      	ldr	r3, [pc, #696]	; (80023d0 <main+0x6d4>)
 8002118:	881b      	ldrh	r3, [r3, #0]
 800211a:	461c      	mov	r4, r3
 800211c:	4bad      	ldr	r3, [pc, #692]	; (80023d4 <main+0x6d8>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4618      	mov	r0, r3
 8002122:	f7fe fa11 	bl	8000548 <__aeabi_f2d>
 8002126:	4602      	mov	r2, r0
 8002128:	460b      	mov	r3, r1
 800212a:	f107 0050 	add.w	r0, r7, #80	; 0x50
 800212e:	e9cd 2300 	strd	r2, r3, [sp]
 8002132:	4622      	mov	r2, r4
 8002134:	49a8      	ldr	r1, [pc, #672]	; (80023d8 <main+0x6dc>)
 8002136:	f00c fa61 	bl	800e5fc <siprintf>
 800213a:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
    	int lil = il;
 800213e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002142:	607b      	str	r3, [r7, #4]
    	xf = ((SCREEN_WIDTH - (Font_6x8.FontWidth * il)) >> 1) & 0x7f;
 8002144:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 8002148:	461a      	mov	r2, r3
 800214a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800214e:	fb02 f303 	mul.w	r3, r2, r3
 8002152:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002156:	105b      	asrs	r3, r3, #1
 8002158:	b29b      	uxth	r3, r3
 800215a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800215e:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
    	if ((!xf) || (xf > (SCREEN_WIDTH - 3))) xf = 1;
 8002162:	f8b7 30da 	ldrh.w	r3, [r7, #218]	; 0xda
 8002166:	2b00      	cmp	r3, #0
 8002168:	d003      	beq.n	8002172 <main+0x476>
 800216a:	f8b7 30da 	ldrh.w	r3, [r7, #218]	; 0xda
 800216e:	2b7d      	cmp	r3, #125	; 0x7d
 8002170:	d902      	bls.n	8002178 <main+0x47c>
 8002172:	2301      	movs	r3, #1
 8002174:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
    	ST7565_Print(xf, lin5, st, &Font_6x8, 1, PIX_ON);
 8002178:	f9b7 00da 	ldrsh.w	r0, [r7, #218]	; 0xda
 800217c:	f9b7 10b6 	ldrsh.w	r1, [r7, #182]	; 0xb6
 8002180:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002184:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002188:	2401      	movs	r4, #1
 800218a:	9401      	str	r4, [sp, #4]
 800218c:	2401      	movs	r4, #1
 800218e:	9400      	str	r4, [sp, #0]
 8002190:	f7ff faec 	bl	800176c <ST7565_Print>

    	int ia = sprintf(sta, "%s", nameStation(Freq));
 8002194:	4b8f      	ldr	r3, [pc, #572]	; (80023d4 <main+0x6d8>)
 8002196:	edd3 7a00 	vldr	s15, [r3]
 800219a:	eeb0 0a67 	vmov.f32	s0, s15
 800219e:	f001 fa4d 	bl	800363c <nameStation>
 80021a2:	4602      	mov	r2, r0
 80021a4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80021a8:	498c      	ldr	r1, [pc, #560]	; (80023dc <main+0x6e0>)
 80021aa:	4618      	mov	r0, r3
 80021ac:	f00c fa26 	bl	800e5fc <siprintf>
 80021b0:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
    	int lia = ia;
 80021b4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80021b8:	603b      	str	r3, [r7, #0]
    	xf = ((SCREEN_WIDTH - (Font_6x8.FontWidth * ia)) >> 1) & 0x7f;
 80021ba:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 80021be:	461a      	mov	r2, r3
 80021c0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80021c4:	fb02 f303 	mul.w	r3, r2, r3
 80021c8:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80021cc:	105b      	asrs	r3, r3, #1
 80021ce:	b29b      	uxth	r3, r3
 80021d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021d4:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
    	if ((!xf) || (xf > (SCREEN_WIDTH - 3))) xf = 1;
 80021d8:	f8b7 30da 	ldrh.w	r3, [r7, #218]	; 0xda
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d003      	beq.n	80021e8 <main+0x4ec>
 80021e0:	f8b7 30da 	ldrh.w	r3, [r7, #218]	; 0xda
 80021e4:	2b7d      	cmp	r3, #125	; 0x7d
 80021e6:	d902      	bls.n	80021ee <main+0x4f2>
 80021e8:	2301      	movs	r3, #1
 80021ea:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
    	ST7565_Print(xf, lin6, sta, &Font_6x8, 1, PIX_ON);
 80021ee:	f9b7 00da 	ldrsh.w	r0, [r7, #218]	; 0xda
 80021f2:	f9b7 10b4 	ldrsh.w	r1, [r7, #180]	; 0xb4
 80021f6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80021fa:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80021fe:	2401      	movs	r4, #1
 8002200:	9401      	str	r4, [sp, #4]
 8002202:	2401      	movs	r4, #1
 8002204:	9400      	str	r4, [sp, #0]
 8002206:	f7ff fab1 	bl	800176c <ST7565_Print>

    	Report(1, "ChipID:0x%x Chan:%u Freq:%.2f %s RSSI:%u Band:%s Vol:%u BassEn:%u\r\n",
 800220a:	4b75      	ldr	r3, [pc, #468]	; (80023e0 <main+0x6e4>)
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	461e      	mov	r6, r3
 8002210:	4b74      	ldr	r3, [pc, #464]	; (80023e4 <main+0x6e8>)
 8002212:	881b      	ldrh	r3, [r3, #0]
 8002214:	4698      	mov	r8, r3
 8002216:	4b6f      	ldr	r3, [pc, #444]	; (80023d4 <main+0x6d8>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4618      	mov	r0, r3
 800221c:	f7fe f994 	bl	8000548 <__aeabi_f2d>
 8002220:	4602      	mov	r2, r0
 8002222:	460b      	mov	r3, r1
 8002224:	496a      	ldr	r1, [pc, #424]	; (80023d0 <main+0x6d4>)
 8002226:	8809      	ldrh	r1, [r1, #0]
 8002228:	460c      	mov	r4, r1
 800222a:	496f      	ldr	r1, [pc, #444]	; (80023e8 <main+0x6ec>)
 800222c:	7809      	ldrb	r1, [r1, #0]
 800222e:	4608      	mov	r0, r1
 8002230:	496e      	ldr	r1, [pc, #440]	; (80023ec <main+0x6f0>)
 8002232:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8002236:	486e      	ldr	r0, [pc, #440]	; (80023f0 <main+0x6f4>)
 8002238:	7800      	ldrb	r0, [r0, #0]
 800223a:	4605      	mov	r5, r0
 800223c:	486d      	ldr	r0, [pc, #436]	; (80023f4 <main+0x6f8>)
 800223e:	7800      	ldrb	r0, [r0, #0]
 8002240:	9006      	str	r0, [sp, #24]
 8002242:	9505      	str	r5, [sp, #20]
 8002244:	9104      	str	r1, [sp, #16]
 8002246:	9403      	str	r4, [sp, #12]
 8002248:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800224c:	9102      	str	r1, [sp, #8]
 800224e:	e9cd 2300 	strd	r2, r3, [sp]
 8002252:	4643      	mov	r3, r8
 8002254:	4632      	mov	r2, r6
 8002256:	4968      	ldr	r1, [pc, #416]	; (80023f8 <main+0x6fc>)
 8002258:	2001      	movs	r0, #1
 800225a:	f001 fc2b 	bl	8003ab4 <Report>
    			rdaID, Chan, Freq, sta, RSSI, allBands[Band], Volume, BassBoost);
	#endif

    ST7565_DrawRectangle(0, Font_6x8.FontHeight, SCREEN_WIDTH - 1, SCREEN_HEIGHT - (Font_6x8.FontHeight << 1) - 2, PIX_ON);
 800225e:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 8002262:	b219      	sxth	r1, r3
 8002264:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 8002268:	b29b      	uxth	r3, r3
 800226a:	005b      	lsls	r3, r3, #1
 800226c:	b29b      	uxth	r3, r3
 800226e:	f1c3 033e 	rsb	r3, r3, #62	; 0x3e
 8002272:	b29b      	uxth	r3, r3
 8002274:	b21b      	sxth	r3, r3
 8002276:	2201      	movs	r2, #1
 8002278:	9200      	str	r2, [sp, #0]
 800227a:	227f      	movs	r2, #127	; 0x7f
 800227c:	2000      	movs	r0, #0
 800227e:	f7ff fc4c 	bl	8001b1a <ST7565_DrawRectangle>
    ST7565_DrawFilledRectangle(0, 0, SCREEN_WIDTH - 1, Font_6x8.FontHeight, PIX_ON);
 8002282:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 8002286:	b21b      	sxth	r3, r3
 8002288:	2201      	movs	r2, #1
 800228a:	9200      	str	r2, [sp, #0]
 800228c:	227f      	movs	r2, #127	; 0x7f
 800228e:	2100      	movs	r1, #0
 8002290:	2000      	movs	r0, #0
 8002292:	f7ff fcc4 	bl	8001c1e <ST7565_DrawFilledRectangle>
    ST7565_Update();
 8002296:	f7ff f8b9 	bl	800140c <ST7565_Update>

    startSec = true;
 800229a:	4b58      	ldr	r3, [pc, #352]	; (80023fc <main+0x700>)
 800229c:	2201      	movs	r2, #1
 800229e:	701a      	strb	r2, [r3, #0]

#endif

    uint16_t lastErr = devOK;
 80022a0:	2300      	movs	r3, #0
 80022a2:	f8a7 30d8 	strh.w	r3, [r7, #216]	; 0xd8

    putEvt(evt_Freq);
 80022a6:	200c      	movs	r0, #12
 80022a8:	f001 f916 	bl	80034d8 <putEvt>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


    while (!restart) {
 80022ac:	f000 bd1b 	b.w	8002ce6 <main+0xfea>


#ifdef SET_FIFO_MODE
    	evt = getEvt();
 80022b0:	f001 f984 	bl	80035bc <getEvt>
 80022b4:	4603      	mov	r3, r0
 80022b6:	4a52      	ldr	r2, [pc, #328]	; (8002400 <main+0x704>)
 80022b8:	6013      	str	r3, [r2, #0]
    	if (evt != evt_None) {
 80022ba:	4b51      	ldr	r3, [pc, #324]	; (8002400 <main+0x704>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80022c2:	f000 84f8 	beq.w	8002cb6 <main+0xfba>
    		cntEvt = getEvtCount();
 80022c6:	f001 f8fb 	bl	80034c0 <getEvtCount>
 80022ca:	4603      	mov	r3, r0
 80022cc:	461a      	mov	r2, r3
 80022ce:	4b4d      	ldr	r3, [pc, #308]	; (8002404 <main+0x708>)
 80022d0:	701a      	strb	r2, [r3, #0]
    		if (evt != evt_Sec) {
 80022d2:	4b4b      	ldr	r3, [pc, #300]	; (8002400 <main+0x704>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	2b08      	cmp	r3, #8
 80022d8:	d050      	beq.n	800237c <main+0x680>
    			Report(1, "[que:%u] get event '%s'\r\n", cntEvt, str_cmds[evt]);
 80022da:	4b4a      	ldr	r3, [pc, #296]	; (8002404 <main+0x708>)
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	4619      	mov	r1, r3
 80022e2:	4b47      	ldr	r3, [pc, #284]	; (8002400 <main+0x704>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a48      	ldr	r2, [pc, #288]	; (8002408 <main+0x70c>)
 80022e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022ec:	460a      	mov	r2, r1
 80022ee:	4947      	ldr	r1, [pc, #284]	; (800240c <main+0x710>)
 80022f0:	2001      	movs	r0, #1
 80022f2:	f001 fbdf 	bl	8003ab4 <Report>
#ifdef SET_DISPLAY
    			ST7565_DrawFilledRectangle(0, SCREEN_HEIGHT - Font_6x8.FontHeight, SCREEN_WIDTH - 1, Font_6x8.FontHeight, PIX_OFF);
 80022f6:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8002300:	b29b      	uxth	r3, r3
 8002302:	b219      	sxth	r1, r3
 8002304:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 8002308:	b21b      	sxth	r3, r3
 800230a:	2200      	movs	r2, #0
 800230c:	9200      	str	r2, [sp, #0]
 800230e:	227f      	movs	r2, #127	; 0x7f
 8002310:	2000      	movs	r0, #0
 8002312:	f7ff fc84 	bl	8001c1e <ST7565_DrawFilledRectangle>
    			dl = sprintf(tmp, "evt(%u) : %s", cntEvt, str_cmds[evt]);
 8002316:	4b3b      	ldr	r3, [pc, #236]	; (8002404 <main+0x708>)
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	b2db      	uxtb	r3, r3
 800231c:	4619      	mov	r1, r3
 800231e:	4b38      	ldr	r3, [pc, #224]	; (8002400 <main+0x704>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a39      	ldr	r2, [pc, #228]	; (8002408 <main+0x70c>)
 8002324:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002328:	460a      	mov	r2, r1
 800232a:	4939      	ldr	r1, [pc, #228]	; (8002410 <main+0x714>)
 800232c:	4839      	ldr	r0, [pc, #228]	; (8002414 <main+0x718>)
 800232e:	f00c f965 	bl	800e5fc <siprintf>
 8002332:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
    			x = ((SCREEN_WIDTH - (Font_6x8.FontWidth * dl)) >> 1) & 0x7f;
 8002336:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 800233a:	461a      	mov	r2, r3
 800233c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002340:	fb02 f303 	mul.w	r3, r2, r3
 8002344:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002348:	105b      	asrs	r3, r3, #1
 800234a:	b29b      	uxth	r3, r3
 800234c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002350:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
    			ST7565_Print(x, SCREEN_HEIGHT - Font_6x8.FontHeight, tmp, &Font_6x8, 1, PIX_ON);//печатаем надпись с указаным шрифтом и цветом(PIX_ON-белый, PIX_OFF-черный)
 8002354:	f9b7 00b2 	ldrsh.w	r0, [r7, #178]	; 0xb2
 8002358:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 800235c:	b29b      	uxth	r3, r3
 800235e:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8002362:	b29b      	uxth	r3, r3
 8002364:	b219      	sxth	r1, r3
 8002366:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800236a:	2201      	movs	r2, #1
 800236c:	9201      	str	r2, [sp, #4]
 800236e:	2201      	movs	r2, #1
 8002370:	9200      	str	r2, [sp, #0]
 8002372:	4a28      	ldr	r2, [pc, #160]	; (8002414 <main+0x718>)
 8002374:	f7ff f9fa 	bl	800176c <ST7565_Print>
    			ST7565_Update();
 8002378:	f7ff f848 	bl	800140c <ST7565_Update>
#endif
    		}
    		switch (evt) {
 800237c:	4b20      	ldr	r3, [pc, #128]	; (8002400 <main+0x704>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2b10      	cmp	r3, #16
 8002382:	f200 8488 	bhi.w	8002c96 <main+0xf9a>
 8002386:	a201      	add	r2, pc, #4	; (adr r2, 800238c <main+0x690>)
 8002388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800238c:	080029d3 	.word	0x080029d3
 8002390:	08002a21 	.word	0x08002a21
 8002394:	08002a95 	.word	0x08002a95
 8002398:	08002ab5 	.word	0x08002ab5
 800239c:	08002ac7 	.word	0x08002ac7
 80023a0:	08002c6b 	.word	0x08002c6b
 80023a4:	08002ac7 	.word	0x08002ac7
 80023a8:	08002be9 	.word	0x08002be9
 80023ac:	0800277d 	.word	0x0800277d
 80023b0:	0800276d 	.word	0x0800276d
 80023b4:	080029bb 	.word	0x080029bb
 80023b8:	0800274d 	.word	0x0800274d
 80023bc:	0800259b 	.word	0x0800259b
 80023c0:	0800253f 	.word	0x0800253f
 80023c4:	080024e3 	.word	0x080024e3
 80023c8:	080024c3 	.word	0x080024c3
 80023cc:	08002419 	.word	0x08002419
 80023d0:	20002c92 	.word	0x20002c92
 80023d4:	200001b8 	.word	0x200001b8
 80023d8:	08012498 	.word	0x08012498
 80023dc:	080124ac 	.word	0x080124ac
 80023e0:	20002c94 	.word	0x20002c94
 80023e4:	20002c90 	.word	0x20002c90
 80023e8:	200001c0 	.word	0x200001c0
 80023ec:	200001cc 	.word	0x200001cc
 80023f0:	200001c3 	.word	0x200001c3
 80023f4:	20002c96 	.word	0x20002c96
 80023f8:	080124b0 	.word	0x080124b0
 80023fc:	20002c82 	.word	0x20002c82
 8002400:	200001a4 	.word	0x200001a4
 8002404:	2000186c 	.word	0x2000186c
 8002408:	20000060 	.word	0x20000060
 800240c:	080124f4 	.word	0x080124f4
 8002410:	08012510 	.word	0x08012510
 8002414:	20000fd0 	.word	0x20000fd0
    			case evt_Band:
    				Band = newBand;
 8002418:	4bb3      	ldr	r3, [pc, #716]	; (80026e8 <main+0x9ec>)
 800241a:	781a      	ldrb	r2, [r3, #0]
 800241c:	4bb3      	ldr	r3, [pc, #716]	; (80026ec <main+0x9f0>)
 800241e:	701a      	strb	r2, [r3, #0]
    				if (!rda5807_Set_Band(Band)) {
 8002420:	4bb2      	ldr	r3, [pc, #712]	; (80026ec <main+0x9f0>)
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	4618      	mov	r0, r3
 8002426:	f002 faf3 	bl	8004a10 <rda5807_Set_Band>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	f040 8429 	bne.w	8002c84 <main+0xf88>
    					sprintf(stb, "FM Band:%s", allBands[Band]);//(uint16_t)lBand, (uint16_t)rBand);
 8002432:	4bae      	ldr	r3, [pc, #696]	; (80026ec <main+0x9f0>)
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	461a      	mov	r2, r3
 8002438:	4bad      	ldr	r3, [pc, #692]	; (80026f0 <main+0x9f4>)
 800243a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800243e:	f107 0310 	add.w	r3, r7, #16
 8002442:	49ac      	ldr	r1, [pc, #688]	; (80026f4 <main+0x9f8>)
 8002444:	4618      	mov	r0, r3
 8002446:	f00c f8d9 	bl	800e5fc <siprintf>
    					showLine(stb, lin3, &lit, true);
 800244a:	f107 020c 	add.w	r2, r7, #12
 800244e:	f8b7 10ba 	ldrh.w	r1, [r7, #186]	; 0xba
 8002452:	f107 0010 	add.w	r0, r7, #16
 8002456:	2301      	movs	r3, #1
 8002458:	f001 f99e 	bl	8003798 <showLine>
    					Report(1, "[que:%u] set new band=%u '%s'\r\n", cntEvt, Band, allBands[Band]);
 800245c:	4ba6      	ldr	r3, [pc, #664]	; (80026f8 <main+0x9fc>)
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	b2db      	uxtb	r3, r3
 8002462:	4619      	mov	r1, r3
 8002464:	4ba1      	ldr	r3, [pc, #644]	; (80026ec <main+0x9f0>)
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	4618      	mov	r0, r3
 800246a:	4ba0      	ldr	r3, [pc, #640]	; (80026ec <main+0x9f0>)
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	461a      	mov	r2, r3
 8002470:	4b9f      	ldr	r3, [pc, #636]	; (80026f0 <main+0x9f4>)
 8002472:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002476:	9300      	str	r3, [sp, #0]
 8002478:	4603      	mov	r3, r0
 800247a:	460a      	mov	r2, r1
 800247c:	499f      	ldr	r1, [pc, #636]	; (80026fc <main+0xa00>)
 800247e:	2001      	movs	r0, #1
 8002480:	f001 fb18 	bl	8003ab4 <Report>
    					if ((Freq < lBand) || (Freq > rBand)) {
 8002484:	4b9e      	ldr	r3, [pc, #632]	; (8002700 <main+0xa04>)
 8002486:	ed93 7a00 	vldr	s14, [r3]
 800248a:	4b9e      	ldr	r3, [pc, #632]	; (8002704 <main+0xa08>)
 800248c:	edd3 7a00 	vldr	s15, [r3]
 8002490:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002498:	d40b      	bmi.n	80024b2 <main+0x7b6>
 800249a:	4b99      	ldr	r3, [pc, #612]	; (8002700 <main+0xa04>)
 800249c:	ed93 7a00 	vldr	s14, [r3]
 80024a0:	4b99      	ldr	r3, [pc, #612]	; (8002708 <main+0xa0c>)
 80024a2:	edd3 7a00 	vldr	s15, [r3]
 80024a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024ae:	dc00      	bgt.n	80024b2 <main+0x7b6>
    						newFreq = lBand;
    						putEvt(evt_Freq);
    					}
    				}
    			break;
 80024b0:	e3e8      	b.n	8002c84 <main+0xf88>
    						newFreq = lBand;
 80024b2:	4b94      	ldr	r3, [pc, #592]	; (8002704 <main+0xa08>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a95      	ldr	r2, [pc, #596]	; (800270c <main+0xa10>)
 80024b8:	6013      	str	r3, [r2, #0]
    						putEvt(evt_Freq);
 80024ba:	200c      	movs	r0, #12
 80024bc:	f001 f80c 	bl	80034d8 <putEvt>
    			break;
 80024c0:	e3e0      	b.n	8002c84 <main+0xf88>
    					newFreq = lBand;
    					putEvt(evt_Freq);
    				}
    			break;*/
    			case evt_List:
    				newFreq = getNextList(Freq);
 80024c2:	4b8f      	ldr	r3, [pc, #572]	; (8002700 <main+0xa04>)
 80024c4:	edd3 7a00 	vldr	s15, [r3]
 80024c8:	eeb0 0a67 	vmov.f32	s0, s15
 80024cc:	f001 f8f4 	bl	80036b8 <getNextList>
 80024d0:	eef0 7a40 	vmov.f32	s15, s0
 80024d4:	4b8d      	ldr	r3, [pc, #564]	; (800270c <main+0xa10>)
 80024d6:	edc3 7a00 	vstr	s15, [r3]
    				putEvt(evt_Freq);
 80024da:	200c      	movs	r0, #12
 80024dc:	f000 fffc 	bl	80034d8 <putEvt>
    			break;
 80024e0:	e3d9      	b.n	8002c96 <main+0xf9a>
    			case evt_Bass:
    				if (newBassBoost != BassBoost) {
 80024e2:	4b8b      	ldr	r3, [pc, #556]	; (8002710 <main+0xa14>)
 80024e4:	781a      	ldrb	r2, [r3, #0]
 80024e6:	4b8b      	ldr	r3, [pc, #556]	; (8002714 <main+0xa18>)
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	429a      	cmp	r2, r3
 80024ec:	f000 83cc 	beq.w	8002c88 <main+0xf8c>
    					BassBoost = newBassBoost;
 80024f0:	4b87      	ldr	r3, [pc, #540]	; (8002710 <main+0xa14>)
 80024f2:	781a      	ldrb	r2, [r3, #0]
 80024f4:	4b87      	ldr	r3, [pc, #540]	; (8002714 <main+0xa18>)
 80024f6:	701a      	strb	r2, [r3, #0]
    					rda5807_SetBassBoost(BassBoost);
 80024f8:	4b86      	ldr	r3, [pc, #536]	; (8002714 <main+0xa18>)
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	4618      	mov	r0, r3
 80024fe:	f002 f947 	bl	8004790 <rda5807_SetBassBoost>
    					//
    					sprintf(st, "Vol:%u Bass:%u", Volume, BassBoost);
 8002502:	4b85      	ldr	r3, [pc, #532]	; (8002718 <main+0xa1c>)
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	461a      	mov	r2, r3
 8002508:	4b82      	ldr	r3, [pc, #520]	; (8002714 <main+0xa18>)
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8002510:	4982      	ldr	r1, [pc, #520]	; (800271c <main+0xa20>)
 8002512:	f00c f873 	bl	800e5fc <siprintf>
    					showLine(st, lin4, &lim, true);
 8002516:	f107 0208 	add.w	r2, r7, #8
 800251a:	f8b7 10b8 	ldrh.w	r1, [r7, #184]	; 0xb8
 800251e:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8002522:	2301      	movs	r3, #1
 8002524:	f001 f938 	bl	8003798 <showLine>
    					Report(1, "[que:%u] set new BassBoost to %u\r\n", cntEvt, BassBoost);
 8002528:	4b73      	ldr	r3, [pc, #460]	; (80026f8 <main+0x9fc>)
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	b2db      	uxtb	r3, r3
 800252e:	461a      	mov	r2, r3
 8002530:	4b78      	ldr	r3, [pc, #480]	; (8002714 <main+0xa18>)
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	497a      	ldr	r1, [pc, #488]	; (8002720 <main+0xa24>)
 8002536:	2001      	movs	r0, #1
 8002538:	f001 fabc 	bl	8003ab4 <Report>
    				}
    			break;
 800253c:	e3a4      	b.n	8002c88 <main+0xf8c>
    			case evt_Vol:
    				if (newVolume != Volume) {
 800253e:	4b79      	ldr	r3, [pc, #484]	; (8002724 <main+0xa28>)
 8002540:	781a      	ldrb	r2, [r3, #0]
 8002542:	4b75      	ldr	r3, [pc, #468]	; (8002718 <main+0xa1c>)
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	429a      	cmp	r2, r3
 8002548:	f000 83a0 	beq.w	8002c8c <main+0xf90>
    					Volume = newVolume;
 800254c:	4b75      	ldr	r3, [pc, #468]	; (8002724 <main+0xa28>)
 800254e:	781a      	ldrb	r2, [r3, #0]
 8002550:	4b71      	ldr	r3, [pc, #452]	; (8002718 <main+0xa1c>)
 8002552:	701a      	strb	r2, [r3, #0]
    					rda5807_SetVolume(Volume);
 8002554:	4b70      	ldr	r3, [pc, #448]	; (8002718 <main+0xa1c>)
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	4618      	mov	r0, r3
 800255a:	f002 f8d1 	bl	8004700 <rda5807_SetVolume>
    					//
    					sprintf(st, "Vol:%u BassEn:%u", Volume, BassBoost);
 800255e:	4b6e      	ldr	r3, [pc, #440]	; (8002718 <main+0xa1c>)
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	461a      	mov	r2, r3
 8002564:	4b6b      	ldr	r3, [pc, #428]	; (8002714 <main+0xa18>)
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	f107 0050 	add.w	r0, r7, #80	; 0x50
 800256c:	496e      	ldr	r1, [pc, #440]	; (8002728 <main+0xa2c>)
 800256e:	f00c f845 	bl	800e5fc <siprintf>
    					showLine(st, lin4, &lim, true);
 8002572:	f107 0208 	add.w	r2, r7, #8
 8002576:	f8b7 10b8 	ldrh.w	r1, [r7, #184]	; 0xb8
 800257a:	f107 0050 	add.w	r0, r7, #80	; 0x50
 800257e:	2301      	movs	r3, #1
 8002580:	f001 f90a 	bl	8003798 <showLine>
    					Report(1, "[que:%u] set new Volume to %u\r\n", cntEvt, Volume);
 8002584:	4b5c      	ldr	r3, [pc, #368]	; (80026f8 <main+0x9fc>)
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	b2db      	uxtb	r3, r3
 800258a:	461a      	mov	r2, r3
 800258c:	4b62      	ldr	r3, [pc, #392]	; (8002718 <main+0xa1c>)
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	4966      	ldr	r1, [pc, #408]	; (800272c <main+0xa30>)
 8002592:	2001      	movs	r0, #1
 8002594:	f001 fa8e 	bl	8003ab4 <Report>
    				}
    			break;
 8002598:	e378      	b.n	8002c8c <main+0xf90>
    			case evt_Freq:
    				if ((newFreq >= lBand) && (newFreq <= rBand)) {
 800259a:	4b5c      	ldr	r3, [pc, #368]	; (800270c <main+0xa10>)
 800259c:	ed93 7a00 	vldr	s14, [r3]
 80025a0:	4b58      	ldr	r3, [pc, #352]	; (8002704 <main+0xa08>)
 80025a2:	edd3 7a00 	vldr	s15, [r3]
 80025a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80025aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025ae:	da00      	bge.n	80025b2 <main+0x8b6>
    						sprintf(sta, "%s", nameStation(Freq));
    						showLine(sta, lin6, &lia, true);
    						Report(1, "[que:%u] set new Freq to %.1f %s (Chan:%u)\r\n", cntEvt, Freq, sta, Chan);
    					}
    				}
				break;
 80025b0:	e36e      	b.n	8002c90 <main+0xf94>
    				if ((newFreq >= lBand) && (newFreq <= rBand)) {
 80025b2:	4b56      	ldr	r3, [pc, #344]	; (800270c <main+0xa10>)
 80025b4:	ed93 7a00 	vldr	s14, [r3]
 80025b8:	4b53      	ldr	r3, [pc, #332]	; (8002708 <main+0xa0c>)
 80025ba:	edd3 7a00 	vldr	s15, [r3]
 80025be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80025c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025c6:	d900      	bls.n	80025ca <main+0x8ce>
				break;
 80025c8:	e362      	b.n	8002c90 <main+0xf94>
    					if (newFreq != Freq) {
 80025ca:	4b50      	ldr	r3, [pc, #320]	; (800270c <main+0xa10>)
 80025cc:	ed93 7a00 	vldr	s14, [r3]
 80025d0:	4b4b      	ldr	r3, [pc, #300]	; (8002700 <main+0xa04>)
 80025d2:	edd3 7a00 	vldr	s15, [r3]
 80025d6:	eeb4 7a67 	vcmp.f32	s14, s15
 80025da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025de:	f000 8357 	beq.w	8002c90 <main+0xf94>
    						Freq = newFreq;
 80025e2:	4b4a      	ldr	r3, [pc, #296]	; (800270c <main+0xa10>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a46      	ldr	r2, [pc, #280]	; (8002700 <main+0xa04>)
 80025e8:	6013      	str	r3, [r2, #0]
    						uint16_t fr = (uint16_t)(Freq * 10);
 80025ea:	4b45      	ldr	r3, [pc, #276]	; (8002700 <main+0xa04>)
 80025ec:	edd3 7a00 	vldr	s15, [r3]
 80025f0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80025f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025fc:	ee17 3a90 	vmov	r3, s15
 8002600:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
    						rda5807_SetFreq_In100Khz(fr);
 8002604:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8002608:	4618      	mov	r0, r3
 800260a:	f002 f8e1 	bl	80047d0 <rda5807_SetFreq_In100Khz>
    						stereo = rda5807_Get_StereoMonoFlag();
 800260e:	f002 f9d5 	bl	80049bc <rda5807_Get_StereoMonoFlag>
 8002612:	4603      	mov	r3, r0
 8002614:	461a      	mov	r2, r3
 8002616:	4b46      	ldr	r3, [pc, #280]	; (8002730 <main+0xa34>)
 8002618:	701a      	strb	r2, [r3, #0]
    						Chan = rda5807_Get_Channel();
 800261a:	f002 f9e7 	bl	80049ec <rda5807_Get_Channel>
 800261e:	4603      	mov	r3, r0
 8002620:	461a      	mov	r2, r3
 8002622:	4b44      	ldr	r3, [pc, #272]	; (8002734 <main+0xa38>)
 8002624:	801a      	strh	r2, [r3, #0]
    						if (stereo)
 8002626:	4b42      	ldr	r3, [pc, #264]	; (8002730 <main+0xa34>)
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d012      	beq.n	8002654 <main+0x958>
    							sprintf(st, "Rssi:%u Freq:%.1f S", RSSI, Freq);
 800262e:	4b42      	ldr	r3, [pc, #264]	; (8002738 <main+0xa3c>)
 8002630:	881b      	ldrh	r3, [r3, #0]
 8002632:	461c      	mov	r4, r3
 8002634:	4b32      	ldr	r3, [pc, #200]	; (8002700 <main+0xa04>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4618      	mov	r0, r3
 800263a:	f7fd ff85 	bl	8000548 <__aeabi_f2d>
 800263e:	4602      	mov	r2, r0
 8002640:	460b      	mov	r3, r1
 8002642:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8002646:	e9cd 2300 	strd	r2, r3, [sp]
 800264a:	4622      	mov	r2, r4
 800264c:	493b      	ldr	r1, [pc, #236]	; (800273c <main+0xa40>)
 800264e:	f00b ffd5 	bl	800e5fc <siprintf>
 8002652:	e011      	b.n	8002678 <main+0x97c>
    							sprintf(st, "Rssi:%u Freq:%.1f", RSSI, Freq);
 8002654:	4b38      	ldr	r3, [pc, #224]	; (8002738 <main+0xa3c>)
 8002656:	881b      	ldrh	r3, [r3, #0]
 8002658:	461c      	mov	r4, r3
 800265a:	4b29      	ldr	r3, [pc, #164]	; (8002700 <main+0xa04>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4618      	mov	r0, r3
 8002660:	f7fd ff72 	bl	8000548 <__aeabi_f2d>
 8002664:	4602      	mov	r2, r0
 8002666:	460b      	mov	r3, r1
 8002668:	f107 0050 	add.w	r0, r7, #80	; 0x50
 800266c:	e9cd 2300 	strd	r2, r3, [sp]
 8002670:	4622      	mov	r2, r4
 8002672:	4933      	ldr	r1, [pc, #204]	; (8002740 <main+0xa44>)
 8002674:	f00b ffc2 	bl	800e5fc <siprintf>
    						showLine(st, lin5, &lil, false);
 8002678:	1d3a      	adds	r2, r7, #4
 800267a:	f8b7 10b6 	ldrh.w	r1, [r7, #182]	; 0xb6
 800267e:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8002682:	2300      	movs	r3, #0
 8002684:	f001 f888 	bl	8003798 <showLine>
    						sprintf(sta, "%s", nameStation(Freq));
 8002688:	4b1d      	ldr	r3, [pc, #116]	; (8002700 <main+0xa04>)
 800268a:	edd3 7a00 	vldr	s15, [r3]
 800268e:	eeb0 0a67 	vmov.f32	s0, s15
 8002692:	f000 ffd3 	bl	800363c <nameStation>
 8002696:	4602      	mov	r2, r0
 8002698:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800269c:	4929      	ldr	r1, [pc, #164]	; (8002744 <main+0xa48>)
 800269e:	4618      	mov	r0, r3
 80026a0:	f00b ffac 	bl	800e5fc <siprintf>
    						showLine(sta, lin6, &lia, true);
 80026a4:	463a      	mov	r2, r7
 80026a6:	f8b7 10b4 	ldrh.w	r1, [r7, #180]	; 0xb4
 80026aa:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80026ae:	2301      	movs	r3, #1
 80026b0:	f001 f872 	bl	8003798 <showLine>
    						Report(1, "[que:%u] set new Freq to %.1f %s (Chan:%u)\r\n", cntEvt, Freq, sta, Chan);
 80026b4:	4b10      	ldr	r3, [pc, #64]	; (80026f8 <main+0x9fc>)
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	461c      	mov	r4, r3
 80026bc:	4b10      	ldr	r3, [pc, #64]	; (8002700 <main+0xa04>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7fd ff41 	bl	8000548 <__aeabi_f2d>
 80026c6:	4602      	mov	r2, r0
 80026c8:	460b      	mov	r3, r1
 80026ca:	491a      	ldr	r1, [pc, #104]	; (8002734 <main+0xa38>)
 80026cc:	8809      	ldrh	r1, [r1, #0]
 80026ce:	9103      	str	r1, [sp, #12]
 80026d0:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80026d4:	9102      	str	r1, [sp, #8]
 80026d6:	e9cd 2300 	strd	r2, r3, [sp]
 80026da:	4622      	mov	r2, r4
 80026dc:	491a      	ldr	r1, [pc, #104]	; (8002748 <main+0xa4c>)
 80026de:	2001      	movs	r0, #1
 80026e0:	f001 f9e8 	bl	8003ab4 <Report>
				break;
 80026e4:	e2d4      	b.n	8002c90 <main+0xf94>
 80026e6:	bf00      	nop
 80026e8:	200001c1 	.word	0x200001c1
 80026ec:	200001c0 	.word	0x200001c0
 80026f0:	200001cc 	.word	0x200001cc
 80026f4:	08012468 	.word	0x08012468
 80026f8:	2000186c 	.word	0x2000186c
 80026fc:	08012520 	.word	0x08012520
 8002700:	200001b8 	.word	0x200001b8
 8002704:	20002c88 	.word	0x20002c88
 8002708:	20002c8c 	.word	0x20002c8c
 800270c:	200001bc 	.word	0x200001bc
 8002710:	20002c97 	.word	0x20002c97
 8002714:	20002c96 	.word	0x20002c96
 8002718:	200001c3 	.word	0x200001c3
 800271c:	08012474 	.word	0x08012474
 8002720:	08012540 	.word	0x08012540
 8002724:	200001c4 	.word	0x200001c4
 8002728:	08012564 	.word	0x08012564
 800272c:	08012578 	.word	0x08012578
 8002730:	20002c98 	.word	0x20002c98
 8002734:	20002c90 	.word	0x20002c90
 8002738:	20002c92 	.word	0x20002c92
 800273c:	08012484 	.word	0x08012484
 8002740:	08012498 	.word	0x08012498
 8002744:	080124ac 	.word	0x080124ac
 8002748:	08012598 	.word	0x08012598
    			case evt_Scan:
    				if (!scan) {
 800274c:	4bba      	ldr	r3, [pc, #744]	; (8002a38 <main+0xd3c>)
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	b2db      	uxtb	r3, r3
 8002752:	2b00      	cmp	r3, #0
 8002754:	f040 829e 	bne.w	8002c94 <main+0xf98>
    					scan = 1;
 8002758:	4bb7      	ldr	r3, [pc, #732]	; (8002a38 <main+0xd3c>)
 800275a:	2201      	movs	r2, #1
 800275c:	701a      	strb	r2, [r3, #0]
    					rda5807_StartSeek(seek_up);
 800275e:	4bb7      	ldr	r3, [pc, #732]	; (8002a3c <main+0xd40>)
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	b2db      	uxtb	r3, r3
 8002764:	4618      	mov	r0, r3
 8002766:	f002 f8ed 	bl	8004944 <rda5807_StartSeek>
    				}
    			break;
 800276a:	e293      	b.n	8002c94 <main+0xf98>
    			case evt_Ver:
    				Report(1, "Ver.%s\r\n", ver);
 800276c:	4bb4      	ldr	r3, [pc, #720]	; (8002a40 <main+0xd44>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	461a      	mov	r2, r3
 8002772:	49b4      	ldr	r1, [pc, #720]	; (8002a44 <main+0xd48>)
 8002774:	2001      	movs	r0, #1
 8002776:	f001 f99d 	bl	8003ab4 <Report>
    			break;
 800277a:	e28c      	b.n	8002c96 <main+0xf9a>
    			case evt_Sec:
    			{
#ifdef SET_DISPLAY
    				dl = sec2str(st);
 800277c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002780:	4618      	mov	r0, r3
 8002782:	f001 f8fd 	bl	8003980 <sec2str>
 8002786:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
    				x = ((SCREEN_WIDTH - (Font_6x8.FontWidth * dl)) >> 1) & 0x7f;
 800278a:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 800278e:	461a      	mov	r2, r3
 8002790:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002794:	fb02 f303 	mul.w	r3, r2, r3
 8002798:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800279c:	105b      	asrs	r3, r3, #1
 800279e:	b29b      	uxth	r3, r3
 80027a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80027a4:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
    				ST7565_Print(x, lin1, st, &Font_6x8, 0, PIX_OFF);
 80027a8:	f9b7 00b2 	ldrsh.w	r0, [r7, #178]	; 0xb2
 80027ac:	f9b7 10be 	ldrsh.w	r1, [r7, #190]	; 0xbe
 80027b0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80027b4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80027b8:	2400      	movs	r4, #0
 80027ba:	9401      	str	r4, [sp, #4]
 80027bc:	2400      	movs	r4, #0
 80027be:	9400      	str	r4, [sp, #0]
 80027c0:	f7fe ffd4 	bl	800176c <ST7565_Print>
#endif
    				//
    				if (scan) {
 80027c4:	4b9c      	ldr	r3, [pc, #624]	; (8002a38 <main+0xd3c>)
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d04f      	beq.n	800286e <main+0xb72>
    					if (rda5807_Get_SeekTuneReadyFlag()) {//RadioNewState(Idle, 10);
 80027ce:	f002 f8e3 	bl	8004998 <rda5807_Get_SeekTuneReadyFlag>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d04a      	beq.n	800286e <main+0xb72>
    						Freq = (float)rda5807_GetFreq_In100Khz();
 80027d8:	f002 f874 	bl	80048c4 <rda5807_GetFreq_In100Khz>
 80027dc:	4603      	mov	r3, r0
 80027de:	ee07 3a90 	vmov	s15, r3
 80027e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027e6:	4b98      	ldr	r3, [pc, #608]	; (8002a48 <main+0xd4c>)
 80027e8:	edc3 7a00 	vstr	s15, [r3]
    						Freq /= 10;
 80027ec:	4b96      	ldr	r3, [pc, #600]	; (8002a48 <main+0xd4c>)
 80027ee:	ed93 7a00 	vldr	s14, [r3]
 80027f2:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80027f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80027fa:	4b93      	ldr	r3, [pc, #588]	; (8002a48 <main+0xd4c>)
 80027fc:	edc3 7a00 	vstr	s15, [r3]
    						scan = 0;
 8002800:	4b8d      	ldr	r3, [pc, #564]	; (8002a38 <main+0xd3c>)
 8002802:	2200      	movs	r2, #0
 8002804:	701a      	strb	r2, [r3, #0]
    						Chan = rda5807_Get_Channel();
 8002806:	f002 f8f1 	bl	80049ec <rda5807_Get_Channel>
 800280a:	4603      	mov	r3, r0
 800280c:	461a      	mov	r2, r3
 800280e:	4b8f      	ldr	r3, [pc, #572]	; (8002a4c <main+0xd50>)
 8002810:	801a      	strh	r2, [r3, #0]
    						sprintf(sta, "%s", nameStation(Freq));
 8002812:	4b8d      	ldr	r3, [pc, #564]	; (8002a48 <main+0xd4c>)
 8002814:	edd3 7a00 	vldr	s15, [r3]
 8002818:	eeb0 0a67 	vmov.f32	s0, s15
 800281c:	f000 ff0e 	bl	800363c <nameStation>
 8002820:	4602      	mov	r2, r0
 8002822:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002826:	498a      	ldr	r1, [pc, #552]	; (8002a50 <main+0xd54>)
 8002828:	4618      	mov	r0, r3
 800282a:	f00b fee7 	bl	800e5fc <siprintf>
    						showLine(sta, lin6, &lia, true);
 800282e:	463a      	mov	r2, r7
 8002830:	f8b7 10b4 	ldrh.w	r1, [r7, #180]	; 0xb4
 8002834:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8002838:	2301      	movs	r3, #1
 800283a:	f000 ffad 	bl	8003798 <showLine>
    						Report(1, "[que:%u] set new Freq to %.1f %s (Chan:%u)\r\n", cntEvt, Freq, sta, Chan);
 800283e:	4b85      	ldr	r3, [pc, #532]	; (8002a54 <main+0xd58>)
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	b2db      	uxtb	r3, r3
 8002844:	461c      	mov	r4, r3
 8002846:	4b80      	ldr	r3, [pc, #512]	; (8002a48 <main+0xd4c>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4618      	mov	r0, r3
 800284c:	f7fd fe7c 	bl	8000548 <__aeabi_f2d>
 8002850:	4602      	mov	r2, r0
 8002852:	460b      	mov	r3, r1
 8002854:	497d      	ldr	r1, [pc, #500]	; (8002a4c <main+0xd50>)
 8002856:	8809      	ldrh	r1, [r1, #0]
 8002858:	9103      	str	r1, [sp, #12]
 800285a:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800285e:	9102      	str	r1, [sp, #8]
 8002860:	e9cd 2300 	strd	r2, r3, [sp]
 8002864:	4622      	mov	r2, r4
 8002866:	497c      	ldr	r1, [pc, #496]	; (8002a58 <main+0xd5c>)
 8002868:	2001      	movs	r0, #1
 800286a:	f001 f923 	bl	8003ab4 <Report>
    					}
    				}
    				//
    				uint16_t rssi = rda5807_rssi();
 800286e:	f001 fd69 	bl	8004344 <rda5807_rssi>
 8002872:	4603      	mov	r3, r0
 8002874:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
    				if (rssi != RSSI) {
 8002878:	4b78      	ldr	r3, [pc, #480]	; (8002a5c <main+0xd60>)
 800287a:	881b      	ldrh	r3, [r3, #0]
 800287c:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 8002880:	429a      	cmp	r2, r3
 8002882:	d03a      	beq.n	80028fa <main+0xbfe>
    					RSSI = rssi;
 8002884:	4a75      	ldr	r2, [pc, #468]	; (8002a5c <main+0xd60>)
 8002886:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 800288a:	8013      	strh	r3, [r2, #0]
    					stereo = rda5807_Get_StereoMonoFlag();
 800288c:	f002 f896 	bl	80049bc <rda5807_Get_StereoMonoFlag>
 8002890:	4603      	mov	r3, r0
 8002892:	461a      	mov	r2, r3
 8002894:	4b72      	ldr	r3, [pc, #456]	; (8002a60 <main+0xd64>)
 8002896:	701a      	strb	r2, [r3, #0]
#ifdef SET_DISPLAY
    					if (stereo)
 8002898:	4b71      	ldr	r3, [pc, #452]	; (8002a60 <main+0xd64>)
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d012      	beq.n	80028c6 <main+0xbca>
    						sprintf(st, "Rssi:%u Freq:%.1f S", RSSI, Freq);
 80028a0:	4b6e      	ldr	r3, [pc, #440]	; (8002a5c <main+0xd60>)
 80028a2:	881b      	ldrh	r3, [r3, #0]
 80028a4:	461c      	mov	r4, r3
 80028a6:	4b68      	ldr	r3, [pc, #416]	; (8002a48 <main+0xd4c>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4618      	mov	r0, r3
 80028ac:	f7fd fe4c 	bl	8000548 <__aeabi_f2d>
 80028b0:	4602      	mov	r2, r0
 80028b2:	460b      	mov	r3, r1
 80028b4:	f107 0050 	add.w	r0, r7, #80	; 0x50
 80028b8:	e9cd 2300 	strd	r2, r3, [sp]
 80028bc:	4622      	mov	r2, r4
 80028be:	4969      	ldr	r1, [pc, #420]	; (8002a64 <main+0xd68>)
 80028c0:	f00b fe9c 	bl	800e5fc <siprintf>
 80028c4:	e011      	b.n	80028ea <main+0xbee>
    					else
    						sprintf(st, "Rssi:%u Freq:%.1f", RSSI, Freq);
 80028c6:	4b65      	ldr	r3, [pc, #404]	; (8002a5c <main+0xd60>)
 80028c8:	881b      	ldrh	r3, [r3, #0]
 80028ca:	461c      	mov	r4, r3
 80028cc:	4b5e      	ldr	r3, [pc, #376]	; (8002a48 <main+0xd4c>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7fd fe39 	bl	8000548 <__aeabi_f2d>
 80028d6:	4602      	mov	r2, r0
 80028d8:	460b      	mov	r3, r1
 80028da:	f107 0050 	add.w	r0, r7, #80	; 0x50
 80028de:	e9cd 2300 	strd	r2, r3, [sp]
 80028e2:	4622      	mov	r2, r4
 80028e4:	4960      	ldr	r1, [pc, #384]	; (8002a68 <main+0xd6c>)
 80028e6:	f00b fe89 	bl	800e5fc <siprintf>
    					showLine(st, lin5, &lil, false);
 80028ea:	1d3a      	adds	r2, r7, #4
 80028ec:	f8b7 10b6 	ldrh.w	r1, [r7, #182]	; 0xb6
 80028f0:	f107 0050 	add.w	r0, r7, #80	; 0x50
 80028f4:	2300      	movs	r3, #0
 80028f6:	f000 ff4f 	bl	8003798 <showLine>
    					//showLine(sta, lin6, &lia, true);
    					////Report(1, "ChipID:0x%x Chan:%u Freq:%.2f RSSI:%u\r\n", rdaID, Chan, Freq, RSSI);
#endif
    				}
    				//
    				if (devError) {
 80028fa:	4b5c      	ldr	r3, [pc, #368]	; (8002a6c <main+0xd70>)
 80028fc:	881b      	ldrh	r3, [r3, #0]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d00d      	beq.n	800291e <main+0xc22>
    					dl = sprintf(tmp, "devError : 0x%04X", devError);
 8002902:	4b5a      	ldr	r3, [pc, #360]	; (8002a6c <main+0xd70>)
 8002904:	881b      	ldrh	r3, [r3, #0]
 8002906:	461a      	mov	r2, r3
 8002908:	4959      	ldr	r1, [pc, #356]	; (8002a70 <main+0xd74>)
 800290a:	485a      	ldr	r0, [pc, #360]	; (8002a74 <main+0xd78>)
 800290c:	f00b fe76 	bl	800e5fc <siprintf>
 8002910:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
    					lastErr = devError;
 8002914:	4b55      	ldr	r3, [pc, #340]	; (8002a6c <main+0xd70>)
 8002916:	881b      	ldrh	r3, [r3, #0]
 8002918:	f8a7 30d8 	strh.w	r3, [r7, #216]	; 0xd8
 800291c:	e013      	b.n	8002946 <main+0xc4a>
    				} else {
    					if (lastErr) {
 800291e:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
 8002922:	2b00      	cmp	r3, #0
 8002924:	d00c      	beq.n	8002940 <main+0xc44>
    						dl = sprintf(tmp, "Ver.%s", ver);
 8002926:	4b46      	ldr	r3, [pc, #280]	; (8002a40 <main+0xd44>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	461a      	mov	r2, r3
 800292c:	4952      	ldr	r1, [pc, #328]	; (8002a78 <main+0xd7c>)
 800292e:	4851      	ldr	r0, [pc, #324]	; (8002a74 <main+0xd78>)
 8002930:	f00b fe64 	bl	800e5fc <siprintf>
 8002934:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
    						lastErr = devOK;
 8002938:	2300      	movs	r3, #0
 800293a:	f8a7 30d8 	strh.w	r3, [r7, #216]	; 0xd8
 800293e:	e002      	b.n	8002946 <main+0xc4a>
    					} else dl = 0;
 8002940:	2300      	movs	r3, #0
 8002942:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    				}
#ifdef SET_DISPLAY
    				if (dl) {
 8002946:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d032      	beq.n	80029b4 <main+0xcb8>
    					ST7565_DrawFilledRectangle(0, SCREEN_HEIGHT - Font_6x8.FontHeight, SCREEN_WIDTH - 1, Font_6x8.FontHeight, PIX_OFF);
 800294e:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 8002952:	b29b      	uxth	r3, r3
 8002954:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8002958:	b29b      	uxth	r3, r3
 800295a:	b219      	sxth	r1, r3
 800295c:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 8002960:	b21b      	sxth	r3, r3
 8002962:	2200      	movs	r2, #0
 8002964:	9200      	str	r2, [sp, #0]
 8002966:	227f      	movs	r2, #127	; 0x7f
 8002968:	2000      	movs	r0, #0
 800296a:	f7ff f958 	bl	8001c1e <ST7565_DrawFilledRectangle>
    					x = ((SCREEN_WIDTH - (Font_6x8.FontWidth * dl)) >> 1) & 0x7f;
 800296e:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 8002972:	461a      	mov	r2, r3
 8002974:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002978:	fb02 f303 	mul.w	r3, r2, r3
 800297c:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002980:	105b      	asrs	r3, r3, #1
 8002982:	b29b      	uxth	r3, r3
 8002984:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002988:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
    					ST7565_Print(x, SCREEN_HEIGHT - Font_6x8.FontHeight, tmp, &Font_6x8, 1, PIX_ON);
 800298c:	f9b7 00b2 	ldrsh.w	r0, [r7, #178]	; 0xb2
 8002990:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 8002994:	b29b      	uxth	r3, r3
 8002996:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800299a:	b29b      	uxth	r3, r3
 800299c:	b219      	sxth	r1, r3
 800299e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80029a2:	2201      	movs	r2, #1
 80029a4:	9201      	str	r2, [sp, #4]
 80029a6:	2201      	movs	r2, #1
 80029a8:	9200      	str	r2, [sp, #0]
 80029aa:	4a32      	ldr	r2, [pc, #200]	; (8002a74 <main+0xd78>)
 80029ac:	f7fe fede 	bl	800176c <ST7565_Print>
    					ST7565_Update();
 80029b0:	f7fe fd2c 	bl	800140c <ST7565_Update>
    				}
    				//
    				ST7565_Update();
 80029b4:	f7fe fd2a 	bl	800140c <ST7565_Update>
#endif
    			}
    			break;
 80029b8:	e16d      	b.n	8002c96 <main+0xf9a>
    			case evt_Clr:
    				devError = devOK;
 80029ba:	4b2c      	ldr	r3, [pc, #176]	; (8002a6c <main+0xd70>)
 80029bc:	2200      	movs	r2, #0
 80029be:	801a      	strh	r2, [r3, #0]
    				Report(1, "[que:%u] Clear all Errors...\r\n", cntEvt);
 80029c0:	4b24      	ldr	r3, [pc, #144]	; (8002a54 <main+0xd58>)
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	461a      	mov	r2, r3
 80029c8:	492c      	ldr	r1, [pc, #176]	; (8002a7c <main+0xd80>)
 80029ca:	2001      	movs	r0, #1
 80029cc:	f001 f872 	bl	8003ab4 <Report>
    			break;
 80029d0:	e161      	b.n	8002c96 <main+0xf9a>
    			case evt_Help:
    				stx[0] = '\0';
 80029d2:	4b2b      	ldr	r3, [pc, #172]	; (8002a80 <main+0xd84>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	701a      	strb	r2, [r3, #0]
    				for (int8_t i = 0; i < MAX_CMDS; i++) sprintf(stx+strlen(stx), "\t%s\r\n", s_cmds[i]);
 80029d8:	2300      	movs	r3, #0
 80029da:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80029de:	e015      	b.n	8002a0c <main+0xd10>
 80029e0:	4827      	ldr	r0, [pc, #156]	; (8002a80 <main+0xd84>)
 80029e2:	f7fd fbf5 	bl	80001d0 <strlen>
 80029e6:	4603      	mov	r3, r0
 80029e8:	4a25      	ldr	r2, [pc, #148]	; (8002a80 <main+0xd84>)
 80029ea:	1898      	adds	r0, r3, r2
 80029ec:	f997 30d7 	ldrsb.w	r3, [r7, #215]	; 0xd7
 80029f0:	4a24      	ldr	r2, [pc, #144]	; (8002a84 <main+0xd88>)
 80029f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029f6:	461a      	mov	r2, r3
 80029f8:	4923      	ldr	r1, [pc, #140]	; (8002a88 <main+0xd8c>)
 80029fa:	f00b fdff 	bl	800e5fc <siprintf>
 80029fe:	f997 30d7 	ldrsb.w	r3, [r7, #215]	; 0xd7
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	3301      	adds	r3, #1
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002a0c:	f997 30d7 	ldrsb.w	r3, [r7, #215]	; 0xd7
 8002a10:	2b10      	cmp	r3, #16
 8002a12:	dde5      	ble.n	80029e0 <main+0xce4>
    				Report(0, "%s", stx);
 8002a14:	4a1a      	ldr	r2, [pc, #104]	; (8002a80 <main+0xd84>)
 8002a16:	490e      	ldr	r1, [pc, #56]	; (8002a50 <main+0xd54>)
 8002a18:	2000      	movs	r0, #0
 8002a1a:	f001 f84b 	bl	8003ab4 <Report>
    			break;
 8002a1e:	e13a      	b.n	8002c96 <main+0xf9a>
    			case evt_Restart:
    				restart = 1;
 8002a20:	4b1a      	ldr	r3, [pc, #104]	; (8002a8c <main+0xd90>)
 8002a22:	2201      	movs	r2, #1
 8002a24:	701a      	strb	r2, [r3, #0]
    				Report(1, "[que:%u] Restart system...\r\n", cntEvt);
 8002a26:	4b0b      	ldr	r3, [pc, #44]	; (8002a54 <main+0xd58>)
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	4918      	ldr	r1, [pc, #96]	; (8002a90 <main+0xd94>)
 8002a30:	2001      	movs	r0, #1
 8002a32:	f001 f83f 	bl	8003ab4 <Report>
    			break;
 8002a36:	e12e      	b.n	8002c96 <main+0xf9a>
 8002a38:	20002c95 	.word	0x20002c95
 8002a3c:	200001c2 	.word	0x200001c2
 8002a40:	20000004 	.word	0x20000004
 8002a44:	080125c8 	.word	0x080125c8
 8002a48:	200001b8 	.word	0x200001b8
 8002a4c:	20002c90 	.word	0x20002c90
 8002a50:	080124ac 	.word	0x080124ac
 8002a54:	2000186c 	.word	0x2000186c
 8002a58:	08012598 	.word	0x08012598
 8002a5c:	20002c92 	.word	0x20002c92
 8002a60:	20002c98 	.word	0x20002c98
 8002a64:	08012484 	.word	0x08012484
 8002a68:	08012498 	.word	0x08012498
 8002a6c:	20001450 	.word	0x20001450
 8002a70:	080125d4 	.word	0x080125d4
 8002a74:	20000fd0 	.word	0x20000fd0
 8002a78:	0801244c 	.word	0x0801244c
 8002a7c:	080125e8 	.word	0x080125e8
 8002a80:	20000bd0 	.word	0x20000bd0
 8002a84:	2000001c 	.word	0x2000001c
 8002a88:	08012608 	.word	0x08012608
 8002a8c:	20001864 	.word	0x20001864
 8002a90:	08012610 	.word	0x08012610
    			case evt_Epoch:
    				set_Date(epoch);
 8002a94:	4ba3      	ldr	r3, [pc, #652]	; (8002d24 <main+0x1028>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f000 ff11 	bl	80038c0 <set_Date>
    				Report(1, "[que:%u] Set Unix TimeStamp to %lu\r\n", cntEvt, epoch);
 8002a9e:	4ba2      	ldr	r3, [pc, #648]	; (8002d28 <main+0x102c>)
 8002aa0:	781b      	ldrb	r3, [r3, #0]
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	4b9f      	ldr	r3, [pc, #636]	; (8002d24 <main+0x1028>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	49a0      	ldr	r1, [pc, #640]	; (8002d2c <main+0x1030>)
 8002aac:	2001      	movs	r0, #1
 8002aae:	f001 f801 	bl	8003ab4 <Report>
    			break;
 8002ab2:	e0f0      	b.n	8002c96 <main+0xf9a>
    			case evt_Err:
    				Report(1, "[que:%u] Error input from uart\r\n", cntEvt);
 8002ab4:	4b9c      	ldr	r3, [pc, #624]	; (8002d28 <main+0x102c>)
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	461a      	mov	r2, r3
 8002abc:	499c      	ldr	r1, [pc, #624]	; (8002d30 <main+0x1034>)
 8002abe:	2001      	movs	r0, #1
 8002ac0:	f000 fff8 	bl	8003ab4 <Report>
    			break;
 8002ac4:	e0e7      	b.n	8002c96 <main+0xf9a>
#ifdef SET_W25FLASH
    			case evt_sRead:
    			case evt_sNext:
    			{
    				uint32_t w25_adr = (adr_sector * W25qxx_getSectorSize()) + offset_sector;
 8002ac6:	f002 fe59 	bl	800577c <W25qxx_getSectorSize>
 8002aca:	4603      	mov	r3, r0
 8002acc:	4a99      	ldr	r2, [pc, #612]	; (8002d34 <main+0x1038>)
 8002ace:	6812      	ldr	r2, [r2, #0]
 8002ad0:	fb02 f303 	mul.w	r3, r2, r3
 8002ad4:	4a98      	ldr	r2, [pc, #608]	; (8002d38 <main+0x103c>)
 8002ad6:	6812      	ldr	r2, [r2, #0]
 8002ad8:	4413      	add	r3, r2
 8002ada:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    				uint32_t dlin = list_sector;
 8002ade:	4b97      	ldr	r3, [pc, #604]	; (8002d3c <main+0x1040>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    				int step = 32;
 8002ae6:	2320      	movs	r3, #32
 8002ae8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    				uint32_t ind = 0;
 8002aec:	2300      	movs	r3, #0
 8002aee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    				W25qxx_ReadSector(fs_work, adr_sector, offset_sector, dlin);
 8002af2:	4b90      	ldr	r3, [pc, #576]	; (8002d34 <main+0x1038>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4619      	mov	r1, r3
 8002af8:	4b8f      	ldr	r3, [pc, #572]	; (8002d38 <main+0x103c>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	461a      	mov	r2, r3
 8002afe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b02:	488f      	ldr	r0, [pc, #572]	; (8002d40 <main+0x1044>)
 8002b04:	f003 f94c 	bl	8005da0 <W25qxx_ReadSector>
    				Report(0, "Read sector:%d offset:%d len:%u\r\n", adr_sector, offset_sector, dlin);
 8002b08:	4b8a      	ldr	r3, [pc, #552]	; (8002d34 <main+0x1038>)
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	4b8a      	ldr	r3, [pc, #552]	; (8002d38 <main+0x103c>)
 8002b0e:	6819      	ldr	r1, [r3, #0]
 8002b10:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b14:	9300      	str	r3, [sp, #0]
 8002b16:	460b      	mov	r3, r1
 8002b18:	498a      	ldr	r1, [pc, #552]	; (8002d44 <main+0x1048>)
 8002b1a:	2000      	movs	r0, #0
 8002b1c:	f000 ffca 	bl	8003ab4 <Report>
    				while (ind < dlin) {
 8002b20:	e05b      	b.n	8002bda <main+0xede>
    					strf[0] = '\0';
 8002b22:	4b89      	ldr	r3, [pc, #548]	; (8002d48 <main+0x104c>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	701a      	strb	r2, [r3, #0]
    					while (1) {
    						sprintf(strf+strlen(strf), "%06X ", (unsigned int)w25_adr);
 8002b28:	4887      	ldr	r0, [pc, #540]	; (8002d48 <main+0x104c>)
 8002b2a:	f7fd fb51 	bl	80001d0 <strlen>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	4a85      	ldr	r2, [pc, #532]	; (8002d48 <main+0x104c>)
 8002b32:	4413      	add	r3, r2
 8002b34:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002b38:	4984      	ldr	r1, [pc, #528]	; (8002d4c <main+0x1050>)
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f00b fd5e 	bl	800e5fc <siprintf>
    						for (int i = 0; i < step; i++) sprintf(strf+strlen(strf), " %02X", fs_work[i + ind]);
 8002b40:	2300      	movs	r3, #0
 8002b42:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002b46:	e015      	b.n	8002b74 <main+0xe78>
 8002b48:	487f      	ldr	r0, [pc, #508]	; (8002d48 <main+0x104c>)
 8002b4a:	f7fd fb41 	bl	80001d0 <strlen>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	4a7d      	ldr	r2, [pc, #500]	; (8002d48 <main+0x104c>)
 8002b52:	1898      	adds	r0, r3, r2
 8002b54:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002b58:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002b5c:	4413      	add	r3, r2
 8002b5e:	4a78      	ldr	r2, [pc, #480]	; (8002d40 <main+0x1044>)
 8002b60:	5cd3      	ldrb	r3, [r2, r3]
 8002b62:	461a      	mov	r2, r3
 8002b64:	497a      	ldr	r1, [pc, #488]	; (8002d50 <main+0x1054>)
 8002b66:	f00b fd49 	bl	800e5fc <siprintf>
 8002b6a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002b6e:	3301      	adds	r3, #1
 8002b70:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002b74:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002b78:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	dbe3      	blt.n	8002b48 <main+0xe4c>
    						strcat(strf, "\r\n");
 8002b80:	4871      	ldr	r0, [pc, #452]	; (8002d48 <main+0x104c>)
 8002b82:	f7fd fb25 	bl	80001d0 <strlen>
 8002b86:	4603      	mov	r3, r0
 8002b88:	461a      	mov	r2, r3
 8002b8a:	4b6f      	ldr	r3, [pc, #444]	; (8002d48 <main+0x104c>)
 8002b8c:	4413      	add	r3, r2
 8002b8e:	4a71      	ldr	r2, [pc, #452]	; (8002d54 <main+0x1058>)
 8002b90:	8811      	ldrh	r1, [r2, #0]
 8002b92:	7892      	ldrb	r2, [r2, #2]
 8002b94:	8019      	strh	r1, [r3, #0]
 8002b96:	709a      	strb	r2, [r3, #2]
    						w25_adr += step;
 8002b98:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b9c:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002ba0:	4413      	add	r3, r2
 8002ba2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    						ind += step;
 8002ba6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002baa:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8002bae:	4413      	add	r3, r2
 8002bb0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    						if (!(ind % W25qxx_getPageSize())) break;
 8002bb4:	f002 fdee 	bl	8005794 <W25qxx_getPageSize>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002bbe:	fbb3 f1f2 	udiv	r1, r3, r2
 8002bc2:	fb01 f202 	mul.w	r2, r1, r2
 8002bc6:	1a9b      	subs	r3, r3, r2
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d000      	beq.n	8002bce <main+0xed2>
    						sprintf(strf+strlen(strf), "%06X ", (unsigned int)w25_adr);
 8002bcc:	e7ac      	b.n	8002b28 <main+0xe2c>
    						if (!(ind % W25qxx_getPageSize())) break;
 8002bce:	bf00      	nop
    					}
    					Report(0, "%s", strf);
 8002bd0:	4a5d      	ldr	r2, [pc, #372]	; (8002d48 <main+0x104c>)
 8002bd2:	4961      	ldr	r1, [pc, #388]	; (8002d58 <main+0x105c>)
 8002bd4:	2000      	movs	r0, #0
 8002bd6:	f000 ff6d 	bl	8003ab4 <Report>
    				while (ind < dlin) {
 8002bda:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8002bde:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d39d      	bcc.n	8002b22 <main+0xe26>
    				}
    			}
    			break;
 8002be6:	e056      	b.n	8002c96 <main+0xf9a>
    			case evt_sWrite:
    			{
    				uint32_t ss = W25qxx_getSectorSize();
 8002be8:	f002 fdc8 	bl	800577c <W25qxx_getSectorSize>
 8002bec:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
    				if (!W25qxx_IsEmptySector(adr_sector, 0, ss)) W25qxx_EraseSector(adr_sector);
 8002bf0:	4b50      	ldr	r3, [pc, #320]	; (8002d34 <main+0x1038>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002bf8:	2100      	movs	r1, #0
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f002 fe34 	bl	8005868 <W25qxx_IsEmptySector>
 8002c00:	4603      	mov	r3, r0
 8002c02:	f083 0301 	eor.w	r3, r3, #1
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d004      	beq.n	8002c16 <main+0xf1a>
 8002c0c:	4b49      	ldr	r3, [pc, #292]	; (8002d34 <main+0x1038>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4618      	mov	r0, r3
 8002c12:	f002 fdcd 	bl	80057b0 <W25qxx_EraseSector>
    				memset(fs_work, byte_write, ss);
 8002c16:	4b51      	ldr	r3, [pc, #324]	; (8002d5c <main+0x1060>)
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002c1e:	4619      	mov	r1, r3
 8002c20:	4847      	ldr	r0, [pc, #284]	; (8002d40 <main+0x1044>)
 8002c22:	f00b f879 	bl	800dd18 <memset>
    				if (len_write != -1) ss = len_write;
 8002c26:	4b4e      	ldr	r3, [pc, #312]	; (8002d60 <main+0x1064>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c2e:	d003      	beq.n	8002c38 <main+0xf3c>
 8002c30:	4b4b      	ldr	r3, [pc, #300]	; (8002d60 <main+0x1064>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    				W25qxx_WriteSector(fs_work, adr_sector, offset_sector, ss);
 8002c38:	4b3e      	ldr	r3, [pc, #248]	; (8002d34 <main+0x1038>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	4b3e      	ldr	r3, [pc, #248]	; (8002d38 <main+0x103c>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	461a      	mov	r2, r3
 8002c44:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c48:	483d      	ldr	r0, [pc, #244]	; (8002d40 <main+0x1044>)
 8002c4a:	f002 ff81 	bl	8005b50 <W25qxx_WriteSector>
    				Report(0, "Fill sector:%d byte:%02X len:%d done\r\n", adr_sector, byte_write, ss);
 8002c4e:	4b39      	ldr	r3, [pc, #228]	; (8002d34 <main+0x1038>)
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	4b42      	ldr	r3, [pc, #264]	; (8002d5c <main+0x1060>)
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	4619      	mov	r1, r3
 8002c58:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c5c:	9300      	str	r3, [sp, #0]
 8002c5e:	460b      	mov	r3, r1
 8002c60:	4940      	ldr	r1, [pc, #256]	; (8002d64 <main+0x1068>)
 8002c62:	2000      	movs	r0, #0
 8002c64:	f000 ff26 	bl	8003ab4 <Report>
    			}
    			break;
 8002c68:	e015      	b.n	8002c96 <main+0xf9a>
    			case evt_sErase:
    				W25qxx_EraseSector(adr_sector);
 8002c6a:	4b32      	ldr	r3, [pc, #200]	; (8002d34 <main+0x1038>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f002 fd9e 	bl	80057b0 <W25qxx_EraseSector>
    				Report(0, "Erase sector:%d done\r\n", adr_sector);
 8002c74:	4b2f      	ldr	r3, [pc, #188]	; (8002d34 <main+0x1038>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	461a      	mov	r2, r3
 8002c7a:	493b      	ldr	r1, [pc, #236]	; (8002d68 <main+0x106c>)
 8002c7c:	2000      	movs	r0, #0
 8002c7e:	f000 ff19 	bl	8003ab4 <Report>
    				break;
 8002c82:	e008      	b.n	8002c96 <main+0xf9a>
    			break;
 8002c84:	bf00      	nop
 8002c86:	e006      	b.n	8002c96 <main+0xf9a>
    			break;
 8002c88:	bf00      	nop
 8002c8a:	e004      	b.n	8002c96 <main+0xf9a>
    			break;
 8002c8c:	bf00      	nop
 8002c8e:	e002      	b.n	8002c96 <main+0xf9a>
				break;
 8002c90:	bf00      	nop
 8002c92:	e000      	b.n	8002c96 <main+0xf9a>
    			break;
 8002c94:	bf00      	nop
#endif
    		}
    		if ((evt >= evt_sRead) && (evt <= evt_sWrite)) {
 8002c96:	4b35      	ldr	r3, [pc, #212]	; (8002d6c <main+0x1070>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	2b03      	cmp	r3, #3
 8002c9c:	dd0b      	ble.n	8002cb6 <main+0xfba>
 8002c9e:	4b33      	ldr	r3, [pc, #204]	; (8002d6c <main+0x1070>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	2b07      	cmp	r3, #7
 8002ca4:	dc07      	bgt.n	8002cb6 <main+0xfba>
    			last_cmd_sector =  evt;//cmd_sector;
 8002ca6:	4b31      	ldr	r3, [pc, #196]	; (8002d6c <main+0x1070>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a31      	ldr	r2, [pc, #196]	; (8002d70 <main+0x1074>)
 8002cac:	6013      	str	r3, [r2, #0]
    			cmd_sector = sNone;
 8002cae:	4b31      	ldr	r3, [pc, #196]	; (8002d74 <main+0x1078>)
 8002cb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002cb4:	601a      	str	r2, [r3, #0]
    		}
    	}
#endif

    	if (devError) {
 8002cb6:	4b30      	ldr	r3, [pc, #192]	; (8002d78 <main+0x107c>)
 8002cb8:	881b      	ldrh	r3, [r3, #0]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d009      	beq.n	8002cd2 <main+0xfd6>
    		errLedOn(true);
 8002cbe:	2001      	movs	r0, #1
 8002cc0:	f000 fdd8 	bl	8003874 <errLedOn>
    		HAL_Delay(50);
 8002cc4:	2032      	movs	r0, #50	; 0x32
 8002cc6:	f003 f975 	bl	8005fb4 <HAL_Delay>
    		errLedOn(false);
 8002cca:	2000      	movs	r0, #0
 8002ccc:	f000 fdd2 	bl	8003874 <errLedOn>
 8002cd0:	e009      	b.n	8002ce6 <main+0xfea>
    	} else {
    		if (HAL_GPIO_ReadPin(ERR_LED_GPIO_Port, ERR_LED_Pin)) errLedOn(false);
 8002cd2:	2108      	movs	r1, #8
 8002cd4:	4829      	ldr	r0, [pc, #164]	; (8002d7c <main+0x1080>)
 8002cd6:	f003 ff03 	bl	8006ae0 <HAL_GPIO_ReadPin>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d002      	beq.n	8002ce6 <main+0xfea>
 8002ce0:	2000      	movs	r0, #0
 8002ce2:	f000 fdc7 	bl	8003874 <errLedOn>
    while (!restart) {
 8002ce6:	4b26      	ldr	r3, [pc, #152]	; (8002d80 <main+0x1084>)
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	f43f aadf 	beq.w	80022b0 <main+0x5b4>

    /* USER CODE BEGIN 3 */

    }

    HAL_TIM_Base_Stop_IT(tikPort);
 8002cf2:	4b24      	ldr	r3, [pc, #144]	; (8002d84 <main+0x1088>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f008 feda 	bl	800bab0 <HAL_TIM_Base_Stop_IT>

#ifdef SET_DISPLAY
    ST7565_Reset();
 8002cfc:	f7fe f9e4 	bl	80010c8 <ST7565_Reset>
    ST7565_CMD_DISPLAY(CMD_DISPLAY_OFF);
 8002d00:	20ae      	movs	r0, #174	; 0xae
 8002d02:	f7fe fb13 	bl	800132c <ST7565_CMD_DISPLAY>
#endif
#if defined(SET_RDA_CHIP) || defined(SET_NEW_RDA)

#endif
    Report(1, "[que:%u] Stop application...\r\n", cntEvt);
 8002d06:	4b08      	ldr	r3, [pc, #32]	; (8002d28 <main+0x102c>)
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	491e      	ldr	r1, [pc, #120]	; (8002d88 <main+0x108c>)
 8002d10:	2001      	movs	r0, #1
 8002d12:	f000 fecf 	bl	8003ab4 <Report>

    HAL_Delay(500);
 8002d16:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002d1a:	f003 f94b 	bl	8005fb4 <HAL_Delay>

    NVIC_SystemReset();
 8002d1e:	f7fe ffd7 	bl	8001cd0 <__NVIC_SystemReset>
 8002d22:	bf00      	nop
 8002d24:	20000018 	.word	0x20000018
 8002d28:	2000186c 	.word	0x2000186c
 8002d2c:	08012630 	.word	0x08012630
 8002d30:	08012658 	.word	0x08012658
 8002d34:	20001870 	.word	0x20001870
 8002d38:	20001874 	.word	0x20001874
 8002d3c:	20001878 	.word	0x20001878
 8002d40:	20001880 	.word	0x20001880
 8002d44:	0801267c 	.word	0x0801267c
 8002d48:	20002880 	.word	0x20002880
 8002d4c:	080126a0 	.word	0x080126a0
 8002d50:	080126a8 	.word	0x080126a8
 8002d54:	080126b0 	.word	0x080126b0
 8002d58:	080124ac 	.word	0x080124ac
 8002d5c:	200001b4 	.word	0x200001b4
 8002d60:	2000187c 	.word	0x2000187c
 8002d64:	080126b4 	.word	0x080126b4
 8002d68:	080126dc 	.word	0x080126dc
 8002d6c:	200001a4 	.word	0x200001a4
 8002d70:	200001b0 	.word	0x200001b0
 8002d74:	200001ac 	.word	0x200001ac
 8002d78:	20001450 	.word	0x20001450
 8002d7c:	48000800 	.word	0x48000800
 8002d80:	20001864 	.word	0x20001864
 8002d84:	20000008 	.word	0x20000008
 8002d88:	080126f4 	.word	0x080126f4

08002d8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b096      	sub	sp, #88	; 0x58
 8002d90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d92:	f107 0314 	add.w	r3, r7, #20
 8002d96:	2244      	movs	r2, #68	; 0x44
 8002d98:	2100      	movs	r1, #0
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f00a ffbc 	bl	800dd18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002da0:	463b      	mov	r3, r7
 8002da2:	2200      	movs	r2, #0
 8002da4:	601a      	str	r2, [r3, #0]
 8002da6:	605a      	str	r2, [r3, #4]
 8002da8:	609a      	str	r2, [r3, #8]
 8002daa:	60da      	str	r2, [r3, #12]
 8002dac:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002dae:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002db2:	f005 fb7f 	bl	80084b4 <HAL_PWREx_ControlVoltageScaling>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d001      	beq.n	8002dc0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002dbc:	f001 fa42 	bl	8004244 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002dc0:	2309      	movs	r3, #9
 8002dc2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002dc4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002dc8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002dce:	2302      	movs	r3, #2
 8002dd0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 8002dda:	2314      	movs	r3, #20
 8002ddc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002dde:	2307      	movs	r3, #7
 8002de0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002de2:	2302      	movs	r3, #2
 8002de4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002de6:	2302      	movs	r3, #2
 8002de8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002dea:	f107 0314 	add.w	r3, r7, #20
 8002dee:	4618      	mov	r0, r3
 8002df0:	f005 fbb6 	bl	8008560 <HAL_RCC_OscConfig>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d001      	beq.n	8002dfe <SystemClock_Config+0x72>
  {
    Error_Handler();
 8002dfa:	f001 fa23 	bl	8004244 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002dfe:	230f      	movs	r3, #15
 8002e00:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002e02:	2303      	movs	r3, #3
 8002e04:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e06:	2300      	movs	r3, #0
 8002e08:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002e12:	463b      	mov	r3, r7
 8002e14:	2104      	movs	r1, #4
 8002e16:	4618      	mov	r0, r3
 8002e18:	f005 ff7e 	bl	8008d18 <HAL_RCC_ClockConfig>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d001      	beq.n	8002e26 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002e22:	f001 fa0f 	bl	8004244 <Error_Handler>
  }
}
 8002e26:	bf00      	nop
 8002e28:	3758      	adds	r7, #88	; 0x58
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
	...

08002e30 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002e34:	4b1b      	ldr	r3, [pc, #108]	; (8002ea4 <MX_I2C1_Init+0x74>)
 8002e36:	4a1c      	ldr	r2, [pc, #112]	; (8002ea8 <MX_I2C1_Init+0x78>)
 8002e38:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702D95;
 8002e3a:	4b1a      	ldr	r3, [pc, #104]	; (8002ea4 <MX_I2C1_Init+0x74>)
 8002e3c:	4a1b      	ldr	r2, [pc, #108]	; (8002eac <MX_I2C1_Init+0x7c>)
 8002e3e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002e40:	4b18      	ldr	r3, [pc, #96]	; (8002ea4 <MX_I2C1_Init+0x74>)
 8002e42:	2200      	movs	r2, #0
 8002e44:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002e46:	4b17      	ldr	r3, [pc, #92]	; (8002ea4 <MX_I2C1_Init+0x74>)
 8002e48:	2201      	movs	r2, #1
 8002e4a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002e4c:	4b15      	ldr	r3, [pc, #84]	; (8002ea4 <MX_I2C1_Init+0x74>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002e52:	4b14      	ldr	r3, [pc, #80]	; (8002ea4 <MX_I2C1_Init+0x74>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002e58:	4b12      	ldr	r3, [pc, #72]	; (8002ea4 <MX_I2C1_Init+0x74>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002e5e:	4b11      	ldr	r3, [pc, #68]	; (8002ea4 <MX_I2C1_Init+0x74>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002e64:	4b0f      	ldr	r3, [pc, #60]	; (8002ea4 <MX_I2C1_Init+0x74>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002e6a:	480e      	ldr	r0, [pc, #56]	; (8002ea4 <MX_I2C1_Init+0x74>)
 8002e6c:	f003 fe9a 	bl	8006ba4 <HAL_I2C_Init>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d001      	beq.n	8002e7a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002e76:	f001 f9e5 	bl	8004244 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 8002e7a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002e7e:	4809      	ldr	r0, [pc, #36]	; (8002ea4 <MX_I2C1_Init+0x74>)
 8002e80:	f005 fa52 	bl	8008328 <HAL_I2CEx_ConfigAnalogFilter>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d001      	beq.n	8002e8e <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8002e8a:	f001 f9db 	bl	8004244 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002e8e:	2100      	movs	r1, #0
 8002e90:	4804      	ldr	r0, [pc, #16]	; (8002ea4 <MX_I2C1_Init+0x74>)
 8002e92:	f005 fa94 	bl	80083be <HAL_I2CEx_ConfigDigitalFilter>
 8002e96:	4603      	mov	r3, r0
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d001      	beq.n	8002ea0 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8002e9c:	f001 f9d2 	bl	8004244 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002ea0:	bf00      	nop
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	20000810 	.word	0x20000810
 8002ea8:	40005400 	.word	0x40005400
 8002eac:	00702d95 	.word	0x00702d95

08002eb0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b086      	sub	sp, #24
 8002eb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002eb6:	1d3b      	adds	r3, r7, #4
 8002eb8:	2200      	movs	r2, #0
 8002eba:	601a      	str	r2, [r3, #0]
 8002ebc:	605a      	str	r2, [r3, #4]
 8002ebe:	609a      	str	r2, [r3, #8]
 8002ec0:	60da      	str	r2, [r3, #12]
 8002ec2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002ec8:	4b25      	ldr	r3, [pc, #148]	; (8002f60 <MX_RTC_Init+0xb0>)
 8002eca:	4a26      	ldr	r2, [pc, #152]	; (8002f64 <MX_RTC_Init+0xb4>)
 8002ecc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002ece:	4b24      	ldr	r3, [pc, #144]	; (8002f60 <MX_RTC_Init+0xb0>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002ed4:	4b22      	ldr	r3, [pc, #136]	; (8002f60 <MX_RTC_Init+0xb0>)
 8002ed6:	227f      	movs	r2, #127	; 0x7f
 8002ed8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002eda:	4b21      	ldr	r3, [pc, #132]	; (8002f60 <MX_RTC_Init+0xb0>)
 8002edc:	22ff      	movs	r2, #255	; 0xff
 8002ede:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002ee0:	4b1f      	ldr	r3, [pc, #124]	; (8002f60 <MX_RTC_Init+0xb0>)
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002ee6:	4b1e      	ldr	r3, [pc, #120]	; (8002f60 <MX_RTC_Init+0xb0>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002eec:	4b1c      	ldr	r3, [pc, #112]	; (8002f60 <MX_RTC_Init+0xb0>)
 8002eee:	2200      	movs	r2, #0
 8002ef0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002ef2:	4b1b      	ldr	r3, [pc, #108]	; (8002f60 <MX_RTC_Init+0xb0>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002ef8:	4819      	ldr	r0, [pc, #100]	; (8002f60 <MX_RTC_Init+0xb0>)
 8002efa:	f006 fded 	bl	8009ad8 <HAL_RTC_Init>
 8002efe:	4603      	mov	r3, r0
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d001      	beq.n	8002f08 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8002f04:	f001 f99e 	bl	8004244 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8002f10:	2300      	movs	r3, #0
 8002f12:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002f14:	2300      	movs	r3, #0
 8002f16:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002f1c:	1d3b      	adds	r3, r7, #4
 8002f1e:	2201      	movs	r2, #1
 8002f20:	4619      	mov	r1, r3
 8002f22:	480f      	ldr	r0, [pc, #60]	; (8002f60 <MX_RTC_Init+0xb0>)
 8002f24:	f006 fe53 	bl	8009bce <HAL_RTC_SetTime>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d001      	beq.n	8002f32 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8002f2e:	f001 f989 	bl	8004244 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 8002f32:	2303      	movs	r3, #3
 8002f34:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JULY;
 8002f36:	2307      	movs	r3, #7
 8002f38:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x6;
 8002f3a:	2306      	movs	r3, #6
 8002f3c:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x22;
 8002f3e:	2322      	movs	r3, #34	; 0x22
 8002f40:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002f42:	463b      	mov	r3, r7
 8002f44:	2201      	movs	r2, #1
 8002f46:	4619      	mov	r1, r3
 8002f48:	4805      	ldr	r0, [pc, #20]	; (8002f60 <MX_RTC_Init+0xb0>)
 8002f4a:	f006 ff39 	bl	8009dc0 <HAL_RTC_SetDate>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d001      	beq.n	8002f58 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8002f54:	f001 f976 	bl	8004244 <Error_Handler>

  //set_Date(epoch);

  /* USER CODE END RTC_Init 2 */

}
 8002f58:	bf00      	nop
 8002f5a:	3718      	adds	r7, #24
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	200008f4 	.word	0x200008f4
 8002f64:	40002800 	.word	0x40002800

08002f68 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002f6c:	4b1b      	ldr	r3, [pc, #108]	; (8002fdc <MX_SPI1_Init+0x74>)
 8002f6e:	4a1c      	ldr	r2, [pc, #112]	; (8002fe0 <MX_SPI1_Init+0x78>)
 8002f70:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002f72:	4b1a      	ldr	r3, [pc, #104]	; (8002fdc <MX_SPI1_Init+0x74>)
 8002f74:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002f78:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002f7a:	4b18      	ldr	r3, [pc, #96]	; (8002fdc <MX_SPI1_Init+0x74>)
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002f80:	4b16      	ldr	r3, [pc, #88]	; (8002fdc <MX_SPI1_Init+0x74>)
 8002f82:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002f86:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f88:	4b14      	ldr	r3, [pc, #80]	; (8002fdc <MX_SPI1_Init+0x74>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002f8e:	4b13      	ldr	r3, [pc, #76]	; (8002fdc <MX_SPI1_Init+0x74>)
 8002f90:	2200      	movs	r2, #0
 8002f92:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002f94:	4b11      	ldr	r3, [pc, #68]	; (8002fdc <MX_SPI1_Init+0x74>)
 8002f96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f9a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002f9c:	4b0f      	ldr	r3, [pc, #60]	; (8002fdc <MX_SPI1_Init+0x74>)
 8002f9e:	2208      	movs	r2, #8
 8002fa0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002fa2:	4b0e      	ldr	r3, [pc, #56]	; (8002fdc <MX_SPI1_Init+0x74>)
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002fa8:	4b0c      	ldr	r3, [pc, #48]	; (8002fdc <MX_SPI1_Init+0x74>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002fae:	4b0b      	ldr	r3, [pc, #44]	; (8002fdc <MX_SPI1_Init+0x74>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002fb4:	4b09      	ldr	r3, [pc, #36]	; (8002fdc <MX_SPI1_Init+0x74>)
 8002fb6:	2207      	movs	r2, #7
 8002fb8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002fba:	4b08      	ldr	r3, [pc, #32]	; (8002fdc <MX_SPI1_Init+0x74>)
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002fc0:	4b06      	ldr	r3, [pc, #24]	; (8002fdc <MX_SPI1_Init+0x74>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002fc6:	4805      	ldr	r0, [pc, #20]	; (8002fdc <MX_SPI1_Init+0x74>)
 8002fc8:	f007 f8a0 	bl	800a10c <HAL_SPI_Init>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d001      	beq.n	8002fd6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002fd2:	f001 f937 	bl	8004244 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002fd6:	bf00      	nop
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	20000918 	.word	0x20000918
 8002fe0:	40013000 	.word	0x40013000

08002fe4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002fe8:	4b1b      	ldr	r3, [pc, #108]	; (8003058 <MX_SPI2_Init+0x74>)
 8002fea:	4a1c      	ldr	r2, [pc, #112]	; (800305c <MX_SPI2_Init+0x78>)
 8002fec:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002fee:	4b1a      	ldr	r3, [pc, #104]	; (8003058 <MX_SPI2_Init+0x74>)
 8002ff0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002ff4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002ff6:	4b18      	ldr	r3, [pc, #96]	; (8003058 <MX_SPI2_Init+0x74>)
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002ffc:	4b16      	ldr	r3, [pc, #88]	; (8003058 <MX_SPI2_Init+0x74>)
 8002ffe:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003002:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003004:	4b14      	ldr	r3, [pc, #80]	; (8003058 <MX_SPI2_Init+0x74>)
 8003006:	2200      	movs	r2, #0
 8003008:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800300a:	4b13      	ldr	r3, [pc, #76]	; (8003058 <MX_SPI2_Init+0x74>)
 800300c:	2200      	movs	r2, #0
 800300e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003010:	4b11      	ldr	r3, [pc, #68]	; (8003058 <MX_SPI2_Init+0x74>)
 8003012:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003016:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003018:	4b0f      	ldr	r3, [pc, #60]	; (8003058 <MX_SPI2_Init+0x74>)
 800301a:	2200      	movs	r2, #0
 800301c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800301e:	4b0e      	ldr	r3, [pc, #56]	; (8003058 <MX_SPI2_Init+0x74>)
 8003020:	2200      	movs	r2, #0
 8003022:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003024:	4b0c      	ldr	r3, [pc, #48]	; (8003058 <MX_SPI2_Init+0x74>)
 8003026:	2200      	movs	r2, #0
 8003028:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800302a:	4b0b      	ldr	r3, [pc, #44]	; (8003058 <MX_SPI2_Init+0x74>)
 800302c:	2200      	movs	r2, #0
 800302e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8003030:	4b09      	ldr	r3, [pc, #36]	; (8003058 <MX_SPI2_Init+0x74>)
 8003032:	2207      	movs	r2, #7
 8003034:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003036:	4b08      	ldr	r3, [pc, #32]	; (8003058 <MX_SPI2_Init+0x74>)
 8003038:	2200      	movs	r2, #0
 800303a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800303c:	4b06      	ldr	r3, [pc, #24]	; (8003058 <MX_SPI2_Init+0x74>)
 800303e:	2200      	movs	r2, #0
 8003040:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003042:	4805      	ldr	r0, [pc, #20]	; (8003058 <MX_SPI2_Init+0x74>)
 8003044:	f007 f862 	bl	800a10c <HAL_SPI_Init>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d001      	beq.n	8003052 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800304e:	f001 f8f9 	bl	8004244 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003052:	bf00      	nop
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	2000097c 	.word	0x2000097c
 800305c:	40003800 	.word	0x40003800

08003060 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b088      	sub	sp, #32
 8003064:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003066:	f107 0310 	add.w	r3, r7, #16
 800306a:	2200      	movs	r2, #0
 800306c:	601a      	str	r2, [r3, #0]
 800306e:	605a      	str	r2, [r3, #4]
 8003070:	609a      	str	r2, [r3, #8]
 8003072:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003074:	1d3b      	adds	r3, r7, #4
 8003076:	2200      	movs	r2, #0
 8003078:	601a      	str	r2, [r3, #0]
 800307a:	605a      	str	r2, [r3, #4]
 800307c:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN TIM4_Init 1 */

  // interupt every 10 ms

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800307e:	4b1d      	ldr	r3, [pc, #116]	; (80030f4 <MX_TIM4_Init+0x94>)
 8003080:	4a1d      	ldr	r2, [pc, #116]	; (80030f8 <MX_TIM4_Init+0x98>)
 8003082:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7999;
 8003084:	4b1b      	ldr	r3, [pc, #108]	; (80030f4 <MX_TIM4_Init+0x94>)
 8003086:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800308a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800308c:	4b19      	ldr	r3, [pc, #100]	; (80030f4 <MX_TIM4_Init+0x94>)
 800308e:	2200      	movs	r2, #0
 8003090:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 8003092:	4b18      	ldr	r3, [pc, #96]	; (80030f4 <MX_TIM4_Init+0x94>)
 8003094:	2263      	movs	r2, #99	; 0x63
 8003096:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003098:	4b16      	ldr	r3, [pc, #88]	; (80030f4 <MX_TIM4_Init+0x94>)
 800309a:	2200      	movs	r2, #0
 800309c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800309e:	4b15      	ldr	r3, [pc, #84]	; (80030f4 <MX_TIM4_Init+0x94>)
 80030a0:	2280      	movs	r2, #128	; 0x80
 80030a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80030a4:	4813      	ldr	r0, [pc, #76]	; (80030f4 <MX_TIM4_Init+0x94>)
 80030a6:	f008 fc3b 	bl	800b920 <HAL_TIM_Base_Init>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d001      	beq.n	80030b4 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80030b0:	f001 f8c8 	bl	8004244 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80030b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030b8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80030ba:	f107 0310 	add.w	r3, r7, #16
 80030be:	4619      	mov	r1, r3
 80030c0:	480c      	ldr	r0, [pc, #48]	; (80030f4 <MX_TIM4_Init+0x94>)
 80030c2:	f008 fe43 	bl	800bd4c <HAL_TIM_ConfigClockSource>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d001      	beq.n	80030d0 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80030cc:	f001 f8ba 	bl	8004244 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030d0:	2300      	movs	r3, #0
 80030d2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030d4:	2300      	movs	r3, #0
 80030d6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80030d8:	1d3b      	adds	r3, r7, #4
 80030da:	4619      	mov	r1, r3
 80030dc:	4805      	ldr	r0, [pc, #20]	; (80030f4 <MX_TIM4_Init+0x94>)
 80030de:	f009 f85b 	bl	800c198 <HAL_TIMEx_MasterConfigSynchronization>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d001      	beq.n	80030ec <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80030e8:	f001 f8ac 	bl	8004244 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80030ec:	bf00      	nop
 80030ee:	3720      	adds	r7, #32
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	20000ab8 	.word	0x20000ab8
 80030f8:	40000800 	.word	0x40000800

080030fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003100:	4b14      	ldr	r3, [pc, #80]	; (8003154 <MX_USART2_UART_Init+0x58>)
 8003102:	4a15      	ldr	r2, [pc, #84]	; (8003158 <MX_USART2_UART_Init+0x5c>)
 8003104:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 230400;
 8003106:	4b13      	ldr	r3, [pc, #76]	; (8003154 <MX_USART2_UART_Init+0x58>)
 8003108:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 800310c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800310e:	4b11      	ldr	r3, [pc, #68]	; (8003154 <MX_USART2_UART_Init+0x58>)
 8003110:	2200      	movs	r2, #0
 8003112:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003114:	4b0f      	ldr	r3, [pc, #60]	; (8003154 <MX_USART2_UART_Init+0x58>)
 8003116:	2200      	movs	r2, #0
 8003118:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800311a:	4b0e      	ldr	r3, [pc, #56]	; (8003154 <MX_USART2_UART_Init+0x58>)
 800311c:	2200      	movs	r2, #0
 800311e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003120:	4b0c      	ldr	r3, [pc, #48]	; (8003154 <MX_USART2_UART_Init+0x58>)
 8003122:	220c      	movs	r2, #12
 8003124:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003126:	4b0b      	ldr	r3, [pc, #44]	; (8003154 <MX_USART2_UART_Init+0x58>)
 8003128:	2200      	movs	r2, #0
 800312a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800312c:	4b09      	ldr	r3, [pc, #36]	; (8003154 <MX_USART2_UART_Init+0x58>)
 800312e:	2200      	movs	r2, #0
 8003130:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003132:	4b08      	ldr	r3, [pc, #32]	; (8003154 <MX_USART2_UART_Init+0x58>)
 8003134:	2200      	movs	r2, #0
 8003136:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003138:	4b06      	ldr	r3, [pc, #24]	; (8003154 <MX_USART2_UART_Init+0x58>)
 800313a:	2200      	movs	r2, #0
 800313c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800313e:	4805      	ldr	r0, [pc, #20]	; (8003154 <MX_USART2_UART_Init+0x58>)
 8003140:	f009 f8d0 	bl	800c2e4 <HAL_UART_Init>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d001      	beq.n	800314e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800314a:	f001 f87b 	bl	8004244 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800314e:	bf00      	nop
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	20000b04 	.word	0x20000b04
 8003158:	40004400 	.word	0x40004400

0800315c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003162:	4b26      	ldr	r3, [pc, #152]	; (80031fc <MX_DMA_Init+0xa0>)
 8003164:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003166:	4a25      	ldr	r2, [pc, #148]	; (80031fc <MX_DMA_Init+0xa0>)
 8003168:	f043 0301 	orr.w	r3, r3, #1
 800316c:	6493      	str	r3, [r2, #72]	; 0x48
 800316e:	4b23      	ldr	r3, [pc, #140]	; (80031fc <MX_DMA_Init+0xa0>)
 8003170:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003172:	f003 0301 	and.w	r3, r3, #1
 8003176:	607b      	str	r3, [r7, #4]
 8003178:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800317a:	4b20      	ldr	r3, [pc, #128]	; (80031fc <MX_DMA_Init+0xa0>)
 800317c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800317e:	4a1f      	ldr	r2, [pc, #124]	; (80031fc <MX_DMA_Init+0xa0>)
 8003180:	f043 0302 	orr.w	r3, r3, #2
 8003184:	6493      	str	r3, [r2, #72]	; 0x48
 8003186:	4b1d      	ldr	r3, [pc, #116]	; (80031fc <MX_DMA_Init+0xa0>)
 8003188:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800318a:	f003 0302 	and.w	r3, r3, #2
 800318e:	603b      	str	r3, [r7, #0]
 8003190:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8003192:	2200      	movs	r2, #0
 8003194:	2100      	movs	r1, #0
 8003196:	200d      	movs	r0, #13
 8003198:	f003 f82f 	bl	80061fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800319c:	200d      	movs	r0, #13
 800319e:	f003 f848 	bl	8006232 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80031a2:	2200      	movs	r2, #0
 80031a4:	2100      	movs	r1, #0
 80031a6:	200e      	movs	r0, #14
 80031a8:	f003 f827 	bl	80061fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80031ac:	200e      	movs	r0, #14
 80031ae:	f003 f840 	bl	8006232 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80031b2:	2200      	movs	r2, #0
 80031b4:	2100      	movs	r1, #0
 80031b6:	200f      	movs	r0, #15
 80031b8:	f003 f81f 	bl	80061fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80031bc:	200f      	movs	r0, #15
 80031be:	f003 f838 	bl	8006232 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80031c2:	2200      	movs	r2, #0
 80031c4:	2100      	movs	r1, #0
 80031c6:	2010      	movs	r0, #16
 80031c8:	f003 f817 	bl	80061fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80031cc:	2010      	movs	r0, #16
 80031ce:	f003 f830 	bl	8006232 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 3, 0);
 80031d2:	2200      	movs	r2, #0
 80031d4:	2103      	movs	r1, #3
 80031d6:	2011      	movs	r0, #17
 80031d8:	f003 f80f 	bl	80061fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80031dc:	2011      	movs	r0, #17
 80031de:	f003 f828 	bl	8006232 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel6_IRQn, 0, 0);
 80031e2:	2200      	movs	r2, #0
 80031e4:	2100      	movs	r1, #0
 80031e6:	2044      	movs	r0, #68	; 0x44
 80031e8:	f003 f807 	bl	80061fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel6_IRQn);
 80031ec:	2044      	movs	r0, #68	; 0x44
 80031ee:	f003 f820 	bl	8006232 <HAL_NVIC_EnableIRQ>

}
 80031f2:	bf00      	nop
 80031f4:	3708      	adds	r7, #8
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	40021000 	.word	0x40021000

08003200 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b08a      	sub	sp, #40	; 0x28
 8003204:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003206:	f107 0314 	add.w	r3, r7, #20
 800320a:	2200      	movs	r2, #0
 800320c:	601a      	str	r2, [r3, #0]
 800320e:	605a      	str	r2, [r3, #4]
 8003210:	609a      	str	r2, [r3, #8]
 8003212:	60da      	str	r2, [r3, #12]
 8003214:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003216:	4b6f      	ldr	r3, [pc, #444]	; (80033d4 <MX_GPIO_Init+0x1d4>)
 8003218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800321a:	4a6e      	ldr	r2, [pc, #440]	; (80033d4 <MX_GPIO_Init+0x1d4>)
 800321c:	f043 0304 	orr.w	r3, r3, #4
 8003220:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003222:	4b6c      	ldr	r3, [pc, #432]	; (80033d4 <MX_GPIO_Init+0x1d4>)
 8003224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003226:	f003 0304 	and.w	r3, r3, #4
 800322a:	613b      	str	r3, [r7, #16]
 800322c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800322e:	4b69      	ldr	r3, [pc, #420]	; (80033d4 <MX_GPIO_Init+0x1d4>)
 8003230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003232:	4a68      	ldr	r2, [pc, #416]	; (80033d4 <MX_GPIO_Init+0x1d4>)
 8003234:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003238:	64d3      	str	r3, [r2, #76]	; 0x4c
 800323a:	4b66      	ldr	r3, [pc, #408]	; (80033d4 <MX_GPIO_Init+0x1d4>)
 800323c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800323e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003242:	60fb      	str	r3, [r7, #12]
 8003244:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003246:	4b63      	ldr	r3, [pc, #396]	; (80033d4 <MX_GPIO_Init+0x1d4>)
 8003248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800324a:	4a62      	ldr	r2, [pc, #392]	; (80033d4 <MX_GPIO_Init+0x1d4>)
 800324c:	f043 0301 	orr.w	r3, r3, #1
 8003250:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003252:	4b60      	ldr	r3, [pc, #384]	; (80033d4 <MX_GPIO_Init+0x1d4>)
 8003254:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003256:	f003 0301 	and.w	r3, r3, #1
 800325a:	60bb      	str	r3, [r7, #8]
 800325c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800325e:	4b5d      	ldr	r3, [pc, #372]	; (80033d4 <MX_GPIO_Init+0x1d4>)
 8003260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003262:	4a5c      	ldr	r2, [pc, #368]	; (80033d4 <MX_GPIO_Init+0x1d4>)
 8003264:	f043 0302 	orr.w	r3, r3, #2
 8003268:	64d3      	str	r3, [r2, #76]	; 0x4c
 800326a:	4b5a      	ldr	r3, [pc, #360]	; (80033d4 <MX_GPIO_Init+0x1d4>)
 800326c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800326e:	f003 0302 	and.w	r3, r3, #2
 8003272:	607b      	str	r3, [r7, #4]
 8003274:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003276:	4b57      	ldr	r3, [pc, #348]	; (80033d4 <MX_GPIO_Init+0x1d4>)
 8003278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800327a:	4a56      	ldr	r2, [pc, #344]	; (80033d4 <MX_GPIO_Init+0x1d4>)
 800327c:	f043 0308 	orr.w	r3, r3, #8
 8003280:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003282:	4b54      	ldr	r3, [pc, #336]	; (80033d4 <MX_GPIO_Init+0x1d4>)
 8003284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003286:	f003 0308 	and.w	r3, r3, #8
 800328a:	603b      	str	r3, [r7, #0]
 800328c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TIK_LED_Pin|ERR_LED_Pin, GPIO_PIN_RESET);
 800328e:	2200      	movs	r2, #0
 8003290:	2109      	movs	r1, #9
 8003292:	4851      	ldr	r0, [pc, #324]	; (80033d8 <MX_GPIO_Init+0x1d8>)
 8003294:	f003 fc3c 	bl	8006b10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8003298:	2201      	movs	r2, #1
 800329a:	2110      	movs	r1, #16
 800329c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80032a0:	f003 fc36 	bl	8006b10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin|SPI1_DC_Pin, GPIO_PIN_SET);
 80032a4:	2201      	movs	r2, #1
 80032a6:	f44f 5181 	mov.w	r1, #4128	; 0x1020
 80032aa:	484c      	ldr	r0, [pc, #304]	; (80033dc <MX_GPIO_Init+0x1dc>)
 80032ac:	f003 fc30 	bl	8006b10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);
 80032b0:	2201      	movs	r2, #1
 80032b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80032b6:	4848      	ldr	r0, [pc, #288]	; (80033d8 <MX_GPIO_Init+0x1d8>)
 80032b8:	f003 fc2a 	bl	8006b10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_RST_GPIO_Port, SPI1_RST_Pin, GPIO_PIN_SET);
 80032bc:	2201      	movs	r2, #1
 80032be:	2104      	movs	r1, #4
 80032c0:	4847      	ldr	r0, [pc, #284]	; (80033e0 <MX_GPIO_Init+0x1e0>)
 80032c2:	f003 fc25 	bl	8006b10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TIK_LED_Pin */
  GPIO_InitStruct.Pin = TIK_LED_Pin;
 80032c6:	2301      	movs	r3, #1
 80032c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032ca:	2301      	movs	r3, #1
 80032cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80032ce:	2302      	movs	r3, #2
 80032d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80032d2:	2301      	movs	r3, #1
 80032d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TIK_LED_GPIO_Port, &GPIO_InitStruct);
 80032d6:	f107 0314 	add.w	r3, r7, #20
 80032da:	4619      	mov	r1, r3
 80032dc:	483e      	ldr	r0, [pc, #248]	; (80033d8 <MX_GPIO_Init+0x1d8>)
 80032de:	f003 fa55 	bl	800678c <HAL_GPIO_Init>

  /*Configure GPIO pins : KEY0_Pin KEY1_Pin */
  GPIO_InitStruct.Pin = KEY0_Pin|KEY1_Pin;
 80032e2:	2306      	movs	r3, #6
 80032e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80032e6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80032ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80032ec:	2301      	movs	r3, #1
 80032ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032f0:	f107 0314 	add.w	r3, r7, #20
 80032f4:	4619      	mov	r1, r3
 80032f6:	4838      	ldr	r0, [pc, #224]	; (80033d8 <MX_GPIO_Init+0x1d8>)
 80032f8:	f003 fa48 	bl	800678c <HAL_GPIO_Init>

  /*Configure GPIO pin : ERR_LED_Pin */
  GPIO_InitStruct.Pin = ERR_LED_Pin;
 80032fc:	2308      	movs	r3, #8
 80032fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003300:	2301      	movs	r3, #1
 8003302:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003304:	2300      	movs	r3, #0
 8003306:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003308:	2301      	movs	r3, #1
 800330a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ERR_LED_GPIO_Port, &GPIO_InitStruct);
 800330c:	f107 0314 	add.w	r3, r7, #20
 8003310:	4619      	mov	r1, r3
 8003312:	4831      	ldr	r0, [pc, #196]	; (80033d8 <MX_GPIO_Init+0x1d8>)
 8003314:	f003 fa3a 	bl	800678c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8003318:	2310      	movs	r3, #16
 800331a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800331c:	2301      	movs	r3, #1
 800331e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003320:	2300      	movs	r3, #0
 8003322:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003324:	2302      	movs	r3, #2
 8003326:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8003328:	f107 0314 	add.w	r3, r7, #20
 800332c:	4619      	mov	r1, r3
 800332e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003332:	f003 fa2b 	bl	800678c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8003336:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800333a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800333c:	2301      	movs	r3, #1
 800333e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003340:	2301      	movs	r3, #1
 8003342:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003344:	2302      	movs	r3, #2
 8003346:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8003348:	f107 0314 	add.w	r3, r7, #20
 800334c:	4619      	mov	r1, r3
 800334e:	4823      	ldr	r0, [pc, #140]	; (80033dc <MX_GPIO_Init+0x1dc>)
 8003350:	f003 fa1c 	bl	800678c <HAL_GPIO_Init>

  /*Configure GPIO pin : GREEN_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin;
 8003354:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003358:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800335a:	2301      	movs	r3, #1
 800335c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800335e:	2301      	movs	r3, #1
 8003360:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003362:	2301      	movs	r3, #1
 8003364:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GREEN_LED_GPIO_Port, &GPIO_InitStruct);
 8003366:	f107 0314 	add.w	r3, r7, #20
 800336a:	4619      	mov	r1, r3
 800336c:	481a      	ldr	r0, [pc, #104]	; (80033d8 <MX_GPIO_Init+0x1d8>)
 800336e:	f003 fa0d 	bl	800678c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_RST_Pin */
  GPIO_InitStruct.Pin = SPI1_RST_Pin;
 8003372:	2304      	movs	r3, #4
 8003374:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003376:	2301      	movs	r3, #1
 8003378:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800337a:	2301      	movs	r3, #1
 800337c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800337e:	2302      	movs	r3, #2
 8003380:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_RST_GPIO_Port, &GPIO_InitStruct);
 8003382:	f107 0314 	add.w	r3, r7, #20
 8003386:	4619      	mov	r1, r3
 8003388:	4815      	ldr	r0, [pc, #84]	; (80033e0 <MX_GPIO_Init+0x1e0>)
 800338a:	f003 f9ff 	bl	800678c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_DC_Pin */
  GPIO_InitStruct.Pin = SPI1_DC_Pin;
 800338e:	2320      	movs	r3, #32
 8003390:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003392:	2301      	movs	r3, #1
 8003394:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003396:	2300      	movs	r3, #0
 8003398:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800339a:	2302      	movs	r3, #2
 800339c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_DC_GPIO_Port, &GPIO_InitStruct);
 800339e:	f107 0314 	add.w	r3, r7, #20
 80033a2:	4619      	mov	r1, r3
 80033a4:	480d      	ldr	r0, [pc, #52]	; (80033dc <MX_GPIO_Init+0x1dc>)
 80033a6:	f003 f9f1 	bl	800678c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80033aa:	2200      	movs	r2, #0
 80033ac:	2100      	movs	r1, #0
 80033ae:	2007      	movs	r0, #7
 80033b0:	f002 ff23 	bl	80061fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80033b4:	2007      	movs	r0, #7
 80033b6:	f002 ff3c 	bl	8006232 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80033ba:	2200      	movs	r2, #0
 80033bc:	2100      	movs	r1, #0
 80033be:	2008      	movs	r0, #8
 80033c0:	f002 ff1b 	bl	80061fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80033c4:	2008      	movs	r0, #8
 80033c6:	f002 ff34 	bl	8006232 <HAL_NVIC_EnableIRQ>

}
 80033ca:	bf00      	nop
 80033cc:	3728      	adds	r7, #40	; 0x28
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	40021000 	.word	0x40021000
 80033d8:	48000800 	.word	0x48000800
 80033dc:	48000400 	.word	0x48000400
 80033e0:	48000c00 	.word	0x48000c00

080033e4 <hexToBin>:

//-------------------------------------------------------------------------------------------
//      Преобразует два символа строки из hex-формата в двоичный
//
uint8_t hexToBin(char *sc)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b085      	sub	sp, #20
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
char st = 0, ml = 0;
 80033ec:	2300      	movs	r3, #0
 80033ee:	73fb      	strb	r3, [r7, #15]
 80033f0:	2300      	movs	r3, #0
 80033f2:	73bb      	strb	r3, [r7, #14]

	if ((sc[0] >= '0') && (sc[0] <= '9')) st = (sc[0] - 0x30);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	2b2f      	cmp	r3, #47	; 0x2f
 80033fa:	d908      	bls.n	800340e <hexToBin+0x2a>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	2b39      	cmp	r3, #57	; 0x39
 8003402:	d804      	bhi.n	800340e <hexToBin+0x2a>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	3b30      	subs	r3, #48	; 0x30
 800340a:	73fb      	strb	r3, [r7, #15]
 800340c:	e018      	b.n	8003440 <hexToBin+0x5c>
	else
	if ((sc[0] >= 'A') && (sc[0] <= 'F')) st = (sc[0] - 0x37);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	2b40      	cmp	r3, #64	; 0x40
 8003414:	d908      	bls.n	8003428 <hexToBin+0x44>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	781b      	ldrb	r3, [r3, #0]
 800341a:	2b46      	cmp	r3, #70	; 0x46
 800341c:	d804      	bhi.n	8003428 <hexToBin+0x44>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	781b      	ldrb	r3, [r3, #0]
 8003422:	3b37      	subs	r3, #55	; 0x37
 8003424:	73fb      	strb	r3, [r7, #15]
 8003426:	e00b      	b.n	8003440 <hexToBin+0x5c>
	else
	if ((sc[0] >= 'a') && (sc[0] <= 'f')) st = (sc[0] - 0x57);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	2b60      	cmp	r3, #96	; 0x60
 800342e:	d907      	bls.n	8003440 <hexToBin+0x5c>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	2b66      	cmp	r3, #102	; 0x66
 8003436:	d803      	bhi.n	8003440 <hexToBin+0x5c>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	3b57      	subs	r3, #87	; 0x57
 800343e:	73fb      	strb	r3, [r7, #15]

	if ((sc[1] >= '0') && (sc[1] <= '9')) ml = (sc[1] - 0x30);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	3301      	adds	r3, #1
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	2b2f      	cmp	r3, #47	; 0x2f
 8003448:	d90a      	bls.n	8003460 <hexToBin+0x7c>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	3301      	adds	r3, #1
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	2b39      	cmp	r3, #57	; 0x39
 8003452:	d805      	bhi.n	8003460 <hexToBin+0x7c>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	3301      	adds	r3, #1
 8003458:	781b      	ldrb	r3, [r3, #0]
 800345a:	3b30      	subs	r3, #48	; 0x30
 800345c:	73bb      	strb	r3, [r7, #14]
 800345e:	e01e      	b.n	800349e <hexToBin+0xba>
	else
	if ((sc[1] >= 'A') && (sc[1] <= 'F')) ml = (sc[1] - 0x37);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	3301      	adds	r3, #1
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	2b40      	cmp	r3, #64	; 0x40
 8003468:	d90a      	bls.n	8003480 <hexToBin+0x9c>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	3301      	adds	r3, #1
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	2b46      	cmp	r3, #70	; 0x46
 8003472:	d805      	bhi.n	8003480 <hexToBin+0x9c>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	3301      	adds	r3, #1
 8003478:	781b      	ldrb	r3, [r3, #0]
 800347a:	3b37      	subs	r3, #55	; 0x37
 800347c:	73bb      	strb	r3, [r7, #14]
 800347e:	e00e      	b.n	800349e <hexToBin+0xba>
	else
	if ((sc[1] >= 'a') && (sc[1] <= 'f')) ml = (sc[1] - 0x57);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	3301      	adds	r3, #1
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	2b60      	cmp	r3, #96	; 0x60
 8003488:	d909      	bls.n	800349e <hexToBin+0xba>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	3301      	adds	r3, #1
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	2b66      	cmp	r3, #102	; 0x66
 8003492:	d804      	bhi.n	800349e <hexToBin+0xba>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	3301      	adds	r3, #1
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	3b57      	subs	r3, #87	; 0x57
 800349c:	73bb      	strb	r3, [r7, #14]

	return ((st << 4) | (ml & 0x0f));
 800349e:	7bfb      	ldrb	r3, [r7, #15]
 80034a0:	011b      	lsls	r3, r3, #4
 80034a2:	b25a      	sxtb	r2, r3
 80034a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80034a8:	f003 030f 	and.w	r3, r3, #15
 80034ac:	b25b      	sxtb	r3, r3
 80034ae:	4313      	orrs	r3, r2
 80034b0:	b25b      	sxtb	r3, r3
 80034b2:	b2db      	uxtb	r3, r3

}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3714      	adds	r7, #20
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr

080034c0 <getEvtCount>:


#ifdef SET_FIFO_MODE
//-------------------------------------------------------------------------------------------
uint8_t getEvtCount()
{
 80034c0:	b480      	push	{r7}
 80034c2:	af00      	add	r7, sp, #0
	return cnt_evt;
 80034c4:	4b03      	ldr	r3, [pc, #12]	; (80034d4 <getEvtCount+0x14>)
 80034c6:	781b      	ldrb	r3, [r3, #0]
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr
 80034d2:	bf00      	nop
 80034d4:	2000186a 	.word	0x2000186a

080034d8 <putEvt>:
//-------------------------------------------------------------------------------------------
void putEvt(int evt)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b082      	sub	sp, #8
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]

	//while (lock_fifo);
	//lock_fifo = true;

	if (cnt_evt > (MAX_FIFO_SIZE - 3)) {
 80034e0:	4b30      	ldr	r3, [pc, #192]	; (80035a4 <putEvt+0xcc>)
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	2b3d      	cmp	r3, #61	; 0x3d
 80034e6:	d907      	bls.n	80034f8 <putEvt+0x20>
		devError |= devFIFO;
 80034e8:	4b2f      	ldr	r3, [pc, #188]	; (80035a8 <putEvt+0xd0>)
 80034ea:	881b      	ldrh	r3, [r3, #0]
 80034ec:	f043 0310 	orr.w	r3, r3, #16
 80034f0:	b29a      	uxth	r2, r3
 80034f2:	4b2d      	ldr	r3, [pc, #180]	; (80035a8 <putEvt+0xd0>)
 80034f4:	801a      	strh	r2, [r3, #0]
		//lock_fifo = false;
		return;
 80034f6:	e051      	b.n	800359c <putEvt+0xc4>
	}

	HAL_NVIC_DisableIRQ(USART2_IRQn);
 80034f8:	2026      	movs	r0, #38	; 0x26
 80034fa:	f002 fea8 	bl	800624e <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(TIM4_IRQn);
 80034fe:	201e      	movs	r0, #30
 8003500:	f002 fea5 	bl	800624e <HAL_NVIC_DisableIRQ>

	if (cnt_evt >= MAX_FIFO_SIZE) {
 8003504:	4b27      	ldr	r3, [pc, #156]	; (80035a4 <putEvt+0xcc>)
 8003506:	781b      	ldrb	r3, [r3, #0]
 8003508:	2b3f      	cmp	r3, #63	; 0x3f
 800350a:	d906      	bls.n	800351a <putEvt+0x42>
			wr_evt_err++;
 800350c:	4b27      	ldr	r3, [pc, #156]	; (80035ac <putEvt+0xd4>)
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	3301      	adds	r3, #1
 8003512:	b2da      	uxtb	r2, r3
 8003514:	4b25      	ldr	r3, [pc, #148]	; (80035ac <putEvt+0xd4>)
 8003516:	701a      	strb	r2, [r3, #0]
 8003518:	e027      	b.n	800356a <putEvt+0x92>
		} else {
			evt_fifo[wr_evt_adr] = evt;
 800351a:	4b25      	ldr	r3, [pc, #148]	; (80035b0 <putEvt+0xd8>)
 800351c:	781b      	ldrb	r3, [r3, #0]
 800351e:	4619      	mov	r1, r3
 8003520:	4a24      	ldr	r2, [pc, #144]	; (80035b4 <putEvt+0xdc>)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			cnt_evt++;
 8003528:	4b1e      	ldr	r3, [pc, #120]	; (80035a4 <putEvt+0xcc>)
 800352a:	781b      	ldrb	r3, [r3, #0]
 800352c:	3301      	adds	r3, #1
 800352e:	b2da      	uxtb	r2, r3
 8003530:	4b1c      	ldr	r3, [pc, #112]	; (80035a4 <putEvt+0xcc>)
 8003532:	701a      	strb	r2, [r3, #0]
			if (wr_evt_adr < (MAX_FIFO_SIZE - 1) ) {
 8003534:	4b1e      	ldr	r3, [pc, #120]	; (80035b0 <putEvt+0xd8>)
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	2b3e      	cmp	r3, #62	; 0x3e
 800353a:	d806      	bhi.n	800354a <putEvt+0x72>
				wr_evt_adr++;
 800353c:	4b1c      	ldr	r3, [pc, #112]	; (80035b0 <putEvt+0xd8>)
 800353e:	781b      	ldrb	r3, [r3, #0]
 8003540:	3301      	adds	r3, #1
 8003542:	b2da      	uxtb	r2, r3
 8003544:	4b1a      	ldr	r3, [pc, #104]	; (80035b0 <putEvt+0xd8>)
 8003546:	701a      	strb	r2, [r3, #0]
 8003548:	e002      	b.n	8003550 <putEvt+0x78>
			} else  {
				wr_evt_adr = 0;
 800354a:	4b19      	ldr	r3, [pc, #100]	; (80035b0 <putEvt+0xd8>)
 800354c:	2200      	movs	r2, #0
 800354e:	701a      	strb	r2, [r3, #0]
			}
			wr_evt_err = 0;
 8003550:	4b16      	ldr	r3, [pc, #88]	; (80035ac <putEvt+0xd4>)
 8003552:	2200      	movs	r2, #0
 8003554:	701a      	strb	r2, [r3, #0]
			if (cnt_evt > max_evt) max_evt = cnt_evt;
 8003556:	4b13      	ldr	r3, [pc, #76]	; (80035a4 <putEvt+0xcc>)
 8003558:	781a      	ldrb	r2, [r3, #0]
 800355a:	4b17      	ldr	r3, [pc, #92]	; (80035b8 <putEvt+0xe0>)
 800355c:	781b      	ldrb	r3, [r3, #0]
 800355e:	429a      	cmp	r2, r3
 8003560:	d903      	bls.n	800356a <putEvt+0x92>
 8003562:	4b10      	ldr	r3, [pc, #64]	; (80035a4 <putEvt+0xcc>)
 8003564:	781a      	ldrb	r2, [r3, #0]
 8003566:	4b14      	ldr	r3, [pc, #80]	; (80035b8 <putEvt+0xe0>)
 8003568:	701a      	strb	r2, [r3, #0]
		}

		if (wr_evt_err) devError |= devFIFO;
 800356a:	4b10      	ldr	r3, [pc, #64]	; (80035ac <putEvt+0xd4>)
 800356c:	781b      	ldrb	r3, [r3, #0]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d007      	beq.n	8003582 <putEvt+0xaa>
 8003572:	4b0d      	ldr	r3, [pc, #52]	; (80035a8 <putEvt+0xd0>)
 8003574:	881b      	ldrh	r3, [r3, #0]
 8003576:	f043 0310 	orr.w	r3, r3, #16
 800357a:	b29a      	uxth	r2, r3
 800357c:	4b0a      	ldr	r3, [pc, #40]	; (80035a8 <putEvt+0xd0>)
 800357e:	801a      	strh	r2, [r3, #0]
 8003580:	e006      	b.n	8003590 <putEvt+0xb8>
				   else devError &= ~devFIFO;
 8003582:	4b09      	ldr	r3, [pc, #36]	; (80035a8 <putEvt+0xd0>)
 8003584:	881b      	ldrh	r3, [r3, #0]
 8003586:	f023 0310 	bic.w	r3, r3, #16
 800358a:	b29a      	uxth	r2, r3
 800358c:	4b06      	ldr	r3, [pc, #24]	; (80035a8 <putEvt+0xd0>)
 800358e:	801a      	strh	r2, [r3, #0]

		HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003590:	201e      	movs	r0, #30
 8003592:	f002 fe4e 	bl	8006232 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003596:	2026      	movs	r0, #38	; 0x26
 8003598:	f002 fe4b 	bl	8006232 <HAL_NVIC_EnableIRQ>

		//lock_fifo = false;
}
 800359c:	3708      	adds	r7, #8
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	2000186a 	.word	0x2000186a
 80035a8:	20001450 	.word	0x20001450
 80035ac:	20001869 	.word	0x20001869
 80035b0:	20001868 	.word	0x20001868
 80035b4:	200000a4 	.word	0x200000a4
 80035b8:	2000186b 	.word	0x2000186b

080035bc <getEvt>:
//-------------------------------------------------------------------------------------------
int getEvt()
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b082      	sub	sp, #8
 80035c0:	af00      	add	r7, sp, #0
int ret = evt_None;
 80035c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80035c6:	607b      	str	r3, [r7, #4]

	//while (lock_fifo);
	//lock_fifo = true;

	HAL_NVIC_DisableIRQ(USART2_IRQn);
 80035c8:	2026      	movs	r0, #38	; 0x26
 80035ca:	f002 fe40 	bl	800624e <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(TIM4_IRQn);
 80035ce:	201e      	movs	r0, #30
 80035d0:	f002 fe3d 	bl	800624e <HAL_NVIC_DisableIRQ>
	if (cnt_evt) {
 80035d4:	4b16      	ldr	r3, [pc, #88]	; (8003630 <getEvt+0x74>)
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d01e      	beq.n	800361a <getEvt+0x5e>
		ret = evt_fifo[rd_evt_adr];
 80035dc:	4b15      	ldr	r3, [pc, #84]	; (8003634 <getEvt+0x78>)
 80035de:	781b      	ldrb	r3, [r3, #0]
 80035e0:	461a      	mov	r2, r3
 80035e2:	4b15      	ldr	r3, [pc, #84]	; (8003638 <getEvt+0x7c>)
 80035e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035e8:	607b      	str	r3, [r7, #4]
		if (cnt_evt) cnt_evt--;
 80035ea:	4b11      	ldr	r3, [pc, #68]	; (8003630 <getEvt+0x74>)
 80035ec:	781b      	ldrb	r3, [r3, #0]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d005      	beq.n	80035fe <getEvt+0x42>
 80035f2:	4b0f      	ldr	r3, [pc, #60]	; (8003630 <getEvt+0x74>)
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	3b01      	subs	r3, #1
 80035f8:	b2da      	uxtb	r2, r3
 80035fa:	4b0d      	ldr	r3, [pc, #52]	; (8003630 <getEvt+0x74>)
 80035fc:	701a      	strb	r2, [r3, #0]
		if (rd_evt_adr < (MAX_FIFO_SIZE - 1) ) {
 80035fe:	4b0d      	ldr	r3, [pc, #52]	; (8003634 <getEvt+0x78>)
 8003600:	781b      	ldrb	r3, [r3, #0]
 8003602:	2b3e      	cmp	r3, #62	; 0x3e
 8003604:	d806      	bhi.n	8003614 <getEvt+0x58>
			rd_evt_adr++;
 8003606:	4b0b      	ldr	r3, [pc, #44]	; (8003634 <getEvt+0x78>)
 8003608:	781b      	ldrb	r3, [r3, #0]
 800360a:	3301      	adds	r3, #1
 800360c:	b2da      	uxtb	r2, r3
 800360e:	4b09      	ldr	r3, [pc, #36]	; (8003634 <getEvt+0x78>)
 8003610:	701a      	strb	r2, [r3, #0]
 8003612:	e002      	b.n	800361a <getEvt+0x5e>
		} else {
			rd_evt_adr = 0;
 8003614:	4b07      	ldr	r3, [pc, #28]	; (8003634 <getEvt+0x78>)
 8003616:	2200      	movs	r2, #0
 8003618:	701a      	strb	r2, [r3, #0]
		}
	}

	HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800361a:	201e      	movs	r0, #30
 800361c:	f002 fe09 	bl	8006232 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003620:	2026      	movs	r0, #38	; 0x26
 8003622:	f002 fe06 	bl	8006232 <HAL_NVIC_EnableIRQ>

	//lock_fifo = false;

	return ret;
 8003626:	687b      	ldr	r3, [r7, #4]
}
 8003628:	4618      	mov	r0, r3
 800362a:	3708      	adds	r7, #8
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}
 8003630:	2000186a 	.word	0x2000186a
 8003634:	20001867 	.word	0x20001867
 8003638:	200000a4 	.word	0x200000a4

0800363c <nameStation>:
//-------------------------------------------------------------------------------------------
#ifdef SET_DISPLAY

//-------------------------------------------------------------------------------------------
const char *nameStation(float fr)
{
 800363c:	b480      	push	{r7}
 800363e:	b085      	sub	sp, #20
 8003640:	af00      	add	r7, sp, #0
 8003642:	ed87 0a01 	vstr	s0, [r7, #4]
int8_t ik = -1;
 8003646:	23ff      	movs	r3, #255	; 0xff
 8003648:	73fb      	strb	r3, [r7, #15]

	for (int8_t i = 0; i < MAX_LIST; i++) {
 800364a:	2300      	movs	r3, #0
 800364c:	73bb      	strb	r3, [r7, #14]
 800364e:	e016      	b.n	800367e <nameStation+0x42>
		if (list[i].freq == fr) {
 8003650:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003654:	4a16      	ldr	r2, [pc, #88]	; (80036b0 <nameStation+0x74>)
 8003656:	015b      	lsls	r3, r3, #5
 8003658:	4413      	add	r3, r2
 800365a:	edd3 7a00 	vldr	s15, [r3]
 800365e:	ed97 7a01 	vldr	s14, [r7, #4]
 8003662:	eeb4 7a67 	vcmp.f32	s14, s15
 8003666:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800366a:	d102      	bne.n	8003672 <nameStation+0x36>
			ik = i;
 800366c:	7bbb      	ldrb	r3, [r7, #14]
 800366e:	73fb      	strb	r3, [r7, #15]
			break;
 8003670:	e009      	b.n	8003686 <nameStation+0x4a>
	for (int8_t i = 0; i < MAX_LIST; i++) {
 8003672:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003676:	b2db      	uxtb	r3, r3
 8003678:	3301      	adds	r3, #1
 800367a:	b2db      	uxtb	r3, r3
 800367c:	73bb      	strb	r3, [r7, #14]
 800367e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003682:	2b17      	cmp	r3, #23
 8003684:	dde4      	ble.n	8003650 <nameStation+0x14>
		}
	}

	if (ik != -1) return list[ik].name;
 8003686:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800368a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800368e:	d006      	beq.n	800369e <nameStation+0x62>
 8003690:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003694:	015b      	lsls	r3, r3, #5
 8003696:	4a06      	ldr	r2, [pc, #24]	; (80036b0 <nameStation+0x74>)
 8003698:	4413      	add	r3, r2
 800369a:	3304      	adds	r3, #4
 800369c:	e001      	b.n	80036a2 <nameStation+0x66>
			 else return noneStation;
 800369e:	4b05      	ldr	r3, [pc, #20]	; (80036b4 <nameStation+0x78>)
 80036a0:	681b      	ldr	r3, [r3, #0]
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3714      	adds	r7, #20
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr
 80036ae:	bf00      	nop
 80036b0:	0801332c 	.word	0x0801332c
 80036b4:	200001c8 	.word	0x200001c8

080036b8 <getNextList>:
//-------------------------------------------------------------------------------------------
float getNextList(float fr)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b085      	sub	sp, #20
 80036bc:	af00      	add	r7, sp, #0
 80036be:	ed87 0a01 	vstr	s0, [r7, #4]
float ret = fr;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	60bb      	str	r3, [r7, #8]
int8_t ik = -1;
 80036c6:	23ff      	movs	r3, #255	; 0xff
 80036c8:	73fb      	strb	r3, [r7, #15]

	for (int8_t i = 0; i < MAX_LIST; i++) {
 80036ca:	2300      	movs	r3, #0
 80036cc:	73bb      	strb	r3, [r7, #14]
 80036ce:	e016      	b.n	80036fe <getNextList+0x46>
		if (list[i].freq == fr) {
 80036d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80036d4:	4a2f      	ldr	r2, [pc, #188]	; (8003794 <getNextList+0xdc>)
 80036d6:	015b      	lsls	r3, r3, #5
 80036d8:	4413      	add	r3, r2
 80036da:	edd3 7a00 	vldr	s15, [r3]
 80036de:	ed97 7a01 	vldr	s14, [r7, #4]
 80036e2:	eeb4 7a67 	vcmp.f32	s14, s15
 80036e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036ea:	d102      	bne.n	80036f2 <getNextList+0x3a>
			ik = i;
 80036ec:	7bbb      	ldrb	r3, [r7, #14]
 80036ee:	73fb      	strb	r3, [r7, #15]
			break;
 80036f0:	e009      	b.n	8003706 <getNextList+0x4e>
	for (int8_t i = 0; i < MAX_LIST; i++) {
 80036f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	3301      	adds	r3, #1
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	73bb      	strb	r3, [r7, #14]
 80036fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003702:	2b17      	cmp	r3, #23
 8003704:	dde4      	ble.n	80036d0 <getNextList+0x18>
		}
	}
	if (ik != -1) {
 8003706:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800370a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800370e:	d00a      	beq.n	8003726 <getNextList+0x6e>
		if (++ik == MAX_LIST) ik = 0;
 8003710:	7bfb      	ldrb	r3, [r7, #15]
 8003712:	3301      	adds	r3, #1
 8003714:	b2db      	uxtb	r3, r3
 8003716:	73fb      	strb	r3, [r7, #15]
 8003718:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800371c:	2b18      	cmp	r3, #24
 800371e:	d127      	bne.n	8003770 <getNextList+0xb8>
 8003720:	2300      	movs	r3, #0
 8003722:	73fb      	strb	r3, [r7, #15]
 8003724:	e024      	b.n	8003770 <getNextList+0xb8>
	} else {
		for (int8_t i = 0; i < MAX_LIST; i++) {
 8003726:	2300      	movs	r3, #0
 8003728:	737b      	strb	r3, [r7, #13]
 800372a:	e016      	b.n	800375a <getNextList+0xa2>
			if (list[i].freq > fr) {
 800372c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8003730:	4a18      	ldr	r2, [pc, #96]	; (8003794 <getNextList+0xdc>)
 8003732:	015b      	lsls	r3, r3, #5
 8003734:	4413      	add	r3, r2
 8003736:	edd3 7a00 	vldr	s15, [r3]
 800373a:	ed97 7a01 	vldr	s14, [r7, #4]
 800373e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003746:	d502      	bpl.n	800374e <getNextList+0x96>
				ik = i;
 8003748:	7b7b      	ldrb	r3, [r7, #13]
 800374a:	73fb      	strb	r3, [r7, #15]
				break;
 800374c:	e009      	b.n	8003762 <getNextList+0xaa>
		for (int8_t i = 0; i < MAX_LIST; i++) {
 800374e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8003752:	b2db      	uxtb	r3, r3
 8003754:	3301      	adds	r3, #1
 8003756:	b2db      	uxtb	r3, r3
 8003758:	737b      	strb	r3, [r7, #13]
 800375a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800375e:	2b17      	cmp	r3, #23
 8003760:	dde4      	ble.n	800372c <getNextList+0x74>
			}
		}
		if (ik == -1) ik = 0;
 8003762:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003766:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800376a:	d101      	bne.n	8003770 <getNextList+0xb8>
 800376c:	2300      	movs	r3, #0
 800376e:	73fb      	strb	r3, [r7, #15]
	}
	ret = list[ik].freq;
 8003770:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003774:	4a07      	ldr	r2, [pc, #28]	; (8003794 <getNextList+0xdc>)
 8003776:	015b      	lsls	r3, r3, #5
 8003778:	4413      	add	r3, r2
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	60bb      	str	r3, [r7, #8]

	return ret;
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	ee07 3a90 	vmov	s15, r3
}
 8003784:	eeb0 0a67 	vmov.f32	s0, s15
 8003788:	3714      	adds	r7, #20
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr
 8003792:	bf00      	nop
 8003794:	0801332c 	.word	0x0801332c

08003798 <showLine>:
//-------------------------------------------------------------------------------------------
void showLine(char *msg, uint16_t lin, int *last_len, bool update)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b08a      	sub	sp, #40	; 0x28
 800379c:	af02      	add	r7, sp, #8
 800379e:	60f8      	str	r0, [r7, #12]
 80037a0:	607a      	str	r2, [r7, #4]
 80037a2:	461a      	mov	r2, r3
 80037a4:	460b      	mov	r3, r1
 80037a6:	817b      	strh	r3, [r7, #10]
 80037a8:	4613      	mov	r3, r2
 80037aa:	727b      	strb	r3, [r7, #9]
int il = strlen(msg);
 80037ac:	68f8      	ldr	r0, [r7, #12]
 80037ae:	f7fc fd0f 	bl	80001d0 <strlen>
 80037b2:	4603      	mov	r3, r0
 80037b4:	617b      	str	r3, [r7, #20]
int xf = ( (SCREEN_WIDTH - (lfnt->FontWidth * il) ) >> 1);// & 0x7f;
 80037b6:	4b2e      	ldr	r3, [pc, #184]	; (8003870 <showLine+0xd8>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	461a      	mov	r2, r3
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	fb02 f303 	mul.w	r3, r2, r3
 80037c4:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80037c8:	105b      	asrs	r3, r3, #1
 80037ca:	61fb      	str	r3, [r7, #28]
bool yes = false;
 80037cc:	2300      	movs	r3, #0
 80037ce:	76fb      	strb	r3, [r7, #27]

	if (*last_len > il) {
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	697a      	ldr	r2, [r7, #20]
 80037d6:	429a      	cmp	r2, r3
 80037d8:	da0d      	bge.n	80037f6 <showLine+0x5e>
		ST7565_DrawFilledRectangle(2, lin, SCREEN_WIDTH - 4, lfnt->FontHeight, PIX_OFF);
 80037da:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80037de:	4b24      	ldr	r3, [pc, #144]	; (8003870 <showLine+0xd8>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	785b      	ldrb	r3, [r3, #1]
 80037e4:	b21b      	sxth	r3, r3
 80037e6:	2200      	movs	r2, #0
 80037e8:	9200      	str	r2, [sp, #0]
 80037ea:	227c      	movs	r2, #124	; 0x7c
 80037ec:	2002      	movs	r0, #2
 80037ee:	f7fe fa16 	bl	8001c1e <ST7565_DrawFilledRectangle>
		yes = true;
 80037f2:	2301      	movs	r3, #1
 80037f4:	76fb      	strb	r3, [r7, #27]
	}
	*last_len = il;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	697a      	ldr	r2, [r7, #20]
 80037fa:	601a      	str	r2, [r3, #0]
	if (*msg > 0x7f) {
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	781b      	ldrb	r3, [r3, #0]
 8003800:	b25b      	sxtb	r3, r3
 8003802:	2b00      	cmp	r3, #0
 8003804:	da03      	bge.n	800380e <showLine+0x76>
		xf += il;
 8003806:	69fa      	ldr	r2, [r7, #28]
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	4413      	add	r3, r2
 800380c:	61fb      	str	r3, [r7, #28]
	}
	if (!yes) ST7565_DrawFilledRectangle(2, lin, SCREEN_WIDTH - 4, lfnt->FontHeight, PIX_OFF);
 800380e:	7efb      	ldrb	r3, [r7, #27]
 8003810:	f083 0301 	eor.w	r3, r3, #1
 8003814:	b2db      	uxtb	r3, r3
 8003816:	2b00      	cmp	r3, #0
 8003818:	d00b      	beq.n	8003832 <showLine+0x9a>
 800381a:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800381e:	4b14      	ldr	r3, [pc, #80]	; (8003870 <showLine+0xd8>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	785b      	ldrb	r3, [r3, #1]
 8003824:	b21b      	sxth	r3, r3
 8003826:	2200      	movs	r2, #0
 8003828:	9200      	str	r2, [sp, #0]
 800382a:	227c      	movs	r2, #124	; 0x7c
 800382c:	2002      	movs	r0, #2
 800382e:	f7fe f9f6 	bl	8001c1e <ST7565_DrawFilledRectangle>

	if ((!xf) || (xf > (SCREEN_WIDTH - 4))) xf = 1;
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d002      	beq.n	800383e <showLine+0xa6>
 8003838:	69fb      	ldr	r3, [r7, #28]
 800383a:	2b7c      	cmp	r3, #124	; 0x7c
 800383c:	dd01      	ble.n	8003842 <showLine+0xaa>
 800383e:	2301      	movs	r3, #1
 8003840:	61fb      	str	r3, [r7, #28]
	ST7565_Print(xf, lin, msg, lfnt, 1, PIX_ON);
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	b218      	sxth	r0, r3
 8003846:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800384a:	4b09      	ldr	r3, [pc, #36]	; (8003870 <showLine+0xd8>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	2201      	movs	r2, #1
 8003850:	9201      	str	r2, [sp, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	9200      	str	r2, [sp, #0]
 8003856:	68fa      	ldr	r2, [r7, #12]
 8003858:	f7fd ff88 	bl	800176c <ST7565_Print>
	if (update) ST7565_Update();
 800385c:	7a7b      	ldrb	r3, [r7, #9]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d001      	beq.n	8003866 <showLine+0xce>
 8003862:	f7fd fdd3 	bl	800140c <ST7565_Update>
}
 8003866:	bf00      	nop
 8003868:	3720      	adds	r7, #32
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	20002c84 	.word	0x20002c84

08003874 <errLedOn>:
#endif
//-------------------------------------------------------------------------------------------
void errLedOn(bool on)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b082      	sub	sp, #8
 8003878:	af00      	add	r7, sp, #0
 800387a:	4603      	mov	r3, r0
 800387c:	71fb      	strb	r3, [r7, #7]
	if (on)
 800387e:	79fb      	ldrb	r3, [r7, #7]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d005      	beq.n	8003890 <errLedOn+0x1c>
		HAL_GPIO_WritePin(ERR_LED_GPIO_Port, ERR_LED_Pin, GPIO_PIN_SET);//LED ON
 8003884:	2201      	movs	r2, #1
 8003886:	2108      	movs	r1, #8
 8003888:	4806      	ldr	r0, [pc, #24]	; (80038a4 <errLedOn+0x30>)
 800388a:	f003 f941 	bl	8006b10 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(ERR_LED_GPIO_Port, ERR_LED_Pin, GPIO_PIN_RESET);//LED OFF
}
 800388e:	e004      	b.n	800389a <errLedOn+0x26>
		HAL_GPIO_WritePin(ERR_LED_GPIO_Port, ERR_LED_Pin, GPIO_PIN_RESET);//LED OFF
 8003890:	2200      	movs	r2, #0
 8003892:	2108      	movs	r1, #8
 8003894:	4803      	ldr	r0, [pc, #12]	; (80038a4 <errLedOn+0x30>)
 8003896:	f003 f93b 	bl	8006b10 <HAL_GPIO_WritePin>
}
 800389a:	bf00      	nop
 800389c:	3708      	adds	r7, #8
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	48000800 	.word	0x48000800

080038a8 <get_secCounter>:
//------------------------------------------------------------------------------------
uint32_t get_secCounter()
{
 80038a8:	b480      	push	{r7}
 80038aa:	af00      	add	r7, sp, #0
	return secCounter;
 80038ac:	4b03      	ldr	r3, [pc, #12]	; (80038bc <get_secCounter+0x14>)
 80038ae:	681b      	ldr	r3, [r3, #0]
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr
 80038ba:	bf00      	nop
 80038bc:	20001454 	.word	0x20001454

080038c0 <set_Date>:

    for (i = 0; i < strlen(st); i++) *(st + i) = toupper(*(st + i));
}
//------------------------------------------------------------------------------------------
void set_Date(uint32_t usec)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b094      	sub	sp, #80	; 0x50
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
struct tm ts;
time_t ep = (time_t)usec;
 80038c8:	6879      	ldr	r1, [r7, #4]
 80038ca:	2000      	movs	r0, #0
 80038cc:	460a      	mov	r2, r1
 80038ce:	4603      	mov	r3, r0
 80038d0:	e9c7 2308 	strd	r2, r3, [r7, #32]

	gmtime_r(&ep, &ts);
 80038d4:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80038d8:	f107 0320 	add.w	r3, r7, #32
 80038dc:	4611      	mov	r1, r2
 80038de:	4618      	mov	r0, r3
 80038e0:	f00a f93c 	bl	800db5c <gmtime_r>

	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;
	sDate.WeekDay = ts.tm_wday;
 80038e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	723b      	strb	r3, [r7, #8]
	sDate.Month   = ts.tm_mon + 1;
 80038ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	3301      	adds	r3, #1
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	727b      	strb	r3, [r7, #9]
	sDate.Date    = ts.tm_mday;
 80038f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	72bb      	strb	r3, [r7, #10]
	sDate.Year    = ts.tm_year;
 80038fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	72fb      	strb	r3, [r7, #11]
	sTime.Hours   = ts.tm_hour + tZone;
 8003900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003902:	b2da      	uxtb	r2, r3
 8003904:	4b1a      	ldr	r3, [pc, #104]	; (8003970 <set_Date+0xb0>)
 8003906:	781b      	ldrb	r3, [r3, #0]
 8003908:	4413      	add	r3, r2
 800390a:	b2db      	uxtb	r3, r3
 800390c:	733b      	strb	r3, [r7, #12]
	sTime.Minutes = ts.tm_min;
 800390e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003910:	b2db      	uxtb	r3, r3
 8003912:	737b      	strb	r3, [r7, #13]
	sTime.Seconds = ts.tm_sec;
 8003914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003916:	b2db      	uxtb	r3, r3
 8003918:	73bb      	strb	r3, [r7, #14]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) devError |= devRTC;
 800391a:	f107 030c 	add.w	r3, r7, #12
 800391e:	2200      	movs	r2, #0
 8003920:	4619      	mov	r1, r3
 8003922:	4814      	ldr	r0, [pc, #80]	; (8003974 <set_Date+0xb4>)
 8003924:	f006 f953 	bl	8009bce <HAL_RTC_SetTime>
 8003928:	4603      	mov	r3, r0
 800392a:	2b00      	cmp	r3, #0
 800392c:	d007      	beq.n	800393e <set_Date+0x7e>
 800392e:	4b12      	ldr	r3, [pc, #72]	; (8003978 <set_Date+0xb8>)
 8003930:	881b      	ldrh	r3, [r3, #0]
 8003932:	f043 0308 	orr.w	r3, r3, #8
 8003936:	b29a      	uxth	r2, r3
 8003938:	4b0f      	ldr	r3, [pc, #60]	; (8003978 <set_Date+0xb8>)
 800393a:	801a      	strh	r2, [r3, #0]
		if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) devError |= devRTC;
		else {
			setDate = true;
		}
	}
}
 800393c:	e014      	b.n	8003968 <set_Date+0xa8>
		if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) devError |= devRTC;
 800393e:	f107 0308 	add.w	r3, r7, #8
 8003942:	2200      	movs	r2, #0
 8003944:	4619      	mov	r1, r3
 8003946:	480b      	ldr	r0, [pc, #44]	; (8003974 <set_Date+0xb4>)
 8003948:	f006 fa3a 	bl	8009dc0 <HAL_RTC_SetDate>
 800394c:	4603      	mov	r3, r0
 800394e:	2b00      	cmp	r3, #0
 8003950:	d007      	beq.n	8003962 <set_Date+0xa2>
 8003952:	4b09      	ldr	r3, [pc, #36]	; (8003978 <set_Date+0xb8>)
 8003954:	881b      	ldrh	r3, [r3, #0]
 8003956:	f043 0308 	orr.w	r3, r3, #8
 800395a:	b29a      	uxth	r2, r3
 800395c:	4b06      	ldr	r3, [pc, #24]	; (8003978 <set_Date+0xb8>)
 800395e:	801a      	strh	r2, [r3, #0]
}
 8003960:	e002      	b.n	8003968 <set_Date+0xa8>
			setDate = true;
 8003962:	4b06      	ldr	r3, [pc, #24]	; (800397c <set_Date+0xbc>)
 8003964:	2201      	movs	r2, #1
 8003966:	701a      	strb	r2, [r3, #0]
}
 8003968:	bf00      	nop
 800396a:	3750      	adds	r7, #80	; 0x50
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}
 8003970:	20001866 	.word	0x20001866
 8003974:	200008f4 	.word	0x200008f4
 8003978:	20001450 	.word	0x20001450
 800397c:	20001865 	.word	0x20001865

08003980 <sec2str>:

	return ep;
}
//------------------------------------------------------------------------------------------
int sec2str(char *st)
{
 8003980:	b590      	push	{r4, r7, lr}
 8003982:	b093      	sub	sp, #76	; 0x4c
 8003984:	af04      	add	r7, sp, #16
 8003986:	6078      	str	r0, [r7, #4]
int ret = 0;
 8003988:	2300      	movs	r3, #0
 800398a:	637b      	str	r3, [r7, #52]	; 0x34

	if (!setDate) {
 800398c:	4b40      	ldr	r3, [pc, #256]	; (8003a90 <sec2str+0x110>)
 800398e:	781b      	ldrb	r3, [r3, #0]
 8003990:	f083 0301 	eor.w	r3, r3, #1
 8003994:	b2db      	uxtb	r3, r3
 8003996:	2b00      	cmp	r3, #0
 8003998:	d040      	beq.n	8003a1c <sec2str+0x9c>
		uint32_t sec = get_secCounter();
 800399a:	f7ff ff85 	bl	80038a8 <get_secCounter>
 800399e:	6338      	str	r0, [r7, #48]	; 0x30

		uint32_t day = sec / (60 * 60 * 24);
 80039a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039a2:	4a3c      	ldr	r2, [pc, #240]	; (8003a94 <sec2str+0x114>)
 80039a4:	fba2 2303 	umull	r2, r3, r2, r3
 80039a8:	0c1b      	lsrs	r3, r3, #16
 80039aa:	62fb      	str	r3, [r7, #44]	; 0x2c
		sec %= (60 * 60 * 24);
 80039ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ae:	4a39      	ldr	r2, [pc, #228]	; (8003a94 <sec2str+0x114>)
 80039b0:	fba2 1203 	umull	r1, r2, r2, r3
 80039b4:	0c12      	lsrs	r2, r2, #16
 80039b6:	4938      	ldr	r1, [pc, #224]	; (8003a98 <sec2str+0x118>)
 80039b8:	fb01 f202 	mul.w	r2, r1, r2
 80039bc:	1a9b      	subs	r3, r3, r2
 80039be:	633b      	str	r3, [r7, #48]	; 0x30
		uint32_t hour = sec / (60 * 60);
 80039c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039c2:	4a36      	ldr	r2, [pc, #216]	; (8003a9c <sec2str+0x11c>)
 80039c4:	fba2 2303 	umull	r2, r3, r2, r3
 80039c8:	0adb      	lsrs	r3, r3, #11
 80039ca:	62bb      	str	r3, [r7, #40]	; 0x28
		sec %= (60 * 60);
 80039cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ce:	4a33      	ldr	r2, [pc, #204]	; (8003a9c <sec2str+0x11c>)
 80039d0:	fba2 1203 	umull	r1, r2, r2, r3
 80039d4:	0ad2      	lsrs	r2, r2, #11
 80039d6:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80039da:	fb01 f202 	mul.w	r2, r1, r2
 80039de:	1a9b      	subs	r3, r3, r2
 80039e0:	633b      	str	r3, [r7, #48]	; 0x30
		uint32_t min = sec / (60);
 80039e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039e4:	4a2e      	ldr	r2, [pc, #184]	; (8003aa0 <sec2str+0x120>)
 80039e6:	fba2 2303 	umull	r2, r3, r2, r3
 80039ea:	095b      	lsrs	r3, r3, #5
 80039ec:	627b      	str	r3, [r7, #36]	; 0x24
		sec %= 60;
 80039ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039f0:	4b2b      	ldr	r3, [pc, #172]	; (8003aa0 <sec2str+0x120>)
 80039f2:	fba3 1302 	umull	r1, r3, r3, r2
 80039f6:	0959      	lsrs	r1, r3, #5
 80039f8:	460b      	mov	r3, r1
 80039fa:	011b      	lsls	r3, r3, #4
 80039fc:	1a5b      	subs	r3, r3, r1
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	633b      	str	r3, [r7, #48]	; 0x30

		ret = sprintf(st, "%lu.%02lu:%02lu:%02lu", day, hour, min, sec);
 8003a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a06:	9301      	str	r3, [sp, #4]
 8003a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0a:	9300      	str	r3, [sp, #0]
 8003a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a10:	4924      	ldr	r1, [pc, #144]	; (8003aa4 <sec2str+0x124>)
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f00a fdf2 	bl	800e5fc <siprintf>
 8003a18:	6378      	str	r0, [r7, #52]	; 0x34
 8003a1a:	e034      	b.n	8003a86 <sec2str+0x106>
	} else {
		RTC_TimeTypeDef sTime;
		RTC_DateTypeDef sDate;
		if (HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN)) devError |= devRTC;
 8003a1c:	f107 030c 	add.w	r3, r7, #12
 8003a20:	2200      	movs	r2, #0
 8003a22:	4619      	mov	r1, r3
 8003a24:	4820      	ldr	r0, [pc, #128]	; (8003aa8 <sec2str+0x128>)
 8003a26:	f006 fa52 	bl	8009ece <HAL_RTC_GetDate>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d007      	beq.n	8003a40 <sec2str+0xc0>
 8003a30:	4b1e      	ldr	r3, [pc, #120]	; (8003aac <sec2str+0x12c>)
 8003a32:	881b      	ldrh	r3, [r3, #0]
 8003a34:	f043 0308 	orr.w	r3, r3, #8
 8003a38:	b29a      	uxth	r2, r3
 8003a3a:	4b1c      	ldr	r3, [pc, #112]	; (8003aac <sec2str+0x12c>)
 8003a3c:	801a      	strh	r2, [r3, #0]
 8003a3e:	e022      	b.n	8003a86 <sec2str+0x106>
		else {
			if (HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN)) devError |= devRTC;
 8003a40:	f107 0310 	add.w	r3, r7, #16
 8003a44:	2200      	movs	r2, #0
 8003a46:	4619      	mov	r1, r3
 8003a48:	4817      	ldr	r0, [pc, #92]	; (8003aa8 <sec2str+0x128>)
 8003a4a:	f006 f95d 	bl	8009d08 <HAL_RTC_GetTime>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d007      	beq.n	8003a64 <sec2str+0xe4>
 8003a54:	4b15      	ldr	r3, [pc, #84]	; (8003aac <sec2str+0x12c>)
 8003a56:	881b      	ldrh	r3, [r3, #0]
 8003a58:	f043 0308 	orr.w	r3, r3, #8
 8003a5c:	b29a      	uxth	r2, r3
 8003a5e:	4b13      	ldr	r3, [pc, #76]	; (8003aac <sec2str+0x12c>)
 8003a60:	801a      	strh	r2, [r3, #0]
 8003a62:	e010      	b.n	8003a86 <sec2str+0x106>
			else {
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
								sDate.Date, sDate.Month,
 8003a64:	7bbb      	ldrb	r3, [r7, #14]
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
 8003a66:	4618      	mov	r0, r3
								sDate.Date, sDate.Month,
 8003a68:	7b7b      	ldrb	r3, [r7, #13]
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
 8003a6a:	461c      	mov	r4, r3
								sTime.Hours, sTime.Minutes, sTime.Seconds);
 8003a6c:	7c3b      	ldrb	r3, [r7, #16]
 8003a6e:	7c7a      	ldrb	r2, [r7, #17]
 8003a70:	7cb9      	ldrb	r1, [r7, #18]
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
 8003a72:	9102      	str	r1, [sp, #8]
 8003a74:	9201      	str	r2, [sp, #4]
 8003a76:	9300      	str	r3, [sp, #0]
 8003a78:	4623      	mov	r3, r4
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	490c      	ldr	r1, [pc, #48]	; (8003ab0 <sec2str+0x130>)
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f00a fdbc 	bl	800e5fc <siprintf>
 8003a84:	6378      	str	r0, [r7, #52]	; 0x34
			}
		}
	}

	return ret;
 8003a86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	373c      	adds	r7, #60	; 0x3c
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd90      	pop	{r4, r7, pc}
 8003a90:	20001865 	.word	0x20001865
 8003a94:	c22e4507 	.word	0xc22e4507
 8003a98:	00015180 	.word	0x00015180
 8003a9c:	91a2b3c5 	.word	0x91a2b3c5
 8003aa0:	88888889 	.word	0x88888889
 8003aa4:	0801271c 	.word	0x0801271c
 8003aa8:	200008f4 	.word	0x200008f4
 8003aac:	20001450 	.word	0x20001450
 8003ab0:	08012734 	.word	0x08012734

08003ab4 <Report>:
//--------------------------------------------------------------------------------------------
void Report(const uint8_t addTime, const char *fmt, ...)
{
 8003ab4:	b40e      	push	{r1, r2, r3}
 8003ab6:	b590      	push	{r4, r7, lr}
 8003ab8:	b088      	sub	sp, #32
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	4603      	mov	r3, r0
 8003abe:	71fb      	strb	r3, [r7, #7]
size_t len = MAX_UART_BUF;
 8003ac0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ac4:	617b      	str	r3, [r7, #20]
char *buf = &cmdBuf[0];
 8003ac6:	4b32      	ldr	r3, [pc, #200]	; (8003b90 <Report+0xdc>)
 8003ac8:	613b      	str	r3, [r7, #16]
uint32_t cnt = 16;
 8003aca:	2310      	movs	r3, #16
 8003acc:	61fb      	str	r3, [r7, #28]
uint32_t stim = HAL_GetTick();
 8003ace:	f002 fa65 	bl	8005f9c <HAL_GetTick>
 8003ad2:	60f8      	str	r0, [r7, #12]

	while (!uartRdy && cnt) {
 8003ad4:	e008      	b.n	8003ae8 <Report+0x34>
		if (HAL_GetTick() - stim) cnt--;
 8003ad6:	f002 fa61 	bl	8005f9c <HAL_GetTick>
 8003ada:	4602      	mov	r2, r0
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d002      	beq.n	8003ae8 <Report+0x34>
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	3b01      	subs	r3, #1
 8003ae6:	61fb      	str	r3, [r7, #28]
	while (!uartRdy && cnt) {
 8003ae8:	4b2a      	ldr	r3, [pc, #168]	; (8003b94 <Report+0xe0>)
 8003aea:	781b      	ldrb	r3, [r3, #0]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d102      	bne.n	8003af6 <Report+0x42>
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d1ef      	bne.n	8003ad6 <Report+0x22>
	}

	//if (buf) {
		*buf = '\0';
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	2200      	movs	r2, #0
 8003afa:	701a      	strb	r2, [r3, #0]
		int dl = 0;
 8003afc:	2300      	movs	r3, #0
 8003afe:	61bb      	str	r3, [r7, #24]
		if (addTime) {
 8003b00:	79fb      	ldrb	r3, [r7, #7]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d010      	beq.n	8003b28 <Report+0x74>
			dl = sec2str(buf);
 8003b06:	6938      	ldr	r0, [r7, #16]
 8003b08:	f7ff ff3a 	bl	8003980 <sec2str>
 8003b0c:	61b8      	str	r0, [r7, #24]
			strcat(buf, " | ");
 8003b0e:	6938      	ldr	r0, [r7, #16]
 8003b10:	f7fc fb5e 	bl	80001d0 <strlen>
 8003b14:	4603      	mov	r3, r0
 8003b16:	461a      	mov	r2, r3
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	4413      	add	r3, r2
 8003b1c:	4a1e      	ldr	r2, [pc, #120]	; (8003b98 <Report+0xe4>)
 8003b1e:	6810      	ldr	r0, [r2, #0]
 8003b20:	6018      	str	r0, [r3, #0]
			dl += 3;
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	3303      	adds	r3, #3
 8003b26:	61bb      	str	r3, [r7, #24]
		}

		va_list args;
		va_start(args, fmt);
 8003b28:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003b2c:	60bb      	str	r3, [r7, #8]
		vsnprintf(buf + dl, len - dl, fmt, args);
 8003b2e:	69bb      	ldr	r3, [r7, #24]
 8003b30:	693a      	ldr	r2, [r7, #16]
 8003b32:	18d0      	adds	r0, r2, r3
 8003b34:	69bb      	ldr	r3, [r7, #24]
 8003b36:	697a      	ldr	r2, [r7, #20]
 8003b38:	1ad1      	subs	r1, r2, r3
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b3e:	f00b fc9d 	bl	800f47c <vsniprintf>

		uartRdy = false;
 8003b42:	4b14      	ldr	r3, [pc, #80]	; (8003b94 <Report+0xe0>)
 8003b44:	2200      	movs	r2, #0
 8003b46:	701a      	strb	r2, [r3, #0]
		if (HAL_UART_Transmit_DMA(cmdPort, (uint8_t *)buf, strlen(buf)) != HAL_OK) devError |= devUART;
 8003b48:	4b14      	ldr	r3, [pc, #80]	; (8003b9c <Report+0xe8>)
 8003b4a:	681c      	ldr	r4, [r3, #0]
 8003b4c:	6938      	ldr	r0, [r7, #16]
 8003b4e:	f7fc fb3f 	bl	80001d0 <strlen>
 8003b52:	4603      	mov	r3, r0
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	461a      	mov	r2, r3
 8003b58:	6939      	ldr	r1, [r7, #16]
 8003b5a:	4620      	mov	r0, r4
 8003b5c:	f008 fc66 	bl	800c42c <HAL_UART_Transmit_DMA>
 8003b60:	4603      	mov	r3, r0
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d006      	beq.n	8003b74 <Report+0xc0>
 8003b66:	4b0e      	ldr	r3, [pc, #56]	; (8003ba0 <Report+0xec>)
 8003b68:	881b      	ldrh	r3, [r3, #0]
 8003b6a:	f043 0302 	orr.w	r3, r3, #2
 8003b6e:	b29a      	uxth	r2, r3
 8003b70:	4b0b      	ldr	r3, [pc, #44]	; (8003ba0 <Report+0xec>)
 8003b72:	801a      	strh	r2, [r3, #0]
		while (!uartRdy) {} //HAL_Delay(1)
 8003b74:	bf00      	nop
 8003b76:	4b07      	ldr	r3, [pc, #28]	; (8003b94 <Report+0xe0>)
 8003b78:	781b      	ldrb	r3, [r3, #0]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d0fb      	beq.n	8003b76 <Report+0xc2>
	//	free(buf);
	//} else {
	//	devError |= devMEM;
	//}

}
 8003b7e:	bf00      	nop
 8003b80:	bf00      	nop
 8003b82:	3720      	adds	r7, #32
 8003b84:	46bd      	mov	sp, r7
 8003b86:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8003b8a:	b003      	add	sp, #12
 8003b8c:	4770      	bx	lr
 8003b8e:	bf00      	nop
 8003b90:	20001050 	.word	0x20001050
 8003b94:	20000014 	.word	0x20000014
 8003b98:	08012750 	.word	0x08012750
 8003b9c:	20000010 	.word	0x20000010
 8003ba0:	20001450 	.word	0x20001450

08003ba4 <HAL_TIM_PeriodElapsedCallback>:



//------------------------------------------------------------------------------------------
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ba4:	b5b0      	push	{r4, r5, r7, lr}
 8003ba6:	b082      	sub	sp, #8
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM4) {
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a15      	ldr	r2, [pc, #84]	; (8003c08 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d124      	bne.n	8003c00 <HAL_TIM_PeriodElapsedCallback+0x5c>
		msCounter++;//inc_msCounter();
 8003bb6:	4b15      	ldr	r3, [pc, #84]	; (8003c0c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8003bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bbc:	1c54      	adds	r4, r2, #1
 8003bbe:	f143 0500 	adc.w	r5, r3, #0
 8003bc2:	4b12      	ldr	r3, [pc, #72]	; (8003c0c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8003bc4:	e9c3 4500 	strd	r4, r5, [r3]
		if (!(msCounter % _1s)) {// 1 seconda
 8003bc8:	4b10      	ldr	r3, [pc, #64]	; (8003c0c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8003bca:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003bce:	f04f 0264 	mov.w	r2, #100	; 0x64
 8003bd2:	f04f 0300 	mov.w	r3, #0
 8003bd6:	f7fd f8a7 	bl	8000d28 <__aeabi_uldivmod>
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	d110      	bne.n	8003c00 <HAL_TIM_PeriodElapsedCallback+0x5c>
			secCounter++;
 8003bde:	4b0c      	ldr	r3, [pc, #48]	; (8003c10 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	3301      	adds	r3, #1
 8003be4:	4a0a      	ldr	r2, [pc, #40]	; (8003c10 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8003be6:	6013      	str	r3, [r2, #0]
		  	HAL_GPIO_TogglePin(TIK_LED_GPIO_Port, TIK_LED_Pin);
 8003be8:	2101      	movs	r1, #1
 8003bea:	480a      	ldr	r0, [pc, #40]	; (8003c14 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8003bec:	f002 ffa8 	bl	8006b40 <HAL_GPIO_TogglePin>
#ifdef SET_DISPLAY
		  	if (startSec) putEvt(evt_Sec);
 8003bf0:	4b09      	ldr	r3, [pc, #36]	; (8003c18 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8003bf2:	781b      	ldrb	r3, [r3, #0]
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d002      	beq.n	8003c00 <HAL_TIM_PeriodElapsedCallback+0x5c>
 8003bfa:	2008      	movs	r0, #8
 8003bfc:	f7ff fc6c 	bl	80034d8 <putEvt>
#endif
	  	}
	}
}
 8003c00:	bf00      	nop
 8003c02:	3708      	adds	r7, #8
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bdb0      	pop	{r4, r5, r7, pc}
 8003c08:	40000800 	.word	0x40000800
 8003c0c:	20001458 	.word	0x20001458
 8003c10:	20001454 	.word	0x20001454
 8003c14:	48000800 	.word	0x48000800
 8003c18:	20002c82 	.word	0x20002c82

08003c1c <HAL_UART_TxCpltCallback>:
//--------------------------------------------------------------------------------------------

//-------------------------------------------------------------------------------------------
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a05      	ldr	r2, [pc, #20]	; (8003c40 <HAL_UART_TxCpltCallback+0x24>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d102      	bne.n	8003c34 <HAL_UART_TxCpltCallback+0x18>
		uartRdy = 1;
 8003c2e:	4b05      	ldr	r3, [pc, #20]	; (8003c44 <HAL_UART_TxCpltCallback+0x28>)
 8003c30:	2201      	movs	r2, #1
 8003c32:	701a      	strb	r2, [r3, #0]
	}
}
 8003c34:	bf00      	nop
 8003c36:	370c      	adds	r7, #12
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr
 8003c40:	40004400 	.word	0x40004400
 8003c44:	20000014 	.word	0x20000014

08003c48 <HAL_UART_RxCpltCallback>:
//-------------------------------------------------------------------------------------------
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c48:	b590      	push	{r4, r7, lr}
 8003c4a:	b08d      	sub	sp, #52	; 0x34
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4aa1      	ldr	r2, [pc, #644]	; (8003edc <HAL_UART_RxCpltCallback+0x294>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	f040 822a 	bne.w	80040b0 <HAL_UART_RxCpltCallback+0x468>
		rxBuf[rxInd++] = (char)rxByte;
 8003c5c:	4ba0      	ldr	r3, [pc, #640]	; (8003ee0 <HAL_UART_RxCpltCallback+0x298>)
 8003c5e:	881b      	ldrh	r3, [r3, #0]
 8003c60:	1c5a      	adds	r2, r3, #1
 8003c62:	b291      	uxth	r1, r2
 8003c64:	4a9e      	ldr	r2, [pc, #632]	; (8003ee0 <HAL_UART_RxCpltCallback+0x298>)
 8003c66:	8011      	strh	r1, [r2, #0]
 8003c68:	461a      	mov	r2, r3
 8003c6a:	4b9e      	ldr	r3, [pc, #632]	; (8003ee4 <HAL_UART_RxCpltCallback+0x29c>)
 8003c6c:	7819      	ldrb	r1, [r3, #0]
 8003c6e:	4b9e      	ldr	r3, [pc, #632]	; (8003ee8 <HAL_UART_RxCpltCallback+0x2a0>)
 8003c70:	5499      	strb	r1, [r3, r2]
		if (rxByte == 0x0a) {//end of line
 8003c72:	4b9c      	ldr	r3, [pc, #624]	; (8003ee4 <HAL_UART_RxCpltCallback+0x29c>)
 8003c74:	781b      	ldrb	r3, [r3, #0]
 8003c76:	2b0a      	cmp	r3, #10
 8003c78:	f040 820b 	bne.w	8004092 <HAL_UART_RxCpltCallback+0x44a>
			rxBuf[--rxInd] = '\0';
 8003c7c:	4b98      	ldr	r3, [pc, #608]	; (8003ee0 <HAL_UART_RxCpltCallback+0x298>)
 8003c7e:	881b      	ldrh	r3, [r3, #0]
 8003c80:	3b01      	subs	r3, #1
 8003c82:	b29a      	uxth	r2, r3
 8003c84:	4b96      	ldr	r3, [pc, #600]	; (8003ee0 <HAL_UART_RxCpltCallback+0x298>)
 8003c86:	801a      	strh	r2, [r3, #0]
 8003c88:	4b95      	ldr	r3, [pc, #596]	; (8003ee0 <HAL_UART_RxCpltCallback+0x298>)
 8003c8a:	881b      	ldrh	r3, [r3, #0]
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	4b96      	ldr	r3, [pc, #600]	; (8003ee8 <HAL_UART_RxCpltCallback+0x2a0>)
 8003c90:	2100      	movs	r1, #0
 8003c92:	5499      	strb	r1, [r3, r2]

			int i, ev = -1;
 8003c94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003c98:	62bb      	str	r3, [r7, #40]	; 0x28
			if (strlen(rxBuf) > 2) {
 8003c9a:	4893      	ldr	r0, [pc, #588]	; (8003ee8 <HAL_UART_RxCpltCallback+0x2a0>)
 8003c9c:	f7fc fa98 	bl	80001d0 <strlen>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2b02      	cmp	r3, #2
 8003ca4:	f240 81ef 	bls.w	8004086 <HAL_UART_RxCpltCallback+0x43e>
				for (i = 0; i < MAX_CMDS; i++) {
 8003ca8:	2300      	movs	r3, #0
 8003caa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cac:	e1dc      	b.n	8004068 <HAL_UART_RxCpltCallback+0x420>
					if (!strncmp(rxBuf, s_cmds[i], strlen(s_cmds[i]))) {
 8003cae:	4a8f      	ldr	r2, [pc, #572]	; (8003eec <HAL_UART_RxCpltCallback+0x2a4>)
 8003cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cb2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8003cb6:	4a8d      	ldr	r2, [pc, #564]	; (8003eec <HAL_UART_RxCpltCallback+0x2a4>)
 8003cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f7fc fa86 	bl	80001d0 <strlen>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	4621      	mov	r1, r4
 8003cca:	4887      	ldr	r0, [pc, #540]	; (8003ee8 <HAL_UART_RxCpltCallback+0x2a0>)
 8003ccc:	f00a fcc3 	bl	800e656 <strncmp>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	f040 81c5 	bne.w	8004062 <HAL_UART_RxCpltCallback+0x41a>
						char *uk = rxBuf + strlen(s_cmds[i]);
 8003cd8:	4a84      	ldr	r2, [pc, #528]	; (8003eec <HAL_UART_RxCpltCallback+0x2a4>)
 8003cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f7fc fa75 	bl	80001d0 <strlen>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	4a7f      	ldr	r2, [pc, #508]	; (8003ee8 <HAL_UART_RxCpltCallback+0x2a0>)
 8003cea:	4413      	add	r3, r2
 8003cec:	623b      	str	r3, [r7, #32]
						ev = -1;
 8003cee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003cf2:	62bb      	str	r3, [r7, #40]	; 0x28
						switch (i) {
 8003cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cf6:	2b10      	cmp	r3, #16
 8003cf8:	f200 81bb 	bhi.w	8004072 <HAL_UART_RxCpltCallback+0x42a>
 8003cfc:	a201      	add	r2, pc, #4	; (adr r2, 8003d04 <HAL_UART_RxCpltCallback+0xbc>)
 8003cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d02:	bf00      	nop
 8003d04:	08003e71 	.word	0x08003e71
 8003d08:	08003e77 	.word	0x08003e77
 8003d0c:	08003e7d 	.word	0x08003e7d
 8003d10:	08004073 	.word	0x08004073
 8003d14:	08003ecf 	.word	0x08003ecf
 8003d18:	08003ecf 	.word	0x08003ecf
 8003d1c:	08004005 	.word	0x08004005
 8003d20:	08003f69 	.word	0x08003f69
 8003d24:	08004073 	.word	0x08004073
 8003d28:	08003e71 	.word	0x08003e71
 8003d2c:	08003e71 	.word	0x08003e71
 8003d30:	08003e41 	.word	0x08003e41
 8003d34:	08003dfd 	.word	0x08003dfd
 8003d38:	08003d75 	.word	0x08003d75
 8003d3c:	08003ddf 	.word	0x08003ddf
 8003d40:	08003e71 	.word	0x08003e71
 8003d44:	08003d49 	.word	0x08003d49
							case cmdBand://"band:2"
								if (strlen(uk) >= 1) {
 8003d48:	6a3b      	ldr	r3, [r7, #32]
 8003d4a:	781b      	ldrb	r3, [r3, #0]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	f000 8176 	beq.w	800403e <HAL_UART_RxCpltCallback+0x3f6>
									newBand = atol(uk);
 8003d52:	6a38      	ldr	r0, [r7, #32]
 8003d54:	f009 fef7 	bl	800db46 <atol>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	b2da      	uxtb	r2, r3
 8003d5c:	4b64      	ldr	r3, [pc, #400]	; (8003ef0 <HAL_UART_RxCpltCallback+0x2a8>)
 8003d5e:	701a      	strb	r2, [r3, #0]
									if (newBand != Band) {
 8003d60:	4b63      	ldr	r3, [pc, #396]	; (8003ef0 <HAL_UART_RxCpltCallback+0x2a8>)
 8003d62:	781a      	ldrb	r2, [r3, #0]
 8003d64:	4b63      	ldr	r3, [pc, #396]	; (8003ef4 <HAL_UART_RxCpltCallback+0x2ac>)
 8003d66:	781b      	ldrb	r3, [r3, #0]
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	f000 8168 	beq.w	800403e <HAL_UART_RxCpltCallback+0x3f6>
										ev = i;
 8003d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d70:	62bb      	str	r3, [r7, #40]	; 0x28
									}
								}
							break;
 8003d72:	e164      	b.n	800403e <HAL_UART_RxCpltCallback+0x3f6>
										ev = i;
									}
								}
							break;*/
							case cmdVol:
								if (strlen(uk) >= 1) {
 8003d74:	6a3b      	ldr	r3, [r7, #32]
 8003d76:	781b      	ldrb	r3, [r3, #0]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	f000 8162 	beq.w	8004042 <HAL_UART_RxCpltCallback+0x3fa>
									uint8_t nv = Volume;
 8003d7e:	4b5e      	ldr	r3, [pc, #376]	; (8003ef8 <HAL_UART_RxCpltCallback+0x2b0>)
 8003d80:	781b      	ldrb	r3, [r3, #0]
 8003d82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
									if (strstr(uk, "up")) {
 8003d86:	495d      	ldr	r1, [pc, #372]	; (8003efc <HAL_UART_RxCpltCallback+0x2b4>)
 8003d88:	6a38      	ldr	r0, [r7, #32]
 8003d8a:	f00a fc78 	bl	800e67e <strstr>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d005      	beq.n	8003da0 <HAL_UART_RxCpltCallback+0x158>
										nv++;
 8003d94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003d98:	3301      	adds	r3, #1
 8003d9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003d9e:	e012      	b.n	8003dc6 <HAL_UART_RxCpltCallback+0x17e>
									} else if (strstr(uk, "down")) {
 8003da0:	4957      	ldr	r1, [pc, #348]	; (8003f00 <HAL_UART_RxCpltCallback+0x2b8>)
 8003da2:	6a38      	ldr	r0, [r7, #32]
 8003da4:	f00a fc6b 	bl	800e67e <strstr>
 8003da8:	4603      	mov	r3, r0
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d005      	beq.n	8003dba <HAL_UART_RxCpltCallback+0x172>
										nv--;
 8003dae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003db2:	3b01      	subs	r3, #1
 8003db4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003db8:	e005      	b.n	8003dc6 <HAL_UART_RxCpltCallback+0x17e>
									} else {
										nv = (uint8_t)atol(uk);
 8003dba:	6a38      	ldr	r0, [r7, #32]
 8003dbc:	f009 fec3 	bl	800db46 <atol>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
									}
									if ((nv >= 0) && (nv <= 15)) {
 8003dc6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003dca:	2b0f      	cmp	r3, #15
 8003dcc:	f200 8139 	bhi.w	8004042 <HAL_UART_RxCpltCallback+0x3fa>
										newVolume = nv;
 8003dd0:	4a4c      	ldr	r2, [pc, #304]	; (8003f04 <HAL_UART_RxCpltCallback+0x2bc>)
 8003dd2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003dd6:	7013      	strb	r3, [r2, #0]
										ev = i;
 8003dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dda:	62bb      	str	r3, [r7, #40]	; 0x28
									}
								}
							break;
 8003ddc:	e131      	b.n	8004042 <HAL_UART_RxCpltCallback+0x3fa>
							case cmdBass:
								if (strlen(uk) >= 1) {
 8003dde:	6a3b      	ldr	r3, [r7, #32]
 8003de0:	781b      	ldrb	r3, [r3, #0]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	f000 812f 	beq.w	8004046 <HAL_UART_RxCpltCallback+0x3fe>
									newBassBoost = (uint8_t)atol(uk);
 8003de8:	6a38      	ldr	r0, [r7, #32]
 8003dea:	f009 feac 	bl	800db46 <atol>
 8003dee:	4603      	mov	r3, r0
 8003df0:	b2da      	uxtb	r2, r3
 8003df2:	4b45      	ldr	r3, [pc, #276]	; (8003f08 <HAL_UART_RxCpltCallback+0x2c0>)
 8003df4:	701a      	strb	r2, [r3, #0]
									ev = i;
 8003df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003df8:	62bb      	str	r3, [r7, #40]	; 0x28
								}
							break;
 8003dfa:	e124      	b.n	8004046 <HAL_UART_RxCpltCallback+0x3fe>
							case cmdFreq://"freq:95.1"
								if (strlen(uk) >= 2) {
 8003dfc:	6a38      	ldr	r0, [r7, #32]
 8003dfe:	f7fc f9e7 	bl	80001d0 <strlen>
 8003e02:	4603      	mov	r3, r0
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	f240 8120 	bls.w	800404a <HAL_UART_RxCpltCallback+0x402>
									newFreq = (float)atof(uk);
 8003e0a:	6a38      	ldr	r0, [r7, #32]
 8003e0c:	f009 fe94 	bl	800db38 <atof>
 8003e10:	ec53 2b10 	vmov	r2, r3, d0
 8003e14:	4610      	mov	r0, r2
 8003e16:	4619      	mov	r1, r3
 8003e18:	f7fc fee6 	bl	8000be8 <__aeabi_d2f>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	4a3b      	ldr	r2, [pc, #236]	; (8003f0c <HAL_UART_RxCpltCallback+0x2c4>)
 8003e20:	6013      	str	r3, [r2, #0]
									if (newFreq != Freq) {
 8003e22:	4b3a      	ldr	r3, [pc, #232]	; (8003f0c <HAL_UART_RxCpltCallback+0x2c4>)
 8003e24:	ed93 7a00 	vldr	s14, [r3]
 8003e28:	4b39      	ldr	r3, [pc, #228]	; (8003f10 <HAL_UART_RxCpltCallback+0x2c8>)
 8003e2a:	edd3 7a00 	vldr	s15, [r3]
 8003e2e:	eeb4 7a67 	vcmp.f32	s14, s15
 8003e32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e36:	f000 8108 	beq.w	800404a <HAL_UART_RxCpltCallback+0x402>
										ev = i;
 8003e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e3c:	62bb      	str	r3, [r7, #40]	; 0x28
									}
								}
							break;
 8003e3e:	e104      	b.n	800404a <HAL_UART_RxCpltCallback+0x402>
							case cmdScan://"scan"
								seek_up = 1;
 8003e40:	4b34      	ldr	r3, [pc, #208]	; (8003f14 <HAL_UART_RxCpltCallback+0x2cc>)
 8003e42:	2201      	movs	r2, #1
 8003e44:	701a      	strb	r2, [r3, #0]
								ev = i;
 8003e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e48:	62bb      	str	r3, [r7, #40]	; 0x28
								char *uki = strchr(uk, ':');
 8003e4a:	213a      	movs	r1, #58	; 0x3a
 8003e4c:	6a38      	ldr	r0, [r7, #32]
 8003e4e:	f00a fbf5 	bl	800e63c <strchr>
 8003e52:	61f8      	str	r0, [r7, #28]
								if (uki) {
 8003e54:	69fb      	ldr	r3, [r7, #28]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	f000 80f9 	beq.w	800404e <HAL_UART_RxCpltCallback+0x406>
									if (*(char *)(uki + 1) == '0') seek_up = 0;
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	3301      	adds	r3, #1
 8003e60:	781b      	ldrb	r3, [r3, #0]
 8003e62:	2b30      	cmp	r3, #48	; 0x30
 8003e64:	f040 80f3 	bne.w	800404e <HAL_UART_RxCpltCallback+0x406>
 8003e68:	4b2a      	ldr	r3, [pc, #168]	; (8003f14 <HAL_UART_RxCpltCallback+0x2cc>)
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	701a      	strb	r2, [r3, #0]
								}
							break;
 8003e6e:	e0ee      	b.n	800404e <HAL_UART_RxCpltCallback+0x406>
							case cmdClr://"clr"
							case cmdHelp://"help"
							case cmdVer://"ver"
							case cmdList:
								ev = i;
 8003e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e72:	62bb      	str	r3, [r7, #40]	; 0x28
							break;
 8003e74:	e0f4      	b.n	8004060 <HAL_UART_RxCpltCallback+0x418>
							case cmdRestart://"restart" -> restart = 1;
								ev = i;
 8003e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e78:	62bb      	str	r3, [r7, #40]	; 0x28
							break;
 8003e7a:	e0f1      	b.n	8004060 <HAL_UART_RxCpltCallback+0x418>
							case cmdEpoch://"epoch:1657191323"
								if (strlen(uk) >= 10) {
 8003e7c:	6a38      	ldr	r0, [r7, #32]
 8003e7e:	f7fc f9a7 	bl	80001d0 <strlen>
 8003e82:	4603      	mov	r3, r0
 8003e84:	2b09      	cmp	r3, #9
 8003e86:	f240 80e4 	bls.w	8004052 <HAL_UART_RxCpltCallback+0x40a>
									char *uki = strchr(uk, ':');
 8003e8a:	213a      	movs	r1, #58	; 0x3a
 8003e8c:	6a38      	ldr	r0, [r7, #32]
 8003e8e:	f00a fbd5 	bl	800e63c <strchr>
 8003e92:	60b8      	str	r0, [r7, #8]
									if (uki) {
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d00c      	beq.n	8003eb4 <HAL_UART_RxCpltCallback+0x26c>
										tZone = (uint8_t)atol(uki + 1);
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	3301      	adds	r3, #1
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f009 fe51 	bl	800db46 <atol>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	b2da      	uxtb	r2, r3
 8003ea8:	4b1b      	ldr	r3, [pc, #108]	; (8003f18 <HAL_UART_RxCpltCallback+0x2d0>)
 8003eaa:	701a      	strb	r2, [r3, #0]
										*uki = '\0';
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	701a      	strb	r2, [r3, #0]
 8003eb2:	e002      	b.n	8003eba <HAL_UART_RxCpltCallback+0x272>
									} else {
										tZone = 0;
 8003eb4:	4b18      	ldr	r3, [pc, #96]	; (8003f18 <HAL_UART_RxCpltCallback+0x2d0>)
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	701a      	strb	r2, [r3, #0]
									}
									epoch = (uint32_t)atol(uk);
 8003eba:	6a38      	ldr	r0, [r7, #32]
 8003ebc:	f009 fe43 	bl	800db46 <atol>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	4b15      	ldr	r3, [pc, #84]	; (8003f1c <HAL_UART_RxCpltCallback+0x2d4>)
 8003ec6:	601a      	str	r2, [r3, #0]
									ev = i;
 8003ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eca:	62bb      	str	r3, [r7, #40]	; 0x28
								}
							break;
 8003ecc:	e0c1      	b.n	8004052 <HAL_UART_RxCpltCallback+0x40a>
							case cmdsRead:// read:0
							case cmdsErase:// erase:0
								if (i == cmdsRead) cmd_sector = cmdsRead;
 8003ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ed0:	2b04      	cmp	r3, #4
 8003ed2:	d127      	bne.n	8003f24 <HAL_UART_RxCpltCallback+0x2dc>
 8003ed4:	4b12      	ldr	r3, [pc, #72]	; (8003f20 <HAL_UART_RxCpltCallback+0x2d8>)
 8003ed6:	2204      	movs	r2, #4
 8003ed8:	601a      	str	r2, [r3, #0]
 8003eda:	e026      	b.n	8003f2a <HAL_UART_RxCpltCallback+0x2e2>
 8003edc:	40004400 	.word	0x40004400
 8003ee0:	20001462 	.word	0x20001462
 8003ee4:	20001460 	.word	0x20001460
 8003ee8:	20001464 	.word	0x20001464
 8003eec:	2000001c 	.word	0x2000001c
 8003ef0:	200001c1 	.word	0x200001c1
 8003ef4:	200001c0 	.word	0x200001c0
 8003ef8:	200001c3 	.word	0x200001c3
 8003efc:	08012754 	.word	0x08012754
 8003f00:	08012758 	.word	0x08012758
 8003f04:	200001c4 	.word	0x200001c4
 8003f08:	20002c97 	.word	0x20002c97
 8003f0c:	200001bc 	.word	0x200001bc
 8003f10:	200001b8 	.word	0x200001b8
 8003f14:	200001c2 	.word	0x200001c2
 8003f18:	20001866 	.word	0x20001866
 8003f1c:	20000018 	.word	0x20000018
 8003f20:	200001ac 	.word	0x200001ac
											  else cmd_sector = cmdsErase;
 8003f24:	4b64      	ldr	r3, [pc, #400]	; (80040b8 <HAL_UART_RxCpltCallback+0x470>)
 8003f26:	2205      	movs	r2, #5
 8003f28:	601a      	str	r2, [r3, #0]
								if (*uk == ':') {
 8003f2a:	6a3b      	ldr	r3, [r7, #32]
 8003f2c:	781b      	ldrb	r3, [r3, #0]
 8003f2e:	2b3a      	cmp	r3, #58	; 0x3a
 8003f30:	f040 8091 	bne.w	8004056 <HAL_UART_RxCpltCallback+0x40e>
									int sek = atoi(++uk);
 8003f34:	6a3b      	ldr	r3, [r7, #32]
 8003f36:	3301      	adds	r3, #1
 8003f38:	623b      	str	r3, [r7, #32]
 8003f3a:	6a38      	ldr	r0, [r7, #32]
 8003f3c:	f009 fdff 	bl	800db3e <atoi>
 8003f40:	60f8      	str	r0, [r7, #12]
									if ((sek >= 0) && (sek < W25qxx_getSectorCount())) {
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	f2c0 8086 	blt.w	8004056 <HAL_UART_RxCpltCallback+0x40e>
 8003f4a:	f001 fc0b 	bl	8005764 <W25qxx_getSectorCount>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d97f      	bls.n	8004056 <HAL_UART_RxCpltCallback+0x40e>
										adr_sector = sek;
 8003f56:	4a59      	ldr	r2, [pc, #356]	; (80040bc <HAL_UART_RxCpltCallback+0x474>)
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	6013      	str	r3, [r2, #0]
										offset_sector = 0;
 8003f5c:	4b58      	ldr	r3, [pc, #352]	; (80040c0 <HAL_UART_RxCpltCallback+0x478>)
 8003f5e:	2200      	movs	r2, #0
 8003f60:	601a      	str	r2, [r3, #0]
										ev = i;//flag_sector = true;
 8003f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f64:	62bb      	str	r3, [r7, #40]	; 0x28
									}
								}
							break;
 8003f66:	e076      	b.n	8004056 <HAL_UART_RxCpltCallback+0x40e>
							case cmdsWrite:// write:0:a5 | write:0:a5:256
								if (*uk == ':') {
 8003f68:	6a3b      	ldr	r3, [r7, #32]
 8003f6a:	781b      	ldrb	r3, [r3, #0]
 8003f6c:	2b3a      	cmp	r3, #58	; 0x3a
 8003f6e:	d174      	bne.n	800405a <HAL_UART_RxCpltCallback+0x412>
									uk++;
 8003f70:	6a3b      	ldr	r3, [r7, #32]
 8003f72:	3301      	adds	r3, #1
 8003f74:	623b      	str	r3, [r7, #32]
									int sek = atoi(uk);
 8003f76:	6a38      	ldr	r0, [r7, #32]
 8003f78:	f009 fde1 	bl	800db3e <atoi>
 8003f7c:	61b8      	str	r0, [r7, #24]
									if ((sek >= 0) && (sek < W25qxx_getSectorCount())) {
 8003f7e:	69bb      	ldr	r3, [r7, #24]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	db6a      	blt.n	800405a <HAL_UART_RxCpltCallback+0x412>
 8003f84:	f001 fbee 	bl	8005764 <W25qxx_getSectorCount>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	69bb      	ldr	r3, [r7, #24]
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d964      	bls.n	800405a <HAL_UART_RxCpltCallback+0x412>
										char *ukn = strchr(uk, ':');
 8003f90:	213a      	movs	r1, #58	; 0x3a
 8003f92:	6a38      	ldr	r0, [r7, #32]
 8003f94:	f00a fb52 	bl	800e63c <strchr>
 8003f98:	6178      	str	r0, [r7, #20]
										if (ukn) {
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d05c      	beq.n	800405a <HAL_UART_RxCpltCallback+0x412>
											len_write = -1;
 8003fa0:	4b48      	ldr	r3, [pc, #288]	; (80040c4 <HAL_UART_RxCpltCallback+0x47c>)
 8003fa2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003fa6:	601a      	str	r2, [r3, #0]
											ukn++;
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	3301      	adds	r3, #1
 8003fac:	617b      	str	r3, [r7, #20]
											byte_write = hexToBin(ukn);
 8003fae:	6978      	ldr	r0, [r7, #20]
 8003fb0:	f7ff fa18 	bl	80033e4 <hexToBin>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	4b43      	ldr	r3, [pc, #268]	; (80040c8 <HAL_UART_RxCpltCallback+0x480>)
 8003fba:	701a      	strb	r2, [r3, #0]
											uk = strchr(ukn, ':');
 8003fbc:	213a      	movs	r1, #58	; 0x3a
 8003fbe:	6978      	ldr	r0, [r7, #20]
 8003fc0:	f00a fb3c 	bl	800e63c <strchr>
 8003fc4:	6238      	str	r0, [r7, #32]
											if (uk) {
 8003fc6:	6a3b      	ldr	r3, [r7, #32]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d012      	beq.n	8003ff2 <HAL_UART_RxCpltCallback+0x3aa>
												int l = atoi(++uk);
 8003fcc:	6a3b      	ldr	r3, [r7, #32]
 8003fce:	3301      	adds	r3, #1
 8003fd0:	623b      	str	r3, [r7, #32]
 8003fd2:	6a38      	ldr	r0, [r7, #32]
 8003fd4:	f009 fdb3 	bl	800db3e <atoi>
 8003fd8:	6138      	str	r0, [r7, #16]
												if ((l > 0) && (l < W25qxx_getSectorSize())) len_write = l;
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	dd08      	ble.n	8003ff2 <HAL_UART_RxCpltCallback+0x3aa>
 8003fe0:	f001 fbcc 	bl	800577c <W25qxx_getSectorSize>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d902      	bls.n	8003ff2 <HAL_UART_RxCpltCallback+0x3aa>
 8003fec:	4a35      	ldr	r2, [pc, #212]	; (80040c4 <HAL_UART_RxCpltCallback+0x47c>)
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	6013      	str	r3, [r2, #0]
											}
											adr_sector = sek;
 8003ff2:	4a32      	ldr	r2, [pc, #200]	; (80040bc <HAL_UART_RxCpltCallback+0x474>)
 8003ff4:	69bb      	ldr	r3, [r7, #24]
 8003ff6:	6013      	str	r3, [r2, #0]
											offset_sector = 0;
 8003ff8:	4b31      	ldr	r3, [pc, #196]	; (80040c0 <HAL_UART_RxCpltCallback+0x478>)
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	601a      	str	r2, [r3, #0]
											ev = i;//flag_sector = true;
 8003ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004000:	62bb      	str	r3, [r7, #40]	; 0x28
										}
									}
								}
							break;
 8004002:	e02a      	b.n	800405a <HAL_UART_RxCpltCallback+0x412>
							case cmdsNext:// next
								if ((last_cmd_sector == cmdsRead) || (last_cmd_sector == cmdsNext)) {
 8004004:	4b31      	ldr	r3, [pc, #196]	; (80040cc <HAL_UART_RxCpltCallback+0x484>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	2b04      	cmp	r3, #4
 800400a:	d003      	beq.n	8004014 <HAL_UART_RxCpltCallback+0x3cc>
 800400c:	4b2f      	ldr	r3, [pc, #188]	; (80040cc <HAL_UART_RxCpltCallback+0x484>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	2b06      	cmp	r3, #6
 8004012:	d124      	bne.n	800405e <HAL_UART_RxCpltCallback+0x416>
									if ((offset_sector + list_sector) < W25qxx_getSectorSize()) {
 8004014:	4b2a      	ldr	r3, [pc, #168]	; (80040c0 <HAL_UART_RxCpltCallback+0x478>)
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	4b2d      	ldr	r3, [pc, #180]	; (80040d0 <HAL_UART_RxCpltCallback+0x488>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4413      	add	r3, r2
 800401e:	461c      	mov	r4, r3
 8004020:	f001 fbac 	bl	800577c <W25qxx_getSectorSize>
 8004024:	4603      	mov	r3, r0
 8004026:	429c      	cmp	r4, r3
 8004028:	d219      	bcs.n	800405e <HAL_UART_RxCpltCallback+0x416>
										offset_sector += list_sector;
 800402a:	4b25      	ldr	r3, [pc, #148]	; (80040c0 <HAL_UART_RxCpltCallback+0x478>)
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	4b28      	ldr	r3, [pc, #160]	; (80040d0 <HAL_UART_RxCpltCallback+0x488>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4413      	add	r3, r2
 8004034:	4a22      	ldr	r2, [pc, #136]	; (80040c0 <HAL_UART_RxCpltCallback+0x478>)
 8004036:	6013      	str	r3, [r2, #0]
										ev = i;//flag_sector = true;
 8004038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800403a:	62bb      	str	r3, [r7, #40]	; 0x28
									}
								}
							break;
 800403c:	e00f      	b.n	800405e <HAL_UART_RxCpltCallback+0x416>
							break;
 800403e:	bf00      	nop
 8004040:	e017      	b.n	8004072 <HAL_UART_RxCpltCallback+0x42a>
							break;
 8004042:	bf00      	nop
 8004044:	e015      	b.n	8004072 <HAL_UART_RxCpltCallback+0x42a>
							break;
 8004046:	bf00      	nop
 8004048:	e013      	b.n	8004072 <HAL_UART_RxCpltCallback+0x42a>
							break;
 800404a:	bf00      	nop
 800404c:	e011      	b.n	8004072 <HAL_UART_RxCpltCallback+0x42a>
							break;
 800404e:	bf00      	nop
 8004050:	e00f      	b.n	8004072 <HAL_UART_RxCpltCallback+0x42a>
							break;
 8004052:	bf00      	nop
 8004054:	e00d      	b.n	8004072 <HAL_UART_RxCpltCallback+0x42a>
							break;
 8004056:	bf00      	nop
 8004058:	e00b      	b.n	8004072 <HAL_UART_RxCpltCallback+0x42a>
							break;
 800405a:	bf00      	nop
 800405c:	e009      	b.n	8004072 <HAL_UART_RxCpltCallback+0x42a>
							break;
 800405e:	bf00      	nop
						}
						break;
 8004060:	e007      	b.n	8004072 <HAL_UART_RxCpltCallback+0x42a>
				for (i = 0; i < MAX_CMDS; i++) {
 8004062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004064:	3301      	adds	r3, #1
 8004066:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800406a:	2b10      	cmp	r3, #16
 800406c:	f77f ae1f 	ble.w	8003cae <HAL_UART_RxCpltCallback+0x66>
 8004070:	e000      	b.n	8004074 <HAL_UART_RxCpltCallback+0x42c>
						break;
 8004072:	bf00      	nop
					}
				}
				//
				if (ev == -1) ev = cmdErr;
 8004074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004076:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800407a:	d101      	bne.n	8004080 <HAL_UART_RxCpltCallback+0x438>
 800407c:	2303      	movs	r3, #3
 800407e:	62bb      	str	r3, [r7, #40]	; 0x28
				putEvt(ev);
 8004080:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004082:	f7ff fa29 	bl	80034d8 <putEvt>
				//
			}

			rxInd = 0;
 8004086:	4b13      	ldr	r3, [pc, #76]	; (80040d4 <HAL_UART_RxCpltCallback+0x48c>)
 8004088:	2200      	movs	r2, #0
 800408a:	801a      	strh	r2, [r3, #0]
			*rxBuf = '\0';
 800408c:	4b12      	ldr	r3, [pc, #72]	; (80040d8 <HAL_UART_RxCpltCallback+0x490>)
 800408e:	2200      	movs	r2, #0
 8004090:	701a      	strb	r2, [r3, #0]
		}

		if (HAL_UART_Receive_IT(huart, &rxByte, 1) != HAL_OK) devError |= devUART;
 8004092:	2201      	movs	r2, #1
 8004094:	4911      	ldr	r1, [pc, #68]	; (80040dc <HAL_UART_RxCpltCallback+0x494>)
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f008 f972 	bl	800c380 <HAL_UART_Receive_IT>
 800409c:	4603      	mov	r3, r0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d006      	beq.n	80040b0 <HAL_UART_RxCpltCallback+0x468>
 80040a2:	4b0f      	ldr	r3, [pc, #60]	; (80040e0 <HAL_UART_RxCpltCallback+0x498>)
 80040a4:	881b      	ldrh	r3, [r3, #0]
 80040a6:	f043 0302 	orr.w	r3, r3, #2
 80040aa:	b29a      	uxth	r2, r3
 80040ac:	4b0c      	ldr	r3, [pc, #48]	; (80040e0 <HAL_UART_RxCpltCallback+0x498>)
 80040ae:	801a      	strh	r2, [r3, #0]
	}
}
 80040b0:	bf00      	nop
 80040b2:	3734      	adds	r7, #52	; 0x34
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd90      	pop	{r4, r7, pc}
 80040b8:	200001ac 	.word	0x200001ac
 80040bc:	20001870 	.word	0x20001870
 80040c0:	20001874 	.word	0x20001874
 80040c4:	2000187c 	.word	0x2000187c
 80040c8:	200001b4 	.word	0x200001b4
 80040cc:	200001b0 	.word	0x200001b0
 80040d0:	20001878 	.word	0x20001878
 80040d4:	20001462 	.word	0x20001462
 80040d8:	20001464 	.word	0x20001464
 80040dc:	20001460 	.word	0x20001460
 80040e0:	20001450 	.word	0x20001450

080040e4 <HAL_UART_ErrorCallback>:
//-------------------------------------------------------------------------------------------
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b083      	sub	sp, #12
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a07      	ldr	r2, [pc, #28]	; (8004110 <HAL_UART_ErrorCallback+0x2c>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d106      	bne.n	8004104 <HAL_UART_ErrorCallback+0x20>
		devError |= devUART;
 80040f6:	4b07      	ldr	r3, [pc, #28]	; (8004114 <HAL_UART_ErrorCallback+0x30>)
 80040f8:	881b      	ldrh	r3, [r3, #0]
 80040fa:	f043 0302 	orr.w	r3, r3, #2
 80040fe:	b29a      	uxth	r2, r3
 8004100:	4b04      	ldr	r3, [pc, #16]	; (8004114 <HAL_UART_ErrorCallback+0x30>)
 8004102:	801a      	strh	r2, [r3, #0]
	}
}
 8004104:	bf00      	nop
 8004106:	370c      	adds	r7, #12
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr
 8004110:	40004400 	.word	0x40004400
 8004114:	20001450 	.word	0x20001450

08004118 <spiDone>:
//-------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------
//    Функция устанавливает в начальное состояние 'готов' служебные параметры порта SPI1:
//
void spiDone(SPI_HandleTypeDef *hspi)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b082      	sub	sp, #8
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
#ifdef SET_W25FLASH
	if (hspi->Instance == SPI2) {
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a0a      	ldr	r2, [pc, #40]	; (8004150 <spiDone+0x38>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d105      	bne.n	8004136 <spiDone+0x1e>
		W25_UNSELECT();
 800412a:	f001 f961 	bl	80053f0 <W25_UNSELECT>
		spiRdy = 1;
 800412e:	4b09      	ldr	r3, [pc, #36]	; (8004154 <spiDone+0x3c>)
 8004130:	2201      	movs	r2, #1
 8004132:	701a      	strb	r2, [r3, #0]
	else
	if (hspi->Instance == SPI1) {
		lcdRdy = 1;
	}
#endif
}
 8004134:	e007      	b.n	8004146 <spiDone+0x2e>
	if (hspi->Instance == SPI1) {
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a07      	ldr	r2, [pc, #28]	; (8004158 <spiDone+0x40>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d102      	bne.n	8004146 <spiDone+0x2e>
		lcdRdy = 1;
 8004140:	4b06      	ldr	r3, [pc, #24]	; (800415c <spiDone+0x44>)
 8004142:	2201      	movs	r2, #1
 8004144:	701a      	strb	r2, [r3, #0]
}
 8004146:	bf00      	nop
 8004148:	3708      	adds	r7, #8
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}
 800414e:	bf00      	nop
 8004150:	40003800 	.word	0x40003800
 8004154:	200001a8 	.word	0x200001a8
 8004158:	40013000 	.word	0x40013000
 800415c:	20000000 	.word	0x20000000

08004160 <HAL_SPI_RxCpltCallback>:
//-------------------------------------------------------------------------------------------
//    CallBack функция, вызывается по завершении приема данных от порта SPI
//
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b082      	sub	sp, #8
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
	spiDone(hspi);
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f7ff ffd5 	bl	8004118 <spiDone>
}
 800416e:	bf00      	nop
 8004170:	3708      	adds	r7, #8
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}

08004176 <HAL_SPI_TxCpltCallback>:
//-------------------------------------------------------------------------------------------
//    CallBack функция, вызывается по завершении передачи данных в порт SPI
//
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004176:	b580      	push	{r7, lr}
 8004178:	b082      	sub	sp, #8
 800417a:	af00      	add	r7, sp, #0
 800417c:	6078      	str	r0, [r7, #4]
	spiDone(hspi);
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f7ff ffca 	bl	8004118 <spiDone>
}
 8004184:	bf00      	nop
 8004186:	3708      	adds	r7, #8
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}

0800418c <HAL_SPI_TxRxCpltCallback>:
//-------------------------------------------------------------------------------------------
//    CallBack функция, вызывается по завершении приема/передачи данных порта SPI
//
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b082      	sub	sp, #8
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
	spiDone(hspi);
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	f7ff ffbf 	bl	8004118 <spiDone>
}
 800419a:	bf00      	nop
 800419c:	3708      	adds	r7, #8
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
	...

080041a4 <HAL_SPI_ErrorCallback>:
//--------------------------------------------------------------------------------------------
//    CallBack функция, вызывается при возникновении ошибки у модуля SPI
//
void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b082      	sub	sp, #8
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
	spiDone(hspi);
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f7ff ffb3 	bl	8004118 <spiDone>
	devError |= devSPI;
 80041b2:	4b05      	ldr	r3, [pc, #20]	; (80041c8 <HAL_SPI_ErrorCallback+0x24>)
 80041b4:	881b      	ldrh	r3, [r3, #0]
 80041b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041ba:	b29a      	uxth	r2, r3
 80041bc:	4b02      	ldr	r3, [pc, #8]	; (80041c8 <HAL_SPI_ErrorCallback+0x24>)
 80041be:	801a      	strh	r2, [r3, #0]
}
 80041c0:	bf00      	nop
 80041c2:	3708      	adds	r7, #8
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}
 80041c8:	20001450 	.word	0x20001450

080041cc <HAL_I2C_ErrorCallback>:
	}
#endif
}
//--------------------------------------------------------------------------------------------
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
#if defined(SET_RDA_CHIP) || defined(SET_NEW_RDA)
	if (hi2c->Instance == I2C1) {
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a07      	ldr	r2, [pc, #28]	; (80041f8 <HAL_I2C_ErrorCallback+0x2c>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d106      	bne.n	80041ec <HAL_I2C_ErrorCallback+0x20>
		devError |= devRDA;
 80041de:	4b07      	ldr	r3, [pc, #28]	; (80041fc <HAL_I2C_ErrorCallback+0x30>)
 80041e0:	881b      	ldrh	r3, [r3, #0]
 80041e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041e6:	b29a      	uxth	r2, r3
 80041e8:	4b04      	ldr	r3, [pc, #16]	; (80041fc <HAL_I2C_ErrorCallback+0x30>)
 80041ea:	801a      	strh	r2, [r3, #0]
	}
#endif
}
 80041ec:	bf00      	nop
 80041ee:	370c      	adds	r7, #12
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr
 80041f8:	40005400 	.word	0x40005400
 80041fc:	20001450 	.word	0x20001450

08004200 <HAL_GPIO_EXTI_Callback>:
//--------------------------------------------------------------------------------------------
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b082      	sub	sp, #8
 8004204:	af00      	add	r7, sp, #0
 8004206:	4603      	mov	r3, r0
 8004208:	80fb      	strh	r3, [r7, #6]
	if ((GPIO_Pin != KEY0_Pin) && (GPIO_Pin != KEY1_Pin)) return;
 800420a:	88fb      	ldrh	r3, [r7, #6]
 800420c:	2b02      	cmp	r3, #2
 800420e:	d002      	beq.n	8004216 <HAL_GPIO_EXTI_Callback+0x16>
 8004210:	88fb      	ldrh	r3, [r7, #6]
 8004212:	2b04      	cmp	r3, #4
 8004214:	d110      	bne.n	8004238 <HAL_GPIO_EXTI_Callback+0x38>

	if (GPIO_Pin == KEY0_Pin) seek_up = 1;
 8004216:	88fb      	ldrh	r3, [r7, #6]
 8004218:	2b02      	cmp	r3, #2
 800421a:	d103      	bne.n	8004224 <HAL_GPIO_EXTI_Callback+0x24>
 800421c:	4b08      	ldr	r3, [pc, #32]	; (8004240 <HAL_GPIO_EXTI_Callback+0x40>)
 800421e:	2201      	movs	r2, #1
 8004220:	701a      	strb	r2, [r3, #0]
 8004222:	e005      	b.n	8004230 <HAL_GPIO_EXTI_Callback+0x30>
	else
	if (GPIO_Pin == KEY1_Pin) seek_up = 0;
 8004224:	88fb      	ldrh	r3, [r7, #6]
 8004226:	2b04      	cmp	r3, #4
 8004228:	d102      	bne.n	8004230 <HAL_GPIO_EXTI_Callback+0x30>
 800422a:	4b05      	ldr	r3, [pc, #20]	; (8004240 <HAL_GPIO_EXTI_Callback+0x40>)
 800422c:	2200      	movs	r2, #0
 800422e:	701a      	strb	r2, [r3, #0]

	putEvt(cmdScan);
 8004230:	200b      	movs	r0, #11
 8004232:	f7ff f951 	bl	80034d8 <putEvt>
 8004236:	e000      	b.n	800423a <HAL_GPIO_EXTI_Callback+0x3a>
	if ((GPIO_Pin != KEY0_Pin) && (GPIO_Pin != KEY1_Pin)) return;
 8004238:	bf00      	nop
}
 800423a:	3708      	adds	r7, #8
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}
 8004240:	200001c2 	.word	0x200001c2

08004244 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8004248:	b672      	cpsid	i
}
 800424a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  devError |= devSYS;
 800424c:	4b05      	ldr	r3, [pc, #20]	; (8004264 <Error_Handler+0x20>)
 800424e:	881b      	ldrh	r3, [r3, #0]
 8004250:	f043 0320 	orr.w	r3, r3, #32
 8004254:	b29a      	uxth	r2, r3
 8004256:	4b03      	ldr	r3, [pc, #12]	; (8004264 <Error_Handler+0x20>)
 8004258:	801a      	strh	r2, [r3, #0]
	  errLedOn(true);
 800425a:	2001      	movs	r0, #1
 800425c:	f7ff fb0a 	bl	8003874 <errLedOn>
	  devError |= devSYS;
 8004260:	e7f4      	b.n	800424c <Error_Handler+0x8>
 8004262:	bf00      	nop
 8004264:	20001450 	.word	0x20001450

08004268 <rda5807_init>:

//==============================================================================
// Инициализация rda5807
//==============================================================================
uint8_t rda5807_init(float *freq)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b088      	sub	sp, #32
 800426c:	af04      	add	r7, sp, #16
 800426e:	6078      	str	r0, [r7, #4]
uint8_t buf[2] = {0, 0};
 8004270:	2300      	movs	r3, #0
 8004272:	813b      	strh	r3, [r7, #8]
uint8_t *id = &buf[0];
 8004274:	f107 0308 	add.w	r3, r7, #8
 8004278:	60fb      	str	r3, [r7, #12]

    if (HAL_I2C_Mem_Read(i2cRDA, RDA5807_RandAccess_Addr, 0, I2C_MEMADD_SIZE_8BIT, buf, 2, RDA5807_TO) != HAL_OK) {
 800427a:	4b30      	ldr	r3, [pc, #192]	; (800433c <rda5807_init+0xd4>)
 800427c:	6818      	ldr	r0, [r3, #0]
 800427e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004282:	9302      	str	r3, [sp, #8]
 8004284:	2302      	movs	r3, #2
 8004286:	9301      	str	r3, [sp, #4]
 8004288:	f107 0308 	add.w	r3, r7, #8
 800428c:	9300      	str	r3, [sp, #0]
 800428e:	2301      	movs	r3, #1
 8004290:	2200      	movs	r2, #0
 8004292:	2122      	movs	r1, #34	; 0x22
 8004294:	f002 ff1e 	bl	80070d4 <HAL_I2C_Mem_Read>
 8004298:	4603      	mov	r3, r0
 800429a:	2b00      	cmp	r3, #0
 800429c:	d13c      	bne.n	8004318 <rda5807_init+0xb0>
    stx[0] = '\0';
    for (int i = 0; i < 64; i++) sprintf(stx+strlen(stx)," %02x", buf11[i]);
    Report(1, "[%s] %s\r\n", __func__, stx);
#endif

    rda5807_SoftReset();
 800429e:	f000 f927 	bl	80044f0 <rda5807_SoftReset>
    if (devError & devRDA) goto err_out;
 80042a2:	4b27      	ldr	r3, [pc, #156]	; (8004340 <rda5807_init+0xd8>)
 80042a4:	881b      	ldrh	r3, [r3, #0]
 80042a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d136      	bne.n	800431c <rda5807_init+0xb4>

    rda5807_SetupDefault();
 80042ae:	f000 f949 	bl	8004544 <rda5807_SetupDefault>
    if (devError & devRDA) goto err_out;
 80042b2:	4b23      	ldr	r3, [pc, #140]	; (8004340 <rda5807_init+0xd8>)
 80042b4:	881b      	ldrh	r3, [r3, #0]
 80042b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d130      	bne.n	8004320 <rda5807_init+0xb8>

    uint16_t fr = (uint16_t)(*freq * 10);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	edd3 7a00 	vldr	s15, [r3]
 80042c4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80042c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80042cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042d0:	ee17 3a90 	vmov	r3, s15
 80042d4:	817b      	strh	r3, [r7, #10]
    rda5807_SetFreq_In100Khz(fr);
 80042d6:	897b      	ldrh	r3, [r7, #10]
 80042d8:	4618      	mov	r0, r3
 80042da:	f000 fa79 	bl	80047d0 <rda5807_SetFreq_In100Khz>
    //
    HAL_Delay(200);
 80042de:	20c8      	movs	r0, #200	; 0xc8
 80042e0:	f001 fe68 	bl	8005fb4 <HAL_Delay>
    //
    *freq = (float)rda5807_GetFreq_In100Khz();
 80042e4:	f000 faee 	bl	80048c4 <rda5807_GetFreq_In100Khz>
 80042e8:	4603      	mov	r3, r0
 80042ea:	ee07 3a90 	vmov	s15, r3
 80042ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	edc3 7a00 	vstr	s15, [r3]
    *freq /= 10;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	ed93 7a00 	vldr	s14, [r3]
 80042fe:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8004302:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	edc3 7a00 	vstr	s15, [r3]
#ifdef SET_RDA_DEBUG
    Report(1, "[%s] Freq: %.2f\r\n", __func__, *freq);//rda5807_GetFreq_In100Khz());
#endif

    HAL_Delay(100);
 800430c:	2064      	movs	r0, #100	; 0x64
 800430e:	f001 fe51 	bl	8005fb4 <HAL_Delay>

    return *id;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	781b      	ldrb	r3, [r3, #0]
 8004316:	e00d      	b.n	8004334 <rda5807_init+0xcc>
    	goto err_out;
 8004318:	bf00      	nop
 800431a:	e002      	b.n	8004322 <rda5807_init+0xba>
    if (devError & devRDA) goto err_out;
 800431c:	bf00      	nop
 800431e:	e000      	b.n	8004322 <rda5807_init+0xba>
    if (devError & devRDA) goto err_out;
 8004320:	bf00      	nop

err_out:
	devError |= devRDA;
 8004322:	4b07      	ldr	r3, [pc, #28]	; (8004340 <rda5807_init+0xd8>)
 8004324:	881b      	ldrh	r3, [r3, #0]
 8004326:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800432a:	b29a      	uxth	r2, r3
 800432c:	4b04      	ldr	r3, [pc, #16]	; (8004340 <rda5807_init+0xd8>)
 800432e:	801a      	strh	r2, [r3, #0]
    return *id;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	781b      	ldrb	r3, [r3, #0]
}
 8004334:	4618      	mov	r0, r3
 8004336:	3710      	adds	r7, #16
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}
 800433c:	200001dc 	.word	0x200001dc
 8004340:	20001450 	.word	0x20001450

08004344 <rda5807_rssi>:
//==============================================================================
uint16_t rda5807_rssi()
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b082      	sub	sp, #8
 8004348:	af00      	add	r7, sp, #0
uint16_t word = 0;
 800434a:	2300      	movs	r3, #0
 800434c:	80fb      	strh	r3, [r7, #6]

    rda5807_read(0x0B, &word, 1);
 800434e:	1dbb      	adds	r3, r7, #6
 8004350:	2201      	movs	r2, #1
 8004352:	4619      	mov	r1, r3
 8004354:	200b      	movs	r0, #11
 8004356:	f000 f85d 	bl	8004414 <rda5807_read>

    return (word >> 9);
 800435a:	88fb      	ldrh	r3, [r7, #6]
 800435c:	0a5b      	lsrs	r3, r3, #9
 800435e:	b29b      	uxth	r3, r3
}
 8004360:	4618      	mov	r0, r3
 8004362:	3708      	adds	r7, #8
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}

08004368 <rda5807_bytes_change>:

//==============================================================================
// Процедура меняет местами байты попарно в буфере pBuff 
//==============================================================================
void rda5807_bytes_change(uint8_t *pBuff, uint8_t count)
{
 8004368:	b480      	push	{r7}
 800436a:	b085      	sub	sp, #20
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	460b      	mov	r3, r1
 8004372:	70fb      	strb	r3, [r7, #3]
    while (count > 1) {    // Если осталась хотя бы пара байт
 8004374:	e010      	b.n	8004398 <rda5807_bytes_change+0x30>
        uint8_t Temp = *(pBuff + 1);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	785b      	ldrb	r3, [r3, #1]
 800437a:	73fb      	strb	r3, [r7, #15]
        *(pBuff + 1) = *pBuff;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	3301      	adds	r3, #1
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	7812      	ldrb	r2, [r2, #0]
 8004384:	701a      	strb	r2, [r3, #0]
        *pBuff = Temp;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	7bfa      	ldrb	r2, [r7, #15]
 800438a:	701a      	strb	r2, [r3, #0]
        pBuff += 2;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	3302      	adds	r3, #2
 8004390:	607b      	str	r3, [r7, #4]
        count -= 2;
 8004392:	78fb      	ldrb	r3, [r7, #3]
 8004394:	3b02      	subs	r3, #2
 8004396:	70fb      	strb	r3, [r7, #3]
    while (count > 1) {    // Если осталась хотя бы пара байт
 8004398:	78fb      	ldrb	r3, [r7, #3]
 800439a:	2b01      	cmp	r3, #1
 800439c:	d8eb      	bhi.n	8004376 <rda5807_bytes_change+0xe>
    }
}
 800439e:	bf00      	nop
 80043a0:	bf00      	nop
 80043a2:	3714      	adds	r7, #20
 80043a4:	46bd      	mov	sp, r7
 80043a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043aa:	4770      	bx	lr

080043ac <rda5807_write_regfile>:
//==============================================================================
// Процедура пишет в rda5807 группу регистров (кол-во RegNum) начиная с 0x02
// Используется I2C-адрес RDA5807_SeqAccess_Addr
//==============================================================================
void rda5807_write_regfile(uint16_t *pBuff, uint8_t RegNum)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b084      	sub	sp, #16
 80043b0:	af02      	add	r7, sp, #8
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	460b      	mov	r3, r1
 80043b6:	70fb      	strb	r3, [r7, #3]
    err = i2cm_Start(I2Cx, RDA5807_SeqAccess_Addr, 0, RDA5807_TO);
    if (err) {
        Error_Handler();
    } //*/

    rda5807_bytes_change((uint8_t *)pBuff, RegNum << 1);
 80043b8:	78fb      	ldrb	r3, [r7, #3]
 80043ba:	005b      	lsls	r3, r3, #1
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	4619      	mov	r1, r3
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	f7ff ffd1 	bl	8004368 <rda5807_bytes_change>

//    err = i2cm_WriteBuff(I2Cx, (uint8_t *) pBuff, RegNum << 1, RDA5807_TO);
//    i2cm_Stop(I2Cx, RDA5807_TO);

    if (HAL_I2C_Master_Transmit(i2cRDA, (uint16_t)RDA5807_SeqAccess_Addr, (uint8_t *)pBuff, RegNum << 1, RDA5807_TO) != HAL_OK) {
 80043c6:	4b11      	ldr	r3, [pc, #68]	; (800440c <rda5807_write_regfile+0x60>)
 80043c8:	6818      	ldr	r0, [r3, #0]
 80043ca:	78fb      	ldrb	r3, [r7, #3]
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	005b      	lsls	r3, r3, #1
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80043d6:	9200      	str	r2, [sp, #0]
 80043d8:	687a      	ldr	r2, [r7, #4]
 80043da:	2120      	movs	r1, #32
 80043dc:	f002 fc72 	bl	8006cc4 <HAL_I2C_Master_Transmit>
 80043e0:	4603      	mov	r3, r0
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d006      	beq.n	80043f4 <rda5807_write_regfile+0x48>
    	devError |= devRDA;
 80043e6:	4b0a      	ldr	r3, [pc, #40]	; (8004410 <rda5807_write_regfile+0x64>)
 80043e8:	881b      	ldrh	r3, [r3, #0]
 80043ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043ee:	b29a      	uxth	r2, r3
 80043f0:	4b07      	ldr	r3, [pc, #28]	; (8004410 <rda5807_write_regfile+0x64>)
 80043f2:	801a      	strh	r2, [r3, #0]
    }

    rda5807_bytes_change((uint8_t *)pBuff, RegNum << 1);
 80043f4:	78fb      	ldrb	r3, [r7, #3]
 80043f6:	005b      	lsls	r3, r3, #1
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	4619      	mov	r1, r3
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f7ff ffb3 	bl	8004368 <rda5807_bytes_change>
}
 8004402:	bf00      	nop
 8004404:	3708      	adds	r7, #8
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}
 800440a:	bf00      	nop
 800440c:	200001dc 	.word	0x200001dc
 8004410:	20001450 	.word	0x20001450

08004414 <rda5807_read>:
//==============================================================================
// Процедура читает из rda5807 группу регистров (кол-во RegNum) начиная с RegAddr
// Используется I2C-адрес RDA5807_RandAccess_Addr (для режима совместимости с rda5800)
//==============================================================================
void rda5807_read(uint8_t RegAddr, uint16_t *pBuff, uint8_t RegNum)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b086      	sub	sp, #24
 8004418:	af04      	add	r7, sp, #16
 800441a:	4603      	mov	r3, r0
 800441c:	6039      	str	r1, [r7, #0]
 800441e:	71fb      	strb	r3, [r7, #7]
 8004420:	4613      	mov	r3, r2
 8004422:	71bb      	strb	r3, [r7, #6]
        Error_Handler();
    }
    // Читаем
    i2cm_ReadBuffAndStop(I2Cx, (uint8_t *) pBuff, RegNum << 1, RDA5807_TO); //*/

    if (HAL_I2C_Mem_Read(i2cRDA, RDA5807_RandAccess_Addr,
 8004424:	4b13      	ldr	r3, [pc, #76]	; (8004474 <rda5807_read+0x60>)
 8004426:	6818      	ldr	r0, [r3, #0]
 8004428:	79fb      	ldrb	r3, [r7, #7]
 800442a:	b29a      	uxth	r2, r3
 800442c:	79bb      	ldrb	r3, [r7, #6]
 800442e:	b29b      	uxth	r3, r3
 8004430:	005b      	lsls	r3, r3, #1
 8004432:	b29b      	uxth	r3, r3
 8004434:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004438:	9102      	str	r1, [sp, #8]
 800443a:	9301      	str	r3, [sp, #4]
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	9300      	str	r3, [sp, #0]
 8004440:	2301      	movs	r3, #1
 8004442:	2122      	movs	r1, #34	; 0x22
 8004444:	f002 fe46 	bl	80070d4 <HAL_I2C_Mem_Read>
 8004448:	4603      	mov	r3, r0
 800444a:	2b00      	cmp	r3, #0
 800444c:	d006      	beq.n	800445c <rda5807_read+0x48>
    				     RegAddr, I2C_MEMADD_SIZE_8BIT,
						 (uint8_t *)pBuff, RegNum << 1,
						 RDA5807_TO) != HAL_OK) {
    	devError |= devRDA;
 800444e:	4b0a      	ldr	r3, [pc, #40]	; (8004478 <rda5807_read+0x64>)
 8004450:	881b      	ldrh	r3, [r3, #0]
 8004452:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004456:	b29a      	uxth	r2, r3
 8004458:	4b07      	ldr	r3, [pc, #28]	; (8004478 <rda5807_read+0x64>)
 800445a:	801a      	strh	r2, [r3, #0]
    }

    rda5807_bytes_change((uint8_t *)pBuff, RegNum << 1);
 800445c:	79bb      	ldrb	r3, [r7, #6]
 800445e:	005b      	lsls	r3, r3, #1
 8004460:	b2db      	uxtb	r3, r3
 8004462:	4619      	mov	r1, r3
 8004464:	6838      	ldr	r0, [r7, #0]
 8004466:	f7ff ff7f 	bl	8004368 <rda5807_bytes_change>
}
 800446a:	bf00      	nop
 800446c:	3708      	adds	r7, #8
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}
 8004472:	bf00      	nop
 8004474:	200001dc 	.word	0x200001dc
 8004478:	20001450 	.word	0x20001450

0800447c <rda5807_write>:
//==============================================================================
// Процедура пишет в rda5807 группу регистров (кол-во RegNum) начиная с RegAddr
// Используется I2C-адрес RDA5807_RandAccess_Addr (для режима совместимости с rda5800)
//==============================================================================
void rda5807_write(uint8_t RegAddr, uint16_t *pBuff, uint8_t RegNum)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b086      	sub	sp, #24
 8004480:	af04      	add	r7, sp, #16
 8004482:	4603      	mov	r3, r0
 8004484:	6039      	str	r1, [r7, #0]
 8004486:	71fb      	strb	r3, [r7, #7]
 8004488:	4613      	mov	r3, r2
 800448a:	71bb      	strb	r3, [r7, #6]

    if (i2cm_WriteBuff(I2Cx, &RegAddr, 1, RDA5807_TO)) {
        Error_Handler();
    } //*/

    rda5807_bytes_change((uint8_t *)pBuff, RegNum << 1);
 800448c:	79bb      	ldrb	r3, [r7, #6]
 800448e:	005b      	lsls	r3, r3, #1
 8004490:	b2db      	uxtb	r3, r3
 8004492:	4619      	mov	r1, r3
 8004494:	6838      	ldr	r0, [r7, #0]
 8004496:	f7ff ff67 	bl	8004368 <rda5807_bytes_change>

    //err = i2cm_WriteBuff(I2Cx, (uint8_t *) pBuff, RegNum << 1, RDA5807_TO);
    //i2cm_Stop(I2Cx, RDA5807_TO);

    if (HAL_I2C_Mem_Write(i2cRDA,
 800449a:	4b13      	ldr	r3, [pc, #76]	; (80044e8 <rda5807_write+0x6c>)
 800449c:	6818      	ldr	r0, [r3, #0]
 800449e:	79fb      	ldrb	r3, [r7, #7]
 80044a0:	b29a      	uxth	r2, r3
 80044a2:	79bb      	ldrb	r3, [r7, #6]
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	005b      	lsls	r3, r3, #1
 80044a8:	b29b      	uxth	r3, r3
 80044aa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80044ae:	9102      	str	r1, [sp, #8]
 80044b0:	9301      	str	r3, [sp, #4]
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	9300      	str	r3, [sp, #0]
 80044b6:	2301      	movs	r3, #1
 80044b8:	2122      	movs	r1, #34	; 0x22
 80044ba:	f002 fcf7 	bl	8006eac <HAL_I2C_Mem_Write>
 80044be:	4603      	mov	r3, r0
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d006      	beq.n	80044d2 <rda5807_write+0x56>
    					  RDA5807_RandAccess_Addr,
						  RegAddr, I2C_MEMADD_SIZE_8BIT,
						  (uint8_t *)pBuff, RegNum << 1,
						  RDA5807_TO) != HAL_OK) {
    	devError |= devRDA;
 80044c4:	4b09      	ldr	r3, [pc, #36]	; (80044ec <rda5807_write+0x70>)
 80044c6:	881b      	ldrh	r3, [r3, #0]
 80044c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044cc:	b29a      	uxth	r2, r3
 80044ce:	4b07      	ldr	r3, [pc, #28]	; (80044ec <rda5807_write+0x70>)
 80044d0:	801a      	strh	r2, [r3, #0]
    }

    rda5807_bytes_change((uint8_t *)pBuff, RegNum << 1);
 80044d2:	79bb      	ldrb	r3, [r7, #6]
 80044d4:	005b      	lsls	r3, r3, #1
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	4619      	mov	r1, r3
 80044da:	6838      	ldr	r0, [r7, #0]
 80044dc:	f7ff ff44 	bl	8004368 <rda5807_bytes_change>
}
 80044e0:	bf00      	nop
 80044e2:	3708      	adds	r7, #8
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}
 80044e8:	200001dc 	.word	0x200001dc
 80044ec:	20001450 	.word	0x20001450

080044f0 <rda5807_SoftReset>:

//==============================================================================
// Процедура делает программный сброс rda5807
//==============================================================================
void rda5807_SoftReset()
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b082      	sub	sp, #8
 80044f4:	af00      	add	r7, sp, #0
tReg02h reg02;

    rda5807_read(2, (uint16_t *)&reg02, 1);
 80044f6:	1d3b      	adds	r3, r7, #4
 80044f8:	2201      	movs	r2, #1
 80044fa:	4619      	mov	r1, r3
 80044fc:	2002      	movs	r0, #2
 80044fe:	f7ff ff89 	bl	8004414 <rda5807_read>

	reg02.bENABLE = 1;
 8004502:	793b      	ldrb	r3, [r7, #4]
 8004504:	f043 0301 	orr.w	r3, r3, #1
 8004508:	713b      	strb	r3, [r7, #4]
	reg02.bSOFT_RESET = 1;
 800450a:	793b      	ldrb	r3, [r7, #4]
 800450c:	f043 0302 	orr.w	r3, r3, #2
 8004510:	713b      	strb	r3, [r7, #4]
    rda5807_write(2, (uint16_t *)&reg02, 1);
 8004512:	1d3b      	adds	r3, r7, #4
 8004514:	2201      	movs	r2, #1
 8004516:	4619      	mov	r1, r3
 8004518:	2002      	movs	r0, #2
 800451a:	f7ff ffaf 	bl	800447c <rda5807_write>

    reg02.bENABLE = 1;
 800451e:	793b      	ldrb	r3, [r7, #4]
 8004520:	f043 0301 	orr.w	r3, r3, #1
 8004524:	713b      	strb	r3, [r7, #4]
    reg02.bSOFT_RESET = 0;
 8004526:	793b      	ldrb	r3, [r7, #4]
 8004528:	f36f 0341 	bfc	r3, #1, #1
 800452c:	713b      	strb	r3, [r7, #4]
    rda5807_write(2, (uint16_t *)&reg02, 1);
 800452e:	1d3b      	adds	r3, r7, #4
 8004530:	2201      	movs	r2, #1
 8004532:	4619      	mov	r1, r3
 8004534:	2002      	movs	r0, #2
 8004536:	f7ff ffa1 	bl	800447c <rda5807_write>
}
 800453a:	bf00      	nop
 800453c:	3708      	adds	r7, #8
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
	...

08004544 <rda5807_SetupDefault>:

//==============================================================================
// Процедура производит начальную настройку rda5807
//==============================================================================
void rda5807_SetupDefault()
{
 8004544:	b580      	push	{r7, lr}
 8004546:	af00      	add	r7, sp, #0
	tReg06h Reg06;
	tReg07h Reg07;
} Buffs;*/

    // Регистр 0x02
    Buffs.Reg02.bENABLE = 1;
 8004548:	4a6b      	ldr	r2, [pc, #428]	; (80046f8 <rda5807_SetupDefault+0x1b4>)
 800454a:	7813      	ldrb	r3, [r2, #0]
 800454c:	f043 0301 	orr.w	r3, r3, #1
 8004550:	7013      	strb	r3, [r2, #0]
    Buffs.Reg02.bSOFT_RESET = 0;
 8004552:	4a69      	ldr	r2, [pc, #420]	; (80046f8 <rda5807_SetupDefault+0x1b4>)
 8004554:	7813      	ldrb	r3, [r2, #0]
 8004556:	f36f 0341 	bfc	r3, #1, #1
 800455a:	7013      	strb	r3, [r2, #0]
    Buffs.Reg02.bNEW_METHOD = 1;
 800455c:	4a66      	ldr	r2, [pc, #408]	; (80046f8 <rda5807_SetupDefault+0x1b4>)
 800455e:	7813      	ldrb	r3, [r2, #0]
 8004560:	f043 0304 	orr.w	r3, r3, #4
 8004564:	7013      	strb	r3, [r2, #0]
    Buffs.Reg02.bRDS_EN = 1;
 8004566:	4a64      	ldr	r2, [pc, #400]	; (80046f8 <rda5807_SetupDefault+0x1b4>)
 8004568:	7813      	ldrb	r3, [r2, #0]
 800456a:	f043 0308 	orr.w	r3, r3, #8
 800456e:	7013      	strb	r3, [r2, #0]
    Buffs.Reg02.bCLK_MODE = 0;        // 32.768
 8004570:	4a61      	ldr	r2, [pc, #388]	; (80046f8 <rda5807_SetupDefault+0x1b4>)
 8004572:	7813      	ldrb	r3, [r2, #0]
 8004574:	f36f 1306 	bfc	r3, #4, #3
 8004578:	7013      	strb	r3, [r2, #0]
    Buffs.Reg02.bSKMODE = 0;
 800457a:	4a5f      	ldr	r2, [pc, #380]	; (80046f8 <rda5807_SetupDefault+0x1b4>)
 800457c:	7813      	ldrb	r3, [r2, #0]
 800457e:	f36f 13c7 	bfc	r3, #7, #1
 8004582:	7013      	strb	r3, [r2, #0]
    Buffs.Reg02.bSEEK = 0;
 8004584:	4a5c      	ldr	r2, [pc, #368]	; (80046f8 <rda5807_SetupDefault+0x1b4>)
 8004586:	7853      	ldrb	r3, [r2, #1]
 8004588:	f36f 0300 	bfc	r3, #0, #1
 800458c:	7053      	strb	r3, [r2, #1]
    Buffs.Reg02.bSEEKUP = 1;
 800458e:	4a5a      	ldr	r2, [pc, #360]	; (80046f8 <rda5807_SetupDefault+0x1b4>)
 8004590:	7853      	ldrb	r3, [r2, #1]
 8004592:	f043 0302 	orr.w	r3, r3, #2
 8004596:	7053      	strb	r3, [r2, #1]
    Buffs.Reg02.bRCLK_DirectInput = 0;
 8004598:	4a57      	ldr	r2, [pc, #348]	; (80046f8 <rda5807_SetupDefault+0x1b4>)
 800459a:	7853      	ldrb	r3, [r2, #1]
 800459c:	f36f 0382 	bfc	r3, #2, #1
 80045a0:	7053      	strb	r3, [r2, #1]
    Buffs.Reg02.bRCLK_NonCalibMode = 0;
 80045a2:	4a55      	ldr	r2, [pc, #340]	; (80046f8 <rda5807_SetupDefault+0x1b4>)
 80045a4:	7853      	ldrb	r3, [r2, #1]
 80045a6:	f36f 03c3 	bfc	r3, #3, #1
 80045aa:	7053      	strb	r3, [r2, #1]
    Buffs.Reg02.bBASS = 0;
 80045ac:	4a52      	ldr	r2, [pc, #328]	; (80046f8 <rda5807_SetupDefault+0x1b4>)
 80045ae:	7853      	ldrb	r3, [r2, #1]
 80045b0:	f36f 1304 	bfc	r3, #4, #1
 80045b4:	7053      	strb	r3, [r2, #1]
    Buffs.Reg02.bMONO = 0;
 80045b6:	4a50      	ldr	r2, [pc, #320]	; (80046f8 <rda5807_SetupDefault+0x1b4>)
 80045b8:	7853      	ldrb	r3, [r2, #1]
 80045ba:	f36f 1345 	bfc	r3, #5, #1
 80045be:	7053      	strb	r3, [r2, #1]
    Buffs.Reg02.bDMUTE = 1;
 80045c0:	4a4d      	ldr	r2, [pc, #308]	; (80046f8 <rda5807_SetupDefault+0x1b4>)
 80045c2:	7853      	ldrb	r3, [r2, #1]
 80045c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045c8:	7053      	strb	r3, [r2, #1]
    Buffs.Reg02.bDHIZ = 1;
 80045ca:	4a4b      	ldr	r2, [pc, #300]	; (80046f8 <rda5807_SetupDefault+0x1b4>)
 80045cc:	7853      	ldrb	r3, [r2, #1]
 80045ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045d2:	7053      	strb	r3, [r2, #1]
    // Регистр 0x03
    Buffs.Reg03.bSPACE = 0;//Step;//0;   // Шаг настройки - 0 = 100 КГц
 80045d4:	4a48      	ldr	r2, [pc, #288]	; (80046f8 <rda5807_SetupDefault+0x1b4>)
 80045d6:	7893      	ldrb	r3, [r2, #2]
 80045d8:	f36f 0301 	bfc	r3, #0, #2
 80045dc:	7093      	strb	r3, [r2, #2]
    Buffs.Reg03.bBAND = Band;//2;//0;    // Диапазон 2 - 76–108 MHz
 80045de:	4b47      	ldr	r3, [pc, #284]	; (80046fc <rda5807_SetupDefault+0x1b8>)
 80045e0:	781b      	ldrb	r3, [r3, #0]
 80045e2:	f003 0303 	and.w	r3, r3, #3
 80045e6:	b2d9      	uxtb	r1, r3
 80045e8:	4a43      	ldr	r2, [pc, #268]	; (80046f8 <rda5807_SetupDefault+0x1b4>)
 80045ea:	7893      	ldrb	r3, [r2, #2]
 80045ec:	f361 0383 	bfi	r3, r1, #2, #2
 80045f0:	7093      	strb	r3, [r2, #2]
    Buffs.Reg03.bTUNE = 1;
 80045f2:	4a41      	ldr	r2, [pc, #260]	; (80046f8 <rda5807_SetupDefault+0x1b4>)
 80045f4:	7893      	ldrb	r3, [r2, #2]
 80045f6:	f043 0310 	orr.w	r3, r3, #16
 80045fa:	7093      	strb	r3, [r2, #2]
    Buffs.Reg03.bDIRECT_MODE = 0;
 80045fc:	4a3e      	ldr	r2, [pc, #248]	; (80046f8 <rda5807_SetupDefault+0x1b4>)
 80045fe:	7893      	ldrb	r3, [r2, #2]
 8004600:	f36f 1345 	bfc	r3, #5, #1
 8004604:	7093      	strb	r3, [r2, #2]
    Buffs.Reg03.bCHAN = 0;
 8004606:	4a3c      	ldr	r2, [pc, #240]	; (80046f8 <rda5807_SetupDefault+0x1b4>)
 8004608:	8853      	ldrh	r3, [r2, #2]
 800460a:	f36f 138f 	bfc	r3, #6, #10
 800460e:	8053      	strh	r3, [r2, #2]
    // Регистр 0x04
    Buffs.Reg04.bRSVD1 = 0;
 8004610:	4b39      	ldr	r3, [pc, #228]	; (80046f8 <rda5807_SetupDefault+0x1b4>)
 8004612:	2200      	movs	r2, #0
 8004614:	711a      	strb	r2, [r3, #4]
    Buffs.Reg04.bAFCD = 0;
 8004616:	4a38      	ldr	r2, [pc, #224]	; (80046f8 <rda5807_SetupDefault+0x1b4>)
 8004618:	7953      	ldrb	r3, [r2, #5]
 800461a:	f36f 0300 	bfc	r3, #0, #1
 800461e:	7153      	strb	r3, [r2, #5]
    Buffs.Reg04.bSOFTMUTE_EN = 1;
 8004620:	4a35      	ldr	r2, [pc, #212]	; (80046f8 <rda5807_SetupDefault+0x1b4>)
 8004622:	7953      	ldrb	r3, [r2, #5]
 8004624:	f043 0302 	orr.w	r3, r3, #2
 8004628:	7153      	strb	r3, [r2, #5]
    Buffs.Reg04.bRSVD2 = 0;
 800462a:	4a33      	ldr	r2, [pc, #204]	; (80046f8 <rda5807_SetupDefault+0x1b4>)
 800462c:	7953      	ldrb	r3, [r2, #5]
 800462e:	f36f 0382 	bfc	r3, #2, #1
 8004632:	7153      	strb	r3, [r2, #5]
    Buffs.Reg04.bDE = 0;
 8004634:	4a30      	ldr	r2, [pc, #192]	; (80046f8 <rda5807_SetupDefault+0x1b4>)
 8004636:	7953      	ldrb	r3, [r2, #5]
 8004638:	f36f 03c3 	bfc	r3, #3, #1
 800463c:	7153      	strb	r3, [r2, #5]
    Buffs.Reg04.bRSVD3 = 0;
 800463e:	4a2e      	ldr	r2, [pc, #184]	; (80046f8 <rda5807_SetupDefault+0x1b4>)
 8004640:	7953      	ldrb	r3, [r2, #5]
 8004642:	f36f 1307 	bfc	r3, #4, #4
 8004646:	7153      	strb	r3, [r2, #5]
    // Регистр 0x05
    Buffs.Reg05.bVOLUME = 0;
 8004648:	4a2b      	ldr	r2, [pc, #172]	; (80046f8 <rda5807_SetupDefault+0x1b4>)
 800464a:	7993      	ldrb	r3, [r2, #6]
 800464c:	f36f 0303 	bfc	r3, #0, #4
 8004650:	7193      	strb	r3, [r2, #6]
    Buffs.Reg05.bANT_GAIN = 0;
 8004652:	4a29      	ldr	r2, [pc, #164]	; (80046f8 <rda5807_SetupDefault+0x1b4>)
 8004654:	7993      	ldrb	r3, [r2, #6]
 8004656:	f36f 1305 	bfc	r3, #4, #2
 800465a:	7193      	strb	r3, [r2, #6]
    Buffs.Reg05.bANT_TYPE = ANT_TYPE_Both;//ANT_TYPE_External;//ANT_TYPE_Headphones;//ANT_TYPE_Both;
 800465c:	4a26      	ldr	r2, [pc, #152]	; (80046f8 <rda5807_SetupDefault+0x1b4>)
 800465e:	7993      	ldrb	r3, [r2, #6]
 8004660:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004664:	7193      	strb	r3, [r2, #6]
    Buffs.Reg05.bSEEKTH = 8;
 8004666:	4a24      	ldr	r2, [pc, #144]	; (80046f8 <rda5807_SetupDefault+0x1b4>)
 8004668:	79d3      	ldrb	r3, [r2, #7]
 800466a:	2108      	movs	r1, #8
 800466c:	f361 0303 	bfi	r3, r1, #0, #4
 8004670:	71d3      	strb	r3, [r2, #7]
    Buffs.Reg05.bRSVD3 = 0;
 8004672:	4a21      	ldr	r2, [pc, #132]	; (80046f8 <rda5807_SetupDefault+0x1b4>)
 8004674:	79d3      	ldrb	r3, [r2, #7]
 8004676:	f36f 1306 	bfc	r3, #4, #3
 800467a:	71d3      	strb	r3, [r2, #7]
    Buffs.Reg05.bINT_MODE = 1;
 800467c:	4a1e      	ldr	r2, [pc, #120]	; (80046f8 <rda5807_SetupDefault+0x1b4>)
 800467e:	79d3      	ldrb	r3, [r2, #7]
 8004680:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004684:	71d3      	strb	r3, [r2, #7]
    // Регистр 0x06
    Buffs.Reg06.bRSVD1 = 0;
 8004686:	4a1c      	ldr	r2, [pc, #112]	; (80046f8 <rda5807_SetupDefault+0x1b4>)
 8004688:	8913      	ldrh	r3, [r2, #8]
 800468a:	f36f 030c 	bfc	r3, #0, #13
 800468e:	8113      	strh	r3, [r2, #8]
    Buffs.Reg06.bOPEN_MODE = 0;
 8004690:	4a19      	ldr	r2, [pc, #100]	; (80046f8 <rda5807_SetupDefault+0x1b4>)
 8004692:	7a53      	ldrb	r3, [r2, #9]
 8004694:	f36f 1346 	bfc	r3, #5, #2
 8004698:	7253      	strb	r3, [r2, #9]
    Buffs.Reg06.bRSVD2 = 0;
 800469a:	4a17      	ldr	r2, [pc, #92]	; (80046f8 <rda5807_SetupDefault+0x1b4>)
 800469c:	7a53      	ldrb	r3, [r2, #9]
 800469e:	f36f 13c7 	bfc	r3, #7, #1
 80046a2:	7253      	strb	r3, [r2, #9]
    // Регистр 0x07
    Buffs.Reg07.bFREQ_MODE = 0;
 80046a4:	4a14      	ldr	r2, [pc, #80]	; (80046f8 <rda5807_SetupDefault+0x1b4>)
 80046a6:	7a93      	ldrb	r3, [r2, #10]
 80046a8:	f36f 0300 	bfc	r3, #0, #1
 80046ac:	7293      	strb	r3, [r2, #10]
    Buffs.Reg07.bSOFTBLEND_EN = 1;
 80046ae:	4a12      	ldr	r2, [pc, #72]	; (80046f8 <rda5807_SetupDefault+0x1b4>)
 80046b0:	7a93      	ldrb	r3, [r2, #10]
 80046b2:	f043 0302 	orr.w	r3, r3, #2
 80046b6:	7293      	strb	r3, [r2, #10]
    Buffs.Reg07.bSEEK_TH_OLD = 0;
 80046b8:	4a0f      	ldr	r2, [pc, #60]	; (80046f8 <rda5807_SetupDefault+0x1b4>)
 80046ba:	7a93      	ldrb	r3, [r2, #10]
 80046bc:	f36f 0387 	bfc	r3, #2, #6
 80046c0:	7293      	strb	r3, [r2, #10]
    Buffs.Reg07.bRSVD1 = 0;
 80046c2:	4a0d      	ldr	r2, [pc, #52]	; (80046f8 <rda5807_SetupDefault+0x1b4>)
 80046c4:	7ad3      	ldrb	r3, [r2, #11]
 80046c6:	f36f 0300 	bfc	r3, #0, #1
 80046ca:	72d3      	strb	r3, [r2, #11]
    Buffs.Reg07.b65M_50M_MODE = 1;
 80046cc:	4a0a      	ldr	r2, [pc, #40]	; (80046f8 <rda5807_SetupDefault+0x1b4>)
 80046ce:	7ad3      	ldrb	r3, [r2, #11]
 80046d0:	f043 0302 	orr.w	r3, r3, #2
 80046d4:	72d3      	strb	r3, [r2, #11]
    Buffs.Reg07.bTH_SOFRBLEND = 16;
 80046d6:	4a08      	ldr	r2, [pc, #32]	; (80046f8 <rda5807_SetupDefault+0x1b4>)
 80046d8:	7ad3      	ldrb	r3, [r2, #11]
 80046da:	2110      	movs	r1, #16
 80046dc:	f361 0386 	bfi	r3, r1, #2, #5
 80046e0:	72d3      	strb	r3, [r2, #11]
    Buffs.Reg07.bRSVD2 = 0;
 80046e2:	4a05      	ldr	r2, [pc, #20]	; (80046f8 <rda5807_SetupDefault+0x1b4>)
 80046e4:	7ad3      	ldrb	r3, [r2, #11]
 80046e6:	f36f 13c7 	bfc	r3, #7, #1
 80046ea:	72d3      	strb	r3, [r2, #11]

    // Пишем регистры функцией записи регистрового файла
    rda5807_write_regfile((uint16_t *)&(Buffs.Reg02), 6);
 80046ec:	2106      	movs	r1, #6
 80046ee:	4802      	ldr	r0, [pc, #8]	; (80046f8 <rda5807_SetupDefault+0x1b4>)
 80046f0:	f7ff fe5c 	bl	80043ac <rda5807_write_regfile>
}
 80046f4:	bf00      	nop
 80046f6:	bd80      	pop	{r7, pc}
 80046f8:	20002c9c 	.word	0x20002c9c
 80046fc:	200001c0 	.word	0x200001c0

08004700 <rda5807_SetVolume>:

//==============================================================================
// Процедура устанавливает уровень громкости (0..16) выхода rda5807. При Value=0 включает MUTE
//==============================================================================
void rda5807_SetVolume(uint8_t Value)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b084      	sub	sp, #16
 8004704:	af00      	add	r7, sp, #0
 8004706:	4603      	mov	r3, r0
 8004708:	71fb      	strb	r3, [r7, #7]
//tReg02h Reg02;
//tReg05h Reg05;
uint8_t Mute = Value ? 0 : 1;
 800470a:	79fb      	ldrb	r3, [r7, #7]
 800470c:	2b00      	cmp	r3, #0
 800470e:	bf0c      	ite	eq
 8004710:	2301      	moveq	r3, #1
 8004712:	2300      	movne	r3, #0
 8004714:	b2db      	uxtb	r3, r3
 8004716:	73fb      	strb	r3, [r7, #15]

    if (Value > 16) Value = 16;
 8004718:	79fb      	ldrb	r3, [r7, #7]
 800471a:	2b10      	cmp	r3, #16
 800471c:	d901      	bls.n	8004722 <rda5807_SetVolume+0x22>
 800471e:	2310      	movs	r3, #16
 8004720:	71fb      	strb	r3, [r7, #7]

    Value--;    // Значение для поля Volume на 1 меньше, чем входной параметр функции
 8004722:	79fb      	ldrb	r3, [r7, #7]
 8004724:	3b01      	subs	r3, #1
 8004726:	71fb      	strb	r3, [r7, #7]

    if (!Mute) {
 8004728:	7bfb      	ldrb	r3, [r7, #15]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d112      	bne.n	8004754 <rda5807_SetVolume+0x54>
        // Читаем регистр 0x05
        rda5807_read(5, (uint16_t *)&Buffs.Reg05, 1);
 800472e:	2201      	movs	r2, #1
 8004730:	4915      	ldr	r1, [pc, #84]	; (8004788 <rda5807_SetVolume+0x88>)
 8004732:	2005      	movs	r0, #5
 8004734:	f7ff fe6e 	bl	8004414 <rda5807_read>
        // Меняем значение поля VOLUME
        Buffs.Reg05.bVOLUME = Value;
 8004738:	79fb      	ldrb	r3, [r7, #7]
 800473a:	f003 030f 	and.w	r3, r3, #15
 800473e:	b2d9      	uxtb	r1, r3
 8004740:	4a12      	ldr	r2, [pc, #72]	; (800478c <rda5807_SetVolume+0x8c>)
 8004742:	7993      	ldrb	r3, [r2, #6]
 8004744:	f361 0303 	bfi	r3, r1, #0, #4
 8004748:	7193      	strb	r3, [r2, #6]
        // Пишем регистр 0x05
        rda5807_write(5, (uint16_t *)&Buffs.Reg05, 1);
 800474a:	2201      	movs	r2, #1
 800474c:	490e      	ldr	r1, [pc, #56]	; (8004788 <rda5807_SetVolume+0x88>)
 800474e:	2005      	movs	r0, #5
 8004750:	f7ff fe94 	bl	800447c <rda5807_write>
    }

    // Читаем регистр 0x02
    rda5807_read(2, (uint16_t *)&Buffs.Reg02, 1);
 8004754:	2201      	movs	r2, #1
 8004756:	490d      	ldr	r1, [pc, #52]	; (800478c <rda5807_SetVolume+0x8c>)
 8004758:	2002      	movs	r0, #2
 800475a:	f7ff fe5b 	bl	8004414 <rda5807_read>
    // Меняем значение поля VOLUME
    Buffs.Reg02.bDMUTE = Mute ? 0 : 1;
 800475e:	7bfb      	ldrb	r3, [r7, #15]
 8004760:	2b00      	cmp	r3, #0
 8004762:	bf0c      	ite	eq
 8004764:	2301      	moveq	r3, #1
 8004766:	2300      	movne	r3, #0
 8004768:	b2d9      	uxtb	r1, r3
 800476a:	4a08      	ldr	r2, [pc, #32]	; (800478c <rda5807_SetVolume+0x8c>)
 800476c:	7853      	ldrb	r3, [r2, #1]
 800476e:	f361 1386 	bfi	r3, r1, #6, #1
 8004772:	7053      	strb	r3, [r2, #1]
    // Пишем регистр 0x02
    rda5807_write(2, (uint16_t *)&Buffs.Reg02, 1);
 8004774:	2201      	movs	r2, #1
 8004776:	4905      	ldr	r1, [pc, #20]	; (800478c <rda5807_SetVolume+0x8c>)
 8004778:	2002      	movs	r0, #2
 800477a:	f7ff fe7f 	bl	800447c <rda5807_write>
}
 800477e:	bf00      	nop
 8004780:	3710      	adds	r7, #16
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}
 8004786:	bf00      	nop
 8004788:	20002ca2 	.word	0x20002ca2
 800478c:	20002c9c 	.word	0x20002c9c

08004790 <rda5807_SetBassBoost>:

//==============================================================================
// Процедура включает/выключает BassBoost
//==============================================================================
void rda5807_SetBassBoost(uint8_t Value)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b082      	sub	sp, #8
 8004794:	af00      	add	r7, sp, #0
 8004796:	4603      	mov	r3, r0
 8004798:	71fb      	strb	r3, [r7, #7]
//tReg02h Reg02;

    // Читаем регистр 0x02
    rda5807_read(2, (uint16_t *)&Buffs.Reg02, 1);
 800479a:	2201      	movs	r2, #1
 800479c:	490b      	ldr	r1, [pc, #44]	; (80047cc <rda5807_SetBassBoost+0x3c>)
 800479e:	2002      	movs	r0, #2
 80047a0:	f7ff fe38 	bl	8004414 <rda5807_read>
    // Меняем значение поля BASS
    Buffs.Reg02.bBASS = (Value) ? 1 : 0;
 80047a4:	79fb      	ldrb	r3, [r7, #7]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	bf14      	ite	ne
 80047aa:	2301      	movne	r3, #1
 80047ac:	2300      	moveq	r3, #0
 80047ae:	b2d9      	uxtb	r1, r3
 80047b0:	4a06      	ldr	r2, [pc, #24]	; (80047cc <rda5807_SetBassBoost+0x3c>)
 80047b2:	7853      	ldrb	r3, [r2, #1]
 80047b4:	f361 1304 	bfi	r3, r1, #4, #1
 80047b8:	7053      	strb	r3, [r2, #1]
    // Пишем регистр 0x02
    rda5807_write(2, (uint16_t *)&Buffs.Reg02, 1);
 80047ba:	2201      	movs	r2, #1
 80047bc:	4903      	ldr	r1, [pc, #12]	; (80047cc <rda5807_SetBassBoost+0x3c>)
 80047be:	2002      	movs	r0, #2
 80047c0:	f7ff fe5c 	bl	800447c <rda5807_write>
}
 80047c4:	bf00      	nop
 80047c6:	3708      	adds	r7, #8
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}
 80047cc:	20002c9c 	.word	0x20002c9c

080047d0 <rda5807_SetFreq_In100Khz>:
//==============================================================================
// Процедура устанавливает текущую частоту Freq100kHz и стартует перенастройку rda5807 на эту частоту.
// Окончание процесса можно установки можно проконтроллировать по обнулению бита STR в регистре 0x0A (функцией rda5807_Get_SeekTuneReadyFlag)
//==============================================================================
void rda5807_SetFreq_In100Khz(uint16_t Freq100kHz)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b084      	sub	sp, #16
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	4603      	mov	r3, r0
 80047d8:	80fb      	strh	r3, [r7, #6]
//tReg03h Reg03;
uint16_t l = 870, r = 1080;
 80047da:	f240 3366 	movw	r3, #870	; 0x366
 80047de:	81fb      	strh	r3, [r7, #14]
 80047e0:	f44f 6387 	mov.w	r3, #1080	; 0x438
 80047e4:	81bb      	strh	r3, [r7, #12]

    // Проверка входного параметра для диапазона Buffs.Reg03.bBAND
	switch (Buffs.Reg03.bBAND) {    // Диапазон 87–108 MHz
 80047e6:	4b33      	ldr	r3, [pc, #204]	; (80048b4 <rda5807_SetFreq_In100Khz+0xe4>)
 80047e8:	789b      	ldrb	r3, [r3, #2]
 80047ea:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	2b03      	cmp	r3, #3
 80047f2:	d011      	beq.n	8004818 <rda5807_SetFreq_In100Khz+0x48>
 80047f4:	2b03      	cmp	r3, #3
 80047f6:	dc16      	bgt.n	8004826 <rda5807_SetFreq_In100Khz+0x56>
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d002      	beq.n	8004802 <rda5807_SetFreq_In100Khz+0x32>
 80047fc:	2b02      	cmp	r3, #2
 80047fe:	d007      	beq.n	8004810 <rda5807_SetFreq_In100Khz+0x40>
 8004800:	e011      	b.n	8004826 <rda5807_SetFreq_In100Khz+0x56>
		//case 0:// 00 = 87–108 MHz (US/Europe)
		//break;
		case 1:// 01 = 76–91 MHz (Japan)
			l = 760;
 8004802:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 8004806:	81fb      	strh	r3, [r7, #14]
			r = 910;
 8004808:	f240 338e 	movw	r3, #910	; 0x38e
 800480c:	81bb      	strh	r3, [r7, #12]
		break;
 800480e:	e00a      	b.n	8004826 <rda5807_SetFreq_In100Khz+0x56>
		case 2:// 10 = 76–108 MHz (world wide)
			l = 760;
 8004810:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 8004814:	81fb      	strh	r3, [r7, #14]
		break;
 8004816:	e006      	b.n	8004826 <rda5807_SetFreq_In100Khz+0x56>
		case 3:// 11 = 65 –76 MHz (East Europe) or 50-65MHz
			l = 650;
 8004818:	f240 238a 	movw	r3, #650	; 0x28a
 800481c:	81fb      	strh	r3, [r7, #14]
			r = 760;
 800481e:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 8004822:	81bb      	strh	r3, [r7, #12]
		break;
 8004824:	bf00      	nop
	}
	lBand = ((float)l) / 10;
 8004826:	89fb      	ldrh	r3, [r7, #14]
 8004828:	ee07 3a90 	vmov	s15, r3
 800482c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004830:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8004834:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004838:	4b1f      	ldr	r3, [pc, #124]	; (80048b8 <rda5807_SetFreq_In100Khz+0xe8>)
 800483a:	edc3 7a00 	vstr	s15, [r3]
	rBand = ((float)r) / 10;
 800483e:	89bb      	ldrh	r3, [r7, #12]
 8004840:	ee07 3a90 	vmov	s15, r3
 8004844:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004848:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800484c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004850:	4b1a      	ldr	r3, [pc, #104]	; (80048bc <rda5807_SetFreq_In100Khz+0xec>)
 8004852:	edc3 7a00 	vstr	s15, [r3]

    if (Freq100kHz < l)  Freq100kHz = l;
 8004856:	88fa      	ldrh	r2, [r7, #6]
 8004858:	89fb      	ldrh	r3, [r7, #14]
 800485a:	429a      	cmp	r2, r3
 800485c:	d201      	bcs.n	8004862 <rda5807_SetFreq_In100Khz+0x92>
 800485e:	89fb      	ldrh	r3, [r7, #14]
 8004860:	80fb      	strh	r3, [r7, #6]
    if (Freq100kHz > r) Freq100kHz = r;
 8004862:	88fa      	ldrh	r2, [r7, #6]
 8004864:	89bb      	ldrh	r3, [r7, #12]
 8004866:	429a      	cmp	r2, r3
 8004868:	d901      	bls.n	800486e <rda5807_SetFreq_In100Khz+0x9e>
 800486a:	89bb      	ldrh	r3, [r7, #12]
 800486c:	80fb      	strh	r3, [r7, #6]

    // Вычитаем начало диапазона (left)
    Freq100kHz -= l;
 800486e:	88fa      	ldrh	r2, [r7, #6]
 8004870:	89fb      	ldrh	r3, [r7, #14]
 8004872:	1ad3      	subs	r3, r2, r3
 8004874:	80fb      	strh	r3, [r7, #6]

    // Читаем регистр 0x03
    rda5807_read(3, (uint16_t *)&Buffs.Reg03, 1);
 8004876:	2201      	movs	r2, #1
 8004878:	4911      	ldr	r1, [pc, #68]	; (80048c0 <rda5807_SetFreq_In100Khz+0xf0>)
 800487a:	2003      	movs	r0, #3
 800487c:	f7ff fdca 	bl	8004414 <rda5807_read>
    // Меняем значение поля CHAN
    Buffs.Reg03.bCHAN = Freq100kHz;
 8004880:	88fb      	ldrh	r3, [r7, #6]
 8004882:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004886:	b299      	uxth	r1, r3
 8004888:	4a0a      	ldr	r2, [pc, #40]	; (80048b4 <rda5807_SetFreq_In100Khz+0xe4>)
 800488a:	8853      	ldrh	r3, [r2, #2]
 800488c:	f361 138f 	bfi	r3, r1, #6, #10
 8004890:	8053      	strh	r3, [r2, #2]
    // Выставляем флаг начала перенастройки на канал
    Buffs.Reg03.bTUNE = 1;
 8004892:	4a08      	ldr	r2, [pc, #32]	; (80048b4 <rda5807_SetFreq_In100Khz+0xe4>)
 8004894:	7893      	ldrb	r3, [r2, #2]
 8004896:	f043 0310 	orr.w	r3, r3, #16
 800489a:	7093      	strb	r3, [r2, #2]
    // Пишем регистр 0x03
    rda5807_write(3, (uint16_t *)&Buffs.Reg03, 1);
 800489c:	2201      	movs	r2, #1
 800489e:	4908      	ldr	r1, [pc, #32]	; (80048c0 <rda5807_SetFreq_In100Khz+0xf0>)
 80048a0:	2003      	movs	r0, #3
 80048a2:	f7ff fdeb 	bl	800447c <rda5807_write>

    HAL_Delay(50);
 80048a6:	2032      	movs	r0, #50	; 0x32
 80048a8:	f001 fb84 	bl	8005fb4 <HAL_Delay>
}
 80048ac:	bf00      	nop
 80048ae:	3710      	adds	r7, #16
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}
 80048b4:	20002c9c 	.word	0x20002c9c
 80048b8:	20002c88 	.word	0x20002c88
 80048bc:	20002c8c 	.word	0x20002c8c
 80048c0:	20002c9e 	.word	0x20002c9e

080048c4 <rda5807_GetFreq_In100Khz>:

//==============================================================================
// Функция читает текущую частоту, на которую настроен rda5807
//==============================================================================
uint16_t rda5807_GetFreq_In100Khz()
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b082      	sub	sp, #8
 80048c8:	af00      	add	r7, sp, #0
//tReg0Ah reg0A;

    // Читаем регистр 0x0A
    rda5807_read(0x0A, (uint16_t *)&Buffs.Reg0A, 1);
 80048ca:	2201      	movs	r2, #1
 80048cc:	491b      	ldr	r1, [pc, #108]	; (800493c <rda5807_GetFreq_In100Khz+0x78>)
 80048ce:	200a      	movs	r0, #10
 80048d0:	f7ff fda0 	bl	8004414 <rda5807_read>

    uint16_t Freq100kHz = Buffs.Reg0A.bREADCHAN;
 80048d4:	4b1a      	ldr	r3, [pc, #104]	; (8004940 <rda5807_GetFreq_In100Khz+0x7c>)
 80048d6:	8a1b      	ldrh	r3, [r3, #16]
 80048d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80048dc:	b29b      	uxth	r3, r3
 80048de:	80bb      	strh	r3, [r7, #4]

    if (Freq100kHz == 319) return 0;
 80048e0:	88bb      	ldrh	r3, [r7, #4]
 80048e2:	f240 123f 	movw	r2, #319	; 0x13f
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d101      	bne.n	80048ee <rda5807_GetFreq_In100Khz+0x2a>
 80048ea:	2300      	movs	r3, #0
 80048ec:	e021      	b.n	8004932 <rda5807_GetFreq_In100Khz+0x6e>

    // Прибавляем начало диапазона (87 МГц)
    uint16_t left = 870;
 80048ee:	f240 3366 	movw	r3, #870	; 0x366
 80048f2:	80fb      	strh	r3, [r7, #6]
    switch (Buffs.Reg03.bBAND) {    // Диапазон 87–108 MHz
 80048f4:	4b12      	ldr	r3, [pc, #72]	; (8004940 <rda5807_GetFreq_In100Khz+0x7c>)
 80048f6:	789b      	ldrb	r3, [r3, #2]
 80048f8:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	2b03      	cmp	r3, #3
 8004900:	d00e      	beq.n	8004920 <rda5807_GetFreq_In100Khz+0x5c>
 8004902:	2b03      	cmp	r3, #3
 8004904:	dc10      	bgt.n	8004928 <rda5807_GetFreq_In100Khz+0x64>
 8004906:	2b01      	cmp	r3, #1
 8004908:	d002      	beq.n	8004910 <rda5807_GetFreq_In100Khz+0x4c>
 800490a:	2b02      	cmp	r3, #2
 800490c:	d004      	beq.n	8004918 <rda5807_GetFreq_In100Khz+0x54>
 800490e:	e00b      	b.n	8004928 <rda5807_GetFreq_In100Khz+0x64>
    	//case 0:// 00 = 87–108 MHz (US/Europe)
    	//break;
    	case 1:// 01 = 76–91 MHz (Japan)
    		left = 760;
 8004910:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 8004914:	80fb      	strh	r3, [r7, #6]
    	break;
 8004916:	e007      	b.n	8004928 <rda5807_GetFreq_In100Khz+0x64>
    	case 2:// 10 = 76–108 MHz (world wide)
    		left = 760;
 8004918:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 800491c:	80fb      	strh	r3, [r7, #6]
    	break;
 800491e:	e003      	b.n	8004928 <rda5807_GetFreq_In100Khz+0x64>
    	case 3:// 11 = 65 –76 MHz (East Europe) or 50-65MHz
    		left = 650;
 8004920:	f240 238a 	movw	r3, #650	; 0x28a
 8004924:	80fb      	strh	r3, [r7, #6]
    	break;
 8004926:	bf00      	nop
    }
    Freq100kHz += left;
 8004928:	88ba      	ldrh	r2, [r7, #4]
 800492a:	88fb      	ldrh	r3, [r7, #6]
 800492c:	4413      	add	r3, r2
 800492e:	80bb      	strh	r3, [r7, #4]

    return Freq100kHz;
 8004930:	88bb      	ldrh	r3, [r7, #4]
}
 8004932:	4618      	mov	r0, r3
 8004934:	3708      	adds	r7, #8
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}
 800493a:	bf00      	nop
 800493c:	20002cac 	.word	0x20002cac
 8004940:	20002c9c 	.word	0x20002c9c

08004944 <rda5807_StartSeek>:

//==============================================================================
// Процедура стартует поиск радиостанции вверх/вниз
//==============================================================================
void rda5807_StartSeek(uint8_t Up)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b082      	sub	sp, #8
 8004948:	af00      	add	r7, sp, #0
 800494a:	4603      	mov	r3, r0
 800494c:	71fb      	strb	r3, [r7, #7]
//tReg02h Reg02;

    // Читаем регистр 0x02
    rda5807_read(0x02, (uint16_t *)&Buffs.Reg02, 1);
 800494e:	2201      	movs	r2, #1
 8004950:	4910      	ldr	r1, [pc, #64]	; (8004994 <rda5807_StartSeek+0x50>)
 8004952:	2002      	movs	r0, #2
 8004954:	f7ff fd5e 	bl	8004414 <rda5807_read>

    Buffs.Reg02.bSKMODE = 1;          // 07 Seek Mode (0 = wrap at the upper or lower band limit and continue seeking; 1 = stop seeking at the upper or lower band limit)
 8004958:	4a0e      	ldr	r2, [pc, #56]	; (8004994 <rda5807_StartSeek+0x50>)
 800495a:	7813      	ldrb	r3, [r2, #0]
 800495c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004960:	7013      	strb	r3, [r2, #0]
    Buffs.Reg02.bSEEK = 1;            // 08 Seek (0 = Disable stop seek; 1 = Enable)
 8004962:	4a0c      	ldr	r2, [pc, #48]	; (8004994 <rda5807_StartSeek+0x50>)
 8004964:	7853      	ldrb	r3, [r2, #1]
 8004966:	f043 0301 	orr.w	r3, r3, #1
 800496a:	7053      	strb	r3, [r2, #1]
    Buffs.Reg02.bSEEKUP = Up ? 1 : 0; // 09 Seek Up (0 = Seek down; 1 = Seek up)
 800496c:	79fb      	ldrb	r3, [r7, #7]
 800496e:	2b00      	cmp	r3, #0
 8004970:	bf14      	ite	ne
 8004972:	2301      	movne	r3, #1
 8004974:	2300      	moveq	r3, #0
 8004976:	b2d9      	uxtb	r1, r3
 8004978:	4a06      	ldr	r2, [pc, #24]	; (8004994 <rda5807_StartSeek+0x50>)
 800497a:	7853      	ldrb	r3, [r2, #1]
 800497c:	f361 0341 	bfi	r3, r1, #1, #1
 8004980:	7053      	strb	r3, [r2, #1]

    // Пишем регистр 0x02
    rda5807_write(0x02, (uint16_t *)&Buffs.Reg02, 1);
 8004982:	2201      	movs	r2, #1
 8004984:	4903      	ldr	r1, [pc, #12]	; (8004994 <rda5807_StartSeek+0x50>)
 8004986:	2002      	movs	r0, #2
 8004988:	f7ff fd78 	bl	800447c <rda5807_write>
}
 800498c:	bf00      	nop
 800498e:	3708      	adds	r7, #8
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}
 8004994:	20002c9c 	.word	0x20002c9c

08004998 <rda5807_Get_SeekTuneReadyFlag>:
//==============================================================================
// Функция возвращает состояние бита STR (SeekTuneReadyFlag)
// SeekTuneReadyFlag=1 пока идёт процесс настройки на частоту или поиск радиостанции.
//==============================================================================
uint8_t rda5807_Get_SeekTuneReadyFlag()
{
 8004998:	b580      	push	{r7, lr}
 800499a:	af00      	add	r7, sp, #0
//tReg0Ah reg0A;

    // Читаем регистр 0x0A
    rda5807_read(0x0A, (uint16_t *)&Buffs.Reg0A, 1);
 800499c:	2201      	movs	r2, #1
 800499e:	4905      	ldr	r1, [pc, #20]	; (80049b4 <rda5807_Get_SeekTuneReadyFlag+0x1c>)
 80049a0:	200a      	movs	r0, #10
 80049a2:	f7ff fd37 	bl	8004414 <rda5807_read>

    return Buffs.Reg0A.bSTC;
 80049a6:	4b04      	ldr	r3, [pc, #16]	; (80049b8 <rda5807_Get_SeekTuneReadyFlag+0x20>)
 80049a8:	7c5b      	ldrb	r3, [r3, #17]
 80049aa:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80049ae:	b2db      	uxtb	r3, r3
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	bd80      	pop	{r7, pc}
 80049b4:	20002cac 	.word	0x20002cac
 80049b8:	20002c9c 	.word	0x20002c9c

080049bc <rda5807_Get_StereoMonoFlag>:
//==============================================================================
//==============================================================================
bool rda5807_Get_StereoMonoFlag()
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	af00      	add	r7, sp, #0
//tReg0Ah reg0A;

    // Читаем регистр 0x0A
    rda5807_read(0x0A, (uint16_t *)&Buffs.Reg0A, 1);
 80049c0:	2201      	movs	r2, #1
 80049c2:	4908      	ldr	r1, [pc, #32]	; (80049e4 <rda5807_Get_StereoMonoFlag+0x28>)
 80049c4:	200a      	movs	r0, #10
 80049c6:	f7ff fd25 	bl	8004414 <rda5807_read>

    return Buffs.Reg0A.bST;     // Stereo Indicator (0 = Mono; 1 = Stereo)
 80049ca:	4b07      	ldr	r3, [pc, #28]	; (80049e8 <rda5807_Get_StereoMonoFlag+0x2c>)
 80049cc:	7c5b      	ldrb	r3, [r3, #17]
 80049ce:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80049d2:	b2db      	uxtb	r3, r3
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	bf14      	ite	ne
 80049d8:	2301      	movne	r3, #1
 80049da:	2300      	moveq	r3, #0
 80049dc:	b2db      	uxtb	r3, r3
}
 80049de:	4618      	mov	r0, r3
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	20002cac 	.word	0x20002cac
 80049e8:	20002c9c 	.word	0x20002c9c

080049ec <rda5807_Get_Channel>:
//==============================================================================
uint16_t rda5807_Get_Channel()
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	af00      	add	r7, sp, #0
//tReg0Ah reg0A;

    // Читаем регистр 0x0A
    rda5807_read(0x0A, (uint16_t *)&Buffs.Reg0A, 1);
 80049f0:	2201      	movs	r2, #1
 80049f2:	4905      	ldr	r1, [pc, #20]	; (8004a08 <rda5807_Get_Channel+0x1c>)
 80049f4:	200a      	movs	r0, #10
 80049f6:	f7ff fd0d 	bl	8004414 <rda5807_read>

    return Buffs.Reg0A.bREADCHAN;    // 0-9 Read Channel.
 80049fa:	4b04      	ldr	r3, [pc, #16]	; (8004a0c <rda5807_Get_Channel+0x20>)
 80049fc:	8a1b      	ldrh	r3, [r3, #16]
 80049fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a02:	b29b      	uxth	r3, r3
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	bd80      	pop	{r7, pc}
 8004a08:	20002cac 	.word	0x20002cac
 8004a0c:	20002c9c 	.word	0x20002c9c

08004a10 <rda5807_Set_Band>:
//==============================================================================
uint8_t rda5807_Set_Band(uint8_t band)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b084      	sub	sp, #16
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	4603      	mov	r3, r0
 8004a18:	71fb      	strb	r3, [r7, #7]
	if (band > 3) return 1;
 8004a1a:	79fb      	ldrb	r3, [r7, #7]
 8004a1c:	2b03      	cmp	r3, #3
 8004a1e:	d901      	bls.n	8004a24 <rda5807_Set_Band+0x14>
 8004a20:	2301      	movs	r3, #1
 8004a22:	e054      	b.n	8004ace <rda5807_Set_Band+0xbe>

    // Читаем регистр 3
    rda5807_read(3, (uint16_t *)&Buffs.Reg03, 1);
 8004a24:	2201      	movs	r2, #1
 8004a26:	492c      	ldr	r1, [pc, #176]	; (8004ad8 <rda5807_Set_Band+0xc8>)
 8004a28:	2003      	movs	r0, #3
 8004a2a:	f7ff fcf3 	bl	8004414 <rda5807_read>

    Buffs.Reg03.bBAND = band;
 8004a2e:	79fb      	ldrb	r3, [r7, #7]
 8004a30:	f003 0303 	and.w	r3, r3, #3
 8004a34:	b2d9      	uxtb	r1, r3
 8004a36:	4a29      	ldr	r2, [pc, #164]	; (8004adc <rda5807_Set_Band+0xcc>)
 8004a38:	7893      	ldrb	r3, [r2, #2]
 8004a3a:	f361 0383 	bfi	r3, r1, #2, #2
 8004a3e:	7093      	strb	r3, [r2, #2]

    rda5807_write(3, (uint16_t *)&Buffs.Reg03, 1);
 8004a40:	2201      	movs	r2, #1
 8004a42:	4925      	ldr	r1, [pc, #148]	; (8004ad8 <rda5807_Set_Band+0xc8>)
 8004a44:	2003      	movs	r0, #3
 8004a46:	f7ff fd19 	bl	800447c <rda5807_write>

    uint16_t l = 870, r = 1080;
 8004a4a:	f240 3366 	movw	r3, #870	; 0x366
 8004a4e:	81fb      	strh	r3, [r7, #14]
 8004a50:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8004a54:	81bb      	strh	r3, [r7, #12]

    switch (Buffs.Reg03.bBAND) {    // Диапазон 87–108 MHz
 8004a56:	4b21      	ldr	r3, [pc, #132]	; (8004adc <rda5807_Set_Band+0xcc>)
 8004a58:	789b      	ldrb	r3, [r3, #2]
 8004a5a:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8004a5e:	b2db      	uxtb	r3, r3
 8004a60:	2b03      	cmp	r3, #3
 8004a62:	d011      	beq.n	8004a88 <rda5807_Set_Band+0x78>
 8004a64:	2b03      	cmp	r3, #3
 8004a66:	dc16      	bgt.n	8004a96 <rda5807_Set_Band+0x86>
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d002      	beq.n	8004a72 <rda5807_Set_Band+0x62>
 8004a6c:	2b02      	cmp	r3, #2
 8004a6e:	d007      	beq.n	8004a80 <rda5807_Set_Band+0x70>
 8004a70:	e011      	b.n	8004a96 <rda5807_Set_Band+0x86>
    	//case 0:// 00 = 87–108 MHz (US/Europe)
    	//break;
    	case 1:// 01 = 76–91 MHz (Japan)
    		l = 760;
 8004a72:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 8004a76:	81fb      	strh	r3, [r7, #14]
    		r = 910;
 8004a78:	f240 338e 	movw	r3, #910	; 0x38e
 8004a7c:	81bb      	strh	r3, [r7, #12]
    	break;
 8004a7e:	e00a      	b.n	8004a96 <rda5807_Set_Band+0x86>
    	case 2:// 10 = 76–108 MHz (world wide)
    		l = 760;
 8004a80:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 8004a84:	81fb      	strh	r3, [r7, #14]
    	break;
 8004a86:	e006      	b.n	8004a96 <rda5807_Set_Band+0x86>
    	case 3:// 11 = 65 –76 MHz (East Europe) or 50-65MHz
    		l = 650;
 8004a88:	f240 238a 	movw	r3, #650	; 0x28a
 8004a8c:	81fb      	strh	r3, [r7, #14]
    		r = 760;
 8004a8e:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 8004a92:	81bb      	strh	r3, [r7, #12]
    	break;
 8004a94:	bf00      	nop
    }
    lBand = ((float)l) / 10;
 8004a96:	89fb      	ldrh	r3, [r7, #14]
 8004a98:	ee07 3a90 	vmov	s15, r3
 8004a9c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004aa0:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8004aa4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004aa8:	4b0d      	ldr	r3, [pc, #52]	; (8004ae0 <rda5807_Set_Band+0xd0>)
 8004aaa:	edc3 7a00 	vstr	s15, [r3]
    rBand = ((float)r) / 10;
 8004aae:	89bb      	ldrh	r3, [r7, #12]
 8004ab0:	ee07 3a90 	vmov	s15, r3
 8004ab4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004ab8:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8004abc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004ac0:	4b08      	ldr	r3, [pc, #32]	; (8004ae4 <rda5807_Set_Band+0xd4>)
 8004ac2:	edc3 7a00 	vstr	s15, [r3]

    HAL_Delay(50);
 8004ac6:	2032      	movs	r0, #50	; 0x32
 8004ac8:	f001 fa74 	bl	8005fb4 <HAL_Delay>

    return 0;
 8004acc:	2300      	movs	r3, #0
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3710      	adds	r7, #16
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}
 8004ad6:	bf00      	nop
 8004ad8:	20002c9e 	.word	0x20002c9e
 8004adc:	20002c9c 	.word	0x20002c9c
 8004ae0:	20002c88 	.word	0x20002c88
 8004ae4:	20002c8c 	.word	0x20002c8c

08004ae8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b083      	sub	sp, #12
 8004aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004aee:	4b0f      	ldr	r3, [pc, #60]	; (8004b2c <HAL_MspInit+0x44>)
 8004af0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004af2:	4a0e      	ldr	r2, [pc, #56]	; (8004b2c <HAL_MspInit+0x44>)
 8004af4:	f043 0301 	orr.w	r3, r3, #1
 8004af8:	6613      	str	r3, [r2, #96]	; 0x60
 8004afa:	4b0c      	ldr	r3, [pc, #48]	; (8004b2c <HAL_MspInit+0x44>)
 8004afc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004afe:	f003 0301 	and.w	r3, r3, #1
 8004b02:	607b      	str	r3, [r7, #4]
 8004b04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004b06:	4b09      	ldr	r3, [pc, #36]	; (8004b2c <HAL_MspInit+0x44>)
 8004b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b0a:	4a08      	ldr	r2, [pc, #32]	; (8004b2c <HAL_MspInit+0x44>)
 8004b0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b10:	6593      	str	r3, [r2, #88]	; 0x58
 8004b12:	4b06      	ldr	r3, [pc, #24]	; (8004b2c <HAL_MspInit+0x44>)
 8004b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b1a:	603b      	str	r3, [r7, #0]
 8004b1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004b1e:	bf00      	nop
 8004b20:	370c      	adds	r7, #12
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr
 8004b2a:	bf00      	nop
 8004b2c:	40021000 	.word	0x40021000

08004b30 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b0ac      	sub	sp, #176	; 0xb0
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b38:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	601a      	str	r2, [r3, #0]
 8004b40:	605a      	str	r2, [r3, #4]
 8004b42:	609a      	str	r2, [r3, #8]
 8004b44:	60da      	str	r2, [r3, #12]
 8004b46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004b48:	f107 0314 	add.w	r3, r7, #20
 8004b4c:	2288      	movs	r2, #136	; 0x88
 8004b4e:	2100      	movs	r1, #0
 8004b50:	4618      	mov	r0, r3
 8004b52:	f009 f8e1 	bl	800dd18 <memset>
  if(hi2c->Instance==I2C1)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a57      	ldr	r2, [pc, #348]	; (8004cb8 <HAL_I2C_MspInit+0x188>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	f040 80a7 	bne.w	8004cb0 <HAL_I2C_MspInit+0x180>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004b62:	2340      	movs	r3, #64	; 0x40
 8004b64:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004b66:	2300      	movs	r3, #0
 8004b68:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004b6a:	f107 0314 	add.w	r3, r7, #20
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f004 faf6 	bl	8009160 <HAL_RCCEx_PeriphCLKConfig>
 8004b74:	4603      	mov	r3, r0
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d001      	beq.n	8004b7e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8004b7a:	f7ff fb63 	bl	8004244 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b7e:	4b4f      	ldr	r3, [pc, #316]	; (8004cbc <HAL_I2C_MspInit+0x18c>)
 8004b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b82:	4a4e      	ldr	r2, [pc, #312]	; (8004cbc <HAL_I2C_MspInit+0x18c>)
 8004b84:	f043 0302 	orr.w	r3, r3, #2
 8004b88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004b8a:	4b4c      	ldr	r3, [pc, #304]	; (8004cbc <HAL_I2C_MspInit+0x18c>)
 8004b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b8e:	f003 0302 	and.w	r3, r3, #2
 8004b92:	613b      	str	r3, [r7, #16]
 8004b94:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004b96:	23c0      	movs	r3, #192	; 0xc0
 8004b98:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004b9c:	2312      	movs	r3, #18
 8004b9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004ba8:	2302      	movs	r3, #2
 8004baa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004bae:	2304      	movs	r3, #4
 8004bb0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004bb4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004bb8:	4619      	mov	r1, r3
 8004bba:	4841      	ldr	r0, [pc, #260]	; (8004cc0 <HAL_I2C_MspInit+0x190>)
 8004bbc:	f001 fde6 	bl	800678c <HAL_GPIO_Init>

    HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_PB6);
 8004bc0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8004bc4:	f003 fc48 	bl	8008458 <HAL_I2CEx_EnableFastModePlus>

    HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_PB7);
 8004bc8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8004bcc:	f003 fc44 	bl	8008458 <HAL_I2CEx_EnableFastModePlus>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004bd0:	4b3a      	ldr	r3, [pc, #232]	; (8004cbc <HAL_I2C_MspInit+0x18c>)
 8004bd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bd4:	4a39      	ldr	r2, [pc, #228]	; (8004cbc <HAL_I2C_MspInit+0x18c>)
 8004bd6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004bda:	6593      	str	r3, [r2, #88]	; 0x58
 8004bdc:	4b37      	ldr	r3, [pc, #220]	; (8004cbc <HAL_I2C_MspInit+0x18c>)
 8004bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004be0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004be4:	60fb      	str	r3, [r7, #12]
 8004be6:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA2_Channel6;
 8004be8:	4b36      	ldr	r3, [pc, #216]	; (8004cc4 <HAL_I2C_MspInit+0x194>)
 8004bea:	4a37      	ldr	r2, [pc, #220]	; (8004cc8 <HAL_I2C_MspInit+0x198>)
 8004bec:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_5;
 8004bee:	4b35      	ldr	r3, [pc, #212]	; (8004cc4 <HAL_I2C_MspInit+0x194>)
 8004bf0:	2205      	movs	r2, #5
 8004bf2:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004bf4:	4b33      	ldr	r3, [pc, #204]	; (8004cc4 <HAL_I2C_MspInit+0x194>)
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004bfa:	4b32      	ldr	r3, [pc, #200]	; (8004cc4 <HAL_I2C_MspInit+0x194>)
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004c00:	4b30      	ldr	r3, [pc, #192]	; (8004cc4 <HAL_I2C_MspInit+0x194>)
 8004c02:	2280      	movs	r2, #128	; 0x80
 8004c04:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004c06:	4b2f      	ldr	r3, [pc, #188]	; (8004cc4 <HAL_I2C_MspInit+0x194>)
 8004c08:	2200      	movs	r2, #0
 8004c0a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004c0c:	4b2d      	ldr	r3, [pc, #180]	; (8004cc4 <HAL_I2C_MspInit+0x194>)
 8004c0e:	2200      	movs	r2, #0
 8004c10:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8004c12:	4b2c      	ldr	r3, [pc, #176]	; (8004cc4 <HAL_I2C_MspInit+0x194>)
 8004c14:	2200      	movs	r2, #0
 8004c16:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004c18:	4b2a      	ldr	r3, [pc, #168]	; (8004cc4 <HAL_I2C_MspInit+0x194>)
 8004c1a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004c1e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8004c20:	4828      	ldr	r0, [pc, #160]	; (8004cc4 <HAL_I2C_MspInit+0x194>)
 8004c22:	f001 fb2f 	bl	8006284 <HAL_DMA_Init>
 8004c26:	4603      	mov	r3, r0
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d001      	beq.n	8004c30 <HAL_I2C_MspInit+0x100>
    {
      Error_Handler();
 8004c2c:	f7ff fb0a 	bl	8004244 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	4a24      	ldr	r2, [pc, #144]	; (8004cc4 <HAL_I2C_MspInit+0x194>)
 8004c34:	63da      	str	r2, [r3, #60]	; 0x3c
 8004c36:	4a23      	ldr	r2, [pc, #140]	; (8004cc4 <HAL_I2C_MspInit+0x194>)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8004c3c:	4b23      	ldr	r3, [pc, #140]	; (8004ccc <HAL_I2C_MspInit+0x19c>)
 8004c3e:	4a24      	ldr	r2, [pc, #144]	; (8004cd0 <HAL_I2C_MspInit+0x1a0>)
 8004c40:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_3;
 8004c42:	4b22      	ldr	r3, [pc, #136]	; (8004ccc <HAL_I2C_MspInit+0x19c>)
 8004c44:	2203      	movs	r2, #3
 8004c46:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004c48:	4b20      	ldr	r3, [pc, #128]	; (8004ccc <HAL_I2C_MspInit+0x19c>)
 8004c4a:	2210      	movs	r2, #16
 8004c4c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004c4e:	4b1f      	ldr	r3, [pc, #124]	; (8004ccc <HAL_I2C_MspInit+0x19c>)
 8004c50:	2200      	movs	r2, #0
 8004c52:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004c54:	4b1d      	ldr	r3, [pc, #116]	; (8004ccc <HAL_I2C_MspInit+0x19c>)
 8004c56:	2280      	movs	r2, #128	; 0x80
 8004c58:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004c5a:	4b1c      	ldr	r3, [pc, #112]	; (8004ccc <HAL_I2C_MspInit+0x19c>)
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004c60:	4b1a      	ldr	r3, [pc, #104]	; (8004ccc <HAL_I2C_MspInit+0x19c>)
 8004c62:	2200      	movs	r2, #0
 8004c64:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8004c66:	4b19      	ldr	r3, [pc, #100]	; (8004ccc <HAL_I2C_MspInit+0x19c>)
 8004c68:	2200      	movs	r2, #0
 8004c6a:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004c6c:	4b17      	ldr	r3, [pc, #92]	; (8004ccc <HAL_I2C_MspInit+0x19c>)
 8004c6e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004c72:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8004c74:	4815      	ldr	r0, [pc, #84]	; (8004ccc <HAL_I2C_MspInit+0x19c>)
 8004c76:	f001 fb05 	bl	8006284 <HAL_DMA_Init>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d001      	beq.n	8004c84 <HAL_I2C_MspInit+0x154>
    {
      Error_Handler();
 8004c80:	f7ff fae0 	bl	8004244 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	4a11      	ldr	r2, [pc, #68]	; (8004ccc <HAL_I2C_MspInit+0x19c>)
 8004c88:	639a      	str	r2, [r3, #56]	; 0x38
 8004c8a:	4a10      	ldr	r2, [pc, #64]	; (8004ccc <HAL_I2C_MspInit+0x19c>)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8004c90:	2200      	movs	r2, #0
 8004c92:	2100      	movs	r1, #0
 8004c94:	201f      	movs	r0, #31
 8004c96:	f001 fab0 	bl	80061fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8004c9a:	201f      	movs	r0, #31
 8004c9c:	f001 fac9 	bl	8006232 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	2100      	movs	r1, #0
 8004ca4:	2020      	movs	r0, #32
 8004ca6:	f001 faa8 	bl	80061fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8004caa:	2020      	movs	r0, #32
 8004cac:	f001 fac1 	bl	8006232 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004cb0:	bf00      	nop
 8004cb2:	37b0      	adds	r7, #176	; 0xb0
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}
 8004cb8:	40005400 	.word	0x40005400
 8004cbc:	40021000 	.word	0x40021000
 8004cc0:	48000400 	.word	0x48000400
 8004cc4:	20000864 	.word	0x20000864
 8004cc8:	4002046c 	.word	0x4002046c
 8004ccc:	200008ac 	.word	0x200008ac
 8004cd0:	4002006c 	.word	0x4002006c

08004cd4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b0a4      	sub	sp, #144	; 0x90
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004cdc:	f107 0308 	add.w	r3, r7, #8
 8004ce0:	2288      	movs	r2, #136	; 0x88
 8004ce2:	2100      	movs	r1, #0
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f009 f817 	bl	800dd18 <memset>
  if(hrtc->Instance==RTC)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a10      	ldr	r2, [pc, #64]	; (8004d30 <HAL_RTC_MspInit+0x5c>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d118      	bne.n	8004d26 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004cf4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004cf8:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8004cfa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004cfe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004d02:	f107 0308 	add.w	r3, r7, #8
 8004d06:	4618      	mov	r0, r3
 8004d08:	f004 fa2a 	bl	8009160 <HAL_RCCEx_PeriphCLKConfig>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d001      	beq.n	8004d16 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8004d12:	f7ff fa97 	bl	8004244 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004d16:	4b07      	ldr	r3, [pc, #28]	; (8004d34 <HAL_RTC_MspInit+0x60>)
 8004d18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d1c:	4a05      	ldr	r2, [pc, #20]	; (8004d34 <HAL_RTC_MspInit+0x60>)
 8004d1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8004d26:	bf00      	nop
 8004d28:	3790      	adds	r7, #144	; 0x90
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}
 8004d2e:	bf00      	nop
 8004d30:	40002800 	.word	0x40002800
 8004d34:	40021000 	.word	0x40021000

08004d38 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b08c      	sub	sp, #48	; 0x30
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d40:	f107 031c 	add.w	r3, r7, #28
 8004d44:	2200      	movs	r2, #0
 8004d46:	601a      	str	r2, [r3, #0]
 8004d48:	605a      	str	r2, [r3, #4]
 8004d4a:	609a      	str	r2, [r3, #8]
 8004d4c:	60da      	str	r2, [r3, #12]
 8004d4e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a76      	ldr	r2, [pc, #472]	; (8004f30 <HAL_SPI_MspInit+0x1f8>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d15b      	bne.n	8004e12 <HAL_SPI_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004d5a:	4b76      	ldr	r3, [pc, #472]	; (8004f34 <HAL_SPI_MspInit+0x1fc>)
 8004d5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d5e:	4a75      	ldr	r2, [pc, #468]	; (8004f34 <HAL_SPI_MspInit+0x1fc>)
 8004d60:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004d64:	6613      	str	r3, [r2, #96]	; 0x60
 8004d66:	4b73      	ldr	r3, [pc, #460]	; (8004f34 <HAL_SPI_MspInit+0x1fc>)
 8004d68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d6e:	61bb      	str	r3, [r7, #24]
 8004d70:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d72:	4b70      	ldr	r3, [pc, #448]	; (8004f34 <HAL_SPI_MspInit+0x1fc>)
 8004d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d76:	4a6f      	ldr	r2, [pc, #444]	; (8004f34 <HAL_SPI_MspInit+0x1fc>)
 8004d78:	f043 0301 	orr.w	r3, r3, #1
 8004d7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004d7e:	4b6d      	ldr	r3, [pc, #436]	; (8004f34 <HAL_SPI_MspInit+0x1fc>)
 8004d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d82:	f003 0301 	and.w	r3, r3, #1
 8004d86:	617b      	str	r3, [r7, #20]
 8004d88:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8004d8a:	23a0      	movs	r3, #160	; 0xa0
 8004d8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d8e:	2302      	movs	r3, #2
 8004d90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d92:	2300      	movs	r3, #0
 8004d94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d96:	2303      	movs	r3, #3
 8004d98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004d9a:	2305      	movs	r3, #5
 8004d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d9e:	f107 031c 	add.w	r3, r7, #28
 8004da2:	4619      	mov	r1, r3
 8004da4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004da8:	f001 fcf0 	bl	800678c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8004dac:	4b62      	ldr	r3, [pc, #392]	; (8004f38 <HAL_SPI_MspInit+0x200>)
 8004dae:	4a63      	ldr	r2, [pc, #396]	; (8004f3c <HAL_SPI_MspInit+0x204>)
 8004db0:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 8004db2:	4b61      	ldr	r3, [pc, #388]	; (8004f38 <HAL_SPI_MspInit+0x200>)
 8004db4:	2201      	movs	r2, #1
 8004db6:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004db8:	4b5f      	ldr	r3, [pc, #380]	; (8004f38 <HAL_SPI_MspInit+0x200>)
 8004dba:	2210      	movs	r2, #16
 8004dbc:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004dbe:	4b5e      	ldr	r3, [pc, #376]	; (8004f38 <HAL_SPI_MspInit+0x200>)
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004dc4:	4b5c      	ldr	r3, [pc, #368]	; (8004f38 <HAL_SPI_MspInit+0x200>)
 8004dc6:	2280      	movs	r2, #128	; 0x80
 8004dc8:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004dca:	4b5b      	ldr	r3, [pc, #364]	; (8004f38 <HAL_SPI_MspInit+0x200>)
 8004dcc:	2200      	movs	r2, #0
 8004dce:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004dd0:	4b59      	ldr	r3, [pc, #356]	; (8004f38 <HAL_SPI_MspInit+0x200>)
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8004dd6:	4b58      	ldr	r3, [pc, #352]	; (8004f38 <HAL_SPI_MspInit+0x200>)
 8004dd8:	2200      	movs	r2, #0
 8004dda:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8004ddc:	4b56      	ldr	r3, [pc, #344]	; (8004f38 <HAL_SPI_MspInit+0x200>)
 8004dde:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004de2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8004de4:	4854      	ldr	r0, [pc, #336]	; (8004f38 <HAL_SPI_MspInit+0x200>)
 8004de6:	f001 fa4d 	bl	8006284 <HAL_DMA_Init>
 8004dea:	4603      	mov	r3, r0
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d001      	beq.n	8004df4 <HAL_SPI_MspInit+0xbc>
    {
      Error_Handler();
 8004df0:	f7ff fa28 	bl	8004244 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4a50      	ldr	r2, [pc, #320]	; (8004f38 <HAL_SPI_MspInit+0x200>)
 8004df8:	655a      	str	r2, [r3, #84]	; 0x54
 8004dfa:	4a4f      	ldr	r2, [pc, #316]	; (8004f38 <HAL_SPI_MspInit+0x200>)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8004e00:	2200      	movs	r2, #0
 8004e02:	2100      	movs	r1, #0
 8004e04:	2023      	movs	r0, #35	; 0x23
 8004e06:	f001 f9f8 	bl	80061fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8004e0a:	2023      	movs	r0, #35	; 0x23
 8004e0c:	f001 fa11 	bl	8006232 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004e10:	e08a      	b.n	8004f28 <HAL_SPI_MspInit+0x1f0>
  else if(hspi->Instance==SPI2)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a4a      	ldr	r2, [pc, #296]	; (8004f40 <HAL_SPI_MspInit+0x208>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	f040 8085 	bne.w	8004f28 <HAL_SPI_MspInit+0x1f0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004e1e:	4b45      	ldr	r3, [pc, #276]	; (8004f34 <HAL_SPI_MspInit+0x1fc>)
 8004e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e22:	4a44      	ldr	r2, [pc, #272]	; (8004f34 <HAL_SPI_MspInit+0x1fc>)
 8004e24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e28:	6593      	str	r3, [r2, #88]	; 0x58
 8004e2a:	4b42      	ldr	r3, [pc, #264]	; (8004f34 <HAL_SPI_MspInit+0x1fc>)
 8004e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e32:	613b      	str	r3, [r7, #16]
 8004e34:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e36:	4b3f      	ldr	r3, [pc, #252]	; (8004f34 <HAL_SPI_MspInit+0x1fc>)
 8004e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e3a:	4a3e      	ldr	r2, [pc, #248]	; (8004f34 <HAL_SPI_MspInit+0x1fc>)
 8004e3c:	f043 0302 	orr.w	r3, r3, #2
 8004e40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004e42:	4b3c      	ldr	r3, [pc, #240]	; (8004f34 <HAL_SPI_MspInit+0x1fc>)
 8004e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e46:	f003 0302 	and.w	r3, r3, #2
 8004e4a:	60fb      	str	r3, [r7, #12]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8004e4e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8004e52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e54:	2302      	movs	r3, #2
 8004e56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e5c:	2303      	movs	r3, #3
 8004e5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004e60:	2305      	movs	r3, #5
 8004e62:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e64:	f107 031c 	add.w	r3, r7, #28
 8004e68:	4619      	mov	r1, r3
 8004e6a:	4836      	ldr	r0, [pc, #216]	; (8004f44 <HAL_SPI_MspInit+0x20c>)
 8004e6c:	f001 fc8e 	bl	800678c <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Channel4;
 8004e70:	4b35      	ldr	r3, [pc, #212]	; (8004f48 <HAL_SPI_MspInit+0x210>)
 8004e72:	4a36      	ldr	r2, [pc, #216]	; (8004f4c <HAL_SPI_MspInit+0x214>)
 8004e74:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_1;
 8004e76:	4b34      	ldr	r3, [pc, #208]	; (8004f48 <HAL_SPI_MspInit+0x210>)
 8004e78:	2201      	movs	r2, #1
 8004e7a:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004e7c:	4b32      	ldr	r3, [pc, #200]	; (8004f48 <HAL_SPI_MspInit+0x210>)
 8004e7e:	2200      	movs	r2, #0
 8004e80:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004e82:	4b31      	ldr	r3, [pc, #196]	; (8004f48 <HAL_SPI_MspInit+0x210>)
 8004e84:	2200      	movs	r2, #0
 8004e86:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004e88:	4b2f      	ldr	r3, [pc, #188]	; (8004f48 <HAL_SPI_MspInit+0x210>)
 8004e8a:	2280      	movs	r2, #128	; 0x80
 8004e8c:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004e8e:	4b2e      	ldr	r3, [pc, #184]	; (8004f48 <HAL_SPI_MspInit+0x210>)
 8004e90:	2200      	movs	r2, #0
 8004e92:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004e94:	4b2c      	ldr	r3, [pc, #176]	; (8004f48 <HAL_SPI_MspInit+0x210>)
 8004e96:	2200      	movs	r2, #0
 8004e98:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8004e9a:	4b2b      	ldr	r3, [pc, #172]	; (8004f48 <HAL_SPI_MspInit+0x210>)
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8004ea0:	4b29      	ldr	r3, [pc, #164]	; (8004f48 <HAL_SPI_MspInit+0x210>)
 8004ea2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004ea6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8004ea8:	4827      	ldr	r0, [pc, #156]	; (8004f48 <HAL_SPI_MspInit+0x210>)
 8004eaa:	f001 f9eb 	bl	8006284 <HAL_DMA_Init>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d001      	beq.n	8004eb8 <HAL_SPI_MspInit+0x180>
      Error_Handler();
 8004eb4:	f7ff f9c6 	bl	8004244 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	4a23      	ldr	r2, [pc, #140]	; (8004f48 <HAL_SPI_MspInit+0x210>)
 8004ebc:	659a      	str	r2, [r3, #88]	; 0x58
 8004ebe:	4a22      	ldr	r2, [pc, #136]	; (8004f48 <HAL_SPI_MspInit+0x210>)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8004ec4:	4b22      	ldr	r3, [pc, #136]	; (8004f50 <HAL_SPI_MspInit+0x218>)
 8004ec6:	4a23      	ldr	r2, [pc, #140]	; (8004f54 <HAL_SPI_MspInit+0x21c>)
 8004ec8:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_1;
 8004eca:	4b21      	ldr	r3, [pc, #132]	; (8004f50 <HAL_SPI_MspInit+0x218>)
 8004ecc:	2201      	movs	r2, #1
 8004ece:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004ed0:	4b1f      	ldr	r3, [pc, #124]	; (8004f50 <HAL_SPI_MspInit+0x218>)
 8004ed2:	2210      	movs	r2, #16
 8004ed4:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004ed6:	4b1e      	ldr	r3, [pc, #120]	; (8004f50 <HAL_SPI_MspInit+0x218>)
 8004ed8:	2200      	movs	r2, #0
 8004eda:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004edc:	4b1c      	ldr	r3, [pc, #112]	; (8004f50 <HAL_SPI_MspInit+0x218>)
 8004ede:	2280      	movs	r2, #128	; 0x80
 8004ee0:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004ee2:	4b1b      	ldr	r3, [pc, #108]	; (8004f50 <HAL_SPI_MspInit+0x218>)
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004ee8:	4b19      	ldr	r3, [pc, #100]	; (8004f50 <HAL_SPI_MspInit+0x218>)
 8004eea:	2200      	movs	r2, #0
 8004eec:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8004eee:	4b18      	ldr	r3, [pc, #96]	; (8004f50 <HAL_SPI_MspInit+0x218>)
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8004ef4:	4b16      	ldr	r3, [pc, #88]	; (8004f50 <HAL_SPI_MspInit+0x218>)
 8004ef6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004efa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8004efc:	4814      	ldr	r0, [pc, #80]	; (8004f50 <HAL_SPI_MspInit+0x218>)
 8004efe:	f001 f9c1 	bl	8006284 <HAL_DMA_Init>
 8004f02:	4603      	mov	r3, r0
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d001      	beq.n	8004f0c <HAL_SPI_MspInit+0x1d4>
      Error_Handler();
 8004f08:	f7ff f99c 	bl	8004244 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	4a10      	ldr	r2, [pc, #64]	; (8004f50 <HAL_SPI_MspInit+0x218>)
 8004f10:	655a      	str	r2, [r3, #84]	; 0x54
 8004f12:	4a0f      	ldr	r2, [pc, #60]	; (8004f50 <HAL_SPI_MspInit+0x218>)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8004f18:	2200      	movs	r2, #0
 8004f1a:	2100      	movs	r1, #0
 8004f1c:	2024      	movs	r0, #36	; 0x24
 8004f1e:	f001 f96c 	bl	80061fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8004f22:	2024      	movs	r0, #36	; 0x24
 8004f24:	f001 f985 	bl	8006232 <HAL_NVIC_EnableIRQ>
}
 8004f28:	bf00      	nop
 8004f2a:	3730      	adds	r7, #48	; 0x30
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}
 8004f30:	40013000 	.word	0x40013000
 8004f34:	40021000 	.word	0x40021000
 8004f38:	200009e0 	.word	0x200009e0
 8004f3c:	40020030 	.word	0x40020030
 8004f40:	40003800 	.word	0x40003800
 8004f44:	48000400 	.word	0x48000400
 8004f48:	20000a28 	.word	0x20000a28
 8004f4c:	40020044 	.word	0x40020044
 8004f50:	20000a70 	.word	0x20000a70
 8004f54:	40020058 	.word	0x40020058

08004f58 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b084      	sub	sp, #16
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a0d      	ldr	r2, [pc, #52]	; (8004f9c <HAL_TIM_Base_MspInit+0x44>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d113      	bne.n	8004f92 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004f6a:	4b0d      	ldr	r3, [pc, #52]	; (8004fa0 <HAL_TIM_Base_MspInit+0x48>)
 8004f6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f6e:	4a0c      	ldr	r2, [pc, #48]	; (8004fa0 <HAL_TIM_Base_MspInit+0x48>)
 8004f70:	f043 0304 	orr.w	r3, r3, #4
 8004f74:	6593      	str	r3, [r2, #88]	; 0x58
 8004f76:	4b0a      	ldr	r3, [pc, #40]	; (8004fa0 <HAL_TIM_Base_MspInit+0x48>)
 8004f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f7a:	f003 0304 	and.w	r3, r3, #4
 8004f7e:	60fb      	str	r3, [r7, #12]
 8004f80:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 2, 0);
 8004f82:	2200      	movs	r2, #0
 8004f84:	2102      	movs	r1, #2
 8004f86:	201e      	movs	r0, #30
 8004f88:	f001 f937 	bl	80061fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004f8c:	201e      	movs	r0, #30
 8004f8e:	f001 f950 	bl	8006232 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8004f92:	bf00      	nop
 8004f94:	3710      	adds	r7, #16
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}
 8004f9a:	bf00      	nop
 8004f9c:	40000800 	.word	0x40000800
 8004fa0:	40021000 	.word	0x40021000

08004fa4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b0ac      	sub	sp, #176	; 0xb0
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fac:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	601a      	str	r2, [r3, #0]
 8004fb4:	605a      	str	r2, [r3, #4]
 8004fb6:	609a      	str	r2, [r3, #8]
 8004fb8:	60da      	str	r2, [r3, #12]
 8004fba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004fbc:	f107 0314 	add.w	r3, r7, #20
 8004fc0:	2288      	movs	r2, #136	; 0x88
 8004fc2:	2100      	movs	r1, #0
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f008 fea7 	bl	800dd18 <memset>
  if(huart->Instance==USART2)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a3a      	ldr	r2, [pc, #232]	; (80050b8 <HAL_UART_MspInit+0x114>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d16d      	bne.n	80050b0 <HAL_UART_MspInit+0x10c>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004fd4:	2302      	movs	r3, #2
 8004fd6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004fdc:	f107 0314 	add.w	r3, r7, #20
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f004 f8bd 	bl	8009160 <HAL_RCCEx_PeriphCLKConfig>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d001      	beq.n	8004ff0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8004fec:	f7ff f92a 	bl	8004244 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004ff0:	4b32      	ldr	r3, [pc, #200]	; (80050bc <HAL_UART_MspInit+0x118>)
 8004ff2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ff4:	4a31      	ldr	r2, [pc, #196]	; (80050bc <HAL_UART_MspInit+0x118>)
 8004ff6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ffa:	6593      	str	r3, [r2, #88]	; 0x58
 8004ffc:	4b2f      	ldr	r3, [pc, #188]	; (80050bc <HAL_UART_MspInit+0x118>)
 8004ffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005000:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005004:	613b      	str	r3, [r7, #16]
 8005006:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005008:	4b2c      	ldr	r3, [pc, #176]	; (80050bc <HAL_UART_MspInit+0x118>)
 800500a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800500c:	4a2b      	ldr	r2, [pc, #172]	; (80050bc <HAL_UART_MspInit+0x118>)
 800500e:	f043 0301 	orr.w	r3, r3, #1
 8005012:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005014:	4b29      	ldr	r3, [pc, #164]	; (80050bc <HAL_UART_MspInit+0x118>)
 8005016:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005018:	f003 0301 	and.w	r3, r3, #1
 800501c:	60fb      	str	r3, [r7, #12]
 800501e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = LOG_TX_Pin|LOG_RX_Pin;
 8005020:	230c      	movs	r3, #12
 8005022:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005026:	2302      	movs	r3, #2
 8005028:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800502c:	2300      	movs	r3, #0
 800502e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005032:	2303      	movs	r3, #3
 8005034:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005038:	2307      	movs	r3, #7
 800503a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800503e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005042:	4619      	mov	r1, r3
 8005044:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005048:	f001 fba0 	bl	800678c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 800504c:	4b1c      	ldr	r3, [pc, #112]	; (80050c0 <HAL_UART_MspInit+0x11c>)
 800504e:	4a1d      	ldr	r2, [pc, #116]	; (80050c4 <HAL_UART_MspInit+0x120>)
 8005050:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8005052:	4b1b      	ldr	r3, [pc, #108]	; (80050c0 <HAL_UART_MspInit+0x11c>)
 8005054:	2202      	movs	r2, #2
 8005056:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005058:	4b19      	ldr	r3, [pc, #100]	; (80050c0 <HAL_UART_MspInit+0x11c>)
 800505a:	2210      	movs	r2, #16
 800505c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800505e:	4b18      	ldr	r3, [pc, #96]	; (80050c0 <HAL_UART_MspInit+0x11c>)
 8005060:	2200      	movs	r2, #0
 8005062:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005064:	4b16      	ldr	r3, [pc, #88]	; (80050c0 <HAL_UART_MspInit+0x11c>)
 8005066:	2280      	movs	r2, #128	; 0x80
 8005068:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800506a:	4b15      	ldr	r3, [pc, #84]	; (80050c0 <HAL_UART_MspInit+0x11c>)
 800506c:	2200      	movs	r2, #0
 800506e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005070:	4b13      	ldr	r3, [pc, #76]	; (80050c0 <HAL_UART_MspInit+0x11c>)
 8005072:	2200      	movs	r2, #0
 8005074:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8005076:	4b12      	ldr	r3, [pc, #72]	; (80050c0 <HAL_UART_MspInit+0x11c>)
 8005078:	2200      	movs	r2, #0
 800507a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800507c:	4b10      	ldr	r3, [pc, #64]	; (80050c0 <HAL_UART_MspInit+0x11c>)
 800507e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005082:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8005084:	480e      	ldr	r0, [pc, #56]	; (80050c0 <HAL_UART_MspInit+0x11c>)
 8005086:	f001 f8fd 	bl	8006284 <HAL_DMA_Init>
 800508a:	4603      	mov	r3, r0
 800508c:	2b00      	cmp	r3, #0
 800508e:	d001      	beq.n	8005094 <HAL_UART_MspInit+0xf0>
    {
      Error_Handler();
 8005090:	f7ff f8d8 	bl	8004244 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	4a0a      	ldr	r2, [pc, #40]	; (80050c0 <HAL_UART_MspInit+0x11c>)
 8005098:	66da      	str	r2, [r3, #108]	; 0x6c
 800509a:	4a09      	ldr	r2, [pc, #36]	; (80050c0 <HAL_UART_MspInit+0x11c>)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 80050a0:	2200      	movs	r2, #0
 80050a2:	2101      	movs	r1, #1
 80050a4:	2026      	movs	r0, #38	; 0x26
 80050a6:	f001 f8a8 	bl	80061fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80050aa:	2026      	movs	r0, #38	; 0x26
 80050ac:	f001 f8c1 	bl	8006232 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80050b0:	bf00      	nop
 80050b2:	37b0      	adds	r7, #176	; 0xb0
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}
 80050b8:	40004400 	.word	0x40004400
 80050bc:	40021000 	.word	0x40021000
 80050c0:	20000b88 	.word	0x20000b88
 80050c4:	40020080 	.word	0x40020080

080050c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80050c8:	b480      	push	{r7}
 80050ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80050cc:	e7fe      	b.n	80050cc <NMI_Handler+0x4>

080050ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80050ce:	b480      	push	{r7}
 80050d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80050d2:	e7fe      	b.n	80050d2 <HardFault_Handler+0x4>

080050d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80050d4:	b480      	push	{r7}
 80050d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80050d8:	e7fe      	b.n	80050d8 <MemManage_Handler+0x4>

080050da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80050da:	b480      	push	{r7}
 80050dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80050de:	e7fe      	b.n	80050de <BusFault_Handler+0x4>

080050e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80050e0:	b480      	push	{r7}
 80050e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80050e4:	e7fe      	b.n	80050e4 <UsageFault_Handler+0x4>

080050e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80050e6:	b480      	push	{r7}
 80050e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80050ea:	bf00      	nop
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr

080050f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80050f4:	b480      	push	{r7}
 80050f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80050f8:	bf00      	nop
 80050fa:	46bd      	mov	sp, r7
 80050fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005100:	4770      	bx	lr

08005102 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005102:	b480      	push	{r7}
 8005104:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005106:	bf00      	nop
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr

08005110 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005114:	f000 ff2e 	bl	8005f74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005118:	bf00      	nop
 800511a:	bd80      	pop	{r7, pc}

0800511c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY0_Pin);
 8005120:	2002      	movs	r0, #2
 8005122:	f001 fd27 	bl	8006b74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8005126:	bf00      	nop
 8005128:	bd80      	pop	{r7, pc}

0800512a <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800512a:	b580      	push	{r7, lr}
 800512c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY1_Pin);
 800512e:	2004      	movs	r0, #4
 8005130:	f001 fd20 	bl	8006b74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8005134:	bf00      	nop
 8005136:	bd80      	pop	{r7, pc}

08005138 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800513c:	4802      	ldr	r0, [pc, #8]	; (8005148 <DMA1_Channel3_IRQHandler+0x10>)
 800513e:	f001 fa38 	bl	80065b2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8005142:	bf00      	nop
 8005144:	bd80      	pop	{r7, pc}
 8005146:	bf00      	nop
 8005148:	200009e0 	.word	0x200009e0

0800514c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8005150:	4802      	ldr	r0, [pc, #8]	; (800515c <DMA1_Channel4_IRQHandler+0x10>)
 8005152:	f001 fa2e 	bl	80065b2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8005156:	bf00      	nop
 8005158:	bd80      	pop	{r7, pc}
 800515a:	bf00      	nop
 800515c:	20000a28 	.word	0x20000a28

08005160 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8005164:	4802      	ldr	r0, [pc, #8]	; (8005170 <DMA1_Channel5_IRQHandler+0x10>)
 8005166:	f001 fa24 	bl	80065b2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800516a:	bf00      	nop
 800516c:	bd80      	pop	{r7, pc}
 800516e:	bf00      	nop
 8005170:	20000a70 	.word	0x20000a70

08005174 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8005178:	4802      	ldr	r0, [pc, #8]	; (8005184 <DMA1_Channel6_IRQHandler+0x10>)
 800517a:	f001 fa1a 	bl	80065b2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800517e:	bf00      	nop
 8005180:	bd80      	pop	{r7, pc}
 8005182:	bf00      	nop
 8005184:	200008ac 	.word	0x200008ac

08005188 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800518c:	4802      	ldr	r0, [pc, #8]	; (8005198 <DMA1_Channel7_IRQHandler+0x10>)
 800518e:	f001 fa10 	bl	80065b2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8005192:	bf00      	nop
 8005194:	bd80      	pop	{r7, pc}
 8005196:	bf00      	nop
 8005198:	20000b88 	.word	0x20000b88

0800519c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80051a0:	4802      	ldr	r0, [pc, #8]	; (80051ac <TIM4_IRQHandler+0x10>)
 80051a2:	f006 fcb4 	bl	800bb0e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80051a6:	bf00      	nop
 80051a8:	bd80      	pop	{r7, pc}
 80051aa:	bf00      	nop
 80051ac:	20000ab8 	.word	0x20000ab8

080051b0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80051b4:	4802      	ldr	r0, [pc, #8]	; (80051c0 <I2C1_EV_IRQHandler+0x10>)
 80051b6:	f002 f8a7 	bl	8007308 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80051ba:	bf00      	nop
 80051bc:	bd80      	pop	{r7, pc}
 80051be:	bf00      	nop
 80051c0:	20000810 	.word	0x20000810

080051c4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80051c8:	4802      	ldr	r0, [pc, #8]	; (80051d4 <I2C1_ER_IRQHandler+0x10>)
 80051ca:	f002 f8b7 	bl	800733c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80051ce:	bf00      	nop
 80051d0:	bd80      	pop	{r7, pc}
 80051d2:	bf00      	nop
 80051d4:	20000810 	.word	0x20000810

080051d8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80051dc:	4802      	ldr	r0, [pc, #8]	; (80051e8 <SPI1_IRQHandler+0x10>)
 80051de:	f005 ff69 	bl	800b0b4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80051e2:	bf00      	nop
 80051e4:	bd80      	pop	{r7, pc}
 80051e6:	bf00      	nop
 80051e8:	20000918 	.word	0x20000918

080051ec <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80051f0:	4802      	ldr	r0, [pc, #8]	; (80051fc <SPI2_IRQHandler+0x10>)
 80051f2:	f005 ff5f 	bl	800b0b4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80051f6:	bf00      	nop
 80051f8:	bd80      	pop	{r7, pc}
 80051fa:	bf00      	nop
 80051fc:	2000097c 	.word	0x2000097c

08005200 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005204:	4802      	ldr	r0, [pc, #8]	; (8005210 <USART2_IRQHandler+0x10>)
 8005206:	f007 f9a1 	bl	800c54c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800520a:	bf00      	nop
 800520c:	bd80      	pop	{r7, pc}
 800520e:	bf00      	nop
 8005210:	20000b04 	.word	0x20000b04

08005214 <DMA2_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA2 channel6 global interrupt.
  */
void DMA2_Channel6_IRQHandler(void)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel6_IRQn 0 */

  /* USER CODE END DMA2_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8005218:	4802      	ldr	r0, [pc, #8]	; (8005224 <DMA2_Channel6_IRQHandler+0x10>)
 800521a:	f001 f9ca 	bl	80065b2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel6_IRQn 1 */

  /* USER CODE END DMA2_Channel6_IRQn 1 */
}
 800521e:	bf00      	nop
 8005220:	bd80      	pop	{r7, pc}
 8005222:	bf00      	nop
 8005224:	20000864 	.word	0x20000864

08005228 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005228:	b480      	push	{r7}
 800522a:	af00      	add	r7, sp, #0
	return 1;
 800522c:	2301      	movs	r3, #1
}
 800522e:	4618      	mov	r0, r3
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr

08005238 <_kill>:

int _kill(int pid, int sig)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b082      	sub	sp, #8
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005242:	f008 fc85 	bl	800db50 <__errno>
 8005246:	4603      	mov	r3, r0
 8005248:	2216      	movs	r2, #22
 800524a:	601a      	str	r2, [r3, #0]
	return -1;
 800524c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005250:	4618      	mov	r0, r3
 8005252:	3708      	adds	r7, #8
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}

08005258 <_exit>:

void _exit (int status)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b082      	sub	sp, #8
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005260:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	f7ff ffe7 	bl	8005238 <_kill>
	while (1) {}		/* Make sure we hang here */
 800526a:	e7fe      	b.n	800526a <_exit+0x12>

0800526c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b086      	sub	sp, #24
 8005270:	af00      	add	r7, sp, #0
 8005272:	60f8      	str	r0, [r7, #12]
 8005274:	60b9      	str	r1, [r7, #8]
 8005276:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005278:	2300      	movs	r3, #0
 800527a:	617b      	str	r3, [r7, #20]
 800527c:	e00a      	b.n	8005294 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800527e:	f3af 8000 	nop.w
 8005282:	4601      	mov	r1, r0
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	1c5a      	adds	r2, r3, #1
 8005288:	60ba      	str	r2, [r7, #8]
 800528a:	b2ca      	uxtb	r2, r1
 800528c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	3301      	adds	r3, #1
 8005292:	617b      	str	r3, [r7, #20]
 8005294:	697a      	ldr	r2, [r7, #20]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	429a      	cmp	r2, r3
 800529a:	dbf0      	blt.n	800527e <_read+0x12>
	}

return len;
 800529c:	687b      	ldr	r3, [r7, #4]
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3718      	adds	r7, #24
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}

080052a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80052a6:	b580      	push	{r7, lr}
 80052a8:	b086      	sub	sp, #24
 80052aa:	af00      	add	r7, sp, #0
 80052ac:	60f8      	str	r0, [r7, #12]
 80052ae:	60b9      	str	r1, [r7, #8]
 80052b0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80052b2:	2300      	movs	r3, #0
 80052b4:	617b      	str	r3, [r7, #20]
 80052b6:	e009      	b.n	80052cc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	1c5a      	adds	r2, r3, #1
 80052bc:	60ba      	str	r2, [r7, #8]
 80052be:	781b      	ldrb	r3, [r3, #0]
 80052c0:	4618      	mov	r0, r3
 80052c2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	3301      	adds	r3, #1
 80052ca:	617b      	str	r3, [r7, #20]
 80052cc:	697a      	ldr	r2, [r7, #20]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	429a      	cmp	r2, r3
 80052d2:	dbf1      	blt.n	80052b8 <_write+0x12>
	}
	return len;
 80052d4:	687b      	ldr	r3, [r7, #4]
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3718      	adds	r7, #24
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}

080052de <_close>:

int _close(int file)
{
 80052de:	b480      	push	{r7}
 80052e0:	b083      	sub	sp, #12
 80052e2:	af00      	add	r7, sp, #0
 80052e4:	6078      	str	r0, [r7, #4]
	return -1;
 80052e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	370c      	adds	r7, #12
 80052ee:	46bd      	mov	sp, r7
 80052f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f4:	4770      	bx	lr

080052f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80052f6:	b480      	push	{r7}
 80052f8:	b083      	sub	sp, #12
 80052fa:	af00      	add	r7, sp, #0
 80052fc:	6078      	str	r0, [r7, #4]
 80052fe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005306:	605a      	str	r2, [r3, #4]
	return 0;
 8005308:	2300      	movs	r3, #0
}
 800530a:	4618      	mov	r0, r3
 800530c:	370c      	adds	r7, #12
 800530e:	46bd      	mov	sp, r7
 8005310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005314:	4770      	bx	lr

08005316 <_isatty>:

int _isatty(int file)
{
 8005316:	b480      	push	{r7}
 8005318:	b083      	sub	sp, #12
 800531a:	af00      	add	r7, sp, #0
 800531c:	6078      	str	r0, [r7, #4]
	return 1;
 800531e:	2301      	movs	r3, #1
}
 8005320:	4618      	mov	r0, r3
 8005322:	370c      	adds	r7, #12
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr

0800532c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800532c:	b480      	push	{r7}
 800532e:	b085      	sub	sp, #20
 8005330:	af00      	add	r7, sp, #0
 8005332:	60f8      	str	r0, [r7, #12]
 8005334:	60b9      	str	r1, [r7, #8]
 8005336:	607a      	str	r2, [r7, #4]
	return 0;
 8005338:	2300      	movs	r3, #0
}
 800533a:	4618      	mov	r0, r3
 800533c:	3714      	adds	r7, #20
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr
	...

08005348 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b086      	sub	sp, #24
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005350:	4a14      	ldr	r2, [pc, #80]	; (80053a4 <_sbrk+0x5c>)
 8005352:	4b15      	ldr	r3, [pc, #84]	; (80053a8 <_sbrk+0x60>)
 8005354:	1ad3      	subs	r3, r2, r3
 8005356:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800535c:	4b13      	ldr	r3, [pc, #76]	; (80053ac <_sbrk+0x64>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d102      	bne.n	800536a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005364:	4b11      	ldr	r3, [pc, #68]	; (80053ac <_sbrk+0x64>)
 8005366:	4a12      	ldr	r2, [pc, #72]	; (80053b0 <_sbrk+0x68>)
 8005368:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800536a:	4b10      	ldr	r3, [pc, #64]	; (80053ac <_sbrk+0x64>)
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	4413      	add	r3, r2
 8005372:	693a      	ldr	r2, [r7, #16]
 8005374:	429a      	cmp	r2, r3
 8005376:	d207      	bcs.n	8005388 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005378:	f008 fbea 	bl	800db50 <__errno>
 800537c:	4603      	mov	r3, r0
 800537e:	220c      	movs	r2, #12
 8005380:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005382:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005386:	e009      	b.n	800539c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005388:	4b08      	ldr	r3, [pc, #32]	; (80053ac <_sbrk+0x64>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800538e:	4b07      	ldr	r3, [pc, #28]	; (80053ac <_sbrk+0x64>)
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	4413      	add	r3, r2
 8005396:	4a05      	ldr	r2, [pc, #20]	; (80053ac <_sbrk+0x64>)
 8005398:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800539a:	68fb      	ldr	r3, [r7, #12]
}
 800539c:	4618      	mov	r0, r3
 800539e:	3718      	adds	r7, #24
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}
 80053a4:	20018000 	.word	0x20018000
 80053a8:	00000c00 	.word	0x00000c00
 80053ac:	20002cb0 	.word	0x20002cb0
 80053b0:	20002df8 	.word	0x20002df8

080053b4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80053b4:	b480      	push	{r7}
 80053b6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80053b8:	4b06      	ldr	r3, [pc, #24]	; (80053d4 <SystemInit+0x20>)
 80053ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053be:	4a05      	ldr	r2, [pc, #20]	; (80053d4 <SystemInit+0x20>)
 80053c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80053c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80053c8:	bf00      	nop
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr
 80053d2:	bf00      	nop
 80053d4:	e000ed00 	.word	0xe000ed00

080053d8 <W25_SELECT>:

extern void Report(const uint8_t addTime, const char *fmt, ...);

//------------------------------------------------------------------------------------------

void W25_SELECT()   { W25_SEL(); } //HAL_GPIO_WritePin(W25_CS_GPIO_Port, W25_CS_Pin, GPIO_PIN_RESET);//set to 0
 80053d8:	b580      	push	{r7, lr}
 80053da:	af00      	add	r7, sp, #0
 80053dc:	2200      	movs	r2, #0
 80053de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80053e2:	4802      	ldr	r0, [pc, #8]	; (80053ec <W25_SELECT+0x14>)
 80053e4:	f001 fb94 	bl	8006b10 <HAL_GPIO_WritePin>
 80053e8:	bf00      	nop
 80053ea:	bd80      	pop	{r7, pc}
 80053ec:	48000400 	.word	0x48000400

080053f0 <W25_UNSELECT>:
void W25_UNSELECT() { W25_UNSEL(); } //HAL_GPIO_WritePin(W25_CS_GPIO_Port, W25_CS_Pin, GPIO_PIN_SET);//set to 1
 80053f0:	b580      	push	{r7, lr}
 80053f2:	af00      	add	r7, sp, #0
 80053f4:	2201      	movs	r2, #1
 80053f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80053fa:	4802      	ldr	r0, [pc, #8]	; (8005404 <W25_UNSELECT+0x14>)
 80053fc:	f001 fb88 	bl	8006b10 <HAL_GPIO_WritePin>
 8005400:	bf00      	nop
 8005402:	bd80      	pop	{r7, pc}
 8005404:	48000400 	.word	0x48000400

08005408 <W25qxx_Spi>:
//void W25_SELECT()   { HAL_GPIO_WritePin(W25_CS_GPIO_Port, W25_CS_Pin, GPIO_PIN_RESET); }//set to 0
//void W25_UNSELECT() { HAL_GPIO_WritePin(W25_CS_GPIO_Port, W25_CS_Pin, GPIO_PIN_SET); }//set to 1

//------------------------------------------------------------------------------------------
uint8_t W25qxx_Spi(uint8_t Data)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b086      	sub	sp, #24
 800540c:	af02      	add	r7, sp, #8
 800540e:	4603      	mov	r3, r0
 8005410:	71fb      	strb	r3, [r7, #7]
uint8_t ret;

    HAL_SPI_TransmitReceive(portFLASH, &Data, &ret, 1, min_wait_ms);//HAL_MAX_DELAY);
 8005412:	4b07      	ldr	r3, [pc, #28]	; (8005430 <W25qxx_Spi+0x28>)
 8005414:	6818      	ldr	r0, [r3, #0]
 8005416:	23fa      	movs	r3, #250	; 0xfa
 8005418:	f107 020f 	add.w	r2, r7, #15
 800541c:	1df9      	adds	r1, r7, #7
 800541e:	9300      	str	r3, [sp, #0]
 8005420:	2301      	movs	r3, #1
 8005422:	f005 f9b4 	bl	800a78e <HAL_SPI_TransmitReceive>

    return ret;
 8005426:	7bfb      	ldrb	r3, [r7, #15]
}
 8005428:	4618      	mov	r0, r3
 800542a:	3710      	adds	r7, #16
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}
 8005430:	2000000c 	.word	0x2000000c

08005434 <W25qxx_Reset>:
//------------------------------------------------------------------------------------------
void W25qxx_Reset(void)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	af00      	add	r7, sp, #0
	W25qxx_Delay(100);
 8005438:	2064      	movs	r0, #100	; 0x64
 800543a:	f000 fdbb 	bl	8005fb4 <HAL_Delay>

	W25_SELECT();
 800543e:	f7ff ffcb 	bl	80053d8 <W25_SELECT>
		W25qxx_Spi(EN_RESET);
 8005442:	2066      	movs	r0, #102	; 0x66
 8005444:	f7ff ffe0 	bl	8005408 <W25qxx_Spi>
		W25qxx_Spi(CHIP_RESET);
 8005448:	2099      	movs	r0, #153	; 0x99
 800544a:	f7ff ffdd 	bl	8005408 <W25qxx_Spi>
	W25_UNSELECT();
 800544e:	f7ff ffcf 	bl	80053f0 <W25_UNSELECT>

	W25qxx_Delay(100);
 8005452:	2064      	movs	r0, #100	; 0x64
 8005454:	f000 fdae 	bl	8005fb4 <HAL_Delay>
}
 8005458:	bf00      	nop
 800545a:	bd80      	pop	{r7, pc}

0800545c <W25qxx_ReadID>:
//------------------------------------------------------------------------------------------
uint32_t W25qxx_ReadID(void)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b084      	sub	sp, #16
 8005460:	af00      	add	r7, sp, #0
uint32_t Temp[3] = {0};
 8005462:	1d3b      	adds	r3, r7, #4
 8005464:	2200      	movs	r2, #0
 8005466:	601a      	str	r2, [r3, #0]
 8005468:	605a      	str	r2, [r3, #4]
 800546a:	609a      	str	r2, [r3, #8]

    W25_SELECT();//set to 0
 800546c:	f7ff ffb4 	bl	80053d8 <W25_SELECT>

    W25qxx_Spi(JEDEC_ID);
 8005470:	209f      	movs	r0, #159	; 0x9f
 8005472:	f7ff ffc9 	bl	8005408 <W25qxx_Spi>
    Temp[0] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8005476:	20a5      	movs	r0, #165	; 0xa5
 8005478:	f7ff ffc6 	bl	8005408 <W25qxx_Spi>
 800547c:	4603      	mov	r3, r0
 800547e:	607b      	str	r3, [r7, #4]
    Temp[1] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8005480:	20a5      	movs	r0, #165	; 0xa5
 8005482:	f7ff ffc1 	bl	8005408 <W25qxx_Spi>
 8005486:	4603      	mov	r3, r0
 8005488:	60bb      	str	r3, [r7, #8]
    Temp[2] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800548a:	20a5      	movs	r0, #165	; 0xa5
 800548c:	f7ff ffbc 	bl	8005408 <W25qxx_Spi>
 8005490:	4603      	mov	r3, r0
 8005492:	60fb      	str	r3, [r7, #12]

    W25_UNSELECT();//set to 1
 8005494:	f7ff ffac 	bl	80053f0 <W25_UNSELECT>

    return ((Temp[0] << 16) | (Temp[1] << 8) | Temp[2]);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	041a      	lsls	r2, r3, #16
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	021b      	lsls	r3, r3, #8
 80054a0:	431a      	orrs	r2, r3
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	4313      	orrs	r3, r2
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3710      	adds	r7, #16
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}
	...

080054b0 <W25qxx_ReadUniqID>:
//------------------------------------------------------------------------------------------
void W25qxx_ReadUniqID(void)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b082      	sub	sp, #8
 80054b4:	af00      	add	r7, sp, #0
	uint8_t dat[] = {READ_UID, W25QXX_DUMMY_BYTE, W25QXX_DUMMY_BYTE, W25QXX_DUMMY_BYTE, W25QXX_DUMMY_BYTE};
 80054b6:	4a0e      	ldr	r2, [pc, #56]	; (80054f0 <W25qxx_ReadUniqID+0x40>)
 80054b8:	463b      	mov	r3, r7
 80054ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80054be:	6018      	str	r0, [r3, #0]
 80054c0:	3304      	adds	r3, #4
 80054c2:	7019      	strb	r1, [r3, #0]
    W25_SELECT();
 80054c4:	f7ff ff88 	bl	80053d8 <W25_SELECT>

    //W25qxx_Spi(READ_UID);
    //for (uint8_t i = 0; i < 4; i++) W25qxx_Spi(W25QXX_DUMMY_BYTE);
    //for (uint8_t i = 0; i < 8; i++) w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
    HAL_SPI_Transmit(portFLASH, dat, sizeof(dat), min_wait_ms);
 80054c8:	4b0a      	ldr	r3, [pc, #40]	; (80054f4 <W25qxx_ReadUniqID+0x44>)
 80054ca:	6818      	ldr	r0, [r3, #0]
 80054cc:	23fa      	movs	r3, #250	; 0xfa
 80054ce:	4639      	mov	r1, r7
 80054d0:	2205      	movs	r2, #5
 80054d2:	f004 febe 	bl	800a252 <HAL_SPI_Transmit>
    HAL_SPI_Receive(portFLASH, w25qxx.UniqID, 8, min_wait_ms);
 80054d6:	4b07      	ldr	r3, [pc, #28]	; (80054f4 <W25qxx_ReadUniqID+0x44>)
 80054d8:	6818      	ldr	r0, [r3, #0]
 80054da:	23fa      	movs	r3, #250	; 0xfa
 80054dc:	2208      	movs	r2, #8
 80054de:	4906      	ldr	r1, [pc, #24]	; (80054f8 <W25qxx_ReadUniqID+0x48>)
 80054e0:	f005 f825 	bl	800a52e <HAL_SPI_Receive>

    W25_UNSELECT();
 80054e4:	f7ff ff84 	bl	80053f0 <W25_UNSELECT>
}
 80054e8:	bf00      	nop
 80054ea:	3708      	adds	r7, #8
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}
 80054f0:	080127b4 	.word	0x080127b4
 80054f4:	2000000c 	.word	0x2000000c
 80054f8:	20002cb5 	.word	0x20002cb5

080054fc <W25qxx_WriteEnable>:
//------------------------------------------------------------------------------------------
void W25qxx_WriteEnable(void)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	af00      	add	r7, sp, #0
    W25_SELECT();
 8005500:	f7ff ff6a 	bl	80053d8 <W25_SELECT>

    W25qxx_Spi(WRITE_ENABLE);
 8005504:	2006      	movs	r0, #6
 8005506:	f7ff ff7f 	bl	8005408 <W25qxx_Spi>

    W25_UNSELECT();
 800550a:	f7ff ff71 	bl	80053f0 <W25_UNSELECT>

    W25qxx_Delay(1);
 800550e:	2001      	movs	r0, #1
 8005510:	f000 fd50 	bl	8005fb4 <HAL_Delay>
}
 8005514:	bf00      	nop
 8005516:	bd80      	pop	{r7, pc}

08005518 <W25qxx_ReadStatusRegister>:

    W25qxx_Delay(1);
}
//------------------------------------------------------------------------------------------
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusReg)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b084      	sub	sp, #16
 800551c:	af00      	add	r7, sp, #0
 800551e:	4603      	mov	r3, r0
 8005520:	71fb      	strb	r3, [r7, #7]
uint8_t status = 0;
 8005522:	2300      	movs	r3, #0
 8005524:	73fb      	strb	r3, [r7, #15]

    W25_SELECT();
 8005526:	f7ff ff57 	bl	80053d8 <W25_SELECT>

    switch (SelectStatusReg) {
 800552a:	79fb      	ldrb	r3, [r7, #7]
 800552c:	2b01      	cmp	r3, #1
 800552e:	d002      	beq.n	8005536 <W25qxx_ReadStatusRegister+0x1e>
 8005530:	2b02      	cmp	r3, #2
 8005532:	d00d      	beq.n	8005550 <W25qxx_ReadStatusRegister+0x38>
 8005534:	e019      	b.n	800556a <W25qxx_ReadStatusRegister+0x52>
        case 1:
            W25qxx_Spi(READ_STAT_REG1);
 8005536:	2005      	movs	r0, #5
 8005538:	f7ff ff66 	bl	8005408 <W25qxx_Spi>
            status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800553c:	20a5      	movs	r0, #165	; 0xa5
 800553e:	f7ff ff63 	bl	8005408 <W25qxx_Spi>
 8005542:	4603      	mov	r3, r0
 8005544:	73fb      	strb	r3, [r7, #15]
            w25qxx.StatusRegister1 = status;
 8005546:	4a12      	ldr	r2, [pc, #72]	; (8005590 <W25qxx_ReadStatusRegister+0x78>)
 8005548:	7bfb      	ldrb	r3, [r7, #15]
 800554a:	f882 3023 	strb.w	r3, [r2, #35]	; 0x23
        break;
 800554e:	e018      	b.n	8005582 <W25qxx_ReadStatusRegister+0x6a>
        case 2:
            W25qxx_Spi(READ_STAT_REG2);
 8005550:	2035      	movs	r0, #53	; 0x35
 8005552:	f7ff ff59 	bl	8005408 <W25qxx_Spi>
            status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8005556:	20a5      	movs	r0, #165	; 0xa5
 8005558:	f7ff ff56 	bl	8005408 <W25qxx_Spi>
 800555c:	4603      	mov	r3, r0
 800555e:	73fb      	strb	r3, [r7, #15]
            w25qxx.StatusRegister2 = status;
 8005560:	4a0b      	ldr	r2, [pc, #44]	; (8005590 <W25qxx_ReadStatusRegister+0x78>)
 8005562:	7bfb      	ldrb	r3, [r7, #15]
 8005564:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
        break;
 8005568:	e00b      	b.n	8005582 <W25qxx_ReadStatusRegister+0x6a>
        default : {
            W25qxx_Spi(READ_STAT_REG3);
 800556a:	2015      	movs	r0, #21
 800556c:	f7ff ff4c 	bl	8005408 <W25qxx_Spi>
            status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8005570:	20a5      	movs	r0, #165	; 0xa5
 8005572:	f7ff ff49 	bl	8005408 <W25qxx_Spi>
 8005576:	4603      	mov	r3, r0
 8005578:	73fb      	strb	r3, [r7, #15]
            w25qxx.StatusRegister3 = status;
 800557a:	4a05      	ldr	r2, [pc, #20]	; (8005590 <W25qxx_ReadStatusRegister+0x78>)
 800557c:	7bfb      	ldrb	r3, [r7, #15]
 800557e:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
        }
    }

    W25_UNSELECT();
 8005582:	f7ff ff35 	bl	80053f0 <W25_UNSELECT>

    return status;
 8005586:	7bfb      	ldrb	r3, [r7, #15]
}
 8005588:	4618      	mov	r0, r3
 800558a:	3710      	adds	r7, #16
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}
 8005590:	20002cb4 	.word	0x20002cb4

08005594 <W25qxx_WaitForWriteEnd>:

    W25_UNSELECT();
}
//------------------------------------------------------------------------------------------
void W25qxx_WaitForWriteEnd(void)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	af00      	add	r7, sp, #0
    W25qxx_Delay(1);
 8005598:	2001      	movs	r0, #1
 800559a:	f000 fd0b 	bl	8005fb4 <HAL_Delay>

    W25_SELECT();
 800559e:	f7ff ff1b 	bl	80053d8 <W25_SELECT>

    W25qxx_Spi(READ_STAT_REG1);
 80055a2:	2005      	movs	r0, #5
 80055a4:	f7ff ff30 	bl	8005408 <W25qxx_Spi>
    do
    {
        w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80055a8:	20a5      	movs	r0, #165	; 0xa5
 80055aa:	f7ff ff2d 	bl	8005408 <W25qxx_Spi>
 80055ae:	4603      	mov	r3, r0
 80055b0:	461a      	mov	r2, r3
 80055b2:	4b08      	ldr	r3, [pc, #32]	; (80055d4 <W25qxx_WaitForWriteEnd+0x40>)
 80055b4:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
        W25qxx_Delay(1);
 80055b8:	2001      	movs	r0, #1
 80055ba:	f000 fcfb 	bl	8005fb4 <HAL_Delay>
    } while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 80055be:	4b05      	ldr	r3, [pc, #20]	; (80055d4 <W25qxx_WaitForWriteEnd+0x40>)
 80055c0:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80055c4:	f003 0301 	and.w	r3, r3, #1
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d1ed      	bne.n	80055a8 <W25qxx_WaitForWriteEnd+0x14>

    W25_UNSELECT();
 80055cc:	f7ff ff10 	bl	80053f0 <W25_UNSELECT>
}
 80055d0:	bf00      	nop
 80055d2:	bd80      	pop	{r7, pc}
 80055d4:	20002cb4 	.word	0x20002cb4

080055d8 <W25qxx_Init>:
//------------------------------------------------------------------------------------------
bool W25qxx_Init(void)
{
 80055d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055da:	b089      	sub	sp, #36	; 0x24
 80055dc:	af06      	add	r7, sp, #24

	W25qxx_Reset();
 80055de:	f7ff ff29 	bl	8005434 <W25qxx_Reset>


    w25qxx.Lock = 1;
 80055e2:	4b54      	ldr	r3, [pc, #336]	; (8005734 <W25qxx_Init+0x15c>)
 80055e4:	2201      	movs	r2, #1
 80055e6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    bool ret = false;
 80055ea:	2300      	movs	r3, #0
 80055ec:	71fb      	strb	r3, [r7, #7]

    W25_UNSELECT();
 80055ee:	f7ff feff 	bl	80053f0 <W25_UNSELECT>

    uint32_t id = W25qxx_ReadID() & 0xffff;
 80055f2:	f7ff ff33 	bl	800545c <W25qxx_ReadID>
 80055f6:	4603      	mov	r3, r0
 80055f8:	b29b      	uxth	r3, r3
 80055fa:	603b      	str	r3, [r7, #0]
//#ifdef W25QXX_DEBUG
    Report(1, "w25qxx Init Begin... Chip ID:0x%X\r\n", id);
 80055fc:	683a      	ldr	r2, [r7, #0]
 80055fe:	494e      	ldr	r1, [pc, #312]	; (8005738 <W25qxx_Init+0x160>)
 8005600:	2001      	movs	r0, #1
 8005602:	f7fe fa57 	bl	8003ab4 <Report>
//#endif
    id &= 0xff;
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	b2db      	uxtb	r3, r3
 800560a:	603b      	str	r3, [r7, #0]
    id -= 0x10;//0x4010;
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	3b10      	subs	r3, #16
 8005610:	603b      	str	r3, [r7, #0]
    if (id > 0x0a) id = 0;
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	2b0a      	cmp	r3, #10
 8005616:	d901      	bls.n	800561c <W25qxx_Init+0x44>
 8005618:	2300      	movs	r3, #0
 800561a:	603b      	str	r3, [r7, #0]
    w25qxx.ID         = id;              //W25Q10..W25Q512
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	b2da      	uxtb	r2, r3
 8005620:	4b44      	ldr	r3, [pc, #272]	; (8005734 <W25qxx_Init+0x15c>)
 8005622:	701a      	strb	r2, [r3, #0]
    w25qxx.BlockCount = all_chipBLK[id]; //0..1024;
 8005624:	4a45      	ldr	r2, [pc, #276]	; (800573c <W25qxx_Init+0x164>)
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800562c:	4a41      	ldr	r2, [pc, #260]	; (8005734 <W25qxx_Init+0x15c>)
 800562e:	f8c2 301b 	str.w	r3, [r2, #27]
//#ifdef W25QXX_DEBUG
    Report(1, "Chip %s\r\n", all_chipID[id]);
 8005632:	4a43      	ldr	r2, [pc, #268]	; (8005740 <W25qxx_Init+0x168>)
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800563a:	461a      	mov	r2, r3
 800563c:	4941      	ldr	r1, [pc, #260]	; (8005744 <W25qxx_Init+0x16c>)
 800563e:	2001      	movs	r0, #1
 8005640:	f7fe fa38 	bl	8003ab4 <Report>
//#endif

    if (id) {
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d06b      	beq.n	8005722 <W25qxx_Init+0x14a>
    	w25qxx.PageSize = 256;
 800564a:	4b3a      	ldr	r3, [pc, #232]	; (8005734 <W25qxx_Init+0x15c>)
 800564c:	2200      	movs	r2, #0
 800564e:	725a      	strb	r2, [r3, #9]
 8005650:	2200      	movs	r2, #0
 8005652:	f042 0201 	orr.w	r2, r2, #1
 8005656:	729a      	strb	r2, [r3, #10]
    	w25qxx.SectorSize = 0x1000;
 8005658:	4b36      	ldr	r3, [pc, #216]	; (8005734 <W25qxx_Init+0x15c>)
 800565a:	2200      	movs	r2, #0
 800565c:	73da      	strb	r2, [r3, #15]
 800565e:	2200      	movs	r2, #0
 8005660:	f042 0210 	orr.w	r2, r2, #16
 8005664:	741a      	strb	r2, [r3, #16]
 8005666:	2200      	movs	r2, #0
 8005668:	745a      	strb	r2, [r3, #17]
 800566a:	2200      	movs	r2, #0
 800566c:	749a      	strb	r2, [r3, #18]
    	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 800566e:	4b31      	ldr	r3, [pc, #196]	; (8005734 <W25qxx_Init+0x15c>)
 8005670:	f8d3 301b 	ldr.w	r3, [r3, #27]
 8005674:	011b      	lsls	r3, r3, #4
 8005676:	4a2f      	ldr	r2, [pc, #188]	; (8005734 <W25qxx_Init+0x15c>)
 8005678:	f8c2 3013 	str.w	r3, [r2, #19]
    	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 800567c:	4b2d      	ldr	r3, [pc, #180]	; (8005734 <W25qxx_Init+0x15c>)
 800567e:	f8d3 3013 	ldr.w	r3, [r3, #19]
 8005682:	4a2c      	ldr	r2, [pc, #176]	; (8005734 <W25qxx_Init+0x15c>)
 8005684:	f8d2 200f 	ldr.w	r2, [r2, #15]
 8005688:	fb02 f303 	mul.w	r3, r2, r3
 800568c:	4a29      	ldr	r2, [pc, #164]	; (8005734 <W25qxx_Init+0x15c>)
 800568e:	f8b2 2009 	ldrh.w	r2, [r2, #9]
 8005692:	b292      	uxth	r2, r2
 8005694:	fbb3 f3f2 	udiv	r3, r3, r2
 8005698:	4a26      	ldr	r2, [pc, #152]	; (8005734 <W25qxx_Init+0x15c>)
 800569a:	f8c2 300b 	str.w	r3, [r2, #11]
    	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 800569e:	4b25      	ldr	r3, [pc, #148]	; (8005734 <W25qxx_Init+0x15c>)
 80056a0:	f8d3 300f 	ldr.w	r3, [r3, #15]
 80056a4:	011b      	lsls	r3, r3, #4
 80056a6:	4a23      	ldr	r2, [pc, #140]	; (8005734 <W25qxx_Init+0x15c>)
 80056a8:	f8c2 3017 	str.w	r3, [r2, #23]
    	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 80056ac:	4b21      	ldr	r3, [pc, #132]	; (8005734 <W25qxx_Init+0x15c>)
 80056ae:	f8d3 3013 	ldr.w	r3, [r3, #19]
 80056b2:	4a20      	ldr	r2, [pc, #128]	; (8005734 <W25qxx_Init+0x15c>)
 80056b4:	f8d2 200f 	ldr.w	r2, [r2, #15]
 80056b8:	fb02 f303 	mul.w	r3, r2, r3
 80056bc:	0a9b      	lsrs	r3, r3, #10
 80056be:	4a1d      	ldr	r2, [pc, #116]	; (8005734 <W25qxx_Init+0x15c>)
 80056c0:	f8c2 301f 	str.w	r3, [r2, #31]
    	W25qxx_ReadUniqID();
 80056c4:	f7ff fef4 	bl	80054b0 <W25qxx_ReadUniqID>
    	W25qxx_ReadStatusRegister(1);
 80056c8:	2001      	movs	r0, #1
 80056ca:	f7ff ff25 	bl	8005518 <W25qxx_ReadStatusRegister>
    	W25qxx_ReadStatusRegister(2);
 80056ce:	2002      	movs	r0, #2
 80056d0:	f7ff ff22 	bl	8005518 <W25qxx_ReadStatusRegister>
    	W25qxx_ReadStatusRegister(3);
 80056d4:	2003      	movs	r0, #3
 80056d6:	f7ff ff1f 	bl	8005518 <W25qxx_ReadStatusRegister>
    	ret = true;
 80056da:	2301      	movs	r3, #1
 80056dc:	71fb      	strb	r3, [r7, #7]
                 "\tSector Size:\t%u bytes\r\n"
                 "\tSector Count:\t%u\r\n"
                 "\tBlock Size:\t%u bytes\r\n"
                 "\tBlock Count:\t%u\r\n"
                 "\tCapacity:\t%u KBytes\r\n",
                 w25qxx.PageSize,
 80056de:	4b15      	ldr	r3, [pc, #84]	; (8005734 <W25qxx_Init+0x15c>)
 80056e0:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 80056e4:	b29b      	uxth	r3, r3
    	Report(0,"\tPage Size:\t%u bytes\r\n"
 80056e6:	461e      	mov	r6, r3
 80056e8:	4b12      	ldr	r3, [pc, #72]	; (8005734 <W25qxx_Init+0x15c>)
 80056ea:	f8d3 500b 	ldr.w	r5, [r3, #11]
 80056ee:	4b11      	ldr	r3, [pc, #68]	; (8005734 <W25qxx_Init+0x15c>)
 80056f0:	f8d3 300f 	ldr.w	r3, [r3, #15]
 80056f4:	4a0f      	ldr	r2, [pc, #60]	; (8005734 <W25qxx_Init+0x15c>)
 80056f6:	f8d2 2013 	ldr.w	r2, [r2, #19]
 80056fa:	490e      	ldr	r1, [pc, #56]	; (8005734 <W25qxx_Init+0x15c>)
 80056fc:	f8d1 1017 	ldr.w	r1, [r1, #23]
 8005700:	480c      	ldr	r0, [pc, #48]	; (8005734 <W25qxx_Init+0x15c>)
 8005702:	f8d0 001b 	ldr.w	r0, [r0, #27]
 8005706:	4c0b      	ldr	r4, [pc, #44]	; (8005734 <W25qxx_Init+0x15c>)
 8005708:	f8d4 401f 	ldr.w	r4, [r4, #31]
 800570c:	9404      	str	r4, [sp, #16]
 800570e:	9003      	str	r0, [sp, #12]
 8005710:	9102      	str	r1, [sp, #8]
 8005712:	9201      	str	r2, [sp, #4]
 8005714:	9300      	str	r3, [sp, #0]
 8005716:	462b      	mov	r3, r5
 8005718:	4632      	mov	r2, r6
 800571a:	490b      	ldr	r1, [pc, #44]	; (8005748 <W25qxx_Init+0x170>)
 800571c:	2000      	movs	r0, #0
 800571e:	f7fe f9c9 	bl	8003ab4 <Report>
                 w25qxx.BlockCount,
                 w25qxx.CapacityInKiloByte);
//#endif
    }

    w25qxx.Lock = 0;
 8005722:	4b04      	ldr	r3, [pc, #16]	; (8005734 <W25qxx_Init+0x15c>)
 8005724:	2200      	movs	r2, #0
 8005726:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

    return ret;
 800572a:	79fb      	ldrb	r3, [r7, #7]
}
 800572c:	4618      	mov	r0, r3
 800572e:	370c      	adds	r7, #12
 8005730:	46bd      	mov	sp, r7
 8005732:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005734:	20002cb4 	.word	0x20002cb4
 8005738:	080127bc 	.word	0x080127bc
 800573c:	08013674 	.word	0x08013674
 8005740:	200001e4 	.word	0x200001e4
 8005744:	080127e0 	.word	0x080127e0
 8005748:	080127ec 	.word	0x080127ec

0800574c <W25qxx_getChipID>:
//------------------------------------------------------------------------------------------
uint32_t W25qxx_getChipID()
{
 800574c:	b480      	push	{r7}
 800574e:	af00      	add	r7, sp, #0
	return (uint32_t)w25qxx.ID;
 8005750:	4b03      	ldr	r3, [pc, #12]	; (8005760 <W25qxx_getChipID+0x14>)
 8005752:	781b      	ldrb	r3, [r3, #0]
}
 8005754:	4618      	mov	r0, r3
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr
 800575e:	bf00      	nop
 8005760:	20002cb4 	.word	0x20002cb4

08005764 <W25qxx_getSectorCount>:
uint32_t W25qxx_getSectorCount()
{
 8005764:	b480      	push	{r7}
 8005766:	af00      	add	r7, sp, #0
	return w25qxx.SectorCount;
 8005768:	4b03      	ldr	r3, [pc, #12]	; (8005778 <W25qxx_getSectorCount+0x14>)
 800576a:	f8d3 3013 	ldr.w	r3, [r3, #19]
}
 800576e:	4618      	mov	r0, r3
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr
 8005778:	20002cb4 	.word	0x20002cb4

0800577c <W25qxx_getSectorSize>:
uint32_t W25qxx_getSectorSize()
{
 800577c:	b480      	push	{r7}
 800577e:	af00      	add	r7, sp, #0
	return w25qxx.SectorSize;
 8005780:	4b03      	ldr	r3, [pc, #12]	; (8005790 <W25qxx_getSectorSize+0x14>)
 8005782:	f8d3 300f 	ldr.w	r3, [r3, #15]
}
 8005786:	4618      	mov	r0, r3
 8005788:	46bd      	mov	sp, r7
 800578a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578e:	4770      	bx	lr
 8005790:	20002cb4 	.word	0x20002cb4

08005794 <W25qxx_getPageSize>:
uint32_t W25qxx_getPageCount()
{
	return w25qxx.PageCount;
}
uint32_t W25qxx_getPageSize()
{
 8005794:	b480      	push	{r7}
 8005796:	af00      	add	r7, sp, #0
	return w25qxx.PageSize;
 8005798:	4b04      	ldr	r3, [pc, #16]	; (80057ac <W25qxx_getPageSize+0x18>)
 800579a:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 800579e:	b29b      	uxth	r3, r3
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	46bd      	mov	sp, r7
 80057a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a8:	4770      	bx	lr
 80057aa:	bf00      	nop
 80057ac:	20002cb4 	.word	0x20002cb4

080057b0 <W25qxx_EraseSector>:

    w25qxx.Lock = 0;
}
//------------------------------------------------------------------------------------------
void W25qxx_EraseSector(uint32_t SectorAddr)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b082      	sub	sp, #8
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
    while (w25qxx.Lock) W25qxx_Delay(1);
 80057b8:	e002      	b.n	80057c0 <W25qxx_EraseSector+0x10>
 80057ba:	2001      	movs	r0, #1
 80057bc:	f000 fbfa 	bl	8005fb4 <HAL_Delay>
 80057c0:	4b1c      	ldr	r3, [pc, #112]	; (8005834 <W25qxx_EraseSector+0x84>)
 80057c2:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d1f7      	bne.n	80057ba <W25qxx_EraseSector+0xa>

    w25qxx.Lock = 1;
 80057ca:	4b1a      	ldr	r3, [pc, #104]	; (8005834 <W25qxx_EraseSector+0x84>)
 80057cc:	2201      	movs	r2, #1
 80057ce:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
#ifdef W25QXX_DEBUG
    uint32_t StartTime = HAL_GetTick();
    Report(1, "%u Begin...", SectorAddr);
#endif

    W25qxx_WaitForWriteEnd();
 80057d2:	f7ff fedf 	bl	8005594 <W25qxx_WaitForWriteEnd>
    SectorAddr = SectorAddr * w25qxx.SectorSize;
 80057d6:	4b17      	ldr	r3, [pc, #92]	; (8005834 <W25qxx_EraseSector+0x84>)
 80057d8:	f8d3 200f 	ldr.w	r2, [r3, #15]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	fb02 f303 	mul.w	r3, r2, r3
 80057e2:	607b      	str	r3, [r7, #4]
    W25qxx_WriteEnable();
 80057e4:	f7ff fe8a 	bl	80054fc <W25qxx_WriteEnable>

    W25_SELECT();
 80057e8:	f7ff fdf6 	bl	80053d8 <W25_SELECT>
    W25qxx_Spi(SECTOR_ERASE);
 80057ec:	2020      	movs	r0, #32
 80057ee:	f7ff fe0b 	bl	8005408 <W25qxx_Spi>
    //if (w25qxx.ID >= W25Q256) W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
    W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	0c1b      	lsrs	r3, r3, #16
 80057f6:	b2db      	uxtb	r3, r3
 80057f8:	4618      	mov	r0, r3
 80057fa:	f7ff fe05 	bl	8005408 <W25qxx_Spi>
    W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	0a1b      	lsrs	r3, r3, #8
 8005802:	b2db      	uxtb	r3, r3
 8005804:	4618      	mov	r0, r3
 8005806:	f7ff fdff 	bl	8005408 <W25qxx_Spi>
    W25qxx_Spi(SectorAddr & 0xFF);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	b2db      	uxtb	r3, r3
 800580e:	4618      	mov	r0, r3
 8005810:	f7ff fdfa 	bl	8005408 <W25qxx_Spi>
    W25_UNSELECT();
 8005814:	f7ff fdec 	bl	80053f0 <W25_UNSELECT>

    W25qxx_WaitForWriteEnd();
 8005818:	f7ff febc 	bl	8005594 <W25qxx_WaitForWriteEnd>

#ifdef W25QXX_DEBUG
    uint32_t dur = HAL_GetTick() - StartTime;
    Report(0, " done after %u ms (%u sec)!\r\n", dur, dur / 1000);
#endif
    W25qxx_Delay(1);
 800581c:	2001      	movs	r0, #1
 800581e:	f000 fbc9 	bl	8005fb4 <HAL_Delay>

    w25qxx.Lock = 0;
 8005822:	4b04      	ldr	r3, [pc, #16]	; (8005834 <W25qxx_EraseSector+0x84>)
 8005824:	2200      	movs	r2, #0
 8005826:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 800582a:	bf00      	nop
 800582c:	3708      	adds	r7, #8
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}
 8005832:	bf00      	nop
 8005834:	20002cb4 	.word	0x20002cb4

08005838 <W25qxx_SectorToPage>:
{
    return ((SectorAddress * w25qxx.SectorSize) / w25qxx.BlockSize);
}
//------------------------------------------------------------------------------------------
uint32_t W25qxx_SectorToPage(uint32_t SectorAddress)
{
 8005838:	b480      	push	{r7}
 800583a:	b083      	sub	sp, #12
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
    return (SectorAddress * w25qxx.SectorSize) / w25qxx.PageSize;
 8005840:	4b08      	ldr	r3, [pc, #32]	; (8005864 <W25qxx_SectorToPage+0x2c>)
 8005842:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8005846:	687a      	ldr	r2, [r7, #4]
 8005848:	fb02 f303 	mul.w	r3, r2, r3
 800584c:	4a05      	ldr	r2, [pc, #20]	; (8005864 <W25qxx_SectorToPage+0x2c>)
 800584e:	f8b2 2009 	ldrh.w	r2, [r2, #9]
 8005852:	b292      	uxth	r2, r2
 8005854:	fbb3 f3f2 	udiv	r3, r3, r2
}
 8005858:	4618      	mov	r0, r3
 800585a:	370c      	adds	r7, #12
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr
 8005864:	20002cb4 	.word	0x20002cb4

08005868 <W25qxx_IsEmptySector>:

    return false;
}
//------------------------------------------------------------------------------------------
bool W25qxx_IsEmptySector(uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToCheck_up_to_SectorSize)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b090      	sub	sp, #64	; 0x40
 800586c:	af00      	add	r7, sp, #0
 800586e:	60f8      	str	r0, [r7, #12]
 8005870:	60b9      	str	r1, [r7, #8]
 8005872:	607a      	str	r2, [r7, #4]
    while (w25qxx.Lock) W25qxx_Delay(1);
 8005874:	e002      	b.n	800587c <W25qxx_IsEmptySector+0x14>
 8005876:	2001      	movs	r0, #1
 8005878:	f000 fb9c 	bl	8005fb4 <HAL_Delay>
 800587c:	4b59      	ldr	r3, [pc, #356]	; (80059e4 <W25qxx_IsEmptySector+0x17c>)
 800587e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8005882:	2b00      	cmp	r3, #0
 8005884:	d1f7      	bne.n	8005876 <W25qxx_IsEmptySector+0xe>

    w25qxx.Lock = 1;
 8005886:	4b57      	ldr	r3, [pc, #348]	; (80059e4 <W25qxx_IsEmptySector+0x17c>)
 8005888:	2201      	movs	r2, #1
 800588a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

    if ( (NumByteToCheck_up_to_SectorSize > w25qxx.SectorSize) || (!NumByteToCheck_up_to_SectorSize) )
 800588e:	4b55      	ldr	r3, [pc, #340]	; (80059e4 <W25qxx_IsEmptySector+0x17c>)
 8005890:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8005894:	687a      	ldr	r2, [r7, #4]
 8005896:	429a      	cmp	r2, r3
 8005898:	d802      	bhi.n	80058a0 <W25qxx_IsEmptySector+0x38>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d103      	bne.n	80058a8 <W25qxx_IsEmptySector+0x40>
                NumByteToCheck_up_to_SectorSize = w25qxx.SectorSize;
 80058a0:	4b50      	ldr	r3, [pc, #320]	; (80059e4 <W25qxx_IsEmptySector+0x17c>)
 80058a2:	f8d3 300f 	ldr.w	r3, [r3, #15]
 80058a6:	607b      	str	r3, [r7, #4]
    uint32_t StartTime = HAL_GetTick();
#endif

    uint8_t pBuffer[32];
    uint32_t i, WorkAddress;
    for ( i = OffsetInByte; i < w25qxx.SectorSize; i += sizeof(pBuffer)) {
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058ac:	e040      	b.n	8005930 <W25qxx_IsEmptySector+0xc8>

    	W25_SELECT();
 80058ae:	f7ff fd93 	bl	80053d8 <W25_SELECT>
        WorkAddress = (i + Sector_Address * w25qxx.SectorSize);
 80058b2:	4b4c      	ldr	r3, [pc, #304]	; (80059e4 <W25qxx_IsEmptySector+0x17c>)
 80058b4:	f8d3 300f 	ldr.w	r3, [r3, #15]
 80058b8:	68fa      	ldr	r2, [r7, #12]
 80058ba:	fb02 f303 	mul.w	r3, r2, r3
 80058be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80058c0:	4413      	add	r3, r2
 80058c2:	637b      	str	r3, [r7, #52]	; 0x34
        W25qxx_Spi(DATA_READ);//FAST_READ);
 80058c4:	2003      	movs	r0, #3
 80058c6:	f7ff fd9f 	bl	8005408 <W25qxx_Spi>
        //if (w25qxx.ID >= W25Q256) W25qxx_Spi((WorkAddress & 0xFF000000) >> 24);
        W25qxx_Spi((WorkAddress & 0xFF0000) >> 16);
 80058ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058cc:	0c1b      	lsrs	r3, r3, #16
 80058ce:	b2db      	uxtb	r3, r3
 80058d0:	4618      	mov	r0, r3
 80058d2:	f7ff fd99 	bl	8005408 <W25qxx_Spi>
        W25qxx_Spi((WorkAddress & 0xFF00) >> 8);
 80058d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058d8:	0a1b      	lsrs	r3, r3, #8
 80058da:	b2db      	uxtb	r3, r3
 80058dc:	4618      	mov	r0, r3
 80058de:	f7ff fd93 	bl	8005408 <W25qxx_Spi>
        W25qxx_Spi(WorkAddress & 0xFF);
 80058e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	4618      	mov	r0, r3
 80058e8:	f7ff fd8e 	bl	8005408 <W25qxx_Spi>
        //W25qxx_Spi(0);
        HAL_SPI_Receive(portFLASH, pBuffer, sizeof(pBuffer), min_wait_ms);
 80058ec:	4b3e      	ldr	r3, [pc, #248]	; (80059e8 <W25qxx_IsEmptySector+0x180>)
 80058ee:	6818      	ldr	r0, [r3, #0]
 80058f0:	23fa      	movs	r3, #250	; 0xfa
 80058f2:	f107 0114 	add.w	r1, r7, #20
 80058f6:	2220      	movs	r2, #32
 80058f8:	f004 fe19 	bl	800a52e <HAL_SPI_Receive>
        W25_UNSELECT();
 80058fc:	f7ff fd78 	bl	80053f0 <W25_UNSELECT>

        for (uint8_t x = 0; x < sizeof(pBuffer); x++) {
 8005900:	2300      	movs	r3, #0
 8005902:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005906:	e00c      	b.n	8005922 <W25qxx_IsEmptySector+0xba>
            if (pBuffer[x] != 0xFF) goto NOT_EMPTY;
 8005908:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800590c:	3340      	adds	r3, #64	; 0x40
 800590e:	443b      	add	r3, r7
 8005910:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8005914:	2bff      	cmp	r3, #255	; 0xff
 8005916:	d159      	bne.n	80059cc <W25qxx_IsEmptySector+0x164>
        for (uint8_t x = 0; x < sizeof(pBuffer); x++) {
 8005918:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800591c:	3301      	adds	r3, #1
 800591e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005922:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005926:	2b1f      	cmp	r3, #31
 8005928:	d9ee      	bls.n	8005908 <W25qxx_IsEmptySector+0xa0>
    for ( i = OffsetInByte; i < w25qxx.SectorSize; i += sizeof(pBuffer)) {
 800592a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800592c:	3320      	adds	r3, #32
 800592e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005930:	4b2c      	ldr	r3, [pc, #176]	; (80059e4 <W25qxx_IsEmptySector+0x17c>)
 8005932:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8005936:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005938:	429a      	cmp	r2, r3
 800593a:	d3b8      	bcc.n	80058ae <W25qxx_IsEmptySector+0x46>
        }
    }
    if ((w25qxx.SectorSize + OffsetInByte) % sizeof(pBuffer) != 0) {
 800593c:	4b29      	ldr	r3, [pc, #164]	; (80059e4 <W25qxx_IsEmptySector+0x17c>)
 800593e:	f8d3 200f 	ldr.w	r2, [r3, #15]
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	4413      	add	r3, r2
 8005946:	f003 031f 	and.w	r3, r3, #31
 800594a:	2b00      	cmp	r3, #0
 800594c:	d038      	beq.n	80059c0 <W25qxx_IsEmptySector+0x158>
        i -= sizeof(pBuffer);
 800594e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005950:	3b20      	subs	r3, #32
 8005952:	63fb      	str	r3, [r7, #60]	; 0x3c
        for( ; i < w25qxx.SectorSize; i++) {
 8005954:	e02e      	b.n	80059b4 <W25qxx_IsEmptySector+0x14c>

            W25_SELECT();
 8005956:	f7ff fd3f 	bl	80053d8 <W25_SELECT>
            WorkAddress = (i + Sector_Address * w25qxx.SectorSize);
 800595a:	4b22      	ldr	r3, [pc, #136]	; (80059e4 <W25qxx_IsEmptySector+0x17c>)
 800595c:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8005960:	68fa      	ldr	r2, [r7, #12]
 8005962:	fb02 f303 	mul.w	r3, r2, r3
 8005966:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005968:	4413      	add	r3, r2
 800596a:	637b      	str	r3, [r7, #52]	; 0x34
            W25qxx_Spi(DATA_READ);//FAST_READ);
 800596c:	2003      	movs	r0, #3
 800596e:	f7ff fd4b 	bl	8005408 <W25qxx_Spi>
            //if (w25qxx.ID >= W25Q256) W25qxx_Spi((WorkAddress & 0xFF000000) >> 24);
            W25qxx_Spi((WorkAddress & 0xFF0000) >> 16);
 8005972:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005974:	0c1b      	lsrs	r3, r3, #16
 8005976:	b2db      	uxtb	r3, r3
 8005978:	4618      	mov	r0, r3
 800597a:	f7ff fd45 	bl	8005408 <W25qxx_Spi>
            W25qxx_Spi((WorkAddress & 0xFF00) >> 8);
 800597e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005980:	0a1b      	lsrs	r3, r3, #8
 8005982:	b2db      	uxtb	r3, r3
 8005984:	4618      	mov	r0, r3
 8005986:	f7ff fd3f 	bl	8005408 <W25qxx_Spi>
            W25qxx_Spi(WorkAddress & 0xFF);
 800598a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800598c:	b2db      	uxtb	r3, r3
 800598e:	4618      	mov	r0, r3
 8005990:	f7ff fd3a 	bl	8005408 <W25qxx_Spi>
            //W25qxx_Spi(0);
            HAL_SPI_Receive(portFLASH, pBuffer, 1, min_wait_ms);
 8005994:	4b14      	ldr	r3, [pc, #80]	; (80059e8 <W25qxx_IsEmptySector+0x180>)
 8005996:	6818      	ldr	r0, [r3, #0]
 8005998:	23fa      	movs	r3, #250	; 0xfa
 800599a:	f107 0114 	add.w	r1, r7, #20
 800599e:	2201      	movs	r2, #1
 80059a0:	f004 fdc5 	bl	800a52e <HAL_SPI_Receive>
            W25_UNSELECT();
 80059a4:	f7ff fd24 	bl	80053f0 <W25_UNSELECT>

            if (pBuffer[0] != 0xFF) goto NOT_EMPTY;
 80059a8:	7d3b      	ldrb	r3, [r7, #20]
 80059aa:	2bff      	cmp	r3, #255	; 0xff
 80059ac:	d110      	bne.n	80059d0 <W25qxx_IsEmptySector+0x168>
        for( ; i < w25qxx.SectorSize; i++) {
 80059ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059b0:	3301      	adds	r3, #1
 80059b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059b4:	4b0b      	ldr	r3, [pc, #44]	; (80059e4 <W25qxx_IsEmptySector+0x17c>)
 80059b6:	f8d3 300f 	ldr.w	r3, [r3, #15]
 80059ba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80059bc:	429a      	cmp	r2, r3
 80059be:	d3ca      	bcc.n	8005956 <W25qxx_IsEmptySector+0xee>
#ifdef W25QXX_DEBUG
    Report(1, "w25qxx CheckSector is Empty in %u ms\r\n", HAL_GetTick() - StartTime);
    //W25qxx_Delay(100);
#endif

    w25qxx.Lock = 0;
 80059c0:	4b08      	ldr	r3, [pc, #32]	; (80059e4 <W25qxx_IsEmptySector+0x17c>)
 80059c2:	2200      	movs	r2, #0
 80059c4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

    return true;
 80059c8:	2301      	movs	r3, #1
 80059ca:	e007      	b.n	80059dc <W25qxx_IsEmptySector+0x174>
            if (pBuffer[x] != 0xFF) goto NOT_EMPTY;
 80059cc:	bf00      	nop
 80059ce:	e000      	b.n	80059d2 <W25qxx_IsEmptySector+0x16a>
            if (pBuffer[0] != 0xFF) goto NOT_EMPTY;
 80059d0:	bf00      	nop
#ifdef W25QXX_DEBUG
    Report(1, "w25qxx CheckSector is Not Empty in %u ms\r\n", HAL_GetTick() - StartTime);
    //W25qxx_Delay(100);
#endif

    w25qxx.Lock = 0;
 80059d2:	4b04      	ldr	r3, [pc, #16]	; (80059e4 <W25qxx_IsEmptySector+0x17c>)
 80059d4:	2200      	movs	r2, #0
 80059d6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

    return false;
 80059da:	2300      	movs	r3, #0
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3740      	adds	r7, #64	; 0x40
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}
 80059e4:	20002cb4 	.word	0x20002cb4
 80059e8:	2000000c 	.word	0x2000000c

080059ec <W25qxx_WritePage>:

    w25qxx.Lock = 0;
}
//------------------------------------------------------------------------------------------
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b086      	sub	sp, #24
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	60f8      	str	r0, [r7, #12]
 80059f4:	60b9      	str	r1, [r7, #8]
 80059f6:	607a      	str	r2, [r7, #4]
 80059f8:	603b      	str	r3, [r7, #0]
    while (w25qxx.Lock) W25qxx_Delay(1);
 80059fa:	e002      	b.n	8005a02 <W25qxx_WritePage+0x16>
 80059fc:	2001      	movs	r0, #1
 80059fe:	f000 fad9 	bl	8005fb4 <HAL_Delay>
 8005a02:	4b4d      	ldr	r3, [pc, #308]	; (8005b38 <W25qxx_WritePage+0x14c>)
 8005a04:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d1f7      	bne.n	80059fc <W25qxx_WritePage+0x10>

    w25qxx.Lock = 1;
 8005a0c:	4b4a      	ldr	r3, [pc, #296]	; (8005b38 <W25qxx_WritePage+0x14c>)
 8005a0e:	2201      	movs	r2, #1
 8005a10:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

    if ( ((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || !NumByteToWrite_up_to_PageSize )
 8005a14:	683a      	ldr	r2, [r7, #0]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	4413      	add	r3, r2
 8005a1a:	4a47      	ldr	r2, [pc, #284]	; (8005b38 <W25qxx_WritePage+0x14c>)
 8005a1c:	f8b2 2009 	ldrh.w	r2, [r2, #9]
 8005a20:	b292      	uxth	r2, r2
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d802      	bhi.n	8005a2c <W25qxx_WritePage+0x40>
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d107      	bne.n	8005a3c <W25qxx_WritePage+0x50>
                NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8005a2c:	4b42      	ldr	r3, [pc, #264]	; (8005b38 <W25qxx_WritePage+0x14c>)
 8005a2e:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8005a32:	b29b      	uxth	r3, r3
 8005a34:	461a      	mov	r2, r3
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	1ad3      	subs	r3, r2, r3
 8005a3a:	603b      	str	r3, [r7, #0]
    if ( (OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize )
 8005a3c:	687a      	ldr	r2, [r7, #4]
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	4413      	add	r3, r2
 8005a42:	4a3d      	ldr	r2, [pc, #244]	; (8005b38 <W25qxx_WritePage+0x14c>)
 8005a44:	f8b2 2009 	ldrh.w	r2, [r2, #9]
 8005a48:	b292      	uxth	r2, r2
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d907      	bls.n	8005a5e <W25qxx_WritePage+0x72>
                NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8005a4e:	4b3a      	ldr	r3, [pc, #232]	; (8005b38 <W25qxx_WritePage+0x14c>)
 8005a50:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8005a54:	b29b      	uxth	r3, r3
 8005a56:	461a      	mov	r2, r3
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	1ad3      	subs	r3, r2, r3
 8005a5c:	603b      	str	r3, [r7, #0]
    Report(1, "%s WritePage:0x%X(%u), Offset:%u ,Writes %u Bytes, begin...\r\n",
                 __func__, Page_Address, Page_Address, OffsetInByte, NumByteToWrite_up_to_PageSize);
    uint32_t StartTime = HAL_GetTick();
#endif

    W25qxx_WaitForWriteEnd();
 8005a5e:	f7ff fd99 	bl	8005594 <W25qxx_WaitForWriteEnd>
    W25qxx_WriteEnable();
 8005a62:	f7ff fd4b 	bl	80054fc <W25qxx_WriteEnable>

    Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 8005a66:	4b34      	ldr	r3, [pc, #208]	; (8005b38 <W25qxx_WritePage+0x14c>)
 8005a68:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8005a6c:	b29b      	uxth	r3, r3
 8005a6e:	461a      	mov	r2, r3
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	fb02 f303 	mul.w	r3, r2, r3
 8005a76:	687a      	ldr	r2, [r7, #4]
 8005a78:	4413      	add	r3, r2
 8005a7a:	60bb      	str	r3, [r7, #8]
    W25qxx_Spi((Page_Address & 0xFF00) >> 8);
    W25qxx_Spi(Page_Address&0xFF);
    HAL_SPI_Transmit(portFLASH, pBuffer, NumByteToWrite_up_to_PageSize, min_wait_ms);
    W25_UNSELECT();*/

    uint16_t lens = NumByteToWrite_up_to_PageSize + PAGE_HDR_BYTES;
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	3304      	adds	r3, #4
 8005a82:	82fb      	strh	r3, [r7, #22]
    int idx = 0;
 8005a84:	2300      	movs	r3, #0
 8005a86:	613b      	str	r3, [r7, #16]
    pageTmp[idx++] = PAGE_PROG;
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	1c5a      	adds	r2, r3, #1
 8005a8c:	613a      	str	r2, [r7, #16]
 8005a8e:	4a2b      	ldr	r2, [pc, #172]	; (8005b3c <W25qxx_WritePage+0x150>)
 8005a90:	2102      	movs	r1, #2
 8005a92:	54d1      	strb	r1, [r2, r3]
    //if (w25qxx.ID >= W25Q256) pageTmp[idx++] = (Page_Address & 0xFF000000) >> 24;
    pageTmp[idx++] = (Page_Address & 0xFF0000) >> 16;
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	0c19      	lsrs	r1, r3, #16
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	1c5a      	adds	r2, r3, #1
 8005a9c:	613a      	str	r2, [r7, #16]
 8005a9e:	b2c9      	uxtb	r1, r1
 8005aa0:	4a26      	ldr	r2, [pc, #152]	; (8005b3c <W25qxx_WritePage+0x150>)
 8005aa2:	54d1      	strb	r1, [r2, r3]
    pageTmp[idx++] = (Page_Address& 0xFF00) >> 8;
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	0a19      	lsrs	r1, r3, #8
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	1c5a      	adds	r2, r3, #1
 8005aac:	613a      	str	r2, [r7, #16]
 8005aae:	b2c9      	uxtb	r1, r1
 8005ab0:	4a22      	ldr	r2, [pc, #136]	; (8005b3c <W25qxx_WritePage+0x150>)
 8005ab2:	54d1      	strb	r1, [r2, r3]
    pageTmp[idx++] = Page_Address & 0xFF;
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	1c5a      	adds	r2, r3, #1
 8005ab8:	613a      	str	r2, [r7, #16]
 8005aba:	68ba      	ldr	r2, [r7, #8]
 8005abc:	b2d1      	uxtb	r1, r2
 8005abe:	4a1f      	ldr	r2, [pc, #124]	; (8005b3c <W25qxx_WritePage+0x150>)
 8005ac0:	54d1      	strb	r1, [r2, r3]
    memcpy(&pageTmp[PAGE_HDR_BYTES], pBuffer, NumByteToWrite_up_to_PageSize);//w25qxx.PageSize);
 8005ac2:	683a      	ldr	r2, [r7, #0]
 8005ac4:	68f9      	ldr	r1, [r7, #12]
 8005ac6:	481e      	ldr	r0, [pc, #120]	; (8005b40 <W25qxx_WritePage+0x154>)
 8005ac8:	f008 f918 	bl	800dcfc <memcpy>

    spiRdy = 0;
 8005acc:	4b1d      	ldr	r3, [pc, #116]	; (8005b44 <W25qxx_WritePage+0x158>)
 8005ace:	2200      	movs	r2, #0
 8005ad0:	701a      	strb	r2, [r3, #0]

w25_withDMA = 1;
 8005ad2:	4b1d      	ldr	r3, [pc, #116]	; (8005b48 <W25qxx_WritePage+0x15c>)
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	701a      	strb	r2, [r3, #0]
    W25_SELECT();
 8005ad8:	f7ff fc7e 	bl	80053d8 <W25_SELECT>
    if (w25_withDMA) {
 8005adc:	4b1a      	ldr	r3, [pc, #104]	; (8005b48 <W25qxx_WritePage+0x15c>)
 8005ade:	781b      	ldrb	r3, [r3, #0]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d012      	beq.n	8005b0a <W25qxx_WritePage+0x11e>
    	HAL_SPI_Transmit_DMA(portFLASH, pageTmp, lens);
 8005ae4:	4b19      	ldr	r3, [pc, #100]	; (8005b4c <W25qxx_WritePage+0x160>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	8afa      	ldrh	r2, [r7, #22]
 8005aea:	4914      	ldr	r1, [pc, #80]	; (8005b3c <W25qxx_WritePage+0x150>)
 8005aec:	4618      	mov	r0, r3
 8005aee:	f005 f861 	bl	800abb4 <HAL_SPI_Transmit_DMA>
    	while (!spiRdy) {
 8005af2:	e002      	b.n	8005afa <W25qxx_WritePage+0x10e>
    		W25qxx_Delay(1);
 8005af4:	2001      	movs	r0, #1
 8005af6:	f000 fa5d 	bl	8005fb4 <HAL_Delay>
    	while (!spiRdy) {
 8005afa:	4b12      	ldr	r3, [pc, #72]	; (8005b44 <W25qxx_WritePage+0x158>)
 8005afc:	781b      	ldrb	r3, [r3, #0]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d0f8      	beq.n	8005af4 <W25qxx_WritePage+0x108>
    	}
w25_withDMA = 0;
 8005b02:	4b11      	ldr	r3, [pc, #68]	; (8005b48 <W25qxx_WritePage+0x15c>)
 8005b04:	2200      	movs	r2, #0
 8005b06:	701a      	strb	r2, [r3, #0]
 8005b08:	e00d      	b.n	8005b26 <W25qxx_WritePage+0x13a>
    } else {
    	HAL_SPI_Transmit(portFLASH, pageTmp, lens, min_wait_ms);
 8005b0a:	4b10      	ldr	r3, [pc, #64]	; (8005b4c <W25qxx_WritePage+0x160>)
 8005b0c:	6818      	ldr	r0, [r3, #0]
 8005b0e:	23fa      	movs	r3, #250	; 0xfa
 8005b10:	8afa      	ldrh	r2, [r7, #22]
 8005b12:	490a      	ldr	r1, [pc, #40]	; (8005b3c <W25qxx_WritePage+0x150>)
 8005b14:	f004 fb9d 	bl	800a252 <HAL_SPI_Transmit>

    	W25_UNSELECT();
 8005b18:	f7ff fc6a 	bl	80053f0 <W25_UNSELECT>

    	W25qxx_WaitForWriteEnd();
 8005b1c:	f7ff fd3a 	bl	8005594 <W25qxx_WaitForWriteEnd>

    	spiRdy = 1;
 8005b20:	4b08      	ldr	r3, [pc, #32]	; (8005b44 <W25qxx_WritePage+0x158>)
 8005b22:	2201      	movs	r2, #1
 8005b24:	701a      	strb	r2, [r3, #0]
    	Report(0, "\r\n");
    	Report(1, "%s done after %u ms\r\n", __func__, StartTime);
#endif
    }

    w25qxx.Lock = 0;
 8005b26:	4b04      	ldr	r3, [pc, #16]	; (8005b38 <W25qxx_WritePage+0x14c>)
 8005b28:	2200      	movs	r2, #0
 8005b2a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 8005b2e:	bf00      	nop
 8005b30:	3718      	adds	r7, #24
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}
 8005b36:	bf00      	nop
 8005b38:	20002cb4 	.word	0x20002cb4
 8005b3c:	20002cdc 	.word	0x20002cdc
 8005b40:	20002ce0 	.word	0x20002ce0
 8005b44:	200001a8 	.word	0x200001a8
 8005b48:	20002de1 	.word	0x20002de1
 8005b4c:	2000000c 	.word	0x2000000c

08005b50 <W25qxx_WriteSector>:
//------------------------------------------------------------------------------------------
void W25qxx_WriteSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_SectorSize)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b088      	sub	sp, #32
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	60f8      	str	r0, [r7, #12]
 8005b58:	60b9      	str	r1, [r7, #8]
 8005b5a:	607a      	str	r2, [r7, #4]
 8005b5c:	603b      	str	r3, [r7, #0]
    if ((NumByteToWrite_up_to_SectorSize > w25qxx.SectorSize) || !NumByteToWrite_up_to_SectorSize)
 8005b5e:	4b31      	ldr	r3, [pc, #196]	; (8005c24 <W25qxx_WriteSector+0xd4>)
 8005b60:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8005b64:	683a      	ldr	r2, [r7, #0]
 8005b66:	429a      	cmp	r2, r3
 8005b68:	d802      	bhi.n	8005b70 <W25qxx_WriteSector+0x20>
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d103      	bne.n	8005b78 <W25qxx_WriteSector+0x28>
                NumByteToWrite_up_to_SectorSize = w25qxx.SectorSize;
 8005b70:	4b2c      	ldr	r3, [pc, #176]	; (8005c24 <W25qxx_WriteSector+0xd4>)
 8005b72:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8005b76:	603b      	str	r3, [r7, #0]
    Report(1, "%s WriteSector:0x%X(%u), Offset:%u ,Write %u Bytes, begin...\r\n",
                 __func__, Sector_Address, Sector_Address, OffsetInByte, NumByteToWrite_up_to_SectorSize);
    //W25qxx_Delay(100);
#endif

    if (OffsetInByte >= w25qxx.SectorSize) {
 8005b78:	4b2a      	ldr	r3, [pc, #168]	; (8005c24 <W25qxx_WriteSector+0xd4>)
 8005b7a:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8005b7e:	687a      	ldr	r2, [r7, #4]
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d24b      	bcs.n	8005c1c <W25qxx_WriteSector+0xcc>
        return;
    }

    int32_t BytesToWrite;
    uint32_t LocalOffset, StartPage;
    if ((OffsetInByte + NumByteToWrite_up_to_SectorSize) > w25qxx.SectorSize)
 8005b84:	687a      	ldr	r2, [r7, #4]
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	441a      	add	r2, r3
 8005b8a:	4b26      	ldr	r3, [pc, #152]	; (8005c24 <W25qxx_WriteSector+0xd4>)
 8005b8c:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d906      	bls.n	8005ba2 <W25qxx_WriteSector+0x52>
        BytesToWrite = w25qxx.SectorSize - OffsetInByte;
 8005b94:	4b23      	ldr	r3, [pc, #140]	; (8005c24 <W25qxx_WriteSector+0xd4>)
 8005b96:	f8d3 200f 	ldr.w	r2, [r3, #15]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	1ad3      	subs	r3, r2, r3
 8005b9e:	61fb      	str	r3, [r7, #28]
 8005ba0:	e001      	b.n	8005ba6 <W25qxx_WriteSector+0x56>
    else
        BytesToWrite = NumByteToWrite_up_to_SectorSize;
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	61fb      	str	r3, [r7, #28]
    StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8005ba6:	68b8      	ldr	r0, [r7, #8]
 8005ba8:	f7ff fe46 	bl	8005838 <W25qxx_SectorToPage>
 8005bac:	4602      	mov	r2, r0
 8005bae:	4b1d      	ldr	r3, [pc, #116]	; (8005c24 <W25qxx_WriteSector+0xd4>)
 8005bb0:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	4619      	mov	r1, r3
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	fbb3 f3f1 	udiv	r3, r3, r1
 8005bbe:	4413      	add	r3, r2
 8005bc0:	617b      	str	r3, [r7, #20]
    LocalOffset = OffsetInByte % w25qxx.PageSize;
 8005bc2:	4b18      	ldr	r3, [pc, #96]	; (8005c24 <W25qxx_WriteSector+0xd4>)
 8005bc4:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	461a      	mov	r2, r3
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	fbb3 f1f2 	udiv	r1, r3, r2
 8005bd2:	fb01 f202 	mul.w	r2, r1, r2
 8005bd6:	1a9b      	subs	r3, r3, r2
 8005bd8:	61bb      	str	r3, [r7, #24]

    do
    {
        W25qxx_WritePage(pBuffer, StartPage, LocalOffset, BytesToWrite);
 8005bda:	69fb      	ldr	r3, [r7, #28]
 8005bdc:	69ba      	ldr	r2, [r7, #24]
 8005bde:	6979      	ldr	r1, [r7, #20]
 8005be0:	68f8      	ldr	r0, [r7, #12]
 8005be2:	f7ff ff03 	bl	80059ec <W25qxx_WritePage>
        StartPage++;
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	3301      	adds	r3, #1
 8005bea:	617b      	str	r3, [r7, #20]
        BytesToWrite -= w25qxx.PageSize - LocalOffset;
 8005bec:	4b0d      	ldr	r3, [pc, #52]	; (8005c24 <W25qxx_WriteSector+0xd4>)
 8005bee:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8005bf2:	b29b      	uxth	r3, r3
 8005bf4:	461a      	mov	r2, r3
 8005bf6:	69bb      	ldr	r3, [r7, #24]
 8005bf8:	1a9a      	subs	r2, r3, r2
 8005bfa:	69fb      	ldr	r3, [r7, #28]
 8005bfc:	4413      	add	r3, r2
 8005bfe:	61fb      	str	r3, [r7, #28]
        pBuffer += w25qxx.PageSize;
 8005c00:	4b08      	ldr	r3, [pc, #32]	; (8005c24 <W25qxx_WriteSector+0xd4>)
 8005c02:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8005c06:	b29b      	uxth	r3, r3
 8005c08:	461a      	mov	r2, r3
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	4413      	add	r3, r2
 8005c0e:	60fb      	str	r3, [r7, #12]
        LocalOffset = 0;
 8005c10:	2300      	movs	r3, #0
 8005c12:	61bb      	str	r3, [r7, #24]
    } while(BytesToWrite > 0);
 8005c14:	69fb      	ldr	r3, [r7, #28]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	dcdf      	bgt.n	8005bda <W25qxx_WriteSector+0x8a>
 8005c1a:	e000      	b.n	8005c1e <W25qxx_WriteSector+0xce>
        return;
 8005c1c:	bf00      	nop
#ifdef W25QXX_DEBUG
    Report(1, "%s Done\r\n", __func__);
    //W25qxx_Delay(100);
#endif

}
 8005c1e:	3720      	adds	r7, #32
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}
 8005c24:	20002cb4 	.word	0x20002cb4

08005c28 <W25qxx_ReadPage>:

    w25qxx.Lock = 0;
}
//------------------------------------------------------------------------------------------
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b088      	sub	sp, #32
 8005c2c:	af02      	add	r7, sp, #8
 8005c2e:	60f8      	str	r0, [r7, #12]
 8005c30:	60b9      	str	r1, [r7, #8]
 8005c32:	607a      	str	r2, [r7, #4]
 8005c34:	603b      	str	r3, [r7, #0]
    while (w25qxx.Lock) W25qxx_Delay(1);
 8005c36:	e002      	b.n	8005c3e <W25qxx_ReadPage+0x16>
 8005c38:	2001      	movs	r0, #1
 8005c3a:	f000 f9bb 	bl	8005fb4 <HAL_Delay>
 8005c3e:	4b51      	ldr	r3, [pc, #324]	; (8005d84 <W25qxx_ReadPage+0x15c>)
 8005c40:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d1f7      	bne.n	8005c38 <W25qxx_ReadPage+0x10>

    w25qxx.Lock = 1;
 8005c48:	4b4e      	ldr	r3, [pc, #312]	; (8005d84 <W25qxx_ReadPage+0x15c>)
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

    if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || !NumByteToRead_up_to_PageSize)
 8005c50:	4b4c      	ldr	r3, [pc, #304]	; (8005d84 <W25qxx_ReadPage+0x15c>)
 8005c52:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8005c56:	b29b      	uxth	r3, r3
 8005c58:	461a      	mov	r2, r3
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d802      	bhi.n	8005c66 <W25qxx_ReadPage+0x3e>
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d104      	bne.n	8005c70 <W25qxx_ReadPage+0x48>
        NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 8005c66:	4b47      	ldr	r3, [pc, #284]	; (8005d84 <W25qxx_ReadPage+0x15c>)
 8005c68:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8005c6c:	b29b      	uxth	r3, r3
 8005c6e:	603b      	str	r3, [r7, #0]
    if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 8005c70:	687a      	ldr	r2, [r7, #4]
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	4413      	add	r3, r2
 8005c76:	4a43      	ldr	r2, [pc, #268]	; (8005d84 <W25qxx_ReadPage+0x15c>)
 8005c78:	f8b2 2009 	ldrh.w	r2, [r2, #9]
 8005c7c:	b292      	uxth	r2, r2
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d907      	bls.n	8005c92 <W25qxx_ReadPage+0x6a>
        NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8005c82:	4b40      	ldr	r3, [pc, #256]	; (8005d84 <W25qxx_ReadPage+0x15c>)
 8005c84:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8005c88:	b29b      	uxth	r3, r3
 8005c8a:	461a      	mov	r2, r3
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	1ad3      	subs	r3, r2, r3
 8005c90:	603b      	str	r3, [r7, #0]
                 __func__, Page_Address, Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
    //W25qxx_Delay(100);
    uint32_t StartTime = HAL_GetTick();
#endif

    Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 8005c92:	4b3c      	ldr	r3, [pc, #240]	; (8005d84 <W25qxx_ReadPage+0x15c>)
 8005c94:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8005c98:	b29b      	uxth	r3, r3
 8005c9a:	461a      	mov	r2, r3
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	fb02 f303 	mul.w	r3, r2, r3
 8005ca2:	687a      	ldr	r2, [r7, #4]
 8005ca4:	4413      	add	r3, r2
 8005ca6:	60bb      	str	r3, [r7, #8]
    W25qxx_Spi(Page_Address & 0xFF);
    //W25qxx_Spi(0);
    HAL_SPI_Receive(portFLASH, pBuffer, NumByteToRead_up_to_PageSize, min_wait_ms);
    W25_UNSELECT();
    */
    memset(pageTmp, 0, sizeof(pageTmp));
 8005ca8:	f240 1205 	movw	r2, #261	; 0x105
 8005cac:	2100      	movs	r1, #0
 8005cae:	4836      	ldr	r0, [pc, #216]	; (8005d88 <W25qxx_ReadPage+0x160>)
 8005cb0:	f008 f832 	bl	800dd18 <memset>
    uint16_t lens = NumByteToRead_up_to_PageSize + PAGE_HDR_BYTES;// + 1;
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	b29b      	uxth	r3, r3
 8005cb8:	3304      	adds	r3, #4
 8005cba:	82fb      	strh	r3, [r7, #22]
    int idx = 0;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	613b      	str	r3, [r7, #16]
    pageTmp[idx++] = DATA_READ;//FAST_READ;
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	1c5a      	adds	r2, r3, #1
 8005cc4:	613a      	str	r2, [r7, #16]
 8005cc6:	4a30      	ldr	r2, [pc, #192]	; (8005d88 <W25qxx_ReadPage+0x160>)
 8005cc8:	2103      	movs	r1, #3
 8005cca:	54d1      	strb	r1, [r2, r3]
    //if (w25qxx.ID >= W25Q256) pageTmp[idx++] = (Page_Address & 0xFF000000) >> 24;
    pageTmp[idx++] = (Page_Address & 0xFF0000) >> 16;
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	0c19      	lsrs	r1, r3, #16
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	1c5a      	adds	r2, r3, #1
 8005cd4:	613a      	str	r2, [r7, #16]
 8005cd6:	b2c9      	uxtb	r1, r1
 8005cd8:	4a2b      	ldr	r2, [pc, #172]	; (8005d88 <W25qxx_ReadPage+0x160>)
 8005cda:	54d1      	strb	r1, [r2, r3]
    pageTmp[idx++] = (Page_Address& 0xFF00) >> 8;
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	0a19      	lsrs	r1, r3, #8
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	1c5a      	adds	r2, r3, #1
 8005ce4:	613a      	str	r2, [r7, #16]
 8005ce6:	b2c9      	uxtb	r1, r1
 8005ce8:	4a27      	ldr	r2, [pc, #156]	; (8005d88 <W25qxx_ReadPage+0x160>)
 8005cea:	54d1      	strb	r1, [r2, r3]
    pageTmp[idx++] = Page_Address & 0xFF;
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	1c5a      	adds	r2, r3, #1
 8005cf0:	613a      	str	r2, [r7, #16]
 8005cf2:	68ba      	ldr	r2, [r7, #8]
 8005cf4:	b2d1      	uxtb	r1, r2
 8005cf6:	4a24      	ldr	r2, [pc, #144]	; (8005d88 <W25qxx_ReadPage+0x160>)
 8005cf8:	54d1      	strb	r1, [r2, r3]
    //pageTmp[idx++] = 0;
    spiRdy = 0;
 8005cfa:	4b24      	ldr	r3, [pc, #144]	; (8005d8c <W25qxx_ReadPage+0x164>)
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	701a      	strb	r2, [r3, #0]

w25_withDMA = 1;
 8005d00:	4b23      	ldr	r3, [pc, #140]	; (8005d90 <W25qxx_ReadPage+0x168>)
 8005d02:	2201      	movs	r2, #1
 8005d04:	701a      	strb	r2, [r3, #0]
    W25_SELECT();
 8005d06:	f7ff fb67 	bl	80053d8 <W25_SELECT>
    if (w25_withDMA) {
 8005d0a:	4b21      	ldr	r3, [pc, #132]	; (8005d90 <W25qxx_ReadPage+0x168>)
 8005d0c:	781b      	ldrb	r3, [r3, #0]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d012      	beq.n	8005d38 <W25qxx_ReadPage+0x110>
    	HAL_SPI_TransmitReceive_DMA(portFLASH, pageTmp, pageTmp, lens);
 8005d12:	4b20      	ldr	r3, [pc, #128]	; (8005d94 <W25qxx_ReadPage+0x16c>)
 8005d14:	6818      	ldr	r0, [r3, #0]
 8005d16:	8afb      	ldrh	r3, [r7, #22]
 8005d18:	4a1b      	ldr	r2, [pc, #108]	; (8005d88 <W25qxx_ReadPage+0x160>)
 8005d1a:	491b      	ldr	r1, [pc, #108]	; (8005d88 <W25qxx_ReadPage+0x160>)
 8005d1c:	f005 f83e 	bl	800ad9c <HAL_SPI_TransmitReceive_DMA>
    	while (!spiRdy) {
 8005d20:	e002      	b.n	8005d28 <W25qxx_ReadPage+0x100>
    		W25qxx_Delay(1);
 8005d22:	2001      	movs	r0, #1
 8005d24:	f000 f946 	bl	8005fb4 <HAL_Delay>
    	while (!spiRdy) {
 8005d28:	4b18      	ldr	r3, [pc, #96]	; (8005d8c <W25qxx_ReadPage+0x164>)
 8005d2a:	781b      	ldrb	r3, [r3, #0]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d0f8      	beq.n	8005d22 <W25qxx_ReadPage+0xfa>
    	}
w25_withDMA = 0;
 8005d30:	4b17      	ldr	r3, [pc, #92]	; (8005d90 <W25qxx_ReadPage+0x168>)
 8005d32:	2200      	movs	r2, #0
 8005d34:	701a      	strb	r2, [r3, #0]
 8005d36:	e017      	b.n	8005d68 <W25qxx_ReadPage+0x140>
    } else {
    	if (HAL_SPI_TransmitReceive(portFLASH, pageTmp, pageTmp, lens, min_wait_ms) != HAL_OK) devError |= devSPI;
 8005d38:	4b16      	ldr	r3, [pc, #88]	; (8005d94 <W25qxx_ReadPage+0x16c>)
 8005d3a:	6818      	ldr	r0, [r3, #0]
 8005d3c:	22fa      	movs	r2, #250	; 0xfa
 8005d3e:	8afb      	ldrh	r3, [r7, #22]
 8005d40:	9200      	str	r2, [sp, #0]
 8005d42:	4a11      	ldr	r2, [pc, #68]	; (8005d88 <W25qxx_ReadPage+0x160>)
 8005d44:	4910      	ldr	r1, [pc, #64]	; (8005d88 <W25qxx_ReadPage+0x160>)
 8005d46:	f004 fd22 	bl	800a78e <HAL_SPI_TransmitReceive>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d006      	beq.n	8005d5e <W25qxx_ReadPage+0x136>
 8005d50:	4b11      	ldr	r3, [pc, #68]	; (8005d98 <W25qxx_ReadPage+0x170>)
 8005d52:	881b      	ldrh	r3, [r3, #0]
 8005d54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d58:	b29a      	uxth	r2, r3
 8005d5a:	4b0f      	ldr	r3, [pc, #60]	; (8005d98 <W25qxx_ReadPage+0x170>)
 8005d5c:	801a      	strh	r2, [r3, #0]
    	W25_UNSELECT();
 8005d5e:	f7ff fb47 	bl	80053f0 <W25_UNSELECT>

    	spiRdy = 1;
 8005d62:	4b0a      	ldr	r3, [pc, #40]	; (8005d8c <W25qxx_ReadPage+0x164>)
 8005d64:	2201      	movs	r2, #1
 8005d66:	701a      	strb	r2, [r3, #0]
    }
	memcpy(pBuffer, &pageTmp[PAGE_HDR_BYTES], NumByteToRead_up_to_PageSize);//w25qxx.PageSize);
 8005d68:	683a      	ldr	r2, [r7, #0]
 8005d6a:	490c      	ldr	r1, [pc, #48]	; (8005d9c <W25qxx_ReadPage+0x174>)
 8005d6c:	68f8      	ldr	r0, [r7, #12]
 8005d6e:	f007 ffc5 	bl	800dcfc <memcpy>
    	Report(0, "\r\n");
    	Report(1, "%s done after %u ms\r\n", __func__, StartTime);
#endif


    w25qxx.Lock = 0;
 8005d72:	4b04      	ldr	r3, [pc, #16]	; (8005d84 <W25qxx_ReadPage+0x15c>)
 8005d74:	2200      	movs	r2, #0
 8005d76:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 8005d7a:	bf00      	nop
 8005d7c:	3718      	adds	r7, #24
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}
 8005d82:	bf00      	nop
 8005d84:	20002cb4 	.word	0x20002cb4
 8005d88:	20002cdc 	.word	0x20002cdc
 8005d8c:	200001a8 	.word	0x200001a8
 8005d90:	20002de1 	.word	0x20002de1
 8005d94:	2000000c 	.word	0x2000000c
 8005d98:	20001450 	.word	0x20001450
 8005d9c:	20002ce0 	.word	0x20002ce0

08005da0 <W25qxx_ReadSector>:
//------------------------------------------------------------------------------------------
void W25qxx_ReadSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_SectorSize)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b088      	sub	sp, #32
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	60f8      	str	r0, [r7, #12]
 8005da8:	60b9      	str	r1, [r7, #8]
 8005daa:	607a      	str	r2, [r7, #4]
 8005dac:	603b      	str	r3, [r7, #0]
    if ((NumByteToRead_up_to_SectorSize > w25qxx.SectorSize) || !NumByteToRead_up_to_SectorSize)
 8005dae:	4b31      	ldr	r3, [pc, #196]	; (8005e74 <W25qxx_ReadSector+0xd4>)
 8005db0:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8005db4:	683a      	ldr	r2, [r7, #0]
 8005db6:	429a      	cmp	r2, r3
 8005db8:	d802      	bhi.n	8005dc0 <W25qxx_ReadSector+0x20>
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d103      	bne.n	8005dc8 <W25qxx_ReadSector+0x28>
                NumByteToRead_up_to_SectorSize = w25qxx.SectorSize;
 8005dc0:	4b2c      	ldr	r3, [pc, #176]	; (8005e74 <W25qxx_ReadSector+0xd4>)
 8005dc2:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8005dc6:	603b      	str	r3, [r7, #0]
    Report(1, "%s:0x%X(%u), Offset:%u ,Read %u Bytes, begin...\r\n",
                 __func__, Sector_Address, Sector_Address, OffsetInByte, NumByteToRead_up_to_SectorSize);
    //W25qxx_Delay(100);
#endif

    if (OffsetInByte >= w25qxx.SectorSize) {
 8005dc8:	4b2a      	ldr	r3, [pc, #168]	; (8005e74 <W25qxx_ReadSector+0xd4>)
 8005dca:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8005dce:	687a      	ldr	r2, [r7, #4]
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	d24b      	bcs.n	8005e6c <W25qxx_ReadSector+0xcc>
        return;
    }

    int32_t BytesToRead;
    uint32_t LocalOffset, StartPage;
    if ((OffsetInByte + NumByteToRead_up_to_SectorSize) > w25qxx.SectorSize)
 8005dd4:	687a      	ldr	r2, [r7, #4]
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	441a      	add	r2, r3
 8005dda:	4b26      	ldr	r3, [pc, #152]	; (8005e74 <W25qxx_ReadSector+0xd4>)
 8005ddc:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d906      	bls.n	8005df2 <W25qxx_ReadSector+0x52>
        BytesToRead = w25qxx.SectorSize - OffsetInByte;
 8005de4:	4b23      	ldr	r3, [pc, #140]	; (8005e74 <W25qxx_ReadSector+0xd4>)
 8005de6:	f8d3 200f 	ldr.w	r2, [r3, #15]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	1ad3      	subs	r3, r2, r3
 8005dee:	61fb      	str	r3, [r7, #28]
 8005df0:	e001      	b.n	8005df6 <W25qxx_ReadSector+0x56>
    else
        BytesToRead = NumByteToRead_up_to_SectorSize;
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	61fb      	str	r3, [r7, #28]
    StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8005df6:	68b8      	ldr	r0, [r7, #8]
 8005df8:	f7ff fd1e 	bl	8005838 <W25qxx_SectorToPage>
 8005dfc:	4602      	mov	r2, r0
 8005dfe:	4b1d      	ldr	r3, [pc, #116]	; (8005e74 <W25qxx_ReadSector+0xd4>)
 8005e00:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	4619      	mov	r1, r3
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8005e0e:	4413      	add	r3, r2
 8005e10:	617b      	str	r3, [r7, #20]
    LocalOffset = OffsetInByte % w25qxx.PageSize;
 8005e12:	4b18      	ldr	r3, [pc, #96]	; (8005e74 <W25qxx_ReadSector+0xd4>)
 8005e14:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8005e18:	b29b      	uxth	r3, r3
 8005e1a:	461a      	mov	r2, r3
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	fbb3 f1f2 	udiv	r1, r3, r2
 8005e22:	fb01 f202 	mul.w	r2, r1, r2
 8005e26:	1a9b      	subs	r3, r3, r2
 8005e28:	61bb      	str	r3, [r7, #24]
    do {
        W25qxx_ReadPage(pBuffer, StartPage, LocalOffset, BytesToRead);
 8005e2a:	69fb      	ldr	r3, [r7, #28]
 8005e2c:	69ba      	ldr	r2, [r7, #24]
 8005e2e:	6979      	ldr	r1, [r7, #20]
 8005e30:	68f8      	ldr	r0, [r7, #12]
 8005e32:	f7ff fef9 	bl	8005c28 <W25qxx_ReadPage>
        StartPage++;
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	3301      	adds	r3, #1
 8005e3a:	617b      	str	r3, [r7, #20]
        BytesToRead -= w25qxx.PageSize - LocalOffset;
 8005e3c:	4b0d      	ldr	r3, [pc, #52]	; (8005e74 <W25qxx_ReadSector+0xd4>)
 8005e3e:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8005e42:	b29b      	uxth	r3, r3
 8005e44:	461a      	mov	r2, r3
 8005e46:	69bb      	ldr	r3, [r7, #24]
 8005e48:	1a9a      	subs	r2, r3, r2
 8005e4a:	69fb      	ldr	r3, [r7, #28]
 8005e4c:	4413      	add	r3, r2
 8005e4e:	61fb      	str	r3, [r7, #28]
        pBuffer += w25qxx.PageSize;
 8005e50:	4b08      	ldr	r3, [pc, #32]	; (8005e74 <W25qxx_ReadSector+0xd4>)
 8005e52:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8005e56:	b29b      	uxth	r3, r3
 8005e58:	461a      	mov	r2, r3
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	4413      	add	r3, r2
 8005e5e:	60fb      	str	r3, [r7, #12]
        LocalOffset = 0;
 8005e60:	2300      	movs	r3, #0
 8005e62:	61bb      	str	r3, [r7, #24]
    } while(BytesToRead > 0);
 8005e64:	69fb      	ldr	r3, [r7, #28]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	dcdf      	bgt.n	8005e2a <W25qxx_ReadSector+0x8a>
 8005e6a:	e000      	b.n	8005e6e <W25qxx_ReadSector+0xce>
        return;
 8005e6c:	bf00      	nop
#ifdef W25QXX_DEBUG
    Report(1, "%s done\r\n", __func__);
    //W25qxx_Delay(100);
#endif

}
 8005e6e:	3720      	adds	r7, #32
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}
 8005e74:	20002cb4 	.word	0x20002cb4

08005e78 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8005e78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005eb0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005e7c:	f7ff fa9a 	bl	80053b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005e80:	480c      	ldr	r0, [pc, #48]	; (8005eb4 <LoopForever+0x6>)
  ldr r1, =_edata
 8005e82:	490d      	ldr	r1, [pc, #52]	; (8005eb8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005e84:	4a0d      	ldr	r2, [pc, #52]	; (8005ebc <LoopForever+0xe>)
  movs r3, #0
 8005e86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005e88:	e002      	b.n	8005e90 <LoopCopyDataInit>

08005e8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005e8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005e8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005e8e:	3304      	adds	r3, #4

08005e90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005e90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005e92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005e94:	d3f9      	bcc.n	8005e8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005e96:	4a0a      	ldr	r2, [pc, #40]	; (8005ec0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005e98:	4c0a      	ldr	r4, [pc, #40]	; (8005ec4 <LoopForever+0x16>)
  movs r3, #0
 8005e9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005e9c:	e001      	b.n	8005ea2 <LoopFillZerobss>

08005e9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005e9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005ea0:	3204      	adds	r2, #4

08005ea2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005ea2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005ea4:	d3fb      	bcc.n	8005e9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005ea6:	f007 ff05 	bl	800dcb4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005eaa:	f7fb ff27 	bl	8001cfc <main>

08005eae <LoopForever>:

LoopForever:
    b LoopForever
 8005eae:	e7fe      	b.n	8005eae <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8005eb0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8005eb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005eb8:	200003ec 	.word	0x200003ec
  ldr r2, =_sidata
 8005ebc:	08013b54 	.word	0x08013b54
  ldr r2, =_sbss
 8005ec0:	200003f0 	.word	0x200003f0
  ldr r4, =_ebss
 8005ec4:	20002df8 	.word	0x20002df8

08005ec8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005ec8:	e7fe      	b.n	8005ec8 <ADC1_2_IRQHandler>

08005eca <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005eca:	b580      	push	{r7, lr}
 8005ecc:	b082      	sub	sp, #8
 8005ece:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005ed4:	2003      	movs	r0, #3
 8005ed6:	f000 f985 	bl	80061e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005eda:	200f      	movs	r0, #15
 8005edc:	f000 f80e 	bl	8005efc <HAL_InitTick>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d002      	beq.n	8005eec <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	71fb      	strb	r3, [r7, #7]
 8005eea:	e001      	b.n	8005ef0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005eec:	f7fe fdfc 	bl	8004ae8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005ef0:	79fb      	ldrb	r3, [r7, #7]
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	3708      	adds	r7, #8
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}
	...

08005efc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b084      	sub	sp, #16
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005f04:	2300      	movs	r3, #0
 8005f06:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8005f08:	4b17      	ldr	r3, [pc, #92]	; (8005f68 <HAL_InitTick+0x6c>)
 8005f0a:	781b      	ldrb	r3, [r3, #0]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d023      	beq.n	8005f58 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8005f10:	4b16      	ldr	r3, [pc, #88]	; (8005f6c <HAL_InitTick+0x70>)
 8005f12:	681a      	ldr	r2, [r3, #0]
 8005f14:	4b14      	ldr	r3, [pc, #80]	; (8005f68 <HAL_InitTick+0x6c>)
 8005f16:	781b      	ldrb	r3, [r3, #0]
 8005f18:	4619      	mov	r1, r3
 8005f1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005f1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f26:	4618      	mov	r0, r3
 8005f28:	f000 f99f 	bl	800626a <HAL_SYSTICK_Config>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d10f      	bne.n	8005f52 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2b0f      	cmp	r3, #15
 8005f36:	d809      	bhi.n	8005f4c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005f38:	2200      	movs	r2, #0
 8005f3a:	6879      	ldr	r1, [r7, #4]
 8005f3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005f40:	f000 f95b 	bl	80061fa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005f44:	4a0a      	ldr	r2, [pc, #40]	; (8005f70 <HAL_InitTick+0x74>)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6013      	str	r3, [r2, #0]
 8005f4a:	e007      	b.n	8005f5c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	73fb      	strb	r3, [r7, #15]
 8005f50:	e004      	b.n	8005f5c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005f52:	2301      	movs	r3, #1
 8005f54:	73fb      	strb	r3, [r7, #15]
 8005f56:	e001      	b.n	8005f5c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005f58:	2301      	movs	r3, #1
 8005f5a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005f5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3710      	adds	r7, #16
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}
 8005f66:	bf00      	nop
 8005f68:	20000214 	.word	0x20000214
 8005f6c:	200001e0 	.word	0x200001e0
 8005f70:	20000210 	.word	0x20000210

08005f74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005f74:	b480      	push	{r7}
 8005f76:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005f78:	4b06      	ldr	r3, [pc, #24]	; (8005f94 <HAL_IncTick+0x20>)
 8005f7a:	781b      	ldrb	r3, [r3, #0]
 8005f7c:	461a      	mov	r2, r3
 8005f7e:	4b06      	ldr	r3, [pc, #24]	; (8005f98 <HAL_IncTick+0x24>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4413      	add	r3, r2
 8005f84:	4a04      	ldr	r2, [pc, #16]	; (8005f98 <HAL_IncTick+0x24>)
 8005f86:	6013      	str	r3, [r2, #0]
}
 8005f88:	bf00      	nop
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f90:	4770      	bx	lr
 8005f92:	bf00      	nop
 8005f94:	20000214 	.word	0x20000214
 8005f98:	20002de4 	.word	0x20002de4

08005f9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	af00      	add	r7, sp, #0
  return uwTick;
 8005fa0:	4b03      	ldr	r3, [pc, #12]	; (8005fb0 <HAL_GetTick+0x14>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fac:	4770      	bx	lr
 8005fae:	bf00      	nop
 8005fb0:	20002de4 	.word	0x20002de4

08005fb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b084      	sub	sp, #16
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005fbc:	f7ff ffee 	bl	8005f9c <HAL_GetTick>
 8005fc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005fcc:	d005      	beq.n	8005fda <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8005fce:	4b0a      	ldr	r3, [pc, #40]	; (8005ff8 <HAL_Delay+0x44>)
 8005fd0:	781b      	ldrb	r3, [r3, #0]
 8005fd2:	461a      	mov	r2, r3
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	4413      	add	r3, r2
 8005fd8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005fda:	bf00      	nop
 8005fdc:	f7ff ffde 	bl	8005f9c <HAL_GetTick>
 8005fe0:	4602      	mov	r2, r0
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	1ad3      	subs	r3, r2, r3
 8005fe6:	68fa      	ldr	r2, [r7, #12]
 8005fe8:	429a      	cmp	r2, r3
 8005fea:	d8f7      	bhi.n	8005fdc <HAL_Delay+0x28>
  {
  }
}
 8005fec:	bf00      	nop
 8005fee:	bf00      	nop
 8005ff0:	3710      	adds	r7, #16
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}
 8005ff6:	bf00      	nop
 8005ff8:	20000214 	.word	0x20000214

08005ffc <__NVIC_SetPriorityGrouping>:
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b085      	sub	sp, #20
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f003 0307 	and.w	r3, r3, #7
 800600a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800600c:	4b0c      	ldr	r3, [pc, #48]	; (8006040 <__NVIC_SetPriorityGrouping+0x44>)
 800600e:	68db      	ldr	r3, [r3, #12]
 8006010:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006012:	68ba      	ldr	r2, [r7, #8]
 8006014:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006018:	4013      	ands	r3, r2
 800601a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006024:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006028:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800602c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800602e:	4a04      	ldr	r2, [pc, #16]	; (8006040 <__NVIC_SetPriorityGrouping+0x44>)
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	60d3      	str	r3, [r2, #12]
}
 8006034:	bf00      	nop
 8006036:	3714      	adds	r7, #20
 8006038:	46bd      	mov	sp, r7
 800603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603e:	4770      	bx	lr
 8006040:	e000ed00 	.word	0xe000ed00

08006044 <__NVIC_GetPriorityGrouping>:
{
 8006044:	b480      	push	{r7}
 8006046:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006048:	4b04      	ldr	r3, [pc, #16]	; (800605c <__NVIC_GetPriorityGrouping+0x18>)
 800604a:	68db      	ldr	r3, [r3, #12]
 800604c:	0a1b      	lsrs	r3, r3, #8
 800604e:	f003 0307 	and.w	r3, r3, #7
}
 8006052:	4618      	mov	r0, r3
 8006054:	46bd      	mov	sp, r7
 8006056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605a:	4770      	bx	lr
 800605c:	e000ed00 	.word	0xe000ed00

08006060 <__NVIC_EnableIRQ>:
{
 8006060:	b480      	push	{r7}
 8006062:	b083      	sub	sp, #12
 8006064:	af00      	add	r7, sp, #0
 8006066:	4603      	mov	r3, r0
 8006068:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800606a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800606e:	2b00      	cmp	r3, #0
 8006070:	db0b      	blt.n	800608a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006072:	79fb      	ldrb	r3, [r7, #7]
 8006074:	f003 021f 	and.w	r2, r3, #31
 8006078:	4907      	ldr	r1, [pc, #28]	; (8006098 <__NVIC_EnableIRQ+0x38>)
 800607a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800607e:	095b      	lsrs	r3, r3, #5
 8006080:	2001      	movs	r0, #1
 8006082:	fa00 f202 	lsl.w	r2, r0, r2
 8006086:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800608a:	bf00      	nop
 800608c:	370c      	adds	r7, #12
 800608e:	46bd      	mov	sp, r7
 8006090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006094:	4770      	bx	lr
 8006096:	bf00      	nop
 8006098:	e000e100 	.word	0xe000e100

0800609c <__NVIC_DisableIRQ>:
{
 800609c:	b480      	push	{r7}
 800609e:	b083      	sub	sp, #12
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	4603      	mov	r3, r0
 80060a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80060a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	db12      	blt.n	80060d4 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80060ae:	79fb      	ldrb	r3, [r7, #7]
 80060b0:	f003 021f 	and.w	r2, r3, #31
 80060b4:	490a      	ldr	r1, [pc, #40]	; (80060e0 <__NVIC_DisableIRQ+0x44>)
 80060b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060ba:	095b      	lsrs	r3, r3, #5
 80060bc:	2001      	movs	r0, #1
 80060be:	fa00 f202 	lsl.w	r2, r0, r2
 80060c2:	3320      	adds	r3, #32
 80060c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80060c8:	f3bf 8f4f 	dsb	sy
}
 80060cc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80060ce:	f3bf 8f6f 	isb	sy
}
 80060d2:	bf00      	nop
}
 80060d4:	bf00      	nop
 80060d6:	370c      	adds	r7, #12
 80060d8:	46bd      	mov	sp, r7
 80060da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060de:	4770      	bx	lr
 80060e0:	e000e100 	.word	0xe000e100

080060e4 <__NVIC_SetPriority>:
{
 80060e4:	b480      	push	{r7}
 80060e6:	b083      	sub	sp, #12
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	4603      	mov	r3, r0
 80060ec:	6039      	str	r1, [r7, #0]
 80060ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80060f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	db0a      	blt.n	800610e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	b2da      	uxtb	r2, r3
 80060fc:	490c      	ldr	r1, [pc, #48]	; (8006130 <__NVIC_SetPriority+0x4c>)
 80060fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006102:	0112      	lsls	r2, r2, #4
 8006104:	b2d2      	uxtb	r2, r2
 8006106:	440b      	add	r3, r1
 8006108:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800610c:	e00a      	b.n	8006124 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	b2da      	uxtb	r2, r3
 8006112:	4908      	ldr	r1, [pc, #32]	; (8006134 <__NVIC_SetPriority+0x50>)
 8006114:	79fb      	ldrb	r3, [r7, #7]
 8006116:	f003 030f 	and.w	r3, r3, #15
 800611a:	3b04      	subs	r3, #4
 800611c:	0112      	lsls	r2, r2, #4
 800611e:	b2d2      	uxtb	r2, r2
 8006120:	440b      	add	r3, r1
 8006122:	761a      	strb	r2, [r3, #24]
}
 8006124:	bf00      	nop
 8006126:	370c      	adds	r7, #12
 8006128:	46bd      	mov	sp, r7
 800612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612e:	4770      	bx	lr
 8006130:	e000e100 	.word	0xe000e100
 8006134:	e000ed00 	.word	0xe000ed00

08006138 <NVIC_EncodePriority>:
{
 8006138:	b480      	push	{r7}
 800613a:	b089      	sub	sp, #36	; 0x24
 800613c:	af00      	add	r7, sp, #0
 800613e:	60f8      	str	r0, [r7, #12]
 8006140:	60b9      	str	r1, [r7, #8]
 8006142:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f003 0307 	and.w	r3, r3, #7
 800614a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800614c:	69fb      	ldr	r3, [r7, #28]
 800614e:	f1c3 0307 	rsb	r3, r3, #7
 8006152:	2b04      	cmp	r3, #4
 8006154:	bf28      	it	cs
 8006156:	2304      	movcs	r3, #4
 8006158:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800615a:	69fb      	ldr	r3, [r7, #28]
 800615c:	3304      	adds	r3, #4
 800615e:	2b06      	cmp	r3, #6
 8006160:	d902      	bls.n	8006168 <NVIC_EncodePriority+0x30>
 8006162:	69fb      	ldr	r3, [r7, #28]
 8006164:	3b03      	subs	r3, #3
 8006166:	e000      	b.n	800616a <NVIC_EncodePriority+0x32>
 8006168:	2300      	movs	r3, #0
 800616a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800616c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006170:	69bb      	ldr	r3, [r7, #24]
 8006172:	fa02 f303 	lsl.w	r3, r2, r3
 8006176:	43da      	mvns	r2, r3
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	401a      	ands	r2, r3
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006180:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	fa01 f303 	lsl.w	r3, r1, r3
 800618a:	43d9      	mvns	r1, r3
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006190:	4313      	orrs	r3, r2
}
 8006192:	4618      	mov	r0, r3
 8006194:	3724      	adds	r7, #36	; 0x24
 8006196:	46bd      	mov	sp, r7
 8006198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619c:	4770      	bx	lr
	...

080061a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b082      	sub	sp, #8
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	3b01      	subs	r3, #1
 80061ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80061b0:	d301      	bcc.n	80061b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80061b2:	2301      	movs	r3, #1
 80061b4:	e00f      	b.n	80061d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80061b6:	4a0a      	ldr	r2, [pc, #40]	; (80061e0 <SysTick_Config+0x40>)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	3b01      	subs	r3, #1
 80061bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80061be:	210f      	movs	r1, #15
 80061c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80061c4:	f7ff ff8e 	bl	80060e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80061c8:	4b05      	ldr	r3, [pc, #20]	; (80061e0 <SysTick_Config+0x40>)
 80061ca:	2200      	movs	r2, #0
 80061cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80061ce:	4b04      	ldr	r3, [pc, #16]	; (80061e0 <SysTick_Config+0x40>)
 80061d0:	2207      	movs	r2, #7
 80061d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80061d4:	2300      	movs	r3, #0
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	3708      	adds	r7, #8
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}
 80061de:	bf00      	nop
 80061e0:	e000e010 	.word	0xe000e010

080061e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b082      	sub	sp, #8
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f7ff ff05 	bl	8005ffc <__NVIC_SetPriorityGrouping>
}
 80061f2:	bf00      	nop
 80061f4:	3708      	adds	r7, #8
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}

080061fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80061fa:	b580      	push	{r7, lr}
 80061fc:	b086      	sub	sp, #24
 80061fe:	af00      	add	r7, sp, #0
 8006200:	4603      	mov	r3, r0
 8006202:	60b9      	str	r1, [r7, #8]
 8006204:	607a      	str	r2, [r7, #4]
 8006206:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006208:	2300      	movs	r3, #0
 800620a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800620c:	f7ff ff1a 	bl	8006044 <__NVIC_GetPriorityGrouping>
 8006210:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006212:	687a      	ldr	r2, [r7, #4]
 8006214:	68b9      	ldr	r1, [r7, #8]
 8006216:	6978      	ldr	r0, [r7, #20]
 8006218:	f7ff ff8e 	bl	8006138 <NVIC_EncodePriority>
 800621c:	4602      	mov	r2, r0
 800621e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006222:	4611      	mov	r1, r2
 8006224:	4618      	mov	r0, r3
 8006226:	f7ff ff5d 	bl	80060e4 <__NVIC_SetPriority>
}
 800622a:	bf00      	nop
 800622c:	3718      	adds	r7, #24
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}

08006232 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006232:	b580      	push	{r7, lr}
 8006234:	b082      	sub	sp, #8
 8006236:	af00      	add	r7, sp, #0
 8006238:	4603      	mov	r3, r0
 800623a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800623c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006240:	4618      	mov	r0, r3
 8006242:	f7ff ff0d 	bl	8006060 <__NVIC_EnableIRQ>
}
 8006246:	bf00      	nop
 8006248:	3708      	adds	r7, #8
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}

0800624e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800624e:	b580      	push	{r7, lr}
 8006250:	b082      	sub	sp, #8
 8006252:	af00      	add	r7, sp, #0
 8006254:	4603      	mov	r3, r0
 8006256:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8006258:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800625c:	4618      	mov	r0, r3
 800625e:	f7ff ff1d 	bl	800609c <__NVIC_DisableIRQ>
}
 8006262:	bf00      	nop
 8006264:	3708      	adds	r7, #8
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}

0800626a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800626a:	b580      	push	{r7, lr}
 800626c:	b082      	sub	sp, #8
 800626e:	af00      	add	r7, sp, #0
 8006270:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f7ff ff94 	bl	80061a0 <SysTick_Config>
 8006278:	4603      	mov	r3, r0
}
 800627a:	4618      	mov	r0, r3
 800627c:	3708      	adds	r7, #8
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}
	...

08006284 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006284:	b480      	push	{r7}
 8006286:	b085      	sub	sp, #20
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d101      	bne.n	8006296 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8006292:	2301      	movs	r3, #1
 8006294:	e098      	b.n	80063c8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	461a      	mov	r2, r3
 800629c:	4b4d      	ldr	r3, [pc, #308]	; (80063d4 <HAL_DMA_Init+0x150>)
 800629e:	429a      	cmp	r2, r3
 80062a0:	d80f      	bhi.n	80062c2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	461a      	mov	r2, r3
 80062a8:	4b4b      	ldr	r3, [pc, #300]	; (80063d8 <HAL_DMA_Init+0x154>)
 80062aa:	4413      	add	r3, r2
 80062ac:	4a4b      	ldr	r2, [pc, #300]	; (80063dc <HAL_DMA_Init+0x158>)
 80062ae:	fba2 2303 	umull	r2, r3, r2, r3
 80062b2:	091b      	lsrs	r3, r3, #4
 80062b4:	009a      	lsls	r2, r3, #2
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	4a48      	ldr	r2, [pc, #288]	; (80063e0 <HAL_DMA_Init+0x15c>)
 80062be:	641a      	str	r2, [r3, #64]	; 0x40
 80062c0:	e00e      	b.n	80062e0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	461a      	mov	r2, r3
 80062c8:	4b46      	ldr	r3, [pc, #280]	; (80063e4 <HAL_DMA_Init+0x160>)
 80062ca:	4413      	add	r3, r2
 80062cc:	4a43      	ldr	r2, [pc, #268]	; (80063dc <HAL_DMA_Init+0x158>)
 80062ce:	fba2 2303 	umull	r2, r3, r2, r3
 80062d2:	091b      	lsrs	r3, r3, #4
 80062d4:	009a      	lsls	r2, r3, #2
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	4a42      	ldr	r2, [pc, #264]	; (80063e8 <HAL_DMA_Init+0x164>)
 80062de:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2202      	movs	r2, #2
 80062e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80062f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062fa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006304:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	691b      	ldr	r3, [r3, #16]
 800630a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006310:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	699b      	ldr	r3, [r3, #24]
 8006316:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800631c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6a1b      	ldr	r3, [r3, #32]
 8006322:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006324:	68fa      	ldr	r2, [r7, #12]
 8006326:	4313      	orrs	r3, r2
 8006328:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	68fa      	ldr	r2, [r7, #12]
 8006330:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800633a:	d039      	beq.n	80063b0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006340:	4a27      	ldr	r2, [pc, #156]	; (80063e0 <HAL_DMA_Init+0x15c>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d11a      	bne.n	800637c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8006346:	4b29      	ldr	r3, [pc, #164]	; (80063ec <HAL_DMA_Init+0x168>)
 8006348:	681a      	ldr	r2, [r3, #0]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800634e:	f003 031c 	and.w	r3, r3, #28
 8006352:	210f      	movs	r1, #15
 8006354:	fa01 f303 	lsl.w	r3, r1, r3
 8006358:	43db      	mvns	r3, r3
 800635a:	4924      	ldr	r1, [pc, #144]	; (80063ec <HAL_DMA_Init+0x168>)
 800635c:	4013      	ands	r3, r2
 800635e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8006360:	4b22      	ldr	r3, [pc, #136]	; (80063ec <HAL_DMA_Init+0x168>)
 8006362:	681a      	ldr	r2, [r3, #0]
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6859      	ldr	r1, [r3, #4]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800636c:	f003 031c 	and.w	r3, r3, #28
 8006370:	fa01 f303 	lsl.w	r3, r1, r3
 8006374:	491d      	ldr	r1, [pc, #116]	; (80063ec <HAL_DMA_Init+0x168>)
 8006376:	4313      	orrs	r3, r2
 8006378:	600b      	str	r3, [r1, #0]
 800637a:	e019      	b.n	80063b0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800637c:	4b1c      	ldr	r3, [pc, #112]	; (80063f0 <HAL_DMA_Init+0x16c>)
 800637e:	681a      	ldr	r2, [r3, #0]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006384:	f003 031c 	and.w	r3, r3, #28
 8006388:	210f      	movs	r1, #15
 800638a:	fa01 f303 	lsl.w	r3, r1, r3
 800638e:	43db      	mvns	r3, r3
 8006390:	4917      	ldr	r1, [pc, #92]	; (80063f0 <HAL_DMA_Init+0x16c>)
 8006392:	4013      	ands	r3, r2
 8006394:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8006396:	4b16      	ldr	r3, [pc, #88]	; (80063f0 <HAL_DMA_Init+0x16c>)
 8006398:	681a      	ldr	r2, [r3, #0]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6859      	ldr	r1, [r3, #4]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063a2:	f003 031c 	and.w	r3, r3, #28
 80063a6:	fa01 f303 	lsl.w	r3, r1, r3
 80063aa:	4911      	ldr	r1, [pc, #68]	; (80063f0 <HAL_DMA_Init+0x16c>)
 80063ac:	4313      	orrs	r3, r2
 80063ae:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2200      	movs	r2, #0
 80063b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2201      	movs	r2, #1
 80063ba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2200      	movs	r2, #0
 80063c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80063c6:	2300      	movs	r3, #0
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3714      	adds	r7, #20
 80063cc:	46bd      	mov	sp, r7
 80063ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d2:	4770      	bx	lr
 80063d4:	40020407 	.word	0x40020407
 80063d8:	bffdfff8 	.word	0xbffdfff8
 80063dc:	cccccccd 	.word	0xcccccccd
 80063e0:	40020000 	.word	0x40020000
 80063e4:	bffdfbf8 	.word	0xbffdfbf8
 80063e8:	40020400 	.word	0x40020400
 80063ec:	400200a8 	.word	0x400200a8
 80063f0:	400204a8 	.word	0x400204a8

080063f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b086      	sub	sp, #24
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	60f8      	str	r0, [r7, #12]
 80063fc:	60b9      	str	r1, [r7, #8]
 80063fe:	607a      	str	r2, [r7, #4]
 8006400:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006402:	2300      	movs	r3, #0
 8006404:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800640c:	2b01      	cmp	r3, #1
 800640e:	d101      	bne.n	8006414 <HAL_DMA_Start_IT+0x20>
 8006410:	2302      	movs	r3, #2
 8006412:	e04b      	b.n	80064ac <HAL_DMA_Start_IT+0xb8>
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	2201      	movs	r2, #1
 8006418:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006422:	b2db      	uxtb	r3, r3
 8006424:	2b01      	cmp	r3, #1
 8006426:	d13a      	bne.n	800649e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2202      	movs	r2, #2
 800642c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2200      	movs	r2, #0
 8006434:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	681a      	ldr	r2, [r3, #0]
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f022 0201 	bic.w	r2, r2, #1
 8006444:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	687a      	ldr	r2, [r7, #4]
 800644a:	68b9      	ldr	r1, [r7, #8]
 800644c:	68f8      	ldr	r0, [r7, #12]
 800644e:	f000 f96d 	bl	800672c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006456:	2b00      	cmp	r3, #0
 8006458:	d008      	beq.n	800646c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	681a      	ldr	r2, [r3, #0]
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f042 020e 	orr.w	r2, r2, #14
 8006468:	601a      	str	r2, [r3, #0]
 800646a:	e00f      	b.n	800648c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	681a      	ldr	r2, [r3, #0]
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f022 0204 	bic.w	r2, r2, #4
 800647a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	681a      	ldr	r2, [r3, #0]
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f042 020a 	orr.w	r2, r2, #10
 800648a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	681a      	ldr	r2, [r3, #0]
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f042 0201 	orr.w	r2, r2, #1
 800649a:	601a      	str	r2, [r3, #0]
 800649c:	e005      	b.n	80064aa <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	2200      	movs	r2, #0
 80064a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80064a6:	2302      	movs	r3, #2
 80064a8:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80064aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	3718      	adds	r7, #24
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}

080064b4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b085      	sub	sp, #20
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80064bc:	2300      	movs	r3, #0
 80064be:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80064c6:	b2db      	uxtb	r3, r3
 80064c8:	2b02      	cmp	r3, #2
 80064ca:	d008      	beq.n	80064de <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2204      	movs	r2, #4
 80064d0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2200      	movs	r2, #0
 80064d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80064da:	2301      	movs	r3, #1
 80064dc:	e022      	b.n	8006524 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	681a      	ldr	r2, [r3, #0]
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f022 020e 	bic.w	r2, r2, #14
 80064ec:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	681a      	ldr	r2, [r3, #0]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f022 0201 	bic.w	r2, r2, #1
 80064fc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006502:	f003 021c 	and.w	r2, r3, #28
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800650a:	2101      	movs	r1, #1
 800650c:	fa01 f202 	lsl.w	r2, r1, r2
 8006510:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2201      	movs	r2, #1
 8006516:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2200      	movs	r2, #0
 800651e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8006522:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8006524:	4618      	mov	r0, r3
 8006526:	3714      	adds	r7, #20
 8006528:	46bd      	mov	sp, r7
 800652a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652e:	4770      	bx	lr

08006530 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b084      	sub	sp, #16
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006538:	2300      	movs	r3, #0
 800653a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006542:	b2db      	uxtb	r3, r3
 8006544:	2b02      	cmp	r3, #2
 8006546:	d005      	beq.n	8006554 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2204      	movs	r2, #4
 800654c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800654e:	2301      	movs	r3, #1
 8006550:	73fb      	strb	r3, [r7, #15]
 8006552:	e029      	b.n	80065a8 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	681a      	ldr	r2, [r3, #0]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f022 020e 	bic.w	r2, r2, #14
 8006562:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	681a      	ldr	r2, [r3, #0]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f022 0201 	bic.w	r2, r2, #1
 8006572:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006578:	f003 021c 	and.w	r2, r3, #28
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006580:	2101      	movs	r1, #1
 8006582:	fa01 f202 	lsl.w	r2, r1, r2
 8006586:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2201      	movs	r2, #1
 800658c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2200      	movs	r2, #0
 8006594:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800659c:	2b00      	cmp	r3, #0
 800659e:	d003      	beq.n	80065a8 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	4798      	blx	r3
    }
  }
  return status;
 80065a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	3710      	adds	r7, #16
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd80      	pop	{r7, pc}

080065b2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80065b2:	b580      	push	{r7, lr}
 80065b4:	b084      	sub	sp, #16
 80065b6:	af00      	add	r7, sp, #0
 80065b8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065ce:	f003 031c 	and.w	r3, r3, #28
 80065d2:	2204      	movs	r2, #4
 80065d4:	409a      	lsls	r2, r3
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	4013      	ands	r3, r2
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d026      	beq.n	800662c <HAL_DMA_IRQHandler+0x7a>
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	f003 0304 	and.w	r3, r3, #4
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d021      	beq.n	800662c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f003 0320 	and.w	r3, r3, #32
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d107      	bne.n	8006606 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	681a      	ldr	r2, [r3, #0]
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f022 0204 	bic.w	r2, r2, #4
 8006604:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800660a:	f003 021c 	and.w	r2, r3, #28
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006612:	2104      	movs	r1, #4
 8006614:	fa01 f202 	lsl.w	r2, r1, r2
 8006618:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800661e:	2b00      	cmp	r3, #0
 8006620:	d071      	beq.n	8006706 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800662a:	e06c      	b.n	8006706 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006630:	f003 031c 	and.w	r3, r3, #28
 8006634:	2202      	movs	r2, #2
 8006636:	409a      	lsls	r2, r3
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	4013      	ands	r3, r2
 800663c:	2b00      	cmp	r3, #0
 800663e:	d02e      	beq.n	800669e <HAL_DMA_IRQHandler+0xec>
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	f003 0302 	and.w	r3, r3, #2
 8006646:	2b00      	cmp	r3, #0
 8006648:	d029      	beq.n	800669e <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f003 0320 	and.w	r3, r3, #32
 8006654:	2b00      	cmp	r3, #0
 8006656:	d10b      	bne.n	8006670 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	681a      	ldr	r2, [r3, #0]
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f022 020a 	bic.w	r2, r2, #10
 8006666:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2201      	movs	r2, #1
 800666c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006674:	f003 021c 	and.w	r2, r3, #28
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800667c:	2102      	movs	r1, #2
 800667e:	fa01 f202 	lsl.w	r2, r1, r2
 8006682:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2200      	movs	r2, #0
 8006688:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006690:	2b00      	cmp	r3, #0
 8006692:	d038      	beq.n	8006706 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800669c:	e033      	b.n	8006706 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066a2:	f003 031c 	and.w	r3, r3, #28
 80066a6:	2208      	movs	r2, #8
 80066a8:	409a      	lsls	r2, r3
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	4013      	ands	r3, r2
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d02a      	beq.n	8006708 <HAL_DMA_IRQHandler+0x156>
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	f003 0308 	and.w	r3, r3, #8
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d025      	beq.n	8006708 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	681a      	ldr	r2, [r3, #0]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f022 020e 	bic.w	r2, r2, #14
 80066ca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066d0:	f003 021c 	and.w	r2, r3, #28
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066d8:	2101      	movs	r1, #1
 80066da:	fa01 f202 	lsl.w	r2, r1, r2
 80066de:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2201      	movs	r2, #1
 80066e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2201      	movs	r2, #1
 80066ea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2200      	movs	r2, #0
 80066f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d004      	beq.n	8006708 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006706:	bf00      	nop
 8006708:	bf00      	nop
}
 800670a:	3710      	adds	r7, #16
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}

08006710 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8006710:	b480      	push	{r7}
 8006712:	b083      	sub	sp, #12
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800671e:	b2db      	uxtb	r3, r3
}
 8006720:	4618      	mov	r0, r3
 8006722:	370c      	adds	r7, #12
 8006724:	46bd      	mov	sp, r7
 8006726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672a:	4770      	bx	lr

0800672c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800672c:	b480      	push	{r7}
 800672e:	b085      	sub	sp, #20
 8006730:	af00      	add	r7, sp, #0
 8006732:	60f8      	str	r0, [r7, #12]
 8006734:	60b9      	str	r1, [r7, #8]
 8006736:	607a      	str	r2, [r7, #4]
 8006738:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800673e:	f003 021c 	and.w	r2, r3, #28
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006746:	2101      	movs	r1, #1
 8006748:	fa01 f202 	lsl.w	r2, r1, r2
 800674c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	683a      	ldr	r2, [r7, #0]
 8006754:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	689b      	ldr	r3, [r3, #8]
 800675a:	2b10      	cmp	r3, #16
 800675c:	d108      	bne.n	8006770 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	687a      	ldr	r2, [r7, #4]
 8006764:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	68ba      	ldr	r2, [r7, #8]
 800676c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800676e:	e007      	b.n	8006780 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	68ba      	ldr	r2, [r7, #8]
 8006776:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	687a      	ldr	r2, [r7, #4]
 800677e:	60da      	str	r2, [r3, #12]
}
 8006780:	bf00      	nop
 8006782:	3714      	adds	r7, #20
 8006784:	46bd      	mov	sp, r7
 8006786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678a:	4770      	bx	lr

0800678c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800678c:	b480      	push	{r7}
 800678e:	b087      	sub	sp, #28
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
 8006794:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006796:	2300      	movs	r3, #0
 8006798:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800679a:	e17f      	b.n	8006a9c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	681a      	ldr	r2, [r3, #0]
 80067a0:	2101      	movs	r1, #1
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	fa01 f303 	lsl.w	r3, r1, r3
 80067a8:	4013      	ands	r3, r2
 80067aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	f000 8171 	beq.w	8006a96 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	685b      	ldr	r3, [r3, #4]
 80067b8:	f003 0303 	and.w	r3, r3, #3
 80067bc:	2b01      	cmp	r3, #1
 80067be:	d005      	beq.n	80067cc <HAL_GPIO_Init+0x40>
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	f003 0303 	and.w	r3, r3, #3
 80067c8:	2b02      	cmp	r3, #2
 80067ca:	d130      	bne.n	800682e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	689b      	ldr	r3, [r3, #8]
 80067d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	005b      	lsls	r3, r3, #1
 80067d6:	2203      	movs	r2, #3
 80067d8:	fa02 f303 	lsl.w	r3, r2, r3
 80067dc:	43db      	mvns	r3, r3
 80067de:	693a      	ldr	r2, [r7, #16]
 80067e0:	4013      	ands	r3, r2
 80067e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	68da      	ldr	r2, [r3, #12]
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	005b      	lsls	r3, r3, #1
 80067ec:	fa02 f303 	lsl.w	r3, r2, r3
 80067f0:	693a      	ldr	r2, [r7, #16]
 80067f2:	4313      	orrs	r3, r2
 80067f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	693a      	ldr	r2, [r7, #16]
 80067fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006802:	2201      	movs	r2, #1
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	fa02 f303 	lsl.w	r3, r2, r3
 800680a:	43db      	mvns	r3, r3
 800680c:	693a      	ldr	r2, [r7, #16]
 800680e:	4013      	ands	r3, r2
 8006810:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	091b      	lsrs	r3, r3, #4
 8006818:	f003 0201 	and.w	r2, r3, #1
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	fa02 f303 	lsl.w	r3, r2, r3
 8006822:	693a      	ldr	r2, [r7, #16]
 8006824:	4313      	orrs	r3, r2
 8006826:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	693a      	ldr	r2, [r7, #16]
 800682c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	f003 0303 	and.w	r3, r3, #3
 8006836:	2b03      	cmp	r3, #3
 8006838:	d118      	bne.n	800686c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800683e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8006840:	2201      	movs	r2, #1
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	fa02 f303 	lsl.w	r3, r2, r3
 8006848:	43db      	mvns	r3, r3
 800684a:	693a      	ldr	r2, [r7, #16]
 800684c:	4013      	ands	r3, r2
 800684e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	08db      	lsrs	r3, r3, #3
 8006856:	f003 0201 	and.w	r2, r3, #1
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	fa02 f303 	lsl.w	r3, r2, r3
 8006860:	693a      	ldr	r2, [r7, #16]
 8006862:	4313      	orrs	r3, r2
 8006864:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	693a      	ldr	r2, [r7, #16]
 800686a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	f003 0303 	and.w	r3, r3, #3
 8006874:	2b03      	cmp	r3, #3
 8006876:	d017      	beq.n	80068a8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	68db      	ldr	r3, [r3, #12]
 800687c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	005b      	lsls	r3, r3, #1
 8006882:	2203      	movs	r2, #3
 8006884:	fa02 f303 	lsl.w	r3, r2, r3
 8006888:	43db      	mvns	r3, r3
 800688a:	693a      	ldr	r2, [r7, #16]
 800688c:	4013      	ands	r3, r2
 800688e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	689a      	ldr	r2, [r3, #8]
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	005b      	lsls	r3, r3, #1
 8006898:	fa02 f303 	lsl.w	r3, r2, r3
 800689c:	693a      	ldr	r2, [r7, #16]
 800689e:	4313      	orrs	r3, r2
 80068a0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	693a      	ldr	r2, [r7, #16]
 80068a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	f003 0303 	and.w	r3, r3, #3
 80068b0:	2b02      	cmp	r3, #2
 80068b2:	d123      	bne.n	80068fc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80068b4:	697b      	ldr	r3, [r7, #20]
 80068b6:	08da      	lsrs	r2, r3, #3
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	3208      	adds	r2, #8
 80068bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	f003 0307 	and.w	r3, r3, #7
 80068c8:	009b      	lsls	r3, r3, #2
 80068ca:	220f      	movs	r2, #15
 80068cc:	fa02 f303 	lsl.w	r3, r2, r3
 80068d0:	43db      	mvns	r3, r3
 80068d2:	693a      	ldr	r2, [r7, #16]
 80068d4:	4013      	ands	r3, r2
 80068d6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	691a      	ldr	r2, [r3, #16]
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	f003 0307 	and.w	r3, r3, #7
 80068e2:	009b      	lsls	r3, r3, #2
 80068e4:	fa02 f303 	lsl.w	r3, r2, r3
 80068e8:	693a      	ldr	r2, [r7, #16]
 80068ea:	4313      	orrs	r3, r2
 80068ec:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	08da      	lsrs	r2, r3, #3
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	3208      	adds	r2, #8
 80068f6:	6939      	ldr	r1, [r7, #16]
 80068f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	005b      	lsls	r3, r3, #1
 8006906:	2203      	movs	r2, #3
 8006908:	fa02 f303 	lsl.w	r3, r2, r3
 800690c:	43db      	mvns	r3, r3
 800690e:	693a      	ldr	r2, [r7, #16]
 8006910:	4013      	ands	r3, r2
 8006912:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	f003 0203 	and.w	r2, r3, #3
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	005b      	lsls	r3, r3, #1
 8006920:	fa02 f303 	lsl.w	r3, r2, r3
 8006924:	693a      	ldr	r2, [r7, #16]
 8006926:	4313      	orrs	r3, r2
 8006928:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	693a      	ldr	r2, [r7, #16]
 800692e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006938:	2b00      	cmp	r3, #0
 800693a:	f000 80ac 	beq.w	8006a96 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800693e:	4b5f      	ldr	r3, [pc, #380]	; (8006abc <HAL_GPIO_Init+0x330>)
 8006940:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006942:	4a5e      	ldr	r2, [pc, #376]	; (8006abc <HAL_GPIO_Init+0x330>)
 8006944:	f043 0301 	orr.w	r3, r3, #1
 8006948:	6613      	str	r3, [r2, #96]	; 0x60
 800694a:	4b5c      	ldr	r3, [pc, #368]	; (8006abc <HAL_GPIO_Init+0x330>)
 800694c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800694e:	f003 0301 	and.w	r3, r3, #1
 8006952:	60bb      	str	r3, [r7, #8]
 8006954:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006956:	4a5a      	ldr	r2, [pc, #360]	; (8006ac0 <HAL_GPIO_Init+0x334>)
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	089b      	lsrs	r3, r3, #2
 800695c:	3302      	adds	r3, #2
 800695e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006962:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	f003 0303 	and.w	r3, r3, #3
 800696a:	009b      	lsls	r3, r3, #2
 800696c:	220f      	movs	r2, #15
 800696e:	fa02 f303 	lsl.w	r3, r2, r3
 8006972:	43db      	mvns	r3, r3
 8006974:	693a      	ldr	r2, [r7, #16]
 8006976:	4013      	ands	r3, r2
 8006978:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006980:	d025      	beq.n	80069ce <HAL_GPIO_Init+0x242>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	4a4f      	ldr	r2, [pc, #316]	; (8006ac4 <HAL_GPIO_Init+0x338>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d01f      	beq.n	80069ca <HAL_GPIO_Init+0x23e>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	4a4e      	ldr	r2, [pc, #312]	; (8006ac8 <HAL_GPIO_Init+0x33c>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d019      	beq.n	80069c6 <HAL_GPIO_Init+0x23a>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	4a4d      	ldr	r2, [pc, #308]	; (8006acc <HAL_GPIO_Init+0x340>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d013      	beq.n	80069c2 <HAL_GPIO_Init+0x236>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	4a4c      	ldr	r2, [pc, #304]	; (8006ad0 <HAL_GPIO_Init+0x344>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d00d      	beq.n	80069be <HAL_GPIO_Init+0x232>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	4a4b      	ldr	r2, [pc, #300]	; (8006ad4 <HAL_GPIO_Init+0x348>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d007      	beq.n	80069ba <HAL_GPIO_Init+0x22e>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	4a4a      	ldr	r2, [pc, #296]	; (8006ad8 <HAL_GPIO_Init+0x34c>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d101      	bne.n	80069b6 <HAL_GPIO_Init+0x22a>
 80069b2:	2306      	movs	r3, #6
 80069b4:	e00c      	b.n	80069d0 <HAL_GPIO_Init+0x244>
 80069b6:	2307      	movs	r3, #7
 80069b8:	e00a      	b.n	80069d0 <HAL_GPIO_Init+0x244>
 80069ba:	2305      	movs	r3, #5
 80069bc:	e008      	b.n	80069d0 <HAL_GPIO_Init+0x244>
 80069be:	2304      	movs	r3, #4
 80069c0:	e006      	b.n	80069d0 <HAL_GPIO_Init+0x244>
 80069c2:	2303      	movs	r3, #3
 80069c4:	e004      	b.n	80069d0 <HAL_GPIO_Init+0x244>
 80069c6:	2302      	movs	r3, #2
 80069c8:	e002      	b.n	80069d0 <HAL_GPIO_Init+0x244>
 80069ca:	2301      	movs	r3, #1
 80069cc:	e000      	b.n	80069d0 <HAL_GPIO_Init+0x244>
 80069ce:	2300      	movs	r3, #0
 80069d0:	697a      	ldr	r2, [r7, #20]
 80069d2:	f002 0203 	and.w	r2, r2, #3
 80069d6:	0092      	lsls	r2, r2, #2
 80069d8:	4093      	lsls	r3, r2
 80069da:	693a      	ldr	r2, [r7, #16]
 80069dc:	4313      	orrs	r3, r2
 80069de:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80069e0:	4937      	ldr	r1, [pc, #220]	; (8006ac0 <HAL_GPIO_Init+0x334>)
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	089b      	lsrs	r3, r3, #2
 80069e6:	3302      	adds	r3, #2
 80069e8:	693a      	ldr	r2, [r7, #16]
 80069ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80069ee:	4b3b      	ldr	r3, [pc, #236]	; (8006adc <HAL_GPIO_Init+0x350>)
 80069f0:	689b      	ldr	r3, [r3, #8]
 80069f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	43db      	mvns	r3, r3
 80069f8:	693a      	ldr	r2, [r7, #16]
 80069fa:	4013      	ands	r3, r2
 80069fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d003      	beq.n	8006a12 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8006a0a:	693a      	ldr	r2, [r7, #16]
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006a12:	4a32      	ldr	r2, [pc, #200]	; (8006adc <HAL_GPIO_Init+0x350>)
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006a18:	4b30      	ldr	r3, [pc, #192]	; (8006adc <HAL_GPIO_Init+0x350>)
 8006a1a:	68db      	ldr	r3, [r3, #12]
 8006a1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	43db      	mvns	r3, r3
 8006a22:	693a      	ldr	r2, [r7, #16]
 8006a24:	4013      	ands	r3, r2
 8006a26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d003      	beq.n	8006a3c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8006a34:	693a      	ldr	r2, [r7, #16]
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006a3c:	4a27      	ldr	r2, [pc, #156]	; (8006adc <HAL_GPIO_Init+0x350>)
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8006a42:	4b26      	ldr	r3, [pc, #152]	; (8006adc <HAL_GPIO_Init+0x350>)
 8006a44:	685b      	ldr	r3, [r3, #4]
 8006a46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	43db      	mvns	r3, r3
 8006a4c:	693a      	ldr	r2, [r7, #16]
 8006a4e:	4013      	ands	r3, r2
 8006a50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	685b      	ldr	r3, [r3, #4]
 8006a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d003      	beq.n	8006a66 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8006a5e:	693a      	ldr	r2, [r7, #16]
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	4313      	orrs	r3, r2
 8006a64:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006a66:	4a1d      	ldr	r2, [pc, #116]	; (8006adc <HAL_GPIO_Init+0x350>)
 8006a68:	693b      	ldr	r3, [r7, #16]
 8006a6a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8006a6c:	4b1b      	ldr	r3, [pc, #108]	; (8006adc <HAL_GPIO_Init+0x350>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	43db      	mvns	r3, r3
 8006a76:	693a      	ldr	r2, [r7, #16]
 8006a78:	4013      	ands	r3, r2
 8006a7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d003      	beq.n	8006a90 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8006a88:	693a      	ldr	r2, [r7, #16]
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006a90:	4a12      	ldr	r2, [pc, #72]	; (8006adc <HAL_GPIO_Init+0x350>)
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	3301      	adds	r3, #1
 8006a9a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	681a      	ldr	r2, [r3, #0]
 8006aa0:	697b      	ldr	r3, [r7, #20]
 8006aa2:	fa22 f303 	lsr.w	r3, r2, r3
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	f47f ae78 	bne.w	800679c <HAL_GPIO_Init+0x10>
  }
}
 8006aac:	bf00      	nop
 8006aae:	bf00      	nop
 8006ab0:	371c      	adds	r7, #28
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab8:	4770      	bx	lr
 8006aba:	bf00      	nop
 8006abc:	40021000 	.word	0x40021000
 8006ac0:	40010000 	.word	0x40010000
 8006ac4:	48000400 	.word	0x48000400
 8006ac8:	48000800 	.word	0x48000800
 8006acc:	48000c00 	.word	0x48000c00
 8006ad0:	48001000 	.word	0x48001000
 8006ad4:	48001400 	.word	0x48001400
 8006ad8:	48001800 	.word	0x48001800
 8006adc:	40010400 	.word	0x40010400

08006ae0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b085      	sub	sp, #20
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
 8006ae8:	460b      	mov	r3, r1
 8006aea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	691a      	ldr	r2, [r3, #16]
 8006af0:	887b      	ldrh	r3, [r7, #2]
 8006af2:	4013      	ands	r3, r2
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d002      	beq.n	8006afe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006af8:	2301      	movs	r3, #1
 8006afa:	73fb      	strb	r3, [r7, #15]
 8006afc:	e001      	b.n	8006b02 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006afe:	2300      	movs	r3, #0
 8006b00:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006b02:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	3714      	adds	r7, #20
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0e:	4770      	bx	lr

08006b10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006b10:	b480      	push	{r7}
 8006b12:	b083      	sub	sp, #12
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
 8006b18:	460b      	mov	r3, r1
 8006b1a:	807b      	strh	r3, [r7, #2]
 8006b1c:	4613      	mov	r3, r2
 8006b1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006b20:	787b      	ldrb	r3, [r7, #1]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d003      	beq.n	8006b2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006b26:	887a      	ldrh	r2, [r7, #2]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006b2c:	e002      	b.n	8006b34 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006b2e:	887a      	ldrh	r2, [r7, #2]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006b34:	bf00      	nop
 8006b36:	370c      	adds	r7, #12
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3e:	4770      	bx	lr

08006b40 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b085      	sub	sp, #20
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
 8006b48:	460b      	mov	r3, r1
 8006b4a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	695b      	ldr	r3, [r3, #20]
 8006b50:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006b52:	887a      	ldrh	r2, [r7, #2]
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	4013      	ands	r3, r2
 8006b58:	041a      	lsls	r2, r3, #16
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	43d9      	mvns	r1, r3
 8006b5e:	887b      	ldrh	r3, [r7, #2]
 8006b60:	400b      	ands	r3, r1
 8006b62:	431a      	orrs	r2, r3
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	619a      	str	r2, [r3, #24]
}
 8006b68:	bf00      	nop
 8006b6a:	3714      	adds	r7, #20
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b72:	4770      	bx	lr

08006b74 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b082      	sub	sp, #8
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006b7e:	4b08      	ldr	r3, [pc, #32]	; (8006ba0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006b80:	695a      	ldr	r2, [r3, #20]
 8006b82:	88fb      	ldrh	r3, [r7, #6]
 8006b84:	4013      	ands	r3, r2
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d006      	beq.n	8006b98 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006b8a:	4a05      	ldr	r2, [pc, #20]	; (8006ba0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006b8c:	88fb      	ldrh	r3, [r7, #6]
 8006b8e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006b90:	88fb      	ldrh	r3, [r7, #6]
 8006b92:	4618      	mov	r0, r3
 8006b94:	f7fd fb34 	bl	8004200 <HAL_GPIO_EXTI_Callback>
  }
}
 8006b98:	bf00      	nop
 8006b9a:	3708      	adds	r7, #8
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}
 8006ba0:	40010400 	.word	0x40010400

08006ba4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b082      	sub	sp, #8
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d101      	bne.n	8006bb6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	e081      	b.n	8006cba <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006bbc:	b2db      	uxtb	r3, r3
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d106      	bne.n	8006bd0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f7fd ffb0 	bl	8004b30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2224      	movs	r2, #36	; 0x24
 8006bd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	681a      	ldr	r2, [r3, #0]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f022 0201 	bic.w	r2, r2, #1
 8006be6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	685a      	ldr	r2, [r3, #4]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006bf4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	689a      	ldr	r2, [r3, #8]
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006c04:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	68db      	ldr	r3, [r3, #12]
 8006c0a:	2b01      	cmp	r3, #1
 8006c0c:	d107      	bne.n	8006c1e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	689a      	ldr	r2, [r3, #8]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006c1a:	609a      	str	r2, [r3, #8]
 8006c1c:	e006      	b.n	8006c2c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	689a      	ldr	r2, [r3, #8]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006c2a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	68db      	ldr	r3, [r3, #12]
 8006c30:	2b02      	cmp	r3, #2
 8006c32:	d104      	bne.n	8006c3e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c3c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	687a      	ldr	r2, [r7, #4]
 8006c46:	6812      	ldr	r2, [r2, #0]
 8006c48:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006c4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c50:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	68da      	ldr	r2, [r3, #12]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006c60:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	691a      	ldr	r2, [r3, #16]
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	695b      	ldr	r3, [r3, #20]
 8006c6a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	699b      	ldr	r3, [r3, #24]
 8006c72:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	430a      	orrs	r2, r1
 8006c7a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	69d9      	ldr	r1, [r3, #28]
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6a1a      	ldr	r2, [r3, #32]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	430a      	orrs	r2, r1
 8006c8a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	681a      	ldr	r2, [r3, #0]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f042 0201 	orr.w	r2, r2, #1
 8006c9a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2220      	movs	r2, #32
 8006ca6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2200      	movs	r2, #0
 8006cae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006cb8:	2300      	movs	r3, #0
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	3708      	adds	r7, #8
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}
	...

08006cc4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b088      	sub	sp, #32
 8006cc8:	af02      	add	r7, sp, #8
 8006cca:	60f8      	str	r0, [r7, #12]
 8006ccc:	607a      	str	r2, [r7, #4]
 8006cce:	461a      	mov	r2, r3
 8006cd0:	460b      	mov	r3, r1
 8006cd2:	817b      	strh	r3, [r7, #10]
 8006cd4:	4613      	mov	r3, r2
 8006cd6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006cde:	b2db      	uxtb	r3, r3
 8006ce0:	2b20      	cmp	r3, #32
 8006ce2:	f040 80da 	bne.w	8006e9a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006cec:	2b01      	cmp	r3, #1
 8006cee:	d101      	bne.n	8006cf4 <HAL_I2C_Master_Transmit+0x30>
 8006cf0:	2302      	movs	r3, #2
 8006cf2:	e0d3      	b.n	8006e9c <HAL_I2C_Master_Transmit+0x1d8>
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	2201      	movs	r2, #1
 8006cf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006cfc:	f7ff f94e 	bl	8005f9c <HAL_GetTick>
 8006d00:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	9300      	str	r3, [sp, #0]
 8006d06:	2319      	movs	r3, #25
 8006d08:	2201      	movs	r2, #1
 8006d0a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006d0e:	68f8      	ldr	r0, [r7, #12]
 8006d10:	f001 f8d1 	bl	8007eb6 <I2C_WaitOnFlagUntilTimeout>
 8006d14:	4603      	mov	r3, r0
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d001      	beq.n	8006d1e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	e0be      	b.n	8006e9c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	2221      	movs	r2, #33	; 0x21
 8006d22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	2210      	movs	r2, #16
 8006d2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	2200      	movs	r2, #0
 8006d32:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	687a      	ldr	r2, [r7, #4]
 8006d38:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	893a      	ldrh	r2, [r7, #8]
 8006d3e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2200      	movs	r2, #0
 8006d44:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	2bff      	cmp	r3, #255	; 0xff
 8006d4e:	d90e      	bls.n	8006d6e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	22ff      	movs	r2, #255	; 0xff
 8006d54:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d5a:	b2da      	uxtb	r2, r3
 8006d5c:	8979      	ldrh	r1, [r7, #10]
 8006d5e:	4b51      	ldr	r3, [pc, #324]	; (8006ea4 <HAL_I2C_Master_Transmit+0x1e0>)
 8006d60:	9300      	str	r3, [sp, #0]
 8006d62:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006d66:	68f8      	ldr	r0, [r7, #12]
 8006d68:	f001 fa4e 	bl	8008208 <I2C_TransferConfig>
 8006d6c:	e06c      	b.n	8006e48 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d72:	b29a      	uxth	r2, r3
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d7c:	b2da      	uxtb	r2, r3
 8006d7e:	8979      	ldrh	r1, [r7, #10]
 8006d80:	4b48      	ldr	r3, [pc, #288]	; (8006ea4 <HAL_I2C_Master_Transmit+0x1e0>)
 8006d82:	9300      	str	r3, [sp, #0]
 8006d84:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006d88:	68f8      	ldr	r0, [r7, #12]
 8006d8a:	f001 fa3d 	bl	8008208 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8006d8e:	e05b      	b.n	8006e48 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d90:	697a      	ldr	r2, [r7, #20]
 8006d92:	6a39      	ldr	r1, [r7, #32]
 8006d94:	68f8      	ldr	r0, [r7, #12]
 8006d96:	f001 f8ce 	bl	8007f36 <I2C_WaitOnTXISFlagUntilTimeout>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d001      	beq.n	8006da4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8006da0:	2301      	movs	r3, #1
 8006da2:	e07b      	b.n	8006e9c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da8:	781a      	ldrb	r2, [r3, #0]
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db4:	1c5a      	adds	r2, r3, #1
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dbe:	b29b      	uxth	r3, r3
 8006dc0:	3b01      	subs	r3, #1
 8006dc2:	b29a      	uxth	r2, r3
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dcc:	3b01      	subs	r3, #1
 8006dce:	b29a      	uxth	r2, r3
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dd8:	b29b      	uxth	r3, r3
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d034      	beq.n	8006e48 <HAL_I2C_Master_Transmit+0x184>
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d130      	bne.n	8006e48 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	9300      	str	r3, [sp, #0]
 8006dea:	6a3b      	ldr	r3, [r7, #32]
 8006dec:	2200      	movs	r2, #0
 8006dee:	2180      	movs	r1, #128	; 0x80
 8006df0:	68f8      	ldr	r0, [r7, #12]
 8006df2:	f001 f860 	bl	8007eb6 <I2C_WaitOnFlagUntilTimeout>
 8006df6:	4603      	mov	r3, r0
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d001      	beq.n	8006e00 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	e04d      	b.n	8006e9c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e04:	b29b      	uxth	r3, r3
 8006e06:	2bff      	cmp	r3, #255	; 0xff
 8006e08:	d90e      	bls.n	8006e28 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	22ff      	movs	r2, #255	; 0xff
 8006e0e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e14:	b2da      	uxtb	r2, r3
 8006e16:	8979      	ldrh	r1, [r7, #10]
 8006e18:	2300      	movs	r3, #0
 8006e1a:	9300      	str	r3, [sp, #0]
 8006e1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006e20:	68f8      	ldr	r0, [r7, #12]
 8006e22:	f001 f9f1 	bl	8008208 <I2C_TransferConfig>
 8006e26:	e00f      	b.n	8006e48 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e2c:	b29a      	uxth	r2, r3
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e36:	b2da      	uxtb	r2, r3
 8006e38:	8979      	ldrh	r1, [r7, #10]
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	9300      	str	r3, [sp, #0]
 8006e3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006e42:	68f8      	ldr	r0, [r7, #12]
 8006e44:	f001 f9e0 	bl	8008208 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e4c:	b29b      	uxth	r3, r3
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d19e      	bne.n	8006d90 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006e52:	697a      	ldr	r2, [r7, #20]
 8006e54:	6a39      	ldr	r1, [r7, #32]
 8006e56:	68f8      	ldr	r0, [r7, #12]
 8006e58:	f001 f8ad 	bl	8007fb6 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d001      	beq.n	8006e66 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8006e62:	2301      	movs	r3, #1
 8006e64:	e01a      	b.n	8006e9c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	2220      	movs	r2, #32
 8006e6c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	6859      	ldr	r1, [r3, #4]
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681a      	ldr	r2, [r3, #0]
 8006e78:	4b0b      	ldr	r3, [pc, #44]	; (8006ea8 <HAL_I2C_Master_Transmit+0x1e4>)
 8006e7a:	400b      	ands	r3, r1
 8006e7c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	2220      	movs	r2, #32
 8006e82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	2200      	movs	r2, #0
 8006e92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006e96:	2300      	movs	r3, #0
 8006e98:	e000      	b.n	8006e9c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8006e9a:	2302      	movs	r3, #2
  }
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3718      	adds	r7, #24
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}
 8006ea4:	80002000 	.word	0x80002000
 8006ea8:	fe00e800 	.word	0xfe00e800

08006eac <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b088      	sub	sp, #32
 8006eb0:	af02      	add	r7, sp, #8
 8006eb2:	60f8      	str	r0, [r7, #12]
 8006eb4:	4608      	mov	r0, r1
 8006eb6:	4611      	mov	r1, r2
 8006eb8:	461a      	mov	r2, r3
 8006eba:	4603      	mov	r3, r0
 8006ebc:	817b      	strh	r3, [r7, #10]
 8006ebe:	460b      	mov	r3, r1
 8006ec0:	813b      	strh	r3, [r7, #8]
 8006ec2:	4613      	mov	r3, r2
 8006ec4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ecc:	b2db      	uxtb	r3, r3
 8006ece:	2b20      	cmp	r3, #32
 8006ed0:	f040 80f9 	bne.w	80070c6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ed4:	6a3b      	ldr	r3, [r7, #32]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d002      	beq.n	8006ee0 <HAL_I2C_Mem_Write+0x34>
 8006eda:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d105      	bne.n	8006eec <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ee6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006ee8:	2301      	movs	r3, #1
 8006eea:	e0ed      	b.n	80070c8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006ef2:	2b01      	cmp	r3, #1
 8006ef4:	d101      	bne.n	8006efa <HAL_I2C_Mem_Write+0x4e>
 8006ef6:	2302      	movs	r3, #2
 8006ef8:	e0e6      	b.n	80070c8 <HAL_I2C_Mem_Write+0x21c>
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	2201      	movs	r2, #1
 8006efe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006f02:	f7ff f84b 	bl	8005f9c <HAL_GetTick>
 8006f06:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	9300      	str	r3, [sp, #0]
 8006f0c:	2319      	movs	r3, #25
 8006f0e:	2201      	movs	r2, #1
 8006f10:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006f14:	68f8      	ldr	r0, [r7, #12]
 8006f16:	f000 ffce 	bl	8007eb6 <I2C_WaitOnFlagUntilTimeout>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d001      	beq.n	8006f24 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006f20:	2301      	movs	r3, #1
 8006f22:	e0d1      	b.n	80070c8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	2221      	movs	r2, #33	; 0x21
 8006f28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	2240      	movs	r2, #64	; 0x40
 8006f30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2200      	movs	r2, #0
 8006f38:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	6a3a      	ldr	r2, [r7, #32]
 8006f3e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006f44:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006f4c:	88f8      	ldrh	r0, [r7, #6]
 8006f4e:	893a      	ldrh	r2, [r7, #8]
 8006f50:	8979      	ldrh	r1, [r7, #10]
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	9301      	str	r3, [sp, #4]
 8006f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f58:	9300      	str	r3, [sp, #0]
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	68f8      	ldr	r0, [r7, #12]
 8006f5e:	f000 fb87 	bl	8007670 <I2C_RequestMemoryWrite>
 8006f62:	4603      	mov	r3, r0
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d005      	beq.n	8006f74 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006f70:	2301      	movs	r3, #1
 8006f72:	e0a9      	b.n	80070c8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f78:	b29b      	uxth	r3, r3
 8006f7a:	2bff      	cmp	r3, #255	; 0xff
 8006f7c:	d90e      	bls.n	8006f9c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	22ff      	movs	r2, #255	; 0xff
 8006f82:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f88:	b2da      	uxtb	r2, r3
 8006f8a:	8979      	ldrh	r1, [r7, #10]
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	9300      	str	r3, [sp, #0]
 8006f90:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006f94:	68f8      	ldr	r0, [r7, #12]
 8006f96:	f001 f937 	bl	8008208 <I2C_TransferConfig>
 8006f9a:	e00f      	b.n	8006fbc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fa0:	b29a      	uxth	r2, r3
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006faa:	b2da      	uxtb	r2, r3
 8006fac:	8979      	ldrh	r1, [r7, #10]
 8006fae:	2300      	movs	r3, #0
 8006fb0:	9300      	str	r3, [sp, #0]
 8006fb2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006fb6:	68f8      	ldr	r0, [r7, #12]
 8006fb8:	f001 f926 	bl	8008208 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006fbc:	697a      	ldr	r2, [r7, #20]
 8006fbe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006fc0:	68f8      	ldr	r0, [r7, #12]
 8006fc2:	f000 ffb8 	bl	8007f36 <I2C_WaitOnTXISFlagUntilTimeout>
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d001      	beq.n	8006fd0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006fcc:	2301      	movs	r3, #1
 8006fce:	e07b      	b.n	80070c8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd4:	781a      	ldrb	r2, [r3, #0]
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fe0:	1c5a      	adds	r2, r3, #1
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fea:	b29b      	uxth	r3, r3
 8006fec:	3b01      	subs	r3, #1
 8006fee:	b29a      	uxth	r2, r3
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ff8:	3b01      	subs	r3, #1
 8006ffa:	b29a      	uxth	r2, r3
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007004:	b29b      	uxth	r3, r3
 8007006:	2b00      	cmp	r3, #0
 8007008:	d034      	beq.n	8007074 <HAL_I2C_Mem_Write+0x1c8>
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800700e:	2b00      	cmp	r3, #0
 8007010:	d130      	bne.n	8007074 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	9300      	str	r3, [sp, #0]
 8007016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007018:	2200      	movs	r2, #0
 800701a:	2180      	movs	r1, #128	; 0x80
 800701c:	68f8      	ldr	r0, [r7, #12]
 800701e:	f000 ff4a 	bl	8007eb6 <I2C_WaitOnFlagUntilTimeout>
 8007022:	4603      	mov	r3, r0
 8007024:	2b00      	cmp	r3, #0
 8007026:	d001      	beq.n	800702c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8007028:	2301      	movs	r3, #1
 800702a:	e04d      	b.n	80070c8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007030:	b29b      	uxth	r3, r3
 8007032:	2bff      	cmp	r3, #255	; 0xff
 8007034:	d90e      	bls.n	8007054 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	22ff      	movs	r2, #255	; 0xff
 800703a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007040:	b2da      	uxtb	r2, r3
 8007042:	8979      	ldrh	r1, [r7, #10]
 8007044:	2300      	movs	r3, #0
 8007046:	9300      	str	r3, [sp, #0]
 8007048:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800704c:	68f8      	ldr	r0, [r7, #12]
 800704e:	f001 f8db 	bl	8008208 <I2C_TransferConfig>
 8007052:	e00f      	b.n	8007074 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007058:	b29a      	uxth	r2, r3
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007062:	b2da      	uxtb	r2, r3
 8007064:	8979      	ldrh	r1, [r7, #10]
 8007066:	2300      	movs	r3, #0
 8007068:	9300      	str	r3, [sp, #0]
 800706a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800706e:	68f8      	ldr	r0, [r7, #12]
 8007070:	f001 f8ca 	bl	8008208 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007078:	b29b      	uxth	r3, r3
 800707a:	2b00      	cmp	r3, #0
 800707c:	d19e      	bne.n	8006fbc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800707e:	697a      	ldr	r2, [r7, #20]
 8007080:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007082:	68f8      	ldr	r0, [r7, #12]
 8007084:	f000 ff97 	bl	8007fb6 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007088:	4603      	mov	r3, r0
 800708a:	2b00      	cmp	r3, #0
 800708c:	d001      	beq.n	8007092 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800708e:	2301      	movs	r3, #1
 8007090:	e01a      	b.n	80070c8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	2220      	movs	r2, #32
 8007098:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	6859      	ldr	r1, [r3, #4]
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681a      	ldr	r2, [r3, #0]
 80070a4:	4b0a      	ldr	r3, [pc, #40]	; (80070d0 <HAL_I2C_Mem_Write+0x224>)
 80070a6:	400b      	ands	r3, r1
 80070a8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	2220      	movs	r2, #32
 80070ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	2200      	movs	r2, #0
 80070b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	2200      	movs	r2, #0
 80070be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80070c2:	2300      	movs	r3, #0
 80070c4:	e000      	b.n	80070c8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80070c6:	2302      	movs	r3, #2
  }
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	3718      	adds	r7, #24
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}
 80070d0:	fe00e800 	.word	0xfe00e800

080070d4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b088      	sub	sp, #32
 80070d8:	af02      	add	r7, sp, #8
 80070da:	60f8      	str	r0, [r7, #12]
 80070dc:	4608      	mov	r0, r1
 80070de:	4611      	mov	r1, r2
 80070e0:	461a      	mov	r2, r3
 80070e2:	4603      	mov	r3, r0
 80070e4:	817b      	strh	r3, [r7, #10]
 80070e6:	460b      	mov	r3, r1
 80070e8:	813b      	strh	r3, [r7, #8]
 80070ea:	4613      	mov	r3, r2
 80070ec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80070f4:	b2db      	uxtb	r3, r3
 80070f6:	2b20      	cmp	r3, #32
 80070f8:	f040 80fd 	bne.w	80072f6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80070fc:	6a3b      	ldr	r3, [r7, #32]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d002      	beq.n	8007108 <HAL_I2C_Mem_Read+0x34>
 8007102:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007104:	2b00      	cmp	r3, #0
 8007106:	d105      	bne.n	8007114 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800710e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007110:	2301      	movs	r3, #1
 8007112:	e0f1      	b.n	80072f8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800711a:	2b01      	cmp	r3, #1
 800711c:	d101      	bne.n	8007122 <HAL_I2C_Mem_Read+0x4e>
 800711e:	2302      	movs	r3, #2
 8007120:	e0ea      	b.n	80072f8 <HAL_I2C_Mem_Read+0x224>
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	2201      	movs	r2, #1
 8007126:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800712a:	f7fe ff37 	bl	8005f9c <HAL_GetTick>
 800712e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	9300      	str	r3, [sp, #0]
 8007134:	2319      	movs	r3, #25
 8007136:	2201      	movs	r2, #1
 8007138:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800713c:	68f8      	ldr	r0, [r7, #12]
 800713e:	f000 feba 	bl	8007eb6 <I2C_WaitOnFlagUntilTimeout>
 8007142:	4603      	mov	r3, r0
 8007144:	2b00      	cmp	r3, #0
 8007146:	d001      	beq.n	800714c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8007148:	2301      	movs	r3, #1
 800714a:	e0d5      	b.n	80072f8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2222      	movs	r2, #34	; 0x22
 8007150:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	2240      	movs	r2, #64	; 0x40
 8007158:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	2200      	movs	r2, #0
 8007160:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	6a3a      	ldr	r2, [r7, #32]
 8007166:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800716c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	2200      	movs	r2, #0
 8007172:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007174:	88f8      	ldrh	r0, [r7, #6]
 8007176:	893a      	ldrh	r2, [r7, #8]
 8007178:	8979      	ldrh	r1, [r7, #10]
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	9301      	str	r3, [sp, #4]
 800717e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007180:	9300      	str	r3, [sp, #0]
 8007182:	4603      	mov	r3, r0
 8007184:	68f8      	ldr	r0, [r7, #12]
 8007186:	f000 fac7 	bl	8007718 <I2C_RequestMemoryRead>
 800718a:	4603      	mov	r3, r0
 800718c:	2b00      	cmp	r3, #0
 800718e:	d005      	beq.n	800719c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	2200      	movs	r2, #0
 8007194:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007198:	2301      	movs	r3, #1
 800719a:	e0ad      	b.n	80072f8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071a0:	b29b      	uxth	r3, r3
 80071a2:	2bff      	cmp	r3, #255	; 0xff
 80071a4:	d90e      	bls.n	80071c4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	22ff      	movs	r2, #255	; 0xff
 80071aa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071b0:	b2da      	uxtb	r2, r3
 80071b2:	8979      	ldrh	r1, [r7, #10]
 80071b4:	4b52      	ldr	r3, [pc, #328]	; (8007300 <HAL_I2C_Mem_Read+0x22c>)
 80071b6:	9300      	str	r3, [sp, #0]
 80071b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80071bc:	68f8      	ldr	r0, [r7, #12]
 80071be:	f001 f823 	bl	8008208 <I2C_TransferConfig>
 80071c2:	e00f      	b.n	80071e4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071c8:	b29a      	uxth	r2, r3
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071d2:	b2da      	uxtb	r2, r3
 80071d4:	8979      	ldrh	r1, [r7, #10]
 80071d6:	4b4a      	ldr	r3, [pc, #296]	; (8007300 <HAL_I2C_Mem_Read+0x22c>)
 80071d8:	9300      	str	r3, [sp, #0]
 80071da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80071de:	68f8      	ldr	r0, [r7, #12]
 80071e0:	f001 f812 	bl	8008208 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80071e4:	697b      	ldr	r3, [r7, #20]
 80071e6:	9300      	str	r3, [sp, #0]
 80071e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ea:	2200      	movs	r2, #0
 80071ec:	2104      	movs	r1, #4
 80071ee:	68f8      	ldr	r0, [r7, #12]
 80071f0:	f000 fe61 	bl	8007eb6 <I2C_WaitOnFlagUntilTimeout>
 80071f4:	4603      	mov	r3, r0
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d001      	beq.n	80071fe <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80071fa:	2301      	movs	r3, #1
 80071fc:	e07c      	b.n	80072f8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007208:	b2d2      	uxtb	r2, r2
 800720a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007210:	1c5a      	adds	r2, r3, #1
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800721a:	3b01      	subs	r3, #1
 800721c:	b29a      	uxth	r2, r3
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007226:	b29b      	uxth	r3, r3
 8007228:	3b01      	subs	r3, #1
 800722a:	b29a      	uxth	r2, r3
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007234:	b29b      	uxth	r3, r3
 8007236:	2b00      	cmp	r3, #0
 8007238:	d034      	beq.n	80072a4 <HAL_I2C_Mem_Read+0x1d0>
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800723e:	2b00      	cmp	r3, #0
 8007240:	d130      	bne.n	80072a4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	9300      	str	r3, [sp, #0]
 8007246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007248:	2200      	movs	r2, #0
 800724a:	2180      	movs	r1, #128	; 0x80
 800724c:	68f8      	ldr	r0, [r7, #12]
 800724e:	f000 fe32 	bl	8007eb6 <I2C_WaitOnFlagUntilTimeout>
 8007252:	4603      	mov	r3, r0
 8007254:	2b00      	cmp	r3, #0
 8007256:	d001      	beq.n	800725c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8007258:	2301      	movs	r3, #1
 800725a:	e04d      	b.n	80072f8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007260:	b29b      	uxth	r3, r3
 8007262:	2bff      	cmp	r3, #255	; 0xff
 8007264:	d90e      	bls.n	8007284 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	22ff      	movs	r2, #255	; 0xff
 800726a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007270:	b2da      	uxtb	r2, r3
 8007272:	8979      	ldrh	r1, [r7, #10]
 8007274:	2300      	movs	r3, #0
 8007276:	9300      	str	r3, [sp, #0]
 8007278:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800727c:	68f8      	ldr	r0, [r7, #12]
 800727e:	f000 ffc3 	bl	8008208 <I2C_TransferConfig>
 8007282:	e00f      	b.n	80072a4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007288:	b29a      	uxth	r2, r3
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007292:	b2da      	uxtb	r2, r3
 8007294:	8979      	ldrh	r1, [r7, #10]
 8007296:	2300      	movs	r3, #0
 8007298:	9300      	str	r3, [sp, #0]
 800729a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800729e:	68f8      	ldr	r0, [r7, #12]
 80072a0:	f000 ffb2 	bl	8008208 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072a8:	b29b      	uxth	r3, r3
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d19a      	bne.n	80071e4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80072ae:	697a      	ldr	r2, [r7, #20]
 80072b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80072b2:	68f8      	ldr	r0, [r7, #12]
 80072b4:	f000 fe7f 	bl	8007fb6 <I2C_WaitOnSTOPFlagUntilTimeout>
 80072b8:	4603      	mov	r3, r0
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d001      	beq.n	80072c2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80072be:	2301      	movs	r3, #1
 80072c0:	e01a      	b.n	80072f8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	2220      	movs	r2, #32
 80072c8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	6859      	ldr	r1, [r3, #4]
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681a      	ldr	r2, [r3, #0]
 80072d4:	4b0b      	ldr	r3, [pc, #44]	; (8007304 <HAL_I2C_Mem_Read+0x230>)
 80072d6:	400b      	ands	r3, r1
 80072d8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	2220      	movs	r2, #32
 80072de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	2200      	movs	r2, #0
 80072e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	2200      	movs	r2, #0
 80072ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80072f2:	2300      	movs	r3, #0
 80072f4:	e000      	b.n	80072f8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80072f6:	2302      	movs	r3, #2
  }
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	3718      	adds	r7, #24
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bd80      	pop	{r7, pc}
 8007300:	80002400 	.word	0x80002400
 8007304:	fe00e800 	.word	0xfe00e800

08007308 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b084      	sub	sp, #16
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	699b      	ldr	r3, [r3, #24]
 8007316:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007324:	2b00      	cmp	r3, #0
 8007326:	d005      	beq.n	8007334 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800732c:	68ba      	ldr	r2, [r7, #8]
 800732e:	68f9      	ldr	r1, [r7, #12]
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	4798      	blx	r3
  }
}
 8007334:	bf00      	nop
 8007336:	3710      	adds	r7, #16
 8007338:	46bd      	mov	sp, r7
 800733a:	bd80      	pop	{r7, pc}

0800733c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b086      	sub	sp, #24
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	699b      	ldr	r3, [r3, #24]
 800734a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	0a1b      	lsrs	r3, r3, #8
 8007358:	f003 0301 	and.w	r3, r3, #1
 800735c:	2b00      	cmp	r3, #0
 800735e:	d010      	beq.n	8007382 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007360:	693b      	ldr	r3, [r7, #16]
 8007362:	09db      	lsrs	r3, r3, #7
 8007364:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8007368:	2b00      	cmp	r3, #0
 800736a:	d00a      	beq.n	8007382 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007370:	f043 0201 	orr.w	r2, r3, #1
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007380:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	0a9b      	lsrs	r3, r3, #10
 8007386:	f003 0301 	and.w	r3, r3, #1
 800738a:	2b00      	cmp	r3, #0
 800738c:	d010      	beq.n	80073b0 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	09db      	lsrs	r3, r3, #7
 8007392:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8007396:	2b00      	cmp	r3, #0
 8007398:	d00a      	beq.n	80073b0 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800739e:	f043 0208 	orr.w	r2, r3, #8
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80073ae:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80073b0:	697b      	ldr	r3, [r7, #20]
 80073b2:	0a5b      	lsrs	r3, r3, #9
 80073b4:	f003 0301 	and.w	r3, r3, #1
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d010      	beq.n	80073de <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80073bc:	693b      	ldr	r3, [r7, #16]
 80073be:	09db      	lsrs	r3, r3, #7
 80073c0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d00a      	beq.n	80073de <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073cc:	f043 0202 	orr.w	r2, r3, #2
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80073dc:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073e2:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	f003 030b 	and.w	r3, r3, #11
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d003      	beq.n	80073f6 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 80073ee:	68f9      	ldr	r1, [r7, #12]
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f000 fc27 	bl	8007c44 <I2C_ITError>
  }
}
 80073f6:	bf00      	nop
 80073f8:	3718      	adds	r7, #24
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bd80      	pop	{r7, pc}

080073fe <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80073fe:	b480      	push	{r7}
 8007400:	b083      	sub	sp, #12
 8007402:	af00      	add	r7, sp, #0
 8007404:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8007406:	bf00      	nop
 8007408:	370c      	adds	r7, #12
 800740a:	46bd      	mov	sp, r7
 800740c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007410:	4770      	bx	lr

08007412 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007412:	b480      	push	{r7}
 8007414:	b083      	sub	sp, #12
 8007416:	af00      	add	r7, sp, #0
 8007418:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800741a:	bf00      	nop
 800741c:	370c      	adds	r7, #12
 800741e:	46bd      	mov	sp, r7
 8007420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007424:	4770      	bx	lr

08007426 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8007426:	b480      	push	{r7}
 8007428:	b083      	sub	sp, #12
 800742a:	af00      	add	r7, sp, #0
 800742c:	6078      	str	r0, [r7, #4]
 800742e:	460b      	mov	r3, r1
 8007430:	70fb      	strb	r3, [r7, #3]
 8007432:	4613      	mov	r3, r2
 8007434:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8007436:	bf00      	nop
 8007438:	370c      	adds	r7, #12
 800743a:	46bd      	mov	sp, r7
 800743c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007440:	4770      	bx	lr

08007442 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007442:	b480      	push	{r7}
 8007444:	b083      	sub	sp, #12
 8007446:	af00      	add	r7, sp, #0
 8007448:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800744a:	bf00      	nop
 800744c:	370c      	adds	r7, #12
 800744e:	46bd      	mov	sp, r7
 8007450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007454:	4770      	bx	lr

08007456 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007456:	b480      	push	{r7}
 8007458:	b083      	sub	sp, #12
 800745a:	af00      	add	r7, sp, #0
 800745c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800745e:	bf00      	nop
 8007460:	370c      	adds	r7, #12
 8007462:	46bd      	mov	sp, r7
 8007464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007468:	4770      	bx	lr

0800746a <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800746a:	b580      	push	{r7, lr}
 800746c:	b086      	sub	sp, #24
 800746e:	af00      	add	r7, sp, #0
 8007470:	60f8      	str	r0, [r7, #12]
 8007472:	60b9      	str	r1, [r7, #8]
 8007474:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800747a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007486:	2b01      	cmp	r3, #1
 8007488:	d101      	bne.n	800748e <I2C_Slave_ISR_IT+0x24>
 800748a:	2302      	movs	r3, #2
 800748c:	e0ec      	b.n	8007668 <I2C_Slave_ISR_IT+0x1fe>
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	2201      	movs	r2, #1
 8007492:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007496:	693b      	ldr	r3, [r7, #16]
 8007498:	095b      	lsrs	r3, r3, #5
 800749a:	f003 0301 	and.w	r3, r3, #1
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d009      	beq.n	80074b6 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	095b      	lsrs	r3, r3, #5
 80074a6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d003      	beq.n	80074b6 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80074ae:	6939      	ldr	r1, [r7, #16]
 80074b0:	68f8      	ldr	r0, [r7, #12]
 80074b2:	f000 fa67 	bl	8007984 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80074b6:	693b      	ldr	r3, [r7, #16]
 80074b8:	091b      	lsrs	r3, r3, #4
 80074ba:	f003 0301 	and.w	r3, r3, #1
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d04d      	beq.n	800755e <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	091b      	lsrs	r3, r3, #4
 80074c6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d047      	beq.n	800755e <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074d2:	b29b      	uxth	r3, r3
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d128      	bne.n	800752a <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80074de:	b2db      	uxtb	r3, r3
 80074e0:	2b28      	cmp	r3, #40	; 0x28
 80074e2:	d108      	bne.n	80074f6 <I2C_Slave_ISR_IT+0x8c>
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80074ea:	d104      	bne.n	80074f6 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80074ec:	6939      	ldr	r1, [r7, #16]
 80074ee:	68f8      	ldr	r0, [r7, #12]
 80074f0:	f000 fb52 	bl	8007b98 <I2C_ITListenCplt>
 80074f4:	e032      	b.n	800755c <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80074fc:	b2db      	uxtb	r3, r3
 80074fe:	2b29      	cmp	r3, #41	; 0x29
 8007500:	d10e      	bne.n	8007520 <I2C_Slave_ISR_IT+0xb6>
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007508:	d00a      	beq.n	8007520 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	2210      	movs	r2, #16
 8007510:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8007512:	68f8      	ldr	r0, [r7, #12]
 8007514:	f000 fc8d 	bl	8007e32 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007518:	68f8      	ldr	r0, [r7, #12]
 800751a:	f000 f9d5 	bl	80078c8 <I2C_ITSlaveSeqCplt>
 800751e:	e01d      	b.n	800755c <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	2210      	movs	r2, #16
 8007526:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8007528:	e096      	b.n	8007658 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	2210      	movs	r2, #16
 8007530:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007536:	f043 0204 	orr.w	r2, r3, #4
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d004      	beq.n	800754e <I2C_Slave_ISR_IT+0xe4>
 8007544:	697b      	ldr	r3, [r7, #20]
 8007546:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800754a:	f040 8085 	bne.w	8007658 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007552:	4619      	mov	r1, r3
 8007554:	68f8      	ldr	r0, [r7, #12]
 8007556:	f000 fb75 	bl	8007c44 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800755a:	e07d      	b.n	8007658 <I2C_Slave_ISR_IT+0x1ee>
 800755c:	e07c      	b.n	8007658 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800755e:	693b      	ldr	r3, [r7, #16]
 8007560:	089b      	lsrs	r3, r3, #2
 8007562:	f003 0301 	and.w	r3, r3, #1
 8007566:	2b00      	cmp	r3, #0
 8007568:	d030      	beq.n	80075cc <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	089b      	lsrs	r3, r3, #2
 800756e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8007572:	2b00      	cmp	r3, #0
 8007574:	d02a      	beq.n	80075cc <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800757a:	b29b      	uxth	r3, r3
 800757c:	2b00      	cmp	r3, #0
 800757e:	d018      	beq.n	80075b2 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800758a:	b2d2      	uxtb	r2, r2
 800758c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007592:	1c5a      	adds	r2, r3, #1
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800759c:	3b01      	subs	r3, #1
 800759e:	b29a      	uxth	r2, r3
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075a8:	b29b      	uxth	r3, r3
 80075aa:	3b01      	subs	r3, #1
 80075ac:	b29a      	uxth	r2, r3
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075b6:	b29b      	uxth	r3, r3
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d14f      	bne.n	800765c <I2C_Slave_ISR_IT+0x1f2>
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80075c2:	d04b      	beq.n	800765c <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80075c4:	68f8      	ldr	r0, [r7, #12]
 80075c6:	f000 f97f 	bl	80078c8 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80075ca:	e047      	b.n	800765c <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80075cc:	693b      	ldr	r3, [r7, #16]
 80075ce:	08db      	lsrs	r3, r3, #3
 80075d0:	f003 0301 	and.w	r3, r3, #1
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d00a      	beq.n	80075ee <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	08db      	lsrs	r3, r3, #3
 80075dc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d004      	beq.n	80075ee <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80075e4:	6939      	ldr	r1, [r7, #16]
 80075e6:	68f8      	ldr	r0, [r7, #12]
 80075e8:	f000 f8ea 	bl	80077c0 <I2C_ITAddrCplt>
 80075ec:	e037      	b.n	800765e <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	085b      	lsrs	r3, r3, #1
 80075f2:	f003 0301 	and.w	r3, r3, #1
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d031      	beq.n	800765e <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	085b      	lsrs	r3, r3, #1
 80075fe:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007602:	2b00      	cmp	r3, #0
 8007604:	d02b      	beq.n	800765e <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800760a:	b29b      	uxth	r3, r3
 800760c:	2b00      	cmp	r3, #0
 800760e:	d018      	beq.n	8007642 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007614:	781a      	ldrb	r2, [r3, #0]
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007620:	1c5a      	adds	r2, r3, #1
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800762a:	b29b      	uxth	r3, r3
 800762c:	3b01      	subs	r3, #1
 800762e:	b29a      	uxth	r2, r3
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007638:	3b01      	subs	r3, #1
 800763a:	b29a      	uxth	r2, r3
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	851a      	strh	r2, [r3, #40]	; 0x28
 8007640:	e00d      	b.n	800765e <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8007642:	697b      	ldr	r3, [r7, #20]
 8007644:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007648:	d002      	beq.n	8007650 <I2C_Slave_ISR_IT+0x1e6>
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d106      	bne.n	800765e <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007650:	68f8      	ldr	r0, [r7, #12]
 8007652:	f000 f939 	bl	80078c8 <I2C_ITSlaveSeqCplt>
 8007656:	e002      	b.n	800765e <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8007658:	bf00      	nop
 800765a:	e000      	b.n	800765e <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 800765c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	2200      	movs	r2, #0
 8007662:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007666:	2300      	movs	r3, #0
}
 8007668:	4618      	mov	r0, r3
 800766a:	3718      	adds	r7, #24
 800766c:	46bd      	mov	sp, r7
 800766e:	bd80      	pop	{r7, pc}

08007670 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b086      	sub	sp, #24
 8007674:	af02      	add	r7, sp, #8
 8007676:	60f8      	str	r0, [r7, #12]
 8007678:	4608      	mov	r0, r1
 800767a:	4611      	mov	r1, r2
 800767c:	461a      	mov	r2, r3
 800767e:	4603      	mov	r3, r0
 8007680:	817b      	strh	r3, [r7, #10]
 8007682:	460b      	mov	r3, r1
 8007684:	813b      	strh	r3, [r7, #8]
 8007686:	4613      	mov	r3, r2
 8007688:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800768a:	88fb      	ldrh	r3, [r7, #6]
 800768c:	b2da      	uxtb	r2, r3
 800768e:	8979      	ldrh	r1, [r7, #10]
 8007690:	4b20      	ldr	r3, [pc, #128]	; (8007714 <I2C_RequestMemoryWrite+0xa4>)
 8007692:	9300      	str	r3, [sp, #0]
 8007694:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007698:	68f8      	ldr	r0, [r7, #12]
 800769a:	f000 fdb5 	bl	8008208 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800769e:	69fa      	ldr	r2, [r7, #28]
 80076a0:	69b9      	ldr	r1, [r7, #24]
 80076a2:	68f8      	ldr	r0, [r7, #12]
 80076a4:	f000 fc47 	bl	8007f36 <I2C_WaitOnTXISFlagUntilTimeout>
 80076a8:	4603      	mov	r3, r0
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d001      	beq.n	80076b2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80076ae:	2301      	movs	r3, #1
 80076b0:	e02c      	b.n	800770c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80076b2:	88fb      	ldrh	r3, [r7, #6]
 80076b4:	2b01      	cmp	r3, #1
 80076b6:	d105      	bne.n	80076c4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80076b8:	893b      	ldrh	r3, [r7, #8]
 80076ba:	b2da      	uxtb	r2, r3
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	629a      	str	r2, [r3, #40]	; 0x28
 80076c2:	e015      	b.n	80076f0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80076c4:	893b      	ldrh	r3, [r7, #8]
 80076c6:	0a1b      	lsrs	r3, r3, #8
 80076c8:	b29b      	uxth	r3, r3
 80076ca:	b2da      	uxtb	r2, r3
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80076d2:	69fa      	ldr	r2, [r7, #28]
 80076d4:	69b9      	ldr	r1, [r7, #24]
 80076d6:	68f8      	ldr	r0, [r7, #12]
 80076d8:	f000 fc2d 	bl	8007f36 <I2C_WaitOnTXISFlagUntilTimeout>
 80076dc:	4603      	mov	r3, r0
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d001      	beq.n	80076e6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80076e2:	2301      	movs	r3, #1
 80076e4:	e012      	b.n	800770c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80076e6:	893b      	ldrh	r3, [r7, #8]
 80076e8:	b2da      	uxtb	r2, r3
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80076f0:	69fb      	ldr	r3, [r7, #28]
 80076f2:	9300      	str	r3, [sp, #0]
 80076f4:	69bb      	ldr	r3, [r7, #24]
 80076f6:	2200      	movs	r2, #0
 80076f8:	2180      	movs	r1, #128	; 0x80
 80076fa:	68f8      	ldr	r0, [r7, #12]
 80076fc:	f000 fbdb 	bl	8007eb6 <I2C_WaitOnFlagUntilTimeout>
 8007700:	4603      	mov	r3, r0
 8007702:	2b00      	cmp	r3, #0
 8007704:	d001      	beq.n	800770a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8007706:	2301      	movs	r3, #1
 8007708:	e000      	b.n	800770c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800770a:	2300      	movs	r3, #0
}
 800770c:	4618      	mov	r0, r3
 800770e:	3710      	adds	r7, #16
 8007710:	46bd      	mov	sp, r7
 8007712:	bd80      	pop	{r7, pc}
 8007714:	80002000 	.word	0x80002000

08007718 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b086      	sub	sp, #24
 800771c:	af02      	add	r7, sp, #8
 800771e:	60f8      	str	r0, [r7, #12]
 8007720:	4608      	mov	r0, r1
 8007722:	4611      	mov	r1, r2
 8007724:	461a      	mov	r2, r3
 8007726:	4603      	mov	r3, r0
 8007728:	817b      	strh	r3, [r7, #10]
 800772a:	460b      	mov	r3, r1
 800772c:	813b      	strh	r3, [r7, #8]
 800772e:	4613      	mov	r3, r2
 8007730:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007732:	88fb      	ldrh	r3, [r7, #6]
 8007734:	b2da      	uxtb	r2, r3
 8007736:	8979      	ldrh	r1, [r7, #10]
 8007738:	4b20      	ldr	r3, [pc, #128]	; (80077bc <I2C_RequestMemoryRead+0xa4>)
 800773a:	9300      	str	r3, [sp, #0]
 800773c:	2300      	movs	r3, #0
 800773e:	68f8      	ldr	r0, [r7, #12]
 8007740:	f000 fd62 	bl	8008208 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007744:	69fa      	ldr	r2, [r7, #28]
 8007746:	69b9      	ldr	r1, [r7, #24]
 8007748:	68f8      	ldr	r0, [r7, #12]
 800774a:	f000 fbf4 	bl	8007f36 <I2C_WaitOnTXISFlagUntilTimeout>
 800774e:	4603      	mov	r3, r0
 8007750:	2b00      	cmp	r3, #0
 8007752:	d001      	beq.n	8007758 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8007754:	2301      	movs	r3, #1
 8007756:	e02c      	b.n	80077b2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007758:	88fb      	ldrh	r3, [r7, #6]
 800775a:	2b01      	cmp	r3, #1
 800775c:	d105      	bne.n	800776a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800775e:	893b      	ldrh	r3, [r7, #8]
 8007760:	b2da      	uxtb	r2, r3
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	629a      	str	r2, [r3, #40]	; 0x28
 8007768:	e015      	b.n	8007796 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800776a:	893b      	ldrh	r3, [r7, #8]
 800776c:	0a1b      	lsrs	r3, r3, #8
 800776e:	b29b      	uxth	r3, r3
 8007770:	b2da      	uxtb	r2, r3
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007778:	69fa      	ldr	r2, [r7, #28]
 800777a:	69b9      	ldr	r1, [r7, #24]
 800777c:	68f8      	ldr	r0, [r7, #12]
 800777e:	f000 fbda 	bl	8007f36 <I2C_WaitOnTXISFlagUntilTimeout>
 8007782:	4603      	mov	r3, r0
 8007784:	2b00      	cmp	r3, #0
 8007786:	d001      	beq.n	800778c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8007788:	2301      	movs	r3, #1
 800778a:	e012      	b.n	80077b2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800778c:	893b      	ldrh	r3, [r7, #8]
 800778e:	b2da      	uxtb	r2, r3
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8007796:	69fb      	ldr	r3, [r7, #28]
 8007798:	9300      	str	r3, [sp, #0]
 800779a:	69bb      	ldr	r3, [r7, #24]
 800779c:	2200      	movs	r2, #0
 800779e:	2140      	movs	r1, #64	; 0x40
 80077a0:	68f8      	ldr	r0, [r7, #12]
 80077a2:	f000 fb88 	bl	8007eb6 <I2C_WaitOnFlagUntilTimeout>
 80077a6:	4603      	mov	r3, r0
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d001      	beq.n	80077b0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80077ac:	2301      	movs	r3, #1
 80077ae:	e000      	b.n	80077b2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80077b0:	2300      	movs	r3, #0
}
 80077b2:	4618      	mov	r0, r3
 80077b4:	3710      	adds	r7, #16
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd80      	pop	{r7, pc}
 80077ba:	bf00      	nop
 80077bc:	80002000 	.word	0x80002000

080077c0 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b084      	sub	sp, #16
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
 80077c8:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80077d0:	b2db      	uxtb	r3, r3
 80077d2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80077d6:	2b28      	cmp	r3, #40	; 0x28
 80077d8:	d16a      	bne.n	80078b0 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	699b      	ldr	r3, [r3, #24]
 80077e0:	0c1b      	lsrs	r3, r3, #16
 80077e2:	b2db      	uxtb	r3, r3
 80077e4:	f003 0301 	and.w	r3, r3, #1
 80077e8:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	699b      	ldr	r3, [r3, #24]
 80077f0:	0c1b      	lsrs	r3, r3, #16
 80077f2:	b29b      	uxth	r3, r3
 80077f4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80077f8:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	689b      	ldr	r3, [r3, #8]
 8007800:	b29b      	uxth	r3, r3
 8007802:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007806:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	68db      	ldr	r3, [r3, #12]
 800780e:	b29b      	uxth	r3, r3
 8007810:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8007814:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	68db      	ldr	r3, [r3, #12]
 800781a:	2b02      	cmp	r3, #2
 800781c:	d138      	bne.n	8007890 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800781e:	897b      	ldrh	r3, [r7, #10]
 8007820:	09db      	lsrs	r3, r3, #7
 8007822:	b29a      	uxth	r2, r3
 8007824:	89bb      	ldrh	r3, [r7, #12]
 8007826:	4053      	eors	r3, r2
 8007828:	b29b      	uxth	r3, r3
 800782a:	f003 0306 	and.w	r3, r3, #6
 800782e:	2b00      	cmp	r3, #0
 8007830:	d11c      	bne.n	800786c <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8007832:	897b      	ldrh	r3, [r7, #10]
 8007834:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800783a:	1c5a      	adds	r2, r3, #1
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007844:	2b02      	cmp	r3, #2
 8007846:	d13b      	bne.n	80078c0 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2200      	movs	r2, #0
 800784c:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	2208      	movs	r2, #8
 8007854:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2200      	movs	r2, #0
 800785a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800785e:	89ba      	ldrh	r2, [r7, #12]
 8007860:	7bfb      	ldrb	r3, [r7, #15]
 8007862:	4619      	mov	r1, r3
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f7ff fdde 	bl	8007426 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800786a:	e029      	b.n	80078c0 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800786c:	893b      	ldrh	r3, [r7, #8]
 800786e:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8007870:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f000 fcf9 	bl	800826c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2200      	movs	r2, #0
 800787e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007882:	89ba      	ldrh	r2, [r7, #12]
 8007884:	7bfb      	ldrb	r3, [r7, #15]
 8007886:	4619      	mov	r1, r3
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f7ff fdcc 	bl	8007426 <HAL_I2C_AddrCallback>
}
 800788e:	e017      	b.n	80078c0 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8007890:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f000 fce9 	bl	800826c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2200      	movs	r2, #0
 800789e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80078a2:	89ba      	ldrh	r2, [r7, #12]
 80078a4:	7bfb      	ldrb	r3, [r7, #15]
 80078a6:	4619      	mov	r1, r3
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f7ff fdbc 	bl	8007426 <HAL_I2C_AddrCallback>
}
 80078ae:	e007      	b.n	80078c0 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	2208      	movs	r2, #8
 80078b6:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2200      	movs	r2, #0
 80078bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80078c0:	bf00      	nop
 80078c2:	3710      	adds	r7, #16
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bd80      	pop	{r7, pc}

080078c8 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b084      	sub	sp, #16
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2200      	movs	r2, #0
 80078dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	0b9b      	lsrs	r3, r3, #14
 80078e4:	f003 0301 	and.w	r3, r3, #1
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d008      	beq.n	80078fe <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	681a      	ldr	r2, [r3, #0]
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80078fa:	601a      	str	r2, [r3, #0]
 80078fc:	e00d      	b.n	800791a <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	0bdb      	lsrs	r3, r3, #15
 8007902:	f003 0301 	and.w	r3, r3, #1
 8007906:	2b00      	cmp	r3, #0
 8007908:	d007      	beq.n	800791a <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	681a      	ldr	r2, [r3, #0]
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007918:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007920:	b2db      	uxtb	r3, r3
 8007922:	2b29      	cmp	r3, #41	; 0x29
 8007924:	d112      	bne.n	800794c <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2228      	movs	r2, #40	; 0x28
 800792a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2221      	movs	r2, #33	; 0x21
 8007932:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007934:	2101      	movs	r1, #1
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f000 fc98 	bl	800826c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2200      	movs	r2, #0
 8007940:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f7ff fd5a 	bl	80073fe <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800794a:	e017      	b.n	800797c <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007952:	b2db      	uxtb	r3, r3
 8007954:	2b2a      	cmp	r3, #42	; 0x2a
 8007956:	d111      	bne.n	800797c <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2228      	movs	r2, #40	; 0x28
 800795c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2222      	movs	r2, #34	; 0x22
 8007964:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8007966:	2102      	movs	r1, #2
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f000 fc7f 	bl	800826c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2200      	movs	r2, #0
 8007972:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f7ff fd4b 	bl	8007412 <HAL_I2C_SlaveRxCpltCallback>
}
 800797c:	bf00      	nop
 800797e:	3710      	adds	r7, #16
 8007980:	46bd      	mov	sp, r7
 8007982:	bd80      	pop	{r7, pc}

08007984 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b086      	sub	sp, #24
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
 800798c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80079a0:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	2220      	movs	r2, #32
 80079a8:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80079aa:	7bfb      	ldrb	r3, [r7, #15]
 80079ac:	2b21      	cmp	r3, #33	; 0x21
 80079ae:	d002      	beq.n	80079b6 <I2C_ITSlaveCplt+0x32>
 80079b0:	7bfb      	ldrb	r3, [r7, #15]
 80079b2:	2b29      	cmp	r3, #41	; 0x29
 80079b4:	d108      	bne.n	80079c8 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80079b6:	f248 0101 	movw	r1, #32769	; 0x8001
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f000 fc56 	bl	800826c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2221      	movs	r2, #33	; 0x21
 80079c4:	631a      	str	r2, [r3, #48]	; 0x30
 80079c6:	e00d      	b.n	80079e4 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80079c8:	7bfb      	ldrb	r3, [r7, #15]
 80079ca:	2b22      	cmp	r3, #34	; 0x22
 80079cc:	d002      	beq.n	80079d4 <I2C_ITSlaveCplt+0x50>
 80079ce:	7bfb      	ldrb	r3, [r7, #15]
 80079d0:	2b2a      	cmp	r3, #42	; 0x2a
 80079d2:	d107      	bne.n	80079e4 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80079d4:	f248 0102 	movw	r1, #32770	; 0x8002
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f000 fc47 	bl	800826c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2222      	movs	r2, #34	; 0x22
 80079e2:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	685a      	ldr	r2, [r3, #4]
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80079f2:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	6859      	ldr	r1, [r3, #4]
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681a      	ldr	r2, [r3, #0]
 80079fe:	4b64      	ldr	r3, [pc, #400]	; (8007b90 <I2C_ITSlaveCplt+0x20c>)
 8007a00:	400b      	ands	r3, r1
 8007a02:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f000 fa14 	bl	8007e32 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8007a0a:	693b      	ldr	r3, [r7, #16]
 8007a0c:	0b9b      	lsrs	r3, r3, #14
 8007a0e:	f003 0301 	and.w	r3, r3, #1
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d013      	beq.n	8007a3e <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	681a      	ldr	r2, [r3, #0]
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007a24:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d020      	beq.n	8007a70 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	685b      	ldr	r3, [r3, #4]
 8007a36:	b29a      	uxth	r2, r3
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007a3c:	e018      	b.n	8007a70 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8007a3e:	693b      	ldr	r3, [r7, #16]
 8007a40:	0bdb      	lsrs	r3, r3, #15
 8007a42:	f003 0301 	and.w	r3, r3, #1
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d012      	beq.n	8007a70 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	681a      	ldr	r2, [r3, #0]
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007a58:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d006      	beq.n	8007a70 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	685b      	ldr	r3, [r3, #4]
 8007a6a:	b29a      	uxth	r2, r3
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8007a70:	697b      	ldr	r3, [r7, #20]
 8007a72:	089b      	lsrs	r3, r3, #2
 8007a74:	f003 0301 	and.w	r3, r3, #1
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d020      	beq.n	8007abe <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8007a7c:	697b      	ldr	r3, [r7, #20]
 8007a7e:	f023 0304 	bic.w	r3, r3, #4
 8007a82:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a8e:	b2d2      	uxtb	r2, r2
 8007a90:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a96:	1c5a      	adds	r2, r3, #1
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d00c      	beq.n	8007abe <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007aa8:	3b01      	subs	r3, #1
 8007aaa:	b29a      	uxth	r2, r3
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ab4:	b29b      	uxth	r3, r3
 8007ab6:	3b01      	subs	r3, #1
 8007ab8:	b29a      	uxth	r2, r3
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ac2:	b29b      	uxth	r3, r3
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d005      	beq.n	8007ad4 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007acc:	f043 0204 	orr.w	r2, r3, #4
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2200      	movs	r2, #0
 8007ae0:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d010      	beq.n	8007b0c <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007aee:	4619      	mov	r1, r3
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f000 f8a7 	bl	8007c44 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007afc:	b2db      	uxtb	r3, r3
 8007afe:	2b28      	cmp	r3, #40	; 0x28
 8007b00:	d141      	bne.n	8007b86 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8007b02:	6979      	ldr	r1, [r7, #20]
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f000 f847 	bl	8007b98 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007b0a:	e03c      	b.n	8007b86 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b10:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007b14:	d014      	beq.n	8007b40 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f7ff fed6 	bl	80078c8 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	4a1d      	ldr	r2, [pc, #116]	; (8007b94 <I2C_ITSlaveCplt+0x210>)
 8007b20:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2220      	movs	r2, #32
 8007b26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2200      	movs	r2, #0
 8007b34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	f7ff fc82 	bl	8007442 <HAL_I2C_ListenCpltCallback>
}
 8007b3e:	e022      	b.n	8007b86 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b46:	b2db      	uxtb	r3, r3
 8007b48:	2b22      	cmp	r3, #34	; 0x22
 8007b4a:	d10e      	bne.n	8007b6a <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2220      	movs	r2, #32
 8007b50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2200      	movs	r2, #0
 8007b58:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f7ff fc55 	bl	8007412 <HAL_I2C_SlaveRxCpltCallback>
}
 8007b68:	e00d      	b.n	8007b86 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2220      	movs	r2, #32
 8007b6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2200      	movs	r2, #0
 8007b76:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007b80:	6878      	ldr	r0, [r7, #4]
 8007b82:	f7ff fc3c 	bl	80073fe <HAL_I2C_SlaveTxCpltCallback>
}
 8007b86:	bf00      	nop
 8007b88:	3718      	adds	r7, #24
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}
 8007b8e:	bf00      	nop
 8007b90:	fe00e800 	.word	0xfe00e800
 8007b94:	ffff0000 	.word	0xffff0000

08007b98 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b082      	sub	sp, #8
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
 8007ba0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	4a26      	ldr	r2, [pc, #152]	; (8007c40 <I2C_ITListenCplt+0xa8>)
 8007ba6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2200      	movs	r2, #0
 8007bac:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2220      	movs	r2, #32
 8007bb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2200      	movs	r2, #0
 8007bba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	089b      	lsrs	r3, r3, #2
 8007bc8:	f003 0301 	and.w	r3, r3, #1
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d022      	beq.n	8007c16 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bda:	b2d2      	uxtb	r2, r2
 8007bdc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007be2:	1c5a      	adds	r2, r3, #1
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d012      	beq.n	8007c16 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bf4:	3b01      	subs	r3, #1
 8007bf6:	b29a      	uxth	r2, r3
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c00:	b29b      	uxth	r3, r3
 8007c02:	3b01      	subs	r3, #1
 8007c04:	b29a      	uxth	r2, r3
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c0e:	f043 0204 	orr.w	r2, r3, #4
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007c16:	f248 0103 	movw	r1, #32771	; 0x8003
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f000 fb26 	bl	800826c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	2210      	movs	r2, #16
 8007c26:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f7ff fc06 	bl	8007442 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8007c36:	bf00      	nop
 8007c38:	3708      	adds	r7, #8
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bd80      	pop	{r7, pc}
 8007c3e:	bf00      	nop
 8007c40:	ffff0000 	.word	0xffff0000

08007c44 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b084      	sub	sp, #16
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
 8007c4c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007c54:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	4a5d      	ldr	r2, [pc, #372]	; (8007dd8 <I2C_ITError+0x194>)
 8007c62:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2200      	movs	r2, #0
 8007c68:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	431a      	orrs	r2, r3
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8007c76:	7bfb      	ldrb	r3, [r7, #15]
 8007c78:	2b28      	cmp	r3, #40	; 0x28
 8007c7a:	d005      	beq.n	8007c88 <I2C_ITError+0x44>
 8007c7c:	7bfb      	ldrb	r3, [r7, #15]
 8007c7e:	2b29      	cmp	r3, #41	; 0x29
 8007c80:	d002      	beq.n	8007c88 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8007c82:	7bfb      	ldrb	r3, [r7, #15]
 8007c84:	2b2a      	cmp	r3, #42	; 0x2a
 8007c86:	d10b      	bne.n	8007ca0 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007c88:	2103      	movs	r1, #3
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f000 faee 	bl	800826c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2228      	movs	r2, #40	; 0x28
 8007c94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	4a50      	ldr	r2, [pc, #320]	; (8007ddc <I2C_ITError+0x198>)
 8007c9c:	635a      	str	r2, [r3, #52]	; 0x34
 8007c9e:	e011      	b.n	8007cc4 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007ca0:	f248 0103 	movw	r1, #32771	; 0x8003
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f000 fae1 	bl	800826c <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007cb0:	b2db      	uxtb	r3, r3
 8007cb2:	2b60      	cmp	r3, #96	; 0x60
 8007cb4:	d003      	beq.n	8007cbe <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2220      	movs	r2, #32
 8007cba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cc8:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d039      	beq.n	8007d46 <I2C_ITError+0x102>
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	2b11      	cmp	r3, #17
 8007cd6:	d002      	beq.n	8007cde <I2C_ITError+0x9a>
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	2b21      	cmp	r3, #33	; 0x21
 8007cdc:	d133      	bne.n	8007d46 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ce8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007cec:	d107      	bne.n	8007cfe <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	681a      	ldr	r2, [r3, #0]
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007cfc:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d02:	4618      	mov	r0, r3
 8007d04:	f7fe fd04 	bl	8006710 <HAL_DMA_GetState>
 8007d08:	4603      	mov	r3, r0
 8007d0a:	2b01      	cmp	r3, #1
 8007d0c:	d017      	beq.n	8007d3e <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d12:	4a33      	ldr	r2, [pc, #204]	; (8007de0 <I2C_ITError+0x19c>)
 8007d14:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2200      	movs	r2, #0
 8007d1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d22:	4618      	mov	r0, r3
 8007d24:	f7fe fc04 	bl	8006530 <HAL_DMA_Abort_IT>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d04d      	beq.n	8007dca <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d34:	687a      	ldr	r2, [r7, #4]
 8007d36:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007d38:	4610      	mov	r0, r2
 8007d3a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007d3c:	e045      	b.n	8007dca <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f000 f850 	bl	8007de4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007d44:	e041      	b.n	8007dca <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d039      	beq.n	8007dc2 <I2C_ITError+0x17e>
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	2b12      	cmp	r3, #18
 8007d52:	d002      	beq.n	8007d5a <I2C_ITError+0x116>
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	2b22      	cmp	r3, #34	; 0x22
 8007d58:	d133      	bne.n	8007dc2 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d68:	d107      	bne.n	8007d7a <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	681a      	ldr	r2, [r3, #0]
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007d78:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d7e:	4618      	mov	r0, r3
 8007d80:	f7fe fcc6 	bl	8006710 <HAL_DMA_GetState>
 8007d84:	4603      	mov	r3, r0
 8007d86:	2b01      	cmp	r3, #1
 8007d88:	d017      	beq.n	8007dba <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d8e:	4a14      	ldr	r2, [pc, #80]	; (8007de0 <I2C_ITError+0x19c>)
 8007d90:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2200      	movs	r2, #0
 8007d96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d9e:	4618      	mov	r0, r3
 8007da0:	f7fe fbc6 	bl	8006530 <HAL_DMA_Abort_IT>
 8007da4:	4603      	mov	r3, r0
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d011      	beq.n	8007dce <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007db0:	687a      	ldr	r2, [r7, #4]
 8007db2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007db4:	4610      	mov	r0, r2
 8007db6:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007db8:	e009      	b.n	8007dce <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f000 f812 	bl	8007de4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007dc0:	e005      	b.n	8007dce <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f000 f80e 	bl	8007de4 <I2C_TreatErrorCallback>
  }
}
 8007dc8:	e002      	b.n	8007dd0 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007dca:	bf00      	nop
 8007dcc:	e000      	b.n	8007dd0 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007dce:	bf00      	nop
}
 8007dd0:	bf00      	nop
 8007dd2:	3710      	adds	r7, #16
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	bd80      	pop	{r7, pc}
 8007dd8:	ffff0000 	.word	0xffff0000
 8007ddc:	0800746b 	.word	0x0800746b
 8007de0:	08007e7b 	.word	0x08007e7b

08007de4 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b082      	sub	sp, #8
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007df2:	b2db      	uxtb	r3, r3
 8007df4:	2b60      	cmp	r3, #96	; 0x60
 8007df6:	d10e      	bne.n	8007e16 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2220      	movs	r2, #32
 8007dfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2200      	movs	r2, #0
 8007e04:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2200      	movs	r2, #0
 8007e0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f7ff fb21 	bl	8007456 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007e14:	e009      	b.n	8007e2a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2200      	movs	r2, #0
 8007e20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f7fc f9d1 	bl	80041cc <HAL_I2C_ErrorCallback>
}
 8007e2a:	bf00      	nop
 8007e2c:	3708      	adds	r7, #8
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd80      	pop	{r7, pc}

08007e32 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007e32:	b480      	push	{r7}
 8007e34:	b083      	sub	sp, #12
 8007e36:	af00      	add	r7, sp, #0
 8007e38:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	699b      	ldr	r3, [r3, #24]
 8007e40:	f003 0302 	and.w	r3, r3, #2
 8007e44:	2b02      	cmp	r3, #2
 8007e46:	d103      	bne.n	8007e50 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	699b      	ldr	r3, [r3, #24]
 8007e56:	f003 0301 	and.w	r3, r3, #1
 8007e5a:	2b01      	cmp	r3, #1
 8007e5c:	d007      	beq.n	8007e6e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	699a      	ldr	r2, [r3, #24]
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f042 0201 	orr.w	r2, r2, #1
 8007e6c:	619a      	str	r2, [r3, #24]
  }
}
 8007e6e:	bf00      	nop
 8007e70:	370c      	adds	r7, #12
 8007e72:	46bd      	mov	sp, r7
 8007e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e78:	4770      	bx	lr

08007e7a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007e7a:	b580      	push	{r7, lr}
 8007e7c:	b084      	sub	sp, #16
 8007e7e:	af00      	add	r7, sp, #0
 8007e80:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e86:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d003      	beq.n	8007e98 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e94:	2200      	movs	r2, #0
 8007e96:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d003      	beq.n	8007ea8 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8007ea8:	68f8      	ldr	r0, [r7, #12]
 8007eaa:	f7ff ff9b 	bl	8007de4 <I2C_TreatErrorCallback>
}
 8007eae:	bf00      	nop
 8007eb0:	3710      	adds	r7, #16
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd80      	pop	{r7, pc}

08007eb6 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007eb6:	b580      	push	{r7, lr}
 8007eb8:	b084      	sub	sp, #16
 8007eba:	af00      	add	r7, sp, #0
 8007ebc:	60f8      	str	r0, [r7, #12]
 8007ebe:	60b9      	str	r1, [r7, #8]
 8007ec0:	603b      	str	r3, [r7, #0]
 8007ec2:	4613      	mov	r3, r2
 8007ec4:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007ec6:	e022      	b.n	8007f0e <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ece:	d01e      	beq.n	8007f0e <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ed0:	f7fe f864 	bl	8005f9c <HAL_GetTick>
 8007ed4:	4602      	mov	r2, r0
 8007ed6:	69bb      	ldr	r3, [r7, #24]
 8007ed8:	1ad3      	subs	r3, r2, r3
 8007eda:	683a      	ldr	r2, [r7, #0]
 8007edc:	429a      	cmp	r2, r3
 8007ede:	d302      	bcc.n	8007ee6 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d113      	bne.n	8007f0e <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007eea:	f043 0220 	orr.w	r2, r3, #32
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	2220      	movs	r2, #32
 8007ef6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	2200      	movs	r2, #0
 8007efe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	2200      	movs	r2, #0
 8007f06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8007f0a:	2301      	movs	r3, #1
 8007f0c:	e00f      	b.n	8007f2e <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	699a      	ldr	r2, [r3, #24]
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	4013      	ands	r3, r2
 8007f18:	68ba      	ldr	r2, [r7, #8]
 8007f1a:	429a      	cmp	r2, r3
 8007f1c:	bf0c      	ite	eq
 8007f1e:	2301      	moveq	r3, #1
 8007f20:	2300      	movne	r3, #0
 8007f22:	b2db      	uxtb	r3, r3
 8007f24:	461a      	mov	r2, r3
 8007f26:	79fb      	ldrb	r3, [r7, #7]
 8007f28:	429a      	cmp	r2, r3
 8007f2a:	d0cd      	beq.n	8007ec8 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007f2c:	2300      	movs	r3, #0
}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	3710      	adds	r7, #16
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bd80      	pop	{r7, pc}

08007f36 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007f36:	b580      	push	{r7, lr}
 8007f38:	b084      	sub	sp, #16
 8007f3a:	af00      	add	r7, sp, #0
 8007f3c:	60f8      	str	r0, [r7, #12]
 8007f3e:	60b9      	str	r1, [r7, #8]
 8007f40:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007f42:	e02c      	b.n	8007f9e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007f44:	687a      	ldr	r2, [r7, #4]
 8007f46:	68b9      	ldr	r1, [r7, #8]
 8007f48:	68f8      	ldr	r0, [r7, #12]
 8007f4a:	f000 f871 	bl	8008030 <I2C_IsErrorOccurred>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d001      	beq.n	8007f58 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007f54:	2301      	movs	r3, #1
 8007f56:	e02a      	b.n	8007fae <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f5e:	d01e      	beq.n	8007f9e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f60:	f7fe f81c 	bl	8005f9c <HAL_GetTick>
 8007f64:	4602      	mov	r2, r0
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	1ad3      	subs	r3, r2, r3
 8007f6a:	68ba      	ldr	r2, [r7, #8]
 8007f6c:	429a      	cmp	r2, r3
 8007f6e:	d302      	bcc.n	8007f76 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d113      	bne.n	8007f9e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f7a:	f043 0220 	orr.w	r2, r3, #32
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	2220      	movs	r2, #32
 8007f86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	2200      	movs	r2, #0
 8007f96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	e007      	b.n	8007fae <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	699b      	ldr	r3, [r3, #24]
 8007fa4:	f003 0302 	and.w	r3, r3, #2
 8007fa8:	2b02      	cmp	r3, #2
 8007faa:	d1cb      	bne.n	8007f44 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007fac:	2300      	movs	r3, #0
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	3710      	adds	r7, #16
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}

08007fb6 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007fb6:	b580      	push	{r7, lr}
 8007fb8:	b084      	sub	sp, #16
 8007fba:	af00      	add	r7, sp, #0
 8007fbc:	60f8      	str	r0, [r7, #12]
 8007fbe:	60b9      	str	r1, [r7, #8]
 8007fc0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007fc2:	e028      	b.n	8008016 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007fc4:	687a      	ldr	r2, [r7, #4]
 8007fc6:	68b9      	ldr	r1, [r7, #8]
 8007fc8:	68f8      	ldr	r0, [r7, #12]
 8007fca:	f000 f831 	bl	8008030 <I2C_IsErrorOccurred>
 8007fce:	4603      	mov	r3, r0
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d001      	beq.n	8007fd8 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	e026      	b.n	8008026 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007fd8:	f7fd ffe0 	bl	8005f9c <HAL_GetTick>
 8007fdc:	4602      	mov	r2, r0
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	1ad3      	subs	r3, r2, r3
 8007fe2:	68ba      	ldr	r2, [r7, #8]
 8007fe4:	429a      	cmp	r2, r3
 8007fe6:	d302      	bcc.n	8007fee <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d113      	bne.n	8008016 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ff2:	f043 0220 	orr.w	r2, r3, #32
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	2220      	movs	r2, #32
 8007ffe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	2200      	movs	r2, #0
 8008006:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	2200      	movs	r2, #0
 800800e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8008012:	2301      	movs	r3, #1
 8008014:	e007      	b.n	8008026 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	699b      	ldr	r3, [r3, #24]
 800801c:	f003 0320 	and.w	r3, r3, #32
 8008020:	2b20      	cmp	r3, #32
 8008022:	d1cf      	bne.n	8007fc4 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008024:	2300      	movs	r3, #0
}
 8008026:	4618      	mov	r0, r3
 8008028:	3710      	adds	r7, #16
 800802a:	46bd      	mov	sp, r7
 800802c:	bd80      	pop	{r7, pc}
	...

08008030 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b08a      	sub	sp, #40	; 0x28
 8008034:	af00      	add	r7, sp, #0
 8008036:	60f8      	str	r0, [r7, #12]
 8008038:	60b9      	str	r1, [r7, #8]
 800803a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800803c:	2300      	movs	r3, #0
 800803e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	699b      	ldr	r3, [r3, #24]
 8008048:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800804a:	2300      	movs	r3, #0
 800804c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008052:	69bb      	ldr	r3, [r7, #24]
 8008054:	f003 0310 	and.w	r3, r3, #16
 8008058:	2b00      	cmp	r3, #0
 800805a:	d075      	beq.n	8008148 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	2210      	movs	r2, #16
 8008062:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008064:	e056      	b.n	8008114 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008066:	68bb      	ldr	r3, [r7, #8]
 8008068:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800806c:	d052      	beq.n	8008114 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800806e:	f7fd ff95 	bl	8005f9c <HAL_GetTick>
 8008072:	4602      	mov	r2, r0
 8008074:	69fb      	ldr	r3, [r7, #28]
 8008076:	1ad3      	subs	r3, r2, r3
 8008078:	68ba      	ldr	r2, [r7, #8]
 800807a:	429a      	cmp	r2, r3
 800807c:	d302      	bcc.n	8008084 <I2C_IsErrorOccurred+0x54>
 800807e:	68bb      	ldr	r3, [r7, #8]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d147      	bne.n	8008114 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	685b      	ldr	r3, [r3, #4]
 800808a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800808e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008096:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	699b      	ldr	r3, [r3, #24]
 800809e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80080a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80080a6:	d12e      	bne.n	8008106 <I2C_IsErrorOccurred+0xd6>
 80080a8:	697b      	ldr	r3, [r7, #20]
 80080aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80080ae:	d02a      	beq.n	8008106 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80080b0:	7cfb      	ldrb	r3, [r7, #19]
 80080b2:	2b20      	cmp	r3, #32
 80080b4:	d027      	beq.n	8008106 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	685a      	ldr	r2, [r3, #4]
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80080c4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80080c6:	f7fd ff69 	bl	8005f9c <HAL_GetTick>
 80080ca:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80080cc:	e01b      	b.n	8008106 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80080ce:	f7fd ff65 	bl	8005f9c <HAL_GetTick>
 80080d2:	4602      	mov	r2, r0
 80080d4:	69fb      	ldr	r3, [r7, #28]
 80080d6:	1ad3      	subs	r3, r2, r3
 80080d8:	2b19      	cmp	r3, #25
 80080da:	d914      	bls.n	8008106 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080e0:	f043 0220 	orr.w	r2, r3, #32
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	2220      	movs	r2, #32
 80080ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	2200      	movs	r2, #0
 80080f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	2200      	movs	r2, #0
 80080fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8008100:	2301      	movs	r3, #1
 8008102:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	699b      	ldr	r3, [r3, #24]
 800810c:	f003 0320 	and.w	r3, r3, #32
 8008110:	2b20      	cmp	r3, #32
 8008112:	d1dc      	bne.n	80080ce <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	699b      	ldr	r3, [r3, #24]
 800811a:	f003 0320 	and.w	r3, r3, #32
 800811e:	2b20      	cmp	r3, #32
 8008120:	d003      	beq.n	800812a <I2C_IsErrorOccurred+0xfa>
 8008122:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008126:	2b00      	cmp	r3, #0
 8008128:	d09d      	beq.n	8008066 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800812a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800812e:	2b00      	cmp	r3, #0
 8008130:	d103      	bne.n	800813a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	2220      	movs	r2, #32
 8008138:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800813a:	6a3b      	ldr	r3, [r7, #32]
 800813c:	f043 0304 	orr.w	r3, r3, #4
 8008140:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8008142:	2301      	movs	r3, #1
 8008144:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	699b      	ldr	r3, [r3, #24]
 800814e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008150:	69bb      	ldr	r3, [r7, #24]
 8008152:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008156:	2b00      	cmp	r3, #0
 8008158:	d00b      	beq.n	8008172 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800815a:	6a3b      	ldr	r3, [r7, #32]
 800815c:	f043 0301 	orr.w	r3, r3, #1
 8008160:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f44f 7280 	mov.w	r2, #256	; 0x100
 800816a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800816c:	2301      	movs	r3, #1
 800816e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008172:	69bb      	ldr	r3, [r7, #24]
 8008174:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008178:	2b00      	cmp	r3, #0
 800817a:	d00b      	beq.n	8008194 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800817c:	6a3b      	ldr	r3, [r7, #32]
 800817e:	f043 0308 	orr.w	r3, r3, #8
 8008182:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800818c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800818e:	2301      	movs	r3, #1
 8008190:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008194:	69bb      	ldr	r3, [r7, #24]
 8008196:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800819a:	2b00      	cmp	r3, #0
 800819c:	d00b      	beq.n	80081b6 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800819e:	6a3b      	ldr	r3, [r7, #32]
 80081a0:	f043 0302 	orr.w	r3, r3, #2
 80081a4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80081ae:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80081b0:	2301      	movs	r3, #1
 80081b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80081b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d01c      	beq.n	80081f8 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80081be:	68f8      	ldr	r0, [r7, #12]
 80081c0:	f7ff fe37 	bl	8007e32 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	6859      	ldr	r1, [r3, #4]
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	681a      	ldr	r2, [r3, #0]
 80081ce:	4b0d      	ldr	r3, [pc, #52]	; (8008204 <I2C_IsErrorOccurred+0x1d4>)
 80081d0:	400b      	ands	r3, r1
 80081d2:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80081d8:	6a3b      	ldr	r3, [r7, #32]
 80081da:	431a      	orrs	r2, r3
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	2220      	movs	r2, #32
 80081e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	2200      	movs	r2, #0
 80081ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	2200      	movs	r2, #0
 80081f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80081f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	3728      	adds	r7, #40	; 0x28
 8008200:	46bd      	mov	sp, r7
 8008202:	bd80      	pop	{r7, pc}
 8008204:	fe00e800 	.word	0xfe00e800

08008208 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008208:	b480      	push	{r7}
 800820a:	b087      	sub	sp, #28
 800820c:	af00      	add	r7, sp, #0
 800820e:	60f8      	str	r0, [r7, #12]
 8008210:	607b      	str	r3, [r7, #4]
 8008212:	460b      	mov	r3, r1
 8008214:	817b      	strh	r3, [r7, #10]
 8008216:	4613      	mov	r3, r2
 8008218:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800821a:	897b      	ldrh	r3, [r7, #10]
 800821c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008220:	7a7b      	ldrb	r3, [r7, #9]
 8008222:	041b      	lsls	r3, r3, #16
 8008224:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008228:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800822e:	6a3b      	ldr	r3, [r7, #32]
 8008230:	4313      	orrs	r3, r2
 8008232:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008236:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	685a      	ldr	r2, [r3, #4]
 800823e:	6a3b      	ldr	r3, [r7, #32]
 8008240:	0d5b      	lsrs	r3, r3, #21
 8008242:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8008246:	4b08      	ldr	r3, [pc, #32]	; (8008268 <I2C_TransferConfig+0x60>)
 8008248:	430b      	orrs	r3, r1
 800824a:	43db      	mvns	r3, r3
 800824c:	ea02 0103 	and.w	r1, r2, r3
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	697a      	ldr	r2, [r7, #20]
 8008256:	430a      	orrs	r2, r1
 8008258:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800825a:	bf00      	nop
 800825c:	371c      	adds	r7, #28
 800825e:	46bd      	mov	sp, r7
 8008260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008264:	4770      	bx	lr
 8008266:	bf00      	nop
 8008268:	03ff63ff 	.word	0x03ff63ff

0800826c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800826c:	b480      	push	{r7}
 800826e:	b085      	sub	sp, #20
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
 8008274:	460b      	mov	r3, r1
 8008276:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8008278:	2300      	movs	r3, #0
 800827a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800827c:	887b      	ldrh	r3, [r7, #2]
 800827e:	f003 0301 	and.w	r3, r3, #1
 8008282:	2b00      	cmp	r3, #0
 8008284:	d00f      	beq.n	80082a6 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800828c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008294:	b2db      	uxtb	r3, r3
 8008296:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800829a:	2b28      	cmp	r3, #40	; 0x28
 800829c:	d003      	beq.n	80082a6 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80082a4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80082a6:	887b      	ldrh	r3, [r7, #2]
 80082a8:	f003 0302 	and.w	r3, r3, #2
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d00f      	beq.n	80082d0 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80082b6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80082be:	b2db      	uxtb	r3, r3
 80082c0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80082c4:	2b28      	cmp	r3, #40	; 0x28
 80082c6:	d003      	beq.n	80082d0 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80082ce:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80082d0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	da03      	bge.n	80082e0 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80082de:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80082e0:	887b      	ldrh	r3, [r7, #2]
 80082e2:	2b10      	cmp	r3, #16
 80082e4:	d103      	bne.n	80082ee <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80082ec:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80082ee:	887b      	ldrh	r3, [r7, #2]
 80082f0:	2b20      	cmp	r3, #32
 80082f2:	d103      	bne.n	80082fc <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	f043 0320 	orr.w	r3, r3, #32
 80082fa:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80082fc:	887b      	ldrh	r3, [r7, #2]
 80082fe:	2b40      	cmp	r3, #64	; 0x40
 8008300:	d103      	bne.n	800830a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008308:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	6819      	ldr	r1, [r3, #0]
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	43da      	mvns	r2, r3
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	400a      	ands	r2, r1
 800831a:	601a      	str	r2, [r3, #0]
}
 800831c:	bf00      	nop
 800831e:	3714      	adds	r7, #20
 8008320:	46bd      	mov	sp, r7
 8008322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008326:	4770      	bx	lr

08008328 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008328:	b480      	push	{r7}
 800832a:	b083      	sub	sp, #12
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
 8008330:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008338:	b2db      	uxtb	r3, r3
 800833a:	2b20      	cmp	r3, #32
 800833c:	d138      	bne.n	80083b0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008344:	2b01      	cmp	r3, #1
 8008346:	d101      	bne.n	800834c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008348:	2302      	movs	r3, #2
 800834a:	e032      	b.n	80083b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2201      	movs	r2, #1
 8008350:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2224      	movs	r2, #36	; 0x24
 8008358:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	681a      	ldr	r2, [r3, #0]
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f022 0201 	bic.w	r2, r2, #1
 800836a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	681a      	ldr	r2, [r3, #0]
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800837a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	6819      	ldr	r1, [r3, #0]
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	683a      	ldr	r2, [r7, #0]
 8008388:	430a      	orrs	r2, r1
 800838a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	681a      	ldr	r2, [r3, #0]
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f042 0201 	orr.w	r2, r2, #1
 800839a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2220      	movs	r2, #32
 80083a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2200      	movs	r2, #0
 80083a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80083ac:	2300      	movs	r3, #0
 80083ae:	e000      	b.n	80083b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80083b0:	2302      	movs	r3, #2
  }
}
 80083b2:	4618      	mov	r0, r3
 80083b4:	370c      	adds	r7, #12
 80083b6:	46bd      	mov	sp, r7
 80083b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083bc:	4770      	bx	lr

080083be <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80083be:	b480      	push	{r7}
 80083c0:	b085      	sub	sp, #20
 80083c2:	af00      	add	r7, sp, #0
 80083c4:	6078      	str	r0, [r7, #4]
 80083c6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80083ce:	b2db      	uxtb	r3, r3
 80083d0:	2b20      	cmp	r3, #32
 80083d2:	d139      	bne.n	8008448 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80083da:	2b01      	cmp	r3, #1
 80083dc:	d101      	bne.n	80083e2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80083de:	2302      	movs	r3, #2
 80083e0:	e033      	b.n	800844a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2201      	movs	r2, #1
 80083e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2224      	movs	r2, #36	; 0x24
 80083ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	681a      	ldr	r2, [r3, #0]
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f022 0201 	bic.w	r2, r2, #1
 8008400:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008410:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	021b      	lsls	r3, r3, #8
 8008416:	68fa      	ldr	r2, [r7, #12]
 8008418:	4313      	orrs	r3, r2
 800841a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	68fa      	ldr	r2, [r7, #12]
 8008422:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	681a      	ldr	r2, [r3, #0]
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f042 0201 	orr.w	r2, r2, #1
 8008432:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2220      	movs	r2, #32
 8008438:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2200      	movs	r2, #0
 8008440:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008444:	2300      	movs	r3, #0
 8008446:	e000      	b.n	800844a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008448:	2302      	movs	r3, #2
  }
}
 800844a:	4618      	mov	r0, r3
 800844c:	3714      	adds	r7, #20
 800844e:	46bd      	mov	sp, r7
 8008450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008454:	4770      	bx	lr
	...

08008458 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8008458:	b480      	push	{r7}
 800845a:	b085      	sub	sp, #20
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008460:	4b0b      	ldr	r3, [pc, #44]	; (8008490 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8008462:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008464:	4a0a      	ldr	r2, [pc, #40]	; (8008490 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8008466:	f043 0301 	orr.w	r3, r3, #1
 800846a:	6613      	str	r3, [r2, #96]	; 0x60
 800846c:	4b08      	ldr	r3, [pc, #32]	; (8008490 <HAL_I2CEx_EnableFastModePlus+0x38>)
 800846e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008470:	f003 0301 	and.w	r3, r3, #1
 8008474:	60fb      	str	r3, [r7, #12]
 8008476:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8008478:	4b06      	ldr	r3, [pc, #24]	; (8008494 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 800847a:	685a      	ldr	r2, [r3, #4]
 800847c:	4905      	ldr	r1, [pc, #20]	; (8008494 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	4313      	orrs	r3, r2
 8008482:	604b      	str	r3, [r1, #4]
}
 8008484:	bf00      	nop
 8008486:	3714      	adds	r7, #20
 8008488:	46bd      	mov	sp, r7
 800848a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848e:	4770      	bx	lr
 8008490:	40021000 	.word	0x40021000
 8008494:	40010000 	.word	0x40010000

08008498 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8008498:	b480      	push	{r7}
 800849a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800849c:	4b04      	ldr	r3, [pc, #16]	; (80084b0 <HAL_PWREx_GetVoltageRange+0x18>)
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80084a4:	4618      	mov	r0, r3
 80084a6:	46bd      	mov	sp, r7
 80084a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ac:	4770      	bx	lr
 80084ae:	bf00      	nop
 80084b0:	40007000 	.word	0x40007000

080084b4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80084b4:	b480      	push	{r7}
 80084b6:	b085      	sub	sp, #20
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80084c2:	d130      	bne.n	8008526 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80084c4:	4b23      	ldr	r3, [pc, #140]	; (8008554 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80084cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80084d0:	d038      	beq.n	8008544 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80084d2:	4b20      	ldr	r3, [pc, #128]	; (8008554 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80084da:	4a1e      	ldr	r2, [pc, #120]	; (8008554 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80084dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80084e0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80084e2:	4b1d      	ldr	r3, [pc, #116]	; (8008558 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	2232      	movs	r2, #50	; 0x32
 80084e8:	fb02 f303 	mul.w	r3, r2, r3
 80084ec:	4a1b      	ldr	r2, [pc, #108]	; (800855c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80084ee:	fba2 2303 	umull	r2, r3, r2, r3
 80084f2:	0c9b      	lsrs	r3, r3, #18
 80084f4:	3301      	adds	r3, #1
 80084f6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80084f8:	e002      	b.n	8008500 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	3b01      	subs	r3, #1
 80084fe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008500:	4b14      	ldr	r3, [pc, #80]	; (8008554 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008502:	695b      	ldr	r3, [r3, #20]
 8008504:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008508:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800850c:	d102      	bne.n	8008514 <HAL_PWREx_ControlVoltageScaling+0x60>
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d1f2      	bne.n	80084fa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008514:	4b0f      	ldr	r3, [pc, #60]	; (8008554 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008516:	695b      	ldr	r3, [r3, #20]
 8008518:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800851c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008520:	d110      	bne.n	8008544 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8008522:	2303      	movs	r3, #3
 8008524:	e00f      	b.n	8008546 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8008526:	4b0b      	ldr	r3, [pc, #44]	; (8008554 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800852e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008532:	d007      	beq.n	8008544 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008534:	4b07      	ldr	r3, [pc, #28]	; (8008554 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800853c:	4a05      	ldr	r2, [pc, #20]	; (8008554 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800853e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008542:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8008544:	2300      	movs	r3, #0
}
 8008546:	4618      	mov	r0, r3
 8008548:	3714      	adds	r7, #20
 800854a:	46bd      	mov	sp, r7
 800854c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008550:	4770      	bx	lr
 8008552:	bf00      	nop
 8008554:	40007000 	.word	0x40007000
 8008558:	200001e0 	.word	0x200001e0
 800855c:	431bde83 	.word	0x431bde83

08008560 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b088      	sub	sp, #32
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d101      	bne.n	8008572 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800856e:	2301      	movs	r3, #1
 8008570:	e3ca      	b.n	8008d08 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008572:	4b97      	ldr	r3, [pc, #604]	; (80087d0 <HAL_RCC_OscConfig+0x270>)
 8008574:	689b      	ldr	r3, [r3, #8]
 8008576:	f003 030c 	and.w	r3, r3, #12
 800857a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800857c:	4b94      	ldr	r3, [pc, #592]	; (80087d0 <HAL_RCC_OscConfig+0x270>)
 800857e:	68db      	ldr	r3, [r3, #12]
 8008580:	f003 0303 	and.w	r3, r3, #3
 8008584:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f003 0310 	and.w	r3, r3, #16
 800858e:	2b00      	cmp	r3, #0
 8008590:	f000 80e4 	beq.w	800875c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8008594:	69bb      	ldr	r3, [r7, #24]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d007      	beq.n	80085aa <HAL_RCC_OscConfig+0x4a>
 800859a:	69bb      	ldr	r3, [r7, #24]
 800859c:	2b0c      	cmp	r3, #12
 800859e:	f040 808b 	bne.w	80086b8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80085a2:	697b      	ldr	r3, [r7, #20]
 80085a4:	2b01      	cmp	r3, #1
 80085a6:	f040 8087 	bne.w	80086b8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80085aa:	4b89      	ldr	r3, [pc, #548]	; (80087d0 <HAL_RCC_OscConfig+0x270>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f003 0302 	and.w	r3, r3, #2
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d005      	beq.n	80085c2 <HAL_RCC_OscConfig+0x62>
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	699b      	ldr	r3, [r3, #24]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d101      	bne.n	80085c2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80085be:	2301      	movs	r3, #1
 80085c0:	e3a2      	b.n	8008d08 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6a1a      	ldr	r2, [r3, #32]
 80085c6:	4b82      	ldr	r3, [pc, #520]	; (80087d0 <HAL_RCC_OscConfig+0x270>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f003 0308 	and.w	r3, r3, #8
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d004      	beq.n	80085dc <HAL_RCC_OscConfig+0x7c>
 80085d2:	4b7f      	ldr	r3, [pc, #508]	; (80087d0 <HAL_RCC_OscConfig+0x270>)
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80085da:	e005      	b.n	80085e8 <HAL_RCC_OscConfig+0x88>
 80085dc:	4b7c      	ldr	r3, [pc, #496]	; (80087d0 <HAL_RCC_OscConfig+0x270>)
 80085de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80085e2:	091b      	lsrs	r3, r3, #4
 80085e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80085e8:	4293      	cmp	r3, r2
 80085ea:	d223      	bcs.n	8008634 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	6a1b      	ldr	r3, [r3, #32]
 80085f0:	4618      	mov	r0, r3
 80085f2:	f000 fd55 	bl	80090a0 <RCC_SetFlashLatencyFromMSIRange>
 80085f6:	4603      	mov	r3, r0
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d001      	beq.n	8008600 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80085fc:	2301      	movs	r3, #1
 80085fe:	e383      	b.n	8008d08 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008600:	4b73      	ldr	r3, [pc, #460]	; (80087d0 <HAL_RCC_OscConfig+0x270>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	4a72      	ldr	r2, [pc, #456]	; (80087d0 <HAL_RCC_OscConfig+0x270>)
 8008606:	f043 0308 	orr.w	r3, r3, #8
 800860a:	6013      	str	r3, [r2, #0]
 800860c:	4b70      	ldr	r3, [pc, #448]	; (80087d0 <HAL_RCC_OscConfig+0x270>)
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	6a1b      	ldr	r3, [r3, #32]
 8008618:	496d      	ldr	r1, [pc, #436]	; (80087d0 <HAL_RCC_OscConfig+0x270>)
 800861a:	4313      	orrs	r3, r2
 800861c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800861e:	4b6c      	ldr	r3, [pc, #432]	; (80087d0 <HAL_RCC_OscConfig+0x270>)
 8008620:	685b      	ldr	r3, [r3, #4]
 8008622:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	69db      	ldr	r3, [r3, #28]
 800862a:	021b      	lsls	r3, r3, #8
 800862c:	4968      	ldr	r1, [pc, #416]	; (80087d0 <HAL_RCC_OscConfig+0x270>)
 800862e:	4313      	orrs	r3, r2
 8008630:	604b      	str	r3, [r1, #4]
 8008632:	e025      	b.n	8008680 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008634:	4b66      	ldr	r3, [pc, #408]	; (80087d0 <HAL_RCC_OscConfig+0x270>)
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	4a65      	ldr	r2, [pc, #404]	; (80087d0 <HAL_RCC_OscConfig+0x270>)
 800863a:	f043 0308 	orr.w	r3, r3, #8
 800863e:	6013      	str	r3, [r2, #0]
 8008640:	4b63      	ldr	r3, [pc, #396]	; (80087d0 <HAL_RCC_OscConfig+0x270>)
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	6a1b      	ldr	r3, [r3, #32]
 800864c:	4960      	ldr	r1, [pc, #384]	; (80087d0 <HAL_RCC_OscConfig+0x270>)
 800864e:	4313      	orrs	r3, r2
 8008650:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008652:	4b5f      	ldr	r3, [pc, #380]	; (80087d0 <HAL_RCC_OscConfig+0x270>)
 8008654:	685b      	ldr	r3, [r3, #4]
 8008656:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	69db      	ldr	r3, [r3, #28]
 800865e:	021b      	lsls	r3, r3, #8
 8008660:	495b      	ldr	r1, [pc, #364]	; (80087d0 <HAL_RCC_OscConfig+0x270>)
 8008662:	4313      	orrs	r3, r2
 8008664:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008666:	69bb      	ldr	r3, [r7, #24]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d109      	bne.n	8008680 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	6a1b      	ldr	r3, [r3, #32]
 8008670:	4618      	mov	r0, r3
 8008672:	f000 fd15 	bl	80090a0 <RCC_SetFlashLatencyFromMSIRange>
 8008676:	4603      	mov	r3, r0
 8008678:	2b00      	cmp	r3, #0
 800867a:	d001      	beq.n	8008680 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800867c:	2301      	movs	r3, #1
 800867e:	e343      	b.n	8008d08 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008680:	f000 fc4a 	bl	8008f18 <HAL_RCC_GetSysClockFreq>
 8008684:	4602      	mov	r2, r0
 8008686:	4b52      	ldr	r3, [pc, #328]	; (80087d0 <HAL_RCC_OscConfig+0x270>)
 8008688:	689b      	ldr	r3, [r3, #8]
 800868a:	091b      	lsrs	r3, r3, #4
 800868c:	f003 030f 	and.w	r3, r3, #15
 8008690:	4950      	ldr	r1, [pc, #320]	; (80087d4 <HAL_RCC_OscConfig+0x274>)
 8008692:	5ccb      	ldrb	r3, [r1, r3]
 8008694:	f003 031f 	and.w	r3, r3, #31
 8008698:	fa22 f303 	lsr.w	r3, r2, r3
 800869c:	4a4e      	ldr	r2, [pc, #312]	; (80087d8 <HAL_RCC_OscConfig+0x278>)
 800869e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80086a0:	4b4e      	ldr	r3, [pc, #312]	; (80087dc <HAL_RCC_OscConfig+0x27c>)
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	4618      	mov	r0, r3
 80086a6:	f7fd fc29 	bl	8005efc <HAL_InitTick>
 80086aa:	4603      	mov	r3, r0
 80086ac:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80086ae:	7bfb      	ldrb	r3, [r7, #15]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d052      	beq.n	800875a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80086b4:	7bfb      	ldrb	r3, [r7, #15]
 80086b6:	e327      	b.n	8008d08 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	699b      	ldr	r3, [r3, #24]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d032      	beq.n	8008726 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80086c0:	4b43      	ldr	r3, [pc, #268]	; (80087d0 <HAL_RCC_OscConfig+0x270>)
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	4a42      	ldr	r2, [pc, #264]	; (80087d0 <HAL_RCC_OscConfig+0x270>)
 80086c6:	f043 0301 	orr.w	r3, r3, #1
 80086ca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80086cc:	f7fd fc66 	bl	8005f9c <HAL_GetTick>
 80086d0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80086d2:	e008      	b.n	80086e6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80086d4:	f7fd fc62 	bl	8005f9c <HAL_GetTick>
 80086d8:	4602      	mov	r2, r0
 80086da:	693b      	ldr	r3, [r7, #16]
 80086dc:	1ad3      	subs	r3, r2, r3
 80086de:	2b02      	cmp	r3, #2
 80086e0:	d901      	bls.n	80086e6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80086e2:	2303      	movs	r3, #3
 80086e4:	e310      	b.n	8008d08 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80086e6:	4b3a      	ldr	r3, [pc, #232]	; (80087d0 <HAL_RCC_OscConfig+0x270>)
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f003 0302 	and.w	r3, r3, #2
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d0f0      	beq.n	80086d4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80086f2:	4b37      	ldr	r3, [pc, #220]	; (80087d0 <HAL_RCC_OscConfig+0x270>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	4a36      	ldr	r2, [pc, #216]	; (80087d0 <HAL_RCC_OscConfig+0x270>)
 80086f8:	f043 0308 	orr.w	r3, r3, #8
 80086fc:	6013      	str	r3, [r2, #0]
 80086fe:	4b34      	ldr	r3, [pc, #208]	; (80087d0 <HAL_RCC_OscConfig+0x270>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	6a1b      	ldr	r3, [r3, #32]
 800870a:	4931      	ldr	r1, [pc, #196]	; (80087d0 <HAL_RCC_OscConfig+0x270>)
 800870c:	4313      	orrs	r3, r2
 800870e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008710:	4b2f      	ldr	r3, [pc, #188]	; (80087d0 <HAL_RCC_OscConfig+0x270>)
 8008712:	685b      	ldr	r3, [r3, #4]
 8008714:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	69db      	ldr	r3, [r3, #28]
 800871c:	021b      	lsls	r3, r3, #8
 800871e:	492c      	ldr	r1, [pc, #176]	; (80087d0 <HAL_RCC_OscConfig+0x270>)
 8008720:	4313      	orrs	r3, r2
 8008722:	604b      	str	r3, [r1, #4]
 8008724:	e01a      	b.n	800875c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8008726:	4b2a      	ldr	r3, [pc, #168]	; (80087d0 <HAL_RCC_OscConfig+0x270>)
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	4a29      	ldr	r2, [pc, #164]	; (80087d0 <HAL_RCC_OscConfig+0x270>)
 800872c:	f023 0301 	bic.w	r3, r3, #1
 8008730:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008732:	f7fd fc33 	bl	8005f9c <HAL_GetTick>
 8008736:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8008738:	e008      	b.n	800874c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800873a:	f7fd fc2f 	bl	8005f9c <HAL_GetTick>
 800873e:	4602      	mov	r2, r0
 8008740:	693b      	ldr	r3, [r7, #16]
 8008742:	1ad3      	subs	r3, r2, r3
 8008744:	2b02      	cmp	r3, #2
 8008746:	d901      	bls.n	800874c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8008748:	2303      	movs	r3, #3
 800874a:	e2dd      	b.n	8008d08 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800874c:	4b20      	ldr	r3, [pc, #128]	; (80087d0 <HAL_RCC_OscConfig+0x270>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f003 0302 	and.w	r3, r3, #2
 8008754:	2b00      	cmp	r3, #0
 8008756:	d1f0      	bne.n	800873a <HAL_RCC_OscConfig+0x1da>
 8008758:	e000      	b.n	800875c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800875a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f003 0301 	and.w	r3, r3, #1
 8008764:	2b00      	cmp	r3, #0
 8008766:	d074      	beq.n	8008852 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8008768:	69bb      	ldr	r3, [r7, #24]
 800876a:	2b08      	cmp	r3, #8
 800876c:	d005      	beq.n	800877a <HAL_RCC_OscConfig+0x21a>
 800876e:	69bb      	ldr	r3, [r7, #24]
 8008770:	2b0c      	cmp	r3, #12
 8008772:	d10e      	bne.n	8008792 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8008774:	697b      	ldr	r3, [r7, #20]
 8008776:	2b03      	cmp	r3, #3
 8008778:	d10b      	bne.n	8008792 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800877a:	4b15      	ldr	r3, [pc, #84]	; (80087d0 <HAL_RCC_OscConfig+0x270>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008782:	2b00      	cmp	r3, #0
 8008784:	d064      	beq.n	8008850 <HAL_RCC_OscConfig+0x2f0>
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	685b      	ldr	r3, [r3, #4]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d160      	bne.n	8008850 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800878e:	2301      	movs	r3, #1
 8008790:	e2ba      	b.n	8008d08 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	685b      	ldr	r3, [r3, #4]
 8008796:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800879a:	d106      	bne.n	80087aa <HAL_RCC_OscConfig+0x24a>
 800879c:	4b0c      	ldr	r3, [pc, #48]	; (80087d0 <HAL_RCC_OscConfig+0x270>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	4a0b      	ldr	r2, [pc, #44]	; (80087d0 <HAL_RCC_OscConfig+0x270>)
 80087a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80087a6:	6013      	str	r3, [r2, #0]
 80087a8:	e026      	b.n	80087f8 <HAL_RCC_OscConfig+0x298>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	685b      	ldr	r3, [r3, #4]
 80087ae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80087b2:	d115      	bne.n	80087e0 <HAL_RCC_OscConfig+0x280>
 80087b4:	4b06      	ldr	r3, [pc, #24]	; (80087d0 <HAL_RCC_OscConfig+0x270>)
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	4a05      	ldr	r2, [pc, #20]	; (80087d0 <HAL_RCC_OscConfig+0x270>)
 80087ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80087be:	6013      	str	r3, [r2, #0]
 80087c0:	4b03      	ldr	r3, [pc, #12]	; (80087d0 <HAL_RCC_OscConfig+0x270>)
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	4a02      	ldr	r2, [pc, #8]	; (80087d0 <HAL_RCC_OscConfig+0x270>)
 80087c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80087ca:	6013      	str	r3, [r2, #0]
 80087cc:	e014      	b.n	80087f8 <HAL_RCC_OscConfig+0x298>
 80087ce:	bf00      	nop
 80087d0:	40021000 	.word	0x40021000
 80087d4:	0801362c 	.word	0x0801362c
 80087d8:	200001e0 	.word	0x200001e0
 80087dc:	20000210 	.word	0x20000210
 80087e0:	4ba0      	ldr	r3, [pc, #640]	; (8008a64 <HAL_RCC_OscConfig+0x504>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	4a9f      	ldr	r2, [pc, #636]	; (8008a64 <HAL_RCC_OscConfig+0x504>)
 80087e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80087ea:	6013      	str	r3, [r2, #0]
 80087ec:	4b9d      	ldr	r3, [pc, #628]	; (8008a64 <HAL_RCC_OscConfig+0x504>)
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	4a9c      	ldr	r2, [pc, #624]	; (8008a64 <HAL_RCC_OscConfig+0x504>)
 80087f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80087f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	685b      	ldr	r3, [r3, #4]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d013      	beq.n	8008828 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008800:	f7fd fbcc 	bl	8005f9c <HAL_GetTick>
 8008804:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008806:	e008      	b.n	800881a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008808:	f7fd fbc8 	bl	8005f9c <HAL_GetTick>
 800880c:	4602      	mov	r2, r0
 800880e:	693b      	ldr	r3, [r7, #16]
 8008810:	1ad3      	subs	r3, r2, r3
 8008812:	2b64      	cmp	r3, #100	; 0x64
 8008814:	d901      	bls.n	800881a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8008816:	2303      	movs	r3, #3
 8008818:	e276      	b.n	8008d08 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800881a:	4b92      	ldr	r3, [pc, #584]	; (8008a64 <HAL_RCC_OscConfig+0x504>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008822:	2b00      	cmp	r3, #0
 8008824:	d0f0      	beq.n	8008808 <HAL_RCC_OscConfig+0x2a8>
 8008826:	e014      	b.n	8008852 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008828:	f7fd fbb8 	bl	8005f9c <HAL_GetTick>
 800882c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800882e:	e008      	b.n	8008842 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008830:	f7fd fbb4 	bl	8005f9c <HAL_GetTick>
 8008834:	4602      	mov	r2, r0
 8008836:	693b      	ldr	r3, [r7, #16]
 8008838:	1ad3      	subs	r3, r2, r3
 800883a:	2b64      	cmp	r3, #100	; 0x64
 800883c:	d901      	bls.n	8008842 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800883e:	2303      	movs	r3, #3
 8008840:	e262      	b.n	8008d08 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008842:	4b88      	ldr	r3, [pc, #544]	; (8008a64 <HAL_RCC_OscConfig+0x504>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800884a:	2b00      	cmp	r3, #0
 800884c:	d1f0      	bne.n	8008830 <HAL_RCC_OscConfig+0x2d0>
 800884e:	e000      	b.n	8008852 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008850:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f003 0302 	and.w	r3, r3, #2
 800885a:	2b00      	cmp	r3, #0
 800885c:	d060      	beq.n	8008920 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800885e:	69bb      	ldr	r3, [r7, #24]
 8008860:	2b04      	cmp	r3, #4
 8008862:	d005      	beq.n	8008870 <HAL_RCC_OscConfig+0x310>
 8008864:	69bb      	ldr	r3, [r7, #24]
 8008866:	2b0c      	cmp	r3, #12
 8008868:	d119      	bne.n	800889e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800886a:	697b      	ldr	r3, [r7, #20]
 800886c:	2b02      	cmp	r3, #2
 800886e:	d116      	bne.n	800889e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008870:	4b7c      	ldr	r3, [pc, #496]	; (8008a64 <HAL_RCC_OscConfig+0x504>)
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008878:	2b00      	cmp	r3, #0
 800887a:	d005      	beq.n	8008888 <HAL_RCC_OscConfig+0x328>
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	68db      	ldr	r3, [r3, #12]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d101      	bne.n	8008888 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8008884:	2301      	movs	r3, #1
 8008886:	e23f      	b.n	8008d08 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008888:	4b76      	ldr	r3, [pc, #472]	; (8008a64 <HAL_RCC_OscConfig+0x504>)
 800888a:	685b      	ldr	r3, [r3, #4]
 800888c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	691b      	ldr	r3, [r3, #16]
 8008894:	061b      	lsls	r3, r3, #24
 8008896:	4973      	ldr	r1, [pc, #460]	; (8008a64 <HAL_RCC_OscConfig+0x504>)
 8008898:	4313      	orrs	r3, r2
 800889a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800889c:	e040      	b.n	8008920 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	68db      	ldr	r3, [r3, #12]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d023      	beq.n	80088ee <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80088a6:	4b6f      	ldr	r3, [pc, #444]	; (8008a64 <HAL_RCC_OscConfig+0x504>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	4a6e      	ldr	r2, [pc, #440]	; (8008a64 <HAL_RCC_OscConfig+0x504>)
 80088ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80088b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088b2:	f7fd fb73 	bl	8005f9c <HAL_GetTick>
 80088b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80088b8:	e008      	b.n	80088cc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80088ba:	f7fd fb6f 	bl	8005f9c <HAL_GetTick>
 80088be:	4602      	mov	r2, r0
 80088c0:	693b      	ldr	r3, [r7, #16]
 80088c2:	1ad3      	subs	r3, r2, r3
 80088c4:	2b02      	cmp	r3, #2
 80088c6:	d901      	bls.n	80088cc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80088c8:	2303      	movs	r3, #3
 80088ca:	e21d      	b.n	8008d08 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80088cc:	4b65      	ldr	r3, [pc, #404]	; (8008a64 <HAL_RCC_OscConfig+0x504>)
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d0f0      	beq.n	80088ba <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80088d8:	4b62      	ldr	r3, [pc, #392]	; (8008a64 <HAL_RCC_OscConfig+0x504>)
 80088da:	685b      	ldr	r3, [r3, #4]
 80088dc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	691b      	ldr	r3, [r3, #16]
 80088e4:	061b      	lsls	r3, r3, #24
 80088e6:	495f      	ldr	r1, [pc, #380]	; (8008a64 <HAL_RCC_OscConfig+0x504>)
 80088e8:	4313      	orrs	r3, r2
 80088ea:	604b      	str	r3, [r1, #4]
 80088ec:	e018      	b.n	8008920 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80088ee:	4b5d      	ldr	r3, [pc, #372]	; (8008a64 <HAL_RCC_OscConfig+0x504>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	4a5c      	ldr	r2, [pc, #368]	; (8008a64 <HAL_RCC_OscConfig+0x504>)
 80088f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80088f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088fa:	f7fd fb4f 	bl	8005f9c <HAL_GetTick>
 80088fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008900:	e008      	b.n	8008914 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008902:	f7fd fb4b 	bl	8005f9c <HAL_GetTick>
 8008906:	4602      	mov	r2, r0
 8008908:	693b      	ldr	r3, [r7, #16]
 800890a:	1ad3      	subs	r3, r2, r3
 800890c:	2b02      	cmp	r3, #2
 800890e:	d901      	bls.n	8008914 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8008910:	2303      	movs	r3, #3
 8008912:	e1f9      	b.n	8008d08 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008914:	4b53      	ldr	r3, [pc, #332]	; (8008a64 <HAL_RCC_OscConfig+0x504>)
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800891c:	2b00      	cmp	r3, #0
 800891e:	d1f0      	bne.n	8008902 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f003 0308 	and.w	r3, r3, #8
 8008928:	2b00      	cmp	r3, #0
 800892a:	d03c      	beq.n	80089a6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	695b      	ldr	r3, [r3, #20]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d01c      	beq.n	800896e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008934:	4b4b      	ldr	r3, [pc, #300]	; (8008a64 <HAL_RCC_OscConfig+0x504>)
 8008936:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800893a:	4a4a      	ldr	r2, [pc, #296]	; (8008a64 <HAL_RCC_OscConfig+0x504>)
 800893c:	f043 0301 	orr.w	r3, r3, #1
 8008940:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008944:	f7fd fb2a 	bl	8005f9c <HAL_GetTick>
 8008948:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800894a:	e008      	b.n	800895e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800894c:	f7fd fb26 	bl	8005f9c <HAL_GetTick>
 8008950:	4602      	mov	r2, r0
 8008952:	693b      	ldr	r3, [r7, #16]
 8008954:	1ad3      	subs	r3, r2, r3
 8008956:	2b02      	cmp	r3, #2
 8008958:	d901      	bls.n	800895e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800895a:	2303      	movs	r3, #3
 800895c:	e1d4      	b.n	8008d08 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800895e:	4b41      	ldr	r3, [pc, #260]	; (8008a64 <HAL_RCC_OscConfig+0x504>)
 8008960:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008964:	f003 0302 	and.w	r3, r3, #2
 8008968:	2b00      	cmp	r3, #0
 800896a:	d0ef      	beq.n	800894c <HAL_RCC_OscConfig+0x3ec>
 800896c:	e01b      	b.n	80089a6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800896e:	4b3d      	ldr	r3, [pc, #244]	; (8008a64 <HAL_RCC_OscConfig+0x504>)
 8008970:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008974:	4a3b      	ldr	r2, [pc, #236]	; (8008a64 <HAL_RCC_OscConfig+0x504>)
 8008976:	f023 0301 	bic.w	r3, r3, #1
 800897a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800897e:	f7fd fb0d 	bl	8005f9c <HAL_GetTick>
 8008982:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008984:	e008      	b.n	8008998 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008986:	f7fd fb09 	bl	8005f9c <HAL_GetTick>
 800898a:	4602      	mov	r2, r0
 800898c:	693b      	ldr	r3, [r7, #16]
 800898e:	1ad3      	subs	r3, r2, r3
 8008990:	2b02      	cmp	r3, #2
 8008992:	d901      	bls.n	8008998 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8008994:	2303      	movs	r3, #3
 8008996:	e1b7      	b.n	8008d08 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008998:	4b32      	ldr	r3, [pc, #200]	; (8008a64 <HAL_RCC_OscConfig+0x504>)
 800899a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800899e:	f003 0302 	and.w	r3, r3, #2
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d1ef      	bne.n	8008986 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f003 0304 	and.w	r3, r3, #4
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	f000 80a6 	beq.w	8008b00 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80089b4:	2300      	movs	r3, #0
 80089b6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80089b8:	4b2a      	ldr	r3, [pc, #168]	; (8008a64 <HAL_RCC_OscConfig+0x504>)
 80089ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d10d      	bne.n	80089e0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80089c4:	4b27      	ldr	r3, [pc, #156]	; (8008a64 <HAL_RCC_OscConfig+0x504>)
 80089c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089c8:	4a26      	ldr	r2, [pc, #152]	; (8008a64 <HAL_RCC_OscConfig+0x504>)
 80089ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80089ce:	6593      	str	r3, [r2, #88]	; 0x58
 80089d0:	4b24      	ldr	r3, [pc, #144]	; (8008a64 <HAL_RCC_OscConfig+0x504>)
 80089d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80089d8:	60bb      	str	r3, [r7, #8]
 80089da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80089dc:	2301      	movs	r3, #1
 80089de:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80089e0:	4b21      	ldr	r3, [pc, #132]	; (8008a68 <HAL_RCC_OscConfig+0x508>)
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d118      	bne.n	8008a1e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80089ec:	4b1e      	ldr	r3, [pc, #120]	; (8008a68 <HAL_RCC_OscConfig+0x508>)
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	4a1d      	ldr	r2, [pc, #116]	; (8008a68 <HAL_RCC_OscConfig+0x508>)
 80089f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80089f6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80089f8:	f7fd fad0 	bl	8005f9c <HAL_GetTick>
 80089fc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80089fe:	e008      	b.n	8008a12 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008a00:	f7fd facc 	bl	8005f9c <HAL_GetTick>
 8008a04:	4602      	mov	r2, r0
 8008a06:	693b      	ldr	r3, [r7, #16]
 8008a08:	1ad3      	subs	r3, r2, r3
 8008a0a:	2b02      	cmp	r3, #2
 8008a0c:	d901      	bls.n	8008a12 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8008a0e:	2303      	movs	r3, #3
 8008a10:	e17a      	b.n	8008d08 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008a12:	4b15      	ldr	r3, [pc, #84]	; (8008a68 <HAL_RCC_OscConfig+0x508>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d0f0      	beq.n	8008a00 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	689b      	ldr	r3, [r3, #8]
 8008a22:	2b01      	cmp	r3, #1
 8008a24:	d108      	bne.n	8008a38 <HAL_RCC_OscConfig+0x4d8>
 8008a26:	4b0f      	ldr	r3, [pc, #60]	; (8008a64 <HAL_RCC_OscConfig+0x504>)
 8008a28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a2c:	4a0d      	ldr	r2, [pc, #52]	; (8008a64 <HAL_RCC_OscConfig+0x504>)
 8008a2e:	f043 0301 	orr.w	r3, r3, #1
 8008a32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008a36:	e029      	b.n	8008a8c <HAL_RCC_OscConfig+0x52c>
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	689b      	ldr	r3, [r3, #8]
 8008a3c:	2b05      	cmp	r3, #5
 8008a3e:	d115      	bne.n	8008a6c <HAL_RCC_OscConfig+0x50c>
 8008a40:	4b08      	ldr	r3, [pc, #32]	; (8008a64 <HAL_RCC_OscConfig+0x504>)
 8008a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a46:	4a07      	ldr	r2, [pc, #28]	; (8008a64 <HAL_RCC_OscConfig+0x504>)
 8008a48:	f043 0304 	orr.w	r3, r3, #4
 8008a4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008a50:	4b04      	ldr	r3, [pc, #16]	; (8008a64 <HAL_RCC_OscConfig+0x504>)
 8008a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a56:	4a03      	ldr	r2, [pc, #12]	; (8008a64 <HAL_RCC_OscConfig+0x504>)
 8008a58:	f043 0301 	orr.w	r3, r3, #1
 8008a5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008a60:	e014      	b.n	8008a8c <HAL_RCC_OscConfig+0x52c>
 8008a62:	bf00      	nop
 8008a64:	40021000 	.word	0x40021000
 8008a68:	40007000 	.word	0x40007000
 8008a6c:	4b9c      	ldr	r3, [pc, #624]	; (8008ce0 <HAL_RCC_OscConfig+0x780>)
 8008a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a72:	4a9b      	ldr	r2, [pc, #620]	; (8008ce0 <HAL_RCC_OscConfig+0x780>)
 8008a74:	f023 0301 	bic.w	r3, r3, #1
 8008a78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008a7c:	4b98      	ldr	r3, [pc, #608]	; (8008ce0 <HAL_RCC_OscConfig+0x780>)
 8008a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a82:	4a97      	ldr	r2, [pc, #604]	; (8008ce0 <HAL_RCC_OscConfig+0x780>)
 8008a84:	f023 0304 	bic.w	r3, r3, #4
 8008a88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	689b      	ldr	r3, [r3, #8]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d016      	beq.n	8008ac2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a94:	f7fd fa82 	bl	8005f9c <HAL_GetTick>
 8008a98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008a9a:	e00a      	b.n	8008ab2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008a9c:	f7fd fa7e 	bl	8005f9c <HAL_GetTick>
 8008aa0:	4602      	mov	r2, r0
 8008aa2:	693b      	ldr	r3, [r7, #16]
 8008aa4:	1ad3      	subs	r3, r2, r3
 8008aa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	d901      	bls.n	8008ab2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8008aae:	2303      	movs	r3, #3
 8008ab0:	e12a      	b.n	8008d08 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008ab2:	4b8b      	ldr	r3, [pc, #556]	; (8008ce0 <HAL_RCC_OscConfig+0x780>)
 8008ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ab8:	f003 0302 	and.w	r3, r3, #2
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d0ed      	beq.n	8008a9c <HAL_RCC_OscConfig+0x53c>
 8008ac0:	e015      	b.n	8008aee <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ac2:	f7fd fa6b 	bl	8005f9c <HAL_GetTick>
 8008ac6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008ac8:	e00a      	b.n	8008ae0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008aca:	f7fd fa67 	bl	8005f9c <HAL_GetTick>
 8008ace:	4602      	mov	r2, r0
 8008ad0:	693b      	ldr	r3, [r7, #16]
 8008ad2:	1ad3      	subs	r3, r2, r3
 8008ad4:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	d901      	bls.n	8008ae0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8008adc:	2303      	movs	r3, #3
 8008ade:	e113      	b.n	8008d08 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008ae0:	4b7f      	ldr	r3, [pc, #508]	; (8008ce0 <HAL_RCC_OscConfig+0x780>)
 8008ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ae6:	f003 0302 	and.w	r3, r3, #2
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d1ed      	bne.n	8008aca <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008aee:	7ffb      	ldrb	r3, [r7, #31]
 8008af0:	2b01      	cmp	r3, #1
 8008af2:	d105      	bne.n	8008b00 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008af4:	4b7a      	ldr	r3, [pc, #488]	; (8008ce0 <HAL_RCC_OscConfig+0x780>)
 8008af6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008af8:	4a79      	ldr	r2, [pc, #484]	; (8008ce0 <HAL_RCC_OscConfig+0x780>)
 8008afa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008afe:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	f000 80fe 	beq.w	8008d06 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b0e:	2b02      	cmp	r3, #2
 8008b10:	f040 80d0 	bne.w	8008cb4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8008b14:	4b72      	ldr	r3, [pc, #456]	; (8008ce0 <HAL_RCC_OscConfig+0x780>)
 8008b16:	68db      	ldr	r3, [r3, #12]
 8008b18:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b1a:	697b      	ldr	r3, [r7, #20]
 8008b1c:	f003 0203 	and.w	r2, r3, #3
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b24:	429a      	cmp	r2, r3
 8008b26:	d130      	bne.n	8008b8a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008b28:	697b      	ldr	r3, [r7, #20]
 8008b2a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b32:	3b01      	subs	r3, #1
 8008b34:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b36:	429a      	cmp	r2, r3
 8008b38:	d127      	bne.n	8008b8a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008b3a:	697b      	ldr	r3, [r7, #20]
 8008b3c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b44:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008b46:	429a      	cmp	r2, r3
 8008b48:	d11f      	bne.n	8008b8a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8008b4a:	697b      	ldr	r3, [r7, #20]
 8008b4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b50:	687a      	ldr	r2, [r7, #4]
 8008b52:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008b54:	2a07      	cmp	r2, #7
 8008b56:	bf14      	ite	ne
 8008b58:	2201      	movne	r2, #1
 8008b5a:	2200      	moveq	r2, #0
 8008b5c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008b5e:	4293      	cmp	r3, r2
 8008b60:	d113      	bne.n	8008b8a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008b62:	697b      	ldr	r3, [r7, #20]
 8008b64:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b6c:	085b      	lsrs	r3, r3, #1
 8008b6e:	3b01      	subs	r3, #1
 8008b70:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8008b72:	429a      	cmp	r2, r3
 8008b74:	d109      	bne.n	8008b8a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008b76:	697b      	ldr	r3, [r7, #20]
 8008b78:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b80:	085b      	lsrs	r3, r3, #1
 8008b82:	3b01      	subs	r3, #1
 8008b84:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008b86:	429a      	cmp	r2, r3
 8008b88:	d06e      	beq.n	8008c68 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008b8a:	69bb      	ldr	r3, [r7, #24]
 8008b8c:	2b0c      	cmp	r3, #12
 8008b8e:	d069      	beq.n	8008c64 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8008b90:	4b53      	ldr	r3, [pc, #332]	; (8008ce0 <HAL_RCC_OscConfig+0x780>)
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d105      	bne.n	8008ba8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8008b9c:	4b50      	ldr	r3, [pc, #320]	; (8008ce0 <HAL_RCC_OscConfig+0x780>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d001      	beq.n	8008bac <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8008ba8:	2301      	movs	r3, #1
 8008baa:	e0ad      	b.n	8008d08 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8008bac:	4b4c      	ldr	r3, [pc, #304]	; (8008ce0 <HAL_RCC_OscConfig+0x780>)
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	4a4b      	ldr	r2, [pc, #300]	; (8008ce0 <HAL_RCC_OscConfig+0x780>)
 8008bb2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008bb6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008bb8:	f7fd f9f0 	bl	8005f9c <HAL_GetTick>
 8008bbc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008bbe:	e008      	b.n	8008bd2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008bc0:	f7fd f9ec 	bl	8005f9c <HAL_GetTick>
 8008bc4:	4602      	mov	r2, r0
 8008bc6:	693b      	ldr	r3, [r7, #16]
 8008bc8:	1ad3      	subs	r3, r2, r3
 8008bca:	2b02      	cmp	r3, #2
 8008bcc:	d901      	bls.n	8008bd2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8008bce:	2303      	movs	r3, #3
 8008bd0:	e09a      	b.n	8008d08 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008bd2:	4b43      	ldr	r3, [pc, #268]	; (8008ce0 <HAL_RCC_OscConfig+0x780>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d1f0      	bne.n	8008bc0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008bde:	4b40      	ldr	r3, [pc, #256]	; (8008ce0 <HAL_RCC_OscConfig+0x780>)
 8008be0:	68da      	ldr	r2, [r3, #12]
 8008be2:	4b40      	ldr	r3, [pc, #256]	; (8008ce4 <HAL_RCC_OscConfig+0x784>)
 8008be4:	4013      	ands	r3, r2
 8008be6:	687a      	ldr	r2, [r7, #4]
 8008be8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8008bea:	687a      	ldr	r2, [r7, #4]
 8008bec:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008bee:	3a01      	subs	r2, #1
 8008bf0:	0112      	lsls	r2, r2, #4
 8008bf2:	4311      	orrs	r1, r2
 8008bf4:	687a      	ldr	r2, [r7, #4]
 8008bf6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008bf8:	0212      	lsls	r2, r2, #8
 8008bfa:	4311      	orrs	r1, r2
 8008bfc:	687a      	ldr	r2, [r7, #4]
 8008bfe:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008c00:	0852      	lsrs	r2, r2, #1
 8008c02:	3a01      	subs	r2, #1
 8008c04:	0552      	lsls	r2, r2, #21
 8008c06:	4311      	orrs	r1, r2
 8008c08:	687a      	ldr	r2, [r7, #4]
 8008c0a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8008c0c:	0852      	lsrs	r2, r2, #1
 8008c0e:	3a01      	subs	r2, #1
 8008c10:	0652      	lsls	r2, r2, #25
 8008c12:	4311      	orrs	r1, r2
 8008c14:	687a      	ldr	r2, [r7, #4]
 8008c16:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008c18:	0912      	lsrs	r2, r2, #4
 8008c1a:	0452      	lsls	r2, r2, #17
 8008c1c:	430a      	orrs	r2, r1
 8008c1e:	4930      	ldr	r1, [pc, #192]	; (8008ce0 <HAL_RCC_OscConfig+0x780>)
 8008c20:	4313      	orrs	r3, r2
 8008c22:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8008c24:	4b2e      	ldr	r3, [pc, #184]	; (8008ce0 <HAL_RCC_OscConfig+0x780>)
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	4a2d      	ldr	r2, [pc, #180]	; (8008ce0 <HAL_RCC_OscConfig+0x780>)
 8008c2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008c2e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008c30:	4b2b      	ldr	r3, [pc, #172]	; (8008ce0 <HAL_RCC_OscConfig+0x780>)
 8008c32:	68db      	ldr	r3, [r3, #12]
 8008c34:	4a2a      	ldr	r2, [pc, #168]	; (8008ce0 <HAL_RCC_OscConfig+0x780>)
 8008c36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008c3a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008c3c:	f7fd f9ae 	bl	8005f9c <HAL_GetTick>
 8008c40:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008c42:	e008      	b.n	8008c56 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008c44:	f7fd f9aa 	bl	8005f9c <HAL_GetTick>
 8008c48:	4602      	mov	r2, r0
 8008c4a:	693b      	ldr	r3, [r7, #16]
 8008c4c:	1ad3      	subs	r3, r2, r3
 8008c4e:	2b02      	cmp	r3, #2
 8008c50:	d901      	bls.n	8008c56 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8008c52:	2303      	movs	r3, #3
 8008c54:	e058      	b.n	8008d08 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008c56:	4b22      	ldr	r3, [pc, #136]	; (8008ce0 <HAL_RCC_OscConfig+0x780>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d0f0      	beq.n	8008c44 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008c62:	e050      	b.n	8008d06 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8008c64:	2301      	movs	r3, #1
 8008c66:	e04f      	b.n	8008d08 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008c68:	4b1d      	ldr	r3, [pc, #116]	; (8008ce0 <HAL_RCC_OscConfig+0x780>)
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d148      	bne.n	8008d06 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8008c74:	4b1a      	ldr	r3, [pc, #104]	; (8008ce0 <HAL_RCC_OscConfig+0x780>)
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	4a19      	ldr	r2, [pc, #100]	; (8008ce0 <HAL_RCC_OscConfig+0x780>)
 8008c7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008c7e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008c80:	4b17      	ldr	r3, [pc, #92]	; (8008ce0 <HAL_RCC_OscConfig+0x780>)
 8008c82:	68db      	ldr	r3, [r3, #12]
 8008c84:	4a16      	ldr	r2, [pc, #88]	; (8008ce0 <HAL_RCC_OscConfig+0x780>)
 8008c86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008c8a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008c8c:	f7fd f986 	bl	8005f9c <HAL_GetTick>
 8008c90:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008c92:	e008      	b.n	8008ca6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008c94:	f7fd f982 	bl	8005f9c <HAL_GetTick>
 8008c98:	4602      	mov	r2, r0
 8008c9a:	693b      	ldr	r3, [r7, #16]
 8008c9c:	1ad3      	subs	r3, r2, r3
 8008c9e:	2b02      	cmp	r3, #2
 8008ca0:	d901      	bls.n	8008ca6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8008ca2:	2303      	movs	r3, #3
 8008ca4:	e030      	b.n	8008d08 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008ca6:	4b0e      	ldr	r3, [pc, #56]	; (8008ce0 <HAL_RCC_OscConfig+0x780>)
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d0f0      	beq.n	8008c94 <HAL_RCC_OscConfig+0x734>
 8008cb2:	e028      	b.n	8008d06 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008cb4:	69bb      	ldr	r3, [r7, #24]
 8008cb6:	2b0c      	cmp	r3, #12
 8008cb8:	d023      	beq.n	8008d02 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008cba:	4b09      	ldr	r3, [pc, #36]	; (8008ce0 <HAL_RCC_OscConfig+0x780>)
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	4a08      	ldr	r2, [pc, #32]	; (8008ce0 <HAL_RCC_OscConfig+0x780>)
 8008cc0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008cc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008cc6:	f7fd f969 	bl	8005f9c <HAL_GetTick>
 8008cca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008ccc:	e00c      	b.n	8008ce8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008cce:	f7fd f965 	bl	8005f9c <HAL_GetTick>
 8008cd2:	4602      	mov	r2, r0
 8008cd4:	693b      	ldr	r3, [r7, #16]
 8008cd6:	1ad3      	subs	r3, r2, r3
 8008cd8:	2b02      	cmp	r3, #2
 8008cda:	d905      	bls.n	8008ce8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8008cdc:	2303      	movs	r3, #3
 8008cde:	e013      	b.n	8008d08 <HAL_RCC_OscConfig+0x7a8>
 8008ce0:	40021000 	.word	0x40021000
 8008ce4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008ce8:	4b09      	ldr	r3, [pc, #36]	; (8008d10 <HAL_RCC_OscConfig+0x7b0>)
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d1ec      	bne.n	8008cce <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8008cf4:	4b06      	ldr	r3, [pc, #24]	; (8008d10 <HAL_RCC_OscConfig+0x7b0>)
 8008cf6:	68da      	ldr	r2, [r3, #12]
 8008cf8:	4905      	ldr	r1, [pc, #20]	; (8008d10 <HAL_RCC_OscConfig+0x7b0>)
 8008cfa:	4b06      	ldr	r3, [pc, #24]	; (8008d14 <HAL_RCC_OscConfig+0x7b4>)
 8008cfc:	4013      	ands	r3, r2
 8008cfe:	60cb      	str	r3, [r1, #12]
 8008d00:	e001      	b.n	8008d06 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8008d02:	2301      	movs	r3, #1
 8008d04:	e000      	b.n	8008d08 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8008d06:	2300      	movs	r3, #0
}
 8008d08:	4618      	mov	r0, r3
 8008d0a:	3720      	adds	r7, #32
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	bd80      	pop	{r7, pc}
 8008d10:	40021000 	.word	0x40021000
 8008d14:	feeefffc 	.word	0xfeeefffc

08008d18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b084      	sub	sp, #16
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
 8008d20:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d101      	bne.n	8008d2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008d28:	2301      	movs	r3, #1
 8008d2a:	e0e7      	b.n	8008efc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008d2c:	4b75      	ldr	r3, [pc, #468]	; (8008f04 <HAL_RCC_ClockConfig+0x1ec>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	f003 0307 	and.w	r3, r3, #7
 8008d34:	683a      	ldr	r2, [r7, #0]
 8008d36:	429a      	cmp	r2, r3
 8008d38:	d910      	bls.n	8008d5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008d3a:	4b72      	ldr	r3, [pc, #456]	; (8008f04 <HAL_RCC_ClockConfig+0x1ec>)
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	f023 0207 	bic.w	r2, r3, #7
 8008d42:	4970      	ldr	r1, [pc, #448]	; (8008f04 <HAL_RCC_ClockConfig+0x1ec>)
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	4313      	orrs	r3, r2
 8008d48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008d4a:	4b6e      	ldr	r3, [pc, #440]	; (8008f04 <HAL_RCC_ClockConfig+0x1ec>)
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	f003 0307 	and.w	r3, r3, #7
 8008d52:	683a      	ldr	r2, [r7, #0]
 8008d54:	429a      	cmp	r2, r3
 8008d56:	d001      	beq.n	8008d5c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008d58:	2301      	movs	r3, #1
 8008d5a:	e0cf      	b.n	8008efc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	f003 0302 	and.w	r3, r3, #2
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d010      	beq.n	8008d8a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	689a      	ldr	r2, [r3, #8]
 8008d6c:	4b66      	ldr	r3, [pc, #408]	; (8008f08 <HAL_RCC_ClockConfig+0x1f0>)
 8008d6e:	689b      	ldr	r3, [r3, #8]
 8008d70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008d74:	429a      	cmp	r2, r3
 8008d76:	d908      	bls.n	8008d8a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008d78:	4b63      	ldr	r3, [pc, #396]	; (8008f08 <HAL_RCC_ClockConfig+0x1f0>)
 8008d7a:	689b      	ldr	r3, [r3, #8]
 8008d7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	689b      	ldr	r3, [r3, #8]
 8008d84:	4960      	ldr	r1, [pc, #384]	; (8008f08 <HAL_RCC_ClockConfig+0x1f0>)
 8008d86:	4313      	orrs	r3, r2
 8008d88:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f003 0301 	and.w	r3, r3, #1
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d04c      	beq.n	8008e30 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	685b      	ldr	r3, [r3, #4]
 8008d9a:	2b03      	cmp	r3, #3
 8008d9c:	d107      	bne.n	8008dae <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008d9e:	4b5a      	ldr	r3, [pc, #360]	; (8008f08 <HAL_RCC_ClockConfig+0x1f0>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d121      	bne.n	8008dee <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8008daa:	2301      	movs	r3, #1
 8008dac:	e0a6      	b.n	8008efc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	685b      	ldr	r3, [r3, #4]
 8008db2:	2b02      	cmp	r3, #2
 8008db4:	d107      	bne.n	8008dc6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008db6:	4b54      	ldr	r3, [pc, #336]	; (8008f08 <HAL_RCC_ClockConfig+0x1f0>)
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d115      	bne.n	8008dee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	e09a      	b.n	8008efc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	685b      	ldr	r3, [r3, #4]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d107      	bne.n	8008dde <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008dce:	4b4e      	ldr	r3, [pc, #312]	; (8008f08 <HAL_RCC_ClockConfig+0x1f0>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	f003 0302 	and.w	r3, r3, #2
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d109      	bne.n	8008dee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8008dda:	2301      	movs	r3, #1
 8008ddc:	e08e      	b.n	8008efc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008dde:	4b4a      	ldr	r3, [pc, #296]	; (8008f08 <HAL_RCC_ClockConfig+0x1f0>)
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d101      	bne.n	8008dee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8008dea:	2301      	movs	r3, #1
 8008dec:	e086      	b.n	8008efc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008dee:	4b46      	ldr	r3, [pc, #280]	; (8008f08 <HAL_RCC_ClockConfig+0x1f0>)
 8008df0:	689b      	ldr	r3, [r3, #8]
 8008df2:	f023 0203 	bic.w	r2, r3, #3
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	685b      	ldr	r3, [r3, #4]
 8008dfa:	4943      	ldr	r1, [pc, #268]	; (8008f08 <HAL_RCC_ClockConfig+0x1f0>)
 8008dfc:	4313      	orrs	r3, r2
 8008dfe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008e00:	f7fd f8cc 	bl	8005f9c <HAL_GetTick>
 8008e04:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008e06:	e00a      	b.n	8008e1e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008e08:	f7fd f8c8 	bl	8005f9c <HAL_GetTick>
 8008e0c:	4602      	mov	r2, r0
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	1ad3      	subs	r3, r2, r3
 8008e12:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e16:	4293      	cmp	r3, r2
 8008e18:	d901      	bls.n	8008e1e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8008e1a:	2303      	movs	r3, #3
 8008e1c:	e06e      	b.n	8008efc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008e1e:	4b3a      	ldr	r3, [pc, #232]	; (8008f08 <HAL_RCC_ClockConfig+0x1f0>)
 8008e20:	689b      	ldr	r3, [r3, #8]
 8008e22:	f003 020c 	and.w	r2, r3, #12
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	685b      	ldr	r3, [r3, #4]
 8008e2a:	009b      	lsls	r3, r3, #2
 8008e2c:	429a      	cmp	r2, r3
 8008e2e:	d1eb      	bne.n	8008e08 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	f003 0302 	and.w	r3, r3, #2
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d010      	beq.n	8008e5e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	689a      	ldr	r2, [r3, #8]
 8008e40:	4b31      	ldr	r3, [pc, #196]	; (8008f08 <HAL_RCC_ClockConfig+0x1f0>)
 8008e42:	689b      	ldr	r3, [r3, #8]
 8008e44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008e48:	429a      	cmp	r2, r3
 8008e4a:	d208      	bcs.n	8008e5e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008e4c:	4b2e      	ldr	r3, [pc, #184]	; (8008f08 <HAL_RCC_ClockConfig+0x1f0>)
 8008e4e:	689b      	ldr	r3, [r3, #8]
 8008e50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	689b      	ldr	r3, [r3, #8]
 8008e58:	492b      	ldr	r1, [pc, #172]	; (8008f08 <HAL_RCC_ClockConfig+0x1f0>)
 8008e5a:	4313      	orrs	r3, r2
 8008e5c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008e5e:	4b29      	ldr	r3, [pc, #164]	; (8008f04 <HAL_RCC_ClockConfig+0x1ec>)
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f003 0307 	and.w	r3, r3, #7
 8008e66:	683a      	ldr	r2, [r7, #0]
 8008e68:	429a      	cmp	r2, r3
 8008e6a:	d210      	bcs.n	8008e8e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008e6c:	4b25      	ldr	r3, [pc, #148]	; (8008f04 <HAL_RCC_ClockConfig+0x1ec>)
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	f023 0207 	bic.w	r2, r3, #7
 8008e74:	4923      	ldr	r1, [pc, #140]	; (8008f04 <HAL_RCC_ClockConfig+0x1ec>)
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	4313      	orrs	r3, r2
 8008e7a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008e7c:	4b21      	ldr	r3, [pc, #132]	; (8008f04 <HAL_RCC_ClockConfig+0x1ec>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	f003 0307 	and.w	r3, r3, #7
 8008e84:	683a      	ldr	r2, [r7, #0]
 8008e86:	429a      	cmp	r2, r3
 8008e88:	d001      	beq.n	8008e8e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8008e8a:	2301      	movs	r3, #1
 8008e8c:	e036      	b.n	8008efc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f003 0304 	and.w	r3, r3, #4
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d008      	beq.n	8008eac <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008e9a:	4b1b      	ldr	r3, [pc, #108]	; (8008f08 <HAL_RCC_ClockConfig+0x1f0>)
 8008e9c:	689b      	ldr	r3, [r3, #8]
 8008e9e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	68db      	ldr	r3, [r3, #12]
 8008ea6:	4918      	ldr	r1, [pc, #96]	; (8008f08 <HAL_RCC_ClockConfig+0x1f0>)
 8008ea8:	4313      	orrs	r3, r2
 8008eaa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	f003 0308 	and.w	r3, r3, #8
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d009      	beq.n	8008ecc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008eb8:	4b13      	ldr	r3, [pc, #76]	; (8008f08 <HAL_RCC_ClockConfig+0x1f0>)
 8008eba:	689b      	ldr	r3, [r3, #8]
 8008ebc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	691b      	ldr	r3, [r3, #16]
 8008ec4:	00db      	lsls	r3, r3, #3
 8008ec6:	4910      	ldr	r1, [pc, #64]	; (8008f08 <HAL_RCC_ClockConfig+0x1f0>)
 8008ec8:	4313      	orrs	r3, r2
 8008eca:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008ecc:	f000 f824 	bl	8008f18 <HAL_RCC_GetSysClockFreq>
 8008ed0:	4602      	mov	r2, r0
 8008ed2:	4b0d      	ldr	r3, [pc, #52]	; (8008f08 <HAL_RCC_ClockConfig+0x1f0>)
 8008ed4:	689b      	ldr	r3, [r3, #8]
 8008ed6:	091b      	lsrs	r3, r3, #4
 8008ed8:	f003 030f 	and.w	r3, r3, #15
 8008edc:	490b      	ldr	r1, [pc, #44]	; (8008f0c <HAL_RCC_ClockConfig+0x1f4>)
 8008ede:	5ccb      	ldrb	r3, [r1, r3]
 8008ee0:	f003 031f 	and.w	r3, r3, #31
 8008ee4:	fa22 f303 	lsr.w	r3, r2, r3
 8008ee8:	4a09      	ldr	r2, [pc, #36]	; (8008f10 <HAL_RCC_ClockConfig+0x1f8>)
 8008eea:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8008eec:	4b09      	ldr	r3, [pc, #36]	; (8008f14 <HAL_RCC_ClockConfig+0x1fc>)
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	f7fd f803 	bl	8005efc <HAL_InitTick>
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	72fb      	strb	r3, [r7, #11]

  return status;
 8008efa:	7afb      	ldrb	r3, [r7, #11]
}
 8008efc:	4618      	mov	r0, r3
 8008efe:	3710      	adds	r7, #16
 8008f00:	46bd      	mov	sp, r7
 8008f02:	bd80      	pop	{r7, pc}
 8008f04:	40022000 	.word	0x40022000
 8008f08:	40021000 	.word	0x40021000
 8008f0c:	0801362c 	.word	0x0801362c
 8008f10:	200001e0 	.word	0x200001e0
 8008f14:	20000210 	.word	0x20000210

08008f18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008f18:	b480      	push	{r7}
 8008f1a:	b089      	sub	sp, #36	; 0x24
 8008f1c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8008f1e:	2300      	movs	r3, #0
 8008f20:	61fb      	str	r3, [r7, #28]
 8008f22:	2300      	movs	r3, #0
 8008f24:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008f26:	4b3e      	ldr	r3, [pc, #248]	; (8009020 <HAL_RCC_GetSysClockFreq+0x108>)
 8008f28:	689b      	ldr	r3, [r3, #8]
 8008f2a:	f003 030c 	and.w	r3, r3, #12
 8008f2e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008f30:	4b3b      	ldr	r3, [pc, #236]	; (8009020 <HAL_RCC_GetSysClockFreq+0x108>)
 8008f32:	68db      	ldr	r3, [r3, #12]
 8008f34:	f003 0303 	and.w	r3, r3, #3
 8008f38:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8008f3a:	693b      	ldr	r3, [r7, #16]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d005      	beq.n	8008f4c <HAL_RCC_GetSysClockFreq+0x34>
 8008f40:	693b      	ldr	r3, [r7, #16]
 8008f42:	2b0c      	cmp	r3, #12
 8008f44:	d121      	bne.n	8008f8a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	2b01      	cmp	r3, #1
 8008f4a:	d11e      	bne.n	8008f8a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8008f4c:	4b34      	ldr	r3, [pc, #208]	; (8009020 <HAL_RCC_GetSysClockFreq+0x108>)
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	f003 0308 	and.w	r3, r3, #8
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d107      	bne.n	8008f68 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8008f58:	4b31      	ldr	r3, [pc, #196]	; (8009020 <HAL_RCC_GetSysClockFreq+0x108>)
 8008f5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008f5e:	0a1b      	lsrs	r3, r3, #8
 8008f60:	f003 030f 	and.w	r3, r3, #15
 8008f64:	61fb      	str	r3, [r7, #28]
 8008f66:	e005      	b.n	8008f74 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8008f68:	4b2d      	ldr	r3, [pc, #180]	; (8009020 <HAL_RCC_GetSysClockFreq+0x108>)
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	091b      	lsrs	r3, r3, #4
 8008f6e:	f003 030f 	and.w	r3, r3, #15
 8008f72:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8008f74:	4a2b      	ldr	r2, [pc, #172]	; (8009024 <HAL_RCC_GetSysClockFreq+0x10c>)
 8008f76:	69fb      	ldr	r3, [r7, #28]
 8008f78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f7c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008f7e:	693b      	ldr	r3, [r7, #16]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d10d      	bne.n	8008fa0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8008f84:	69fb      	ldr	r3, [r7, #28]
 8008f86:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008f88:	e00a      	b.n	8008fa0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8008f8a:	693b      	ldr	r3, [r7, #16]
 8008f8c:	2b04      	cmp	r3, #4
 8008f8e:	d102      	bne.n	8008f96 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008f90:	4b25      	ldr	r3, [pc, #148]	; (8009028 <HAL_RCC_GetSysClockFreq+0x110>)
 8008f92:	61bb      	str	r3, [r7, #24]
 8008f94:	e004      	b.n	8008fa0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8008f96:	693b      	ldr	r3, [r7, #16]
 8008f98:	2b08      	cmp	r3, #8
 8008f9a:	d101      	bne.n	8008fa0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008f9c:	4b23      	ldr	r3, [pc, #140]	; (800902c <HAL_RCC_GetSysClockFreq+0x114>)
 8008f9e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8008fa0:	693b      	ldr	r3, [r7, #16]
 8008fa2:	2b0c      	cmp	r3, #12
 8008fa4:	d134      	bne.n	8009010 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008fa6:	4b1e      	ldr	r3, [pc, #120]	; (8009020 <HAL_RCC_GetSysClockFreq+0x108>)
 8008fa8:	68db      	ldr	r3, [r3, #12]
 8008faa:	f003 0303 	and.w	r3, r3, #3
 8008fae:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	2b02      	cmp	r3, #2
 8008fb4:	d003      	beq.n	8008fbe <HAL_RCC_GetSysClockFreq+0xa6>
 8008fb6:	68bb      	ldr	r3, [r7, #8]
 8008fb8:	2b03      	cmp	r3, #3
 8008fba:	d003      	beq.n	8008fc4 <HAL_RCC_GetSysClockFreq+0xac>
 8008fbc:	e005      	b.n	8008fca <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8008fbe:	4b1a      	ldr	r3, [pc, #104]	; (8009028 <HAL_RCC_GetSysClockFreq+0x110>)
 8008fc0:	617b      	str	r3, [r7, #20]
      break;
 8008fc2:	e005      	b.n	8008fd0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8008fc4:	4b19      	ldr	r3, [pc, #100]	; (800902c <HAL_RCC_GetSysClockFreq+0x114>)
 8008fc6:	617b      	str	r3, [r7, #20]
      break;
 8008fc8:	e002      	b.n	8008fd0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8008fca:	69fb      	ldr	r3, [r7, #28]
 8008fcc:	617b      	str	r3, [r7, #20]
      break;
 8008fce:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008fd0:	4b13      	ldr	r3, [pc, #76]	; (8009020 <HAL_RCC_GetSysClockFreq+0x108>)
 8008fd2:	68db      	ldr	r3, [r3, #12]
 8008fd4:	091b      	lsrs	r3, r3, #4
 8008fd6:	f003 0307 	and.w	r3, r3, #7
 8008fda:	3301      	adds	r3, #1
 8008fdc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8008fde:	4b10      	ldr	r3, [pc, #64]	; (8009020 <HAL_RCC_GetSysClockFreq+0x108>)
 8008fe0:	68db      	ldr	r3, [r3, #12]
 8008fe2:	0a1b      	lsrs	r3, r3, #8
 8008fe4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008fe8:	697a      	ldr	r2, [r7, #20]
 8008fea:	fb03 f202 	mul.w	r2, r3, r2
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ff4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008ff6:	4b0a      	ldr	r3, [pc, #40]	; (8009020 <HAL_RCC_GetSysClockFreq+0x108>)
 8008ff8:	68db      	ldr	r3, [r3, #12]
 8008ffa:	0e5b      	lsrs	r3, r3, #25
 8008ffc:	f003 0303 	and.w	r3, r3, #3
 8009000:	3301      	adds	r3, #1
 8009002:	005b      	lsls	r3, r3, #1
 8009004:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8009006:	697a      	ldr	r2, [r7, #20]
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	fbb2 f3f3 	udiv	r3, r2, r3
 800900e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8009010:	69bb      	ldr	r3, [r7, #24]
}
 8009012:	4618      	mov	r0, r3
 8009014:	3724      	adds	r7, #36	; 0x24
 8009016:	46bd      	mov	sp, r7
 8009018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901c:	4770      	bx	lr
 800901e:	bf00      	nop
 8009020:	40021000 	.word	0x40021000
 8009024:	08013644 	.word	0x08013644
 8009028:	00f42400 	.word	0x00f42400
 800902c:	007a1200 	.word	0x007a1200

08009030 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009030:	b480      	push	{r7}
 8009032:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009034:	4b03      	ldr	r3, [pc, #12]	; (8009044 <HAL_RCC_GetHCLKFreq+0x14>)
 8009036:	681b      	ldr	r3, [r3, #0]
}
 8009038:	4618      	mov	r0, r3
 800903a:	46bd      	mov	sp, r7
 800903c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009040:	4770      	bx	lr
 8009042:	bf00      	nop
 8009044:	200001e0 	.word	0x200001e0

08009048 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800904c:	f7ff fff0 	bl	8009030 <HAL_RCC_GetHCLKFreq>
 8009050:	4602      	mov	r2, r0
 8009052:	4b06      	ldr	r3, [pc, #24]	; (800906c <HAL_RCC_GetPCLK1Freq+0x24>)
 8009054:	689b      	ldr	r3, [r3, #8]
 8009056:	0a1b      	lsrs	r3, r3, #8
 8009058:	f003 0307 	and.w	r3, r3, #7
 800905c:	4904      	ldr	r1, [pc, #16]	; (8009070 <HAL_RCC_GetPCLK1Freq+0x28>)
 800905e:	5ccb      	ldrb	r3, [r1, r3]
 8009060:	f003 031f 	and.w	r3, r3, #31
 8009064:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009068:	4618      	mov	r0, r3
 800906a:	bd80      	pop	{r7, pc}
 800906c:	40021000 	.word	0x40021000
 8009070:	0801363c 	.word	0x0801363c

08009074 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009074:	b580      	push	{r7, lr}
 8009076:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8009078:	f7ff ffda 	bl	8009030 <HAL_RCC_GetHCLKFreq>
 800907c:	4602      	mov	r2, r0
 800907e:	4b06      	ldr	r3, [pc, #24]	; (8009098 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009080:	689b      	ldr	r3, [r3, #8]
 8009082:	0adb      	lsrs	r3, r3, #11
 8009084:	f003 0307 	and.w	r3, r3, #7
 8009088:	4904      	ldr	r1, [pc, #16]	; (800909c <HAL_RCC_GetPCLK2Freq+0x28>)
 800908a:	5ccb      	ldrb	r3, [r1, r3]
 800908c:	f003 031f 	and.w	r3, r3, #31
 8009090:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009094:	4618      	mov	r0, r3
 8009096:	bd80      	pop	{r7, pc}
 8009098:	40021000 	.word	0x40021000
 800909c:	0801363c 	.word	0x0801363c

080090a0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b086      	sub	sp, #24
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80090a8:	2300      	movs	r3, #0
 80090aa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80090ac:	4b2a      	ldr	r3, [pc, #168]	; (8009158 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80090ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d003      	beq.n	80090c0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80090b8:	f7ff f9ee 	bl	8008498 <HAL_PWREx_GetVoltageRange>
 80090bc:	6178      	str	r0, [r7, #20]
 80090be:	e014      	b.n	80090ea <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80090c0:	4b25      	ldr	r3, [pc, #148]	; (8009158 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80090c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090c4:	4a24      	ldr	r2, [pc, #144]	; (8009158 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80090c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80090ca:	6593      	str	r3, [r2, #88]	; 0x58
 80090cc:	4b22      	ldr	r3, [pc, #136]	; (8009158 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80090ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80090d4:	60fb      	str	r3, [r7, #12]
 80090d6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80090d8:	f7ff f9de 	bl	8008498 <HAL_PWREx_GetVoltageRange>
 80090dc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80090de:	4b1e      	ldr	r3, [pc, #120]	; (8009158 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80090e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090e2:	4a1d      	ldr	r2, [pc, #116]	; (8009158 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80090e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80090e8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80090ea:	697b      	ldr	r3, [r7, #20]
 80090ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80090f0:	d10b      	bne.n	800910a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	2b80      	cmp	r3, #128	; 0x80
 80090f6:	d919      	bls.n	800912c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2ba0      	cmp	r3, #160	; 0xa0
 80090fc:	d902      	bls.n	8009104 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80090fe:	2302      	movs	r3, #2
 8009100:	613b      	str	r3, [r7, #16]
 8009102:	e013      	b.n	800912c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8009104:	2301      	movs	r3, #1
 8009106:	613b      	str	r3, [r7, #16]
 8009108:	e010      	b.n	800912c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	2b80      	cmp	r3, #128	; 0x80
 800910e:	d902      	bls.n	8009116 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8009110:	2303      	movs	r3, #3
 8009112:	613b      	str	r3, [r7, #16]
 8009114:	e00a      	b.n	800912c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2b80      	cmp	r3, #128	; 0x80
 800911a:	d102      	bne.n	8009122 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800911c:	2302      	movs	r3, #2
 800911e:	613b      	str	r3, [r7, #16]
 8009120:	e004      	b.n	800912c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	2b70      	cmp	r3, #112	; 0x70
 8009126:	d101      	bne.n	800912c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8009128:	2301      	movs	r3, #1
 800912a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800912c:	4b0b      	ldr	r3, [pc, #44]	; (800915c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	f023 0207 	bic.w	r2, r3, #7
 8009134:	4909      	ldr	r1, [pc, #36]	; (800915c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8009136:	693b      	ldr	r3, [r7, #16]
 8009138:	4313      	orrs	r3, r2
 800913a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800913c:	4b07      	ldr	r3, [pc, #28]	; (800915c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f003 0307 	and.w	r3, r3, #7
 8009144:	693a      	ldr	r2, [r7, #16]
 8009146:	429a      	cmp	r2, r3
 8009148:	d001      	beq.n	800914e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800914a:	2301      	movs	r3, #1
 800914c:	e000      	b.n	8009150 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800914e:	2300      	movs	r3, #0
}
 8009150:	4618      	mov	r0, r3
 8009152:	3718      	adds	r7, #24
 8009154:	46bd      	mov	sp, r7
 8009156:	bd80      	pop	{r7, pc}
 8009158:	40021000 	.word	0x40021000
 800915c:	40022000 	.word	0x40022000

08009160 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b086      	sub	sp, #24
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009168:	2300      	movs	r3, #0
 800916a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800916c:	2300      	movs	r3, #0
 800916e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009178:	2b00      	cmp	r3, #0
 800917a:	d041      	beq.n	8009200 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009180:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009184:	d02a      	beq.n	80091dc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8009186:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800918a:	d824      	bhi.n	80091d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800918c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009190:	d008      	beq.n	80091a4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8009192:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009196:	d81e      	bhi.n	80091d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009198:	2b00      	cmp	r3, #0
 800919a:	d00a      	beq.n	80091b2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800919c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80091a0:	d010      	beq.n	80091c4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80091a2:	e018      	b.n	80091d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80091a4:	4b86      	ldr	r3, [pc, #536]	; (80093c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80091a6:	68db      	ldr	r3, [r3, #12]
 80091a8:	4a85      	ldr	r2, [pc, #532]	; (80093c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80091aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80091ae:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80091b0:	e015      	b.n	80091de <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	3304      	adds	r3, #4
 80091b6:	2100      	movs	r1, #0
 80091b8:	4618      	mov	r0, r3
 80091ba:	f000 fabb 	bl	8009734 <RCCEx_PLLSAI1_Config>
 80091be:	4603      	mov	r3, r0
 80091c0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80091c2:	e00c      	b.n	80091de <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	3320      	adds	r3, #32
 80091c8:	2100      	movs	r1, #0
 80091ca:	4618      	mov	r0, r3
 80091cc:	f000 fba6 	bl	800991c <RCCEx_PLLSAI2_Config>
 80091d0:	4603      	mov	r3, r0
 80091d2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80091d4:	e003      	b.n	80091de <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80091d6:	2301      	movs	r3, #1
 80091d8:	74fb      	strb	r3, [r7, #19]
      break;
 80091da:	e000      	b.n	80091de <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80091dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80091de:	7cfb      	ldrb	r3, [r7, #19]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d10b      	bne.n	80091fc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80091e4:	4b76      	ldr	r3, [pc, #472]	; (80093c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80091e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091ea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80091f2:	4973      	ldr	r1, [pc, #460]	; (80093c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80091f4:	4313      	orrs	r3, r2
 80091f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80091fa:	e001      	b.n	8009200 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091fc:	7cfb      	ldrb	r3, [r7, #19]
 80091fe:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009208:	2b00      	cmp	r3, #0
 800920a:	d041      	beq.n	8009290 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009210:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009214:	d02a      	beq.n	800926c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8009216:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800921a:	d824      	bhi.n	8009266 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800921c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009220:	d008      	beq.n	8009234 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8009222:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009226:	d81e      	bhi.n	8009266 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8009228:	2b00      	cmp	r3, #0
 800922a:	d00a      	beq.n	8009242 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800922c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009230:	d010      	beq.n	8009254 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8009232:	e018      	b.n	8009266 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8009234:	4b62      	ldr	r3, [pc, #392]	; (80093c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009236:	68db      	ldr	r3, [r3, #12]
 8009238:	4a61      	ldr	r2, [pc, #388]	; (80093c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800923a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800923e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8009240:	e015      	b.n	800926e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	3304      	adds	r3, #4
 8009246:	2100      	movs	r1, #0
 8009248:	4618      	mov	r0, r3
 800924a:	f000 fa73 	bl	8009734 <RCCEx_PLLSAI1_Config>
 800924e:	4603      	mov	r3, r0
 8009250:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8009252:	e00c      	b.n	800926e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	3320      	adds	r3, #32
 8009258:	2100      	movs	r1, #0
 800925a:	4618      	mov	r0, r3
 800925c:	f000 fb5e 	bl	800991c <RCCEx_PLLSAI2_Config>
 8009260:	4603      	mov	r3, r0
 8009262:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8009264:	e003      	b.n	800926e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009266:	2301      	movs	r3, #1
 8009268:	74fb      	strb	r3, [r7, #19]
      break;
 800926a:	e000      	b.n	800926e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800926c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800926e:	7cfb      	ldrb	r3, [r7, #19]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d10b      	bne.n	800928c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8009274:	4b52      	ldr	r3, [pc, #328]	; (80093c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009276:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800927a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009282:	494f      	ldr	r1, [pc, #316]	; (80093c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009284:	4313      	orrs	r3, r2
 8009286:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800928a:	e001      	b.n	8009290 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800928c:	7cfb      	ldrb	r3, [r7, #19]
 800928e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009298:	2b00      	cmp	r3, #0
 800929a:	f000 80a0 	beq.w	80093de <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800929e:	2300      	movs	r3, #0
 80092a0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80092a2:	4b47      	ldr	r3, [pc, #284]	; (80093c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80092a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d101      	bne.n	80092b2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80092ae:	2301      	movs	r3, #1
 80092b0:	e000      	b.n	80092b4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80092b2:	2300      	movs	r3, #0
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d00d      	beq.n	80092d4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80092b8:	4b41      	ldr	r3, [pc, #260]	; (80093c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80092ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092bc:	4a40      	ldr	r2, [pc, #256]	; (80093c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80092be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80092c2:	6593      	str	r3, [r2, #88]	; 0x58
 80092c4:	4b3e      	ldr	r3, [pc, #248]	; (80093c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80092c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80092cc:	60bb      	str	r3, [r7, #8]
 80092ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80092d0:	2301      	movs	r3, #1
 80092d2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80092d4:	4b3b      	ldr	r3, [pc, #236]	; (80093c4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	4a3a      	ldr	r2, [pc, #232]	; (80093c4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80092da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80092de:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80092e0:	f7fc fe5c 	bl	8005f9c <HAL_GetTick>
 80092e4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80092e6:	e009      	b.n	80092fc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80092e8:	f7fc fe58 	bl	8005f9c <HAL_GetTick>
 80092ec:	4602      	mov	r2, r0
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	1ad3      	subs	r3, r2, r3
 80092f2:	2b02      	cmp	r3, #2
 80092f4:	d902      	bls.n	80092fc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80092f6:	2303      	movs	r3, #3
 80092f8:	74fb      	strb	r3, [r7, #19]
        break;
 80092fa:	e005      	b.n	8009308 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80092fc:	4b31      	ldr	r3, [pc, #196]	; (80093c4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009304:	2b00      	cmp	r3, #0
 8009306:	d0ef      	beq.n	80092e8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8009308:	7cfb      	ldrb	r3, [r7, #19]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d15c      	bne.n	80093c8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800930e:	4b2c      	ldr	r3, [pc, #176]	; (80093c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009310:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009314:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009318:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800931a:	697b      	ldr	r3, [r7, #20]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d01f      	beq.n	8009360 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009326:	697a      	ldr	r2, [r7, #20]
 8009328:	429a      	cmp	r2, r3
 800932a:	d019      	beq.n	8009360 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800932c:	4b24      	ldr	r3, [pc, #144]	; (80093c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800932e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009332:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009336:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009338:	4b21      	ldr	r3, [pc, #132]	; (80093c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800933a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800933e:	4a20      	ldr	r2, [pc, #128]	; (80093c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009340:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009344:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009348:	4b1d      	ldr	r3, [pc, #116]	; (80093c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800934a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800934e:	4a1c      	ldr	r2, [pc, #112]	; (80093c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009350:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009354:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009358:	4a19      	ldr	r2, [pc, #100]	; (80093c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800935a:	697b      	ldr	r3, [r7, #20]
 800935c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009360:	697b      	ldr	r3, [r7, #20]
 8009362:	f003 0301 	and.w	r3, r3, #1
 8009366:	2b00      	cmp	r3, #0
 8009368:	d016      	beq.n	8009398 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800936a:	f7fc fe17 	bl	8005f9c <HAL_GetTick>
 800936e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009370:	e00b      	b.n	800938a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009372:	f7fc fe13 	bl	8005f9c <HAL_GetTick>
 8009376:	4602      	mov	r2, r0
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	1ad3      	subs	r3, r2, r3
 800937c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009380:	4293      	cmp	r3, r2
 8009382:	d902      	bls.n	800938a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8009384:	2303      	movs	r3, #3
 8009386:	74fb      	strb	r3, [r7, #19]
            break;
 8009388:	e006      	b.n	8009398 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800938a:	4b0d      	ldr	r3, [pc, #52]	; (80093c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800938c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009390:	f003 0302 	and.w	r3, r3, #2
 8009394:	2b00      	cmp	r3, #0
 8009396:	d0ec      	beq.n	8009372 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8009398:	7cfb      	ldrb	r3, [r7, #19]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d10c      	bne.n	80093b8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800939e:	4b08      	ldr	r3, [pc, #32]	; (80093c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80093a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80093ae:	4904      	ldr	r1, [pc, #16]	; (80093c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80093b0:	4313      	orrs	r3, r2
 80093b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80093b6:	e009      	b.n	80093cc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80093b8:	7cfb      	ldrb	r3, [r7, #19]
 80093ba:	74bb      	strb	r3, [r7, #18]
 80093bc:	e006      	b.n	80093cc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80093be:	bf00      	nop
 80093c0:	40021000 	.word	0x40021000
 80093c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093c8:	7cfb      	ldrb	r3, [r7, #19]
 80093ca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80093cc:	7c7b      	ldrb	r3, [r7, #17]
 80093ce:	2b01      	cmp	r3, #1
 80093d0:	d105      	bne.n	80093de <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80093d2:	4b9e      	ldr	r3, [pc, #632]	; (800964c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80093d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093d6:	4a9d      	ldr	r2, [pc, #628]	; (800964c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80093d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80093dc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	f003 0301 	and.w	r3, r3, #1
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d00a      	beq.n	8009400 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80093ea:	4b98      	ldr	r3, [pc, #608]	; (800964c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80093ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093f0:	f023 0203 	bic.w	r2, r3, #3
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093f8:	4994      	ldr	r1, [pc, #592]	; (800964c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80093fa:	4313      	orrs	r3, r2
 80093fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f003 0302 	and.w	r3, r3, #2
 8009408:	2b00      	cmp	r3, #0
 800940a:	d00a      	beq.n	8009422 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800940c:	4b8f      	ldr	r3, [pc, #572]	; (800964c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800940e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009412:	f023 020c 	bic.w	r2, r3, #12
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800941a:	498c      	ldr	r1, [pc, #560]	; (800964c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800941c:	4313      	orrs	r3, r2
 800941e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f003 0304 	and.w	r3, r3, #4
 800942a:	2b00      	cmp	r3, #0
 800942c:	d00a      	beq.n	8009444 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800942e:	4b87      	ldr	r3, [pc, #540]	; (800964c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009430:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009434:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800943c:	4983      	ldr	r1, [pc, #524]	; (800964c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800943e:	4313      	orrs	r3, r2
 8009440:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	f003 0308 	and.w	r3, r3, #8
 800944c:	2b00      	cmp	r3, #0
 800944e:	d00a      	beq.n	8009466 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009450:	4b7e      	ldr	r3, [pc, #504]	; (800964c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009456:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800945e:	497b      	ldr	r1, [pc, #492]	; (800964c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009460:	4313      	orrs	r3, r2
 8009462:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	f003 0310 	and.w	r3, r3, #16
 800946e:	2b00      	cmp	r3, #0
 8009470:	d00a      	beq.n	8009488 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009472:	4b76      	ldr	r3, [pc, #472]	; (800964c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009474:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009478:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009480:	4972      	ldr	r1, [pc, #456]	; (800964c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009482:	4313      	orrs	r3, r2
 8009484:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	f003 0320 	and.w	r3, r3, #32
 8009490:	2b00      	cmp	r3, #0
 8009492:	d00a      	beq.n	80094aa <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009494:	4b6d      	ldr	r3, [pc, #436]	; (800964c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009496:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800949a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80094a2:	496a      	ldr	r1, [pc, #424]	; (800964c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80094a4:	4313      	orrs	r3, r2
 80094a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d00a      	beq.n	80094cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80094b6:	4b65      	ldr	r3, [pc, #404]	; (800964c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80094b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094bc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094c4:	4961      	ldr	r1, [pc, #388]	; (800964c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80094c6:	4313      	orrs	r3, r2
 80094c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d00a      	beq.n	80094ee <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80094d8:	4b5c      	ldr	r3, [pc, #368]	; (800964c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80094da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094de:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80094e6:	4959      	ldr	r1, [pc, #356]	; (800964c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80094e8:	4313      	orrs	r3, r2
 80094ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d00a      	beq.n	8009510 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80094fa:	4b54      	ldr	r3, [pc, #336]	; (800964c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80094fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009500:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009508:	4950      	ldr	r1, [pc, #320]	; (800964c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800950a:	4313      	orrs	r3, r2
 800950c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009518:	2b00      	cmp	r3, #0
 800951a:	d00a      	beq.n	8009532 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800951c:	4b4b      	ldr	r3, [pc, #300]	; (800964c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800951e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009522:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800952a:	4948      	ldr	r1, [pc, #288]	; (800964c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800952c:	4313      	orrs	r3, r2
 800952e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800953a:	2b00      	cmp	r3, #0
 800953c:	d00a      	beq.n	8009554 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800953e:	4b43      	ldr	r3, [pc, #268]	; (800964c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009540:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009544:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800954c:	493f      	ldr	r1, [pc, #252]	; (800964c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800954e:	4313      	orrs	r3, r2
 8009550:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800955c:	2b00      	cmp	r3, #0
 800955e:	d028      	beq.n	80095b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009560:	4b3a      	ldr	r3, [pc, #232]	; (800964c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009562:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009566:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800956e:	4937      	ldr	r1, [pc, #220]	; (800964c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009570:	4313      	orrs	r3, r2
 8009572:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800957a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800957e:	d106      	bne.n	800958e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009580:	4b32      	ldr	r3, [pc, #200]	; (800964c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009582:	68db      	ldr	r3, [r3, #12]
 8009584:	4a31      	ldr	r2, [pc, #196]	; (800964c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009586:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800958a:	60d3      	str	r3, [r2, #12]
 800958c:	e011      	b.n	80095b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009592:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009596:	d10c      	bne.n	80095b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	3304      	adds	r3, #4
 800959c:	2101      	movs	r1, #1
 800959e:	4618      	mov	r0, r3
 80095a0:	f000 f8c8 	bl	8009734 <RCCEx_PLLSAI1_Config>
 80095a4:	4603      	mov	r3, r0
 80095a6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80095a8:	7cfb      	ldrb	r3, [r7, #19]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d001      	beq.n	80095b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80095ae:	7cfb      	ldrb	r3, [r7, #19]
 80095b0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d028      	beq.n	8009610 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80095be:	4b23      	ldr	r3, [pc, #140]	; (800964c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80095c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095c4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095cc:	491f      	ldr	r1, [pc, #124]	; (800964c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80095ce:	4313      	orrs	r3, r2
 80095d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80095dc:	d106      	bne.n	80095ec <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80095de:	4b1b      	ldr	r3, [pc, #108]	; (800964c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80095e0:	68db      	ldr	r3, [r3, #12]
 80095e2:	4a1a      	ldr	r2, [pc, #104]	; (800964c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80095e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80095e8:	60d3      	str	r3, [r2, #12]
 80095ea:	e011      	b.n	8009610 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80095f4:	d10c      	bne.n	8009610 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	3304      	adds	r3, #4
 80095fa:	2101      	movs	r1, #1
 80095fc:	4618      	mov	r0, r3
 80095fe:	f000 f899 	bl	8009734 <RCCEx_PLLSAI1_Config>
 8009602:	4603      	mov	r3, r0
 8009604:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009606:	7cfb      	ldrb	r3, [r7, #19]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d001      	beq.n	8009610 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800960c:	7cfb      	ldrb	r3, [r7, #19]
 800960e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009618:	2b00      	cmp	r3, #0
 800961a:	d02b      	beq.n	8009674 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800961c:	4b0b      	ldr	r3, [pc, #44]	; (800964c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800961e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009622:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800962a:	4908      	ldr	r1, [pc, #32]	; (800964c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800962c:	4313      	orrs	r3, r2
 800962e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009636:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800963a:	d109      	bne.n	8009650 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800963c:	4b03      	ldr	r3, [pc, #12]	; (800964c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800963e:	68db      	ldr	r3, [r3, #12]
 8009640:	4a02      	ldr	r2, [pc, #8]	; (800964c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009642:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009646:	60d3      	str	r3, [r2, #12]
 8009648:	e014      	b.n	8009674 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800964a:	bf00      	nop
 800964c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009654:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009658:	d10c      	bne.n	8009674 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	3304      	adds	r3, #4
 800965e:	2101      	movs	r1, #1
 8009660:	4618      	mov	r0, r3
 8009662:	f000 f867 	bl	8009734 <RCCEx_PLLSAI1_Config>
 8009666:	4603      	mov	r3, r0
 8009668:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800966a:	7cfb      	ldrb	r3, [r7, #19]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d001      	beq.n	8009674 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8009670:	7cfb      	ldrb	r3, [r7, #19]
 8009672:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800967c:	2b00      	cmp	r3, #0
 800967e:	d02f      	beq.n	80096e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009680:	4b2b      	ldr	r3, [pc, #172]	; (8009730 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8009682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009686:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800968e:	4928      	ldr	r1, [pc, #160]	; (8009730 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8009690:	4313      	orrs	r3, r2
 8009692:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800969a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800969e:	d10d      	bne.n	80096bc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	3304      	adds	r3, #4
 80096a4:	2102      	movs	r1, #2
 80096a6:	4618      	mov	r0, r3
 80096a8:	f000 f844 	bl	8009734 <RCCEx_PLLSAI1_Config>
 80096ac:	4603      	mov	r3, r0
 80096ae:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80096b0:	7cfb      	ldrb	r3, [r7, #19]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d014      	beq.n	80096e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80096b6:	7cfb      	ldrb	r3, [r7, #19]
 80096b8:	74bb      	strb	r3, [r7, #18]
 80096ba:	e011      	b.n	80096e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80096c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80096c4:	d10c      	bne.n	80096e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	3320      	adds	r3, #32
 80096ca:	2102      	movs	r1, #2
 80096cc:	4618      	mov	r0, r3
 80096ce:	f000 f925 	bl	800991c <RCCEx_PLLSAI2_Config>
 80096d2:	4603      	mov	r3, r0
 80096d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80096d6:	7cfb      	ldrb	r3, [r7, #19]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d001      	beq.n	80096e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80096dc:	7cfb      	ldrb	r3, [r7, #19]
 80096de:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d00a      	beq.n	8009702 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80096ec:	4b10      	ldr	r3, [pc, #64]	; (8009730 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80096ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096f2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80096fa:	490d      	ldr	r1, [pc, #52]	; (8009730 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80096fc:	4313      	orrs	r3, r2
 80096fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800970a:	2b00      	cmp	r3, #0
 800970c:	d00b      	beq.n	8009726 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800970e:	4b08      	ldr	r3, [pc, #32]	; (8009730 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8009710:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009714:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800971e:	4904      	ldr	r1, [pc, #16]	; (8009730 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8009720:	4313      	orrs	r3, r2
 8009722:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8009726:	7cbb      	ldrb	r3, [r7, #18]
}
 8009728:	4618      	mov	r0, r3
 800972a:	3718      	adds	r7, #24
 800972c:	46bd      	mov	sp, r7
 800972e:	bd80      	pop	{r7, pc}
 8009730:	40021000 	.word	0x40021000

08009734 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b084      	sub	sp, #16
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
 800973c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800973e:	2300      	movs	r3, #0
 8009740:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8009742:	4b75      	ldr	r3, [pc, #468]	; (8009918 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009744:	68db      	ldr	r3, [r3, #12]
 8009746:	f003 0303 	and.w	r3, r3, #3
 800974a:	2b00      	cmp	r3, #0
 800974c:	d018      	beq.n	8009780 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800974e:	4b72      	ldr	r3, [pc, #456]	; (8009918 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009750:	68db      	ldr	r3, [r3, #12]
 8009752:	f003 0203 	and.w	r2, r3, #3
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	429a      	cmp	r2, r3
 800975c:	d10d      	bne.n	800977a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
       ||
 8009762:	2b00      	cmp	r3, #0
 8009764:	d009      	beq.n	800977a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8009766:	4b6c      	ldr	r3, [pc, #432]	; (8009918 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009768:	68db      	ldr	r3, [r3, #12]
 800976a:	091b      	lsrs	r3, r3, #4
 800976c:	f003 0307 	and.w	r3, r3, #7
 8009770:	1c5a      	adds	r2, r3, #1
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	685b      	ldr	r3, [r3, #4]
       ||
 8009776:	429a      	cmp	r2, r3
 8009778:	d047      	beq.n	800980a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800977a:	2301      	movs	r3, #1
 800977c:	73fb      	strb	r3, [r7, #15]
 800977e:	e044      	b.n	800980a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	2b03      	cmp	r3, #3
 8009786:	d018      	beq.n	80097ba <RCCEx_PLLSAI1_Config+0x86>
 8009788:	2b03      	cmp	r3, #3
 800978a:	d825      	bhi.n	80097d8 <RCCEx_PLLSAI1_Config+0xa4>
 800978c:	2b01      	cmp	r3, #1
 800978e:	d002      	beq.n	8009796 <RCCEx_PLLSAI1_Config+0x62>
 8009790:	2b02      	cmp	r3, #2
 8009792:	d009      	beq.n	80097a8 <RCCEx_PLLSAI1_Config+0x74>
 8009794:	e020      	b.n	80097d8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8009796:	4b60      	ldr	r3, [pc, #384]	; (8009918 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	f003 0302 	and.w	r3, r3, #2
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d11d      	bne.n	80097de <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80097a2:	2301      	movs	r3, #1
 80097a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80097a6:	e01a      	b.n	80097de <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80097a8:	4b5b      	ldr	r3, [pc, #364]	; (8009918 <RCCEx_PLLSAI1_Config+0x1e4>)
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d116      	bne.n	80097e2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80097b4:	2301      	movs	r3, #1
 80097b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80097b8:	e013      	b.n	80097e2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80097ba:	4b57      	ldr	r3, [pc, #348]	; (8009918 <RCCEx_PLLSAI1_Config+0x1e4>)
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d10f      	bne.n	80097e6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80097c6:	4b54      	ldr	r3, [pc, #336]	; (8009918 <RCCEx_PLLSAI1_Config+0x1e4>)
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d109      	bne.n	80097e6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80097d2:	2301      	movs	r3, #1
 80097d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80097d6:	e006      	b.n	80097e6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80097d8:	2301      	movs	r3, #1
 80097da:	73fb      	strb	r3, [r7, #15]
      break;
 80097dc:	e004      	b.n	80097e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80097de:	bf00      	nop
 80097e0:	e002      	b.n	80097e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80097e2:	bf00      	nop
 80097e4:	e000      	b.n	80097e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80097e6:	bf00      	nop
    }

    if(status == HAL_OK)
 80097e8:	7bfb      	ldrb	r3, [r7, #15]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d10d      	bne.n	800980a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80097ee:	4b4a      	ldr	r3, [pc, #296]	; (8009918 <RCCEx_PLLSAI1_Config+0x1e4>)
 80097f0:	68db      	ldr	r3, [r3, #12]
 80097f2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	6819      	ldr	r1, [r3, #0]
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	685b      	ldr	r3, [r3, #4]
 80097fe:	3b01      	subs	r3, #1
 8009800:	011b      	lsls	r3, r3, #4
 8009802:	430b      	orrs	r3, r1
 8009804:	4944      	ldr	r1, [pc, #272]	; (8009918 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009806:	4313      	orrs	r3, r2
 8009808:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800980a:	7bfb      	ldrb	r3, [r7, #15]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d17d      	bne.n	800990c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8009810:	4b41      	ldr	r3, [pc, #260]	; (8009918 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	4a40      	ldr	r2, [pc, #256]	; (8009918 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009816:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800981a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800981c:	f7fc fbbe 	bl	8005f9c <HAL_GetTick>
 8009820:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8009822:	e009      	b.n	8009838 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009824:	f7fc fbba 	bl	8005f9c <HAL_GetTick>
 8009828:	4602      	mov	r2, r0
 800982a:	68bb      	ldr	r3, [r7, #8]
 800982c:	1ad3      	subs	r3, r2, r3
 800982e:	2b02      	cmp	r3, #2
 8009830:	d902      	bls.n	8009838 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8009832:	2303      	movs	r3, #3
 8009834:	73fb      	strb	r3, [r7, #15]
        break;
 8009836:	e005      	b.n	8009844 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8009838:	4b37      	ldr	r3, [pc, #220]	; (8009918 <RCCEx_PLLSAI1_Config+0x1e4>)
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009840:	2b00      	cmp	r3, #0
 8009842:	d1ef      	bne.n	8009824 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8009844:	7bfb      	ldrb	r3, [r7, #15]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d160      	bne.n	800990c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800984a:	683b      	ldr	r3, [r7, #0]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d111      	bne.n	8009874 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009850:	4b31      	ldr	r3, [pc, #196]	; (8009918 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009852:	691b      	ldr	r3, [r3, #16]
 8009854:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8009858:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800985c:	687a      	ldr	r2, [r7, #4]
 800985e:	6892      	ldr	r2, [r2, #8]
 8009860:	0211      	lsls	r1, r2, #8
 8009862:	687a      	ldr	r2, [r7, #4]
 8009864:	68d2      	ldr	r2, [r2, #12]
 8009866:	0912      	lsrs	r2, r2, #4
 8009868:	0452      	lsls	r2, r2, #17
 800986a:	430a      	orrs	r2, r1
 800986c:	492a      	ldr	r1, [pc, #168]	; (8009918 <RCCEx_PLLSAI1_Config+0x1e4>)
 800986e:	4313      	orrs	r3, r2
 8009870:	610b      	str	r3, [r1, #16]
 8009872:	e027      	b.n	80098c4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	2b01      	cmp	r3, #1
 8009878:	d112      	bne.n	80098a0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800987a:	4b27      	ldr	r3, [pc, #156]	; (8009918 <RCCEx_PLLSAI1_Config+0x1e4>)
 800987c:	691b      	ldr	r3, [r3, #16]
 800987e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8009882:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8009886:	687a      	ldr	r2, [r7, #4]
 8009888:	6892      	ldr	r2, [r2, #8]
 800988a:	0211      	lsls	r1, r2, #8
 800988c:	687a      	ldr	r2, [r7, #4]
 800988e:	6912      	ldr	r2, [r2, #16]
 8009890:	0852      	lsrs	r2, r2, #1
 8009892:	3a01      	subs	r2, #1
 8009894:	0552      	lsls	r2, r2, #21
 8009896:	430a      	orrs	r2, r1
 8009898:	491f      	ldr	r1, [pc, #124]	; (8009918 <RCCEx_PLLSAI1_Config+0x1e4>)
 800989a:	4313      	orrs	r3, r2
 800989c:	610b      	str	r3, [r1, #16]
 800989e:	e011      	b.n	80098c4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80098a0:	4b1d      	ldr	r3, [pc, #116]	; (8009918 <RCCEx_PLLSAI1_Config+0x1e4>)
 80098a2:	691b      	ldr	r3, [r3, #16]
 80098a4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80098a8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80098ac:	687a      	ldr	r2, [r7, #4]
 80098ae:	6892      	ldr	r2, [r2, #8]
 80098b0:	0211      	lsls	r1, r2, #8
 80098b2:	687a      	ldr	r2, [r7, #4]
 80098b4:	6952      	ldr	r2, [r2, #20]
 80098b6:	0852      	lsrs	r2, r2, #1
 80098b8:	3a01      	subs	r2, #1
 80098ba:	0652      	lsls	r2, r2, #25
 80098bc:	430a      	orrs	r2, r1
 80098be:	4916      	ldr	r1, [pc, #88]	; (8009918 <RCCEx_PLLSAI1_Config+0x1e4>)
 80098c0:	4313      	orrs	r3, r2
 80098c2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80098c4:	4b14      	ldr	r3, [pc, #80]	; (8009918 <RCCEx_PLLSAI1_Config+0x1e4>)
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	4a13      	ldr	r2, [pc, #76]	; (8009918 <RCCEx_PLLSAI1_Config+0x1e4>)
 80098ca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80098ce:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80098d0:	f7fc fb64 	bl	8005f9c <HAL_GetTick>
 80098d4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80098d6:	e009      	b.n	80098ec <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80098d8:	f7fc fb60 	bl	8005f9c <HAL_GetTick>
 80098dc:	4602      	mov	r2, r0
 80098de:	68bb      	ldr	r3, [r7, #8]
 80098e0:	1ad3      	subs	r3, r2, r3
 80098e2:	2b02      	cmp	r3, #2
 80098e4:	d902      	bls.n	80098ec <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80098e6:	2303      	movs	r3, #3
 80098e8:	73fb      	strb	r3, [r7, #15]
          break;
 80098ea:	e005      	b.n	80098f8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80098ec:	4b0a      	ldr	r3, [pc, #40]	; (8009918 <RCCEx_PLLSAI1_Config+0x1e4>)
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d0ef      	beq.n	80098d8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80098f8:	7bfb      	ldrb	r3, [r7, #15]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d106      	bne.n	800990c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80098fe:	4b06      	ldr	r3, [pc, #24]	; (8009918 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009900:	691a      	ldr	r2, [r3, #16]
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	699b      	ldr	r3, [r3, #24]
 8009906:	4904      	ldr	r1, [pc, #16]	; (8009918 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009908:	4313      	orrs	r3, r2
 800990a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800990c:	7bfb      	ldrb	r3, [r7, #15]
}
 800990e:	4618      	mov	r0, r3
 8009910:	3710      	adds	r7, #16
 8009912:	46bd      	mov	sp, r7
 8009914:	bd80      	pop	{r7, pc}
 8009916:	bf00      	nop
 8009918:	40021000 	.word	0x40021000

0800991c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b084      	sub	sp, #16
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
 8009924:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009926:	2300      	movs	r3, #0
 8009928:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800992a:	4b6a      	ldr	r3, [pc, #424]	; (8009ad4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800992c:	68db      	ldr	r3, [r3, #12]
 800992e:	f003 0303 	and.w	r3, r3, #3
 8009932:	2b00      	cmp	r3, #0
 8009934:	d018      	beq.n	8009968 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8009936:	4b67      	ldr	r3, [pc, #412]	; (8009ad4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009938:	68db      	ldr	r3, [r3, #12]
 800993a:	f003 0203 	and.w	r2, r3, #3
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	429a      	cmp	r2, r3
 8009944:	d10d      	bne.n	8009962 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
       ||
 800994a:	2b00      	cmp	r3, #0
 800994c:	d009      	beq.n	8009962 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800994e:	4b61      	ldr	r3, [pc, #388]	; (8009ad4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009950:	68db      	ldr	r3, [r3, #12]
 8009952:	091b      	lsrs	r3, r3, #4
 8009954:	f003 0307 	and.w	r3, r3, #7
 8009958:	1c5a      	adds	r2, r3, #1
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	685b      	ldr	r3, [r3, #4]
       ||
 800995e:	429a      	cmp	r2, r3
 8009960:	d047      	beq.n	80099f2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8009962:	2301      	movs	r3, #1
 8009964:	73fb      	strb	r3, [r7, #15]
 8009966:	e044      	b.n	80099f2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	2b03      	cmp	r3, #3
 800996e:	d018      	beq.n	80099a2 <RCCEx_PLLSAI2_Config+0x86>
 8009970:	2b03      	cmp	r3, #3
 8009972:	d825      	bhi.n	80099c0 <RCCEx_PLLSAI2_Config+0xa4>
 8009974:	2b01      	cmp	r3, #1
 8009976:	d002      	beq.n	800997e <RCCEx_PLLSAI2_Config+0x62>
 8009978:	2b02      	cmp	r3, #2
 800997a:	d009      	beq.n	8009990 <RCCEx_PLLSAI2_Config+0x74>
 800997c:	e020      	b.n	80099c0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800997e:	4b55      	ldr	r3, [pc, #340]	; (8009ad4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	f003 0302 	and.w	r3, r3, #2
 8009986:	2b00      	cmp	r3, #0
 8009988:	d11d      	bne.n	80099c6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800998a:	2301      	movs	r3, #1
 800998c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800998e:	e01a      	b.n	80099c6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8009990:	4b50      	ldr	r3, [pc, #320]	; (8009ad4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009998:	2b00      	cmp	r3, #0
 800999a:	d116      	bne.n	80099ca <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800999c:	2301      	movs	r3, #1
 800999e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80099a0:	e013      	b.n	80099ca <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80099a2:	4b4c      	ldr	r3, [pc, #304]	; (8009ad4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d10f      	bne.n	80099ce <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80099ae:	4b49      	ldr	r3, [pc, #292]	; (8009ad4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d109      	bne.n	80099ce <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80099ba:	2301      	movs	r3, #1
 80099bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80099be:	e006      	b.n	80099ce <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80099c0:	2301      	movs	r3, #1
 80099c2:	73fb      	strb	r3, [r7, #15]
      break;
 80099c4:	e004      	b.n	80099d0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80099c6:	bf00      	nop
 80099c8:	e002      	b.n	80099d0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80099ca:	bf00      	nop
 80099cc:	e000      	b.n	80099d0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80099ce:	bf00      	nop
    }

    if(status == HAL_OK)
 80099d0:	7bfb      	ldrb	r3, [r7, #15]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d10d      	bne.n	80099f2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80099d6:	4b3f      	ldr	r3, [pc, #252]	; (8009ad4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80099d8:	68db      	ldr	r3, [r3, #12]
 80099da:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	6819      	ldr	r1, [r3, #0]
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	685b      	ldr	r3, [r3, #4]
 80099e6:	3b01      	subs	r3, #1
 80099e8:	011b      	lsls	r3, r3, #4
 80099ea:	430b      	orrs	r3, r1
 80099ec:	4939      	ldr	r1, [pc, #228]	; (8009ad4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80099ee:	4313      	orrs	r3, r2
 80099f0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80099f2:	7bfb      	ldrb	r3, [r7, #15]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d167      	bne.n	8009ac8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80099f8:	4b36      	ldr	r3, [pc, #216]	; (8009ad4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	4a35      	ldr	r2, [pc, #212]	; (8009ad4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80099fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009a02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a04:	f7fc faca 	bl	8005f9c <HAL_GetTick>
 8009a08:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8009a0a:	e009      	b.n	8009a20 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8009a0c:	f7fc fac6 	bl	8005f9c <HAL_GetTick>
 8009a10:	4602      	mov	r2, r0
 8009a12:	68bb      	ldr	r3, [r7, #8]
 8009a14:	1ad3      	subs	r3, r2, r3
 8009a16:	2b02      	cmp	r3, #2
 8009a18:	d902      	bls.n	8009a20 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8009a1a:	2303      	movs	r3, #3
 8009a1c:	73fb      	strb	r3, [r7, #15]
        break;
 8009a1e:	e005      	b.n	8009a2c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8009a20:	4b2c      	ldr	r3, [pc, #176]	; (8009ad4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d1ef      	bne.n	8009a0c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8009a2c:	7bfb      	ldrb	r3, [r7, #15]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d14a      	bne.n	8009ac8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8009a32:	683b      	ldr	r3, [r7, #0]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d111      	bne.n	8009a5c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8009a38:	4b26      	ldr	r3, [pc, #152]	; (8009ad4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009a3a:	695b      	ldr	r3, [r3, #20]
 8009a3c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8009a40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009a44:	687a      	ldr	r2, [r7, #4]
 8009a46:	6892      	ldr	r2, [r2, #8]
 8009a48:	0211      	lsls	r1, r2, #8
 8009a4a:	687a      	ldr	r2, [r7, #4]
 8009a4c:	68d2      	ldr	r2, [r2, #12]
 8009a4e:	0912      	lsrs	r2, r2, #4
 8009a50:	0452      	lsls	r2, r2, #17
 8009a52:	430a      	orrs	r2, r1
 8009a54:	491f      	ldr	r1, [pc, #124]	; (8009ad4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009a56:	4313      	orrs	r3, r2
 8009a58:	614b      	str	r3, [r1, #20]
 8009a5a:	e011      	b.n	8009a80 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8009a5c:	4b1d      	ldr	r3, [pc, #116]	; (8009ad4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009a5e:	695b      	ldr	r3, [r3, #20]
 8009a60:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8009a64:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8009a68:	687a      	ldr	r2, [r7, #4]
 8009a6a:	6892      	ldr	r2, [r2, #8]
 8009a6c:	0211      	lsls	r1, r2, #8
 8009a6e:	687a      	ldr	r2, [r7, #4]
 8009a70:	6912      	ldr	r2, [r2, #16]
 8009a72:	0852      	lsrs	r2, r2, #1
 8009a74:	3a01      	subs	r2, #1
 8009a76:	0652      	lsls	r2, r2, #25
 8009a78:	430a      	orrs	r2, r1
 8009a7a:	4916      	ldr	r1, [pc, #88]	; (8009ad4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009a7c:	4313      	orrs	r3, r2
 8009a7e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8009a80:	4b14      	ldr	r3, [pc, #80]	; (8009ad4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	4a13      	ldr	r2, [pc, #76]	; (8009ad4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009a86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009a8a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009a8c:	f7fc fa86 	bl	8005f9c <HAL_GetTick>
 8009a90:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8009a92:	e009      	b.n	8009aa8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8009a94:	f7fc fa82 	bl	8005f9c <HAL_GetTick>
 8009a98:	4602      	mov	r2, r0
 8009a9a:	68bb      	ldr	r3, [r7, #8]
 8009a9c:	1ad3      	subs	r3, r2, r3
 8009a9e:	2b02      	cmp	r3, #2
 8009aa0:	d902      	bls.n	8009aa8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8009aa2:	2303      	movs	r3, #3
 8009aa4:	73fb      	strb	r3, [r7, #15]
          break;
 8009aa6:	e005      	b.n	8009ab4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8009aa8:	4b0a      	ldr	r3, [pc, #40]	; (8009ad4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d0ef      	beq.n	8009a94 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8009ab4:	7bfb      	ldrb	r3, [r7, #15]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d106      	bne.n	8009ac8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8009aba:	4b06      	ldr	r3, [pc, #24]	; (8009ad4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009abc:	695a      	ldr	r2, [r3, #20]
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	695b      	ldr	r3, [r3, #20]
 8009ac2:	4904      	ldr	r1, [pc, #16]	; (8009ad4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009ac4:	4313      	orrs	r3, r2
 8009ac6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8009ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009aca:	4618      	mov	r0, r3
 8009acc:	3710      	adds	r7, #16
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	bd80      	pop	{r7, pc}
 8009ad2:	bf00      	nop
 8009ad4:	40021000 	.word	0x40021000

08009ad8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b084      	sub	sp, #16
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009ae0:	2301      	movs	r3, #1
 8009ae2:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d06c      	beq.n	8009bc4 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009af0:	b2db      	uxtb	r3, r3
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d106      	bne.n	8009b04 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	2200      	movs	r2, #0
 8009afa:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8009afe:	6878      	ldr	r0, [r7, #4]
 8009b00:	f7fb f8e8 	bl	8004cd4 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2202      	movs	r2, #2
 8009b08:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	22ca      	movs	r2, #202	; 0xca
 8009b12:	625a      	str	r2, [r3, #36]	; 0x24
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	2253      	movs	r2, #83	; 0x53
 8009b1a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8009b1c:	6878      	ldr	r0, [r7, #4]
 8009b1e:	f000 fa49 	bl	8009fb4 <RTC_EnterInitMode>
 8009b22:	4603      	mov	r3, r0
 8009b24:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8009b26:	7bfb      	ldrb	r3, [r7, #15]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d14b      	bne.n	8009bc4 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	689b      	ldr	r3, [r3, #8]
 8009b32:	687a      	ldr	r2, [r7, #4]
 8009b34:	6812      	ldr	r2, [r2, #0]
 8009b36:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009b3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b3e:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	6899      	ldr	r1, [r3, #8]
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	685a      	ldr	r2, [r3, #4]
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	691b      	ldr	r3, [r3, #16]
 8009b4e:	431a      	orrs	r2, r3
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	699b      	ldr	r3, [r3, #24]
 8009b54:	431a      	orrs	r2, r3
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	430a      	orrs	r2, r1
 8009b5c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	687a      	ldr	r2, [r7, #4]
 8009b64:	68d2      	ldr	r2, [r2, #12]
 8009b66:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	6919      	ldr	r1, [r3, #16]
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	689b      	ldr	r3, [r3, #8]
 8009b72:	041a      	lsls	r2, r3, #16
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	430a      	orrs	r2, r1
 8009b7a:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8009b7c:	6878      	ldr	r0, [r7, #4]
 8009b7e:	f000 fa4d 	bl	800a01c <RTC_ExitInitMode>
 8009b82:	4603      	mov	r3, r0
 8009b84:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8009b86:	7bfb      	ldrb	r3, [r7, #15]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d11b      	bne.n	8009bc4 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	f022 0203 	bic.w	r2, r2, #3
 8009b9a:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	69da      	ldr	r2, [r3, #28]
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	695b      	ldr	r3, [r3, #20]
 8009baa:	431a      	orrs	r2, r3
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	430a      	orrs	r2, r1
 8009bb2:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	22ff      	movs	r2, #255	; 0xff
 8009bba:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	2201      	movs	r2, #1
 8009bc0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8009bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	3710      	adds	r7, #16
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	bd80      	pop	{r7, pc}

08009bce <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009bce:	b590      	push	{r4, r7, lr}
 8009bd0:	b087      	sub	sp, #28
 8009bd2:	af00      	add	r7, sp, #0
 8009bd4:	60f8      	str	r0, [r7, #12]
 8009bd6:	60b9      	str	r1, [r7, #8]
 8009bd8:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009be0:	2b01      	cmp	r3, #1
 8009be2:	d101      	bne.n	8009be8 <HAL_RTC_SetTime+0x1a>
 8009be4:	2302      	movs	r3, #2
 8009be6:	e08b      	b.n	8009d00 <HAL_RTC_SetTime+0x132>
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	2201      	movs	r2, #1
 8009bec:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	2202      	movs	r2, #2
 8009bf4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	22ca      	movs	r2, #202	; 0xca
 8009bfe:	625a      	str	r2, [r3, #36]	; 0x24
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	2253      	movs	r2, #83	; 0x53
 8009c06:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009c08:	68f8      	ldr	r0, [r7, #12]
 8009c0a:	f000 f9d3 	bl	8009fb4 <RTC_EnterInitMode>
 8009c0e:	4603      	mov	r3, r0
 8009c10:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8009c12:	7cfb      	ldrb	r3, [r7, #19]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d163      	bne.n	8009ce0 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d126      	bne.n	8009c6c <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	689b      	ldr	r3, [r3, #8]
 8009c24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d102      	bne.n	8009c32 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8009c2c:	68bb      	ldr	r3, [r7, #8]
 8009c2e:	2200      	movs	r2, #0
 8009c30:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8009c32:	68bb      	ldr	r3, [r7, #8]
 8009c34:	781b      	ldrb	r3, [r3, #0]
 8009c36:	4618      	mov	r0, r3
 8009c38:	f000 fa2e 	bl	800a098 <RTC_ByteToBcd2>
 8009c3c:	4603      	mov	r3, r0
 8009c3e:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009c40:	68bb      	ldr	r3, [r7, #8]
 8009c42:	785b      	ldrb	r3, [r3, #1]
 8009c44:	4618      	mov	r0, r3
 8009c46:	f000 fa27 	bl	800a098 <RTC_ByteToBcd2>
 8009c4a:	4603      	mov	r3, r0
 8009c4c:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8009c4e:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8009c50:	68bb      	ldr	r3, [r7, #8]
 8009c52:	789b      	ldrb	r3, [r3, #2]
 8009c54:	4618      	mov	r0, r3
 8009c56:	f000 fa1f 	bl	800a098 <RTC_ByteToBcd2>
 8009c5a:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009c5c:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8009c60:	68bb      	ldr	r3, [r7, #8]
 8009c62:	78db      	ldrb	r3, [r3, #3]
 8009c64:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8009c66:	4313      	orrs	r3, r2
 8009c68:	617b      	str	r3, [r7, #20]
 8009c6a:	e018      	b.n	8009c9e <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	689b      	ldr	r3, [r3, #8]
 8009c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d102      	bne.n	8009c80 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8009c7a:	68bb      	ldr	r3, [r7, #8]
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8009c80:	68bb      	ldr	r3, [r7, #8]
 8009c82:	781b      	ldrb	r3, [r3, #0]
 8009c84:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009c86:	68bb      	ldr	r3, [r7, #8]
 8009c88:	785b      	ldrb	r3, [r3, #1]
 8009c8a:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8009c8c:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8009c8e:	68ba      	ldr	r2, [r7, #8]
 8009c90:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009c92:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8009c94:	68bb      	ldr	r3, [r7, #8]
 8009c96:	78db      	ldrb	r3, [r3, #3]
 8009c98:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8009c9a:	4313      	orrs	r3, r2
 8009c9c:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	681a      	ldr	r2, [r3, #0]
 8009ca2:	697b      	ldr	r3, [r7, #20]
 8009ca4:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8009ca8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8009cac:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	689a      	ldr	r2, [r3, #8]
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009cbc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	6899      	ldr	r1, [r3, #8]
 8009cc4:	68bb      	ldr	r3, [r7, #8]
 8009cc6:	68da      	ldr	r2, [r3, #12]
 8009cc8:	68bb      	ldr	r3, [r7, #8]
 8009cca:	691b      	ldr	r3, [r3, #16]
 8009ccc:	431a      	orrs	r2, r3
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	430a      	orrs	r2, r1
 8009cd4:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009cd6:	68f8      	ldr	r0, [r7, #12]
 8009cd8:	f000 f9a0 	bl	800a01c <RTC_ExitInitMode>
 8009cdc:	4603      	mov	r3, r0
 8009cde:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	22ff      	movs	r2, #255	; 0xff
 8009ce6:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8009ce8:	7cfb      	ldrb	r3, [r7, #19]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d103      	bne.n	8009cf6 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	2201      	movs	r2, #1
 8009cf2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8009cfe:	7cfb      	ldrb	r3, [r7, #19]
}
 8009d00:	4618      	mov	r0, r3
 8009d02:	371c      	adds	r7, #28
 8009d04:	46bd      	mov	sp, r7
 8009d06:	bd90      	pop	{r4, r7, pc}

08009d08 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b086      	sub	sp, #24
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	60f8      	str	r0, [r7, #12]
 8009d10:	60b9      	str	r1, [r7, #8]
 8009d12:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009d1a:	68bb      	ldr	r3, [r7, #8]
 8009d1c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	691b      	ldr	r3, [r3, #16]
 8009d24:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8009d28:	68bb      	ldr	r3, [r7, #8]
 8009d2a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8009d36:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8009d3a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8009d3c:	697b      	ldr	r3, [r7, #20]
 8009d3e:	0c1b      	lsrs	r3, r3, #16
 8009d40:	b2db      	uxtb	r3, r3
 8009d42:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009d46:	b2da      	uxtb	r2, r3
 8009d48:	68bb      	ldr	r3, [r7, #8]
 8009d4a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8009d4c:	697b      	ldr	r3, [r7, #20]
 8009d4e:	0a1b      	lsrs	r3, r3, #8
 8009d50:	b2db      	uxtb	r3, r3
 8009d52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d56:	b2da      	uxtb	r2, r3
 8009d58:	68bb      	ldr	r3, [r7, #8]
 8009d5a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8009d5c:	697b      	ldr	r3, [r7, #20]
 8009d5e:	b2db      	uxtb	r3, r3
 8009d60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d64:	b2da      	uxtb	r2, r3
 8009d66:	68bb      	ldr	r3, [r7, #8]
 8009d68:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8009d6a:	697b      	ldr	r3, [r7, #20]
 8009d6c:	0d9b      	lsrs	r3, r3, #22
 8009d6e:	b2db      	uxtb	r3, r3
 8009d70:	f003 0301 	and.w	r3, r3, #1
 8009d74:	b2da      	uxtb	r2, r3
 8009d76:	68bb      	ldr	r3, [r7, #8]
 8009d78:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d11a      	bne.n	8009db6 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8009d80:	68bb      	ldr	r3, [r7, #8]
 8009d82:	781b      	ldrb	r3, [r3, #0]
 8009d84:	4618      	mov	r0, r3
 8009d86:	f000 f9a7 	bl	800a0d8 <RTC_Bcd2ToByte>
 8009d8a:	4603      	mov	r3, r0
 8009d8c:	461a      	mov	r2, r3
 8009d8e:	68bb      	ldr	r3, [r7, #8]
 8009d90:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8009d92:	68bb      	ldr	r3, [r7, #8]
 8009d94:	785b      	ldrb	r3, [r3, #1]
 8009d96:	4618      	mov	r0, r3
 8009d98:	f000 f99e 	bl	800a0d8 <RTC_Bcd2ToByte>
 8009d9c:	4603      	mov	r3, r0
 8009d9e:	461a      	mov	r2, r3
 8009da0:	68bb      	ldr	r3, [r7, #8]
 8009da2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8009da4:	68bb      	ldr	r3, [r7, #8]
 8009da6:	789b      	ldrb	r3, [r3, #2]
 8009da8:	4618      	mov	r0, r3
 8009daa:	f000 f995 	bl	800a0d8 <RTC_Bcd2ToByte>
 8009dae:	4603      	mov	r3, r0
 8009db0:	461a      	mov	r2, r3
 8009db2:	68bb      	ldr	r3, [r7, #8]
 8009db4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8009db6:	2300      	movs	r3, #0
}
 8009db8:	4618      	mov	r0, r3
 8009dba:	3718      	adds	r7, #24
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	bd80      	pop	{r7, pc}

08009dc0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009dc0:	b590      	push	{r4, r7, lr}
 8009dc2:	b087      	sub	sp, #28
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	60f8      	str	r0, [r7, #12]
 8009dc8:	60b9      	str	r1, [r7, #8]
 8009dca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009dd2:	2b01      	cmp	r3, #1
 8009dd4:	d101      	bne.n	8009dda <HAL_RTC_SetDate+0x1a>
 8009dd6:	2302      	movs	r3, #2
 8009dd8:	e075      	b.n	8009ec6 <HAL_RTC_SetDate+0x106>
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	2201      	movs	r2, #1
 8009dde:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	2202      	movs	r2, #2
 8009de6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d10e      	bne.n	8009e0e <HAL_RTC_SetDate+0x4e>
 8009df0:	68bb      	ldr	r3, [r7, #8]
 8009df2:	785b      	ldrb	r3, [r3, #1]
 8009df4:	f003 0310 	and.w	r3, r3, #16
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d008      	beq.n	8009e0e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8009dfc:	68bb      	ldr	r3, [r7, #8]
 8009dfe:	785b      	ldrb	r3, [r3, #1]
 8009e00:	f023 0310 	bic.w	r3, r3, #16
 8009e04:	b2db      	uxtb	r3, r3
 8009e06:	330a      	adds	r3, #10
 8009e08:	b2da      	uxtb	r2, r3
 8009e0a:	68bb      	ldr	r3, [r7, #8]
 8009e0c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d11c      	bne.n	8009e4e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8009e14:	68bb      	ldr	r3, [r7, #8]
 8009e16:	78db      	ldrb	r3, [r3, #3]
 8009e18:	4618      	mov	r0, r3
 8009e1a:	f000 f93d 	bl	800a098 <RTC_ByteToBcd2>
 8009e1e:	4603      	mov	r3, r0
 8009e20:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009e22:	68bb      	ldr	r3, [r7, #8]
 8009e24:	785b      	ldrb	r3, [r3, #1]
 8009e26:	4618      	mov	r0, r3
 8009e28:	f000 f936 	bl	800a098 <RTC_ByteToBcd2>
 8009e2c:	4603      	mov	r3, r0
 8009e2e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8009e30:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8009e32:	68bb      	ldr	r3, [r7, #8]
 8009e34:	789b      	ldrb	r3, [r3, #2]
 8009e36:	4618      	mov	r0, r3
 8009e38:	f000 f92e 	bl	800a098 <RTC_ByteToBcd2>
 8009e3c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009e3e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8009e42:	68bb      	ldr	r3, [r7, #8]
 8009e44:	781b      	ldrb	r3, [r3, #0]
 8009e46:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8009e48:	4313      	orrs	r3, r2
 8009e4a:	617b      	str	r3, [r7, #20]
 8009e4c:	e00e      	b.n	8009e6c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8009e4e:	68bb      	ldr	r3, [r7, #8]
 8009e50:	78db      	ldrb	r3, [r3, #3]
 8009e52:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8009e54:	68bb      	ldr	r3, [r7, #8]
 8009e56:	785b      	ldrb	r3, [r3, #1]
 8009e58:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8009e5a:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8009e5c:	68ba      	ldr	r2, [r7, #8]
 8009e5e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8009e60:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8009e62:	68bb      	ldr	r3, [r7, #8]
 8009e64:	781b      	ldrb	r3, [r3, #0]
 8009e66:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8009e68:	4313      	orrs	r3, r2
 8009e6a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	22ca      	movs	r2, #202	; 0xca
 8009e72:	625a      	str	r2, [r3, #36]	; 0x24
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	2253      	movs	r2, #83	; 0x53
 8009e7a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009e7c:	68f8      	ldr	r0, [r7, #12]
 8009e7e:	f000 f899 	bl	8009fb4 <RTC_EnterInitMode>
 8009e82:	4603      	mov	r3, r0
 8009e84:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8009e86:	7cfb      	ldrb	r3, [r7, #19]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d10c      	bne.n	8009ea6 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	681a      	ldr	r2, [r3, #0]
 8009e90:	697b      	ldr	r3, [r7, #20]
 8009e92:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009e96:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009e9a:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009e9c:	68f8      	ldr	r0, [r7, #12]
 8009e9e:	f000 f8bd 	bl	800a01c <RTC_ExitInitMode>
 8009ea2:	4603      	mov	r3, r0
 8009ea4:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	22ff      	movs	r2, #255	; 0xff
 8009eac:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8009eae:	7cfb      	ldrb	r3, [r7, #19]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d103      	bne.n	8009ebc <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	2201      	movs	r2, #1
 8009eb8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8009ec4:	7cfb      	ldrb	r3, [r7, #19]
}
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	371c      	adds	r7, #28
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	bd90      	pop	{r4, r7, pc}

08009ece <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009ece:	b580      	push	{r7, lr}
 8009ed0:	b086      	sub	sp, #24
 8009ed2:	af00      	add	r7, sp, #0
 8009ed4:	60f8      	str	r0, [r7, #12]
 8009ed6:	60b9      	str	r1, [r7, #8]
 8009ed8:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	685b      	ldr	r3, [r3, #4]
 8009ee0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009ee4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009ee8:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8009eea:	697b      	ldr	r3, [r7, #20]
 8009eec:	0c1b      	lsrs	r3, r3, #16
 8009eee:	b2da      	uxtb	r2, r3
 8009ef0:	68bb      	ldr	r3, [r7, #8]
 8009ef2:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8009ef4:	697b      	ldr	r3, [r7, #20]
 8009ef6:	0a1b      	lsrs	r3, r3, #8
 8009ef8:	b2db      	uxtb	r3, r3
 8009efa:	f003 031f 	and.w	r3, r3, #31
 8009efe:	b2da      	uxtb	r2, r3
 8009f00:	68bb      	ldr	r3, [r7, #8]
 8009f02:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8009f04:	697b      	ldr	r3, [r7, #20]
 8009f06:	b2db      	uxtb	r3, r3
 8009f08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009f0c:	b2da      	uxtb	r2, r3
 8009f0e:	68bb      	ldr	r3, [r7, #8]
 8009f10:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8009f12:	697b      	ldr	r3, [r7, #20]
 8009f14:	0b5b      	lsrs	r3, r3, #13
 8009f16:	b2db      	uxtb	r3, r3
 8009f18:	f003 0307 	and.w	r3, r3, #7
 8009f1c:	b2da      	uxtb	r2, r3
 8009f1e:	68bb      	ldr	r3, [r7, #8]
 8009f20:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d11a      	bne.n	8009f5e <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8009f28:	68bb      	ldr	r3, [r7, #8]
 8009f2a:	78db      	ldrb	r3, [r3, #3]
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	f000 f8d3 	bl	800a0d8 <RTC_Bcd2ToByte>
 8009f32:	4603      	mov	r3, r0
 8009f34:	461a      	mov	r2, r3
 8009f36:	68bb      	ldr	r3, [r7, #8]
 8009f38:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8009f3a:	68bb      	ldr	r3, [r7, #8]
 8009f3c:	785b      	ldrb	r3, [r3, #1]
 8009f3e:	4618      	mov	r0, r3
 8009f40:	f000 f8ca 	bl	800a0d8 <RTC_Bcd2ToByte>
 8009f44:	4603      	mov	r3, r0
 8009f46:	461a      	mov	r2, r3
 8009f48:	68bb      	ldr	r3, [r7, #8]
 8009f4a:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8009f4c:	68bb      	ldr	r3, [r7, #8]
 8009f4e:	789b      	ldrb	r3, [r3, #2]
 8009f50:	4618      	mov	r0, r3
 8009f52:	f000 f8c1 	bl	800a0d8 <RTC_Bcd2ToByte>
 8009f56:	4603      	mov	r3, r0
 8009f58:	461a      	mov	r2, r3
 8009f5a:	68bb      	ldr	r3, [r7, #8]
 8009f5c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8009f5e:	2300      	movs	r3, #0
}
 8009f60:	4618      	mov	r0, r3
 8009f62:	3718      	adds	r7, #24
 8009f64:	46bd      	mov	sp, r7
 8009f66:	bd80      	pop	{r7, pc}

08009f68 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b084      	sub	sp, #16
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	68da      	ldr	r2, [r3, #12]
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009f7e:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8009f80:	f7fc f80c 	bl	8005f9c <HAL_GetTick>
 8009f84:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009f86:	e009      	b.n	8009f9c <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009f88:	f7fc f808 	bl	8005f9c <HAL_GetTick>
 8009f8c:	4602      	mov	r2, r0
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	1ad3      	subs	r3, r2, r3
 8009f92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009f96:	d901      	bls.n	8009f9c <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8009f98:	2303      	movs	r3, #3
 8009f9a:	e007      	b.n	8009fac <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	68db      	ldr	r3, [r3, #12]
 8009fa2:	f003 0320 	and.w	r3, r3, #32
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d0ee      	beq.n	8009f88 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8009faa:	2300      	movs	r3, #0
}
 8009fac:	4618      	mov	r0, r3
 8009fae:	3710      	adds	r7, #16
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	bd80      	pop	{r7, pc}

08009fb4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b084      	sub	sp, #16
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	68db      	ldr	r3, [r3, #12]
 8009fc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d120      	bne.n	800a010 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009fd6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8009fd8:	f7fb ffe0 	bl	8005f9c <HAL_GetTick>
 8009fdc:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009fde:	e00d      	b.n	8009ffc <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8009fe0:	f7fb ffdc 	bl	8005f9c <HAL_GetTick>
 8009fe4:	4602      	mov	r2, r0
 8009fe6:	68bb      	ldr	r3, [r7, #8]
 8009fe8:	1ad3      	subs	r3, r2, r3
 8009fea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009fee:	d905      	bls.n	8009ffc <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8009ff0:	2303      	movs	r3, #3
 8009ff2:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2203      	movs	r2, #3
 8009ff8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	68db      	ldr	r3, [r3, #12]
 800a002:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a006:	2b00      	cmp	r3, #0
 800a008:	d102      	bne.n	800a010 <RTC_EnterInitMode+0x5c>
 800a00a:	7bfb      	ldrb	r3, [r7, #15]
 800a00c:	2b03      	cmp	r3, #3
 800a00e:	d1e7      	bne.n	8009fe0 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800a010:	7bfb      	ldrb	r3, [r7, #15]
}
 800a012:	4618      	mov	r0, r3
 800a014:	3710      	adds	r7, #16
 800a016:	46bd      	mov	sp, r7
 800a018:	bd80      	pop	{r7, pc}
	...

0800a01c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b084      	sub	sp, #16
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a024:	2300      	movs	r3, #0
 800a026:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800a028:	4b1a      	ldr	r3, [pc, #104]	; (800a094 <RTC_ExitInitMode+0x78>)
 800a02a:	68db      	ldr	r3, [r3, #12]
 800a02c:	4a19      	ldr	r2, [pc, #100]	; (800a094 <RTC_ExitInitMode+0x78>)
 800a02e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a032:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800a034:	4b17      	ldr	r3, [pc, #92]	; (800a094 <RTC_ExitInitMode+0x78>)
 800a036:	689b      	ldr	r3, [r3, #8]
 800a038:	f003 0320 	and.w	r3, r3, #32
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d10c      	bne.n	800a05a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a040:	6878      	ldr	r0, [r7, #4]
 800a042:	f7ff ff91 	bl	8009f68 <HAL_RTC_WaitForSynchro>
 800a046:	4603      	mov	r3, r0
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d01e      	beq.n	800a08a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	2203      	movs	r2, #3
 800a050:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800a054:	2303      	movs	r3, #3
 800a056:	73fb      	strb	r3, [r7, #15]
 800a058:	e017      	b.n	800a08a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a05a:	4b0e      	ldr	r3, [pc, #56]	; (800a094 <RTC_ExitInitMode+0x78>)
 800a05c:	689b      	ldr	r3, [r3, #8]
 800a05e:	4a0d      	ldr	r2, [pc, #52]	; (800a094 <RTC_ExitInitMode+0x78>)
 800a060:	f023 0320 	bic.w	r3, r3, #32
 800a064:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a066:	6878      	ldr	r0, [r7, #4]
 800a068:	f7ff ff7e 	bl	8009f68 <HAL_RTC_WaitForSynchro>
 800a06c:	4603      	mov	r3, r0
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d005      	beq.n	800a07e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	2203      	movs	r2, #3
 800a076:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800a07a:	2303      	movs	r3, #3
 800a07c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a07e:	4b05      	ldr	r3, [pc, #20]	; (800a094 <RTC_ExitInitMode+0x78>)
 800a080:	689b      	ldr	r3, [r3, #8]
 800a082:	4a04      	ldr	r2, [pc, #16]	; (800a094 <RTC_ExitInitMode+0x78>)
 800a084:	f043 0320 	orr.w	r3, r3, #32
 800a088:	6093      	str	r3, [r2, #8]
  }

  return status;
 800a08a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a08c:	4618      	mov	r0, r3
 800a08e:	3710      	adds	r7, #16
 800a090:	46bd      	mov	sp, r7
 800a092:	bd80      	pop	{r7, pc}
 800a094:	40002800 	.word	0x40002800

0800a098 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800a098:	b480      	push	{r7}
 800a09a:	b085      	sub	sp, #20
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	4603      	mov	r3, r0
 800a0a0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 800a0a6:	79fb      	ldrb	r3, [r7, #7]
 800a0a8:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 800a0aa:	e005      	b.n	800a0b8 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	3301      	adds	r3, #1
 800a0b0:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 800a0b2:	7afb      	ldrb	r3, [r7, #11]
 800a0b4:	3b0a      	subs	r3, #10
 800a0b6:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 800a0b8:	7afb      	ldrb	r3, [r7, #11]
 800a0ba:	2b09      	cmp	r3, #9
 800a0bc:	d8f6      	bhi.n	800a0ac <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	b2db      	uxtb	r3, r3
 800a0c2:	011b      	lsls	r3, r3, #4
 800a0c4:	b2da      	uxtb	r2, r3
 800a0c6:	7afb      	ldrb	r3, [r7, #11]
 800a0c8:	4313      	orrs	r3, r2
 800a0ca:	b2db      	uxtb	r3, r3
}
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	3714      	adds	r7, #20
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d6:	4770      	bx	lr

0800a0d8 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800a0d8:	b480      	push	{r7}
 800a0da:	b085      	sub	sp, #20
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	4603      	mov	r3, r0
 800a0e0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800a0e2:	79fb      	ldrb	r3, [r7, #7]
 800a0e4:	091b      	lsrs	r3, r3, #4
 800a0e6:	b2db      	uxtb	r3, r3
 800a0e8:	461a      	mov	r2, r3
 800a0ea:	0092      	lsls	r2, r2, #2
 800a0ec:	4413      	add	r3, r2
 800a0ee:	005b      	lsls	r3, r3, #1
 800a0f0:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800a0f2:	79fb      	ldrb	r3, [r7, #7]
 800a0f4:	f003 030f 	and.w	r3, r3, #15
 800a0f8:	b2da      	uxtb	r2, r3
 800a0fa:	7bfb      	ldrb	r3, [r7, #15]
 800a0fc:	4413      	add	r3, r2
 800a0fe:	b2db      	uxtb	r3, r3
}
 800a100:	4618      	mov	r0, r3
 800a102:	3714      	adds	r7, #20
 800a104:	46bd      	mov	sp, r7
 800a106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10a:	4770      	bx	lr

0800a10c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b084      	sub	sp, #16
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	2b00      	cmp	r3, #0
 800a118:	d101      	bne.n	800a11e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a11a:	2301      	movs	r3, #1
 800a11c:	e095      	b.n	800a24a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a122:	2b00      	cmp	r3, #0
 800a124:	d108      	bne.n	800a138 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	685b      	ldr	r3, [r3, #4]
 800a12a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a12e:	d009      	beq.n	800a144 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	2200      	movs	r2, #0
 800a134:	61da      	str	r2, [r3, #28]
 800a136:	e005      	b.n	800a144 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	2200      	movs	r2, #0
 800a13c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	2200      	movs	r2, #0
 800a142:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	2200      	movs	r2, #0
 800a148:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a150:	b2db      	uxtb	r3, r3
 800a152:	2b00      	cmp	r3, #0
 800a154:	d106      	bne.n	800a164 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	2200      	movs	r2, #0
 800a15a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a15e:	6878      	ldr	r0, [r7, #4]
 800a160:	f7fa fdea 	bl	8004d38 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	2202      	movs	r2, #2
 800a168:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	681a      	ldr	r2, [r3, #0]
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a17a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	68db      	ldr	r3, [r3, #12]
 800a180:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a184:	d902      	bls.n	800a18c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a186:	2300      	movs	r3, #0
 800a188:	60fb      	str	r3, [r7, #12]
 800a18a:	e002      	b.n	800a192 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a18c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a190:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	68db      	ldr	r3, [r3, #12]
 800a196:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800a19a:	d007      	beq.n	800a1ac <HAL_SPI_Init+0xa0>
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	68db      	ldr	r3, [r3, #12]
 800a1a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a1a4:	d002      	beq.n	800a1ac <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	685b      	ldr	r3, [r3, #4]
 800a1b0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	689b      	ldr	r3, [r3, #8]
 800a1b8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a1bc:	431a      	orrs	r2, r3
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	691b      	ldr	r3, [r3, #16]
 800a1c2:	f003 0302 	and.w	r3, r3, #2
 800a1c6:	431a      	orrs	r2, r3
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	695b      	ldr	r3, [r3, #20]
 800a1cc:	f003 0301 	and.w	r3, r3, #1
 800a1d0:	431a      	orrs	r2, r3
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	699b      	ldr	r3, [r3, #24]
 800a1d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a1da:	431a      	orrs	r2, r3
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	69db      	ldr	r3, [r3, #28]
 800a1e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a1e4:	431a      	orrs	r2, r3
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	6a1b      	ldr	r3, [r3, #32]
 800a1ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1ee:	ea42 0103 	orr.w	r1, r2, r3
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1f6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	430a      	orrs	r2, r1
 800a200:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	699b      	ldr	r3, [r3, #24]
 800a206:	0c1b      	lsrs	r3, r3, #16
 800a208:	f003 0204 	and.w	r2, r3, #4
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a210:	f003 0310 	and.w	r3, r3, #16
 800a214:	431a      	orrs	r2, r3
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a21a:	f003 0308 	and.w	r3, r3, #8
 800a21e:	431a      	orrs	r2, r3
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	68db      	ldr	r3, [r3, #12]
 800a224:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a228:	ea42 0103 	orr.w	r1, r2, r3
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	430a      	orrs	r2, r1
 800a238:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	2200      	movs	r2, #0
 800a23e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	2201      	movs	r2, #1
 800a244:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800a248:	2300      	movs	r3, #0
}
 800a24a:	4618      	mov	r0, r3
 800a24c:	3710      	adds	r7, #16
 800a24e:	46bd      	mov	sp, r7
 800a250:	bd80      	pop	{r7, pc}

0800a252 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a252:	b580      	push	{r7, lr}
 800a254:	b088      	sub	sp, #32
 800a256:	af00      	add	r7, sp, #0
 800a258:	60f8      	str	r0, [r7, #12]
 800a25a:	60b9      	str	r1, [r7, #8]
 800a25c:	603b      	str	r3, [r7, #0]
 800a25e:	4613      	mov	r3, r2
 800a260:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a262:	2300      	movs	r3, #0
 800a264:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a26c:	2b01      	cmp	r3, #1
 800a26e:	d101      	bne.n	800a274 <HAL_SPI_Transmit+0x22>
 800a270:	2302      	movs	r3, #2
 800a272:	e158      	b.n	800a526 <HAL_SPI_Transmit+0x2d4>
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	2201      	movs	r2, #1
 800a278:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a27c:	f7fb fe8e 	bl	8005f9c <HAL_GetTick>
 800a280:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800a282:	88fb      	ldrh	r3, [r7, #6]
 800a284:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a28c:	b2db      	uxtb	r3, r3
 800a28e:	2b01      	cmp	r3, #1
 800a290:	d002      	beq.n	800a298 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800a292:	2302      	movs	r3, #2
 800a294:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a296:	e13d      	b.n	800a514 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800a298:	68bb      	ldr	r3, [r7, #8]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d002      	beq.n	800a2a4 <HAL_SPI_Transmit+0x52>
 800a29e:	88fb      	ldrh	r3, [r7, #6]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d102      	bne.n	800a2aa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800a2a4:	2301      	movs	r3, #1
 800a2a6:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a2a8:	e134      	b.n	800a514 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	2203      	movs	r2, #3
 800a2ae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	2200      	movs	r2, #0
 800a2b6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	68ba      	ldr	r2, [r7, #8]
 800a2bc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	88fa      	ldrh	r2, [r7, #6]
 800a2c2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	88fa      	ldrh	r2, [r7, #6]
 800a2c8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	2200      	movs	r2, #0
 800a2dc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	2200      	movs	r2, #0
 800a2ea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	689b      	ldr	r3, [r3, #8]
 800a2f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a2f4:	d10f      	bne.n	800a316 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	681a      	ldr	r2, [r3, #0]
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a304:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	681a      	ldr	r2, [r3, #0]
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a314:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a320:	2b40      	cmp	r3, #64	; 0x40
 800a322:	d007      	beq.n	800a334 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	681a      	ldr	r2, [r3, #0]
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a332:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	68db      	ldr	r3, [r3, #12]
 800a338:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a33c:	d94b      	bls.n	800a3d6 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	685b      	ldr	r3, [r3, #4]
 800a342:	2b00      	cmp	r3, #0
 800a344:	d002      	beq.n	800a34c <HAL_SPI_Transmit+0xfa>
 800a346:	8afb      	ldrh	r3, [r7, #22]
 800a348:	2b01      	cmp	r3, #1
 800a34a:	d13e      	bne.n	800a3ca <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a350:	881a      	ldrh	r2, [r3, #0]
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a35c:	1c9a      	adds	r2, r3, #2
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a366:	b29b      	uxth	r3, r3
 800a368:	3b01      	subs	r3, #1
 800a36a:	b29a      	uxth	r2, r3
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800a370:	e02b      	b.n	800a3ca <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	689b      	ldr	r3, [r3, #8]
 800a378:	f003 0302 	and.w	r3, r3, #2
 800a37c:	2b02      	cmp	r3, #2
 800a37e:	d112      	bne.n	800a3a6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a384:	881a      	ldrh	r2, [r3, #0]
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a390:	1c9a      	adds	r2, r3, #2
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a39a:	b29b      	uxth	r3, r3
 800a39c:	3b01      	subs	r3, #1
 800a39e:	b29a      	uxth	r2, r3
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a3a4:	e011      	b.n	800a3ca <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a3a6:	f7fb fdf9 	bl	8005f9c <HAL_GetTick>
 800a3aa:	4602      	mov	r2, r0
 800a3ac:	69bb      	ldr	r3, [r7, #24]
 800a3ae:	1ad3      	subs	r3, r2, r3
 800a3b0:	683a      	ldr	r2, [r7, #0]
 800a3b2:	429a      	cmp	r2, r3
 800a3b4:	d803      	bhi.n	800a3be <HAL_SPI_Transmit+0x16c>
 800a3b6:	683b      	ldr	r3, [r7, #0]
 800a3b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a3bc:	d102      	bne.n	800a3c4 <HAL_SPI_Transmit+0x172>
 800a3be:	683b      	ldr	r3, [r7, #0]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d102      	bne.n	800a3ca <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800a3c4:	2303      	movs	r3, #3
 800a3c6:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a3c8:	e0a4      	b.n	800a514 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a3ce:	b29b      	uxth	r3, r3
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d1ce      	bne.n	800a372 <HAL_SPI_Transmit+0x120>
 800a3d4:	e07c      	b.n	800a4d0 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	685b      	ldr	r3, [r3, #4]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d002      	beq.n	800a3e4 <HAL_SPI_Transmit+0x192>
 800a3de:	8afb      	ldrh	r3, [r7, #22]
 800a3e0:	2b01      	cmp	r3, #1
 800a3e2:	d170      	bne.n	800a4c6 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a3e8:	b29b      	uxth	r3, r3
 800a3ea:	2b01      	cmp	r3, #1
 800a3ec:	d912      	bls.n	800a414 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3f2:	881a      	ldrh	r2, [r3, #0]
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3fe:	1c9a      	adds	r2, r3, #2
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a408:	b29b      	uxth	r3, r3
 800a40a:	3b02      	subs	r3, #2
 800a40c:	b29a      	uxth	r2, r3
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a412:	e058      	b.n	800a4c6 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	330c      	adds	r3, #12
 800a41e:	7812      	ldrb	r2, [r2, #0]
 800a420:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a426:	1c5a      	adds	r2, r3, #1
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a430:	b29b      	uxth	r3, r3
 800a432:	3b01      	subs	r3, #1
 800a434:	b29a      	uxth	r2, r3
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800a43a:	e044      	b.n	800a4c6 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	689b      	ldr	r3, [r3, #8]
 800a442:	f003 0302 	and.w	r3, r3, #2
 800a446:	2b02      	cmp	r3, #2
 800a448:	d12b      	bne.n	800a4a2 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a44e:	b29b      	uxth	r3, r3
 800a450:	2b01      	cmp	r3, #1
 800a452:	d912      	bls.n	800a47a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a458:	881a      	ldrh	r2, [r3, #0]
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a464:	1c9a      	adds	r2, r3, #2
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a46e:	b29b      	uxth	r3, r3
 800a470:	3b02      	subs	r3, #2
 800a472:	b29a      	uxth	r2, r3
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a478:	e025      	b.n	800a4c6 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	330c      	adds	r3, #12
 800a484:	7812      	ldrb	r2, [r2, #0]
 800a486:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a48c:	1c5a      	adds	r2, r3, #1
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a496:	b29b      	uxth	r3, r3
 800a498:	3b01      	subs	r3, #1
 800a49a:	b29a      	uxth	r2, r3
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a4a0:	e011      	b.n	800a4c6 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a4a2:	f7fb fd7b 	bl	8005f9c <HAL_GetTick>
 800a4a6:	4602      	mov	r2, r0
 800a4a8:	69bb      	ldr	r3, [r7, #24]
 800a4aa:	1ad3      	subs	r3, r2, r3
 800a4ac:	683a      	ldr	r2, [r7, #0]
 800a4ae:	429a      	cmp	r2, r3
 800a4b0:	d803      	bhi.n	800a4ba <HAL_SPI_Transmit+0x268>
 800a4b2:	683b      	ldr	r3, [r7, #0]
 800a4b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a4b8:	d102      	bne.n	800a4c0 <HAL_SPI_Transmit+0x26e>
 800a4ba:	683b      	ldr	r3, [r7, #0]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d102      	bne.n	800a4c6 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800a4c0:	2303      	movs	r3, #3
 800a4c2:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a4c4:	e026      	b.n	800a514 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a4ca:	b29b      	uxth	r3, r3
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d1b5      	bne.n	800a43c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a4d0:	69ba      	ldr	r2, [r7, #24]
 800a4d2:	6839      	ldr	r1, [r7, #0]
 800a4d4:	68f8      	ldr	r0, [r7, #12]
 800a4d6:	f001 f9dd 	bl	800b894 <SPI_EndRxTxTransaction>
 800a4da:	4603      	mov	r3, r0
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d002      	beq.n	800a4e6 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	2220      	movs	r2, #32
 800a4e4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	689b      	ldr	r3, [r3, #8]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d10a      	bne.n	800a504 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	613b      	str	r3, [r7, #16]
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	68db      	ldr	r3, [r3, #12]
 800a4f8:	613b      	str	r3, [r7, #16]
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	689b      	ldr	r3, [r3, #8]
 800a500:	613b      	str	r3, [r7, #16]
 800a502:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d002      	beq.n	800a512 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800a50c:	2301      	movs	r3, #1
 800a50e:	77fb      	strb	r3, [r7, #31]
 800a510:	e000      	b.n	800a514 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800a512:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	2201      	movs	r2, #1
 800a518:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	2200      	movs	r2, #0
 800a520:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800a524:	7ffb      	ldrb	r3, [r7, #31]
}
 800a526:	4618      	mov	r0, r3
 800a528:	3720      	adds	r7, #32
 800a52a:	46bd      	mov	sp, r7
 800a52c:	bd80      	pop	{r7, pc}

0800a52e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a52e:	b580      	push	{r7, lr}
 800a530:	b088      	sub	sp, #32
 800a532:	af02      	add	r7, sp, #8
 800a534:	60f8      	str	r0, [r7, #12]
 800a536:	60b9      	str	r1, [r7, #8]
 800a538:	603b      	str	r3, [r7, #0]
 800a53a:	4613      	mov	r3, r2
 800a53c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a53e:	2300      	movs	r3, #0
 800a540:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	685b      	ldr	r3, [r3, #4]
 800a546:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a54a:	d112      	bne.n	800a572 <HAL_SPI_Receive+0x44>
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	689b      	ldr	r3, [r3, #8]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d10e      	bne.n	800a572 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	2204      	movs	r2, #4
 800a558:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800a55c:	88fa      	ldrh	r2, [r7, #6]
 800a55e:	683b      	ldr	r3, [r7, #0]
 800a560:	9300      	str	r3, [sp, #0]
 800a562:	4613      	mov	r3, r2
 800a564:	68ba      	ldr	r2, [r7, #8]
 800a566:	68b9      	ldr	r1, [r7, #8]
 800a568:	68f8      	ldr	r0, [r7, #12]
 800a56a:	f000 f910 	bl	800a78e <HAL_SPI_TransmitReceive>
 800a56e:	4603      	mov	r3, r0
 800a570:	e109      	b.n	800a786 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a578:	2b01      	cmp	r3, #1
 800a57a:	d101      	bne.n	800a580 <HAL_SPI_Receive+0x52>
 800a57c:	2302      	movs	r3, #2
 800a57e:	e102      	b.n	800a786 <HAL_SPI_Receive+0x258>
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	2201      	movs	r2, #1
 800a584:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a588:	f7fb fd08 	bl	8005f9c <HAL_GetTick>
 800a58c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a594:	b2db      	uxtb	r3, r3
 800a596:	2b01      	cmp	r3, #1
 800a598:	d002      	beq.n	800a5a0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800a59a:	2302      	movs	r3, #2
 800a59c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a59e:	e0e9      	b.n	800a774 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 800a5a0:	68bb      	ldr	r3, [r7, #8]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d002      	beq.n	800a5ac <HAL_SPI_Receive+0x7e>
 800a5a6:	88fb      	ldrh	r3, [r7, #6]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d102      	bne.n	800a5b2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800a5ac:	2301      	movs	r3, #1
 800a5ae:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a5b0:	e0e0      	b.n	800a774 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	2204      	movs	r2, #4
 800a5b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	2200      	movs	r2, #0
 800a5be:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	68ba      	ldr	r2, [r7, #8]
 800a5c4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	88fa      	ldrh	r2, [r7, #6]
 800a5ca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	88fa      	ldrh	r2, [r7, #6]
 800a5d2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	2200      	movs	r2, #0
 800a5da:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	2200      	movs	r2, #0
 800a5e0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	2200      	movs	r2, #0
 800a5e6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	2200      	movs	r2, #0
 800a5f2:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	68db      	ldr	r3, [r3, #12]
 800a5f8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a5fc:	d908      	bls.n	800a610 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	685a      	ldr	r2, [r3, #4]
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a60c:	605a      	str	r2, [r3, #4]
 800a60e:	e007      	b.n	800a620 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	685a      	ldr	r2, [r3, #4]
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a61e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	689b      	ldr	r3, [r3, #8]
 800a624:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a628:	d10f      	bne.n	800a64a <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	681a      	ldr	r2, [r3, #0]
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a638:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	681a      	ldr	r2, [r3, #0]
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a648:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a654:	2b40      	cmp	r3, #64	; 0x40
 800a656:	d007      	beq.n	800a668 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	681a      	ldr	r2, [r3, #0]
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a666:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	68db      	ldr	r3, [r3, #12]
 800a66c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a670:	d867      	bhi.n	800a742 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800a672:	e030      	b.n	800a6d6 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	689b      	ldr	r3, [r3, #8]
 800a67a:	f003 0301 	and.w	r3, r3, #1
 800a67e:	2b01      	cmp	r3, #1
 800a680:	d117      	bne.n	800a6b2 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	f103 020c 	add.w	r2, r3, #12
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a68e:	7812      	ldrb	r2, [r2, #0]
 800a690:	b2d2      	uxtb	r2, r2
 800a692:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a698:	1c5a      	adds	r2, r3, #1
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a6a4:	b29b      	uxth	r3, r3
 800a6a6:	3b01      	subs	r3, #1
 800a6a8:	b29a      	uxth	r2, r3
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800a6b0:	e011      	b.n	800a6d6 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a6b2:	f7fb fc73 	bl	8005f9c <HAL_GetTick>
 800a6b6:	4602      	mov	r2, r0
 800a6b8:	693b      	ldr	r3, [r7, #16]
 800a6ba:	1ad3      	subs	r3, r2, r3
 800a6bc:	683a      	ldr	r2, [r7, #0]
 800a6be:	429a      	cmp	r2, r3
 800a6c0:	d803      	bhi.n	800a6ca <HAL_SPI_Receive+0x19c>
 800a6c2:	683b      	ldr	r3, [r7, #0]
 800a6c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a6c8:	d102      	bne.n	800a6d0 <HAL_SPI_Receive+0x1a2>
 800a6ca:	683b      	ldr	r3, [r7, #0]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d102      	bne.n	800a6d6 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 800a6d0:	2303      	movs	r3, #3
 800a6d2:	75fb      	strb	r3, [r7, #23]
          goto error;
 800a6d4:	e04e      	b.n	800a774 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a6dc:	b29b      	uxth	r3, r3
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d1c8      	bne.n	800a674 <HAL_SPI_Receive+0x146>
 800a6e2:	e034      	b.n	800a74e <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	689b      	ldr	r3, [r3, #8]
 800a6ea:	f003 0301 	and.w	r3, r3, #1
 800a6ee:	2b01      	cmp	r3, #1
 800a6f0:	d115      	bne.n	800a71e <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	68da      	ldr	r2, [r3, #12]
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6fc:	b292      	uxth	r2, r2
 800a6fe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a704:	1c9a      	adds	r2, r3, #2
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a710:	b29b      	uxth	r3, r3
 800a712:	3b01      	subs	r3, #1
 800a714:	b29a      	uxth	r2, r3
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800a71c:	e011      	b.n	800a742 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a71e:	f7fb fc3d 	bl	8005f9c <HAL_GetTick>
 800a722:	4602      	mov	r2, r0
 800a724:	693b      	ldr	r3, [r7, #16]
 800a726:	1ad3      	subs	r3, r2, r3
 800a728:	683a      	ldr	r2, [r7, #0]
 800a72a:	429a      	cmp	r2, r3
 800a72c:	d803      	bhi.n	800a736 <HAL_SPI_Receive+0x208>
 800a72e:	683b      	ldr	r3, [r7, #0]
 800a730:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a734:	d102      	bne.n	800a73c <HAL_SPI_Receive+0x20e>
 800a736:	683b      	ldr	r3, [r7, #0]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d102      	bne.n	800a742 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 800a73c:	2303      	movs	r3, #3
 800a73e:	75fb      	strb	r3, [r7, #23]
          goto error;
 800a740:	e018      	b.n	800a774 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a748:	b29b      	uxth	r3, r3
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d1ca      	bne.n	800a6e4 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a74e:	693a      	ldr	r2, [r7, #16]
 800a750:	6839      	ldr	r1, [r7, #0]
 800a752:	68f8      	ldr	r0, [r7, #12]
 800a754:	f001 f846 	bl	800b7e4 <SPI_EndRxTransaction>
 800a758:	4603      	mov	r3, r0
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d002      	beq.n	800a764 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	2220      	movs	r2, #32
 800a762:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d002      	beq.n	800a772 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 800a76c:	2301      	movs	r3, #1
 800a76e:	75fb      	strb	r3, [r7, #23]
 800a770:	e000      	b.n	800a774 <HAL_SPI_Receive+0x246>
  }

error :
 800a772:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	2201      	movs	r2, #1
 800a778:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	2200      	movs	r2, #0
 800a780:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800a784:	7dfb      	ldrb	r3, [r7, #23]
}
 800a786:	4618      	mov	r0, r3
 800a788:	3718      	adds	r7, #24
 800a78a:	46bd      	mov	sp, r7
 800a78c:	bd80      	pop	{r7, pc}

0800a78e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a78e:	b580      	push	{r7, lr}
 800a790:	b08a      	sub	sp, #40	; 0x28
 800a792:	af00      	add	r7, sp, #0
 800a794:	60f8      	str	r0, [r7, #12]
 800a796:	60b9      	str	r1, [r7, #8]
 800a798:	607a      	str	r2, [r7, #4]
 800a79a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a79c:	2301      	movs	r3, #1
 800a79e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a7ac:	2b01      	cmp	r3, #1
 800a7ae:	d101      	bne.n	800a7b4 <HAL_SPI_TransmitReceive+0x26>
 800a7b0:	2302      	movs	r3, #2
 800a7b2:	e1fb      	b.n	800abac <HAL_SPI_TransmitReceive+0x41e>
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	2201      	movs	r2, #1
 800a7b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a7bc:	f7fb fbee 	bl	8005f9c <HAL_GetTick>
 800a7c0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a7c8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	685b      	ldr	r3, [r3, #4]
 800a7ce:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800a7d0:	887b      	ldrh	r3, [r7, #2]
 800a7d2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800a7d4:	887b      	ldrh	r3, [r7, #2]
 800a7d6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a7d8:	7efb      	ldrb	r3, [r7, #27]
 800a7da:	2b01      	cmp	r3, #1
 800a7dc:	d00e      	beq.n	800a7fc <HAL_SPI_TransmitReceive+0x6e>
 800a7de:	697b      	ldr	r3, [r7, #20]
 800a7e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a7e4:	d106      	bne.n	800a7f4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	689b      	ldr	r3, [r3, #8]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d102      	bne.n	800a7f4 <HAL_SPI_TransmitReceive+0x66>
 800a7ee:	7efb      	ldrb	r3, [r7, #27]
 800a7f0:	2b04      	cmp	r3, #4
 800a7f2:	d003      	beq.n	800a7fc <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800a7f4:	2302      	movs	r3, #2
 800a7f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800a7fa:	e1cd      	b.n	800ab98 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a7fc:	68bb      	ldr	r3, [r7, #8]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d005      	beq.n	800a80e <HAL_SPI_TransmitReceive+0x80>
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	2b00      	cmp	r3, #0
 800a806:	d002      	beq.n	800a80e <HAL_SPI_TransmitReceive+0x80>
 800a808:	887b      	ldrh	r3, [r7, #2]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d103      	bne.n	800a816 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800a80e:	2301      	movs	r3, #1
 800a810:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800a814:	e1c0      	b.n	800ab98 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a81c:	b2db      	uxtb	r3, r3
 800a81e:	2b04      	cmp	r3, #4
 800a820:	d003      	beq.n	800a82a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	2205      	movs	r2, #5
 800a826:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	2200      	movs	r2, #0
 800a82e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	687a      	ldr	r2, [r7, #4]
 800a834:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	887a      	ldrh	r2, [r7, #2]
 800a83a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	887a      	ldrh	r2, [r7, #2]
 800a842:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	68ba      	ldr	r2, [r7, #8]
 800a84a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	887a      	ldrh	r2, [r7, #2]
 800a850:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	887a      	ldrh	r2, [r7, #2]
 800a856:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	2200      	movs	r2, #0
 800a85c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	2200      	movs	r2, #0
 800a862:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	68db      	ldr	r3, [r3, #12]
 800a868:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a86c:	d802      	bhi.n	800a874 <HAL_SPI_TransmitReceive+0xe6>
 800a86e:	8a3b      	ldrh	r3, [r7, #16]
 800a870:	2b01      	cmp	r3, #1
 800a872:	d908      	bls.n	800a886 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	685a      	ldr	r2, [r3, #4]
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a882:	605a      	str	r2, [r3, #4]
 800a884:	e007      	b.n	800a896 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	685a      	ldr	r2, [r3, #4]
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a894:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8a0:	2b40      	cmp	r3, #64	; 0x40
 800a8a2:	d007      	beq.n	800a8b4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	681a      	ldr	r2, [r3, #0]
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a8b2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	68db      	ldr	r3, [r3, #12]
 800a8b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a8bc:	d97c      	bls.n	800a9b8 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	685b      	ldr	r3, [r3, #4]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d002      	beq.n	800a8cc <HAL_SPI_TransmitReceive+0x13e>
 800a8c6:	8a7b      	ldrh	r3, [r7, #18]
 800a8c8:	2b01      	cmp	r3, #1
 800a8ca:	d169      	bne.n	800a9a0 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8d0:	881a      	ldrh	r2, [r3, #0]
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8dc:	1c9a      	adds	r2, r3, #2
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a8e6:	b29b      	uxth	r3, r3
 800a8e8:	3b01      	subs	r3, #1
 800a8ea:	b29a      	uxth	r2, r3
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a8f0:	e056      	b.n	800a9a0 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	689b      	ldr	r3, [r3, #8]
 800a8f8:	f003 0302 	and.w	r3, r3, #2
 800a8fc:	2b02      	cmp	r3, #2
 800a8fe:	d11b      	bne.n	800a938 <HAL_SPI_TransmitReceive+0x1aa>
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a904:	b29b      	uxth	r3, r3
 800a906:	2b00      	cmp	r3, #0
 800a908:	d016      	beq.n	800a938 <HAL_SPI_TransmitReceive+0x1aa>
 800a90a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a90c:	2b01      	cmp	r3, #1
 800a90e:	d113      	bne.n	800a938 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a914:	881a      	ldrh	r2, [r3, #0]
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a920:	1c9a      	adds	r2, r3, #2
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a92a:	b29b      	uxth	r3, r3
 800a92c:	3b01      	subs	r3, #1
 800a92e:	b29a      	uxth	r2, r3
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a934:	2300      	movs	r3, #0
 800a936:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	689b      	ldr	r3, [r3, #8]
 800a93e:	f003 0301 	and.w	r3, r3, #1
 800a942:	2b01      	cmp	r3, #1
 800a944:	d11c      	bne.n	800a980 <HAL_SPI_TransmitReceive+0x1f2>
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a94c:	b29b      	uxth	r3, r3
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d016      	beq.n	800a980 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	68da      	ldr	r2, [r3, #12]
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a95c:	b292      	uxth	r2, r2
 800a95e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a964:	1c9a      	adds	r2, r3, #2
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a970:	b29b      	uxth	r3, r3
 800a972:	3b01      	subs	r3, #1
 800a974:	b29a      	uxth	r2, r3
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a97c:	2301      	movs	r3, #1
 800a97e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a980:	f7fb fb0c 	bl	8005f9c <HAL_GetTick>
 800a984:	4602      	mov	r2, r0
 800a986:	69fb      	ldr	r3, [r7, #28]
 800a988:	1ad3      	subs	r3, r2, r3
 800a98a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a98c:	429a      	cmp	r2, r3
 800a98e:	d807      	bhi.n	800a9a0 <HAL_SPI_TransmitReceive+0x212>
 800a990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a992:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a996:	d003      	beq.n	800a9a0 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800a998:	2303      	movs	r3, #3
 800a99a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800a99e:	e0fb      	b.n	800ab98 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a9a4:	b29b      	uxth	r3, r3
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d1a3      	bne.n	800a8f2 <HAL_SPI_TransmitReceive+0x164>
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a9b0:	b29b      	uxth	r3, r3
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d19d      	bne.n	800a8f2 <HAL_SPI_TransmitReceive+0x164>
 800a9b6:	e0df      	b.n	800ab78 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	685b      	ldr	r3, [r3, #4]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d003      	beq.n	800a9c8 <HAL_SPI_TransmitReceive+0x23a>
 800a9c0:	8a7b      	ldrh	r3, [r7, #18]
 800a9c2:	2b01      	cmp	r3, #1
 800a9c4:	f040 80cb 	bne.w	800ab5e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a9cc:	b29b      	uxth	r3, r3
 800a9ce:	2b01      	cmp	r3, #1
 800a9d0:	d912      	bls.n	800a9f8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9d6:	881a      	ldrh	r2, [r3, #0]
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9e2:	1c9a      	adds	r2, r3, #2
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a9ec:	b29b      	uxth	r3, r3
 800a9ee:	3b02      	subs	r3, #2
 800a9f0:	b29a      	uxth	r2, r3
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a9f6:	e0b2      	b.n	800ab5e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	330c      	adds	r3, #12
 800aa02:	7812      	ldrb	r2, [r2, #0]
 800aa04:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa0a:	1c5a      	adds	r2, r3, #1
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aa14:	b29b      	uxth	r3, r3
 800aa16:	3b01      	subs	r3, #1
 800aa18:	b29a      	uxth	r2, r3
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800aa1e:	e09e      	b.n	800ab5e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	689b      	ldr	r3, [r3, #8]
 800aa26:	f003 0302 	and.w	r3, r3, #2
 800aa2a:	2b02      	cmp	r3, #2
 800aa2c:	d134      	bne.n	800aa98 <HAL_SPI_TransmitReceive+0x30a>
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aa32:	b29b      	uxth	r3, r3
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d02f      	beq.n	800aa98 <HAL_SPI_TransmitReceive+0x30a>
 800aa38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa3a:	2b01      	cmp	r3, #1
 800aa3c:	d12c      	bne.n	800aa98 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aa42:	b29b      	uxth	r3, r3
 800aa44:	2b01      	cmp	r3, #1
 800aa46:	d912      	bls.n	800aa6e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa4c:	881a      	ldrh	r2, [r3, #0]
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa58:	1c9a      	adds	r2, r3, #2
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aa62:	b29b      	uxth	r3, r3
 800aa64:	3b02      	subs	r3, #2
 800aa66:	b29a      	uxth	r2, r3
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800aa6c:	e012      	b.n	800aa94 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	330c      	adds	r3, #12
 800aa78:	7812      	ldrb	r2, [r2, #0]
 800aa7a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa80:	1c5a      	adds	r2, r3, #1
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aa8a:	b29b      	uxth	r3, r3
 800aa8c:	3b01      	subs	r3, #1
 800aa8e:	b29a      	uxth	r2, r3
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800aa94:	2300      	movs	r3, #0
 800aa96:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	689b      	ldr	r3, [r3, #8]
 800aa9e:	f003 0301 	and.w	r3, r3, #1
 800aaa2:	2b01      	cmp	r3, #1
 800aaa4:	d148      	bne.n	800ab38 <HAL_SPI_TransmitReceive+0x3aa>
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800aaac:	b29b      	uxth	r3, r3
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d042      	beq.n	800ab38 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800aab8:	b29b      	uxth	r3, r3
 800aaba:	2b01      	cmp	r3, #1
 800aabc:	d923      	bls.n	800ab06 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	68da      	ldr	r2, [r3, #12]
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aac8:	b292      	uxth	r2, r2
 800aaca:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aad0:	1c9a      	adds	r2, r3, #2
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800aadc:	b29b      	uxth	r3, r3
 800aade:	3b02      	subs	r3, #2
 800aae0:	b29a      	uxth	r2, r3
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800aaee:	b29b      	uxth	r3, r3
 800aaf0:	2b01      	cmp	r3, #1
 800aaf2:	d81f      	bhi.n	800ab34 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	685a      	ldr	r2, [r3, #4]
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ab02:	605a      	str	r2, [r3, #4]
 800ab04:	e016      	b.n	800ab34 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	f103 020c 	add.w	r2, r3, #12
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab12:	7812      	ldrb	r2, [r2, #0]
 800ab14:	b2d2      	uxtb	r2, r2
 800ab16:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab1c:	1c5a      	adds	r2, r3, #1
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ab28:	b29b      	uxth	r3, r3
 800ab2a:	3b01      	subs	r3, #1
 800ab2c:	b29a      	uxth	r2, r3
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ab34:	2301      	movs	r3, #1
 800ab36:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800ab38:	f7fb fa30 	bl	8005f9c <HAL_GetTick>
 800ab3c:	4602      	mov	r2, r0
 800ab3e:	69fb      	ldr	r3, [r7, #28]
 800ab40:	1ad3      	subs	r3, r2, r3
 800ab42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab44:	429a      	cmp	r2, r3
 800ab46:	d803      	bhi.n	800ab50 <HAL_SPI_TransmitReceive+0x3c2>
 800ab48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ab4e:	d102      	bne.n	800ab56 <HAL_SPI_TransmitReceive+0x3c8>
 800ab50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d103      	bne.n	800ab5e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800ab56:	2303      	movs	r3, #3
 800ab58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800ab5c:	e01c      	b.n	800ab98 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ab62:	b29b      	uxth	r3, r3
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	f47f af5b 	bne.w	800aa20 <HAL_SPI_TransmitReceive+0x292>
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ab70:	b29b      	uxth	r3, r3
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	f47f af54 	bne.w	800aa20 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ab78:	69fa      	ldr	r2, [r7, #28]
 800ab7a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ab7c:	68f8      	ldr	r0, [r7, #12]
 800ab7e:	f000 fe89 	bl	800b894 <SPI_EndRxTxTransaction>
 800ab82:	4603      	mov	r3, r0
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d006      	beq.n	800ab96 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800ab88:	2301      	movs	r3, #1
 800ab8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	2220      	movs	r2, #32
 800ab92:	661a      	str	r2, [r3, #96]	; 0x60
 800ab94:	e000      	b.n	800ab98 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800ab96:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	2201      	movs	r2, #1
 800ab9c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	2200      	movs	r2, #0
 800aba4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800aba8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800abac:	4618      	mov	r0, r3
 800abae:	3728      	adds	r7, #40	; 0x28
 800abb0:	46bd      	mov	sp, r7
 800abb2:	bd80      	pop	{r7, pc}

0800abb4 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800abb4:	b580      	push	{r7, lr}
 800abb6:	b086      	sub	sp, #24
 800abb8:	af00      	add	r7, sp, #0
 800abba:	60f8      	str	r0, [r7, #12]
 800abbc:	60b9      	str	r1, [r7, #8]
 800abbe:	4613      	mov	r3, r2
 800abc0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800abc2:	2300      	movs	r3, #0
 800abc4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800abcc:	2b01      	cmp	r3, #1
 800abce:	d101      	bne.n	800abd4 <HAL_SPI_Transmit_DMA+0x20>
 800abd0:	2302      	movs	r3, #2
 800abd2:	e0d8      	b.n	800ad86 <HAL_SPI_Transmit_DMA+0x1d2>
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	2201      	movs	r2, #1
 800abd8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800abe2:	b2db      	uxtb	r3, r3
 800abe4:	2b01      	cmp	r3, #1
 800abe6:	d002      	beq.n	800abee <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800abe8:	2302      	movs	r3, #2
 800abea:	75fb      	strb	r3, [r7, #23]
    goto error;
 800abec:	e0c6      	b.n	800ad7c <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 800abee:	68bb      	ldr	r3, [r7, #8]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d002      	beq.n	800abfa <HAL_SPI_Transmit_DMA+0x46>
 800abf4:	88fb      	ldrh	r3, [r7, #6]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d102      	bne.n	800ac00 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800abfa:	2301      	movs	r3, #1
 800abfc:	75fb      	strb	r3, [r7, #23]
    goto error;
 800abfe:	e0bd      	b.n	800ad7c <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	2203      	movs	r2, #3
 800ac04:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	2200      	movs	r2, #0
 800ac0c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	68ba      	ldr	r2, [r7, #8]
 800ac12:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	88fa      	ldrh	r2, [r7, #6]
 800ac18:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	88fa      	ldrh	r2, [r7, #6]
 800ac1e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	2200      	movs	r2, #0
 800ac24:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	2200      	movs	r2, #0
 800ac2a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	2200      	movs	r2, #0
 800ac30:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	2200      	movs	r2, #0
 800ac36:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	2200      	movs	r2, #0
 800ac3e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	689b      	ldr	r3, [r3, #8]
 800ac46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ac4a:	d10f      	bne.n	800ac6c <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	681a      	ldr	r2, [r3, #0]
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ac5a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	681a      	ldr	r2, [r3, #0]
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ac6a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac70:	4a47      	ldr	r2, [pc, #284]	; (800ad90 <HAL_SPI_Transmit_DMA+0x1dc>)
 800ac72:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac78:	4a46      	ldr	r2, [pc, #280]	; (800ad94 <HAL_SPI_Transmit_DMA+0x1e0>)
 800ac7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac80:	4a45      	ldr	r2, [pc, #276]	; (800ad98 <HAL_SPI_Transmit_DMA+0x1e4>)
 800ac82:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac88:	2200      	movs	r2, #0
 800ac8a:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	685a      	ldr	r2, [r3, #4]
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800ac9a:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	68db      	ldr	r3, [r3, #12]
 800aca0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800aca4:	d82d      	bhi.n	800ad02 <HAL_SPI_Transmit_DMA+0x14e>
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800acaa:	699b      	ldr	r3, [r3, #24]
 800acac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800acb0:	d127      	bne.n	800ad02 <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800acb6:	b29b      	uxth	r3, r3
 800acb8:	f003 0301 	and.w	r3, r3, #1
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d10f      	bne.n	800ace0 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	685a      	ldr	r2, [r3, #4]
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800acce:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800acd4:	b29b      	uxth	r3, r3
 800acd6:	085b      	lsrs	r3, r3, #1
 800acd8:	b29a      	uxth	r2, r3
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	87da      	strh	r2, [r3, #62]	; 0x3e
 800acde:	e010      	b.n	800ad02 <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	685a      	ldr	r2, [r3, #4]
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800acee:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800acf4:	b29b      	uxth	r3, r3
 800acf6:	085b      	lsrs	r3, r3, #1
 800acf8:	b29b      	uxth	r3, r3
 800acfa:	3301      	adds	r3, #1
 800acfc:	b29a      	uxth	r2, r3
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad0a:	4619      	mov	r1, r3
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	330c      	adds	r3, #12
 800ad12:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ad18:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800ad1a:	f7fb fb6b 	bl	80063f4 <HAL_DMA_Start_IT>
 800ad1e:	4603      	mov	r3, r0
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d00c      	beq.n	800ad3e <HAL_SPI_Transmit_DMA+0x18a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ad28:	f043 0210 	orr.w	r2, r3, #16
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800ad30:	2301      	movs	r3, #1
 800ad32:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	2201      	movs	r2, #1
 800ad38:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800ad3c:	e01e      	b.n	800ad7c <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad48:	2b40      	cmp	r3, #64	; 0x40
 800ad4a:	d007      	beq.n	800ad5c <HAL_SPI_Transmit_DMA+0x1a8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	681a      	ldr	r2, [r3, #0]
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ad5a:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	685a      	ldr	r2, [r3, #4]
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	f042 0220 	orr.w	r2, r2, #32
 800ad6a:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	685a      	ldr	r2, [r3, #4]
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	f042 0202 	orr.w	r2, r2, #2
 800ad7a:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	2200      	movs	r2, #0
 800ad80:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800ad84:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad86:	4618      	mov	r0, r3
 800ad88:	3718      	adds	r7, #24
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	bd80      	pop	{r7, pc}
 800ad8e:	bf00      	nop
 800ad90:	0800b4eb 	.word	0x0800b4eb
 800ad94:	0800b30d 	.word	0x0800b30d
 800ad98:	0800b53f 	.word	0x0800b53f

0800ad9c <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b086      	sub	sp, #24
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	60f8      	str	r0, [r7, #12]
 800ada4:	60b9      	str	r1, [r7, #8]
 800ada6:	607a      	str	r2, [r7, #4]
 800ada8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800adaa:	2300      	movs	r3, #0
 800adac:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800adb4:	2b01      	cmp	r3, #1
 800adb6:	d101      	bne.n	800adbc <HAL_SPI_TransmitReceive_DMA+0x20>
 800adb8:	2302      	movs	r3, #2
 800adba:	e16c      	b.n	800b096 <HAL_SPI_TransmitReceive_DMA+0x2fa>
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	2201      	movs	r2, #1
 800adc0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800adca:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	685b      	ldr	r3, [r3, #4]
 800add0:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800add2:	7dbb      	ldrb	r3, [r7, #22]
 800add4:	2b01      	cmp	r3, #1
 800add6:	d00d      	beq.n	800adf4 <HAL_SPI_TransmitReceive_DMA+0x58>
 800add8:	693b      	ldr	r3, [r7, #16]
 800adda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800adde:	d106      	bne.n	800adee <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	689b      	ldr	r3, [r3, #8]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d102      	bne.n	800adee <HAL_SPI_TransmitReceive_DMA+0x52>
 800ade8:	7dbb      	ldrb	r3, [r7, #22]
 800adea:	2b04      	cmp	r3, #4
 800adec:	d002      	beq.n	800adf4 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800adee:	2302      	movs	r3, #2
 800adf0:	75fb      	strb	r3, [r7, #23]
    goto error;
 800adf2:	e14b      	b.n	800b08c <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800adf4:	68bb      	ldr	r3, [r7, #8]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d005      	beq.n	800ae06 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d002      	beq.n	800ae06 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800ae00:	887b      	ldrh	r3, [r7, #2]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d102      	bne.n	800ae0c <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800ae06:	2301      	movs	r3, #1
 800ae08:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ae0a:	e13f      	b.n	800b08c <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ae12:	b2db      	uxtb	r3, r3
 800ae14:	2b04      	cmp	r3, #4
 800ae16:	d003      	beq.n	800ae20 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	2205      	movs	r2, #5
 800ae1c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	2200      	movs	r2, #0
 800ae24:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	68ba      	ldr	r2, [r7, #8]
 800ae2a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	887a      	ldrh	r2, [r7, #2]
 800ae30:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	887a      	ldrh	r2, [r7, #2]
 800ae36:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	687a      	ldr	r2, [r7, #4]
 800ae3c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	887a      	ldrh	r2, [r7, #2]
 800ae42:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	887a      	ldrh	r2, [r7, #2]
 800ae4a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	2200      	movs	r2, #0
 800ae52:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	2200      	movs	r2, #0
 800ae58:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	685a      	ldr	r2, [r3, #4]
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 800ae68:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	68db      	ldr	r3, [r3, #12]
 800ae6e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ae72:	d908      	bls.n	800ae86 <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	685a      	ldr	r2, [r3, #4]
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800ae82:	605a      	str	r2, [r3, #4]
 800ae84:	e06f      	b.n	800af66 <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	685a      	ldr	r2, [r3, #4]
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ae94:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae9a:	699b      	ldr	r3, [r3, #24]
 800ae9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aea0:	d126      	bne.n	800aef0 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800aea6:	f003 0301 	and.w	r3, r3, #1
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d10f      	bne.n	800aece <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	685a      	ldr	r2, [r3, #4]
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800aebc:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aec2:	b29b      	uxth	r3, r3
 800aec4:	085b      	lsrs	r3, r3, #1
 800aec6:	b29a      	uxth	r2, r3
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	87da      	strh	r2, [r3, #62]	; 0x3e
 800aecc:	e010      	b.n	800aef0 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	685a      	ldr	r2, [r3, #4]
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800aedc:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aee2:	b29b      	uxth	r3, r3
 800aee4:	085b      	lsrs	r3, r3, #1
 800aee6:	b29b      	uxth	r3, r3
 800aee8:	3301      	adds	r3, #1
 800aeea:	b29a      	uxth	r2, r3
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aef4:	699b      	ldr	r3, [r3, #24]
 800aef6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aefa:	d134      	bne.n	800af66 <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	685a      	ldr	r2, [r3, #4]
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800af0a:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800af12:	b29b      	uxth	r3, r3
 800af14:	f003 0301 	and.w	r3, r3, #1
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d111      	bne.n	800af40 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	685a      	ldr	r2, [r3, #4]
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800af2a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800af32:	b29b      	uxth	r3, r3
 800af34:	085b      	lsrs	r3, r3, #1
 800af36:	b29a      	uxth	r2, r3
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800af3e:	e012      	b.n	800af66 <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	685a      	ldr	r2, [r3, #4]
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800af4e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800af56:	b29b      	uxth	r3, r3
 800af58:	085b      	lsrs	r3, r3, #1
 800af5a:	b29b      	uxth	r3, r3
 800af5c:	3301      	adds	r3, #1
 800af5e:	b29a      	uxth	r2, r3
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800af6c:	b2db      	uxtb	r3, r3
 800af6e:	2b04      	cmp	r3, #4
 800af70:	d108      	bne.n	800af84 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af76:	4a4a      	ldr	r2, [pc, #296]	; (800b0a0 <HAL_SPI_TransmitReceive_DMA+0x304>)
 800af78:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af7e:	4a49      	ldr	r2, [pc, #292]	; (800b0a4 <HAL_SPI_TransmitReceive_DMA+0x308>)
 800af80:	62da      	str	r2, [r3, #44]	; 0x2c
 800af82:	e007      	b.n	800af94 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af88:	4a47      	ldr	r2, [pc, #284]	; (800b0a8 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 800af8a:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af90:	4a46      	ldr	r2, [pc, #280]	; (800b0ac <HAL_SPI_TransmitReceive_DMA+0x310>)
 800af92:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af98:	4a45      	ldr	r2, [pc, #276]	; (800b0b0 <HAL_SPI_TransmitReceive_DMA+0x314>)
 800af9a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800afa0:	2200      	movs	r2, #0
 800afa2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	330c      	adds	r3, #12
 800afae:	4619      	mov	r1, r3
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afb4:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800afbc:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800afbe:	f7fb fa19 	bl	80063f4 <HAL_DMA_Start_IT>
 800afc2:	4603      	mov	r3, r0
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d00c      	beq.n	800afe2 <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800afcc:	f043 0210 	orr.w	r2, r3, #16
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800afd4:	2301      	movs	r3, #1
 800afd6:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	2201      	movs	r2, #1
 800afdc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800afe0:	e054      	b.n	800b08c <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	685a      	ldr	r2, [r3, #4]
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	f042 0201 	orr.w	r2, r2, #1
 800aff0:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aff6:	2200      	movs	r2, #0
 800aff8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800affe:	2200      	movs	r2, #0
 800b000:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b006:	2200      	movs	r2, #0
 800b008:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b00e:	2200      	movs	r2, #0
 800b010:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b01a:	4619      	mov	r1, r3
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	330c      	adds	r3, #12
 800b022:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b028:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800b02a:	f7fb f9e3 	bl	80063f4 <HAL_DMA_Start_IT>
 800b02e:	4603      	mov	r3, r0
 800b030:	2b00      	cmp	r3, #0
 800b032:	d00c      	beq.n	800b04e <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b038:	f043 0210 	orr.w	r2, r3, #16
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800b040:	2301      	movs	r3, #1
 800b042:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	2201      	movs	r2, #1
 800b048:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800b04c:	e01e      	b.n	800b08c <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b058:	2b40      	cmp	r3, #64	; 0x40
 800b05a:	d007      	beq.n	800b06c <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	681a      	ldr	r2, [r3, #0]
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b06a:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	685a      	ldr	r2, [r3, #4]
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	f042 0220 	orr.w	r2, r2, #32
 800b07a:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	685a      	ldr	r2, [r3, #4]
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	f042 0202 	orr.w	r2, r2, #2
 800b08a:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	2200      	movs	r2, #0
 800b090:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800b094:	7dfb      	ldrb	r3, [r7, #23]
}
 800b096:	4618      	mov	r0, r3
 800b098:	3718      	adds	r7, #24
 800b09a:	46bd      	mov	sp, r7
 800b09c:	bd80      	pop	{r7, pc}
 800b09e:	bf00      	nop
 800b0a0:	0800b507 	.word	0x0800b507
 800b0a4:	0800b3b3 	.word	0x0800b3b3
 800b0a8:	0800b523 	.word	0x0800b523
 800b0ac:	0800b45b 	.word	0x0800b45b
 800b0b0:	0800b53f 	.word	0x0800b53f

0800b0b4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b088      	sub	sp, #32
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	685b      	ldr	r3, [r3, #4]
 800b0c2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	689b      	ldr	r3, [r3, #8]
 800b0ca:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800b0cc:	69bb      	ldr	r3, [r7, #24]
 800b0ce:	099b      	lsrs	r3, r3, #6
 800b0d0:	f003 0301 	and.w	r3, r3, #1
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d10f      	bne.n	800b0f8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800b0d8:	69bb      	ldr	r3, [r7, #24]
 800b0da:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d00a      	beq.n	800b0f8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800b0e2:	69fb      	ldr	r3, [r7, #28]
 800b0e4:	099b      	lsrs	r3, r3, #6
 800b0e6:	f003 0301 	and.w	r3, r3, #1
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d004      	beq.n	800b0f8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b0f2:	6878      	ldr	r0, [r7, #4]
 800b0f4:	4798      	blx	r3
    return;
 800b0f6:	e0d7      	b.n	800b2a8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800b0f8:	69bb      	ldr	r3, [r7, #24]
 800b0fa:	085b      	lsrs	r3, r3, #1
 800b0fc:	f003 0301 	and.w	r3, r3, #1
 800b100:	2b00      	cmp	r3, #0
 800b102:	d00a      	beq.n	800b11a <HAL_SPI_IRQHandler+0x66>
 800b104:	69fb      	ldr	r3, [r7, #28]
 800b106:	09db      	lsrs	r3, r3, #7
 800b108:	f003 0301 	and.w	r3, r3, #1
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d004      	beq.n	800b11a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b114:	6878      	ldr	r0, [r7, #4]
 800b116:	4798      	blx	r3
    return;
 800b118:	e0c6      	b.n	800b2a8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800b11a:	69bb      	ldr	r3, [r7, #24]
 800b11c:	095b      	lsrs	r3, r3, #5
 800b11e:	f003 0301 	and.w	r3, r3, #1
 800b122:	2b00      	cmp	r3, #0
 800b124:	d10c      	bne.n	800b140 <HAL_SPI_IRQHandler+0x8c>
 800b126:	69bb      	ldr	r3, [r7, #24]
 800b128:	099b      	lsrs	r3, r3, #6
 800b12a:	f003 0301 	and.w	r3, r3, #1
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d106      	bne.n	800b140 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800b132:	69bb      	ldr	r3, [r7, #24]
 800b134:	0a1b      	lsrs	r3, r3, #8
 800b136:	f003 0301 	and.w	r3, r3, #1
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	f000 80b4 	beq.w	800b2a8 <HAL_SPI_IRQHandler+0x1f4>
 800b140:	69fb      	ldr	r3, [r7, #28]
 800b142:	095b      	lsrs	r3, r3, #5
 800b144:	f003 0301 	and.w	r3, r3, #1
 800b148:	2b00      	cmp	r3, #0
 800b14a:	f000 80ad 	beq.w	800b2a8 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800b14e:	69bb      	ldr	r3, [r7, #24]
 800b150:	099b      	lsrs	r3, r3, #6
 800b152:	f003 0301 	and.w	r3, r3, #1
 800b156:	2b00      	cmp	r3, #0
 800b158:	d023      	beq.n	800b1a2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b160:	b2db      	uxtb	r3, r3
 800b162:	2b03      	cmp	r3, #3
 800b164:	d011      	beq.n	800b18a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b16a:	f043 0204 	orr.w	r2, r3, #4
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b172:	2300      	movs	r3, #0
 800b174:	617b      	str	r3, [r7, #20]
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	68db      	ldr	r3, [r3, #12]
 800b17c:	617b      	str	r3, [r7, #20]
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	689b      	ldr	r3, [r3, #8]
 800b184:	617b      	str	r3, [r7, #20]
 800b186:	697b      	ldr	r3, [r7, #20]
 800b188:	e00b      	b.n	800b1a2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b18a:	2300      	movs	r3, #0
 800b18c:	613b      	str	r3, [r7, #16]
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	68db      	ldr	r3, [r3, #12]
 800b194:	613b      	str	r3, [r7, #16]
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	689b      	ldr	r3, [r3, #8]
 800b19c:	613b      	str	r3, [r7, #16]
 800b19e:	693b      	ldr	r3, [r7, #16]
        return;
 800b1a0:	e082      	b.n	800b2a8 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800b1a2:	69bb      	ldr	r3, [r7, #24]
 800b1a4:	095b      	lsrs	r3, r3, #5
 800b1a6:	f003 0301 	and.w	r3, r3, #1
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d014      	beq.n	800b1d8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b1b2:	f043 0201 	orr.w	r2, r3, #1
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b1ba:	2300      	movs	r3, #0
 800b1bc:	60fb      	str	r3, [r7, #12]
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	689b      	ldr	r3, [r3, #8]
 800b1c4:	60fb      	str	r3, [r7, #12]
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	681a      	ldr	r2, [r3, #0]
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b1d4:	601a      	str	r2, [r3, #0]
 800b1d6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800b1d8:	69bb      	ldr	r3, [r7, #24]
 800b1da:	0a1b      	lsrs	r3, r3, #8
 800b1dc:	f003 0301 	and.w	r3, r3, #1
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d00c      	beq.n	800b1fe <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b1e8:	f043 0208 	orr.w	r2, r3, #8
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	60bb      	str	r3, [r7, #8]
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	689b      	ldr	r3, [r3, #8]
 800b1fa:	60bb      	str	r3, [r7, #8]
 800b1fc:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b202:	2b00      	cmp	r3, #0
 800b204:	d04f      	beq.n	800b2a6 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	685a      	ldr	r2, [r3, #4]
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b214:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	2201      	movs	r2, #1
 800b21a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800b21e:	69fb      	ldr	r3, [r7, #28]
 800b220:	f003 0302 	and.w	r3, r3, #2
 800b224:	2b00      	cmp	r3, #0
 800b226:	d104      	bne.n	800b232 <HAL_SPI_IRQHandler+0x17e>
 800b228:	69fb      	ldr	r3, [r7, #28]
 800b22a:	f003 0301 	and.w	r3, r3, #1
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d034      	beq.n	800b29c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	685a      	ldr	r2, [r3, #4]
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	f022 0203 	bic.w	r2, r2, #3
 800b240:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b246:	2b00      	cmp	r3, #0
 800b248:	d011      	beq.n	800b26e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b24e:	4a18      	ldr	r2, [pc, #96]	; (800b2b0 <HAL_SPI_IRQHandler+0x1fc>)
 800b250:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b256:	4618      	mov	r0, r3
 800b258:	f7fb f96a 	bl	8006530 <HAL_DMA_Abort_IT>
 800b25c:	4603      	mov	r3, r0
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d005      	beq.n	800b26e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b266:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b272:	2b00      	cmp	r3, #0
 800b274:	d016      	beq.n	800b2a4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b27a:	4a0d      	ldr	r2, [pc, #52]	; (800b2b0 <HAL_SPI_IRQHandler+0x1fc>)
 800b27c:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b282:	4618      	mov	r0, r3
 800b284:	f7fb f954 	bl	8006530 <HAL_DMA_Abort_IT>
 800b288:	4603      	mov	r3, r0
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d00a      	beq.n	800b2a4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b292:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800b29a:	e003      	b.n	800b2a4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800b29c:	6878      	ldr	r0, [r7, #4]
 800b29e:	f7f8 ff81 	bl	80041a4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800b2a2:	e000      	b.n	800b2a6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800b2a4:	bf00      	nop
    return;
 800b2a6:	bf00      	nop
  }
}
 800b2a8:	3720      	adds	r7, #32
 800b2aa:	46bd      	mov	sp, r7
 800b2ac:	bd80      	pop	{r7, pc}
 800b2ae:	bf00      	nop
 800b2b0:	0800b57f 	.word	0x0800b57f

0800b2b4 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800b2b4:	b480      	push	{r7}
 800b2b6:	b083      	sub	sp, #12
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800b2bc:	bf00      	nop
 800b2be:	370c      	adds	r7, #12
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c6:	4770      	bx	lr

0800b2c8 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800b2c8:	b480      	push	{r7}
 800b2ca:	b083      	sub	sp, #12
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800b2d0:	bf00      	nop
 800b2d2:	370c      	adds	r7, #12
 800b2d4:	46bd      	mov	sp, r7
 800b2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2da:	4770      	bx	lr

0800b2dc <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800b2dc:	b480      	push	{r7}
 800b2de:	b083      	sub	sp, #12
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800b2e4:	bf00      	nop
 800b2e6:	370c      	adds	r7, #12
 800b2e8:	46bd      	mov	sp, r7
 800b2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ee:	4770      	bx	lr

0800b2f0 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800b2f0:	b480      	push	{r7}
 800b2f2:	b083      	sub	sp, #12
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b2fe:	b2db      	uxtb	r3, r3
}
 800b300:	4618      	mov	r0, r3
 800b302:	370c      	adds	r7, #12
 800b304:	46bd      	mov	sp, r7
 800b306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30a:	4770      	bx	lr

0800b30c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b30c:	b580      	push	{r7, lr}
 800b30e:	b086      	sub	sp, #24
 800b310:	af00      	add	r7, sp, #0
 800b312:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b318:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b31a:	f7fa fe3f 	bl	8005f9c <HAL_GetTick>
 800b31e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	f003 0320 	and.w	r3, r3, #32
 800b32a:	2b20      	cmp	r3, #32
 800b32c:	d03b      	beq.n	800b3a6 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800b32e:	697b      	ldr	r3, [r7, #20]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	685a      	ldr	r2, [r3, #4]
 800b334:	697b      	ldr	r3, [r7, #20]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	f022 0220 	bic.w	r2, r2, #32
 800b33c:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800b33e:	697b      	ldr	r3, [r7, #20]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	685a      	ldr	r2, [r3, #4]
 800b344:	697b      	ldr	r3, [r7, #20]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	f022 0202 	bic.w	r2, r2, #2
 800b34c:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800b34e:	693a      	ldr	r2, [r7, #16]
 800b350:	2164      	movs	r1, #100	; 0x64
 800b352:	6978      	ldr	r0, [r7, #20]
 800b354:	f000 fa9e 	bl	800b894 <SPI_EndRxTxTransaction>
 800b358:	4603      	mov	r3, r0
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d005      	beq.n	800b36a <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b35e:	697b      	ldr	r3, [r7, #20]
 800b360:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b362:	f043 0220 	orr.w	r2, r3, #32
 800b366:	697b      	ldr	r3, [r7, #20]
 800b368:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b36a:	697b      	ldr	r3, [r7, #20]
 800b36c:	689b      	ldr	r3, [r3, #8]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d10a      	bne.n	800b388 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b372:	2300      	movs	r3, #0
 800b374:	60fb      	str	r3, [r7, #12]
 800b376:	697b      	ldr	r3, [r7, #20]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	68db      	ldr	r3, [r3, #12]
 800b37c:	60fb      	str	r3, [r7, #12]
 800b37e:	697b      	ldr	r3, [r7, #20]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	689b      	ldr	r3, [r3, #8]
 800b384:	60fb      	str	r3, [r7, #12]
 800b386:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800b388:	697b      	ldr	r3, [r7, #20]
 800b38a:	2200      	movs	r2, #0
 800b38c:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800b38e:	697b      	ldr	r3, [r7, #20]
 800b390:	2201      	movs	r2, #1
 800b392:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b396:	697b      	ldr	r3, [r7, #20]
 800b398:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d003      	beq.n	800b3a6 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800b39e:	6978      	ldr	r0, [r7, #20]
 800b3a0:	f7f8 ff00 	bl	80041a4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800b3a4:	e002      	b.n	800b3ac <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800b3a6:	6978      	ldr	r0, [r7, #20]
 800b3a8:	f7f8 fee5 	bl	8004176 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b3ac:	3718      	adds	r7, #24
 800b3ae:	46bd      	mov	sp, r7
 800b3b0:	bd80      	pop	{r7, pc}

0800b3b2 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b3b2:	b580      	push	{r7, lr}
 800b3b4:	b084      	sub	sp, #16
 800b3b6:	af00      	add	r7, sp, #0
 800b3b8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3be:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b3c0:	f7fa fdec 	bl	8005f9c <HAL_GetTick>
 800b3c4:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	f003 0320 	and.w	r3, r3, #32
 800b3d0:	2b20      	cmp	r3, #32
 800b3d2:	d03c      	beq.n	800b44e <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	685a      	ldr	r2, [r3, #4]
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	f022 0220 	bic.w	r2, r2, #32
 800b3e2:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	689b      	ldr	r3, [r3, #8]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d10d      	bne.n	800b408 <SPI_DMAReceiveCplt+0x56>
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	685b      	ldr	r3, [r3, #4]
 800b3f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b3f4:	d108      	bne.n	800b408 <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	685a      	ldr	r2, [r3, #4]
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	f022 0203 	bic.w	r2, r2, #3
 800b404:	605a      	str	r2, [r3, #4]
 800b406:	e007      	b.n	800b418 <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	685a      	ldr	r2, [r3, #4]
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	f022 0201 	bic.w	r2, r2, #1
 800b416:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800b418:	68ba      	ldr	r2, [r7, #8]
 800b41a:	2164      	movs	r1, #100	; 0x64
 800b41c:	68f8      	ldr	r0, [r7, #12]
 800b41e:	f000 f9e1 	bl	800b7e4 <SPI_EndRxTransaction>
 800b422:	4603      	mov	r3, r0
 800b424:	2b00      	cmp	r3, #0
 800b426:	d002      	beq.n	800b42e <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	2220      	movs	r2, #32
 800b42c:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	2200      	movs	r2, #0
 800b432:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	2201      	movs	r2, #1
 800b43a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b442:	2b00      	cmp	r3, #0
 800b444:	d003      	beq.n	800b44e <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800b446:	68f8      	ldr	r0, [r7, #12]
 800b448:	f7f8 feac 	bl	80041a4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800b44c:	e002      	b.n	800b454 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800b44e:	68f8      	ldr	r0, [r7, #12]
 800b450:	f7f8 fe86 	bl	8004160 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b454:	3710      	adds	r7, #16
 800b456:	46bd      	mov	sp, r7
 800b458:	bd80      	pop	{r7, pc}

0800b45a <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b45a:	b580      	push	{r7, lr}
 800b45c:	b084      	sub	sp, #16
 800b45e:	af00      	add	r7, sp, #0
 800b460:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b466:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b468:	f7fa fd98 	bl	8005f9c <HAL_GetTick>
 800b46c:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	f003 0320 	and.w	r3, r3, #32
 800b478:	2b20      	cmp	r3, #32
 800b47a:	d030      	beq.n	800b4de <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	685a      	ldr	r2, [r3, #4]
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	f022 0220 	bic.w	r2, r2, #32
 800b48a:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800b48c:	68ba      	ldr	r2, [r7, #8]
 800b48e:	2164      	movs	r1, #100	; 0x64
 800b490:	68f8      	ldr	r0, [r7, #12]
 800b492:	f000 f9ff 	bl	800b894 <SPI_EndRxTxTransaction>
 800b496:	4603      	mov	r3, r0
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d005      	beq.n	800b4a8 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b4a0:	f043 0220 	orr.w	r2, r3, #32
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	685a      	ldr	r2, [r3, #4]
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	f022 0203 	bic.w	r2, r2, #3
 800b4b6:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	2200      	movs	r2, #0
 800b4c2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	2201      	movs	r2, #1
 800b4ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d003      	beq.n	800b4de <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800b4d6:	68f8      	ldr	r0, [r7, #12]
 800b4d8:	f7f8 fe64 	bl	80041a4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800b4dc:	e002      	b.n	800b4e4 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800b4de:	68f8      	ldr	r0, [r7, #12]
 800b4e0:	f7f8 fe54 	bl	800418c <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b4e4:	3710      	adds	r7, #16
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	bd80      	pop	{r7, pc}

0800b4ea <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b4ea:	b580      	push	{r7, lr}
 800b4ec:	b084      	sub	sp, #16
 800b4ee:	af00      	add	r7, sp, #0
 800b4f0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4f6:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800b4f8:	68f8      	ldr	r0, [r7, #12]
 800b4fa:	f7ff fedb 	bl	800b2b4 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b4fe:	bf00      	nop
 800b500:	3710      	adds	r7, #16
 800b502:	46bd      	mov	sp, r7
 800b504:	bd80      	pop	{r7, pc}

0800b506 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b506:	b580      	push	{r7, lr}
 800b508:	b084      	sub	sp, #16
 800b50a:	af00      	add	r7, sp, #0
 800b50c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b512:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800b514:	68f8      	ldr	r0, [r7, #12]
 800b516:	f7ff fed7 	bl	800b2c8 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b51a:	bf00      	nop
 800b51c:	3710      	adds	r7, #16
 800b51e:	46bd      	mov	sp, r7
 800b520:	bd80      	pop	{r7, pc}

0800b522 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b522:	b580      	push	{r7, lr}
 800b524:	b084      	sub	sp, #16
 800b526:	af00      	add	r7, sp, #0
 800b528:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b52e:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800b530:	68f8      	ldr	r0, [r7, #12]
 800b532:	f7ff fed3 	bl	800b2dc <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b536:	bf00      	nop
 800b538:	3710      	adds	r7, #16
 800b53a:	46bd      	mov	sp, r7
 800b53c:	bd80      	pop	{r7, pc}

0800b53e <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800b53e:	b580      	push	{r7, lr}
 800b540:	b084      	sub	sp, #16
 800b542:	af00      	add	r7, sp, #0
 800b544:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b54a:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	685a      	ldr	r2, [r3, #4]
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	f022 0203 	bic.w	r2, r2, #3
 800b55a:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b560:	f043 0210 	orr.w	r2, r3, #16
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	2201      	movs	r2, #1
 800b56c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800b570:	68f8      	ldr	r0, [r7, #12]
 800b572:	f7f8 fe17 	bl	80041a4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b576:	bf00      	nop
 800b578:	3710      	adds	r7, #16
 800b57a:	46bd      	mov	sp, r7
 800b57c:	bd80      	pop	{r7, pc}

0800b57e <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b57e:	b580      	push	{r7, lr}
 800b580:	b084      	sub	sp, #16
 800b582:	af00      	add	r7, sp, #0
 800b584:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b58a:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	2200      	movs	r2, #0
 800b590:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	2200      	movs	r2, #0
 800b598:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800b59a:	68f8      	ldr	r0, [r7, #12]
 800b59c:	f7f8 fe02 	bl	80041a4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b5a0:	bf00      	nop
 800b5a2:	3710      	adds	r7, #16
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	bd80      	pop	{r7, pc}

0800b5a8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b5a8:	b580      	push	{r7, lr}
 800b5aa:	b088      	sub	sp, #32
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	60f8      	str	r0, [r7, #12]
 800b5b0:	60b9      	str	r1, [r7, #8]
 800b5b2:	603b      	str	r3, [r7, #0]
 800b5b4:	4613      	mov	r3, r2
 800b5b6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800b5b8:	f7fa fcf0 	bl	8005f9c <HAL_GetTick>
 800b5bc:	4602      	mov	r2, r0
 800b5be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5c0:	1a9b      	subs	r3, r3, r2
 800b5c2:	683a      	ldr	r2, [r7, #0]
 800b5c4:	4413      	add	r3, r2
 800b5c6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800b5c8:	f7fa fce8 	bl	8005f9c <HAL_GetTick>
 800b5cc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800b5ce:	4b39      	ldr	r3, [pc, #228]	; (800b6b4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	015b      	lsls	r3, r3, #5
 800b5d4:	0d1b      	lsrs	r3, r3, #20
 800b5d6:	69fa      	ldr	r2, [r7, #28]
 800b5d8:	fb02 f303 	mul.w	r3, r2, r3
 800b5dc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b5de:	e054      	b.n	800b68a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b5e0:	683b      	ldr	r3, [r7, #0]
 800b5e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b5e6:	d050      	beq.n	800b68a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b5e8:	f7fa fcd8 	bl	8005f9c <HAL_GetTick>
 800b5ec:	4602      	mov	r2, r0
 800b5ee:	69bb      	ldr	r3, [r7, #24]
 800b5f0:	1ad3      	subs	r3, r2, r3
 800b5f2:	69fa      	ldr	r2, [r7, #28]
 800b5f4:	429a      	cmp	r2, r3
 800b5f6:	d902      	bls.n	800b5fe <SPI_WaitFlagStateUntilTimeout+0x56>
 800b5f8:	69fb      	ldr	r3, [r7, #28]
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d13d      	bne.n	800b67a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	685a      	ldr	r2, [r3, #4]
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b60c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	685b      	ldr	r3, [r3, #4]
 800b612:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b616:	d111      	bne.n	800b63c <SPI_WaitFlagStateUntilTimeout+0x94>
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	689b      	ldr	r3, [r3, #8]
 800b61c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b620:	d004      	beq.n	800b62c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	689b      	ldr	r3, [r3, #8]
 800b626:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b62a:	d107      	bne.n	800b63c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	681a      	ldr	r2, [r3, #0]
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b63a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b640:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b644:	d10f      	bne.n	800b666 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	681a      	ldr	r2, [r3, #0]
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b654:	601a      	str	r2, [r3, #0]
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	681a      	ldr	r2, [r3, #0]
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b664:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	2201      	movs	r2, #1
 800b66a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	2200      	movs	r2, #0
 800b672:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800b676:	2303      	movs	r3, #3
 800b678:	e017      	b.n	800b6aa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b67a:	697b      	ldr	r3, [r7, #20]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d101      	bne.n	800b684 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800b680:	2300      	movs	r3, #0
 800b682:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800b684:	697b      	ldr	r3, [r7, #20]
 800b686:	3b01      	subs	r3, #1
 800b688:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	689a      	ldr	r2, [r3, #8]
 800b690:	68bb      	ldr	r3, [r7, #8]
 800b692:	4013      	ands	r3, r2
 800b694:	68ba      	ldr	r2, [r7, #8]
 800b696:	429a      	cmp	r2, r3
 800b698:	bf0c      	ite	eq
 800b69a:	2301      	moveq	r3, #1
 800b69c:	2300      	movne	r3, #0
 800b69e:	b2db      	uxtb	r3, r3
 800b6a0:	461a      	mov	r2, r3
 800b6a2:	79fb      	ldrb	r3, [r7, #7]
 800b6a4:	429a      	cmp	r2, r3
 800b6a6:	d19b      	bne.n	800b5e0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800b6a8:	2300      	movs	r3, #0
}
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	3720      	adds	r7, #32
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	bd80      	pop	{r7, pc}
 800b6b2:	bf00      	nop
 800b6b4:	200001e0 	.word	0x200001e0

0800b6b8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b6b8:	b580      	push	{r7, lr}
 800b6ba:	b08a      	sub	sp, #40	; 0x28
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	60f8      	str	r0, [r7, #12]
 800b6c0:	60b9      	str	r1, [r7, #8]
 800b6c2:	607a      	str	r2, [r7, #4]
 800b6c4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800b6c6:	2300      	movs	r3, #0
 800b6c8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800b6ca:	f7fa fc67 	bl	8005f9c <HAL_GetTick>
 800b6ce:	4602      	mov	r2, r0
 800b6d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6d2:	1a9b      	subs	r3, r3, r2
 800b6d4:	683a      	ldr	r2, [r7, #0]
 800b6d6:	4413      	add	r3, r2
 800b6d8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800b6da:	f7fa fc5f 	bl	8005f9c <HAL_GetTick>
 800b6de:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	330c      	adds	r3, #12
 800b6e6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800b6e8:	4b3d      	ldr	r3, [pc, #244]	; (800b7e0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800b6ea:	681a      	ldr	r2, [r3, #0]
 800b6ec:	4613      	mov	r3, r2
 800b6ee:	009b      	lsls	r3, r3, #2
 800b6f0:	4413      	add	r3, r2
 800b6f2:	00da      	lsls	r2, r3, #3
 800b6f4:	1ad3      	subs	r3, r2, r3
 800b6f6:	0d1b      	lsrs	r3, r3, #20
 800b6f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6fa:	fb02 f303 	mul.w	r3, r2, r3
 800b6fe:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800b700:	e060      	b.n	800b7c4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800b702:	68bb      	ldr	r3, [r7, #8]
 800b704:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800b708:	d107      	bne.n	800b71a <SPI_WaitFifoStateUntilTimeout+0x62>
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d104      	bne.n	800b71a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800b710:	69fb      	ldr	r3, [r7, #28]
 800b712:	781b      	ldrb	r3, [r3, #0]
 800b714:	b2db      	uxtb	r3, r3
 800b716:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800b718:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800b71a:	683b      	ldr	r3, [r7, #0]
 800b71c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b720:	d050      	beq.n	800b7c4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b722:	f7fa fc3b 	bl	8005f9c <HAL_GetTick>
 800b726:	4602      	mov	r2, r0
 800b728:	6a3b      	ldr	r3, [r7, #32]
 800b72a:	1ad3      	subs	r3, r2, r3
 800b72c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b72e:	429a      	cmp	r2, r3
 800b730:	d902      	bls.n	800b738 <SPI_WaitFifoStateUntilTimeout+0x80>
 800b732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b734:	2b00      	cmp	r3, #0
 800b736:	d13d      	bne.n	800b7b4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	685a      	ldr	r2, [r3, #4]
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b746:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	685b      	ldr	r3, [r3, #4]
 800b74c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b750:	d111      	bne.n	800b776 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	689b      	ldr	r3, [r3, #8]
 800b756:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b75a:	d004      	beq.n	800b766 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	689b      	ldr	r3, [r3, #8]
 800b760:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b764:	d107      	bne.n	800b776 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	681a      	ldr	r2, [r3, #0]
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b774:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b77a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b77e:	d10f      	bne.n	800b7a0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	681a      	ldr	r2, [r3, #0]
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b78e:	601a      	str	r2, [r3, #0]
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	681a      	ldr	r2, [r3, #0]
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b79e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	2201      	movs	r2, #1
 800b7a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800b7b0:	2303      	movs	r3, #3
 800b7b2:	e010      	b.n	800b7d6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b7b4:	69bb      	ldr	r3, [r7, #24]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d101      	bne.n	800b7be <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800b7be:	69bb      	ldr	r3, [r7, #24]
 800b7c0:	3b01      	subs	r3, #1
 800b7c2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	689a      	ldr	r2, [r3, #8]
 800b7ca:	68bb      	ldr	r3, [r7, #8]
 800b7cc:	4013      	ands	r3, r2
 800b7ce:	687a      	ldr	r2, [r7, #4]
 800b7d0:	429a      	cmp	r2, r3
 800b7d2:	d196      	bne.n	800b702 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800b7d4:	2300      	movs	r3, #0
}
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	3728      	adds	r7, #40	; 0x28
 800b7da:	46bd      	mov	sp, r7
 800b7dc:	bd80      	pop	{r7, pc}
 800b7de:	bf00      	nop
 800b7e0:	200001e0 	.word	0x200001e0

0800b7e4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800b7e4:	b580      	push	{r7, lr}
 800b7e6:	b086      	sub	sp, #24
 800b7e8:	af02      	add	r7, sp, #8
 800b7ea:	60f8      	str	r0, [r7, #12]
 800b7ec:	60b9      	str	r1, [r7, #8]
 800b7ee:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	685b      	ldr	r3, [r3, #4]
 800b7f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b7f8:	d111      	bne.n	800b81e <SPI_EndRxTransaction+0x3a>
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	689b      	ldr	r3, [r3, #8]
 800b7fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b802:	d004      	beq.n	800b80e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	689b      	ldr	r3, [r3, #8]
 800b808:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b80c:	d107      	bne.n	800b81e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	681a      	ldr	r2, [r3, #0]
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b81c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	9300      	str	r3, [sp, #0]
 800b822:	68bb      	ldr	r3, [r7, #8]
 800b824:	2200      	movs	r2, #0
 800b826:	2180      	movs	r1, #128	; 0x80
 800b828:	68f8      	ldr	r0, [r7, #12]
 800b82a:	f7ff febd 	bl	800b5a8 <SPI_WaitFlagStateUntilTimeout>
 800b82e:	4603      	mov	r3, r0
 800b830:	2b00      	cmp	r3, #0
 800b832:	d007      	beq.n	800b844 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b838:	f043 0220 	orr.w	r2, r3, #32
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800b840:	2303      	movs	r3, #3
 800b842:	e023      	b.n	800b88c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	685b      	ldr	r3, [r3, #4]
 800b848:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b84c:	d11d      	bne.n	800b88a <SPI_EndRxTransaction+0xa6>
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	689b      	ldr	r3, [r3, #8]
 800b852:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b856:	d004      	beq.n	800b862 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	689b      	ldr	r3, [r3, #8]
 800b85c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b860:	d113      	bne.n	800b88a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	9300      	str	r3, [sp, #0]
 800b866:	68bb      	ldr	r3, [r7, #8]
 800b868:	2200      	movs	r2, #0
 800b86a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800b86e:	68f8      	ldr	r0, [r7, #12]
 800b870:	f7ff ff22 	bl	800b6b8 <SPI_WaitFifoStateUntilTimeout>
 800b874:	4603      	mov	r3, r0
 800b876:	2b00      	cmp	r3, #0
 800b878:	d007      	beq.n	800b88a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b87e:	f043 0220 	orr.w	r2, r3, #32
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800b886:	2303      	movs	r3, #3
 800b888:	e000      	b.n	800b88c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800b88a:	2300      	movs	r3, #0
}
 800b88c:	4618      	mov	r0, r3
 800b88e:	3710      	adds	r7, #16
 800b890:	46bd      	mov	sp, r7
 800b892:	bd80      	pop	{r7, pc}

0800b894 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b894:	b580      	push	{r7, lr}
 800b896:	b086      	sub	sp, #24
 800b898:	af02      	add	r7, sp, #8
 800b89a:	60f8      	str	r0, [r7, #12]
 800b89c:	60b9      	str	r1, [r7, #8]
 800b89e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	9300      	str	r3, [sp, #0]
 800b8a4:	68bb      	ldr	r3, [r7, #8]
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800b8ac:	68f8      	ldr	r0, [r7, #12]
 800b8ae:	f7ff ff03 	bl	800b6b8 <SPI_WaitFifoStateUntilTimeout>
 800b8b2:	4603      	mov	r3, r0
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d007      	beq.n	800b8c8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b8bc:	f043 0220 	orr.w	r2, r3, #32
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800b8c4:	2303      	movs	r3, #3
 800b8c6:	e027      	b.n	800b918 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	9300      	str	r3, [sp, #0]
 800b8cc:	68bb      	ldr	r3, [r7, #8]
 800b8ce:	2200      	movs	r2, #0
 800b8d0:	2180      	movs	r1, #128	; 0x80
 800b8d2:	68f8      	ldr	r0, [r7, #12]
 800b8d4:	f7ff fe68 	bl	800b5a8 <SPI_WaitFlagStateUntilTimeout>
 800b8d8:	4603      	mov	r3, r0
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d007      	beq.n	800b8ee <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b8e2:	f043 0220 	orr.w	r2, r3, #32
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800b8ea:	2303      	movs	r3, #3
 800b8ec:	e014      	b.n	800b918 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	9300      	str	r3, [sp, #0]
 800b8f2:	68bb      	ldr	r3, [r7, #8]
 800b8f4:	2200      	movs	r2, #0
 800b8f6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800b8fa:	68f8      	ldr	r0, [r7, #12]
 800b8fc:	f7ff fedc 	bl	800b6b8 <SPI_WaitFifoStateUntilTimeout>
 800b900:	4603      	mov	r3, r0
 800b902:	2b00      	cmp	r3, #0
 800b904:	d007      	beq.n	800b916 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b90a:	f043 0220 	orr.w	r2, r3, #32
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800b912:	2303      	movs	r3, #3
 800b914:	e000      	b.n	800b918 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800b916:	2300      	movs	r3, #0
}
 800b918:	4618      	mov	r0, r3
 800b91a:	3710      	adds	r7, #16
 800b91c:	46bd      	mov	sp, r7
 800b91e:	bd80      	pop	{r7, pc}

0800b920 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b920:	b580      	push	{r7, lr}
 800b922:	b082      	sub	sp, #8
 800b924:	af00      	add	r7, sp, #0
 800b926:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d101      	bne.n	800b932 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b92e:	2301      	movs	r3, #1
 800b930:	e049      	b.n	800b9c6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b938:	b2db      	uxtb	r3, r3
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d106      	bne.n	800b94c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	2200      	movs	r2, #0
 800b942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b946:	6878      	ldr	r0, [r7, #4]
 800b948:	f7f9 fb06 	bl	8004f58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	2202      	movs	r2, #2
 800b950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	681a      	ldr	r2, [r3, #0]
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	3304      	adds	r3, #4
 800b95c:	4619      	mov	r1, r3
 800b95e:	4610      	mov	r0, r2
 800b960:	f000 fae6 	bl	800bf30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	2201      	movs	r2, #1
 800b968:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	2201      	movs	r2, #1
 800b970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	2201      	movs	r2, #1
 800b978:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	2201      	movs	r2, #1
 800b980:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	2201      	movs	r2, #1
 800b988:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	2201      	movs	r2, #1
 800b990:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	2201      	movs	r2, #1
 800b998:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	2201      	movs	r2, #1
 800b9a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	2201      	movs	r2, #1
 800b9a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	2201      	movs	r2, #1
 800b9b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	2201      	movs	r2, #1
 800b9b8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	2201      	movs	r2, #1
 800b9c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b9c4:	2300      	movs	r3, #0
}
 800b9c6:	4618      	mov	r0, r3
 800b9c8:	3708      	adds	r7, #8
 800b9ca:	46bd      	mov	sp, r7
 800b9cc:	bd80      	pop	{r7, pc}
	...

0800b9d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b9d0:	b480      	push	{r7}
 800b9d2:	b085      	sub	sp, #20
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b9de:	b2db      	uxtb	r3, r3
 800b9e0:	2b01      	cmp	r3, #1
 800b9e2:	d001      	beq.n	800b9e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b9e4:	2301      	movs	r3, #1
 800b9e6:	e04f      	b.n	800ba88 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	2202      	movs	r2, #2
 800b9ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	68da      	ldr	r2, [r3, #12]
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	f042 0201 	orr.w	r2, r2, #1
 800b9fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	4a23      	ldr	r2, [pc, #140]	; (800ba94 <HAL_TIM_Base_Start_IT+0xc4>)
 800ba06:	4293      	cmp	r3, r2
 800ba08:	d01d      	beq.n	800ba46 <HAL_TIM_Base_Start_IT+0x76>
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba12:	d018      	beq.n	800ba46 <HAL_TIM_Base_Start_IT+0x76>
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	4a1f      	ldr	r2, [pc, #124]	; (800ba98 <HAL_TIM_Base_Start_IT+0xc8>)
 800ba1a:	4293      	cmp	r3, r2
 800ba1c:	d013      	beq.n	800ba46 <HAL_TIM_Base_Start_IT+0x76>
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	4a1e      	ldr	r2, [pc, #120]	; (800ba9c <HAL_TIM_Base_Start_IT+0xcc>)
 800ba24:	4293      	cmp	r3, r2
 800ba26:	d00e      	beq.n	800ba46 <HAL_TIM_Base_Start_IT+0x76>
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	4a1c      	ldr	r2, [pc, #112]	; (800baa0 <HAL_TIM_Base_Start_IT+0xd0>)
 800ba2e:	4293      	cmp	r3, r2
 800ba30:	d009      	beq.n	800ba46 <HAL_TIM_Base_Start_IT+0x76>
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	4a1b      	ldr	r2, [pc, #108]	; (800baa4 <HAL_TIM_Base_Start_IT+0xd4>)
 800ba38:	4293      	cmp	r3, r2
 800ba3a:	d004      	beq.n	800ba46 <HAL_TIM_Base_Start_IT+0x76>
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	4a19      	ldr	r2, [pc, #100]	; (800baa8 <HAL_TIM_Base_Start_IT+0xd8>)
 800ba42:	4293      	cmp	r3, r2
 800ba44:	d115      	bne.n	800ba72 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	689a      	ldr	r2, [r3, #8]
 800ba4c:	4b17      	ldr	r3, [pc, #92]	; (800baac <HAL_TIM_Base_Start_IT+0xdc>)
 800ba4e:	4013      	ands	r3, r2
 800ba50:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	2b06      	cmp	r3, #6
 800ba56:	d015      	beq.n	800ba84 <HAL_TIM_Base_Start_IT+0xb4>
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ba5e:	d011      	beq.n	800ba84 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	681a      	ldr	r2, [r3, #0]
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	f042 0201 	orr.w	r2, r2, #1
 800ba6e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba70:	e008      	b.n	800ba84 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	681a      	ldr	r2, [r3, #0]
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	f042 0201 	orr.w	r2, r2, #1
 800ba80:	601a      	str	r2, [r3, #0]
 800ba82:	e000      	b.n	800ba86 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba84:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ba86:	2300      	movs	r3, #0
}
 800ba88:	4618      	mov	r0, r3
 800ba8a:	3714      	adds	r7, #20
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba92:	4770      	bx	lr
 800ba94:	40012c00 	.word	0x40012c00
 800ba98:	40000400 	.word	0x40000400
 800ba9c:	40000800 	.word	0x40000800
 800baa0:	40000c00 	.word	0x40000c00
 800baa4:	40013400 	.word	0x40013400
 800baa8:	40014000 	.word	0x40014000
 800baac:	00010007 	.word	0x00010007

0800bab0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800bab0:	b480      	push	{r7}
 800bab2:	b083      	sub	sp, #12
 800bab4:	af00      	add	r7, sp, #0
 800bab6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	68da      	ldr	r2, [r3, #12]
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	f022 0201 	bic.w	r2, r2, #1
 800bac6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	6a1a      	ldr	r2, [r3, #32]
 800bace:	f241 1311 	movw	r3, #4369	; 0x1111
 800bad2:	4013      	ands	r3, r2
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d10f      	bne.n	800baf8 <HAL_TIM_Base_Stop_IT+0x48>
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	6a1a      	ldr	r2, [r3, #32]
 800bade:	f240 4344 	movw	r3, #1092	; 0x444
 800bae2:	4013      	ands	r3, r2
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d107      	bne.n	800baf8 <HAL_TIM_Base_Stop_IT+0x48>
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	681a      	ldr	r2, [r3, #0]
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	f022 0201 	bic.w	r2, r2, #1
 800baf6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	2201      	movs	r2, #1
 800bafc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800bb00:	2300      	movs	r3, #0
}
 800bb02:	4618      	mov	r0, r3
 800bb04:	370c      	adds	r7, #12
 800bb06:	46bd      	mov	sp, r7
 800bb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0c:	4770      	bx	lr

0800bb0e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bb0e:	b580      	push	{r7, lr}
 800bb10:	b082      	sub	sp, #8
 800bb12:	af00      	add	r7, sp, #0
 800bb14:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	691b      	ldr	r3, [r3, #16]
 800bb1c:	f003 0302 	and.w	r3, r3, #2
 800bb20:	2b02      	cmp	r3, #2
 800bb22:	d122      	bne.n	800bb6a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	68db      	ldr	r3, [r3, #12]
 800bb2a:	f003 0302 	and.w	r3, r3, #2
 800bb2e:	2b02      	cmp	r3, #2
 800bb30:	d11b      	bne.n	800bb6a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	f06f 0202 	mvn.w	r2, #2
 800bb3a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	2201      	movs	r2, #1
 800bb40:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	699b      	ldr	r3, [r3, #24]
 800bb48:	f003 0303 	and.w	r3, r3, #3
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d003      	beq.n	800bb58 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bb50:	6878      	ldr	r0, [r7, #4]
 800bb52:	f000 f9ce 	bl	800bef2 <HAL_TIM_IC_CaptureCallback>
 800bb56:	e005      	b.n	800bb64 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb58:	6878      	ldr	r0, [r7, #4]
 800bb5a:	f000 f9c0 	bl	800bede <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb5e:	6878      	ldr	r0, [r7, #4]
 800bb60:	f000 f9d1 	bl	800bf06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	2200      	movs	r2, #0
 800bb68:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	691b      	ldr	r3, [r3, #16]
 800bb70:	f003 0304 	and.w	r3, r3, #4
 800bb74:	2b04      	cmp	r3, #4
 800bb76:	d122      	bne.n	800bbbe <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	68db      	ldr	r3, [r3, #12]
 800bb7e:	f003 0304 	and.w	r3, r3, #4
 800bb82:	2b04      	cmp	r3, #4
 800bb84:	d11b      	bne.n	800bbbe <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	f06f 0204 	mvn.w	r2, #4
 800bb8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	2202      	movs	r2, #2
 800bb94:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	699b      	ldr	r3, [r3, #24]
 800bb9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d003      	beq.n	800bbac <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bba4:	6878      	ldr	r0, [r7, #4]
 800bba6:	f000 f9a4 	bl	800bef2 <HAL_TIM_IC_CaptureCallback>
 800bbaa:	e005      	b.n	800bbb8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bbac:	6878      	ldr	r0, [r7, #4]
 800bbae:	f000 f996 	bl	800bede <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bbb2:	6878      	ldr	r0, [r7, #4]
 800bbb4:	f000 f9a7 	bl	800bf06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	2200      	movs	r2, #0
 800bbbc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	691b      	ldr	r3, [r3, #16]
 800bbc4:	f003 0308 	and.w	r3, r3, #8
 800bbc8:	2b08      	cmp	r3, #8
 800bbca:	d122      	bne.n	800bc12 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	68db      	ldr	r3, [r3, #12]
 800bbd2:	f003 0308 	and.w	r3, r3, #8
 800bbd6:	2b08      	cmp	r3, #8
 800bbd8:	d11b      	bne.n	800bc12 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	f06f 0208 	mvn.w	r2, #8
 800bbe2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	2204      	movs	r2, #4
 800bbe8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	69db      	ldr	r3, [r3, #28]
 800bbf0:	f003 0303 	and.w	r3, r3, #3
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d003      	beq.n	800bc00 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bbf8:	6878      	ldr	r0, [r7, #4]
 800bbfa:	f000 f97a 	bl	800bef2 <HAL_TIM_IC_CaptureCallback>
 800bbfe:	e005      	b.n	800bc0c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bc00:	6878      	ldr	r0, [r7, #4]
 800bc02:	f000 f96c 	bl	800bede <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bc06:	6878      	ldr	r0, [r7, #4]
 800bc08:	f000 f97d 	bl	800bf06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	2200      	movs	r2, #0
 800bc10:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	691b      	ldr	r3, [r3, #16]
 800bc18:	f003 0310 	and.w	r3, r3, #16
 800bc1c:	2b10      	cmp	r3, #16
 800bc1e:	d122      	bne.n	800bc66 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	68db      	ldr	r3, [r3, #12]
 800bc26:	f003 0310 	and.w	r3, r3, #16
 800bc2a:	2b10      	cmp	r3, #16
 800bc2c:	d11b      	bne.n	800bc66 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	f06f 0210 	mvn.w	r2, #16
 800bc36:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	2208      	movs	r2, #8
 800bc3c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	69db      	ldr	r3, [r3, #28]
 800bc44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d003      	beq.n	800bc54 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bc4c:	6878      	ldr	r0, [r7, #4]
 800bc4e:	f000 f950 	bl	800bef2 <HAL_TIM_IC_CaptureCallback>
 800bc52:	e005      	b.n	800bc60 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bc54:	6878      	ldr	r0, [r7, #4]
 800bc56:	f000 f942 	bl	800bede <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bc5a:	6878      	ldr	r0, [r7, #4]
 800bc5c:	f000 f953 	bl	800bf06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	2200      	movs	r2, #0
 800bc64:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	691b      	ldr	r3, [r3, #16]
 800bc6c:	f003 0301 	and.w	r3, r3, #1
 800bc70:	2b01      	cmp	r3, #1
 800bc72:	d10e      	bne.n	800bc92 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	68db      	ldr	r3, [r3, #12]
 800bc7a:	f003 0301 	and.w	r3, r3, #1
 800bc7e:	2b01      	cmp	r3, #1
 800bc80:	d107      	bne.n	800bc92 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	f06f 0201 	mvn.w	r2, #1
 800bc8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bc8c:	6878      	ldr	r0, [r7, #4]
 800bc8e:	f7f7 ff89 	bl	8003ba4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	691b      	ldr	r3, [r3, #16]
 800bc98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc9c:	2b80      	cmp	r3, #128	; 0x80
 800bc9e:	d10e      	bne.n	800bcbe <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	68db      	ldr	r3, [r3, #12]
 800bca6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bcaa:	2b80      	cmp	r3, #128	; 0x80
 800bcac:	d107      	bne.n	800bcbe <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800bcb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bcb8:	6878      	ldr	r0, [r7, #4]
 800bcba:	f000 faff 	bl	800c2bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	691b      	ldr	r3, [r3, #16]
 800bcc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bcc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bccc:	d10e      	bne.n	800bcec <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	68db      	ldr	r3, [r3, #12]
 800bcd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bcd8:	2b80      	cmp	r3, #128	; 0x80
 800bcda:	d107      	bne.n	800bcec <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800bce4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800bce6:	6878      	ldr	r0, [r7, #4]
 800bce8:	f000 faf2 	bl	800c2d0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	691b      	ldr	r3, [r3, #16]
 800bcf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcf6:	2b40      	cmp	r3, #64	; 0x40
 800bcf8:	d10e      	bne.n	800bd18 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	68db      	ldr	r3, [r3, #12]
 800bd00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd04:	2b40      	cmp	r3, #64	; 0x40
 800bd06:	d107      	bne.n	800bd18 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bd10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bd12:	6878      	ldr	r0, [r7, #4]
 800bd14:	f000 f901 	bl	800bf1a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	691b      	ldr	r3, [r3, #16]
 800bd1e:	f003 0320 	and.w	r3, r3, #32
 800bd22:	2b20      	cmp	r3, #32
 800bd24:	d10e      	bne.n	800bd44 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	68db      	ldr	r3, [r3, #12]
 800bd2c:	f003 0320 	and.w	r3, r3, #32
 800bd30:	2b20      	cmp	r3, #32
 800bd32:	d107      	bne.n	800bd44 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	f06f 0220 	mvn.w	r2, #32
 800bd3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bd3e:	6878      	ldr	r0, [r7, #4]
 800bd40:	f000 fab2 	bl	800c2a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bd44:	bf00      	nop
 800bd46:	3708      	adds	r7, #8
 800bd48:	46bd      	mov	sp, r7
 800bd4a:	bd80      	pop	{r7, pc}

0800bd4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bd4c:	b580      	push	{r7, lr}
 800bd4e:	b084      	sub	sp, #16
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	6078      	str	r0, [r7, #4]
 800bd54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bd56:	2300      	movs	r3, #0
 800bd58:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bd60:	2b01      	cmp	r3, #1
 800bd62:	d101      	bne.n	800bd68 <HAL_TIM_ConfigClockSource+0x1c>
 800bd64:	2302      	movs	r3, #2
 800bd66:	e0b6      	b.n	800bed6 <HAL_TIM_ConfigClockSource+0x18a>
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	2201      	movs	r2, #1
 800bd6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	2202      	movs	r2, #2
 800bd74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	689b      	ldr	r3, [r3, #8]
 800bd7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bd80:	68bb      	ldr	r3, [r7, #8]
 800bd82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bd86:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800bd8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bd8c:	68bb      	ldr	r3, [r7, #8]
 800bd8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bd92:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	68ba      	ldr	r2, [r7, #8]
 800bd9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bd9c:	683b      	ldr	r3, [r7, #0]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bda4:	d03e      	beq.n	800be24 <HAL_TIM_ConfigClockSource+0xd8>
 800bda6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bdaa:	f200 8087 	bhi.w	800bebc <HAL_TIM_ConfigClockSource+0x170>
 800bdae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bdb2:	f000 8086 	beq.w	800bec2 <HAL_TIM_ConfigClockSource+0x176>
 800bdb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bdba:	d87f      	bhi.n	800bebc <HAL_TIM_ConfigClockSource+0x170>
 800bdbc:	2b70      	cmp	r3, #112	; 0x70
 800bdbe:	d01a      	beq.n	800bdf6 <HAL_TIM_ConfigClockSource+0xaa>
 800bdc0:	2b70      	cmp	r3, #112	; 0x70
 800bdc2:	d87b      	bhi.n	800bebc <HAL_TIM_ConfigClockSource+0x170>
 800bdc4:	2b60      	cmp	r3, #96	; 0x60
 800bdc6:	d050      	beq.n	800be6a <HAL_TIM_ConfigClockSource+0x11e>
 800bdc8:	2b60      	cmp	r3, #96	; 0x60
 800bdca:	d877      	bhi.n	800bebc <HAL_TIM_ConfigClockSource+0x170>
 800bdcc:	2b50      	cmp	r3, #80	; 0x50
 800bdce:	d03c      	beq.n	800be4a <HAL_TIM_ConfigClockSource+0xfe>
 800bdd0:	2b50      	cmp	r3, #80	; 0x50
 800bdd2:	d873      	bhi.n	800bebc <HAL_TIM_ConfigClockSource+0x170>
 800bdd4:	2b40      	cmp	r3, #64	; 0x40
 800bdd6:	d058      	beq.n	800be8a <HAL_TIM_ConfigClockSource+0x13e>
 800bdd8:	2b40      	cmp	r3, #64	; 0x40
 800bdda:	d86f      	bhi.n	800bebc <HAL_TIM_ConfigClockSource+0x170>
 800bddc:	2b30      	cmp	r3, #48	; 0x30
 800bdde:	d064      	beq.n	800beaa <HAL_TIM_ConfigClockSource+0x15e>
 800bde0:	2b30      	cmp	r3, #48	; 0x30
 800bde2:	d86b      	bhi.n	800bebc <HAL_TIM_ConfigClockSource+0x170>
 800bde4:	2b20      	cmp	r3, #32
 800bde6:	d060      	beq.n	800beaa <HAL_TIM_ConfigClockSource+0x15e>
 800bde8:	2b20      	cmp	r3, #32
 800bdea:	d867      	bhi.n	800bebc <HAL_TIM_ConfigClockSource+0x170>
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d05c      	beq.n	800beaa <HAL_TIM_ConfigClockSource+0x15e>
 800bdf0:	2b10      	cmp	r3, #16
 800bdf2:	d05a      	beq.n	800beaa <HAL_TIM_ConfigClockSource+0x15e>
 800bdf4:	e062      	b.n	800bebc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	6818      	ldr	r0, [r3, #0]
 800bdfa:	683b      	ldr	r3, [r7, #0]
 800bdfc:	6899      	ldr	r1, [r3, #8]
 800bdfe:	683b      	ldr	r3, [r7, #0]
 800be00:	685a      	ldr	r2, [r3, #4]
 800be02:	683b      	ldr	r3, [r7, #0]
 800be04:	68db      	ldr	r3, [r3, #12]
 800be06:	f000 f9a7 	bl	800c158 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	689b      	ldr	r3, [r3, #8]
 800be10:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800be12:	68bb      	ldr	r3, [r7, #8]
 800be14:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800be18:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	68ba      	ldr	r2, [r7, #8]
 800be20:	609a      	str	r2, [r3, #8]
      break;
 800be22:	e04f      	b.n	800bec4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	6818      	ldr	r0, [r3, #0]
 800be28:	683b      	ldr	r3, [r7, #0]
 800be2a:	6899      	ldr	r1, [r3, #8]
 800be2c:	683b      	ldr	r3, [r7, #0]
 800be2e:	685a      	ldr	r2, [r3, #4]
 800be30:	683b      	ldr	r3, [r7, #0]
 800be32:	68db      	ldr	r3, [r3, #12]
 800be34:	f000 f990 	bl	800c158 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	689a      	ldr	r2, [r3, #8]
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800be46:	609a      	str	r2, [r3, #8]
      break;
 800be48:	e03c      	b.n	800bec4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	6818      	ldr	r0, [r3, #0]
 800be4e:	683b      	ldr	r3, [r7, #0]
 800be50:	6859      	ldr	r1, [r3, #4]
 800be52:	683b      	ldr	r3, [r7, #0]
 800be54:	68db      	ldr	r3, [r3, #12]
 800be56:	461a      	mov	r2, r3
 800be58:	f000 f904 	bl	800c064 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	2150      	movs	r1, #80	; 0x50
 800be62:	4618      	mov	r0, r3
 800be64:	f000 f95d 	bl	800c122 <TIM_ITRx_SetConfig>
      break;
 800be68:	e02c      	b.n	800bec4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	6818      	ldr	r0, [r3, #0]
 800be6e:	683b      	ldr	r3, [r7, #0]
 800be70:	6859      	ldr	r1, [r3, #4]
 800be72:	683b      	ldr	r3, [r7, #0]
 800be74:	68db      	ldr	r3, [r3, #12]
 800be76:	461a      	mov	r2, r3
 800be78:	f000 f923 	bl	800c0c2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	2160      	movs	r1, #96	; 0x60
 800be82:	4618      	mov	r0, r3
 800be84:	f000 f94d 	bl	800c122 <TIM_ITRx_SetConfig>
      break;
 800be88:	e01c      	b.n	800bec4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	6818      	ldr	r0, [r3, #0]
 800be8e:	683b      	ldr	r3, [r7, #0]
 800be90:	6859      	ldr	r1, [r3, #4]
 800be92:	683b      	ldr	r3, [r7, #0]
 800be94:	68db      	ldr	r3, [r3, #12]
 800be96:	461a      	mov	r2, r3
 800be98:	f000 f8e4 	bl	800c064 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	2140      	movs	r1, #64	; 0x40
 800bea2:	4618      	mov	r0, r3
 800bea4:	f000 f93d 	bl	800c122 <TIM_ITRx_SetConfig>
      break;
 800bea8:	e00c      	b.n	800bec4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	681a      	ldr	r2, [r3, #0]
 800beae:	683b      	ldr	r3, [r7, #0]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	4619      	mov	r1, r3
 800beb4:	4610      	mov	r0, r2
 800beb6:	f000 f934 	bl	800c122 <TIM_ITRx_SetConfig>
      break;
 800beba:	e003      	b.n	800bec4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800bebc:	2301      	movs	r3, #1
 800bebe:	73fb      	strb	r3, [r7, #15]
      break;
 800bec0:	e000      	b.n	800bec4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800bec2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	2201      	movs	r2, #1
 800bec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	2200      	movs	r2, #0
 800bed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800bed4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bed6:	4618      	mov	r0, r3
 800bed8:	3710      	adds	r7, #16
 800beda:	46bd      	mov	sp, r7
 800bedc:	bd80      	pop	{r7, pc}

0800bede <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bede:	b480      	push	{r7}
 800bee0:	b083      	sub	sp, #12
 800bee2:	af00      	add	r7, sp, #0
 800bee4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bee6:	bf00      	nop
 800bee8:	370c      	adds	r7, #12
 800beea:	46bd      	mov	sp, r7
 800beec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef0:	4770      	bx	lr

0800bef2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bef2:	b480      	push	{r7}
 800bef4:	b083      	sub	sp, #12
 800bef6:	af00      	add	r7, sp, #0
 800bef8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800befa:	bf00      	nop
 800befc:	370c      	adds	r7, #12
 800befe:	46bd      	mov	sp, r7
 800bf00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf04:	4770      	bx	lr

0800bf06 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bf06:	b480      	push	{r7}
 800bf08:	b083      	sub	sp, #12
 800bf0a:	af00      	add	r7, sp, #0
 800bf0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bf0e:	bf00      	nop
 800bf10:	370c      	adds	r7, #12
 800bf12:	46bd      	mov	sp, r7
 800bf14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf18:	4770      	bx	lr

0800bf1a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bf1a:	b480      	push	{r7}
 800bf1c:	b083      	sub	sp, #12
 800bf1e:	af00      	add	r7, sp, #0
 800bf20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bf22:	bf00      	nop
 800bf24:	370c      	adds	r7, #12
 800bf26:	46bd      	mov	sp, r7
 800bf28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2c:	4770      	bx	lr
	...

0800bf30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800bf30:	b480      	push	{r7}
 800bf32:	b085      	sub	sp, #20
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	6078      	str	r0, [r7, #4]
 800bf38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	4a40      	ldr	r2, [pc, #256]	; (800c044 <TIM_Base_SetConfig+0x114>)
 800bf44:	4293      	cmp	r3, r2
 800bf46:	d013      	beq.n	800bf70 <TIM_Base_SetConfig+0x40>
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bf4e:	d00f      	beq.n	800bf70 <TIM_Base_SetConfig+0x40>
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	4a3d      	ldr	r2, [pc, #244]	; (800c048 <TIM_Base_SetConfig+0x118>)
 800bf54:	4293      	cmp	r3, r2
 800bf56:	d00b      	beq.n	800bf70 <TIM_Base_SetConfig+0x40>
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	4a3c      	ldr	r2, [pc, #240]	; (800c04c <TIM_Base_SetConfig+0x11c>)
 800bf5c:	4293      	cmp	r3, r2
 800bf5e:	d007      	beq.n	800bf70 <TIM_Base_SetConfig+0x40>
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	4a3b      	ldr	r2, [pc, #236]	; (800c050 <TIM_Base_SetConfig+0x120>)
 800bf64:	4293      	cmp	r3, r2
 800bf66:	d003      	beq.n	800bf70 <TIM_Base_SetConfig+0x40>
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	4a3a      	ldr	r2, [pc, #232]	; (800c054 <TIM_Base_SetConfig+0x124>)
 800bf6c:	4293      	cmp	r3, r2
 800bf6e:	d108      	bne.n	800bf82 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bf76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bf78:	683b      	ldr	r3, [r7, #0]
 800bf7a:	685b      	ldr	r3, [r3, #4]
 800bf7c:	68fa      	ldr	r2, [r7, #12]
 800bf7e:	4313      	orrs	r3, r2
 800bf80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	4a2f      	ldr	r2, [pc, #188]	; (800c044 <TIM_Base_SetConfig+0x114>)
 800bf86:	4293      	cmp	r3, r2
 800bf88:	d01f      	beq.n	800bfca <TIM_Base_SetConfig+0x9a>
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bf90:	d01b      	beq.n	800bfca <TIM_Base_SetConfig+0x9a>
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	4a2c      	ldr	r2, [pc, #176]	; (800c048 <TIM_Base_SetConfig+0x118>)
 800bf96:	4293      	cmp	r3, r2
 800bf98:	d017      	beq.n	800bfca <TIM_Base_SetConfig+0x9a>
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	4a2b      	ldr	r2, [pc, #172]	; (800c04c <TIM_Base_SetConfig+0x11c>)
 800bf9e:	4293      	cmp	r3, r2
 800bfa0:	d013      	beq.n	800bfca <TIM_Base_SetConfig+0x9a>
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	4a2a      	ldr	r2, [pc, #168]	; (800c050 <TIM_Base_SetConfig+0x120>)
 800bfa6:	4293      	cmp	r3, r2
 800bfa8:	d00f      	beq.n	800bfca <TIM_Base_SetConfig+0x9a>
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	4a29      	ldr	r2, [pc, #164]	; (800c054 <TIM_Base_SetConfig+0x124>)
 800bfae:	4293      	cmp	r3, r2
 800bfb0:	d00b      	beq.n	800bfca <TIM_Base_SetConfig+0x9a>
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	4a28      	ldr	r2, [pc, #160]	; (800c058 <TIM_Base_SetConfig+0x128>)
 800bfb6:	4293      	cmp	r3, r2
 800bfb8:	d007      	beq.n	800bfca <TIM_Base_SetConfig+0x9a>
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	4a27      	ldr	r2, [pc, #156]	; (800c05c <TIM_Base_SetConfig+0x12c>)
 800bfbe:	4293      	cmp	r3, r2
 800bfc0:	d003      	beq.n	800bfca <TIM_Base_SetConfig+0x9a>
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	4a26      	ldr	r2, [pc, #152]	; (800c060 <TIM_Base_SetConfig+0x130>)
 800bfc6:	4293      	cmp	r3, r2
 800bfc8:	d108      	bne.n	800bfdc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bfd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bfd2:	683b      	ldr	r3, [r7, #0]
 800bfd4:	68db      	ldr	r3, [r3, #12]
 800bfd6:	68fa      	ldr	r2, [r7, #12]
 800bfd8:	4313      	orrs	r3, r2
 800bfda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bfe2:	683b      	ldr	r3, [r7, #0]
 800bfe4:	695b      	ldr	r3, [r3, #20]
 800bfe6:	4313      	orrs	r3, r2
 800bfe8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	68fa      	ldr	r2, [r7, #12]
 800bfee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bff0:	683b      	ldr	r3, [r7, #0]
 800bff2:	689a      	ldr	r2, [r3, #8]
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bff8:	683b      	ldr	r3, [r7, #0]
 800bffa:	681a      	ldr	r2, [r3, #0]
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	4a10      	ldr	r2, [pc, #64]	; (800c044 <TIM_Base_SetConfig+0x114>)
 800c004:	4293      	cmp	r3, r2
 800c006:	d00f      	beq.n	800c028 <TIM_Base_SetConfig+0xf8>
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	4a12      	ldr	r2, [pc, #72]	; (800c054 <TIM_Base_SetConfig+0x124>)
 800c00c:	4293      	cmp	r3, r2
 800c00e:	d00b      	beq.n	800c028 <TIM_Base_SetConfig+0xf8>
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	4a11      	ldr	r2, [pc, #68]	; (800c058 <TIM_Base_SetConfig+0x128>)
 800c014:	4293      	cmp	r3, r2
 800c016:	d007      	beq.n	800c028 <TIM_Base_SetConfig+0xf8>
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	4a10      	ldr	r2, [pc, #64]	; (800c05c <TIM_Base_SetConfig+0x12c>)
 800c01c:	4293      	cmp	r3, r2
 800c01e:	d003      	beq.n	800c028 <TIM_Base_SetConfig+0xf8>
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	4a0f      	ldr	r2, [pc, #60]	; (800c060 <TIM_Base_SetConfig+0x130>)
 800c024:	4293      	cmp	r3, r2
 800c026:	d103      	bne.n	800c030 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c028:	683b      	ldr	r3, [r7, #0]
 800c02a:	691a      	ldr	r2, [r3, #16]
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	2201      	movs	r2, #1
 800c034:	615a      	str	r2, [r3, #20]
}
 800c036:	bf00      	nop
 800c038:	3714      	adds	r7, #20
 800c03a:	46bd      	mov	sp, r7
 800c03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c040:	4770      	bx	lr
 800c042:	bf00      	nop
 800c044:	40012c00 	.word	0x40012c00
 800c048:	40000400 	.word	0x40000400
 800c04c:	40000800 	.word	0x40000800
 800c050:	40000c00 	.word	0x40000c00
 800c054:	40013400 	.word	0x40013400
 800c058:	40014000 	.word	0x40014000
 800c05c:	40014400 	.word	0x40014400
 800c060:	40014800 	.word	0x40014800

0800c064 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c064:	b480      	push	{r7}
 800c066:	b087      	sub	sp, #28
 800c068:	af00      	add	r7, sp, #0
 800c06a:	60f8      	str	r0, [r7, #12]
 800c06c:	60b9      	str	r1, [r7, #8]
 800c06e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	6a1b      	ldr	r3, [r3, #32]
 800c074:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	6a1b      	ldr	r3, [r3, #32]
 800c07a:	f023 0201 	bic.w	r2, r3, #1
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	699b      	ldr	r3, [r3, #24]
 800c086:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c088:	693b      	ldr	r3, [r7, #16]
 800c08a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c08e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	011b      	lsls	r3, r3, #4
 800c094:	693a      	ldr	r2, [r7, #16]
 800c096:	4313      	orrs	r3, r2
 800c098:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c09a:	697b      	ldr	r3, [r7, #20]
 800c09c:	f023 030a 	bic.w	r3, r3, #10
 800c0a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c0a2:	697a      	ldr	r2, [r7, #20]
 800c0a4:	68bb      	ldr	r3, [r7, #8]
 800c0a6:	4313      	orrs	r3, r2
 800c0a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	693a      	ldr	r2, [r7, #16]
 800c0ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	697a      	ldr	r2, [r7, #20]
 800c0b4:	621a      	str	r2, [r3, #32]
}
 800c0b6:	bf00      	nop
 800c0b8:	371c      	adds	r7, #28
 800c0ba:	46bd      	mov	sp, r7
 800c0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c0:	4770      	bx	lr

0800c0c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c0c2:	b480      	push	{r7}
 800c0c4:	b087      	sub	sp, #28
 800c0c6:	af00      	add	r7, sp, #0
 800c0c8:	60f8      	str	r0, [r7, #12]
 800c0ca:	60b9      	str	r1, [r7, #8]
 800c0cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	6a1b      	ldr	r3, [r3, #32]
 800c0d2:	f023 0210 	bic.w	r2, r3, #16
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	699b      	ldr	r3, [r3, #24]
 800c0de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	6a1b      	ldr	r3, [r3, #32]
 800c0e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c0e6:	697b      	ldr	r3, [r7, #20]
 800c0e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c0ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	031b      	lsls	r3, r3, #12
 800c0f2:	697a      	ldr	r2, [r7, #20]
 800c0f4:	4313      	orrs	r3, r2
 800c0f6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c0f8:	693b      	ldr	r3, [r7, #16]
 800c0fa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c0fe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c100:	68bb      	ldr	r3, [r7, #8]
 800c102:	011b      	lsls	r3, r3, #4
 800c104:	693a      	ldr	r2, [r7, #16]
 800c106:	4313      	orrs	r3, r2
 800c108:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	697a      	ldr	r2, [r7, #20]
 800c10e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	693a      	ldr	r2, [r7, #16]
 800c114:	621a      	str	r2, [r3, #32]
}
 800c116:	bf00      	nop
 800c118:	371c      	adds	r7, #28
 800c11a:	46bd      	mov	sp, r7
 800c11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c120:	4770      	bx	lr

0800c122 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c122:	b480      	push	{r7}
 800c124:	b085      	sub	sp, #20
 800c126:	af00      	add	r7, sp, #0
 800c128:	6078      	str	r0, [r7, #4]
 800c12a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	689b      	ldr	r3, [r3, #8]
 800c130:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c138:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c13a:	683a      	ldr	r2, [r7, #0]
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	4313      	orrs	r3, r2
 800c140:	f043 0307 	orr.w	r3, r3, #7
 800c144:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	68fa      	ldr	r2, [r7, #12]
 800c14a:	609a      	str	r2, [r3, #8]
}
 800c14c:	bf00      	nop
 800c14e:	3714      	adds	r7, #20
 800c150:	46bd      	mov	sp, r7
 800c152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c156:	4770      	bx	lr

0800c158 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c158:	b480      	push	{r7}
 800c15a:	b087      	sub	sp, #28
 800c15c:	af00      	add	r7, sp, #0
 800c15e:	60f8      	str	r0, [r7, #12]
 800c160:	60b9      	str	r1, [r7, #8]
 800c162:	607a      	str	r2, [r7, #4]
 800c164:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	689b      	ldr	r3, [r3, #8]
 800c16a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c16c:	697b      	ldr	r3, [r7, #20]
 800c16e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c172:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c174:	683b      	ldr	r3, [r7, #0]
 800c176:	021a      	lsls	r2, r3, #8
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	431a      	orrs	r2, r3
 800c17c:	68bb      	ldr	r3, [r7, #8]
 800c17e:	4313      	orrs	r3, r2
 800c180:	697a      	ldr	r2, [r7, #20]
 800c182:	4313      	orrs	r3, r2
 800c184:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	697a      	ldr	r2, [r7, #20]
 800c18a:	609a      	str	r2, [r3, #8]
}
 800c18c:	bf00      	nop
 800c18e:	371c      	adds	r7, #28
 800c190:	46bd      	mov	sp, r7
 800c192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c196:	4770      	bx	lr

0800c198 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c198:	b480      	push	{r7}
 800c19a:	b085      	sub	sp, #20
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	6078      	str	r0, [r7, #4]
 800c1a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c1a8:	2b01      	cmp	r3, #1
 800c1aa:	d101      	bne.n	800c1b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c1ac:	2302      	movs	r3, #2
 800c1ae:	e068      	b.n	800c282 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	2201      	movs	r2, #1
 800c1b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	2202      	movs	r2, #2
 800c1bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	685b      	ldr	r3, [r3, #4]
 800c1c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	689b      	ldr	r3, [r3, #8]
 800c1ce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	4a2e      	ldr	r2, [pc, #184]	; (800c290 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800c1d6:	4293      	cmp	r3, r2
 800c1d8:	d004      	beq.n	800c1e4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	4a2d      	ldr	r2, [pc, #180]	; (800c294 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800c1e0:	4293      	cmp	r3, r2
 800c1e2:	d108      	bne.n	800c1f6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c1ea:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c1ec:	683b      	ldr	r3, [r7, #0]
 800c1ee:	685b      	ldr	r3, [r3, #4]
 800c1f0:	68fa      	ldr	r2, [r7, #12]
 800c1f2:	4313      	orrs	r3, r2
 800c1f4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c1fc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c1fe:	683b      	ldr	r3, [r7, #0]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	68fa      	ldr	r2, [r7, #12]
 800c204:	4313      	orrs	r3, r2
 800c206:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	68fa      	ldr	r2, [r7, #12]
 800c20e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	4a1e      	ldr	r2, [pc, #120]	; (800c290 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800c216:	4293      	cmp	r3, r2
 800c218:	d01d      	beq.n	800c256 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c222:	d018      	beq.n	800c256 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	4a1b      	ldr	r2, [pc, #108]	; (800c298 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c22a:	4293      	cmp	r3, r2
 800c22c:	d013      	beq.n	800c256 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	4a1a      	ldr	r2, [pc, #104]	; (800c29c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c234:	4293      	cmp	r3, r2
 800c236:	d00e      	beq.n	800c256 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	4a18      	ldr	r2, [pc, #96]	; (800c2a0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800c23e:	4293      	cmp	r3, r2
 800c240:	d009      	beq.n	800c256 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	4a13      	ldr	r2, [pc, #76]	; (800c294 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800c248:	4293      	cmp	r3, r2
 800c24a:	d004      	beq.n	800c256 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	4a14      	ldr	r2, [pc, #80]	; (800c2a4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800c252:	4293      	cmp	r3, r2
 800c254:	d10c      	bne.n	800c270 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c256:	68bb      	ldr	r3, [r7, #8]
 800c258:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c25c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c25e:	683b      	ldr	r3, [r7, #0]
 800c260:	689b      	ldr	r3, [r3, #8]
 800c262:	68ba      	ldr	r2, [r7, #8]
 800c264:	4313      	orrs	r3, r2
 800c266:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	68ba      	ldr	r2, [r7, #8]
 800c26e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	2201      	movs	r2, #1
 800c274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	2200      	movs	r2, #0
 800c27c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c280:	2300      	movs	r3, #0
}
 800c282:	4618      	mov	r0, r3
 800c284:	3714      	adds	r7, #20
 800c286:	46bd      	mov	sp, r7
 800c288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c28c:	4770      	bx	lr
 800c28e:	bf00      	nop
 800c290:	40012c00 	.word	0x40012c00
 800c294:	40013400 	.word	0x40013400
 800c298:	40000400 	.word	0x40000400
 800c29c:	40000800 	.word	0x40000800
 800c2a0:	40000c00 	.word	0x40000c00
 800c2a4:	40014000 	.word	0x40014000

0800c2a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c2a8:	b480      	push	{r7}
 800c2aa:	b083      	sub	sp, #12
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c2b0:	bf00      	nop
 800c2b2:	370c      	adds	r7, #12
 800c2b4:	46bd      	mov	sp, r7
 800c2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ba:	4770      	bx	lr

0800c2bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c2bc:	b480      	push	{r7}
 800c2be:	b083      	sub	sp, #12
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c2c4:	bf00      	nop
 800c2c6:	370c      	adds	r7, #12
 800c2c8:	46bd      	mov	sp, r7
 800c2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ce:	4770      	bx	lr

0800c2d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c2d0:	b480      	push	{r7}
 800c2d2:	b083      	sub	sp, #12
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c2d8:	bf00      	nop
 800c2da:	370c      	adds	r7, #12
 800c2dc:	46bd      	mov	sp, r7
 800c2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e2:	4770      	bx	lr

0800c2e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c2e4:	b580      	push	{r7, lr}
 800c2e6:	b082      	sub	sp, #8
 800c2e8:	af00      	add	r7, sp, #0
 800c2ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d101      	bne.n	800c2f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c2f2:	2301      	movs	r3, #1
 800c2f4:	e040      	b.n	800c378 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d106      	bne.n	800c30c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	2200      	movs	r2, #0
 800c302:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c306:	6878      	ldr	r0, [r7, #4]
 800c308:	f7f8 fe4c 	bl	8004fa4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	2224      	movs	r2, #36	; 0x24
 800c310:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	681a      	ldr	r2, [r3, #0]
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	f022 0201 	bic.w	r2, r2, #1
 800c320:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c322:	6878      	ldr	r0, [r7, #4]
 800c324:	f000 fc0a 	bl	800cb3c <UART_SetConfig>
 800c328:	4603      	mov	r3, r0
 800c32a:	2b01      	cmp	r3, #1
 800c32c:	d101      	bne.n	800c332 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800c32e:	2301      	movs	r3, #1
 800c330:	e022      	b.n	800c378 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c336:	2b00      	cmp	r3, #0
 800c338:	d002      	beq.n	800c340 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800c33a:	6878      	ldr	r0, [r7, #4]
 800c33c:	f000 feb6 	bl	800d0ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	685a      	ldr	r2, [r3, #4]
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c34e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	689a      	ldr	r2, [r3, #8]
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c35e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	681a      	ldr	r2, [r3, #0]
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	f042 0201 	orr.w	r2, r2, #1
 800c36e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c370:	6878      	ldr	r0, [r7, #4]
 800c372:	f000 ff3d 	bl	800d1f0 <UART_CheckIdleState>
 800c376:	4603      	mov	r3, r0
}
 800c378:	4618      	mov	r0, r3
 800c37a:	3708      	adds	r7, #8
 800c37c:	46bd      	mov	sp, r7
 800c37e:	bd80      	pop	{r7, pc}

0800c380 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c380:	b580      	push	{r7, lr}
 800c382:	b08a      	sub	sp, #40	; 0x28
 800c384:	af00      	add	r7, sp, #0
 800c386:	60f8      	str	r0, [r7, #12]
 800c388:	60b9      	str	r1, [r7, #8]
 800c38a:	4613      	mov	r3, r2
 800c38c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c392:	2b20      	cmp	r3, #32
 800c394:	d142      	bne.n	800c41c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800c396:	68bb      	ldr	r3, [r7, #8]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d002      	beq.n	800c3a2 <HAL_UART_Receive_IT+0x22>
 800c39c:	88fb      	ldrh	r3, [r7, #6]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d101      	bne.n	800c3a6 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800c3a2:	2301      	movs	r3, #1
 800c3a4:	e03b      	b.n	800c41e <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800c3ac:	2b01      	cmp	r3, #1
 800c3ae:	d101      	bne.n	800c3b4 <HAL_UART_Receive_IT+0x34>
 800c3b0:	2302      	movs	r3, #2
 800c3b2:	e034      	b.n	800c41e <HAL_UART_Receive_IT+0x9e>
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	2201      	movs	r2, #1
 800c3b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	2200      	movs	r2, #0
 800c3c0:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	4a18      	ldr	r2, [pc, #96]	; (800c428 <HAL_UART_Receive_IT+0xa8>)
 800c3c8:	4293      	cmp	r3, r2
 800c3ca:	d01f      	beq.n	800c40c <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	685b      	ldr	r3, [r3, #4]
 800c3d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d018      	beq.n	800c40c <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3e0:	697b      	ldr	r3, [r7, #20]
 800c3e2:	e853 3f00 	ldrex	r3, [r3]
 800c3e6:	613b      	str	r3, [r7, #16]
   return(result);
 800c3e8:	693b      	ldr	r3, [r7, #16]
 800c3ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c3ee:	627b      	str	r3, [r7, #36]	; 0x24
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	461a      	mov	r2, r3
 800c3f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3f8:	623b      	str	r3, [r7, #32]
 800c3fa:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3fc:	69f9      	ldr	r1, [r7, #28]
 800c3fe:	6a3a      	ldr	r2, [r7, #32]
 800c400:	e841 2300 	strex	r3, r2, [r1]
 800c404:	61bb      	str	r3, [r7, #24]
   return(result);
 800c406:	69bb      	ldr	r3, [r7, #24]
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d1e6      	bne.n	800c3da <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800c40c:	88fb      	ldrh	r3, [r7, #6]
 800c40e:	461a      	mov	r2, r3
 800c410:	68b9      	ldr	r1, [r7, #8]
 800c412:	68f8      	ldr	r0, [r7, #12]
 800c414:	f000 fffa 	bl	800d40c <UART_Start_Receive_IT>
 800c418:	4603      	mov	r3, r0
 800c41a:	e000      	b.n	800c41e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800c41c:	2302      	movs	r3, #2
  }
}
 800c41e:	4618      	mov	r0, r3
 800c420:	3728      	adds	r7, #40	; 0x28
 800c422:	46bd      	mov	sp, r7
 800c424:	bd80      	pop	{r7, pc}
 800c426:	bf00      	nop
 800c428:	40008000 	.word	0x40008000

0800c42c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800c42c:	b580      	push	{r7, lr}
 800c42e:	b08a      	sub	sp, #40	; 0x28
 800c430:	af00      	add	r7, sp, #0
 800c432:	60f8      	str	r0, [r7, #12]
 800c434:	60b9      	str	r1, [r7, #8]
 800c436:	4613      	mov	r3, r2
 800c438:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c43e:	2b20      	cmp	r3, #32
 800c440:	d178      	bne.n	800c534 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800c442:	68bb      	ldr	r3, [r7, #8]
 800c444:	2b00      	cmp	r3, #0
 800c446:	d002      	beq.n	800c44e <HAL_UART_Transmit_DMA+0x22>
 800c448:	88fb      	ldrh	r3, [r7, #6]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d101      	bne.n	800c452 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800c44e:	2301      	movs	r3, #1
 800c450:	e071      	b.n	800c536 <HAL_UART_Transmit_DMA+0x10a>
    }

    __HAL_LOCK(huart);
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800c458:	2b01      	cmp	r3, #1
 800c45a:	d101      	bne.n	800c460 <HAL_UART_Transmit_DMA+0x34>
 800c45c:	2302      	movs	r3, #2
 800c45e:	e06a      	b.n	800c536 <HAL_UART_Transmit_DMA+0x10a>
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	2201      	movs	r2, #1
 800c464:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	68ba      	ldr	r2, [r7, #8]
 800c46c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	88fa      	ldrh	r2, [r7, #6]
 800c472:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	88fa      	ldrh	r2, [r7, #6]
 800c47a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	2200      	movs	r2, #0
 800c482:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	2221      	movs	r2, #33	; 0x21
 800c48a:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c490:	2b00      	cmp	r3, #0
 800c492:	d02b      	beq.n	800c4ec <HAL_UART_Transmit_DMA+0xc0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c498:	4a29      	ldr	r2, [pc, #164]	; (800c540 <HAL_UART_Transmit_DMA+0x114>)
 800c49a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c4a0:	4a28      	ldr	r2, [pc, #160]	; (800c544 <HAL_UART_Transmit_DMA+0x118>)
 800c4a2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c4a8:	4a27      	ldr	r2, [pc, #156]	; (800c548 <HAL_UART_Transmit_DMA+0x11c>)
 800c4aa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c4b0:	2200      	movs	r2, #0
 800c4b2:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c4bc:	4619      	mov	r1, r3
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	3328      	adds	r3, #40	; 0x28
 800c4c4:	461a      	mov	r2, r3
 800c4c6:	88fb      	ldrh	r3, [r7, #6]
 800c4c8:	f7f9 ff94 	bl	80063f4 <HAL_DMA_Start_IT>
 800c4cc:	4603      	mov	r3, r0
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d00c      	beq.n	800c4ec <HAL_UART_Transmit_DMA+0xc0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	2210      	movs	r2, #16
 800c4d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	2200      	movs	r2, #0
 800c4de:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	2220      	movs	r2, #32
 800c4e6:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 800c4e8:	2301      	movs	r3, #1
 800c4ea:	e024      	b.n	800c536 <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	2240      	movs	r2, #64	; 0x40
 800c4f2:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	2200      	movs	r2, #0
 800c4f8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	3308      	adds	r3, #8
 800c502:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c504:	697b      	ldr	r3, [r7, #20]
 800c506:	e853 3f00 	ldrex	r3, [r3]
 800c50a:	613b      	str	r3, [r7, #16]
   return(result);
 800c50c:	693b      	ldr	r3, [r7, #16]
 800c50e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c512:	627b      	str	r3, [r7, #36]	; 0x24
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	3308      	adds	r3, #8
 800c51a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c51c:	623a      	str	r2, [r7, #32]
 800c51e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c520:	69f9      	ldr	r1, [r7, #28]
 800c522:	6a3a      	ldr	r2, [r7, #32]
 800c524:	e841 2300 	strex	r3, r2, [r1]
 800c528:	61bb      	str	r3, [r7, #24]
   return(result);
 800c52a:	69bb      	ldr	r3, [r7, #24]
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d1e5      	bne.n	800c4fc <HAL_UART_Transmit_DMA+0xd0>

    return HAL_OK;
 800c530:	2300      	movs	r3, #0
 800c532:	e000      	b.n	800c536 <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800c534:	2302      	movs	r3, #2
  }
}
 800c536:	4618      	mov	r0, r3
 800c538:	3728      	adds	r7, #40	; 0x28
 800c53a:	46bd      	mov	sp, r7
 800c53c:	bd80      	pop	{r7, pc}
 800c53e:	bf00      	nop
 800c540:	0800d6b3 	.word	0x0800d6b3
 800c544:	0800d74d 	.word	0x0800d74d
 800c548:	0800d769 	.word	0x0800d769

0800c54c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c54c:	b580      	push	{r7, lr}
 800c54e:	b0ba      	sub	sp, #232	; 0xe8
 800c550:	af00      	add	r7, sp, #0
 800c552:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	69db      	ldr	r3, [r3, #28]
 800c55a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	689b      	ldr	r3, [r3, #8]
 800c56e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c572:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800c576:	f640 030f 	movw	r3, #2063	; 0x80f
 800c57a:	4013      	ands	r3, r2
 800c57c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800c580:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c584:	2b00      	cmp	r3, #0
 800c586:	d115      	bne.n	800c5b4 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800c588:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c58c:	f003 0320 	and.w	r3, r3, #32
 800c590:	2b00      	cmp	r3, #0
 800c592:	d00f      	beq.n	800c5b4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800c594:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c598:	f003 0320 	and.w	r3, r3, #32
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d009      	beq.n	800c5b4 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	f000 82a6 	beq.w	800caf6 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c5ae:	6878      	ldr	r0, [r7, #4]
 800c5b0:	4798      	blx	r3
      }
      return;
 800c5b2:	e2a0      	b.n	800caf6 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800c5b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	f000 8117 	beq.w	800c7ec <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800c5be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c5c2:	f003 0301 	and.w	r3, r3, #1
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d106      	bne.n	800c5d8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800c5ca:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800c5ce:	4b85      	ldr	r3, [pc, #532]	; (800c7e4 <HAL_UART_IRQHandler+0x298>)
 800c5d0:	4013      	ands	r3, r2
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	f000 810a 	beq.w	800c7ec <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c5d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c5dc:	f003 0301 	and.w	r3, r3, #1
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d011      	beq.n	800c608 <HAL_UART_IRQHandler+0xbc>
 800c5e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c5e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d00b      	beq.n	800c608 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	2201      	movs	r2, #1
 800c5f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c5fe:	f043 0201 	orr.w	r2, r3, #1
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c608:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c60c:	f003 0302 	and.w	r3, r3, #2
 800c610:	2b00      	cmp	r3, #0
 800c612:	d011      	beq.n	800c638 <HAL_UART_IRQHandler+0xec>
 800c614:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c618:	f003 0301 	and.w	r3, r3, #1
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d00b      	beq.n	800c638 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	2202      	movs	r2, #2
 800c626:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c62e:	f043 0204 	orr.w	r2, r3, #4
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c638:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c63c:	f003 0304 	and.w	r3, r3, #4
 800c640:	2b00      	cmp	r3, #0
 800c642:	d011      	beq.n	800c668 <HAL_UART_IRQHandler+0x11c>
 800c644:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c648:	f003 0301 	and.w	r3, r3, #1
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d00b      	beq.n	800c668 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	2204      	movs	r2, #4
 800c656:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c65e:	f043 0202 	orr.w	r2, r3, #2
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c668:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c66c:	f003 0308 	and.w	r3, r3, #8
 800c670:	2b00      	cmp	r3, #0
 800c672:	d017      	beq.n	800c6a4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800c674:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c678:	f003 0320 	and.w	r3, r3, #32
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d105      	bne.n	800c68c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800c680:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c684:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d00b      	beq.n	800c6a4 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	2208      	movs	r2, #8
 800c692:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c69a:	f043 0208 	orr.w	r2, r3, #8
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c6a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c6a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d012      	beq.n	800c6d6 <HAL_UART_IRQHandler+0x18a>
 800c6b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c6b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d00c      	beq.n	800c6d6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c6c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c6cc:	f043 0220 	orr.w	r2, r3, #32
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	f000 820c 	beq.w	800cafa <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800c6e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c6e6:	f003 0320 	and.w	r3, r3, #32
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d00d      	beq.n	800c70a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800c6ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c6f2:	f003 0320 	and.w	r3, r3, #32
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d007      	beq.n	800c70a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d003      	beq.n	800c70a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c706:	6878      	ldr	r0, [r7, #4]
 800c708:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c710:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	689b      	ldr	r3, [r3, #8]
 800c71a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c71e:	2b40      	cmp	r3, #64	; 0x40
 800c720:	d005      	beq.n	800c72e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c722:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c726:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d04f      	beq.n	800c7ce <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c72e:	6878      	ldr	r0, [r7, #4]
 800c730:	f000 ff5c 	bl	800d5ec <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	689b      	ldr	r3, [r3, #8]
 800c73a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c73e:	2b40      	cmp	r3, #64	; 0x40
 800c740:	d141      	bne.n	800c7c6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	3308      	adds	r3, #8
 800c748:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c74c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c750:	e853 3f00 	ldrex	r3, [r3]
 800c754:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c758:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c75c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c760:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	3308      	adds	r3, #8
 800c76a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c76e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c772:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c776:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c77a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c77e:	e841 2300 	strex	r3, r2, [r1]
 800c782:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c786:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d1d9      	bne.n	800c742 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c792:	2b00      	cmp	r3, #0
 800c794:	d013      	beq.n	800c7be <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c79a:	4a13      	ldr	r2, [pc, #76]	; (800c7e8 <HAL_UART_IRQHandler+0x29c>)
 800c79c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	f7f9 fec4 	bl	8006530 <HAL_DMA_Abort_IT>
 800c7a8:	4603      	mov	r3, r0
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d017      	beq.n	800c7de <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c7b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7b4:	687a      	ldr	r2, [r7, #4]
 800c7b6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800c7b8:	4610      	mov	r0, r2
 800c7ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c7bc:	e00f      	b.n	800c7de <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c7be:	6878      	ldr	r0, [r7, #4]
 800c7c0:	f7f7 fc90 	bl	80040e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c7c4:	e00b      	b.n	800c7de <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c7c6:	6878      	ldr	r0, [r7, #4]
 800c7c8:	f7f7 fc8c 	bl	80040e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c7cc:	e007      	b.n	800c7de <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c7ce:	6878      	ldr	r0, [r7, #4]
 800c7d0:	f7f7 fc88 	bl	80040e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	2200      	movs	r2, #0
 800c7d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800c7dc:	e18d      	b.n	800cafa <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c7de:	bf00      	nop
    return;
 800c7e0:	e18b      	b.n	800cafa <HAL_UART_IRQHandler+0x5ae>
 800c7e2:	bf00      	nop
 800c7e4:	04000120 	.word	0x04000120
 800c7e8:	0800d7e5 	.word	0x0800d7e5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c7f0:	2b01      	cmp	r3, #1
 800c7f2:	f040 8146 	bne.w	800ca82 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c7f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c7fa:	f003 0310 	and.w	r3, r3, #16
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	f000 813f 	beq.w	800ca82 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c804:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c808:	f003 0310 	and.w	r3, r3, #16
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	f000 8138 	beq.w	800ca82 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	2210      	movs	r2, #16
 800c818:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	689b      	ldr	r3, [r3, #8]
 800c820:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c824:	2b40      	cmp	r3, #64	; 0x40
 800c826:	f040 80b4 	bne.w	800c992 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	685b      	ldr	r3, [r3, #4]
 800c832:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c836:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	f000 815f 	beq.w	800cafe <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c846:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c84a:	429a      	cmp	r2, r3
 800c84c:	f080 8157 	bcs.w	800cafe <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c856:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	f003 0320 	and.w	r3, r3, #32
 800c866:	2b00      	cmp	r3, #0
 800c868:	f040 8085 	bne.w	800c976 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c874:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c878:	e853 3f00 	ldrex	r3, [r3]
 800c87c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c880:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c884:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c888:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	461a      	mov	r2, r3
 800c892:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c896:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c89a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c89e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c8a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c8a6:	e841 2300 	strex	r3, r2, [r1]
 800c8aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c8ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d1da      	bne.n	800c86c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	3308      	adds	r3, #8
 800c8bc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c8c0:	e853 3f00 	ldrex	r3, [r3]
 800c8c4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c8c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c8c8:	f023 0301 	bic.w	r3, r3, #1
 800c8cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	3308      	adds	r3, #8
 800c8d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c8da:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c8de:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8e0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c8e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c8e6:	e841 2300 	strex	r3, r2, [r1]
 800c8ea:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c8ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d1e1      	bne.n	800c8b6 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	3308      	adds	r3, #8
 800c8f8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c8fc:	e853 3f00 	ldrex	r3, [r3]
 800c900:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c902:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c904:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c908:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	3308      	adds	r3, #8
 800c912:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c916:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c918:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c91a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c91c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c91e:	e841 2300 	strex	r3, r2, [r1]
 800c922:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c924:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c926:	2b00      	cmp	r3, #0
 800c928:	d1e3      	bne.n	800c8f2 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	2220      	movs	r2, #32
 800c92e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	2200      	movs	r2, #0
 800c934:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c93c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c93e:	e853 3f00 	ldrex	r3, [r3]
 800c942:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c944:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c946:	f023 0310 	bic.w	r3, r3, #16
 800c94a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	461a      	mov	r2, r3
 800c954:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c958:	65bb      	str	r3, [r7, #88]	; 0x58
 800c95a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c95c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c95e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c960:	e841 2300 	strex	r3, r2, [r1]
 800c964:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c966:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d1e4      	bne.n	800c936 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c970:	4618      	mov	r0, r3
 800c972:	f7f9 fd9f 	bl	80064b4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c982:	b29b      	uxth	r3, r3
 800c984:	1ad3      	subs	r3, r2, r3
 800c986:	b29b      	uxth	r3, r3
 800c988:	4619      	mov	r1, r3
 800c98a:	6878      	ldr	r0, [r7, #4]
 800c98c:	f000 f8ca 	bl	800cb24 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c990:	e0b5      	b.n	800cafe <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c99e:	b29b      	uxth	r3, r3
 800c9a0:	1ad3      	subs	r3, r2, r3
 800c9a2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c9ac:	b29b      	uxth	r3, r3
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	f000 80a7 	beq.w	800cb02 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 800c9b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	f000 80a2 	beq.w	800cb02 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9c6:	e853 3f00 	ldrex	r3, [r3]
 800c9ca:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c9cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9ce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c9d2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	461a      	mov	r2, r3
 800c9dc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c9e0:	647b      	str	r3, [r7, #68]	; 0x44
 800c9e2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9e4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c9e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c9e8:	e841 2300 	strex	r3, r2, [r1]
 800c9ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c9ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d1e4      	bne.n	800c9be <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	3308      	adds	r3, #8
 800c9fa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9fe:	e853 3f00 	ldrex	r3, [r3]
 800ca02:	623b      	str	r3, [r7, #32]
   return(result);
 800ca04:	6a3b      	ldr	r3, [r7, #32]
 800ca06:	f023 0301 	bic.w	r3, r3, #1
 800ca0a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	3308      	adds	r3, #8
 800ca14:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800ca18:	633a      	str	r2, [r7, #48]	; 0x30
 800ca1a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca1c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ca1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ca20:	e841 2300 	strex	r3, r2, [r1]
 800ca24:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ca26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d1e3      	bne.n	800c9f4 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	2220      	movs	r2, #32
 800ca30:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	2200      	movs	r2, #0
 800ca36:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	2200      	movs	r2, #0
 800ca3c:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca44:	693b      	ldr	r3, [r7, #16]
 800ca46:	e853 3f00 	ldrex	r3, [r3]
 800ca4a:	60fb      	str	r3, [r7, #12]
   return(result);
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	f023 0310 	bic.w	r3, r3, #16
 800ca52:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	461a      	mov	r2, r3
 800ca5c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ca60:	61fb      	str	r3, [r7, #28]
 800ca62:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca64:	69b9      	ldr	r1, [r7, #24]
 800ca66:	69fa      	ldr	r2, [r7, #28]
 800ca68:	e841 2300 	strex	r3, r2, [r1]
 800ca6c:	617b      	str	r3, [r7, #20]
   return(result);
 800ca6e:	697b      	ldr	r3, [r7, #20]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d1e4      	bne.n	800ca3e <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ca74:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ca78:	4619      	mov	r1, r3
 800ca7a:	6878      	ldr	r0, [r7, #4]
 800ca7c:	f000 f852 	bl	800cb24 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ca80:	e03f      	b.n	800cb02 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ca82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ca86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d00e      	beq.n	800caac <HAL_UART_IRQHandler+0x560>
 800ca8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ca92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d008      	beq.n	800caac <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800caa2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800caa4:	6878      	ldr	r0, [r7, #4]
 800caa6:	f001 f83d 	bl	800db24 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800caaa:	e02d      	b.n	800cb08 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800caac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cab0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d00e      	beq.n	800cad6 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800cab8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cabc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d008      	beq.n	800cad6 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d01c      	beq.n	800cb06 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cad0:	6878      	ldr	r0, [r7, #4]
 800cad2:	4798      	blx	r3
    }
    return;
 800cad4:	e017      	b.n	800cb06 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800cad6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d012      	beq.n	800cb08 <HAL_UART_IRQHandler+0x5bc>
 800cae2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800caea:	2b00      	cmp	r3, #0
 800caec:	d00c      	beq.n	800cb08 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800caee:	6878      	ldr	r0, [r7, #4]
 800caf0:	f000 fe8e 	bl	800d810 <UART_EndTransmit_IT>
    return;
 800caf4:	e008      	b.n	800cb08 <HAL_UART_IRQHandler+0x5bc>
      return;
 800caf6:	bf00      	nop
 800caf8:	e006      	b.n	800cb08 <HAL_UART_IRQHandler+0x5bc>
    return;
 800cafa:	bf00      	nop
 800cafc:	e004      	b.n	800cb08 <HAL_UART_IRQHandler+0x5bc>
      return;
 800cafe:	bf00      	nop
 800cb00:	e002      	b.n	800cb08 <HAL_UART_IRQHandler+0x5bc>
      return;
 800cb02:	bf00      	nop
 800cb04:	e000      	b.n	800cb08 <HAL_UART_IRQHandler+0x5bc>
    return;
 800cb06:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800cb08:	37e8      	adds	r7, #232	; 0xe8
 800cb0a:	46bd      	mov	sp, r7
 800cb0c:	bd80      	pop	{r7, pc}
 800cb0e:	bf00      	nop

0800cb10 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800cb10:	b480      	push	{r7}
 800cb12:	b083      	sub	sp, #12
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800cb18:	bf00      	nop
 800cb1a:	370c      	adds	r7, #12
 800cb1c:	46bd      	mov	sp, r7
 800cb1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb22:	4770      	bx	lr

0800cb24 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800cb24:	b480      	push	{r7}
 800cb26:	b083      	sub	sp, #12
 800cb28:	af00      	add	r7, sp, #0
 800cb2a:	6078      	str	r0, [r7, #4]
 800cb2c:	460b      	mov	r3, r1
 800cb2e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800cb30:	bf00      	nop
 800cb32:	370c      	adds	r7, #12
 800cb34:	46bd      	mov	sp, r7
 800cb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb3a:	4770      	bx	lr

0800cb3c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cb3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cb40:	b08a      	sub	sp, #40	; 0x28
 800cb42:	af00      	add	r7, sp, #0
 800cb44:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800cb46:	2300      	movs	r3, #0
 800cb48:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	689a      	ldr	r2, [r3, #8]
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	691b      	ldr	r3, [r3, #16]
 800cb54:	431a      	orrs	r2, r3
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	695b      	ldr	r3, [r3, #20]
 800cb5a:	431a      	orrs	r2, r3
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	69db      	ldr	r3, [r3, #28]
 800cb60:	4313      	orrs	r3, r2
 800cb62:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	681a      	ldr	r2, [r3, #0]
 800cb6a:	4ba4      	ldr	r3, [pc, #656]	; (800cdfc <UART_SetConfig+0x2c0>)
 800cb6c:	4013      	ands	r3, r2
 800cb6e:	68fa      	ldr	r2, [r7, #12]
 800cb70:	6812      	ldr	r2, [r2, #0]
 800cb72:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cb74:	430b      	orrs	r3, r1
 800cb76:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	685b      	ldr	r3, [r3, #4]
 800cb7e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	68da      	ldr	r2, [r3, #12]
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	430a      	orrs	r2, r1
 800cb8c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	699b      	ldr	r3, [r3, #24]
 800cb92:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	4a99      	ldr	r2, [pc, #612]	; (800ce00 <UART_SetConfig+0x2c4>)
 800cb9a:	4293      	cmp	r3, r2
 800cb9c:	d004      	beq.n	800cba8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	6a1b      	ldr	r3, [r3, #32]
 800cba2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cba4:	4313      	orrs	r3, r2
 800cba6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	689b      	ldr	r3, [r3, #8]
 800cbae:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cbb8:	430a      	orrs	r2, r1
 800cbba:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	4a90      	ldr	r2, [pc, #576]	; (800ce04 <UART_SetConfig+0x2c8>)
 800cbc2:	4293      	cmp	r3, r2
 800cbc4:	d126      	bne.n	800cc14 <UART_SetConfig+0xd8>
 800cbc6:	4b90      	ldr	r3, [pc, #576]	; (800ce08 <UART_SetConfig+0x2cc>)
 800cbc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cbcc:	f003 0303 	and.w	r3, r3, #3
 800cbd0:	2b03      	cmp	r3, #3
 800cbd2:	d81b      	bhi.n	800cc0c <UART_SetConfig+0xd0>
 800cbd4:	a201      	add	r2, pc, #4	; (adr r2, 800cbdc <UART_SetConfig+0xa0>)
 800cbd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbda:	bf00      	nop
 800cbdc:	0800cbed 	.word	0x0800cbed
 800cbe0:	0800cbfd 	.word	0x0800cbfd
 800cbe4:	0800cbf5 	.word	0x0800cbf5
 800cbe8:	0800cc05 	.word	0x0800cc05
 800cbec:	2301      	movs	r3, #1
 800cbee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cbf2:	e116      	b.n	800ce22 <UART_SetConfig+0x2e6>
 800cbf4:	2302      	movs	r3, #2
 800cbf6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cbfa:	e112      	b.n	800ce22 <UART_SetConfig+0x2e6>
 800cbfc:	2304      	movs	r3, #4
 800cbfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cc02:	e10e      	b.n	800ce22 <UART_SetConfig+0x2e6>
 800cc04:	2308      	movs	r3, #8
 800cc06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cc0a:	e10a      	b.n	800ce22 <UART_SetConfig+0x2e6>
 800cc0c:	2310      	movs	r3, #16
 800cc0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cc12:	e106      	b.n	800ce22 <UART_SetConfig+0x2e6>
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	4a7c      	ldr	r2, [pc, #496]	; (800ce0c <UART_SetConfig+0x2d0>)
 800cc1a:	4293      	cmp	r3, r2
 800cc1c:	d138      	bne.n	800cc90 <UART_SetConfig+0x154>
 800cc1e:	4b7a      	ldr	r3, [pc, #488]	; (800ce08 <UART_SetConfig+0x2cc>)
 800cc20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cc24:	f003 030c 	and.w	r3, r3, #12
 800cc28:	2b0c      	cmp	r3, #12
 800cc2a:	d82d      	bhi.n	800cc88 <UART_SetConfig+0x14c>
 800cc2c:	a201      	add	r2, pc, #4	; (adr r2, 800cc34 <UART_SetConfig+0xf8>)
 800cc2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc32:	bf00      	nop
 800cc34:	0800cc69 	.word	0x0800cc69
 800cc38:	0800cc89 	.word	0x0800cc89
 800cc3c:	0800cc89 	.word	0x0800cc89
 800cc40:	0800cc89 	.word	0x0800cc89
 800cc44:	0800cc79 	.word	0x0800cc79
 800cc48:	0800cc89 	.word	0x0800cc89
 800cc4c:	0800cc89 	.word	0x0800cc89
 800cc50:	0800cc89 	.word	0x0800cc89
 800cc54:	0800cc71 	.word	0x0800cc71
 800cc58:	0800cc89 	.word	0x0800cc89
 800cc5c:	0800cc89 	.word	0x0800cc89
 800cc60:	0800cc89 	.word	0x0800cc89
 800cc64:	0800cc81 	.word	0x0800cc81
 800cc68:	2300      	movs	r3, #0
 800cc6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cc6e:	e0d8      	b.n	800ce22 <UART_SetConfig+0x2e6>
 800cc70:	2302      	movs	r3, #2
 800cc72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cc76:	e0d4      	b.n	800ce22 <UART_SetConfig+0x2e6>
 800cc78:	2304      	movs	r3, #4
 800cc7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cc7e:	e0d0      	b.n	800ce22 <UART_SetConfig+0x2e6>
 800cc80:	2308      	movs	r3, #8
 800cc82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cc86:	e0cc      	b.n	800ce22 <UART_SetConfig+0x2e6>
 800cc88:	2310      	movs	r3, #16
 800cc8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cc8e:	e0c8      	b.n	800ce22 <UART_SetConfig+0x2e6>
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	4a5e      	ldr	r2, [pc, #376]	; (800ce10 <UART_SetConfig+0x2d4>)
 800cc96:	4293      	cmp	r3, r2
 800cc98:	d125      	bne.n	800cce6 <UART_SetConfig+0x1aa>
 800cc9a:	4b5b      	ldr	r3, [pc, #364]	; (800ce08 <UART_SetConfig+0x2cc>)
 800cc9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cca0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800cca4:	2b30      	cmp	r3, #48	; 0x30
 800cca6:	d016      	beq.n	800ccd6 <UART_SetConfig+0x19a>
 800cca8:	2b30      	cmp	r3, #48	; 0x30
 800ccaa:	d818      	bhi.n	800ccde <UART_SetConfig+0x1a2>
 800ccac:	2b20      	cmp	r3, #32
 800ccae:	d00a      	beq.n	800ccc6 <UART_SetConfig+0x18a>
 800ccb0:	2b20      	cmp	r3, #32
 800ccb2:	d814      	bhi.n	800ccde <UART_SetConfig+0x1a2>
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d002      	beq.n	800ccbe <UART_SetConfig+0x182>
 800ccb8:	2b10      	cmp	r3, #16
 800ccba:	d008      	beq.n	800ccce <UART_SetConfig+0x192>
 800ccbc:	e00f      	b.n	800ccde <UART_SetConfig+0x1a2>
 800ccbe:	2300      	movs	r3, #0
 800ccc0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ccc4:	e0ad      	b.n	800ce22 <UART_SetConfig+0x2e6>
 800ccc6:	2302      	movs	r3, #2
 800ccc8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cccc:	e0a9      	b.n	800ce22 <UART_SetConfig+0x2e6>
 800ccce:	2304      	movs	r3, #4
 800ccd0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ccd4:	e0a5      	b.n	800ce22 <UART_SetConfig+0x2e6>
 800ccd6:	2308      	movs	r3, #8
 800ccd8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ccdc:	e0a1      	b.n	800ce22 <UART_SetConfig+0x2e6>
 800ccde:	2310      	movs	r3, #16
 800cce0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cce4:	e09d      	b.n	800ce22 <UART_SetConfig+0x2e6>
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	4a4a      	ldr	r2, [pc, #296]	; (800ce14 <UART_SetConfig+0x2d8>)
 800ccec:	4293      	cmp	r3, r2
 800ccee:	d125      	bne.n	800cd3c <UART_SetConfig+0x200>
 800ccf0:	4b45      	ldr	r3, [pc, #276]	; (800ce08 <UART_SetConfig+0x2cc>)
 800ccf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ccf6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800ccfa:	2bc0      	cmp	r3, #192	; 0xc0
 800ccfc:	d016      	beq.n	800cd2c <UART_SetConfig+0x1f0>
 800ccfe:	2bc0      	cmp	r3, #192	; 0xc0
 800cd00:	d818      	bhi.n	800cd34 <UART_SetConfig+0x1f8>
 800cd02:	2b80      	cmp	r3, #128	; 0x80
 800cd04:	d00a      	beq.n	800cd1c <UART_SetConfig+0x1e0>
 800cd06:	2b80      	cmp	r3, #128	; 0x80
 800cd08:	d814      	bhi.n	800cd34 <UART_SetConfig+0x1f8>
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d002      	beq.n	800cd14 <UART_SetConfig+0x1d8>
 800cd0e:	2b40      	cmp	r3, #64	; 0x40
 800cd10:	d008      	beq.n	800cd24 <UART_SetConfig+0x1e8>
 800cd12:	e00f      	b.n	800cd34 <UART_SetConfig+0x1f8>
 800cd14:	2300      	movs	r3, #0
 800cd16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cd1a:	e082      	b.n	800ce22 <UART_SetConfig+0x2e6>
 800cd1c:	2302      	movs	r3, #2
 800cd1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cd22:	e07e      	b.n	800ce22 <UART_SetConfig+0x2e6>
 800cd24:	2304      	movs	r3, #4
 800cd26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cd2a:	e07a      	b.n	800ce22 <UART_SetConfig+0x2e6>
 800cd2c:	2308      	movs	r3, #8
 800cd2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cd32:	e076      	b.n	800ce22 <UART_SetConfig+0x2e6>
 800cd34:	2310      	movs	r3, #16
 800cd36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cd3a:	e072      	b.n	800ce22 <UART_SetConfig+0x2e6>
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	4a35      	ldr	r2, [pc, #212]	; (800ce18 <UART_SetConfig+0x2dc>)
 800cd42:	4293      	cmp	r3, r2
 800cd44:	d12a      	bne.n	800cd9c <UART_SetConfig+0x260>
 800cd46:	4b30      	ldr	r3, [pc, #192]	; (800ce08 <UART_SetConfig+0x2cc>)
 800cd48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cd4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cd50:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cd54:	d01a      	beq.n	800cd8c <UART_SetConfig+0x250>
 800cd56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cd5a:	d81b      	bhi.n	800cd94 <UART_SetConfig+0x258>
 800cd5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cd60:	d00c      	beq.n	800cd7c <UART_SetConfig+0x240>
 800cd62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cd66:	d815      	bhi.n	800cd94 <UART_SetConfig+0x258>
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d003      	beq.n	800cd74 <UART_SetConfig+0x238>
 800cd6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cd70:	d008      	beq.n	800cd84 <UART_SetConfig+0x248>
 800cd72:	e00f      	b.n	800cd94 <UART_SetConfig+0x258>
 800cd74:	2300      	movs	r3, #0
 800cd76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cd7a:	e052      	b.n	800ce22 <UART_SetConfig+0x2e6>
 800cd7c:	2302      	movs	r3, #2
 800cd7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cd82:	e04e      	b.n	800ce22 <UART_SetConfig+0x2e6>
 800cd84:	2304      	movs	r3, #4
 800cd86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cd8a:	e04a      	b.n	800ce22 <UART_SetConfig+0x2e6>
 800cd8c:	2308      	movs	r3, #8
 800cd8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cd92:	e046      	b.n	800ce22 <UART_SetConfig+0x2e6>
 800cd94:	2310      	movs	r3, #16
 800cd96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cd9a:	e042      	b.n	800ce22 <UART_SetConfig+0x2e6>
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	4a17      	ldr	r2, [pc, #92]	; (800ce00 <UART_SetConfig+0x2c4>)
 800cda2:	4293      	cmp	r3, r2
 800cda4:	d13a      	bne.n	800ce1c <UART_SetConfig+0x2e0>
 800cda6:	4b18      	ldr	r3, [pc, #96]	; (800ce08 <UART_SetConfig+0x2cc>)
 800cda8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cdac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800cdb0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800cdb4:	d01a      	beq.n	800cdec <UART_SetConfig+0x2b0>
 800cdb6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800cdba:	d81b      	bhi.n	800cdf4 <UART_SetConfig+0x2b8>
 800cdbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cdc0:	d00c      	beq.n	800cddc <UART_SetConfig+0x2a0>
 800cdc2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cdc6:	d815      	bhi.n	800cdf4 <UART_SetConfig+0x2b8>
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d003      	beq.n	800cdd4 <UART_SetConfig+0x298>
 800cdcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cdd0:	d008      	beq.n	800cde4 <UART_SetConfig+0x2a8>
 800cdd2:	e00f      	b.n	800cdf4 <UART_SetConfig+0x2b8>
 800cdd4:	2300      	movs	r3, #0
 800cdd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cdda:	e022      	b.n	800ce22 <UART_SetConfig+0x2e6>
 800cddc:	2302      	movs	r3, #2
 800cdde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cde2:	e01e      	b.n	800ce22 <UART_SetConfig+0x2e6>
 800cde4:	2304      	movs	r3, #4
 800cde6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cdea:	e01a      	b.n	800ce22 <UART_SetConfig+0x2e6>
 800cdec:	2308      	movs	r3, #8
 800cdee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cdf2:	e016      	b.n	800ce22 <UART_SetConfig+0x2e6>
 800cdf4:	2310      	movs	r3, #16
 800cdf6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cdfa:	e012      	b.n	800ce22 <UART_SetConfig+0x2e6>
 800cdfc:	efff69f3 	.word	0xefff69f3
 800ce00:	40008000 	.word	0x40008000
 800ce04:	40013800 	.word	0x40013800
 800ce08:	40021000 	.word	0x40021000
 800ce0c:	40004400 	.word	0x40004400
 800ce10:	40004800 	.word	0x40004800
 800ce14:	40004c00 	.word	0x40004c00
 800ce18:	40005000 	.word	0x40005000
 800ce1c:	2310      	movs	r3, #16
 800ce1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	4a9f      	ldr	r2, [pc, #636]	; (800d0a4 <UART_SetConfig+0x568>)
 800ce28:	4293      	cmp	r3, r2
 800ce2a:	d17a      	bne.n	800cf22 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ce2c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ce30:	2b08      	cmp	r3, #8
 800ce32:	d824      	bhi.n	800ce7e <UART_SetConfig+0x342>
 800ce34:	a201      	add	r2, pc, #4	; (adr r2, 800ce3c <UART_SetConfig+0x300>)
 800ce36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce3a:	bf00      	nop
 800ce3c:	0800ce61 	.word	0x0800ce61
 800ce40:	0800ce7f 	.word	0x0800ce7f
 800ce44:	0800ce69 	.word	0x0800ce69
 800ce48:	0800ce7f 	.word	0x0800ce7f
 800ce4c:	0800ce6f 	.word	0x0800ce6f
 800ce50:	0800ce7f 	.word	0x0800ce7f
 800ce54:	0800ce7f 	.word	0x0800ce7f
 800ce58:	0800ce7f 	.word	0x0800ce7f
 800ce5c:	0800ce77 	.word	0x0800ce77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ce60:	f7fc f8f2 	bl	8009048 <HAL_RCC_GetPCLK1Freq>
 800ce64:	61f8      	str	r0, [r7, #28]
        break;
 800ce66:	e010      	b.n	800ce8a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ce68:	4b8f      	ldr	r3, [pc, #572]	; (800d0a8 <UART_SetConfig+0x56c>)
 800ce6a:	61fb      	str	r3, [r7, #28]
        break;
 800ce6c:	e00d      	b.n	800ce8a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ce6e:	f7fc f853 	bl	8008f18 <HAL_RCC_GetSysClockFreq>
 800ce72:	61f8      	str	r0, [r7, #28]
        break;
 800ce74:	e009      	b.n	800ce8a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ce76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ce7a:	61fb      	str	r3, [r7, #28]
        break;
 800ce7c:	e005      	b.n	800ce8a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800ce7e:	2300      	movs	r3, #0
 800ce80:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800ce82:	2301      	movs	r3, #1
 800ce84:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800ce88:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ce8a:	69fb      	ldr	r3, [r7, #28]
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	f000 80fb 	beq.w	800d088 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	685a      	ldr	r2, [r3, #4]
 800ce96:	4613      	mov	r3, r2
 800ce98:	005b      	lsls	r3, r3, #1
 800ce9a:	4413      	add	r3, r2
 800ce9c:	69fa      	ldr	r2, [r7, #28]
 800ce9e:	429a      	cmp	r2, r3
 800cea0:	d305      	bcc.n	800ceae <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	685b      	ldr	r3, [r3, #4]
 800cea6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800cea8:	69fa      	ldr	r2, [r7, #28]
 800ceaa:	429a      	cmp	r2, r3
 800ceac:	d903      	bls.n	800ceb6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800ceae:	2301      	movs	r3, #1
 800ceb0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800ceb4:	e0e8      	b.n	800d088 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800ceb6:	69fb      	ldr	r3, [r7, #28]
 800ceb8:	2200      	movs	r2, #0
 800ceba:	461c      	mov	r4, r3
 800cebc:	4615      	mov	r5, r2
 800cebe:	f04f 0200 	mov.w	r2, #0
 800cec2:	f04f 0300 	mov.w	r3, #0
 800cec6:	022b      	lsls	r3, r5, #8
 800cec8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800cecc:	0222      	lsls	r2, r4, #8
 800cece:	68f9      	ldr	r1, [r7, #12]
 800ced0:	6849      	ldr	r1, [r1, #4]
 800ced2:	0849      	lsrs	r1, r1, #1
 800ced4:	2000      	movs	r0, #0
 800ced6:	4688      	mov	r8, r1
 800ced8:	4681      	mov	r9, r0
 800ceda:	eb12 0a08 	adds.w	sl, r2, r8
 800cede:	eb43 0b09 	adc.w	fp, r3, r9
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	685b      	ldr	r3, [r3, #4]
 800cee6:	2200      	movs	r2, #0
 800cee8:	603b      	str	r3, [r7, #0]
 800ceea:	607a      	str	r2, [r7, #4]
 800ceec:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cef0:	4650      	mov	r0, sl
 800cef2:	4659      	mov	r1, fp
 800cef4:	f7f3 ff18 	bl	8000d28 <__aeabi_uldivmod>
 800cef8:	4602      	mov	r2, r0
 800cefa:	460b      	mov	r3, r1
 800cefc:	4613      	mov	r3, r2
 800cefe:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800cf00:	69bb      	ldr	r3, [r7, #24]
 800cf02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cf06:	d308      	bcc.n	800cf1a <UART_SetConfig+0x3de>
 800cf08:	69bb      	ldr	r3, [r7, #24]
 800cf0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cf0e:	d204      	bcs.n	800cf1a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	69ba      	ldr	r2, [r7, #24]
 800cf16:	60da      	str	r2, [r3, #12]
 800cf18:	e0b6      	b.n	800d088 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800cf1a:	2301      	movs	r3, #1
 800cf1c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800cf20:	e0b2      	b.n	800d088 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	69db      	ldr	r3, [r3, #28]
 800cf26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cf2a:	d15e      	bne.n	800cfea <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800cf2c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cf30:	2b08      	cmp	r3, #8
 800cf32:	d828      	bhi.n	800cf86 <UART_SetConfig+0x44a>
 800cf34:	a201      	add	r2, pc, #4	; (adr r2, 800cf3c <UART_SetConfig+0x400>)
 800cf36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf3a:	bf00      	nop
 800cf3c:	0800cf61 	.word	0x0800cf61
 800cf40:	0800cf69 	.word	0x0800cf69
 800cf44:	0800cf71 	.word	0x0800cf71
 800cf48:	0800cf87 	.word	0x0800cf87
 800cf4c:	0800cf77 	.word	0x0800cf77
 800cf50:	0800cf87 	.word	0x0800cf87
 800cf54:	0800cf87 	.word	0x0800cf87
 800cf58:	0800cf87 	.word	0x0800cf87
 800cf5c:	0800cf7f 	.word	0x0800cf7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cf60:	f7fc f872 	bl	8009048 <HAL_RCC_GetPCLK1Freq>
 800cf64:	61f8      	str	r0, [r7, #28]
        break;
 800cf66:	e014      	b.n	800cf92 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cf68:	f7fc f884 	bl	8009074 <HAL_RCC_GetPCLK2Freq>
 800cf6c:	61f8      	str	r0, [r7, #28]
        break;
 800cf6e:	e010      	b.n	800cf92 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cf70:	4b4d      	ldr	r3, [pc, #308]	; (800d0a8 <UART_SetConfig+0x56c>)
 800cf72:	61fb      	str	r3, [r7, #28]
        break;
 800cf74:	e00d      	b.n	800cf92 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cf76:	f7fb ffcf 	bl	8008f18 <HAL_RCC_GetSysClockFreq>
 800cf7a:	61f8      	str	r0, [r7, #28]
        break;
 800cf7c:	e009      	b.n	800cf92 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cf7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cf82:	61fb      	str	r3, [r7, #28]
        break;
 800cf84:	e005      	b.n	800cf92 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800cf86:	2300      	movs	r3, #0
 800cf88:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800cf8a:	2301      	movs	r3, #1
 800cf8c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800cf90:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800cf92:	69fb      	ldr	r3, [r7, #28]
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d077      	beq.n	800d088 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800cf98:	69fb      	ldr	r3, [r7, #28]
 800cf9a:	005a      	lsls	r2, r3, #1
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	685b      	ldr	r3, [r3, #4]
 800cfa0:	085b      	lsrs	r3, r3, #1
 800cfa2:	441a      	add	r2, r3
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	685b      	ldr	r3, [r3, #4]
 800cfa8:	fbb2 f3f3 	udiv	r3, r2, r3
 800cfac:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cfae:	69bb      	ldr	r3, [r7, #24]
 800cfb0:	2b0f      	cmp	r3, #15
 800cfb2:	d916      	bls.n	800cfe2 <UART_SetConfig+0x4a6>
 800cfb4:	69bb      	ldr	r3, [r7, #24]
 800cfb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cfba:	d212      	bcs.n	800cfe2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cfbc:	69bb      	ldr	r3, [r7, #24]
 800cfbe:	b29b      	uxth	r3, r3
 800cfc0:	f023 030f 	bic.w	r3, r3, #15
 800cfc4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cfc6:	69bb      	ldr	r3, [r7, #24]
 800cfc8:	085b      	lsrs	r3, r3, #1
 800cfca:	b29b      	uxth	r3, r3
 800cfcc:	f003 0307 	and.w	r3, r3, #7
 800cfd0:	b29a      	uxth	r2, r3
 800cfd2:	8afb      	ldrh	r3, [r7, #22]
 800cfd4:	4313      	orrs	r3, r2
 800cfd6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	8afa      	ldrh	r2, [r7, #22]
 800cfde:	60da      	str	r2, [r3, #12]
 800cfe0:	e052      	b.n	800d088 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800cfe2:	2301      	movs	r3, #1
 800cfe4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800cfe8:	e04e      	b.n	800d088 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800cfea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cfee:	2b08      	cmp	r3, #8
 800cff0:	d827      	bhi.n	800d042 <UART_SetConfig+0x506>
 800cff2:	a201      	add	r2, pc, #4	; (adr r2, 800cff8 <UART_SetConfig+0x4bc>)
 800cff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cff8:	0800d01d 	.word	0x0800d01d
 800cffc:	0800d025 	.word	0x0800d025
 800d000:	0800d02d 	.word	0x0800d02d
 800d004:	0800d043 	.word	0x0800d043
 800d008:	0800d033 	.word	0x0800d033
 800d00c:	0800d043 	.word	0x0800d043
 800d010:	0800d043 	.word	0x0800d043
 800d014:	0800d043 	.word	0x0800d043
 800d018:	0800d03b 	.word	0x0800d03b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d01c:	f7fc f814 	bl	8009048 <HAL_RCC_GetPCLK1Freq>
 800d020:	61f8      	str	r0, [r7, #28]
        break;
 800d022:	e014      	b.n	800d04e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d024:	f7fc f826 	bl	8009074 <HAL_RCC_GetPCLK2Freq>
 800d028:	61f8      	str	r0, [r7, #28]
        break;
 800d02a:	e010      	b.n	800d04e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d02c:	4b1e      	ldr	r3, [pc, #120]	; (800d0a8 <UART_SetConfig+0x56c>)
 800d02e:	61fb      	str	r3, [r7, #28]
        break;
 800d030:	e00d      	b.n	800d04e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d032:	f7fb ff71 	bl	8008f18 <HAL_RCC_GetSysClockFreq>
 800d036:	61f8      	str	r0, [r7, #28]
        break;
 800d038:	e009      	b.n	800d04e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d03a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d03e:	61fb      	str	r3, [r7, #28]
        break;
 800d040:	e005      	b.n	800d04e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800d042:	2300      	movs	r3, #0
 800d044:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800d046:	2301      	movs	r3, #1
 800d048:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800d04c:	bf00      	nop
    }

    if (pclk != 0U)
 800d04e:	69fb      	ldr	r3, [r7, #28]
 800d050:	2b00      	cmp	r3, #0
 800d052:	d019      	beq.n	800d088 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	685b      	ldr	r3, [r3, #4]
 800d058:	085a      	lsrs	r2, r3, #1
 800d05a:	69fb      	ldr	r3, [r7, #28]
 800d05c:	441a      	add	r2, r3
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	685b      	ldr	r3, [r3, #4]
 800d062:	fbb2 f3f3 	udiv	r3, r2, r3
 800d066:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d068:	69bb      	ldr	r3, [r7, #24]
 800d06a:	2b0f      	cmp	r3, #15
 800d06c:	d909      	bls.n	800d082 <UART_SetConfig+0x546>
 800d06e:	69bb      	ldr	r3, [r7, #24]
 800d070:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d074:	d205      	bcs.n	800d082 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d076:	69bb      	ldr	r3, [r7, #24]
 800d078:	b29a      	uxth	r2, r3
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	60da      	str	r2, [r3, #12]
 800d080:	e002      	b.n	800d088 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800d082:	2301      	movs	r3, #1
 800d084:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	2200      	movs	r2, #0
 800d08c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	2200      	movs	r2, #0
 800d092:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800d094:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800d098:	4618      	mov	r0, r3
 800d09a:	3728      	adds	r7, #40	; 0x28
 800d09c:	46bd      	mov	sp, r7
 800d09e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d0a2:	bf00      	nop
 800d0a4:	40008000 	.word	0x40008000
 800d0a8:	00f42400 	.word	0x00f42400

0800d0ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d0ac:	b480      	push	{r7}
 800d0ae:	b083      	sub	sp, #12
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0b8:	f003 0301 	and.w	r3, r3, #1
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d00a      	beq.n	800d0d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	685b      	ldr	r3, [r3, #4]
 800d0c6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	430a      	orrs	r2, r1
 800d0d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0da:	f003 0302 	and.w	r3, r3, #2
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d00a      	beq.n	800d0f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	685b      	ldr	r3, [r3, #4]
 800d0e8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	430a      	orrs	r2, r1
 800d0f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0fc:	f003 0304 	and.w	r3, r3, #4
 800d100:	2b00      	cmp	r3, #0
 800d102:	d00a      	beq.n	800d11a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	685b      	ldr	r3, [r3, #4]
 800d10a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	430a      	orrs	r2, r1
 800d118:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d11e:	f003 0308 	and.w	r3, r3, #8
 800d122:	2b00      	cmp	r3, #0
 800d124:	d00a      	beq.n	800d13c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	685b      	ldr	r3, [r3, #4]
 800d12c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	430a      	orrs	r2, r1
 800d13a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d140:	f003 0310 	and.w	r3, r3, #16
 800d144:	2b00      	cmp	r3, #0
 800d146:	d00a      	beq.n	800d15e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	689b      	ldr	r3, [r3, #8]
 800d14e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	430a      	orrs	r2, r1
 800d15c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d162:	f003 0320 	and.w	r3, r3, #32
 800d166:	2b00      	cmp	r3, #0
 800d168:	d00a      	beq.n	800d180 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	689b      	ldr	r3, [r3, #8]
 800d170:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	430a      	orrs	r2, r1
 800d17e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d01a      	beq.n	800d1c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	685b      	ldr	r3, [r3, #4]
 800d192:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	430a      	orrs	r2, r1
 800d1a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d1aa:	d10a      	bne.n	800d1c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	685b      	ldr	r3, [r3, #4]
 800d1b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	430a      	orrs	r2, r1
 800d1c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d00a      	beq.n	800d1e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	685b      	ldr	r3, [r3, #4]
 800d1d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	430a      	orrs	r2, r1
 800d1e2:	605a      	str	r2, [r3, #4]
  }
}
 800d1e4:	bf00      	nop
 800d1e6:	370c      	adds	r7, #12
 800d1e8:	46bd      	mov	sp, r7
 800d1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ee:	4770      	bx	lr

0800d1f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d1f0:	b580      	push	{r7, lr}
 800d1f2:	b086      	sub	sp, #24
 800d1f4:	af02      	add	r7, sp, #8
 800d1f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	2200      	movs	r2, #0
 800d1fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d200:	f7f8 fecc 	bl	8005f9c <HAL_GetTick>
 800d204:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	f003 0308 	and.w	r3, r3, #8
 800d210:	2b08      	cmp	r3, #8
 800d212:	d10e      	bne.n	800d232 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d214:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d218:	9300      	str	r3, [sp, #0]
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	2200      	movs	r2, #0
 800d21e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d222:	6878      	ldr	r0, [r7, #4]
 800d224:	f000 f82d 	bl	800d282 <UART_WaitOnFlagUntilTimeout>
 800d228:	4603      	mov	r3, r0
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d001      	beq.n	800d232 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d22e:	2303      	movs	r3, #3
 800d230:	e023      	b.n	800d27a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	f003 0304 	and.w	r3, r3, #4
 800d23c:	2b04      	cmp	r3, #4
 800d23e:	d10e      	bne.n	800d25e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d240:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d244:	9300      	str	r3, [sp, #0]
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	2200      	movs	r2, #0
 800d24a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d24e:	6878      	ldr	r0, [r7, #4]
 800d250:	f000 f817 	bl	800d282 <UART_WaitOnFlagUntilTimeout>
 800d254:	4603      	mov	r3, r0
 800d256:	2b00      	cmp	r3, #0
 800d258:	d001      	beq.n	800d25e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d25a:	2303      	movs	r3, #3
 800d25c:	e00d      	b.n	800d27a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	2220      	movs	r2, #32
 800d262:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	2220      	movs	r2, #32
 800d268:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	2200      	movs	r2, #0
 800d26e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	2200      	movs	r2, #0
 800d274:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800d278:	2300      	movs	r3, #0
}
 800d27a:	4618      	mov	r0, r3
 800d27c:	3710      	adds	r7, #16
 800d27e:	46bd      	mov	sp, r7
 800d280:	bd80      	pop	{r7, pc}

0800d282 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d282:	b580      	push	{r7, lr}
 800d284:	b09c      	sub	sp, #112	; 0x70
 800d286:	af00      	add	r7, sp, #0
 800d288:	60f8      	str	r0, [r7, #12]
 800d28a:	60b9      	str	r1, [r7, #8]
 800d28c:	603b      	str	r3, [r7, #0]
 800d28e:	4613      	mov	r3, r2
 800d290:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d292:	e0a5      	b.n	800d3e0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d294:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d296:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d29a:	f000 80a1 	beq.w	800d3e0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d29e:	f7f8 fe7d 	bl	8005f9c <HAL_GetTick>
 800d2a2:	4602      	mov	r2, r0
 800d2a4:	683b      	ldr	r3, [r7, #0]
 800d2a6:	1ad3      	subs	r3, r2, r3
 800d2a8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d2aa:	429a      	cmp	r2, r3
 800d2ac:	d302      	bcc.n	800d2b4 <UART_WaitOnFlagUntilTimeout+0x32>
 800d2ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d13e      	bne.n	800d332 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d2bc:	e853 3f00 	ldrex	r3, [r3]
 800d2c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d2c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d2c4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d2c8:	667b      	str	r3, [r7, #100]	; 0x64
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	461a      	mov	r2, r3
 800d2d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d2d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d2d4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2d6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d2d8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d2da:	e841 2300 	strex	r3, r2, [r1]
 800d2de:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800d2e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d1e6      	bne.n	800d2b4 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	3308      	adds	r3, #8
 800d2ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2f0:	e853 3f00 	ldrex	r3, [r3]
 800d2f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d2f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2f8:	f023 0301 	bic.w	r3, r3, #1
 800d2fc:	663b      	str	r3, [r7, #96]	; 0x60
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	3308      	adds	r3, #8
 800d304:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d306:	64ba      	str	r2, [r7, #72]	; 0x48
 800d308:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d30a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d30c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d30e:	e841 2300 	strex	r3, r2, [r1]
 800d312:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d314:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d316:	2b00      	cmp	r3, #0
 800d318:	d1e5      	bne.n	800d2e6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	2220      	movs	r2, #32
 800d31e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	2220      	movs	r2, #32
 800d324:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	2200      	movs	r2, #0
 800d32a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800d32e:	2303      	movs	r3, #3
 800d330:	e067      	b.n	800d402 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	f003 0304 	and.w	r3, r3, #4
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d04f      	beq.n	800d3e0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	69db      	ldr	r3, [r3, #28]
 800d346:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d34a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d34e:	d147      	bne.n	800d3e0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d358:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d362:	e853 3f00 	ldrex	r3, [r3]
 800d366:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d36a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d36e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	461a      	mov	r2, r3
 800d376:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d378:	637b      	str	r3, [r7, #52]	; 0x34
 800d37a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d37c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d37e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d380:	e841 2300 	strex	r3, r2, [r1]
 800d384:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d1e6      	bne.n	800d35a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	3308      	adds	r3, #8
 800d392:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d394:	697b      	ldr	r3, [r7, #20]
 800d396:	e853 3f00 	ldrex	r3, [r3]
 800d39a:	613b      	str	r3, [r7, #16]
   return(result);
 800d39c:	693b      	ldr	r3, [r7, #16]
 800d39e:	f023 0301 	bic.w	r3, r3, #1
 800d3a2:	66bb      	str	r3, [r7, #104]	; 0x68
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	3308      	adds	r3, #8
 800d3aa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d3ac:	623a      	str	r2, [r7, #32]
 800d3ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3b0:	69f9      	ldr	r1, [r7, #28]
 800d3b2:	6a3a      	ldr	r2, [r7, #32]
 800d3b4:	e841 2300 	strex	r3, r2, [r1]
 800d3b8:	61bb      	str	r3, [r7, #24]
   return(result);
 800d3ba:	69bb      	ldr	r3, [r7, #24]
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d1e5      	bne.n	800d38c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	2220      	movs	r2, #32
 800d3c4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	2220      	movs	r2, #32
 800d3ca:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	2220      	movs	r2, #32
 800d3d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	2200      	movs	r2, #0
 800d3d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800d3dc:	2303      	movs	r3, #3
 800d3de:	e010      	b.n	800d402 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	69da      	ldr	r2, [r3, #28]
 800d3e6:	68bb      	ldr	r3, [r7, #8]
 800d3e8:	4013      	ands	r3, r2
 800d3ea:	68ba      	ldr	r2, [r7, #8]
 800d3ec:	429a      	cmp	r2, r3
 800d3ee:	bf0c      	ite	eq
 800d3f0:	2301      	moveq	r3, #1
 800d3f2:	2300      	movne	r3, #0
 800d3f4:	b2db      	uxtb	r3, r3
 800d3f6:	461a      	mov	r2, r3
 800d3f8:	79fb      	ldrb	r3, [r7, #7]
 800d3fa:	429a      	cmp	r2, r3
 800d3fc:	f43f af4a 	beq.w	800d294 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d400:	2300      	movs	r3, #0
}
 800d402:	4618      	mov	r0, r3
 800d404:	3770      	adds	r7, #112	; 0x70
 800d406:	46bd      	mov	sp, r7
 800d408:	bd80      	pop	{r7, pc}
	...

0800d40c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d40c:	b480      	push	{r7}
 800d40e:	b097      	sub	sp, #92	; 0x5c
 800d410:	af00      	add	r7, sp, #0
 800d412:	60f8      	str	r0, [r7, #12]
 800d414:	60b9      	str	r1, [r7, #8]
 800d416:	4613      	mov	r3, r2
 800d418:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	68ba      	ldr	r2, [r7, #8]
 800d41e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	88fa      	ldrh	r2, [r7, #6]
 800d424:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	88fa      	ldrh	r2, [r7, #6]
 800d42c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	2200      	movs	r2, #0
 800d434:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	689b      	ldr	r3, [r3, #8]
 800d43a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d43e:	d10e      	bne.n	800d45e <UART_Start_Receive_IT+0x52>
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	691b      	ldr	r3, [r3, #16]
 800d444:	2b00      	cmp	r3, #0
 800d446:	d105      	bne.n	800d454 <UART_Start_Receive_IT+0x48>
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800d44e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800d452:	e02d      	b.n	800d4b0 <UART_Start_Receive_IT+0xa4>
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	22ff      	movs	r2, #255	; 0xff
 800d458:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800d45c:	e028      	b.n	800d4b0 <UART_Start_Receive_IT+0xa4>
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	689b      	ldr	r3, [r3, #8]
 800d462:	2b00      	cmp	r3, #0
 800d464:	d10d      	bne.n	800d482 <UART_Start_Receive_IT+0x76>
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	691b      	ldr	r3, [r3, #16]
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d104      	bne.n	800d478 <UART_Start_Receive_IT+0x6c>
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	22ff      	movs	r2, #255	; 0xff
 800d472:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800d476:	e01b      	b.n	800d4b0 <UART_Start_Receive_IT+0xa4>
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	227f      	movs	r2, #127	; 0x7f
 800d47c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800d480:	e016      	b.n	800d4b0 <UART_Start_Receive_IT+0xa4>
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	689b      	ldr	r3, [r3, #8]
 800d486:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d48a:	d10d      	bne.n	800d4a8 <UART_Start_Receive_IT+0x9c>
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	691b      	ldr	r3, [r3, #16]
 800d490:	2b00      	cmp	r3, #0
 800d492:	d104      	bne.n	800d49e <UART_Start_Receive_IT+0x92>
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	227f      	movs	r2, #127	; 0x7f
 800d498:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800d49c:	e008      	b.n	800d4b0 <UART_Start_Receive_IT+0xa4>
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	223f      	movs	r2, #63	; 0x3f
 800d4a2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800d4a6:	e003      	b.n	800d4b0 <UART_Start_Receive_IT+0xa4>
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	2200      	movs	r2, #0
 800d4ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	2200      	movs	r2, #0
 800d4b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	2222      	movs	r2, #34	; 0x22
 800d4bc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	3308      	adds	r3, #8
 800d4c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d4c8:	e853 3f00 	ldrex	r3, [r3]
 800d4cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d4ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4d0:	f043 0301 	orr.w	r3, r3, #1
 800d4d4:	657b      	str	r3, [r7, #84]	; 0x54
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	3308      	adds	r3, #8
 800d4dc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d4de:	64ba      	str	r2, [r7, #72]	; 0x48
 800d4e0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4e2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d4e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d4e6:	e841 2300 	strex	r3, r2, [r1]
 800d4ea:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d4ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d1e5      	bne.n	800d4be <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	689b      	ldr	r3, [r3, #8]
 800d4f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d4fa:	d107      	bne.n	800d50c <UART_Start_Receive_IT+0x100>
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	691b      	ldr	r3, [r3, #16]
 800d500:	2b00      	cmp	r3, #0
 800d502:	d103      	bne.n	800d50c <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	4a24      	ldr	r2, [pc, #144]	; (800d598 <UART_Start_Receive_IT+0x18c>)
 800d508:	665a      	str	r2, [r3, #100]	; 0x64
 800d50a:	e002      	b.n	800d512 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	4a23      	ldr	r2, [pc, #140]	; (800d59c <UART_Start_Receive_IT+0x190>)
 800d510:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	2200      	movs	r2, #0
 800d516:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	691b      	ldr	r3, [r3, #16]
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d019      	beq.n	800d556 <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d52a:	e853 3f00 	ldrex	r3, [r3]
 800d52e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d532:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800d536:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	461a      	mov	r2, r3
 800d53e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d540:	637b      	str	r3, [r7, #52]	; 0x34
 800d542:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d544:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d546:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d548:	e841 2300 	strex	r3, r2, [r1]
 800d54c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d54e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d550:	2b00      	cmp	r3, #0
 800d552:	d1e6      	bne.n	800d522 <UART_Start_Receive_IT+0x116>
 800d554:	e018      	b.n	800d588 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d55c:	697b      	ldr	r3, [r7, #20]
 800d55e:	e853 3f00 	ldrex	r3, [r3]
 800d562:	613b      	str	r3, [r7, #16]
   return(result);
 800d564:	693b      	ldr	r3, [r7, #16]
 800d566:	f043 0320 	orr.w	r3, r3, #32
 800d56a:	653b      	str	r3, [r7, #80]	; 0x50
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	461a      	mov	r2, r3
 800d572:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d574:	623b      	str	r3, [r7, #32]
 800d576:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d578:	69f9      	ldr	r1, [r7, #28]
 800d57a:	6a3a      	ldr	r2, [r7, #32]
 800d57c:	e841 2300 	strex	r3, r2, [r1]
 800d580:	61bb      	str	r3, [r7, #24]
   return(result);
 800d582:	69bb      	ldr	r3, [r7, #24]
 800d584:	2b00      	cmp	r3, #0
 800d586:	d1e6      	bne.n	800d556 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800d588:	2300      	movs	r3, #0
}
 800d58a:	4618      	mov	r0, r3
 800d58c:	375c      	adds	r7, #92	; 0x5c
 800d58e:	46bd      	mov	sp, r7
 800d590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d594:	4770      	bx	lr
 800d596:	bf00      	nop
 800d598:	0800d9c5 	.word	0x0800d9c5
 800d59c:	0800d865 	.word	0x0800d865

0800d5a0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d5a0:	b480      	push	{r7}
 800d5a2:	b089      	sub	sp, #36	; 0x24
 800d5a4:	af00      	add	r7, sp, #0
 800d5a6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	e853 3f00 	ldrex	r3, [r3]
 800d5b4:	60bb      	str	r3, [r7, #8]
   return(result);
 800d5b6:	68bb      	ldr	r3, [r7, #8]
 800d5b8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800d5bc:	61fb      	str	r3, [r7, #28]
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	461a      	mov	r2, r3
 800d5c4:	69fb      	ldr	r3, [r7, #28]
 800d5c6:	61bb      	str	r3, [r7, #24]
 800d5c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5ca:	6979      	ldr	r1, [r7, #20]
 800d5cc:	69ba      	ldr	r2, [r7, #24]
 800d5ce:	e841 2300 	strex	r3, r2, [r1]
 800d5d2:	613b      	str	r3, [r7, #16]
   return(result);
 800d5d4:	693b      	ldr	r3, [r7, #16]
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d1e6      	bne.n	800d5a8 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	2220      	movs	r2, #32
 800d5de:	679a      	str	r2, [r3, #120]	; 0x78
}
 800d5e0:	bf00      	nop
 800d5e2:	3724      	adds	r7, #36	; 0x24
 800d5e4:	46bd      	mov	sp, r7
 800d5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ea:	4770      	bx	lr

0800d5ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d5ec:	b480      	push	{r7}
 800d5ee:	b095      	sub	sp, #84	; 0x54
 800d5f0:	af00      	add	r7, sp, #0
 800d5f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5fc:	e853 3f00 	ldrex	r3, [r3]
 800d600:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d604:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d608:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	461a      	mov	r2, r3
 800d610:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d612:	643b      	str	r3, [r7, #64]	; 0x40
 800d614:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d616:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d618:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d61a:	e841 2300 	strex	r3, r2, [r1]
 800d61e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d622:	2b00      	cmp	r3, #0
 800d624:	d1e6      	bne.n	800d5f4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	3308      	adds	r3, #8
 800d62c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d62e:	6a3b      	ldr	r3, [r7, #32]
 800d630:	e853 3f00 	ldrex	r3, [r3]
 800d634:	61fb      	str	r3, [r7, #28]
   return(result);
 800d636:	69fb      	ldr	r3, [r7, #28]
 800d638:	f023 0301 	bic.w	r3, r3, #1
 800d63c:	64bb      	str	r3, [r7, #72]	; 0x48
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	3308      	adds	r3, #8
 800d644:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d646:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d648:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d64a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d64c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d64e:	e841 2300 	strex	r3, r2, [r1]
 800d652:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d656:	2b00      	cmp	r3, #0
 800d658:	d1e5      	bne.n	800d626 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d65e:	2b01      	cmp	r3, #1
 800d660:	d118      	bne.n	800d694 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	e853 3f00 	ldrex	r3, [r3]
 800d66e:	60bb      	str	r3, [r7, #8]
   return(result);
 800d670:	68bb      	ldr	r3, [r7, #8]
 800d672:	f023 0310 	bic.w	r3, r3, #16
 800d676:	647b      	str	r3, [r7, #68]	; 0x44
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	461a      	mov	r2, r3
 800d67e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d680:	61bb      	str	r3, [r7, #24]
 800d682:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d684:	6979      	ldr	r1, [r7, #20]
 800d686:	69ba      	ldr	r2, [r7, #24]
 800d688:	e841 2300 	strex	r3, r2, [r1]
 800d68c:	613b      	str	r3, [r7, #16]
   return(result);
 800d68e:	693b      	ldr	r3, [r7, #16]
 800d690:	2b00      	cmp	r3, #0
 800d692:	d1e6      	bne.n	800d662 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	2220      	movs	r2, #32
 800d698:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	2200      	movs	r2, #0
 800d69e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	2200      	movs	r2, #0
 800d6a4:	665a      	str	r2, [r3, #100]	; 0x64
}
 800d6a6:	bf00      	nop
 800d6a8:	3754      	adds	r7, #84	; 0x54
 800d6aa:	46bd      	mov	sp, r7
 800d6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6b0:	4770      	bx	lr

0800d6b2 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d6b2:	b580      	push	{r7, lr}
 800d6b4:	b090      	sub	sp, #64	; 0x40
 800d6b6:	af00      	add	r7, sp, #0
 800d6b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6be:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	f003 0320 	and.w	r3, r3, #32
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d137      	bne.n	800d73e <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800d6ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6d0:	2200      	movs	r2, #0
 800d6d2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d6d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	3308      	adds	r3, #8
 800d6dc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6e0:	e853 3f00 	ldrex	r3, [r3]
 800d6e4:	623b      	str	r3, [r7, #32]
   return(result);
 800d6e6:	6a3b      	ldr	r3, [r7, #32]
 800d6e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d6ec:	63bb      	str	r3, [r7, #56]	; 0x38
 800d6ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	3308      	adds	r3, #8
 800d6f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d6f6:	633a      	str	r2, [r7, #48]	; 0x30
 800d6f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d6fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d6fe:	e841 2300 	strex	r3, r2, [r1]
 800d702:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d706:	2b00      	cmp	r3, #0
 800d708:	d1e5      	bne.n	800d6d6 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d70a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d710:	693b      	ldr	r3, [r7, #16]
 800d712:	e853 3f00 	ldrex	r3, [r3]
 800d716:	60fb      	str	r3, [r7, #12]
   return(result);
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d71e:	637b      	str	r3, [r7, #52]	; 0x34
 800d720:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	461a      	mov	r2, r3
 800d726:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d728:	61fb      	str	r3, [r7, #28]
 800d72a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d72c:	69b9      	ldr	r1, [r7, #24]
 800d72e:	69fa      	ldr	r2, [r7, #28]
 800d730:	e841 2300 	strex	r3, r2, [r1]
 800d734:	617b      	str	r3, [r7, #20]
   return(result);
 800d736:	697b      	ldr	r3, [r7, #20]
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d1e6      	bne.n	800d70a <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d73c:	e002      	b.n	800d744 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800d73e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d740:	f7f6 fa6c 	bl	8003c1c <HAL_UART_TxCpltCallback>
}
 800d744:	bf00      	nop
 800d746:	3740      	adds	r7, #64	; 0x40
 800d748:	46bd      	mov	sp, r7
 800d74a:	bd80      	pop	{r7, pc}

0800d74c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d74c:	b580      	push	{r7, lr}
 800d74e:	b084      	sub	sp, #16
 800d750:	af00      	add	r7, sp, #0
 800d752:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d758:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800d75a:	68f8      	ldr	r0, [r7, #12]
 800d75c:	f7ff f9d8 	bl	800cb10 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d760:	bf00      	nop
 800d762:	3710      	adds	r7, #16
 800d764:	46bd      	mov	sp, r7
 800d766:	bd80      	pop	{r7, pc}

0800d768 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800d768:	b580      	push	{r7, lr}
 800d76a:	b086      	sub	sp, #24
 800d76c:	af00      	add	r7, sp, #0
 800d76e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d774:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800d776:	697b      	ldr	r3, [r7, #20]
 800d778:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d77a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800d77c:	697b      	ldr	r3, [r7, #20]
 800d77e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d780:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800d782:	697b      	ldr	r3, [r7, #20]
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	689b      	ldr	r3, [r3, #8]
 800d788:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d78c:	2b80      	cmp	r3, #128	; 0x80
 800d78e:	d109      	bne.n	800d7a4 <UART_DMAError+0x3c>
 800d790:	693b      	ldr	r3, [r7, #16]
 800d792:	2b21      	cmp	r3, #33	; 0x21
 800d794:	d106      	bne.n	800d7a4 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800d796:	697b      	ldr	r3, [r7, #20]
 800d798:	2200      	movs	r2, #0
 800d79a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800d79e:	6978      	ldr	r0, [r7, #20]
 800d7a0:	f7ff fefe 	bl	800d5a0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800d7a4:	697b      	ldr	r3, [r7, #20]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	689b      	ldr	r3, [r3, #8]
 800d7aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d7ae:	2b40      	cmp	r3, #64	; 0x40
 800d7b0:	d109      	bne.n	800d7c6 <UART_DMAError+0x5e>
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	2b22      	cmp	r3, #34	; 0x22
 800d7b6:	d106      	bne.n	800d7c6 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800d7b8:	697b      	ldr	r3, [r7, #20]
 800d7ba:	2200      	movs	r2, #0
 800d7bc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800d7c0:	6978      	ldr	r0, [r7, #20]
 800d7c2:	f7ff ff13 	bl	800d5ec <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800d7c6:	697b      	ldr	r3, [r7, #20]
 800d7c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d7cc:	f043 0210 	orr.w	r2, r3, #16
 800d7d0:	697b      	ldr	r3, [r7, #20]
 800d7d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d7d6:	6978      	ldr	r0, [r7, #20]
 800d7d8:	f7f6 fc84 	bl	80040e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d7dc:	bf00      	nop
 800d7de:	3718      	adds	r7, #24
 800d7e0:	46bd      	mov	sp, r7
 800d7e2:	bd80      	pop	{r7, pc}

0800d7e4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d7e4:	b580      	push	{r7, lr}
 800d7e6:	b084      	sub	sp, #16
 800d7e8:	af00      	add	r7, sp, #0
 800d7ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7f0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	2200      	movs	r2, #0
 800d7f6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	2200      	movs	r2, #0
 800d7fe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d802:	68f8      	ldr	r0, [r7, #12]
 800d804:	f7f6 fc6e 	bl	80040e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d808:	bf00      	nop
 800d80a:	3710      	adds	r7, #16
 800d80c:	46bd      	mov	sp, r7
 800d80e:	bd80      	pop	{r7, pc}

0800d810 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d810:	b580      	push	{r7, lr}
 800d812:	b088      	sub	sp, #32
 800d814:	af00      	add	r7, sp, #0
 800d816:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	e853 3f00 	ldrex	r3, [r3]
 800d824:	60bb      	str	r3, [r7, #8]
   return(result);
 800d826:	68bb      	ldr	r3, [r7, #8]
 800d828:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d82c:	61fb      	str	r3, [r7, #28]
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	461a      	mov	r2, r3
 800d834:	69fb      	ldr	r3, [r7, #28]
 800d836:	61bb      	str	r3, [r7, #24]
 800d838:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d83a:	6979      	ldr	r1, [r7, #20]
 800d83c:	69ba      	ldr	r2, [r7, #24]
 800d83e:	e841 2300 	strex	r3, r2, [r1]
 800d842:	613b      	str	r3, [r7, #16]
   return(result);
 800d844:	693b      	ldr	r3, [r7, #16]
 800d846:	2b00      	cmp	r3, #0
 800d848:	d1e6      	bne.n	800d818 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	2220      	movs	r2, #32
 800d84e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	2200      	movs	r2, #0
 800d854:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d856:	6878      	ldr	r0, [r7, #4]
 800d858:	f7f6 f9e0 	bl	8003c1c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d85c:	bf00      	nop
 800d85e:	3720      	adds	r7, #32
 800d860:	46bd      	mov	sp, r7
 800d862:	bd80      	pop	{r7, pc}

0800d864 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800d864:	b580      	push	{r7, lr}
 800d866:	b096      	sub	sp, #88	; 0x58
 800d868:	af00      	add	r7, sp, #0
 800d86a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d872:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d87a:	2b22      	cmp	r3, #34	; 0x22
 800d87c:	f040 8094 	bne.w	800d9a8 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d886:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800d88a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800d88e:	b2d9      	uxtb	r1, r3
 800d890:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800d894:	b2da      	uxtb	r2, r3
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d89a:	400a      	ands	r2, r1
 800d89c:	b2d2      	uxtb	r2, r2
 800d89e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d8a4:	1c5a      	adds	r2, r3, #1
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800d8b0:	b29b      	uxth	r3, r3
 800d8b2:	3b01      	subs	r3, #1
 800d8b4:	b29a      	uxth	r2, r3
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800d8c2:	b29b      	uxth	r3, r3
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d179      	bne.n	800d9bc <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8d0:	e853 3f00 	ldrex	r3, [r3]
 800d8d4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d8d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d8d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d8dc:	653b      	str	r3, [r7, #80]	; 0x50
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	461a      	mov	r2, r3
 800d8e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d8e6:	647b      	str	r3, [r7, #68]	; 0x44
 800d8e8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8ea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d8ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d8ee:	e841 2300 	strex	r3, r2, [r1]
 800d8f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d8f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d1e6      	bne.n	800d8c8 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	3308      	adds	r3, #8
 800d900:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d904:	e853 3f00 	ldrex	r3, [r3]
 800d908:	623b      	str	r3, [r7, #32]
   return(result);
 800d90a:	6a3b      	ldr	r3, [r7, #32]
 800d90c:	f023 0301 	bic.w	r3, r3, #1
 800d910:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	3308      	adds	r3, #8
 800d918:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d91a:	633a      	str	r2, [r7, #48]	; 0x30
 800d91c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d91e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d920:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d922:	e841 2300 	strex	r3, r2, [r1]
 800d926:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d1e5      	bne.n	800d8fa <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	2220      	movs	r2, #32
 800d932:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	2200      	movs	r2, #0
 800d938:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d93e:	2b01      	cmp	r3, #1
 800d940:	d12e      	bne.n	800d9a0 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	2200      	movs	r2, #0
 800d946:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d94e:	693b      	ldr	r3, [r7, #16]
 800d950:	e853 3f00 	ldrex	r3, [r3]
 800d954:	60fb      	str	r3, [r7, #12]
   return(result);
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	f023 0310 	bic.w	r3, r3, #16
 800d95c:	64bb      	str	r3, [r7, #72]	; 0x48
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	461a      	mov	r2, r3
 800d964:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d966:	61fb      	str	r3, [r7, #28]
 800d968:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d96a:	69b9      	ldr	r1, [r7, #24]
 800d96c:	69fa      	ldr	r2, [r7, #28]
 800d96e:	e841 2300 	strex	r3, r2, [r1]
 800d972:	617b      	str	r3, [r7, #20]
   return(result);
 800d974:	697b      	ldr	r3, [r7, #20]
 800d976:	2b00      	cmp	r3, #0
 800d978:	d1e6      	bne.n	800d948 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	69db      	ldr	r3, [r3, #28]
 800d980:	f003 0310 	and.w	r3, r3, #16
 800d984:	2b10      	cmp	r3, #16
 800d986:	d103      	bne.n	800d990 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	2210      	movs	r2, #16
 800d98e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800d996:	4619      	mov	r1, r3
 800d998:	6878      	ldr	r0, [r7, #4]
 800d99a:	f7ff f8c3 	bl	800cb24 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d99e:	e00d      	b.n	800d9bc <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800d9a0:	6878      	ldr	r0, [r7, #4]
 800d9a2:	f7f6 f951 	bl	8003c48 <HAL_UART_RxCpltCallback>
}
 800d9a6:	e009      	b.n	800d9bc <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	8b1b      	ldrh	r3, [r3, #24]
 800d9ae:	b29a      	uxth	r2, r3
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	f042 0208 	orr.w	r2, r2, #8
 800d9b8:	b292      	uxth	r2, r2
 800d9ba:	831a      	strh	r2, [r3, #24]
}
 800d9bc:	bf00      	nop
 800d9be:	3758      	adds	r7, #88	; 0x58
 800d9c0:	46bd      	mov	sp, r7
 800d9c2:	bd80      	pop	{r7, pc}

0800d9c4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800d9c4:	b580      	push	{r7, lr}
 800d9c6:	b096      	sub	sp, #88	; 0x58
 800d9c8:	af00      	add	r7, sp, #0
 800d9ca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d9d2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d9da:	2b22      	cmp	r3, #34	; 0x22
 800d9dc:	f040 8094 	bne.w	800db08 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d9e6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d9ee:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800d9f0:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800d9f4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800d9f8:	4013      	ands	r3, r2
 800d9fa:	b29a      	uxth	r2, r3
 800d9fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d9fe:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da04:	1c9a      	adds	r2, r3, #2
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800da10:	b29b      	uxth	r3, r3
 800da12:	3b01      	subs	r3, #1
 800da14:	b29a      	uxth	r2, r3
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800da22:	b29b      	uxth	r3, r3
 800da24:	2b00      	cmp	r3, #0
 800da26:	d179      	bne.n	800db1c <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da30:	e853 3f00 	ldrex	r3, [r3]
 800da34:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800da36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da38:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800da3c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	461a      	mov	r2, r3
 800da44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800da46:	643b      	str	r3, [r7, #64]	; 0x40
 800da48:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da4a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800da4c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800da4e:	e841 2300 	strex	r3, r2, [r1]
 800da52:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800da54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da56:	2b00      	cmp	r3, #0
 800da58:	d1e6      	bne.n	800da28 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	3308      	adds	r3, #8
 800da60:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da62:	6a3b      	ldr	r3, [r7, #32]
 800da64:	e853 3f00 	ldrex	r3, [r3]
 800da68:	61fb      	str	r3, [r7, #28]
   return(result);
 800da6a:	69fb      	ldr	r3, [r7, #28]
 800da6c:	f023 0301 	bic.w	r3, r3, #1
 800da70:	64bb      	str	r3, [r7, #72]	; 0x48
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	3308      	adds	r3, #8
 800da78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800da7a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800da7c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da7e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800da80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800da82:	e841 2300 	strex	r3, r2, [r1]
 800da86:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800da88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d1e5      	bne.n	800da5a <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	2220      	movs	r2, #32
 800da92:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	2200      	movs	r2, #0
 800da98:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800da9e:	2b01      	cmp	r3, #1
 800daa0:	d12e      	bne.n	800db00 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	2200      	movs	r2, #0
 800daa6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	e853 3f00 	ldrex	r3, [r3]
 800dab4:	60bb      	str	r3, [r7, #8]
   return(result);
 800dab6:	68bb      	ldr	r3, [r7, #8]
 800dab8:	f023 0310 	bic.w	r3, r3, #16
 800dabc:	647b      	str	r3, [r7, #68]	; 0x44
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	461a      	mov	r2, r3
 800dac4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dac6:	61bb      	str	r3, [r7, #24]
 800dac8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800daca:	6979      	ldr	r1, [r7, #20]
 800dacc:	69ba      	ldr	r2, [r7, #24]
 800dace:	e841 2300 	strex	r3, r2, [r1]
 800dad2:	613b      	str	r3, [r7, #16]
   return(result);
 800dad4:	693b      	ldr	r3, [r7, #16]
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d1e6      	bne.n	800daa8 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	69db      	ldr	r3, [r3, #28]
 800dae0:	f003 0310 	and.w	r3, r3, #16
 800dae4:	2b10      	cmp	r3, #16
 800dae6:	d103      	bne.n	800daf0 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	2210      	movs	r2, #16
 800daee:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800daf6:	4619      	mov	r1, r3
 800daf8:	6878      	ldr	r0, [r7, #4]
 800dafa:	f7ff f813 	bl	800cb24 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800dafe:	e00d      	b.n	800db1c <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800db00:	6878      	ldr	r0, [r7, #4]
 800db02:	f7f6 f8a1 	bl	8003c48 <HAL_UART_RxCpltCallback>
}
 800db06:	e009      	b.n	800db1c <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	8b1b      	ldrh	r3, [r3, #24]
 800db0e:	b29a      	uxth	r2, r3
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	f042 0208 	orr.w	r2, r2, #8
 800db18:	b292      	uxth	r2, r2
 800db1a:	831a      	strh	r2, [r3, #24]
}
 800db1c:	bf00      	nop
 800db1e:	3758      	adds	r7, #88	; 0x58
 800db20:	46bd      	mov	sp, r7
 800db22:	bd80      	pop	{r7, pc}

0800db24 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800db24:	b480      	push	{r7}
 800db26:	b083      	sub	sp, #12
 800db28:	af00      	add	r7, sp, #0
 800db2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800db2c:	bf00      	nop
 800db2e:	370c      	adds	r7, #12
 800db30:	46bd      	mov	sp, r7
 800db32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db36:	4770      	bx	lr

0800db38 <atof>:
 800db38:	2100      	movs	r1, #0
 800db3a:	f001 bbdb 	b.w	800f2f4 <strtod>

0800db3e <atoi>:
 800db3e:	220a      	movs	r2, #10
 800db40:	2100      	movs	r1, #0
 800db42:	f001 bc65 	b.w	800f410 <strtol>

0800db46 <atol>:
 800db46:	220a      	movs	r2, #10
 800db48:	2100      	movs	r1, #0
 800db4a:	f001 bc61 	b.w	800f410 <strtol>
	...

0800db50 <__errno>:
 800db50:	4b01      	ldr	r3, [pc, #4]	; (800db58 <__errno+0x8>)
 800db52:	6818      	ldr	r0, [r3, #0]
 800db54:	4770      	bx	lr
 800db56:	bf00      	nop
 800db58:	20000218 	.word	0x20000218

0800db5c <gmtime_r>:
 800db5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db60:	e9d0 6700 	ldrd	r6, r7, [r0]
 800db64:	460c      	mov	r4, r1
 800db66:	4a4f      	ldr	r2, [pc, #316]	; (800dca4 <gmtime_r+0x148>)
 800db68:	2300      	movs	r3, #0
 800db6a:	4630      	mov	r0, r6
 800db6c:	4639      	mov	r1, r7
 800db6e:	f7f3 f88b 	bl	8000c88 <__aeabi_ldivmod>
 800db72:	4639      	mov	r1, r7
 800db74:	4605      	mov	r5, r0
 800db76:	4a4b      	ldr	r2, [pc, #300]	; (800dca4 <gmtime_r+0x148>)
 800db78:	4630      	mov	r0, r6
 800db7a:	2300      	movs	r3, #0
 800db7c:	f7f3 f884 	bl	8000c88 <__aeabi_ldivmod>
 800db80:	2a00      	cmp	r2, #0
 800db82:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 800db86:	bfb7      	itett	lt
 800db88:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 800db8c:	f600 236c 	addwge	r3, r0, #2668	; 0xa6c
 800db90:	f600 236b 	addwlt	r3, r0, #2667	; 0xa6b
 800db94:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 800db98:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 800db9c:	fbb2 f1f0 	udiv	r1, r2, r0
 800dba0:	fb00 2211 	mls	r2, r0, r1, r2
 800dba4:	203c      	movs	r0, #60	; 0x3c
 800dba6:	60a1      	str	r1, [r4, #8]
 800dba8:	fbb2 f1f0 	udiv	r1, r2, r0
 800dbac:	fb00 2211 	mls	r2, r0, r1, r2
 800dbb0:	6061      	str	r1, [r4, #4]
 800dbb2:	6022      	str	r2, [r4, #0]
 800dbb4:	2107      	movs	r1, #7
 800dbb6:	1cda      	adds	r2, r3, #3
 800dbb8:	fb92 f1f1 	sdiv	r1, r2, r1
 800dbbc:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800dbc0:	1a52      	subs	r2, r2, r1
 800dbc2:	bf48      	it	mi
 800dbc4:	3207      	addmi	r2, #7
 800dbc6:	4d38      	ldr	r5, [pc, #224]	; (800dca8 <gmtime_r+0x14c>)
 800dbc8:	4838      	ldr	r0, [pc, #224]	; (800dcac <gmtime_r+0x150>)
 800dbca:	61a2      	str	r2, [r4, #24]
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	bfb7      	itett	lt
 800dbd0:	f5a3 320e 	sublt.w	r2, r3, #145408	; 0x23800
 800dbd4:	fb93 f5f5 	sdivge	r5, r3, r5
 800dbd8:	f5a2 722c 	sublt.w	r2, r2, #688	; 0x2b0
 800dbdc:	fb92 f5f5 	sdivlt	r5, r2, r5
 800dbe0:	fb00 3005 	mla	r0, r0, r5, r3
 800dbe4:	f648 62ac 	movw	r2, #36524	; 0x8eac
 800dbe8:	fbb0 f2f2 	udiv	r2, r0, r2
 800dbec:	4402      	add	r2, r0
 800dbee:	f240 53b4 	movw	r3, #1460	; 0x5b4
 800dbf2:	fbb0 f1f3 	udiv	r1, r0, r3
 800dbf6:	1a52      	subs	r2, r2, r1
 800dbf8:	f240 1c6d 	movw	ip, #365	; 0x16d
 800dbfc:	492c      	ldr	r1, [pc, #176]	; (800dcb0 <gmtime_r+0x154>)
 800dbfe:	fbb0 f1f1 	udiv	r1, r0, r1
 800dc02:	2764      	movs	r7, #100	; 0x64
 800dc04:	1a52      	subs	r2, r2, r1
 800dc06:	fbb2 f1fc 	udiv	r1, r2, ip
 800dc0a:	fbb2 f3f3 	udiv	r3, r2, r3
 800dc0e:	fbb1 f6f7 	udiv	r6, r1, r7
 800dc12:	1af3      	subs	r3, r6, r3
 800dc14:	4403      	add	r3, r0
 800dc16:	fb0c 3311 	mls	r3, ip, r1, r3
 800dc1a:	2299      	movs	r2, #153	; 0x99
 800dc1c:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 800dc20:	f10e 0e02 	add.w	lr, lr, #2
 800dc24:	f103 0c01 	add.w	ip, r3, #1
 800dc28:	fbbe f0f2 	udiv	r0, lr, r2
 800dc2c:	4342      	muls	r2, r0
 800dc2e:	3202      	adds	r2, #2
 800dc30:	f04f 0805 	mov.w	r8, #5
 800dc34:	fbb2 f2f8 	udiv	r2, r2, r8
 800dc38:	ebac 0c02 	sub.w	ip, ip, r2
 800dc3c:	f240 52f9 	movw	r2, #1529	; 0x5f9
 800dc40:	4596      	cmp	lr, r2
 800dc42:	bf94      	ite	ls
 800dc44:	2202      	movls	r2, #2
 800dc46:	f06f 0209 	mvnhi.w	r2, #9
 800dc4a:	4410      	add	r0, r2
 800dc4c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800dc50:	fb02 1505 	mla	r5, r2, r5, r1
 800dc54:	2801      	cmp	r0, #1
 800dc56:	bf98      	it	ls
 800dc58:	3501      	addls	r5, #1
 800dc5a:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 800dc5e:	d30d      	bcc.n	800dc7c <gmtime_r+0x120>
 800dc60:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800dc64:	61e3      	str	r3, [r4, #28]
 800dc66:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 800dc6a:	2300      	movs	r3, #0
 800dc6c:	e9c4 0504 	strd	r0, r5, [r4, #16]
 800dc70:	f8c4 c00c 	str.w	ip, [r4, #12]
 800dc74:	6223      	str	r3, [r4, #32]
 800dc76:	4620      	mov	r0, r4
 800dc78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc7c:	078a      	lsls	r2, r1, #30
 800dc7e:	d102      	bne.n	800dc86 <gmtime_r+0x12a>
 800dc80:	fb07 1616 	mls	r6, r7, r6, r1
 800dc84:	b95e      	cbnz	r6, 800dc9e <gmtime_r+0x142>
 800dc86:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800dc8a:	fbb1 f6f2 	udiv	r6, r1, r2
 800dc8e:	fb02 1216 	mls	r2, r2, r6, r1
 800dc92:	fab2 f282 	clz	r2, r2
 800dc96:	0952      	lsrs	r2, r2, #5
 800dc98:	333b      	adds	r3, #59	; 0x3b
 800dc9a:	4413      	add	r3, r2
 800dc9c:	e7e2      	b.n	800dc64 <gmtime_r+0x108>
 800dc9e:	2201      	movs	r2, #1
 800dca0:	e7fa      	b.n	800dc98 <gmtime_r+0x13c>
 800dca2:	bf00      	nop
 800dca4:	00015180 	.word	0x00015180
 800dca8:	00023ab1 	.word	0x00023ab1
 800dcac:	fffdc54f 	.word	0xfffdc54f
 800dcb0:	00023ab0 	.word	0x00023ab0

0800dcb4 <__libc_init_array>:
 800dcb4:	b570      	push	{r4, r5, r6, lr}
 800dcb6:	4d0d      	ldr	r5, [pc, #52]	; (800dcec <__libc_init_array+0x38>)
 800dcb8:	4c0d      	ldr	r4, [pc, #52]	; (800dcf0 <__libc_init_array+0x3c>)
 800dcba:	1b64      	subs	r4, r4, r5
 800dcbc:	10a4      	asrs	r4, r4, #2
 800dcbe:	2600      	movs	r6, #0
 800dcc0:	42a6      	cmp	r6, r4
 800dcc2:	d109      	bne.n	800dcd8 <__libc_init_array+0x24>
 800dcc4:	4d0b      	ldr	r5, [pc, #44]	; (800dcf4 <__libc_init_array+0x40>)
 800dcc6:	4c0c      	ldr	r4, [pc, #48]	; (800dcf8 <__libc_init_array+0x44>)
 800dcc8:	f004 fae4 	bl	8012294 <_init>
 800dccc:	1b64      	subs	r4, r4, r5
 800dcce:	10a4      	asrs	r4, r4, #2
 800dcd0:	2600      	movs	r6, #0
 800dcd2:	42a6      	cmp	r6, r4
 800dcd4:	d105      	bne.n	800dce2 <__libc_init_array+0x2e>
 800dcd6:	bd70      	pop	{r4, r5, r6, pc}
 800dcd8:	f855 3b04 	ldr.w	r3, [r5], #4
 800dcdc:	4798      	blx	r3
 800dcde:	3601      	adds	r6, #1
 800dce0:	e7ee      	b.n	800dcc0 <__libc_init_array+0xc>
 800dce2:	f855 3b04 	ldr.w	r3, [r5], #4
 800dce6:	4798      	blx	r3
 800dce8:	3601      	adds	r6, #1
 800dcea:	e7f2      	b.n	800dcd2 <__libc_init_array+0x1e>
 800dcec:	08013b4c 	.word	0x08013b4c
 800dcf0:	08013b4c 	.word	0x08013b4c
 800dcf4:	08013b4c 	.word	0x08013b4c
 800dcf8:	08013b50 	.word	0x08013b50

0800dcfc <memcpy>:
 800dcfc:	440a      	add	r2, r1
 800dcfe:	4291      	cmp	r1, r2
 800dd00:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800dd04:	d100      	bne.n	800dd08 <memcpy+0xc>
 800dd06:	4770      	bx	lr
 800dd08:	b510      	push	{r4, lr}
 800dd0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dd0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dd12:	4291      	cmp	r1, r2
 800dd14:	d1f9      	bne.n	800dd0a <memcpy+0xe>
 800dd16:	bd10      	pop	{r4, pc}

0800dd18 <memset>:
 800dd18:	4402      	add	r2, r0
 800dd1a:	4603      	mov	r3, r0
 800dd1c:	4293      	cmp	r3, r2
 800dd1e:	d100      	bne.n	800dd22 <memset+0xa>
 800dd20:	4770      	bx	lr
 800dd22:	f803 1b01 	strb.w	r1, [r3], #1
 800dd26:	e7f9      	b.n	800dd1c <memset+0x4>

0800dd28 <__cvt>:
 800dd28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dd2c:	ec55 4b10 	vmov	r4, r5, d0
 800dd30:	2d00      	cmp	r5, #0
 800dd32:	460e      	mov	r6, r1
 800dd34:	4619      	mov	r1, r3
 800dd36:	462b      	mov	r3, r5
 800dd38:	bfbb      	ittet	lt
 800dd3a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800dd3e:	461d      	movlt	r5, r3
 800dd40:	2300      	movge	r3, #0
 800dd42:	232d      	movlt	r3, #45	; 0x2d
 800dd44:	700b      	strb	r3, [r1, #0]
 800dd46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dd48:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800dd4c:	4691      	mov	r9, r2
 800dd4e:	f023 0820 	bic.w	r8, r3, #32
 800dd52:	bfbc      	itt	lt
 800dd54:	4622      	movlt	r2, r4
 800dd56:	4614      	movlt	r4, r2
 800dd58:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800dd5c:	d005      	beq.n	800dd6a <__cvt+0x42>
 800dd5e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800dd62:	d100      	bne.n	800dd66 <__cvt+0x3e>
 800dd64:	3601      	adds	r6, #1
 800dd66:	2102      	movs	r1, #2
 800dd68:	e000      	b.n	800dd6c <__cvt+0x44>
 800dd6a:	2103      	movs	r1, #3
 800dd6c:	ab03      	add	r3, sp, #12
 800dd6e:	9301      	str	r3, [sp, #4]
 800dd70:	ab02      	add	r3, sp, #8
 800dd72:	9300      	str	r3, [sp, #0]
 800dd74:	ec45 4b10 	vmov	d0, r4, r5
 800dd78:	4653      	mov	r3, sl
 800dd7a:	4632      	mov	r2, r6
 800dd7c:	f001 fc18 	bl	800f5b0 <_dtoa_r>
 800dd80:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800dd84:	4607      	mov	r7, r0
 800dd86:	d102      	bne.n	800dd8e <__cvt+0x66>
 800dd88:	f019 0f01 	tst.w	r9, #1
 800dd8c:	d022      	beq.n	800ddd4 <__cvt+0xac>
 800dd8e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800dd92:	eb07 0906 	add.w	r9, r7, r6
 800dd96:	d110      	bne.n	800ddba <__cvt+0x92>
 800dd98:	783b      	ldrb	r3, [r7, #0]
 800dd9a:	2b30      	cmp	r3, #48	; 0x30
 800dd9c:	d10a      	bne.n	800ddb4 <__cvt+0x8c>
 800dd9e:	2200      	movs	r2, #0
 800dda0:	2300      	movs	r3, #0
 800dda2:	4620      	mov	r0, r4
 800dda4:	4629      	mov	r1, r5
 800dda6:	f7f2 fe8f 	bl	8000ac8 <__aeabi_dcmpeq>
 800ddaa:	b918      	cbnz	r0, 800ddb4 <__cvt+0x8c>
 800ddac:	f1c6 0601 	rsb	r6, r6, #1
 800ddb0:	f8ca 6000 	str.w	r6, [sl]
 800ddb4:	f8da 3000 	ldr.w	r3, [sl]
 800ddb8:	4499      	add	r9, r3
 800ddba:	2200      	movs	r2, #0
 800ddbc:	2300      	movs	r3, #0
 800ddbe:	4620      	mov	r0, r4
 800ddc0:	4629      	mov	r1, r5
 800ddc2:	f7f2 fe81 	bl	8000ac8 <__aeabi_dcmpeq>
 800ddc6:	b108      	cbz	r0, 800ddcc <__cvt+0xa4>
 800ddc8:	f8cd 900c 	str.w	r9, [sp, #12]
 800ddcc:	2230      	movs	r2, #48	; 0x30
 800ddce:	9b03      	ldr	r3, [sp, #12]
 800ddd0:	454b      	cmp	r3, r9
 800ddd2:	d307      	bcc.n	800dde4 <__cvt+0xbc>
 800ddd4:	9b03      	ldr	r3, [sp, #12]
 800ddd6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ddd8:	1bdb      	subs	r3, r3, r7
 800ddda:	4638      	mov	r0, r7
 800dddc:	6013      	str	r3, [r2, #0]
 800ddde:	b004      	add	sp, #16
 800dde0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dde4:	1c59      	adds	r1, r3, #1
 800dde6:	9103      	str	r1, [sp, #12]
 800dde8:	701a      	strb	r2, [r3, #0]
 800ddea:	e7f0      	b.n	800ddce <__cvt+0xa6>

0800ddec <__exponent>:
 800ddec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ddee:	4603      	mov	r3, r0
 800ddf0:	2900      	cmp	r1, #0
 800ddf2:	bfb8      	it	lt
 800ddf4:	4249      	neglt	r1, r1
 800ddf6:	f803 2b02 	strb.w	r2, [r3], #2
 800ddfa:	bfb4      	ite	lt
 800ddfc:	222d      	movlt	r2, #45	; 0x2d
 800ddfe:	222b      	movge	r2, #43	; 0x2b
 800de00:	2909      	cmp	r1, #9
 800de02:	7042      	strb	r2, [r0, #1]
 800de04:	dd2a      	ble.n	800de5c <__exponent+0x70>
 800de06:	f10d 0407 	add.w	r4, sp, #7
 800de0a:	46a4      	mov	ip, r4
 800de0c:	270a      	movs	r7, #10
 800de0e:	46a6      	mov	lr, r4
 800de10:	460a      	mov	r2, r1
 800de12:	fb91 f6f7 	sdiv	r6, r1, r7
 800de16:	fb07 1516 	mls	r5, r7, r6, r1
 800de1a:	3530      	adds	r5, #48	; 0x30
 800de1c:	2a63      	cmp	r2, #99	; 0x63
 800de1e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800de22:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800de26:	4631      	mov	r1, r6
 800de28:	dcf1      	bgt.n	800de0e <__exponent+0x22>
 800de2a:	3130      	adds	r1, #48	; 0x30
 800de2c:	f1ae 0502 	sub.w	r5, lr, #2
 800de30:	f804 1c01 	strb.w	r1, [r4, #-1]
 800de34:	1c44      	adds	r4, r0, #1
 800de36:	4629      	mov	r1, r5
 800de38:	4561      	cmp	r1, ip
 800de3a:	d30a      	bcc.n	800de52 <__exponent+0x66>
 800de3c:	f10d 0209 	add.w	r2, sp, #9
 800de40:	eba2 020e 	sub.w	r2, r2, lr
 800de44:	4565      	cmp	r5, ip
 800de46:	bf88      	it	hi
 800de48:	2200      	movhi	r2, #0
 800de4a:	4413      	add	r3, r2
 800de4c:	1a18      	subs	r0, r3, r0
 800de4e:	b003      	add	sp, #12
 800de50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800de52:	f811 2b01 	ldrb.w	r2, [r1], #1
 800de56:	f804 2f01 	strb.w	r2, [r4, #1]!
 800de5a:	e7ed      	b.n	800de38 <__exponent+0x4c>
 800de5c:	2330      	movs	r3, #48	; 0x30
 800de5e:	3130      	adds	r1, #48	; 0x30
 800de60:	7083      	strb	r3, [r0, #2]
 800de62:	70c1      	strb	r1, [r0, #3]
 800de64:	1d03      	adds	r3, r0, #4
 800de66:	e7f1      	b.n	800de4c <__exponent+0x60>

0800de68 <_printf_float>:
 800de68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de6c:	ed2d 8b02 	vpush	{d8}
 800de70:	b08d      	sub	sp, #52	; 0x34
 800de72:	460c      	mov	r4, r1
 800de74:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800de78:	4616      	mov	r6, r2
 800de7a:	461f      	mov	r7, r3
 800de7c:	4605      	mov	r5, r0
 800de7e:	f002 fcf5 	bl	801086c <_localeconv_r>
 800de82:	f8d0 a000 	ldr.w	sl, [r0]
 800de86:	4650      	mov	r0, sl
 800de88:	f7f2 f9a2 	bl	80001d0 <strlen>
 800de8c:	2300      	movs	r3, #0
 800de8e:	930a      	str	r3, [sp, #40]	; 0x28
 800de90:	6823      	ldr	r3, [r4, #0]
 800de92:	9305      	str	r3, [sp, #20]
 800de94:	f8d8 3000 	ldr.w	r3, [r8]
 800de98:	f894 b018 	ldrb.w	fp, [r4, #24]
 800de9c:	3307      	adds	r3, #7
 800de9e:	f023 0307 	bic.w	r3, r3, #7
 800dea2:	f103 0208 	add.w	r2, r3, #8
 800dea6:	f8c8 2000 	str.w	r2, [r8]
 800deaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800deae:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800deb2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800deb6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800deba:	9307      	str	r3, [sp, #28]
 800debc:	f8cd 8018 	str.w	r8, [sp, #24]
 800dec0:	ee08 0a10 	vmov	s16, r0
 800dec4:	4b9f      	ldr	r3, [pc, #636]	; (800e144 <_printf_float+0x2dc>)
 800dec6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800deca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dece:	f7f2 fe2d 	bl	8000b2c <__aeabi_dcmpun>
 800ded2:	bb88      	cbnz	r0, 800df38 <_printf_float+0xd0>
 800ded4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ded8:	4b9a      	ldr	r3, [pc, #616]	; (800e144 <_printf_float+0x2dc>)
 800deda:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dede:	f7f2 fe07 	bl	8000af0 <__aeabi_dcmple>
 800dee2:	bb48      	cbnz	r0, 800df38 <_printf_float+0xd0>
 800dee4:	2200      	movs	r2, #0
 800dee6:	2300      	movs	r3, #0
 800dee8:	4640      	mov	r0, r8
 800deea:	4649      	mov	r1, r9
 800deec:	f7f2 fdf6 	bl	8000adc <__aeabi_dcmplt>
 800def0:	b110      	cbz	r0, 800def8 <_printf_float+0x90>
 800def2:	232d      	movs	r3, #45	; 0x2d
 800def4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800def8:	4b93      	ldr	r3, [pc, #588]	; (800e148 <_printf_float+0x2e0>)
 800defa:	4894      	ldr	r0, [pc, #592]	; (800e14c <_printf_float+0x2e4>)
 800defc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800df00:	bf94      	ite	ls
 800df02:	4698      	movls	r8, r3
 800df04:	4680      	movhi	r8, r0
 800df06:	2303      	movs	r3, #3
 800df08:	6123      	str	r3, [r4, #16]
 800df0a:	9b05      	ldr	r3, [sp, #20]
 800df0c:	f023 0204 	bic.w	r2, r3, #4
 800df10:	6022      	str	r2, [r4, #0]
 800df12:	f04f 0900 	mov.w	r9, #0
 800df16:	9700      	str	r7, [sp, #0]
 800df18:	4633      	mov	r3, r6
 800df1a:	aa0b      	add	r2, sp, #44	; 0x2c
 800df1c:	4621      	mov	r1, r4
 800df1e:	4628      	mov	r0, r5
 800df20:	f000 f9d8 	bl	800e2d4 <_printf_common>
 800df24:	3001      	adds	r0, #1
 800df26:	f040 8090 	bne.w	800e04a <_printf_float+0x1e2>
 800df2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800df2e:	b00d      	add	sp, #52	; 0x34
 800df30:	ecbd 8b02 	vpop	{d8}
 800df34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df38:	4642      	mov	r2, r8
 800df3a:	464b      	mov	r3, r9
 800df3c:	4640      	mov	r0, r8
 800df3e:	4649      	mov	r1, r9
 800df40:	f7f2 fdf4 	bl	8000b2c <__aeabi_dcmpun>
 800df44:	b140      	cbz	r0, 800df58 <_printf_float+0xf0>
 800df46:	464b      	mov	r3, r9
 800df48:	2b00      	cmp	r3, #0
 800df4a:	bfbc      	itt	lt
 800df4c:	232d      	movlt	r3, #45	; 0x2d
 800df4e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800df52:	487f      	ldr	r0, [pc, #508]	; (800e150 <_printf_float+0x2e8>)
 800df54:	4b7f      	ldr	r3, [pc, #508]	; (800e154 <_printf_float+0x2ec>)
 800df56:	e7d1      	b.n	800defc <_printf_float+0x94>
 800df58:	6863      	ldr	r3, [r4, #4]
 800df5a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800df5e:	9206      	str	r2, [sp, #24]
 800df60:	1c5a      	adds	r2, r3, #1
 800df62:	d13f      	bne.n	800dfe4 <_printf_float+0x17c>
 800df64:	2306      	movs	r3, #6
 800df66:	6063      	str	r3, [r4, #4]
 800df68:	9b05      	ldr	r3, [sp, #20]
 800df6a:	6861      	ldr	r1, [r4, #4]
 800df6c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800df70:	2300      	movs	r3, #0
 800df72:	9303      	str	r3, [sp, #12]
 800df74:	ab0a      	add	r3, sp, #40	; 0x28
 800df76:	e9cd b301 	strd	fp, r3, [sp, #4]
 800df7a:	ab09      	add	r3, sp, #36	; 0x24
 800df7c:	ec49 8b10 	vmov	d0, r8, r9
 800df80:	9300      	str	r3, [sp, #0]
 800df82:	6022      	str	r2, [r4, #0]
 800df84:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800df88:	4628      	mov	r0, r5
 800df8a:	f7ff fecd 	bl	800dd28 <__cvt>
 800df8e:	9b06      	ldr	r3, [sp, #24]
 800df90:	9909      	ldr	r1, [sp, #36]	; 0x24
 800df92:	2b47      	cmp	r3, #71	; 0x47
 800df94:	4680      	mov	r8, r0
 800df96:	d108      	bne.n	800dfaa <_printf_float+0x142>
 800df98:	1cc8      	adds	r0, r1, #3
 800df9a:	db02      	blt.n	800dfa2 <_printf_float+0x13a>
 800df9c:	6863      	ldr	r3, [r4, #4]
 800df9e:	4299      	cmp	r1, r3
 800dfa0:	dd41      	ble.n	800e026 <_printf_float+0x1be>
 800dfa2:	f1ab 0b02 	sub.w	fp, fp, #2
 800dfa6:	fa5f fb8b 	uxtb.w	fp, fp
 800dfaa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800dfae:	d820      	bhi.n	800dff2 <_printf_float+0x18a>
 800dfb0:	3901      	subs	r1, #1
 800dfb2:	465a      	mov	r2, fp
 800dfb4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800dfb8:	9109      	str	r1, [sp, #36]	; 0x24
 800dfba:	f7ff ff17 	bl	800ddec <__exponent>
 800dfbe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dfc0:	1813      	adds	r3, r2, r0
 800dfc2:	2a01      	cmp	r2, #1
 800dfc4:	4681      	mov	r9, r0
 800dfc6:	6123      	str	r3, [r4, #16]
 800dfc8:	dc02      	bgt.n	800dfd0 <_printf_float+0x168>
 800dfca:	6822      	ldr	r2, [r4, #0]
 800dfcc:	07d2      	lsls	r2, r2, #31
 800dfce:	d501      	bpl.n	800dfd4 <_printf_float+0x16c>
 800dfd0:	3301      	adds	r3, #1
 800dfd2:	6123      	str	r3, [r4, #16]
 800dfd4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d09c      	beq.n	800df16 <_printf_float+0xae>
 800dfdc:	232d      	movs	r3, #45	; 0x2d
 800dfde:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dfe2:	e798      	b.n	800df16 <_printf_float+0xae>
 800dfe4:	9a06      	ldr	r2, [sp, #24]
 800dfe6:	2a47      	cmp	r2, #71	; 0x47
 800dfe8:	d1be      	bne.n	800df68 <_printf_float+0x100>
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d1bc      	bne.n	800df68 <_printf_float+0x100>
 800dfee:	2301      	movs	r3, #1
 800dff0:	e7b9      	b.n	800df66 <_printf_float+0xfe>
 800dff2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800dff6:	d118      	bne.n	800e02a <_printf_float+0x1c2>
 800dff8:	2900      	cmp	r1, #0
 800dffa:	6863      	ldr	r3, [r4, #4]
 800dffc:	dd0b      	ble.n	800e016 <_printf_float+0x1ae>
 800dffe:	6121      	str	r1, [r4, #16]
 800e000:	b913      	cbnz	r3, 800e008 <_printf_float+0x1a0>
 800e002:	6822      	ldr	r2, [r4, #0]
 800e004:	07d0      	lsls	r0, r2, #31
 800e006:	d502      	bpl.n	800e00e <_printf_float+0x1a6>
 800e008:	3301      	adds	r3, #1
 800e00a:	440b      	add	r3, r1
 800e00c:	6123      	str	r3, [r4, #16]
 800e00e:	65a1      	str	r1, [r4, #88]	; 0x58
 800e010:	f04f 0900 	mov.w	r9, #0
 800e014:	e7de      	b.n	800dfd4 <_printf_float+0x16c>
 800e016:	b913      	cbnz	r3, 800e01e <_printf_float+0x1b6>
 800e018:	6822      	ldr	r2, [r4, #0]
 800e01a:	07d2      	lsls	r2, r2, #31
 800e01c:	d501      	bpl.n	800e022 <_printf_float+0x1ba>
 800e01e:	3302      	adds	r3, #2
 800e020:	e7f4      	b.n	800e00c <_printf_float+0x1a4>
 800e022:	2301      	movs	r3, #1
 800e024:	e7f2      	b.n	800e00c <_printf_float+0x1a4>
 800e026:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800e02a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e02c:	4299      	cmp	r1, r3
 800e02e:	db05      	blt.n	800e03c <_printf_float+0x1d4>
 800e030:	6823      	ldr	r3, [r4, #0]
 800e032:	6121      	str	r1, [r4, #16]
 800e034:	07d8      	lsls	r0, r3, #31
 800e036:	d5ea      	bpl.n	800e00e <_printf_float+0x1a6>
 800e038:	1c4b      	adds	r3, r1, #1
 800e03a:	e7e7      	b.n	800e00c <_printf_float+0x1a4>
 800e03c:	2900      	cmp	r1, #0
 800e03e:	bfd4      	ite	le
 800e040:	f1c1 0202 	rsble	r2, r1, #2
 800e044:	2201      	movgt	r2, #1
 800e046:	4413      	add	r3, r2
 800e048:	e7e0      	b.n	800e00c <_printf_float+0x1a4>
 800e04a:	6823      	ldr	r3, [r4, #0]
 800e04c:	055a      	lsls	r2, r3, #21
 800e04e:	d407      	bmi.n	800e060 <_printf_float+0x1f8>
 800e050:	6923      	ldr	r3, [r4, #16]
 800e052:	4642      	mov	r2, r8
 800e054:	4631      	mov	r1, r6
 800e056:	4628      	mov	r0, r5
 800e058:	47b8      	blx	r7
 800e05a:	3001      	adds	r0, #1
 800e05c:	d12c      	bne.n	800e0b8 <_printf_float+0x250>
 800e05e:	e764      	b.n	800df2a <_printf_float+0xc2>
 800e060:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e064:	f240 80e0 	bls.w	800e228 <_printf_float+0x3c0>
 800e068:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e06c:	2200      	movs	r2, #0
 800e06e:	2300      	movs	r3, #0
 800e070:	f7f2 fd2a 	bl	8000ac8 <__aeabi_dcmpeq>
 800e074:	2800      	cmp	r0, #0
 800e076:	d034      	beq.n	800e0e2 <_printf_float+0x27a>
 800e078:	4a37      	ldr	r2, [pc, #220]	; (800e158 <_printf_float+0x2f0>)
 800e07a:	2301      	movs	r3, #1
 800e07c:	4631      	mov	r1, r6
 800e07e:	4628      	mov	r0, r5
 800e080:	47b8      	blx	r7
 800e082:	3001      	adds	r0, #1
 800e084:	f43f af51 	beq.w	800df2a <_printf_float+0xc2>
 800e088:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e08c:	429a      	cmp	r2, r3
 800e08e:	db02      	blt.n	800e096 <_printf_float+0x22e>
 800e090:	6823      	ldr	r3, [r4, #0]
 800e092:	07d8      	lsls	r0, r3, #31
 800e094:	d510      	bpl.n	800e0b8 <_printf_float+0x250>
 800e096:	ee18 3a10 	vmov	r3, s16
 800e09a:	4652      	mov	r2, sl
 800e09c:	4631      	mov	r1, r6
 800e09e:	4628      	mov	r0, r5
 800e0a0:	47b8      	blx	r7
 800e0a2:	3001      	adds	r0, #1
 800e0a4:	f43f af41 	beq.w	800df2a <_printf_float+0xc2>
 800e0a8:	f04f 0800 	mov.w	r8, #0
 800e0ac:	f104 091a 	add.w	r9, r4, #26
 800e0b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e0b2:	3b01      	subs	r3, #1
 800e0b4:	4543      	cmp	r3, r8
 800e0b6:	dc09      	bgt.n	800e0cc <_printf_float+0x264>
 800e0b8:	6823      	ldr	r3, [r4, #0]
 800e0ba:	079b      	lsls	r3, r3, #30
 800e0bc:	f100 8105 	bmi.w	800e2ca <_printf_float+0x462>
 800e0c0:	68e0      	ldr	r0, [r4, #12]
 800e0c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e0c4:	4298      	cmp	r0, r3
 800e0c6:	bfb8      	it	lt
 800e0c8:	4618      	movlt	r0, r3
 800e0ca:	e730      	b.n	800df2e <_printf_float+0xc6>
 800e0cc:	2301      	movs	r3, #1
 800e0ce:	464a      	mov	r2, r9
 800e0d0:	4631      	mov	r1, r6
 800e0d2:	4628      	mov	r0, r5
 800e0d4:	47b8      	blx	r7
 800e0d6:	3001      	adds	r0, #1
 800e0d8:	f43f af27 	beq.w	800df2a <_printf_float+0xc2>
 800e0dc:	f108 0801 	add.w	r8, r8, #1
 800e0e0:	e7e6      	b.n	800e0b0 <_printf_float+0x248>
 800e0e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	dc39      	bgt.n	800e15c <_printf_float+0x2f4>
 800e0e8:	4a1b      	ldr	r2, [pc, #108]	; (800e158 <_printf_float+0x2f0>)
 800e0ea:	2301      	movs	r3, #1
 800e0ec:	4631      	mov	r1, r6
 800e0ee:	4628      	mov	r0, r5
 800e0f0:	47b8      	blx	r7
 800e0f2:	3001      	adds	r0, #1
 800e0f4:	f43f af19 	beq.w	800df2a <_printf_float+0xc2>
 800e0f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e0fc:	4313      	orrs	r3, r2
 800e0fe:	d102      	bne.n	800e106 <_printf_float+0x29e>
 800e100:	6823      	ldr	r3, [r4, #0]
 800e102:	07d9      	lsls	r1, r3, #31
 800e104:	d5d8      	bpl.n	800e0b8 <_printf_float+0x250>
 800e106:	ee18 3a10 	vmov	r3, s16
 800e10a:	4652      	mov	r2, sl
 800e10c:	4631      	mov	r1, r6
 800e10e:	4628      	mov	r0, r5
 800e110:	47b8      	blx	r7
 800e112:	3001      	adds	r0, #1
 800e114:	f43f af09 	beq.w	800df2a <_printf_float+0xc2>
 800e118:	f04f 0900 	mov.w	r9, #0
 800e11c:	f104 0a1a 	add.w	sl, r4, #26
 800e120:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e122:	425b      	negs	r3, r3
 800e124:	454b      	cmp	r3, r9
 800e126:	dc01      	bgt.n	800e12c <_printf_float+0x2c4>
 800e128:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e12a:	e792      	b.n	800e052 <_printf_float+0x1ea>
 800e12c:	2301      	movs	r3, #1
 800e12e:	4652      	mov	r2, sl
 800e130:	4631      	mov	r1, r6
 800e132:	4628      	mov	r0, r5
 800e134:	47b8      	blx	r7
 800e136:	3001      	adds	r0, #1
 800e138:	f43f aef7 	beq.w	800df2a <_printf_float+0xc2>
 800e13c:	f109 0901 	add.w	r9, r9, #1
 800e140:	e7ee      	b.n	800e120 <_printf_float+0x2b8>
 800e142:	bf00      	nop
 800e144:	7fefffff 	.word	0x7fefffff
 800e148:	080137a8 	.word	0x080137a8
 800e14c:	080137ac 	.word	0x080137ac
 800e150:	080137b4 	.word	0x080137b4
 800e154:	080137b0 	.word	0x080137b0
 800e158:	080137b8 	.word	0x080137b8
 800e15c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e15e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e160:	429a      	cmp	r2, r3
 800e162:	bfa8      	it	ge
 800e164:	461a      	movge	r2, r3
 800e166:	2a00      	cmp	r2, #0
 800e168:	4691      	mov	r9, r2
 800e16a:	dc37      	bgt.n	800e1dc <_printf_float+0x374>
 800e16c:	f04f 0b00 	mov.w	fp, #0
 800e170:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e174:	f104 021a 	add.w	r2, r4, #26
 800e178:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e17a:	9305      	str	r3, [sp, #20]
 800e17c:	eba3 0309 	sub.w	r3, r3, r9
 800e180:	455b      	cmp	r3, fp
 800e182:	dc33      	bgt.n	800e1ec <_printf_float+0x384>
 800e184:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e188:	429a      	cmp	r2, r3
 800e18a:	db3b      	blt.n	800e204 <_printf_float+0x39c>
 800e18c:	6823      	ldr	r3, [r4, #0]
 800e18e:	07da      	lsls	r2, r3, #31
 800e190:	d438      	bmi.n	800e204 <_printf_float+0x39c>
 800e192:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e194:	9a05      	ldr	r2, [sp, #20]
 800e196:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e198:	1a9a      	subs	r2, r3, r2
 800e19a:	eba3 0901 	sub.w	r9, r3, r1
 800e19e:	4591      	cmp	r9, r2
 800e1a0:	bfa8      	it	ge
 800e1a2:	4691      	movge	r9, r2
 800e1a4:	f1b9 0f00 	cmp.w	r9, #0
 800e1a8:	dc35      	bgt.n	800e216 <_printf_float+0x3ae>
 800e1aa:	f04f 0800 	mov.w	r8, #0
 800e1ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e1b2:	f104 0a1a 	add.w	sl, r4, #26
 800e1b6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e1ba:	1a9b      	subs	r3, r3, r2
 800e1bc:	eba3 0309 	sub.w	r3, r3, r9
 800e1c0:	4543      	cmp	r3, r8
 800e1c2:	f77f af79 	ble.w	800e0b8 <_printf_float+0x250>
 800e1c6:	2301      	movs	r3, #1
 800e1c8:	4652      	mov	r2, sl
 800e1ca:	4631      	mov	r1, r6
 800e1cc:	4628      	mov	r0, r5
 800e1ce:	47b8      	blx	r7
 800e1d0:	3001      	adds	r0, #1
 800e1d2:	f43f aeaa 	beq.w	800df2a <_printf_float+0xc2>
 800e1d6:	f108 0801 	add.w	r8, r8, #1
 800e1da:	e7ec      	b.n	800e1b6 <_printf_float+0x34e>
 800e1dc:	4613      	mov	r3, r2
 800e1de:	4631      	mov	r1, r6
 800e1e0:	4642      	mov	r2, r8
 800e1e2:	4628      	mov	r0, r5
 800e1e4:	47b8      	blx	r7
 800e1e6:	3001      	adds	r0, #1
 800e1e8:	d1c0      	bne.n	800e16c <_printf_float+0x304>
 800e1ea:	e69e      	b.n	800df2a <_printf_float+0xc2>
 800e1ec:	2301      	movs	r3, #1
 800e1ee:	4631      	mov	r1, r6
 800e1f0:	4628      	mov	r0, r5
 800e1f2:	9205      	str	r2, [sp, #20]
 800e1f4:	47b8      	blx	r7
 800e1f6:	3001      	adds	r0, #1
 800e1f8:	f43f ae97 	beq.w	800df2a <_printf_float+0xc2>
 800e1fc:	9a05      	ldr	r2, [sp, #20]
 800e1fe:	f10b 0b01 	add.w	fp, fp, #1
 800e202:	e7b9      	b.n	800e178 <_printf_float+0x310>
 800e204:	ee18 3a10 	vmov	r3, s16
 800e208:	4652      	mov	r2, sl
 800e20a:	4631      	mov	r1, r6
 800e20c:	4628      	mov	r0, r5
 800e20e:	47b8      	blx	r7
 800e210:	3001      	adds	r0, #1
 800e212:	d1be      	bne.n	800e192 <_printf_float+0x32a>
 800e214:	e689      	b.n	800df2a <_printf_float+0xc2>
 800e216:	9a05      	ldr	r2, [sp, #20]
 800e218:	464b      	mov	r3, r9
 800e21a:	4442      	add	r2, r8
 800e21c:	4631      	mov	r1, r6
 800e21e:	4628      	mov	r0, r5
 800e220:	47b8      	blx	r7
 800e222:	3001      	adds	r0, #1
 800e224:	d1c1      	bne.n	800e1aa <_printf_float+0x342>
 800e226:	e680      	b.n	800df2a <_printf_float+0xc2>
 800e228:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e22a:	2a01      	cmp	r2, #1
 800e22c:	dc01      	bgt.n	800e232 <_printf_float+0x3ca>
 800e22e:	07db      	lsls	r3, r3, #31
 800e230:	d538      	bpl.n	800e2a4 <_printf_float+0x43c>
 800e232:	2301      	movs	r3, #1
 800e234:	4642      	mov	r2, r8
 800e236:	4631      	mov	r1, r6
 800e238:	4628      	mov	r0, r5
 800e23a:	47b8      	blx	r7
 800e23c:	3001      	adds	r0, #1
 800e23e:	f43f ae74 	beq.w	800df2a <_printf_float+0xc2>
 800e242:	ee18 3a10 	vmov	r3, s16
 800e246:	4652      	mov	r2, sl
 800e248:	4631      	mov	r1, r6
 800e24a:	4628      	mov	r0, r5
 800e24c:	47b8      	blx	r7
 800e24e:	3001      	adds	r0, #1
 800e250:	f43f ae6b 	beq.w	800df2a <_printf_float+0xc2>
 800e254:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e258:	2200      	movs	r2, #0
 800e25a:	2300      	movs	r3, #0
 800e25c:	f7f2 fc34 	bl	8000ac8 <__aeabi_dcmpeq>
 800e260:	b9d8      	cbnz	r0, 800e29a <_printf_float+0x432>
 800e262:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e264:	f108 0201 	add.w	r2, r8, #1
 800e268:	3b01      	subs	r3, #1
 800e26a:	4631      	mov	r1, r6
 800e26c:	4628      	mov	r0, r5
 800e26e:	47b8      	blx	r7
 800e270:	3001      	adds	r0, #1
 800e272:	d10e      	bne.n	800e292 <_printf_float+0x42a>
 800e274:	e659      	b.n	800df2a <_printf_float+0xc2>
 800e276:	2301      	movs	r3, #1
 800e278:	4652      	mov	r2, sl
 800e27a:	4631      	mov	r1, r6
 800e27c:	4628      	mov	r0, r5
 800e27e:	47b8      	blx	r7
 800e280:	3001      	adds	r0, #1
 800e282:	f43f ae52 	beq.w	800df2a <_printf_float+0xc2>
 800e286:	f108 0801 	add.w	r8, r8, #1
 800e28a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e28c:	3b01      	subs	r3, #1
 800e28e:	4543      	cmp	r3, r8
 800e290:	dcf1      	bgt.n	800e276 <_printf_float+0x40e>
 800e292:	464b      	mov	r3, r9
 800e294:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e298:	e6dc      	b.n	800e054 <_printf_float+0x1ec>
 800e29a:	f04f 0800 	mov.w	r8, #0
 800e29e:	f104 0a1a 	add.w	sl, r4, #26
 800e2a2:	e7f2      	b.n	800e28a <_printf_float+0x422>
 800e2a4:	2301      	movs	r3, #1
 800e2a6:	4642      	mov	r2, r8
 800e2a8:	e7df      	b.n	800e26a <_printf_float+0x402>
 800e2aa:	2301      	movs	r3, #1
 800e2ac:	464a      	mov	r2, r9
 800e2ae:	4631      	mov	r1, r6
 800e2b0:	4628      	mov	r0, r5
 800e2b2:	47b8      	blx	r7
 800e2b4:	3001      	adds	r0, #1
 800e2b6:	f43f ae38 	beq.w	800df2a <_printf_float+0xc2>
 800e2ba:	f108 0801 	add.w	r8, r8, #1
 800e2be:	68e3      	ldr	r3, [r4, #12]
 800e2c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e2c2:	1a5b      	subs	r3, r3, r1
 800e2c4:	4543      	cmp	r3, r8
 800e2c6:	dcf0      	bgt.n	800e2aa <_printf_float+0x442>
 800e2c8:	e6fa      	b.n	800e0c0 <_printf_float+0x258>
 800e2ca:	f04f 0800 	mov.w	r8, #0
 800e2ce:	f104 0919 	add.w	r9, r4, #25
 800e2d2:	e7f4      	b.n	800e2be <_printf_float+0x456>

0800e2d4 <_printf_common>:
 800e2d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e2d8:	4616      	mov	r6, r2
 800e2da:	4699      	mov	r9, r3
 800e2dc:	688a      	ldr	r2, [r1, #8]
 800e2de:	690b      	ldr	r3, [r1, #16]
 800e2e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e2e4:	4293      	cmp	r3, r2
 800e2e6:	bfb8      	it	lt
 800e2e8:	4613      	movlt	r3, r2
 800e2ea:	6033      	str	r3, [r6, #0]
 800e2ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e2f0:	4607      	mov	r7, r0
 800e2f2:	460c      	mov	r4, r1
 800e2f4:	b10a      	cbz	r2, 800e2fa <_printf_common+0x26>
 800e2f6:	3301      	adds	r3, #1
 800e2f8:	6033      	str	r3, [r6, #0]
 800e2fa:	6823      	ldr	r3, [r4, #0]
 800e2fc:	0699      	lsls	r1, r3, #26
 800e2fe:	bf42      	ittt	mi
 800e300:	6833      	ldrmi	r3, [r6, #0]
 800e302:	3302      	addmi	r3, #2
 800e304:	6033      	strmi	r3, [r6, #0]
 800e306:	6825      	ldr	r5, [r4, #0]
 800e308:	f015 0506 	ands.w	r5, r5, #6
 800e30c:	d106      	bne.n	800e31c <_printf_common+0x48>
 800e30e:	f104 0a19 	add.w	sl, r4, #25
 800e312:	68e3      	ldr	r3, [r4, #12]
 800e314:	6832      	ldr	r2, [r6, #0]
 800e316:	1a9b      	subs	r3, r3, r2
 800e318:	42ab      	cmp	r3, r5
 800e31a:	dc26      	bgt.n	800e36a <_printf_common+0x96>
 800e31c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e320:	1e13      	subs	r3, r2, #0
 800e322:	6822      	ldr	r2, [r4, #0]
 800e324:	bf18      	it	ne
 800e326:	2301      	movne	r3, #1
 800e328:	0692      	lsls	r2, r2, #26
 800e32a:	d42b      	bmi.n	800e384 <_printf_common+0xb0>
 800e32c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e330:	4649      	mov	r1, r9
 800e332:	4638      	mov	r0, r7
 800e334:	47c0      	blx	r8
 800e336:	3001      	adds	r0, #1
 800e338:	d01e      	beq.n	800e378 <_printf_common+0xa4>
 800e33a:	6823      	ldr	r3, [r4, #0]
 800e33c:	68e5      	ldr	r5, [r4, #12]
 800e33e:	6832      	ldr	r2, [r6, #0]
 800e340:	f003 0306 	and.w	r3, r3, #6
 800e344:	2b04      	cmp	r3, #4
 800e346:	bf08      	it	eq
 800e348:	1aad      	subeq	r5, r5, r2
 800e34a:	68a3      	ldr	r3, [r4, #8]
 800e34c:	6922      	ldr	r2, [r4, #16]
 800e34e:	bf0c      	ite	eq
 800e350:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e354:	2500      	movne	r5, #0
 800e356:	4293      	cmp	r3, r2
 800e358:	bfc4      	itt	gt
 800e35a:	1a9b      	subgt	r3, r3, r2
 800e35c:	18ed      	addgt	r5, r5, r3
 800e35e:	2600      	movs	r6, #0
 800e360:	341a      	adds	r4, #26
 800e362:	42b5      	cmp	r5, r6
 800e364:	d11a      	bne.n	800e39c <_printf_common+0xc8>
 800e366:	2000      	movs	r0, #0
 800e368:	e008      	b.n	800e37c <_printf_common+0xa8>
 800e36a:	2301      	movs	r3, #1
 800e36c:	4652      	mov	r2, sl
 800e36e:	4649      	mov	r1, r9
 800e370:	4638      	mov	r0, r7
 800e372:	47c0      	blx	r8
 800e374:	3001      	adds	r0, #1
 800e376:	d103      	bne.n	800e380 <_printf_common+0xac>
 800e378:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e37c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e380:	3501      	adds	r5, #1
 800e382:	e7c6      	b.n	800e312 <_printf_common+0x3e>
 800e384:	18e1      	adds	r1, r4, r3
 800e386:	1c5a      	adds	r2, r3, #1
 800e388:	2030      	movs	r0, #48	; 0x30
 800e38a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e38e:	4422      	add	r2, r4
 800e390:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e394:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e398:	3302      	adds	r3, #2
 800e39a:	e7c7      	b.n	800e32c <_printf_common+0x58>
 800e39c:	2301      	movs	r3, #1
 800e39e:	4622      	mov	r2, r4
 800e3a0:	4649      	mov	r1, r9
 800e3a2:	4638      	mov	r0, r7
 800e3a4:	47c0      	blx	r8
 800e3a6:	3001      	adds	r0, #1
 800e3a8:	d0e6      	beq.n	800e378 <_printf_common+0xa4>
 800e3aa:	3601      	adds	r6, #1
 800e3ac:	e7d9      	b.n	800e362 <_printf_common+0x8e>
	...

0800e3b0 <_printf_i>:
 800e3b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e3b4:	7e0f      	ldrb	r7, [r1, #24]
 800e3b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e3b8:	2f78      	cmp	r7, #120	; 0x78
 800e3ba:	4691      	mov	r9, r2
 800e3bc:	4680      	mov	r8, r0
 800e3be:	460c      	mov	r4, r1
 800e3c0:	469a      	mov	sl, r3
 800e3c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e3c6:	d807      	bhi.n	800e3d8 <_printf_i+0x28>
 800e3c8:	2f62      	cmp	r7, #98	; 0x62
 800e3ca:	d80a      	bhi.n	800e3e2 <_printf_i+0x32>
 800e3cc:	2f00      	cmp	r7, #0
 800e3ce:	f000 80d8 	beq.w	800e582 <_printf_i+0x1d2>
 800e3d2:	2f58      	cmp	r7, #88	; 0x58
 800e3d4:	f000 80a3 	beq.w	800e51e <_printf_i+0x16e>
 800e3d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e3dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e3e0:	e03a      	b.n	800e458 <_printf_i+0xa8>
 800e3e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e3e6:	2b15      	cmp	r3, #21
 800e3e8:	d8f6      	bhi.n	800e3d8 <_printf_i+0x28>
 800e3ea:	a101      	add	r1, pc, #4	; (adr r1, 800e3f0 <_printf_i+0x40>)
 800e3ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e3f0:	0800e449 	.word	0x0800e449
 800e3f4:	0800e45d 	.word	0x0800e45d
 800e3f8:	0800e3d9 	.word	0x0800e3d9
 800e3fc:	0800e3d9 	.word	0x0800e3d9
 800e400:	0800e3d9 	.word	0x0800e3d9
 800e404:	0800e3d9 	.word	0x0800e3d9
 800e408:	0800e45d 	.word	0x0800e45d
 800e40c:	0800e3d9 	.word	0x0800e3d9
 800e410:	0800e3d9 	.word	0x0800e3d9
 800e414:	0800e3d9 	.word	0x0800e3d9
 800e418:	0800e3d9 	.word	0x0800e3d9
 800e41c:	0800e569 	.word	0x0800e569
 800e420:	0800e48d 	.word	0x0800e48d
 800e424:	0800e54b 	.word	0x0800e54b
 800e428:	0800e3d9 	.word	0x0800e3d9
 800e42c:	0800e3d9 	.word	0x0800e3d9
 800e430:	0800e58b 	.word	0x0800e58b
 800e434:	0800e3d9 	.word	0x0800e3d9
 800e438:	0800e48d 	.word	0x0800e48d
 800e43c:	0800e3d9 	.word	0x0800e3d9
 800e440:	0800e3d9 	.word	0x0800e3d9
 800e444:	0800e553 	.word	0x0800e553
 800e448:	682b      	ldr	r3, [r5, #0]
 800e44a:	1d1a      	adds	r2, r3, #4
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	602a      	str	r2, [r5, #0]
 800e450:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e454:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e458:	2301      	movs	r3, #1
 800e45a:	e0a3      	b.n	800e5a4 <_printf_i+0x1f4>
 800e45c:	6820      	ldr	r0, [r4, #0]
 800e45e:	6829      	ldr	r1, [r5, #0]
 800e460:	0606      	lsls	r6, r0, #24
 800e462:	f101 0304 	add.w	r3, r1, #4
 800e466:	d50a      	bpl.n	800e47e <_printf_i+0xce>
 800e468:	680e      	ldr	r6, [r1, #0]
 800e46a:	602b      	str	r3, [r5, #0]
 800e46c:	2e00      	cmp	r6, #0
 800e46e:	da03      	bge.n	800e478 <_printf_i+0xc8>
 800e470:	232d      	movs	r3, #45	; 0x2d
 800e472:	4276      	negs	r6, r6
 800e474:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e478:	485e      	ldr	r0, [pc, #376]	; (800e5f4 <_printf_i+0x244>)
 800e47a:	230a      	movs	r3, #10
 800e47c:	e019      	b.n	800e4b2 <_printf_i+0x102>
 800e47e:	680e      	ldr	r6, [r1, #0]
 800e480:	602b      	str	r3, [r5, #0]
 800e482:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e486:	bf18      	it	ne
 800e488:	b236      	sxthne	r6, r6
 800e48a:	e7ef      	b.n	800e46c <_printf_i+0xbc>
 800e48c:	682b      	ldr	r3, [r5, #0]
 800e48e:	6820      	ldr	r0, [r4, #0]
 800e490:	1d19      	adds	r1, r3, #4
 800e492:	6029      	str	r1, [r5, #0]
 800e494:	0601      	lsls	r1, r0, #24
 800e496:	d501      	bpl.n	800e49c <_printf_i+0xec>
 800e498:	681e      	ldr	r6, [r3, #0]
 800e49a:	e002      	b.n	800e4a2 <_printf_i+0xf2>
 800e49c:	0646      	lsls	r6, r0, #25
 800e49e:	d5fb      	bpl.n	800e498 <_printf_i+0xe8>
 800e4a0:	881e      	ldrh	r6, [r3, #0]
 800e4a2:	4854      	ldr	r0, [pc, #336]	; (800e5f4 <_printf_i+0x244>)
 800e4a4:	2f6f      	cmp	r7, #111	; 0x6f
 800e4a6:	bf0c      	ite	eq
 800e4a8:	2308      	moveq	r3, #8
 800e4aa:	230a      	movne	r3, #10
 800e4ac:	2100      	movs	r1, #0
 800e4ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e4b2:	6865      	ldr	r5, [r4, #4]
 800e4b4:	60a5      	str	r5, [r4, #8]
 800e4b6:	2d00      	cmp	r5, #0
 800e4b8:	bfa2      	ittt	ge
 800e4ba:	6821      	ldrge	r1, [r4, #0]
 800e4bc:	f021 0104 	bicge.w	r1, r1, #4
 800e4c0:	6021      	strge	r1, [r4, #0]
 800e4c2:	b90e      	cbnz	r6, 800e4c8 <_printf_i+0x118>
 800e4c4:	2d00      	cmp	r5, #0
 800e4c6:	d04d      	beq.n	800e564 <_printf_i+0x1b4>
 800e4c8:	4615      	mov	r5, r2
 800e4ca:	fbb6 f1f3 	udiv	r1, r6, r3
 800e4ce:	fb03 6711 	mls	r7, r3, r1, r6
 800e4d2:	5dc7      	ldrb	r7, [r0, r7]
 800e4d4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e4d8:	4637      	mov	r7, r6
 800e4da:	42bb      	cmp	r3, r7
 800e4dc:	460e      	mov	r6, r1
 800e4de:	d9f4      	bls.n	800e4ca <_printf_i+0x11a>
 800e4e0:	2b08      	cmp	r3, #8
 800e4e2:	d10b      	bne.n	800e4fc <_printf_i+0x14c>
 800e4e4:	6823      	ldr	r3, [r4, #0]
 800e4e6:	07de      	lsls	r6, r3, #31
 800e4e8:	d508      	bpl.n	800e4fc <_printf_i+0x14c>
 800e4ea:	6923      	ldr	r3, [r4, #16]
 800e4ec:	6861      	ldr	r1, [r4, #4]
 800e4ee:	4299      	cmp	r1, r3
 800e4f0:	bfde      	ittt	le
 800e4f2:	2330      	movle	r3, #48	; 0x30
 800e4f4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e4f8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800e4fc:	1b52      	subs	r2, r2, r5
 800e4fe:	6122      	str	r2, [r4, #16]
 800e500:	f8cd a000 	str.w	sl, [sp]
 800e504:	464b      	mov	r3, r9
 800e506:	aa03      	add	r2, sp, #12
 800e508:	4621      	mov	r1, r4
 800e50a:	4640      	mov	r0, r8
 800e50c:	f7ff fee2 	bl	800e2d4 <_printf_common>
 800e510:	3001      	adds	r0, #1
 800e512:	d14c      	bne.n	800e5ae <_printf_i+0x1fe>
 800e514:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e518:	b004      	add	sp, #16
 800e51a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e51e:	4835      	ldr	r0, [pc, #212]	; (800e5f4 <_printf_i+0x244>)
 800e520:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e524:	6829      	ldr	r1, [r5, #0]
 800e526:	6823      	ldr	r3, [r4, #0]
 800e528:	f851 6b04 	ldr.w	r6, [r1], #4
 800e52c:	6029      	str	r1, [r5, #0]
 800e52e:	061d      	lsls	r5, r3, #24
 800e530:	d514      	bpl.n	800e55c <_printf_i+0x1ac>
 800e532:	07df      	lsls	r7, r3, #31
 800e534:	bf44      	itt	mi
 800e536:	f043 0320 	orrmi.w	r3, r3, #32
 800e53a:	6023      	strmi	r3, [r4, #0]
 800e53c:	b91e      	cbnz	r6, 800e546 <_printf_i+0x196>
 800e53e:	6823      	ldr	r3, [r4, #0]
 800e540:	f023 0320 	bic.w	r3, r3, #32
 800e544:	6023      	str	r3, [r4, #0]
 800e546:	2310      	movs	r3, #16
 800e548:	e7b0      	b.n	800e4ac <_printf_i+0xfc>
 800e54a:	6823      	ldr	r3, [r4, #0]
 800e54c:	f043 0320 	orr.w	r3, r3, #32
 800e550:	6023      	str	r3, [r4, #0]
 800e552:	2378      	movs	r3, #120	; 0x78
 800e554:	4828      	ldr	r0, [pc, #160]	; (800e5f8 <_printf_i+0x248>)
 800e556:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e55a:	e7e3      	b.n	800e524 <_printf_i+0x174>
 800e55c:	0659      	lsls	r1, r3, #25
 800e55e:	bf48      	it	mi
 800e560:	b2b6      	uxthmi	r6, r6
 800e562:	e7e6      	b.n	800e532 <_printf_i+0x182>
 800e564:	4615      	mov	r5, r2
 800e566:	e7bb      	b.n	800e4e0 <_printf_i+0x130>
 800e568:	682b      	ldr	r3, [r5, #0]
 800e56a:	6826      	ldr	r6, [r4, #0]
 800e56c:	6961      	ldr	r1, [r4, #20]
 800e56e:	1d18      	adds	r0, r3, #4
 800e570:	6028      	str	r0, [r5, #0]
 800e572:	0635      	lsls	r5, r6, #24
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	d501      	bpl.n	800e57c <_printf_i+0x1cc>
 800e578:	6019      	str	r1, [r3, #0]
 800e57a:	e002      	b.n	800e582 <_printf_i+0x1d2>
 800e57c:	0670      	lsls	r0, r6, #25
 800e57e:	d5fb      	bpl.n	800e578 <_printf_i+0x1c8>
 800e580:	8019      	strh	r1, [r3, #0]
 800e582:	2300      	movs	r3, #0
 800e584:	6123      	str	r3, [r4, #16]
 800e586:	4615      	mov	r5, r2
 800e588:	e7ba      	b.n	800e500 <_printf_i+0x150>
 800e58a:	682b      	ldr	r3, [r5, #0]
 800e58c:	1d1a      	adds	r2, r3, #4
 800e58e:	602a      	str	r2, [r5, #0]
 800e590:	681d      	ldr	r5, [r3, #0]
 800e592:	6862      	ldr	r2, [r4, #4]
 800e594:	2100      	movs	r1, #0
 800e596:	4628      	mov	r0, r5
 800e598:	f7f1 fe22 	bl	80001e0 <memchr>
 800e59c:	b108      	cbz	r0, 800e5a2 <_printf_i+0x1f2>
 800e59e:	1b40      	subs	r0, r0, r5
 800e5a0:	6060      	str	r0, [r4, #4]
 800e5a2:	6863      	ldr	r3, [r4, #4]
 800e5a4:	6123      	str	r3, [r4, #16]
 800e5a6:	2300      	movs	r3, #0
 800e5a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e5ac:	e7a8      	b.n	800e500 <_printf_i+0x150>
 800e5ae:	6923      	ldr	r3, [r4, #16]
 800e5b0:	462a      	mov	r2, r5
 800e5b2:	4649      	mov	r1, r9
 800e5b4:	4640      	mov	r0, r8
 800e5b6:	47d0      	blx	sl
 800e5b8:	3001      	adds	r0, #1
 800e5ba:	d0ab      	beq.n	800e514 <_printf_i+0x164>
 800e5bc:	6823      	ldr	r3, [r4, #0]
 800e5be:	079b      	lsls	r3, r3, #30
 800e5c0:	d413      	bmi.n	800e5ea <_printf_i+0x23a>
 800e5c2:	68e0      	ldr	r0, [r4, #12]
 800e5c4:	9b03      	ldr	r3, [sp, #12]
 800e5c6:	4298      	cmp	r0, r3
 800e5c8:	bfb8      	it	lt
 800e5ca:	4618      	movlt	r0, r3
 800e5cc:	e7a4      	b.n	800e518 <_printf_i+0x168>
 800e5ce:	2301      	movs	r3, #1
 800e5d0:	4632      	mov	r2, r6
 800e5d2:	4649      	mov	r1, r9
 800e5d4:	4640      	mov	r0, r8
 800e5d6:	47d0      	blx	sl
 800e5d8:	3001      	adds	r0, #1
 800e5da:	d09b      	beq.n	800e514 <_printf_i+0x164>
 800e5dc:	3501      	adds	r5, #1
 800e5de:	68e3      	ldr	r3, [r4, #12]
 800e5e0:	9903      	ldr	r1, [sp, #12]
 800e5e2:	1a5b      	subs	r3, r3, r1
 800e5e4:	42ab      	cmp	r3, r5
 800e5e6:	dcf2      	bgt.n	800e5ce <_printf_i+0x21e>
 800e5e8:	e7eb      	b.n	800e5c2 <_printf_i+0x212>
 800e5ea:	2500      	movs	r5, #0
 800e5ec:	f104 0619 	add.w	r6, r4, #25
 800e5f0:	e7f5      	b.n	800e5de <_printf_i+0x22e>
 800e5f2:	bf00      	nop
 800e5f4:	080137ba 	.word	0x080137ba
 800e5f8:	080137cb 	.word	0x080137cb

0800e5fc <siprintf>:
 800e5fc:	b40e      	push	{r1, r2, r3}
 800e5fe:	b500      	push	{lr}
 800e600:	b09c      	sub	sp, #112	; 0x70
 800e602:	ab1d      	add	r3, sp, #116	; 0x74
 800e604:	9002      	str	r0, [sp, #8]
 800e606:	9006      	str	r0, [sp, #24]
 800e608:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e60c:	4809      	ldr	r0, [pc, #36]	; (800e634 <siprintf+0x38>)
 800e60e:	9107      	str	r1, [sp, #28]
 800e610:	9104      	str	r1, [sp, #16]
 800e612:	4909      	ldr	r1, [pc, #36]	; (800e638 <siprintf+0x3c>)
 800e614:	f853 2b04 	ldr.w	r2, [r3], #4
 800e618:	9105      	str	r1, [sp, #20]
 800e61a:	6800      	ldr	r0, [r0, #0]
 800e61c:	9301      	str	r3, [sp, #4]
 800e61e:	a902      	add	r1, sp, #8
 800e620:	f002 ff5a 	bl	80114d8 <_svfiprintf_r>
 800e624:	9b02      	ldr	r3, [sp, #8]
 800e626:	2200      	movs	r2, #0
 800e628:	701a      	strb	r2, [r3, #0]
 800e62a:	b01c      	add	sp, #112	; 0x70
 800e62c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e630:	b003      	add	sp, #12
 800e632:	4770      	bx	lr
 800e634:	20000218 	.word	0x20000218
 800e638:	ffff0208 	.word	0xffff0208

0800e63c <strchr>:
 800e63c:	b2c9      	uxtb	r1, r1
 800e63e:	4603      	mov	r3, r0
 800e640:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e644:	b11a      	cbz	r2, 800e64e <strchr+0x12>
 800e646:	428a      	cmp	r2, r1
 800e648:	d1f9      	bne.n	800e63e <strchr+0x2>
 800e64a:	4618      	mov	r0, r3
 800e64c:	4770      	bx	lr
 800e64e:	2900      	cmp	r1, #0
 800e650:	bf18      	it	ne
 800e652:	2300      	movne	r3, #0
 800e654:	e7f9      	b.n	800e64a <strchr+0xe>

0800e656 <strncmp>:
 800e656:	b510      	push	{r4, lr}
 800e658:	b17a      	cbz	r2, 800e67a <strncmp+0x24>
 800e65a:	4603      	mov	r3, r0
 800e65c:	3901      	subs	r1, #1
 800e65e:	1884      	adds	r4, r0, r2
 800e660:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e664:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800e668:	4290      	cmp	r0, r2
 800e66a:	d101      	bne.n	800e670 <strncmp+0x1a>
 800e66c:	42a3      	cmp	r3, r4
 800e66e:	d101      	bne.n	800e674 <strncmp+0x1e>
 800e670:	1a80      	subs	r0, r0, r2
 800e672:	bd10      	pop	{r4, pc}
 800e674:	2800      	cmp	r0, #0
 800e676:	d1f3      	bne.n	800e660 <strncmp+0xa>
 800e678:	e7fa      	b.n	800e670 <strncmp+0x1a>
 800e67a:	4610      	mov	r0, r2
 800e67c:	e7f9      	b.n	800e672 <strncmp+0x1c>

0800e67e <strstr>:
 800e67e:	780a      	ldrb	r2, [r1, #0]
 800e680:	b570      	push	{r4, r5, r6, lr}
 800e682:	b96a      	cbnz	r2, 800e6a0 <strstr+0x22>
 800e684:	bd70      	pop	{r4, r5, r6, pc}
 800e686:	429a      	cmp	r2, r3
 800e688:	d109      	bne.n	800e69e <strstr+0x20>
 800e68a:	460c      	mov	r4, r1
 800e68c:	4605      	mov	r5, r0
 800e68e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800e692:	2b00      	cmp	r3, #0
 800e694:	d0f6      	beq.n	800e684 <strstr+0x6>
 800e696:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800e69a:	429e      	cmp	r6, r3
 800e69c:	d0f7      	beq.n	800e68e <strstr+0x10>
 800e69e:	3001      	adds	r0, #1
 800e6a0:	7803      	ldrb	r3, [r0, #0]
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d1ef      	bne.n	800e686 <strstr+0x8>
 800e6a6:	4618      	mov	r0, r3
 800e6a8:	e7ec      	b.n	800e684 <strstr+0x6>

0800e6aa <sulp>:
 800e6aa:	b570      	push	{r4, r5, r6, lr}
 800e6ac:	4604      	mov	r4, r0
 800e6ae:	460d      	mov	r5, r1
 800e6b0:	ec45 4b10 	vmov	d0, r4, r5
 800e6b4:	4616      	mov	r6, r2
 800e6b6:	f002 fc6d 	bl	8010f94 <__ulp>
 800e6ba:	ec51 0b10 	vmov	r0, r1, d0
 800e6be:	b17e      	cbz	r6, 800e6e0 <sulp+0x36>
 800e6c0:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e6c4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	dd09      	ble.n	800e6e0 <sulp+0x36>
 800e6cc:	051b      	lsls	r3, r3, #20
 800e6ce:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800e6d2:	2400      	movs	r4, #0
 800e6d4:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800e6d8:	4622      	mov	r2, r4
 800e6da:	462b      	mov	r3, r5
 800e6dc:	f7f1 ff8c 	bl	80005f8 <__aeabi_dmul>
 800e6e0:	bd70      	pop	{r4, r5, r6, pc}
 800e6e2:	0000      	movs	r0, r0
 800e6e4:	0000      	movs	r0, r0
	...

0800e6e8 <_strtod_l>:
 800e6e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6ec:	ed2d 8b02 	vpush	{d8}
 800e6f0:	b09d      	sub	sp, #116	; 0x74
 800e6f2:	461f      	mov	r7, r3
 800e6f4:	2300      	movs	r3, #0
 800e6f6:	9318      	str	r3, [sp, #96]	; 0x60
 800e6f8:	4ba2      	ldr	r3, [pc, #648]	; (800e984 <_strtod_l+0x29c>)
 800e6fa:	9213      	str	r2, [sp, #76]	; 0x4c
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	9305      	str	r3, [sp, #20]
 800e700:	4604      	mov	r4, r0
 800e702:	4618      	mov	r0, r3
 800e704:	4688      	mov	r8, r1
 800e706:	f7f1 fd63 	bl	80001d0 <strlen>
 800e70a:	f04f 0a00 	mov.w	sl, #0
 800e70e:	4605      	mov	r5, r0
 800e710:	f04f 0b00 	mov.w	fp, #0
 800e714:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800e718:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e71a:	781a      	ldrb	r2, [r3, #0]
 800e71c:	2a2b      	cmp	r2, #43	; 0x2b
 800e71e:	d04e      	beq.n	800e7be <_strtod_l+0xd6>
 800e720:	d83b      	bhi.n	800e79a <_strtod_l+0xb2>
 800e722:	2a0d      	cmp	r2, #13
 800e724:	d834      	bhi.n	800e790 <_strtod_l+0xa8>
 800e726:	2a08      	cmp	r2, #8
 800e728:	d834      	bhi.n	800e794 <_strtod_l+0xac>
 800e72a:	2a00      	cmp	r2, #0
 800e72c:	d03e      	beq.n	800e7ac <_strtod_l+0xc4>
 800e72e:	2300      	movs	r3, #0
 800e730:	930a      	str	r3, [sp, #40]	; 0x28
 800e732:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800e734:	7833      	ldrb	r3, [r6, #0]
 800e736:	2b30      	cmp	r3, #48	; 0x30
 800e738:	f040 80b0 	bne.w	800e89c <_strtod_l+0x1b4>
 800e73c:	7873      	ldrb	r3, [r6, #1]
 800e73e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e742:	2b58      	cmp	r3, #88	; 0x58
 800e744:	d168      	bne.n	800e818 <_strtod_l+0x130>
 800e746:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e748:	9301      	str	r3, [sp, #4]
 800e74a:	ab18      	add	r3, sp, #96	; 0x60
 800e74c:	9702      	str	r7, [sp, #8]
 800e74e:	9300      	str	r3, [sp, #0]
 800e750:	4a8d      	ldr	r2, [pc, #564]	; (800e988 <_strtod_l+0x2a0>)
 800e752:	ab19      	add	r3, sp, #100	; 0x64
 800e754:	a917      	add	r1, sp, #92	; 0x5c
 800e756:	4620      	mov	r0, r4
 800e758:	f001 fd80 	bl	801025c <__gethex>
 800e75c:	f010 0707 	ands.w	r7, r0, #7
 800e760:	4605      	mov	r5, r0
 800e762:	d005      	beq.n	800e770 <_strtod_l+0x88>
 800e764:	2f06      	cmp	r7, #6
 800e766:	d12c      	bne.n	800e7c2 <_strtod_l+0xda>
 800e768:	3601      	adds	r6, #1
 800e76a:	2300      	movs	r3, #0
 800e76c:	9617      	str	r6, [sp, #92]	; 0x5c
 800e76e:	930a      	str	r3, [sp, #40]	; 0x28
 800e770:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e772:	2b00      	cmp	r3, #0
 800e774:	f040 8590 	bne.w	800f298 <_strtod_l+0xbb0>
 800e778:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e77a:	b1eb      	cbz	r3, 800e7b8 <_strtod_l+0xd0>
 800e77c:	4652      	mov	r2, sl
 800e77e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800e782:	ec43 2b10 	vmov	d0, r2, r3
 800e786:	b01d      	add	sp, #116	; 0x74
 800e788:	ecbd 8b02 	vpop	{d8}
 800e78c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e790:	2a20      	cmp	r2, #32
 800e792:	d1cc      	bne.n	800e72e <_strtod_l+0x46>
 800e794:	3301      	adds	r3, #1
 800e796:	9317      	str	r3, [sp, #92]	; 0x5c
 800e798:	e7be      	b.n	800e718 <_strtod_l+0x30>
 800e79a:	2a2d      	cmp	r2, #45	; 0x2d
 800e79c:	d1c7      	bne.n	800e72e <_strtod_l+0x46>
 800e79e:	2201      	movs	r2, #1
 800e7a0:	920a      	str	r2, [sp, #40]	; 0x28
 800e7a2:	1c5a      	adds	r2, r3, #1
 800e7a4:	9217      	str	r2, [sp, #92]	; 0x5c
 800e7a6:	785b      	ldrb	r3, [r3, #1]
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d1c2      	bne.n	800e732 <_strtod_l+0x4a>
 800e7ac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e7ae:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	f040 856e 	bne.w	800f294 <_strtod_l+0xbac>
 800e7b8:	4652      	mov	r2, sl
 800e7ba:	465b      	mov	r3, fp
 800e7bc:	e7e1      	b.n	800e782 <_strtod_l+0x9a>
 800e7be:	2200      	movs	r2, #0
 800e7c0:	e7ee      	b.n	800e7a0 <_strtod_l+0xb8>
 800e7c2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800e7c4:	b13a      	cbz	r2, 800e7d6 <_strtod_l+0xee>
 800e7c6:	2135      	movs	r1, #53	; 0x35
 800e7c8:	a81a      	add	r0, sp, #104	; 0x68
 800e7ca:	f002 fcee 	bl	80111aa <__copybits>
 800e7ce:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e7d0:	4620      	mov	r0, r4
 800e7d2:	f002 f8ad 	bl	8010930 <_Bfree>
 800e7d6:	3f01      	subs	r7, #1
 800e7d8:	2f04      	cmp	r7, #4
 800e7da:	d806      	bhi.n	800e7ea <_strtod_l+0x102>
 800e7dc:	e8df f007 	tbb	[pc, r7]
 800e7e0:	1714030a 	.word	0x1714030a
 800e7e4:	0a          	.byte	0x0a
 800e7e5:	00          	.byte	0x00
 800e7e6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800e7ea:	0728      	lsls	r0, r5, #28
 800e7ec:	d5c0      	bpl.n	800e770 <_strtod_l+0x88>
 800e7ee:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800e7f2:	e7bd      	b.n	800e770 <_strtod_l+0x88>
 800e7f4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800e7f8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800e7fa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800e7fe:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800e802:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800e806:	e7f0      	b.n	800e7ea <_strtod_l+0x102>
 800e808:	f8df b180 	ldr.w	fp, [pc, #384]	; 800e98c <_strtod_l+0x2a4>
 800e80c:	e7ed      	b.n	800e7ea <_strtod_l+0x102>
 800e80e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800e812:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800e816:	e7e8      	b.n	800e7ea <_strtod_l+0x102>
 800e818:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e81a:	1c5a      	adds	r2, r3, #1
 800e81c:	9217      	str	r2, [sp, #92]	; 0x5c
 800e81e:	785b      	ldrb	r3, [r3, #1]
 800e820:	2b30      	cmp	r3, #48	; 0x30
 800e822:	d0f9      	beq.n	800e818 <_strtod_l+0x130>
 800e824:	2b00      	cmp	r3, #0
 800e826:	d0a3      	beq.n	800e770 <_strtod_l+0x88>
 800e828:	2301      	movs	r3, #1
 800e82a:	f04f 0900 	mov.w	r9, #0
 800e82e:	9304      	str	r3, [sp, #16]
 800e830:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e832:	9308      	str	r3, [sp, #32]
 800e834:	f8cd 901c 	str.w	r9, [sp, #28]
 800e838:	464f      	mov	r7, r9
 800e83a:	220a      	movs	r2, #10
 800e83c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800e83e:	7806      	ldrb	r6, [r0, #0]
 800e840:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800e844:	b2d9      	uxtb	r1, r3
 800e846:	2909      	cmp	r1, #9
 800e848:	d92a      	bls.n	800e8a0 <_strtod_l+0x1b8>
 800e84a:	9905      	ldr	r1, [sp, #20]
 800e84c:	462a      	mov	r2, r5
 800e84e:	f7ff ff02 	bl	800e656 <strncmp>
 800e852:	b398      	cbz	r0, 800e8bc <_strtod_l+0x1d4>
 800e854:	2000      	movs	r0, #0
 800e856:	4632      	mov	r2, r6
 800e858:	463d      	mov	r5, r7
 800e85a:	9005      	str	r0, [sp, #20]
 800e85c:	4603      	mov	r3, r0
 800e85e:	2a65      	cmp	r2, #101	; 0x65
 800e860:	d001      	beq.n	800e866 <_strtod_l+0x17e>
 800e862:	2a45      	cmp	r2, #69	; 0x45
 800e864:	d118      	bne.n	800e898 <_strtod_l+0x1b0>
 800e866:	b91d      	cbnz	r5, 800e870 <_strtod_l+0x188>
 800e868:	9a04      	ldr	r2, [sp, #16]
 800e86a:	4302      	orrs	r2, r0
 800e86c:	d09e      	beq.n	800e7ac <_strtod_l+0xc4>
 800e86e:	2500      	movs	r5, #0
 800e870:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800e874:	f108 0201 	add.w	r2, r8, #1
 800e878:	9217      	str	r2, [sp, #92]	; 0x5c
 800e87a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800e87e:	2a2b      	cmp	r2, #43	; 0x2b
 800e880:	d075      	beq.n	800e96e <_strtod_l+0x286>
 800e882:	2a2d      	cmp	r2, #45	; 0x2d
 800e884:	d07b      	beq.n	800e97e <_strtod_l+0x296>
 800e886:	f04f 0c00 	mov.w	ip, #0
 800e88a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800e88e:	2909      	cmp	r1, #9
 800e890:	f240 8082 	bls.w	800e998 <_strtod_l+0x2b0>
 800e894:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800e898:	2600      	movs	r6, #0
 800e89a:	e09d      	b.n	800e9d8 <_strtod_l+0x2f0>
 800e89c:	2300      	movs	r3, #0
 800e89e:	e7c4      	b.n	800e82a <_strtod_l+0x142>
 800e8a0:	2f08      	cmp	r7, #8
 800e8a2:	bfd8      	it	le
 800e8a4:	9907      	ldrle	r1, [sp, #28]
 800e8a6:	f100 0001 	add.w	r0, r0, #1
 800e8aa:	bfda      	itte	le
 800e8ac:	fb02 3301 	mlale	r3, r2, r1, r3
 800e8b0:	9307      	strle	r3, [sp, #28]
 800e8b2:	fb02 3909 	mlagt	r9, r2, r9, r3
 800e8b6:	3701      	adds	r7, #1
 800e8b8:	9017      	str	r0, [sp, #92]	; 0x5c
 800e8ba:	e7bf      	b.n	800e83c <_strtod_l+0x154>
 800e8bc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e8be:	195a      	adds	r2, r3, r5
 800e8c0:	9217      	str	r2, [sp, #92]	; 0x5c
 800e8c2:	5d5a      	ldrb	r2, [r3, r5]
 800e8c4:	2f00      	cmp	r7, #0
 800e8c6:	d037      	beq.n	800e938 <_strtod_l+0x250>
 800e8c8:	9005      	str	r0, [sp, #20]
 800e8ca:	463d      	mov	r5, r7
 800e8cc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800e8d0:	2b09      	cmp	r3, #9
 800e8d2:	d912      	bls.n	800e8fa <_strtod_l+0x212>
 800e8d4:	2301      	movs	r3, #1
 800e8d6:	e7c2      	b.n	800e85e <_strtod_l+0x176>
 800e8d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e8da:	1c5a      	adds	r2, r3, #1
 800e8dc:	9217      	str	r2, [sp, #92]	; 0x5c
 800e8de:	785a      	ldrb	r2, [r3, #1]
 800e8e0:	3001      	adds	r0, #1
 800e8e2:	2a30      	cmp	r2, #48	; 0x30
 800e8e4:	d0f8      	beq.n	800e8d8 <_strtod_l+0x1f0>
 800e8e6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800e8ea:	2b08      	cmp	r3, #8
 800e8ec:	f200 84d9 	bhi.w	800f2a2 <_strtod_l+0xbba>
 800e8f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e8f2:	9005      	str	r0, [sp, #20]
 800e8f4:	2000      	movs	r0, #0
 800e8f6:	9308      	str	r3, [sp, #32]
 800e8f8:	4605      	mov	r5, r0
 800e8fa:	3a30      	subs	r2, #48	; 0x30
 800e8fc:	f100 0301 	add.w	r3, r0, #1
 800e900:	d014      	beq.n	800e92c <_strtod_l+0x244>
 800e902:	9905      	ldr	r1, [sp, #20]
 800e904:	4419      	add	r1, r3
 800e906:	9105      	str	r1, [sp, #20]
 800e908:	462b      	mov	r3, r5
 800e90a:	eb00 0e05 	add.w	lr, r0, r5
 800e90e:	210a      	movs	r1, #10
 800e910:	4573      	cmp	r3, lr
 800e912:	d113      	bne.n	800e93c <_strtod_l+0x254>
 800e914:	182b      	adds	r3, r5, r0
 800e916:	2b08      	cmp	r3, #8
 800e918:	f105 0501 	add.w	r5, r5, #1
 800e91c:	4405      	add	r5, r0
 800e91e:	dc1c      	bgt.n	800e95a <_strtod_l+0x272>
 800e920:	9907      	ldr	r1, [sp, #28]
 800e922:	230a      	movs	r3, #10
 800e924:	fb03 2301 	mla	r3, r3, r1, r2
 800e928:	9307      	str	r3, [sp, #28]
 800e92a:	2300      	movs	r3, #0
 800e92c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e92e:	1c51      	adds	r1, r2, #1
 800e930:	9117      	str	r1, [sp, #92]	; 0x5c
 800e932:	7852      	ldrb	r2, [r2, #1]
 800e934:	4618      	mov	r0, r3
 800e936:	e7c9      	b.n	800e8cc <_strtod_l+0x1e4>
 800e938:	4638      	mov	r0, r7
 800e93a:	e7d2      	b.n	800e8e2 <_strtod_l+0x1fa>
 800e93c:	2b08      	cmp	r3, #8
 800e93e:	dc04      	bgt.n	800e94a <_strtod_l+0x262>
 800e940:	9e07      	ldr	r6, [sp, #28]
 800e942:	434e      	muls	r6, r1
 800e944:	9607      	str	r6, [sp, #28]
 800e946:	3301      	adds	r3, #1
 800e948:	e7e2      	b.n	800e910 <_strtod_l+0x228>
 800e94a:	f103 0c01 	add.w	ip, r3, #1
 800e94e:	f1bc 0f10 	cmp.w	ip, #16
 800e952:	bfd8      	it	le
 800e954:	fb01 f909 	mulle.w	r9, r1, r9
 800e958:	e7f5      	b.n	800e946 <_strtod_l+0x25e>
 800e95a:	2d10      	cmp	r5, #16
 800e95c:	bfdc      	itt	le
 800e95e:	230a      	movle	r3, #10
 800e960:	fb03 2909 	mlale	r9, r3, r9, r2
 800e964:	e7e1      	b.n	800e92a <_strtod_l+0x242>
 800e966:	2300      	movs	r3, #0
 800e968:	9305      	str	r3, [sp, #20]
 800e96a:	2301      	movs	r3, #1
 800e96c:	e77c      	b.n	800e868 <_strtod_l+0x180>
 800e96e:	f04f 0c00 	mov.w	ip, #0
 800e972:	f108 0202 	add.w	r2, r8, #2
 800e976:	9217      	str	r2, [sp, #92]	; 0x5c
 800e978:	f898 2002 	ldrb.w	r2, [r8, #2]
 800e97c:	e785      	b.n	800e88a <_strtod_l+0x1a2>
 800e97e:	f04f 0c01 	mov.w	ip, #1
 800e982:	e7f6      	b.n	800e972 <_strtod_l+0x28a>
 800e984:	08013928 	.word	0x08013928
 800e988:	080137dc 	.word	0x080137dc
 800e98c:	7ff00000 	.word	0x7ff00000
 800e990:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e992:	1c51      	adds	r1, r2, #1
 800e994:	9117      	str	r1, [sp, #92]	; 0x5c
 800e996:	7852      	ldrb	r2, [r2, #1]
 800e998:	2a30      	cmp	r2, #48	; 0x30
 800e99a:	d0f9      	beq.n	800e990 <_strtod_l+0x2a8>
 800e99c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800e9a0:	2908      	cmp	r1, #8
 800e9a2:	f63f af79 	bhi.w	800e898 <_strtod_l+0x1b0>
 800e9a6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800e9aa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e9ac:	9206      	str	r2, [sp, #24]
 800e9ae:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e9b0:	1c51      	adds	r1, r2, #1
 800e9b2:	9117      	str	r1, [sp, #92]	; 0x5c
 800e9b4:	7852      	ldrb	r2, [r2, #1]
 800e9b6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800e9ba:	2e09      	cmp	r6, #9
 800e9bc:	d937      	bls.n	800ea2e <_strtod_l+0x346>
 800e9be:	9e06      	ldr	r6, [sp, #24]
 800e9c0:	1b89      	subs	r1, r1, r6
 800e9c2:	2908      	cmp	r1, #8
 800e9c4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800e9c8:	dc02      	bgt.n	800e9d0 <_strtod_l+0x2e8>
 800e9ca:	4576      	cmp	r6, lr
 800e9cc:	bfa8      	it	ge
 800e9ce:	4676      	movge	r6, lr
 800e9d0:	f1bc 0f00 	cmp.w	ip, #0
 800e9d4:	d000      	beq.n	800e9d8 <_strtod_l+0x2f0>
 800e9d6:	4276      	negs	r6, r6
 800e9d8:	2d00      	cmp	r5, #0
 800e9da:	d14d      	bne.n	800ea78 <_strtod_l+0x390>
 800e9dc:	9904      	ldr	r1, [sp, #16]
 800e9de:	4301      	orrs	r1, r0
 800e9e0:	f47f aec6 	bne.w	800e770 <_strtod_l+0x88>
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	f47f aee1 	bne.w	800e7ac <_strtod_l+0xc4>
 800e9ea:	2a69      	cmp	r2, #105	; 0x69
 800e9ec:	d027      	beq.n	800ea3e <_strtod_l+0x356>
 800e9ee:	dc24      	bgt.n	800ea3a <_strtod_l+0x352>
 800e9f0:	2a49      	cmp	r2, #73	; 0x49
 800e9f2:	d024      	beq.n	800ea3e <_strtod_l+0x356>
 800e9f4:	2a4e      	cmp	r2, #78	; 0x4e
 800e9f6:	f47f aed9 	bne.w	800e7ac <_strtod_l+0xc4>
 800e9fa:	499f      	ldr	r1, [pc, #636]	; (800ec78 <_strtod_l+0x590>)
 800e9fc:	a817      	add	r0, sp, #92	; 0x5c
 800e9fe:	f001 fe85 	bl	801070c <__match>
 800ea02:	2800      	cmp	r0, #0
 800ea04:	f43f aed2 	beq.w	800e7ac <_strtod_l+0xc4>
 800ea08:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ea0a:	781b      	ldrb	r3, [r3, #0]
 800ea0c:	2b28      	cmp	r3, #40	; 0x28
 800ea0e:	d12d      	bne.n	800ea6c <_strtod_l+0x384>
 800ea10:	499a      	ldr	r1, [pc, #616]	; (800ec7c <_strtod_l+0x594>)
 800ea12:	aa1a      	add	r2, sp, #104	; 0x68
 800ea14:	a817      	add	r0, sp, #92	; 0x5c
 800ea16:	f001 fe8d 	bl	8010734 <__hexnan>
 800ea1a:	2805      	cmp	r0, #5
 800ea1c:	d126      	bne.n	800ea6c <_strtod_l+0x384>
 800ea1e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ea20:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800ea24:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800ea28:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800ea2c:	e6a0      	b.n	800e770 <_strtod_l+0x88>
 800ea2e:	210a      	movs	r1, #10
 800ea30:	fb01 2e0e 	mla	lr, r1, lr, r2
 800ea34:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800ea38:	e7b9      	b.n	800e9ae <_strtod_l+0x2c6>
 800ea3a:	2a6e      	cmp	r2, #110	; 0x6e
 800ea3c:	e7db      	b.n	800e9f6 <_strtod_l+0x30e>
 800ea3e:	4990      	ldr	r1, [pc, #576]	; (800ec80 <_strtod_l+0x598>)
 800ea40:	a817      	add	r0, sp, #92	; 0x5c
 800ea42:	f001 fe63 	bl	801070c <__match>
 800ea46:	2800      	cmp	r0, #0
 800ea48:	f43f aeb0 	beq.w	800e7ac <_strtod_l+0xc4>
 800ea4c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ea4e:	498d      	ldr	r1, [pc, #564]	; (800ec84 <_strtod_l+0x59c>)
 800ea50:	3b01      	subs	r3, #1
 800ea52:	a817      	add	r0, sp, #92	; 0x5c
 800ea54:	9317      	str	r3, [sp, #92]	; 0x5c
 800ea56:	f001 fe59 	bl	801070c <__match>
 800ea5a:	b910      	cbnz	r0, 800ea62 <_strtod_l+0x37a>
 800ea5c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ea5e:	3301      	adds	r3, #1
 800ea60:	9317      	str	r3, [sp, #92]	; 0x5c
 800ea62:	f8df b230 	ldr.w	fp, [pc, #560]	; 800ec94 <_strtod_l+0x5ac>
 800ea66:	f04f 0a00 	mov.w	sl, #0
 800ea6a:	e681      	b.n	800e770 <_strtod_l+0x88>
 800ea6c:	4886      	ldr	r0, [pc, #536]	; (800ec88 <_strtod_l+0x5a0>)
 800ea6e:	f002 fe33 	bl	80116d8 <nan>
 800ea72:	ec5b ab10 	vmov	sl, fp, d0
 800ea76:	e67b      	b.n	800e770 <_strtod_l+0x88>
 800ea78:	9b05      	ldr	r3, [sp, #20]
 800ea7a:	9807      	ldr	r0, [sp, #28]
 800ea7c:	1af3      	subs	r3, r6, r3
 800ea7e:	2f00      	cmp	r7, #0
 800ea80:	bf08      	it	eq
 800ea82:	462f      	moveq	r7, r5
 800ea84:	2d10      	cmp	r5, #16
 800ea86:	9306      	str	r3, [sp, #24]
 800ea88:	46a8      	mov	r8, r5
 800ea8a:	bfa8      	it	ge
 800ea8c:	f04f 0810 	movge.w	r8, #16
 800ea90:	f7f1 fd38 	bl	8000504 <__aeabi_ui2d>
 800ea94:	2d09      	cmp	r5, #9
 800ea96:	4682      	mov	sl, r0
 800ea98:	468b      	mov	fp, r1
 800ea9a:	dd13      	ble.n	800eac4 <_strtod_l+0x3dc>
 800ea9c:	4b7b      	ldr	r3, [pc, #492]	; (800ec8c <_strtod_l+0x5a4>)
 800ea9e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800eaa2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800eaa6:	f7f1 fda7 	bl	80005f8 <__aeabi_dmul>
 800eaaa:	4682      	mov	sl, r0
 800eaac:	4648      	mov	r0, r9
 800eaae:	468b      	mov	fp, r1
 800eab0:	f7f1 fd28 	bl	8000504 <__aeabi_ui2d>
 800eab4:	4602      	mov	r2, r0
 800eab6:	460b      	mov	r3, r1
 800eab8:	4650      	mov	r0, sl
 800eaba:	4659      	mov	r1, fp
 800eabc:	f7f1 fbe6 	bl	800028c <__adddf3>
 800eac0:	4682      	mov	sl, r0
 800eac2:	468b      	mov	fp, r1
 800eac4:	2d0f      	cmp	r5, #15
 800eac6:	dc38      	bgt.n	800eb3a <_strtod_l+0x452>
 800eac8:	9b06      	ldr	r3, [sp, #24]
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	f43f ae50 	beq.w	800e770 <_strtod_l+0x88>
 800ead0:	dd24      	ble.n	800eb1c <_strtod_l+0x434>
 800ead2:	2b16      	cmp	r3, #22
 800ead4:	dc0b      	bgt.n	800eaee <_strtod_l+0x406>
 800ead6:	496d      	ldr	r1, [pc, #436]	; (800ec8c <_strtod_l+0x5a4>)
 800ead8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800eadc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eae0:	4652      	mov	r2, sl
 800eae2:	465b      	mov	r3, fp
 800eae4:	f7f1 fd88 	bl	80005f8 <__aeabi_dmul>
 800eae8:	4682      	mov	sl, r0
 800eaea:	468b      	mov	fp, r1
 800eaec:	e640      	b.n	800e770 <_strtod_l+0x88>
 800eaee:	9a06      	ldr	r2, [sp, #24]
 800eaf0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800eaf4:	4293      	cmp	r3, r2
 800eaf6:	db20      	blt.n	800eb3a <_strtod_l+0x452>
 800eaf8:	4c64      	ldr	r4, [pc, #400]	; (800ec8c <_strtod_l+0x5a4>)
 800eafa:	f1c5 050f 	rsb	r5, r5, #15
 800eafe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800eb02:	4652      	mov	r2, sl
 800eb04:	465b      	mov	r3, fp
 800eb06:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eb0a:	f7f1 fd75 	bl	80005f8 <__aeabi_dmul>
 800eb0e:	9b06      	ldr	r3, [sp, #24]
 800eb10:	1b5d      	subs	r5, r3, r5
 800eb12:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800eb16:	e9d4 2300 	ldrd	r2, r3, [r4]
 800eb1a:	e7e3      	b.n	800eae4 <_strtod_l+0x3fc>
 800eb1c:	9b06      	ldr	r3, [sp, #24]
 800eb1e:	3316      	adds	r3, #22
 800eb20:	db0b      	blt.n	800eb3a <_strtod_l+0x452>
 800eb22:	9b05      	ldr	r3, [sp, #20]
 800eb24:	1b9e      	subs	r6, r3, r6
 800eb26:	4b59      	ldr	r3, [pc, #356]	; (800ec8c <_strtod_l+0x5a4>)
 800eb28:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800eb2c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800eb30:	4650      	mov	r0, sl
 800eb32:	4659      	mov	r1, fp
 800eb34:	f7f1 fe8a 	bl	800084c <__aeabi_ddiv>
 800eb38:	e7d6      	b.n	800eae8 <_strtod_l+0x400>
 800eb3a:	9b06      	ldr	r3, [sp, #24]
 800eb3c:	eba5 0808 	sub.w	r8, r5, r8
 800eb40:	4498      	add	r8, r3
 800eb42:	f1b8 0f00 	cmp.w	r8, #0
 800eb46:	dd74      	ble.n	800ec32 <_strtod_l+0x54a>
 800eb48:	f018 030f 	ands.w	r3, r8, #15
 800eb4c:	d00a      	beq.n	800eb64 <_strtod_l+0x47c>
 800eb4e:	494f      	ldr	r1, [pc, #316]	; (800ec8c <_strtod_l+0x5a4>)
 800eb50:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800eb54:	4652      	mov	r2, sl
 800eb56:	465b      	mov	r3, fp
 800eb58:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eb5c:	f7f1 fd4c 	bl	80005f8 <__aeabi_dmul>
 800eb60:	4682      	mov	sl, r0
 800eb62:	468b      	mov	fp, r1
 800eb64:	f038 080f 	bics.w	r8, r8, #15
 800eb68:	d04f      	beq.n	800ec0a <_strtod_l+0x522>
 800eb6a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800eb6e:	dd22      	ble.n	800ebb6 <_strtod_l+0x4ce>
 800eb70:	2500      	movs	r5, #0
 800eb72:	462e      	mov	r6, r5
 800eb74:	9507      	str	r5, [sp, #28]
 800eb76:	9505      	str	r5, [sp, #20]
 800eb78:	2322      	movs	r3, #34	; 0x22
 800eb7a:	f8df b118 	ldr.w	fp, [pc, #280]	; 800ec94 <_strtod_l+0x5ac>
 800eb7e:	6023      	str	r3, [r4, #0]
 800eb80:	f04f 0a00 	mov.w	sl, #0
 800eb84:	9b07      	ldr	r3, [sp, #28]
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	f43f adf2 	beq.w	800e770 <_strtod_l+0x88>
 800eb8c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800eb8e:	4620      	mov	r0, r4
 800eb90:	f001 fece 	bl	8010930 <_Bfree>
 800eb94:	9905      	ldr	r1, [sp, #20]
 800eb96:	4620      	mov	r0, r4
 800eb98:	f001 feca 	bl	8010930 <_Bfree>
 800eb9c:	4631      	mov	r1, r6
 800eb9e:	4620      	mov	r0, r4
 800eba0:	f001 fec6 	bl	8010930 <_Bfree>
 800eba4:	9907      	ldr	r1, [sp, #28]
 800eba6:	4620      	mov	r0, r4
 800eba8:	f001 fec2 	bl	8010930 <_Bfree>
 800ebac:	4629      	mov	r1, r5
 800ebae:	4620      	mov	r0, r4
 800ebb0:	f001 febe 	bl	8010930 <_Bfree>
 800ebb4:	e5dc      	b.n	800e770 <_strtod_l+0x88>
 800ebb6:	4b36      	ldr	r3, [pc, #216]	; (800ec90 <_strtod_l+0x5a8>)
 800ebb8:	9304      	str	r3, [sp, #16]
 800ebba:	2300      	movs	r3, #0
 800ebbc:	ea4f 1828 	mov.w	r8, r8, asr #4
 800ebc0:	4650      	mov	r0, sl
 800ebc2:	4659      	mov	r1, fp
 800ebc4:	4699      	mov	r9, r3
 800ebc6:	f1b8 0f01 	cmp.w	r8, #1
 800ebca:	dc21      	bgt.n	800ec10 <_strtod_l+0x528>
 800ebcc:	b10b      	cbz	r3, 800ebd2 <_strtod_l+0x4ea>
 800ebce:	4682      	mov	sl, r0
 800ebd0:	468b      	mov	fp, r1
 800ebd2:	4b2f      	ldr	r3, [pc, #188]	; (800ec90 <_strtod_l+0x5a8>)
 800ebd4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800ebd8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800ebdc:	4652      	mov	r2, sl
 800ebde:	465b      	mov	r3, fp
 800ebe0:	e9d9 0100 	ldrd	r0, r1, [r9]
 800ebe4:	f7f1 fd08 	bl	80005f8 <__aeabi_dmul>
 800ebe8:	4b2a      	ldr	r3, [pc, #168]	; (800ec94 <_strtod_l+0x5ac>)
 800ebea:	460a      	mov	r2, r1
 800ebec:	400b      	ands	r3, r1
 800ebee:	492a      	ldr	r1, [pc, #168]	; (800ec98 <_strtod_l+0x5b0>)
 800ebf0:	428b      	cmp	r3, r1
 800ebf2:	4682      	mov	sl, r0
 800ebf4:	d8bc      	bhi.n	800eb70 <_strtod_l+0x488>
 800ebf6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800ebfa:	428b      	cmp	r3, r1
 800ebfc:	bf86      	itte	hi
 800ebfe:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800ec9c <_strtod_l+0x5b4>
 800ec02:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 800ec06:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800ec0a:	2300      	movs	r3, #0
 800ec0c:	9304      	str	r3, [sp, #16]
 800ec0e:	e084      	b.n	800ed1a <_strtod_l+0x632>
 800ec10:	f018 0f01 	tst.w	r8, #1
 800ec14:	d005      	beq.n	800ec22 <_strtod_l+0x53a>
 800ec16:	9b04      	ldr	r3, [sp, #16]
 800ec18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec1c:	f7f1 fcec 	bl	80005f8 <__aeabi_dmul>
 800ec20:	2301      	movs	r3, #1
 800ec22:	9a04      	ldr	r2, [sp, #16]
 800ec24:	3208      	adds	r2, #8
 800ec26:	f109 0901 	add.w	r9, r9, #1
 800ec2a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ec2e:	9204      	str	r2, [sp, #16]
 800ec30:	e7c9      	b.n	800ebc6 <_strtod_l+0x4de>
 800ec32:	d0ea      	beq.n	800ec0a <_strtod_l+0x522>
 800ec34:	f1c8 0800 	rsb	r8, r8, #0
 800ec38:	f018 020f 	ands.w	r2, r8, #15
 800ec3c:	d00a      	beq.n	800ec54 <_strtod_l+0x56c>
 800ec3e:	4b13      	ldr	r3, [pc, #76]	; (800ec8c <_strtod_l+0x5a4>)
 800ec40:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ec44:	4650      	mov	r0, sl
 800ec46:	4659      	mov	r1, fp
 800ec48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec4c:	f7f1 fdfe 	bl	800084c <__aeabi_ddiv>
 800ec50:	4682      	mov	sl, r0
 800ec52:	468b      	mov	fp, r1
 800ec54:	ea5f 1828 	movs.w	r8, r8, asr #4
 800ec58:	d0d7      	beq.n	800ec0a <_strtod_l+0x522>
 800ec5a:	f1b8 0f1f 	cmp.w	r8, #31
 800ec5e:	dd1f      	ble.n	800eca0 <_strtod_l+0x5b8>
 800ec60:	2500      	movs	r5, #0
 800ec62:	462e      	mov	r6, r5
 800ec64:	9507      	str	r5, [sp, #28]
 800ec66:	9505      	str	r5, [sp, #20]
 800ec68:	2322      	movs	r3, #34	; 0x22
 800ec6a:	f04f 0a00 	mov.w	sl, #0
 800ec6e:	f04f 0b00 	mov.w	fp, #0
 800ec72:	6023      	str	r3, [r4, #0]
 800ec74:	e786      	b.n	800eb84 <_strtod_l+0x49c>
 800ec76:	bf00      	nop
 800ec78:	080137b5 	.word	0x080137b5
 800ec7c:	080137f0 	.word	0x080137f0
 800ec80:	080137ad 	.word	0x080137ad
 800ec84:	08013833 	.word	0x08013833
 800ec88:	08013ae0 	.word	0x08013ae0
 800ec8c:	080139c0 	.word	0x080139c0
 800ec90:	08013998 	.word	0x08013998
 800ec94:	7ff00000 	.word	0x7ff00000
 800ec98:	7ca00000 	.word	0x7ca00000
 800ec9c:	7fefffff 	.word	0x7fefffff
 800eca0:	f018 0310 	ands.w	r3, r8, #16
 800eca4:	bf18      	it	ne
 800eca6:	236a      	movne	r3, #106	; 0x6a
 800eca8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800f058 <_strtod_l+0x970>
 800ecac:	9304      	str	r3, [sp, #16]
 800ecae:	4650      	mov	r0, sl
 800ecb0:	4659      	mov	r1, fp
 800ecb2:	2300      	movs	r3, #0
 800ecb4:	f018 0f01 	tst.w	r8, #1
 800ecb8:	d004      	beq.n	800ecc4 <_strtod_l+0x5dc>
 800ecba:	e9d9 2300 	ldrd	r2, r3, [r9]
 800ecbe:	f7f1 fc9b 	bl	80005f8 <__aeabi_dmul>
 800ecc2:	2301      	movs	r3, #1
 800ecc4:	ea5f 0868 	movs.w	r8, r8, asr #1
 800ecc8:	f109 0908 	add.w	r9, r9, #8
 800eccc:	d1f2      	bne.n	800ecb4 <_strtod_l+0x5cc>
 800ecce:	b10b      	cbz	r3, 800ecd4 <_strtod_l+0x5ec>
 800ecd0:	4682      	mov	sl, r0
 800ecd2:	468b      	mov	fp, r1
 800ecd4:	9b04      	ldr	r3, [sp, #16]
 800ecd6:	b1c3      	cbz	r3, 800ed0a <_strtod_l+0x622>
 800ecd8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800ecdc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	4659      	mov	r1, fp
 800ece4:	dd11      	ble.n	800ed0a <_strtod_l+0x622>
 800ece6:	2b1f      	cmp	r3, #31
 800ece8:	f340 8124 	ble.w	800ef34 <_strtod_l+0x84c>
 800ecec:	2b34      	cmp	r3, #52	; 0x34
 800ecee:	bfde      	ittt	le
 800ecf0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800ecf4:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 800ecf8:	fa03 f202 	lslle.w	r2, r3, r2
 800ecfc:	f04f 0a00 	mov.w	sl, #0
 800ed00:	bfcc      	ite	gt
 800ed02:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800ed06:	ea02 0b01 	andle.w	fp, r2, r1
 800ed0a:	2200      	movs	r2, #0
 800ed0c:	2300      	movs	r3, #0
 800ed0e:	4650      	mov	r0, sl
 800ed10:	4659      	mov	r1, fp
 800ed12:	f7f1 fed9 	bl	8000ac8 <__aeabi_dcmpeq>
 800ed16:	2800      	cmp	r0, #0
 800ed18:	d1a2      	bne.n	800ec60 <_strtod_l+0x578>
 800ed1a:	9b07      	ldr	r3, [sp, #28]
 800ed1c:	9300      	str	r3, [sp, #0]
 800ed1e:	9908      	ldr	r1, [sp, #32]
 800ed20:	462b      	mov	r3, r5
 800ed22:	463a      	mov	r2, r7
 800ed24:	4620      	mov	r0, r4
 800ed26:	f001 fe6b 	bl	8010a00 <__s2b>
 800ed2a:	9007      	str	r0, [sp, #28]
 800ed2c:	2800      	cmp	r0, #0
 800ed2e:	f43f af1f 	beq.w	800eb70 <_strtod_l+0x488>
 800ed32:	9b05      	ldr	r3, [sp, #20]
 800ed34:	1b9e      	subs	r6, r3, r6
 800ed36:	9b06      	ldr	r3, [sp, #24]
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	bfb4      	ite	lt
 800ed3c:	4633      	movlt	r3, r6
 800ed3e:	2300      	movge	r3, #0
 800ed40:	930c      	str	r3, [sp, #48]	; 0x30
 800ed42:	9b06      	ldr	r3, [sp, #24]
 800ed44:	2500      	movs	r5, #0
 800ed46:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800ed4a:	9312      	str	r3, [sp, #72]	; 0x48
 800ed4c:	462e      	mov	r6, r5
 800ed4e:	9b07      	ldr	r3, [sp, #28]
 800ed50:	4620      	mov	r0, r4
 800ed52:	6859      	ldr	r1, [r3, #4]
 800ed54:	f001 fdac 	bl	80108b0 <_Balloc>
 800ed58:	9005      	str	r0, [sp, #20]
 800ed5a:	2800      	cmp	r0, #0
 800ed5c:	f43f af0c 	beq.w	800eb78 <_strtod_l+0x490>
 800ed60:	9b07      	ldr	r3, [sp, #28]
 800ed62:	691a      	ldr	r2, [r3, #16]
 800ed64:	3202      	adds	r2, #2
 800ed66:	f103 010c 	add.w	r1, r3, #12
 800ed6a:	0092      	lsls	r2, r2, #2
 800ed6c:	300c      	adds	r0, #12
 800ed6e:	f7fe ffc5 	bl	800dcfc <memcpy>
 800ed72:	ec4b ab10 	vmov	d0, sl, fp
 800ed76:	aa1a      	add	r2, sp, #104	; 0x68
 800ed78:	a919      	add	r1, sp, #100	; 0x64
 800ed7a:	4620      	mov	r0, r4
 800ed7c:	f002 f986 	bl	801108c <__d2b>
 800ed80:	ec4b ab18 	vmov	d8, sl, fp
 800ed84:	9018      	str	r0, [sp, #96]	; 0x60
 800ed86:	2800      	cmp	r0, #0
 800ed88:	f43f aef6 	beq.w	800eb78 <_strtod_l+0x490>
 800ed8c:	2101      	movs	r1, #1
 800ed8e:	4620      	mov	r0, r4
 800ed90:	f001 fed0 	bl	8010b34 <__i2b>
 800ed94:	4606      	mov	r6, r0
 800ed96:	2800      	cmp	r0, #0
 800ed98:	f43f aeee 	beq.w	800eb78 <_strtod_l+0x490>
 800ed9c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ed9e:	9904      	ldr	r1, [sp, #16]
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	bfab      	itete	ge
 800eda4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800eda6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800eda8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800edaa:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800edae:	bfac      	ite	ge
 800edb0:	eb03 0902 	addge.w	r9, r3, r2
 800edb4:	1ad7      	sublt	r7, r2, r3
 800edb6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800edb8:	eba3 0801 	sub.w	r8, r3, r1
 800edbc:	4490      	add	r8, r2
 800edbe:	4ba1      	ldr	r3, [pc, #644]	; (800f044 <_strtod_l+0x95c>)
 800edc0:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800edc4:	4598      	cmp	r8, r3
 800edc6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800edca:	f280 80c7 	bge.w	800ef5c <_strtod_l+0x874>
 800edce:	eba3 0308 	sub.w	r3, r3, r8
 800edd2:	2b1f      	cmp	r3, #31
 800edd4:	eba2 0203 	sub.w	r2, r2, r3
 800edd8:	f04f 0101 	mov.w	r1, #1
 800eddc:	f300 80b1 	bgt.w	800ef42 <_strtod_l+0x85a>
 800ede0:	fa01 f303 	lsl.w	r3, r1, r3
 800ede4:	930d      	str	r3, [sp, #52]	; 0x34
 800ede6:	2300      	movs	r3, #0
 800ede8:	9308      	str	r3, [sp, #32]
 800edea:	eb09 0802 	add.w	r8, r9, r2
 800edee:	9b04      	ldr	r3, [sp, #16]
 800edf0:	45c1      	cmp	r9, r8
 800edf2:	4417      	add	r7, r2
 800edf4:	441f      	add	r7, r3
 800edf6:	464b      	mov	r3, r9
 800edf8:	bfa8      	it	ge
 800edfa:	4643      	movge	r3, r8
 800edfc:	42bb      	cmp	r3, r7
 800edfe:	bfa8      	it	ge
 800ee00:	463b      	movge	r3, r7
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	bfc2      	ittt	gt
 800ee06:	eba8 0803 	subgt.w	r8, r8, r3
 800ee0a:	1aff      	subgt	r7, r7, r3
 800ee0c:	eba9 0903 	subgt.w	r9, r9, r3
 800ee10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	dd17      	ble.n	800ee46 <_strtod_l+0x75e>
 800ee16:	4631      	mov	r1, r6
 800ee18:	461a      	mov	r2, r3
 800ee1a:	4620      	mov	r0, r4
 800ee1c:	f001 ff4a 	bl	8010cb4 <__pow5mult>
 800ee20:	4606      	mov	r6, r0
 800ee22:	2800      	cmp	r0, #0
 800ee24:	f43f aea8 	beq.w	800eb78 <_strtod_l+0x490>
 800ee28:	4601      	mov	r1, r0
 800ee2a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ee2c:	4620      	mov	r0, r4
 800ee2e:	f001 fe97 	bl	8010b60 <__multiply>
 800ee32:	900b      	str	r0, [sp, #44]	; 0x2c
 800ee34:	2800      	cmp	r0, #0
 800ee36:	f43f ae9f 	beq.w	800eb78 <_strtod_l+0x490>
 800ee3a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ee3c:	4620      	mov	r0, r4
 800ee3e:	f001 fd77 	bl	8010930 <_Bfree>
 800ee42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ee44:	9318      	str	r3, [sp, #96]	; 0x60
 800ee46:	f1b8 0f00 	cmp.w	r8, #0
 800ee4a:	f300 808c 	bgt.w	800ef66 <_strtod_l+0x87e>
 800ee4e:	9b06      	ldr	r3, [sp, #24]
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	dd08      	ble.n	800ee66 <_strtod_l+0x77e>
 800ee54:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ee56:	9905      	ldr	r1, [sp, #20]
 800ee58:	4620      	mov	r0, r4
 800ee5a:	f001 ff2b 	bl	8010cb4 <__pow5mult>
 800ee5e:	9005      	str	r0, [sp, #20]
 800ee60:	2800      	cmp	r0, #0
 800ee62:	f43f ae89 	beq.w	800eb78 <_strtod_l+0x490>
 800ee66:	2f00      	cmp	r7, #0
 800ee68:	dd08      	ble.n	800ee7c <_strtod_l+0x794>
 800ee6a:	9905      	ldr	r1, [sp, #20]
 800ee6c:	463a      	mov	r2, r7
 800ee6e:	4620      	mov	r0, r4
 800ee70:	f001 ff7a 	bl	8010d68 <__lshift>
 800ee74:	9005      	str	r0, [sp, #20]
 800ee76:	2800      	cmp	r0, #0
 800ee78:	f43f ae7e 	beq.w	800eb78 <_strtod_l+0x490>
 800ee7c:	f1b9 0f00 	cmp.w	r9, #0
 800ee80:	dd08      	ble.n	800ee94 <_strtod_l+0x7ac>
 800ee82:	4631      	mov	r1, r6
 800ee84:	464a      	mov	r2, r9
 800ee86:	4620      	mov	r0, r4
 800ee88:	f001 ff6e 	bl	8010d68 <__lshift>
 800ee8c:	4606      	mov	r6, r0
 800ee8e:	2800      	cmp	r0, #0
 800ee90:	f43f ae72 	beq.w	800eb78 <_strtod_l+0x490>
 800ee94:	9a05      	ldr	r2, [sp, #20]
 800ee96:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ee98:	4620      	mov	r0, r4
 800ee9a:	f001 fff1 	bl	8010e80 <__mdiff>
 800ee9e:	4605      	mov	r5, r0
 800eea0:	2800      	cmp	r0, #0
 800eea2:	f43f ae69 	beq.w	800eb78 <_strtod_l+0x490>
 800eea6:	68c3      	ldr	r3, [r0, #12]
 800eea8:	930b      	str	r3, [sp, #44]	; 0x2c
 800eeaa:	2300      	movs	r3, #0
 800eeac:	60c3      	str	r3, [r0, #12]
 800eeae:	4631      	mov	r1, r6
 800eeb0:	f001 ffca 	bl	8010e48 <__mcmp>
 800eeb4:	2800      	cmp	r0, #0
 800eeb6:	da60      	bge.n	800ef7a <_strtod_l+0x892>
 800eeb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eeba:	ea53 030a 	orrs.w	r3, r3, sl
 800eebe:	f040 8082 	bne.w	800efc6 <_strtod_l+0x8de>
 800eec2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d17d      	bne.n	800efc6 <_strtod_l+0x8de>
 800eeca:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800eece:	0d1b      	lsrs	r3, r3, #20
 800eed0:	051b      	lsls	r3, r3, #20
 800eed2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800eed6:	d976      	bls.n	800efc6 <_strtod_l+0x8de>
 800eed8:	696b      	ldr	r3, [r5, #20]
 800eeda:	b913      	cbnz	r3, 800eee2 <_strtod_l+0x7fa>
 800eedc:	692b      	ldr	r3, [r5, #16]
 800eede:	2b01      	cmp	r3, #1
 800eee0:	dd71      	ble.n	800efc6 <_strtod_l+0x8de>
 800eee2:	4629      	mov	r1, r5
 800eee4:	2201      	movs	r2, #1
 800eee6:	4620      	mov	r0, r4
 800eee8:	f001 ff3e 	bl	8010d68 <__lshift>
 800eeec:	4631      	mov	r1, r6
 800eeee:	4605      	mov	r5, r0
 800eef0:	f001 ffaa 	bl	8010e48 <__mcmp>
 800eef4:	2800      	cmp	r0, #0
 800eef6:	dd66      	ble.n	800efc6 <_strtod_l+0x8de>
 800eef8:	9904      	ldr	r1, [sp, #16]
 800eefa:	4a53      	ldr	r2, [pc, #332]	; (800f048 <_strtod_l+0x960>)
 800eefc:	465b      	mov	r3, fp
 800eefe:	2900      	cmp	r1, #0
 800ef00:	f000 8081 	beq.w	800f006 <_strtod_l+0x91e>
 800ef04:	ea02 010b 	and.w	r1, r2, fp
 800ef08:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800ef0c:	dc7b      	bgt.n	800f006 <_strtod_l+0x91e>
 800ef0e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800ef12:	f77f aea9 	ble.w	800ec68 <_strtod_l+0x580>
 800ef16:	4b4d      	ldr	r3, [pc, #308]	; (800f04c <_strtod_l+0x964>)
 800ef18:	4650      	mov	r0, sl
 800ef1a:	4659      	mov	r1, fp
 800ef1c:	2200      	movs	r2, #0
 800ef1e:	f7f1 fb6b 	bl	80005f8 <__aeabi_dmul>
 800ef22:	460b      	mov	r3, r1
 800ef24:	4303      	orrs	r3, r0
 800ef26:	bf08      	it	eq
 800ef28:	2322      	moveq	r3, #34	; 0x22
 800ef2a:	4682      	mov	sl, r0
 800ef2c:	468b      	mov	fp, r1
 800ef2e:	bf08      	it	eq
 800ef30:	6023      	streq	r3, [r4, #0]
 800ef32:	e62b      	b.n	800eb8c <_strtod_l+0x4a4>
 800ef34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ef38:	fa02 f303 	lsl.w	r3, r2, r3
 800ef3c:	ea03 0a0a 	and.w	sl, r3, sl
 800ef40:	e6e3      	b.n	800ed0a <_strtod_l+0x622>
 800ef42:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800ef46:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800ef4a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800ef4e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800ef52:	fa01 f308 	lsl.w	r3, r1, r8
 800ef56:	9308      	str	r3, [sp, #32]
 800ef58:	910d      	str	r1, [sp, #52]	; 0x34
 800ef5a:	e746      	b.n	800edea <_strtod_l+0x702>
 800ef5c:	2300      	movs	r3, #0
 800ef5e:	9308      	str	r3, [sp, #32]
 800ef60:	2301      	movs	r3, #1
 800ef62:	930d      	str	r3, [sp, #52]	; 0x34
 800ef64:	e741      	b.n	800edea <_strtod_l+0x702>
 800ef66:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ef68:	4642      	mov	r2, r8
 800ef6a:	4620      	mov	r0, r4
 800ef6c:	f001 fefc 	bl	8010d68 <__lshift>
 800ef70:	9018      	str	r0, [sp, #96]	; 0x60
 800ef72:	2800      	cmp	r0, #0
 800ef74:	f47f af6b 	bne.w	800ee4e <_strtod_l+0x766>
 800ef78:	e5fe      	b.n	800eb78 <_strtod_l+0x490>
 800ef7a:	465f      	mov	r7, fp
 800ef7c:	d16e      	bne.n	800f05c <_strtod_l+0x974>
 800ef7e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ef80:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ef84:	b342      	cbz	r2, 800efd8 <_strtod_l+0x8f0>
 800ef86:	4a32      	ldr	r2, [pc, #200]	; (800f050 <_strtod_l+0x968>)
 800ef88:	4293      	cmp	r3, r2
 800ef8a:	d128      	bne.n	800efde <_strtod_l+0x8f6>
 800ef8c:	9b04      	ldr	r3, [sp, #16]
 800ef8e:	4651      	mov	r1, sl
 800ef90:	b1eb      	cbz	r3, 800efce <_strtod_l+0x8e6>
 800ef92:	4b2d      	ldr	r3, [pc, #180]	; (800f048 <_strtod_l+0x960>)
 800ef94:	403b      	ands	r3, r7
 800ef96:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ef9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ef9e:	d819      	bhi.n	800efd4 <_strtod_l+0x8ec>
 800efa0:	0d1b      	lsrs	r3, r3, #20
 800efa2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800efa6:	fa02 f303 	lsl.w	r3, r2, r3
 800efaa:	4299      	cmp	r1, r3
 800efac:	d117      	bne.n	800efde <_strtod_l+0x8f6>
 800efae:	4b29      	ldr	r3, [pc, #164]	; (800f054 <_strtod_l+0x96c>)
 800efb0:	429f      	cmp	r7, r3
 800efb2:	d102      	bne.n	800efba <_strtod_l+0x8d2>
 800efb4:	3101      	adds	r1, #1
 800efb6:	f43f addf 	beq.w	800eb78 <_strtod_l+0x490>
 800efba:	4b23      	ldr	r3, [pc, #140]	; (800f048 <_strtod_l+0x960>)
 800efbc:	403b      	ands	r3, r7
 800efbe:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800efc2:	f04f 0a00 	mov.w	sl, #0
 800efc6:	9b04      	ldr	r3, [sp, #16]
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d1a4      	bne.n	800ef16 <_strtod_l+0x82e>
 800efcc:	e5de      	b.n	800eb8c <_strtod_l+0x4a4>
 800efce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800efd2:	e7ea      	b.n	800efaa <_strtod_l+0x8c2>
 800efd4:	4613      	mov	r3, r2
 800efd6:	e7e8      	b.n	800efaa <_strtod_l+0x8c2>
 800efd8:	ea53 030a 	orrs.w	r3, r3, sl
 800efdc:	d08c      	beq.n	800eef8 <_strtod_l+0x810>
 800efde:	9b08      	ldr	r3, [sp, #32]
 800efe0:	b1db      	cbz	r3, 800f01a <_strtod_l+0x932>
 800efe2:	423b      	tst	r3, r7
 800efe4:	d0ef      	beq.n	800efc6 <_strtod_l+0x8de>
 800efe6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800efe8:	9a04      	ldr	r2, [sp, #16]
 800efea:	4650      	mov	r0, sl
 800efec:	4659      	mov	r1, fp
 800efee:	b1c3      	cbz	r3, 800f022 <_strtod_l+0x93a>
 800eff0:	f7ff fb5b 	bl	800e6aa <sulp>
 800eff4:	4602      	mov	r2, r0
 800eff6:	460b      	mov	r3, r1
 800eff8:	ec51 0b18 	vmov	r0, r1, d8
 800effc:	f7f1 f946 	bl	800028c <__adddf3>
 800f000:	4682      	mov	sl, r0
 800f002:	468b      	mov	fp, r1
 800f004:	e7df      	b.n	800efc6 <_strtod_l+0x8de>
 800f006:	4013      	ands	r3, r2
 800f008:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800f00c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800f010:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800f014:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800f018:	e7d5      	b.n	800efc6 <_strtod_l+0x8de>
 800f01a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f01c:	ea13 0f0a 	tst.w	r3, sl
 800f020:	e7e0      	b.n	800efe4 <_strtod_l+0x8fc>
 800f022:	f7ff fb42 	bl	800e6aa <sulp>
 800f026:	4602      	mov	r2, r0
 800f028:	460b      	mov	r3, r1
 800f02a:	ec51 0b18 	vmov	r0, r1, d8
 800f02e:	f7f1 f92b 	bl	8000288 <__aeabi_dsub>
 800f032:	2200      	movs	r2, #0
 800f034:	2300      	movs	r3, #0
 800f036:	4682      	mov	sl, r0
 800f038:	468b      	mov	fp, r1
 800f03a:	f7f1 fd45 	bl	8000ac8 <__aeabi_dcmpeq>
 800f03e:	2800      	cmp	r0, #0
 800f040:	d0c1      	beq.n	800efc6 <_strtod_l+0x8de>
 800f042:	e611      	b.n	800ec68 <_strtod_l+0x580>
 800f044:	fffffc02 	.word	0xfffffc02
 800f048:	7ff00000 	.word	0x7ff00000
 800f04c:	39500000 	.word	0x39500000
 800f050:	000fffff 	.word	0x000fffff
 800f054:	7fefffff 	.word	0x7fefffff
 800f058:	08013808 	.word	0x08013808
 800f05c:	4631      	mov	r1, r6
 800f05e:	4628      	mov	r0, r5
 800f060:	f002 f870 	bl	8011144 <__ratio>
 800f064:	ec59 8b10 	vmov	r8, r9, d0
 800f068:	ee10 0a10 	vmov	r0, s0
 800f06c:	2200      	movs	r2, #0
 800f06e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f072:	4649      	mov	r1, r9
 800f074:	f7f1 fd3c 	bl	8000af0 <__aeabi_dcmple>
 800f078:	2800      	cmp	r0, #0
 800f07a:	d07a      	beq.n	800f172 <_strtod_l+0xa8a>
 800f07c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d04a      	beq.n	800f118 <_strtod_l+0xa30>
 800f082:	4b95      	ldr	r3, [pc, #596]	; (800f2d8 <_strtod_l+0xbf0>)
 800f084:	2200      	movs	r2, #0
 800f086:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800f08a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800f2d8 <_strtod_l+0xbf0>
 800f08e:	f04f 0800 	mov.w	r8, #0
 800f092:	4b92      	ldr	r3, [pc, #584]	; (800f2dc <_strtod_l+0xbf4>)
 800f094:	403b      	ands	r3, r7
 800f096:	930d      	str	r3, [sp, #52]	; 0x34
 800f098:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f09a:	4b91      	ldr	r3, [pc, #580]	; (800f2e0 <_strtod_l+0xbf8>)
 800f09c:	429a      	cmp	r2, r3
 800f09e:	f040 80b0 	bne.w	800f202 <_strtod_l+0xb1a>
 800f0a2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f0a6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800f0aa:	ec4b ab10 	vmov	d0, sl, fp
 800f0ae:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f0b2:	f001 ff6f 	bl	8010f94 <__ulp>
 800f0b6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f0ba:	ec53 2b10 	vmov	r2, r3, d0
 800f0be:	f7f1 fa9b 	bl	80005f8 <__aeabi_dmul>
 800f0c2:	4652      	mov	r2, sl
 800f0c4:	465b      	mov	r3, fp
 800f0c6:	f7f1 f8e1 	bl	800028c <__adddf3>
 800f0ca:	460b      	mov	r3, r1
 800f0cc:	4983      	ldr	r1, [pc, #524]	; (800f2dc <_strtod_l+0xbf4>)
 800f0ce:	4a85      	ldr	r2, [pc, #532]	; (800f2e4 <_strtod_l+0xbfc>)
 800f0d0:	4019      	ands	r1, r3
 800f0d2:	4291      	cmp	r1, r2
 800f0d4:	4682      	mov	sl, r0
 800f0d6:	d960      	bls.n	800f19a <_strtod_l+0xab2>
 800f0d8:	ee18 3a90 	vmov	r3, s17
 800f0dc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800f0e0:	4293      	cmp	r3, r2
 800f0e2:	d104      	bne.n	800f0ee <_strtod_l+0xa06>
 800f0e4:	ee18 3a10 	vmov	r3, s16
 800f0e8:	3301      	adds	r3, #1
 800f0ea:	f43f ad45 	beq.w	800eb78 <_strtod_l+0x490>
 800f0ee:	f8df b200 	ldr.w	fp, [pc, #512]	; 800f2f0 <_strtod_l+0xc08>
 800f0f2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800f0f6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f0f8:	4620      	mov	r0, r4
 800f0fa:	f001 fc19 	bl	8010930 <_Bfree>
 800f0fe:	9905      	ldr	r1, [sp, #20]
 800f100:	4620      	mov	r0, r4
 800f102:	f001 fc15 	bl	8010930 <_Bfree>
 800f106:	4631      	mov	r1, r6
 800f108:	4620      	mov	r0, r4
 800f10a:	f001 fc11 	bl	8010930 <_Bfree>
 800f10e:	4629      	mov	r1, r5
 800f110:	4620      	mov	r0, r4
 800f112:	f001 fc0d 	bl	8010930 <_Bfree>
 800f116:	e61a      	b.n	800ed4e <_strtod_l+0x666>
 800f118:	f1ba 0f00 	cmp.w	sl, #0
 800f11c:	d11b      	bne.n	800f156 <_strtod_l+0xa6e>
 800f11e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f122:	b9f3      	cbnz	r3, 800f162 <_strtod_l+0xa7a>
 800f124:	4b6c      	ldr	r3, [pc, #432]	; (800f2d8 <_strtod_l+0xbf0>)
 800f126:	2200      	movs	r2, #0
 800f128:	4640      	mov	r0, r8
 800f12a:	4649      	mov	r1, r9
 800f12c:	f7f1 fcd6 	bl	8000adc <__aeabi_dcmplt>
 800f130:	b9d0      	cbnz	r0, 800f168 <_strtod_l+0xa80>
 800f132:	4640      	mov	r0, r8
 800f134:	4649      	mov	r1, r9
 800f136:	4b6c      	ldr	r3, [pc, #432]	; (800f2e8 <_strtod_l+0xc00>)
 800f138:	2200      	movs	r2, #0
 800f13a:	f7f1 fa5d 	bl	80005f8 <__aeabi_dmul>
 800f13e:	4680      	mov	r8, r0
 800f140:	4689      	mov	r9, r1
 800f142:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800f146:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800f14a:	9315      	str	r3, [sp, #84]	; 0x54
 800f14c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800f150:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800f154:	e79d      	b.n	800f092 <_strtod_l+0x9aa>
 800f156:	f1ba 0f01 	cmp.w	sl, #1
 800f15a:	d102      	bne.n	800f162 <_strtod_l+0xa7a>
 800f15c:	2f00      	cmp	r7, #0
 800f15e:	f43f ad83 	beq.w	800ec68 <_strtod_l+0x580>
 800f162:	4b62      	ldr	r3, [pc, #392]	; (800f2ec <_strtod_l+0xc04>)
 800f164:	2200      	movs	r2, #0
 800f166:	e78e      	b.n	800f086 <_strtod_l+0x99e>
 800f168:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800f2e8 <_strtod_l+0xc00>
 800f16c:	f04f 0800 	mov.w	r8, #0
 800f170:	e7e7      	b.n	800f142 <_strtod_l+0xa5a>
 800f172:	4b5d      	ldr	r3, [pc, #372]	; (800f2e8 <_strtod_l+0xc00>)
 800f174:	4640      	mov	r0, r8
 800f176:	4649      	mov	r1, r9
 800f178:	2200      	movs	r2, #0
 800f17a:	f7f1 fa3d 	bl	80005f8 <__aeabi_dmul>
 800f17e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f180:	4680      	mov	r8, r0
 800f182:	4689      	mov	r9, r1
 800f184:	b933      	cbnz	r3, 800f194 <_strtod_l+0xaac>
 800f186:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f18a:	900e      	str	r0, [sp, #56]	; 0x38
 800f18c:	930f      	str	r3, [sp, #60]	; 0x3c
 800f18e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800f192:	e7dd      	b.n	800f150 <_strtod_l+0xa68>
 800f194:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800f198:	e7f9      	b.n	800f18e <_strtod_l+0xaa6>
 800f19a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800f19e:	9b04      	ldr	r3, [sp, #16]
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d1a8      	bne.n	800f0f6 <_strtod_l+0xa0e>
 800f1a4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f1a8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f1aa:	0d1b      	lsrs	r3, r3, #20
 800f1ac:	051b      	lsls	r3, r3, #20
 800f1ae:	429a      	cmp	r2, r3
 800f1b0:	d1a1      	bne.n	800f0f6 <_strtod_l+0xa0e>
 800f1b2:	4640      	mov	r0, r8
 800f1b4:	4649      	mov	r1, r9
 800f1b6:	f7f1 fdcf 	bl	8000d58 <__aeabi_d2lz>
 800f1ba:	f7f1 f9ef 	bl	800059c <__aeabi_l2d>
 800f1be:	4602      	mov	r2, r0
 800f1c0:	460b      	mov	r3, r1
 800f1c2:	4640      	mov	r0, r8
 800f1c4:	4649      	mov	r1, r9
 800f1c6:	f7f1 f85f 	bl	8000288 <__aeabi_dsub>
 800f1ca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f1cc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f1d0:	ea43 030a 	orr.w	r3, r3, sl
 800f1d4:	4313      	orrs	r3, r2
 800f1d6:	4680      	mov	r8, r0
 800f1d8:	4689      	mov	r9, r1
 800f1da:	d055      	beq.n	800f288 <_strtod_l+0xba0>
 800f1dc:	a336      	add	r3, pc, #216	; (adr r3, 800f2b8 <_strtod_l+0xbd0>)
 800f1de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1e2:	f7f1 fc7b 	bl	8000adc <__aeabi_dcmplt>
 800f1e6:	2800      	cmp	r0, #0
 800f1e8:	f47f acd0 	bne.w	800eb8c <_strtod_l+0x4a4>
 800f1ec:	a334      	add	r3, pc, #208	; (adr r3, 800f2c0 <_strtod_l+0xbd8>)
 800f1ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1f2:	4640      	mov	r0, r8
 800f1f4:	4649      	mov	r1, r9
 800f1f6:	f7f1 fc8f 	bl	8000b18 <__aeabi_dcmpgt>
 800f1fa:	2800      	cmp	r0, #0
 800f1fc:	f43f af7b 	beq.w	800f0f6 <_strtod_l+0xa0e>
 800f200:	e4c4      	b.n	800eb8c <_strtod_l+0x4a4>
 800f202:	9b04      	ldr	r3, [sp, #16]
 800f204:	b333      	cbz	r3, 800f254 <_strtod_l+0xb6c>
 800f206:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f208:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800f20c:	d822      	bhi.n	800f254 <_strtod_l+0xb6c>
 800f20e:	a32e      	add	r3, pc, #184	; (adr r3, 800f2c8 <_strtod_l+0xbe0>)
 800f210:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f214:	4640      	mov	r0, r8
 800f216:	4649      	mov	r1, r9
 800f218:	f7f1 fc6a 	bl	8000af0 <__aeabi_dcmple>
 800f21c:	b1a0      	cbz	r0, 800f248 <_strtod_l+0xb60>
 800f21e:	4649      	mov	r1, r9
 800f220:	4640      	mov	r0, r8
 800f222:	f7f1 fcc1 	bl	8000ba8 <__aeabi_d2uiz>
 800f226:	2801      	cmp	r0, #1
 800f228:	bf38      	it	cc
 800f22a:	2001      	movcc	r0, #1
 800f22c:	f7f1 f96a 	bl	8000504 <__aeabi_ui2d>
 800f230:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f232:	4680      	mov	r8, r0
 800f234:	4689      	mov	r9, r1
 800f236:	bb23      	cbnz	r3, 800f282 <_strtod_l+0xb9a>
 800f238:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f23c:	9010      	str	r0, [sp, #64]	; 0x40
 800f23e:	9311      	str	r3, [sp, #68]	; 0x44
 800f240:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800f244:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800f248:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f24a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f24c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800f250:	1a9b      	subs	r3, r3, r2
 800f252:	9309      	str	r3, [sp, #36]	; 0x24
 800f254:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f258:	eeb0 0a48 	vmov.f32	s0, s16
 800f25c:	eef0 0a68 	vmov.f32	s1, s17
 800f260:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f264:	f001 fe96 	bl	8010f94 <__ulp>
 800f268:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f26c:	ec53 2b10 	vmov	r2, r3, d0
 800f270:	f7f1 f9c2 	bl	80005f8 <__aeabi_dmul>
 800f274:	ec53 2b18 	vmov	r2, r3, d8
 800f278:	f7f1 f808 	bl	800028c <__adddf3>
 800f27c:	4682      	mov	sl, r0
 800f27e:	468b      	mov	fp, r1
 800f280:	e78d      	b.n	800f19e <_strtod_l+0xab6>
 800f282:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800f286:	e7db      	b.n	800f240 <_strtod_l+0xb58>
 800f288:	a311      	add	r3, pc, #68	; (adr r3, 800f2d0 <_strtod_l+0xbe8>)
 800f28a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f28e:	f7f1 fc25 	bl	8000adc <__aeabi_dcmplt>
 800f292:	e7b2      	b.n	800f1fa <_strtod_l+0xb12>
 800f294:	2300      	movs	r3, #0
 800f296:	930a      	str	r3, [sp, #40]	; 0x28
 800f298:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f29a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f29c:	6013      	str	r3, [r2, #0]
 800f29e:	f7ff ba6b 	b.w	800e778 <_strtod_l+0x90>
 800f2a2:	2a65      	cmp	r2, #101	; 0x65
 800f2a4:	f43f ab5f 	beq.w	800e966 <_strtod_l+0x27e>
 800f2a8:	2a45      	cmp	r2, #69	; 0x45
 800f2aa:	f43f ab5c 	beq.w	800e966 <_strtod_l+0x27e>
 800f2ae:	2301      	movs	r3, #1
 800f2b0:	f7ff bb94 	b.w	800e9dc <_strtod_l+0x2f4>
 800f2b4:	f3af 8000 	nop.w
 800f2b8:	94a03595 	.word	0x94a03595
 800f2bc:	3fdfffff 	.word	0x3fdfffff
 800f2c0:	35afe535 	.word	0x35afe535
 800f2c4:	3fe00000 	.word	0x3fe00000
 800f2c8:	ffc00000 	.word	0xffc00000
 800f2cc:	41dfffff 	.word	0x41dfffff
 800f2d0:	94a03595 	.word	0x94a03595
 800f2d4:	3fcfffff 	.word	0x3fcfffff
 800f2d8:	3ff00000 	.word	0x3ff00000
 800f2dc:	7ff00000 	.word	0x7ff00000
 800f2e0:	7fe00000 	.word	0x7fe00000
 800f2e4:	7c9fffff 	.word	0x7c9fffff
 800f2e8:	3fe00000 	.word	0x3fe00000
 800f2ec:	bff00000 	.word	0xbff00000
 800f2f0:	7fefffff 	.word	0x7fefffff

0800f2f4 <strtod>:
 800f2f4:	460a      	mov	r2, r1
 800f2f6:	4601      	mov	r1, r0
 800f2f8:	4802      	ldr	r0, [pc, #8]	; (800f304 <strtod+0x10>)
 800f2fa:	4b03      	ldr	r3, [pc, #12]	; (800f308 <strtod+0x14>)
 800f2fc:	6800      	ldr	r0, [r0, #0]
 800f2fe:	f7ff b9f3 	b.w	800e6e8 <_strtod_l>
 800f302:	bf00      	nop
 800f304:	20000218 	.word	0x20000218
 800f308:	20000280 	.word	0x20000280

0800f30c <_strtol_l.constprop.0>:
 800f30c:	2b01      	cmp	r3, #1
 800f30e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f312:	d001      	beq.n	800f318 <_strtol_l.constprop.0+0xc>
 800f314:	2b24      	cmp	r3, #36	; 0x24
 800f316:	d906      	bls.n	800f326 <_strtol_l.constprop.0+0x1a>
 800f318:	f7fe fc1a 	bl	800db50 <__errno>
 800f31c:	2316      	movs	r3, #22
 800f31e:	6003      	str	r3, [r0, #0]
 800f320:	2000      	movs	r0, #0
 800f322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f326:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800f40c <_strtol_l.constprop.0+0x100>
 800f32a:	460d      	mov	r5, r1
 800f32c:	462e      	mov	r6, r5
 800f32e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f332:	f814 700c 	ldrb.w	r7, [r4, ip]
 800f336:	f017 0708 	ands.w	r7, r7, #8
 800f33a:	d1f7      	bne.n	800f32c <_strtol_l.constprop.0+0x20>
 800f33c:	2c2d      	cmp	r4, #45	; 0x2d
 800f33e:	d132      	bne.n	800f3a6 <_strtol_l.constprop.0+0x9a>
 800f340:	782c      	ldrb	r4, [r5, #0]
 800f342:	2701      	movs	r7, #1
 800f344:	1cb5      	adds	r5, r6, #2
 800f346:	2b00      	cmp	r3, #0
 800f348:	d05b      	beq.n	800f402 <_strtol_l.constprop.0+0xf6>
 800f34a:	2b10      	cmp	r3, #16
 800f34c:	d109      	bne.n	800f362 <_strtol_l.constprop.0+0x56>
 800f34e:	2c30      	cmp	r4, #48	; 0x30
 800f350:	d107      	bne.n	800f362 <_strtol_l.constprop.0+0x56>
 800f352:	782c      	ldrb	r4, [r5, #0]
 800f354:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800f358:	2c58      	cmp	r4, #88	; 0x58
 800f35a:	d14d      	bne.n	800f3f8 <_strtol_l.constprop.0+0xec>
 800f35c:	786c      	ldrb	r4, [r5, #1]
 800f35e:	2310      	movs	r3, #16
 800f360:	3502      	adds	r5, #2
 800f362:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800f366:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800f36a:	f04f 0c00 	mov.w	ip, #0
 800f36e:	fbb8 f9f3 	udiv	r9, r8, r3
 800f372:	4666      	mov	r6, ip
 800f374:	fb03 8a19 	mls	sl, r3, r9, r8
 800f378:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800f37c:	f1be 0f09 	cmp.w	lr, #9
 800f380:	d816      	bhi.n	800f3b0 <_strtol_l.constprop.0+0xa4>
 800f382:	4674      	mov	r4, lr
 800f384:	42a3      	cmp	r3, r4
 800f386:	dd24      	ble.n	800f3d2 <_strtol_l.constprop.0+0xc6>
 800f388:	f1bc 0f00 	cmp.w	ip, #0
 800f38c:	db1e      	blt.n	800f3cc <_strtol_l.constprop.0+0xc0>
 800f38e:	45b1      	cmp	r9, r6
 800f390:	d31c      	bcc.n	800f3cc <_strtol_l.constprop.0+0xc0>
 800f392:	d101      	bne.n	800f398 <_strtol_l.constprop.0+0x8c>
 800f394:	45a2      	cmp	sl, r4
 800f396:	db19      	blt.n	800f3cc <_strtol_l.constprop.0+0xc0>
 800f398:	fb06 4603 	mla	r6, r6, r3, r4
 800f39c:	f04f 0c01 	mov.w	ip, #1
 800f3a0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f3a4:	e7e8      	b.n	800f378 <_strtol_l.constprop.0+0x6c>
 800f3a6:	2c2b      	cmp	r4, #43	; 0x2b
 800f3a8:	bf04      	itt	eq
 800f3aa:	782c      	ldrbeq	r4, [r5, #0]
 800f3ac:	1cb5      	addeq	r5, r6, #2
 800f3ae:	e7ca      	b.n	800f346 <_strtol_l.constprop.0+0x3a>
 800f3b0:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800f3b4:	f1be 0f19 	cmp.w	lr, #25
 800f3b8:	d801      	bhi.n	800f3be <_strtol_l.constprop.0+0xb2>
 800f3ba:	3c37      	subs	r4, #55	; 0x37
 800f3bc:	e7e2      	b.n	800f384 <_strtol_l.constprop.0+0x78>
 800f3be:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800f3c2:	f1be 0f19 	cmp.w	lr, #25
 800f3c6:	d804      	bhi.n	800f3d2 <_strtol_l.constprop.0+0xc6>
 800f3c8:	3c57      	subs	r4, #87	; 0x57
 800f3ca:	e7db      	b.n	800f384 <_strtol_l.constprop.0+0x78>
 800f3cc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800f3d0:	e7e6      	b.n	800f3a0 <_strtol_l.constprop.0+0x94>
 800f3d2:	f1bc 0f00 	cmp.w	ip, #0
 800f3d6:	da05      	bge.n	800f3e4 <_strtol_l.constprop.0+0xd8>
 800f3d8:	2322      	movs	r3, #34	; 0x22
 800f3da:	6003      	str	r3, [r0, #0]
 800f3dc:	4646      	mov	r6, r8
 800f3de:	b942      	cbnz	r2, 800f3f2 <_strtol_l.constprop.0+0xe6>
 800f3e0:	4630      	mov	r0, r6
 800f3e2:	e79e      	b.n	800f322 <_strtol_l.constprop.0+0x16>
 800f3e4:	b107      	cbz	r7, 800f3e8 <_strtol_l.constprop.0+0xdc>
 800f3e6:	4276      	negs	r6, r6
 800f3e8:	2a00      	cmp	r2, #0
 800f3ea:	d0f9      	beq.n	800f3e0 <_strtol_l.constprop.0+0xd4>
 800f3ec:	f1bc 0f00 	cmp.w	ip, #0
 800f3f0:	d000      	beq.n	800f3f4 <_strtol_l.constprop.0+0xe8>
 800f3f2:	1e69      	subs	r1, r5, #1
 800f3f4:	6011      	str	r1, [r2, #0]
 800f3f6:	e7f3      	b.n	800f3e0 <_strtol_l.constprop.0+0xd4>
 800f3f8:	2430      	movs	r4, #48	; 0x30
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	d1b1      	bne.n	800f362 <_strtol_l.constprop.0+0x56>
 800f3fe:	2308      	movs	r3, #8
 800f400:	e7af      	b.n	800f362 <_strtol_l.constprop.0+0x56>
 800f402:	2c30      	cmp	r4, #48	; 0x30
 800f404:	d0a5      	beq.n	800f352 <_strtol_l.constprop.0+0x46>
 800f406:	230a      	movs	r3, #10
 800f408:	e7ab      	b.n	800f362 <_strtol_l.constprop.0+0x56>
 800f40a:	bf00      	nop
 800f40c:	080136a1 	.word	0x080136a1

0800f410 <strtol>:
 800f410:	4613      	mov	r3, r2
 800f412:	460a      	mov	r2, r1
 800f414:	4601      	mov	r1, r0
 800f416:	4802      	ldr	r0, [pc, #8]	; (800f420 <strtol+0x10>)
 800f418:	6800      	ldr	r0, [r0, #0]
 800f41a:	f7ff bf77 	b.w	800f30c <_strtol_l.constprop.0>
 800f41e:	bf00      	nop
 800f420:	20000218 	.word	0x20000218

0800f424 <_vsniprintf_r>:
 800f424:	b530      	push	{r4, r5, lr}
 800f426:	4614      	mov	r4, r2
 800f428:	2c00      	cmp	r4, #0
 800f42a:	b09b      	sub	sp, #108	; 0x6c
 800f42c:	4605      	mov	r5, r0
 800f42e:	461a      	mov	r2, r3
 800f430:	da05      	bge.n	800f43e <_vsniprintf_r+0x1a>
 800f432:	238b      	movs	r3, #139	; 0x8b
 800f434:	6003      	str	r3, [r0, #0]
 800f436:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f43a:	b01b      	add	sp, #108	; 0x6c
 800f43c:	bd30      	pop	{r4, r5, pc}
 800f43e:	f44f 7302 	mov.w	r3, #520	; 0x208
 800f442:	f8ad 300c 	strh.w	r3, [sp, #12]
 800f446:	bf14      	ite	ne
 800f448:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800f44c:	4623      	moveq	r3, r4
 800f44e:	9302      	str	r3, [sp, #8]
 800f450:	9305      	str	r3, [sp, #20]
 800f452:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f456:	9100      	str	r1, [sp, #0]
 800f458:	9104      	str	r1, [sp, #16]
 800f45a:	f8ad 300e 	strh.w	r3, [sp, #14]
 800f45e:	4669      	mov	r1, sp
 800f460:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800f462:	f002 f839 	bl	80114d8 <_svfiprintf_r>
 800f466:	1c43      	adds	r3, r0, #1
 800f468:	bfbc      	itt	lt
 800f46a:	238b      	movlt	r3, #139	; 0x8b
 800f46c:	602b      	strlt	r3, [r5, #0]
 800f46e:	2c00      	cmp	r4, #0
 800f470:	d0e3      	beq.n	800f43a <_vsniprintf_r+0x16>
 800f472:	9b00      	ldr	r3, [sp, #0]
 800f474:	2200      	movs	r2, #0
 800f476:	701a      	strb	r2, [r3, #0]
 800f478:	e7df      	b.n	800f43a <_vsniprintf_r+0x16>
	...

0800f47c <vsniprintf>:
 800f47c:	b507      	push	{r0, r1, r2, lr}
 800f47e:	9300      	str	r3, [sp, #0]
 800f480:	4613      	mov	r3, r2
 800f482:	460a      	mov	r2, r1
 800f484:	4601      	mov	r1, r0
 800f486:	4803      	ldr	r0, [pc, #12]	; (800f494 <vsniprintf+0x18>)
 800f488:	6800      	ldr	r0, [r0, #0]
 800f48a:	f7ff ffcb 	bl	800f424 <_vsniprintf_r>
 800f48e:	b003      	add	sp, #12
 800f490:	f85d fb04 	ldr.w	pc, [sp], #4
 800f494:	20000218 	.word	0x20000218

0800f498 <quorem>:
 800f498:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f49c:	6903      	ldr	r3, [r0, #16]
 800f49e:	690c      	ldr	r4, [r1, #16]
 800f4a0:	42a3      	cmp	r3, r4
 800f4a2:	4607      	mov	r7, r0
 800f4a4:	f2c0 8081 	blt.w	800f5aa <quorem+0x112>
 800f4a8:	3c01      	subs	r4, #1
 800f4aa:	f101 0814 	add.w	r8, r1, #20
 800f4ae:	f100 0514 	add.w	r5, r0, #20
 800f4b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f4b6:	9301      	str	r3, [sp, #4]
 800f4b8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f4bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f4c0:	3301      	adds	r3, #1
 800f4c2:	429a      	cmp	r2, r3
 800f4c4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800f4c8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f4cc:	fbb2 f6f3 	udiv	r6, r2, r3
 800f4d0:	d331      	bcc.n	800f536 <quorem+0x9e>
 800f4d2:	f04f 0e00 	mov.w	lr, #0
 800f4d6:	4640      	mov	r0, r8
 800f4d8:	46ac      	mov	ip, r5
 800f4da:	46f2      	mov	sl, lr
 800f4dc:	f850 2b04 	ldr.w	r2, [r0], #4
 800f4e0:	b293      	uxth	r3, r2
 800f4e2:	fb06 e303 	mla	r3, r6, r3, lr
 800f4e6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800f4ea:	b29b      	uxth	r3, r3
 800f4ec:	ebaa 0303 	sub.w	r3, sl, r3
 800f4f0:	f8dc a000 	ldr.w	sl, [ip]
 800f4f4:	0c12      	lsrs	r2, r2, #16
 800f4f6:	fa13 f38a 	uxtah	r3, r3, sl
 800f4fa:	fb06 e202 	mla	r2, r6, r2, lr
 800f4fe:	9300      	str	r3, [sp, #0]
 800f500:	9b00      	ldr	r3, [sp, #0]
 800f502:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f506:	b292      	uxth	r2, r2
 800f508:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800f50c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f510:	f8bd 3000 	ldrh.w	r3, [sp]
 800f514:	4581      	cmp	r9, r0
 800f516:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f51a:	f84c 3b04 	str.w	r3, [ip], #4
 800f51e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800f522:	d2db      	bcs.n	800f4dc <quorem+0x44>
 800f524:	f855 300b 	ldr.w	r3, [r5, fp]
 800f528:	b92b      	cbnz	r3, 800f536 <quorem+0x9e>
 800f52a:	9b01      	ldr	r3, [sp, #4]
 800f52c:	3b04      	subs	r3, #4
 800f52e:	429d      	cmp	r5, r3
 800f530:	461a      	mov	r2, r3
 800f532:	d32e      	bcc.n	800f592 <quorem+0xfa>
 800f534:	613c      	str	r4, [r7, #16]
 800f536:	4638      	mov	r0, r7
 800f538:	f001 fc86 	bl	8010e48 <__mcmp>
 800f53c:	2800      	cmp	r0, #0
 800f53e:	db24      	blt.n	800f58a <quorem+0xf2>
 800f540:	3601      	adds	r6, #1
 800f542:	4628      	mov	r0, r5
 800f544:	f04f 0c00 	mov.w	ip, #0
 800f548:	f858 2b04 	ldr.w	r2, [r8], #4
 800f54c:	f8d0 e000 	ldr.w	lr, [r0]
 800f550:	b293      	uxth	r3, r2
 800f552:	ebac 0303 	sub.w	r3, ip, r3
 800f556:	0c12      	lsrs	r2, r2, #16
 800f558:	fa13 f38e 	uxtah	r3, r3, lr
 800f55c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800f560:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f564:	b29b      	uxth	r3, r3
 800f566:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f56a:	45c1      	cmp	r9, r8
 800f56c:	f840 3b04 	str.w	r3, [r0], #4
 800f570:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800f574:	d2e8      	bcs.n	800f548 <quorem+0xb0>
 800f576:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f57a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f57e:	b922      	cbnz	r2, 800f58a <quorem+0xf2>
 800f580:	3b04      	subs	r3, #4
 800f582:	429d      	cmp	r5, r3
 800f584:	461a      	mov	r2, r3
 800f586:	d30a      	bcc.n	800f59e <quorem+0x106>
 800f588:	613c      	str	r4, [r7, #16]
 800f58a:	4630      	mov	r0, r6
 800f58c:	b003      	add	sp, #12
 800f58e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f592:	6812      	ldr	r2, [r2, #0]
 800f594:	3b04      	subs	r3, #4
 800f596:	2a00      	cmp	r2, #0
 800f598:	d1cc      	bne.n	800f534 <quorem+0x9c>
 800f59a:	3c01      	subs	r4, #1
 800f59c:	e7c7      	b.n	800f52e <quorem+0x96>
 800f59e:	6812      	ldr	r2, [r2, #0]
 800f5a0:	3b04      	subs	r3, #4
 800f5a2:	2a00      	cmp	r2, #0
 800f5a4:	d1f0      	bne.n	800f588 <quorem+0xf0>
 800f5a6:	3c01      	subs	r4, #1
 800f5a8:	e7eb      	b.n	800f582 <quorem+0xea>
 800f5aa:	2000      	movs	r0, #0
 800f5ac:	e7ee      	b.n	800f58c <quorem+0xf4>
	...

0800f5b0 <_dtoa_r>:
 800f5b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5b4:	ed2d 8b04 	vpush	{d8-d9}
 800f5b8:	ec57 6b10 	vmov	r6, r7, d0
 800f5bc:	b093      	sub	sp, #76	; 0x4c
 800f5be:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f5c0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800f5c4:	9106      	str	r1, [sp, #24]
 800f5c6:	ee10 aa10 	vmov	sl, s0
 800f5ca:	4604      	mov	r4, r0
 800f5cc:	9209      	str	r2, [sp, #36]	; 0x24
 800f5ce:	930c      	str	r3, [sp, #48]	; 0x30
 800f5d0:	46bb      	mov	fp, r7
 800f5d2:	b975      	cbnz	r5, 800f5f2 <_dtoa_r+0x42>
 800f5d4:	2010      	movs	r0, #16
 800f5d6:	f001 f951 	bl	801087c <malloc>
 800f5da:	4602      	mov	r2, r0
 800f5dc:	6260      	str	r0, [r4, #36]	; 0x24
 800f5de:	b920      	cbnz	r0, 800f5ea <_dtoa_r+0x3a>
 800f5e0:	4ba7      	ldr	r3, [pc, #668]	; (800f880 <_dtoa_r+0x2d0>)
 800f5e2:	21ea      	movs	r1, #234	; 0xea
 800f5e4:	48a7      	ldr	r0, [pc, #668]	; (800f884 <_dtoa_r+0x2d4>)
 800f5e6:	f002 f8f1 	bl	80117cc <__assert_func>
 800f5ea:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f5ee:	6005      	str	r5, [r0, #0]
 800f5f0:	60c5      	str	r5, [r0, #12]
 800f5f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f5f4:	6819      	ldr	r1, [r3, #0]
 800f5f6:	b151      	cbz	r1, 800f60e <_dtoa_r+0x5e>
 800f5f8:	685a      	ldr	r2, [r3, #4]
 800f5fa:	604a      	str	r2, [r1, #4]
 800f5fc:	2301      	movs	r3, #1
 800f5fe:	4093      	lsls	r3, r2
 800f600:	608b      	str	r3, [r1, #8]
 800f602:	4620      	mov	r0, r4
 800f604:	f001 f994 	bl	8010930 <_Bfree>
 800f608:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f60a:	2200      	movs	r2, #0
 800f60c:	601a      	str	r2, [r3, #0]
 800f60e:	1e3b      	subs	r3, r7, #0
 800f610:	bfaa      	itet	ge
 800f612:	2300      	movge	r3, #0
 800f614:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800f618:	f8c8 3000 	strge.w	r3, [r8]
 800f61c:	4b9a      	ldr	r3, [pc, #616]	; (800f888 <_dtoa_r+0x2d8>)
 800f61e:	bfbc      	itt	lt
 800f620:	2201      	movlt	r2, #1
 800f622:	f8c8 2000 	strlt.w	r2, [r8]
 800f626:	ea33 030b 	bics.w	r3, r3, fp
 800f62a:	d11b      	bne.n	800f664 <_dtoa_r+0xb4>
 800f62c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f62e:	f242 730f 	movw	r3, #9999	; 0x270f
 800f632:	6013      	str	r3, [r2, #0]
 800f634:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f638:	4333      	orrs	r3, r6
 800f63a:	f000 8592 	beq.w	8010162 <_dtoa_r+0xbb2>
 800f63e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f640:	b963      	cbnz	r3, 800f65c <_dtoa_r+0xac>
 800f642:	4b92      	ldr	r3, [pc, #584]	; (800f88c <_dtoa_r+0x2dc>)
 800f644:	e022      	b.n	800f68c <_dtoa_r+0xdc>
 800f646:	4b92      	ldr	r3, [pc, #584]	; (800f890 <_dtoa_r+0x2e0>)
 800f648:	9301      	str	r3, [sp, #4]
 800f64a:	3308      	adds	r3, #8
 800f64c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f64e:	6013      	str	r3, [r2, #0]
 800f650:	9801      	ldr	r0, [sp, #4]
 800f652:	b013      	add	sp, #76	; 0x4c
 800f654:	ecbd 8b04 	vpop	{d8-d9}
 800f658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f65c:	4b8b      	ldr	r3, [pc, #556]	; (800f88c <_dtoa_r+0x2dc>)
 800f65e:	9301      	str	r3, [sp, #4]
 800f660:	3303      	adds	r3, #3
 800f662:	e7f3      	b.n	800f64c <_dtoa_r+0x9c>
 800f664:	2200      	movs	r2, #0
 800f666:	2300      	movs	r3, #0
 800f668:	4650      	mov	r0, sl
 800f66a:	4659      	mov	r1, fp
 800f66c:	f7f1 fa2c 	bl	8000ac8 <__aeabi_dcmpeq>
 800f670:	ec4b ab19 	vmov	d9, sl, fp
 800f674:	4680      	mov	r8, r0
 800f676:	b158      	cbz	r0, 800f690 <_dtoa_r+0xe0>
 800f678:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f67a:	2301      	movs	r3, #1
 800f67c:	6013      	str	r3, [r2, #0]
 800f67e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f680:	2b00      	cmp	r3, #0
 800f682:	f000 856b 	beq.w	801015c <_dtoa_r+0xbac>
 800f686:	4883      	ldr	r0, [pc, #524]	; (800f894 <_dtoa_r+0x2e4>)
 800f688:	6018      	str	r0, [r3, #0]
 800f68a:	1e43      	subs	r3, r0, #1
 800f68c:	9301      	str	r3, [sp, #4]
 800f68e:	e7df      	b.n	800f650 <_dtoa_r+0xa0>
 800f690:	ec4b ab10 	vmov	d0, sl, fp
 800f694:	aa10      	add	r2, sp, #64	; 0x40
 800f696:	a911      	add	r1, sp, #68	; 0x44
 800f698:	4620      	mov	r0, r4
 800f69a:	f001 fcf7 	bl	801108c <__d2b>
 800f69e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800f6a2:	ee08 0a10 	vmov	s16, r0
 800f6a6:	2d00      	cmp	r5, #0
 800f6a8:	f000 8084 	beq.w	800f7b4 <_dtoa_r+0x204>
 800f6ac:	ee19 3a90 	vmov	r3, s19
 800f6b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f6b4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800f6b8:	4656      	mov	r6, sl
 800f6ba:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800f6be:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f6c2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800f6c6:	4b74      	ldr	r3, [pc, #464]	; (800f898 <_dtoa_r+0x2e8>)
 800f6c8:	2200      	movs	r2, #0
 800f6ca:	4630      	mov	r0, r6
 800f6cc:	4639      	mov	r1, r7
 800f6ce:	f7f0 fddb 	bl	8000288 <__aeabi_dsub>
 800f6d2:	a365      	add	r3, pc, #404	; (adr r3, 800f868 <_dtoa_r+0x2b8>)
 800f6d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6d8:	f7f0 ff8e 	bl	80005f8 <__aeabi_dmul>
 800f6dc:	a364      	add	r3, pc, #400	; (adr r3, 800f870 <_dtoa_r+0x2c0>)
 800f6de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6e2:	f7f0 fdd3 	bl	800028c <__adddf3>
 800f6e6:	4606      	mov	r6, r0
 800f6e8:	4628      	mov	r0, r5
 800f6ea:	460f      	mov	r7, r1
 800f6ec:	f7f0 ff1a 	bl	8000524 <__aeabi_i2d>
 800f6f0:	a361      	add	r3, pc, #388	; (adr r3, 800f878 <_dtoa_r+0x2c8>)
 800f6f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6f6:	f7f0 ff7f 	bl	80005f8 <__aeabi_dmul>
 800f6fa:	4602      	mov	r2, r0
 800f6fc:	460b      	mov	r3, r1
 800f6fe:	4630      	mov	r0, r6
 800f700:	4639      	mov	r1, r7
 800f702:	f7f0 fdc3 	bl	800028c <__adddf3>
 800f706:	4606      	mov	r6, r0
 800f708:	460f      	mov	r7, r1
 800f70a:	f7f1 fa25 	bl	8000b58 <__aeabi_d2iz>
 800f70e:	2200      	movs	r2, #0
 800f710:	9000      	str	r0, [sp, #0]
 800f712:	2300      	movs	r3, #0
 800f714:	4630      	mov	r0, r6
 800f716:	4639      	mov	r1, r7
 800f718:	f7f1 f9e0 	bl	8000adc <__aeabi_dcmplt>
 800f71c:	b150      	cbz	r0, 800f734 <_dtoa_r+0x184>
 800f71e:	9800      	ldr	r0, [sp, #0]
 800f720:	f7f0 ff00 	bl	8000524 <__aeabi_i2d>
 800f724:	4632      	mov	r2, r6
 800f726:	463b      	mov	r3, r7
 800f728:	f7f1 f9ce 	bl	8000ac8 <__aeabi_dcmpeq>
 800f72c:	b910      	cbnz	r0, 800f734 <_dtoa_r+0x184>
 800f72e:	9b00      	ldr	r3, [sp, #0]
 800f730:	3b01      	subs	r3, #1
 800f732:	9300      	str	r3, [sp, #0]
 800f734:	9b00      	ldr	r3, [sp, #0]
 800f736:	2b16      	cmp	r3, #22
 800f738:	d85a      	bhi.n	800f7f0 <_dtoa_r+0x240>
 800f73a:	9a00      	ldr	r2, [sp, #0]
 800f73c:	4b57      	ldr	r3, [pc, #348]	; (800f89c <_dtoa_r+0x2ec>)
 800f73e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f742:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f746:	ec51 0b19 	vmov	r0, r1, d9
 800f74a:	f7f1 f9c7 	bl	8000adc <__aeabi_dcmplt>
 800f74e:	2800      	cmp	r0, #0
 800f750:	d050      	beq.n	800f7f4 <_dtoa_r+0x244>
 800f752:	9b00      	ldr	r3, [sp, #0]
 800f754:	3b01      	subs	r3, #1
 800f756:	9300      	str	r3, [sp, #0]
 800f758:	2300      	movs	r3, #0
 800f75a:	930b      	str	r3, [sp, #44]	; 0x2c
 800f75c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f75e:	1b5d      	subs	r5, r3, r5
 800f760:	1e6b      	subs	r3, r5, #1
 800f762:	9305      	str	r3, [sp, #20]
 800f764:	bf45      	ittet	mi
 800f766:	f1c5 0301 	rsbmi	r3, r5, #1
 800f76a:	9304      	strmi	r3, [sp, #16]
 800f76c:	2300      	movpl	r3, #0
 800f76e:	2300      	movmi	r3, #0
 800f770:	bf4c      	ite	mi
 800f772:	9305      	strmi	r3, [sp, #20]
 800f774:	9304      	strpl	r3, [sp, #16]
 800f776:	9b00      	ldr	r3, [sp, #0]
 800f778:	2b00      	cmp	r3, #0
 800f77a:	db3d      	blt.n	800f7f8 <_dtoa_r+0x248>
 800f77c:	9b05      	ldr	r3, [sp, #20]
 800f77e:	9a00      	ldr	r2, [sp, #0]
 800f780:	920a      	str	r2, [sp, #40]	; 0x28
 800f782:	4413      	add	r3, r2
 800f784:	9305      	str	r3, [sp, #20]
 800f786:	2300      	movs	r3, #0
 800f788:	9307      	str	r3, [sp, #28]
 800f78a:	9b06      	ldr	r3, [sp, #24]
 800f78c:	2b09      	cmp	r3, #9
 800f78e:	f200 8089 	bhi.w	800f8a4 <_dtoa_r+0x2f4>
 800f792:	2b05      	cmp	r3, #5
 800f794:	bfc4      	itt	gt
 800f796:	3b04      	subgt	r3, #4
 800f798:	9306      	strgt	r3, [sp, #24]
 800f79a:	9b06      	ldr	r3, [sp, #24]
 800f79c:	f1a3 0302 	sub.w	r3, r3, #2
 800f7a0:	bfcc      	ite	gt
 800f7a2:	2500      	movgt	r5, #0
 800f7a4:	2501      	movle	r5, #1
 800f7a6:	2b03      	cmp	r3, #3
 800f7a8:	f200 8087 	bhi.w	800f8ba <_dtoa_r+0x30a>
 800f7ac:	e8df f003 	tbb	[pc, r3]
 800f7b0:	59383a2d 	.word	0x59383a2d
 800f7b4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800f7b8:	441d      	add	r5, r3
 800f7ba:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800f7be:	2b20      	cmp	r3, #32
 800f7c0:	bfc1      	itttt	gt
 800f7c2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f7c6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800f7ca:	fa0b f303 	lslgt.w	r3, fp, r3
 800f7ce:	fa26 f000 	lsrgt.w	r0, r6, r0
 800f7d2:	bfda      	itte	le
 800f7d4:	f1c3 0320 	rsble	r3, r3, #32
 800f7d8:	fa06 f003 	lslle.w	r0, r6, r3
 800f7dc:	4318      	orrgt	r0, r3
 800f7de:	f7f0 fe91 	bl	8000504 <__aeabi_ui2d>
 800f7e2:	2301      	movs	r3, #1
 800f7e4:	4606      	mov	r6, r0
 800f7e6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800f7ea:	3d01      	subs	r5, #1
 800f7ec:	930e      	str	r3, [sp, #56]	; 0x38
 800f7ee:	e76a      	b.n	800f6c6 <_dtoa_r+0x116>
 800f7f0:	2301      	movs	r3, #1
 800f7f2:	e7b2      	b.n	800f75a <_dtoa_r+0x1aa>
 800f7f4:	900b      	str	r0, [sp, #44]	; 0x2c
 800f7f6:	e7b1      	b.n	800f75c <_dtoa_r+0x1ac>
 800f7f8:	9b04      	ldr	r3, [sp, #16]
 800f7fa:	9a00      	ldr	r2, [sp, #0]
 800f7fc:	1a9b      	subs	r3, r3, r2
 800f7fe:	9304      	str	r3, [sp, #16]
 800f800:	4253      	negs	r3, r2
 800f802:	9307      	str	r3, [sp, #28]
 800f804:	2300      	movs	r3, #0
 800f806:	930a      	str	r3, [sp, #40]	; 0x28
 800f808:	e7bf      	b.n	800f78a <_dtoa_r+0x1da>
 800f80a:	2300      	movs	r3, #0
 800f80c:	9308      	str	r3, [sp, #32]
 800f80e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f810:	2b00      	cmp	r3, #0
 800f812:	dc55      	bgt.n	800f8c0 <_dtoa_r+0x310>
 800f814:	2301      	movs	r3, #1
 800f816:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800f81a:	461a      	mov	r2, r3
 800f81c:	9209      	str	r2, [sp, #36]	; 0x24
 800f81e:	e00c      	b.n	800f83a <_dtoa_r+0x28a>
 800f820:	2301      	movs	r3, #1
 800f822:	e7f3      	b.n	800f80c <_dtoa_r+0x25c>
 800f824:	2300      	movs	r3, #0
 800f826:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f828:	9308      	str	r3, [sp, #32]
 800f82a:	9b00      	ldr	r3, [sp, #0]
 800f82c:	4413      	add	r3, r2
 800f82e:	9302      	str	r3, [sp, #8]
 800f830:	3301      	adds	r3, #1
 800f832:	2b01      	cmp	r3, #1
 800f834:	9303      	str	r3, [sp, #12]
 800f836:	bfb8      	it	lt
 800f838:	2301      	movlt	r3, #1
 800f83a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f83c:	2200      	movs	r2, #0
 800f83e:	6042      	str	r2, [r0, #4]
 800f840:	2204      	movs	r2, #4
 800f842:	f102 0614 	add.w	r6, r2, #20
 800f846:	429e      	cmp	r6, r3
 800f848:	6841      	ldr	r1, [r0, #4]
 800f84a:	d93d      	bls.n	800f8c8 <_dtoa_r+0x318>
 800f84c:	4620      	mov	r0, r4
 800f84e:	f001 f82f 	bl	80108b0 <_Balloc>
 800f852:	9001      	str	r0, [sp, #4]
 800f854:	2800      	cmp	r0, #0
 800f856:	d13b      	bne.n	800f8d0 <_dtoa_r+0x320>
 800f858:	4b11      	ldr	r3, [pc, #68]	; (800f8a0 <_dtoa_r+0x2f0>)
 800f85a:	4602      	mov	r2, r0
 800f85c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f860:	e6c0      	b.n	800f5e4 <_dtoa_r+0x34>
 800f862:	2301      	movs	r3, #1
 800f864:	e7df      	b.n	800f826 <_dtoa_r+0x276>
 800f866:	bf00      	nop
 800f868:	636f4361 	.word	0x636f4361
 800f86c:	3fd287a7 	.word	0x3fd287a7
 800f870:	8b60c8b3 	.word	0x8b60c8b3
 800f874:	3fc68a28 	.word	0x3fc68a28
 800f878:	509f79fb 	.word	0x509f79fb
 800f87c:	3fd34413 	.word	0x3fd34413
 800f880:	0801383d 	.word	0x0801383d
 800f884:	08013854 	.word	0x08013854
 800f888:	7ff00000 	.word	0x7ff00000
 800f88c:	08013839 	.word	0x08013839
 800f890:	08013830 	.word	0x08013830
 800f894:	080137b9 	.word	0x080137b9
 800f898:	3ff80000 	.word	0x3ff80000
 800f89c:	080139c0 	.word	0x080139c0
 800f8a0:	080138af 	.word	0x080138af
 800f8a4:	2501      	movs	r5, #1
 800f8a6:	2300      	movs	r3, #0
 800f8a8:	9306      	str	r3, [sp, #24]
 800f8aa:	9508      	str	r5, [sp, #32]
 800f8ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f8b0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800f8b4:	2200      	movs	r2, #0
 800f8b6:	2312      	movs	r3, #18
 800f8b8:	e7b0      	b.n	800f81c <_dtoa_r+0x26c>
 800f8ba:	2301      	movs	r3, #1
 800f8bc:	9308      	str	r3, [sp, #32]
 800f8be:	e7f5      	b.n	800f8ac <_dtoa_r+0x2fc>
 800f8c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f8c2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800f8c6:	e7b8      	b.n	800f83a <_dtoa_r+0x28a>
 800f8c8:	3101      	adds	r1, #1
 800f8ca:	6041      	str	r1, [r0, #4]
 800f8cc:	0052      	lsls	r2, r2, #1
 800f8ce:	e7b8      	b.n	800f842 <_dtoa_r+0x292>
 800f8d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f8d2:	9a01      	ldr	r2, [sp, #4]
 800f8d4:	601a      	str	r2, [r3, #0]
 800f8d6:	9b03      	ldr	r3, [sp, #12]
 800f8d8:	2b0e      	cmp	r3, #14
 800f8da:	f200 809d 	bhi.w	800fa18 <_dtoa_r+0x468>
 800f8de:	2d00      	cmp	r5, #0
 800f8e0:	f000 809a 	beq.w	800fa18 <_dtoa_r+0x468>
 800f8e4:	9b00      	ldr	r3, [sp, #0]
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	dd32      	ble.n	800f950 <_dtoa_r+0x3a0>
 800f8ea:	4ab7      	ldr	r2, [pc, #732]	; (800fbc8 <_dtoa_r+0x618>)
 800f8ec:	f003 030f 	and.w	r3, r3, #15
 800f8f0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f8f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f8f8:	9b00      	ldr	r3, [sp, #0]
 800f8fa:	05d8      	lsls	r0, r3, #23
 800f8fc:	ea4f 1723 	mov.w	r7, r3, asr #4
 800f900:	d516      	bpl.n	800f930 <_dtoa_r+0x380>
 800f902:	4bb2      	ldr	r3, [pc, #712]	; (800fbcc <_dtoa_r+0x61c>)
 800f904:	ec51 0b19 	vmov	r0, r1, d9
 800f908:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f90c:	f7f0 ff9e 	bl	800084c <__aeabi_ddiv>
 800f910:	f007 070f 	and.w	r7, r7, #15
 800f914:	4682      	mov	sl, r0
 800f916:	468b      	mov	fp, r1
 800f918:	2503      	movs	r5, #3
 800f91a:	4eac      	ldr	r6, [pc, #688]	; (800fbcc <_dtoa_r+0x61c>)
 800f91c:	b957      	cbnz	r7, 800f934 <_dtoa_r+0x384>
 800f91e:	4642      	mov	r2, r8
 800f920:	464b      	mov	r3, r9
 800f922:	4650      	mov	r0, sl
 800f924:	4659      	mov	r1, fp
 800f926:	f7f0 ff91 	bl	800084c <__aeabi_ddiv>
 800f92a:	4682      	mov	sl, r0
 800f92c:	468b      	mov	fp, r1
 800f92e:	e028      	b.n	800f982 <_dtoa_r+0x3d2>
 800f930:	2502      	movs	r5, #2
 800f932:	e7f2      	b.n	800f91a <_dtoa_r+0x36a>
 800f934:	07f9      	lsls	r1, r7, #31
 800f936:	d508      	bpl.n	800f94a <_dtoa_r+0x39a>
 800f938:	4640      	mov	r0, r8
 800f93a:	4649      	mov	r1, r9
 800f93c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f940:	f7f0 fe5a 	bl	80005f8 <__aeabi_dmul>
 800f944:	3501      	adds	r5, #1
 800f946:	4680      	mov	r8, r0
 800f948:	4689      	mov	r9, r1
 800f94a:	107f      	asrs	r7, r7, #1
 800f94c:	3608      	adds	r6, #8
 800f94e:	e7e5      	b.n	800f91c <_dtoa_r+0x36c>
 800f950:	f000 809b 	beq.w	800fa8a <_dtoa_r+0x4da>
 800f954:	9b00      	ldr	r3, [sp, #0]
 800f956:	4f9d      	ldr	r7, [pc, #628]	; (800fbcc <_dtoa_r+0x61c>)
 800f958:	425e      	negs	r6, r3
 800f95a:	4b9b      	ldr	r3, [pc, #620]	; (800fbc8 <_dtoa_r+0x618>)
 800f95c:	f006 020f 	and.w	r2, r6, #15
 800f960:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f964:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f968:	ec51 0b19 	vmov	r0, r1, d9
 800f96c:	f7f0 fe44 	bl	80005f8 <__aeabi_dmul>
 800f970:	1136      	asrs	r6, r6, #4
 800f972:	4682      	mov	sl, r0
 800f974:	468b      	mov	fp, r1
 800f976:	2300      	movs	r3, #0
 800f978:	2502      	movs	r5, #2
 800f97a:	2e00      	cmp	r6, #0
 800f97c:	d17a      	bne.n	800fa74 <_dtoa_r+0x4c4>
 800f97e:	2b00      	cmp	r3, #0
 800f980:	d1d3      	bne.n	800f92a <_dtoa_r+0x37a>
 800f982:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f984:	2b00      	cmp	r3, #0
 800f986:	f000 8082 	beq.w	800fa8e <_dtoa_r+0x4de>
 800f98a:	4b91      	ldr	r3, [pc, #580]	; (800fbd0 <_dtoa_r+0x620>)
 800f98c:	2200      	movs	r2, #0
 800f98e:	4650      	mov	r0, sl
 800f990:	4659      	mov	r1, fp
 800f992:	f7f1 f8a3 	bl	8000adc <__aeabi_dcmplt>
 800f996:	2800      	cmp	r0, #0
 800f998:	d079      	beq.n	800fa8e <_dtoa_r+0x4de>
 800f99a:	9b03      	ldr	r3, [sp, #12]
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	d076      	beq.n	800fa8e <_dtoa_r+0x4de>
 800f9a0:	9b02      	ldr	r3, [sp, #8]
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	dd36      	ble.n	800fa14 <_dtoa_r+0x464>
 800f9a6:	9b00      	ldr	r3, [sp, #0]
 800f9a8:	4650      	mov	r0, sl
 800f9aa:	4659      	mov	r1, fp
 800f9ac:	1e5f      	subs	r7, r3, #1
 800f9ae:	2200      	movs	r2, #0
 800f9b0:	4b88      	ldr	r3, [pc, #544]	; (800fbd4 <_dtoa_r+0x624>)
 800f9b2:	f7f0 fe21 	bl	80005f8 <__aeabi_dmul>
 800f9b6:	9e02      	ldr	r6, [sp, #8]
 800f9b8:	4682      	mov	sl, r0
 800f9ba:	468b      	mov	fp, r1
 800f9bc:	3501      	adds	r5, #1
 800f9be:	4628      	mov	r0, r5
 800f9c0:	f7f0 fdb0 	bl	8000524 <__aeabi_i2d>
 800f9c4:	4652      	mov	r2, sl
 800f9c6:	465b      	mov	r3, fp
 800f9c8:	f7f0 fe16 	bl	80005f8 <__aeabi_dmul>
 800f9cc:	4b82      	ldr	r3, [pc, #520]	; (800fbd8 <_dtoa_r+0x628>)
 800f9ce:	2200      	movs	r2, #0
 800f9d0:	f7f0 fc5c 	bl	800028c <__adddf3>
 800f9d4:	46d0      	mov	r8, sl
 800f9d6:	46d9      	mov	r9, fp
 800f9d8:	4682      	mov	sl, r0
 800f9da:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800f9de:	2e00      	cmp	r6, #0
 800f9e0:	d158      	bne.n	800fa94 <_dtoa_r+0x4e4>
 800f9e2:	4b7e      	ldr	r3, [pc, #504]	; (800fbdc <_dtoa_r+0x62c>)
 800f9e4:	2200      	movs	r2, #0
 800f9e6:	4640      	mov	r0, r8
 800f9e8:	4649      	mov	r1, r9
 800f9ea:	f7f0 fc4d 	bl	8000288 <__aeabi_dsub>
 800f9ee:	4652      	mov	r2, sl
 800f9f0:	465b      	mov	r3, fp
 800f9f2:	4680      	mov	r8, r0
 800f9f4:	4689      	mov	r9, r1
 800f9f6:	f7f1 f88f 	bl	8000b18 <__aeabi_dcmpgt>
 800f9fa:	2800      	cmp	r0, #0
 800f9fc:	f040 8295 	bne.w	800ff2a <_dtoa_r+0x97a>
 800fa00:	4652      	mov	r2, sl
 800fa02:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800fa06:	4640      	mov	r0, r8
 800fa08:	4649      	mov	r1, r9
 800fa0a:	f7f1 f867 	bl	8000adc <__aeabi_dcmplt>
 800fa0e:	2800      	cmp	r0, #0
 800fa10:	f040 8289 	bne.w	800ff26 <_dtoa_r+0x976>
 800fa14:	ec5b ab19 	vmov	sl, fp, d9
 800fa18:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	f2c0 8148 	blt.w	800fcb0 <_dtoa_r+0x700>
 800fa20:	9a00      	ldr	r2, [sp, #0]
 800fa22:	2a0e      	cmp	r2, #14
 800fa24:	f300 8144 	bgt.w	800fcb0 <_dtoa_r+0x700>
 800fa28:	4b67      	ldr	r3, [pc, #412]	; (800fbc8 <_dtoa_r+0x618>)
 800fa2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fa2e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800fa32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	f280 80d5 	bge.w	800fbe4 <_dtoa_r+0x634>
 800fa3a:	9b03      	ldr	r3, [sp, #12]
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	f300 80d1 	bgt.w	800fbe4 <_dtoa_r+0x634>
 800fa42:	f040 826f 	bne.w	800ff24 <_dtoa_r+0x974>
 800fa46:	4b65      	ldr	r3, [pc, #404]	; (800fbdc <_dtoa_r+0x62c>)
 800fa48:	2200      	movs	r2, #0
 800fa4a:	4640      	mov	r0, r8
 800fa4c:	4649      	mov	r1, r9
 800fa4e:	f7f0 fdd3 	bl	80005f8 <__aeabi_dmul>
 800fa52:	4652      	mov	r2, sl
 800fa54:	465b      	mov	r3, fp
 800fa56:	f7f1 f855 	bl	8000b04 <__aeabi_dcmpge>
 800fa5a:	9e03      	ldr	r6, [sp, #12]
 800fa5c:	4637      	mov	r7, r6
 800fa5e:	2800      	cmp	r0, #0
 800fa60:	f040 8245 	bne.w	800feee <_dtoa_r+0x93e>
 800fa64:	9d01      	ldr	r5, [sp, #4]
 800fa66:	2331      	movs	r3, #49	; 0x31
 800fa68:	f805 3b01 	strb.w	r3, [r5], #1
 800fa6c:	9b00      	ldr	r3, [sp, #0]
 800fa6e:	3301      	adds	r3, #1
 800fa70:	9300      	str	r3, [sp, #0]
 800fa72:	e240      	b.n	800fef6 <_dtoa_r+0x946>
 800fa74:	07f2      	lsls	r2, r6, #31
 800fa76:	d505      	bpl.n	800fa84 <_dtoa_r+0x4d4>
 800fa78:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fa7c:	f7f0 fdbc 	bl	80005f8 <__aeabi_dmul>
 800fa80:	3501      	adds	r5, #1
 800fa82:	2301      	movs	r3, #1
 800fa84:	1076      	asrs	r6, r6, #1
 800fa86:	3708      	adds	r7, #8
 800fa88:	e777      	b.n	800f97a <_dtoa_r+0x3ca>
 800fa8a:	2502      	movs	r5, #2
 800fa8c:	e779      	b.n	800f982 <_dtoa_r+0x3d2>
 800fa8e:	9f00      	ldr	r7, [sp, #0]
 800fa90:	9e03      	ldr	r6, [sp, #12]
 800fa92:	e794      	b.n	800f9be <_dtoa_r+0x40e>
 800fa94:	9901      	ldr	r1, [sp, #4]
 800fa96:	4b4c      	ldr	r3, [pc, #304]	; (800fbc8 <_dtoa_r+0x618>)
 800fa98:	4431      	add	r1, r6
 800fa9a:	910d      	str	r1, [sp, #52]	; 0x34
 800fa9c:	9908      	ldr	r1, [sp, #32]
 800fa9e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800faa2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800faa6:	2900      	cmp	r1, #0
 800faa8:	d043      	beq.n	800fb32 <_dtoa_r+0x582>
 800faaa:	494d      	ldr	r1, [pc, #308]	; (800fbe0 <_dtoa_r+0x630>)
 800faac:	2000      	movs	r0, #0
 800faae:	f7f0 fecd 	bl	800084c <__aeabi_ddiv>
 800fab2:	4652      	mov	r2, sl
 800fab4:	465b      	mov	r3, fp
 800fab6:	f7f0 fbe7 	bl	8000288 <__aeabi_dsub>
 800faba:	9d01      	ldr	r5, [sp, #4]
 800fabc:	4682      	mov	sl, r0
 800fabe:	468b      	mov	fp, r1
 800fac0:	4649      	mov	r1, r9
 800fac2:	4640      	mov	r0, r8
 800fac4:	f7f1 f848 	bl	8000b58 <__aeabi_d2iz>
 800fac8:	4606      	mov	r6, r0
 800faca:	f7f0 fd2b 	bl	8000524 <__aeabi_i2d>
 800face:	4602      	mov	r2, r0
 800fad0:	460b      	mov	r3, r1
 800fad2:	4640      	mov	r0, r8
 800fad4:	4649      	mov	r1, r9
 800fad6:	f7f0 fbd7 	bl	8000288 <__aeabi_dsub>
 800fada:	3630      	adds	r6, #48	; 0x30
 800fadc:	f805 6b01 	strb.w	r6, [r5], #1
 800fae0:	4652      	mov	r2, sl
 800fae2:	465b      	mov	r3, fp
 800fae4:	4680      	mov	r8, r0
 800fae6:	4689      	mov	r9, r1
 800fae8:	f7f0 fff8 	bl	8000adc <__aeabi_dcmplt>
 800faec:	2800      	cmp	r0, #0
 800faee:	d163      	bne.n	800fbb8 <_dtoa_r+0x608>
 800faf0:	4642      	mov	r2, r8
 800faf2:	464b      	mov	r3, r9
 800faf4:	4936      	ldr	r1, [pc, #216]	; (800fbd0 <_dtoa_r+0x620>)
 800faf6:	2000      	movs	r0, #0
 800faf8:	f7f0 fbc6 	bl	8000288 <__aeabi_dsub>
 800fafc:	4652      	mov	r2, sl
 800fafe:	465b      	mov	r3, fp
 800fb00:	f7f0 ffec 	bl	8000adc <__aeabi_dcmplt>
 800fb04:	2800      	cmp	r0, #0
 800fb06:	f040 80b5 	bne.w	800fc74 <_dtoa_r+0x6c4>
 800fb0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fb0c:	429d      	cmp	r5, r3
 800fb0e:	d081      	beq.n	800fa14 <_dtoa_r+0x464>
 800fb10:	4b30      	ldr	r3, [pc, #192]	; (800fbd4 <_dtoa_r+0x624>)
 800fb12:	2200      	movs	r2, #0
 800fb14:	4650      	mov	r0, sl
 800fb16:	4659      	mov	r1, fp
 800fb18:	f7f0 fd6e 	bl	80005f8 <__aeabi_dmul>
 800fb1c:	4b2d      	ldr	r3, [pc, #180]	; (800fbd4 <_dtoa_r+0x624>)
 800fb1e:	4682      	mov	sl, r0
 800fb20:	468b      	mov	fp, r1
 800fb22:	4640      	mov	r0, r8
 800fb24:	4649      	mov	r1, r9
 800fb26:	2200      	movs	r2, #0
 800fb28:	f7f0 fd66 	bl	80005f8 <__aeabi_dmul>
 800fb2c:	4680      	mov	r8, r0
 800fb2e:	4689      	mov	r9, r1
 800fb30:	e7c6      	b.n	800fac0 <_dtoa_r+0x510>
 800fb32:	4650      	mov	r0, sl
 800fb34:	4659      	mov	r1, fp
 800fb36:	f7f0 fd5f 	bl	80005f8 <__aeabi_dmul>
 800fb3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fb3c:	9d01      	ldr	r5, [sp, #4]
 800fb3e:	930f      	str	r3, [sp, #60]	; 0x3c
 800fb40:	4682      	mov	sl, r0
 800fb42:	468b      	mov	fp, r1
 800fb44:	4649      	mov	r1, r9
 800fb46:	4640      	mov	r0, r8
 800fb48:	f7f1 f806 	bl	8000b58 <__aeabi_d2iz>
 800fb4c:	4606      	mov	r6, r0
 800fb4e:	f7f0 fce9 	bl	8000524 <__aeabi_i2d>
 800fb52:	3630      	adds	r6, #48	; 0x30
 800fb54:	4602      	mov	r2, r0
 800fb56:	460b      	mov	r3, r1
 800fb58:	4640      	mov	r0, r8
 800fb5a:	4649      	mov	r1, r9
 800fb5c:	f7f0 fb94 	bl	8000288 <__aeabi_dsub>
 800fb60:	f805 6b01 	strb.w	r6, [r5], #1
 800fb64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fb66:	429d      	cmp	r5, r3
 800fb68:	4680      	mov	r8, r0
 800fb6a:	4689      	mov	r9, r1
 800fb6c:	f04f 0200 	mov.w	r2, #0
 800fb70:	d124      	bne.n	800fbbc <_dtoa_r+0x60c>
 800fb72:	4b1b      	ldr	r3, [pc, #108]	; (800fbe0 <_dtoa_r+0x630>)
 800fb74:	4650      	mov	r0, sl
 800fb76:	4659      	mov	r1, fp
 800fb78:	f7f0 fb88 	bl	800028c <__adddf3>
 800fb7c:	4602      	mov	r2, r0
 800fb7e:	460b      	mov	r3, r1
 800fb80:	4640      	mov	r0, r8
 800fb82:	4649      	mov	r1, r9
 800fb84:	f7f0 ffc8 	bl	8000b18 <__aeabi_dcmpgt>
 800fb88:	2800      	cmp	r0, #0
 800fb8a:	d173      	bne.n	800fc74 <_dtoa_r+0x6c4>
 800fb8c:	4652      	mov	r2, sl
 800fb8e:	465b      	mov	r3, fp
 800fb90:	4913      	ldr	r1, [pc, #76]	; (800fbe0 <_dtoa_r+0x630>)
 800fb92:	2000      	movs	r0, #0
 800fb94:	f7f0 fb78 	bl	8000288 <__aeabi_dsub>
 800fb98:	4602      	mov	r2, r0
 800fb9a:	460b      	mov	r3, r1
 800fb9c:	4640      	mov	r0, r8
 800fb9e:	4649      	mov	r1, r9
 800fba0:	f7f0 ff9c 	bl	8000adc <__aeabi_dcmplt>
 800fba4:	2800      	cmp	r0, #0
 800fba6:	f43f af35 	beq.w	800fa14 <_dtoa_r+0x464>
 800fbaa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800fbac:	1e6b      	subs	r3, r5, #1
 800fbae:	930f      	str	r3, [sp, #60]	; 0x3c
 800fbb0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800fbb4:	2b30      	cmp	r3, #48	; 0x30
 800fbb6:	d0f8      	beq.n	800fbaa <_dtoa_r+0x5fa>
 800fbb8:	9700      	str	r7, [sp, #0]
 800fbba:	e049      	b.n	800fc50 <_dtoa_r+0x6a0>
 800fbbc:	4b05      	ldr	r3, [pc, #20]	; (800fbd4 <_dtoa_r+0x624>)
 800fbbe:	f7f0 fd1b 	bl	80005f8 <__aeabi_dmul>
 800fbc2:	4680      	mov	r8, r0
 800fbc4:	4689      	mov	r9, r1
 800fbc6:	e7bd      	b.n	800fb44 <_dtoa_r+0x594>
 800fbc8:	080139c0 	.word	0x080139c0
 800fbcc:	08013998 	.word	0x08013998
 800fbd0:	3ff00000 	.word	0x3ff00000
 800fbd4:	40240000 	.word	0x40240000
 800fbd8:	401c0000 	.word	0x401c0000
 800fbdc:	40140000 	.word	0x40140000
 800fbe0:	3fe00000 	.word	0x3fe00000
 800fbe4:	9d01      	ldr	r5, [sp, #4]
 800fbe6:	4656      	mov	r6, sl
 800fbe8:	465f      	mov	r7, fp
 800fbea:	4642      	mov	r2, r8
 800fbec:	464b      	mov	r3, r9
 800fbee:	4630      	mov	r0, r6
 800fbf0:	4639      	mov	r1, r7
 800fbf2:	f7f0 fe2b 	bl	800084c <__aeabi_ddiv>
 800fbf6:	f7f0 ffaf 	bl	8000b58 <__aeabi_d2iz>
 800fbfa:	4682      	mov	sl, r0
 800fbfc:	f7f0 fc92 	bl	8000524 <__aeabi_i2d>
 800fc00:	4642      	mov	r2, r8
 800fc02:	464b      	mov	r3, r9
 800fc04:	f7f0 fcf8 	bl	80005f8 <__aeabi_dmul>
 800fc08:	4602      	mov	r2, r0
 800fc0a:	460b      	mov	r3, r1
 800fc0c:	4630      	mov	r0, r6
 800fc0e:	4639      	mov	r1, r7
 800fc10:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800fc14:	f7f0 fb38 	bl	8000288 <__aeabi_dsub>
 800fc18:	f805 6b01 	strb.w	r6, [r5], #1
 800fc1c:	9e01      	ldr	r6, [sp, #4]
 800fc1e:	9f03      	ldr	r7, [sp, #12]
 800fc20:	1bae      	subs	r6, r5, r6
 800fc22:	42b7      	cmp	r7, r6
 800fc24:	4602      	mov	r2, r0
 800fc26:	460b      	mov	r3, r1
 800fc28:	d135      	bne.n	800fc96 <_dtoa_r+0x6e6>
 800fc2a:	f7f0 fb2f 	bl	800028c <__adddf3>
 800fc2e:	4642      	mov	r2, r8
 800fc30:	464b      	mov	r3, r9
 800fc32:	4606      	mov	r6, r0
 800fc34:	460f      	mov	r7, r1
 800fc36:	f7f0 ff6f 	bl	8000b18 <__aeabi_dcmpgt>
 800fc3a:	b9d0      	cbnz	r0, 800fc72 <_dtoa_r+0x6c2>
 800fc3c:	4642      	mov	r2, r8
 800fc3e:	464b      	mov	r3, r9
 800fc40:	4630      	mov	r0, r6
 800fc42:	4639      	mov	r1, r7
 800fc44:	f7f0 ff40 	bl	8000ac8 <__aeabi_dcmpeq>
 800fc48:	b110      	cbz	r0, 800fc50 <_dtoa_r+0x6a0>
 800fc4a:	f01a 0f01 	tst.w	sl, #1
 800fc4e:	d110      	bne.n	800fc72 <_dtoa_r+0x6c2>
 800fc50:	4620      	mov	r0, r4
 800fc52:	ee18 1a10 	vmov	r1, s16
 800fc56:	f000 fe6b 	bl	8010930 <_Bfree>
 800fc5a:	2300      	movs	r3, #0
 800fc5c:	9800      	ldr	r0, [sp, #0]
 800fc5e:	702b      	strb	r3, [r5, #0]
 800fc60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fc62:	3001      	adds	r0, #1
 800fc64:	6018      	str	r0, [r3, #0]
 800fc66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	f43f acf1 	beq.w	800f650 <_dtoa_r+0xa0>
 800fc6e:	601d      	str	r5, [r3, #0]
 800fc70:	e4ee      	b.n	800f650 <_dtoa_r+0xa0>
 800fc72:	9f00      	ldr	r7, [sp, #0]
 800fc74:	462b      	mov	r3, r5
 800fc76:	461d      	mov	r5, r3
 800fc78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fc7c:	2a39      	cmp	r2, #57	; 0x39
 800fc7e:	d106      	bne.n	800fc8e <_dtoa_r+0x6de>
 800fc80:	9a01      	ldr	r2, [sp, #4]
 800fc82:	429a      	cmp	r2, r3
 800fc84:	d1f7      	bne.n	800fc76 <_dtoa_r+0x6c6>
 800fc86:	9901      	ldr	r1, [sp, #4]
 800fc88:	2230      	movs	r2, #48	; 0x30
 800fc8a:	3701      	adds	r7, #1
 800fc8c:	700a      	strb	r2, [r1, #0]
 800fc8e:	781a      	ldrb	r2, [r3, #0]
 800fc90:	3201      	adds	r2, #1
 800fc92:	701a      	strb	r2, [r3, #0]
 800fc94:	e790      	b.n	800fbb8 <_dtoa_r+0x608>
 800fc96:	4ba6      	ldr	r3, [pc, #664]	; (800ff30 <_dtoa_r+0x980>)
 800fc98:	2200      	movs	r2, #0
 800fc9a:	f7f0 fcad 	bl	80005f8 <__aeabi_dmul>
 800fc9e:	2200      	movs	r2, #0
 800fca0:	2300      	movs	r3, #0
 800fca2:	4606      	mov	r6, r0
 800fca4:	460f      	mov	r7, r1
 800fca6:	f7f0 ff0f 	bl	8000ac8 <__aeabi_dcmpeq>
 800fcaa:	2800      	cmp	r0, #0
 800fcac:	d09d      	beq.n	800fbea <_dtoa_r+0x63a>
 800fcae:	e7cf      	b.n	800fc50 <_dtoa_r+0x6a0>
 800fcb0:	9a08      	ldr	r2, [sp, #32]
 800fcb2:	2a00      	cmp	r2, #0
 800fcb4:	f000 80d7 	beq.w	800fe66 <_dtoa_r+0x8b6>
 800fcb8:	9a06      	ldr	r2, [sp, #24]
 800fcba:	2a01      	cmp	r2, #1
 800fcbc:	f300 80ba 	bgt.w	800fe34 <_dtoa_r+0x884>
 800fcc0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fcc2:	2a00      	cmp	r2, #0
 800fcc4:	f000 80b2 	beq.w	800fe2c <_dtoa_r+0x87c>
 800fcc8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800fccc:	9e07      	ldr	r6, [sp, #28]
 800fcce:	9d04      	ldr	r5, [sp, #16]
 800fcd0:	9a04      	ldr	r2, [sp, #16]
 800fcd2:	441a      	add	r2, r3
 800fcd4:	9204      	str	r2, [sp, #16]
 800fcd6:	9a05      	ldr	r2, [sp, #20]
 800fcd8:	2101      	movs	r1, #1
 800fcda:	441a      	add	r2, r3
 800fcdc:	4620      	mov	r0, r4
 800fcde:	9205      	str	r2, [sp, #20]
 800fce0:	f000 ff28 	bl	8010b34 <__i2b>
 800fce4:	4607      	mov	r7, r0
 800fce6:	2d00      	cmp	r5, #0
 800fce8:	dd0c      	ble.n	800fd04 <_dtoa_r+0x754>
 800fcea:	9b05      	ldr	r3, [sp, #20]
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	dd09      	ble.n	800fd04 <_dtoa_r+0x754>
 800fcf0:	42ab      	cmp	r3, r5
 800fcf2:	9a04      	ldr	r2, [sp, #16]
 800fcf4:	bfa8      	it	ge
 800fcf6:	462b      	movge	r3, r5
 800fcf8:	1ad2      	subs	r2, r2, r3
 800fcfa:	9204      	str	r2, [sp, #16]
 800fcfc:	9a05      	ldr	r2, [sp, #20]
 800fcfe:	1aed      	subs	r5, r5, r3
 800fd00:	1ad3      	subs	r3, r2, r3
 800fd02:	9305      	str	r3, [sp, #20]
 800fd04:	9b07      	ldr	r3, [sp, #28]
 800fd06:	b31b      	cbz	r3, 800fd50 <_dtoa_r+0x7a0>
 800fd08:	9b08      	ldr	r3, [sp, #32]
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	f000 80af 	beq.w	800fe6e <_dtoa_r+0x8be>
 800fd10:	2e00      	cmp	r6, #0
 800fd12:	dd13      	ble.n	800fd3c <_dtoa_r+0x78c>
 800fd14:	4639      	mov	r1, r7
 800fd16:	4632      	mov	r2, r6
 800fd18:	4620      	mov	r0, r4
 800fd1a:	f000 ffcb 	bl	8010cb4 <__pow5mult>
 800fd1e:	ee18 2a10 	vmov	r2, s16
 800fd22:	4601      	mov	r1, r0
 800fd24:	4607      	mov	r7, r0
 800fd26:	4620      	mov	r0, r4
 800fd28:	f000 ff1a 	bl	8010b60 <__multiply>
 800fd2c:	ee18 1a10 	vmov	r1, s16
 800fd30:	4680      	mov	r8, r0
 800fd32:	4620      	mov	r0, r4
 800fd34:	f000 fdfc 	bl	8010930 <_Bfree>
 800fd38:	ee08 8a10 	vmov	s16, r8
 800fd3c:	9b07      	ldr	r3, [sp, #28]
 800fd3e:	1b9a      	subs	r2, r3, r6
 800fd40:	d006      	beq.n	800fd50 <_dtoa_r+0x7a0>
 800fd42:	ee18 1a10 	vmov	r1, s16
 800fd46:	4620      	mov	r0, r4
 800fd48:	f000 ffb4 	bl	8010cb4 <__pow5mult>
 800fd4c:	ee08 0a10 	vmov	s16, r0
 800fd50:	2101      	movs	r1, #1
 800fd52:	4620      	mov	r0, r4
 800fd54:	f000 feee 	bl	8010b34 <__i2b>
 800fd58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	4606      	mov	r6, r0
 800fd5e:	f340 8088 	ble.w	800fe72 <_dtoa_r+0x8c2>
 800fd62:	461a      	mov	r2, r3
 800fd64:	4601      	mov	r1, r0
 800fd66:	4620      	mov	r0, r4
 800fd68:	f000 ffa4 	bl	8010cb4 <__pow5mult>
 800fd6c:	9b06      	ldr	r3, [sp, #24]
 800fd6e:	2b01      	cmp	r3, #1
 800fd70:	4606      	mov	r6, r0
 800fd72:	f340 8081 	ble.w	800fe78 <_dtoa_r+0x8c8>
 800fd76:	f04f 0800 	mov.w	r8, #0
 800fd7a:	6933      	ldr	r3, [r6, #16]
 800fd7c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800fd80:	6918      	ldr	r0, [r3, #16]
 800fd82:	f000 fe87 	bl	8010a94 <__hi0bits>
 800fd86:	f1c0 0020 	rsb	r0, r0, #32
 800fd8a:	9b05      	ldr	r3, [sp, #20]
 800fd8c:	4418      	add	r0, r3
 800fd8e:	f010 001f 	ands.w	r0, r0, #31
 800fd92:	f000 8092 	beq.w	800feba <_dtoa_r+0x90a>
 800fd96:	f1c0 0320 	rsb	r3, r0, #32
 800fd9a:	2b04      	cmp	r3, #4
 800fd9c:	f340 808a 	ble.w	800feb4 <_dtoa_r+0x904>
 800fda0:	f1c0 001c 	rsb	r0, r0, #28
 800fda4:	9b04      	ldr	r3, [sp, #16]
 800fda6:	4403      	add	r3, r0
 800fda8:	9304      	str	r3, [sp, #16]
 800fdaa:	9b05      	ldr	r3, [sp, #20]
 800fdac:	4403      	add	r3, r0
 800fdae:	4405      	add	r5, r0
 800fdb0:	9305      	str	r3, [sp, #20]
 800fdb2:	9b04      	ldr	r3, [sp, #16]
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	dd07      	ble.n	800fdc8 <_dtoa_r+0x818>
 800fdb8:	ee18 1a10 	vmov	r1, s16
 800fdbc:	461a      	mov	r2, r3
 800fdbe:	4620      	mov	r0, r4
 800fdc0:	f000 ffd2 	bl	8010d68 <__lshift>
 800fdc4:	ee08 0a10 	vmov	s16, r0
 800fdc8:	9b05      	ldr	r3, [sp, #20]
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	dd05      	ble.n	800fdda <_dtoa_r+0x82a>
 800fdce:	4631      	mov	r1, r6
 800fdd0:	461a      	mov	r2, r3
 800fdd2:	4620      	mov	r0, r4
 800fdd4:	f000 ffc8 	bl	8010d68 <__lshift>
 800fdd8:	4606      	mov	r6, r0
 800fdda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d06e      	beq.n	800febe <_dtoa_r+0x90e>
 800fde0:	ee18 0a10 	vmov	r0, s16
 800fde4:	4631      	mov	r1, r6
 800fde6:	f001 f82f 	bl	8010e48 <__mcmp>
 800fdea:	2800      	cmp	r0, #0
 800fdec:	da67      	bge.n	800febe <_dtoa_r+0x90e>
 800fdee:	9b00      	ldr	r3, [sp, #0]
 800fdf0:	3b01      	subs	r3, #1
 800fdf2:	ee18 1a10 	vmov	r1, s16
 800fdf6:	9300      	str	r3, [sp, #0]
 800fdf8:	220a      	movs	r2, #10
 800fdfa:	2300      	movs	r3, #0
 800fdfc:	4620      	mov	r0, r4
 800fdfe:	f000 fdb9 	bl	8010974 <__multadd>
 800fe02:	9b08      	ldr	r3, [sp, #32]
 800fe04:	ee08 0a10 	vmov	s16, r0
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	f000 81b1 	beq.w	8010170 <_dtoa_r+0xbc0>
 800fe0e:	2300      	movs	r3, #0
 800fe10:	4639      	mov	r1, r7
 800fe12:	220a      	movs	r2, #10
 800fe14:	4620      	mov	r0, r4
 800fe16:	f000 fdad 	bl	8010974 <__multadd>
 800fe1a:	9b02      	ldr	r3, [sp, #8]
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	4607      	mov	r7, r0
 800fe20:	f300 808e 	bgt.w	800ff40 <_dtoa_r+0x990>
 800fe24:	9b06      	ldr	r3, [sp, #24]
 800fe26:	2b02      	cmp	r3, #2
 800fe28:	dc51      	bgt.n	800fece <_dtoa_r+0x91e>
 800fe2a:	e089      	b.n	800ff40 <_dtoa_r+0x990>
 800fe2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fe2e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800fe32:	e74b      	b.n	800fccc <_dtoa_r+0x71c>
 800fe34:	9b03      	ldr	r3, [sp, #12]
 800fe36:	1e5e      	subs	r6, r3, #1
 800fe38:	9b07      	ldr	r3, [sp, #28]
 800fe3a:	42b3      	cmp	r3, r6
 800fe3c:	bfbf      	itttt	lt
 800fe3e:	9b07      	ldrlt	r3, [sp, #28]
 800fe40:	9607      	strlt	r6, [sp, #28]
 800fe42:	1af2      	sublt	r2, r6, r3
 800fe44:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800fe46:	bfb6      	itet	lt
 800fe48:	189b      	addlt	r3, r3, r2
 800fe4a:	1b9e      	subge	r6, r3, r6
 800fe4c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800fe4e:	9b03      	ldr	r3, [sp, #12]
 800fe50:	bfb8      	it	lt
 800fe52:	2600      	movlt	r6, #0
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	bfb7      	itett	lt
 800fe58:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800fe5c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800fe60:	1a9d      	sublt	r5, r3, r2
 800fe62:	2300      	movlt	r3, #0
 800fe64:	e734      	b.n	800fcd0 <_dtoa_r+0x720>
 800fe66:	9e07      	ldr	r6, [sp, #28]
 800fe68:	9d04      	ldr	r5, [sp, #16]
 800fe6a:	9f08      	ldr	r7, [sp, #32]
 800fe6c:	e73b      	b.n	800fce6 <_dtoa_r+0x736>
 800fe6e:	9a07      	ldr	r2, [sp, #28]
 800fe70:	e767      	b.n	800fd42 <_dtoa_r+0x792>
 800fe72:	9b06      	ldr	r3, [sp, #24]
 800fe74:	2b01      	cmp	r3, #1
 800fe76:	dc18      	bgt.n	800feaa <_dtoa_r+0x8fa>
 800fe78:	f1ba 0f00 	cmp.w	sl, #0
 800fe7c:	d115      	bne.n	800feaa <_dtoa_r+0x8fa>
 800fe7e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fe82:	b993      	cbnz	r3, 800feaa <_dtoa_r+0x8fa>
 800fe84:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800fe88:	0d1b      	lsrs	r3, r3, #20
 800fe8a:	051b      	lsls	r3, r3, #20
 800fe8c:	b183      	cbz	r3, 800feb0 <_dtoa_r+0x900>
 800fe8e:	9b04      	ldr	r3, [sp, #16]
 800fe90:	3301      	adds	r3, #1
 800fe92:	9304      	str	r3, [sp, #16]
 800fe94:	9b05      	ldr	r3, [sp, #20]
 800fe96:	3301      	adds	r3, #1
 800fe98:	9305      	str	r3, [sp, #20]
 800fe9a:	f04f 0801 	mov.w	r8, #1
 800fe9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	f47f af6a 	bne.w	800fd7a <_dtoa_r+0x7ca>
 800fea6:	2001      	movs	r0, #1
 800fea8:	e76f      	b.n	800fd8a <_dtoa_r+0x7da>
 800feaa:	f04f 0800 	mov.w	r8, #0
 800feae:	e7f6      	b.n	800fe9e <_dtoa_r+0x8ee>
 800feb0:	4698      	mov	r8, r3
 800feb2:	e7f4      	b.n	800fe9e <_dtoa_r+0x8ee>
 800feb4:	f43f af7d 	beq.w	800fdb2 <_dtoa_r+0x802>
 800feb8:	4618      	mov	r0, r3
 800feba:	301c      	adds	r0, #28
 800febc:	e772      	b.n	800fda4 <_dtoa_r+0x7f4>
 800febe:	9b03      	ldr	r3, [sp, #12]
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	dc37      	bgt.n	800ff34 <_dtoa_r+0x984>
 800fec4:	9b06      	ldr	r3, [sp, #24]
 800fec6:	2b02      	cmp	r3, #2
 800fec8:	dd34      	ble.n	800ff34 <_dtoa_r+0x984>
 800feca:	9b03      	ldr	r3, [sp, #12]
 800fecc:	9302      	str	r3, [sp, #8]
 800fece:	9b02      	ldr	r3, [sp, #8]
 800fed0:	b96b      	cbnz	r3, 800feee <_dtoa_r+0x93e>
 800fed2:	4631      	mov	r1, r6
 800fed4:	2205      	movs	r2, #5
 800fed6:	4620      	mov	r0, r4
 800fed8:	f000 fd4c 	bl	8010974 <__multadd>
 800fedc:	4601      	mov	r1, r0
 800fede:	4606      	mov	r6, r0
 800fee0:	ee18 0a10 	vmov	r0, s16
 800fee4:	f000 ffb0 	bl	8010e48 <__mcmp>
 800fee8:	2800      	cmp	r0, #0
 800feea:	f73f adbb 	bgt.w	800fa64 <_dtoa_r+0x4b4>
 800feee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fef0:	9d01      	ldr	r5, [sp, #4]
 800fef2:	43db      	mvns	r3, r3
 800fef4:	9300      	str	r3, [sp, #0]
 800fef6:	f04f 0800 	mov.w	r8, #0
 800fefa:	4631      	mov	r1, r6
 800fefc:	4620      	mov	r0, r4
 800fefe:	f000 fd17 	bl	8010930 <_Bfree>
 800ff02:	2f00      	cmp	r7, #0
 800ff04:	f43f aea4 	beq.w	800fc50 <_dtoa_r+0x6a0>
 800ff08:	f1b8 0f00 	cmp.w	r8, #0
 800ff0c:	d005      	beq.n	800ff1a <_dtoa_r+0x96a>
 800ff0e:	45b8      	cmp	r8, r7
 800ff10:	d003      	beq.n	800ff1a <_dtoa_r+0x96a>
 800ff12:	4641      	mov	r1, r8
 800ff14:	4620      	mov	r0, r4
 800ff16:	f000 fd0b 	bl	8010930 <_Bfree>
 800ff1a:	4639      	mov	r1, r7
 800ff1c:	4620      	mov	r0, r4
 800ff1e:	f000 fd07 	bl	8010930 <_Bfree>
 800ff22:	e695      	b.n	800fc50 <_dtoa_r+0x6a0>
 800ff24:	2600      	movs	r6, #0
 800ff26:	4637      	mov	r7, r6
 800ff28:	e7e1      	b.n	800feee <_dtoa_r+0x93e>
 800ff2a:	9700      	str	r7, [sp, #0]
 800ff2c:	4637      	mov	r7, r6
 800ff2e:	e599      	b.n	800fa64 <_dtoa_r+0x4b4>
 800ff30:	40240000 	.word	0x40240000
 800ff34:	9b08      	ldr	r3, [sp, #32]
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	f000 80ca 	beq.w	80100d0 <_dtoa_r+0xb20>
 800ff3c:	9b03      	ldr	r3, [sp, #12]
 800ff3e:	9302      	str	r3, [sp, #8]
 800ff40:	2d00      	cmp	r5, #0
 800ff42:	dd05      	ble.n	800ff50 <_dtoa_r+0x9a0>
 800ff44:	4639      	mov	r1, r7
 800ff46:	462a      	mov	r2, r5
 800ff48:	4620      	mov	r0, r4
 800ff4a:	f000 ff0d 	bl	8010d68 <__lshift>
 800ff4e:	4607      	mov	r7, r0
 800ff50:	f1b8 0f00 	cmp.w	r8, #0
 800ff54:	d05b      	beq.n	801000e <_dtoa_r+0xa5e>
 800ff56:	6879      	ldr	r1, [r7, #4]
 800ff58:	4620      	mov	r0, r4
 800ff5a:	f000 fca9 	bl	80108b0 <_Balloc>
 800ff5e:	4605      	mov	r5, r0
 800ff60:	b928      	cbnz	r0, 800ff6e <_dtoa_r+0x9be>
 800ff62:	4b87      	ldr	r3, [pc, #540]	; (8010180 <_dtoa_r+0xbd0>)
 800ff64:	4602      	mov	r2, r0
 800ff66:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ff6a:	f7ff bb3b 	b.w	800f5e4 <_dtoa_r+0x34>
 800ff6e:	693a      	ldr	r2, [r7, #16]
 800ff70:	3202      	adds	r2, #2
 800ff72:	0092      	lsls	r2, r2, #2
 800ff74:	f107 010c 	add.w	r1, r7, #12
 800ff78:	300c      	adds	r0, #12
 800ff7a:	f7fd febf 	bl	800dcfc <memcpy>
 800ff7e:	2201      	movs	r2, #1
 800ff80:	4629      	mov	r1, r5
 800ff82:	4620      	mov	r0, r4
 800ff84:	f000 fef0 	bl	8010d68 <__lshift>
 800ff88:	9b01      	ldr	r3, [sp, #4]
 800ff8a:	f103 0901 	add.w	r9, r3, #1
 800ff8e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800ff92:	4413      	add	r3, r2
 800ff94:	9305      	str	r3, [sp, #20]
 800ff96:	f00a 0301 	and.w	r3, sl, #1
 800ff9a:	46b8      	mov	r8, r7
 800ff9c:	9304      	str	r3, [sp, #16]
 800ff9e:	4607      	mov	r7, r0
 800ffa0:	4631      	mov	r1, r6
 800ffa2:	ee18 0a10 	vmov	r0, s16
 800ffa6:	f7ff fa77 	bl	800f498 <quorem>
 800ffaa:	4641      	mov	r1, r8
 800ffac:	9002      	str	r0, [sp, #8]
 800ffae:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ffb2:	ee18 0a10 	vmov	r0, s16
 800ffb6:	f000 ff47 	bl	8010e48 <__mcmp>
 800ffba:	463a      	mov	r2, r7
 800ffbc:	9003      	str	r0, [sp, #12]
 800ffbe:	4631      	mov	r1, r6
 800ffc0:	4620      	mov	r0, r4
 800ffc2:	f000 ff5d 	bl	8010e80 <__mdiff>
 800ffc6:	68c2      	ldr	r2, [r0, #12]
 800ffc8:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800ffcc:	4605      	mov	r5, r0
 800ffce:	bb02      	cbnz	r2, 8010012 <_dtoa_r+0xa62>
 800ffd0:	4601      	mov	r1, r0
 800ffd2:	ee18 0a10 	vmov	r0, s16
 800ffd6:	f000 ff37 	bl	8010e48 <__mcmp>
 800ffda:	4602      	mov	r2, r0
 800ffdc:	4629      	mov	r1, r5
 800ffde:	4620      	mov	r0, r4
 800ffe0:	9207      	str	r2, [sp, #28]
 800ffe2:	f000 fca5 	bl	8010930 <_Bfree>
 800ffe6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800ffea:	ea43 0102 	orr.w	r1, r3, r2
 800ffee:	9b04      	ldr	r3, [sp, #16]
 800fff0:	430b      	orrs	r3, r1
 800fff2:	464d      	mov	r5, r9
 800fff4:	d10f      	bne.n	8010016 <_dtoa_r+0xa66>
 800fff6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800fffa:	d02a      	beq.n	8010052 <_dtoa_r+0xaa2>
 800fffc:	9b03      	ldr	r3, [sp, #12]
 800fffe:	2b00      	cmp	r3, #0
 8010000:	dd02      	ble.n	8010008 <_dtoa_r+0xa58>
 8010002:	9b02      	ldr	r3, [sp, #8]
 8010004:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8010008:	f88b a000 	strb.w	sl, [fp]
 801000c:	e775      	b.n	800fefa <_dtoa_r+0x94a>
 801000e:	4638      	mov	r0, r7
 8010010:	e7ba      	b.n	800ff88 <_dtoa_r+0x9d8>
 8010012:	2201      	movs	r2, #1
 8010014:	e7e2      	b.n	800ffdc <_dtoa_r+0xa2c>
 8010016:	9b03      	ldr	r3, [sp, #12]
 8010018:	2b00      	cmp	r3, #0
 801001a:	db04      	blt.n	8010026 <_dtoa_r+0xa76>
 801001c:	9906      	ldr	r1, [sp, #24]
 801001e:	430b      	orrs	r3, r1
 8010020:	9904      	ldr	r1, [sp, #16]
 8010022:	430b      	orrs	r3, r1
 8010024:	d122      	bne.n	801006c <_dtoa_r+0xabc>
 8010026:	2a00      	cmp	r2, #0
 8010028:	ddee      	ble.n	8010008 <_dtoa_r+0xa58>
 801002a:	ee18 1a10 	vmov	r1, s16
 801002e:	2201      	movs	r2, #1
 8010030:	4620      	mov	r0, r4
 8010032:	f000 fe99 	bl	8010d68 <__lshift>
 8010036:	4631      	mov	r1, r6
 8010038:	ee08 0a10 	vmov	s16, r0
 801003c:	f000 ff04 	bl	8010e48 <__mcmp>
 8010040:	2800      	cmp	r0, #0
 8010042:	dc03      	bgt.n	801004c <_dtoa_r+0xa9c>
 8010044:	d1e0      	bne.n	8010008 <_dtoa_r+0xa58>
 8010046:	f01a 0f01 	tst.w	sl, #1
 801004a:	d0dd      	beq.n	8010008 <_dtoa_r+0xa58>
 801004c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8010050:	d1d7      	bne.n	8010002 <_dtoa_r+0xa52>
 8010052:	2339      	movs	r3, #57	; 0x39
 8010054:	f88b 3000 	strb.w	r3, [fp]
 8010058:	462b      	mov	r3, r5
 801005a:	461d      	mov	r5, r3
 801005c:	3b01      	subs	r3, #1
 801005e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8010062:	2a39      	cmp	r2, #57	; 0x39
 8010064:	d071      	beq.n	801014a <_dtoa_r+0xb9a>
 8010066:	3201      	adds	r2, #1
 8010068:	701a      	strb	r2, [r3, #0]
 801006a:	e746      	b.n	800fefa <_dtoa_r+0x94a>
 801006c:	2a00      	cmp	r2, #0
 801006e:	dd07      	ble.n	8010080 <_dtoa_r+0xad0>
 8010070:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8010074:	d0ed      	beq.n	8010052 <_dtoa_r+0xaa2>
 8010076:	f10a 0301 	add.w	r3, sl, #1
 801007a:	f88b 3000 	strb.w	r3, [fp]
 801007e:	e73c      	b.n	800fefa <_dtoa_r+0x94a>
 8010080:	9b05      	ldr	r3, [sp, #20]
 8010082:	f809 ac01 	strb.w	sl, [r9, #-1]
 8010086:	4599      	cmp	r9, r3
 8010088:	d047      	beq.n	801011a <_dtoa_r+0xb6a>
 801008a:	ee18 1a10 	vmov	r1, s16
 801008e:	2300      	movs	r3, #0
 8010090:	220a      	movs	r2, #10
 8010092:	4620      	mov	r0, r4
 8010094:	f000 fc6e 	bl	8010974 <__multadd>
 8010098:	45b8      	cmp	r8, r7
 801009a:	ee08 0a10 	vmov	s16, r0
 801009e:	f04f 0300 	mov.w	r3, #0
 80100a2:	f04f 020a 	mov.w	r2, #10
 80100a6:	4641      	mov	r1, r8
 80100a8:	4620      	mov	r0, r4
 80100aa:	d106      	bne.n	80100ba <_dtoa_r+0xb0a>
 80100ac:	f000 fc62 	bl	8010974 <__multadd>
 80100b0:	4680      	mov	r8, r0
 80100b2:	4607      	mov	r7, r0
 80100b4:	f109 0901 	add.w	r9, r9, #1
 80100b8:	e772      	b.n	800ffa0 <_dtoa_r+0x9f0>
 80100ba:	f000 fc5b 	bl	8010974 <__multadd>
 80100be:	4639      	mov	r1, r7
 80100c0:	4680      	mov	r8, r0
 80100c2:	2300      	movs	r3, #0
 80100c4:	220a      	movs	r2, #10
 80100c6:	4620      	mov	r0, r4
 80100c8:	f000 fc54 	bl	8010974 <__multadd>
 80100cc:	4607      	mov	r7, r0
 80100ce:	e7f1      	b.n	80100b4 <_dtoa_r+0xb04>
 80100d0:	9b03      	ldr	r3, [sp, #12]
 80100d2:	9302      	str	r3, [sp, #8]
 80100d4:	9d01      	ldr	r5, [sp, #4]
 80100d6:	ee18 0a10 	vmov	r0, s16
 80100da:	4631      	mov	r1, r6
 80100dc:	f7ff f9dc 	bl	800f498 <quorem>
 80100e0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80100e4:	9b01      	ldr	r3, [sp, #4]
 80100e6:	f805 ab01 	strb.w	sl, [r5], #1
 80100ea:	1aea      	subs	r2, r5, r3
 80100ec:	9b02      	ldr	r3, [sp, #8]
 80100ee:	4293      	cmp	r3, r2
 80100f0:	dd09      	ble.n	8010106 <_dtoa_r+0xb56>
 80100f2:	ee18 1a10 	vmov	r1, s16
 80100f6:	2300      	movs	r3, #0
 80100f8:	220a      	movs	r2, #10
 80100fa:	4620      	mov	r0, r4
 80100fc:	f000 fc3a 	bl	8010974 <__multadd>
 8010100:	ee08 0a10 	vmov	s16, r0
 8010104:	e7e7      	b.n	80100d6 <_dtoa_r+0xb26>
 8010106:	9b02      	ldr	r3, [sp, #8]
 8010108:	2b00      	cmp	r3, #0
 801010a:	bfc8      	it	gt
 801010c:	461d      	movgt	r5, r3
 801010e:	9b01      	ldr	r3, [sp, #4]
 8010110:	bfd8      	it	le
 8010112:	2501      	movle	r5, #1
 8010114:	441d      	add	r5, r3
 8010116:	f04f 0800 	mov.w	r8, #0
 801011a:	ee18 1a10 	vmov	r1, s16
 801011e:	2201      	movs	r2, #1
 8010120:	4620      	mov	r0, r4
 8010122:	f000 fe21 	bl	8010d68 <__lshift>
 8010126:	4631      	mov	r1, r6
 8010128:	ee08 0a10 	vmov	s16, r0
 801012c:	f000 fe8c 	bl	8010e48 <__mcmp>
 8010130:	2800      	cmp	r0, #0
 8010132:	dc91      	bgt.n	8010058 <_dtoa_r+0xaa8>
 8010134:	d102      	bne.n	801013c <_dtoa_r+0xb8c>
 8010136:	f01a 0f01 	tst.w	sl, #1
 801013a:	d18d      	bne.n	8010058 <_dtoa_r+0xaa8>
 801013c:	462b      	mov	r3, r5
 801013e:	461d      	mov	r5, r3
 8010140:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010144:	2a30      	cmp	r2, #48	; 0x30
 8010146:	d0fa      	beq.n	801013e <_dtoa_r+0xb8e>
 8010148:	e6d7      	b.n	800fefa <_dtoa_r+0x94a>
 801014a:	9a01      	ldr	r2, [sp, #4]
 801014c:	429a      	cmp	r2, r3
 801014e:	d184      	bne.n	801005a <_dtoa_r+0xaaa>
 8010150:	9b00      	ldr	r3, [sp, #0]
 8010152:	3301      	adds	r3, #1
 8010154:	9300      	str	r3, [sp, #0]
 8010156:	2331      	movs	r3, #49	; 0x31
 8010158:	7013      	strb	r3, [r2, #0]
 801015a:	e6ce      	b.n	800fefa <_dtoa_r+0x94a>
 801015c:	4b09      	ldr	r3, [pc, #36]	; (8010184 <_dtoa_r+0xbd4>)
 801015e:	f7ff ba95 	b.w	800f68c <_dtoa_r+0xdc>
 8010162:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010164:	2b00      	cmp	r3, #0
 8010166:	f47f aa6e 	bne.w	800f646 <_dtoa_r+0x96>
 801016a:	4b07      	ldr	r3, [pc, #28]	; (8010188 <_dtoa_r+0xbd8>)
 801016c:	f7ff ba8e 	b.w	800f68c <_dtoa_r+0xdc>
 8010170:	9b02      	ldr	r3, [sp, #8]
 8010172:	2b00      	cmp	r3, #0
 8010174:	dcae      	bgt.n	80100d4 <_dtoa_r+0xb24>
 8010176:	9b06      	ldr	r3, [sp, #24]
 8010178:	2b02      	cmp	r3, #2
 801017a:	f73f aea8 	bgt.w	800fece <_dtoa_r+0x91e>
 801017e:	e7a9      	b.n	80100d4 <_dtoa_r+0xb24>
 8010180:	080138af 	.word	0x080138af
 8010184:	080137b8 	.word	0x080137b8
 8010188:	08013830 	.word	0x08013830

0801018c <rshift>:
 801018c:	6903      	ldr	r3, [r0, #16]
 801018e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8010192:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010196:	ea4f 1261 	mov.w	r2, r1, asr #5
 801019a:	f100 0414 	add.w	r4, r0, #20
 801019e:	dd45      	ble.n	801022c <rshift+0xa0>
 80101a0:	f011 011f 	ands.w	r1, r1, #31
 80101a4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80101a8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80101ac:	d10c      	bne.n	80101c8 <rshift+0x3c>
 80101ae:	f100 0710 	add.w	r7, r0, #16
 80101b2:	4629      	mov	r1, r5
 80101b4:	42b1      	cmp	r1, r6
 80101b6:	d334      	bcc.n	8010222 <rshift+0x96>
 80101b8:	1a9b      	subs	r3, r3, r2
 80101ba:	009b      	lsls	r3, r3, #2
 80101bc:	1eea      	subs	r2, r5, #3
 80101be:	4296      	cmp	r6, r2
 80101c0:	bf38      	it	cc
 80101c2:	2300      	movcc	r3, #0
 80101c4:	4423      	add	r3, r4
 80101c6:	e015      	b.n	80101f4 <rshift+0x68>
 80101c8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80101cc:	f1c1 0820 	rsb	r8, r1, #32
 80101d0:	40cf      	lsrs	r7, r1
 80101d2:	f105 0e04 	add.w	lr, r5, #4
 80101d6:	46a1      	mov	r9, r4
 80101d8:	4576      	cmp	r6, lr
 80101da:	46f4      	mov	ip, lr
 80101dc:	d815      	bhi.n	801020a <rshift+0x7e>
 80101de:	1a9a      	subs	r2, r3, r2
 80101e0:	0092      	lsls	r2, r2, #2
 80101e2:	3a04      	subs	r2, #4
 80101e4:	3501      	adds	r5, #1
 80101e6:	42ae      	cmp	r6, r5
 80101e8:	bf38      	it	cc
 80101ea:	2200      	movcc	r2, #0
 80101ec:	18a3      	adds	r3, r4, r2
 80101ee:	50a7      	str	r7, [r4, r2]
 80101f0:	b107      	cbz	r7, 80101f4 <rshift+0x68>
 80101f2:	3304      	adds	r3, #4
 80101f4:	1b1a      	subs	r2, r3, r4
 80101f6:	42a3      	cmp	r3, r4
 80101f8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80101fc:	bf08      	it	eq
 80101fe:	2300      	moveq	r3, #0
 8010200:	6102      	str	r2, [r0, #16]
 8010202:	bf08      	it	eq
 8010204:	6143      	streq	r3, [r0, #20]
 8010206:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801020a:	f8dc c000 	ldr.w	ip, [ip]
 801020e:	fa0c fc08 	lsl.w	ip, ip, r8
 8010212:	ea4c 0707 	orr.w	r7, ip, r7
 8010216:	f849 7b04 	str.w	r7, [r9], #4
 801021a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801021e:	40cf      	lsrs	r7, r1
 8010220:	e7da      	b.n	80101d8 <rshift+0x4c>
 8010222:	f851 cb04 	ldr.w	ip, [r1], #4
 8010226:	f847 cf04 	str.w	ip, [r7, #4]!
 801022a:	e7c3      	b.n	80101b4 <rshift+0x28>
 801022c:	4623      	mov	r3, r4
 801022e:	e7e1      	b.n	80101f4 <rshift+0x68>

08010230 <__hexdig_fun>:
 8010230:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8010234:	2b09      	cmp	r3, #9
 8010236:	d802      	bhi.n	801023e <__hexdig_fun+0xe>
 8010238:	3820      	subs	r0, #32
 801023a:	b2c0      	uxtb	r0, r0
 801023c:	4770      	bx	lr
 801023e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8010242:	2b05      	cmp	r3, #5
 8010244:	d801      	bhi.n	801024a <__hexdig_fun+0x1a>
 8010246:	3847      	subs	r0, #71	; 0x47
 8010248:	e7f7      	b.n	801023a <__hexdig_fun+0xa>
 801024a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801024e:	2b05      	cmp	r3, #5
 8010250:	d801      	bhi.n	8010256 <__hexdig_fun+0x26>
 8010252:	3827      	subs	r0, #39	; 0x27
 8010254:	e7f1      	b.n	801023a <__hexdig_fun+0xa>
 8010256:	2000      	movs	r0, #0
 8010258:	4770      	bx	lr
	...

0801025c <__gethex>:
 801025c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010260:	ed2d 8b02 	vpush	{d8}
 8010264:	b089      	sub	sp, #36	; 0x24
 8010266:	ee08 0a10 	vmov	s16, r0
 801026a:	9304      	str	r3, [sp, #16]
 801026c:	4bb4      	ldr	r3, [pc, #720]	; (8010540 <__gethex+0x2e4>)
 801026e:	681b      	ldr	r3, [r3, #0]
 8010270:	9301      	str	r3, [sp, #4]
 8010272:	4618      	mov	r0, r3
 8010274:	468b      	mov	fp, r1
 8010276:	4690      	mov	r8, r2
 8010278:	f7ef ffaa 	bl	80001d0 <strlen>
 801027c:	9b01      	ldr	r3, [sp, #4]
 801027e:	f8db 2000 	ldr.w	r2, [fp]
 8010282:	4403      	add	r3, r0
 8010284:	4682      	mov	sl, r0
 8010286:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801028a:	9305      	str	r3, [sp, #20]
 801028c:	1c93      	adds	r3, r2, #2
 801028e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8010292:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8010296:	32fe      	adds	r2, #254	; 0xfe
 8010298:	18d1      	adds	r1, r2, r3
 801029a:	461f      	mov	r7, r3
 801029c:	f813 0b01 	ldrb.w	r0, [r3], #1
 80102a0:	9100      	str	r1, [sp, #0]
 80102a2:	2830      	cmp	r0, #48	; 0x30
 80102a4:	d0f8      	beq.n	8010298 <__gethex+0x3c>
 80102a6:	f7ff ffc3 	bl	8010230 <__hexdig_fun>
 80102aa:	4604      	mov	r4, r0
 80102ac:	2800      	cmp	r0, #0
 80102ae:	d13a      	bne.n	8010326 <__gethex+0xca>
 80102b0:	9901      	ldr	r1, [sp, #4]
 80102b2:	4652      	mov	r2, sl
 80102b4:	4638      	mov	r0, r7
 80102b6:	f7fe f9ce 	bl	800e656 <strncmp>
 80102ba:	4605      	mov	r5, r0
 80102bc:	2800      	cmp	r0, #0
 80102be:	d168      	bne.n	8010392 <__gethex+0x136>
 80102c0:	f817 000a 	ldrb.w	r0, [r7, sl]
 80102c4:	eb07 060a 	add.w	r6, r7, sl
 80102c8:	f7ff ffb2 	bl	8010230 <__hexdig_fun>
 80102cc:	2800      	cmp	r0, #0
 80102ce:	d062      	beq.n	8010396 <__gethex+0x13a>
 80102d0:	4633      	mov	r3, r6
 80102d2:	7818      	ldrb	r0, [r3, #0]
 80102d4:	2830      	cmp	r0, #48	; 0x30
 80102d6:	461f      	mov	r7, r3
 80102d8:	f103 0301 	add.w	r3, r3, #1
 80102dc:	d0f9      	beq.n	80102d2 <__gethex+0x76>
 80102de:	f7ff ffa7 	bl	8010230 <__hexdig_fun>
 80102e2:	2301      	movs	r3, #1
 80102e4:	fab0 f480 	clz	r4, r0
 80102e8:	0964      	lsrs	r4, r4, #5
 80102ea:	4635      	mov	r5, r6
 80102ec:	9300      	str	r3, [sp, #0]
 80102ee:	463a      	mov	r2, r7
 80102f0:	4616      	mov	r6, r2
 80102f2:	3201      	adds	r2, #1
 80102f4:	7830      	ldrb	r0, [r6, #0]
 80102f6:	f7ff ff9b 	bl	8010230 <__hexdig_fun>
 80102fa:	2800      	cmp	r0, #0
 80102fc:	d1f8      	bne.n	80102f0 <__gethex+0x94>
 80102fe:	9901      	ldr	r1, [sp, #4]
 8010300:	4652      	mov	r2, sl
 8010302:	4630      	mov	r0, r6
 8010304:	f7fe f9a7 	bl	800e656 <strncmp>
 8010308:	b980      	cbnz	r0, 801032c <__gethex+0xd0>
 801030a:	b94d      	cbnz	r5, 8010320 <__gethex+0xc4>
 801030c:	eb06 050a 	add.w	r5, r6, sl
 8010310:	462a      	mov	r2, r5
 8010312:	4616      	mov	r6, r2
 8010314:	3201      	adds	r2, #1
 8010316:	7830      	ldrb	r0, [r6, #0]
 8010318:	f7ff ff8a 	bl	8010230 <__hexdig_fun>
 801031c:	2800      	cmp	r0, #0
 801031e:	d1f8      	bne.n	8010312 <__gethex+0xb6>
 8010320:	1bad      	subs	r5, r5, r6
 8010322:	00ad      	lsls	r5, r5, #2
 8010324:	e004      	b.n	8010330 <__gethex+0xd4>
 8010326:	2400      	movs	r4, #0
 8010328:	4625      	mov	r5, r4
 801032a:	e7e0      	b.n	80102ee <__gethex+0x92>
 801032c:	2d00      	cmp	r5, #0
 801032e:	d1f7      	bne.n	8010320 <__gethex+0xc4>
 8010330:	7833      	ldrb	r3, [r6, #0]
 8010332:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8010336:	2b50      	cmp	r3, #80	; 0x50
 8010338:	d13b      	bne.n	80103b2 <__gethex+0x156>
 801033a:	7873      	ldrb	r3, [r6, #1]
 801033c:	2b2b      	cmp	r3, #43	; 0x2b
 801033e:	d02c      	beq.n	801039a <__gethex+0x13e>
 8010340:	2b2d      	cmp	r3, #45	; 0x2d
 8010342:	d02e      	beq.n	80103a2 <__gethex+0x146>
 8010344:	1c71      	adds	r1, r6, #1
 8010346:	f04f 0900 	mov.w	r9, #0
 801034a:	7808      	ldrb	r0, [r1, #0]
 801034c:	f7ff ff70 	bl	8010230 <__hexdig_fun>
 8010350:	1e43      	subs	r3, r0, #1
 8010352:	b2db      	uxtb	r3, r3
 8010354:	2b18      	cmp	r3, #24
 8010356:	d82c      	bhi.n	80103b2 <__gethex+0x156>
 8010358:	f1a0 0210 	sub.w	r2, r0, #16
 801035c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010360:	f7ff ff66 	bl	8010230 <__hexdig_fun>
 8010364:	1e43      	subs	r3, r0, #1
 8010366:	b2db      	uxtb	r3, r3
 8010368:	2b18      	cmp	r3, #24
 801036a:	d91d      	bls.n	80103a8 <__gethex+0x14c>
 801036c:	f1b9 0f00 	cmp.w	r9, #0
 8010370:	d000      	beq.n	8010374 <__gethex+0x118>
 8010372:	4252      	negs	r2, r2
 8010374:	4415      	add	r5, r2
 8010376:	f8cb 1000 	str.w	r1, [fp]
 801037a:	b1e4      	cbz	r4, 80103b6 <__gethex+0x15a>
 801037c:	9b00      	ldr	r3, [sp, #0]
 801037e:	2b00      	cmp	r3, #0
 8010380:	bf14      	ite	ne
 8010382:	2700      	movne	r7, #0
 8010384:	2706      	moveq	r7, #6
 8010386:	4638      	mov	r0, r7
 8010388:	b009      	add	sp, #36	; 0x24
 801038a:	ecbd 8b02 	vpop	{d8}
 801038e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010392:	463e      	mov	r6, r7
 8010394:	4625      	mov	r5, r4
 8010396:	2401      	movs	r4, #1
 8010398:	e7ca      	b.n	8010330 <__gethex+0xd4>
 801039a:	f04f 0900 	mov.w	r9, #0
 801039e:	1cb1      	adds	r1, r6, #2
 80103a0:	e7d3      	b.n	801034a <__gethex+0xee>
 80103a2:	f04f 0901 	mov.w	r9, #1
 80103a6:	e7fa      	b.n	801039e <__gethex+0x142>
 80103a8:	230a      	movs	r3, #10
 80103aa:	fb03 0202 	mla	r2, r3, r2, r0
 80103ae:	3a10      	subs	r2, #16
 80103b0:	e7d4      	b.n	801035c <__gethex+0x100>
 80103b2:	4631      	mov	r1, r6
 80103b4:	e7df      	b.n	8010376 <__gethex+0x11a>
 80103b6:	1bf3      	subs	r3, r6, r7
 80103b8:	3b01      	subs	r3, #1
 80103ba:	4621      	mov	r1, r4
 80103bc:	2b07      	cmp	r3, #7
 80103be:	dc0b      	bgt.n	80103d8 <__gethex+0x17c>
 80103c0:	ee18 0a10 	vmov	r0, s16
 80103c4:	f000 fa74 	bl	80108b0 <_Balloc>
 80103c8:	4604      	mov	r4, r0
 80103ca:	b940      	cbnz	r0, 80103de <__gethex+0x182>
 80103cc:	4b5d      	ldr	r3, [pc, #372]	; (8010544 <__gethex+0x2e8>)
 80103ce:	4602      	mov	r2, r0
 80103d0:	21de      	movs	r1, #222	; 0xde
 80103d2:	485d      	ldr	r0, [pc, #372]	; (8010548 <__gethex+0x2ec>)
 80103d4:	f001 f9fa 	bl	80117cc <__assert_func>
 80103d8:	3101      	adds	r1, #1
 80103da:	105b      	asrs	r3, r3, #1
 80103dc:	e7ee      	b.n	80103bc <__gethex+0x160>
 80103de:	f100 0914 	add.w	r9, r0, #20
 80103e2:	f04f 0b00 	mov.w	fp, #0
 80103e6:	f1ca 0301 	rsb	r3, sl, #1
 80103ea:	f8cd 9008 	str.w	r9, [sp, #8]
 80103ee:	f8cd b000 	str.w	fp, [sp]
 80103f2:	9306      	str	r3, [sp, #24]
 80103f4:	42b7      	cmp	r7, r6
 80103f6:	d340      	bcc.n	801047a <__gethex+0x21e>
 80103f8:	9802      	ldr	r0, [sp, #8]
 80103fa:	9b00      	ldr	r3, [sp, #0]
 80103fc:	f840 3b04 	str.w	r3, [r0], #4
 8010400:	eba0 0009 	sub.w	r0, r0, r9
 8010404:	1080      	asrs	r0, r0, #2
 8010406:	0146      	lsls	r6, r0, #5
 8010408:	6120      	str	r0, [r4, #16]
 801040a:	4618      	mov	r0, r3
 801040c:	f000 fb42 	bl	8010a94 <__hi0bits>
 8010410:	1a30      	subs	r0, r6, r0
 8010412:	f8d8 6000 	ldr.w	r6, [r8]
 8010416:	42b0      	cmp	r0, r6
 8010418:	dd63      	ble.n	80104e2 <__gethex+0x286>
 801041a:	1b87      	subs	r7, r0, r6
 801041c:	4639      	mov	r1, r7
 801041e:	4620      	mov	r0, r4
 8010420:	f000 fee6 	bl	80111f0 <__any_on>
 8010424:	4682      	mov	sl, r0
 8010426:	b1a8      	cbz	r0, 8010454 <__gethex+0x1f8>
 8010428:	1e7b      	subs	r3, r7, #1
 801042a:	1159      	asrs	r1, r3, #5
 801042c:	f003 021f 	and.w	r2, r3, #31
 8010430:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8010434:	f04f 0a01 	mov.w	sl, #1
 8010438:	fa0a f202 	lsl.w	r2, sl, r2
 801043c:	420a      	tst	r2, r1
 801043e:	d009      	beq.n	8010454 <__gethex+0x1f8>
 8010440:	4553      	cmp	r3, sl
 8010442:	dd05      	ble.n	8010450 <__gethex+0x1f4>
 8010444:	1eb9      	subs	r1, r7, #2
 8010446:	4620      	mov	r0, r4
 8010448:	f000 fed2 	bl	80111f0 <__any_on>
 801044c:	2800      	cmp	r0, #0
 801044e:	d145      	bne.n	80104dc <__gethex+0x280>
 8010450:	f04f 0a02 	mov.w	sl, #2
 8010454:	4639      	mov	r1, r7
 8010456:	4620      	mov	r0, r4
 8010458:	f7ff fe98 	bl	801018c <rshift>
 801045c:	443d      	add	r5, r7
 801045e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010462:	42ab      	cmp	r3, r5
 8010464:	da4c      	bge.n	8010500 <__gethex+0x2a4>
 8010466:	ee18 0a10 	vmov	r0, s16
 801046a:	4621      	mov	r1, r4
 801046c:	f000 fa60 	bl	8010930 <_Bfree>
 8010470:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010472:	2300      	movs	r3, #0
 8010474:	6013      	str	r3, [r2, #0]
 8010476:	27a3      	movs	r7, #163	; 0xa3
 8010478:	e785      	b.n	8010386 <__gethex+0x12a>
 801047a:	1e73      	subs	r3, r6, #1
 801047c:	9a05      	ldr	r2, [sp, #20]
 801047e:	9303      	str	r3, [sp, #12]
 8010480:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010484:	4293      	cmp	r3, r2
 8010486:	d019      	beq.n	80104bc <__gethex+0x260>
 8010488:	f1bb 0f20 	cmp.w	fp, #32
 801048c:	d107      	bne.n	801049e <__gethex+0x242>
 801048e:	9b02      	ldr	r3, [sp, #8]
 8010490:	9a00      	ldr	r2, [sp, #0]
 8010492:	f843 2b04 	str.w	r2, [r3], #4
 8010496:	9302      	str	r3, [sp, #8]
 8010498:	2300      	movs	r3, #0
 801049a:	9300      	str	r3, [sp, #0]
 801049c:	469b      	mov	fp, r3
 801049e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80104a2:	f7ff fec5 	bl	8010230 <__hexdig_fun>
 80104a6:	9b00      	ldr	r3, [sp, #0]
 80104a8:	f000 000f 	and.w	r0, r0, #15
 80104ac:	fa00 f00b 	lsl.w	r0, r0, fp
 80104b0:	4303      	orrs	r3, r0
 80104b2:	9300      	str	r3, [sp, #0]
 80104b4:	f10b 0b04 	add.w	fp, fp, #4
 80104b8:	9b03      	ldr	r3, [sp, #12]
 80104ba:	e00d      	b.n	80104d8 <__gethex+0x27c>
 80104bc:	9b03      	ldr	r3, [sp, #12]
 80104be:	9a06      	ldr	r2, [sp, #24]
 80104c0:	4413      	add	r3, r2
 80104c2:	42bb      	cmp	r3, r7
 80104c4:	d3e0      	bcc.n	8010488 <__gethex+0x22c>
 80104c6:	4618      	mov	r0, r3
 80104c8:	9901      	ldr	r1, [sp, #4]
 80104ca:	9307      	str	r3, [sp, #28]
 80104cc:	4652      	mov	r2, sl
 80104ce:	f7fe f8c2 	bl	800e656 <strncmp>
 80104d2:	9b07      	ldr	r3, [sp, #28]
 80104d4:	2800      	cmp	r0, #0
 80104d6:	d1d7      	bne.n	8010488 <__gethex+0x22c>
 80104d8:	461e      	mov	r6, r3
 80104da:	e78b      	b.n	80103f4 <__gethex+0x198>
 80104dc:	f04f 0a03 	mov.w	sl, #3
 80104e0:	e7b8      	b.n	8010454 <__gethex+0x1f8>
 80104e2:	da0a      	bge.n	80104fa <__gethex+0x29e>
 80104e4:	1a37      	subs	r7, r6, r0
 80104e6:	4621      	mov	r1, r4
 80104e8:	ee18 0a10 	vmov	r0, s16
 80104ec:	463a      	mov	r2, r7
 80104ee:	f000 fc3b 	bl	8010d68 <__lshift>
 80104f2:	1bed      	subs	r5, r5, r7
 80104f4:	4604      	mov	r4, r0
 80104f6:	f100 0914 	add.w	r9, r0, #20
 80104fa:	f04f 0a00 	mov.w	sl, #0
 80104fe:	e7ae      	b.n	801045e <__gethex+0x202>
 8010500:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8010504:	42a8      	cmp	r0, r5
 8010506:	dd72      	ble.n	80105ee <__gethex+0x392>
 8010508:	1b45      	subs	r5, r0, r5
 801050a:	42ae      	cmp	r6, r5
 801050c:	dc36      	bgt.n	801057c <__gethex+0x320>
 801050e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010512:	2b02      	cmp	r3, #2
 8010514:	d02a      	beq.n	801056c <__gethex+0x310>
 8010516:	2b03      	cmp	r3, #3
 8010518:	d02c      	beq.n	8010574 <__gethex+0x318>
 801051a:	2b01      	cmp	r3, #1
 801051c:	d11c      	bne.n	8010558 <__gethex+0x2fc>
 801051e:	42ae      	cmp	r6, r5
 8010520:	d11a      	bne.n	8010558 <__gethex+0x2fc>
 8010522:	2e01      	cmp	r6, #1
 8010524:	d112      	bne.n	801054c <__gethex+0x2f0>
 8010526:	9a04      	ldr	r2, [sp, #16]
 8010528:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801052c:	6013      	str	r3, [r2, #0]
 801052e:	2301      	movs	r3, #1
 8010530:	6123      	str	r3, [r4, #16]
 8010532:	f8c9 3000 	str.w	r3, [r9]
 8010536:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010538:	2762      	movs	r7, #98	; 0x62
 801053a:	601c      	str	r4, [r3, #0]
 801053c:	e723      	b.n	8010386 <__gethex+0x12a>
 801053e:	bf00      	nop
 8010540:	08013928 	.word	0x08013928
 8010544:	080138af 	.word	0x080138af
 8010548:	080138c0 	.word	0x080138c0
 801054c:	1e71      	subs	r1, r6, #1
 801054e:	4620      	mov	r0, r4
 8010550:	f000 fe4e 	bl	80111f0 <__any_on>
 8010554:	2800      	cmp	r0, #0
 8010556:	d1e6      	bne.n	8010526 <__gethex+0x2ca>
 8010558:	ee18 0a10 	vmov	r0, s16
 801055c:	4621      	mov	r1, r4
 801055e:	f000 f9e7 	bl	8010930 <_Bfree>
 8010562:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010564:	2300      	movs	r3, #0
 8010566:	6013      	str	r3, [r2, #0]
 8010568:	2750      	movs	r7, #80	; 0x50
 801056a:	e70c      	b.n	8010386 <__gethex+0x12a>
 801056c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801056e:	2b00      	cmp	r3, #0
 8010570:	d1f2      	bne.n	8010558 <__gethex+0x2fc>
 8010572:	e7d8      	b.n	8010526 <__gethex+0x2ca>
 8010574:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010576:	2b00      	cmp	r3, #0
 8010578:	d1d5      	bne.n	8010526 <__gethex+0x2ca>
 801057a:	e7ed      	b.n	8010558 <__gethex+0x2fc>
 801057c:	1e6f      	subs	r7, r5, #1
 801057e:	f1ba 0f00 	cmp.w	sl, #0
 8010582:	d131      	bne.n	80105e8 <__gethex+0x38c>
 8010584:	b127      	cbz	r7, 8010590 <__gethex+0x334>
 8010586:	4639      	mov	r1, r7
 8010588:	4620      	mov	r0, r4
 801058a:	f000 fe31 	bl	80111f0 <__any_on>
 801058e:	4682      	mov	sl, r0
 8010590:	117b      	asrs	r3, r7, #5
 8010592:	2101      	movs	r1, #1
 8010594:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8010598:	f007 071f 	and.w	r7, r7, #31
 801059c:	fa01 f707 	lsl.w	r7, r1, r7
 80105a0:	421f      	tst	r7, r3
 80105a2:	4629      	mov	r1, r5
 80105a4:	4620      	mov	r0, r4
 80105a6:	bf18      	it	ne
 80105a8:	f04a 0a02 	orrne.w	sl, sl, #2
 80105ac:	1b76      	subs	r6, r6, r5
 80105ae:	f7ff fded 	bl	801018c <rshift>
 80105b2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80105b6:	2702      	movs	r7, #2
 80105b8:	f1ba 0f00 	cmp.w	sl, #0
 80105bc:	d048      	beq.n	8010650 <__gethex+0x3f4>
 80105be:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80105c2:	2b02      	cmp	r3, #2
 80105c4:	d015      	beq.n	80105f2 <__gethex+0x396>
 80105c6:	2b03      	cmp	r3, #3
 80105c8:	d017      	beq.n	80105fa <__gethex+0x39e>
 80105ca:	2b01      	cmp	r3, #1
 80105cc:	d109      	bne.n	80105e2 <__gethex+0x386>
 80105ce:	f01a 0f02 	tst.w	sl, #2
 80105d2:	d006      	beq.n	80105e2 <__gethex+0x386>
 80105d4:	f8d9 0000 	ldr.w	r0, [r9]
 80105d8:	ea4a 0a00 	orr.w	sl, sl, r0
 80105dc:	f01a 0f01 	tst.w	sl, #1
 80105e0:	d10e      	bne.n	8010600 <__gethex+0x3a4>
 80105e2:	f047 0710 	orr.w	r7, r7, #16
 80105e6:	e033      	b.n	8010650 <__gethex+0x3f4>
 80105e8:	f04f 0a01 	mov.w	sl, #1
 80105ec:	e7d0      	b.n	8010590 <__gethex+0x334>
 80105ee:	2701      	movs	r7, #1
 80105f0:	e7e2      	b.n	80105b8 <__gethex+0x35c>
 80105f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80105f4:	f1c3 0301 	rsb	r3, r3, #1
 80105f8:	9315      	str	r3, [sp, #84]	; 0x54
 80105fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d0f0      	beq.n	80105e2 <__gethex+0x386>
 8010600:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8010604:	f104 0314 	add.w	r3, r4, #20
 8010608:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801060c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8010610:	f04f 0c00 	mov.w	ip, #0
 8010614:	4618      	mov	r0, r3
 8010616:	f853 2b04 	ldr.w	r2, [r3], #4
 801061a:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 801061e:	d01c      	beq.n	801065a <__gethex+0x3fe>
 8010620:	3201      	adds	r2, #1
 8010622:	6002      	str	r2, [r0, #0]
 8010624:	2f02      	cmp	r7, #2
 8010626:	f104 0314 	add.w	r3, r4, #20
 801062a:	d13f      	bne.n	80106ac <__gethex+0x450>
 801062c:	f8d8 2000 	ldr.w	r2, [r8]
 8010630:	3a01      	subs	r2, #1
 8010632:	42b2      	cmp	r2, r6
 8010634:	d10a      	bne.n	801064c <__gethex+0x3f0>
 8010636:	1171      	asrs	r1, r6, #5
 8010638:	2201      	movs	r2, #1
 801063a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801063e:	f006 061f 	and.w	r6, r6, #31
 8010642:	fa02 f606 	lsl.w	r6, r2, r6
 8010646:	421e      	tst	r6, r3
 8010648:	bf18      	it	ne
 801064a:	4617      	movne	r7, r2
 801064c:	f047 0720 	orr.w	r7, r7, #32
 8010650:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010652:	601c      	str	r4, [r3, #0]
 8010654:	9b04      	ldr	r3, [sp, #16]
 8010656:	601d      	str	r5, [r3, #0]
 8010658:	e695      	b.n	8010386 <__gethex+0x12a>
 801065a:	4299      	cmp	r1, r3
 801065c:	f843 cc04 	str.w	ip, [r3, #-4]
 8010660:	d8d8      	bhi.n	8010614 <__gethex+0x3b8>
 8010662:	68a3      	ldr	r3, [r4, #8]
 8010664:	459b      	cmp	fp, r3
 8010666:	db19      	blt.n	801069c <__gethex+0x440>
 8010668:	6861      	ldr	r1, [r4, #4]
 801066a:	ee18 0a10 	vmov	r0, s16
 801066e:	3101      	adds	r1, #1
 8010670:	f000 f91e 	bl	80108b0 <_Balloc>
 8010674:	4681      	mov	r9, r0
 8010676:	b918      	cbnz	r0, 8010680 <__gethex+0x424>
 8010678:	4b1a      	ldr	r3, [pc, #104]	; (80106e4 <__gethex+0x488>)
 801067a:	4602      	mov	r2, r0
 801067c:	2184      	movs	r1, #132	; 0x84
 801067e:	e6a8      	b.n	80103d2 <__gethex+0x176>
 8010680:	6922      	ldr	r2, [r4, #16]
 8010682:	3202      	adds	r2, #2
 8010684:	f104 010c 	add.w	r1, r4, #12
 8010688:	0092      	lsls	r2, r2, #2
 801068a:	300c      	adds	r0, #12
 801068c:	f7fd fb36 	bl	800dcfc <memcpy>
 8010690:	4621      	mov	r1, r4
 8010692:	ee18 0a10 	vmov	r0, s16
 8010696:	f000 f94b 	bl	8010930 <_Bfree>
 801069a:	464c      	mov	r4, r9
 801069c:	6923      	ldr	r3, [r4, #16]
 801069e:	1c5a      	adds	r2, r3, #1
 80106a0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80106a4:	6122      	str	r2, [r4, #16]
 80106a6:	2201      	movs	r2, #1
 80106a8:	615a      	str	r2, [r3, #20]
 80106aa:	e7bb      	b.n	8010624 <__gethex+0x3c8>
 80106ac:	6922      	ldr	r2, [r4, #16]
 80106ae:	455a      	cmp	r2, fp
 80106b0:	dd0b      	ble.n	80106ca <__gethex+0x46e>
 80106b2:	2101      	movs	r1, #1
 80106b4:	4620      	mov	r0, r4
 80106b6:	f7ff fd69 	bl	801018c <rshift>
 80106ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80106be:	3501      	adds	r5, #1
 80106c0:	42ab      	cmp	r3, r5
 80106c2:	f6ff aed0 	blt.w	8010466 <__gethex+0x20a>
 80106c6:	2701      	movs	r7, #1
 80106c8:	e7c0      	b.n	801064c <__gethex+0x3f0>
 80106ca:	f016 061f 	ands.w	r6, r6, #31
 80106ce:	d0fa      	beq.n	80106c6 <__gethex+0x46a>
 80106d0:	4453      	add	r3, sl
 80106d2:	f1c6 0620 	rsb	r6, r6, #32
 80106d6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80106da:	f000 f9db 	bl	8010a94 <__hi0bits>
 80106de:	42b0      	cmp	r0, r6
 80106e0:	dbe7      	blt.n	80106b2 <__gethex+0x456>
 80106e2:	e7f0      	b.n	80106c6 <__gethex+0x46a>
 80106e4:	080138af 	.word	0x080138af

080106e8 <L_shift>:
 80106e8:	f1c2 0208 	rsb	r2, r2, #8
 80106ec:	0092      	lsls	r2, r2, #2
 80106ee:	b570      	push	{r4, r5, r6, lr}
 80106f0:	f1c2 0620 	rsb	r6, r2, #32
 80106f4:	6843      	ldr	r3, [r0, #4]
 80106f6:	6804      	ldr	r4, [r0, #0]
 80106f8:	fa03 f506 	lsl.w	r5, r3, r6
 80106fc:	432c      	orrs	r4, r5
 80106fe:	40d3      	lsrs	r3, r2
 8010700:	6004      	str	r4, [r0, #0]
 8010702:	f840 3f04 	str.w	r3, [r0, #4]!
 8010706:	4288      	cmp	r0, r1
 8010708:	d3f4      	bcc.n	80106f4 <L_shift+0xc>
 801070a:	bd70      	pop	{r4, r5, r6, pc}

0801070c <__match>:
 801070c:	b530      	push	{r4, r5, lr}
 801070e:	6803      	ldr	r3, [r0, #0]
 8010710:	3301      	adds	r3, #1
 8010712:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010716:	b914      	cbnz	r4, 801071e <__match+0x12>
 8010718:	6003      	str	r3, [r0, #0]
 801071a:	2001      	movs	r0, #1
 801071c:	bd30      	pop	{r4, r5, pc}
 801071e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010722:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8010726:	2d19      	cmp	r5, #25
 8010728:	bf98      	it	ls
 801072a:	3220      	addls	r2, #32
 801072c:	42a2      	cmp	r2, r4
 801072e:	d0f0      	beq.n	8010712 <__match+0x6>
 8010730:	2000      	movs	r0, #0
 8010732:	e7f3      	b.n	801071c <__match+0x10>

08010734 <__hexnan>:
 8010734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010738:	680b      	ldr	r3, [r1, #0]
 801073a:	115e      	asrs	r6, r3, #5
 801073c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010740:	f013 031f 	ands.w	r3, r3, #31
 8010744:	b087      	sub	sp, #28
 8010746:	bf18      	it	ne
 8010748:	3604      	addne	r6, #4
 801074a:	2500      	movs	r5, #0
 801074c:	1f37      	subs	r7, r6, #4
 801074e:	4690      	mov	r8, r2
 8010750:	6802      	ldr	r2, [r0, #0]
 8010752:	9301      	str	r3, [sp, #4]
 8010754:	4682      	mov	sl, r0
 8010756:	f846 5c04 	str.w	r5, [r6, #-4]
 801075a:	46b9      	mov	r9, r7
 801075c:	463c      	mov	r4, r7
 801075e:	9502      	str	r5, [sp, #8]
 8010760:	46ab      	mov	fp, r5
 8010762:	7851      	ldrb	r1, [r2, #1]
 8010764:	1c53      	adds	r3, r2, #1
 8010766:	9303      	str	r3, [sp, #12]
 8010768:	b341      	cbz	r1, 80107bc <__hexnan+0x88>
 801076a:	4608      	mov	r0, r1
 801076c:	9205      	str	r2, [sp, #20]
 801076e:	9104      	str	r1, [sp, #16]
 8010770:	f7ff fd5e 	bl	8010230 <__hexdig_fun>
 8010774:	2800      	cmp	r0, #0
 8010776:	d14f      	bne.n	8010818 <__hexnan+0xe4>
 8010778:	9904      	ldr	r1, [sp, #16]
 801077a:	9a05      	ldr	r2, [sp, #20]
 801077c:	2920      	cmp	r1, #32
 801077e:	d818      	bhi.n	80107b2 <__hexnan+0x7e>
 8010780:	9b02      	ldr	r3, [sp, #8]
 8010782:	459b      	cmp	fp, r3
 8010784:	dd13      	ble.n	80107ae <__hexnan+0x7a>
 8010786:	454c      	cmp	r4, r9
 8010788:	d206      	bcs.n	8010798 <__hexnan+0x64>
 801078a:	2d07      	cmp	r5, #7
 801078c:	dc04      	bgt.n	8010798 <__hexnan+0x64>
 801078e:	462a      	mov	r2, r5
 8010790:	4649      	mov	r1, r9
 8010792:	4620      	mov	r0, r4
 8010794:	f7ff ffa8 	bl	80106e8 <L_shift>
 8010798:	4544      	cmp	r4, r8
 801079a:	d950      	bls.n	801083e <__hexnan+0x10a>
 801079c:	2300      	movs	r3, #0
 801079e:	f1a4 0904 	sub.w	r9, r4, #4
 80107a2:	f844 3c04 	str.w	r3, [r4, #-4]
 80107a6:	f8cd b008 	str.w	fp, [sp, #8]
 80107aa:	464c      	mov	r4, r9
 80107ac:	461d      	mov	r5, r3
 80107ae:	9a03      	ldr	r2, [sp, #12]
 80107b0:	e7d7      	b.n	8010762 <__hexnan+0x2e>
 80107b2:	2929      	cmp	r1, #41	; 0x29
 80107b4:	d156      	bne.n	8010864 <__hexnan+0x130>
 80107b6:	3202      	adds	r2, #2
 80107b8:	f8ca 2000 	str.w	r2, [sl]
 80107bc:	f1bb 0f00 	cmp.w	fp, #0
 80107c0:	d050      	beq.n	8010864 <__hexnan+0x130>
 80107c2:	454c      	cmp	r4, r9
 80107c4:	d206      	bcs.n	80107d4 <__hexnan+0xa0>
 80107c6:	2d07      	cmp	r5, #7
 80107c8:	dc04      	bgt.n	80107d4 <__hexnan+0xa0>
 80107ca:	462a      	mov	r2, r5
 80107cc:	4649      	mov	r1, r9
 80107ce:	4620      	mov	r0, r4
 80107d0:	f7ff ff8a 	bl	80106e8 <L_shift>
 80107d4:	4544      	cmp	r4, r8
 80107d6:	d934      	bls.n	8010842 <__hexnan+0x10e>
 80107d8:	f1a8 0204 	sub.w	r2, r8, #4
 80107dc:	4623      	mov	r3, r4
 80107de:	f853 1b04 	ldr.w	r1, [r3], #4
 80107e2:	f842 1f04 	str.w	r1, [r2, #4]!
 80107e6:	429f      	cmp	r7, r3
 80107e8:	d2f9      	bcs.n	80107de <__hexnan+0xaa>
 80107ea:	1b3b      	subs	r3, r7, r4
 80107ec:	f023 0303 	bic.w	r3, r3, #3
 80107f0:	3304      	adds	r3, #4
 80107f2:	3401      	adds	r4, #1
 80107f4:	3e03      	subs	r6, #3
 80107f6:	42b4      	cmp	r4, r6
 80107f8:	bf88      	it	hi
 80107fa:	2304      	movhi	r3, #4
 80107fc:	4443      	add	r3, r8
 80107fe:	2200      	movs	r2, #0
 8010800:	f843 2b04 	str.w	r2, [r3], #4
 8010804:	429f      	cmp	r7, r3
 8010806:	d2fb      	bcs.n	8010800 <__hexnan+0xcc>
 8010808:	683b      	ldr	r3, [r7, #0]
 801080a:	b91b      	cbnz	r3, 8010814 <__hexnan+0xe0>
 801080c:	4547      	cmp	r7, r8
 801080e:	d127      	bne.n	8010860 <__hexnan+0x12c>
 8010810:	2301      	movs	r3, #1
 8010812:	603b      	str	r3, [r7, #0]
 8010814:	2005      	movs	r0, #5
 8010816:	e026      	b.n	8010866 <__hexnan+0x132>
 8010818:	3501      	adds	r5, #1
 801081a:	2d08      	cmp	r5, #8
 801081c:	f10b 0b01 	add.w	fp, fp, #1
 8010820:	dd06      	ble.n	8010830 <__hexnan+0xfc>
 8010822:	4544      	cmp	r4, r8
 8010824:	d9c3      	bls.n	80107ae <__hexnan+0x7a>
 8010826:	2300      	movs	r3, #0
 8010828:	f844 3c04 	str.w	r3, [r4, #-4]
 801082c:	2501      	movs	r5, #1
 801082e:	3c04      	subs	r4, #4
 8010830:	6822      	ldr	r2, [r4, #0]
 8010832:	f000 000f 	and.w	r0, r0, #15
 8010836:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801083a:	6022      	str	r2, [r4, #0]
 801083c:	e7b7      	b.n	80107ae <__hexnan+0x7a>
 801083e:	2508      	movs	r5, #8
 8010840:	e7b5      	b.n	80107ae <__hexnan+0x7a>
 8010842:	9b01      	ldr	r3, [sp, #4]
 8010844:	2b00      	cmp	r3, #0
 8010846:	d0df      	beq.n	8010808 <__hexnan+0xd4>
 8010848:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801084c:	f1c3 0320 	rsb	r3, r3, #32
 8010850:	fa22 f303 	lsr.w	r3, r2, r3
 8010854:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8010858:	401a      	ands	r2, r3
 801085a:	f846 2c04 	str.w	r2, [r6, #-4]
 801085e:	e7d3      	b.n	8010808 <__hexnan+0xd4>
 8010860:	3f04      	subs	r7, #4
 8010862:	e7d1      	b.n	8010808 <__hexnan+0xd4>
 8010864:	2004      	movs	r0, #4
 8010866:	b007      	add	sp, #28
 8010868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801086c <_localeconv_r>:
 801086c:	4800      	ldr	r0, [pc, #0]	; (8010870 <_localeconv_r+0x4>)
 801086e:	4770      	bx	lr
 8010870:	20000370 	.word	0x20000370

08010874 <__retarget_lock_init_recursive>:
 8010874:	4770      	bx	lr

08010876 <__retarget_lock_acquire_recursive>:
 8010876:	4770      	bx	lr

08010878 <__retarget_lock_release_recursive>:
 8010878:	4770      	bx	lr
	...

0801087c <malloc>:
 801087c:	4b02      	ldr	r3, [pc, #8]	; (8010888 <malloc+0xc>)
 801087e:	4601      	mov	r1, r0
 8010880:	6818      	ldr	r0, [r3, #0]
 8010882:	f000 bd59 	b.w	8011338 <_malloc_r>
 8010886:	bf00      	nop
 8010888:	20000218 	.word	0x20000218

0801088c <__ascii_mbtowc>:
 801088c:	b082      	sub	sp, #8
 801088e:	b901      	cbnz	r1, 8010892 <__ascii_mbtowc+0x6>
 8010890:	a901      	add	r1, sp, #4
 8010892:	b142      	cbz	r2, 80108a6 <__ascii_mbtowc+0x1a>
 8010894:	b14b      	cbz	r3, 80108aa <__ascii_mbtowc+0x1e>
 8010896:	7813      	ldrb	r3, [r2, #0]
 8010898:	600b      	str	r3, [r1, #0]
 801089a:	7812      	ldrb	r2, [r2, #0]
 801089c:	1e10      	subs	r0, r2, #0
 801089e:	bf18      	it	ne
 80108a0:	2001      	movne	r0, #1
 80108a2:	b002      	add	sp, #8
 80108a4:	4770      	bx	lr
 80108a6:	4610      	mov	r0, r2
 80108a8:	e7fb      	b.n	80108a2 <__ascii_mbtowc+0x16>
 80108aa:	f06f 0001 	mvn.w	r0, #1
 80108ae:	e7f8      	b.n	80108a2 <__ascii_mbtowc+0x16>

080108b0 <_Balloc>:
 80108b0:	b570      	push	{r4, r5, r6, lr}
 80108b2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80108b4:	4604      	mov	r4, r0
 80108b6:	460d      	mov	r5, r1
 80108b8:	b976      	cbnz	r6, 80108d8 <_Balloc+0x28>
 80108ba:	2010      	movs	r0, #16
 80108bc:	f7ff ffde 	bl	801087c <malloc>
 80108c0:	4602      	mov	r2, r0
 80108c2:	6260      	str	r0, [r4, #36]	; 0x24
 80108c4:	b920      	cbnz	r0, 80108d0 <_Balloc+0x20>
 80108c6:	4b18      	ldr	r3, [pc, #96]	; (8010928 <_Balloc+0x78>)
 80108c8:	4818      	ldr	r0, [pc, #96]	; (801092c <_Balloc+0x7c>)
 80108ca:	2166      	movs	r1, #102	; 0x66
 80108cc:	f000 ff7e 	bl	80117cc <__assert_func>
 80108d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80108d4:	6006      	str	r6, [r0, #0]
 80108d6:	60c6      	str	r6, [r0, #12]
 80108d8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80108da:	68f3      	ldr	r3, [r6, #12]
 80108dc:	b183      	cbz	r3, 8010900 <_Balloc+0x50>
 80108de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80108e0:	68db      	ldr	r3, [r3, #12]
 80108e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80108e6:	b9b8      	cbnz	r0, 8010918 <_Balloc+0x68>
 80108e8:	2101      	movs	r1, #1
 80108ea:	fa01 f605 	lsl.w	r6, r1, r5
 80108ee:	1d72      	adds	r2, r6, #5
 80108f0:	0092      	lsls	r2, r2, #2
 80108f2:	4620      	mov	r0, r4
 80108f4:	f000 fc9d 	bl	8011232 <_calloc_r>
 80108f8:	b160      	cbz	r0, 8010914 <_Balloc+0x64>
 80108fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80108fe:	e00e      	b.n	801091e <_Balloc+0x6e>
 8010900:	2221      	movs	r2, #33	; 0x21
 8010902:	2104      	movs	r1, #4
 8010904:	4620      	mov	r0, r4
 8010906:	f000 fc94 	bl	8011232 <_calloc_r>
 801090a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801090c:	60f0      	str	r0, [r6, #12]
 801090e:	68db      	ldr	r3, [r3, #12]
 8010910:	2b00      	cmp	r3, #0
 8010912:	d1e4      	bne.n	80108de <_Balloc+0x2e>
 8010914:	2000      	movs	r0, #0
 8010916:	bd70      	pop	{r4, r5, r6, pc}
 8010918:	6802      	ldr	r2, [r0, #0]
 801091a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801091e:	2300      	movs	r3, #0
 8010920:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010924:	e7f7      	b.n	8010916 <_Balloc+0x66>
 8010926:	bf00      	nop
 8010928:	0801383d 	.word	0x0801383d
 801092c:	0801393c 	.word	0x0801393c

08010930 <_Bfree>:
 8010930:	b570      	push	{r4, r5, r6, lr}
 8010932:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010934:	4605      	mov	r5, r0
 8010936:	460c      	mov	r4, r1
 8010938:	b976      	cbnz	r6, 8010958 <_Bfree+0x28>
 801093a:	2010      	movs	r0, #16
 801093c:	f7ff ff9e 	bl	801087c <malloc>
 8010940:	4602      	mov	r2, r0
 8010942:	6268      	str	r0, [r5, #36]	; 0x24
 8010944:	b920      	cbnz	r0, 8010950 <_Bfree+0x20>
 8010946:	4b09      	ldr	r3, [pc, #36]	; (801096c <_Bfree+0x3c>)
 8010948:	4809      	ldr	r0, [pc, #36]	; (8010970 <_Bfree+0x40>)
 801094a:	218a      	movs	r1, #138	; 0x8a
 801094c:	f000 ff3e 	bl	80117cc <__assert_func>
 8010950:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010954:	6006      	str	r6, [r0, #0]
 8010956:	60c6      	str	r6, [r0, #12]
 8010958:	b13c      	cbz	r4, 801096a <_Bfree+0x3a>
 801095a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801095c:	6862      	ldr	r2, [r4, #4]
 801095e:	68db      	ldr	r3, [r3, #12]
 8010960:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010964:	6021      	str	r1, [r4, #0]
 8010966:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801096a:	bd70      	pop	{r4, r5, r6, pc}
 801096c:	0801383d 	.word	0x0801383d
 8010970:	0801393c 	.word	0x0801393c

08010974 <__multadd>:
 8010974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010978:	690d      	ldr	r5, [r1, #16]
 801097a:	4607      	mov	r7, r0
 801097c:	460c      	mov	r4, r1
 801097e:	461e      	mov	r6, r3
 8010980:	f101 0c14 	add.w	ip, r1, #20
 8010984:	2000      	movs	r0, #0
 8010986:	f8dc 3000 	ldr.w	r3, [ip]
 801098a:	b299      	uxth	r1, r3
 801098c:	fb02 6101 	mla	r1, r2, r1, r6
 8010990:	0c1e      	lsrs	r6, r3, #16
 8010992:	0c0b      	lsrs	r3, r1, #16
 8010994:	fb02 3306 	mla	r3, r2, r6, r3
 8010998:	b289      	uxth	r1, r1
 801099a:	3001      	adds	r0, #1
 801099c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80109a0:	4285      	cmp	r5, r0
 80109a2:	f84c 1b04 	str.w	r1, [ip], #4
 80109a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80109aa:	dcec      	bgt.n	8010986 <__multadd+0x12>
 80109ac:	b30e      	cbz	r6, 80109f2 <__multadd+0x7e>
 80109ae:	68a3      	ldr	r3, [r4, #8]
 80109b0:	42ab      	cmp	r3, r5
 80109b2:	dc19      	bgt.n	80109e8 <__multadd+0x74>
 80109b4:	6861      	ldr	r1, [r4, #4]
 80109b6:	4638      	mov	r0, r7
 80109b8:	3101      	adds	r1, #1
 80109ba:	f7ff ff79 	bl	80108b0 <_Balloc>
 80109be:	4680      	mov	r8, r0
 80109c0:	b928      	cbnz	r0, 80109ce <__multadd+0x5a>
 80109c2:	4602      	mov	r2, r0
 80109c4:	4b0c      	ldr	r3, [pc, #48]	; (80109f8 <__multadd+0x84>)
 80109c6:	480d      	ldr	r0, [pc, #52]	; (80109fc <__multadd+0x88>)
 80109c8:	21b5      	movs	r1, #181	; 0xb5
 80109ca:	f000 feff 	bl	80117cc <__assert_func>
 80109ce:	6922      	ldr	r2, [r4, #16]
 80109d0:	3202      	adds	r2, #2
 80109d2:	f104 010c 	add.w	r1, r4, #12
 80109d6:	0092      	lsls	r2, r2, #2
 80109d8:	300c      	adds	r0, #12
 80109da:	f7fd f98f 	bl	800dcfc <memcpy>
 80109de:	4621      	mov	r1, r4
 80109e0:	4638      	mov	r0, r7
 80109e2:	f7ff ffa5 	bl	8010930 <_Bfree>
 80109e6:	4644      	mov	r4, r8
 80109e8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80109ec:	3501      	adds	r5, #1
 80109ee:	615e      	str	r6, [r3, #20]
 80109f0:	6125      	str	r5, [r4, #16]
 80109f2:	4620      	mov	r0, r4
 80109f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80109f8:	080138af 	.word	0x080138af
 80109fc:	0801393c 	.word	0x0801393c

08010a00 <__s2b>:
 8010a00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010a04:	460c      	mov	r4, r1
 8010a06:	4615      	mov	r5, r2
 8010a08:	461f      	mov	r7, r3
 8010a0a:	2209      	movs	r2, #9
 8010a0c:	3308      	adds	r3, #8
 8010a0e:	4606      	mov	r6, r0
 8010a10:	fb93 f3f2 	sdiv	r3, r3, r2
 8010a14:	2100      	movs	r1, #0
 8010a16:	2201      	movs	r2, #1
 8010a18:	429a      	cmp	r2, r3
 8010a1a:	db09      	blt.n	8010a30 <__s2b+0x30>
 8010a1c:	4630      	mov	r0, r6
 8010a1e:	f7ff ff47 	bl	80108b0 <_Balloc>
 8010a22:	b940      	cbnz	r0, 8010a36 <__s2b+0x36>
 8010a24:	4602      	mov	r2, r0
 8010a26:	4b19      	ldr	r3, [pc, #100]	; (8010a8c <__s2b+0x8c>)
 8010a28:	4819      	ldr	r0, [pc, #100]	; (8010a90 <__s2b+0x90>)
 8010a2a:	21ce      	movs	r1, #206	; 0xce
 8010a2c:	f000 fece 	bl	80117cc <__assert_func>
 8010a30:	0052      	lsls	r2, r2, #1
 8010a32:	3101      	adds	r1, #1
 8010a34:	e7f0      	b.n	8010a18 <__s2b+0x18>
 8010a36:	9b08      	ldr	r3, [sp, #32]
 8010a38:	6143      	str	r3, [r0, #20]
 8010a3a:	2d09      	cmp	r5, #9
 8010a3c:	f04f 0301 	mov.w	r3, #1
 8010a40:	6103      	str	r3, [r0, #16]
 8010a42:	dd16      	ble.n	8010a72 <__s2b+0x72>
 8010a44:	f104 0909 	add.w	r9, r4, #9
 8010a48:	46c8      	mov	r8, r9
 8010a4a:	442c      	add	r4, r5
 8010a4c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8010a50:	4601      	mov	r1, r0
 8010a52:	3b30      	subs	r3, #48	; 0x30
 8010a54:	220a      	movs	r2, #10
 8010a56:	4630      	mov	r0, r6
 8010a58:	f7ff ff8c 	bl	8010974 <__multadd>
 8010a5c:	45a0      	cmp	r8, r4
 8010a5e:	d1f5      	bne.n	8010a4c <__s2b+0x4c>
 8010a60:	f1a5 0408 	sub.w	r4, r5, #8
 8010a64:	444c      	add	r4, r9
 8010a66:	1b2d      	subs	r5, r5, r4
 8010a68:	1963      	adds	r3, r4, r5
 8010a6a:	42bb      	cmp	r3, r7
 8010a6c:	db04      	blt.n	8010a78 <__s2b+0x78>
 8010a6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010a72:	340a      	adds	r4, #10
 8010a74:	2509      	movs	r5, #9
 8010a76:	e7f6      	b.n	8010a66 <__s2b+0x66>
 8010a78:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010a7c:	4601      	mov	r1, r0
 8010a7e:	3b30      	subs	r3, #48	; 0x30
 8010a80:	220a      	movs	r2, #10
 8010a82:	4630      	mov	r0, r6
 8010a84:	f7ff ff76 	bl	8010974 <__multadd>
 8010a88:	e7ee      	b.n	8010a68 <__s2b+0x68>
 8010a8a:	bf00      	nop
 8010a8c:	080138af 	.word	0x080138af
 8010a90:	0801393c 	.word	0x0801393c

08010a94 <__hi0bits>:
 8010a94:	0c03      	lsrs	r3, r0, #16
 8010a96:	041b      	lsls	r3, r3, #16
 8010a98:	b9d3      	cbnz	r3, 8010ad0 <__hi0bits+0x3c>
 8010a9a:	0400      	lsls	r0, r0, #16
 8010a9c:	2310      	movs	r3, #16
 8010a9e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8010aa2:	bf04      	itt	eq
 8010aa4:	0200      	lsleq	r0, r0, #8
 8010aa6:	3308      	addeq	r3, #8
 8010aa8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010aac:	bf04      	itt	eq
 8010aae:	0100      	lsleq	r0, r0, #4
 8010ab0:	3304      	addeq	r3, #4
 8010ab2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8010ab6:	bf04      	itt	eq
 8010ab8:	0080      	lsleq	r0, r0, #2
 8010aba:	3302      	addeq	r3, #2
 8010abc:	2800      	cmp	r0, #0
 8010abe:	db05      	blt.n	8010acc <__hi0bits+0x38>
 8010ac0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010ac4:	f103 0301 	add.w	r3, r3, #1
 8010ac8:	bf08      	it	eq
 8010aca:	2320      	moveq	r3, #32
 8010acc:	4618      	mov	r0, r3
 8010ace:	4770      	bx	lr
 8010ad0:	2300      	movs	r3, #0
 8010ad2:	e7e4      	b.n	8010a9e <__hi0bits+0xa>

08010ad4 <__lo0bits>:
 8010ad4:	6803      	ldr	r3, [r0, #0]
 8010ad6:	f013 0207 	ands.w	r2, r3, #7
 8010ada:	4601      	mov	r1, r0
 8010adc:	d00b      	beq.n	8010af6 <__lo0bits+0x22>
 8010ade:	07da      	lsls	r2, r3, #31
 8010ae0:	d423      	bmi.n	8010b2a <__lo0bits+0x56>
 8010ae2:	0798      	lsls	r0, r3, #30
 8010ae4:	bf49      	itett	mi
 8010ae6:	085b      	lsrmi	r3, r3, #1
 8010ae8:	089b      	lsrpl	r3, r3, #2
 8010aea:	2001      	movmi	r0, #1
 8010aec:	600b      	strmi	r3, [r1, #0]
 8010aee:	bf5c      	itt	pl
 8010af0:	600b      	strpl	r3, [r1, #0]
 8010af2:	2002      	movpl	r0, #2
 8010af4:	4770      	bx	lr
 8010af6:	b298      	uxth	r0, r3
 8010af8:	b9a8      	cbnz	r0, 8010b26 <__lo0bits+0x52>
 8010afa:	0c1b      	lsrs	r3, r3, #16
 8010afc:	2010      	movs	r0, #16
 8010afe:	b2da      	uxtb	r2, r3
 8010b00:	b90a      	cbnz	r2, 8010b06 <__lo0bits+0x32>
 8010b02:	3008      	adds	r0, #8
 8010b04:	0a1b      	lsrs	r3, r3, #8
 8010b06:	071a      	lsls	r2, r3, #28
 8010b08:	bf04      	itt	eq
 8010b0a:	091b      	lsreq	r3, r3, #4
 8010b0c:	3004      	addeq	r0, #4
 8010b0e:	079a      	lsls	r2, r3, #30
 8010b10:	bf04      	itt	eq
 8010b12:	089b      	lsreq	r3, r3, #2
 8010b14:	3002      	addeq	r0, #2
 8010b16:	07da      	lsls	r2, r3, #31
 8010b18:	d403      	bmi.n	8010b22 <__lo0bits+0x4e>
 8010b1a:	085b      	lsrs	r3, r3, #1
 8010b1c:	f100 0001 	add.w	r0, r0, #1
 8010b20:	d005      	beq.n	8010b2e <__lo0bits+0x5a>
 8010b22:	600b      	str	r3, [r1, #0]
 8010b24:	4770      	bx	lr
 8010b26:	4610      	mov	r0, r2
 8010b28:	e7e9      	b.n	8010afe <__lo0bits+0x2a>
 8010b2a:	2000      	movs	r0, #0
 8010b2c:	4770      	bx	lr
 8010b2e:	2020      	movs	r0, #32
 8010b30:	4770      	bx	lr
	...

08010b34 <__i2b>:
 8010b34:	b510      	push	{r4, lr}
 8010b36:	460c      	mov	r4, r1
 8010b38:	2101      	movs	r1, #1
 8010b3a:	f7ff feb9 	bl	80108b0 <_Balloc>
 8010b3e:	4602      	mov	r2, r0
 8010b40:	b928      	cbnz	r0, 8010b4e <__i2b+0x1a>
 8010b42:	4b05      	ldr	r3, [pc, #20]	; (8010b58 <__i2b+0x24>)
 8010b44:	4805      	ldr	r0, [pc, #20]	; (8010b5c <__i2b+0x28>)
 8010b46:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8010b4a:	f000 fe3f 	bl	80117cc <__assert_func>
 8010b4e:	2301      	movs	r3, #1
 8010b50:	6144      	str	r4, [r0, #20]
 8010b52:	6103      	str	r3, [r0, #16]
 8010b54:	bd10      	pop	{r4, pc}
 8010b56:	bf00      	nop
 8010b58:	080138af 	.word	0x080138af
 8010b5c:	0801393c 	.word	0x0801393c

08010b60 <__multiply>:
 8010b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b64:	4691      	mov	r9, r2
 8010b66:	690a      	ldr	r2, [r1, #16]
 8010b68:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010b6c:	429a      	cmp	r2, r3
 8010b6e:	bfb8      	it	lt
 8010b70:	460b      	movlt	r3, r1
 8010b72:	460c      	mov	r4, r1
 8010b74:	bfbc      	itt	lt
 8010b76:	464c      	movlt	r4, r9
 8010b78:	4699      	movlt	r9, r3
 8010b7a:	6927      	ldr	r7, [r4, #16]
 8010b7c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010b80:	68a3      	ldr	r3, [r4, #8]
 8010b82:	6861      	ldr	r1, [r4, #4]
 8010b84:	eb07 060a 	add.w	r6, r7, sl
 8010b88:	42b3      	cmp	r3, r6
 8010b8a:	b085      	sub	sp, #20
 8010b8c:	bfb8      	it	lt
 8010b8e:	3101      	addlt	r1, #1
 8010b90:	f7ff fe8e 	bl	80108b0 <_Balloc>
 8010b94:	b930      	cbnz	r0, 8010ba4 <__multiply+0x44>
 8010b96:	4602      	mov	r2, r0
 8010b98:	4b44      	ldr	r3, [pc, #272]	; (8010cac <__multiply+0x14c>)
 8010b9a:	4845      	ldr	r0, [pc, #276]	; (8010cb0 <__multiply+0x150>)
 8010b9c:	f240 115d 	movw	r1, #349	; 0x15d
 8010ba0:	f000 fe14 	bl	80117cc <__assert_func>
 8010ba4:	f100 0514 	add.w	r5, r0, #20
 8010ba8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010bac:	462b      	mov	r3, r5
 8010bae:	2200      	movs	r2, #0
 8010bb0:	4543      	cmp	r3, r8
 8010bb2:	d321      	bcc.n	8010bf8 <__multiply+0x98>
 8010bb4:	f104 0314 	add.w	r3, r4, #20
 8010bb8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8010bbc:	f109 0314 	add.w	r3, r9, #20
 8010bc0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8010bc4:	9202      	str	r2, [sp, #8]
 8010bc6:	1b3a      	subs	r2, r7, r4
 8010bc8:	3a15      	subs	r2, #21
 8010bca:	f022 0203 	bic.w	r2, r2, #3
 8010bce:	3204      	adds	r2, #4
 8010bd0:	f104 0115 	add.w	r1, r4, #21
 8010bd4:	428f      	cmp	r7, r1
 8010bd6:	bf38      	it	cc
 8010bd8:	2204      	movcc	r2, #4
 8010bda:	9201      	str	r2, [sp, #4]
 8010bdc:	9a02      	ldr	r2, [sp, #8]
 8010bde:	9303      	str	r3, [sp, #12]
 8010be0:	429a      	cmp	r2, r3
 8010be2:	d80c      	bhi.n	8010bfe <__multiply+0x9e>
 8010be4:	2e00      	cmp	r6, #0
 8010be6:	dd03      	ble.n	8010bf0 <__multiply+0x90>
 8010be8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	d05a      	beq.n	8010ca6 <__multiply+0x146>
 8010bf0:	6106      	str	r6, [r0, #16]
 8010bf2:	b005      	add	sp, #20
 8010bf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010bf8:	f843 2b04 	str.w	r2, [r3], #4
 8010bfc:	e7d8      	b.n	8010bb0 <__multiply+0x50>
 8010bfe:	f8b3 a000 	ldrh.w	sl, [r3]
 8010c02:	f1ba 0f00 	cmp.w	sl, #0
 8010c06:	d024      	beq.n	8010c52 <__multiply+0xf2>
 8010c08:	f104 0e14 	add.w	lr, r4, #20
 8010c0c:	46a9      	mov	r9, r5
 8010c0e:	f04f 0c00 	mov.w	ip, #0
 8010c12:	f85e 2b04 	ldr.w	r2, [lr], #4
 8010c16:	f8d9 1000 	ldr.w	r1, [r9]
 8010c1a:	fa1f fb82 	uxth.w	fp, r2
 8010c1e:	b289      	uxth	r1, r1
 8010c20:	fb0a 110b 	mla	r1, sl, fp, r1
 8010c24:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8010c28:	f8d9 2000 	ldr.w	r2, [r9]
 8010c2c:	4461      	add	r1, ip
 8010c2e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010c32:	fb0a c20b 	mla	r2, sl, fp, ip
 8010c36:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8010c3a:	b289      	uxth	r1, r1
 8010c3c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010c40:	4577      	cmp	r7, lr
 8010c42:	f849 1b04 	str.w	r1, [r9], #4
 8010c46:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010c4a:	d8e2      	bhi.n	8010c12 <__multiply+0xb2>
 8010c4c:	9a01      	ldr	r2, [sp, #4]
 8010c4e:	f845 c002 	str.w	ip, [r5, r2]
 8010c52:	9a03      	ldr	r2, [sp, #12]
 8010c54:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010c58:	3304      	adds	r3, #4
 8010c5a:	f1b9 0f00 	cmp.w	r9, #0
 8010c5e:	d020      	beq.n	8010ca2 <__multiply+0x142>
 8010c60:	6829      	ldr	r1, [r5, #0]
 8010c62:	f104 0c14 	add.w	ip, r4, #20
 8010c66:	46ae      	mov	lr, r5
 8010c68:	f04f 0a00 	mov.w	sl, #0
 8010c6c:	f8bc b000 	ldrh.w	fp, [ip]
 8010c70:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8010c74:	fb09 220b 	mla	r2, r9, fp, r2
 8010c78:	4492      	add	sl, r2
 8010c7a:	b289      	uxth	r1, r1
 8010c7c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8010c80:	f84e 1b04 	str.w	r1, [lr], #4
 8010c84:	f85c 2b04 	ldr.w	r2, [ip], #4
 8010c88:	f8be 1000 	ldrh.w	r1, [lr]
 8010c8c:	0c12      	lsrs	r2, r2, #16
 8010c8e:	fb09 1102 	mla	r1, r9, r2, r1
 8010c92:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8010c96:	4567      	cmp	r7, ip
 8010c98:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010c9c:	d8e6      	bhi.n	8010c6c <__multiply+0x10c>
 8010c9e:	9a01      	ldr	r2, [sp, #4]
 8010ca0:	50a9      	str	r1, [r5, r2]
 8010ca2:	3504      	adds	r5, #4
 8010ca4:	e79a      	b.n	8010bdc <__multiply+0x7c>
 8010ca6:	3e01      	subs	r6, #1
 8010ca8:	e79c      	b.n	8010be4 <__multiply+0x84>
 8010caa:	bf00      	nop
 8010cac:	080138af 	.word	0x080138af
 8010cb0:	0801393c 	.word	0x0801393c

08010cb4 <__pow5mult>:
 8010cb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010cb8:	4615      	mov	r5, r2
 8010cba:	f012 0203 	ands.w	r2, r2, #3
 8010cbe:	4606      	mov	r6, r0
 8010cc0:	460f      	mov	r7, r1
 8010cc2:	d007      	beq.n	8010cd4 <__pow5mult+0x20>
 8010cc4:	4c25      	ldr	r4, [pc, #148]	; (8010d5c <__pow5mult+0xa8>)
 8010cc6:	3a01      	subs	r2, #1
 8010cc8:	2300      	movs	r3, #0
 8010cca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010cce:	f7ff fe51 	bl	8010974 <__multadd>
 8010cd2:	4607      	mov	r7, r0
 8010cd4:	10ad      	asrs	r5, r5, #2
 8010cd6:	d03d      	beq.n	8010d54 <__pow5mult+0xa0>
 8010cd8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8010cda:	b97c      	cbnz	r4, 8010cfc <__pow5mult+0x48>
 8010cdc:	2010      	movs	r0, #16
 8010cde:	f7ff fdcd 	bl	801087c <malloc>
 8010ce2:	4602      	mov	r2, r0
 8010ce4:	6270      	str	r0, [r6, #36]	; 0x24
 8010ce6:	b928      	cbnz	r0, 8010cf4 <__pow5mult+0x40>
 8010ce8:	4b1d      	ldr	r3, [pc, #116]	; (8010d60 <__pow5mult+0xac>)
 8010cea:	481e      	ldr	r0, [pc, #120]	; (8010d64 <__pow5mult+0xb0>)
 8010cec:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8010cf0:	f000 fd6c 	bl	80117cc <__assert_func>
 8010cf4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010cf8:	6004      	str	r4, [r0, #0]
 8010cfa:	60c4      	str	r4, [r0, #12]
 8010cfc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010d00:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010d04:	b94c      	cbnz	r4, 8010d1a <__pow5mult+0x66>
 8010d06:	f240 2171 	movw	r1, #625	; 0x271
 8010d0a:	4630      	mov	r0, r6
 8010d0c:	f7ff ff12 	bl	8010b34 <__i2b>
 8010d10:	2300      	movs	r3, #0
 8010d12:	f8c8 0008 	str.w	r0, [r8, #8]
 8010d16:	4604      	mov	r4, r0
 8010d18:	6003      	str	r3, [r0, #0]
 8010d1a:	f04f 0900 	mov.w	r9, #0
 8010d1e:	07eb      	lsls	r3, r5, #31
 8010d20:	d50a      	bpl.n	8010d38 <__pow5mult+0x84>
 8010d22:	4639      	mov	r1, r7
 8010d24:	4622      	mov	r2, r4
 8010d26:	4630      	mov	r0, r6
 8010d28:	f7ff ff1a 	bl	8010b60 <__multiply>
 8010d2c:	4639      	mov	r1, r7
 8010d2e:	4680      	mov	r8, r0
 8010d30:	4630      	mov	r0, r6
 8010d32:	f7ff fdfd 	bl	8010930 <_Bfree>
 8010d36:	4647      	mov	r7, r8
 8010d38:	106d      	asrs	r5, r5, #1
 8010d3a:	d00b      	beq.n	8010d54 <__pow5mult+0xa0>
 8010d3c:	6820      	ldr	r0, [r4, #0]
 8010d3e:	b938      	cbnz	r0, 8010d50 <__pow5mult+0x9c>
 8010d40:	4622      	mov	r2, r4
 8010d42:	4621      	mov	r1, r4
 8010d44:	4630      	mov	r0, r6
 8010d46:	f7ff ff0b 	bl	8010b60 <__multiply>
 8010d4a:	6020      	str	r0, [r4, #0]
 8010d4c:	f8c0 9000 	str.w	r9, [r0]
 8010d50:	4604      	mov	r4, r0
 8010d52:	e7e4      	b.n	8010d1e <__pow5mult+0x6a>
 8010d54:	4638      	mov	r0, r7
 8010d56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010d5a:	bf00      	nop
 8010d5c:	08013a88 	.word	0x08013a88
 8010d60:	0801383d 	.word	0x0801383d
 8010d64:	0801393c 	.word	0x0801393c

08010d68 <__lshift>:
 8010d68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010d6c:	460c      	mov	r4, r1
 8010d6e:	6849      	ldr	r1, [r1, #4]
 8010d70:	6923      	ldr	r3, [r4, #16]
 8010d72:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010d76:	68a3      	ldr	r3, [r4, #8]
 8010d78:	4607      	mov	r7, r0
 8010d7a:	4691      	mov	r9, r2
 8010d7c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010d80:	f108 0601 	add.w	r6, r8, #1
 8010d84:	42b3      	cmp	r3, r6
 8010d86:	db0b      	blt.n	8010da0 <__lshift+0x38>
 8010d88:	4638      	mov	r0, r7
 8010d8a:	f7ff fd91 	bl	80108b0 <_Balloc>
 8010d8e:	4605      	mov	r5, r0
 8010d90:	b948      	cbnz	r0, 8010da6 <__lshift+0x3e>
 8010d92:	4602      	mov	r2, r0
 8010d94:	4b2a      	ldr	r3, [pc, #168]	; (8010e40 <__lshift+0xd8>)
 8010d96:	482b      	ldr	r0, [pc, #172]	; (8010e44 <__lshift+0xdc>)
 8010d98:	f240 11d9 	movw	r1, #473	; 0x1d9
 8010d9c:	f000 fd16 	bl	80117cc <__assert_func>
 8010da0:	3101      	adds	r1, #1
 8010da2:	005b      	lsls	r3, r3, #1
 8010da4:	e7ee      	b.n	8010d84 <__lshift+0x1c>
 8010da6:	2300      	movs	r3, #0
 8010da8:	f100 0114 	add.w	r1, r0, #20
 8010dac:	f100 0210 	add.w	r2, r0, #16
 8010db0:	4618      	mov	r0, r3
 8010db2:	4553      	cmp	r3, sl
 8010db4:	db37      	blt.n	8010e26 <__lshift+0xbe>
 8010db6:	6920      	ldr	r0, [r4, #16]
 8010db8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010dbc:	f104 0314 	add.w	r3, r4, #20
 8010dc0:	f019 091f 	ands.w	r9, r9, #31
 8010dc4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010dc8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8010dcc:	d02f      	beq.n	8010e2e <__lshift+0xc6>
 8010dce:	f1c9 0e20 	rsb	lr, r9, #32
 8010dd2:	468a      	mov	sl, r1
 8010dd4:	f04f 0c00 	mov.w	ip, #0
 8010dd8:	681a      	ldr	r2, [r3, #0]
 8010dda:	fa02 f209 	lsl.w	r2, r2, r9
 8010dde:	ea42 020c 	orr.w	r2, r2, ip
 8010de2:	f84a 2b04 	str.w	r2, [sl], #4
 8010de6:	f853 2b04 	ldr.w	r2, [r3], #4
 8010dea:	4298      	cmp	r0, r3
 8010dec:	fa22 fc0e 	lsr.w	ip, r2, lr
 8010df0:	d8f2      	bhi.n	8010dd8 <__lshift+0x70>
 8010df2:	1b03      	subs	r3, r0, r4
 8010df4:	3b15      	subs	r3, #21
 8010df6:	f023 0303 	bic.w	r3, r3, #3
 8010dfa:	3304      	adds	r3, #4
 8010dfc:	f104 0215 	add.w	r2, r4, #21
 8010e00:	4290      	cmp	r0, r2
 8010e02:	bf38      	it	cc
 8010e04:	2304      	movcc	r3, #4
 8010e06:	f841 c003 	str.w	ip, [r1, r3]
 8010e0a:	f1bc 0f00 	cmp.w	ip, #0
 8010e0e:	d001      	beq.n	8010e14 <__lshift+0xac>
 8010e10:	f108 0602 	add.w	r6, r8, #2
 8010e14:	3e01      	subs	r6, #1
 8010e16:	4638      	mov	r0, r7
 8010e18:	612e      	str	r6, [r5, #16]
 8010e1a:	4621      	mov	r1, r4
 8010e1c:	f7ff fd88 	bl	8010930 <_Bfree>
 8010e20:	4628      	mov	r0, r5
 8010e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e26:	f842 0f04 	str.w	r0, [r2, #4]!
 8010e2a:	3301      	adds	r3, #1
 8010e2c:	e7c1      	b.n	8010db2 <__lshift+0x4a>
 8010e2e:	3904      	subs	r1, #4
 8010e30:	f853 2b04 	ldr.w	r2, [r3], #4
 8010e34:	f841 2f04 	str.w	r2, [r1, #4]!
 8010e38:	4298      	cmp	r0, r3
 8010e3a:	d8f9      	bhi.n	8010e30 <__lshift+0xc8>
 8010e3c:	e7ea      	b.n	8010e14 <__lshift+0xac>
 8010e3e:	bf00      	nop
 8010e40:	080138af 	.word	0x080138af
 8010e44:	0801393c 	.word	0x0801393c

08010e48 <__mcmp>:
 8010e48:	b530      	push	{r4, r5, lr}
 8010e4a:	6902      	ldr	r2, [r0, #16]
 8010e4c:	690c      	ldr	r4, [r1, #16]
 8010e4e:	1b12      	subs	r2, r2, r4
 8010e50:	d10e      	bne.n	8010e70 <__mcmp+0x28>
 8010e52:	f100 0314 	add.w	r3, r0, #20
 8010e56:	3114      	adds	r1, #20
 8010e58:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010e5c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010e60:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010e64:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010e68:	42a5      	cmp	r5, r4
 8010e6a:	d003      	beq.n	8010e74 <__mcmp+0x2c>
 8010e6c:	d305      	bcc.n	8010e7a <__mcmp+0x32>
 8010e6e:	2201      	movs	r2, #1
 8010e70:	4610      	mov	r0, r2
 8010e72:	bd30      	pop	{r4, r5, pc}
 8010e74:	4283      	cmp	r3, r0
 8010e76:	d3f3      	bcc.n	8010e60 <__mcmp+0x18>
 8010e78:	e7fa      	b.n	8010e70 <__mcmp+0x28>
 8010e7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010e7e:	e7f7      	b.n	8010e70 <__mcmp+0x28>

08010e80 <__mdiff>:
 8010e80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e84:	460c      	mov	r4, r1
 8010e86:	4606      	mov	r6, r0
 8010e88:	4611      	mov	r1, r2
 8010e8a:	4620      	mov	r0, r4
 8010e8c:	4690      	mov	r8, r2
 8010e8e:	f7ff ffdb 	bl	8010e48 <__mcmp>
 8010e92:	1e05      	subs	r5, r0, #0
 8010e94:	d110      	bne.n	8010eb8 <__mdiff+0x38>
 8010e96:	4629      	mov	r1, r5
 8010e98:	4630      	mov	r0, r6
 8010e9a:	f7ff fd09 	bl	80108b0 <_Balloc>
 8010e9e:	b930      	cbnz	r0, 8010eae <__mdiff+0x2e>
 8010ea0:	4b3a      	ldr	r3, [pc, #232]	; (8010f8c <__mdiff+0x10c>)
 8010ea2:	4602      	mov	r2, r0
 8010ea4:	f240 2132 	movw	r1, #562	; 0x232
 8010ea8:	4839      	ldr	r0, [pc, #228]	; (8010f90 <__mdiff+0x110>)
 8010eaa:	f000 fc8f 	bl	80117cc <__assert_func>
 8010eae:	2301      	movs	r3, #1
 8010eb0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010eb4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010eb8:	bfa4      	itt	ge
 8010eba:	4643      	movge	r3, r8
 8010ebc:	46a0      	movge	r8, r4
 8010ebe:	4630      	mov	r0, r6
 8010ec0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010ec4:	bfa6      	itte	ge
 8010ec6:	461c      	movge	r4, r3
 8010ec8:	2500      	movge	r5, #0
 8010eca:	2501      	movlt	r5, #1
 8010ecc:	f7ff fcf0 	bl	80108b0 <_Balloc>
 8010ed0:	b920      	cbnz	r0, 8010edc <__mdiff+0x5c>
 8010ed2:	4b2e      	ldr	r3, [pc, #184]	; (8010f8c <__mdiff+0x10c>)
 8010ed4:	4602      	mov	r2, r0
 8010ed6:	f44f 7110 	mov.w	r1, #576	; 0x240
 8010eda:	e7e5      	b.n	8010ea8 <__mdiff+0x28>
 8010edc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010ee0:	6926      	ldr	r6, [r4, #16]
 8010ee2:	60c5      	str	r5, [r0, #12]
 8010ee4:	f104 0914 	add.w	r9, r4, #20
 8010ee8:	f108 0514 	add.w	r5, r8, #20
 8010eec:	f100 0e14 	add.w	lr, r0, #20
 8010ef0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8010ef4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8010ef8:	f108 0210 	add.w	r2, r8, #16
 8010efc:	46f2      	mov	sl, lr
 8010efe:	2100      	movs	r1, #0
 8010f00:	f859 3b04 	ldr.w	r3, [r9], #4
 8010f04:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010f08:	fa1f f883 	uxth.w	r8, r3
 8010f0c:	fa11 f18b 	uxtah	r1, r1, fp
 8010f10:	0c1b      	lsrs	r3, r3, #16
 8010f12:	eba1 0808 	sub.w	r8, r1, r8
 8010f16:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010f1a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010f1e:	fa1f f888 	uxth.w	r8, r8
 8010f22:	1419      	asrs	r1, r3, #16
 8010f24:	454e      	cmp	r6, r9
 8010f26:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8010f2a:	f84a 3b04 	str.w	r3, [sl], #4
 8010f2e:	d8e7      	bhi.n	8010f00 <__mdiff+0x80>
 8010f30:	1b33      	subs	r3, r6, r4
 8010f32:	3b15      	subs	r3, #21
 8010f34:	f023 0303 	bic.w	r3, r3, #3
 8010f38:	3304      	adds	r3, #4
 8010f3a:	3415      	adds	r4, #21
 8010f3c:	42a6      	cmp	r6, r4
 8010f3e:	bf38      	it	cc
 8010f40:	2304      	movcc	r3, #4
 8010f42:	441d      	add	r5, r3
 8010f44:	4473      	add	r3, lr
 8010f46:	469e      	mov	lr, r3
 8010f48:	462e      	mov	r6, r5
 8010f4a:	4566      	cmp	r6, ip
 8010f4c:	d30e      	bcc.n	8010f6c <__mdiff+0xec>
 8010f4e:	f10c 0203 	add.w	r2, ip, #3
 8010f52:	1b52      	subs	r2, r2, r5
 8010f54:	f022 0203 	bic.w	r2, r2, #3
 8010f58:	3d03      	subs	r5, #3
 8010f5a:	45ac      	cmp	ip, r5
 8010f5c:	bf38      	it	cc
 8010f5e:	2200      	movcc	r2, #0
 8010f60:	441a      	add	r2, r3
 8010f62:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8010f66:	b17b      	cbz	r3, 8010f88 <__mdiff+0x108>
 8010f68:	6107      	str	r7, [r0, #16]
 8010f6a:	e7a3      	b.n	8010eb4 <__mdiff+0x34>
 8010f6c:	f856 8b04 	ldr.w	r8, [r6], #4
 8010f70:	fa11 f288 	uxtah	r2, r1, r8
 8010f74:	1414      	asrs	r4, r2, #16
 8010f76:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8010f7a:	b292      	uxth	r2, r2
 8010f7c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8010f80:	f84e 2b04 	str.w	r2, [lr], #4
 8010f84:	1421      	asrs	r1, r4, #16
 8010f86:	e7e0      	b.n	8010f4a <__mdiff+0xca>
 8010f88:	3f01      	subs	r7, #1
 8010f8a:	e7ea      	b.n	8010f62 <__mdiff+0xe2>
 8010f8c:	080138af 	.word	0x080138af
 8010f90:	0801393c 	.word	0x0801393c

08010f94 <__ulp>:
 8010f94:	b082      	sub	sp, #8
 8010f96:	ed8d 0b00 	vstr	d0, [sp]
 8010f9a:	9b01      	ldr	r3, [sp, #4]
 8010f9c:	4912      	ldr	r1, [pc, #72]	; (8010fe8 <__ulp+0x54>)
 8010f9e:	4019      	ands	r1, r3
 8010fa0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8010fa4:	2900      	cmp	r1, #0
 8010fa6:	dd05      	ble.n	8010fb4 <__ulp+0x20>
 8010fa8:	2200      	movs	r2, #0
 8010faa:	460b      	mov	r3, r1
 8010fac:	ec43 2b10 	vmov	d0, r2, r3
 8010fb0:	b002      	add	sp, #8
 8010fb2:	4770      	bx	lr
 8010fb4:	4249      	negs	r1, r1
 8010fb6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8010fba:	ea4f 5021 	mov.w	r0, r1, asr #20
 8010fbe:	f04f 0200 	mov.w	r2, #0
 8010fc2:	f04f 0300 	mov.w	r3, #0
 8010fc6:	da04      	bge.n	8010fd2 <__ulp+0x3e>
 8010fc8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8010fcc:	fa41 f300 	asr.w	r3, r1, r0
 8010fd0:	e7ec      	b.n	8010fac <__ulp+0x18>
 8010fd2:	f1a0 0114 	sub.w	r1, r0, #20
 8010fd6:	291e      	cmp	r1, #30
 8010fd8:	bfda      	itte	le
 8010fda:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8010fde:	fa20 f101 	lsrle.w	r1, r0, r1
 8010fe2:	2101      	movgt	r1, #1
 8010fe4:	460a      	mov	r2, r1
 8010fe6:	e7e1      	b.n	8010fac <__ulp+0x18>
 8010fe8:	7ff00000 	.word	0x7ff00000

08010fec <__b2d>:
 8010fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010fee:	6905      	ldr	r5, [r0, #16]
 8010ff0:	f100 0714 	add.w	r7, r0, #20
 8010ff4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8010ff8:	1f2e      	subs	r6, r5, #4
 8010ffa:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8010ffe:	4620      	mov	r0, r4
 8011000:	f7ff fd48 	bl	8010a94 <__hi0bits>
 8011004:	f1c0 0320 	rsb	r3, r0, #32
 8011008:	280a      	cmp	r0, #10
 801100a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8011088 <__b2d+0x9c>
 801100e:	600b      	str	r3, [r1, #0]
 8011010:	dc14      	bgt.n	801103c <__b2d+0x50>
 8011012:	f1c0 0e0b 	rsb	lr, r0, #11
 8011016:	fa24 f10e 	lsr.w	r1, r4, lr
 801101a:	42b7      	cmp	r7, r6
 801101c:	ea41 030c 	orr.w	r3, r1, ip
 8011020:	bf34      	ite	cc
 8011022:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8011026:	2100      	movcs	r1, #0
 8011028:	3015      	adds	r0, #21
 801102a:	fa04 f000 	lsl.w	r0, r4, r0
 801102e:	fa21 f10e 	lsr.w	r1, r1, lr
 8011032:	ea40 0201 	orr.w	r2, r0, r1
 8011036:	ec43 2b10 	vmov	d0, r2, r3
 801103a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801103c:	42b7      	cmp	r7, r6
 801103e:	bf3a      	itte	cc
 8011040:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8011044:	f1a5 0608 	subcc.w	r6, r5, #8
 8011048:	2100      	movcs	r1, #0
 801104a:	380b      	subs	r0, #11
 801104c:	d017      	beq.n	801107e <__b2d+0x92>
 801104e:	f1c0 0c20 	rsb	ip, r0, #32
 8011052:	fa04 f500 	lsl.w	r5, r4, r0
 8011056:	42be      	cmp	r6, r7
 8011058:	fa21 f40c 	lsr.w	r4, r1, ip
 801105c:	ea45 0504 	orr.w	r5, r5, r4
 8011060:	bf8c      	ite	hi
 8011062:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8011066:	2400      	movls	r4, #0
 8011068:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801106c:	fa01 f000 	lsl.w	r0, r1, r0
 8011070:	fa24 f40c 	lsr.w	r4, r4, ip
 8011074:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8011078:	ea40 0204 	orr.w	r2, r0, r4
 801107c:	e7db      	b.n	8011036 <__b2d+0x4a>
 801107e:	ea44 030c 	orr.w	r3, r4, ip
 8011082:	460a      	mov	r2, r1
 8011084:	e7d7      	b.n	8011036 <__b2d+0x4a>
 8011086:	bf00      	nop
 8011088:	3ff00000 	.word	0x3ff00000

0801108c <__d2b>:
 801108c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011090:	4689      	mov	r9, r1
 8011092:	2101      	movs	r1, #1
 8011094:	ec57 6b10 	vmov	r6, r7, d0
 8011098:	4690      	mov	r8, r2
 801109a:	f7ff fc09 	bl	80108b0 <_Balloc>
 801109e:	4604      	mov	r4, r0
 80110a0:	b930      	cbnz	r0, 80110b0 <__d2b+0x24>
 80110a2:	4602      	mov	r2, r0
 80110a4:	4b25      	ldr	r3, [pc, #148]	; (801113c <__d2b+0xb0>)
 80110a6:	4826      	ldr	r0, [pc, #152]	; (8011140 <__d2b+0xb4>)
 80110a8:	f240 310a 	movw	r1, #778	; 0x30a
 80110ac:	f000 fb8e 	bl	80117cc <__assert_func>
 80110b0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80110b4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80110b8:	bb35      	cbnz	r5, 8011108 <__d2b+0x7c>
 80110ba:	2e00      	cmp	r6, #0
 80110bc:	9301      	str	r3, [sp, #4]
 80110be:	d028      	beq.n	8011112 <__d2b+0x86>
 80110c0:	4668      	mov	r0, sp
 80110c2:	9600      	str	r6, [sp, #0]
 80110c4:	f7ff fd06 	bl	8010ad4 <__lo0bits>
 80110c8:	9900      	ldr	r1, [sp, #0]
 80110ca:	b300      	cbz	r0, 801110e <__d2b+0x82>
 80110cc:	9a01      	ldr	r2, [sp, #4]
 80110ce:	f1c0 0320 	rsb	r3, r0, #32
 80110d2:	fa02 f303 	lsl.w	r3, r2, r3
 80110d6:	430b      	orrs	r3, r1
 80110d8:	40c2      	lsrs	r2, r0
 80110da:	6163      	str	r3, [r4, #20]
 80110dc:	9201      	str	r2, [sp, #4]
 80110de:	9b01      	ldr	r3, [sp, #4]
 80110e0:	61a3      	str	r3, [r4, #24]
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	bf14      	ite	ne
 80110e6:	2202      	movne	r2, #2
 80110e8:	2201      	moveq	r2, #1
 80110ea:	6122      	str	r2, [r4, #16]
 80110ec:	b1d5      	cbz	r5, 8011124 <__d2b+0x98>
 80110ee:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80110f2:	4405      	add	r5, r0
 80110f4:	f8c9 5000 	str.w	r5, [r9]
 80110f8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80110fc:	f8c8 0000 	str.w	r0, [r8]
 8011100:	4620      	mov	r0, r4
 8011102:	b003      	add	sp, #12
 8011104:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011108:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801110c:	e7d5      	b.n	80110ba <__d2b+0x2e>
 801110e:	6161      	str	r1, [r4, #20]
 8011110:	e7e5      	b.n	80110de <__d2b+0x52>
 8011112:	a801      	add	r0, sp, #4
 8011114:	f7ff fcde 	bl	8010ad4 <__lo0bits>
 8011118:	9b01      	ldr	r3, [sp, #4]
 801111a:	6163      	str	r3, [r4, #20]
 801111c:	2201      	movs	r2, #1
 801111e:	6122      	str	r2, [r4, #16]
 8011120:	3020      	adds	r0, #32
 8011122:	e7e3      	b.n	80110ec <__d2b+0x60>
 8011124:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011128:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801112c:	f8c9 0000 	str.w	r0, [r9]
 8011130:	6918      	ldr	r0, [r3, #16]
 8011132:	f7ff fcaf 	bl	8010a94 <__hi0bits>
 8011136:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801113a:	e7df      	b.n	80110fc <__d2b+0x70>
 801113c:	080138af 	.word	0x080138af
 8011140:	0801393c 	.word	0x0801393c

08011144 <__ratio>:
 8011144:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011148:	4688      	mov	r8, r1
 801114a:	4669      	mov	r1, sp
 801114c:	4681      	mov	r9, r0
 801114e:	f7ff ff4d 	bl	8010fec <__b2d>
 8011152:	a901      	add	r1, sp, #4
 8011154:	4640      	mov	r0, r8
 8011156:	ec55 4b10 	vmov	r4, r5, d0
 801115a:	f7ff ff47 	bl	8010fec <__b2d>
 801115e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011162:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8011166:	eba3 0c02 	sub.w	ip, r3, r2
 801116a:	e9dd 3200 	ldrd	r3, r2, [sp]
 801116e:	1a9b      	subs	r3, r3, r2
 8011170:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8011174:	ec51 0b10 	vmov	r0, r1, d0
 8011178:	2b00      	cmp	r3, #0
 801117a:	bfd6      	itet	le
 801117c:	460a      	movle	r2, r1
 801117e:	462a      	movgt	r2, r5
 8011180:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8011184:	468b      	mov	fp, r1
 8011186:	462f      	mov	r7, r5
 8011188:	bfd4      	ite	le
 801118a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801118e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8011192:	4620      	mov	r0, r4
 8011194:	ee10 2a10 	vmov	r2, s0
 8011198:	465b      	mov	r3, fp
 801119a:	4639      	mov	r1, r7
 801119c:	f7ef fb56 	bl	800084c <__aeabi_ddiv>
 80111a0:	ec41 0b10 	vmov	d0, r0, r1
 80111a4:	b003      	add	sp, #12
 80111a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080111aa <__copybits>:
 80111aa:	3901      	subs	r1, #1
 80111ac:	b570      	push	{r4, r5, r6, lr}
 80111ae:	1149      	asrs	r1, r1, #5
 80111b0:	6914      	ldr	r4, [r2, #16]
 80111b2:	3101      	adds	r1, #1
 80111b4:	f102 0314 	add.w	r3, r2, #20
 80111b8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80111bc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80111c0:	1f05      	subs	r5, r0, #4
 80111c2:	42a3      	cmp	r3, r4
 80111c4:	d30c      	bcc.n	80111e0 <__copybits+0x36>
 80111c6:	1aa3      	subs	r3, r4, r2
 80111c8:	3b11      	subs	r3, #17
 80111ca:	f023 0303 	bic.w	r3, r3, #3
 80111ce:	3211      	adds	r2, #17
 80111d0:	42a2      	cmp	r2, r4
 80111d2:	bf88      	it	hi
 80111d4:	2300      	movhi	r3, #0
 80111d6:	4418      	add	r0, r3
 80111d8:	2300      	movs	r3, #0
 80111da:	4288      	cmp	r0, r1
 80111dc:	d305      	bcc.n	80111ea <__copybits+0x40>
 80111de:	bd70      	pop	{r4, r5, r6, pc}
 80111e0:	f853 6b04 	ldr.w	r6, [r3], #4
 80111e4:	f845 6f04 	str.w	r6, [r5, #4]!
 80111e8:	e7eb      	b.n	80111c2 <__copybits+0x18>
 80111ea:	f840 3b04 	str.w	r3, [r0], #4
 80111ee:	e7f4      	b.n	80111da <__copybits+0x30>

080111f0 <__any_on>:
 80111f0:	f100 0214 	add.w	r2, r0, #20
 80111f4:	6900      	ldr	r0, [r0, #16]
 80111f6:	114b      	asrs	r3, r1, #5
 80111f8:	4298      	cmp	r0, r3
 80111fa:	b510      	push	{r4, lr}
 80111fc:	db11      	blt.n	8011222 <__any_on+0x32>
 80111fe:	dd0a      	ble.n	8011216 <__any_on+0x26>
 8011200:	f011 011f 	ands.w	r1, r1, #31
 8011204:	d007      	beq.n	8011216 <__any_on+0x26>
 8011206:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801120a:	fa24 f001 	lsr.w	r0, r4, r1
 801120e:	fa00 f101 	lsl.w	r1, r0, r1
 8011212:	428c      	cmp	r4, r1
 8011214:	d10b      	bne.n	801122e <__any_on+0x3e>
 8011216:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801121a:	4293      	cmp	r3, r2
 801121c:	d803      	bhi.n	8011226 <__any_on+0x36>
 801121e:	2000      	movs	r0, #0
 8011220:	bd10      	pop	{r4, pc}
 8011222:	4603      	mov	r3, r0
 8011224:	e7f7      	b.n	8011216 <__any_on+0x26>
 8011226:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801122a:	2900      	cmp	r1, #0
 801122c:	d0f5      	beq.n	801121a <__any_on+0x2a>
 801122e:	2001      	movs	r0, #1
 8011230:	e7f6      	b.n	8011220 <__any_on+0x30>

08011232 <_calloc_r>:
 8011232:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011234:	fba1 2402 	umull	r2, r4, r1, r2
 8011238:	b94c      	cbnz	r4, 801124e <_calloc_r+0x1c>
 801123a:	4611      	mov	r1, r2
 801123c:	9201      	str	r2, [sp, #4]
 801123e:	f000 f87b 	bl	8011338 <_malloc_r>
 8011242:	9a01      	ldr	r2, [sp, #4]
 8011244:	4605      	mov	r5, r0
 8011246:	b930      	cbnz	r0, 8011256 <_calloc_r+0x24>
 8011248:	4628      	mov	r0, r5
 801124a:	b003      	add	sp, #12
 801124c:	bd30      	pop	{r4, r5, pc}
 801124e:	220c      	movs	r2, #12
 8011250:	6002      	str	r2, [r0, #0]
 8011252:	2500      	movs	r5, #0
 8011254:	e7f8      	b.n	8011248 <_calloc_r+0x16>
 8011256:	4621      	mov	r1, r4
 8011258:	f7fc fd5e 	bl	800dd18 <memset>
 801125c:	e7f4      	b.n	8011248 <_calloc_r+0x16>
	...

08011260 <_free_r>:
 8011260:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011262:	2900      	cmp	r1, #0
 8011264:	d044      	beq.n	80112f0 <_free_r+0x90>
 8011266:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801126a:	9001      	str	r0, [sp, #4]
 801126c:	2b00      	cmp	r3, #0
 801126e:	f1a1 0404 	sub.w	r4, r1, #4
 8011272:	bfb8      	it	lt
 8011274:	18e4      	addlt	r4, r4, r3
 8011276:	f000 fb15 	bl	80118a4 <__malloc_lock>
 801127a:	4a1e      	ldr	r2, [pc, #120]	; (80112f4 <_free_r+0x94>)
 801127c:	9801      	ldr	r0, [sp, #4]
 801127e:	6813      	ldr	r3, [r2, #0]
 8011280:	b933      	cbnz	r3, 8011290 <_free_r+0x30>
 8011282:	6063      	str	r3, [r4, #4]
 8011284:	6014      	str	r4, [r2, #0]
 8011286:	b003      	add	sp, #12
 8011288:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801128c:	f000 bb10 	b.w	80118b0 <__malloc_unlock>
 8011290:	42a3      	cmp	r3, r4
 8011292:	d908      	bls.n	80112a6 <_free_r+0x46>
 8011294:	6825      	ldr	r5, [r4, #0]
 8011296:	1961      	adds	r1, r4, r5
 8011298:	428b      	cmp	r3, r1
 801129a:	bf01      	itttt	eq
 801129c:	6819      	ldreq	r1, [r3, #0]
 801129e:	685b      	ldreq	r3, [r3, #4]
 80112a0:	1949      	addeq	r1, r1, r5
 80112a2:	6021      	streq	r1, [r4, #0]
 80112a4:	e7ed      	b.n	8011282 <_free_r+0x22>
 80112a6:	461a      	mov	r2, r3
 80112a8:	685b      	ldr	r3, [r3, #4]
 80112aa:	b10b      	cbz	r3, 80112b0 <_free_r+0x50>
 80112ac:	42a3      	cmp	r3, r4
 80112ae:	d9fa      	bls.n	80112a6 <_free_r+0x46>
 80112b0:	6811      	ldr	r1, [r2, #0]
 80112b2:	1855      	adds	r5, r2, r1
 80112b4:	42a5      	cmp	r5, r4
 80112b6:	d10b      	bne.n	80112d0 <_free_r+0x70>
 80112b8:	6824      	ldr	r4, [r4, #0]
 80112ba:	4421      	add	r1, r4
 80112bc:	1854      	adds	r4, r2, r1
 80112be:	42a3      	cmp	r3, r4
 80112c0:	6011      	str	r1, [r2, #0]
 80112c2:	d1e0      	bne.n	8011286 <_free_r+0x26>
 80112c4:	681c      	ldr	r4, [r3, #0]
 80112c6:	685b      	ldr	r3, [r3, #4]
 80112c8:	6053      	str	r3, [r2, #4]
 80112ca:	4421      	add	r1, r4
 80112cc:	6011      	str	r1, [r2, #0]
 80112ce:	e7da      	b.n	8011286 <_free_r+0x26>
 80112d0:	d902      	bls.n	80112d8 <_free_r+0x78>
 80112d2:	230c      	movs	r3, #12
 80112d4:	6003      	str	r3, [r0, #0]
 80112d6:	e7d6      	b.n	8011286 <_free_r+0x26>
 80112d8:	6825      	ldr	r5, [r4, #0]
 80112da:	1961      	adds	r1, r4, r5
 80112dc:	428b      	cmp	r3, r1
 80112de:	bf04      	itt	eq
 80112e0:	6819      	ldreq	r1, [r3, #0]
 80112e2:	685b      	ldreq	r3, [r3, #4]
 80112e4:	6063      	str	r3, [r4, #4]
 80112e6:	bf04      	itt	eq
 80112e8:	1949      	addeq	r1, r1, r5
 80112ea:	6021      	streq	r1, [r4, #0]
 80112ec:	6054      	str	r4, [r2, #4]
 80112ee:	e7ca      	b.n	8011286 <_free_r+0x26>
 80112f0:	b003      	add	sp, #12
 80112f2:	bd30      	pop	{r4, r5, pc}
 80112f4:	20002dec 	.word	0x20002dec

080112f8 <sbrk_aligned>:
 80112f8:	b570      	push	{r4, r5, r6, lr}
 80112fa:	4e0e      	ldr	r6, [pc, #56]	; (8011334 <sbrk_aligned+0x3c>)
 80112fc:	460c      	mov	r4, r1
 80112fe:	6831      	ldr	r1, [r6, #0]
 8011300:	4605      	mov	r5, r0
 8011302:	b911      	cbnz	r1, 801130a <sbrk_aligned+0x12>
 8011304:	f000 f9f0 	bl	80116e8 <_sbrk_r>
 8011308:	6030      	str	r0, [r6, #0]
 801130a:	4621      	mov	r1, r4
 801130c:	4628      	mov	r0, r5
 801130e:	f000 f9eb 	bl	80116e8 <_sbrk_r>
 8011312:	1c43      	adds	r3, r0, #1
 8011314:	d00a      	beq.n	801132c <sbrk_aligned+0x34>
 8011316:	1cc4      	adds	r4, r0, #3
 8011318:	f024 0403 	bic.w	r4, r4, #3
 801131c:	42a0      	cmp	r0, r4
 801131e:	d007      	beq.n	8011330 <sbrk_aligned+0x38>
 8011320:	1a21      	subs	r1, r4, r0
 8011322:	4628      	mov	r0, r5
 8011324:	f000 f9e0 	bl	80116e8 <_sbrk_r>
 8011328:	3001      	adds	r0, #1
 801132a:	d101      	bne.n	8011330 <sbrk_aligned+0x38>
 801132c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8011330:	4620      	mov	r0, r4
 8011332:	bd70      	pop	{r4, r5, r6, pc}
 8011334:	20002df0 	.word	0x20002df0

08011338 <_malloc_r>:
 8011338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801133c:	1ccd      	adds	r5, r1, #3
 801133e:	f025 0503 	bic.w	r5, r5, #3
 8011342:	3508      	adds	r5, #8
 8011344:	2d0c      	cmp	r5, #12
 8011346:	bf38      	it	cc
 8011348:	250c      	movcc	r5, #12
 801134a:	2d00      	cmp	r5, #0
 801134c:	4607      	mov	r7, r0
 801134e:	db01      	blt.n	8011354 <_malloc_r+0x1c>
 8011350:	42a9      	cmp	r1, r5
 8011352:	d905      	bls.n	8011360 <_malloc_r+0x28>
 8011354:	230c      	movs	r3, #12
 8011356:	603b      	str	r3, [r7, #0]
 8011358:	2600      	movs	r6, #0
 801135a:	4630      	mov	r0, r6
 801135c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011360:	4e2e      	ldr	r6, [pc, #184]	; (801141c <_malloc_r+0xe4>)
 8011362:	f000 fa9f 	bl	80118a4 <__malloc_lock>
 8011366:	6833      	ldr	r3, [r6, #0]
 8011368:	461c      	mov	r4, r3
 801136a:	bb34      	cbnz	r4, 80113ba <_malloc_r+0x82>
 801136c:	4629      	mov	r1, r5
 801136e:	4638      	mov	r0, r7
 8011370:	f7ff ffc2 	bl	80112f8 <sbrk_aligned>
 8011374:	1c43      	adds	r3, r0, #1
 8011376:	4604      	mov	r4, r0
 8011378:	d14d      	bne.n	8011416 <_malloc_r+0xde>
 801137a:	6834      	ldr	r4, [r6, #0]
 801137c:	4626      	mov	r6, r4
 801137e:	2e00      	cmp	r6, #0
 8011380:	d140      	bne.n	8011404 <_malloc_r+0xcc>
 8011382:	6823      	ldr	r3, [r4, #0]
 8011384:	4631      	mov	r1, r6
 8011386:	4638      	mov	r0, r7
 8011388:	eb04 0803 	add.w	r8, r4, r3
 801138c:	f000 f9ac 	bl	80116e8 <_sbrk_r>
 8011390:	4580      	cmp	r8, r0
 8011392:	d13a      	bne.n	801140a <_malloc_r+0xd2>
 8011394:	6821      	ldr	r1, [r4, #0]
 8011396:	3503      	adds	r5, #3
 8011398:	1a6d      	subs	r5, r5, r1
 801139a:	f025 0503 	bic.w	r5, r5, #3
 801139e:	3508      	adds	r5, #8
 80113a0:	2d0c      	cmp	r5, #12
 80113a2:	bf38      	it	cc
 80113a4:	250c      	movcc	r5, #12
 80113a6:	4629      	mov	r1, r5
 80113a8:	4638      	mov	r0, r7
 80113aa:	f7ff ffa5 	bl	80112f8 <sbrk_aligned>
 80113ae:	3001      	adds	r0, #1
 80113b0:	d02b      	beq.n	801140a <_malloc_r+0xd2>
 80113b2:	6823      	ldr	r3, [r4, #0]
 80113b4:	442b      	add	r3, r5
 80113b6:	6023      	str	r3, [r4, #0]
 80113b8:	e00e      	b.n	80113d8 <_malloc_r+0xa0>
 80113ba:	6822      	ldr	r2, [r4, #0]
 80113bc:	1b52      	subs	r2, r2, r5
 80113be:	d41e      	bmi.n	80113fe <_malloc_r+0xc6>
 80113c0:	2a0b      	cmp	r2, #11
 80113c2:	d916      	bls.n	80113f2 <_malloc_r+0xba>
 80113c4:	1961      	adds	r1, r4, r5
 80113c6:	42a3      	cmp	r3, r4
 80113c8:	6025      	str	r5, [r4, #0]
 80113ca:	bf18      	it	ne
 80113cc:	6059      	strne	r1, [r3, #4]
 80113ce:	6863      	ldr	r3, [r4, #4]
 80113d0:	bf08      	it	eq
 80113d2:	6031      	streq	r1, [r6, #0]
 80113d4:	5162      	str	r2, [r4, r5]
 80113d6:	604b      	str	r3, [r1, #4]
 80113d8:	4638      	mov	r0, r7
 80113da:	f104 060b 	add.w	r6, r4, #11
 80113de:	f000 fa67 	bl	80118b0 <__malloc_unlock>
 80113e2:	f026 0607 	bic.w	r6, r6, #7
 80113e6:	1d23      	adds	r3, r4, #4
 80113e8:	1af2      	subs	r2, r6, r3
 80113ea:	d0b6      	beq.n	801135a <_malloc_r+0x22>
 80113ec:	1b9b      	subs	r3, r3, r6
 80113ee:	50a3      	str	r3, [r4, r2]
 80113f0:	e7b3      	b.n	801135a <_malloc_r+0x22>
 80113f2:	6862      	ldr	r2, [r4, #4]
 80113f4:	42a3      	cmp	r3, r4
 80113f6:	bf0c      	ite	eq
 80113f8:	6032      	streq	r2, [r6, #0]
 80113fa:	605a      	strne	r2, [r3, #4]
 80113fc:	e7ec      	b.n	80113d8 <_malloc_r+0xa0>
 80113fe:	4623      	mov	r3, r4
 8011400:	6864      	ldr	r4, [r4, #4]
 8011402:	e7b2      	b.n	801136a <_malloc_r+0x32>
 8011404:	4634      	mov	r4, r6
 8011406:	6876      	ldr	r6, [r6, #4]
 8011408:	e7b9      	b.n	801137e <_malloc_r+0x46>
 801140a:	230c      	movs	r3, #12
 801140c:	603b      	str	r3, [r7, #0]
 801140e:	4638      	mov	r0, r7
 8011410:	f000 fa4e 	bl	80118b0 <__malloc_unlock>
 8011414:	e7a1      	b.n	801135a <_malloc_r+0x22>
 8011416:	6025      	str	r5, [r4, #0]
 8011418:	e7de      	b.n	80113d8 <_malloc_r+0xa0>
 801141a:	bf00      	nop
 801141c:	20002dec 	.word	0x20002dec

08011420 <__ssputs_r>:
 8011420:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011424:	688e      	ldr	r6, [r1, #8]
 8011426:	429e      	cmp	r6, r3
 8011428:	4682      	mov	sl, r0
 801142a:	460c      	mov	r4, r1
 801142c:	4690      	mov	r8, r2
 801142e:	461f      	mov	r7, r3
 8011430:	d838      	bhi.n	80114a4 <__ssputs_r+0x84>
 8011432:	898a      	ldrh	r2, [r1, #12]
 8011434:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011438:	d032      	beq.n	80114a0 <__ssputs_r+0x80>
 801143a:	6825      	ldr	r5, [r4, #0]
 801143c:	6909      	ldr	r1, [r1, #16]
 801143e:	eba5 0901 	sub.w	r9, r5, r1
 8011442:	6965      	ldr	r5, [r4, #20]
 8011444:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011448:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801144c:	3301      	adds	r3, #1
 801144e:	444b      	add	r3, r9
 8011450:	106d      	asrs	r5, r5, #1
 8011452:	429d      	cmp	r5, r3
 8011454:	bf38      	it	cc
 8011456:	461d      	movcc	r5, r3
 8011458:	0553      	lsls	r3, r2, #21
 801145a:	d531      	bpl.n	80114c0 <__ssputs_r+0xa0>
 801145c:	4629      	mov	r1, r5
 801145e:	f7ff ff6b 	bl	8011338 <_malloc_r>
 8011462:	4606      	mov	r6, r0
 8011464:	b950      	cbnz	r0, 801147c <__ssputs_r+0x5c>
 8011466:	230c      	movs	r3, #12
 8011468:	f8ca 3000 	str.w	r3, [sl]
 801146c:	89a3      	ldrh	r3, [r4, #12]
 801146e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011472:	81a3      	strh	r3, [r4, #12]
 8011474:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801147c:	6921      	ldr	r1, [r4, #16]
 801147e:	464a      	mov	r2, r9
 8011480:	f7fc fc3c 	bl	800dcfc <memcpy>
 8011484:	89a3      	ldrh	r3, [r4, #12]
 8011486:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801148a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801148e:	81a3      	strh	r3, [r4, #12]
 8011490:	6126      	str	r6, [r4, #16]
 8011492:	6165      	str	r5, [r4, #20]
 8011494:	444e      	add	r6, r9
 8011496:	eba5 0509 	sub.w	r5, r5, r9
 801149a:	6026      	str	r6, [r4, #0]
 801149c:	60a5      	str	r5, [r4, #8]
 801149e:	463e      	mov	r6, r7
 80114a0:	42be      	cmp	r6, r7
 80114a2:	d900      	bls.n	80114a6 <__ssputs_r+0x86>
 80114a4:	463e      	mov	r6, r7
 80114a6:	6820      	ldr	r0, [r4, #0]
 80114a8:	4632      	mov	r2, r6
 80114aa:	4641      	mov	r1, r8
 80114ac:	f000 f9e0 	bl	8011870 <memmove>
 80114b0:	68a3      	ldr	r3, [r4, #8]
 80114b2:	1b9b      	subs	r3, r3, r6
 80114b4:	60a3      	str	r3, [r4, #8]
 80114b6:	6823      	ldr	r3, [r4, #0]
 80114b8:	4433      	add	r3, r6
 80114ba:	6023      	str	r3, [r4, #0]
 80114bc:	2000      	movs	r0, #0
 80114be:	e7db      	b.n	8011478 <__ssputs_r+0x58>
 80114c0:	462a      	mov	r2, r5
 80114c2:	f000 f9fb 	bl	80118bc <_realloc_r>
 80114c6:	4606      	mov	r6, r0
 80114c8:	2800      	cmp	r0, #0
 80114ca:	d1e1      	bne.n	8011490 <__ssputs_r+0x70>
 80114cc:	6921      	ldr	r1, [r4, #16]
 80114ce:	4650      	mov	r0, sl
 80114d0:	f7ff fec6 	bl	8011260 <_free_r>
 80114d4:	e7c7      	b.n	8011466 <__ssputs_r+0x46>
	...

080114d8 <_svfiprintf_r>:
 80114d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114dc:	4698      	mov	r8, r3
 80114de:	898b      	ldrh	r3, [r1, #12]
 80114e0:	061b      	lsls	r3, r3, #24
 80114e2:	b09d      	sub	sp, #116	; 0x74
 80114e4:	4607      	mov	r7, r0
 80114e6:	460d      	mov	r5, r1
 80114e8:	4614      	mov	r4, r2
 80114ea:	d50e      	bpl.n	801150a <_svfiprintf_r+0x32>
 80114ec:	690b      	ldr	r3, [r1, #16]
 80114ee:	b963      	cbnz	r3, 801150a <_svfiprintf_r+0x32>
 80114f0:	2140      	movs	r1, #64	; 0x40
 80114f2:	f7ff ff21 	bl	8011338 <_malloc_r>
 80114f6:	6028      	str	r0, [r5, #0]
 80114f8:	6128      	str	r0, [r5, #16]
 80114fa:	b920      	cbnz	r0, 8011506 <_svfiprintf_r+0x2e>
 80114fc:	230c      	movs	r3, #12
 80114fe:	603b      	str	r3, [r7, #0]
 8011500:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011504:	e0d1      	b.n	80116aa <_svfiprintf_r+0x1d2>
 8011506:	2340      	movs	r3, #64	; 0x40
 8011508:	616b      	str	r3, [r5, #20]
 801150a:	2300      	movs	r3, #0
 801150c:	9309      	str	r3, [sp, #36]	; 0x24
 801150e:	2320      	movs	r3, #32
 8011510:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011514:	f8cd 800c 	str.w	r8, [sp, #12]
 8011518:	2330      	movs	r3, #48	; 0x30
 801151a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80116c4 <_svfiprintf_r+0x1ec>
 801151e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011522:	f04f 0901 	mov.w	r9, #1
 8011526:	4623      	mov	r3, r4
 8011528:	469a      	mov	sl, r3
 801152a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801152e:	b10a      	cbz	r2, 8011534 <_svfiprintf_r+0x5c>
 8011530:	2a25      	cmp	r2, #37	; 0x25
 8011532:	d1f9      	bne.n	8011528 <_svfiprintf_r+0x50>
 8011534:	ebba 0b04 	subs.w	fp, sl, r4
 8011538:	d00b      	beq.n	8011552 <_svfiprintf_r+0x7a>
 801153a:	465b      	mov	r3, fp
 801153c:	4622      	mov	r2, r4
 801153e:	4629      	mov	r1, r5
 8011540:	4638      	mov	r0, r7
 8011542:	f7ff ff6d 	bl	8011420 <__ssputs_r>
 8011546:	3001      	adds	r0, #1
 8011548:	f000 80aa 	beq.w	80116a0 <_svfiprintf_r+0x1c8>
 801154c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801154e:	445a      	add	r2, fp
 8011550:	9209      	str	r2, [sp, #36]	; 0x24
 8011552:	f89a 3000 	ldrb.w	r3, [sl]
 8011556:	2b00      	cmp	r3, #0
 8011558:	f000 80a2 	beq.w	80116a0 <_svfiprintf_r+0x1c8>
 801155c:	2300      	movs	r3, #0
 801155e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011562:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011566:	f10a 0a01 	add.w	sl, sl, #1
 801156a:	9304      	str	r3, [sp, #16]
 801156c:	9307      	str	r3, [sp, #28]
 801156e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011572:	931a      	str	r3, [sp, #104]	; 0x68
 8011574:	4654      	mov	r4, sl
 8011576:	2205      	movs	r2, #5
 8011578:	f814 1b01 	ldrb.w	r1, [r4], #1
 801157c:	4851      	ldr	r0, [pc, #324]	; (80116c4 <_svfiprintf_r+0x1ec>)
 801157e:	f7ee fe2f 	bl	80001e0 <memchr>
 8011582:	9a04      	ldr	r2, [sp, #16]
 8011584:	b9d8      	cbnz	r0, 80115be <_svfiprintf_r+0xe6>
 8011586:	06d0      	lsls	r0, r2, #27
 8011588:	bf44      	itt	mi
 801158a:	2320      	movmi	r3, #32
 801158c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011590:	0711      	lsls	r1, r2, #28
 8011592:	bf44      	itt	mi
 8011594:	232b      	movmi	r3, #43	; 0x2b
 8011596:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801159a:	f89a 3000 	ldrb.w	r3, [sl]
 801159e:	2b2a      	cmp	r3, #42	; 0x2a
 80115a0:	d015      	beq.n	80115ce <_svfiprintf_r+0xf6>
 80115a2:	9a07      	ldr	r2, [sp, #28]
 80115a4:	4654      	mov	r4, sl
 80115a6:	2000      	movs	r0, #0
 80115a8:	f04f 0c0a 	mov.w	ip, #10
 80115ac:	4621      	mov	r1, r4
 80115ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80115b2:	3b30      	subs	r3, #48	; 0x30
 80115b4:	2b09      	cmp	r3, #9
 80115b6:	d94e      	bls.n	8011656 <_svfiprintf_r+0x17e>
 80115b8:	b1b0      	cbz	r0, 80115e8 <_svfiprintf_r+0x110>
 80115ba:	9207      	str	r2, [sp, #28]
 80115bc:	e014      	b.n	80115e8 <_svfiprintf_r+0x110>
 80115be:	eba0 0308 	sub.w	r3, r0, r8
 80115c2:	fa09 f303 	lsl.w	r3, r9, r3
 80115c6:	4313      	orrs	r3, r2
 80115c8:	9304      	str	r3, [sp, #16]
 80115ca:	46a2      	mov	sl, r4
 80115cc:	e7d2      	b.n	8011574 <_svfiprintf_r+0x9c>
 80115ce:	9b03      	ldr	r3, [sp, #12]
 80115d0:	1d19      	adds	r1, r3, #4
 80115d2:	681b      	ldr	r3, [r3, #0]
 80115d4:	9103      	str	r1, [sp, #12]
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	bfbb      	ittet	lt
 80115da:	425b      	neglt	r3, r3
 80115dc:	f042 0202 	orrlt.w	r2, r2, #2
 80115e0:	9307      	strge	r3, [sp, #28]
 80115e2:	9307      	strlt	r3, [sp, #28]
 80115e4:	bfb8      	it	lt
 80115e6:	9204      	strlt	r2, [sp, #16]
 80115e8:	7823      	ldrb	r3, [r4, #0]
 80115ea:	2b2e      	cmp	r3, #46	; 0x2e
 80115ec:	d10c      	bne.n	8011608 <_svfiprintf_r+0x130>
 80115ee:	7863      	ldrb	r3, [r4, #1]
 80115f0:	2b2a      	cmp	r3, #42	; 0x2a
 80115f2:	d135      	bne.n	8011660 <_svfiprintf_r+0x188>
 80115f4:	9b03      	ldr	r3, [sp, #12]
 80115f6:	1d1a      	adds	r2, r3, #4
 80115f8:	681b      	ldr	r3, [r3, #0]
 80115fa:	9203      	str	r2, [sp, #12]
 80115fc:	2b00      	cmp	r3, #0
 80115fe:	bfb8      	it	lt
 8011600:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8011604:	3402      	adds	r4, #2
 8011606:	9305      	str	r3, [sp, #20]
 8011608:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80116d4 <_svfiprintf_r+0x1fc>
 801160c:	7821      	ldrb	r1, [r4, #0]
 801160e:	2203      	movs	r2, #3
 8011610:	4650      	mov	r0, sl
 8011612:	f7ee fde5 	bl	80001e0 <memchr>
 8011616:	b140      	cbz	r0, 801162a <_svfiprintf_r+0x152>
 8011618:	2340      	movs	r3, #64	; 0x40
 801161a:	eba0 000a 	sub.w	r0, r0, sl
 801161e:	fa03 f000 	lsl.w	r0, r3, r0
 8011622:	9b04      	ldr	r3, [sp, #16]
 8011624:	4303      	orrs	r3, r0
 8011626:	3401      	adds	r4, #1
 8011628:	9304      	str	r3, [sp, #16]
 801162a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801162e:	4826      	ldr	r0, [pc, #152]	; (80116c8 <_svfiprintf_r+0x1f0>)
 8011630:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011634:	2206      	movs	r2, #6
 8011636:	f7ee fdd3 	bl	80001e0 <memchr>
 801163a:	2800      	cmp	r0, #0
 801163c:	d038      	beq.n	80116b0 <_svfiprintf_r+0x1d8>
 801163e:	4b23      	ldr	r3, [pc, #140]	; (80116cc <_svfiprintf_r+0x1f4>)
 8011640:	bb1b      	cbnz	r3, 801168a <_svfiprintf_r+0x1b2>
 8011642:	9b03      	ldr	r3, [sp, #12]
 8011644:	3307      	adds	r3, #7
 8011646:	f023 0307 	bic.w	r3, r3, #7
 801164a:	3308      	adds	r3, #8
 801164c:	9303      	str	r3, [sp, #12]
 801164e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011650:	4433      	add	r3, r6
 8011652:	9309      	str	r3, [sp, #36]	; 0x24
 8011654:	e767      	b.n	8011526 <_svfiprintf_r+0x4e>
 8011656:	fb0c 3202 	mla	r2, ip, r2, r3
 801165a:	460c      	mov	r4, r1
 801165c:	2001      	movs	r0, #1
 801165e:	e7a5      	b.n	80115ac <_svfiprintf_r+0xd4>
 8011660:	2300      	movs	r3, #0
 8011662:	3401      	adds	r4, #1
 8011664:	9305      	str	r3, [sp, #20]
 8011666:	4619      	mov	r1, r3
 8011668:	f04f 0c0a 	mov.w	ip, #10
 801166c:	4620      	mov	r0, r4
 801166e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011672:	3a30      	subs	r2, #48	; 0x30
 8011674:	2a09      	cmp	r2, #9
 8011676:	d903      	bls.n	8011680 <_svfiprintf_r+0x1a8>
 8011678:	2b00      	cmp	r3, #0
 801167a:	d0c5      	beq.n	8011608 <_svfiprintf_r+0x130>
 801167c:	9105      	str	r1, [sp, #20]
 801167e:	e7c3      	b.n	8011608 <_svfiprintf_r+0x130>
 8011680:	fb0c 2101 	mla	r1, ip, r1, r2
 8011684:	4604      	mov	r4, r0
 8011686:	2301      	movs	r3, #1
 8011688:	e7f0      	b.n	801166c <_svfiprintf_r+0x194>
 801168a:	ab03      	add	r3, sp, #12
 801168c:	9300      	str	r3, [sp, #0]
 801168e:	462a      	mov	r2, r5
 8011690:	4b0f      	ldr	r3, [pc, #60]	; (80116d0 <_svfiprintf_r+0x1f8>)
 8011692:	a904      	add	r1, sp, #16
 8011694:	4638      	mov	r0, r7
 8011696:	f7fc fbe7 	bl	800de68 <_printf_float>
 801169a:	1c42      	adds	r2, r0, #1
 801169c:	4606      	mov	r6, r0
 801169e:	d1d6      	bne.n	801164e <_svfiprintf_r+0x176>
 80116a0:	89ab      	ldrh	r3, [r5, #12]
 80116a2:	065b      	lsls	r3, r3, #25
 80116a4:	f53f af2c 	bmi.w	8011500 <_svfiprintf_r+0x28>
 80116a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80116aa:	b01d      	add	sp, #116	; 0x74
 80116ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116b0:	ab03      	add	r3, sp, #12
 80116b2:	9300      	str	r3, [sp, #0]
 80116b4:	462a      	mov	r2, r5
 80116b6:	4b06      	ldr	r3, [pc, #24]	; (80116d0 <_svfiprintf_r+0x1f8>)
 80116b8:	a904      	add	r1, sp, #16
 80116ba:	4638      	mov	r0, r7
 80116bc:	f7fc fe78 	bl	800e3b0 <_printf_i>
 80116c0:	e7eb      	b.n	801169a <_svfiprintf_r+0x1c2>
 80116c2:	bf00      	nop
 80116c4:	08013a94 	.word	0x08013a94
 80116c8:	08013a9e 	.word	0x08013a9e
 80116cc:	0800de69 	.word	0x0800de69
 80116d0:	08011421 	.word	0x08011421
 80116d4:	08013a9a 	.word	0x08013a9a

080116d8 <nan>:
 80116d8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80116e0 <nan+0x8>
 80116dc:	4770      	bx	lr
 80116de:	bf00      	nop
 80116e0:	00000000 	.word	0x00000000
 80116e4:	7ff80000 	.word	0x7ff80000

080116e8 <_sbrk_r>:
 80116e8:	b538      	push	{r3, r4, r5, lr}
 80116ea:	4d06      	ldr	r5, [pc, #24]	; (8011704 <_sbrk_r+0x1c>)
 80116ec:	2300      	movs	r3, #0
 80116ee:	4604      	mov	r4, r0
 80116f0:	4608      	mov	r0, r1
 80116f2:	602b      	str	r3, [r5, #0]
 80116f4:	f7f3 fe28 	bl	8005348 <_sbrk>
 80116f8:	1c43      	adds	r3, r0, #1
 80116fa:	d102      	bne.n	8011702 <_sbrk_r+0x1a>
 80116fc:	682b      	ldr	r3, [r5, #0]
 80116fe:	b103      	cbz	r3, 8011702 <_sbrk_r+0x1a>
 8011700:	6023      	str	r3, [r4, #0]
 8011702:	bd38      	pop	{r3, r4, r5, pc}
 8011704:	20002df4 	.word	0x20002df4

08011708 <__sread>:
 8011708:	b510      	push	{r4, lr}
 801170a:	460c      	mov	r4, r1
 801170c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011710:	f000 fa5c 	bl	8011bcc <_read_r>
 8011714:	2800      	cmp	r0, #0
 8011716:	bfab      	itete	ge
 8011718:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801171a:	89a3      	ldrhlt	r3, [r4, #12]
 801171c:	181b      	addge	r3, r3, r0
 801171e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011722:	bfac      	ite	ge
 8011724:	6563      	strge	r3, [r4, #84]	; 0x54
 8011726:	81a3      	strhlt	r3, [r4, #12]
 8011728:	bd10      	pop	{r4, pc}

0801172a <__swrite>:
 801172a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801172e:	461f      	mov	r7, r3
 8011730:	898b      	ldrh	r3, [r1, #12]
 8011732:	05db      	lsls	r3, r3, #23
 8011734:	4605      	mov	r5, r0
 8011736:	460c      	mov	r4, r1
 8011738:	4616      	mov	r6, r2
 801173a:	d505      	bpl.n	8011748 <__swrite+0x1e>
 801173c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011740:	2302      	movs	r3, #2
 8011742:	2200      	movs	r2, #0
 8011744:	f000 f882 	bl	801184c <_lseek_r>
 8011748:	89a3      	ldrh	r3, [r4, #12]
 801174a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801174e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011752:	81a3      	strh	r3, [r4, #12]
 8011754:	4632      	mov	r2, r6
 8011756:	463b      	mov	r3, r7
 8011758:	4628      	mov	r0, r5
 801175a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801175e:	f000 b823 	b.w	80117a8 <_write_r>

08011762 <__sseek>:
 8011762:	b510      	push	{r4, lr}
 8011764:	460c      	mov	r4, r1
 8011766:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801176a:	f000 f86f 	bl	801184c <_lseek_r>
 801176e:	1c43      	adds	r3, r0, #1
 8011770:	89a3      	ldrh	r3, [r4, #12]
 8011772:	bf15      	itete	ne
 8011774:	6560      	strne	r0, [r4, #84]	; 0x54
 8011776:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801177a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801177e:	81a3      	strheq	r3, [r4, #12]
 8011780:	bf18      	it	ne
 8011782:	81a3      	strhne	r3, [r4, #12]
 8011784:	bd10      	pop	{r4, pc}

08011786 <__sclose>:
 8011786:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801178a:	f000 b83d 	b.w	8011808 <_close_r>

0801178e <__ascii_wctomb>:
 801178e:	b149      	cbz	r1, 80117a4 <__ascii_wctomb+0x16>
 8011790:	2aff      	cmp	r2, #255	; 0xff
 8011792:	bf85      	ittet	hi
 8011794:	238a      	movhi	r3, #138	; 0x8a
 8011796:	6003      	strhi	r3, [r0, #0]
 8011798:	700a      	strbls	r2, [r1, #0]
 801179a:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 801179e:	bf98      	it	ls
 80117a0:	2001      	movls	r0, #1
 80117a2:	4770      	bx	lr
 80117a4:	4608      	mov	r0, r1
 80117a6:	4770      	bx	lr

080117a8 <_write_r>:
 80117a8:	b538      	push	{r3, r4, r5, lr}
 80117aa:	4d07      	ldr	r5, [pc, #28]	; (80117c8 <_write_r+0x20>)
 80117ac:	4604      	mov	r4, r0
 80117ae:	4608      	mov	r0, r1
 80117b0:	4611      	mov	r1, r2
 80117b2:	2200      	movs	r2, #0
 80117b4:	602a      	str	r2, [r5, #0]
 80117b6:	461a      	mov	r2, r3
 80117b8:	f7f3 fd75 	bl	80052a6 <_write>
 80117bc:	1c43      	adds	r3, r0, #1
 80117be:	d102      	bne.n	80117c6 <_write_r+0x1e>
 80117c0:	682b      	ldr	r3, [r5, #0]
 80117c2:	b103      	cbz	r3, 80117c6 <_write_r+0x1e>
 80117c4:	6023      	str	r3, [r4, #0]
 80117c6:	bd38      	pop	{r3, r4, r5, pc}
 80117c8:	20002df4 	.word	0x20002df4

080117cc <__assert_func>:
 80117cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80117ce:	4614      	mov	r4, r2
 80117d0:	461a      	mov	r2, r3
 80117d2:	4b09      	ldr	r3, [pc, #36]	; (80117f8 <__assert_func+0x2c>)
 80117d4:	681b      	ldr	r3, [r3, #0]
 80117d6:	4605      	mov	r5, r0
 80117d8:	68d8      	ldr	r0, [r3, #12]
 80117da:	b14c      	cbz	r4, 80117f0 <__assert_func+0x24>
 80117dc:	4b07      	ldr	r3, [pc, #28]	; (80117fc <__assert_func+0x30>)
 80117de:	9100      	str	r1, [sp, #0]
 80117e0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80117e4:	4906      	ldr	r1, [pc, #24]	; (8011800 <__assert_func+0x34>)
 80117e6:	462b      	mov	r3, r5
 80117e8:	f000 f81e 	bl	8011828 <fiprintf>
 80117ec:	f000 fac0 	bl	8011d70 <abort>
 80117f0:	4b04      	ldr	r3, [pc, #16]	; (8011804 <__assert_func+0x38>)
 80117f2:	461c      	mov	r4, r3
 80117f4:	e7f3      	b.n	80117de <__assert_func+0x12>
 80117f6:	bf00      	nop
 80117f8:	20000218 	.word	0x20000218
 80117fc:	08013aa5 	.word	0x08013aa5
 8011800:	08013ab2 	.word	0x08013ab2
 8011804:	08013ae0 	.word	0x08013ae0

08011808 <_close_r>:
 8011808:	b538      	push	{r3, r4, r5, lr}
 801180a:	4d06      	ldr	r5, [pc, #24]	; (8011824 <_close_r+0x1c>)
 801180c:	2300      	movs	r3, #0
 801180e:	4604      	mov	r4, r0
 8011810:	4608      	mov	r0, r1
 8011812:	602b      	str	r3, [r5, #0]
 8011814:	f7f3 fd63 	bl	80052de <_close>
 8011818:	1c43      	adds	r3, r0, #1
 801181a:	d102      	bne.n	8011822 <_close_r+0x1a>
 801181c:	682b      	ldr	r3, [r5, #0]
 801181e:	b103      	cbz	r3, 8011822 <_close_r+0x1a>
 8011820:	6023      	str	r3, [r4, #0]
 8011822:	bd38      	pop	{r3, r4, r5, pc}
 8011824:	20002df4 	.word	0x20002df4

08011828 <fiprintf>:
 8011828:	b40e      	push	{r1, r2, r3}
 801182a:	b503      	push	{r0, r1, lr}
 801182c:	4601      	mov	r1, r0
 801182e:	ab03      	add	r3, sp, #12
 8011830:	4805      	ldr	r0, [pc, #20]	; (8011848 <fiprintf+0x20>)
 8011832:	f853 2b04 	ldr.w	r2, [r3], #4
 8011836:	6800      	ldr	r0, [r0, #0]
 8011838:	9301      	str	r3, [sp, #4]
 801183a:	f000 f897 	bl	801196c <_vfiprintf_r>
 801183e:	b002      	add	sp, #8
 8011840:	f85d eb04 	ldr.w	lr, [sp], #4
 8011844:	b003      	add	sp, #12
 8011846:	4770      	bx	lr
 8011848:	20000218 	.word	0x20000218

0801184c <_lseek_r>:
 801184c:	b538      	push	{r3, r4, r5, lr}
 801184e:	4d07      	ldr	r5, [pc, #28]	; (801186c <_lseek_r+0x20>)
 8011850:	4604      	mov	r4, r0
 8011852:	4608      	mov	r0, r1
 8011854:	4611      	mov	r1, r2
 8011856:	2200      	movs	r2, #0
 8011858:	602a      	str	r2, [r5, #0]
 801185a:	461a      	mov	r2, r3
 801185c:	f7f3 fd66 	bl	800532c <_lseek>
 8011860:	1c43      	adds	r3, r0, #1
 8011862:	d102      	bne.n	801186a <_lseek_r+0x1e>
 8011864:	682b      	ldr	r3, [r5, #0]
 8011866:	b103      	cbz	r3, 801186a <_lseek_r+0x1e>
 8011868:	6023      	str	r3, [r4, #0]
 801186a:	bd38      	pop	{r3, r4, r5, pc}
 801186c:	20002df4 	.word	0x20002df4

08011870 <memmove>:
 8011870:	4288      	cmp	r0, r1
 8011872:	b510      	push	{r4, lr}
 8011874:	eb01 0402 	add.w	r4, r1, r2
 8011878:	d902      	bls.n	8011880 <memmove+0x10>
 801187a:	4284      	cmp	r4, r0
 801187c:	4623      	mov	r3, r4
 801187e:	d807      	bhi.n	8011890 <memmove+0x20>
 8011880:	1e43      	subs	r3, r0, #1
 8011882:	42a1      	cmp	r1, r4
 8011884:	d008      	beq.n	8011898 <memmove+0x28>
 8011886:	f811 2b01 	ldrb.w	r2, [r1], #1
 801188a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801188e:	e7f8      	b.n	8011882 <memmove+0x12>
 8011890:	4402      	add	r2, r0
 8011892:	4601      	mov	r1, r0
 8011894:	428a      	cmp	r2, r1
 8011896:	d100      	bne.n	801189a <memmove+0x2a>
 8011898:	bd10      	pop	{r4, pc}
 801189a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801189e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80118a2:	e7f7      	b.n	8011894 <memmove+0x24>

080118a4 <__malloc_lock>:
 80118a4:	4801      	ldr	r0, [pc, #4]	; (80118ac <__malloc_lock+0x8>)
 80118a6:	f7fe bfe6 	b.w	8010876 <__retarget_lock_acquire_recursive>
 80118aa:	bf00      	nop
 80118ac:	20002de8 	.word	0x20002de8

080118b0 <__malloc_unlock>:
 80118b0:	4801      	ldr	r0, [pc, #4]	; (80118b8 <__malloc_unlock+0x8>)
 80118b2:	f7fe bfe1 	b.w	8010878 <__retarget_lock_release_recursive>
 80118b6:	bf00      	nop
 80118b8:	20002de8 	.word	0x20002de8

080118bc <_realloc_r>:
 80118bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80118c0:	4680      	mov	r8, r0
 80118c2:	4614      	mov	r4, r2
 80118c4:	460e      	mov	r6, r1
 80118c6:	b921      	cbnz	r1, 80118d2 <_realloc_r+0x16>
 80118c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80118cc:	4611      	mov	r1, r2
 80118ce:	f7ff bd33 	b.w	8011338 <_malloc_r>
 80118d2:	b92a      	cbnz	r2, 80118e0 <_realloc_r+0x24>
 80118d4:	f7ff fcc4 	bl	8011260 <_free_r>
 80118d8:	4625      	mov	r5, r4
 80118da:	4628      	mov	r0, r5
 80118dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80118e0:	f000 fc6a 	bl	80121b8 <_malloc_usable_size_r>
 80118e4:	4284      	cmp	r4, r0
 80118e6:	4607      	mov	r7, r0
 80118e8:	d802      	bhi.n	80118f0 <_realloc_r+0x34>
 80118ea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80118ee:	d812      	bhi.n	8011916 <_realloc_r+0x5a>
 80118f0:	4621      	mov	r1, r4
 80118f2:	4640      	mov	r0, r8
 80118f4:	f7ff fd20 	bl	8011338 <_malloc_r>
 80118f8:	4605      	mov	r5, r0
 80118fa:	2800      	cmp	r0, #0
 80118fc:	d0ed      	beq.n	80118da <_realloc_r+0x1e>
 80118fe:	42bc      	cmp	r4, r7
 8011900:	4622      	mov	r2, r4
 8011902:	4631      	mov	r1, r6
 8011904:	bf28      	it	cs
 8011906:	463a      	movcs	r2, r7
 8011908:	f7fc f9f8 	bl	800dcfc <memcpy>
 801190c:	4631      	mov	r1, r6
 801190e:	4640      	mov	r0, r8
 8011910:	f7ff fca6 	bl	8011260 <_free_r>
 8011914:	e7e1      	b.n	80118da <_realloc_r+0x1e>
 8011916:	4635      	mov	r5, r6
 8011918:	e7df      	b.n	80118da <_realloc_r+0x1e>

0801191a <__sfputc_r>:
 801191a:	6893      	ldr	r3, [r2, #8]
 801191c:	3b01      	subs	r3, #1
 801191e:	2b00      	cmp	r3, #0
 8011920:	b410      	push	{r4}
 8011922:	6093      	str	r3, [r2, #8]
 8011924:	da08      	bge.n	8011938 <__sfputc_r+0x1e>
 8011926:	6994      	ldr	r4, [r2, #24]
 8011928:	42a3      	cmp	r3, r4
 801192a:	db01      	blt.n	8011930 <__sfputc_r+0x16>
 801192c:	290a      	cmp	r1, #10
 801192e:	d103      	bne.n	8011938 <__sfputc_r+0x1e>
 8011930:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011934:	f000 b95c 	b.w	8011bf0 <__swbuf_r>
 8011938:	6813      	ldr	r3, [r2, #0]
 801193a:	1c58      	adds	r0, r3, #1
 801193c:	6010      	str	r0, [r2, #0]
 801193e:	7019      	strb	r1, [r3, #0]
 8011940:	4608      	mov	r0, r1
 8011942:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011946:	4770      	bx	lr

08011948 <__sfputs_r>:
 8011948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801194a:	4606      	mov	r6, r0
 801194c:	460f      	mov	r7, r1
 801194e:	4614      	mov	r4, r2
 8011950:	18d5      	adds	r5, r2, r3
 8011952:	42ac      	cmp	r4, r5
 8011954:	d101      	bne.n	801195a <__sfputs_r+0x12>
 8011956:	2000      	movs	r0, #0
 8011958:	e007      	b.n	801196a <__sfputs_r+0x22>
 801195a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801195e:	463a      	mov	r2, r7
 8011960:	4630      	mov	r0, r6
 8011962:	f7ff ffda 	bl	801191a <__sfputc_r>
 8011966:	1c43      	adds	r3, r0, #1
 8011968:	d1f3      	bne.n	8011952 <__sfputs_r+0xa>
 801196a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801196c <_vfiprintf_r>:
 801196c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011970:	460d      	mov	r5, r1
 8011972:	b09d      	sub	sp, #116	; 0x74
 8011974:	4614      	mov	r4, r2
 8011976:	4698      	mov	r8, r3
 8011978:	4606      	mov	r6, r0
 801197a:	b118      	cbz	r0, 8011984 <_vfiprintf_r+0x18>
 801197c:	6983      	ldr	r3, [r0, #24]
 801197e:	b90b      	cbnz	r3, 8011984 <_vfiprintf_r+0x18>
 8011980:	f000 fb18 	bl	8011fb4 <__sinit>
 8011984:	4b89      	ldr	r3, [pc, #548]	; (8011bac <_vfiprintf_r+0x240>)
 8011986:	429d      	cmp	r5, r3
 8011988:	d11b      	bne.n	80119c2 <_vfiprintf_r+0x56>
 801198a:	6875      	ldr	r5, [r6, #4]
 801198c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801198e:	07d9      	lsls	r1, r3, #31
 8011990:	d405      	bmi.n	801199e <_vfiprintf_r+0x32>
 8011992:	89ab      	ldrh	r3, [r5, #12]
 8011994:	059a      	lsls	r2, r3, #22
 8011996:	d402      	bmi.n	801199e <_vfiprintf_r+0x32>
 8011998:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801199a:	f7fe ff6c 	bl	8010876 <__retarget_lock_acquire_recursive>
 801199e:	89ab      	ldrh	r3, [r5, #12]
 80119a0:	071b      	lsls	r3, r3, #28
 80119a2:	d501      	bpl.n	80119a8 <_vfiprintf_r+0x3c>
 80119a4:	692b      	ldr	r3, [r5, #16]
 80119a6:	b9eb      	cbnz	r3, 80119e4 <_vfiprintf_r+0x78>
 80119a8:	4629      	mov	r1, r5
 80119aa:	4630      	mov	r0, r6
 80119ac:	f000 f972 	bl	8011c94 <__swsetup_r>
 80119b0:	b1c0      	cbz	r0, 80119e4 <_vfiprintf_r+0x78>
 80119b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80119b4:	07dc      	lsls	r4, r3, #31
 80119b6:	d50e      	bpl.n	80119d6 <_vfiprintf_r+0x6a>
 80119b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80119bc:	b01d      	add	sp, #116	; 0x74
 80119be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119c2:	4b7b      	ldr	r3, [pc, #492]	; (8011bb0 <_vfiprintf_r+0x244>)
 80119c4:	429d      	cmp	r5, r3
 80119c6:	d101      	bne.n	80119cc <_vfiprintf_r+0x60>
 80119c8:	68b5      	ldr	r5, [r6, #8]
 80119ca:	e7df      	b.n	801198c <_vfiprintf_r+0x20>
 80119cc:	4b79      	ldr	r3, [pc, #484]	; (8011bb4 <_vfiprintf_r+0x248>)
 80119ce:	429d      	cmp	r5, r3
 80119d0:	bf08      	it	eq
 80119d2:	68f5      	ldreq	r5, [r6, #12]
 80119d4:	e7da      	b.n	801198c <_vfiprintf_r+0x20>
 80119d6:	89ab      	ldrh	r3, [r5, #12]
 80119d8:	0598      	lsls	r0, r3, #22
 80119da:	d4ed      	bmi.n	80119b8 <_vfiprintf_r+0x4c>
 80119dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80119de:	f7fe ff4b 	bl	8010878 <__retarget_lock_release_recursive>
 80119e2:	e7e9      	b.n	80119b8 <_vfiprintf_r+0x4c>
 80119e4:	2300      	movs	r3, #0
 80119e6:	9309      	str	r3, [sp, #36]	; 0x24
 80119e8:	2320      	movs	r3, #32
 80119ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80119ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80119f2:	2330      	movs	r3, #48	; 0x30
 80119f4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011bb8 <_vfiprintf_r+0x24c>
 80119f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80119fc:	f04f 0901 	mov.w	r9, #1
 8011a00:	4623      	mov	r3, r4
 8011a02:	469a      	mov	sl, r3
 8011a04:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011a08:	b10a      	cbz	r2, 8011a0e <_vfiprintf_r+0xa2>
 8011a0a:	2a25      	cmp	r2, #37	; 0x25
 8011a0c:	d1f9      	bne.n	8011a02 <_vfiprintf_r+0x96>
 8011a0e:	ebba 0b04 	subs.w	fp, sl, r4
 8011a12:	d00b      	beq.n	8011a2c <_vfiprintf_r+0xc0>
 8011a14:	465b      	mov	r3, fp
 8011a16:	4622      	mov	r2, r4
 8011a18:	4629      	mov	r1, r5
 8011a1a:	4630      	mov	r0, r6
 8011a1c:	f7ff ff94 	bl	8011948 <__sfputs_r>
 8011a20:	3001      	adds	r0, #1
 8011a22:	f000 80aa 	beq.w	8011b7a <_vfiprintf_r+0x20e>
 8011a26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011a28:	445a      	add	r2, fp
 8011a2a:	9209      	str	r2, [sp, #36]	; 0x24
 8011a2c:	f89a 3000 	ldrb.w	r3, [sl]
 8011a30:	2b00      	cmp	r3, #0
 8011a32:	f000 80a2 	beq.w	8011b7a <_vfiprintf_r+0x20e>
 8011a36:	2300      	movs	r3, #0
 8011a38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011a3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011a40:	f10a 0a01 	add.w	sl, sl, #1
 8011a44:	9304      	str	r3, [sp, #16]
 8011a46:	9307      	str	r3, [sp, #28]
 8011a48:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011a4c:	931a      	str	r3, [sp, #104]	; 0x68
 8011a4e:	4654      	mov	r4, sl
 8011a50:	2205      	movs	r2, #5
 8011a52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011a56:	4858      	ldr	r0, [pc, #352]	; (8011bb8 <_vfiprintf_r+0x24c>)
 8011a58:	f7ee fbc2 	bl	80001e0 <memchr>
 8011a5c:	9a04      	ldr	r2, [sp, #16]
 8011a5e:	b9d8      	cbnz	r0, 8011a98 <_vfiprintf_r+0x12c>
 8011a60:	06d1      	lsls	r1, r2, #27
 8011a62:	bf44      	itt	mi
 8011a64:	2320      	movmi	r3, #32
 8011a66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011a6a:	0713      	lsls	r3, r2, #28
 8011a6c:	bf44      	itt	mi
 8011a6e:	232b      	movmi	r3, #43	; 0x2b
 8011a70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011a74:	f89a 3000 	ldrb.w	r3, [sl]
 8011a78:	2b2a      	cmp	r3, #42	; 0x2a
 8011a7a:	d015      	beq.n	8011aa8 <_vfiprintf_r+0x13c>
 8011a7c:	9a07      	ldr	r2, [sp, #28]
 8011a7e:	4654      	mov	r4, sl
 8011a80:	2000      	movs	r0, #0
 8011a82:	f04f 0c0a 	mov.w	ip, #10
 8011a86:	4621      	mov	r1, r4
 8011a88:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011a8c:	3b30      	subs	r3, #48	; 0x30
 8011a8e:	2b09      	cmp	r3, #9
 8011a90:	d94e      	bls.n	8011b30 <_vfiprintf_r+0x1c4>
 8011a92:	b1b0      	cbz	r0, 8011ac2 <_vfiprintf_r+0x156>
 8011a94:	9207      	str	r2, [sp, #28]
 8011a96:	e014      	b.n	8011ac2 <_vfiprintf_r+0x156>
 8011a98:	eba0 0308 	sub.w	r3, r0, r8
 8011a9c:	fa09 f303 	lsl.w	r3, r9, r3
 8011aa0:	4313      	orrs	r3, r2
 8011aa2:	9304      	str	r3, [sp, #16]
 8011aa4:	46a2      	mov	sl, r4
 8011aa6:	e7d2      	b.n	8011a4e <_vfiprintf_r+0xe2>
 8011aa8:	9b03      	ldr	r3, [sp, #12]
 8011aaa:	1d19      	adds	r1, r3, #4
 8011aac:	681b      	ldr	r3, [r3, #0]
 8011aae:	9103      	str	r1, [sp, #12]
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	bfbb      	ittet	lt
 8011ab4:	425b      	neglt	r3, r3
 8011ab6:	f042 0202 	orrlt.w	r2, r2, #2
 8011aba:	9307      	strge	r3, [sp, #28]
 8011abc:	9307      	strlt	r3, [sp, #28]
 8011abe:	bfb8      	it	lt
 8011ac0:	9204      	strlt	r2, [sp, #16]
 8011ac2:	7823      	ldrb	r3, [r4, #0]
 8011ac4:	2b2e      	cmp	r3, #46	; 0x2e
 8011ac6:	d10c      	bne.n	8011ae2 <_vfiprintf_r+0x176>
 8011ac8:	7863      	ldrb	r3, [r4, #1]
 8011aca:	2b2a      	cmp	r3, #42	; 0x2a
 8011acc:	d135      	bne.n	8011b3a <_vfiprintf_r+0x1ce>
 8011ace:	9b03      	ldr	r3, [sp, #12]
 8011ad0:	1d1a      	adds	r2, r3, #4
 8011ad2:	681b      	ldr	r3, [r3, #0]
 8011ad4:	9203      	str	r2, [sp, #12]
 8011ad6:	2b00      	cmp	r3, #0
 8011ad8:	bfb8      	it	lt
 8011ada:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8011ade:	3402      	adds	r4, #2
 8011ae0:	9305      	str	r3, [sp, #20]
 8011ae2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011bc8 <_vfiprintf_r+0x25c>
 8011ae6:	7821      	ldrb	r1, [r4, #0]
 8011ae8:	2203      	movs	r2, #3
 8011aea:	4650      	mov	r0, sl
 8011aec:	f7ee fb78 	bl	80001e0 <memchr>
 8011af0:	b140      	cbz	r0, 8011b04 <_vfiprintf_r+0x198>
 8011af2:	2340      	movs	r3, #64	; 0x40
 8011af4:	eba0 000a 	sub.w	r0, r0, sl
 8011af8:	fa03 f000 	lsl.w	r0, r3, r0
 8011afc:	9b04      	ldr	r3, [sp, #16]
 8011afe:	4303      	orrs	r3, r0
 8011b00:	3401      	adds	r4, #1
 8011b02:	9304      	str	r3, [sp, #16]
 8011b04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011b08:	482c      	ldr	r0, [pc, #176]	; (8011bbc <_vfiprintf_r+0x250>)
 8011b0a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011b0e:	2206      	movs	r2, #6
 8011b10:	f7ee fb66 	bl	80001e0 <memchr>
 8011b14:	2800      	cmp	r0, #0
 8011b16:	d03f      	beq.n	8011b98 <_vfiprintf_r+0x22c>
 8011b18:	4b29      	ldr	r3, [pc, #164]	; (8011bc0 <_vfiprintf_r+0x254>)
 8011b1a:	bb1b      	cbnz	r3, 8011b64 <_vfiprintf_r+0x1f8>
 8011b1c:	9b03      	ldr	r3, [sp, #12]
 8011b1e:	3307      	adds	r3, #7
 8011b20:	f023 0307 	bic.w	r3, r3, #7
 8011b24:	3308      	adds	r3, #8
 8011b26:	9303      	str	r3, [sp, #12]
 8011b28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011b2a:	443b      	add	r3, r7
 8011b2c:	9309      	str	r3, [sp, #36]	; 0x24
 8011b2e:	e767      	b.n	8011a00 <_vfiprintf_r+0x94>
 8011b30:	fb0c 3202 	mla	r2, ip, r2, r3
 8011b34:	460c      	mov	r4, r1
 8011b36:	2001      	movs	r0, #1
 8011b38:	e7a5      	b.n	8011a86 <_vfiprintf_r+0x11a>
 8011b3a:	2300      	movs	r3, #0
 8011b3c:	3401      	adds	r4, #1
 8011b3e:	9305      	str	r3, [sp, #20]
 8011b40:	4619      	mov	r1, r3
 8011b42:	f04f 0c0a 	mov.w	ip, #10
 8011b46:	4620      	mov	r0, r4
 8011b48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011b4c:	3a30      	subs	r2, #48	; 0x30
 8011b4e:	2a09      	cmp	r2, #9
 8011b50:	d903      	bls.n	8011b5a <_vfiprintf_r+0x1ee>
 8011b52:	2b00      	cmp	r3, #0
 8011b54:	d0c5      	beq.n	8011ae2 <_vfiprintf_r+0x176>
 8011b56:	9105      	str	r1, [sp, #20]
 8011b58:	e7c3      	b.n	8011ae2 <_vfiprintf_r+0x176>
 8011b5a:	fb0c 2101 	mla	r1, ip, r1, r2
 8011b5e:	4604      	mov	r4, r0
 8011b60:	2301      	movs	r3, #1
 8011b62:	e7f0      	b.n	8011b46 <_vfiprintf_r+0x1da>
 8011b64:	ab03      	add	r3, sp, #12
 8011b66:	9300      	str	r3, [sp, #0]
 8011b68:	462a      	mov	r2, r5
 8011b6a:	4b16      	ldr	r3, [pc, #88]	; (8011bc4 <_vfiprintf_r+0x258>)
 8011b6c:	a904      	add	r1, sp, #16
 8011b6e:	4630      	mov	r0, r6
 8011b70:	f7fc f97a 	bl	800de68 <_printf_float>
 8011b74:	4607      	mov	r7, r0
 8011b76:	1c78      	adds	r0, r7, #1
 8011b78:	d1d6      	bne.n	8011b28 <_vfiprintf_r+0x1bc>
 8011b7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011b7c:	07d9      	lsls	r1, r3, #31
 8011b7e:	d405      	bmi.n	8011b8c <_vfiprintf_r+0x220>
 8011b80:	89ab      	ldrh	r3, [r5, #12]
 8011b82:	059a      	lsls	r2, r3, #22
 8011b84:	d402      	bmi.n	8011b8c <_vfiprintf_r+0x220>
 8011b86:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011b88:	f7fe fe76 	bl	8010878 <__retarget_lock_release_recursive>
 8011b8c:	89ab      	ldrh	r3, [r5, #12]
 8011b8e:	065b      	lsls	r3, r3, #25
 8011b90:	f53f af12 	bmi.w	80119b8 <_vfiprintf_r+0x4c>
 8011b94:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011b96:	e711      	b.n	80119bc <_vfiprintf_r+0x50>
 8011b98:	ab03      	add	r3, sp, #12
 8011b9a:	9300      	str	r3, [sp, #0]
 8011b9c:	462a      	mov	r2, r5
 8011b9e:	4b09      	ldr	r3, [pc, #36]	; (8011bc4 <_vfiprintf_r+0x258>)
 8011ba0:	a904      	add	r1, sp, #16
 8011ba2:	4630      	mov	r0, r6
 8011ba4:	f7fc fc04 	bl	800e3b0 <_printf_i>
 8011ba8:	e7e4      	b.n	8011b74 <_vfiprintf_r+0x208>
 8011baa:	bf00      	nop
 8011bac:	08013b04 	.word	0x08013b04
 8011bb0:	08013b24 	.word	0x08013b24
 8011bb4:	08013ae4 	.word	0x08013ae4
 8011bb8:	08013a94 	.word	0x08013a94
 8011bbc:	08013a9e 	.word	0x08013a9e
 8011bc0:	0800de69 	.word	0x0800de69
 8011bc4:	08011949 	.word	0x08011949
 8011bc8:	08013a9a 	.word	0x08013a9a

08011bcc <_read_r>:
 8011bcc:	b538      	push	{r3, r4, r5, lr}
 8011bce:	4d07      	ldr	r5, [pc, #28]	; (8011bec <_read_r+0x20>)
 8011bd0:	4604      	mov	r4, r0
 8011bd2:	4608      	mov	r0, r1
 8011bd4:	4611      	mov	r1, r2
 8011bd6:	2200      	movs	r2, #0
 8011bd8:	602a      	str	r2, [r5, #0]
 8011bda:	461a      	mov	r2, r3
 8011bdc:	f7f3 fb46 	bl	800526c <_read>
 8011be0:	1c43      	adds	r3, r0, #1
 8011be2:	d102      	bne.n	8011bea <_read_r+0x1e>
 8011be4:	682b      	ldr	r3, [r5, #0]
 8011be6:	b103      	cbz	r3, 8011bea <_read_r+0x1e>
 8011be8:	6023      	str	r3, [r4, #0]
 8011bea:	bd38      	pop	{r3, r4, r5, pc}
 8011bec:	20002df4 	.word	0x20002df4

08011bf0 <__swbuf_r>:
 8011bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011bf2:	460e      	mov	r6, r1
 8011bf4:	4614      	mov	r4, r2
 8011bf6:	4605      	mov	r5, r0
 8011bf8:	b118      	cbz	r0, 8011c02 <__swbuf_r+0x12>
 8011bfa:	6983      	ldr	r3, [r0, #24]
 8011bfc:	b90b      	cbnz	r3, 8011c02 <__swbuf_r+0x12>
 8011bfe:	f000 f9d9 	bl	8011fb4 <__sinit>
 8011c02:	4b21      	ldr	r3, [pc, #132]	; (8011c88 <__swbuf_r+0x98>)
 8011c04:	429c      	cmp	r4, r3
 8011c06:	d12b      	bne.n	8011c60 <__swbuf_r+0x70>
 8011c08:	686c      	ldr	r4, [r5, #4]
 8011c0a:	69a3      	ldr	r3, [r4, #24]
 8011c0c:	60a3      	str	r3, [r4, #8]
 8011c0e:	89a3      	ldrh	r3, [r4, #12]
 8011c10:	071a      	lsls	r2, r3, #28
 8011c12:	d52f      	bpl.n	8011c74 <__swbuf_r+0x84>
 8011c14:	6923      	ldr	r3, [r4, #16]
 8011c16:	b36b      	cbz	r3, 8011c74 <__swbuf_r+0x84>
 8011c18:	6923      	ldr	r3, [r4, #16]
 8011c1a:	6820      	ldr	r0, [r4, #0]
 8011c1c:	1ac0      	subs	r0, r0, r3
 8011c1e:	6963      	ldr	r3, [r4, #20]
 8011c20:	b2f6      	uxtb	r6, r6
 8011c22:	4283      	cmp	r3, r0
 8011c24:	4637      	mov	r7, r6
 8011c26:	dc04      	bgt.n	8011c32 <__swbuf_r+0x42>
 8011c28:	4621      	mov	r1, r4
 8011c2a:	4628      	mov	r0, r5
 8011c2c:	f000 f92e 	bl	8011e8c <_fflush_r>
 8011c30:	bb30      	cbnz	r0, 8011c80 <__swbuf_r+0x90>
 8011c32:	68a3      	ldr	r3, [r4, #8]
 8011c34:	3b01      	subs	r3, #1
 8011c36:	60a3      	str	r3, [r4, #8]
 8011c38:	6823      	ldr	r3, [r4, #0]
 8011c3a:	1c5a      	adds	r2, r3, #1
 8011c3c:	6022      	str	r2, [r4, #0]
 8011c3e:	701e      	strb	r6, [r3, #0]
 8011c40:	6963      	ldr	r3, [r4, #20]
 8011c42:	3001      	adds	r0, #1
 8011c44:	4283      	cmp	r3, r0
 8011c46:	d004      	beq.n	8011c52 <__swbuf_r+0x62>
 8011c48:	89a3      	ldrh	r3, [r4, #12]
 8011c4a:	07db      	lsls	r3, r3, #31
 8011c4c:	d506      	bpl.n	8011c5c <__swbuf_r+0x6c>
 8011c4e:	2e0a      	cmp	r6, #10
 8011c50:	d104      	bne.n	8011c5c <__swbuf_r+0x6c>
 8011c52:	4621      	mov	r1, r4
 8011c54:	4628      	mov	r0, r5
 8011c56:	f000 f919 	bl	8011e8c <_fflush_r>
 8011c5a:	b988      	cbnz	r0, 8011c80 <__swbuf_r+0x90>
 8011c5c:	4638      	mov	r0, r7
 8011c5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011c60:	4b0a      	ldr	r3, [pc, #40]	; (8011c8c <__swbuf_r+0x9c>)
 8011c62:	429c      	cmp	r4, r3
 8011c64:	d101      	bne.n	8011c6a <__swbuf_r+0x7a>
 8011c66:	68ac      	ldr	r4, [r5, #8]
 8011c68:	e7cf      	b.n	8011c0a <__swbuf_r+0x1a>
 8011c6a:	4b09      	ldr	r3, [pc, #36]	; (8011c90 <__swbuf_r+0xa0>)
 8011c6c:	429c      	cmp	r4, r3
 8011c6e:	bf08      	it	eq
 8011c70:	68ec      	ldreq	r4, [r5, #12]
 8011c72:	e7ca      	b.n	8011c0a <__swbuf_r+0x1a>
 8011c74:	4621      	mov	r1, r4
 8011c76:	4628      	mov	r0, r5
 8011c78:	f000 f80c 	bl	8011c94 <__swsetup_r>
 8011c7c:	2800      	cmp	r0, #0
 8011c7e:	d0cb      	beq.n	8011c18 <__swbuf_r+0x28>
 8011c80:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8011c84:	e7ea      	b.n	8011c5c <__swbuf_r+0x6c>
 8011c86:	bf00      	nop
 8011c88:	08013b04 	.word	0x08013b04
 8011c8c:	08013b24 	.word	0x08013b24
 8011c90:	08013ae4 	.word	0x08013ae4

08011c94 <__swsetup_r>:
 8011c94:	4b32      	ldr	r3, [pc, #200]	; (8011d60 <__swsetup_r+0xcc>)
 8011c96:	b570      	push	{r4, r5, r6, lr}
 8011c98:	681d      	ldr	r5, [r3, #0]
 8011c9a:	4606      	mov	r6, r0
 8011c9c:	460c      	mov	r4, r1
 8011c9e:	b125      	cbz	r5, 8011caa <__swsetup_r+0x16>
 8011ca0:	69ab      	ldr	r3, [r5, #24]
 8011ca2:	b913      	cbnz	r3, 8011caa <__swsetup_r+0x16>
 8011ca4:	4628      	mov	r0, r5
 8011ca6:	f000 f985 	bl	8011fb4 <__sinit>
 8011caa:	4b2e      	ldr	r3, [pc, #184]	; (8011d64 <__swsetup_r+0xd0>)
 8011cac:	429c      	cmp	r4, r3
 8011cae:	d10f      	bne.n	8011cd0 <__swsetup_r+0x3c>
 8011cb0:	686c      	ldr	r4, [r5, #4]
 8011cb2:	89a3      	ldrh	r3, [r4, #12]
 8011cb4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011cb8:	0719      	lsls	r1, r3, #28
 8011cba:	d42c      	bmi.n	8011d16 <__swsetup_r+0x82>
 8011cbc:	06dd      	lsls	r5, r3, #27
 8011cbe:	d411      	bmi.n	8011ce4 <__swsetup_r+0x50>
 8011cc0:	2309      	movs	r3, #9
 8011cc2:	6033      	str	r3, [r6, #0]
 8011cc4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011cc8:	81a3      	strh	r3, [r4, #12]
 8011cca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011cce:	e03e      	b.n	8011d4e <__swsetup_r+0xba>
 8011cd0:	4b25      	ldr	r3, [pc, #148]	; (8011d68 <__swsetup_r+0xd4>)
 8011cd2:	429c      	cmp	r4, r3
 8011cd4:	d101      	bne.n	8011cda <__swsetup_r+0x46>
 8011cd6:	68ac      	ldr	r4, [r5, #8]
 8011cd8:	e7eb      	b.n	8011cb2 <__swsetup_r+0x1e>
 8011cda:	4b24      	ldr	r3, [pc, #144]	; (8011d6c <__swsetup_r+0xd8>)
 8011cdc:	429c      	cmp	r4, r3
 8011cde:	bf08      	it	eq
 8011ce0:	68ec      	ldreq	r4, [r5, #12]
 8011ce2:	e7e6      	b.n	8011cb2 <__swsetup_r+0x1e>
 8011ce4:	0758      	lsls	r0, r3, #29
 8011ce6:	d512      	bpl.n	8011d0e <__swsetup_r+0x7a>
 8011ce8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011cea:	b141      	cbz	r1, 8011cfe <__swsetup_r+0x6a>
 8011cec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011cf0:	4299      	cmp	r1, r3
 8011cf2:	d002      	beq.n	8011cfa <__swsetup_r+0x66>
 8011cf4:	4630      	mov	r0, r6
 8011cf6:	f7ff fab3 	bl	8011260 <_free_r>
 8011cfa:	2300      	movs	r3, #0
 8011cfc:	6363      	str	r3, [r4, #52]	; 0x34
 8011cfe:	89a3      	ldrh	r3, [r4, #12]
 8011d00:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011d04:	81a3      	strh	r3, [r4, #12]
 8011d06:	2300      	movs	r3, #0
 8011d08:	6063      	str	r3, [r4, #4]
 8011d0a:	6923      	ldr	r3, [r4, #16]
 8011d0c:	6023      	str	r3, [r4, #0]
 8011d0e:	89a3      	ldrh	r3, [r4, #12]
 8011d10:	f043 0308 	orr.w	r3, r3, #8
 8011d14:	81a3      	strh	r3, [r4, #12]
 8011d16:	6923      	ldr	r3, [r4, #16]
 8011d18:	b94b      	cbnz	r3, 8011d2e <__swsetup_r+0x9a>
 8011d1a:	89a3      	ldrh	r3, [r4, #12]
 8011d1c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011d20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011d24:	d003      	beq.n	8011d2e <__swsetup_r+0x9a>
 8011d26:	4621      	mov	r1, r4
 8011d28:	4630      	mov	r0, r6
 8011d2a:	f000 fa05 	bl	8012138 <__smakebuf_r>
 8011d2e:	89a0      	ldrh	r0, [r4, #12]
 8011d30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011d34:	f010 0301 	ands.w	r3, r0, #1
 8011d38:	d00a      	beq.n	8011d50 <__swsetup_r+0xbc>
 8011d3a:	2300      	movs	r3, #0
 8011d3c:	60a3      	str	r3, [r4, #8]
 8011d3e:	6963      	ldr	r3, [r4, #20]
 8011d40:	425b      	negs	r3, r3
 8011d42:	61a3      	str	r3, [r4, #24]
 8011d44:	6923      	ldr	r3, [r4, #16]
 8011d46:	b943      	cbnz	r3, 8011d5a <__swsetup_r+0xc6>
 8011d48:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011d4c:	d1ba      	bne.n	8011cc4 <__swsetup_r+0x30>
 8011d4e:	bd70      	pop	{r4, r5, r6, pc}
 8011d50:	0781      	lsls	r1, r0, #30
 8011d52:	bf58      	it	pl
 8011d54:	6963      	ldrpl	r3, [r4, #20]
 8011d56:	60a3      	str	r3, [r4, #8]
 8011d58:	e7f4      	b.n	8011d44 <__swsetup_r+0xb0>
 8011d5a:	2000      	movs	r0, #0
 8011d5c:	e7f7      	b.n	8011d4e <__swsetup_r+0xba>
 8011d5e:	bf00      	nop
 8011d60:	20000218 	.word	0x20000218
 8011d64:	08013b04 	.word	0x08013b04
 8011d68:	08013b24 	.word	0x08013b24
 8011d6c:	08013ae4 	.word	0x08013ae4

08011d70 <abort>:
 8011d70:	b508      	push	{r3, lr}
 8011d72:	2006      	movs	r0, #6
 8011d74:	f000 fa50 	bl	8012218 <raise>
 8011d78:	2001      	movs	r0, #1
 8011d7a:	f7f3 fa6d 	bl	8005258 <_exit>
	...

08011d80 <__sflush_r>:
 8011d80:	898a      	ldrh	r2, [r1, #12]
 8011d82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d86:	4605      	mov	r5, r0
 8011d88:	0710      	lsls	r0, r2, #28
 8011d8a:	460c      	mov	r4, r1
 8011d8c:	d458      	bmi.n	8011e40 <__sflush_r+0xc0>
 8011d8e:	684b      	ldr	r3, [r1, #4]
 8011d90:	2b00      	cmp	r3, #0
 8011d92:	dc05      	bgt.n	8011da0 <__sflush_r+0x20>
 8011d94:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	dc02      	bgt.n	8011da0 <__sflush_r+0x20>
 8011d9a:	2000      	movs	r0, #0
 8011d9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011da0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011da2:	2e00      	cmp	r6, #0
 8011da4:	d0f9      	beq.n	8011d9a <__sflush_r+0x1a>
 8011da6:	2300      	movs	r3, #0
 8011da8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011dac:	682f      	ldr	r7, [r5, #0]
 8011dae:	602b      	str	r3, [r5, #0]
 8011db0:	d032      	beq.n	8011e18 <__sflush_r+0x98>
 8011db2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011db4:	89a3      	ldrh	r3, [r4, #12]
 8011db6:	075a      	lsls	r2, r3, #29
 8011db8:	d505      	bpl.n	8011dc6 <__sflush_r+0x46>
 8011dba:	6863      	ldr	r3, [r4, #4]
 8011dbc:	1ac0      	subs	r0, r0, r3
 8011dbe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011dc0:	b10b      	cbz	r3, 8011dc6 <__sflush_r+0x46>
 8011dc2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011dc4:	1ac0      	subs	r0, r0, r3
 8011dc6:	2300      	movs	r3, #0
 8011dc8:	4602      	mov	r2, r0
 8011dca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011dcc:	6a21      	ldr	r1, [r4, #32]
 8011dce:	4628      	mov	r0, r5
 8011dd0:	47b0      	blx	r6
 8011dd2:	1c43      	adds	r3, r0, #1
 8011dd4:	89a3      	ldrh	r3, [r4, #12]
 8011dd6:	d106      	bne.n	8011de6 <__sflush_r+0x66>
 8011dd8:	6829      	ldr	r1, [r5, #0]
 8011dda:	291d      	cmp	r1, #29
 8011ddc:	d82c      	bhi.n	8011e38 <__sflush_r+0xb8>
 8011dde:	4a2a      	ldr	r2, [pc, #168]	; (8011e88 <__sflush_r+0x108>)
 8011de0:	40ca      	lsrs	r2, r1
 8011de2:	07d6      	lsls	r6, r2, #31
 8011de4:	d528      	bpl.n	8011e38 <__sflush_r+0xb8>
 8011de6:	2200      	movs	r2, #0
 8011de8:	6062      	str	r2, [r4, #4]
 8011dea:	04d9      	lsls	r1, r3, #19
 8011dec:	6922      	ldr	r2, [r4, #16]
 8011dee:	6022      	str	r2, [r4, #0]
 8011df0:	d504      	bpl.n	8011dfc <__sflush_r+0x7c>
 8011df2:	1c42      	adds	r2, r0, #1
 8011df4:	d101      	bne.n	8011dfa <__sflush_r+0x7a>
 8011df6:	682b      	ldr	r3, [r5, #0]
 8011df8:	b903      	cbnz	r3, 8011dfc <__sflush_r+0x7c>
 8011dfa:	6560      	str	r0, [r4, #84]	; 0x54
 8011dfc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011dfe:	602f      	str	r7, [r5, #0]
 8011e00:	2900      	cmp	r1, #0
 8011e02:	d0ca      	beq.n	8011d9a <__sflush_r+0x1a>
 8011e04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011e08:	4299      	cmp	r1, r3
 8011e0a:	d002      	beq.n	8011e12 <__sflush_r+0x92>
 8011e0c:	4628      	mov	r0, r5
 8011e0e:	f7ff fa27 	bl	8011260 <_free_r>
 8011e12:	2000      	movs	r0, #0
 8011e14:	6360      	str	r0, [r4, #52]	; 0x34
 8011e16:	e7c1      	b.n	8011d9c <__sflush_r+0x1c>
 8011e18:	6a21      	ldr	r1, [r4, #32]
 8011e1a:	2301      	movs	r3, #1
 8011e1c:	4628      	mov	r0, r5
 8011e1e:	47b0      	blx	r6
 8011e20:	1c41      	adds	r1, r0, #1
 8011e22:	d1c7      	bne.n	8011db4 <__sflush_r+0x34>
 8011e24:	682b      	ldr	r3, [r5, #0]
 8011e26:	2b00      	cmp	r3, #0
 8011e28:	d0c4      	beq.n	8011db4 <__sflush_r+0x34>
 8011e2a:	2b1d      	cmp	r3, #29
 8011e2c:	d001      	beq.n	8011e32 <__sflush_r+0xb2>
 8011e2e:	2b16      	cmp	r3, #22
 8011e30:	d101      	bne.n	8011e36 <__sflush_r+0xb6>
 8011e32:	602f      	str	r7, [r5, #0]
 8011e34:	e7b1      	b.n	8011d9a <__sflush_r+0x1a>
 8011e36:	89a3      	ldrh	r3, [r4, #12]
 8011e38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011e3c:	81a3      	strh	r3, [r4, #12]
 8011e3e:	e7ad      	b.n	8011d9c <__sflush_r+0x1c>
 8011e40:	690f      	ldr	r7, [r1, #16]
 8011e42:	2f00      	cmp	r7, #0
 8011e44:	d0a9      	beq.n	8011d9a <__sflush_r+0x1a>
 8011e46:	0793      	lsls	r3, r2, #30
 8011e48:	680e      	ldr	r6, [r1, #0]
 8011e4a:	bf08      	it	eq
 8011e4c:	694b      	ldreq	r3, [r1, #20]
 8011e4e:	600f      	str	r7, [r1, #0]
 8011e50:	bf18      	it	ne
 8011e52:	2300      	movne	r3, #0
 8011e54:	eba6 0807 	sub.w	r8, r6, r7
 8011e58:	608b      	str	r3, [r1, #8]
 8011e5a:	f1b8 0f00 	cmp.w	r8, #0
 8011e5e:	dd9c      	ble.n	8011d9a <__sflush_r+0x1a>
 8011e60:	6a21      	ldr	r1, [r4, #32]
 8011e62:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011e64:	4643      	mov	r3, r8
 8011e66:	463a      	mov	r2, r7
 8011e68:	4628      	mov	r0, r5
 8011e6a:	47b0      	blx	r6
 8011e6c:	2800      	cmp	r0, #0
 8011e6e:	dc06      	bgt.n	8011e7e <__sflush_r+0xfe>
 8011e70:	89a3      	ldrh	r3, [r4, #12]
 8011e72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011e76:	81a3      	strh	r3, [r4, #12]
 8011e78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011e7c:	e78e      	b.n	8011d9c <__sflush_r+0x1c>
 8011e7e:	4407      	add	r7, r0
 8011e80:	eba8 0800 	sub.w	r8, r8, r0
 8011e84:	e7e9      	b.n	8011e5a <__sflush_r+0xda>
 8011e86:	bf00      	nop
 8011e88:	20400001 	.word	0x20400001

08011e8c <_fflush_r>:
 8011e8c:	b538      	push	{r3, r4, r5, lr}
 8011e8e:	690b      	ldr	r3, [r1, #16]
 8011e90:	4605      	mov	r5, r0
 8011e92:	460c      	mov	r4, r1
 8011e94:	b913      	cbnz	r3, 8011e9c <_fflush_r+0x10>
 8011e96:	2500      	movs	r5, #0
 8011e98:	4628      	mov	r0, r5
 8011e9a:	bd38      	pop	{r3, r4, r5, pc}
 8011e9c:	b118      	cbz	r0, 8011ea6 <_fflush_r+0x1a>
 8011e9e:	6983      	ldr	r3, [r0, #24]
 8011ea0:	b90b      	cbnz	r3, 8011ea6 <_fflush_r+0x1a>
 8011ea2:	f000 f887 	bl	8011fb4 <__sinit>
 8011ea6:	4b14      	ldr	r3, [pc, #80]	; (8011ef8 <_fflush_r+0x6c>)
 8011ea8:	429c      	cmp	r4, r3
 8011eaa:	d11b      	bne.n	8011ee4 <_fflush_r+0x58>
 8011eac:	686c      	ldr	r4, [r5, #4]
 8011eae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011eb2:	2b00      	cmp	r3, #0
 8011eb4:	d0ef      	beq.n	8011e96 <_fflush_r+0xa>
 8011eb6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011eb8:	07d0      	lsls	r0, r2, #31
 8011eba:	d404      	bmi.n	8011ec6 <_fflush_r+0x3a>
 8011ebc:	0599      	lsls	r1, r3, #22
 8011ebe:	d402      	bmi.n	8011ec6 <_fflush_r+0x3a>
 8011ec0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011ec2:	f7fe fcd8 	bl	8010876 <__retarget_lock_acquire_recursive>
 8011ec6:	4628      	mov	r0, r5
 8011ec8:	4621      	mov	r1, r4
 8011eca:	f7ff ff59 	bl	8011d80 <__sflush_r>
 8011ece:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011ed0:	07da      	lsls	r2, r3, #31
 8011ed2:	4605      	mov	r5, r0
 8011ed4:	d4e0      	bmi.n	8011e98 <_fflush_r+0xc>
 8011ed6:	89a3      	ldrh	r3, [r4, #12]
 8011ed8:	059b      	lsls	r3, r3, #22
 8011eda:	d4dd      	bmi.n	8011e98 <_fflush_r+0xc>
 8011edc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011ede:	f7fe fccb 	bl	8010878 <__retarget_lock_release_recursive>
 8011ee2:	e7d9      	b.n	8011e98 <_fflush_r+0xc>
 8011ee4:	4b05      	ldr	r3, [pc, #20]	; (8011efc <_fflush_r+0x70>)
 8011ee6:	429c      	cmp	r4, r3
 8011ee8:	d101      	bne.n	8011eee <_fflush_r+0x62>
 8011eea:	68ac      	ldr	r4, [r5, #8]
 8011eec:	e7df      	b.n	8011eae <_fflush_r+0x22>
 8011eee:	4b04      	ldr	r3, [pc, #16]	; (8011f00 <_fflush_r+0x74>)
 8011ef0:	429c      	cmp	r4, r3
 8011ef2:	bf08      	it	eq
 8011ef4:	68ec      	ldreq	r4, [r5, #12]
 8011ef6:	e7da      	b.n	8011eae <_fflush_r+0x22>
 8011ef8:	08013b04 	.word	0x08013b04
 8011efc:	08013b24 	.word	0x08013b24
 8011f00:	08013ae4 	.word	0x08013ae4

08011f04 <std>:
 8011f04:	2300      	movs	r3, #0
 8011f06:	b510      	push	{r4, lr}
 8011f08:	4604      	mov	r4, r0
 8011f0a:	e9c0 3300 	strd	r3, r3, [r0]
 8011f0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011f12:	6083      	str	r3, [r0, #8]
 8011f14:	8181      	strh	r1, [r0, #12]
 8011f16:	6643      	str	r3, [r0, #100]	; 0x64
 8011f18:	81c2      	strh	r2, [r0, #14]
 8011f1a:	6183      	str	r3, [r0, #24]
 8011f1c:	4619      	mov	r1, r3
 8011f1e:	2208      	movs	r2, #8
 8011f20:	305c      	adds	r0, #92	; 0x5c
 8011f22:	f7fb fef9 	bl	800dd18 <memset>
 8011f26:	4b05      	ldr	r3, [pc, #20]	; (8011f3c <std+0x38>)
 8011f28:	6263      	str	r3, [r4, #36]	; 0x24
 8011f2a:	4b05      	ldr	r3, [pc, #20]	; (8011f40 <std+0x3c>)
 8011f2c:	62a3      	str	r3, [r4, #40]	; 0x28
 8011f2e:	4b05      	ldr	r3, [pc, #20]	; (8011f44 <std+0x40>)
 8011f30:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011f32:	4b05      	ldr	r3, [pc, #20]	; (8011f48 <std+0x44>)
 8011f34:	6224      	str	r4, [r4, #32]
 8011f36:	6323      	str	r3, [r4, #48]	; 0x30
 8011f38:	bd10      	pop	{r4, pc}
 8011f3a:	bf00      	nop
 8011f3c:	08011709 	.word	0x08011709
 8011f40:	0801172b 	.word	0x0801172b
 8011f44:	08011763 	.word	0x08011763
 8011f48:	08011787 	.word	0x08011787

08011f4c <_cleanup_r>:
 8011f4c:	4901      	ldr	r1, [pc, #4]	; (8011f54 <_cleanup_r+0x8>)
 8011f4e:	f000 b8af 	b.w	80120b0 <_fwalk_reent>
 8011f52:	bf00      	nop
 8011f54:	08011e8d 	.word	0x08011e8d

08011f58 <__sfmoreglue>:
 8011f58:	b570      	push	{r4, r5, r6, lr}
 8011f5a:	2268      	movs	r2, #104	; 0x68
 8011f5c:	1e4d      	subs	r5, r1, #1
 8011f5e:	4355      	muls	r5, r2
 8011f60:	460e      	mov	r6, r1
 8011f62:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011f66:	f7ff f9e7 	bl	8011338 <_malloc_r>
 8011f6a:	4604      	mov	r4, r0
 8011f6c:	b140      	cbz	r0, 8011f80 <__sfmoreglue+0x28>
 8011f6e:	2100      	movs	r1, #0
 8011f70:	e9c0 1600 	strd	r1, r6, [r0]
 8011f74:	300c      	adds	r0, #12
 8011f76:	60a0      	str	r0, [r4, #8]
 8011f78:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011f7c:	f7fb fecc 	bl	800dd18 <memset>
 8011f80:	4620      	mov	r0, r4
 8011f82:	bd70      	pop	{r4, r5, r6, pc}

08011f84 <__sfp_lock_acquire>:
 8011f84:	4801      	ldr	r0, [pc, #4]	; (8011f8c <__sfp_lock_acquire+0x8>)
 8011f86:	f7fe bc76 	b.w	8010876 <__retarget_lock_acquire_recursive>
 8011f8a:	bf00      	nop
 8011f8c:	20002de9 	.word	0x20002de9

08011f90 <__sfp_lock_release>:
 8011f90:	4801      	ldr	r0, [pc, #4]	; (8011f98 <__sfp_lock_release+0x8>)
 8011f92:	f7fe bc71 	b.w	8010878 <__retarget_lock_release_recursive>
 8011f96:	bf00      	nop
 8011f98:	20002de9 	.word	0x20002de9

08011f9c <__sinit_lock_acquire>:
 8011f9c:	4801      	ldr	r0, [pc, #4]	; (8011fa4 <__sinit_lock_acquire+0x8>)
 8011f9e:	f7fe bc6a 	b.w	8010876 <__retarget_lock_acquire_recursive>
 8011fa2:	bf00      	nop
 8011fa4:	20002dea 	.word	0x20002dea

08011fa8 <__sinit_lock_release>:
 8011fa8:	4801      	ldr	r0, [pc, #4]	; (8011fb0 <__sinit_lock_release+0x8>)
 8011faa:	f7fe bc65 	b.w	8010878 <__retarget_lock_release_recursive>
 8011fae:	bf00      	nop
 8011fb0:	20002dea 	.word	0x20002dea

08011fb4 <__sinit>:
 8011fb4:	b510      	push	{r4, lr}
 8011fb6:	4604      	mov	r4, r0
 8011fb8:	f7ff fff0 	bl	8011f9c <__sinit_lock_acquire>
 8011fbc:	69a3      	ldr	r3, [r4, #24]
 8011fbe:	b11b      	cbz	r3, 8011fc8 <__sinit+0x14>
 8011fc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011fc4:	f7ff bff0 	b.w	8011fa8 <__sinit_lock_release>
 8011fc8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011fcc:	6523      	str	r3, [r4, #80]	; 0x50
 8011fce:	4b13      	ldr	r3, [pc, #76]	; (801201c <__sinit+0x68>)
 8011fd0:	4a13      	ldr	r2, [pc, #76]	; (8012020 <__sinit+0x6c>)
 8011fd2:	681b      	ldr	r3, [r3, #0]
 8011fd4:	62a2      	str	r2, [r4, #40]	; 0x28
 8011fd6:	42a3      	cmp	r3, r4
 8011fd8:	bf04      	itt	eq
 8011fda:	2301      	moveq	r3, #1
 8011fdc:	61a3      	streq	r3, [r4, #24]
 8011fde:	4620      	mov	r0, r4
 8011fe0:	f000 f820 	bl	8012024 <__sfp>
 8011fe4:	6060      	str	r0, [r4, #4]
 8011fe6:	4620      	mov	r0, r4
 8011fe8:	f000 f81c 	bl	8012024 <__sfp>
 8011fec:	60a0      	str	r0, [r4, #8]
 8011fee:	4620      	mov	r0, r4
 8011ff0:	f000 f818 	bl	8012024 <__sfp>
 8011ff4:	2200      	movs	r2, #0
 8011ff6:	60e0      	str	r0, [r4, #12]
 8011ff8:	2104      	movs	r1, #4
 8011ffa:	6860      	ldr	r0, [r4, #4]
 8011ffc:	f7ff ff82 	bl	8011f04 <std>
 8012000:	68a0      	ldr	r0, [r4, #8]
 8012002:	2201      	movs	r2, #1
 8012004:	2109      	movs	r1, #9
 8012006:	f7ff ff7d 	bl	8011f04 <std>
 801200a:	68e0      	ldr	r0, [r4, #12]
 801200c:	2202      	movs	r2, #2
 801200e:	2112      	movs	r1, #18
 8012010:	f7ff ff78 	bl	8011f04 <std>
 8012014:	2301      	movs	r3, #1
 8012016:	61a3      	str	r3, [r4, #24]
 8012018:	e7d2      	b.n	8011fc0 <__sinit+0xc>
 801201a:	bf00      	nop
 801201c:	080137a4 	.word	0x080137a4
 8012020:	08011f4d 	.word	0x08011f4d

08012024 <__sfp>:
 8012024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012026:	4607      	mov	r7, r0
 8012028:	f7ff ffac 	bl	8011f84 <__sfp_lock_acquire>
 801202c:	4b1e      	ldr	r3, [pc, #120]	; (80120a8 <__sfp+0x84>)
 801202e:	681e      	ldr	r6, [r3, #0]
 8012030:	69b3      	ldr	r3, [r6, #24]
 8012032:	b913      	cbnz	r3, 801203a <__sfp+0x16>
 8012034:	4630      	mov	r0, r6
 8012036:	f7ff ffbd 	bl	8011fb4 <__sinit>
 801203a:	3648      	adds	r6, #72	; 0x48
 801203c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012040:	3b01      	subs	r3, #1
 8012042:	d503      	bpl.n	801204c <__sfp+0x28>
 8012044:	6833      	ldr	r3, [r6, #0]
 8012046:	b30b      	cbz	r3, 801208c <__sfp+0x68>
 8012048:	6836      	ldr	r6, [r6, #0]
 801204a:	e7f7      	b.n	801203c <__sfp+0x18>
 801204c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012050:	b9d5      	cbnz	r5, 8012088 <__sfp+0x64>
 8012052:	4b16      	ldr	r3, [pc, #88]	; (80120ac <__sfp+0x88>)
 8012054:	60e3      	str	r3, [r4, #12]
 8012056:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801205a:	6665      	str	r5, [r4, #100]	; 0x64
 801205c:	f7fe fc0a 	bl	8010874 <__retarget_lock_init_recursive>
 8012060:	f7ff ff96 	bl	8011f90 <__sfp_lock_release>
 8012064:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012068:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801206c:	6025      	str	r5, [r4, #0]
 801206e:	61a5      	str	r5, [r4, #24]
 8012070:	2208      	movs	r2, #8
 8012072:	4629      	mov	r1, r5
 8012074:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012078:	f7fb fe4e 	bl	800dd18 <memset>
 801207c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012080:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012084:	4620      	mov	r0, r4
 8012086:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012088:	3468      	adds	r4, #104	; 0x68
 801208a:	e7d9      	b.n	8012040 <__sfp+0x1c>
 801208c:	2104      	movs	r1, #4
 801208e:	4638      	mov	r0, r7
 8012090:	f7ff ff62 	bl	8011f58 <__sfmoreglue>
 8012094:	4604      	mov	r4, r0
 8012096:	6030      	str	r0, [r6, #0]
 8012098:	2800      	cmp	r0, #0
 801209a:	d1d5      	bne.n	8012048 <__sfp+0x24>
 801209c:	f7ff ff78 	bl	8011f90 <__sfp_lock_release>
 80120a0:	230c      	movs	r3, #12
 80120a2:	603b      	str	r3, [r7, #0]
 80120a4:	e7ee      	b.n	8012084 <__sfp+0x60>
 80120a6:	bf00      	nop
 80120a8:	080137a4 	.word	0x080137a4
 80120ac:	ffff0001 	.word	0xffff0001

080120b0 <_fwalk_reent>:
 80120b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80120b4:	4606      	mov	r6, r0
 80120b6:	4688      	mov	r8, r1
 80120b8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80120bc:	2700      	movs	r7, #0
 80120be:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80120c2:	f1b9 0901 	subs.w	r9, r9, #1
 80120c6:	d505      	bpl.n	80120d4 <_fwalk_reent+0x24>
 80120c8:	6824      	ldr	r4, [r4, #0]
 80120ca:	2c00      	cmp	r4, #0
 80120cc:	d1f7      	bne.n	80120be <_fwalk_reent+0xe>
 80120ce:	4638      	mov	r0, r7
 80120d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80120d4:	89ab      	ldrh	r3, [r5, #12]
 80120d6:	2b01      	cmp	r3, #1
 80120d8:	d907      	bls.n	80120ea <_fwalk_reent+0x3a>
 80120da:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80120de:	3301      	adds	r3, #1
 80120e0:	d003      	beq.n	80120ea <_fwalk_reent+0x3a>
 80120e2:	4629      	mov	r1, r5
 80120e4:	4630      	mov	r0, r6
 80120e6:	47c0      	blx	r8
 80120e8:	4307      	orrs	r7, r0
 80120ea:	3568      	adds	r5, #104	; 0x68
 80120ec:	e7e9      	b.n	80120c2 <_fwalk_reent+0x12>

080120ee <__swhatbuf_r>:
 80120ee:	b570      	push	{r4, r5, r6, lr}
 80120f0:	460e      	mov	r6, r1
 80120f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80120f6:	2900      	cmp	r1, #0
 80120f8:	b096      	sub	sp, #88	; 0x58
 80120fa:	4614      	mov	r4, r2
 80120fc:	461d      	mov	r5, r3
 80120fe:	da08      	bge.n	8012112 <__swhatbuf_r+0x24>
 8012100:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8012104:	2200      	movs	r2, #0
 8012106:	602a      	str	r2, [r5, #0]
 8012108:	061a      	lsls	r2, r3, #24
 801210a:	d410      	bmi.n	801212e <__swhatbuf_r+0x40>
 801210c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012110:	e00e      	b.n	8012130 <__swhatbuf_r+0x42>
 8012112:	466a      	mov	r2, sp
 8012114:	f000 f89c 	bl	8012250 <_fstat_r>
 8012118:	2800      	cmp	r0, #0
 801211a:	dbf1      	blt.n	8012100 <__swhatbuf_r+0x12>
 801211c:	9a01      	ldr	r2, [sp, #4]
 801211e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012122:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012126:	425a      	negs	r2, r3
 8012128:	415a      	adcs	r2, r3
 801212a:	602a      	str	r2, [r5, #0]
 801212c:	e7ee      	b.n	801210c <__swhatbuf_r+0x1e>
 801212e:	2340      	movs	r3, #64	; 0x40
 8012130:	2000      	movs	r0, #0
 8012132:	6023      	str	r3, [r4, #0]
 8012134:	b016      	add	sp, #88	; 0x58
 8012136:	bd70      	pop	{r4, r5, r6, pc}

08012138 <__smakebuf_r>:
 8012138:	898b      	ldrh	r3, [r1, #12]
 801213a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801213c:	079d      	lsls	r5, r3, #30
 801213e:	4606      	mov	r6, r0
 8012140:	460c      	mov	r4, r1
 8012142:	d507      	bpl.n	8012154 <__smakebuf_r+0x1c>
 8012144:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012148:	6023      	str	r3, [r4, #0]
 801214a:	6123      	str	r3, [r4, #16]
 801214c:	2301      	movs	r3, #1
 801214e:	6163      	str	r3, [r4, #20]
 8012150:	b002      	add	sp, #8
 8012152:	bd70      	pop	{r4, r5, r6, pc}
 8012154:	ab01      	add	r3, sp, #4
 8012156:	466a      	mov	r2, sp
 8012158:	f7ff ffc9 	bl	80120ee <__swhatbuf_r>
 801215c:	9900      	ldr	r1, [sp, #0]
 801215e:	4605      	mov	r5, r0
 8012160:	4630      	mov	r0, r6
 8012162:	f7ff f8e9 	bl	8011338 <_malloc_r>
 8012166:	b948      	cbnz	r0, 801217c <__smakebuf_r+0x44>
 8012168:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801216c:	059a      	lsls	r2, r3, #22
 801216e:	d4ef      	bmi.n	8012150 <__smakebuf_r+0x18>
 8012170:	f023 0303 	bic.w	r3, r3, #3
 8012174:	f043 0302 	orr.w	r3, r3, #2
 8012178:	81a3      	strh	r3, [r4, #12]
 801217a:	e7e3      	b.n	8012144 <__smakebuf_r+0xc>
 801217c:	4b0d      	ldr	r3, [pc, #52]	; (80121b4 <__smakebuf_r+0x7c>)
 801217e:	62b3      	str	r3, [r6, #40]	; 0x28
 8012180:	89a3      	ldrh	r3, [r4, #12]
 8012182:	6020      	str	r0, [r4, #0]
 8012184:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012188:	81a3      	strh	r3, [r4, #12]
 801218a:	9b00      	ldr	r3, [sp, #0]
 801218c:	6163      	str	r3, [r4, #20]
 801218e:	9b01      	ldr	r3, [sp, #4]
 8012190:	6120      	str	r0, [r4, #16]
 8012192:	b15b      	cbz	r3, 80121ac <__smakebuf_r+0x74>
 8012194:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012198:	4630      	mov	r0, r6
 801219a:	f000 f86b 	bl	8012274 <_isatty_r>
 801219e:	b128      	cbz	r0, 80121ac <__smakebuf_r+0x74>
 80121a0:	89a3      	ldrh	r3, [r4, #12]
 80121a2:	f023 0303 	bic.w	r3, r3, #3
 80121a6:	f043 0301 	orr.w	r3, r3, #1
 80121aa:	81a3      	strh	r3, [r4, #12]
 80121ac:	89a0      	ldrh	r0, [r4, #12]
 80121ae:	4305      	orrs	r5, r0
 80121b0:	81a5      	strh	r5, [r4, #12]
 80121b2:	e7cd      	b.n	8012150 <__smakebuf_r+0x18>
 80121b4:	08011f4d 	.word	0x08011f4d

080121b8 <_malloc_usable_size_r>:
 80121b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80121bc:	1f18      	subs	r0, r3, #4
 80121be:	2b00      	cmp	r3, #0
 80121c0:	bfbc      	itt	lt
 80121c2:	580b      	ldrlt	r3, [r1, r0]
 80121c4:	18c0      	addlt	r0, r0, r3
 80121c6:	4770      	bx	lr

080121c8 <_raise_r>:
 80121c8:	291f      	cmp	r1, #31
 80121ca:	b538      	push	{r3, r4, r5, lr}
 80121cc:	4604      	mov	r4, r0
 80121ce:	460d      	mov	r5, r1
 80121d0:	d904      	bls.n	80121dc <_raise_r+0x14>
 80121d2:	2316      	movs	r3, #22
 80121d4:	6003      	str	r3, [r0, #0]
 80121d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80121da:	bd38      	pop	{r3, r4, r5, pc}
 80121dc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80121de:	b112      	cbz	r2, 80121e6 <_raise_r+0x1e>
 80121e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80121e4:	b94b      	cbnz	r3, 80121fa <_raise_r+0x32>
 80121e6:	4620      	mov	r0, r4
 80121e8:	f000 f830 	bl	801224c <_getpid_r>
 80121ec:	462a      	mov	r2, r5
 80121ee:	4601      	mov	r1, r0
 80121f0:	4620      	mov	r0, r4
 80121f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80121f6:	f000 b817 	b.w	8012228 <_kill_r>
 80121fa:	2b01      	cmp	r3, #1
 80121fc:	d00a      	beq.n	8012214 <_raise_r+0x4c>
 80121fe:	1c59      	adds	r1, r3, #1
 8012200:	d103      	bne.n	801220a <_raise_r+0x42>
 8012202:	2316      	movs	r3, #22
 8012204:	6003      	str	r3, [r0, #0]
 8012206:	2001      	movs	r0, #1
 8012208:	e7e7      	b.n	80121da <_raise_r+0x12>
 801220a:	2400      	movs	r4, #0
 801220c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012210:	4628      	mov	r0, r5
 8012212:	4798      	blx	r3
 8012214:	2000      	movs	r0, #0
 8012216:	e7e0      	b.n	80121da <_raise_r+0x12>

08012218 <raise>:
 8012218:	4b02      	ldr	r3, [pc, #8]	; (8012224 <raise+0xc>)
 801221a:	4601      	mov	r1, r0
 801221c:	6818      	ldr	r0, [r3, #0]
 801221e:	f7ff bfd3 	b.w	80121c8 <_raise_r>
 8012222:	bf00      	nop
 8012224:	20000218 	.word	0x20000218

08012228 <_kill_r>:
 8012228:	b538      	push	{r3, r4, r5, lr}
 801222a:	4d07      	ldr	r5, [pc, #28]	; (8012248 <_kill_r+0x20>)
 801222c:	2300      	movs	r3, #0
 801222e:	4604      	mov	r4, r0
 8012230:	4608      	mov	r0, r1
 8012232:	4611      	mov	r1, r2
 8012234:	602b      	str	r3, [r5, #0]
 8012236:	f7f2 ffff 	bl	8005238 <_kill>
 801223a:	1c43      	adds	r3, r0, #1
 801223c:	d102      	bne.n	8012244 <_kill_r+0x1c>
 801223e:	682b      	ldr	r3, [r5, #0]
 8012240:	b103      	cbz	r3, 8012244 <_kill_r+0x1c>
 8012242:	6023      	str	r3, [r4, #0]
 8012244:	bd38      	pop	{r3, r4, r5, pc}
 8012246:	bf00      	nop
 8012248:	20002df4 	.word	0x20002df4

0801224c <_getpid_r>:
 801224c:	f7f2 bfec 	b.w	8005228 <_getpid>

08012250 <_fstat_r>:
 8012250:	b538      	push	{r3, r4, r5, lr}
 8012252:	4d07      	ldr	r5, [pc, #28]	; (8012270 <_fstat_r+0x20>)
 8012254:	2300      	movs	r3, #0
 8012256:	4604      	mov	r4, r0
 8012258:	4608      	mov	r0, r1
 801225a:	4611      	mov	r1, r2
 801225c:	602b      	str	r3, [r5, #0]
 801225e:	f7f3 f84a 	bl	80052f6 <_fstat>
 8012262:	1c43      	adds	r3, r0, #1
 8012264:	d102      	bne.n	801226c <_fstat_r+0x1c>
 8012266:	682b      	ldr	r3, [r5, #0]
 8012268:	b103      	cbz	r3, 801226c <_fstat_r+0x1c>
 801226a:	6023      	str	r3, [r4, #0]
 801226c:	bd38      	pop	{r3, r4, r5, pc}
 801226e:	bf00      	nop
 8012270:	20002df4 	.word	0x20002df4

08012274 <_isatty_r>:
 8012274:	b538      	push	{r3, r4, r5, lr}
 8012276:	4d06      	ldr	r5, [pc, #24]	; (8012290 <_isatty_r+0x1c>)
 8012278:	2300      	movs	r3, #0
 801227a:	4604      	mov	r4, r0
 801227c:	4608      	mov	r0, r1
 801227e:	602b      	str	r3, [r5, #0]
 8012280:	f7f3 f849 	bl	8005316 <_isatty>
 8012284:	1c43      	adds	r3, r0, #1
 8012286:	d102      	bne.n	801228e <_isatty_r+0x1a>
 8012288:	682b      	ldr	r3, [r5, #0]
 801228a:	b103      	cbz	r3, 801228e <_isatty_r+0x1a>
 801228c:	6023      	str	r3, [r4, #0]
 801228e:	bd38      	pop	{r3, r4, r5, pc}
 8012290:	20002df4 	.word	0x20002df4

08012294 <_init>:
 8012294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012296:	bf00      	nop
 8012298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801229a:	bc08      	pop	{r3}
 801229c:	469e      	mov	lr, r3
 801229e:	4770      	bx	lr

080122a0 <_fini>:
 80122a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80122a2:	bf00      	nop
 80122a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80122a6:	bc08      	pop	{r3}
 80122a8:	469e      	mov	lr, r3
 80122aa:	4770      	bx	lr
