
stm32l4_probe.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013d7c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d74  08013f10  08013f10  00023f10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015c84  08015c84  00030434  2**0
                  CONTENTS
  4 .ARM          00000008  08015c84  08015c84  00025c84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015c8c  08015c8c  00030434  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015c8c  08015c8c  00025c8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015c90  08015c90  00025c90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000434  20000000  08015c94  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000034b8  20000438  080160c8  00030438  2**3
                  ALLOC
 10 ._user_heap_stack 00001000  200038f0  080160c8  000338f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030434  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002079a  00000000  00000000  00030464  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e32  00000000  00000000  00050bfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bb0  00000000  00000000  00054a30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001aa0  00000000  00000000  000565e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002bae2  00000000  00000000  00058080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000214c4  00000000  00000000  00083b62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00102b08  00000000  00000000  000a5026  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001a7b2e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008c20  00000000  00000000  001a7b80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000438 	.word	0x20000438
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08013ef4 	.word	0x08013ef4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000043c 	.word	0x2000043c
 80001cc:	08013ef4 	.word	0x08013ef4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_ldivmod>:
 8000c88:	b97b      	cbnz	r3, 8000caa <__aeabi_ldivmod+0x22>
 8000c8a:	b972      	cbnz	r2, 8000caa <__aeabi_ldivmod+0x22>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bfbe      	ittt	lt
 8000c90:	2000      	movlt	r0, #0
 8000c92:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c96:	e006      	blt.n	8000ca6 <__aeabi_ldivmod+0x1e>
 8000c98:	bf08      	it	eq
 8000c9a:	2800      	cmpeq	r0, #0
 8000c9c:	bf1c      	itt	ne
 8000c9e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ca2:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ca6:	f000 b9f5 	b.w	8001094 <__aeabi_idiv0>
 8000caa:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cae:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb2:	2900      	cmp	r1, #0
 8000cb4:	db09      	blt.n	8000cca <__aeabi_ldivmod+0x42>
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	db1a      	blt.n	8000cf0 <__aeabi_ldivmod+0x68>
 8000cba:	f000 f883 	bl	8000dc4 <__udivmoddi4>
 8000cbe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc6:	b004      	add	sp, #16
 8000cc8:	4770      	bx	lr
 8000cca:	4240      	negs	r0, r0
 8000ccc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	db1b      	blt.n	8000d0c <__aeabi_ldivmod+0x84>
 8000cd4:	f000 f876 	bl	8000dc4 <__udivmoddi4>
 8000cd8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce0:	b004      	add	sp, #16
 8000ce2:	4240      	negs	r0, r0
 8000ce4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce8:	4252      	negs	r2, r2
 8000cea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cee:	4770      	bx	lr
 8000cf0:	4252      	negs	r2, r2
 8000cf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf6:	f000 f865 	bl	8000dc4 <__udivmoddi4>
 8000cfa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d02:	b004      	add	sp, #16
 8000d04:	4240      	negs	r0, r0
 8000d06:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0a:	4770      	bx	lr
 8000d0c:	4252      	negs	r2, r2
 8000d0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d12:	f000 f857 	bl	8000dc4 <__udivmoddi4>
 8000d16:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d1e:	b004      	add	sp, #16
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	4770      	bx	lr

08000d28 <__aeabi_uldivmod>:
 8000d28:	b953      	cbnz	r3, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2a:	b94a      	cbnz	r2, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2c:	2900      	cmp	r1, #0
 8000d2e:	bf08      	it	eq
 8000d30:	2800      	cmpeq	r0, #0
 8000d32:	bf1c      	itt	ne
 8000d34:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000d38:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000d3c:	f000 b9aa 	b.w	8001094 <__aeabi_idiv0>
 8000d40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d48:	f000 f83c 	bl	8000dc4 <__udivmoddi4>
 8000d4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d54:	b004      	add	sp, #16
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_d2lz>:
 8000d58:	b538      	push	{r3, r4, r5, lr}
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	4604      	mov	r4, r0
 8000d60:	460d      	mov	r5, r1
 8000d62:	f7ff febb 	bl	8000adc <__aeabi_dcmplt>
 8000d66:	b928      	cbnz	r0, 8000d74 <__aeabi_d2lz+0x1c>
 8000d68:	4620      	mov	r0, r4
 8000d6a:	4629      	mov	r1, r5
 8000d6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d70:	f000 b80a 	b.w	8000d88 <__aeabi_d2ulz>
 8000d74:	4620      	mov	r0, r4
 8000d76:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d7a:	f000 f805 	bl	8000d88 <__aeabi_d2ulz>
 8000d7e:	4240      	negs	r0, r0
 8000d80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d84:	bd38      	pop	{r3, r4, r5, pc}
 8000d86:	bf00      	nop

08000d88 <__aeabi_d2ulz>:
 8000d88:	b5d0      	push	{r4, r6, r7, lr}
 8000d8a:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <__aeabi_d2ulz+0x34>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	4606      	mov	r6, r0
 8000d90:	460f      	mov	r7, r1
 8000d92:	f7ff fc31 	bl	80005f8 <__aeabi_dmul>
 8000d96:	f7ff ff07 	bl	8000ba8 <__aeabi_d2uiz>
 8000d9a:	4604      	mov	r4, r0
 8000d9c:	f7ff fbb2 	bl	8000504 <__aeabi_ui2d>
 8000da0:	4b07      	ldr	r3, [pc, #28]	; (8000dc0 <__aeabi_d2ulz+0x38>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	f7ff fc28 	bl	80005f8 <__aeabi_dmul>
 8000da8:	4602      	mov	r2, r0
 8000daa:	460b      	mov	r3, r1
 8000dac:	4630      	mov	r0, r6
 8000dae:	4639      	mov	r1, r7
 8000db0:	f7ff fa6a 	bl	8000288 <__aeabi_dsub>
 8000db4:	f7ff fef8 	bl	8000ba8 <__aeabi_d2uiz>
 8000db8:	4621      	mov	r1, r4
 8000dba:	bdd0      	pop	{r4, r6, r7, pc}
 8000dbc:	3df00000 	.word	0x3df00000
 8000dc0:	41f00000 	.word	0x41f00000

08000dc4 <__udivmoddi4>:
 8000dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dc8:	9d08      	ldr	r5, [sp, #32]
 8000dca:	4604      	mov	r4, r0
 8000dcc:	468e      	mov	lr, r1
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d14d      	bne.n	8000e6e <__udivmoddi4+0xaa>
 8000dd2:	428a      	cmp	r2, r1
 8000dd4:	4694      	mov	ip, r2
 8000dd6:	d969      	bls.n	8000eac <__udivmoddi4+0xe8>
 8000dd8:	fab2 f282 	clz	r2, r2
 8000ddc:	b152      	cbz	r2, 8000df4 <__udivmoddi4+0x30>
 8000dde:	fa01 f302 	lsl.w	r3, r1, r2
 8000de2:	f1c2 0120 	rsb	r1, r2, #32
 8000de6:	fa20 f101 	lsr.w	r1, r0, r1
 8000dea:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dee:	ea41 0e03 	orr.w	lr, r1, r3
 8000df2:	4094      	lsls	r4, r2
 8000df4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df8:	0c21      	lsrs	r1, r4, #16
 8000dfa:	fbbe f6f8 	udiv	r6, lr, r8
 8000dfe:	fa1f f78c 	uxth.w	r7, ip
 8000e02:	fb08 e316 	mls	r3, r8, r6, lr
 8000e06:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e0a:	fb06 f107 	mul.w	r1, r6, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d90a      	bls.n	8000e28 <__udivmoddi4+0x64>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000e1a:	f080 811f 	bcs.w	800105c <__udivmoddi4+0x298>
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	f240 811c 	bls.w	800105c <__udivmoddi4+0x298>
 8000e24:	3e02      	subs	r6, #2
 8000e26:	4463      	add	r3, ip
 8000e28:	1a5b      	subs	r3, r3, r1
 8000e2a:	b2a4      	uxth	r4, r4
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3310 	mls	r3, r8, r0, r3
 8000e34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e38:	fb00 f707 	mul.w	r7, r0, r7
 8000e3c:	42a7      	cmp	r7, r4
 8000e3e:	d90a      	bls.n	8000e56 <__udivmoddi4+0x92>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e48:	f080 810a 	bcs.w	8001060 <__udivmoddi4+0x29c>
 8000e4c:	42a7      	cmp	r7, r4
 8000e4e:	f240 8107 	bls.w	8001060 <__udivmoddi4+0x29c>
 8000e52:	4464      	add	r4, ip
 8000e54:	3802      	subs	r0, #2
 8000e56:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e5a:	1be4      	subs	r4, r4, r7
 8000e5c:	2600      	movs	r6, #0
 8000e5e:	b11d      	cbz	r5, 8000e68 <__udivmoddi4+0xa4>
 8000e60:	40d4      	lsrs	r4, r2
 8000e62:	2300      	movs	r3, #0
 8000e64:	e9c5 4300 	strd	r4, r3, [r5]
 8000e68:	4631      	mov	r1, r6
 8000e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6e:	428b      	cmp	r3, r1
 8000e70:	d909      	bls.n	8000e86 <__udivmoddi4+0xc2>
 8000e72:	2d00      	cmp	r5, #0
 8000e74:	f000 80ef 	beq.w	8001056 <__udivmoddi4+0x292>
 8000e78:	2600      	movs	r6, #0
 8000e7a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e7e:	4630      	mov	r0, r6
 8000e80:	4631      	mov	r1, r6
 8000e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e86:	fab3 f683 	clz	r6, r3
 8000e8a:	2e00      	cmp	r6, #0
 8000e8c:	d14a      	bne.n	8000f24 <__udivmoddi4+0x160>
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	d302      	bcc.n	8000e98 <__udivmoddi4+0xd4>
 8000e92:	4282      	cmp	r2, r0
 8000e94:	f200 80f9 	bhi.w	800108a <__udivmoddi4+0x2c6>
 8000e98:	1a84      	subs	r4, r0, r2
 8000e9a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e9e:	2001      	movs	r0, #1
 8000ea0:	469e      	mov	lr, r3
 8000ea2:	2d00      	cmp	r5, #0
 8000ea4:	d0e0      	beq.n	8000e68 <__udivmoddi4+0xa4>
 8000ea6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000eaa:	e7dd      	b.n	8000e68 <__udivmoddi4+0xa4>
 8000eac:	b902      	cbnz	r2, 8000eb0 <__udivmoddi4+0xec>
 8000eae:	deff      	udf	#255	; 0xff
 8000eb0:	fab2 f282 	clz	r2, r2
 8000eb4:	2a00      	cmp	r2, #0
 8000eb6:	f040 8092 	bne.w	8000fde <__udivmoddi4+0x21a>
 8000eba:	eba1 010c 	sub.w	r1, r1, ip
 8000ebe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ec2:	fa1f fe8c 	uxth.w	lr, ip
 8000ec6:	2601      	movs	r6, #1
 8000ec8:	0c20      	lsrs	r0, r4, #16
 8000eca:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ece:	fb07 1113 	mls	r1, r7, r3, r1
 8000ed2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed6:	fb0e f003 	mul.w	r0, lr, r3
 8000eda:	4288      	cmp	r0, r1
 8000edc:	d908      	bls.n	8000ef0 <__udivmoddi4+0x12c>
 8000ede:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee2:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000ee6:	d202      	bcs.n	8000eee <__udivmoddi4+0x12a>
 8000ee8:	4288      	cmp	r0, r1
 8000eea:	f200 80cb 	bhi.w	8001084 <__udivmoddi4+0x2c0>
 8000eee:	4643      	mov	r3, r8
 8000ef0:	1a09      	subs	r1, r1, r0
 8000ef2:	b2a4      	uxth	r4, r4
 8000ef4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ef8:	fb07 1110 	mls	r1, r7, r0, r1
 8000efc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f00:	fb0e fe00 	mul.w	lr, lr, r0
 8000f04:	45a6      	cmp	lr, r4
 8000f06:	d908      	bls.n	8000f1a <__udivmoddi4+0x156>
 8000f08:	eb1c 0404 	adds.w	r4, ip, r4
 8000f0c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000f10:	d202      	bcs.n	8000f18 <__udivmoddi4+0x154>
 8000f12:	45a6      	cmp	lr, r4
 8000f14:	f200 80bb 	bhi.w	800108e <__udivmoddi4+0x2ca>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	eba4 040e 	sub.w	r4, r4, lr
 8000f1e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f22:	e79c      	b.n	8000e5e <__udivmoddi4+0x9a>
 8000f24:	f1c6 0720 	rsb	r7, r6, #32
 8000f28:	40b3      	lsls	r3, r6
 8000f2a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f2e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f32:	fa20 f407 	lsr.w	r4, r0, r7
 8000f36:	fa01 f306 	lsl.w	r3, r1, r6
 8000f3a:	431c      	orrs	r4, r3
 8000f3c:	40f9      	lsrs	r1, r7
 8000f3e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f42:	fa00 f306 	lsl.w	r3, r0, r6
 8000f46:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f4a:	0c20      	lsrs	r0, r4, #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fb09 1118 	mls	r1, r9, r8, r1
 8000f54:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f58:	fb08 f00e 	mul.w	r0, r8, lr
 8000f5c:	4288      	cmp	r0, r1
 8000f5e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f62:	d90b      	bls.n	8000f7c <__udivmoddi4+0x1b8>
 8000f64:	eb1c 0101 	adds.w	r1, ip, r1
 8000f68:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000f6c:	f080 8088 	bcs.w	8001080 <__udivmoddi4+0x2bc>
 8000f70:	4288      	cmp	r0, r1
 8000f72:	f240 8085 	bls.w	8001080 <__udivmoddi4+0x2bc>
 8000f76:	f1a8 0802 	sub.w	r8, r8, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1a09      	subs	r1, r1, r0
 8000f7e:	b2a4      	uxth	r4, r4
 8000f80:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f84:	fb09 1110 	mls	r1, r9, r0, r1
 8000f88:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f8c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f90:	458e      	cmp	lr, r1
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x1e2>
 8000f94:	eb1c 0101 	adds.w	r1, ip, r1
 8000f98:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000f9c:	d26c      	bcs.n	8001078 <__udivmoddi4+0x2b4>
 8000f9e:	458e      	cmp	lr, r1
 8000fa0:	d96a      	bls.n	8001078 <__udivmoddi4+0x2b4>
 8000fa2:	3802      	subs	r0, #2
 8000fa4:	4461      	add	r1, ip
 8000fa6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000faa:	fba0 9402 	umull	r9, r4, r0, r2
 8000fae:	eba1 010e 	sub.w	r1, r1, lr
 8000fb2:	42a1      	cmp	r1, r4
 8000fb4:	46c8      	mov	r8, r9
 8000fb6:	46a6      	mov	lr, r4
 8000fb8:	d356      	bcc.n	8001068 <__udivmoddi4+0x2a4>
 8000fba:	d053      	beq.n	8001064 <__udivmoddi4+0x2a0>
 8000fbc:	b15d      	cbz	r5, 8000fd6 <__udivmoddi4+0x212>
 8000fbe:	ebb3 0208 	subs.w	r2, r3, r8
 8000fc2:	eb61 010e 	sbc.w	r1, r1, lr
 8000fc6:	fa01 f707 	lsl.w	r7, r1, r7
 8000fca:	fa22 f306 	lsr.w	r3, r2, r6
 8000fce:	40f1      	lsrs	r1, r6
 8000fd0:	431f      	orrs	r7, r3
 8000fd2:	e9c5 7100 	strd	r7, r1, [r5]
 8000fd6:	2600      	movs	r6, #0
 8000fd8:	4631      	mov	r1, r6
 8000fda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fde:	f1c2 0320 	rsb	r3, r2, #32
 8000fe2:	40d8      	lsrs	r0, r3
 8000fe4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fe8:	fa21 f303 	lsr.w	r3, r1, r3
 8000fec:	4091      	lsls	r1, r2
 8000fee:	4301      	orrs	r1, r0
 8000ff0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ff4:	fa1f fe8c 	uxth.w	lr, ip
 8000ff8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ffc:	fb07 3610 	mls	r6, r7, r0, r3
 8001000:	0c0b      	lsrs	r3, r1, #16
 8001002:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001006:	fb00 f60e 	mul.w	r6, r0, lr
 800100a:	429e      	cmp	r6, r3
 800100c:	fa04 f402 	lsl.w	r4, r4, r2
 8001010:	d908      	bls.n	8001024 <__udivmoddi4+0x260>
 8001012:	eb1c 0303 	adds.w	r3, ip, r3
 8001016:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800101a:	d22f      	bcs.n	800107c <__udivmoddi4+0x2b8>
 800101c:	429e      	cmp	r6, r3
 800101e:	d92d      	bls.n	800107c <__udivmoddi4+0x2b8>
 8001020:	3802      	subs	r0, #2
 8001022:	4463      	add	r3, ip
 8001024:	1b9b      	subs	r3, r3, r6
 8001026:	b289      	uxth	r1, r1
 8001028:	fbb3 f6f7 	udiv	r6, r3, r7
 800102c:	fb07 3316 	mls	r3, r7, r6, r3
 8001030:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001034:	fb06 f30e 	mul.w	r3, r6, lr
 8001038:	428b      	cmp	r3, r1
 800103a:	d908      	bls.n	800104e <__udivmoddi4+0x28a>
 800103c:	eb1c 0101 	adds.w	r1, ip, r1
 8001040:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8001044:	d216      	bcs.n	8001074 <__udivmoddi4+0x2b0>
 8001046:	428b      	cmp	r3, r1
 8001048:	d914      	bls.n	8001074 <__udivmoddi4+0x2b0>
 800104a:	3e02      	subs	r6, #2
 800104c:	4461      	add	r1, ip
 800104e:	1ac9      	subs	r1, r1, r3
 8001050:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001054:	e738      	b.n	8000ec8 <__udivmoddi4+0x104>
 8001056:	462e      	mov	r6, r5
 8001058:	4628      	mov	r0, r5
 800105a:	e705      	b.n	8000e68 <__udivmoddi4+0xa4>
 800105c:	4606      	mov	r6, r0
 800105e:	e6e3      	b.n	8000e28 <__udivmoddi4+0x64>
 8001060:	4618      	mov	r0, r3
 8001062:	e6f8      	b.n	8000e56 <__udivmoddi4+0x92>
 8001064:	454b      	cmp	r3, r9
 8001066:	d2a9      	bcs.n	8000fbc <__udivmoddi4+0x1f8>
 8001068:	ebb9 0802 	subs.w	r8, r9, r2
 800106c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001070:	3801      	subs	r0, #1
 8001072:	e7a3      	b.n	8000fbc <__udivmoddi4+0x1f8>
 8001074:	4646      	mov	r6, r8
 8001076:	e7ea      	b.n	800104e <__udivmoddi4+0x28a>
 8001078:	4620      	mov	r0, r4
 800107a:	e794      	b.n	8000fa6 <__udivmoddi4+0x1e2>
 800107c:	4640      	mov	r0, r8
 800107e:	e7d1      	b.n	8001024 <__udivmoddi4+0x260>
 8001080:	46d0      	mov	r8, sl
 8001082:	e77b      	b.n	8000f7c <__udivmoddi4+0x1b8>
 8001084:	3b02      	subs	r3, #2
 8001086:	4461      	add	r1, ip
 8001088:	e732      	b.n	8000ef0 <__udivmoddi4+0x12c>
 800108a:	4630      	mov	r0, r6
 800108c:	e709      	b.n	8000ea2 <__udivmoddi4+0xde>
 800108e:	4464      	add	r4, ip
 8001090:	3802      	subs	r0, #2
 8001092:	e742      	b.n	8000f1a <__udivmoddi4+0x156>

08001094 <__aeabi_idiv0>:
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop

08001098 <decodeIRED>:
volatile irparams_t irparams;
decode_results results;

//-----------------------------------------------------------------------------
int16_t decodeIRED(decode_results *results)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
	if (irparams.rcvstate != STATE_STOP) return 0;
 80010a0:	4b16      	ldr	r3, [pc, #88]	; (80010fc <decodeIRED+0x64>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	2b05      	cmp	r3, #5
 80010a8:	d001      	beq.n	80010ae <decodeIRED+0x16>
 80010aa:	2300      	movs	r3, #0
 80010ac:	e021      	b.n	80010f2 <decodeIRED+0x5a>

	results->rawbuf = irparams.rawbuf;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a13      	ldr	r2, [pc, #76]	; (8001100 <decodeIRED+0x68>)
 80010b2:	609a      	str	r2, [r3, #8]
	results->rawlen = irparams.rawlen;
 80010b4:	4b11      	ldr	r3, [pc, #68]	; (80010fc <decodeIRED+0x64>)
 80010b6:	785b      	ldrb	r3, [r3, #1]
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	b21a      	sxth	r2, r3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	819a      	strh	r2, [r3, #12]
	results->overflow = irparams.overflow;
 80010c0:	4b0e      	ldr	r3, [pc, #56]	; (80010fc <decodeIRED+0x64>)
 80010c2:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	b21a      	sxth	r2, r3
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	81da      	strh	r2, [r3, #14]

	if(irparams.rcvstate != STATE_STOP) return false;
 80010ce:	4b0b      	ldr	r3, [pc, #44]	; (80010fc <decodeIRED+0x64>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	2b05      	cmp	r3, #5
 80010d6:	d001      	beq.n	80010dc <decodeIRED+0x44>
 80010d8:	2300      	movs	r3, #0
 80010da:	e00a      	b.n	80010f2 <decodeIRED+0x5a>

	if (decodeHashIRED(results)) return 1;
 80010dc:	6878      	ldr	r0, [r7, #4]
 80010de:	f000 f883 	bl	80011e8 <decodeHashIRED>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <decodeIRED+0x54>
 80010e8:	2301      	movs	r3, #1
 80010ea:	e002      	b.n	80010f2 <decodeIRED+0x5a>

	enIntIRED();
 80010ec:	f000 f80a 	bl	8001104 <enIntIRED>

	return 0;
 80010f0:	2300      	movs	r3, #0
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	20000454 	.word	0x20000454
 8001100:	20000458 	.word	0x20000458

08001104 <enIntIRED>:
//-----------------------------------------------------------------------------
void enIntIRED()
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
	irparams.rcvstate = STATE_IDLE;
 8001108:	4b08      	ldr	r3, [pc, #32]	; (800112c <enIntIRED+0x28>)
 800110a:	2202      	movs	r2, #2
 800110c:	701a      	strb	r2, [r3, #0]
	irparams.rawlen = 0;
 800110e:	4b07      	ldr	r3, [pc, #28]	; (800112c <enIntIRED+0x28>)
 8001110:	2200      	movs	r2, #0
 8001112:	705a      	strb	r2, [r3, #1]

	__HAL_TIM_SET_COUNTER(portIRED, 0x0000);
 8001114:	4b06      	ldr	r3, [pc, #24]	; (8001130 <enIntIRED+0x2c>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	2200      	movs	r2, #0
 800111c:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_TIM_Base_Start_IT(portIRED);
 800111e:	4b04      	ldr	r3, [pc, #16]	; (8001130 <enIntIRED+0x2c>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4618      	mov	r0, r3
 8001124:	f00c f9e4 	bl	800d4f0 <HAL_TIM_Base_Start_IT>
}
 8001128:	bf00      	nop
 800112a:	bd80      	pop	{r7, pc}
 800112c:	20000454 	.word	0x20000454
 8001130:	20000220 	.word	0x20000220

08001134 <resumeIRED>:
//-----------------------------------------------------------------------------
void resumeIRED() // Restart the ISR state machine
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
	irparams.rcvstate = STATE_IDLE;
 8001138:	4b05      	ldr	r3, [pc, #20]	; (8001150 <resumeIRED+0x1c>)
 800113a:	2202      	movs	r2, #2
 800113c:	701a      	strb	r2, [r3, #0]
	irparams.rawlen = 0;
 800113e:	4b04      	ldr	r3, [pc, #16]	; (8001150 <resumeIRED+0x1c>)
 8001140:	2200      	movs	r2, #0
 8001142:	705a      	strb	r2, [r3, #1]
}
 8001144:	bf00      	nop
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	20000454 	.word	0x20000454
 8001154:	00000000 	.word	0x00000000

08001158 <compareIRED>:
//-----------------------------------------------------------------------------
int16_t compareIRED(uint16_t oldval, uint16_t newval)
{
 8001158:	b5b0      	push	{r4, r5, r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	460a      	mov	r2, r1
 8001162:	80fb      	strh	r3, [r7, #6]
 8001164:	4613      	mov	r3, r2
 8001166:	80bb      	strh	r3, [r7, #4]
	     if (newval < oldval * .8) return 0;
 8001168:	88bb      	ldrh	r3, [r7, #4]
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff f9da 	bl	8000524 <__aeabi_i2d>
 8001170:	4604      	mov	r4, r0
 8001172:	460d      	mov	r5, r1
 8001174:	88fb      	ldrh	r3, [r7, #6]
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff f9d4 	bl	8000524 <__aeabi_i2d>
 800117c:	a318      	add	r3, pc, #96	; (adr r3, 80011e0 <compareIRED+0x88>)
 800117e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001182:	f7ff fa39 	bl	80005f8 <__aeabi_dmul>
 8001186:	4602      	mov	r2, r0
 8001188:	460b      	mov	r3, r1
 800118a:	4620      	mov	r0, r4
 800118c:	4629      	mov	r1, r5
 800118e:	f7ff fca5 	bl	8000adc <__aeabi_dcmplt>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <compareIRED+0x44>
 8001198:	2300      	movs	r3, #0
 800119a:	e01a      	b.n	80011d2 <compareIRED+0x7a>
	else if (oldval < newval * .8) return 2;
 800119c:	88fb      	ldrh	r3, [r7, #6]
 800119e:	4618      	mov	r0, r3
 80011a0:	f7ff f9c0 	bl	8000524 <__aeabi_i2d>
 80011a4:	4604      	mov	r4, r0
 80011a6:	460d      	mov	r5, r1
 80011a8:	88bb      	ldrh	r3, [r7, #4]
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff f9ba 	bl	8000524 <__aeabi_i2d>
 80011b0:	a30b      	add	r3, pc, #44	; (adr r3, 80011e0 <compareIRED+0x88>)
 80011b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011b6:	f7ff fa1f 	bl	80005f8 <__aeabi_dmul>
 80011ba:	4602      	mov	r2, r0
 80011bc:	460b      	mov	r3, r1
 80011be:	4620      	mov	r0, r4
 80011c0:	4629      	mov	r1, r5
 80011c2:	f7ff fc8b 	bl	8000adc <__aeabi_dcmplt>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <compareIRED+0x78>
 80011cc:	2302      	movs	r3, #2
 80011ce:	e000      	b.n	80011d2 <compareIRED+0x7a>
	else return 1;
 80011d0:	2301      	movs	r3, #1
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bdb0      	pop	{r4, r5, r7, pc}
 80011da:	bf00      	nop
 80011dc:	f3af 8000 	nop.w
 80011e0:	9999999a 	.word	0x9999999a
 80011e4:	3fe99999 	.word	0x3fe99999

080011e8 <decodeHashIRED>:
//-----------------------------------------------------------------------------
int32_t decodeHashIRED(decode_results *results)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
	int32_t hash = FNV_BASIS_32;
 80011f0:	4b21      	ldr	r3, [pc, #132]	; (8001278 <decodeHashIRED+0x90>)
 80011f2:	60fb      	str	r3, [r7, #12]

	if (results->rawlen < 6) return 0;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80011fa:	2b05      	cmp	r3, #5
 80011fc:	dc01      	bgt.n	8001202 <decodeHashIRED+0x1a>
 80011fe:	2300      	movs	r3, #0
 8001200:	e035      	b.n	800126e <decodeHashIRED+0x86>

	for (int16_t i = 1; (i + 2) < results->rawlen; i++) {
 8001202:	2301      	movs	r3, #1
 8001204:	817b      	strh	r3, [r7, #10]
 8001206:	e023      	b.n	8001250 <decodeHashIRED+0x68>
		int16_t value = compareIRED(results->rawbuf[i], results->rawbuf[i + 2]);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	689a      	ldr	r2, [r3, #8]
 800120c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	4413      	add	r3, r2
 8001214:	881b      	ldrh	r3, [r3, #0]
 8001216:	b298      	uxth	r0, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	689a      	ldr	r2, [r3, #8]
 800121c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001220:	3302      	adds	r3, #2
 8001222:	005b      	lsls	r3, r3, #1
 8001224:	4413      	add	r3, r2
 8001226:	881b      	ldrh	r3, [r3, #0]
 8001228:	b29b      	uxth	r3, r3
 800122a:	4619      	mov	r1, r3
 800122c:	f7ff ff94 	bl	8001158 <compareIRED>
 8001230:	4603      	mov	r3, r0
 8001232:	813b      	strh	r3, [r7, #8]
		hash = (hash * FNV_PRIME_32) ^ value;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	4a11      	ldr	r2, [pc, #68]	; (800127c <decodeHashIRED+0x94>)
 8001238:	fb03 f202 	mul.w	r2, r3, r2
 800123c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001240:	4053      	eors	r3, r2
 8001242:	60fb      	str	r3, [r7, #12]
	for (int16_t i = 1; (i + 2) < results->rawlen; i++) {
 8001244:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001248:	b29b      	uxth	r3, r3
 800124a:	3301      	adds	r3, #1
 800124c:	b29b      	uxth	r3, r3
 800124e:	817b      	strh	r3, [r7, #10]
 8001250:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001254:	3302      	adds	r3, #2
 8001256:	687a      	ldr	r2, [r7, #4]
 8001258:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 800125c:	4293      	cmp	r3, r2
 800125e:	dbd3      	blt.n	8001208 <decodeHashIRED+0x20>
	}

	results->value = hash;
 8001260:	68fa      	ldr	r2, [r7, #12]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	601a      	str	r2, [r3, #0]
	results->bits = 32;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2220      	movs	r2, #32
 800126a:	809a      	strh	r2, [r3, #4]

	return 1;
 800126c:	2301      	movs	r3, #1
}
 800126e:	4618      	mov	r0, r3
 8001270:	3710      	adds	r7, #16
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	811c9dc5 	.word	0x811c9dc5
 800127c:	01000193 	.word	0x01000193

08001280 <ST7565_Select>:
uint8_t lcdRdy = 1;

//------------------------------------------------------------------------------

inline static void ST7565_Select()
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
#ifdef CS_PORT
	//-- если захотим переделать под HAL ------------------
	#ifdef ST7565_SPI_HAL
		//HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
		CS_GPIO_Port->BSRR = ( CS_Pin << 16 );
 8001284:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001288:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800128c:	619a      	str	r2, [r3, #24]
	#ifdef ST7565_SPI_CMSIS
		CS_GPIO_Port->BSRR = ( CS_Pin << 16 );
	#endif
	//-----------------------------------------------------
#endif
}
 800128e:	bf00      	nop
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr

08001298 <ST7565_Unselect>:

//------------------------------------------------------------------------------

inline static void ST7565_Unselect()
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
#ifdef CS_PORT
	//-- если захотим переделать под HAL ------------------
	#ifdef ST7565_SPI_HAL
		//HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
		CS_GPIO_Port->BSRR = CS_Pin;
 800129c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80012a0:	2210      	movs	r2, #16
 80012a2:	619a      	str	r2, [r3, #24]
	#ifdef ST7565_SPI_CMSIS
		CS_GPIO_Port->BSRR = CS_Pin;
	#endif
	//-----------------------------------------------------
#endif
}
 80012a4:	bf00      	nop
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
	...

080012b0 <ST7565_Reset>:
	* @brief	 ( описание ):  аппарвтный сброс дисплея
	* @param	( параметры ):	
	* @return  ( возвращает ):	
*******************************************************************************/
void ST7565_Reset()
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
	RES_GPIO_Port->BSRR = (RES_Pin << 16);//HAL_GPIO_WritePin(RES_GPIO_Port, RES_Pin, GPIO_PIN_RESET );
 80012b4:	4b07      	ldr	r3, [pc, #28]	; (80012d4 <ST7565_Reset+0x24>)
 80012b6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80012ba:	619a      	str	r2, [r3, #24]
	HAL_Delay(1);
 80012bc:	2001      	movs	r0, #1
 80012be:	f006 fb4d 	bl	800795c <HAL_Delay>
	
	RES_GPIO_Port->BSRR = RES_Pin;//HAL_GPIO_WritePin(RES_GPIO_Port, RES_Pin, GPIO_PIN_SET );
 80012c2:	4b04      	ldr	r3, [pc, #16]	; (80012d4 <ST7565_Reset+0x24>)
 80012c4:	2204      	movs	r2, #4
 80012c6:	619a      	str	r2, [r3, #24]
	HAL_Delay(1);
 80012c8:	2001      	movs	r0, #1
 80012ca:	f006 fb47 	bl	800795c <HAL_Delay>
}
 80012ce:	bf00      	nop
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	48000c00 	.word	0x48000c00

080012d8 <ST7565_w_dats>:
//--------------------------------------------------------------------------------
#ifdef SET_NEW_PROC
inline static void ST7565_w_dats(uint8_t *Data, uint16_t len)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	460b      	mov	r3, r1
 80012e2:	807b      	strh	r3, [r7, #2]
	DC_GPIO_Port->BSRR = DC_Pin;//HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 80012e4:	4b1d      	ldr	r3, [pc, #116]	; (800135c <ST7565_w_dats+0x84>)
 80012e6:	2220      	movs	r2, #32
 80012e8:	619a      	str	r2, [r3, #24]

	if (with_dma) {
 80012ea:	4b1d      	ldr	r3, [pc, #116]	; (8001360 <ST7565_w_dats+0x88>)
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d018      	beq.n	8001324 <ST7565_w_dats+0x4c>
		lcdRdy = 0;
 80012f2:	4b1c      	ldr	r3, [pc, #112]	; (8001364 <ST7565_w_dats+0x8c>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	701a      	strb	r2, [r3, #0]
		if (HAL_SPI_Transmit_DMA(&ST7565_SPI_HAL, Data, len) != HAL_OK) devError |= devLCD;
 80012f8:	887b      	ldrh	r3, [r7, #2]
 80012fa:	461a      	mov	r2, r3
 80012fc:	6879      	ldr	r1, [r7, #4]
 80012fe:	481a      	ldr	r0, [pc, #104]	; (8001368 <ST7565_w_dats+0x90>)
 8001300:	f00b f9e8 	bl	800c6d4 <HAL_SPI_Transmit_DMA>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d006      	beq.n	8001318 <ST7565_w_dats+0x40>
 800130a:	4b18      	ldr	r3, [pc, #96]	; (800136c <ST7565_w_dats+0x94>)
 800130c:	881b      	ldrh	r3, [r3, #0]
 800130e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001312:	b29a      	uxth	r2, r3
 8001314:	4b15      	ldr	r3, [pc, #84]	; (800136c <ST7565_w_dats+0x94>)
 8001316:	801a      	strh	r2, [r3, #0]
		while (!lcdRdy) {};
 8001318:	bf00      	nop
 800131a:	4b12      	ldr	r3, [pc, #72]	; (8001364 <ST7565_w_dats+0x8c>)
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d0fb      	beq.n	800131a <ST7565_w_dats+0x42>
	} else {
		if (HAL_SPI_Transmit(&ST7565_SPI_HAL, Data, len, HAL_MAX_DELAY) != HAL_OK) devError |= devLCD;
		while (HAL_SPI_GetState(&ST7565_SPI_HAL) != HAL_SPI_STATE_READY) {};
	}
}
 8001322:	e017      	b.n	8001354 <ST7565_w_dats+0x7c>
		if (HAL_SPI_Transmit(&ST7565_SPI_HAL, Data, len, HAL_MAX_DELAY) != HAL_OK) devError |= devLCD;
 8001324:	887a      	ldrh	r2, [r7, #2]
 8001326:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800132a:	6879      	ldr	r1, [r7, #4]
 800132c:	480e      	ldr	r0, [pc, #56]	; (8001368 <ST7565_w_dats+0x90>)
 800132e:	f00a fd20 	bl	800bd72 <HAL_SPI_Transmit>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d006      	beq.n	8001346 <ST7565_w_dats+0x6e>
 8001338:	4b0c      	ldr	r3, [pc, #48]	; (800136c <ST7565_w_dats+0x94>)
 800133a:	881b      	ldrh	r3, [r3, #0]
 800133c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001340:	b29a      	uxth	r2, r3
 8001342:	4b0a      	ldr	r3, [pc, #40]	; (800136c <ST7565_w_dats+0x94>)
 8001344:	801a      	strh	r2, [r3, #0]
		while (HAL_SPI_GetState(&ST7565_SPI_HAL) != HAL_SPI_STATE_READY) {};
 8001346:	bf00      	nop
 8001348:	4807      	ldr	r0, [pc, #28]	; (8001368 <ST7565_w_dats+0x90>)
 800134a:	f00b fd61 	bl	800ce10 <HAL_SPI_GetState>
 800134e:	4603      	mov	r3, r0
 8001350:	2b01      	cmp	r3, #1
 8001352:	d1f9      	bne.n	8001348 <ST7565_w_dats+0x70>
}
 8001354:	bf00      	nop
 8001356:	3708      	adds	r7, #8
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	48000400 	.word	0x48000400
 8001360:	20000a6c 	.word	0x20000a6c
 8001364:	20000000 	.word	0x20000000
 8001368:	20000b78 	.word	0x20000b78
 800136c:	20001bc8 	.word	0x20001bc8

08001370 <ST7565_w_cmds>:
//
inline static void ST7565_w_cmds(uint8_t *Command, uint16_t len)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	460b      	mov	r3, r1
 800137a:	807b      	strh	r3, [r7, #2]
	DC_GPIO_Port->BSRR = (DC_Pin << 16);//HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
 800137c:	4b1e      	ldr	r3, [pc, #120]	; (80013f8 <ST7565_w_cmds+0x88>)
 800137e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001382:	619a      	str	r2, [r3, #24]

	if (with_dma) {
 8001384:	4b1d      	ldr	r3, [pc, #116]	; (80013fc <ST7565_w_cmds+0x8c>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d018      	beq.n	80013be <ST7565_w_cmds+0x4e>
		lcdRdy = 0;
 800138c:	4b1c      	ldr	r3, [pc, #112]	; (8001400 <ST7565_w_cmds+0x90>)
 800138e:	2200      	movs	r2, #0
 8001390:	701a      	strb	r2, [r3, #0]
		if (HAL_SPI_Transmit_DMA(&ST7565_SPI_HAL, Command, len) != HAL_OK) devError |= devLCD;
 8001392:	887b      	ldrh	r3, [r7, #2]
 8001394:	461a      	mov	r2, r3
 8001396:	6879      	ldr	r1, [r7, #4]
 8001398:	481a      	ldr	r0, [pc, #104]	; (8001404 <ST7565_w_cmds+0x94>)
 800139a:	f00b f99b 	bl	800c6d4 <HAL_SPI_Transmit_DMA>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d006      	beq.n	80013b2 <ST7565_w_cmds+0x42>
 80013a4:	4b18      	ldr	r3, [pc, #96]	; (8001408 <ST7565_w_cmds+0x98>)
 80013a6:	881b      	ldrh	r3, [r3, #0]
 80013a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013ac:	b29a      	uxth	r2, r3
 80013ae:	4b16      	ldr	r3, [pc, #88]	; (8001408 <ST7565_w_cmds+0x98>)
 80013b0:	801a      	strh	r2, [r3, #0]
		while (!lcdRdy) {};
 80013b2:	bf00      	nop
 80013b4:	4b12      	ldr	r3, [pc, #72]	; (8001400 <ST7565_w_cmds+0x90>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d0fb      	beq.n	80013b4 <ST7565_w_cmds+0x44>
	} else {
		if (HAL_SPI_Transmit(&ST7565_SPI_HAL, Command, len, HAL_MAX_DELAY) != HAL_OK) devError |= devLCD;
		while (HAL_SPI_GetState(&ST7565_SPI_HAL) != HAL_SPI_STATE_READY) {};
	}
}
 80013bc:	e017      	b.n	80013ee <ST7565_w_cmds+0x7e>
		if (HAL_SPI_Transmit(&ST7565_SPI_HAL, Command, len, HAL_MAX_DELAY) != HAL_OK) devError |= devLCD;
 80013be:	887a      	ldrh	r2, [r7, #2]
 80013c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013c4:	6879      	ldr	r1, [r7, #4]
 80013c6:	480f      	ldr	r0, [pc, #60]	; (8001404 <ST7565_w_cmds+0x94>)
 80013c8:	f00a fcd3 	bl	800bd72 <HAL_SPI_Transmit>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d006      	beq.n	80013e0 <ST7565_w_cmds+0x70>
 80013d2:	4b0d      	ldr	r3, [pc, #52]	; (8001408 <ST7565_w_cmds+0x98>)
 80013d4:	881b      	ldrh	r3, [r3, #0]
 80013d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013da:	b29a      	uxth	r2, r3
 80013dc:	4b0a      	ldr	r3, [pc, #40]	; (8001408 <ST7565_w_cmds+0x98>)
 80013de:	801a      	strh	r2, [r3, #0]
		while (HAL_SPI_GetState(&ST7565_SPI_HAL) != HAL_SPI_STATE_READY) {};
 80013e0:	bf00      	nop
 80013e2:	4808      	ldr	r0, [pc, #32]	; (8001404 <ST7565_w_cmds+0x94>)
 80013e4:	f00b fd14 	bl	800ce10 <HAL_SPI_GetState>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d1f9      	bne.n	80013e2 <ST7565_w_cmds+0x72>
}
 80013ee:	bf00      	nop
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	48000400 	.word	0x48000400
 80013fc:	20000a6c 	.word	0x20000a6c
 8001400:	20000000 	.word	0x20000000
 8001404:	20000b78 	.word	0x20000b78
 8001408:	20001bc8 	.word	0x20001bc8

0800140c <ST7565_SetX>:
inline static void ST7565_SetX(uint8_t x)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
 8001412:	4603      	mov	r3, r0
 8001414:	71fb      	strb	r3, [r7, #7]
	uint8_t bytes[] = { ((x & 0xf0) >> 4) | 0x10, x & 0x0f };
 8001416:	79fb      	ldrb	r3, [r7, #7]
 8001418:	091b      	lsrs	r3, r3, #4
 800141a:	b2db      	uxtb	r3, r3
 800141c:	f043 0310 	orr.w	r3, r3, #16
 8001420:	b2db      	uxtb	r3, r3
 8001422:	733b      	strb	r3, [r7, #12]
 8001424:	79fb      	ldrb	r3, [r7, #7]
 8001426:	f003 030f 	and.w	r3, r3, #15
 800142a:	b2db      	uxtb	r3, r3
 800142c:	737b      	strb	r3, [r7, #13]
	ST7565_w_cmds(bytes, 2);
 800142e:	f107 030c 	add.w	r3, r7, #12
 8001432:	2102      	movs	r1, #2
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff ff9b 	bl	8001370 <ST7565_w_cmds>
}
 800143a:	bf00      	nop
 800143c:	3710      	adds	r7, #16
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}

08001442 <ST7565_SetY>:
//
inline static void ST7565_SetY(uint8_t y)
{
 8001442:	b580      	push	{r7, lr}
 8001444:	b084      	sub	sp, #16
 8001446:	af00      	add	r7, sp, #0
 8001448:	4603      	mov	r3, r0
 800144a:	71fb      	strb	r3, [r7, #7]
	uint8_t byte = (y & 0x07) | 0xB0;
 800144c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001450:	f003 0307 	and.w	r3, r3, #7
 8001454:	b25b      	sxtb	r3, r3
 8001456:	f063 034f 	orn	r3, r3, #79	; 0x4f
 800145a:	b25b      	sxtb	r3, r3
 800145c:	b2db      	uxtb	r3, r3
 800145e:	73fb      	strb	r3, [r7, #15]
	ST7565_w_cmds(&byte, 1);
 8001460:	f107 030f 	add.w	r3, r7, #15
 8001464:	2101      	movs	r1, #1
 8001466:	4618      	mov	r0, r3
 8001468:	f7ff ff82 	bl	8001370 <ST7565_w_cmds>
}
 800146c:	bf00      	nop
 800146e:	3710      	adds	r7, #16
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}

08001474 <ST7565_Display_fill>:
								( данные отправляются сразу на дисплей и записываются в буфер кадра )
								Функцию ST7565_Update() вызывать не нужно
	* @return  ( возвращает ):	
*******************************************************************************/
void ST7565_Display_fill(uint8_t fill)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	4603      	mov	r3, r0
 800147c:	71fb      	strb	r3, [r7, #7]
uint8_t page;//, column;
	
	memset(ST7565_buffer, fill, (SCREEN_WIDTH * SCREEN_HEIGHT / 8));	// отчистка памяти заполняем массив значением 0x00
 800147e:	79fb      	ldrb	r3, [r7, #7]
 8001480:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001484:	4619      	mov	r1, r3
 8001486:	4814      	ldr	r0, [pc, #80]	; (80014d8 <ST7565_Display_fill+0x64>)
 8001488:	f00e fa82 	bl	800f990 <memset>
	
	ST7565_Select();
 800148c:	f7ff fef8 	bl	8001280 <ST7565_Select>
#ifdef SET_NEW_PROC
	uint8_t dta[] = {0, 0x10, 0};
 8001490:	4a12      	ldr	r2, [pc, #72]	; (80014dc <ST7565_Display_fill+0x68>)
 8001492:	f107 030c 	add.w	r3, r7, #12
 8001496:	6812      	ldr	r2, [r2, #0]
 8001498:	4611      	mov	r1, r2
 800149a:	8019      	strh	r1, [r3, #0]
 800149c:	3302      	adds	r3, #2
 800149e:	0c12      	lsrs	r2, r2, #16
 80014a0:	701a      	strb	r2, [r3, #0]
#endif
	for (page = 0xB7; page >= 0xB0; page-- ) {
 80014a2:	23b7      	movs	r3, #183	; 0xb7
 80014a4:	73fb      	strb	r3, [r7, #15]
 80014a6:	e00e      	b.n	80014c6 <ST7565_Display_fill+0x52>
		ST7565_w_cmd(page);  //set page address
		ST7565_w_cmd(0x10);  //set Column address MSB   
		ST7565_w_cmd(0x00);  //set column address LSB
		for (column = 0; column < 131; column++) ST7565_w_dat(fill);
#else
		dta[0] = page;
 80014a8:	7bfb      	ldrb	r3, [r7, #15]
 80014aa:	733b      	strb	r3, [r7, #12]
		ST7565_w_cmds(dta, sizeof(dta));
 80014ac:	f107 030c 	add.w	r3, r7, #12
 80014b0:	2103      	movs	r1, #3
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7ff ff5c 	bl	8001370 <ST7565_w_cmds>
		ST7565_w_dats(ST7565_buffer, 131);
 80014b8:	2183      	movs	r1, #131	; 0x83
 80014ba:	4807      	ldr	r0, [pc, #28]	; (80014d8 <ST7565_Display_fill+0x64>)
 80014bc:	f7ff ff0c 	bl	80012d8 <ST7565_w_dats>
	for (page = 0xB7; page >= 0xB0; page-- ) {
 80014c0:	7bfb      	ldrb	r3, [r7, #15]
 80014c2:	3b01      	subs	r3, #1
 80014c4:	73fb      	strb	r3, [r7, #15]
 80014c6:	7bfb      	ldrb	r3, [r7, #15]
 80014c8:	2baf      	cmp	r3, #175	; 0xaf
 80014ca:	d8ed      	bhi.n	80014a8 <ST7565_Display_fill+0x34>
#endif
    }
		
	ST7565_Unselect();
 80014cc:	f7ff fee4 	bl	8001298 <ST7565_Unselect>
}
 80014d0:	bf00      	nop
 80014d2:	3710      	adds	r7, #16
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	2000066c 	.word	0x2000066c
 80014dc:	08013f10 	.word	0x08013f10

080014e0 <ST7565_Init>:
	* @brief	 ( описание ):  инициализация дисплея ( при другой инициализации можно поменять параметры внутри функции )
	* @param	( параметры ):	
	* @return  ( возвращает ):	
*******************************************************************************/
void ST7565_Init()
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
	ST7565_Select();
 80014e6:	f7ff fecb 	bl	8001280 <ST7565_Select>
	ST7565_w_cmd(CMD_DISPLAY_ON);    		//Display on
	// Инвертирование экрана CMD_SET_DISP_NORMAL - OFF    CMD_SET_DISP_REVERSE - ON
	ST7565_w_cmd(CMD_SET_DISP_NORMAL);
	//HAL_Delay(1);//1
#else
	uint8_t dta[] = {
 80014ea:	4a09      	ldr	r2, [pc, #36]	; (8001510 <ST7565_Init+0x30>)
 80014ec:	1d3b      	adds	r3, r7, #4
 80014ee:	ca07      	ldmia	r2, {r0, r1, r2}
 80014f0:	c303      	stmia	r3!, {r0, r1}
 80014f2:	801a      	strh	r2, [r3, #0]
	};
	#if defined (SCREEN_ORIENTATION_180)
		dta[1] = CMD_SET_ADC_REVERSE;    	//ADC selection(SEG0->SEG128)  CMD_SET_ADC_NORMAL горизонтально «нормальная» (не перевернутая)
		dta[2] = CMD_SET_COM_NORMAL;    		//SHL selection(COM0->COM64)   CMD_SET_COM_REVERSE вертикально «перевернутая» (дополняет команду выше)
	#endif
	ST7565_w_cmds(dta, sizeof(dta));
 80014f4:	1d3b      	adds	r3, r7, #4
 80014f6:	210a      	movs	r1, #10
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff ff39 	bl	8001370 <ST7565_w_cmds>
#endif
	
	ST7565_Display_fill(0);
 80014fe:	2000      	movs	r0, #0
 8001500:	f7ff ffb8 	bl	8001474 <ST7565_Display_fill>
	
	ST7565_Unselect();
 8001504:	f7ff fec8 	bl	8001298 <ST7565_Unselect>
   
}
 8001508:	bf00      	nop
 800150a:	3710      	adds	r7, #16
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	08013f14 	.word	0x08013f14

08001514 <ST7565_CMD_DISPLAY>:
//--------------------------------------------------------------------------------
void ST7565_CMD_DISPLAY(uint8_t byte)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	4603      	mov	r3, r0
 800151c:	71fb      	strb	r3, [r7, #7]
#ifdef SET_NEW_PROC
	ST7565_w_cmds(&byte, 1);
 800151e:	1dfb      	adds	r3, r7, #7
 8001520:	2101      	movs	r1, #1
 8001522:	4618      	mov	r0, r3
 8001524:	f7ff ff24 	bl	8001370 <ST7565_w_cmds>

	if (byte == CMD_DISPLAY_OFF) OFF_DISPLAY();
 8001528:	79fb      	ldrb	r3, [r7, #7]
 800152a:	2bae      	cmp	r3, #174	; 0xae
 800152c:	d103      	bne.n	8001536 <ST7565_CMD_DISPLAY+0x22>
 800152e:	4b06      	ldr	r3, [pc, #24]	; (8001548 <ST7565_CMD_DISPLAY+0x34>)
 8001530:	2201      	movs	r2, #1
 8001532:	619a      	str	r2, [r3, #24]
							else ON_DISPLAY();
#else
	ST7565_w_cmd(byte);
#endif
}
 8001534:	e003      	b.n	800153e <ST7565_CMD_DISPLAY+0x2a>
							else ON_DISPLAY();
 8001536:	4b04      	ldr	r3, [pc, #16]	; (8001548 <ST7565_CMD_DISPLAY+0x34>)
 8001538:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800153c:	619a      	str	r2, [r3, #24]
}
 800153e:	bf00      	nop
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	48000800 	.word	0x48000800

0800154c <ST7565_Draw_pixel>:
	* @param	( параметры ):	координата X(0 - 127) и координата Y(0 - 63)  color 1 or 0
	* @return  ( возвращает ):	
*******************************************************************************/
// X(0 - 127)  Y(0 - 63)
void ST7565_Draw_pixel(int16_t x, int16_t y, uint8_t color)
{
 800154c:	b480      	push	{r7}
 800154e:	b085      	sub	sp, #20
 8001550:	af00      	add	r7, sp, #0
 8001552:	4603      	mov	r3, r0
 8001554:	80fb      	strh	r3, [r7, #6]
 8001556:	460b      	mov	r3, r1
 8001558:	80bb      	strh	r3, [r7, #4]
 800155a:	4613      	mov	r3, r2
 800155c:	70fb      	strb	r3, [r7, #3]
    if (x >= SCREEN_WIDTH || x < 0 || y >= SCREEN_HEIGHT || y < 0) return;
 800155e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001562:	2b7f      	cmp	r3, #127	; 0x7f
 8001564:	dc4c      	bgt.n	8001600 <ST7565_Draw_pixel+0xb4>
 8001566:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800156a:	2b00      	cmp	r3, #0
 800156c:	db48      	blt.n	8001600 <ST7565_Draw_pixel+0xb4>
 800156e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001572:	2b3f      	cmp	r3, #63	; 0x3f
 8001574:	dc44      	bgt.n	8001600 <ST7565_Draw_pixel+0xb4>
 8001576:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800157a:	2b00      	cmp	r3, #0
 800157c:	db40      	blt.n	8001600 <ST7565_Draw_pixel+0xb4>

    uint16_t array_pos = x + ((y >> 3) * SCREEN_WIDTH );
 800157e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001582:	10db      	asrs	r3, r3, #3
 8001584:	b21b      	sxth	r3, r3
 8001586:	b29b      	uxth	r3, r3
 8001588:	01db      	lsls	r3, r3, #7
 800158a:	b29a      	uxth	r2, r3
 800158c:	88fb      	ldrh	r3, [r7, #6]
 800158e:	4413      	add	r3, r2
 8001590:	81fb      	strh	r3, [r7, #14]

    if (color) {
 8001592:	78fb      	ldrb	r3, [r7, #3]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d018      	beq.n	80015ca <ST7565_Draw_pixel+0x7e>
        ST7565_buffer[array_pos] |= 1 << (y % 8);
 8001598:	89fb      	ldrh	r3, [r7, #14]
 800159a:	4a1c      	ldr	r2, [pc, #112]	; (800160c <ST7565_Draw_pixel+0xc0>)
 800159c:	5cd3      	ldrb	r3, [r2, r3]
 800159e:	b25a      	sxtb	r2, r3
 80015a0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80015a4:	4259      	negs	r1, r3
 80015a6:	f003 0307 	and.w	r3, r3, #7
 80015aa:	f001 0107 	and.w	r1, r1, #7
 80015ae:	bf58      	it	pl
 80015b0:	424b      	negpl	r3, r1
 80015b2:	b21b      	sxth	r3, r3
 80015b4:	4619      	mov	r1, r3
 80015b6:	2301      	movs	r3, #1
 80015b8:	408b      	lsls	r3, r1
 80015ba:	b25b      	sxtb	r3, r3
 80015bc:	4313      	orrs	r3, r2
 80015be:	b25a      	sxtb	r2, r3
 80015c0:	89fb      	ldrh	r3, [r7, #14]
 80015c2:	b2d1      	uxtb	r1, r2
 80015c4:	4a11      	ldr	r2, [pc, #68]	; (800160c <ST7565_Draw_pixel+0xc0>)
 80015c6:	54d1      	strb	r1, [r2, r3]
 80015c8:	e01b      	b.n	8001602 <ST7565_Draw_pixel+0xb6>
    } else {
        ST7565_buffer[array_pos] &= 0xFF ^ 1 << (y % 8);
 80015ca:	89fb      	ldrh	r3, [r7, #14]
 80015cc:	4a0f      	ldr	r2, [pc, #60]	; (800160c <ST7565_Draw_pixel+0xc0>)
 80015ce:	5cd3      	ldrb	r3, [r2, r3]
 80015d0:	b25a      	sxtb	r2, r3
 80015d2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80015d6:	4259      	negs	r1, r3
 80015d8:	f003 0307 	and.w	r3, r3, #7
 80015dc:	f001 0107 	and.w	r1, r1, #7
 80015e0:	bf58      	it	pl
 80015e2:	424b      	negpl	r3, r1
 80015e4:	b21b      	sxth	r3, r3
 80015e6:	4619      	mov	r1, r3
 80015e8:	2301      	movs	r3, #1
 80015ea:	408b      	lsls	r3, r1
 80015ec:	b25b      	sxtb	r3, r3
 80015ee:	43db      	mvns	r3, r3
 80015f0:	b25b      	sxtb	r3, r3
 80015f2:	4013      	ands	r3, r2
 80015f4:	b25a      	sxtb	r2, r3
 80015f6:	89fb      	ldrh	r3, [r7, #14]
 80015f8:	b2d1      	uxtb	r1, r2
 80015fa:	4a04      	ldr	r2, [pc, #16]	; (800160c <ST7565_Draw_pixel+0xc0>)
 80015fc:	54d1      	strb	r1, [r2, r3]
 80015fe:	e000      	b.n	8001602 <ST7565_Draw_pixel+0xb6>
    if (x >= SCREEN_WIDTH || x < 0 || y >= SCREEN_HEIGHT || y < 0) return;
 8001600:	bf00      	nop
    }
}
 8001602:	3714      	adds	r7, #20
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr
 800160c:	2000066c 	.word	0x2000066c

08001610 <ST7565_Update>:
	* @brief	 ( описание ):  вывод буффера кадра на дисплей
	* @param	( параметры ):	
	* @return  ( возвращает ):	
*******************************************************************************/
void ST7565_Update()
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
uint8_t x, y;
		
	ST7565_Select();
 8001616:	f7ff fe33 	bl	8001280 <ST7565_Select>

  	for (y = 0; y < 8; y++) {
 800161a:	2300      	movs	r3, #0
 800161c:	71bb      	strb	r3, [r7, #6]
 800161e:	e01d      	b.n	800165c <ST7565_Update+0x4c>
		ST7565_SetX(0);	
 8001620:	2000      	movs	r0, #0
 8001622:	f7ff fef3 	bl	800140c <ST7565_SetX>
		ST7565_SetY(y);
 8001626:	79bb      	ldrb	r3, [r7, #6]
 8001628:	4618      	mov	r0, r3
 800162a:	f7ff ff0a 	bl	8001442 <ST7565_SetY>
		for (x = 0; x < 128; x++) {
 800162e:	2300      	movs	r3, #0
 8001630:	71fb      	strb	r3, [r7, #7]
 8001632:	e00c      	b.n	800164e <ST7565_Update+0x3e>
			ST7565_w_dats(&ST7565_buffer[x + 128 * y], 1);
 8001634:	79fa      	ldrb	r2, [r7, #7]
 8001636:	79bb      	ldrb	r3, [r7, #6]
 8001638:	01db      	lsls	r3, r3, #7
 800163a:	4413      	add	r3, r2
 800163c:	4a0d      	ldr	r2, [pc, #52]	; (8001674 <ST7565_Update+0x64>)
 800163e:	4413      	add	r3, r2
 8001640:	2101      	movs	r1, #1
 8001642:	4618      	mov	r0, r3
 8001644:	f7ff fe48 	bl	80012d8 <ST7565_w_dats>
		for (x = 0; x < 128; x++) {
 8001648:	79fb      	ldrb	r3, [r7, #7]
 800164a:	3301      	adds	r3, #1
 800164c:	71fb      	strb	r3, [r7, #7]
 800164e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001652:	2b00      	cmp	r3, #0
 8001654:	daee      	bge.n	8001634 <ST7565_Update+0x24>
  	for (y = 0; y < 8; y++) {
 8001656:	79bb      	ldrb	r3, [r7, #6]
 8001658:	3301      	adds	r3, #1
 800165a:	71bb      	strb	r3, [r7, #6]
 800165c:	79bb      	ldrb	r3, [r7, #6]
 800165e:	2b07      	cmp	r3, #7
 8001660:	d9de      	bls.n	8001620 <ST7565_Update+0x10>
		}
	}
	
	ST7565_Unselect();
 8001662:	f7ff fe19 	bl	8001298 <ST7565_Unselect>
	HAL_Delay(50);//(100);
 8001666:	2032      	movs	r0, #50	; 0x32
 8001668:	f006 f978 	bl	800795c <HAL_Delay>
}
 800166c:	bf00      	nop
 800166e:	3708      	adds	r7, #8
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	2000066c 	.word	0x2000066c

08001678 <ST7565_DrawChar>:
	* @brief	 ( описание ):  функция записывает 1 символ в буфер кадра
	* @param	( параметры ):	координаты X(0 - 127)  Y(0 - 63), символ, шрифт, множитель, цвет 1 или 0
	* @return  ( возвращает ):	
*******************************************************************************/
void ST7565_DrawChar(int16_t x, int16_t y, unsigned char ch, FontDef_t* Font, uint8_t multiplier, uint8_t color)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b088      	sub	sp, #32
 800167c:	af00      	add	r7, sp, #0
 800167e:	607b      	str	r3, [r7, #4]
 8001680:	4603      	mov	r3, r0
 8001682:	81fb      	strh	r3, [r7, #14]
 8001684:	460b      	mov	r3, r1
 8001686:	81bb      	strh	r3, [r7, #12]
 8001688:	4613      	mov	r3, r2
 800168a:	72fb      	strb	r3, [r7, #11]
uint16_t i, j;
uint16_t b;
int16_t X = x, Y = y;
 800168c:	89fb      	ldrh	r3, [r7, #14]
 800168e:	833b      	strh	r3, [r7, #24]
 8001690:	89bb      	ldrh	r3, [r7, #12]
 8001692:	82fb      	strh	r3, [r7, #22]
int16_t xx, yy;
	
	if (multiplier < 1) multiplier = 1;
 8001694:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001698:	2b00      	cmp	r3, #0
 800169a:	d102      	bne.n	80016a2 <ST7565_DrawChar+0x2a>
 800169c:	2301      	movs	r3, #1
 800169e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	
	// Check available space in LCD
	if (SCREEN_WIDTH >= ( x + Font->FontWidth) || SCREEN_HEIGHT >= ( y + Font->FontHeight)) {
 80016a2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80016a6:	687a      	ldr	r2, [r7, #4]
 80016a8:	7812      	ldrb	r2, [r2, #0]
 80016aa:	4413      	add	r3, r2
 80016ac:	2b80      	cmp	r3, #128	; 0x80
 80016ae:	dd07      	ble.n	80016c0 <ST7565_DrawChar+0x48>
 80016b0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	7852      	ldrb	r2, [r2, #1]
 80016b8:	4413      	add	r3, r2
 80016ba:	2b40      	cmp	r3, #64	; 0x40
 80016bc:	f300 8154 	bgt.w	8001968 <ST7565_DrawChar+0x2f0>
		// Go through font
		for (i = 0; i < Font->FontHeight; i++) {
 80016c0:	2300      	movs	r3, #0
 80016c2:	83fb      	strh	r3, [r7, #30]
 80016c4:	e149      	b.n	800195a <ST7565_DrawChar+0x2e2>
			if (ch < 127) {
 80016c6:	7afb      	ldrb	r3, [r7, #11]
 80016c8:	2b7e      	cmp	r3, #126	; 0x7e
 80016ca:	d80f      	bhi.n	80016ec <ST7565_DrawChar+0x74>
				b = Font->data[(ch - 32) * Font->FontHeight + i];
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	f8d3 2002 	ldr.w	r2, [r3, #2]
 80016d2:	7afb      	ldrb	r3, [r7, #11]
 80016d4:	3b20      	subs	r3, #32
 80016d6:	6879      	ldr	r1, [r7, #4]
 80016d8:	7849      	ldrb	r1, [r1, #1]
 80016da:	fb03 f101 	mul.w	r1, r3, r1
 80016de:	8bfb      	ldrh	r3, [r7, #30]
 80016e0:	440b      	add	r3, r1
 80016e2:	005b      	lsls	r3, r3, #1
 80016e4:	4413      	add	r3, r2
 80016e6:	881b      	ldrh	r3, [r3, #0]
 80016e8:	837b      	strh	r3, [r7, #26]
 80016ea:	e0af      	b.n	800184c <ST7565_DrawChar+0x1d4>
			} else if (ch > 191) {
 80016ec:	7afb      	ldrb	r3, [r7, #11]
 80016ee:	2bbf      	cmp	r3, #191	; 0xbf
 80016f0:	d90f      	bls.n	8001712 <ST7565_DrawChar+0x9a>
				// +96 это так как латинские символы и знаки в шрифтах занимают 96 позиций
				// и если в шрифте который содержит сперва латиницу и спец символы и потом 
				// только кирилицу то нужно добавлять 95 если шрифт 
				// содержит только кирилицу то +96 не нужно
				b = Font->data[((ch - 192) + 96) * Font->FontHeight + i];
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	f8d3 2002 	ldr.w	r2, [r3, #2]
 80016f8:	7afb      	ldrb	r3, [r7, #11]
 80016fa:	3b60      	subs	r3, #96	; 0x60
 80016fc:	6879      	ldr	r1, [r7, #4]
 80016fe:	7849      	ldrb	r1, [r1, #1]
 8001700:	fb03 f101 	mul.w	r1, r3, r1
 8001704:	8bfb      	ldrh	r3, [r7, #30]
 8001706:	440b      	add	r3, r1
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	4413      	add	r3, r2
 800170c:	881b      	ldrh	r3, [r3, #0]
 800170e:	837b      	strh	r3, [r7, #26]
 8001710:	e09c      	b.n	800184c <ST7565_DrawChar+0x1d4>
			} else if (ch == 168) {	// 168 символ по ASCII - Ё
 8001712:	7afb      	ldrb	r3, [r7, #11]
 8001714:	2ba8      	cmp	r3, #168	; 0xa8
 8001716:	d111      	bne.n	800173c <ST7565_DrawChar+0xc4>
				// 160 эллемент ( символ Ё ) 
				b = Font->data[160 * Font->FontHeight + i];
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	f8d3 2002 	ldr.w	r2, [r3, #2]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	785b      	ldrb	r3, [r3, #1]
 8001722:	4619      	mov	r1, r3
 8001724:	460b      	mov	r3, r1
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	440b      	add	r3, r1
 800172a:	015b      	lsls	r3, r3, #5
 800172c:	4619      	mov	r1, r3
 800172e:	8bfb      	ldrh	r3, [r7, #30]
 8001730:	440b      	add	r3, r1
 8001732:	005b      	lsls	r3, r3, #1
 8001734:	4413      	add	r3, r2
 8001736:	881b      	ldrh	r3, [r3, #0]
 8001738:	837b      	strh	r3, [r7, #26]
 800173a:	e087      	b.n	800184c <ST7565_DrawChar+0x1d4>
			} else if (ch == 184) {	// 184 символ по ASCII - ё
 800173c:	7afb      	ldrb	r3, [r7, #11]
 800173e:	2bb8      	cmp	r3, #184	; 0xb8
 8001740:	d111      	bne.n	8001766 <ST7565_DrawChar+0xee>
				// 161 эллемент  ( символ ё ) 
				b = Font->data[161 * Font->FontHeight + i];
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	f8d3 1002 	ldr.w	r1, [r3, #2]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	785b      	ldrb	r3, [r3, #1]
 800174c:	461a      	mov	r2, r3
 800174e:	4613      	mov	r3, r2
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	4413      	add	r3, r2
 8001754:	015b      	lsls	r3, r3, #5
 8001756:	441a      	add	r2, r3
 8001758:	8bfb      	ldrh	r3, [r7, #30]
 800175a:	4413      	add	r3, r2
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	440b      	add	r3, r1
 8001760:	881b      	ldrh	r3, [r3, #0]
 8001762:	837b      	strh	r3, [r7, #26]
 8001764:	e072      	b.n	800184c <ST7565_DrawChar+0x1d4>
			} else if (ch == 170) {	// 168 символ по ASCII - Є
 8001766:	7afb      	ldrb	r3, [r7, #11]
 8001768:	2baa      	cmp	r3, #170	; 0xaa
 800176a:	d10f      	bne.n	800178c <ST7565_DrawChar+0x114>
				// 162 эллемент ( символ Є )
				b = Font->data[162 * Font->FontHeight + i];
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f8d3 2002 	ldr.w	r2, [r3, #2]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	785b      	ldrb	r3, [r3, #1]
 8001776:	4619      	mov	r1, r3
 8001778:	23a2      	movs	r3, #162	; 0xa2
 800177a:	fb03 f101 	mul.w	r1, r3, r1
 800177e:	8bfb      	ldrh	r3, [r7, #30]
 8001780:	440b      	add	r3, r1
 8001782:	005b      	lsls	r3, r3, #1
 8001784:	4413      	add	r3, r2
 8001786:	881b      	ldrh	r3, [r3, #0]
 8001788:	837b      	strh	r3, [r7, #26]
 800178a:	e05f      	b.n	800184c <ST7565_DrawChar+0x1d4>
			} else if (ch == 175) {	// 184 символ по ASCII - Ї
 800178c:	7afb      	ldrb	r3, [r7, #11]
 800178e:	2baf      	cmp	r3, #175	; 0xaf
 8001790:	d10f      	bne.n	80017b2 <ST7565_DrawChar+0x13a>
				// 163 эллемент  ( символ Ї )
				b = Font->data[163 * Font->FontHeight + i];
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	f8d3 2002 	ldr.w	r2, [r3, #2]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	785b      	ldrb	r3, [r3, #1]
 800179c:	4619      	mov	r1, r3
 800179e:	23a3      	movs	r3, #163	; 0xa3
 80017a0:	fb03 f101 	mul.w	r1, r3, r1
 80017a4:	8bfb      	ldrh	r3, [r7, #30]
 80017a6:	440b      	add	r3, r1
 80017a8:	005b      	lsls	r3, r3, #1
 80017aa:	4413      	add	r3, r2
 80017ac:	881b      	ldrh	r3, [r3, #0]
 80017ae:	837b      	strh	r3, [r7, #26]
 80017b0:	e04c      	b.n	800184c <ST7565_DrawChar+0x1d4>
			} else if (ch == 178) {	// 168 символ по ASCII - І
 80017b2:	7afb      	ldrb	r3, [r7, #11]
 80017b4:	2bb2      	cmp	r3, #178	; 0xb2
 80017b6:	d10f      	bne.n	80017d8 <ST7565_DrawChar+0x160>
				// 164 эллемент ( символ І )
				b = Font->data[164 * Font->FontHeight + i];
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	f8d3 2002 	ldr.w	r2, [r3, #2]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	785b      	ldrb	r3, [r3, #1]
 80017c2:	4619      	mov	r1, r3
 80017c4:	23a4      	movs	r3, #164	; 0xa4
 80017c6:	fb03 f101 	mul.w	r1, r3, r1
 80017ca:	8bfb      	ldrh	r3, [r7, #30]
 80017cc:	440b      	add	r3, r1
 80017ce:	005b      	lsls	r3, r3, #1
 80017d0:	4413      	add	r3, r2
 80017d2:	881b      	ldrh	r3, [r3, #0]
 80017d4:	837b      	strh	r3, [r7, #26]
 80017d6:	e039      	b.n	800184c <ST7565_DrawChar+0x1d4>
			}
			else if (ch == 179) {	// 184 символ по ASCII - і
 80017d8:	7afb      	ldrb	r3, [r7, #11]
 80017da:	2bb3      	cmp	r3, #179	; 0xb3
 80017dc:	d111      	bne.n	8001802 <ST7565_DrawChar+0x18a>
				// 165 эллемент  ( символ і )
				b = Font->data[165 * Font->FontHeight + i];
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	f8d3 2002 	ldr.w	r2, [r3, #2]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	785b      	ldrb	r3, [r3, #1]
 80017e8:	4619      	mov	r1, r3
 80017ea:	460b      	mov	r3, r1
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	440b      	add	r3, r1
 80017f0:	0159      	lsls	r1, r3, #5
 80017f2:	4419      	add	r1, r3
 80017f4:	8bfb      	ldrh	r3, [r7, #30]
 80017f6:	440b      	add	r3, r1
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	4413      	add	r3, r2
 80017fc:	881b      	ldrh	r3, [r3, #0]
 80017fe:	837b      	strh	r3, [r7, #26]
 8001800:	e024      	b.n	800184c <ST7565_DrawChar+0x1d4>
			} else if (ch == 186) {	// 184 символ по ASCII - є
 8001802:	7afb      	ldrb	r3, [r7, #11]
 8001804:	2bba      	cmp	r3, #186	; 0xba
 8001806:	d10f      	bne.n	8001828 <ST7565_DrawChar+0x1b0>
				// 166 эллемент  ( символ є )
				b = Font->data[166 * Font->FontHeight + i];
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	f8d3 2002 	ldr.w	r2, [r3, #2]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	785b      	ldrb	r3, [r3, #1]
 8001812:	4619      	mov	r1, r3
 8001814:	23a6      	movs	r3, #166	; 0xa6
 8001816:	fb03 f101 	mul.w	r1, r3, r1
 800181a:	8bfb      	ldrh	r3, [r7, #30]
 800181c:	440b      	add	r3, r1
 800181e:	005b      	lsls	r3, r3, #1
 8001820:	4413      	add	r3, r2
 8001822:	881b      	ldrh	r3, [r3, #0]
 8001824:	837b      	strh	r3, [r7, #26]
 8001826:	e011      	b.n	800184c <ST7565_DrawChar+0x1d4>
			} else if (ch == 191) {	// 168 символ по ASCII - ї
 8001828:	7afb      	ldrb	r3, [r7, #11]
 800182a:	2bbf      	cmp	r3, #191	; 0xbf
 800182c:	d10e      	bne.n	800184c <ST7565_DrawChar+0x1d4>
				// 167 эллемент ( символ ї )
				b = Font->data[167 * Font->FontHeight + i];
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	f8d3 2002 	ldr.w	r2, [r3, #2]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	785b      	ldrb	r3, [r3, #1]
 8001838:	4619      	mov	r1, r3
 800183a:	23a7      	movs	r3, #167	; 0xa7
 800183c:	fb03 f101 	mul.w	r1, r3, r1
 8001840:	8bfb      	ldrh	r3, [r7, #30]
 8001842:	440b      	add	r3, r1
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	4413      	add	r3, r2
 8001848:	881b      	ldrh	r3, [r3, #0]
 800184a:	837b      	strh	r3, [r7, #26]
			}
			//-----------------------------------------------------------------------------
			
			for (j = 0; j < Font->FontWidth; j++) {
 800184c:	2300      	movs	r3, #0
 800184e:	83bb      	strh	r3, [r7, #28]
 8001850:	e071      	b.n	8001936 <ST7565_DrawChar+0x2be>
				if ((b << j) & 0x8000) {
 8001852:	8b7a      	ldrh	r2, [r7, #26]
 8001854:	8bbb      	ldrh	r3, [r7, #28]
 8001856:	fa02 f303 	lsl.w	r3, r2, r3
 800185a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d02d      	beq.n	80018be <ST7565_DrawChar+0x246>
					for (yy = 0; yy < multiplier; yy++){
 8001862:	2300      	movs	r3, #0
 8001864:	827b      	strh	r3, [r7, #18]
 8001866:	e023      	b.n	80018b0 <ST7565_DrawChar+0x238>
						for (xx = 0; xx < multiplier; xx++){
 8001868:	2300      	movs	r3, #0
 800186a:	82bb      	strh	r3, [r7, #20]
 800186c:	e014      	b.n	8001898 <ST7565_DrawChar+0x220>
							ST7565_Draw_pixel(X + xx, Y + yy, color);
 800186e:	8b3a      	ldrh	r2, [r7, #24]
 8001870:	8abb      	ldrh	r3, [r7, #20]
 8001872:	4413      	add	r3, r2
 8001874:	b29b      	uxth	r3, r3
 8001876:	b218      	sxth	r0, r3
 8001878:	8afa      	ldrh	r2, [r7, #22]
 800187a:	8a7b      	ldrh	r3, [r7, #18]
 800187c:	4413      	add	r3, r2
 800187e:	b29b      	uxth	r3, r3
 8001880:	b21b      	sxth	r3, r3
 8001882:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8001886:	4619      	mov	r1, r3
 8001888:	f7ff fe60 	bl	800154c <ST7565_Draw_pixel>
						for (xx = 0; xx < multiplier; xx++){
 800188c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001890:	b29b      	uxth	r3, r3
 8001892:	3301      	adds	r3, #1
 8001894:	b29b      	uxth	r3, r3
 8001896:	82bb      	strh	r3, [r7, #20]
 8001898:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800189c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80018a0:	429a      	cmp	r2, r3
 80018a2:	dbe4      	blt.n	800186e <ST7565_DrawChar+0x1f6>
					for (yy = 0; yy < multiplier; yy++){
 80018a4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80018a8:	b29b      	uxth	r3, r3
 80018aa:	3301      	adds	r3, #1
 80018ac:	b29b      	uxth	r3, r3
 80018ae:	827b      	strh	r3, [r7, #18]
 80018b0:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80018b4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80018b8:	429a      	cmp	r2, r3
 80018ba:	dbd5      	blt.n	8001868 <ST7565_DrawChar+0x1f0>
 80018bc:	e031      	b.n	8001922 <ST7565_DrawChar+0x2aa>
						}
					}
				} else {// если фон очищать то оставляем если чтоб фон оставался старый то коментируем эту часть -------------
					for (yy = 0; yy < multiplier; yy++){
 80018be:	2300      	movs	r3, #0
 80018c0:	827b      	strh	r3, [r7, #18]
 80018c2:	e028      	b.n	8001916 <ST7565_DrawChar+0x29e>
						for (xx = 0; xx < multiplier; xx++){
 80018c4:	2300      	movs	r3, #0
 80018c6:	82bb      	strh	r3, [r7, #20]
 80018c8:	e019      	b.n	80018fe <ST7565_DrawChar+0x286>
							ST7565_Draw_pixel(X + xx, Y + yy, !color);
 80018ca:	8b3a      	ldrh	r2, [r7, #24]
 80018cc:	8abb      	ldrh	r3, [r7, #20]
 80018ce:	4413      	add	r3, r2
 80018d0:	b29b      	uxth	r3, r3
 80018d2:	b218      	sxth	r0, r3
 80018d4:	8afa      	ldrh	r2, [r7, #22]
 80018d6:	8a7b      	ldrh	r3, [r7, #18]
 80018d8:	4413      	add	r3, r2
 80018da:	b29b      	uxth	r3, r3
 80018dc:	b219      	sxth	r1, r3
 80018de:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	bf0c      	ite	eq
 80018e6:	2301      	moveq	r3, #1
 80018e8:	2300      	movne	r3, #0
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	461a      	mov	r2, r3
 80018ee:	f7ff fe2d 	bl	800154c <ST7565_Draw_pixel>
						for (xx = 0; xx < multiplier; xx++){
 80018f2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80018f6:	b29b      	uxth	r3, r3
 80018f8:	3301      	adds	r3, #1
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	82bb      	strh	r3, [r7, #20]
 80018fe:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001902:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001906:	429a      	cmp	r2, r3
 8001908:	dbdf      	blt.n	80018ca <ST7565_DrawChar+0x252>
					for (yy = 0; yy < multiplier; yy++){
 800190a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800190e:	b29b      	uxth	r3, r3
 8001910:	3301      	adds	r3, #1
 8001912:	b29b      	uxth	r3, r3
 8001914:	827b      	strh	r3, [r7, #18]
 8001916:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800191a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800191e:	429a      	cmp	r2, r3
 8001920:	dbd0      	blt.n	80018c4 <ST7565_DrawChar+0x24c>
						}
					}
				}
				//----------------------------------------------------------------------------------------------------
				X += multiplier;
 8001922:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001926:	b29a      	uxth	r2, r3
 8001928:	8b3b      	ldrh	r3, [r7, #24]
 800192a:	4413      	add	r3, r2
 800192c:	b29b      	uxth	r3, r3
 800192e:	833b      	strh	r3, [r7, #24]
			for (j = 0; j < Font->FontWidth; j++) {
 8001930:	8bbb      	ldrh	r3, [r7, #28]
 8001932:	3301      	adds	r3, #1
 8001934:	83bb      	strh	r3, [r7, #28]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	b29b      	uxth	r3, r3
 800193c:	8bba      	ldrh	r2, [r7, #28]
 800193e:	429a      	cmp	r2, r3
 8001940:	d387      	bcc.n	8001852 <ST7565_DrawChar+0x1da>
			}
			X = x;
 8001942:	89fb      	ldrh	r3, [r7, #14]
 8001944:	833b      	strh	r3, [r7, #24]
			Y += multiplier;
 8001946:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800194a:	b29a      	uxth	r2, r3
 800194c:	8afb      	ldrh	r3, [r7, #22]
 800194e:	4413      	add	r3, r2
 8001950:	b29b      	uxth	r3, r3
 8001952:	82fb      	strh	r3, [r7, #22]
		for (i = 0; i < Font->FontHeight; i++) {
 8001954:	8bfb      	ldrh	r3, [r7, #30]
 8001956:	3301      	adds	r3, #1
 8001958:	83fb      	strh	r3, [r7, #30]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	785b      	ldrb	r3, [r3, #1]
 800195e:	b29b      	uxth	r3, r3
 8001960:	8bfa      	ldrh	r2, [r7, #30]
 8001962:	429a      	cmp	r2, r3
 8001964:	f4ff aeaf 	bcc.w	80016c6 <ST7565_DrawChar+0x4e>
		}
		
	}
}
 8001968:	bf00      	nop
 800196a:	3720      	adds	r7, #32
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}

08001970 <ST7565_Print>:
 * @brief	 ( описание ):  функция записывает строку в буфер кадра ( поддерживает кириллицу ( в том числе и Укр. язык) и латиницу
 * @param	( параметры ):	координаты X(0 - 127)  Y(0 - 63), символ, шрифт, множитель, цвет 1 или 0
 * @return  ( возвращает ):
*******************************************************************************/
void ST7565_Print(int16_t x, int16_t y, char *str, FontDef_t *Font, uint8_t multiplier, uint8_t color)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b088      	sub	sp, #32
 8001974:	af02      	add	r7, sp, #8
 8001976:	60ba      	str	r2, [r7, #8]
 8001978:	607b      	str	r3, [r7, #4]
 800197a:	4603      	mov	r3, r0
 800197c:	81fb      	strh	r3, [r7, #14]
 800197e:	460b      	mov	r3, r1
 8001980:	81bb      	strh	r3, [r7, #12]
unsigned char buff_char;
uint16_t len = strlen(str);
 8001982:	68b8      	ldr	r0, [r7, #8]
 8001984:	f7fe fc24 	bl	80001d0 <strlen>
 8001988:	4603      	mov	r3, r0
 800198a:	82bb      	strh	r3, [r7, #20]

	if (multiplier < 1) multiplier = 1;
 800198c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001990:	2b00      	cmp	r3, #0
 8001992:	f040 809c 	bne.w	8001ace <ST7565_Print+0x15e>
 8001996:	2301      	movs	r3, #1
 8001998:	f887 3020 	strb.w	r3, [r7, #32]
	
	while (len--) {
 800199c:	e097      	b.n	8001ace <ST7565_Print+0x15e>
		//---------------------------------------------------------------------
		// проверка на кириллицу UTF-8, если латиница то пропускаем if
		// Расширенные символы ASCII Win-1251 кириллица (код символа 128-255)
		// проверяем первый байт из двух ( так как UTF-8 ето два байта )
		// если он больше либо равен 0xC0 ( первый байт в кириллеце будет равен 0xD0 либо 0xD1 именно в алфавите )
		if ( (uint8_t)*str >= 0xC0 ) {	// код 0xC0 соответствует символу кириллица 'A' по ASCII Win-1251
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	2bbf      	cmp	r3, #191	; 0xbf
 80019a4:	d974      	bls.n	8001a90 <ST7565_Print+0x120>
			// проверяем какой именно байт первый 0xD0 либо 0xD1
			switch ((uint8_t)*str) {
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	2bd0      	cmp	r3, #208	; 0xd0
 80019ac:	d002      	beq.n	80019b4 <ST7565_Print+0x44>
 80019ae:	2bd1      	cmp	r3, #209	; 0xd1
 80019b0:	d02c      	beq.n	8001a0c <ST7565_Print+0x9c>
 80019b2:	e05b      	b.n	8001a6c <ST7565_Print+0xfc>
				case 0xD0:
				//{
					// увеличиваем массив так как нам нужен второй байт
					str++;
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	3301      	adds	r3, #1
 80019b8:	60bb      	str	r3, [r7, #8]
					// проверяем второй байт там сам символ
					if ((uint8_t)*str == 0x81) { buff_char = 0xA8; break; }		// байт символа Ё ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	2b81      	cmp	r3, #129	; 0x81
 80019c0:	d102      	bne.n	80019c8 <ST7565_Print+0x58>
 80019c2:	23a8      	movs	r3, #168	; 0xa8
 80019c4:	75fb      	strb	r3, [r7, #23]
 80019c6:	e051      	b.n	8001a6c <ST7565_Print+0xfc>
					else if ((uint8_t)*str >= 0x90 && (uint8_t)*str <= 0xBF) { buff_char = (*str) + 0x30; }	// байт символов А...Я а...п  делаем здвиг на +48
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	2b8f      	cmp	r3, #143	; 0x8f
 80019ce:	d908      	bls.n	80019e2 <ST7565_Print+0x72>
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	2bbf      	cmp	r3, #191	; 0xbf
 80019d6:	d804      	bhi.n	80019e2 <ST7565_Print+0x72>
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	3330      	adds	r3, #48	; 0x30
 80019de:	75fb      	strb	r3, [r7, #23]
					else if ((uint8_t)*str == 0x84) { buff_char = 0xAA; break; }		// байт символа Є ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					else if ((uint8_t)*str == 0x86) { buff_char = 0xB2; break; }		// байт символа І ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					else if ((uint8_t)*str == 0x87) { buff_char = 0xAF; break; }		// байт символа Ї ( если нужнф еще символы добавляем тут и в функции DrawChar() )
				break;
 80019e0:	e041      	b.n	8001a66 <ST7565_Print+0xf6>
					else if ((uint8_t)*str == 0x84) { buff_char = 0xAA; break; }		// байт символа Є ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	2b84      	cmp	r3, #132	; 0x84
 80019e8:	d102      	bne.n	80019f0 <ST7565_Print+0x80>
 80019ea:	23aa      	movs	r3, #170	; 0xaa
 80019ec:	75fb      	strb	r3, [r7, #23]
 80019ee:	e03d      	b.n	8001a6c <ST7565_Print+0xfc>
					else if ((uint8_t)*str == 0x86) { buff_char = 0xB2; break; }		// байт символа І ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	2b86      	cmp	r3, #134	; 0x86
 80019f6:	d102      	bne.n	80019fe <ST7565_Print+0x8e>
 80019f8:	23b2      	movs	r3, #178	; 0xb2
 80019fa:	75fb      	strb	r3, [r7, #23]
 80019fc:	e036      	b.n	8001a6c <ST7565_Print+0xfc>
					else if ((uint8_t)*str == 0x87) { buff_char = 0xAF; break; }		// байт символа Ї ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	2b87      	cmp	r3, #135	; 0x87
 8001a04:	d12f      	bne.n	8001a66 <ST7565_Print+0xf6>
 8001a06:	23af      	movs	r3, #175	; 0xaf
 8001a08:	75fb      	strb	r3, [r7, #23]
 8001a0a:	e02f      	b.n	8001a6c <ST7565_Print+0xfc>
				//}
				case 0xD1:
				//{
					// увеличиваем массив так как нам нужен второй байт
					str++;
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	3301      	adds	r3, #1
 8001a10:	60bb      	str	r3, [r7, #8]
					// проверяем второй байт там сам символ
					if ((uint8_t)*str == 0x91) { buff_char = 0xB8; break; }		// байт символа ё ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	2b91      	cmp	r3, #145	; 0x91
 8001a18:	d102      	bne.n	8001a20 <ST7565_Print+0xb0>
 8001a1a:	23b8      	movs	r3, #184	; 0xb8
 8001a1c:	75fb      	strb	r3, [r7, #23]
 8001a1e:	e025      	b.n	8001a6c <ST7565_Print+0xfc>
					else if ((uint8_t)*str >= 0x80 && (uint8_t)*str <= 0x8F) { buff_char = (*str) + 0x70; }	// байт символов п...я	елаем здвиг на +112
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	b25b      	sxtb	r3, r3
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	da08      	bge.n	8001a3c <ST7565_Print+0xcc>
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	2b8f      	cmp	r3, #143	; 0x8f
 8001a30:	d804      	bhi.n	8001a3c <ST7565_Print+0xcc>
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	3370      	adds	r3, #112	; 0x70
 8001a38:	75fb      	strb	r3, [r7, #23]
					else if ((uint8_t)*str == 0x94) { buff_char = 0xBA; break; }		// байт символа є ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					else if ((uint8_t)*str == 0x96) { buff_char = 0xB3; break; }		// байт символа і ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					else if ((uint8_t)*str == 0x97) { buff_char = 0xBF; break; }		// байт символа ї ( если нужнф еще символы добавляем тут и в функции DrawChar() )
				break;
 8001a3a:	e016      	b.n	8001a6a <ST7565_Print+0xfa>
					else if ((uint8_t)*str == 0x94) { buff_char = 0xBA; break; }		// байт символа є ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	2b94      	cmp	r3, #148	; 0x94
 8001a42:	d102      	bne.n	8001a4a <ST7565_Print+0xda>
 8001a44:	23ba      	movs	r3, #186	; 0xba
 8001a46:	75fb      	strb	r3, [r7, #23]
 8001a48:	e010      	b.n	8001a6c <ST7565_Print+0xfc>
					else if ((uint8_t)*str == 0x96) { buff_char = 0xB3; break; }		// байт символа і ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	2b96      	cmp	r3, #150	; 0x96
 8001a50:	d102      	bne.n	8001a58 <ST7565_Print+0xe8>
 8001a52:	23b3      	movs	r3, #179	; 0xb3
 8001a54:	75fb      	strb	r3, [r7, #23]
 8001a56:	e009      	b.n	8001a6c <ST7565_Print+0xfc>
					else if ((uint8_t)*str == 0x97) { buff_char = 0xBF; break; }		// байт символа ї ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	2b97      	cmp	r3, #151	; 0x97
 8001a5e:	d104      	bne.n	8001a6a <ST7565_Print+0xfa>
 8001a60:	23bf      	movs	r3, #191	; 0xbf
 8001a62:	75fb      	strb	r3, [r7, #23]
 8001a64:	e002      	b.n	8001a6c <ST7565_Print+0xfc>
				break;
 8001a66:	bf00      	nop
 8001a68:	e000      	b.n	8001a6c <ST7565_Print+0xfc>
				break;
 8001a6a:	bf00      	nop
				//}
			}
			// уменьшаем еще переменную так как израсходывали 2 байта для кириллицы
			len--;
 8001a6c:	8abb      	ldrh	r3, [r7, #20]
 8001a6e:	3b01      	subs	r3, #1
 8001a70:	82bb      	strh	r3, [r7, #20]
			ST7565_DrawChar(x, y, buff_char, Font, multiplier, color);
 8001a72:	7dfa      	ldrb	r2, [r7, #23]
 8001a74:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8001a78:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8001a7c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001a80:	9301      	str	r3, [sp, #4]
 8001a82:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a86:	9300      	str	r3, [sp, #0]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	f7ff fdf5 	bl	8001678 <ST7565_DrawChar>
 8001a8e:	e00e      	b.n	8001aae <ST7565_Print+0x13e>
		} else {
			ST7565_DrawChar(x, y, *str, Font, multiplier, color);
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	781a      	ldrb	r2, [r3, #0]
 8001a94:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8001a98:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8001a9c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001aa0:	9301      	str	r3, [sp, #4]
 8001aa2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001aa6:	9300      	str	r3, [sp, #0]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f7ff fde5 	bl	8001678 <ST7565_DrawChar>
		}
		
		x += (Font->FontWidth * multiplier);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	b29a      	uxth	r2, r3
 8001ab4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001ab8:	b29b      	uxth	r3, r3
 8001aba:	fb12 f303 	smulbb	r3, r2, r3
 8001abe:	b29a      	uxth	r2, r3
 8001ac0:	89fb      	ldrh	r3, [r7, #14]
 8001ac2:	4413      	add	r3, r2
 8001ac4:	b29b      	uxth	r3, r3
 8001ac6:	81fb      	strh	r3, [r7, #14]
		str++;
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	3301      	adds	r3, #1
 8001acc:	60bb      	str	r3, [r7, #8]
	while (len--) {
 8001ace:	8abb      	ldrh	r3, [r7, #20]
 8001ad0:	1e5a      	subs	r2, r3, #1
 8001ad2:	82ba      	strh	r2, [r7, #20]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	f47f af62 	bne.w	800199e <ST7565_Print+0x2e>
	}
}
 8001ada:	bf00      	nop
 8001adc:	bf00      	nop
 8001ade:	3718      	adds	r7, #24
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}

08001ae4 <ST7565_DrawLine>:
	* @param	( параметры ):	координаты начальной точки и конечной и цвет 0 или 1
								X(0 - 127)  Y(0 - 63)
	* @return  ( возвращает ):	
*******************************************************************************/
void ST7565_DrawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint8_t c)
{
 8001ae4:	b590      	push	{r4, r7, lr}
 8001ae6:	b087      	sub	sp, #28
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	4604      	mov	r4, r0
 8001aec:	4608      	mov	r0, r1
 8001aee:	4611      	mov	r1, r2
 8001af0:	461a      	mov	r2, r3
 8001af2:	4623      	mov	r3, r4
 8001af4:	80fb      	strh	r3, [r7, #6]
 8001af6:	4603      	mov	r3, r0
 8001af8:	80bb      	strh	r3, [r7, #4]
 8001afa:	460b      	mov	r3, r1
 8001afc:	807b      	strh	r3, [r7, #2]
 8001afe:	4613      	mov	r3, r2
 8001b00:	803b      	strh	r3, [r7, #0]
int16_t dx, dy, sx, sy, err, e2, i, tmp;
	
	/* Check for overflow */
	if (x0 >= SCREEN_WIDTH)  x0 = SCREEN_WIDTH  - 1;
 8001b02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b06:	2b7f      	cmp	r3, #127	; 0x7f
 8001b08:	dd01      	ble.n	8001b0e <ST7565_DrawLine+0x2a>
 8001b0a:	237f      	movs	r3, #127	; 0x7f
 8001b0c:	80fb      	strh	r3, [r7, #6]
	if (x1 >= SCREEN_WIDTH)  x1 = SCREEN_WIDTH  - 1;
 8001b0e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001b12:	2b7f      	cmp	r3, #127	; 0x7f
 8001b14:	dd01      	ble.n	8001b1a <ST7565_DrawLine+0x36>
 8001b16:	237f      	movs	r3, #127	; 0x7f
 8001b18:	807b      	strh	r3, [r7, #2]
	if (y0 >= SCREEN_HEIGHT) y0 = SCREEN_HEIGHT - 1;
 8001b1a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001b1e:	2b3f      	cmp	r3, #63	; 0x3f
 8001b20:	dd01      	ble.n	8001b26 <ST7565_DrawLine+0x42>
 8001b22:	233f      	movs	r3, #63	; 0x3f
 8001b24:	80bb      	strh	r3, [r7, #4]
	if (y1 >= SCREEN_HEIGHT) y1 = SCREEN_HEIGHT - 1;
 8001b26:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001b2a:	2b3f      	cmp	r3, #63	; 0x3f
 8001b2c:	dd01      	ble.n	8001b32 <ST7565_DrawLine+0x4e>
 8001b2e:	233f      	movs	r3, #63	; 0x3f
 8001b30:	803b      	strh	r3, [r7, #0]
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 8001b32:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001b36:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	da05      	bge.n	8001b4a <ST7565_DrawLine+0x66>
 8001b3e:	887a      	ldrh	r2, [r7, #2]
 8001b40:	88fb      	ldrh	r3, [r7, #6]
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	b29b      	uxth	r3, r3
 8001b46:	b21b      	sxth	r3, r3
 8001b48:	e004      	b.n	8001b54 <ST7565_DrawLine+0x70>
 8001b4a:	88fa      	ldrh	r2, [r7, #6]
 8001b4c:	887b      	ldrh	r3, [r7, #2]
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	b29b      	uxth	r3, r3
 8001b52:	b21b      	sxth	r3, r3
 8001b54:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 8001b56:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001b5a:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	da05      	bge.n	8001b6e <ST7565_DrawLine+0x8a>
 8001b62:	883a      	ldrh	r2, [r7, #0]
 8001b64:	88bb      	ldrh	r3, [r7, #4]
 8001b66:	1ad3      	subs	r3, r2, r3
 8001b68:	b29b      	uxth	r3, r3
 8001b6a:	b21b      	sxth	r3, r3
 8001b6c:	e004      	b.n	8001b78 <ST7565_DrawLine+0x94>
 8001b6e:	88ba      	ldrh	r2, [r7, #4]
 8001b70:	883b      	ldrh	r3, [r7, #0]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	b21b      	sxth	r3, r3
 8001b78:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1; 
 8001b7a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001b7e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001b82:	429a      	cmp	r2, r3
 8001b84:	da01      	bge.n	8001b8a <ST7565_DrawLine+0xa6>
 8001b86:	2301      	movs	r3, #1
 8001b88:	e001      	b.n	8001b8e <ST7565_DrawLine+0xaa>
 8001b8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b8e:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1; 
 8001b90:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001b94:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	da01      	bge.n	8001ba0 <ST7565_DrawLine+0xbc>
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e001      	b.n	8001ba4 <ST7565_DrawLine+0xc0>
 8001ba0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ba4:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2; 
 8001ba6:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001baa:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	dd06      	ble.n	8001bc0 <ST7565_DrawLine+0xdc>
 8001bb2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001bb6:	0fda      	lsrs	r2, r3, #31
 8001bb8:	4413      	add	r3, r2
 8001bba:	105b      	asrs	r3, r3, #1
 8001bbc:	b21b      	sxth	r3, r3
 8001bbe:	e006      	b.n	8001bce <ST7565_DrawLine+0xea>
 8001bc0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001bc4:	0fda      	lsrs	r2, r3, #31
 8001bc6:	4413      	add	r3, r2
 8001bc8:	105b      	asrs	r3, r3, #1
 8001bca:	425b      	negs	r3, r3
 8001bcc:	b21b      	sxth	r3, r3
 8001bce:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 8001bd0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d130      	bne.n	8001c3a <ST7565_DrawLine+0x156>
		if (y1 < y0) {
 8001bd8:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001bdc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	da05      	bge.n	8001bf0 <ST7565_DrawLine+0x10c>
			tmp = y1;
 8001be4:	883b      	ldrh	r3, [r7, #0]
 8001be6:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8001be8:	88bb      	ldrh	r3, [r7, #4]
 8001bea:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8001bec:	893b      	ldrh	r3, [r7, #8]
 8001bee:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 8001bf0:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001bf4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	da05      	bge.n	8001c08 <ST7565_DrawLine+0x124>
			tmp = x1;
 8001bfc:	887b      	ldrh	r3, [r7, #2]
 8001bfe:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8001c00:	88fb      	ldrh	r3, [r7, #6]
 8001c02:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8001c04:	893b      	ldrh	r3, [r7, #8]
 8001c06:	80fb      	strh	r3, [r7, #6]
		}
		
		// Vertical line
		for (i = y0; i <= y1; i++) ST7565_Draw_pixel(x0, i, c);
 8001c08:	88bb      	ldrh	r3, [r7, #4]
 8001c0a:	82bb      	strh	r3, [r7, #20]
 8001c0c:	e00e      	b.n	8001c2c <ST7565_DrawLine+0x148>
 8001c0e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001c12:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 8001c16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7ff fc96 	bl	800154c <ST7565_Draw_pixel>
 8001c20:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001c24:	b29b      	uxth	r3, r3
 8001c26:	3301      	adds	r3, #1
 8001c28:	b29b      	uxth	r3, r3
 8001c2a:	82bb      	strh	r3, [r7, #20]
 8001c2c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001c30:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001c34:	429a      	cmp	r2, r3
 8001c36:	ddea      	ble.n	8001c0e <ST7565_DrawLine+0x12a>
		
		return;
 8001c38:	e06e      	b.n	8001d18 <ST7565_DrawLine+0x234>
	}
	
	if (dy == 0) {
 8001c3a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d130      	bne.n	8001ca4 <ST7565_DrawLine+0x1c0>
		if (y1 < y0) {
 8001c42:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001c46:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	da05      	bge.n	8001c5a <ST7565_DrawLine+0x176>
			tmp = y1;
 8001c4e:	883b      	ldrh	r3, [r7, #0]
 8001c50:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8001c52:	88bb      	ldrh	r3, [r7, #4]
 8001c54:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8001c56:	893b      	ldrh	r3, [r7, #8]
 8001c58:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 8001c5a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001c5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c62:	429a      	cmp	r2, r3
 8001c64:	da05      	bge.n	8001c72 <ST7565_DrawLine+0x18e>
			tmp = x1;
 8001c66:	887b      	ldrh	r3, [r7, #2]
 8001c68:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8001c6a:	88fb      	ldrh	r3, [r7, #6]
 8001c6c:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8001c6e:	893b      	ldrh	r3, [r7, #8]
 8001c70:	80fb      	strh	r3, [r7, #6]
		}
		
		// Horizontal line
		for (i = x0; i <= x1; i++) ST7565_Draw_pixel(i, y0, c);
 8001c72:	88fb      	ldrh	r3, [r7, #6]
 8001c74:	82bb      	strh	r3, [r7, #20]
 8001c76:	e00e      	b.n	8001c96 <ST7565_DrawLine+0x1b2>
 8001c78:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001c7c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001c80:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7ff fc61 	bl	800154c <ST7565_Draw_pixel>
 8001c8a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001c8e:	b29b      	uxth	r3, r3
 8001c90:	3301      	adds	r3, #1
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	82bb      	strh	r3, [r7, #20]
 8001c96:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001c9a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	ddea      	ble.n	8001c78 <ST7565_DrawLine+0x194>
		
		return;
 8001ca2:	e039      	b.n	8001d18 <ST7565_DrawLine+0x234>
	}
	
	while (1) {
		ST7565_Draw_pixel(x0, y0, c);
 8001ca4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001ca8:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001cac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7ff fc4b 	bl	800154c <ST7565_Draw_pixel>
		if (x0 == x1 && y0 == y1) break;
 8001cb6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001cba:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d105      	bne.n	8001cce <ST7565_DrawLine+0x1ea>
 8001cc2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001cc6:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d023      	beq.n	8001d16 <ST7565_DrawLine+0x232>

		e2 = err; 
 8001cce:	8afb      	ldrh	r3, [r7, #22]
 8001cd0:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 8001cd2:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001cd6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001cda:	425b      	negs	r3, r3
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	dd09      	ble.n	8001cf4 <ST7565_DrawLine+0x210>
			err -= dy;
 8001ce0:	8afa      	ldrh	r2, [r7, #22]
 8001ce2:	8a3b      	ldrh	r3, [r7, #16]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 8001cea:	88fa      	ldrh	r2, [r7, #6]
 8001cec:	89fb      	ldrh	r3, [r7, #14]
 8001cee:	4413      	add	r3, r2
 8001cf0:	b29b      	uxth	r3, r3
 8001cf2:	80fb      	strh	r3, [r7, #6]
		} 
		if (e2 < dy) {
 8001cf4:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001cf8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	dad1      	bge.n	8001ca4 <ST7565_DrawLine+0x1c0>
			err += dx;
 8001d00:	8afa      	ldrh	r2, [r7, #22]
 8001d02:	8a7b      	ldrh	r3, [r7, #18]
 8001d04:	4413      	add	r3, r2
 8001d06:	b29b      	uxth	r3, r3
 8001d08:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 8001d0a:	88ba      	ldrh	r2, [r7, #4]
 8001d0c:	89bb      	ldrh	r3, [r7, #12]
 8001d0e:	4413      	add	r3, r2
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	80bb      	strh	r3, [r7, #4]
		ST7565_Draw_pixel(x0, y0, c);
 8001d14:	e7c6      	b.n	8001ca4 <ST7565_DrawLine+0x1c0>
		if (x0 == x1 && y0 == y1) break;
 8001d16:	bf00      	nop
		} 
	}
}
 8001d18:	371c      	adds	r7, #28
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd90      	pop	{r4, r7, pc}

08001d1e <ST7565_DrawRectangle>:
	* @param	( параметры ):	координаты верхнего левого и ширина и высота и цвет
								X(0 - 127)  Y(0 - 63)
	* @return  ( возвращает ):	
*******************************************************************************/
void ST7565_DrawRectangle(int16_t x, int16_t y, int16_t w, int16_t h, uint8_t c)
{
 8001d1e:	b590      	push	{r4, r7, lr}
 8001d20:	b085      	sub	sp, #20
 8001d22:	af02      	add	r7, sp, #8
 8001d24:	4604      	mov	r4, r0
 8001d26:	4608      	mov	r0, r1
 8001d28:	4611      	mov	r1, r2
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	4623      	mov	r3, r4
 8001d2e:	80fb      	strh	r3, [r7, #6]
 8001d30:	4603      	mov	r3, r0
 8001d32:	80bb      	strh	r3, [r7, #4]
 8001d34:	460b      	mov	r3, r1
 8001d36:	807b      	strh	r3, [r7, #2]
 8001d38:	4613      	mov	r3, r2
 8001d3a:	803b      	strh	r3, [r7, #0]
	// Check input parameters
	if (x >= SCREEN_WIDTH || y >= SCREEN_HEIGHT) return;
 8001d3c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d40:	2b7f      	cmp	r3, #127	; 0x7f
 8001d42:	dc6a      	bgt.n	8001e1a <ST7565_DrawRectangle+0xfc>
 8001d44:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001d48:	2b3f      	cmp	r3, #63	; 0x3f
 8001d4a:	dc66      	bgt.n	8001e1a <ST7565_DrawRectangle+0xfc>
	
	// Check width and height
	if ((x + w) >= SCREEN_WIDTH)  w = SCREEN_WIDTH  - x;
 8001d4c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001d50:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001d54:	4413      	add	r3, r2
 8001d56:	2b7f      	cmp	r3, #127	; 0x7f
 8001d58:	dd04      	ble.n	8001d64 <ST7565_DrawRectangle+0x46>
 8001d5a:	88fb      	ldrh	r3, [r7, #6]
 8001d5c:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	807b      	strh	r3, [r7, #2]
	if ((y + h) >= SCREEN_HEIGHT) h = SCREEN_HEIGHT - y;
 8001d64:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001d68:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001d6c:	4413      	add	r3, r2
 8001d6e:	2b3f      	cmp	r3, #63	; 0x3f
 8001d70:	dd04      	ble.n	8001d7c <ST7565_DrawRectangle+0x5e>
 8001d72:	88bb      	ldrh	r3, [r7, #4]
 8001d74:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	803b      	strh	r3, [r7, #0]
	
	// Draw 4 lines
	ST7565_DrawLine(x, y, x + w, y, c);         // Top line
 8001d7c:	88fa      	ldrh	r2, [r7, #6]
 8001d7e:	887b      	ldrh	r3, [r7, #2]
 8001d80:	4413      	add	r3, r2
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	b21a      	sxth	r2, r3
 8001d86:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8001d8a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001d8e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001d92:	7e3b      	ldrb	r3, [r7, #24]
 8001d94:	9300      	str	r3, [sp, #0]
 8001d96:	4623      	mov	r3, r4
 8001d98:	f7ff fea4 	bl	8001ae4 <ST7565_DrawLine>
	ST7565_DrawLine(x, y + h, x + w, y + h, c); // Bottom line
 8001d9c:	88ba      	ldrh	r2, [r7, #4]
 8001d9e:	883b      	ldrh	r3, [r7, #0]
 8001da0:	4413      	add	r3, r2
 8001da2:	b29b      	uxth	r3, r3
 8001da4:	b219      	sxth	r1, r3
 8001da6:	88fa      	ldrh	r2, [r7, #6]
 8001da8:	887b      	ldrh	r3, [r7, #2]
 8001daa:	4413      	add	r3, r2
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	b21c      	sxth	r4, r3
 8001db0:	88ba      	ldrh	r2, [r7, #4]
 8001db2:	883b      	ldrh	r3, [r7, #0]
 8001db4:	4413      	add	r3, r2
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	b21a      	sxth	r2, r3
 8001dba:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001dbe:	7e3b      	ldrb	r3, [r7, #24]
 8001dc0:	9300      	str	r3, [sp, #0]
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	4622      	mov	r2, r4
 8001dc6:	f7ff fe8d 	bl	8001ae4 <ST7565_DrawLine>
	ST7565_DrawLine(x, y, x, y + h, c);         // Left line
 8001dca:	88ba      	ldrh	r2, [r7, #4]
 8001dcc:	883b      	ldrh	r3, [r7, #0]
 8001dce:	4413      	add	r3, r2
 8001dd0:	b29b      	uxth	r3, r3
 8001dd2:	b21c      	sxth	r4, r3
 8001dd4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001dd8:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001ddc:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001de0:	7e3b      	ldrb	r3, [r7, #24]
 8001de2:	9300      	str	r3, [sp, #0]
 8001de4:	4623      	mov	r3, r4
 8001de6:	f7ff fe7d 	bl	8001ae4 <ST7565_DrawLine>
	ST7565_DrawLine(x + w, y, x + w, y + h, c); // Right line
 8001dea:	88fa      	ldrh	r2, [r7, #6]
 8001dec:	887b      	ldrh	r3, [r7, #2]
 8001dee:	4413      	add	r3, r2
 8001df0:	b29b      	uxth	r3, r3
 8001df2:	b218      	sxth	r0, r3
 8001df4:	88fa      	ldrh	r2, [r7, #6]
 8001df6:	887b      	ldrh	r3, [r7, #2]
 8001df8:	4413      	add	r3, r2
 8001dfa:	b29b      	uxth	r3, r3
 8001dfc:	b21c      	sxth	r4, r3
 8001dfe:	88ba      	ldrh	r2, [r7, #4]
 8001e00:	883b      	ldrh	r3, [r7, #0]
 8001e02:	4413      	add	r3, r2
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	b21a      	sxth	r2, r3
 8001e08:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001e0c:	7e3b      	ldrb	r3, [r7, #24]
 8001e0e:	9300      	str	r3, [sp, #0]
 8001e10:	4613      	mov	r3, r2
 8001e12:	4622      	mov	r2, r4
 8001e14:	f7ff fe66 	bl	8001ae4 <ST7565_DrawLine>
 8001e18:	e000      	b.n	8001e1c <ST7565_DrawRectangle+0xfe>
	if (x >= SCREEN_WIDTH || y >= SCREEN_HEIGHT) return;
 8001e1a:	bf00      	nop
}
 8001e1c:	370c      	adds	r7, #12
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd90      	pop	{r4, r7, pc}

08001e22 <ST7565_DrawFilledRectangle>:
	* @param	( параметры ):	координаты верхнего левого и ширина и высота и цвет
								X(0 - 127)  Y(0 - 63)
	* @return  ( возвращает ):	
*******************************************************************************/
void ST7565_DrawFilledRectangle(int16_t x, int16_t y, int16_t w, int16_t h, uint8_t c)
{
 8001e22:	b590      	push	{r4, r7, lr}
 8001e24:	b087      	sub	sp, #28
 8001e26:	af02      	add	r7, sp, #8
 8001e28:	4604      	mov	r4, r0
 8001e2a:	4608      	mov	r0, r1
 8001e2c:	4611      	mov	r1, r2
 8001e2e:	461a      	mov	r2, r3
 8001e30:	4623      	mov	r3, r4
 8001e32:	80fb      	strh	r3, [r7, #6]
 8001e34:	4603      	mov	r3, r0
 8001e36:	80bb      	strh	r3, [r7, #4]
 8001e38:	460b      	mov	r3, r1
 8001e3a:	807b      	strh	r3, [r7, #2]
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	803b      	strh	r3, [r7, #0]
uint8_t i;
	
	// Check input parameters
	if (x >= SCREEN_WIDTH || y >= SCREEN_HEIGHT) return;
 8001e40:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e44:	2b7f      	cmp	r3, #127	; 0x7f
 8001e46:	dc41      	bgt.n	8001ecc <ST7565_DrawFilledRectangle+0xaa>
 8001e48:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001e4c:	2b3f      	cmp	r3, #63	; 0x3f
 8001e4e:	dc3d      	bgt.n	8001ecc <ST7565_DrawFilledRectangle+0xaa>
	
	// Check width and height
	if ((x + w) >= SCREEN_WIDTH)  w = SCREEN_WIDTH  - x;
 8001e50:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001e54:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001e58:	4413      	add	r3, r2
 8001e5a:	2b7f      	cmp	r3, #127	; 0x7f
 8001e5c:	dd04      	ble.n	8001e68 <ST7565_DrawFilledRectangle+0x46>
 8001e5e:	88fb      	ldrh	r3, [r7, #6]
 8001e60:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001e64:	b29b      	uxth	r3, r3
 8001e66:	807b      	strh	r3, [r7, #2]
	if ((y + h) >= SCREEN_HEIGHT) h = SCREEN_HEIGHT - y;
 8001e68:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001e6c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001e70:	4413      	add	r3, r2
 8001e72:	2b3f      	cmp	r3, #63	; 0x3f
 8001e74:	dd04      	ble.n	8001e80 <ST7565_DrawFilledRectangle+0x5e>
 8001e76:	88bb      	ldrh	r3, [r7, #4]
 8001e78:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8001e7c:	b29b      	uxth	r3, r3
 8001e7e:	803b      	strh	r3, [r7, #0]
	
	for (i = 0; i <= h; i++) ST7565_DrawLine(x, y + i, x + w, y + i, c);
 8001e80:	2300      	movs	r3, #0
 8001e82:	73fb      	strb	r3, [r7, #15]
 8001e84:	e01c      	b.n	8001ec0 <ST7565_DrawFilledRectangle+0x9e>
 8001e86:	7bfb      	ldrb	r3, [r7, #15]
 8001e88:	b29a      	uxth	r2, r3
 8001e8a:	88bb      	ldrh	r3, [r7, #4]
 8001e8c:	4413      	add	r3, r2
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	b219      	sxth	r1, r3
 8001e92:	88fa      	ldrh	r2, [r7, #6]
 8001e94:	887b      	ldrh	r3, [r7, #2]
 8001e96:	4413      	add	r3, r2
 8001e98:	b29b      	uxth	r3, r3
 8001e9a:	b21c      	sxth	r4, r3
 8001e9c:	7bfb      	ldrb	r3, [r7, #15]
 8001e9e:	b29a      	uxth	r2, r3
 8001ea0:	88bb      	ldrh	r3, [r7, #4]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	b21a      	sxth	r2, r3
 8001ea8:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001eac:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001eb0:	9300      	str	r3, [sp, #0]
 8001eb2:	4613      	mov	r3, r2
 8001eb4:	4622      	mov	r2, r4
 8001eb6:	f7ff fe15 	bl	8001ae4 <ST7565_DrawLine>
 8001eba:	7bfb      	ldrb	r3, [r7, #15]
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	73fb      	strb	r3, [r7, #15]
 8001ec0:	7bfa      	ldrb	r2, [r7, #15]
 8001ec2:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	dddd      	ble.n	8001e86 <ST7565_DrawFilledRectangle+0x64>
 8001eca:	e000      	b.n	8001ece <ST7565_DrawFilledRectangle+0xac>
	if (x >= SCREEN_WIDTH || y >= SCREEN_HEIGHT) return;
 8001ecc:	bf00      	nop
}
 8001ece:	3714      	adds	r7, #20
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd90      	pop	{r4, r7, pc}

08001ed4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001ed8:	f3bf 8f4f 	dsb	sy
}
 8001edc:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001ede:	4b06      	ldr	r3, [pc, #24]	; (8001ef8 <__NVIC_SystemReset+0x24>)
 8001ee0:	68db      	ldr	r3, [r3, #12]
 8001ee2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001ee6:	4904      	ldr	r1, [pc, #16]	; (8001ef8 <__NVIC_SystemReset+0x24>)
 8001ee8:	4b04      	ldr	r3, [pc, #16]	; (8001efc <__NVIC_SystemReset+0x28>)
 8001eea:	4313      	orrs	r3, r2
 8001eec:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001eee:	f3bf 8f4f 	dsb	sy
}
 8001ef2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001ef4:	bf00      	nop
 8001ef6:	e7fd      	b.n	8001ef4 <__NVIC_SystemReset+0x20>
 8001ef8:	e000ed00 	.word	0xe000ed00
 8001efc:	05fa0004 	.word	0x05fa0004

08001f00 <showCfg>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//------------------------------------------------------------------------------------------
void showCfg()
{
 8001f00:	b5b0      	push	{r4, r5, r7, lr}
 8001f02:	b086      	sub	sp, #24
 8001f04:	af04      	add	r7, sp, #16
	*strf = '\0';
 8001f06:	4b20      	ldr	r3, [pc, #128]	; (8001f88 <showCfg+0x88>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < MAX_LIST; i++) {
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	607b      	str	r3, [r7, #4]
 8001f10:	e02d      	b.n	8001f6e <showCfg+0x6e>
		sprintf(strf+strlen(strf), "%u:%.1f:%s\r\n", list[i].band, list[i].freq, list[i].name);
 8001f12:	481d      	ldr	r0, [pc, #116]	; (8001f88 <showCfg+0x88>)
 8001f14:	f7fe f95c 	bl	80001d0 <strlen>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	4a1b      	ldr	r2, [pc, #108]	; (8001f88 <showCfg+0x88>)
 8001f1c:	189c      	adds	r4, r3, r2
 8001f1e:	491b      	ldr	r1, [pc, #108]	; (8001f8c <showCfg+0x8c>)
 8001f20:	687a      	ldr	r2, [r7, #4]
 8001f22:	4613      	mov	r3, r2
 8001f24:	00db      	lsls	r3, r3, #3
 8001f26:	4413      	add	r3, r2
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	440b      	add	r3, r1
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	461d      	mov	r5, r3
 8001f30:	4916      	ldr	r1, [pc, #88]	; (8001f8c <showCfg+0x8c>)
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	4613      	mov	r3, r2
 8001f36:	00db      	lsls	r3, r3, #3
 8001f38:	4413      	add	r3, r2
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	440b      	add	r3, r1
 8001f3e:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7fe fb00 	bl	8000548 <__aeabi_f2d>
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	00db      	lsls	r3, r3, #3
 8001f4e:	4413      	add	r3, r2
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	4a0e      	ldr	r2, [pc, #56]	; (8001f8c <showCfg+0x8c>)
 8001f54:	4413      	add	r3, r2
 8001f56:	3305      	adds	r3, #5
 8001f58:	9302      	str	r3, [sp, #8]
 8001f5a:	e9cd 0100 	strd	r0, r1, [sp]
 8001f5e:	462a      	mov	r2, r5
 8001f60:	490b      	ldr	r1, [pc, #44]	; (8001f90 <showCfg+0x90>)
 8001f62:	4620      	mov	r0, r4
 8001f64:	f00e fa8c 	bl	8010480 <siprintf>
	for (int i = 0; i < MAX_LIST; i++) {
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	607b      	str	r3, [r7, #4]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2b18      	cmp	r3, #24
 8001f72:	ddce      	ble.n	8001f12 <showCfg+0x12>
	}
	Report(0, "%s", strf);
 8001f74:	4a04      	ldr	r2, [pc, #16]	; (8001f88 <showCfg+0x88>)
 8001f76:	4907      	ldr	r1, [pc, #28]	; (8001f94 <showCfg+0x94>)
 8001f78:	2000      	movs	r0, #0
 8001f7a:	f002 ff7f 	bl	8004e7c <Report>
}
 8001f7e:	bf00      	nop
 8001f80:	3708      	adds	r7, #8
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bdb0      	pop	{r4, r5, r7, pc}
 8001f86:	bf00      	nop
 8001f88:	200017c8 	.word	0x200017c8
 8001f8c:	20003034 	.word	0x20003034
 8001f90:	08014128 	.word	0x08014128
 8001f94:	08014138 	.word	0x08014138

08001f98 <bleWrite>:
//-------------------------------------------------------------------------------------------
#endif

#if defined(SET_BLE) || defined(SET_AUDIO)
void bleWrite(const char *str, bool prn)
{
 8001f98:	b590      	push	{r4, r7, lr}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	460b      	mov	r3, r1
 8001fa2:	70fb      	strb	r3, [r7, #3]
	if (sleep_mode) return;
 8001fa4:	4b27      	ldr	r3, [pc, #156]	; (8002044 <bleWrite+0xac>)
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d147      	bne.n	800203c <bleWrite+0xa4>

	if (ble_withDMA) {
 8001fac:	4b26      	ldr	r3, [pc, #152]	; (8002048 <bleWrite+0xb0>)
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d023      	beq.n	8001ffc <bleWrite+0x64>
		while (!bleRdy) {};
 8001fb4:	bf00      	nop
 8001fb6:	4b25      	ldr	r3, [pc, #148]	; (800204c <bleWrite+0xb4>)
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d0fb      	beq.n	8001fb6 <bleWrite+0x1e>
		bleRdy = 0;
 8001fbe:	4b23      	ldr	r3, [pc, #140]	; (800204c <bleWrite+0xb4>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	701a      	strb	r2, [r3, #0]
		if (HAL_UART_Transmit_DMA(blePort, (uint8_t *)str, strlen(str)) != HAL_OK) devError |= devBLE;
 8001fc4:	4b22      	ldr	r3, [pc, #136]	; (8002050 <bleWrite+0xb8>)
 8001fc6:	681c      	ldr	r4, [r3, #0]
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f7fe f901 	bl	80001d0 <strlen>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	6879      	ldr	r1, [r7, #4]
 8001fd6:	4620      	mov	r0, r4
 8001fd8:	f00c f84c 	bl	800e074 <HAL_UART_Transmit_DMA>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d006      	beq.n	8001ff0 <bleWrite+0x58>
 8001fe2:	4b1c      	ldr	r3, [pc, #112]	; (8002054 <bleWrite+0xbc>)
 8001fe4:	881b      	ldrh	r3, [r3, #0]
 8001fe6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fea:	b29a      	uxth	r2, r3
 8001fec:	4b19      	ldr	r3, [pc, #100]	; (8002054 <bleWrite+0xbc>)
 8001fee:	801a      	strh	r2, [r3, #0]
		while (!bleRdy) {};
 8001ff0:	bf00      	nop
 8001ff2:	4b16      	ldr	r3, [pc, #88]	; (800204c <bleWrite+0xb4>)
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d0fb      	beq.n	8001ff2 <bleWrite+0x5a>
 8001ffa:	e016      	b.n	800202a <bleWrite+0x92>
		/*while (HAL_UART_GetState(blePort) != HAL_UART_STATE_READY) {
			if (HAL_UART_GetState(blePort) == HAL_UART_STATE_BUSY_RX) break;
			//HAL_Delay(1);
		}*/
	} else {
		if (HAL_UART_Transmit(blePort, (uint8_t *)str, strlen(str), 1000) != HAL_OK) devError |= devBLE;
 8001ffc:	4b14      	ldr	r3, [pc, #80]	; (8002050 <bleWrite+0xb8>)
 8001ffe:	681c      	ldr	r4, [r3, #0]
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f7fe f8e5 	bl	80001d0 <strlen>
 8002006:	4603      	mov	r3, r0
 8002008:	b29a      	uxth	r2, r3
 800200a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800200e:	6879      	ldr	r1, [r7, #4]
 8002010:	4620      	mov	r0, r4
 8002012:	f00b ff45 	bl	800dea0 <HAL_UART_Transmit>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d006      	beq.n	800202a <bleWrite+0x92>
 800201c:	4b0d      	ldr	r3, [pc, #52]	; (8002054 <bleWrite+0xbc>)
 800201e:	881b      	ldrh	r3, [r3, #0]
 8002020:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002024:	b29a      	uxth	r2, r3
 8002026:	4b0b      	ldr	r3, [pc, #44]	; (8002054 <bleWrite+0xbc>)
 8002028:	801a      	strh	r2, [r3, #0]
	}

	if (prn) Report(1, "[BLE_tx] %s", str);
 800202a:	78fb      	ldrb	r3, [r7, #3]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d006      	beq.n	800203e <bleWrite+0xa6>
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	4909      	ldr	r1, [pc, #36]	; (8002058 <bleWrite+0xc0>)
 8002034:	2001      	movs	r0, #1
 8002036:	f002 ff21 	bl	8004e7c <Report>
 800203a:	e000      	b.n	800203e <bleWrite+0xa6>
	if (sleep_mode) return;
 800203c:	bf00      	nop

}
 800203e:	370c      	adds	r7, #12
 8002040:	46bd      	mov	sp, r7
 8002042:	bd90      	pop	{r4, r7, pc}
 8002044:	20003769 	.word	0x20003769
 8002048:	2000021d 	.word	0x2000021d
 800204c:	2000021c 	.word	0x2000021c
 8002050:	20000218 	.word	0x20000218
 8002054:	20001bc8 	.word	0x20001bc8
 8002058:	0801413c 	.word	0x0801413c

0800205c <initRECQ>:
//------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------
bool initRECQ(s_recq_t *q)
{
 800205c:	b480      	push	{r7}
 800205e:	b085      	sub	sp, #20
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
	q->put = q->get = 0;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2200      	movs	r2, #0
 8002068:	709a      	strb	r2, [r3, #2]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	789a      	ldrb	r2, [r3, #2]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	705a      	strb	r2, [r3, #1]
	q->lock = 0;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2200      	movs	r2, #0
 8002076:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < MAX_QREC; i++) {
 8002078:	2300      	movs	r3, #0
 800207a:	73fb      	strb	r3, [r7, #15]
 800207c:	e01b      	b.n	80020b6 <initRECQ+0x5a>
		q->rec[i].id = i;
 800207e:	7bfa      	ldrb	r2, [r7, #15]
 8002080:	f997 000f 	ldrsb.w	r0, [r7, #15]
 8002084:	6879      	ldr	r1, [r7, #4]
 8002086:	4613      	mov	r3, r2
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	4413      	add	r3, r2
 800208c:	440b      	add	r3, r1
 800208e:	3303      	adds	r3, #3
 8002090:	4602      	mov	r2, r0
 8002092:	701a      	strb	r2, [r3, #0]
		q->rec[i].adr = NULL;
 8002094:	7bfa      	ldrb	r2, [r7, #15]
 8002096:	6879      	ldr	r1, [r7, #4]
 8002098:	4613      	mov	r3, r2
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	4413      	add	r3, r2
 800209e:	440b      	add	r3, r1
 80020a0:	2200      	movs	r2, #0
 80020a2:	711a      	strb	r2, [r3, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	715a      	strb	r2, [r3, #5]
 80020a8:	2200      	movs	r2, #0
 80020aa:	719a      	strb	r2, [r3, #6]
 80020ac:	2200      	movs	r2, #0
 80020ae:	71da      	strb	r2, [r3, #7]
	for (uint8_t i = 0; i < MAX_QREC; i++) {
 80020b0:	7bfb      	ldrb	r3, [r7, #15]
 80020b2:	3301      	adds	r3, #1
 80020b4:	73fb      	strb	r3, [r7, #15]
 80020b6:	7bfb      	ldrb	r3, [r7, #15]
 80020b8:	2b0f      	cmp	r3, #15
 80020ba:	d9e0      	bls.n	800207e <initRECQ+0x22>
	}

	return true;
 80020bc:	2301      	movs	r3, #1
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3714      	adds	r7, #20
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr

080020ca <putRECQ>:
//-------------------------------------------------------------------------------------------
int8_t putRECQ(char *adr, s_recq_t *q)
{
 80020ca:	b480      	push	{r7}
 80020cc:	b085      	sub	sp, #20
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
 80020d2:	6039      	str	r1, [r7, #0]
int8_t ret = -1;
 80020d4:	23ff      	movs	r3, #255	; 0xff
 80020d6:	73fb      	strb	r3, [r7, #15]
	while (q->lock && --wc) {}
	if (!wc) {
		devError |= devQUE;
		return ret;
	}*/
	q->lock = 1;
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	2201      	movs	r2, #1
 80020dc:	701a      	strb	r2, [r3, #0]

	if (q->rec[q->put].adr == NULL) {
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	785b      	ldrb	r3, [r3, #1]
 80020e2:	4619      	mov	r1, r3
 80020e4:	683a      	ldr	r2, [r7, #0]
 80020e6:	460b      	mov	r3, r1
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	440b      	add	r3, r1
 80020ec:	4413      	add	r3, r2
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d121      	bne.n	8002138 <putRECQ+0x6e>
		q->rec[q->put].adr = adr;
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	785b      	ldrb	r3, [r3, #1]
 80020f8:	4619      	mov	r1, r3
 80020fa:	683a      	ldr	r2, [r7, #0]
 80020fc:	460b      	mov	r3, r1
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	440b      	add	r3, r1
 8002102:	4413      	add	r3, r2
 8002104:	687a      	ldr	r2, [r7, #4]
 8002106:	605a      	str	r2, [r3, #4]
		ret = q->rec[q->put].id;
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	785b      	ldrb	r3, [r3, #1]
 800210c:	4619      	mov	r1, r3
 800210e:	683a      	ldr	r2, [r7, #0]
 8002110:	460b      	mov	r3, r1
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	440b      	add	r3, r1
 8002116:	4413      	add	r3, r2
 8002118:	3303      	adds	r3, #3
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	73fb      	strb	r3, [r7, #15]
		q->put++;
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	785b      	ldrb	r3, [r3, #1]
 8002122:	3301      	adds	r3, #1
 8002124:	b2da      	uxtb	r2, r3
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	705a      	strb	r2, [r3, #1]
		//q->put &= MAX_QREC - 1;
		if (q->put >= MAX_QREC) q->put = 0;
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	785b      	ldrb	r3, [r3, #1]
 800212e:	2b0f      	cmp	r3, #15
 8002130:	d902      	bls.n	8002138 <putRECQ+0x6e>
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	2200      	movs	r2, #0
 8002136:	705a      	strb	r2, [r3, #1]
	}

	q->lock = 0;
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	2200      	movs	r2, #0
 800213c:	701a      	strb	r2, [r3, #0]

	return ret;
 800213e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002142:	4618      	mov	r0, r3
 8002144:	3714      	adds	r7, #20
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr

0800214e <getRECQ>:
//-------------------------------------------------------------------------------------------
int8_t getRECQ(char *dat, s_recq_t *q)
{
 800214e:	b580      	push	{r7, lr}
 8002150:	b084      	sub	sp, #16
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]
 8002156:	6039      	str	r1, [r7, #0]
int8_t ret = -1;
 8002158:	23ff      	movs	r3, #255	; 0xff
 800215a:	73fb      	strb	r3, [r7, #15]
int len = 0;
 800215c:	2300      	movs	r3, #0
 800215e:	60bb      	str	r3, [r7, #8]
	}
	if (!wc) {
		devError |= devQUE;
		return ret;
	}*/
	q->lock = 1;
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	2201      	movs	r2, #1
 8002164:	701a      	strb	r2, [r3, #0]

	if (q->rec[q->get].adr != NULL) {
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	789b      	ldrb	r3, [r3, #2]
 800216a:	4619      	mov	r1, r3
 800216c:	683a      	ldr	r2, [r7, #0]
 800216e:	460b      	mov	r3, r1
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	440b      	add	r3, r1
 8002174:	4413      	add	r3, r2
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d045      	beq.n	8002208 <getRECQ+0xba>
		len = strlen(q->rec[q->get].adr);
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	789b      	ldrb	r3, [r3, #2]
 8002180:	4619      	mov	r1, r3
 8002182:	683a      	ldr	r2, [r7, #0]
 8002184:	460b      	mov	r3, r1
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	440b      	add	r3, r1
 800218a:	4413      	add	r3, r2
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	4618      	mov	r0, r3
 8002190:	f7fe f81e 	bl	80001d0 <strlen>
 8002194:	4603      	mov	r3, r0
 8002196:	60bb      	str	r3, [r7, #8]
		ret = q->rec[q->get].id;
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	789b      	ldrb	r3, [r3, #2]
 800219c:	4619      	mov	r1, r3
 800219e:	683a      	ldr	r2, [r7, #0]
 80021a0:	460b      	mov	r3, r1
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	440b      	add	r3, r1
 80021a6:	4413      	add	r3, r2
 80021a8:	3303      	adds	r3, #3
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	73fb      	strb	r3, [r7, #15]
		if (dat) memcpy(dat, q->rec[q->get].adr, len);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d00d      	beq.n	80021d0 <getRECQ+0x82>
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	789b      	ldrb	r3, [r3, #2]
 80021b8:	4619      	mov	r1, r3
 80021ba:	683a      	ldr	r2, [r7, #0]
 80021bc:	460b      	mov	r3, r1
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	440b      	add	r3, r1
 80021c2:	4413      	add	r3, r2
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	68ba      	ldr	r2, [r7, #8]
 80021c8:	4619      	mov	r1, r3
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f00d fbd2 	bl	800f974 <memcpy>
		free(q->rec[q->get].adr);
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	789b      	ldrb	r3, [r3, #2]
 80021d4:	4619      	mov	r1, r3
 80021d6:	683a      	ldr	r2, [r7, #0]
 80021d8:	460b      	mov	r3, r1
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	440b      	add	r3, r1
 80021de:	4413      	add	r3, r2
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f00d fbbe 	bl	800f964 <free>
		q->rec[q->get].adr = NULL;
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	789b      	ldrb	r3, [r3, #2]
 80021ec:	4619      	mov	r1, r3
 80021ee:	683a      	ldr	r2, [r7, #0]
 80021f0:	460b      	mov	r3, r1
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	440b      	add	r3, r1
 80021f6:	4413      	add	r3, r2
 80021f8:	2200      	movs	r2, #0
 80021fa:	711a      	strb	r2, [r3, #4]
 80021fc:	2200      	movs	r2, #0
 80021fe:	715a      	strb	r2, [r3, #5]
 8002200:	2200      	movs	r2, #0
 8002202:	719a      	strb	r2, [r3, #6]
 8002204:	2200      	movs	r2, #0
 8002206:	71da      	strb	r2, [r3, #7]
	}

	if (ret >= 0) {
 8002208:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800220c:	2b00      	cmp	r3, #0
 800220e:	db14      	blt.n	800223a <getRECQ+0xec>
		if (dat) *(dat + len) = '\0';
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d004      	beq.n	8002220 <getRECQ+0xd2>
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	4413      	add	r3, r2
 800221c:	2200      	movs	r2, #0
 800221e:	701a      	strb	r2, [r3, #0]
		q->get++;
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	789b      	ldrb	r3, [r3, #2]
 8002224:	3301      	adds	r3, #1
 8002226:	b2da      	uxtb	r2, r3
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	709a      	strb	r2, [r3, #2]
		//q->get &= MAX_QREC - 1;
		if (q->get >= MAX_QREC) q->get = 0;
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	789b      	ldrb	r3, [r3, #2]
 8002230:	2b0f      	cmp	r3, #15
 8002232:	d902      	bls.n	800223a <getRECQ+0xec>
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	2200      	movs	r2, #0
 8002238:	709a      	strb	r2, [r3, #2]
	}

	q->lock = 0;
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	2200      	movs	r2, #0
 800223e:	701a      	strb	r2, [r3, #0]

	return ret;
 8002240:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002244:	4618      	mov	r0, r3
 8002246:	3710      	adds	r7, #16
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}

0800224c <errName>:

#endif

//-------------------------------------------------------------------------------------------
static char *errName(uint16_t err)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	4603      	mov	r3, r0
 8002254:	80fb      	strh	r3, [r7, #6]

	switch (err) {
 8002256:	88fb      	ldrh	r3, [r7, #6]
 8002258:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800225c:	d07b      	beq.n	8002356 <errName+0x10a>
 800225e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002262:	dc7a      	bgt.n	800235a <errName+0x10e>
 8002264:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002268:	d073      	beq.n	8002352 <errName+0x106>
 800226a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800226e:	dc74      	bgt.n	800235a <errName+0x10e>
 8002270:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002274:	d06b      	beq.n	800234e <errName+0x102>
 8002276:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800227a:	dc6e      	bgt.n	800235a <errName+0x10e>
 800227c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002280:	d063      	beq.n	800234a <errName+0xfe>
 8002282:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002286:	dc68      	bgt.n	800235a <errName+0x10e>
 8002288:	2b80      	cmp	r3, #128	; 0x80
 800228a:	d05c      	beq.n	8002346 <errName+0xfa>
 800228c:	2b80      	cmp	r3, #128	; 0x80
 800228e:	dc64      	bgt.n	800235a <errName+0x10e>
 8002290:	2b20      	cmp	r3, #32
 8002292:	dc47      	bgt.n	8002324 <errName+0xd8>
 8002294:	2b00      	cmp	r3, #0
 8002296:	dd60      	ble.n	800235a <errName+0x10e>
 8002298:	3b01      	subs	r3, #1
 800229a:	2b1f      	cmp	r3, #31
 800229c:	d85d      	bhi.n	800235a <errName+0x10e>
 800229e:	a201      	add	r2, pc, #4	; (adr r2, 80022a4 <errName+0x58>)
 80022a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022a4:	0800232b 	.word	0x0800232b
 80022a8:	0800232f 	.word	0x0800232f
 80022ac:	0800235b 	.word	0x0800235b
 80022b0:	08002333 	.word	0x08002333
 80022b4:	0800235b 	.word	0x0800235b
 80022b8:	0800235b 	.word	0x0800235b
 80022bc:	0800235b 	.word	0x0800235b
 80022c0:	08002337 	.word	0x08002337
 80022c4:	0800235b 	.word	0x0800235b
 80022c8:	0800235b 	.word	0x0800235b
 80022cc:	0800235b 	.word	0x0800235b
 80022d0:	0800235b 	.word	0x0800235b
 80022d4:	0800235b 	.word	0x0800235b
 80022d8:	0800235b 	.word	0x0800235b
 80022dc:	0800235b 	.word	0x0800235b
 80022e0:	0800233b 	.word	0x0800233b
 80022e4:	0800235b 	.word	0x0800235b
 80022e8:	0800235b 	.word	0x0800235b
 80022ec:	0800235b 	.word	0x0800235b
 80022f0:	0800235b 	.word	0x0800235b
 80022f4:	0800235b 	.word	0x0800235b
 80022f8:	0800235b 	.word	0x0800235b
 80022fc:	0800235b 	.word	0x0800235b
 8002300:	0800235b 	.word	0x0800235b
 8002304:	0800235b 	.word	0x0800235b
 8002308:	0800235b 	.word	0x0800235b
 800230c:	0800235b 	.word	0x0800235b
 8002310:	0800235b 	.word	0x0800235b
 8002314:	0800235b 	.word	0x0800235b
 8002318:	0800235b 	.word	0x0800235b
 800231c:	0800235b 	.word	0x0800235b
 8002320:	0800233f 	.word	0x0800233f
 8002324:	2b40      	cmp	r3, #64	; 0x40
 8002326:	d00c      	beq.n	8002342 <errName+0xf6>
 8002328:	e017      	b.n	800235a <errName+0x10e>
		case devTIK:// = 1,
			return "devTIK";
 800232a:	4b0f      	ldr	r3, [pc, #60]	; (8002368 <errName+0x11c>)
 800232c:	e016      	b.n	800235c <errName+0x110>
		case devUART:// = 2,
			return "devUART";
 800232e:	4b0f      	ldr	r3, [pc, #60]	; (800236c <errName+0x120>)
 8002330:	e014      	b.n	800235c <errName+0x110>
		case devMEM://= 4,
			return "devMEM";
 8002332:	4b0f      	ldr	r3, [pc, #60]	; (8002370 <errName+0x124>)
 8002334:	e012      	b.n	800235c <errName+0x110>
		case devRTC:// = 8,
			return "devRTC";
 8002336:	4b0f      	ldr	r3, [pc, #60]	; (8002374 <errName+0x128>)
 8002338:	e010      	b.n	800235c <errName+0x110>
		case devFIFO:// = 0x10,
			return "devFIFO";
 800233a:	4b0f      	ldr	r3, [pc, #60]	; (8002378 <errName+0x12c>)
 800233c:	e00e      	b.n	800235c <errName+0x110>
		case devSYS:// = 0x20,
			return "devSYS";
 800233e:	4b0f      	ldr	r3, [pc, #60]	; (800237c <errName+0x130>)
 8002340:	e00c      	b.n	800235c <errName+0x110>
		case devSPI:// = 0x40,
			return "devSPI";
 8002342:	4b0f      	ldr	r3, [pc, #60]	; (8002380 <errName+0x134>)
 8002344:	e00a      	b.n	800235c <errName+0x110>
		case devLCD:// = 0x80,
			return "devLCD";
 8002346:	4b0f      	ldr	r3, [pc, #60]	; (8002384 <errName+0x138>)
 8002348:	e008      	b.n	800235c <errName+0x110>
		case devRDA:// = 0x100,
			return "devRDA";
 800234a:	4b0f      	ldr	r3, [pc, #60]	; (8002388 <errName+0x13c>)
 800234c:	e006      	b.n	800235c <errName+0x110>
		case devFS:// = 0x200
			return "devFS";
 800234e:	4b0f      	ldr	r3, [pc, #60]	; (800238c <errName+0x140>)
 8002350:	e004      	b.n	800235c <errName+0x110>
#if defined(SET_BLE) || defined(SET_AUDIO)
		case devBLE:// = 0x400,
			return "devBLE";
 8002352:	4b0f      	ldr	r3, [pc, #60]	; (8002390 <errName+0x144>)
 8002354:	e002      	b.n	800235c <errName+0x110>
		case devQUE:// = 0x800
			return "devQUE";
 8002356:	4b0f      	ldr	r3, [pc, #60]	; (8002394 <errName+0x148>)
 8002358:	e000      	b.n	800235c <errName+0x110>
#endif
	}

	return "???";
 800235a:	4b0f      	ldr	r3, [pc, #60]	; (8002398 <errName+0x14c>)
}
 800235c:	4618      	mov	r0, r3
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr
 8002368:	08014148 	.word	0x08014148
 800236c:	08014150 	.word	0x08014150
 8002370:	08014158 	.word	0x08014158
 8002374:	08014160 	.word	0x08014160
 8002378:	08014168 	.word	0x08014168
 800237c:	08014170 	.word	0x08014170
 8002380:	08014178 	.word	0x08014178
 8002384:	08014180 	.word	0x08014180
 8002388:	08014188 	.word	0x08014188
 800238c:	08014190 	.word	0x08014190
 8002390:	08014198 	.word	0x08014198
 8002394:	080141a0 	.word	0x080141a0
 8002398:	080140d8 	.word	0x080140d8

0800239c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800239c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80023a0:	b0cf      	sub	sp, #316	; 0x13c
 80023a2:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80023a4:	f005 fa65 	bl	8007872 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80023a8:	f001 fd20 	bl	8003dec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80023ac:	f001 ffc6 	bl	800433c <MX_GPIO_Init>
  MX_TIM4_Init();
 80023b0:	f001 fe86 	bl	80040c0 <MX_TIM4_Init>
  MX_DMA_Init();
 80023b4:	f001 ff68 	bl	8004288 <MX_DMA_Init>
  MX_RTC_Init();
 80023b8:	f001 fdaa 	bl	8003f10 <MX_RTC_Init>
  MX_USART2_UART_Init();
 80023bc:	f001 ff04 	bl	80041c8 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 80023c0:	f001 fe40 	bl	8004044 <MX_SPI2_Init>
  MX_SPI1_Init();
 80023c4:	f001 fe00 	bl	8003fc8 <MX_SPI1_Init>
  MX_I2C1_Init();
 80023c8:	f001 fd62 	bl	8003e90 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 80023cc:	f001 ff2c 	bl	8004228 <MX_USART3_UART_Init>
  MX_TIM6_Init();
 80023d0:	f001 fec4 	bl	800415c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */


    if (HAL_TIM_Base_Start_IT(tikPort) != HAL_OK) devError |= devTIK;
 80023d4:	4b64      	ldr	r3, [pc, #400]	; (8002568 <main+0x1cc>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4618      	mov	r0, r3
 80023da:	f00b f889 	bl	800d4f0 <HAL_TIM_Base_Start_IT>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d006      	beq.n	80023f2 <main+0x56>
 80023e4:	4b61      	ldr	r3, [pc, #388]	; (800256c <main+0x1d0>)
 80023e6:	881b      	ldrh	r3, [r3, #0]
 80023e8:	f043 0301 	orr.w	r3, r3, #1
 80023ec:	b29a      	uxth	r2, r3
 80023ee:	4b5f      	ldr	r3, [pc, #380]	; (800256c <main+0x1d0>)
 80023f0:	801a      	strh	r2, [r3, #0]

    for (int8_t i = 0; i < 4; i++) {
 80023f2:	2300      	movs	r3, #0
 80023f4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 80023f8:	e012      	b.n	8002420 <main+0x84>
    	errLedOn(true);
 80023fa:	2001      	movs	r0, #1
 80023fc:	f002 fb9a 	bl	8004b34 <errLedOn>
    	HAL_Delay(100);
 8002400:	2064      	movs	r0, #100	; 0x64
 8002402:	f005 faab 	bl	800795c <HAL_Delay>
    	errLedOn(false);
 8002406:	2000      	movs	r0, #0
 8002408:	f002 fb94 	bl	8004b34 <errLedOn>
    	HAL_Delay(100);
 800240c:	2064      	movs	r0, #100	; 0x64
 800240e:	f005 faa5 	bl	800795c <HAL_Delay>
    for (int8_t i = 0; i < 4; i++) {
 8002412:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8002416:	b2db      	uxtb	r3, r3
 8002418:	3301      	adds	r3, #1
 800241a:	b2db      	uxtb	r3, r3
 800241c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 8002420:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8002424:	2b03      	cmp	r3, #3
 8002426:	dde8      	ble.n	80023fa <main+0x5e>
    }

    if (HAL_UART_Receive_IT(cmdPort, &rxByte, 1) != HAL_OK) devError |= devUART;
 8002428:	4b51      	ldr	r3, [pc, #324]	; (8002570 <main+0x1d4>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	2201      	movs	r2, #1
 800242e:	4951      	ldr	r1, [pc, #324]	; (8002574 <main+0x1d8>)
 8002430:	4618      	mov	r0, r3
 8002432:	f00b fdc9 	bl	800dfc8 <HAL_UART_Receive_IT>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d006      	beq.n	800244a <main+0xae>
 800243c:	4b4b      	ldr	r3, [pc, #300]	; (800256c <main+0x1d0>)
 800243e:	881b      	ldrh	r3, [r3, #0]
 8002440:	f043 0302 	orr.w	r3, r3, #2
 8002444:	b29a      	uxth	r2, r3
 8002446:	4b49      	ldr	r3, [pc, #292]	; (800256c <main+0x1d0>)
 8002448:	801a      	strh	r2, [r3, #0]
#if defined(SET_BLE) || defined(SET_AUDIO)
    if (HAL_UART_Receive_IT(blePort, &rxbByte, 1) != HAL_OK) devError |= devBLE;
 800244a:	4b4b      	ldr	r3, [pc, #300]	; (8002578 <main+0x1dc>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	2201      	movs	r2, #1
 8002450:	494a      	ldr	r1, [pc, #296]	; (800257c <main+0x1e0>)
 8002452:	4618      	mov	r0, r3
 8002454:	f00b fdb8 	bl	800dfc8 <HAL_UART_Receive_IT>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d006      	beq.n	800246c <main+0xd0>
 800245e:	4b43      	ldr	r3, [pc, #268]	; (800256c <main+0x1d0>)
 8002460:	881b      	ldrh	r3, [r3, #0]
 8002462:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002466:	b29a      	uxth	r2, r3
 8002468:	4b40      	ldr	r3, [pc, #256]	; (800256c <main+0x1d0>)
 800246a:	801a      	strh	r2, [r3, #0]
#endif

    set_Date(epoch);
 800246c:	4b44      	ldr	r3, [pc, #272]	; (8002580 <main+0x1e4>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4618      	mov	r0, r3
 8002472:	f002 fc09 	bl	8004c88 <set_Date>

    HAL_Delay(100);
 8002476:	2064      	movs	r0, #100	; 0x64
 8002478:	f005 fa70 	bl	800795c <HAL_Delay>

    Report(1, "[que:%u] Start application ver.%s\r\n", cntEvt, ver);
 800247c:	4b41      	ldr	r3, [pc, #260]	; (8002584 <main+0x1e8>)
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	b2db      	uxtb	r3, r3
 8002482:	461a      	mov	r2, r3
 8002484:	4b40      	ldr	r3, [pc, #256]	; (8002588 <main+0x1ec>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4940      	ldr	r1, [pc, #256]	; (800258c <main+0x1f0>)
 800248a:	2001      	movs	r0, #1
 800248c:	f002 fcf6 	bl	8004e7c <Report>

#ifdef SET_W25FLASH
    chipPresent = W25qxx_Init();
 8002490:	f004 fd76 	bl	8006f80 <W25qxx_Init>
 8002494:	4603      	mov	r3, r0
 8002496:	461a      	mov	r2, r3
 8002498:	4b3d      	ldr	r3, [pc, #244]	; (8002590 <main+0x1f4>)
 800249a:	701a      	strb	r2, [r3, #0]
    uint32_t cid = W25qxx_getChipID();
 800249c:	f004 fe2a 	bl	80070f4 <W25qxx_getChipID>
 80024a0:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
    if ( chipPresent && ((cid >= W25Q10) && (cid <= W25Q128)) ) validChipID = true;
 80024a4:	4b3a      	ldr	r3, [pc, #232]	; (8002590 <main+0x1f4>)
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d00a      	beq.n	80024c2 <main+0x126>
 80024ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d006      	beq.n	80024c2 <main+0x126>
 80024b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80024b8:	2b08      	cmp	r3, #8
 80024ba:	d802      	bhi.n	80024c2 <main+0x126>
 80024bc:	4b35      	ldr	r3, [pc, #212]	; (8002594 <main+0x1f8>)
 80024be:	2201      	movs	r2, #1
 80024c0:	701a      	strb	r2, [r3, #0]
    list_sector = W25qxx_getPageSize() << 1;
 80024c2:	f004 fe3b 	bl	800713c <W25qxx_getPageSize>
 80024c6:	4603      	mov	r3, r0
 80024c8:	005b      	lsls	r3, r3, #1
 80024ca:	461a      	mov	r2, r3
 80024cc:	4b32      	ldr	r3, [pc, #200]	; (8002598 <main+0x1fc>)
 80024ce:	601a      	str	r2, [r3, #0]
    //
    listSize = sizeof(rec_t) * MAX_LIST;
 80024d0:	4b32      	ldr	r3, [pc, #200]	; (800259c <main+0x200>)
 80024d2:	f44f 7261 	mov.w	r2, #900	; 0x384
 80024d6:	801a      	strh	r2, [r3, #0]
    memset((uint8_t *)&list[0].band, 0, listSize);
 80024d8:	4b30      	ldr	r3, [pc, #192]	; (800259c <main+0x200>)
 80024da:	881b      	ldrh	r3, [r3, #0]
 80024dc:	461a      	mov	r2, r3
 80024de:	2100      	movs	r1, #0
 80024e0:	482f      	ldr	r0, [pc, #188]	; (80025a0 <main+0x204>)
 80024e2:	f00d fa55 	bl	800f990 <memset>
    //
    cfgSector = W25qxx_getSectorCount() - 1;
 80024e6:	f004 fe11 	bl	800710c <W25qxx_getSectorCount>
 80024ea:	4603      	mov	r3, r0
 80024ec:	3b01      	subs	r3, #1
 80024ee:	4a2d      	ldr	r2, [pc, #180]	; (80025a4 <main+0x208>)
 80024f0:	6013      	str	r3, [r2, #0]
    if (W25qxx_IsEmptySector(cfgSector, 0, listSize)) {//sector is empty -> need write data to sector
 80024f2:	4b2c      	ldr	r3, [pc, #176]	; (80025a4 <main+0x208>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a29      	ldr	r2, [pc, #164]	; (800259c <main+0x200>)
 80024f8:	8812      	ldrh	r2, [r2, #0]
 80024fa:	2100      	movs	r1, #0
 80024fc:	4618      	mov	r0, r3
 80024fe:	f004 fe87 	bl	8007210 <W25qxx_IsEmptySector>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d017      	beq.n	8002538 <main+0x19c>
    	if (!(devError & devSPI)) {
 8002508:	4b18      	ldr	r3, [pc, #96]	; (800256c <main+0x1d0>)
 800250a:	881b      	ldrh	r3, [r3, #0]
 800250c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002510:	2b00      	cmp	r3, #0
 8002512:	d156      	bne.n	80025c2 <main+0x226>
    		W25qxx_WriteSector((uint8_t *)&def_list[0].band, cfgSector, 0, listSize);
 8002514:	4b23      	ldr	r3, [pc, #140]	; (80025a4 <main+0x208>)
 8002516:	6819      	ldr	r1, [r3, #0]
 8002518:	4b20      	ldr	r3, [pc, #128]	; (800259c <main+0x200>)
 800251a:	881b      	ldrh	r3, [r3, #0]
 800251c:	2200      	movs	r2, #0
 800251e:	4822      	ldr	r0, [pc, #136]	; (80025a8 <main+0x20c>)
 8002520:	f004 ffea 	bl	80074f8 <W25qxx_WriteSector>
    		Report(1, "Writen cfg_stations_data (%lu bytes) to cfgSector #%lu\r\n", listSize, cfgSector);
 8002524:	4b1d      	ldr	r3, [pc, #116]	; (800259c <main+0x200>)
 8002526:	881b      	ldrh	r3, [r3, #0]
 8002528:	461a      	mov	r2, r3
 800252a:	4b1e      	ldr	r3, [pc, #120]	; (80025a4 <main+0x208>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	491f      	ldr	r1, [pc, #124]	; (80025ac <main+0x210>)
 8002530:	2001      	movs	r0, #1
 8002532:	f002 fca3 	bl	8004e7c <Report>
 8002536:	e044      	b.n	80025c2 <main+0x226>
      	}
    } else {//in sector	present any data
    	if (!(devError & devSPI)) {
 8002538:	4b0c      	ldr	r3, [pc, #48]	; (800256c <main+0x1d0>)
 800253a:	881b      	ldrh	r3, [r3, #0]
 800253c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002540:	2b00      	cmp	r3, #0
 8002542:	d137      	bne.n	80025b4 <main+0x218>
    		W25qxx_ReadSector((uint8_t *)&list[0].band, cfgSector, 0, listSize);
 8002544:	4b17      	ldr	r3, [pc, #92]	; (80025a4 <main+0x208>)
 8002546:	6819      	ldr	r1, [r3, #0]
 8002548:	4b14      	ldr	r3, [pc, #80]	; (800259c <main+0x200>)
 800254a:	881b      	ldrh	r3, [r3, #0]
 800254c:	2200      	movs	r2, #0
 800254e:	4814      	ldr	r0, [pc, #80]	; (80025a0 <main+0x204>)
 8002550:	f005 f8fa 	bl	8007748 <W25qxx_ReadSector>
    		Report(1, "Readed cfg_stations_data (%lu bytes) from cfgSector #%lu\r\n", listSize, cfgSector);
 8002554:	4b11      	ldr	r3, [pc, #68]	; (800259c <main+0x200>)
 8002556:	881b      	ldrh	r3, [r3, #0]
 8002558:	461a      	mov	r2, r3
 800255a:	4b12      	ldr	r3, [pc, #72]	; (80025a4 <main+0x208>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4914      	ldr	r1, [pc, #80]	; (80025b0 <main+0x214>)
 8002560:	2001      	movs	r0, #1
 8002562:	f002 fc8b 	bl	8004e7c <Report>
 8002566:	e02c      	b.n	80025c2 <main+0x226>
 8002568:	20000008 	.word	0x20000008
 800256c:	20001bc8 	.word	0x20001bc8
 8002570:	20000010 	.word	0x20000010
 8002574:	20001bd8 	.word	0x20001bd8
 8002578:	20000218 	.word	0x20000218
 800257c:	200033ba 	.word	0x200033ba
 8002580:	20000018 	.word	0x20000018
 8002584:	20001fe4 	.word	0x20001fe4
 8002588:	20000004 	.word	0x20000004
 800258c:	080141a8 	.word	0x080141a8
 8002590:	20002ffc 	.word	0x20002ffc
 8002594:	20002ffd 	.word	0x20002ffd
 8002598:	20001ff0 	.word	0x20001ff0
 800259c:	200033b8 	.word	0x200033b8
 80025a0:	20003034 	.word	0x20003034
 80025a4:	20003008 	.word	0x20003008
 80025a8:	080152e4 	.word	0x080152e4
 80025ac:	080141cc 	.word	0x080141cc
 80025b0:	08014208 	.word	0x08014208
      	} else {
      		memcpy((uint8_t *)&list[0].band, (uint8_t *)&def_list[0].band, listSize);
 80025b4:	4ba7      	ldr	r3, [pc, #668]	; (8002854 <main+0x4b8>)
 80025b6:	881b      	ldrh	r3, [r3, #0]
 80025b8:	461a      	mov	r2, r3
 80025ba:	49a7      	ldr	r1, [pc, #668]	; (8002858 <main+0x4bc>)
 80025bc:	48a7      	ldr	r0, [pc, #668]	; (800285c <main+0x4c0>)
 80025be:	f00d f9d9 	bl	800f974 <memcpy>
#endif


#ifdef SET_RDA_CHIP

    rdaID = rda5807_init(&Freq);
 80025c2:	48a7      	ldr	r0, [pc, #668]	; (8002860 <main+0x4c4>)
 80025c4:	f003 f9fa 	bl	80059bc <rda5807_init>
 80025c8:	4603      	mov	r3, r0
 80025ca:	461a      	mov	r2, r3
 80025cc:	4ba5      	ldr	r3, [pc, #660]	; (8002864 <main+0x4c8>)
 80025ce:	701a      	strb	r2, [r3, #0]
    RSSI = rda5807_rssi();
 80025d0:	f003 fa62 	bl	8005a98 <rda5807_rssi>
 80025d4:	4603      	mov	r3, r0
 80025d6:	461a      	mov	r2, r3
 80025d8:	4ba3      	ldr	r3, [pc, #652]	; (8002868 <main+0x4cc>)
 80025da:	801a      	strh	r2, [r3, #0]
    rda5807_SetVolume(Volume);
 80025dc:	4ba3      	ldr	r3, [pc, #652]	; (800286c <main+0x4d0>)
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	4618      	mov	r0, r3
 80025e2:	f003 fc37 	bl	8005e54 <rda5807_SetVolume>
    rda5807_SetBassBoost(BassBoost);
 80025e6:	4ba2      	ldr	r3, [pc, #648]	; (8002870 <main+0x4d4>)
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	4618      	mov	r0, r3
 80025ec:	f003 fc7a 	bl	8005ee4 <rda5807_SetBassBoost>
    stereo = rda5807_Get_StereoMonoFlag();
 80025f0:	f003 fd8e 	bl	8006110 <rda5807_Get_StereoMonoFlag>
 80025f4:	4603      	mov	r3, r0
 80025f6:	461a      	mov	r2, r3
 80025f8:	4b9e      	ldr	r3, [pc, #632]	; (8002874 <main+0x4d8>)
 80025fa:	701a      	strb	r2, [r3, #0]
    Chan = rda5807_Get_Channel();
 80025fc:	f003 fda0 	bl	8006140 <rda5807_Get_Channel>
 8002600:	4603      	mov	r3, r0
 8002602:	461a      	mov	r2, r3
 8002604:	4b9c      	ldr	r3, [pc, #624]	; (8002878 <main+0x4dc>)
 8002606:	801a      	strh	r2, [r3, #0]
#endif

#ifdef SET_DISPLAY

	#ifdef FONT_6x8
  		FontDef_t Font_6x8 = { 6, 8, Font6x8 };
 8002608:	4a9c      	ldr	r2, [pc, #624]	; (800287c <main+0x4e0>)
 800260a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800260e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002612:	6018      	str	r0, [r3, #0]
 8002614:	3304      	adds	r3, #4
 8002616:	8019      	strh	r1, [r3, #0]
  		lfnt = &Font_6x8;
 8002618:	4a99      	ldr	r2, [pc, #612]	; (8002880 <main+0x4e4>)
 800261a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800261e:	6013      	str	r3, [r2, #0]
	#endif

  	uint16_t lin1 = 1;
 8002620:	2301      	movs	r3, #1
 8002622:	f8a7 30de 	strh.w	r3, [r7, #222]	; 0xde
  	uint16_t lin2 = lin1 + Font_6x8.FontHeight;//chipID...
 8002626:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 800262a:	b29a      	uxth	r2, r3
 800262c:	f8b7 30de 	ldrh.w	r3, [r7, #222]	; 0xde
 8002630:	4413      	add	r3, r2
 8002632:	f8a7 30dc 	strh.w	r3, [r7, #220]	; 0xdc
  	uint16_t lin3 = lin2 + Font_6x8.FontHeight + 1;//Band...
 8002636:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 800263a:	b29a      	uxth	r2, r3
 800263c:	f8b7 30dc 	ldrh.w	r3, [r7, #220]	; 0xdc
 8002640:	4413      	add	r3, r2
 8002642:	b29b      	uxth	r3, r3
 8002644:	3301      	adds	r3, #1
 8002646:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
  	uint16_t lin4 = lin3 + Font_6x8.FontHeight + 1;//Volume...//Freq...
 800264a:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 800264e:	b29a      	uxth	r2, r3
 8002650:	f8b7 30da 	ldrh.w	r3, [r7, #218]	; 0xda
 8002654:	4413      	add	r3, r2
 8002656:	b29b      	uxth	r3, r3
 8002658:	3301      	adds	r3, #1
 800265a:	f8a7 30d8 	strh.w	r3, [r7, #216]	; 0xd8
  	uint16_t lin5 = lin4 + Font_6x8.FontHeight + 1;//Freq...//Volume...
 800265e:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 8002662:	b29a      	uxth	r2, r3
 8002664:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
 8002668:	4413      	add	r3, r2
 800266a:	b29b      	uxth	r3, r3
 800266c:	3301      	adds	r3, #1
 800266e:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
  	uint16_t lin6 = lin5 + Font_6x8.FontHeight + 1;//Station
 8002672:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 8002676:	b29a      	uxth	r2, r3
 8002678:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 800267c:	4413      	add	r3, r2
 800267e:	b29b      	uxth	r3, r3
 8002680:	3301      	adds	r3, #1
 8002682:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
  	char st[64];
  	char sta[32];
  	char stb[32];

  	ST7565_Reset();
 8002686:	f7fe fe13 	bl	80012b0 <ST7565_Reset>
  	ST7565_Init();
 800268a:	f7fe ff29 	bl	80014e0 <ST7565_Init>

    int dl = sprintf(tmp, "Ver.%s", ver);
 800268e:	4b7d      	ldr	r3, [pc, #500]	; (8002884 <main+0x4e8>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	461a      	mov	r2, r3
 8002694:	497c      	ldr	r1, [pc, #496]	; (8002888 <main+0x4ec>)
 8002696:	487d      	ldr	r0, [pc, #500]	; (800288c <main+0x4f0>)
 8002698:	f00d fef2 	bl	8010480 <siprintf>
 800269c:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
    uint16_t x = ((SCREEN_WIDTH - (Font_6x8.FontWidth * dl)) >> 1) & 0x7f;
 80026a0:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 80026a4:	461a      	mov	r2, r3
 80026a6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80026aa:	fb02 f303 	mul.w	r3, r2, r3
 80026ae:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80026b2:	105b      	asrs	r3, r3, #1
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80026ba:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
    ST7565_Print(x, SCREEN_HEIGHT - Font_6x8.FontHeight, tmp, &Font_6x8, 1, PIX_ON);//печатаем надпись с указаным шрифтом и цветом(PIX_ON-белый, PIX_OFF-черный)
 80026be:	f9b7 00d2 	ldrsh.w	r0, [r7, #210]	; 0xd2
 80026c2:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	b219      	sxth	r1, r3
 80026d0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80026d4:	2201      	movs	r2, #1
 80026d6:	9201      	str	r2, [sp, #4]
 80026d8:	2201      	movs	r2, #1
 80026da:	9200      	str	r2, [sp, #0]
 80026dc:	4a6b      	ldr	r2, [pc, #428]	; (800288c <main+0x4f0>)
 80026de:	f7ff f947 	bl	8001970 <ST7565_Print>

	#ifdef SET_RDA_CHIP
    	int il = sprintf(st, "RDA5807 chipID:0x%x", rdaID);
 80026e2:	4b60      	ldr	r3, [pc, #384]	; (8002864 <main+0x4c8>)
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	461a      	mov	r2, r3
 80026e8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80026ec:	4968      	ldr	r1, [pc, #416]	; (8002890 <main+0x4f4>)
 80026ee:	4618      	mov	r0, r3
 80026f0:	f00d fec6 	bl	8010480 <siprintf>
 80026f4:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
    	uint16_t xf = ((SCREEN_WIDTH - (Font_6x8.FontWidth * il)) >> 1) & 0x7f;
 80026f8:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 80026fc:	461a      	mov	r2, r3
 80026fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002702:	fb02 f303 	mul.w	r3, r2, r3
 8002706:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800270a:	105b      	asrs	r3, r3, #1
 800270c:	b29b      	uxth	r3, r3
 800270e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002712:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
    	if (!xf) xf = 1;
 8002716:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 800271a:	2b00      	cmp	r3, #0
 800271c:	d102      	bne.n	8002724 <main+0x388>
 800271e:	2301      	movs	r3, #1
 8002720:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
    	ST7565_Print(xf, lin2, st, &Font_6x8, 1, PIX_ON);
 8002724:	f9b7 010a 	ldrsh.w	r0, [r7, #266]	; 0x10a
 8002728:	f9b7 10dc 	ldrsh.w	r1, [r7, #220]	; 0xdc
 800272c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002730:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8002734:	2601      	movs	r6, #1
 8002736:	9601      	str	r6, [sp, #4]
 8002738:	2601      	movs	r6, #1
 800273a:	9600      	str	r6, [sp, #0]
 800273c:	f7ff f918 	bl	8001970 <ST7565_Print>

    	int it = sprintf(stb, "FM Band:%s", allBands[Band]);//(uint16_t)lBand, (uint16_t)rBand);
 8002740:	4b54      	ldr	r3, [pc, #336]	; (8002894 <main+0x4f8>)
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	461a      	mov	r2, r3
 8002746:	4b54      	ldr	r3, [pc, #336]	; (8002898 <main+0x4fc>)
 8002748:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800274c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002750:	4952      	ldr	r1, [pc, #328]	; (800289c <main+0x500>)
 8002752:	4618      	mov	r0, r3
 8002754:	f00d fe94 	bl	8010480 <siprintf>
 8002758:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    	int lit = it;
 800275c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002760:	62bb      	str	r3, [r7, #40]	; 0x28
    	xf = ((SCREEN_WIDTH - (Font_6x8.FontWidth * it)) >> 1) & 0x7f;
 8002762:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 8002766:	461a      	mov	r2, r3
 8002768:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800276c:	fb02 f303 	mul.w	r3, r2, r3
 8002770:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002774:	105b      	asrs	r3, r3, #1
 8002776:	b29b      	uxth	r3, r3
 8002778:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800277c:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
    	if ((!xf) || (xf > (SCREEN_WIDTH - 3))) xf = 1;
 8002780:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8002784:	2b00      	cmp	r3, #0
 8002786:	d003      	beq.n	8002790 <main+0x3f4>
 8002788:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 800278c:	2b7d      	cmp	r3, #125	; 0x7d
 800278e:	d902      	bls.n	8002796 <main+0x3fa>
 8002790:	2301      	movs	r3, #1
 8002792:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
    	ST7565_Print(xf, lin3, stb, &Font_6x8, 1, PIX_ON);
 8002796:	f9b7 010a 	ldrsh.w	r0, [r7, #266]	; 0x10a
 800279a:	f9b7 10da 	ldrsh.w	r1, [r7, #218]	; 0xda
 800279e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80027a2:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80027a6:	2601      	movs	r6, #1
 80027a8:	9601      	str	r6, [sp, #4]
 80027aa:	2601      	movs	r6, #1
 80027ac:	9600      	str	r6, [sp, #0]
 80027ae:	f7ff f8df 	bl	8001970 <ST7565_Print>

    	int im = sprintf(st, "Bass:%u Vol:%u", BassBoost, Volume);
 80027b2:	4b2f      	ldr	r3, [pc, #188]	; (8002870 <main+0x4d4>)
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	461a      	mov	r2, r3
 80027b8:	4b2c      	ldr	r3, [pc, #176]	; (800286c <main+0x4d0>)
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 80027c0:	4937      	ldr	r1, [pc, #220]	; (80028a0 <main+0x504>)
 80027c2:	f00d fe5d 	bl	8010480 <siprintf>
 80027c6:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    	int lim = im;
 80027ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80027ce:	627b      	str	r3, [r7, #36]	; 0x24
    	xf = ((SCREEN_WIDTH - (Font_6x8.FontWidth * im)) >> 1) & 0x7f;
 80027d0:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 80027d4:	461a      	mov	r2, r3
 80027d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80027da:	fb02 f303 	mul.w	r3, r2, r3
 80027de:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80027e2:	105b      	asrs	r3, r3, #1
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80027ea:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
    	if ((!xf) || (xf > (SCREEN_WIDTH - 3))) xf = 1;
 80027ee:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d003      	beq.n	80027fe <main+0x462>
 80027f6:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 80027fa:	2b7d      	cmp	r3, #125	; 0x7d
 80027fc:	d902      	bls.n	8002804 <main+0x468>
 80027fe:	2301      	movs	r3, #1
 8002800:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
    	ST7565_Print(xf, lin4, st, &Font_6x8, 1, PIX_ON);
 8002804:	f9b7 010a 	ldrsh.w	r0, [r7, #266]	; 0x10a
 8002808:	f9b7 10d8 	ldrsh.w	r1, [r7, #216]	; 0xd8
 800280c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002810:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8002814:	2601      	movs	r6, #1
 8002816:	9601      	str	r6, [sp, #4]
 8002818:	2601      	movs	r6, #1
 800281a:	9600      	str	r6, [sp, #0]
 800281c:	f7ff f8a8 	bl	8001970 <ST7565_Print>

    	if (stereo)
 8002820:	4b14      	ldr	r3, [pc, #80]	; (8002874 <main+0x4d8>)
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d03f      	beq.n	80028a8 <main+0x50c>
    		il = sprintf(st, "Rssi:%u Freq:%.1f S", RSSI, Freq);
 8002828:	4b0f      	ldr	r3, [pc, #60]	; (8002868 <main+0x4cc>)
 800282a:	881b      	ldrh	r3, [r3, #0]
 800282c:	461e      	mov	r6, r3
 800282e:	4b0c      	ldr	r3, [pc, #48]	; (8002860 <main+0x4c4>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4618      	mov	r0, r3
 8002834:	f7fd fe88 	bl	8000548 <__aeabi_f2d>
 8002838:	4602      	mov	r2, r0
 800283a:	460b      	mov	r3, r1
 800283c:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8002840:	e9cd 2300 	strd	r2, r3, [sp]
 8002844:	4632      	mov	r2, r6
 8002846:	4917      	ldr	r1, [pc, #92]	; (80028a4 <main+0x508>)
 8002848:	f00d fe1a 	bl	8010480 <siprintf>
 800284c:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 8002850:	e03e      	b.n	80028d0 <main+0x534>
 8002852:	bf00      	nop
 8002854:	200033b8 	.word	0x200033b8
 8002858:	080152e4 	.word	0x080152e4
 800285c:	20003034 	.word	0x20003034
 8002860:	200001f4 	.word	0x200001f4
 8002864:	20003020 	.word	0x20003020
 8002868:	2000301e 	.word	0x2000301e
 800286c:	200001ff 	.word	0x200001ff
 8002870:	20003022 	.word	0x20003022
 8002874:	20003024 	.word	0x20003024
 8002878:	2000301c 	.word	0x2000301c
 800287c:	0801467c 	.word	0x0801467c
 8002880:	20003010 	.word	0x20003010
 8002884:	20000004 	.word	0x20000004
 8002888:	08014244 	.word	0x08014244
 800288c:	20001348 	.word	0x20001348
 8002890:	0801424c 	.word	0x0801424c
 8002894:	200001fc 	.word	0x200001fc
 8002898:	20000208 	.word	0x20000208
 800289c:	08014260 	.word	0x08014260
 80028a0:	0801426c 	.word	0x0801426c
 80028a4:	0801427c 	.word	0x0801427c
    	else
    		il = sprintf(st, "Rssi:%u Freq:%.1f", RSSI, Freq);
 80028a8:	4bc9      	ldr	r3, [pc, #804]	; (8002bd0 <main+0x834>)
 80028aa:	881b      	ldrh	r3, [r3, #0]
 80028ac:	461e      	mov	r6, r3
 80028ae:	4bc9      	ldr	r3, [pc, #804]	; (8002bd4 <main+0x838>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7fd fe48 	bl	8000548 <__aeabi_f2d>
 80028b8:	4602      	mov	r2, r0
 80028ba:	460b      	mov	r3, r1
 80028bc:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 80028c0:	e9cd 2300 	strd	r2, r3, [sp]
 80028c4:	4632      	mov	r2, r6
 80028c6:	49c4      	ldr	r1, [pc, #784]	; (8002bd8 <main+0x83c>)
 80028c8:	f00d fdda 	bl	8010480 <siprintf>
 80028cc:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
    	int lil = il;
 80028d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80028d4:	623b      	str	r3, [r7, #32]
    	xf = ((SCREEN_WIDTH - (Font_6x8.FontWidth * il)) >> 1) & 0x7f;
 80028d6:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 80028da:	461a      	mov	r2, r3
 80028dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80028e0:	fb02 f303 	mul.w	r3, r2, r3
 80028e4:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80028e8:	105b      	asrs	r3, r3, #1
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80028f0:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
    	if ((!xf) || (xf > (SCREEN_WIDTH - 3))) xf = 1;
 80028f4:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d003      	beq.n	8002904 <main+0x568>
 80028fc:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8002900:	2b7d      	cmp	r3, #125	; 0x7d
 8002902:	d902      	bls.n	800290a <main+0x56e>
 8002904:	2301      	movs	r3, #1
 8002906:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
    	ST7565_Print(xf, lin5, st, &Font_6x8, 1, PIX_ON);
 800290a:	f9b7 010a 	ldrsh.w	r0, [r7, #266]	; 0x10a
 800290e:	f9b7 10d6 	ldrsh.w	r1, [r7, #214]	; 0xd6
 8002912:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002916:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800291a:	2601      	movs	r6, #1
 800291c:	9601      	str	r6, [sp, #4]
 800291e:	2601      	movs	r6, #1
 8002920:	9600      	str	r6, [sp, #0]
 8002922:	f7ff f825 	bl	8001970 <ST7565_Print>

    	int ia = sprintf(sta, "%s", nameStation(Freq));
 8002926:	4bab      	ldr	r3, [pc, #684]	; (8002bd4 <main+0x838>)
 8002928:	edd3 7a00 	vldr	s15, [r3]
 800292c:	eeb0 0a67 	vmov.f32	s0, s15
 8002930:	f001 ff68 	bl	8004804 <nameStation>
 8002934:	4602      	mov	r2, r0
 8002936:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800293a:	49a8      	ldr	r1, [pc, #672]	; (8002bdc <main+0x840>)
 800293c:	4618      	mov	r0, r3
 800293e:	f00d fd9f 	bl	8010480 <siprintf>
 8002942:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
    	int lia = ia;
 8002946:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800294a:	61fb      	str	r3, [r7, #28]
    	xf = ((SCREEN_WIDTH - (Font_6x8.FontWidth * ia)) >> 1) & 0x7f;
 800294c:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 8002950:	461a      	mov	r2, r3
 8002952:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002956:	fb02 f303 	mul.w	r3, r2, r3
 800295a:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800295e:	105b      	asrs	r3, r3, #1
 8002960:	b29b      	uxth	r3, r3
 8002962:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002966:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
    	if ((!xf) || (xf > (SCREEN_WIDTH - 3))) xf = 1;
 800296a:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 800296e:	2b00      	cmp	r3, #0
 8002970:	d003      	beq.n	800297a <main+0x5de>
 8002972:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8002976:	2b7d      	cmp	r3, #125	; 0x7d
 8002978:	d902      	bls.n	8002980 <main+0x5e4>
 800297a:	2301      	movs	r3, #1
 800297c:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
    	ST7565_Print(xf, lin6, sta, &Font_6x8, 1, PIX_ON);
 8002980:	f9b7 010a 	ldrsh.w	r0, [r7, #266]	; 0x10a
 8002984:	f9b7 10d4 	ldrsh.w	r1, [r7, #212]	; 0xd4
 8002988:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800298c:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8002990:	2601      	movs	r6, #1
 8002992:	9601      	str	r6, [sp, #4]
 8002994:	2601      	movs	r6, #1
 8002996:	9600      	str	r6, [sp, #0]
 8002998:	f7fe ffea 	bl	8001970 <ST7565_Print>

    	Report(1, "ChipID:0x%x Chan:%u Freq:%.2f %s RSSI:%u Band:%s Vol:%u BassEn:%u\r\n",
 800299c:	4b90      	ldr	r3, [pc, #576]	; (8002be0 <main+0x844>)
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	4698      	mov	r8, r3
 80029a2:	4b90      	ldr	r3, [pc, #576]	; (8002be4 <main+0x848>)
 80029a4:	881b      	ldrh	r3, [r3, #0]
 80029a6:	4699      	mov	r9, r3
 80029a8:	4b8a      	ldr	r3, [pc, #552]	; (8002bd4 <main+0x838>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4618      	mov	r0, r3
 80029ae:	f7fd fdcb 	bl	8000548 <__aeabi_f2d>
 80029b2:	4602      	mov	r2, r0
 80029b4:	460b      	mov	r3, r1
 80029b6:	4986      	ldr	r1, [pc, #536]	; (8002bd0 <main+0x834>)
 80029b8:	8809      	ldrh	r1, [r1, #0]
 80029ba:	460e      	mov	r6, r1
 80029bc:	498a      	ldr	r1, [pc, #552]	; (8002be8 <main+0x84c>)
 80029be:	7809      	ldrb	r1, [r1, #0]
 80029c0:	4608      	mov	r0, r1
 80029c2:	498a      	ldr	r1, [pc, #552]	; (8002bec <main+0x850>)
 80029c4:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80029c8:	4889      	ldr	r0, [pc, #548]	; (8002bf0 <main+0x854>)
 80029ca:	7800      	ldrb	r0, [r0, #0]
 80029cc:	6078      	str	r0, [r7, #4]
 80029ce:	4889      	ldr	r0, [pc, #548]	; (8002bf4 <main+0x858>)
 80029d0:	7800      	ldrb	r0, [r0, #0]
 80029d2:	9006      	str	r0, [sp, #24]
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	9005      	str	r0, [sp, #20]
 80029d8:	9104      	str	r1, [sp, #16]
 80029da:	9603      	str	r6, [sp, #12]
 80029dc:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 80029e0:	9102      	str	r1, [sp, #8]
 80029e2:	e9cd 2300 	strd	r2, r3, [sp]
 80029e6:	464b      	mov	r3, r9
 80029e8:	4642      	mov	r2, r8
 80029ea:	4983      	ldr	r1, [pc, #524]	; (8002bf8 <main+0x85c>)
 80029ec:	2001      	movs	r0, #1
 80029ee:	f002 fa45 	bl	8004e7c <Report>
    			rdaID, Chan, Freq, sta, RSSI, allBands[Band], Volume, BassBoost);
	#endif

    ST7565_DrawRectangle(0, Font_6x8.FontHeight, SCREEN_WIDTH - 1, SCREEN_HEIGHT - (Font_6x8.FontHeight << 1) - 2, PIX_ON);
 80029f2:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 80029f6:	b219      	sxth	r1, r3
 80029f8:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	005b      	lsls	r3, r3, #1
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	f1c3 033e 	rsb	r3, r3, #62	; 0x3e
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	b21b      	sxth	r3, r3
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	9200      	str	r2, [sp, #0]
 8002a0e:	227f      	movs	r2, #127	; 0x7f
 8002a10:	2000      	movs	r0, #0
 8002a12:	f7ff f984 	bl	8001d1e <ST7565_DrawRectangle>
    ST7565_DrawFilledRectangle(0, 0, SCREEN_WIDTH - 1, Font_6x8.FontHeight, PIX_ON);
 8002a16:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 8002a1a:	b21b      	sxth	r3, r3
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	9200      	str	r2, [sp, #0]
 8002a20:	227f      	movs	r2, #127	; 0x7f
 8002a22:	2100      	movs	r1, #0
 8002a24:	2000      	movs	r0, #0
 8002a26:	f7ff f9fc 	bl	8001e22 <ST7565_DrawFilledRectangle>
    ST7565_Update();
 8002a2a:	f7fe fdf1 	bl	8001610 <ST7565_Update>

    startSec = true;
 8002a2e:	4b73      	ldr	r3, [pc, #460]	; (8002bfc <main+0x860>)
 8002a30:	2201      	movs	r2, #1
 8002a32:	701a      	strb	r2, [r3, #0]
#if defined(SET_BLE) || defined(SET_AUDIO)
	#ifdef SET_BLE
    	bleWakeUp();
	#endif

    bleQueAckFlag   = initRECQ(&bleQueAck);
 8002a34:	4872      	ldr	r0, [pc, #456]	; (8002c00 <main+0x864>)
 8002a36:	f7ff fb11 	bl	800205c <initRECQ>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	4b71      	ldr	r3, [pc, #452]	; (8002c04 <main+0x868>)
 8002a40:	701a      	strb	r2, [r3, #0]
    bleQueCmdFlag   = initRECQ(&bleQueCmd);
 8002a42:	4871      	ldr	r0, [pc, #452]	; (8002c08 <main+0x86c>)
 8002a44:	f7ff fb0a 	bl	800205c <initRECQ>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	4b6f      	ldr	r3, [pc, #444]	; (8002c0c <main+0x870>)
 8002a4e:	701a      	strb	r2, [r3, #0]
	#endif
#endif


#ifdef SET_IRED
    bool ep_start = false;
 8002a50:	2300      	movs	r3, #0
 8002a52:	f887 3109 	strb.w	r3, [r7, #265]	; 0x109
    char ep_str[16] = {0};
 8002a56:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002a5a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002a5e:	2200      	movs	r2, #0
 8002a60:	601a      	str	r2, [r3, #0]
 8002a62:	3304      	adds	r3, #4
 8002a64:	2200      	movs	r2, #0
 8002a66:	601a      	str	r2, [r3, #0]
 8002a68:	605a      	str	r2, [r3, #4]
 8002a6a:	609a      	str	r2, [r3, #8]
    uint32_t ep_tmr = 0;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	uint32_t tmr_ired = 0;
 8002a72:	2300      	movs	r3, #0
 8002a74:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
	//uint32_t clr_tmr = 0;
	enIntIRED();
 8002a78:	f7fe fb44 	bl	8001104 <enIntIRED>
#endif


    uint16_t lastErr = devOK;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe

    putEvt(evt_Freq);
 8002a82:	200c      	movs	r0, #12
 8002a84:	f001 fde8 	bl	8004658 <putEvt>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


    while (!restart) {
 8002a88:	f001 b959 	b.w	8003d3e <main+0x19a2>

/**/
#ifdef SET_IRED
  		if (!tmr_ired) {
 8002a8c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	f040 81c4 	bne.w	8002e1e <main+0xa82>
			if (decodeIRED(&results)) {
 8002a96:	485e      	ldr	r0, [pc, #376]	; (8002c10 <main+0x874>)
 8002a98:	f7fe fafe 	bl	8001098 <decodeIRED>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	f000 81bd 	beq.w	8002e1e <main+0xa82>

				tmr_ired = get_mstmr(_300ms);
 8002aa4:	f04f 001e 	mov.w	r0, #30
 8002aa8:	f04f 0100 	mov.w	r1, #0
 8002aac:	f002 f894 	bl	8004bd8 <get_mstmr>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	460b      	mov	r3, r1
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
				HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 8002aba:	2200      	movs	r2, #0
 8002abc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002ac0:	4854      	ldr	r0, [pc, #336]	; (8002c14 <main+0x878>)
 8002ac2:	f005 fd19 	bl	80084f8 <HAL_GPIO_WritePin>
				int8_t kid = -1;
 8002ac6:	23ff      	movs	r3, #255	; 0xff
 8002ac8:	f887 30fd 	strb.w	r3, [r7, #253]	; 0xfd
				for (int8_t i = 0; i < MAX_IRED_KEY; i++) {
 8002acc:	2300      	movs	r3, #0
 8002ace:	f887 30fc 	strb.w	r3, [r7, #252]	; 0xfc
 8002ad2:	e019      	b.n	8002b08 <main+0x76c>
					if (results.value == keyAll[i].code) {
 8002ad4:	4b4e      	ldr	r3, [pc, #312]	; (8002c10 <main+0x874>)
 8002ad6:	6819      	ldr	r1, [r3, #0]
 8002ad8:	f997 20fc 	ldrsb.w	r2, [r7, #252]	; 0xfc
 8002adc:	484e      	ldr	r0, [pc, #312]	; (8002c18 <main+0x87c>)
 8002ade:	4613      	mov	r3, r2
 8002ae0:	005b      	lsls	r3, r3, #1
 8002ae2:	4413      	add	r3, r2
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	4403      	add	r3, r0
 8002ae8:	3308      	adds	r3, #8
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4299      	cmp	r1, r3
 8002aee:	d104      	bne.n	8002afa <main+0x75e>
						kid = i;
 8002af0:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 8002af4:	f887 30fd 	strb.w	r3, [r7, #253]	; 0xfd
						break;
 8002af8:	e00a      	b.n	8002b10 <main+0x774>
				for (int8_t i = 0; i < MAX_IRED_KEY; i++) {
 8002afa:	f997 30fc 	ldrsb.w	r3, [r7, #252]	; 0xfc
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	3301      	adds	r3, #1
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	f887 30fc 	strb.w	r3, [r7, #252]	; 0xfc
 8002b08:	f997 30fc 	ldrsb.w	r3, [r7, #252]	; 0xfc
 8002b0c:	2b14      	cmp	r3, #20
 8002b0e:	dde1      	ble.n	8002ad4 <main+0x738>
					}
				}
				//
				if (kid == -1) sprintf(stline, "CODE:%08lX", results.value);
 8002b10:	f997 30fd 	ldrsb.w	r3, [r7, #253]	; 0xfd
 8002b14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b18:	d107      	bne.n	8002b2a <main+0x78e>
 8002b1a:	4b3d      	ldr	r3, [pc, #244]	; (8002c10 <main+0x874>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	461a      	mov	r2, r3
 8002b20:	493e      	ldr	r1, [pc, #248]	; (8002c1c <main+0x880>)
 8002b22:	483f      	ldr	r0, [pc, #252]	; (8002c20 <main+0x884>)
 8002b24:	f00d fcac 	bl	8010480 <siprintf>
 8002b28:	e00c      	b.n	8002b44 <main+0x7a8>
						  else sprintf(stline, "irKEY: %s", keyAll[kid].name);
 8002b2a:	f997 20fd 	ldrsb.w	r2, [r7, #253]	; 0xfd
 8002b2e:	4613      	mov	r3, r2
 8002b30:	005b      	lsls	r3, r3, #1
 8002b32:	4413      	add	r3, r2
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	4a38      	ldr	r2, [pc, #224]	; (8002c18 <main+0x87c>)
 8002b38:	4413      	add	r3, r2
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	4939      	ldr	r1, [pc, #228]	; (8002c24 <main+0x888>)
 8002b3e:	4838      	ldr	r0, [pc, #224]	; (8002c20 <main+0x884>)
 8002b40:	f00d fc9e 	bl	8010480 <siprintf>
				Report(1, "[que:%u] %s\r\n", cntEvt, stline);
 8002b44:	4b38      	ldr	r3, [pc, #224]	; (8002c28 <main+0x88c>)
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	4b34      	ldr	r3, [pc, #208]	; (8002c20 <main+0x884>)
 8002b4e:	4937      	ldr	r1, [pc, #220]	; (8002c2c <main+0x890>)
 8002b50:	2001      	movs	r0, #1
 8002b52:	f002 f993 	bl	8004e7c <Report>
				//
				if (kid != -1) {
 8002b56:	f997 30fd 	ldrsb.w	r3, [r7, #253]	; 0xfd
 8002b5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b5e:	f000 815e 	beq.w	8002e1e <main+0xa82>
					switch (kid) {
 8002b62:	f997 30fd 	ldrsb.w	r3, [r7, #253]	; 0xfd
 8002b66:	2b14      	cmp	r3, #20
 8002b68:	f200 817b 	bhi.w	8002e62 <main+0xac6>
 8002b6c:	a201      	add	r2, pc, #4	; (adr r2, 8002b74 <main+0x7d8>)
 8002b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b72:	bf00      	nop
 8002b74:	08002c3f 	.word	0x08002c3f
 8002b78:	08002bc9 	.word	0x08002bc9
 8002b7c:	08002c31 	.word	0x08002c31
 8002b80:	08002c89 	.word	0x08002c89
 8002b84:	08002c97 	.word	0x08002c97
 8002b88:	08002cad 	.word	0x08002cad
 8002b8c:	08002c4d 	.word	0x08002c4d
 8002b90:	08002c6b 	.word	0x08002c6b
 8002b94:	08002ca5 	.word	0x08002ca5
 8002b98:	08002d4f 	.word	0x08002d4f
 8002b9c:	08002d6b 	.word	0x08002d6b
 8002ba0:	08002d87 	.word	0x08002d87
 8002ba4:	08002d87 	.word	0x08002d87
 8002ba8:	08002d87 	.word	0x08002d87
 8002bac:	08002d87 	.word	0x08002d87
 8002bb0:	08002d87 	.word	0x08002d87
 8002bb4:	08002d87 	.word	0x08002d87
 8002bb8:	08002d87 	.word	0x08002d87
 8002bbc:	08002d87 	.word	0x08002d87
 8002bc0:	08002d87 	.word	0x08002d87
 8002bc4:	08002d87 	.word	0x08002d87
						case key_ch:
							putEvt(evt_Restart);
 8002bc8:	2001      	movs	r0, #1
 8002bca:	f001 fd45 	bl	8004658 <putEvt>
						break;
 8002bce:	e148      	b.n	8002e62 <main+0xac6>
 8002bd0:	2000301e 	.word	0x2000301e
 8002bd4:	200001f4 	.word	0x200001f4
 8002bd8:	08014290 	.word	0x08014290
 8002bdc:	08014138 	.word	0x08014138
 8002be0:	20003020 	.word	0x20003020
 8002be4:	2000301c 	.word	0x2000301c
 8002be8:	200001fc 	.word	0x200001fc
 8002bec:	20000208 	.word	0x20000208
 8002bf0:	200001ff 	.word	0x200001ff
 8002bf4:	20003022 	.word	0x20003022
 8002bf8:	080142a4 	.word	0x080142a4
 8002bfc:	2000300c 	.word	0x2000300c
 8002c00:	200036c0 	.word	0x200036c0
 8002c04:	20003767 	.word	0x20003767
 8002c08:	20003714 	.word	0x20003714
 8002c0c:	20003768 	.word	0x20003768
 8002c10:	2000065c 	.word	0x2000065c
 8002c14:	48000800 	.word	0x48000800
 8002c18:	08015668 	.word	0x08015668
 8002c1c:	080142e8 	.word	0x080142e8
 8002c20:	2000376c 	.word	0x2000376c
 8002c24:	080142f4 	.word	0x080142f4
 8002c28:	20001fe4 	.word	0x20001fe4
 8002c2c:	08014300 	.word	0x08014300
						case key_ch_plus:
							seek_up = 1;
 8002c30:	4b80      	ldr	r3, [pc, #512]	; (8002e34 <main+0xa98>)
 8002c32:	2201      	movs	r2, #1
 8002c34:	701a      	strb	r2, [r3, #0]
							putEvt(evt_Scan);
 8002c36:	200b      	movs	r0, #11
 8002c38:	f001 fd0e 	bl	8004658 <putEvt>
						break;
 8002c3c:	e111      	b.n	8002e62 <main+0xac6>
						case key_ch_minus:
							seek_up = 0;
 8002c3e:	4b7d      	ldr	r3, [pc, #500]	; (8002e34 <main+0xa98>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	701a      	strb	r2, [r3, #0]
							putEvt(evt_Scan);
 8002c44:	200b      	movs	r0, #11
 8002c46:	f001 fd07 	bl	8004658 <putEvt>
						break;
 8002c4a:	e10a      	b.n	8002e62 <main+0xac6>
						case key_minus:
							if (Volume) {
 8002c4c:	4b7a      	ldr	r3, [pc, #488]	; (8002e38 <main+0xa9c>)
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	f000 80e6 	beq.w	8002e22 <main+0xa86>
								newVolume = Volume - 1;
 8002c56:	4b78      	ldr	r3, [pc, #480]	; (8002e38 <main+0xa9c>)
 8002c58:	781b      	ldrb	r3, [r3, #0]
 8002c5a:	3b01      	subs	r3, #1
 8002c5c:	b2da      	uxtb	r2, r3
 8002c5e:	4b77      	ldr	r3, [pc, #476]	; (8002e3c <main+0xaa0>)
 8002c60:	701a      	strb	r2, [r3, #0]
								putEvt(evt_Vol);
 8002c62:	200d      	movs	r0, #13
 8002c64:	f001 fcf8 	bl	8004658 <putEvt>
							}
						break;
 8002c68:	e0db      	b.n	8002e22 <main+0xa86>
						case key_plus:
							if (Volume < 15) {
 8002c6a:	4b73      	ldr	r3, [pc, #460]	; (8002e38 <main+0xa9c>)
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	2b0e      	cmp	r3, #14
 8002c70:	f200 80d9 	bhi.w	8002e26 <main+0xa8a>
								newVolume = Volume + 1;
 8002c74:	4b70      	ldr	r3, [pc, #448]	; (8002e38 <main+0xa9c>)
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	3301      	adds	r3, #1
 8002c7a:	b2da      	uxtb	r2, r3
 8002c7c:	4b6f      	ldr	r3, [pc, #444]	; (8002e3c <main+0xaa0>)
 8002c7e:	701a      	strb	r2, [r3, #0]
								putEvt(evt_Vol);
 8002c80:	200d      	movs	r0, #13
 8002c82:	f001 fce9 	bl	8004658 <putEvt>
							}
						break;
 8002c86:	e0ce      	b.n	8002e26 <main+0xa8a>
						case key_left:
							seek_up = 0;
 8002c88:	4b6a      	ldr	r3, [pc, #424]	; (8002e34 <main+0xa98>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	701a      	strb	r2, [r3, #0]
							putEvt(evt_List);
 8002c8e:	2010      	movs	r0, #16
 8002c90:	f001 fce2 	bl	8004658 <putEvt>
						break;
 8002c94:	e0e5      	b.n	8002e62 <main+0xac6>
						case key_right:
							seek_up = 1;
 8002c96:	4b67      	ldr	r3, [pc, #412]	; (8002e34 <main+0xa98>)
 8002c98:	2201      	movs	r2, #1
 8002c9a:	701a      	strb	r2, [r3, #0]
							putEvt(evt_List);
 8002c9c:	2010      	movs	r0, #16
 8002c9e:	f001 fcdb 	bl	8004658 <putEvt>
						break;
 8002ca2:	e0de      	b.n	8002e62 <main+0xac6>
						case key_eq:// enable/disable print via uart
							putEvt(evt_Mute);//evt_Sleep);
 8002ca4:	200e      	movs	r0, #14
 8002ca6:	f001 fcd7 	bl	8004658 <putEvt>
						break;
 8002caa:	e0da      	b.n	8002e62 <main+0xac6>
						case key_sp:
							if (!ep_start) {
 8002cac:	f897 3109 	ldrb.w	r3, [r7, #265]	; 0x109
 8002cb0:	f083 0301 	eor.w	r3, r3, #1
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d036      	beq.n	8002d28 <main+0x98c>
								ep_start = true;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	f887 3109 	strb.w	r3, [r7, #265]	; 0x109
								memset(ep_str, 0, sizeof(ep_str));
 8002cc0:	f107 030c 	add.w	r3, r7, #12
 8002cc4:	2210      	movs	r2, #16
 8002cc6:	2100      	movs	r1, #0
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f00c fe61 	bl	800f990 <memset>
								ST7565_DrawFilledRectangle(0, SCREEN_HEIGHT - Font_6x8.FontHeight, SCREEN_WIDTH - 1, Font_6x8.FontHeight, PIX_OFF);
 8002cce:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8002cd8:	b29b      	uxth	r3, r3
 8002cda:	b219      	sxth	r1, r3
 8002cdc:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 8002ce0:	b21b      	sxth	r3, r3
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	9200      	str	r2, [sp, #0]
 8002ce6:	227f      	movs	r2, #127	; 0x7f
 8002ce8:	2000      	movs	r0, #0
 8002cea:	f7ff f89a 	bl	8001e22 <ST7565_DrawFilledRectangle>
								sprintf(tmp, "Time:");
 8002cee:	4954      	ldr	r1, [pc, #336]	; (8002e40 <main+0xaa4>)
 8002cf0:	4854      	ldr	r0, [pc, #336]	; (8002e44 <main+0xaa8>)
 8002cf2:	f00d fbc5 	bl	8010480 <siprintf>
								ST7565_Print(0, SCREEN_HEIGHT - Font_6x8.FontHeight, tmp, &Font_6x8, 1, PIX_ON);//печатаем надпись с указаным шрифтом и цветом(PIX_ON-белый, PIX_OFF-черный)
 8002cf6:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	b219      	sxth	r1, r3
 8002d04:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002d08:	2201      	movs	r2, #1
 8002d0a:	9201      	str	r2, [sp, #4]
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	9200      	str	r2, [sp, #0]
 8002d10:	4a4c      	ldr	r2, [pc, #304]	; (8002e44 <main+0xaa8>)
 8002d12:	2000      	movs	r0, #0
 8002d14:	f7fe fe2c 	bl	8001970 <ST7565_Print>
								ST7565_Update();
 8002d18:	f7fe fc7a 	bl	8001610 <ST7565_Update>
								ep_tmr = get_tmr(20);
 8002d1c:	2014      	movs	r0, #20
 8002d1e:	f001 ff3d 	bl	8004b9c <get_tmr>
 8002d22:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
								ep_start = false;
								ep_tmr = 0;
								epoch = atoi(ep_str);
								putEvt(evt_Epoch);
							}
						break;
 8002d26:	e09c      	b.n	8002e62 <main+0xac6>
								ep_start = false;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	f887 3109 	strb.w	r3, [r7, #265]	; 0x109
								ep_tmr = 0;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
								epoch = atoi(ep_str);
 8002d34:	f107 030c 	add.w	r3, r7, #12
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f00c fd24 	bl	800f786 <atoi>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	461a      	mov	r2, r3
 8002d42:	4b41      	ldr	r3, [pc, #260]	; (8002e48 <main+0xaac>)
 8002d44:	601a      	str	r2, [r3, #0]
								putEvt(evt_Epoch);
 8002d46:	2002      	movs	r0, #2
 8002d48:	f001 fc86 	bl	8004658 <putEvt>
						break;
 8002d4c:	e089      	b.n	8002e62 <main+0xac6>
						case key_100://bandUp();
							if (Band < MAX_BAND) {
 8002d4e:	4b3f      	ldr	r3, [pc, #252]	; (8002e4c <main+0xab0>)
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	2b03      	cmp	r3, #3
 8002d54:	d869      	bhi.n	8002e2a <main+0xa8e>
								newBand = Band + 1;
 8002d56:	4b3d      	ldr	r3, [pc, #244]	; (8002e4c <main+0xab0>)
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	3301      	adds	r3, #1
 8002d5c:	b2da      	uxtb	r2, r3
 8002d5e:	4b3c      	ldr	r3, [pc, #240]	; (8002e50 <main+0xab4>)
 8002d60:	701a      	strb	r2, [r3, #0]
								putEvt(evt_Band);
 8002d62:	2011      	movs	r0, #17
 8002d64:	f001 fc78 	bl	8004658 <putEvt>
							}
						break;
 8002d68:	e05f      	b.n	8002e2a <main+0xa8e>
						case key_200://bandDown();
							if (Band) {
 8002d6a:	4b38      	ldr	r3, [pc, #224]	; (8002e4c <main+0xab0>)
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d05d      	beq.n	8002e2e <main+0xa92>
								newBand = Band - 1;
 8002d72:	4b36      	ldr	r3, [pc, #216]	; (8002e4c <main+0xab0>)
 8002d74:	781b      	ldrb	r3, [r3, #0]
 8002d76:	3b01      	subs	r3, #1
 8002d78:	b2da      	uxtb	r2, r3
 8002d7a:	4b35      	ldr	r3, [pc, #212]	; (8002e50 <main+0xab4>)
 8002d7c:	701a      	strb	r2, [r3, #0]
								putEvt(evt_Band);
 8002d7e:	2011      	movs	r0, #17
 8002d80:	f001 fc6a 	bl	8004658 <putEvt>
							}
						break;
 8002d84:	e053      	b.n	8002e2e <main+0xa92>
						case key_5:
						case key_6:
						case key_7:
						case key_8:
						case key_9:
							if (ep_start) {
 8002d86:	f897 3109 	ldrb.w	r3, [r7, #265]	; 0x109
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d035      	beq.n	8002dfa <main+0xa5e>
								if (strlen(ep_str) < 10) {
 8002d8e:	f107 030c 	add.w	r3, r7, #12
 8002d92:	4618      	mov	r0, r3
 8002d94:	f7fd fa1c 	bl	80001d0 <strlen>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b09      	cmp	r3, #9
 8002d9c:	d860      	bhi.n	8002e60 <main+0xac4>
									char ch = (kid - key_0) + 0x30;
 8002d9e:	f897 30fd 	ldrb.w	r3, [r7, #253]	; 0xfd
 8002da2:	3325      	adds	r3, #37	; 0x25
 8002da4:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
									sprintf(ep_str+strlen(ep_str), "%c", ch);
 8002da8:	f107 030c 	add.w	r3, r7, #12
 8002dac:	4618      	mov	r0, r3
 8002dae:	f7fd fa0f 	bl	80001d0 <strlen>
 8002db2:	4602      	mov	r2, r0
 8002db4:	f107 030c 	add.w	r3, r7, #12
 8002db8:	4413      	add	r3, r2
 8002dba:	f897 20c3 	ldrb.w	r2, [r7, #195]	; 0xc3
 8002dbe:	4925      	ldr	r1, [pc, #148]	; (8002e54 <main+0xab8>)
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f00d fb5d 	bl	8010480 <siprintf>
									ST7565_Print(32, SCREEN_HEIGHT - Font_6x8.FontHeight, ep_str, &Font_6x8, 1, PIX_ON);//печатаем надпись с указаным шрифтом и цветом(PIX_ON-белый, PIX_OFF-черный)
 8002dc6:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 8002dca:	b29b      	uxth	r3, r3
 8002dcc:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	b219      	sxth	r1, r3
 8002dd4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002dd8:	f107 020c 	add.w	r2, r7, #12
 8002ddc:	2001      	movs	r0, #1
 8002dde:	9001      	str	r0, [sp, #4]
 8002de0:	2001      	movs	r0, #1
 8002de2:	9000      	str	r0, [sp, #0]
 8002de4:	2020      	movs	r0, #32
 8002de6:	f7fe fdc3 	bl	8001970 <ST7565_Print>
									ST7565_Update();
 8002dea:	f7fe fc11 	bl	8001610 <ST7565_Update>
									ep_tmr = get_tmr(20);
 8002dee:	2014      	movs	r0, #20
 8002df0:	f001 fed4 	bl	8004b9c <get_tmr>
 8002df4:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
								}
							} else {
									newFreq = list[kid - key_0 + 2].freq;//for band=2 only !!!
									putEvt(evt_Freq);
							}
						break;
 8002df8:	e032      	b.n	8002e60 <main+0xac4>
									newFreq = list[kid - key_0 + 2].freq;//for band=2 only !!!
 8002dfa:	f997 30fd 	ldrsb.w	r3, [r7, #253]	; 0xfd
 8002dfe:	f1a3 0209 	sub.w	r2, r3, #9
 8002e02:	4915      	ldr	r1, [pc, #84]	; (8002e58 <main+0xabc>)
 8002e04:	4613      	mov	r3, r2
 8002e06:	00db      	lsls	r3, r3, #3
 8002e08:	4413      	add	r3, r2
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	440b      	add	r3, r1
 8002e0e:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8002e12:	4a12      	ldr	r2, [pc, #72]	; (8002e5c <main+0xac0>)
 8002e14:	6013      	str	r3, [r2, #0]
									putEvt(evt_Freq);
 8002e16:	200c      	movs	r0, #12
 8002e18:	f001 fc1e 	bl	8004658 <putEvt>
						break;
 8002e1c:	e020      	b.n	8002e60 <main+0xac4>
					}//switch (kid)
				}//if (kid != -1)
 8002e1e:	bf00      	nop
 8002e20:	e01f      	b.n	8002e62 <main+0xac6>
						break;
 8002e22:	bf00      	nop
 8002e24:	e01d      	b.n	8002e62 <main+0xac6>
						break;
 8002e26:	bf00      	nop
 8002e28:	e01b      	b.n	8002e62 <main+0xac6>
						break;
 8002e2a:	bf00      	nop
 8002e2c:	e019      	b.n	8002e62 <main+0xac6>
						break;
 8002e2e:	bf00      	nop
 8002e30:	e017      	b.n	8002e62 <main+0xac6>
 8002e32:	bf00      	nop
 8002e34:	200001fe 	.word	0x200001fe
 8002e38:	200001ff 	.word	0x200001ff
 8002e3c:	20000200 	.word	0x20000200
 8002e40:	08014310 	.word	0x08014310
 8002e44:	20001348 	.word	0x20001348
 8002e48:	20000018 	.word	0x20000018
 8002e4c:	200001fc 	.word	0x200001fc
 8002e50:	200001fd 	.word	0x200001fd
 8002e54:	08014318 	.word	0x08014318
 8002e58:	20003034 	.word	0x20003034
 8002e5c:	200001f8 	.word	0x200001f8
						break;
 8002e60:	bf00      	nop
			}//if (decodeIRED(&results))
		}
  		if (ep_tmr) {
 8002e62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d00c      	beq.n	8002e84 <main+0xae8>
  			if (check_tmr(ep_tmr)) {
 8002e6a:	f8d7 0104 	ldr.w	r0, [r7, #260]	; 0x104
 8002e6e:	f001 fea2 	bl	8004bb6 <check_tmr>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d005      	beq.n	8002e84 <main+0xae8>
  				ep_tmr = 0;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  				ep_start = false;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	f887 3109 	strb.w	r3, [r7, #265]	; 0x109
  			}
  		}
		if (tmr_ired) {
 8002e84:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d016      	beq.n	8002eba <main+0xb1e>
			if (check_mstmr(tmr_ired)) {
 8002e8c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8002e90:	2200      	movs	r2, #0
 8002e92:	461c      	mov	r4, r3
 8002e94:	4615      	mov	r5, r2
 8002e96:	4620      	mov	r0, r4
 8002e98:	4629      	mov	r1, r5
 8002e9a:	f001 feb0 	bl	8004bfe <check_mstmr>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d00a      	beq.n	8002eba <main+0xb1e>
				tmr_ired = 0;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
				resumeIRED();
 8002eaa:	f7fe f943 	bl	8001134 <resumeIRED>
				HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002eb4:	48bc      	ldr	r0, [pc, #752]	; (80031a8 <main+0xe0c>)
 8002eb6:	f005 fb1f 	bl	80084f8 <HAL_GPIO_WritePin>
		}
#endif
/**/

#ifdef SET_FIFO_MODE
    	evt = getEvt();
 8002eba:	f001 fc51 	bl	8004760 <getEvt>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	4aba      	ldr	r2, [pc, #744]	; (80031ac <main+0xe10>)
 8002ec2:	6013      	str	r3, [r2, #0]
    	if (evt != evt_None) {
 8002ec4:	4bb9      	ldr	r3, [pc, #740]	; (80031ac <main+0xe10>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ecc:	f000 8678 	beq.w	8003bc0 <main+0x1824>
    		cntEvt = getEvtCount();
 8002ed0:	f001 fbb6 	bl	8004640 <getEvtCount>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	4bb5      	ldr	r3, [pc, #724]	; (80031b0 <main+0xe14>)
 8002eda:	701a      	strb	r2, [r3, #0]
    		if (evt != evt_Sec) {
 8002edc:	4bb3      	ldr	r3, [pc, #716]	; (80031ac <main+0xe10>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	2b08      	cmp	r3, #8
 8002ee2:	d050      	beq.n	8002f86 <main+0xbea>
    			Report(1, "[que:%u] get event '%s'\r\n", cntEvt, str_cmds[evt]);
 8002ee4:	4bb2      	ldr	r3, [pc, #712]	; (80031b0 <main+0xe14>)
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	4619      	mov	r1, r3
 8002eec:	4baf      	ldr	r3, [pc, #700]	; (80031ac <main+0xe10>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4ab0      	ldr	r2, [pc, #704]	; (80031b4 <main+0xe18>)
 8002ef2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ef6:	460a      	mov	r2, r1
 8002ef8:	49af      	ldr	r1, [pc, #700]	; (80031b8 <main+0xe1c>)
 8002efa:	2001      	movs	r0, #1
 8002efc:	f001 ffbe 	bl	8004e7c <Report>
	#ifdef SET_DISPLAY
    			ST7565_DrawFilledRectangle(0, SCREEN_HEIGHT - Font_6x8.FontHeight, SCREEN_WIDTH - 1, Font_6x8.FontHeight, PIX_OFF);
 8002f00:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	b219      	sxth	r1, r3
 8002f0e:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 8002f12:	b21b      	sxth	r3, r3
 8002f14:	2200      	movs	r2, #0
 8002f16:	9200      	str	r2, [sp, #0]
 8002f18:	227f      	movs	r2, #127	; 0x7f
 8002f1a:	2000      	movs	r0, #0
 8002f1c:	f7fe ff81 	bl	8001e22 <ST7565_DrawFilledRectangle>
    			dl = sprintf(tmp, "evt(%u) : %s", cntEvt, str_cmds[evt]);
 8002f20:	4ba3      	ldr	r3, [pc, #652]	; (80031b0 <main+0xe14>)
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	4619      	mov	r1, r3
 8002f28:	4ba0      	ldr	r3, [pc, #640]	; (80031ac <main+0xe10>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4aa1      	ldr	r2, [pc, #644]	; (80031b4 <main+0xe18>)
 8002f2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f32:	460a      	mov	r2, r1
 8002f34:	49a1      	ldr	r1, [pc, #644]	; (80031bc <main+0xe20>)
 8002f36:	48a2      	ldr	r0, [pc, #648]	; (80031c0 <main+0xe24>)
 8002f38:	f00d faa2 	bl	8010480 <siprintf>
 8002f3c:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
    			x = ((SCREEN_WIDTH - (Font_6x8.FontWidth * dl)) >> 1) & 0x7f;
 8002f40:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 8002f44:	461a      	mov	r2, r3
 8002f46:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002f4a:	fb02 f303 	mul.w	r3, r2, r3
 8002f4e:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002f52:	105b      	asrs	r3, r3, #1
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f5a:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
    			ST7565_Print(x, SCREEN_HEIGHT - Font_6x8.FontHeight, tmp, &Font_6x8, 1, PIX_ON);//печатаем надпись с указаным шрифтом и цветом(PIX_ON-белый, PIX_OFF-черный)
 8002f5e:	f9b7 00d2 	ldrsh.w	r0, [r7, #210]	; 0xd2
 8002f62:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	b219      	sxth	r1, r3
 8002f70:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002f74:	2201      	movs	r2, #1
 8002f76:	9201      	str	r2, [sp, #4]
 8002f78:	2201      	movs	r2, #1
 8002f7a:	9200      	str	r2, [sp, #0]
 8002f7c:	4a90      	ldr	r2, [pc, #576]	; (80031c0 <main+0xe24>)
 8002f7e:	f7fe fcf7 	bl	8001970 <ST7565_Print>
    			ST7565_Update();
 8002f82:	f7fe fb45 	bl	8001610 <ST7565_Update>
	#endif
    		}
    		switch (evt) {
 8002f86:	4b89      	ldr	r3, [pc, #548]	; (80031ac <main+0xe10>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2b17      	cmp	r3, #23
 8002f8c:	f200 8608 	bhi.w	8003ba0 <main+0x1804>
 8002f90:	a201      	add	r2, pc, #4	; (adr r2, 8002f98 <main+0xbfc>)
 8002f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f96:	bf00      	nop
 8002f98:	080038a9 	.word	0x080038a9
 8002f9c:	080038f7 	.word	0x080038f7
 8002fa0:	0800390f 	.word	0x0800390f
 8002fa4:	0800392f 	.word	0x0800392f
 8002fa8:	08003941 	.word	0x08003941
 8002fac:	08003b51 	.word	0x08003b51
 8002fb0:	08003941 	.word	0x08003941
 8002fb4:	08003a63 	.word	0x08003a63
 8002fb8:	08003609 	.word	0x08003609
 8002fbc:	080035f9 	.word	0x080035f9
 8002fc0:	08003891 	.word	0x08003891
 8002fc4:	080035d9 	.word	0x080035d9
 8002fc8:	08003435 	.word	0x08003435
 8002fcc:	08003331 	.word	0x08003331
 8002fd0:	080033ab 	.word	0x080033ab
 8002fd4:	080032b5 	.word	0x080032b5
 8002fd8:	08003211 	.word	0x08003211
 8002fdc:	080030d3 	.word	0x080030d3
 8002fe0:	0800319f 	.word	0x0800319f
 8002fe4:	08003ba1 	.word	0x08003ba1
 8002fe8:	080030b5 	.word	0x080030b5
 8002fec:	0800308b 	.word	0x0800308b
 8002ff0:	0800306d 	.word	0x0800306d
 8002ff4:	08002ff9 	.word	0x08002ff9
    			case evt_Rds:
    				memset(dataRDS, 0, sizeof(dataRDS));
 8002ff8:	2208      	movs	r2, #8
 8002ffa:	2100      	movs	r1, #0
 8002ffc:	4871      	ldr	r0, [pc, #452]	; (80031c4 <main+0xe28>)
 8002ffe:	f00c fcc7 	bl	800f990 <memset>
    				readyRds = rda5807_Get_RDSData(dataRDS, &syncRds);
 8003002:	4971      	ldr	r1, [pc, #452]	; (80031c8 <main+0xe2c>)
 8003004:	486f      	ldr	r0, [pc, #444]	; (80031c4 <main+0xe28>)
 8003006:	f003 f937 	bl	8006278 <rda5807_Get_RDSData>
 800300a:	4603      	mov	r3, r0
 800300c:	461a      	mov	r2, r3
 800300e:	4b6f      	ldr	r3, [pc, #444]	; (80031cc <main+0xe30>)
 8003010:	701a      	strb	r2, [r3, #0]
    				sprintf(tmp, "[RDS] ready=%d sync=%d :", readyRds, syncRds);
 8003012:	4b6e      	ldr	r3, [pc, #440]	; (80031cc <main+0xe30>)
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	461a      	mov	r2, r3
 8003018:	4b6b      	ldr	r3, [pc, #428]	; (80031c8 <main+0xe2c>)
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	496c      	ldr	r1, [pc, #432]	; (80031d0 <main+0xe34>)
 800301e:	4868      	ldr	r0, [pc, #416]	; (80031c0 <main+0xe24>)
 8003020:	f00d fa2e 	bl	8010480 <siprintf>
    				for (int8_t i = 0; i < sizeof(dataRDS); i++)
 8003024:	2300      	movs	r3, #0
 8003026:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
 800302a:	e014      	b.n	8003056 <main+0xcba>
    					sprintf(tmp+strlen(tmp), " %02X", dataRDS[i]);
 800302c:	4864      	ldr	r0, [pc, #400]	; (80031c0 <main+0xe24>)
 800302e:	f7fd f8cf 	bl	80001d0 <strlen>
 8003032:	4603      	mov	r3, r0
 8003034:	4a62      	ldr	r2, [pc, #392]	; (80031c0 <main+0xe24>)
 8003036:	1898      	adds	r0, r3, r2
 8003038:	f997 30fb 	ldrsb.w	r3, [r7, #251]	; 0xfb
 800303c:	4a61      	ldr	r2, [pc, #388]	; (80031c4 <main+0xe28>)
 800303e:	5cd3      	ldrb	r3, [r2, r3]
 8003040:	461a      	mov	r2, r3
 8003042:	4964      	ldr	r1, [pc, #400]	; (80031d4 <main+0xe38>)
 8003044:	f00d fa1c 	bl	8010480 <siprintf>
    				for (int8_t i = 0; i < sizeof(dataRDS); i++)
 8003048:	f997 30fb 	ldrsb.w	r3, [r7, #251]	; 0xfb
 800304c:	b2db      	uxtb	r3, r3
 800304e:	3301      	adds	r3, #1
 8003050:	b2db      	uxtb	r3, r3
 8003052:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
 8003056:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 800305a:	2b07      	cmp	r3, #7
 800305c:	d9e6      	bls.n	800302c <main+0xc90>
    				Report(1, "%s\r\n", tmp);
 800305e:	4a58      	ldr	r2, [pc, #352]	; (80031c0 <main+0xe24>)
 8003060:	495d      	ldr	r1, [pc, #372]	; (80031d8 <main+0xe3c>)
 8003062:	2001      	movs	r0, #1
 8003064:	f001 ff0a 	bl	8004e7c <Report>
    			break;
 8003068:	f000 bd9a 	b.w	8003ba0 <main+0x1804>
    			case evt_SleepCont:
    				sleep_mode = true;
 800306c:	4b5b      	ldr	r3, [pc, #364]	; (80031dc <main+0xe40>)
 800306e:	2201      	movs	r2, #1
 8003070:	701a      	strb	r2, [r3, #0]
    				//
    				HAL_SuspendTick();
 8003072:	f004 fc97 	bl	80079a4 <HAL_SuspendTick>
    				HAL_PWR_EnableSleepOnExit();
 8003076:	f006 ff37 	bl	8009ee8 <HAL_PWR_EnableSleepOnExit>
    				HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 800307a:	2101      	movs	r1, #1
 800307c:	2000      	movs	r0, #0
 800307e:	f006 feff 	bl	8009e80 <HAL_PWR_EnterSLEEPMode>
    				HAL_ResumeTick();
 8003082:	f004 fc9f 	bl	80079c4 <HAL_ResumeTick>
    			break;
 8003086:	f000 bd8b 	b.w	8003ba0 <main+0x1804>
    			case evt_Sleep:
    				Report(1, "Going into SLEEP MODE...\r\n");// in 1 second\r\n");
 800308a:	4955      	ldr	r1, [pc, #340]	; (80031e0 <main+0xe44>)
 800308c:	2001      	movs	r0, #1
 800308e:	f001 fef5 	bl	8004e7c <Report>
	#ifdef SET_BLE
    				bleWrite("AT+SLEEP1\r\n", 1);
	#endif
	#ifdef SET_DISPLAY
    				ST7565_CMD_DISPLAY(CMD_DISPLAY_OFF);
 8003092:	20ae      	movs	r0, #174	; 0xae
 8003094:	f7fe fa3e 	bl	8001514 <ST7565_CMD_DISPLAY>
	#endif
    				HAL_Delay(250);
 8003098:	20fa      	movs	r0, #250	; 0xfa
 800309a:	f004 fc5f 	bl	800795c <HAL_Delay>
    				HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 800309e:	2200      	movs	r2, #0
 80030a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80030a4:	4840      	ldr	r0, [pc, #256]	; (80031a8 <main+0xe0c>)
 80030a6:	f005 fa27 	bl	80084f8 <HAL_GPIO_WritePin>

    				putEvt(evt_SleepCont);
 80030aa:	2016      	movs	r0, #22
 80030ac:	f001 fad4 	bl	8004658 <putEvt>
    			break;
 80030b0:	f000 bd76 	b.w	8003ba0 <main+0x1804>
    			case evt_ExitSleep:
    				HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);
 80030b4:	2201      	movs	r2, #1
 80030b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80030ba:	483b      	ldr	r0, [pc, #236]	; (80031a8 <main+0xe0c>)
 80030bc:	f005 fa1c 	bl	80084f8 <HAL_GPIO_WritePin>
	#ifdef SET_DISPLAY
    				ST7565_CMD_DISPLAY(CMD_DISPLAY_ON);
 80030c0:	20af      	movs	r0, #175	; 0xaf
 80030c2:	f7fe fa27 	bl	8001514 <ST7565_CMD_DISPLAY>
	#endif
	#ifdef SET_BLE
    				bleWakeUp();//putEvt(evt_WakeUp);
	#endif
    				Report(1, "Exit from SLEEP MODE\r\n");
 80030c6:	4947      	ldr	r1, [pc, #284]	; (80031e4 <main+0xe48>)
 80030c8:	2001      	movs	r0, #1
 80030ca:	f001 fed7 	bl	8004e7c <Report>
    			break;
 80030ce:	f000 bd67 	b.w	8003ba0 <main+0x1804>
	#ifdef SET_BLE
    				bleWakeUp();
	#endif
    			break;
    			case evt_Band:
    				Band = newBand;
 80030d2:	4b45      	ldr	r3, [pc, #276]	; (80031e8 <main+0xe4c>)
 80030d4:	781a      	ldrb	r2, [r3, #0]
 80030d6:	4b45      	ldr	r3, [pc, #276]	; (80031ec <main+0xe50>)
 80030d8:	701a      	strb	r2, [r3, #0]
    				if (!rda5807_Set_Band(Band)) {
 80030da:	4b44      	ldr	r3, [pc, #272]	; (80031ec <main+0xe50>)
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	4618      	mov	r0, r3
 80030e0:	f003 f840 	bl	8006164 <rda5807_Set_Band>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	f040 8551 	bne.w	8003b8e <main+0x17f2>
    					sprintf(stb, "FM Band:%s", allBands[Band]);//(uint16_t)lBand, (uint16_t)rBand);
 80030ec:	4b3f      	ldr	r3, [pc, #252]	; (80031ec <main+0xe50>)
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	461a      	mov	r2, r3
 80030f2:	4b3f      	ldr	r3, [pc, #252]	; (80031f0 <main+0xe54>)
 80030f4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80030f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80030fc:	493d      	ldr	r1, [pc, #244]	; (80031f4 <main+0xe58>)
 80030fe:	4618      	mov	r0, r3
 8003100:	f00d f9be 	bl	8010480 <siprintf>
    					showLine(stb, lin3, &lit, true);
 8003104:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003108:	f8b7 10da 	ldrh.w	r1, [r7, #218]	; 0xda
 800310c:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8003110:	2301      	movs	r3, #1
 8003112:	f001 fca1 	bl	8004a58 <showLine>
    					Report(1, "[que:%u] set new band=%u '%s'\r\n", cntEvt, Band, allBands[Band]);
 8003116:	4b26      	ldr	r3, [pc, #152]	; (80031b0 <main+0xe14>)
 8003118:	781b      	ldrb	r3, [r3, #0]
 800311a:	b2db      	uxtb	r3, r3
 800311c:	4619      	mov	r1, r3
 800311e:	4b33      	ldr	r3, [pc, #204]	; (80031ec <main+0xe50>)
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	4618      	mov	r0, r3
 8003124:	4b31      	ldr	r3, [pc, #196]	; (80031ec <main+0xe50>)
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	461a      	mov	r2, r3
 800312a:	4b31      	ldr	r3, [pc, #196]	; (80031f0 <main+0xe54>)
 800312c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003130:	9300      	str	r3, [sp, #0]
 8003132:	4603      	mov	r3, r0
 8003134:	460a      	mov	r2, r1
 8003136:	4930      	ldr	r1, [pc, #192]	; (80031f8 <main+0xe5c>)
 8003138:	2001      	movs	r0, #1
 800313a:	f001 fe9f 	bl	8004e7c <Report>
    					if (next_evt == evt) {
 800313e:	4b2f      	ldr	r3, [pc, #188]	; (80031fc <main+0xe60>)
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	4b1a      	ldr	r3, [pc, #104]	; (80031ac <main+0xe10>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	429a      	cmp	r2, r3
 8003148:	d120      	bne.n	800318c <main+0xdf0>
    						if ((Freq < lBand) || (Freq > rBand)) {
 800314a:	4b2d      	ldr	r3, [pc, #180]	; (8003200 <main+0xe64>)
 800314c:	ed93 7a00 	vldr	s14, [r3]
 8003150:	4b2c      	ldr	r3, [pc, #176]	; (8003204 <main+0xe68>)
 8003152:	edd3 7a00 	vldr	s15, [r3]
 8003156:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800315a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800315e:	d40c      	bmi.n	800317a <main+0xdde>
 8003160:	4b27      	ldr	r3, [pc, #156]	; (8003200 <main+0xe64>)
 8003162:	ed93 7a00 	vldr	s14, [r3]
 8003166:	4b28      	ldr	r3, [pc, #160]	; (8003208 <main+0xe6c>)
 8003168:	edd3 7a00 	vldr	s15, [r3]
 800316c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003174:	dc01      	bgt.n	800317a <main+0xdde>
    					} else {
    						next_evt = evt;
    						putEvt(evt_Freq);
    					}
    				}
    			break;
 8003176:	f000 bd0a 	b.w	8003b8e <main+0x17f2>
    							newFreq = lBand;
 800317a:	4b22      	ldr	r3, [pc, #136]	; (8003204 <main+0xe68>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a23      	ldr	r2, [pc, #140]	; (800320c <main+0xe70>)
 8003180:	6013      	str	r3, [r2, #0]
    							putEvt(evt_Freq);
 8003182:	200c      	movs	r0, #12
 8003184:	f001 fa68 	bl	8004658 <putEvt>
    			break;
 8003188:	f000 bd01 	b.w	8003b8e <main+0x17f2>
    						next_evt = evt;
 800318c:	4b07      	ldr	r3, [pc, #28]	; (80031ac <main+0xe10>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a1a      	ldr	r2, [pc, #104]	; (80031fc <main+0xe60>)
 8003192:	6013      	str	r3, [r2, #0]
    						putEvt(evt_Freq);
 8003194:	200c      	movs	r0, #12
 8003196:	f001 fa5f 	bl	8004658 <putEvt>
    			break;
 800319a:	f000 bcf8 	b.w	8003b8e <main+0x17f2>
    			case evt_Cfg:
    				showCfg();
 800319e:	f7fe feaf 	bl	8001f00 <showCfg>
    			break;
 80031a2:	f000 bcfd 	b.w	8003ba0 <main+0x1804>
 80031a6:	bf00      	nop
 80031a8:	48000800 	.word	0x48000800
 80031ac:	200001dc 	.word	0x200001dc
 80031b0:	20001fe4 	.word	0x20001fe4
 80031b4:	2000007c 	.word	0x2000007c
 80031b8:	0801431c 	.word	0x0801431c
 80031bc:	08014338 	.word	0x08014338
 80031c0:	20001348 	.word	0x20001348
 80031c4:	20003028 	.word	0x20003028
 80031c8:	20003030 	.word	0x20003030
 80031cc:	20003031 	.word	0x20003031
 80031d0:	08014348 	.word	0x08014348
 80031d4:	08014364 	.word	0x08014364
 80031d8:	0801436c 	.word	0x0801436c
 80031dc:	20003769 	.word	0x20003769
 80031e0:	08014374 	.word	0x08014374
 80031e4:	08014390 	.word	0x08014390
 80031e8:	200001fd 	.word	0x200001fd
 80031ec:	200001fc 	.word	0x200001fc
 80031f0:	20000208 	.word	0x20000208
 80031f4:	08014260 	.word	0x08014260
 80031f8:	080143a8 	.word	0x080143a8
 80031fc:	200001e0 	.word	0x200001e0
 8003200:	200001f4 	.word	0x200001f4
 8003204:	20003014 	.word	0x20003014
 8003208:	20003018 	.word	0x20003018
 800320c:	200001f8 	.word	0x200001f8
    			case evt_List:
    				next_evt = evt_Freq;
 8003210:	4b94      	ldr	r3, [pc, #592]	; (8003464 <main+0x10c8>)
 8003212:	220c      	movs	r2, #12
 8003214:	601a      	str	r2, [r3, #0]
    				newFreq = getNextList(Freq, seek_up, &newBand);
 8003216:	4b94      	ldr	r3, [pc, #592]	; (8003468 <main+0x10cc>)
 8003218:	edd3 7a00 	vldr	s15, [r3]
 800321c:	4b93      	ldr	r3, [pc, #588]	; (800346c <main+0x10d0>)
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	b2db      	uxtb	r3, r3
 8003222:	4993      	ldr	r1, [pc, #588]	; (8003470 <main+0x10d4>)
 8003224:	4618      	mov	r0, r3
 8003226:	eeb0 0a67 	vmov.f32	s0, s15
 800322a:	f001 fb31 	bl	8004890 <getNextList>
 800322e:	eef0 7a40 	vmov.f32	s15, s0
 8003232:	4b90      	ldr	r3, [pc, #576]	; (8003474 <main+0x10d8>)
 8003234:	edc3 7a00 	vstr	s15, [r3]
					if (newBand == Band) {
 8003238:	4b8d      	ldr	r3, [pc, #564]	; (8003470 <main+0x10d4>)
 800323a:	781a      	ldrb	r2, [r3, #0]
 800323c:	4b8e      	ldr	r3, [pc, #568]	; (8003478 <main+0x10dc>)
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	429a      	cmp	r2, r3
 8003242:	d119      	bne.n	8003278 <main+0xedc>
						Report(1, "Band = newBand = %u -> goto set newFreq to %.1f (up = %u)\r\n", newBand, newFreq, seek_up);
 8003244:	4b8a      	ldr	r3, [pc, #552]	; (8003470 <main+0x10d4>)
 8003246:	781b      	ldrb	r3, [r3, #0]
 8003248:	461e      	mov	r6, r3
 800324a:	4b8a      	ldr	r3, [pc, #552]	; (8003474 <main+0x10d8>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4618      	mov	r0, r3
 8003250:	f7fd f97a 	bl	8000548 <__aeabi_f2d>
 8003254:	4602      	mov	r2, r0
 8003256:	460b      	mov	r3, r1
 8003258:	4984      	ldr	r1, [pc, #528]	; (800346c <main+0x10d0>)
 800325a:	7809      	ldrb	r1, [r1, #0]
 800325c:	b2c9      	uxtb	r1, r1
 800325e:	9102      	str	r1, [sp, #8]
 8003260:	e9cd 2300 	strd	r2, r3, [sp]
 8003264:	4632      	mov	r2, r6
 8003266:	4985      	ldr	r1, [pc, #532]	; (800347c <main+0x10e0>)
 8003268:	2001      	movs	r0, #1
 800326a:	f001 fe07 	bl	8004e7c <Report>
    					putEvt(evt_Freq);
 800326e:	200c      	movs	r0, #12
 8003270:	f001 f9f2 	bl	8004658 <putEvt>
					} else {
						Report(1, "Band = %u -> goto set newBand to %u (newFreq to %.1f up = %u)\r\n", Band, newBand, newFreq, seek_up);
    					putEvt(evt_Band);
					}
    			break;
 8003274:	f000 bc94 	b.w	8003ba0 <main+0x1804>
						Report(1, "Band = %u -> goto set newBand to %u (newFreq to %.1f up = %u)\r\n", Band, newBand, newFreq, seek_up);
 8003278:	4b7f      	ldr	r3, [pc, #508]	; (8003478 <main+0x10dc>)
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	461e      	mov	r6, r3
 800327e:	4b7c      	ldr	r3, [pc, #496]	; (8003470 <main+0x10d4>)
 8003280:	781b      	ldrb	r3, [r3, #0]
 8003282:	4698      	mov	r8, r3
 8003284:	4b7b      	ldr	r3, [pc, #492]	; (8003474 <main+0x10d8>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4618      	mov	r0, r3
 800328a:	f7fd f95d 	bl	8000548 <__aeabi_f2d>
 800328e:	4602      	mov	r2, r0
 8003290:	460b      	mov	r3, r1
 8003292:	4976      	ldr	r1, [pc, #472]	; (800346c <main+0x10d0>)
 8003294:	7809      	ldrb	r1, [r1, #0]
 8003296:	b2c9      	uxtb	r1, r1
 8003298:	9102      	str	r1, [sp, #8]
 800329a:	e9cd 2300 	strd	r2, r3, [sp]
 800329e:	4643      	mov	r3, r8
 80032a0:	4632      	mov	r2, r6
 80032a2:	4977      	ldr	r1, [pc, #476]	; (8003480 <main+0x10e4>)
 80032a4:	2001      	movs	r0, #1
 80032a6:	f001 fde9 	bl	8004e7c <Report>
    					putEvt(evt_Band);
 80032aa:	2011      	movs	r0, #17
 80032ac:	f001 f9d4 	bl	8004658 <putEvt>
    			break;
 80032b0:	f000 bc76 	b.w	8003ba0 <main+0x1804>
    			case evt_Bass:
    				if (newBassBoost != BassBoost) {
 80032b4:	4b73      	ldr	r3, [pc, #460]	; (8003484 <main+0x10e8>)
 80032b6:	781a      	ldrb	r2, [r3, #0]
 80032b8:	4b73      	ldr	r3, [pc, #460]	; (8003488 <main+0x10ec>)
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	429a      	cmp	r2, r3
 80032be:	f000 8468 	beq.w	8003b92 <main+0x17f6>
    					BassBoost = newBassBoost;
 80032c2:	4b70      	ldr	r3, [pc, #448]	; (8003484 <main+0x10e8>)
 80032c4:	781a      	ldrb	r2, [r3, #0]
 80032c6:	4b70      	ldr	r3, [pc, #448]	; (8003488 <main+0x10ec>)
 80032c8:	701a      	strb	r2, [r3, #0]
    					rda5807_SetBassBoost(BassBoost);
 80032ca:	4b6f      	ldr	r3, [pc, #444]	; (8003488 <main+0x10ec>)
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	4618      	mov	r0, r3
 80032d0:	f002 fe08 	bl	8005ee4 <rda5807_SetBassBoost>
    					//
    					if (noMute)
 80032d4:	4b6d      	ldr	r3, [pc, #436]	; (800348c <main+0x10f0>)
 80032d6:	781b      	ldrb	r3, [r3, #0]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d00a      	beq.n	80032f2 <main+0xf56>
    						sprintf(st, "Bass:%u Vol:%u", BassBoost, Volume);
 80032dc:	4b6a      	ldr	r3, [pc, #424]	; (8003488 <main+0x10ec>)
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	461a      	mov	r2, r3
 80032e2:	4b6b      	ldr	r3, [pc, #428]	; (8003490 <main+0x10f4>)
 80032e4:	781b      	ldrb	r3, [r3, #0]
 80032e6:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 80032ea:	496a      	ldr	r1, [pc, #424]	; (8003494 <main+0x10f8>)
 80032ec:	f00d f8c8 	bl	8010480 <siprintf>
 80032f0:	e009      	b.n	8003306 <main+0xf6a>
    					else
    						sprintf(st, "Bass:%u Vol:%u M", BassBoost, Volume);
 80032f2:	4b65      	ldr	r3, [pc, #404]	; (8003488 <main+0x10ec>)
 80032f4:	781b      	ldrb	r3, [r3, #0]
 80032f6:	461a      	mov	r2, r3
 80032f8:	4b65      	ldr	r3, [pc, #404]	; (8003490 <main+0x10f4>)
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8003300:	4965      	ldr	r1, [pc, #404]	; (8003498 <main+0x10fc>)
 8003302:	f00d f8bd 	bl	8010480 <siprintf>
    					showLine(st, lin4, &lim, true);
 8003306:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800330a:	f8b7 10d8 	ldrh.w	r1, [r7, #216]	; 0xd8
 800330e:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8003312:	2301      	movs	r3, #1
 8003314:	f001 fba0 	bl	8004a58 <showLine>
    					Report(1, "[que:%u] set new BassBoost to %u\r\n", cntEvt, BassBoost);
 8003318:	4b60      	ldr	r3, [pc, #384]	; (800349c <main+0x1100>)
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	b2db      	uxtb	r3, r3
 800331e:	461a      	mov	r2, r3
 8003320:	4b59      	ldr	r3, [pc, #356]	; (8003488 <main+0x10ec>)
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	495e      	ldr	r1, [pc, #376]	; (80034a0 <main+0x1104>)
 8003326:	2001      	movs	r0, #1
 8003328:	f001 fda8 	bl	8004e7c <Report>
    				}
    			break;
 800332c:	f000 bc31 	b.w	8003b92 <main+0x17f6>
    			case evt_Vol:
    				if (newVolume != Volume) {
 8003330:	4b5c      	ldr	r3, [pc, #368]	; (80034a4 <main+0x1108>)
 8003332:	781a      	ldrb	r2, [r3, #0]
 8003334:	4b56      	ldr	r3, [pc, #344]	; (8003490 <main+0x10f4>)
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	429a      	cmp	r2, r3
 800333a:	f000 842c 	beq.w	8003b96 <main+0x17fa>
    					Volume = newVolume;
 800333e:	4b59      	ldr	r3, [pc, #356]	; (80034a4 <main+0x1108>)
 8003340:	781a      	ldrb	r2, [r3, #0]
 8003342:	4b53      	ldr	r3, [pc, #332]	; (8003490 <main+0x10f4>)
 8003344:	701a      	strb	r2, [r3, #0]
    					rda5807_SetVolume(Volume);
 8003346:	4b52      	ldr	r3, [pc, #328]	; (8003490 <main+0x10f4>)
 8003348:	781b      	ldrb	r3, [r3, #0]
 800334a:	4618      	mov	r0, r3
 800334c:	f002 fd82 	bl	8005e54 <rda5807_SetVolume>
    					//
    					if (noMute)
 8003350:	4b4e      	ldr	r3, [pc, #312]	; (800348c <main+0x10f0>)
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d00a      	beq.n	800336e <main+0xfd2>
    						sprintf(st, "Bass:%u Vol:%u", BassBoost, Volume);
 8003358:	4b4b      	ldr	r3, [pc, #300]	; (8003488 <main+0x10ec>)
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	461a      	mov	r2, r3
 800335e:	4b4c      	ldr	r3, [pc, #304]	; (8003490 <main+0x10f4>)
 8003360:	781b      	ldrb	r3, [r3, #0]
 8003362:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8003366:	494b      	ldr	r1, [pc, #300]	; (8003494 <main+0x10f8>)
 8003368:	f00d f88a 	bl	8010480 <siprintf>
 800336c:	e009      	b.n	8003382 <main+0xfe6>
    					else
    						sprintf(st, "Bass:%u Vol:%u M", BassBoost, Volume);
 800336e:	4b46      	ldr	r3, [pc, #280]	; (8003488 <main+0x10ec>)
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	461a      	mov	r2, r3
 8003374:	4b46      	ldr	r3, [pc, #280]	; (8003490 <main+0x10f4>)
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 800337c:	4946      	ldr	r1, [pc, #280]	; (8003498 <main+0x10fc>)
 800337e:	f00d f87f 	bl	8010480 <siprintf>
    					showLine(st, lin4, &lim, true);
 8003382:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8003386:	f8b7 10d8 	ldrh.w	r1, [r7, #216]	; 0xd8
 800338a:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 800338e:	2301      	movs	r3, #1
 8003390:	f001 fb62 	bl	8004a58 <showLine>
    					Report(1, "[que:%u] set new Volume to %u\r\n", cntEvt, Volume);
 8003394:	4b41      	ldr	r3, [pc, #260]	; (800349c <main+0x1100>)
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	b2db      	uxtb	r3, r3
 800339a:	461a      	mov	r2, r3
 800339c:	4b3c      	ldr	r3, [pc, #240]	; (8003490 <main+0x10f4>)
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	4941      	ldr	r1, [pc, #260]	; (80034a8 <main+0x110c>)
 80033a2:	2001      	movs	r0, #1
 80033a4:	f001 fd6a 	bl	8004e7c <Report>
    				}
    			break;
 80033a8:	e3f5      	b.n	8003b96 <main+0x17fa>
    			case evt_Mute:
    				noMute = (~noMute) & 1;
 80033aa:	4b38      	ldr	r3, [pc, #224]	; (800348c <main+0x10f0>)
 80033ac:	781b      	ldrb	r3, [r3, #0]
 80033ae:	f003 0301 	and.w	r3, r3, #1
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	bf0c      	ite	eq
 80033b6:	2301      	moveq	r3, #1
 80033b8:	2300      	movne	r3, #0
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	461a      	mov	r2, r3
 80033be:	4b33      	ldr	r3, [pc, #204]	; (800348c <main+0x10f0>)
 80033c0:	701a      	strb	r2, [r3, #0]
    				rda5807_Set_Mute(noMute);
 80033c2:	4b32      	ldr	r3, [pc, #200]	; (800348c <main+0x10f0>)
 80033c4:	781b      	ldrb	r3, [r3, #0]
 80033c6:	4618      	mov	r0, r3
 80033c8:	f002 ff38 	bl	800623c <rda5807_Set_Mute>
    				//
    				if (noMute)
 80033cc:	4b2f      	ldr	r3, [pc, #188]	; (800348c <main+0x10f0>)
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d00a      	beq.n	80033ea <main+0x104e>
    					sprintf(st, "Bass:%u Vol:%u", BassBoost, Volume);
 80033d4:	4b2c      	ldr	r3, [pc, #176]	; (8003488 <main+0x10ec>)
 80033d6:	781b      	ldrb	r3, [r3, #0]
 80033d8:	461a      	mov	r2, r3
 80033da:	4b2d      	ldr	r3, [pc, #180]	; (8003490 <main+0x10f4>)
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 80033e2:	492c      	ldr	r1, [pc, #176]	; (8003494 <main+0x10f8>)
 80033e4:	f00d f84c 	bl	8010480 <siprintf>
 80033e8:	e009      	b.n	80033fe <main+0x1062>
    				else
    					sprintf(st, "Bass:%u Vol:%u M", BassBoost, Volume);
 80033ea:	4b27      	ldr	r3, [pc, #156]	; (8003488 <main+0x10ec>)
 80033ec:	781b      	ldrb	r3, [r3, #0]
 80033ee:	461a      	mov	r2, r3
 80033f0:	4b27      	ldr	r3, [pc, #156]	; (8003490 <main+0x10f4>)
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 80033f8:	4927      	ldr	r1, [pc, #156]	; (8003498 <main+0x10fc>)
 80033fa:	f00d f841 	bl	8010480 <siprintf>
    				showLine(st, lin4, &lim, true);
 80033fe:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8003402:	f8b7 10d8 	ldrh.w	r1, [r7, #216]	; 0xd8
 8003406:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 800340a:	2301      	movs	r3, #1
 800340c:	f001 fb24 	bl	8004a58 <showLine>
    				Report(1, "[que:%u] set Mute to %u\r\n", cntEvt, (~noMute) & 1);
 8003410:	4b22      	ldr	r3, [pc, #136]	; (800349c <main+0x1100>)
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	b2db      	uxtb	r3, r3
 8003416:	461a      	mov	r2, r3
 8003418:	4b1c      	ldr	r3, [pc, #112]	; (800348c <main+0x10f0>)
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	f003 0301 	and.w	r3, r3, #1
 8003420:	2b00      	cmp	r3, #0
 8003422:	bf0c      	ite	eq
 8003424:	2301      	moveq	r3, #1
 8003426:	2300      	movne	r3, #0
 8003428:	b2db      	uxtb	r3, r3
 800342a:	4920      	ldr	r1, [pc, #128]	; (80034ac <main+0x1110>)
 800342c:	2001      	movs	r0, #1
 800342e:	f001 fd25 	bl	8004e7c <Report>
    			break;
 8003432:	e3b5      	b.n	8003ba0 <main+0x1804>
    			case evt_Freq:
    				if ((newFreq >= lBand) && (newFreq <= rBand)) {
 8003434:	4b0f      	ldr	r3, [pc, #60]	; (8003474 <main+0x10d8>)
 8003436:	ed93 7a00 	vldr	s14, [r3]
 800343a:	4b1d      	ldr	r3, [pc, #116]	; (80034b0 <main+0x1114>)
 800343c:	edd3 7a00 	vldr	s15, [r3]
 8003440:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003448:	da00      	bge.n	800344c <main+0x10b0>
    						sprintf(sta, "%s", nameStation(Freq));
    						showLine(sta, lin6, &lia, true);
    						Report(1, "[que:%u] set new Freq to %.1f %s (Chan:%u)\r\n", cntEvt, Freq, sta, Chan);
    					}
    				}
				break;
 800344a:	e3a6      	b.n	8003b9a <main+0x17fe>
    				if ((newFreq >= lBand) && (newFreq <= rBand)) {
 800344c:	4b09      	ldr	r3, [pc, #36]	; (8003474 <main+0x10d8>)
 800344e:	ed93 7a00 	vldr	s14, [r3]
 8003452:	4b18      	ldr	r3, [pc, #96]	; (80034b4 <main+0x1118>)
 8003454:	edd3 7a00 	vldr	s15, [r3]
 8003458:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800345c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003460:	d92a      	bls.n	80034b8 <main+0x111c>
				break;
 8003462:	e39a      	b.n	8003b9a <main+0x17fe>
 8003464:	200001e0 	.word	0x200001e0
 8003468:	200001f4 	.word	0x200001f4
 800346c:	200001fe 	.word	0x200001fe
 8003470:	200001fd 	.word	0x200001fd
 8003474:	200001f8 	.word	0x200001f8
 8003478:	200001fc 	.word	0x200001fc
 800347c:	080143c8 	.word	0x080143c8
 8003480:	08014404 	.word	0x08014404
 8003484:	20003023 	.word	0x20003023
 8003488:	20003022 	.word	0x20003022
 800348c:	20000201 	.word	0x20000201
 8003490:	200001ff 	.word	0x200001ff
 8003494:	0801426c 	.word	0x0801426c
 8003498:	08014444 	.word	0x08014444
 800349c:	20001fe4 	.word	0x20001fe4
 80034a0:	08014458 	.word	0x08014458
 80034a4:	20000200 	.word	0x20000200
 80034a8:	0801447c 	.word	0x0801447c
 80034ac:	0801449c 	.word	0x0801449c
 80034b0:	20003014 	.word	0x20003014
 80034b4:	20003018 	.word	0x20003018
    					if (newFreq != Freq) {
 80034b8:	4bbd      	ldr	r3, [pc, #756]	; (80037b0 <main+0x1414>)
 80034ba:	ed93 7a00 	vldr	s14, [r3]
 80034be:	4bbd      	ldr	r3, [pc, #756]	; (80037b4 <main+0x1418>)
 80034c0:	edd3 7a00 	vldr	s15, [r3]
 80034c4:	eeb4 7a67 	vcmp.f32	s14, s15
 80034c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034cc:	f000 8365 	beq.w	8003b9a <main+0x17fe>
    						Freq = newFreq;
 80034d0:	4bb7      	ldr	r3, [pc, #732]	; (80037b0 <main+0x1414>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4ab7      	ldr	r2, [pc, #732]	; (80037b4 <main+0x1418>)
 80034d6:	6013      	str	r3, [r2, #0]
    						uint16_t fr = (uint16_t)(Freq * 10);
 80034d8:	4bb6      	ldr	r3, [pc, #728]	; (80037b4 <main+0x1418>)
 80034da:	edd3 7a00 	vldr	s15, [r3]
 80034de:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80034e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80034e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034ea:	ee17 3a90 	vmov	r3, s15
 80034ee:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0
    						rda5807_SetFreq_In100Khz(fr);
 80034f2:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 80034f6:	4618      	mov	r0, r3
 80034f8:	f002 fd14 	bl	8005f24 <rda5807_SetFreq_In100Khz>
    						stereo = rda5807_Get_StereoMonoFlag();
 80034fc:	f002 fe08 	bl	8006110 <rda5807_Get_StereoMonoFlag>
 8003500:	4603      	mov	r3, r0
 8003502:	461a      	mov	r2, r3
 8003504:	4bac      	ldr	r3, [pc, #688]	; (80037b8 <main+0x141c>)
 8003506:	701a      	strb	r2, [r3, #0]
    						Chan = rda5807_Get_Channel();
 8003508:	f002 fe1a 	bl	8006140 <rda5807_Get_Channel>
 800350c:	4603      	mov	r3, r0
 800350e:	461a      	mov	r2, r3
 8003510:	4baa      	ldr	r3, [pc, #680]	; (80037bc <main+0x1420>)
 8003512:	801a      	strh	r2, [r3, #0]
    						if (stereo)
 8003514:	4ba8      	ldr	r3, [pc, #672]	; (80037b8 <main+0x141c>)
 8003516:	781b      	ldrb	r3, [r3, #0]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d012      	beq.n	8003542 <main+0x11a6>
    							sprintf(st, "Rssi:%u Freq:%.1f S", RSSI, Freq);
 800351c:	4ba8      	ldr	r3, [pc, #672]	; (80037c0 <main+0x1424>)
 800351e:	881b      	ldrh	r3, [r3, #0]
 8003520:	461e      	mov	r6, r3
 8003522:	4ba4      	ldr	r3, [pc, #656]	; (80037b4 <main+0x1418>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4618      	mov	r0, r3
 8003528:	f7fd f80e 	bl	8000548 <__aeabi_f2d>
 800352c:	4602      	mov	r2, r0
 800352e:	460b      	mov	r3, r1
 8003530:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8003534:	e9cd 2300 	strd	r2, r3, [sp]
 8003538:	4632      	mov	r2, r6
 800353a:	49a2      	ldr	r1, [pc, #648]	; (80037c4 <main+0x1428>)
 800353c:	f00c ffa0 	bl	8010480 <siprintf>
 8003540:	e011      	b.n	8003566 <main+0x11ca>
    							sprintf(st, "Rssi:%u Freq:%.1f", RSSI, Freq);
 8003542:	4b9f      	ldr	r3, [pc, #636]	; (80037c0 <main+0x1424>)
 8003544:	881b      	ldrh	r3, [r3, #0]
 8003546:	461e      	mov	r6, r3
 8003548:	4b9a      	ldr	r3, [pc, #616]	; (80037b4 <main+0x1418>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4618      	mov	r0, r3
 800354e:	f7fc fffb 	bl	8000548 <__aeabi_f2d>
 8003552:	4602      	mov	r2, r0
 8003554:	460b      	mov	r3, r1
 8003556:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 800355a:	e9cd 2300 	strd	r2, r3, [sp]
 800355e:	4632      	mov	r2, r6
 8003560:	4999      	ldr	r1, [pc, #612]	; (80037c8 <main+0x142c>)
 8003562:	f00c ff8d 	bl	8010480 <siprintf>
    						showLine(st, lin5, &lil, false);
 8003566:	f107 0220 	add.w	r2, r7, #32
 800356a:	f8b7 10d6 	ldrh.w	r1, [r7, #214]	; 0xd6
 800356e:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8003572:	2300      	movs	r3, #0
 8003574:	f001 fa70 	bl	8004a58 <showLine>
    						sprintf(sta, "%s", nameStation(Freq));
 8003578:	4b8e      	ldr	r3, [pc, #568]	; (80037b4 <main+0x1418>)
 800357a:	edd3 7a00 	vldr	s15, [r3]
 800357e:	eeb0 0a67 	vmov.f32	s0, s15
 8003582:	f001 f93f 	bl	8004804 <nameStation>
 8003586:	4602      	mov	r2, r0
 8003588:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800358c:	498f      	ldr	r1, [pc, #572]	; (80037cc <main+0x1430>)
 800358e:	4618      	mov	r0, r3
 8003590:	f00c ff76 	bl	8010480 <siprintf>
    						showLine(sta, lin6, &lia, true);
 8003594:	f107 021c 	add.w	r2, r7, #28
 8003598:	f8b7 10d4 	ldrh.w	r1, [r7, #212]	; 0xd4
 800359c:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 80035a0:	2301      	movs	r3, #1
 80035a2:	f001 fa59 	bl	8004a58 <showLine>
    						Report(1, "[que:%u] set new Freq to %.1f %s (Chan:%u)\r\n", cntEvt, Freq, sta, Chan);
 80035a6:	4b8a      	ldr	r3, [pc, #552]	; (80037d0 <main+0x1434>)
 80035a8:	781b      	ldrb	r3, [r3, #0]
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	461e      	mov	r6, r3
 80035ae:	4b81      	ldr	r3, [pc, #516]	; (80037b4 <main+0x1418>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4618      	mov	r0, r3
 80035b4:	f7fc ffc8 	bl	8000548 <__aeabi_f2d>
 80035b8:	4602      	mov	r2, r0
 80035ba:	460b      	mov	r3, r1
 80035bc:	497f      	ldr	r1, [pc, #508]	; (80037bc <main+0x1420>)
 80035be:	8809      	ldrh	r1, [r1, #0]
 80035c0:	9103      	str	r1, [sp, #12]
 80035c2:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 80035c6:	9102      	str	r1, [sp, #8]
 80035c8:	e9cd 2300 	strd	r2, r3, [sp]
 80035cc:	4632      	mov	r2, r6
 80035ce:	4981      	ldr	r1, [pc, #516]	; (80037d4 <main+0x1438>)
 80035d0:	2001      	movs	r0, #1
 80035d2:	f001 fc53 	bl	8004e7c <Report>
				break;
 80035d6:	e2e0      	b.n	8003b9a <main+0x17fe>
    			case evt_Scan:
    				if (!scan) {
 80035d8:	4b7f      	ldr	r3, [pc, #508]	; (80037d8 <main+0x143c>)
 80035da:	781b      	ldrb	r3, [r3, #0]
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	2b00      	cmp	r3, #0
 80035e0:	f040 82dd 	bne.w	8003b9e <main+0x1802>
    					scan = 1;
 80035e4:	4b7c      	ldr	r3, [pc, #496]	; (80037d8 <main+0x143c>)
 80035e6:	2201      	movs	r2, #1
 80035e8:	701a      	strb	r2, [r3, #0]
    					rda5807_StartSeek(seek_up);
 80035ea:	4b7c      	ldr	r3, [pc, #496]	; (80037dc <main+0x1440>)
 80035ec:	781b      	ldrb	r3, [r3, #0]
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	4618      	mov	r0, r3
 80035f2:	f002 fd51 	bl	8006098 <rda5807_StartSeek>
    				}
    			break;
 80035f6:	e2d2      	b.n	8003b9e <main+0x1802>
    			case evt_Ver:
    				Report(1, "Ver.%s\r\n", ver);
 80035f8:	4b79      	ldr	r3, [pc, #484]	; (80037e0 <main+0x1444>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	461a      	mov	r2, r3
 80035fe:	4979      	ldr	r1, [pc, #484]	; (80037e4 <main+0x1448>)
 8003600:	2001      	movs	r0, #1
 8003602:	f001 fc3b 	bl	8004e7c <Report>
    			break;
 8003606:	e2cb      	b.n	8003ba0 <main+0x1804>
    			case evt_Sec:
    			{
	#ifdef SET_DISPLAY
    				dl = sec2str(st);
 8003608:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800360c:	4618      	mov	r0, r3
 800360e:	f001 fb9b 	bl	8004d48 <sec2str>
 8003612:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
    				x = ((SCREEN_WIDTH - (Font_6x8.FontWidth * dl)) >> 1) & 0x7f;
 8003616:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 800361a:	461a      	mov	r2, r3
 800361c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003620:	fb02 f303 	mul.w	r3, r2, r3
 8003624:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8003628:	105b      	asrs	r3, r3, #1
 800362a:	b29b      	uxth	r3, r3
 800362c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003630:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
    				ST7565_Print(x, lin1, st, &Font_6x8, 0, PIX_OFF);
 8003634:	f9b7 00d2 	ldrsh.w	r0, [r7, #210]	; 0xd2
 8003638:	f9b7 10de 	ldrsh.w	r1, [r7, #222]	; 0xde
 800363c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003640:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8003644:	2600      	movs	r6, #0
 8003646:	9601      	str	r6, [sp, #4]
 8003648:	2600      	movs	r6, #0
 800364a:	9600      	str	r6, [sp, #0]
 800364c:	f7fe f990 	bl	8001970 <ST7565_Print>
	#endif
    				//
    				if (scan) {
 8003650:	4b61      	ldr	r3, [pc, #388]	; (80037d8 <main+0x143c>)
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	b2db      	uxtb	r3, r3
 8003656:	2b00      	cmp	r3, #0
 8003658:	d050      	beq.n	80036fc <main+0x1360>
    					if (rda5807_Get_SeekTuneReadyFlag()) {
 800365a:	f002 fd47 	bl	80060ec <rda5807_Get_SeekTuneReadyFlag>
 800365e:	4603      	mov	r3, r0
 8003660:	2b00      	cmp	r3, #0
 8003662:	d04b      	beq.n	80036fc <main+0x1360>
    						Freq = (float)rda5807_GetFreq_In100Khz();
 8003664:	f002 fcd8 	bl	8006018 <rda5807_GetFreq_In100Khz>
 8003668:	4603      	mov	r3, r0
 800366a:	ee07 3a90 	vmov	s15, r3
 800366e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003672:	4b50      	ldr	r3, [pc, #320]	; (80037b4 <main+0x1418>)
 8003674:	edc3 7a00 	vstr	s15, [r3]
    						Freq /= 10;
 8003678:	4b4e      	ldr	r3, [pc, #312]	; (80037b4 <main+0x1418>)
 800367a:	ed93 7a00 	vldr	s14, [r3]
 800367e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003682:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003686:	4b4b      	ldr	r3, [pc, #300]	; (80037b4 <main+0x1418>)
 8003688:	edc3 7a00 	vstr	s15, [r3]
    						scan = 0;
 800368c:	4b52      	ldr	r3, [pc, #328]	; (80037d8 <main+0x143c>)
 800368e:	2200      	movs	r2, #0
 8003690:	701a      	strb	r2, [r3, #0]
    						Chan = rda5807_Get_Channel();
 8003692:	f002 fd55 	bl	8006140 <rda5807_Get_Channel>
 8003696:	4603      	mov	r3, r0
 8003698:	461a      	mov	r2, r3
 800369a:	4b48      	ldr	r3, [pc, #288]	; (80037bc <main+0x1420>)
 800369c:	801a      	strh	r2, [r3, #0]
    						sprintf(sta, "%s", nameStation(Freq));
 800369e:	4b45      	ldr	r3, [pc, #276]	; (80037b4 <main+0x1418>)
 80036a0:	edd3 7a00 	vldr	s15, [r3]
 80036a4:	eeb0 0a67 	vmov.f32	s0, s15
 80036a8:	f001 f8ac 	bl	8004804 <nameStation>
 80036ac:	4602      	mov	r2, r0
 80036ae:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80036b2:	4946      	ldr	r1, [pc, #280]	; (80037cc <main+0x1430>)
 80036b4:	4618      	mov	r0, r3
 80036b6:	f00c fee3 	bl	8010480 <siprintf>
    						showLine(sta, lin6, &lia, true);
 80036ba:	f107 021c 	add.w	r2, r7, #28
 80036be:	f8b7 10d4 	ldrh.w	r1, [r7, #212]	; 0xd4
 80036c2:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 80036c6:	2301      	movs	r3, #1
 80036c8:	f001 f9c6 	bl	8004a58 <showLine>
    						Report(1, "[que:%u] set new Freq to %.1f %s (Chan:%u)\r\n", cntEvt, Freq, sta, Chan);
 80036cc:	4b40      	ldr	r3, [pc, #256]	; (80037d0 <main+0x1434>)
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	461e      	mov	r6, r3
 80036d4:	4b37      	ldr	r3, [pc, #220]	; (80037b4 <main+0x1418>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4618      	mov	r0, r3
 80036da:	f7fc ff35 	bl	8000548 <__aeabi_f2d>
 80036de:	4602      	mov	r2, r0
 80036e0:	460b      	mov	r3, r1
 80036e2:	4936      	ldr	r1, [pc, #216]	; (80037bc <main+0x1420>)
 80036e4:	8809      	ldrh	r1, [r1, #0]
 80036e6:	9103      	str	r1, [sp, #12]
 80036e8:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 80036ec:	9102      	str	r1, [sp, #8]
 80036ee:	e9cd 2300 	strd	r2, r3, [sp]
 80036f2:	4632      	mov	r2, r6
 80036f4:	4937      	ldr	r1, [pc, #220]	; (80037d4 <main+0x1438>)
 80036f6:	2001      	movs	r0, #1
 80036f8:	f001 fbc0 	bl	8004e7c <Report>
    					}
    				}
    				//
    				uint16_t rssi = rda5807_rssi();
 80036fc:	f002 f9cc 	bl	8005a98 <rda5807_rssi>
 8003700:	4603      	mov	r3, r0
 8003702:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
    				if (rssi != RSSI) {
 8003706:	4b2e      	ldr	r3, [pc, #184]	; (80037c0 <main+0x1424>)
 8003708:	881b      	ldrh	r3, [r3, #0]
 800370a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800370e:	429a      	cmp	r2, r3
 8003710:	d03b      	beq.n	800378a <main+0x13ee>
    					RSSI = rssi;
 8003712:	4a2b      	ldr	r2, [pc, #172]	; (80037c0 <main+0x1424>)
 8003714:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003718:	8013      	strh	r3, [r2, #0]
    					stereo = rda5807_Get_StereoMonoFlag();
 800371a:	f002 fcf9 	bl	8006110 <rda5807_Get_StereoMonoFlag>
 800371e:	4603      	mov	r3, r0
 8003720:	461a      	mov	r2, r3
 8003722:	4b25      	ldr	r3, [pc, #148]	; (80037b8 <main+0x141c>)
 8003724:	701a      	strb	r2, [r3, #0]
	#ifdef SET_DISPLAY
    					if (stereo)
 8003726:	4b24      	ldr	r3, [pc, #144]	; (80037b8 <main+0x141c>)
 8003728:	781b      	ldrb	r3, [r3, #0]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d012      	beq.n	8003754 <main+0x13b8>
    						sprintf(st, "Rssi:%u Freq:%.1f S", RSSI, Freq);
 800372e:	4b24      	ldr	r3, [pc, #144]	; (80037c0 <main+0x1424>)
 8003730:	881b      	ldrh	r3, [r3, #0]
 8003732:	461e      	mov	r6, r3
 8003734:	4b1f      	ldr	r3, [pc, #124]	; (80037b4 <main+0x1418>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4618      	mov	r0, r3
 800373a:	f7fc ff05 	bl	8000548 <__aeabi_f2d>
 800373e:	4602      	mov	r2, r0
 8003740:	460b      	mov	r3, r1
 8003742:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8003746:	e9cd 2300 	strd	r2, r3, [sp]
 800374a:	4632      	mov	r2, r6
 800374c:	491d      	ldr	r1, [pc, #116]	; (80037c4 <main+0x1428>)
 800374e:	f00c fe97 	bl	8010480 <siprintf>
 8003752:	e011      	b.n	8003778 <main+0x13dc>
    					else
    						sprintf(st, "Rssi:%u Freq:%.1f", RSSI, Freq);
 8003754:	4b1a      	ldr	r3, [pc, #104]	; (80037c0 <main+0x1424>)
 8003756:	881b      	ldrh	r3, [r3, #0]
 8003758:	461e      	mov	r6, r3
 800375a:	4b16      	ldr	r3, [pc, #88]	; (80037b4 <main+0x1418>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4618      	mov	r0, r3
 8003760:	f7fc fef2 	bl	8000548 <__aeabi_f2d>
 8003764:	4602      	mov	r2, r0
 8003766:	460b      	mov	r3, r1
 8003768:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 800376c:	e9cd 2300 	strd	r2, r3, [sp]
 8003770:	4632      	mov	r2, r6
 8003772:	4915      	ldr	r1, [pc, #84]	; (80037c8 <main+0x142c>)
 8003774:	f00c fe84 	bl	8010480 <siprintf>
    					showLine(st, lin5, &lil, false);
 8003778:	f107 0220 	add.w	r2, r7, #32
 800377c:	f8b7 10d6 	ldrh.w	r1, [r7, #214]	; 0xd6
 8003780:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8003784:	2300      	movs	r3, #0
 8003786:	f001 f967 	bl	8004a58 <showLine>
    					//showLine(sta, lin6, &lia, true);
    					////Report(1, "ChipID:0x%x Chan:%u Freq:%.2f RSSI:%u\r\n", rdaID, Chan, Freq, RSSI);
	#endif
    				}
    				//
    				if (devError) {
 800378a:	4b17      	ldr	r3, [pc, #92]	; (80037e8 <main+0x144c>)
 800378c:	881b      	ldrh	r3, [r3, #0]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d030      	beq.n	80037f4 <main+0x1458>
    					dl = sprintf(tmp, "devError : 0x%04X", devError);
 8003792:	4b15      	ldr	r3, [pc, #84]	; (80037e8 <main+0x144c>)
 8003794:	881b      	ldrh	r3, [r3, #0]
 8003796:	461a      	mov	r2, r3
 8003798:	4914      	ldr	r1, [pc, #80]	; (80037ec <main+0x1450>)
 800379a:	4815      	ldr	r0, [pc, #84]	; (80037f0 <main+0x1454>)
 800379c:	f00c fe70 	bl	8010480 <siprintf>
 80037a0:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
    					lastErr = devError;
 80037a4:	4b10      	ldr	r3, [pc, #64]	; (80037e8 <main+0x144c>)
 80037a6:	881b      	ldrh	r3, [r3, #0]
 80037a8:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
 80037ac:	e036      	b.n	800381c <main+0x1480>
 80037ae:	bf00      	nop
 80037b0:	200001f8 	.word	0x200001f8
 80037b4:	200001f4 	.word	0x200001f4
 80037b8:	20003024 	.word	0x20003024
 80037bc:	2000301c 	.word	0x2000301c
 80037c0:	2000301e 	.word	0x2000301e
 80037c4:	0801427c 	.word	0x0801427c
 80037c8:	08014290 	.word	0x08014290
 80037cc:	08014138 	.word	0x08014138
 80037d0:	20001fe4 	.word	0x20001fe4
 80037d4:	080144b8 	.word	0x080144b8
 80037d8:	20003021 	.word	0x20003021
 80037dc:	200001fe 	.word	0x200001fe
 80037e0:	20000004 	.word	0x20000004
 80037e4:	080144e8 	.word	0x080144e8
 80037e8:	20001bc8 	.word	0x20001bc8
 80037ec:	080144f4 	.word	0x080144f4
 80037f0:	20001348 	.word	0x20001348
    				} else {
    					if (lastErr) {
 80037f4:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d00c      	beq.n	8003816 <main+0x147a>
    						dl = sprintf(tmp, "Ver.%s", ver);
 80037fc:	4bb9      	ldr	r3, [pc, #740]	; (8003ae4 <main+0x1748>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	461a      	mov	r2, r3
 8003802:	49b9      	ldr	r1, [pc, #740]	; (8003ae8 <main+0x174c>)
 8003804:	48b9      	ldr	r0, [pc, #740]	; (8003aec <main+0x1750>)
 8003806:	f00c fe3b 	bl	8010480 <siprintf>
 800380a:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
    						lastErr = devOK;
 800380e:	2300      	movs	r3, #0
 8003810:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
 8003814:	e002      	b.n	800381c <main+0x1480>
    					} else dl = 0;
 8003816:	2300      	movs	r3, #0
 8003818:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    				}
	#ifdef SET_DISPLAY
    				if (dl) {
 800381c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003820:	2b00      	cmp	r3, #0
 8003822:	d032      	beq.n	800388a <main+0x14ee>
    					ST7565_DrawFilledRectangle(0, SCREEN_HEIGHT - Font_6x8.FontHeight, SCREEN_WIDTH - 1, Font_6x8.FontHeight, PIX_OFF);
 8003824:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 8003828:	b29b      	uxth	r3, r3
 800382a:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800382e:	b29b      	uxth	r3, r3
 8003830:	b219      	sxth	r1, r3
 8003832:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 8003836:	b21b      	sxth	r3, r3
 8003838:	2200      	movs	r2, #0
 800383a:	9200      	str	r2, [sp, #0]
 800383c:	227f      	movs	r2, #127	; 0x7f
 800383e:	2000      	movs	r0, #0
 8003840:	f7fe faef 	bl	8001e22 <ST7565_DrawFilledRectangle>
    					x = ((SCREEN_WIDTH - (Font_6x8.FontWidth * dl)) >> 1) & 0x7f;
 8003844:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 8003848:	461a      	mov	r2, r3
 800384a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800384e:	fb02 f303 	mul.w	r3, r2, r3
 8003852:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8003856:	105b      	asrs	r3, r3, #1
 8003858:	b29b      	uxth	r3, r3
 800385a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800385e:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
    					ST7565_Print(x, SCREEN_HEIGHT - Font_6x8.FontHeight, tmp, &Font_6x8, 1, PIX_ON);
 8003862:	f9b7 00d2 	ldrsh.w	r0, [r7, #210]	; 0xd2
 8003866:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 800386a:	b29b      	uxth	r3, r3
 800386c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8003870:	b29b      	uxth	r3, r3
 8003872:	b219      	sxth	r1, r3
 8003874:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003878:	2201      	movs	r2, #1
 800387a:	9201      	str	r2, [sp, #4]
 800387c:	2201      	movs	r2, #1
 800387e:	9200      	str	r2, [sp, #0]
 8003880:	4a9a      	ldr	r2, [pc, #616]	; (8003aec <main+0x1750>)
 8003882:	f7fe f875 	bl	8001970 <ST7565_Print>
    					ST7565_Update();
 8003886:	f7fd fec3 	bl	8001610 <ST7565_Update>
    				}
    				//
    				ST7565_Update();
 800388a:	f7fd fec1 	bl	8001610 <ST7565_Update>
	#endif
    			}
    			break;
 800388e:	e187      	b.n	8003ba0 <main+0x1804>
    			case evt_Clr:
    				devError = devOK;
 8003890:	4b97      	ldr	r3, [pc, #604]	; (8003af0 <main+0x1754>)
 8003892:	2200      	movs	r2, #0
 8003894:	801a      	strh	r2, [r3, #0]
    				Report(1, "[que:%u] Clear all Errors...\r\n", cntEvt);
 8003896:	4b97      	ldr	r3, [pc, #604]	; (8003af4 <main+0x1758>)
 8003898:	781b      	ldrb	r3, [r3, #0]
 800389a:	b2db      	uxtb	r3, r3
 800389c:	461a      	mov	r2, r3
 800389e:	4996      	ldr	r1, [pc, #600]	; (8003af8 <main+0x175c>)
 80038a0:	2001      	movs	r0, #1
 80038a2:	f001 faeb 	bl	8004e7c <Report>
    			break;
 80038a6:	e17b      	b.n	8003ba0 <main+0x1804>
    			case evt_Help:
    				stx[0] = '\0';
 80038a8:	4b94      	ldr	r3, [pc, #592]	; (8003afc <main+0x1760>)
 80038aa:	2200      	movs	r2, #0
 80038ac:	701a      	strb	r2, [r3, #0]
    				for (int8_t i = 0; i < MAX_CMDS; i++) sprintf(stx+strlen(stx), "\t%s\r\n", s_cmds[i]);
 80038ae:	2300      	movs	r3, #0
 80038b0:	f887 30fa 	strb.w	r3, [r7, #250]	; 0xfa
 80038b4:	e015      	b.n	80038e2 <main+0x1546>
 80038b6:	4891      	ldr	r0, [pc, #580]	; (8003afc <main+0x1760>)
 80038b8:	f7fc fc8a 	bl	80001d0 <strlen>
 80038bc:	4603      	mov	r3, r0
 80038be:	4a8f      	ldr	r2, [pc, #572]	; (8003afc <main+0x1760>)
 80038c0:	1898      	adds	r0, r3, r2
 80038c2:	f997 30fa 	ldrsb.w	r3, [r7, #250]	; 0xfa
 80038c6:	4a8e      	ldr	r2, [pc, #568]	; (8003b00 <main+0x1764>)
 80038c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038cc:	461a      	mov	r2, r3
 80038ce:	498d      	ldr	r1, [pc, #564]	; (8003b04 <main+0x1768>)
 80038d0:	f00c fdd6 	bl	8010480 <siprintf>
 80038d4:	f997 30fa 	ldrsb.w	r3, [r7, #250]	; 0xfa
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	3301      	adds	r3, #1
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	f887 30fa 	strb.w	r3, [r7, #250]	; 0xfa
 80038e2:	f997 30fa 	ldrsb.w	r3, [r7, #250]	; 0xfa
 80038e6:	2b17      	cmp	r3, #23
 80038e8:	dde5      	ble.n	80038b6 <main+0x151a>
    				Report(0, "%s", stx);
 80038ea:	4a84      	ldr	r2, [pc, #528]	; (8003afc <main+0x1760>)
 80038ec:	4986      	ldr	r1, [pc, #536]	; (8003b08 <main+0x176c>)
 80038ee:	2000      	movs	r0, #0
 80038f0:	f001 fac4 	bl	8004e7c <Report>
    			break;
 80038f4:	e154      	b.n	8003ba0 <main+0x1804>
    			case evt_Restart:
    				restart = 1;
 80038f6:	4b85      	ldr	r3, [pc, #532]	; (8003b0c <main+0x1770>)
 80038f8:	2201      	movs	r2, #1
 80038fa:	701a      	strb	r2, [r3, #0]
    				Report(1, "[que:%u] Restart system...\r\n", cntEvt);
 80038fc:	4b7d      	ldr	r3, [pc, #500]	; (8003af4 <main+0x1758>)
 80038fe:	781b      	ldrb	r3, [r3, #0]
 8003900:	b2db      	uxtb	r3, r3
 8003902:	461a      	mov	r2, r3
 8003904:	4982      	ldr	r1, [pc, #520]	; (8003b10 <main+0x1774>)
 8003906:	2001      	movs	r0, #1
 8003908:	f001 fab8 	bl	8004e7c <Report>
    			break;
 800390c:	e148      	b.n	8003ba0 <main+0x1804>
    			case evt_Epoch:
    				set_Date(epoch);
 800390e:	4b81      	ldr	r3, [pc, #516]	; (8003b14 <main+0x1778>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4618      	mov	r0, r3
 8003914:	f001 f9b8 	bl	8004c88 <set_Date>
    				Report(1, "[que:%u] Set Unix TimeStamp to %lu\r\n", cntEvt, epoch);
 8003918:	4b76      	ldr	r3, [pc, #472]	; (8003af4 <main+0x1758>)
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	b2db      	uxtb	r3, r3
 800391e:	461a      	mov	r2, r3
 8003920:	4b7c      	ldr	r3, [pc, #496]	; (8003b14 <main+0x1778>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	497c      	ldr	r1, [pc, #496]	; (8003b18 <main+0x177c>)
 8003926:	2001      	movs	r0, #1
 8003928:	f001 faa8 	bl	8004e7c <Report>
    			break;
 800392c:	e138      	b.n	8003ba0 <main+0x1804>
    			case evt_Err:
    				Report(1, "[que:%u] Error input from uart\r\n", cntEvt);
 800392e:	4b71      	ldr	r3, [pc, #452]	; (8003af4 <main+0x1758>)
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	b2db      	uxtb	r3, r3
 8003934:	461a      	mov	r2, r3
 8003936:	4979      	ldr	r1, [pc, #484]	; (8003b1c <main+0x1780>)
 8003938:	2001      	movs	r0, #1
 800393a:	f001 fa9f 	bl	8004e7c <Report>
    			break;
 800393e:	e12f      	b.n	8003ba0 <main+0x1804>
	#ifdef SET_W25FLASH
    			case evt_sRead:
    			case evt_sNext:
    			{
    				uint32_t w25_adr = (adr_sector * W25qxx_getSectorSize()) + offset_sector;
 8003940:	f003 fbf0 	bl	8007124 <W25qxx_getSectorSize>
 8003944:	4603      	mov	r3, r0
 8003946:	4a76      	ldr	r2, [pc, #472]	; (8003b20 <main+0x1784>)
 8003948:	6812      	ldr	r2, [r2, #0]
 800394a:	fb02 f303 	mul.w	r3, r2, r3
 800394e:	4a75      	ldr	r2, [pc, #468]	; (8003b24 <main+0x1788>)
 8003950:	6812      	ldr	r2, [r2, #0]
 8003952:	4413      	add	r3, r2
 8003954:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    				uint32_t dlin = list_sector;
 8003958:	4b73      	ldr	r3, [pc, #460]	; (8003b28 <main+0x178c>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    				int step = 32;
 8003960:	2320      	movs	r3, #32
 8003962:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    				uint32_t ind = 0;
 8003966:	2300      	movs	r3, #0
 8003968:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    				W25qxx_ReadSector(fs_work, adr_sector, offset_sector, dlin);
 800396c:	4b6c      	ldr	r3, [pc, #432]	; (8003b20 <main+0x1784>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4619      	mov	r1, r3
 8003972:	4b6c      	ldr	r3, [pc, #432]	; (8003b24 <main+0x1788>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	461a      	mov	r2, r3
 8003978:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800397c:	486b      	ldr	r0, [pc, #428]	; (8003b2c <main+0x1790>)
 800397e:	f003 fee3 	bl	8007748 <W25qxx_ReadSector>
    				Report(0, "Read sector:%d offset:%d len:%u\r\n", adr_sector, offset_sector, dlin);
 8003982:	4b67      	ldr	r3, [pc, #412]	; (8003b20 <main+0x1784>)
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	4b67      	ldr	r3, [pc, #412]	; (8003b24 <main+0x1788>)
 8003988:	6819      	ldr	r1, [r3, #0]
 800398a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800398e:	9300      	str	r3, [sp, #0]
 8003990:	460b      	mov	r3, r1
 8003992:	4967      	ldr	r1, [pc, #412]	; (8003b30 <main+0x1794>)
 8003994:	2000      	movs	r0, #0
 8003996:	f001 fa71 	bl	8004e7c <Report>
    				while (ind < dlin) {
 800399a:	e05b      	b.n	8003a54 <main+0x16b8>
    					strf[0] = '\0';
 800399c:	4b65      	ldr	r3, [pc, #404]	; (8003b34 <main+0x1798>)
 800399e:	2200      	movs	r2, #0
 80039a0:	701a      	strb	r2, [r3, #0]
    					while (1) {
    						sprintf(strf+strlen(strf), "%06X ", (unsigned int)w25_adr);
 80039a2:	4864      	ldr	r0, [pc, #400]	; (8003b34 <main+0x1798>)
 80039a4:	f7fc fc14 	bl	80001d0 <strlen>
 80039a8:	4603      	mov	r3, r0
 80039aa:	4a62      	ldr	r2, [pc, #392]	; (8003b34 <main+0x1798>)
 80039ac:	4413      	add	r3, r2
 80039ae:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80039b2:	4961      	ldr	r1, [pc, #388]	; (8003b38 <main+0x179c>)
 80039b4:	4618      	mov	r0, r3
 80039b6:	f00c fd63 	bl	8010480 <siprintf>
    						for (int i = 0; i < step; i++) sprintf(strf+strlen(strf), " %02X", fs_work[i + ind]);
 80039ba:	2300      	movs	r3, #0
 80039bc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80039c0:	e015      	b.n	80039ee <main+0x1652>
 80039c2:	485c      	ldr	r0, [pc, #368]	; (8003b34 <main+0x1798>)
 80039c4:	f7fc fc04 	bl	80001d0 <strlen>
 80039c8:	4603      	mov	r3, r0
 80039ca:	4a5a      	ldr	r2, [pc, #360]	; (8003b34 <main+0x1798>)
 80039cc:	1898      	adds	r0, r3, r2
 80039ce:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80039d2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80039d6:	4413      	add	r3, r2
 80039d8:	4a54      	ldr	r2, [pc, #336]	; (8003b2c <main+0x1790>)
 80039da:	5cd3      	ldrb	r3, [r2, r3]
 80039dc:	461a      	mov	r2, r3
 80039de:	4957      	ldr	r1, [pc, #348]	; (8003b3c <main+0x17a0>)
 80039e0:	f00c fd4e 	bl	8010480 <siprintf>
 80039e4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80039e8:	3301      	adds	r3, #1
 80039ea:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80039ee:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80039f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80039f6:	429a      	cmp	r2, r3
 80039f8:	dbe3      	blt.n	80039c2 <main+0x1626>
    						strcat(strf, "\r\n");
 80039fa:	484e      	ldr	r0, [pc, #312]	; (8003b34 <main+0x1798>)
 80039fc:	f7fc fbe8 	bl	80001d0 <strlen>
 8003a00:	4603      	mov	r3, r0
 8003a02:	461a      	mov	r2, r3
 8003a04:	4b4b      	ldr	r3, [pc, #300]	; (8003b34 <main+0x1798>)
 8003a06:	4413      	add	r3, r2
 8003a08:	4a4d      	ldr	r2, [pc, #308]	; (8003b40 <main+0x17a4>)
 8003a0a:	8811      	ldrh	r1, [r2, #0]
 8003a0c:	7892      	ldrb	r2, [r2, #2]
 8003a0e:	8019      	strh	r1, [r3, #0]
 8003a10:	709a      	strb	r2, [r3, #2]
    						w25_adr += step;
 8003a12:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003a16:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8003a1a:	4413      	add	r3, r2
 8003a1c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    						ind += step;
 8003a20:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003a24:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8003a28:	4413      	add	r3, r2
 8003a2a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    						if (!(ind % W25qxx_getPageSize())) break;
 8003a2e:	f003 fb85 	bl	800713c <W25qxx_getPageSize>
 8003a32:	4602      	mov	r2, r0
 8003a34:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003a38:	fbb3 f1f2 	udiv	r1, r3, r2
 8003a3c:	fb01 f202 	mul.w	r2, r1, r2
 8003a40:	1a9b      	subs	r3, r3, r2
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d000      	beq.n	8003a48 <main+0x16ac>
    						sprintf(strf+strlen(strf), "%06X ", (unsigned int)w25_adr);
 8003a46:	e7ac      	b.n	80039a2 <main+0x1606>
    						if (!(ind % W25qxx_getPageSize())) break;
 8003a48:	bf00      	nop
    					}
    					Report(0, "%s", strf);
 8003a4a:	4a3a      	ldr	r2, [pc, #232]	; (8003b34 <main+0x1798>)
 8003a4c:	492e      	ldr	r1, [pc, #184]	; (8003b08 <main+0x176c>)
 8003a4e:	2000      	movs	r0, #0
 8003a50:	f001 fa14 	bl	8004e7c <Report>
    				while (ind < dlin) {
 8003a54:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8003a58:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d39d      	bcc.n	800399c <main+0x1600>
    				}
    			}
    			break;
 8003a60:	e09e      	b.n	8003ba0 <main+0x1804>
    			case evt_sWrite:
    			{
    				uint32_t ss = W25qxx_getSectorSize();
 8003a62:	f003 fb5f 	bl	8007124 <W25qxx_getSectorSize>
 8003a66:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
    				if (!W25qxx_IsEmptySector(adr_sector, 0, ss)) W25qxx_EraseSector(adr_sector);
 8003a6a:	4b2d      	ldr	r3, [pc, #180]	; (8003b20 <main+0x1784>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8003a72:	2100      	movs	r1, #0
 8003a74:	4618      	mov	r0, r3
 8003a76:	f003 fbcb 	bl	8007210 <W25qxx_IsEmptySector>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	f083 0301 	eor.w	r3, r3, #1
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d004      	beq.n	8003a90 <main+0x16f4>
 8003a86:	4b26      	ldr	r3, [pc, #152]	; (8003b20 <main+0x1784>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f003 fb64 	bl	8007158 <W25qxx_EraseSector>
    				memset(fs_work, byte_write, ss);
 8003a90:	4b2c      	ldr	r3, [pc, #176]	; (8003b44 <main+0x17a8>)
 8003a92:	781b      	ldrb	r3, [r3, #0]
 8003a94:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8003a98:	4619      	mov	r1, r3
 8003a9a:	4824      	ldr	r0, [pc, #144]	; (8003b2c <main+0x1790>)
 8003a9c:	f00b ff78 	bl	800f990 <memset>
    				if (len_write != -1) ss = len_write;
 8003aa0:	4b29      	ldr	r3, [pc, #164]	; (8003b48 <main+0x17ac>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003aa8:	d003      	beq.n	8003ab2 <main+0x1716>
 8003aaa:	4b27      	ldr	r3, [pc, #156]	; (8003b48 <main+0x17ac>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    				W25qxx_WriteSector(fs_work, adr_sector, offset_sector, ss);
 8003ab2:	4b1b      	ldr	r3, [pc, #108]	; (8003b20 <main+0x1784>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4619      	mov	r1, r3
 8003ab8:	4b1a      	ldr	r3, [pc, #104]	; (8003b24 <main+0x1788>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	461a      	mov	r2, r3
 8003abe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003ac2:	481a      	ldr	r0, [pc, #104]	; (8003b2c <main+0x1790>)
 8003ac4:	f003 fd18 	bl	80074f8 <W25qxx_WriteSector>
    				Report(0, "Fill sector:%d byte:%02X len:%d done\r\n", adr_sector, byte_write, ss);
 8003ac8:	4b15      	ldr	r3, [pc, #84]	; (8003b20 <main+0x1784>)
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	4b1d      	ldr	r3, [pc, #116]	; (8003b44 <main+0x17a8>)
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	4619      	mov	r1, r3
 8003ad2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003ad6:	9300      	str	r3, [sp, #0]
 8003ad8:	460b      	mov	r3, r1
 8003ada:	491c      	ldr	r1, [pc, #112]	; (8003b4c <main+0x17b0>)
 8003adc:	2000      	movs	r0, #0
 8003ade:	f001 f9cd 	bl	8004e7c <Report>
    			}
    			break;
 8003ae2:	e05d      	b.n	8003ba0 <main+0x1804>
 8003ae4:	20000004 	.word	0x20000004
 8003ae8:	08014244 	.word	0x08014244
 8003aec:	20001348 	.word	0x20001348
 8003af0:	20001bc8 	.word	0x20001bc8
 8003af4:	20001fe4 	.word	0x20001fe4
 8003af8:	08014508 	.word	0x08014508
 8003afc:	20000f48 	.word	0x20000f48
 8003b00:	2000001c 	.word	0x2000001c
 8003b04:	08014528 	.word	0x08014528
 8003b08:	08014138 	.word	0x08014138
 8003b0c:	20001fdc 	.word	0x20001fdc
 8003b10:	08014530 	.word	0x08014530
 8003b14:	20000018 	.word	0x20000018
 8003b18:	08014550 	.word	0x08014550
 8003b1c:	08014578 	.word	0x08014578
 8003b20:	20001fe8 	.word	0x20001fe8
 8003b24:	20001fec 	.word	0x20001fec
 8003b28:	20001ff0 	.word	0x20001ff0
 8003b2c:	20001ffc 	.word	0x20001ffc
 8003b30:	0801459c 	.word	0x0801459c
 8003b34:	200017c8 	.word	0x200017c8
 8003b38:	080145c0 	.word	0x080145c0
 8003b3c:	08014364 	.word	0x08014364
 8003b40:	080145c8 	.word	0x080145c8
 8003b44:	200001f0 	.word	0x200001f0
 8003b48:	20001ff4 	.word	0x20001ff4
 8003b4c:	080145cc 	.word	0x080145cc
    			case evt_sErase:
    				if (adr_sector == -1) {
 8003b50:	4b87      	ldr	r3, [pc, #540]	; (8003d70 <main+0x19d4>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b58:	d10c      	bne.n	8003b74 <main+0x17d8>
    					Report(1, "Erase flash");
 8003b5a:	4986      	ldr	r1, [pc, #536]	; (8003d74 <main+0x19d8>)
 8003b5c:	2001      	movs	r0, #1
 8003b5e:	f001 f98d 	bl	8004e7c <Report>
    					flag_sector = true;
 8003b62:	4b85      	ldr	r3, [pc, #532]	; (8003d78 <main+0x19dc>)
 8003b64:	2201      	movs	r2, #1
 8003b66:	701a      	strb	r2, [r3, #0]
    					btime = HAL_GetTick();
 8003b68:	f003 feec 	bl	8007944 <HAL_GetTick>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	4a83      	ldr	r2, [pc, #524]	; (8003d7c <main+0x19e0>)
 8003b70:	6013      	str	r3, [r2, #0]
    				} else {
    					W25qxx_EraseSector(adr_sector);
    					Report(1, "Erase sector:%d done\r\n", adr_sector);
    				}
    			break;
 8003b72:	e015      	b.n	8003ba0 <main+0x1804>
    					W25qxx_EraseSector(adr_sector);
 8003b74:	4b7e      	ldr	r3, [pc, #504]	; (8003d70 <main+0x19d4>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f003 faed 	bl	8007158 <W25qxx_EraseSector>
    					Report(1, "Erase sector:%d done\r\n", adr_sector);
 8003b7e:	4b7c      	ldr	r3, [pc, #496]	; (8003d70 <main+0x19d4>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	461a      	mov	r2, r3
 8003b84:	497e      	ldr	r1, [pc, #504]	; (8003d80 <main+0x19e4>)
 8003b86:	2001      	movs	r0, #1
 8003b88:	f001 f978 	bl	8004e7c <Report>
    			break;
 8003b8c:	e008      	b.n	8003ba0 <main+0x1804>
    			break;
 8003b8e:	bf00      	nop
 8003b90:	e006      	b.n	8003ba0 <main+0x1804>
    			break;
 8003b92:	bf00      	nop
 8003b94:	e004      	b.n	8003ba0 <main+0x1804>
    			break;
 8003b96:	bf00      	nop
 8003b98:	e002      	b.n	8003ba0 <main+0x1804>
				break;
 8003b9a:	bf00      	nop
 8003b9c:	e000      	b.n	8003ba0 <main+0x1804>
    			break;
 8003b9e:	bf00      	nop
	#endif
    		}
    		if ((evt >= evt_sRead) && (evt <= evt_sWrite)) {
 8003ba0:	4b78      	ldr	r3, [pc, #480]	; (8003d84 <main+0x19e8>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	2b03      	cmp	r3, #3
 8003ba6:	dd0b      	ble.n	8003bc0 <main+0x1824>
 8003ba8:	4b76      	ldr	r3, [pc, #472]	; (8003d84 <main+0x19e8>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	2b07      	cmp	r3, #7
 8003bae:	dc07      	bgt.n	8003bc0 <main+0x1824>
    			last_cmd_sector =  evt;//cmd_sector;
 8003bb0:	4b74      	ldr	r3, [pc, #464]	; (8003d84 <main+0x19e8>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a74      	ldr	r2, [pc, #464]	; (8003d88 <main+0x19ec>)
 8003bb6:	6013      	str	r3, [r2, #0]
    			cmd_sector = sNone;
 8003bb8:	4b74      	ldr	r3, [pc, #464]	; (8003d8c <main+0x19f0>)
 8003bba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003bbe:	601a      	str	r2, [r3, #0]
    		}
    	}
#endif

#ifdef SET_W25FLASH
    	if (flag_sector) {
 8003bc0:	4b6d      	ldr	r3, [pc, #436]	; (8003d78 <main+0x19dc>)
 8003bc2:	781b      	ldrb	r3, [r3, #0]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d031      	beq.n	8003c2c <main+0x1890>
    		adr_sector++;
 8003bc8:	4b69      	ldr	r3, [pc, #420]	; (8003d70 <main+0x19d4>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	3301      	adds	r3, #1
 8003bce:	4a68      	ldr	r2, [pc, #416]	; (8003d70 <main+0x19d4>)
 8003bd0:	6013      	str	r3, [r2, #0]
    		if (adr_sector >= W25qxx_getSectorCount()) {
 8003bd2:	f003 fa9b 	bl	800710c <W25qxx_getSectorCount>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	4a65      	ldr	r2, [pc, #404]	; (8003d70 <main+0x19d4>)
 8003bda:	6812      	ldr	r2, [r2, #0]
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d816      	bhi.n	8003c0e <main+0x1872>
    			flag_sector = false;
 8003be0:	4b65      	ldr	r3, [pc, #404]	; (8003d78 <main+0x19dc>)
 8003be2:	2200      	movs	r2, #0
 8003be4:	701a      	strb	r2, [r3, #0]
    			etime = HAL_GetTick();
 8003be6:	f003 fead 	bl	8007944 <HAL_GetTick>
 8003bea:	4603      	mov	r3, r0
 8003bec:	4a68      	ldr	r2, [pc, #416]	; (8003d90 <main+0x19f4>)
 8003bee:	6013      	str	r3, [r2, #0]
    			Report(0, " done (%lu sec)\r\n", (etime - btime) / 1000);
 8003bf0:	4b67      	ldr	r3, [pc, #412]	; (8003d90 <main+0x19f4>)
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	4b61      	ldr	r3, [pc, #388]	; (8003d7c <main+0x19e0>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	4a66      	ldr	r2, [pc, #408]	; (8003d94 <main+0x19f8>)
 8003bfc:	fba2 2303 	umull	r2, r3, r2, r3
 8003c00:	099b      	lsrs	r3, r3, #6
 8003c02:	461a      	mov	r2, r3
 8003c04:	4964      	ldr	r1, [pc, #400]	; (8003d98 <main+0x19fc>)
 8003c06:	2000      	movs	r0, #0
 8003c08:	f001 f938 	bl	8004e7c <Report>
 8003c0c:	e00e      	b.n	8003c2c <main+0x1890>
    		} else {
    			//putEvt(evt_sErase);
    			W25qxx_EraseSector(adr_sector);
 8003c0e:	4b58      	ldr	r3, [pc, #352]	; (8003d70 <main+0x19d4>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4618      	mov	r0, r3
 8003c14:	f003 faa0 	bl	8007158 <W25qxx_EraseSector>
    			if (!(adr_sector % 8)) Report(0, ".");
 8003c18:	4b55      	ldr	r3, [pc, #340]	; (8003d70 <main+0x19d4>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 0307 	and.w	r3, r3, #7
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d103      	bne.n	8003c2c <main+0x1890>
 8003c24:	495d      	ldr	r1, [pc, #372]	; (8003d9c <main+0x1a00>)
 8003c26:	2000      	movs	r0, #0
 8003c28:	f001 f928 	bl	8004e7c <Report>
    	}
#endif


#if defined(SET_BLE) || defined(SET_AUDIO)
    	if (bleQueAckFlag) {
 8003c2c:	4b5c      	ldr	r3, [pc, #368]	; (8003da0 <main+0x1a04>)
 8003c2e:	781b      	ldrb	r3, [r3, #0]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d00b      	beq.n	8003c4c <main+0x18b0>
    		if (getRECQ(bleRxBuf, &bleQueAck) >= 0) {
 8003c34:	495b      	ldr	r1, [pc, #364]	; (8003da4 <main+0x1a08>)
 8003c36:	485c      	ldr	r0, [pc, #368]	; (8003da8 <main+0x1a0c>)
 8003c38:	f7fe fa89 	bl	800214e <getRECQ>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	db04      	blt.n	8003c4c <main+0x18b0>
    			Report(1, "[BLE_rx] %s\r\n", bleRxBuf);
 8003c42:	4a59      	ldr	r2, [pc, #356]	; (8003da8 <main+0x1a0c>)
 8003c44:	4959      	ldr	r1, [pc, #356]	; (8003dac <main+0x1a10>)
 8003c46:	2001      	movs	r0, #1
 8003c48:	f001 f918 	bl	8004e7c <Report>
    		}
    	}
    	//
    	if (bleQueCmdFlag) {//command to GSM module queue is ready
 8003c4c:	4b58      	ldr	r3, [pc, #352]	; (8003db0 <main+0x1a14>)
 8003c4e:	781b      	ldrb	r3, [r3, #0]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d016      	beq.n	8003c82 <main+0x18e6>
    		if (getRECQ(bleBuf, &bleQueCmd) >= 0) {
 8003c54:	4957      	ldr	r1, [pc, #348]	; (8003db4 <main+0x1a18>)
 8003c56:	4858      	ldr	r0, [pc, #352]	; (8003db8 <main+0x1a1c>)
 8003c58:	f7fe fa79 	bl	800214e <getRECQ>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	db0f      	blt.n	8003c82 <main+0x18e6>
    			strcat(bleBuf, "\r\n");
 8003c62:	4855      	ldr	r0, [pc, #340]	; (8003db8 <main+0x1a1c>)
 8003c64:	f7fc fab4 	bl	80001d0 <strlen>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	4b52      	ldr	r3, [pc, #328]	; (8003db8 <main+0x1a1c>)
 8003c6e:	4413      	add	r3, r2
 8003c70:	4a52      	ldr	r2, [pc, #328]	; (8003dbc <main+0x1a20>)
 8003c72:	8811      	ldrh	r1, [r2, #0]
 8003c74:	7892      	ldrb	r2, [r2, #2]
 8003c76:	8019      	strh	r1, [r3, #0]
 8003c78:	709a      	strb	r2, [r3, #2]
    			bleWrite(bleBuf, 1);
 8003c7a:	2101      	movs	r1, #1
 8003c7c:	484e      	ldr	r0, [pc, #312]	; (8003db8 <main+0x1a1c>)
 8003c7e:	f7fe f98b 	bl	8001f98 <bleWrite>
    		}
    	}
#endif


    	if (devError) {
 8003c82:	4b4f      	ldr	r3, [pc, #316]	; (8003dc0 <main+0x1a24>)
 8003c84:	881b      	ldrh	r3, [r3, #0]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d04f      	beq.n	8003d2a <main+0x198e>
    		if (last_devError != devError) {
 8003c8a:	4b4e      	ldr	r3, [pc, #312]	; (8003dc4 <main+0x1a28>)
 8003c8c:	881a      	ldrh	r2, [r3, #0]
 8003c8e:	4b4c      	ldr	r3, [pc, #304]	; (8003dc0 <main+0x1a24>)
 8003c90:	881b      	ldrh	r3, [r3, #0]
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d03f      	beq.n	8003d16 <main+0x197a>
    			last_devError = devError;
 8003c96:	4b4a      	ldr	r3, [pc, #296]	; (8003dc0 <main+0x1a24>)
 8003c98:	881a      	ldrh	r2, [r3, #0]
 8003c9a:	4b4a      	ldr	r3, [pc, #296]	; (8003dc4 <main+0x1a28>)
 8003c9c:	801a      	strh	r2, [r3, #0]
    			tmp[0] = '\0';
 8003c9e:	4b4a      	ldr	r3, [pc, #296]	; (8003dc8 <main+0x1a2c>)
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	701a      	strb	r2, [r3, #0]
    			uint16_t er = 0;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
    			for (int8_t i = 0; i < MAX_ERR_CODE; i++) {
 8003caa:	2300      	movs	r3, #0
 8003cac:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
 8003cb0:	e025      	b.n	8003cfe <main+0x1962>
    				er = devError & all_devErr[i];
 8003cb2:	f997 30e7 	ldrsb.w	r3, [r7, #231]	; 0xe7
 8003cb6:	4a45      	ldr	r2, [pc, #276]	; (8003dcc <main+0x1a30>)
 8003cb8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8003cbc:	4b40      	ldr	r3, [pc, #256]	; (8003dc0 <main+0x1a24>)
 8003cbe:	881b      	ldrh	r3, [r3, #0]
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
    				if (er) sprintf(tmp+strlen(tmp), " '%s'", errName(er));
 8003cc6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d010      	beq.n	8003cf0 <main+0x1954>
 8003cce:	483e      	ldr	r0, [pc, #248]	; (8003dc8 <main+0x1a2c>)
 8003cd0:	f7fc fa7e 	bl	80001d0 <strlen>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	4a3c      	ldr	r2, [pc, #240]	; (8003dc8 <main+0x1a2c>)
 8003cd8:	189e      	adds	r6, r3, r2
 8003cda:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f7fe fab4 	bl	800224c <errName>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	4939      	ldr	r1, [pc, #228]	; (8003dd0 <main+0x1a34>)
 8003cea:	4630      	mov	r0, r6
 8003cec:	f00c fbc8 	bl	8010480 <siprintf>
    			for (int8_t i = 0; i < MAX_ERR_CODE; i++) {
 8003cf0:	f997 30e7 	ldrsb.w	r3, [r7, #231]	; 0xe7
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	3301      	adds	r3, #1
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
 8003cfe:	f997 30e7 	ldrsb.w	r3, [r7, #231]	; 0xe7
 8003d02:	2b0b      	cmp	r3, #11
 8003d04:	ddd5      	ble.n	8003cb2 <main+0x1916>
    			}
    			Report(1, "Error 0x%04X %s\r\n", devError, tmp);
 8003d06:	4b2e      	ldr	r3, [pc, #184]	; (8003dc0 <main+0x1a24>)
 8003d08:	881b      	ldrh	r3, [r3, #0]
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	4b2e      	ldr	r3, [pc, #184]	; (8003dc8 <main+0x1a2c>)
 8003d0e:	4931      	ldr	r1, [pc, #196]	; (8003dd4 <main+0x1a38>)
 8003d10:	2001      	movs	r0, #1
 8003d12:	f001 f8b3 	bl	8004e7c <Report>
    		}
    		errLedOn(true);
 8003d16:	2001      	movs	r0, #1
 8003d18:	f000 ff0c 	bl	8004b34 <errLedOn>
    		HAL_Delay(50);
 8003d1c:	2032      	movs	r0, #50	; 0x32
 8003d1e:	f003 fe1d 	bl	800795c <HAL_Delay>
    		errLedOn(false);
 8003d22:	2000      	movs	r0, #0
 8003d24:	f000 ff06 	bl	8004b34 <errLedOn>
 8003d28:	e009      	b.n	8003d3e <main+0x19a2>
    	} else {
    		if (HAL_GPIO_ReadPin(ERR_LED_GPIO_Port, ERR_LED_Pin)) errLedOn(false);
 8003d2a:	2108      	movs	r1, #8
 8003d2c:	482a      	ldr	r0, [pc, #168]	; (8003dd8 <main+0x1a3c>)
 8003d2e:	f004 fbcb 	bl	80084c8 <HAL_GPIO_ReadPin>
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d002      	beq.n	8003d3e <main+0x19a2>
 8003d38:	2000      	movs	r0, #0
 8003d3a:	f000 fefb 	bl	8004b34 <errLedOn>
    while (!restart) {
 8003d3e:	4b27      	ldr	r3, [pc, #156]	; (8003ddc <main+0x1a40>)
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	f43e aea1 	beq.w	8002a8c <main+0x6f0>

    /* USER CODE BEGIN 3 */

    }//while (!restart)

    HAL_TIM_Base_Stop_IT(tikPort);
 8003d4a:	4b25      	ldr	r3, [pc, #148]	; (8003de0 <main+0x1a44>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f009 fc3e 	bl	800d5d0 <HAL_TIM_Base_Stop_IT>
    ST7565_Reset();
    ST7565_CMD_DISPLAY(CMD_DISPLAY_OFF);
#endif*/


    Report(1, "[que:%u] Stop application...\r\n", cntEvt);
 8003d54:	4b23      	ldr	r3, [pc, #140]	; (8003de4 <main+0x1a48>)
 8003d56:	781b      	ldrb	r3, [r3, #0]
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	4922      	ldr	r1, [pc, #136]	; (8003de8 <main+0x1a4c>)
 8003d5e:	2001      	movs	r0, #1
 8003d60:	f001 f88c 	bl	8004e7c <Report>

    HAL_Delay(250);
 8003d64:	20fa      	movs	r0, #250	; 0xfa
 8003d66:	f003 fdf9 	bl	800795c <HAL_Delay>

    NVIC_SystemReset();
 8003d6a:	f7fe f8b3 	bl	8001ed4 <__NVIC_SystemReset>
 8003d6e:	bf00      	nop
 8003d70:	20001fe8 	.word	0x20001fe8
 8003d74:	080145f4 	.word	0x080145f4
 8003d78:	20001ff8 	.word	0x20001ff8
 8003d7c:	20003000 	.word	0x20003000
 8003d80:	08014600 	.word	0x08014600
 8003d84:	200001dc 	.word	0x200001dc
 8003d88:	200001ec 	.word	0x200001ec
 8003d8c:	200001e8 	.word	0x200001e8
 8003d90:	20003004 	.word	0x20003004
 8003d94:	10624dd3 	.word	0x10624dd3
 8003d98:	08014618 	.word	0x08014618
 8003d9c:	0801462c 	.word	0x0801462c
 8003da0:	20003767 	.word	0x20003767
 8003da4:	200036c0 	.word	0x200036c0
 8003da8:	200035c0 	.word	0x200035c0
 8003dac:	08014630 	.word	0x08014630
 8003db0:	20003768 	.word	0x20003768
 8003db4:	20003714 	.word	0x20003714
 8003db8:	200034c0 	.word	0x200034c0
 8003dbc:	080145c8 	.word	0x080145c8
 8003dc0:	20001bc8 	.word	0x20001bc8
 8003dc4:	20001bca 	.word	0x20001bca
 8003dc8:	20001348 	.word	0x20001348
 8003dcc:	080152cc 	.word	0x080152cc
 8003dd0:	08014640 	.word	0x08014640
 8003dd4:	08014648 	.word	0x08014648
 8003dd8:	48000800 	.word	0x48000800
 8003ddc:	20001fdc 	.word	0x20001fdc
 8003de0:	20000008 	.word	0x20000008
 8003de4:	20001fe4 	.word	0x20001fe4
 8003de8:	0801465c 	.word	0x0801465c

08003dec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b096      	sub	sp, #88	; 0x58
 8003df0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003df2:	f107 0314 	add.w	r3, r7, #20
 8003df6:	2244      	movs	r2, #68	; 0x44
 8003df8:	2100      	movs	r1, #0
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f00b fdc8 	bl	800f990 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003e00:	463b      	mov	r3, r7
 8003e02:	2200      	movs	r2, #0
 8003e04:	601a      	str	r2, [r3, #0]
 8003e06:	605a      	str	r2, [r3, #4]
 8003e08:	609a      	str	r2, [r3, #8]
 8003e0a:	60da      	str	r2, [r3, #12]
 8003e0c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8003e0e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003e12:	f006 f897 	bl	8009f44 <HAL_PWREx_ControlVoltageScaling>
 8003e16:	4603      	mov	r3, r0
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d001      	beq.n	8003e20 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8003e1c:	f001 fdbc 	bl	8005998 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8003e20:	2309      	movs	r3, #9
 8003e22:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003e24:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e28:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003e2e:	2302      	movs	r3, #2
 8003e30:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003e32:	2303      	movs	r3, #3
 8003e34:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8003e36:	2301      	movs	r3, #1
 8003e38:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 8003e3a:	2314      	movs	r3, #20
 8003e3c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8003e3e:	2307      	movs	r3, #7
 8003e40:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003e42:	2302      	movs	r3, #2
 8003e44:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003e46:	2302      	movs	r3, #2
 8003e48:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003e4a:	f107 0314 	add.w	r3, r7, #20
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f006 f916 	bl	800a080 <HAL_RCC_OscConfig>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d001      	beq.n	8003e5e <SystemClock_Config+0x72>
  {
    Error_Handler();
 8003e5a:	f001 fd9d 	bl	8005998 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003e5e:	230f      	movs	r3, #15
 8003e60:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003e62:	2303      	movs	r3, #3
 8003e64:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003e66:	2300      	movs	r3, #0
 8003e68:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003e72:	463b      	mov	r3, r7
 8003e74:	2104      	movs	r1, #4
 8003e76:	4618      	mov	r0, r3
 8003e78:	f006 fcde 	bl	800a838 <HAL_RCC_ClockConfig>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d001      	beq.n	8003e86 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8003e82:	f001 fd89 	bl	8005998 <Error_Handler>
  }
}
 8003e86:	bf00      	nop
 8003e88:	3758      	adds	r7, #88	; 0x58
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
	...

08003e90 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003e94:	4b1b      	ldr	r3, [pc, #108]	; (8003f04 <MX_I2C1_Init+0x74>)
 8003e96:	4a1c      	ldr	r2, [pc, #112]	; (8003f08 <MX_I2C1_Init+0x78>)
 8003e98:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702D95;
 8003e9a:	4b1a      	ldr	r3, [pc, #104]	; (8003f04 <MX_I2C1_Init+0x74>)
 8003e9c:	4a1b      	ldr	r2, [pc, #108]	; (8003f0c <MX_I2C1_Init+0x7c>)
 8003e9e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003ea0:	4b18      	ldr	r3, [pc, #96]	; (8003f04 <MX_I2C1_Init+0x74>)
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003ea6:	4b17      	ldr	r3, [pc, #92]	; (8003f04 <MX_I2C1_Init+0x74>)
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003eac:	4b15      	ldr	r3, [pc, #84]	; (8003f04 <MX_I2C1_Init+0x74>)
 8003eae:	2200      	movs	r2, #0
 8003eb0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003eb2:	4b14      	ldr	r3, [pc, #80]	; (8003f04 <MX_I2C1_Init+0x74>)
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003eb8:	4b12      	ldr	r3, [pc, #72]	; (8003f04 <MX_I2C1_Init+0x74>)
 8003eba:	2200      	movs	r2, #0
 8003ebc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003ebe:	4b11      	ldr	r3, [pc, #68]	; (8003f04 <MX_I2C1_Init+0x74>)
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003ec4:	4b0f      	ldr	r3, [pc, #60]	; (8003f04 <MX_I2C1_Init+0x74>)
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003eca:	480e      	ldr	r0, [pc, #56]	; (8003f04 <MX_I2C1_Init+0x74>)
 8003ecc:	f004 fb5e 	bl	800858c <HAL_I2C_Init>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d001      	beq.n	8003eda <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003ed6:	f001 fd5f 	bl	8005998 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 8003eda:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003ede:	4809      	ldr	r0, [pc, #36]	; (8003f04 <MX_I2C1_Init+0x74>)
 8003ee0:	f005 ff16 	bl	8009d10 <HAL_I2CEx_ConfigAnalogFilter>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d001      	beq.n	8003eee <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8003eea:	f001 fd55 	bl	8005998 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003eee:	2100      	movs	r1, #0
 8003ef0:	4804      	ldr	r0, [pc, #16]	; (8003f04 <MX_I2C1_Init+0x74>)
 8003ef2:	f005 ff58 	bl	8009da6 <HAL_I2CEx_ConfigDigitalFilter>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d001      	beq.n	8003f00 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8003efc:	f001 fd4c 	bl	8005998 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003f00:	bf00      	nop
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	20000a70 	.word	0x20000a70
 8003f08:	40005400 	.word	0x40005400
 8003f0c:	00702d95 	.word	0x00702d95

08003f10 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b086      	sub	sp, #24
 8003f14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8003f16:	1d3b      	adds	r3, r7, #4
 8003f18:	2200      	movs	r2, #0
 8003f1a:	601a      	str	r2, [r3, #0]
 8003f1c:	605a      	str	r2, [r3, #4]
 8003f1e:	609a      	str	r2, [r3, #8]
 8003f20:	60da      	str	r2, [r3, #12]
 8003f22:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8003f24:	2300      	movs	r3, #0
 8003f26:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003f28:	4b25      	ldr	r3, [pc, #148]	; (8003fc0 <MX_RTC_Init+0xb0>)
 8003f2a:	4a26      	ldr	r2, [pc, #152]	; (8003fc4 <MX_RTC_Init+0xb4>)
 8003f2c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003f2e:	4b24      	ldr	r3, [pc, #144]	; (8003fc0 <MX_RTC_Init+0xb0>)
 8003f30:	2200      	movs	r2, #0
 8003f32:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003f34:	4b22      	ldr	r3, [pc, #136]	; (8003fc0 <MX_RTC_Init+0xb0>)
 8003f36:	227f      	movs	r2, #127	; 0x7f
 8003f38:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8003f3a:	4b21      	ldr	r3, [pc, #132]	; (8003fc0 <MX_RTC_Init+0xb0>)
 8003f3c:	22ff      	movs	r2, #255	; 0xff
 8003f3e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003f40:	4b1f      	ldr	r3, [pc, #124]	; (8003fc0 <MX_RTC_Init+0xb0>)
 8003f42:	2200      	movs	r2, #0
 8003f44:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003f46:	4b1e      	ldr	r3, [pc, #120]	; (8003fc0 <MX_RTC_Init+0xb0>)
 8003f48:	2200      	movs	r2, #0
 8003f4a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003f4c:	4b1c      	ldr	r3, [pc, #112]	; (8003fc0 <MX_RTC_Init+0xb0>)
 8003f4e:	2200      	movs	r2, #0
 8003f50:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003f52:	4b1b      	ldr	r3, [pc, #108]	; (8003fc0 <MX_RTC_Init+0xb0>)
 8003f54:	2200      	movs	r2, #0
 8003f56:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003f58:	4819      	ldr	r0, [pc, #100]	; (8003fc0 <MX_RTC_Init+0xb0>)
 8003f5a:	f007 fb4d 	bl	800b5f8 <HAL_RTC_Init>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d001      	beq.n	8003f68 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8003f64:	f001 fd18 	bl	8005998 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8003f70:	2300      	movs	r3, #0
 8003f72:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003f74:	2300      	movs	r3, #0
 8003f76:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8003f7c:	1d3b      	adds	r3, r7, #4
 8003f7e:	2201      	movs	r2, #1
 8003f80:	4619      	mov	r1, r3
 8003f82:	480f      	ldr	r0, [pc, #60]	; (8003fc0 <MX_RTC_Init+0xb0>)
 8003f84:	f007 fbb3 	bl	800b6ee <HAL_RTC_SetTime>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d001      	beq.n	8003f92 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8003f8e:	f001 fd03 	bl	8005998 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 8003f92:	2303      	movs	r3, #3
 8003f94:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JULY;
 8003f96:	2307      	movs	r3, #7
 8003f98:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x6;
 8003f9a:	2306      	movs	r3, #6
 8003f9c:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x22;
 8003f9e:	2322      	movs	r3, #34	; 0x22
 8003fa0:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8003fa2:	463b      	mov	r3, r7
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	4619      	mov	r1, r3
 8003fa8:	4805      	ldr	r0, [pc, #20]	; (8003fc0 <MX_RTC_Init+0xb0>)
 8003faa:	f007 fc99 	bl	800b8e0 <HAL_RTC_SetDate>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d001      	beq.n	8003fb8 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8003fb4:	f001 fcf0 	bl	8005998 <Error_Handler>

  //set_Date(epoch);

  /* USER CODE END RTC_Init 2 */

}
 8003fb8:	bf00      	nop
 8003fba:	3718      	adds	r7, #24
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	20000b54 	.word	0x20000b54
 8003fc4:	40002800 	.word	0x40002800

08003fc8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003fcc:	4b1b      	ldr	r3, [pc, #108]	; (800403c <MX_SPI1_Init+0x74>)
 8003fce:	4a1c      	ldr	r2, [pc, #112]	; (8004040 <MX_SPI1_Init+0x78>)
 8003fd0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003fd2:	4b1a      	ldr	r3, [pc, #104]	; (800403c <MX_SPI1_Init+0x74>)
 8003fd4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003fd8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003fda:	4b18      	ldr	r3, [pc, #96]	; (800403c <MX_SPI1_Init+0x74>)
 8003fdc:	2200      	movs	r2, #0
 8003fde:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003fe0:	4b16      	ldr	r3, [pc, #88]	; (800403c <MX_SPI1_Init+0x74>)
 8003fe2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003fe6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003fe8:	4b14      	ldr	r3, [pc, #80]	; (800403c <MX_SPI1_Init+0x74>)
 8003fea:	2200      	movs	r2, #0
 8003fec:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003fee:	4b13      	ldr	r3, [pc, #76]	; (800403c <MX_SPI1_Init+0x74>)
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003ff4:	4b11      	ldr	r3, [pc, #68]	; (800403c <MX_SPI1_Init+0x74>)
 8003ff6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ffa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8003ffc:	4b0f      	ldr	r3, [pc, #60]	; (800403c <MX_SPI1_Init+0x74>)
 8003ffe:	2208      	movs	r2, #8
 8004000:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004002:	4b0e      	ldr	r3, [pc, #56]	; (800403c <MX_SPI1_Init+0x74>)
 8004004:	2200      	movs	r2, #0
 8004006:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004008:	4b0c      	ldr	r3, [pc, #48]	; (800403c <MX_SPI1_Init+0x74>)
 800400a:	2200      	movs	r2, #0
 800400c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800400e:	4b0b      	ldr	r3, [pc, #44]	; (800403c <MX_SPI1_Init+0x74>)
 8004010:	2200      	movs	r2, #0
 8004012:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8004014:	4b09      	ldr	r3, [pc, #36]	; (800403c <MX_SPI1_Init+0x74>)
 8004016:	2207      	movs	r2, #7
 8004018:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800401a:	4b08      	ldr	r3, [pc, #32]	; (800403c <MX_SPI1_Init+0x74>)
 800401c:	2200      	movs	r2, #0
 800401e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8004020:	4b06      	ldr	r3, [pc, #24]	; (800403c <MX_SPI1_Init+0x74>)
 8004022:	2200      	movs	r2, #0
 8004024:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004026:	4805      	ldr	r0, [pc, #20]	; (800403c <MX_SPI1_Init+0x74>)
 8004028:	f007 fe00 	bl	800bc2c <HAL_SPI_Init>
 800402c:	4603      	mov	r3, r0
 800402e:	2b00      	cmp	r3, #0
 8004030:	d001      	beq.n	8004036 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8004032:	f001 fcb1 	bl	8005998 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004036:	bf00      	nop
 8004038:	bd80      	pop	{r7, pc}
 800403a:	bf00      	nop
 800403c:	20000b78 	.word	0x20000b78
 8004040:	40013000 	.word	0x40013000

08004044 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8004048:	4b1b      	ldr	r3, [pc, #108]	; (80040b8 <MX_SPI2_Init+0x74>)
 800404a:	4a1c      	ldr	r2, [pc, #112]	; (80040bc <MX_SPI2_Init+0x78>)
 800404c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800404e:	4b1a      	ldr	r3, [pc, #104]	; (80040b8 <MX_SPI2_Init+0x74>)
 8004050:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004054:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8004056:	4b18      	ldr	r3, [pc, #96]	; (80040b8 <MX_SPI2_Init+0x74>)
 8004058:	2200      	movs	r2, #0
 800405a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800405c:	4b16      	ldr	r3, [pc, #88]	; (80040b8 <MX_SPI2_Init+0x74>)
 800405e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004062:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004064:	4b14      	ldr	r3, [pc, #80]	; (80040b8 <MX_SPI2_Init+0x74>)
 8004066:	2200      	movs	r2, #0
 8004068:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800406a:	4b13      	ldr	r3, [pc, #76]	; (80040b8 <MX_SPI2_Init+0x74>)
 800406c:	2200      	movs	r2, #0
 800406e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8004070:	4b11      	ldr	r3, [pc, #68]	; (80040b8 <MX_SPI2_Init+0x74>)
 8004072:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004076:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004078:	4b0f      	ldr	r3, [pc, #60]	; (80040b8 <MX_SPI2_Init+0x74>)
 800407a:	2200      	movs	r2, #0
 800407c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800407e:	4b0e      	ldr	r3, [pc, #56]	; (80040b8 <MX_SPI2_Init+0x74>)
 8004080:	2200      	movs	r2, #0
 8004082:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004084:	4b0c      	ldr	r3, [pc, #48]	; (80040b8 <MX_SPI2_Init+0x74>)
 8004086:	2200      	movs	r2, #0
 8004088:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800408a:	4b0b      	ldr	r3, [pc, #44]	; (80040b8 <MX_SPI2_Init+0x74>)
 800408c:	2200      	movs	r2, #0
 800408e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8004090:	4b09      	ldr	r3, [pc, #36]	; (80040b8 <MX_SPI2_Init+0x74>)
 8004092:	2207      	movs	r2, #7
 8004094:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004096:	4b08      	ldr	r3, [pc, #32]	; (80040b8 <MX_SPI2_Init+0x74>)
 8004098:	2200      	movs	r2, #0
 800409a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800409c:	4b06      	ldr	r3, [pc, #24]	; (80040b8 <MX_SPI2_Init+0x74>)
 800409e:	2200      	movs	r2, #0
 80040a0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80040a2:	4805      	ldr	r0, [pc, #20]	; (80040b8 <MX_SPI2_Init+0x74>)
 80040a4:	f007 fdc2 	bl	800bc2c <HAL_SPI_Init>
 80040a8:	4603      	mov	r3, r0
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d001      	beq.n	80040b2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80040ae:	f001 fc73 	bl	8005998 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80040b2:	bf00      	nop
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop
 80040b8:	20000bdc 	.word	0x20000bdc
 80040bc:	40003800 	.word	0x40003800

080040c0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b088      	sub	sp, #32
 80040c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80040c6:	f107 0310 	add.w	r3, r7, #16
 80040ca:	2200      	movs	r2, #0
 80040cc:	601a      	str	r2, [r3, #0]
 80040ce:	605a      	str	r2, [r3, #4]
 80040d0:	609a      	str	r2, [r3, #8]
 80040d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80040d4:	1d3b      	adds	r3, r7, #4
 80040d6:	2200      	movs	r2, #0
 80040d8:	601a      	str	r2, [r3, #0]
 80040da:	605a      	str	r2, [r3, #4]
 80040dc:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN TIM4_Init 1 */

  // interupt every 10 ms

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80040de:	4b1d      	ldr	r3, [pc, #116]	; (8004154 <MX_TIM4_Init+0x94>)
 80040e0:	4a1d      	ldr	r2, [pc, #116]	; (8004158 <MX_TIM4_Init+0x98>)
 80040e2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7999;
 80040e4:	4b1b      	ldr	r3, [pc, #108]	; (8004154 <MX_TIM4_Init+0x94>)
 80040e6:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80040ea:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040ec:	4b19      	ldr	r3, [pc, #100]	; (8004154 <MX_TIM4_Init+0x94>)
 80040ee:	2200      	movs	r2, #0
 80040f0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 80040f2:	4b18      	ldr	r3, [pc, #96]	; (8004154 <MX_TIM4_Init+0x94>)
 80040f4:	2263      	movs	r2, #99	; 0x63
 80040f6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80040f8:	4b16      	ldr	r3, [pc, #88]	; (8004154 <MX_TIM4_Init+0x94>)
 80040fa:	2200      	movs	r2, #0
 80040fc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80040fe:	4b15      	ldr	r3, [pc, #84]	; (8004154 <MX_TIM4_Init+0x94>)
 8004100:	2280      	movs	r2, #128	; 0x80
 8004102:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8004104:	4813      	ldr	r0, [pc, #76]	; (8004154 <MX_TIM4_Init+0x94>)
 8004106:	f009 f99b 	bl	800d440 <HAL_TIM_Base_Init>
 800410a:	4603      	mov	r3, r0
 800410c:	2b00      	cmp	r3, #0
 800410e:	d001      	beq.n	8004114 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8004110:	f001 fc42 	bl	8005998 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004114:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004118:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800411a:	f107 0310 	add.w	r3, r7, #16
 800411e:	4619      	mov	r1, r3
 8004120:	480c      	ldr	r0, [pc, #48]	; (8004154 <MX_TIM4_Init+0x94>)
 8004122:	f009 fba3 	bl	800d86c <HAL_TIM_ConfigClockSource>
 8004126:	4603      	mov	r3, r0
 8004128:	2b00      	cmp	r3, #0
 800412a:	d001      	beq.n	8004130 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 800412c:	f001 fc34 	bl	8005998 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004130:	2300      	movs	r3, #0
 8004132:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004134:	2300      	movs	r3, #0
 8004136:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004138:	1d3b      	adds	r3, r7, #4
 800413a:	4619      	mov	r1, r3
 800413c:	4805      	ldr	r0, [pc, #20]	; (8004154 <MX_TIM4_Init+0x94>)
 800413e:	f009 fdbb 	bl	800dcb8 <HAL_TIMEx_MasterConfigSynchronization>
 8004142:	4603      	mov	r3, r0
 8004144:	2b00      	cmp	r3, #0
 8004146:	d001      	beq.n	800414c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8004148:	f001 fc26 	bl	8005998 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800414c:	bf00      	nop
 800414e:	3720      	adds	r7, #32
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}
 8004154:	20000d18 	.word	0x20000d18
 8004158:	40000800 	.word	0x40000800

0800415c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b084      	sub	sp, #16
 8004160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004162:	1d3b      	adds	r3, r7, #4
 8004164:	2200      	movs	r2, #0
 8004166:	601a      	str	r2, [r3, #0]
 8004168:	605a      	str	r2, [r3, #4]
 800416a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800416c:	4b14      	ldr	r3, [pc, #80]	; (80041c0 <MX_TIM6_Init+0x64>)
 800416e:	4a15      	ldr	r2, [pc, #84]	; (80041c4 <MX_TIM6_Init+0x68>)
 8004170:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 399;
 8004172:	4b13      	ldr	r3, [pc, #76]	; (80041c0 <MX_TIM6_Init+0x64>)
 8004174:	f240 128f 	movw	r2, #399	; 0x18f
 8004178:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800417a:	4b11      	ldr	r3, [pc, #68]	; (80041c0 <MX_TIM6_Init+0x64>)
 800417c:	2200      	movs	r2, #0
 800417e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 4;
 8004180:	4b0f      	ldr	r3, [pc, #60]	; (80041c0 <MX_TIM6_Init+0x64>)
 8004182:	2204      	movs	r2, #4
 8004184:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004186:	4b0e      	ldr	r3, [pc, #56]	; (80041c0 <MX_TIM6_Init+0x64>)
 8004188:	2280      	movs	r2, #128	; 0x80
 800418a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800418c:	480c      	ldr	r0, [pc, #48]	; (80041c0 <MX_TIM6_Init+0x64>)
 800418e:	f009 f957 	bl	800d440 <HAL_TIM_Base_Init>
 8004192:	4603      	mov	r3, r0
 8004194:	2b00      	cmp	r3, #0
 8004196:	d001      	beq.n	800419c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8004198:	f001 fbfe 	bl	8005998 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800419c:	2300      	movs	r3, #0
 800419e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80041a0:	2300      	movs	r3, #0
 80041a2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80041a4:	1d3b      	adds	r3, r7, #4
 80041a6:	4619      	mov	r1, r3
 80041a8:	4805      	ldr	r0, [pc, #20]	; (80041c0 <MX_TIM6_Init+0x64>)
 80041aa:	f009 fd85 	bl	800dcb8 <HAL_TIMEx_MasterConfigSynchronization>
 80041ae:	4603      	mov	r3, r0
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d001      	beq.n	80041b8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80041b4:	f001 fbf0 	bl	8005998 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80041b8:	bf00      	nop
 80041ba:	3710      	adds	r7, #16
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}
 80041c0:	20000d64 	.word	0x20000d64
 80041c4:	40001000 	.word	0x40001000

080041c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80041cc:	4b14      	ldr	r3, [pc, #80]	; (8004220 <MX_USART2_UART_Init+0x58>)
 80041ce:	4a15      	ldr	r2, [pc, #84]	; (8004224 <MX_USART2_UART_Init+0x5c>)
 80041d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 230400;
 80041d2:	4b13      	ldr	r3, [pc, #76]	; (8004220 <MX_USART2_UART_Init+0x58>)
 80041d4:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 80041d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80041da:	4b11      	ldr	r3, [pc, #68]	; (8004220 <MX_USART2_UART_Init+0x58>)
 80041dc:	2200      	movs	r2, #0
 80041de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80041e0:	4b0f      	ldr	r3, [pc, #60]	; (8004220 <MX_USART2_UART_Init+0x58>)
 80041e2:	2200      	movs	r2, #0
 80041e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80041e6:	4b0e      	ldr	r3, [pc, #56]	; (8004220 <MX_USART2_UART_Init+0x58>)
 80041e8:	2200      	movs	r2, #0
 80041ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80041ec:	4b0c      	ldr	r3, [pc, #48]	; (8004220 <MX_USART2_UART_Init+0x58>)
 80041ee:	220c      	movs	r2, #12
 80041f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80041f2:	4b0b      	ldr	r3, [pc, #44]	; (8004220 <MX_USART2_UART_Init+0x58>)
 80041f4:	2200      	movs	r2, #0
 80041f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80041f8:	4b09      	ldr	r3, [pc, #36]	; (8004220 <MX_USART2_UART_Init+0x58>)
 80041fa:	2200      	movs	r2, #0
 80041fc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80041fe:	4b08      	ldr	r3, [pc, #32]	; (8004220 <MX_USART2_UART_Init+0x58>)
 8004200:	2200      	movs	r2, #0
 8004202:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004204:	4b06      	ldr	r3, [pc, #24]	; (8004220 <MX_USART2_UART_Init+0x58>)
 8004206:	2200      	movs	r2, #0
 8004208:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800420a:	4805      	ldr	r0, [pc, #20]	; (8004220 <MX_USART2_UART_Init+0x58>)
 800420c:	f009 fdfa 	bl	800de04 <HAL_UART_Init>
 8004210:	4603      	mov	r3, r0
 8004212:	2b00      	cmp	r3, #0
 8004214:	d001      	beq.n	800421a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8004216:	f001 fbbf 	bl	8005998 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800421a:	bf00      	nop
 800421c:	bd80      	pop	{r7, pc}
 800421e:	bf00      	nop
 8004220:	20000db0 	.word	0x20000db0
 8004224:	40004400 	.word	0x40004400

08004228 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800422c:	4b14      	ldr	r3, [pc, #80]	; (8004280 <MX_USART3_UART_Init+0x58>)
 800422e:	4a15      	ldr	r2, [pc, #84]	; (8004284 <MX_USART3_UART_Init+0x5c>)
 8004230:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8004232:	4b13      	ldr	r3, [pc, #76]	; (8004280 <MX_USART3_UART_Init+0x58>)
 8004234:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004238:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800423a:	4b11      	ldr	r3, [pc, #68]	; (8004280 <MX_USART3_UART_Init+0x58>)
 800423c:	2200      	movs	r2, #0
 800423e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004240:	4b0f      	ldr	r3, [pc, #60]	; (8004280 <MX_USART3_UART_Init+0x58>)
 8004242:	2200      	movs	r2, #0
 8004244:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004246:	4b0e      	ldr	r3, [pc, #56]	; (8004280 <MX_USART3_UART_Init+0x58>)
 8004248:	2200      	movs	r2, #0
 800424a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800424c:	4b0c      	ldr	r3, [pc, #48]	; (8004280 <MX_USART3_UART_Init+0x58>)
 800424e:	220c      	movs	r2, #12
 8004250:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004252:	4b0b      	ldr	r3, [pc, #44]	; (8004280 <MX_USART3_UART_Init+0x58>)
 8004254:	2200      	movs	r2, #0
 8004256:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004258:	4b09      	ldr	r3, [pc, #36]	; (8004280 <MX_USART3_UART_Init+0x58>)
 800425a:	2200      	movs	r2, #0
 800425c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800425e:	4b08      	ldr	r3, [pc, #32]	; (8004280 <MX_USART3_UART_Init+0x58>)
 8004260:	2200      	movs	r2, #0
 8004262:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004264:	4b06      	ldr	r3, [pc, #24]	; (8004280 <MX_USART3_UART_Init+0x58>)
 8004266:	2200      	movs	r2, #0
 8004268:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800426a:	4805      	ldr	r0, [pc, #20]	; (8004280 <MX_USART3_UART_Init+0x58>)
 800426c:	f009 fdca 	bl	800de04 <HAL_UART_Init>
 8004270:	4603      	mov	r3, r0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d001      	beq.n	800427a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8004276:	f001 fb8f 	bl	8005998 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800427a:	bf00      	nop
 800427c:	bd80      	pop	{r7, pc}
 800427e:	bf00      	nop
 8004280:	20000e34 	.word	0x20000e34
 8004284:	40004800 	.word	0x40004800

08004288 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b082      	sub	sp, #8
 800428c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800428e:	4b2a      	ldr	r3, [pc, #168]	; (8004338 <MX_DMA_Init+0xb0>)
 8004290:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004292:	4a29      	ldr	r2, [pc, #164]	; (8004338 <MX_DMA_Init+0xb0>)
 8004294:	f043 0301 	orr.w	r3, r3, #1
 8004298:	6493      	str	r3, [r2, #72]	; 0x48
 800429a:	4b27      	ldr	r3, [pc, #156]	; (8004338 <MX_DMA_Init+0xb0>)
 800429c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800429e:	f003 0301 	and.w	r3, r3, #1
 80042a2:	607b      	str	r3, [r7, #4]
 80042a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80042a6:	4b24      	ldr	r3, [pc, #144]	; (8004338 <MX_DMA_Init+0xb0>)
 80042a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042aa:	4a23      	ldr	r2, [pc, #140]	; (8004338 <MX_DMA_Init+0xb0>)
 80042ac:	f043 0302 	orr.w	r3, r3, #2
 80042b0:	6493      	str	r3, [r2, #72]	; 0x48
 80042b2:	4b21      	ldr	r3, [pc, #132]	; (8004338 <MX_DMA_Init+0xb0>)
 80042b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042b6:	f003 0302 	and.w	r3, r3, #2
 80042ba:	603b      	str	r3, [r7, #0]
 80042bc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80042be:	2200      	movs	r2, #0
 80042c0:	2100      	movs	r1, #0
 80042c2:	200c      	movs	r0, #12
 80042c4:	f003 fc8d 	bl	8007be2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80042c8:	200c      	movs	r0, #12
 80042ca:	f003 fca6 	bl	8007c1a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80042ce:	2200      	movs	r2, #0
 80042d0:	2100      	movs	r1, #0
 80042d2:	200e      	movs	r0, #14
 80042d4:	f003 fc85 	bl	8007be2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80042d8:	200e      	movs	r0, #14
 80042da:	f003 fc9e 	bl	8007c1a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80042de:	2200      	movs	r2, #0
 80042e0:	2100      	movs	r1, #0
 80042e2:	200f      	movs	r0, #15
 80042e4:	f003 fc7d 	bl	8007be2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80042e8:	200f      	movs	r0, #15
 80042ea:	f003 fc96 	bl	8007c1a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80042ee:	2200      	movs	r2, #0
 80042f0:	2100      	movs	r1, #0
 80042f2:	2010      	movs	r0, #16
 80042f4:	f003 fc75 	bl	8007be2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80042f8:	2010      	movs	r0, #16
 80042fa:	f003 fc8e 	bl	8007c1a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 3, 0);
 80042fe:	2200      	movs	r2, #0
 8004300:	2103      	movs	r1, #3
 8004302:	2011      	movs	r0, #17
 8004304:	f003 fc6d 	bl	8007be2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8004308:	2011      	movs	r0, #17
 800430a:	f003 fc86 	bl	8007c1a <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 0, 0);
 800430e:	2200      	movs	r2, #0
 8004310:	2100      	movs	r1, #0
 8004312:	203b      	movs	r0, #59	; 0x3b
 8004314:	f003 fc65 	bl	8007be2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8004318:	203b      	movs	r0, #59	; 0x3b
 800431a:	f003 fc7e 	bl	8007c1a <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel6_IRQn, 0, 0);
 800431e:	2200      	movs	r2, #0
 8004320:	2100      	movs	r1, #0
 8004322:	2044      	movs	r0, #68	; 0x44
 8004324:	f003 fc5d 	bl	8007be2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel6_IRQn);
 8004328:	2044      	movs	r0, #68	; 0x44
 800432a:	f003 fc76 	bl	8007c1a <HAL_NVIC_EnableIRQ>

}
 800432e:	bf00      	nop
 8004330:	3708      	adds	r7, #8
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop
 8004338:	40021000 	.word	0x40021000

0800433c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b08a      	sub	sp, #40	; 0x28
 8004340:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004342:	f107 0314 	add.w	r3, r7, #20
 8004346:	2200      	movs	r2, #0
 8004348:	601a      	str	r2, [r3, #0]
 800434a:	605a      	str	r2, [r3, #4]
 800434c:	609a      	str	r2, [r3, #8]
 800434e:	60da      	str	r2, [r3, #12]
 8004350:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004352:	4b80      	ldr	r3, [pc, #512]	; (8004554 <MX_GPIO_Init+0x218>)
 8004354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004356:	4a7f      	ldr	r2, [pc, #508]	; (8004554 <MX_GPIO_Init+0x218>)
 8004358:	f043 0304 	orr.w	r3, r3, #4
 800435c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800435e:	4b7d      	ldr	r3, [pc, #500]	; (8004554 <MX_GPIO_Init+0x218>)
 8004360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004362:	f003 0304 	and.w	r3, r3, #4
 8004366:	613b      	str	r3, [r7, #16]
 8004368:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800436a:	4b7a      	ldr	r3, [pc, #488]	; (8004554 <MX_GPIO_Init+0x218>)
 800436c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800436e:	4a79      	ldr	r2, [pc, #484]	; (8004554 <MX_GPIO_Init+0x218>)
 8004370:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004374:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004376:	4b77      	ldr	r3, [pc, #476]	; (8004554 <MX_GPIO_Init+0x218>)
 8004378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800437a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800437e:	60fb      	str	r3, [r7, #12]
 8004380:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004382:	4b74      	ldr	r3, [pc, #464]	; (8004554 <MX_GPIO_Init+0x218>)
 8004384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004386:	4a73      	ldr	r2, [pc, #460]	; (8004554 <MX_GPIO_Init+0x218>)
 8004388:	f043 0301 	orr.w	r3, r3, #1
 800438c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800438e:	4b71      	ldr	r3, [pc, #452]	; (8004554 <MX_GPIO_Init+0x218>)
 8004390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004392:	f003 0301 	and.w	r3, r3, #1
 8004396:	60bb      	str	r3, [r7, #8]
 8004398:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800439a:	4b6e      	ldr	r3, [pc, #440]	; (8004554 <MX_GPIO_Init+0x218>)
 800439c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800439e:	4a6d      	ldr	r2, [pc, #436]	; (8004554 <MX_GPIO_Init+0x218>)
 80043a0:	f043 0302 	orr.w	r3, r3, #2
 80043a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80043a6:	4b6b      	ldr	r3, [pc, #428]	; (8004554 <MX_GPIO_Init+0x218>)
 80043a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043aa:	f003 0302 	and.w	r3, r3, #2
 80043ae:	607b      	str	r3, [r7, #4]
 80043b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80043b2:	4b68      	ldr	r3, [pc, #416]	; (8004554 <MX_GPIO_Init+0x218>)
 80043b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043b6:	4a67      	ldr	r2, [pc, #412]	; (8004554 <MX_GPIO_Init+0x218>)
 80043b8:	f043 0308 	orr.w	r3, r3, #8
 80043bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80043be:	4b65      	ldr	r3, [pc, #404]	; (8004554 <MX_GPIO_Init+0x218>)
 80043c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043c2:	f003 0308 	and.w	r3, r3, #8
 80043c6:	603b      	str	r3, [r7, #0]
 80043c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DISPLAY_ON_Pin|ERR_LED_Pin, GPIO_PIN_RESET);
 80043ca:	2200      	movs	r2, #0
 80043cc:	2109      	movs	r1, #9
 80043ce:	4862      	ldr	r0, [pc, #392]	; (8004558 <MX_GPIO_Init+0x21c>)
 80043d0:	f004 f892 	bl	80084f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TIK_LED_GPIO_Port, TIK_LED_Pin, GPIO_PIN_RESET);
 80043d4:	2200      	movs	r2, #0
 80043d6:	2102      	movs	r1, #2
 80043d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80043dc:	f004 f88c 	bl	80084f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 80043e0:	2201      	movs	r2, #1
 80043e2:	2110      	movs	r1, #16
 80043e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80043e8:	f004 f886 	bl	80084f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin|SPI1_DC_Pin, GPIO_PIN_SET);
 80043ec:	2201      	movs	r2, #1
 80043ee:	f44f 5181 	mov.w	r1, #4128	; 0x1020
 80043f2:	485a      	ldr	r0, [pc, #360]	; (800455c <MX_GPIO_Init+0x220>)
 80043f4:	f004 f880 	bl	80084f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);
 80043f8:	2201      	movs	r2, #1
 80043fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80043fe:	4856      	ldr	r0, [pc, #344]	; (8004558 <MX_GPIO_Init+0x21c>)
 8004400:	f004 f87a 	bl	80084f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_RST_GPIO_Port, SPI1_RST_Pin, GPIO_PIN_SET);
 8004404:	2201      	movs	r2, #1
 8004406:	2104      	movs	r1, #4
 8004408:	4855      	ldr	r0, [pc, #340]	; (8004560 <MX_GPIO_Init+0x224>)
 800440a:	f004 f875 	bl	80084f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DISPLAY_ON_Pin */
  GPIO_InitStruct.Pin = DISPLAY_ON_Pin;
 800440e:	2301      	movs	r3, #1
 8004410:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004412:	2301      	movs	r3, #1
 8004414:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004416:	2302      	movs	r3, #2
 8004418:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800441a:	2300      	movs	r3, #0
 800441c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DISPLAY_ON_GPIO_Port, &GPIO_InitStruct);
 800441e:	f107 0314 	add.w	r3, r7, #20
 8004422:	4619      	mov	r1, r3
 8004424:	484c      	ldr	r0, [pc, #304]	; (8004558 <MX_GPIO_Init+0x21c>)
 8004426:	f003 fea5 	bl	8008174 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEY0_Pin KEY1_Pin */
  GPIO_InitStruct.Pin = KEY0_Pin|KEY1_Pin;
 800442a:	2306      	movs	r3, #6
 800442c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800442e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8004432:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004434:	2301      	movs	r3, #1
 8004436:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004438:	f107 0314 	add.w	r3, r7, #20
 800443c:	4619      	mov	r1, r3
 800443e:	4846      	ldr	r0, [pc, #280]	; (8004558 <MX_GPIO_Init+0x21c>)
 8004440:	f003 fe98 	bl	8008174 <HAL_GPIO_Init>

  /*Configure GPIO pin : ERR_LED_Pin */
  GPIO_InitStruct.Pin = ERR_LED_Pin;
 8004444:	2308      	movs	r3, #8
 8004446:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004448:	2301      	movs	r3, #1
 800444a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800444c:	2300      	movs	r3, #0
 800444e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8004450:	2301      	movs	r3, #1
 8004452:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ERR_LED_GPIO_Port, &GPIO_InitStruct);
 8004454:	f107 0314 	add.w	r3, r7, #20
 8004458:	4619      	mov	r1, r3
 800445a:	483f      	ldr	r0, [pc, #252]	; (8004558 <MX_GPIO_Init+0x21c>)
 800445c:	f003 fe8a 	bl	8008174 <HAL_GPIO_Init>

  /*Configure GPIO pin : TIK_LED_Pin */
  GPIO_InitStruct.Pin = TIK_LED_Pin;
 8004460:	2302      	movs	r3, #2
 8004462:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004464:	2301      	movs	r3, #1
 8004466:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004468:	2300      	movs	r3, #0
 800446a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800446c:	2300      	movs	r3, #0
 800446e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TIK_LED_GPIO_Port, &GPIO_InitStruct);
 8004470:	f107 0314 	add.w	r3, r7, #20
 8004474:	4619      	mov	r1, r3
 8004476:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800447a:	f003 fe7b 	bl	8008174 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 800447e:	2310      	movs	r3, #16
 8004480:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004482:	2301      	movs	r3, #1
 8004484:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004486:	2300      	movs	r3, #0
 8004488:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800448a:	2302      	movs	r3, #2
 800448c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 800448e:	f107 0314 	add.w	r3, r7, #20
 8004492:	4619      	mov	r1, r3
 8004494:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004498:	f003 fe6c 	bl	8008174 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 800449c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80044a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80044a2:	2301      	movs	r3, #1
 80044a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80044a6:	2301      	movs	r3, #1
 80044a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80044aa:	2302      	movs	r3, #2
 80044ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 80044ae:	f107 0314 	add.w	r3, r7, #20
 80044b2:	4619      	mov	r1, r3
 80044b4:	4829      	ldr	r0, [pc, #164]	; (800455c <MX_GPIO_Init+0x220>)
 80044b6:	f003 fe5d 	bl	8008174 <HAL_GPIO_Init>

  /*Configure GPIO pin : IRED_Pin */
  GPIO_InitStruct.Pin = IRED_Pin;
 80044ba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80044be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80044c0:	2300      	movs	r3, #0
 80044c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80044c4:	2301      	movs	r3, #1
 80044c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IRED_GPIO_Port, &GPIO_InitStruct);
 80044c8:	f107 0314 	add.w	r3, r7, #20
 80044cc:	4619      	mov	r1, r3
 80044ce:	4822      	ldr	r0, [pc, #136]	; (8004558 <MX_GPIO_Init+0x21c>)
 80044d0:	f003 fe50 	bl	8008174 <HAL_GPIO_Init>

  /*Configure GPIO pin : GREEN_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin;
 80044d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80044d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80044da:	2301      	movs	r3, #1
 80044dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80044de:	2301      	movs	r3, #1
 80044e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80044e2:	2301      	movs	r3, #1
 80044e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GREEN_LED_GPIO_Port, &GPIO_InitStruct);
 80044e6:	f107 0314 	add.w	r3, r7, #20
 80044ea:	4619      	mov	r1, r3
 80044ec:	481a      	ldr	r0, [pc, #104]	; (8004558 <MX_GPIO_Init+0x21c>)
 80044ee:	f003 fe41 	bl	8008174 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_RST_Pin */
  GPIO_InitStruct.Pin = SPI1_RST_Pin;
 80044f2:	2304      	movs	r3, #4
 80044f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80044f6:	2301      	movs	r3, #1
 80044f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80044fa:	2301      	movs	r3, #1
 80044fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80044fe:	2302      	movs	r3, #2
 8004500:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_RST_GPIO_Port, &GPIO_InitStruct);
 8004502:	f107 0314 	add.w	r3, r7, #20
 8004506:	4619      	mov	r1, r3
 8004508:	4815      	ldr	r0, [pc, #84]	; (8004560 <MX_GPIO_Init+0x224>)
 800450a:	f003 fe33 	bl	8008174 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_DC_Pin */
  GPIO_InitStruct.Pin = SPI1_DC_Pin;
 800450e:	2320      	movs	r3, #32
 8004510:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004512:	2301      	movs	r3, #1
 8004514:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004516:	2300      	movs	r3, #0
 8004518:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800451a:	2302      	movs	r3, #2
 800451c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_DC_GPIO_Port, &GPIO_InitStruct);
 800451e:	f107 0314 	add.w	r3, r7, #20
 8004522:	4619      	mov	r1, r3
 8004524:	480d      	ldr	r0, [pc, #52]	; (800455c <MX_GPIO_Init+0x220>)
 8004526:	f003 fe25 	bl	8008174 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800452a:	2200      	movs	r2, #0
 800452c:	2100      	movs	r1, #0
 800452e:	2007      	movs	r0, #7
 8004530:	f003 fb57 	bl	8007be2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8004534:	2007      	movs	r0, #7
 8004536:	f003 fb70 	bl	8007c1a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800453a:	2200      	movs	r2, #0
 800453c:	2100      	movs	r1, #0
 800453e:	2008      	movs	r0, #8
 8004540:	f003 fb4f 	bl	8007be2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8004544:	2008      	movs	r0, #8
 8004546:	f003 fb68 	bl	8007c1a <HAL_NVIC_EnableIRQ>

}
 800454a:	bf00      	nop
 800454c:	3728      	adds	r7, #40	; 0x28
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	40021000 	.word	0x40021000
 8004558:	48000800 	.word	0x48000800
 800455c:	48000400 	.word	0x48000400
 8004560:	48000c00 	.word	0x48000c00

08004564 <hexToBin>:

//-------------------------------------------------------------------------------------------
//      Преобразует два символа строки из hex-формата в двоичный
//
uint8_t hexToBin(char *sc)
{
 8004564:	b480      	push	{r7}
 8004566:	b085      	sub	sp, #20
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
char st = 0, ml = 0;
 800456c:	2300      	movs	r3, #0
 800456e:	73fb      	strb	r3, [r7, #15]
 8004570:	2300      	movs	r3, #0
 8004572:	73bb      	strb	r3, [r7, #14]

	if ((sc[0] >= '0') && (sc[0] <= '9')) st = (sc[0] - 0x30);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	781b      	ldrb	r3, [r3, #0]
 8004578:	2b2f      	cmp	r3, #47	; 0x2f
 800457a:	d908      	bls.n	800458e <hexToBin+0x2a>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	781b      	ldrb	r3, [r3, #0]
 8004580:	2b39      	cmp	r3, #57	; 0x39
 8004582:	d804      	bhi.n	800458e <hexToBin+0x2a>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	781b      	ldrb	r3, [r3, #0]
 8004588:	3b30      	subs	r3, #48	; 0x30
 800458a:	73fb      	strb	r3, [r7, #15]
 800458c:	e018      	b.n	80045c0 <hexToBin+0x5c>
	else
	if ((sc[0] >= 'A') && (sc[0] <= 'F')) st = (sc[0] - 0x37);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	2b40      	cmp	r3, #64	; 0x40
 8004594:	d908      	bls.n	80045a8 <hexToBin+0x44>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	781b      	ldrb	r3, [r3, #0]
 800459a:	2b46      	cmp	r3, #70	; 0x46
 800459c:	d804      	bhi.n	80045a8 <hexToBin+0x44>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	781b      	ldrb	r3, [r3, #0]
 80045a2:	3b37      	subs	r3, #55	; 0x37
 80045a4:	73fb      	strb	r3, [r7, #15]
 80045a6:	e00b      	b.n	80045c0 <hexToBin+0x5c>
	else
	if ((sc[0] >= 'a') && (sc[0] <= 'f')) st = (sc[0] - 0x57);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	781b      	ldrb	r3, [r3, #0]
 80045ac:	2b60      	cmp	r3, #96	; 0x60
 80045ae:	d907      	bls.n	80045c0 <hexToBin+0x5c>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	781b      	ldrb	r3, [r3, #0]
 80045b4:	2b66      	cmp	r3, #102	; 0x66
 80045b6:	d803      	bhi.n	80045c0 <hexToBin+0x5c>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	781b      	ldrb	r3, [r3, #0]
 80045bc:	3b57      	subs	r3, #87	; 0x57
 80045be:	73fb      	strb	r3, [r7, #15]

	if ((sc[1] >= '0') && (sc[1] <= '9')) ml = (sc[1] - 0x30);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	3301      	adds	r3, #1
 80045c4:	781b      	ldrb	r3, [r3, #0]
 80045c6:	2b2f      	cmp	r3, #47	; 0x2f
 80045c8:	d90a      	bls.n	80045e0 <hexToBin+0x7c>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	3301      	adds	r3, #1
 80045ce:	781b      	ldrb	r3, [r3, #0]
 80045d0:	2b39      	cmp	r3, #57	; 0x39
 80045d2:	d805      	bhi.n	80045e0 <hexToBin+0x7c>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	3301      	adds	r3, #1
 80045d8:	781b      	ldrb	r3, [r3, #0]
 80045da:	3b30      	subs	r3, #48	; 0x30
 80045dc:	73bb      	strb	r3, [r7, #14]
 80045de:	e01e      	b.n	800461e <hexToBin+0xba>
	else
	if ((sc[1] >= 'A') && (sc[1] <= 'F')) ml = (sc[1] - 0x37);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	3301      	adds	r3, #1
 80045e4:	781b      	ldrb	r3, [r3, #0]
 80045e6:	2b40      	cmp	r3, #64	; 0x40
 80045e8:	d90a      	bls.n	8004600 <hexToBin+0x9c>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	3301      	adds	r3, #1
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	2b46      	cmp	r3, #70	; 0x46
 80045f2:	d805      	bhi.n	8004600 <hexToBin+0x9c>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	3301      	adds	r3, #1
 80045f8:	781b      	ldrb	r3, [r3, #0]
 80045fa:	3b37      	subs	r3, #55	; 0x37
 80045fc:	73bb      	strb	r3, [r7, #14]
 80045fe:	e00e      	b.n	800461e <hexToBin+0xba>
	else
	if ((sc[1] >= 'a') && (sc[1] <= 'f')) ml = (sc[1] - 0x57);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	3301      	adds	r3, #1
 8004604:	781b      	ldrb	r3, [r3, #0]
 8004606:	2b60      	cmp	r3, #96	; 0x60
 8004608:	d909      	bls.n	800461e <hexToBin+0xba>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	3301      	adds	r3, #1
 800460e:	781b      	ldrb	r3, [r3, #0]
 8004610:	2b66      	cmp	r3, #102	; 0x66
 8004612:	d804      	bhi.n	800461e <hexToBin+0xba>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	3301      	adds	r3, #1
 8004618:	781b      	ldrb	r3, [r3, #0]
 800461a:	3b57      	subs	r3, #87	; 0x57
 800461c:	73bb      	strb	r3, [r7, #14]

	return ((st << 4) | (ml & 0x0f));
 800461e:	7bfb      	ldrb	r3, [r7, #15]
 8004620:	011b      	lsls	r3, r3, #4
 8004622:	b25a      	sxtb	r2, r3
 8004624:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004628:	f003 030f 	and.w	r3, r3, #15
 800462c:	b25b      	sxtb	r3, r3
 800462e:	4313      	orrs	r3, r2
 8004630:	b25b      	sxtb	r3, r3
 8004632:	b2db      	uxtb	r3, r3

}
 8004634:	4618      	mov	r0, r3
 8004636:	3714      	adds	r7, #20
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr

08004640 <getEvtCount>:


#ifdef SET_FIFO_MODE
//-------------------------------------------------------------------------------------------
uint8_t getEvtCount()
{
 8004640:	b480      	push	{r7}
 8004642:	af00      	add	r7, sp, #0
	return cnt_evt;
 8004644:	4b03      	ldr	r3, [pc, #12]	; (8004654 <getEvtCount+0x14>)
 8004646:	781b      	ldrb	r3, [r3, #0]
}
 8004648:	4618      	mov	r0, r3
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr
 8004652:	bf00      	nop
 8004654:	20001fe2 	.word	0x20001fe2

08004658 <putEvt>:
//-------------------------------------------------------------------------------------------
void putEvt(int evt)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b082      	sub	sp, #8
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]

	//while (lock_fifo);
	//lock_fifo = true;

	if (cnt_evt > (MAX_FIFO_SIZE - 3)) {
 8004660:	4b39      	ldr	r3, [pc, #228]	; (8004748 <putEvt+0xf0>)
 8004662:	781b      	ldrb	r3, [r3, #0]
 8004664:	2b3d      	cmp	r3, #61	; 0x3d
 8004666:	d907      	bls.n	8004678 <putEvt+0x20>
		devError |= devFIFO;
 8004668:	4b38      	ldr	r3, [pc, #224]	; (800474c <putEvt+0xf4>)
 800466a:	881b      	ldrh	r3, [r3, #0]
 800466c:	f043 0310 	orr.w	r3, r3, #16
 8004670:	b29a      	uxth	r2, r3
 8004672:	4b36      	ldr	r3, [pc, #216]	; (800474c <putEvt+0xf4>)
 8004674:	801a      	strh	r2, [r3, #0]
		//lock_fifo = false;
		return;
 8004676:	e063      	b.n	8004740 <putEvt+0xe8>
	}

	HAL_NVIC_DisableIRQ(USART2_IRQn);
 8004678:	2026      	movs	r0, #38	; 0x26
 800467a:	f003 fadc 	bl	8007c36 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(TIM4_IRQn);
 800467e:	201e      	movs	r0, #30
 8004680:	f003 fad9 	bl	8007c36 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(TIM6_IRQn);
 8004684:	2036      	movs	r0, #54	; 0x36
 8004686:	f003 fad6 	bl	8007c36 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 800468a:	2007      	movs	r0, #7
 800468c:	f003 fad3 	bl	8007c36 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI2_IRQn);
 8004690:	2008      	movs	r0, #8
 8004692:	f003 fad0 	bl	8007c36 <HAL_NVIC_DisableIRQ>

	if (cnt_evt >= MAX_FIFO_SIZE) {
 8004696:	4b2c      	ldr	r3, [pc, #176]	; (8004748 <putEvt+0xf0>)
 8004698:	781b      	ldrb	r3, [r3, #0]
 800469a:	2b3f      	cmp	r3, #63	; 0x3f
 800469c:	d906      	bls.n	80046ac <putEvt+0x54>
			wr_evt_err++;
 800469e:	4b2c      	ldr	r3, [pc, #176]	; (8004750 <putEvt+0xf8>)
 80046a0:	781b      	ldrb	r3, [r3, #0]
 80046a2:	3301      	adds	r3, #1
 80046a4:	b2da      	uxtb	r2, r3
 80046a6:	4b2a      	ldr	r3, [pc, #168]	; (8004750 <putEvt+0xf8>)
 80046a8:	701a      	strb	r2, [r3, #0]
 80046aa:	e027      	b.n	80046fc <putEvt+0xa4>
		} else {
			evt_fifo[wr_evt_adr] = evt;
 80046ac:	4b29      	ldr	r3, [pc, #164]	; (8004754 <putEvt+0xfc>)
 80046ae:	781b      	ldrb	r3, [r3, #0]
 80046b0:	4619      	mov	r1, r3
 80046b2:	4a29      	ldr	r2, [pc, #164]	; (8004758 <putEvt+0x100>)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			cnt_evt++;
 80046ba:	4b23      	ldr	r3, [pc, #140]	; (8004748 <putEvt+0xf0>)
 80046bc:	781b      	ldrb	r3, [r3, #0]
 80046be:	3301      	adds	r3, #1
 80046c0:	b2da      	uxtb	r2, r3
 80046c2:	4b21      	ldr	r3, [pc, #132]	; (8004748 <putEvt+0xf0>)
 80046c4:	701a      	strb	r2, [r3, #0]
			if (wr_evt_adr < (MAX_FIFO_SIZE - 1) ) {
 80046c6:	4b23      	ldr	r3, [pc, #140]	; (8004754 <putEvt+0xfc>)
 80046c8:	781b      	ldrb	r3, [r3, #0]
 80046ca:	2b3e      	cmp	r3, #62	; 0x3e
 80046cc:	d806      	bhi.n	80046dc <putEvt+0x84>
				wr_evt_adr++;
 80046ce:	4b21      	ldr	r3, [pc, #132]	; (8004754 <putEvt+0xfc>)
 80046d0:	781b      	ldrb	r3, [r3, #0]
 80046d2:	3301      	adds	r3, #1
 80046d4:	b2da      	uxtb	r2, r3
 80046d6:	4b1f      	ldr	r3, [pc, #124]	; (8004754 <putEvt+0xfc>)
 80046d8:	701a      	strb	r2, [r3, #0]
 80046da:	e002      	b.n	80046e2 <putEvt+0x8a>
			} else  {
				wr_evt_adr = 0;
 80046dc:	4b1d      	ldr	r3, [pc, #116]	; (8004754 <putEvt+0xfc>)
 80046de:	2200      	movs	r2, #0
 80046e0:	701a      	strb	r2, [r3, #0]
			}
			wr_evt_err = 0;
 80046e2:	4b1b      	ldr	r3, [pc, #108]	; (8004750 <putEvt+0xf8>)
 80046e4:	2200      	movs	r2, #0
 80046e6:	701a      	strb	r2, [r3, #0]
			if (cnt_evt > max_evt) max_evt = cnt_evt;
 80046e8:	4b17      	ldr	r3, [pc, #92]	; (8004748 <putEvt+0xf0>)
 80046ea:	781a      	ldrb	r2, [r3, #0]
 80046ec:	4b1b      	ldr	r3, [pc, #108]	; (800475c <putEvt+0x104>)
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d903      	bls.n	80046fc <putEvt+0xa4>
 80046f4:	4b14      	ldr	r3, [pc, #80]	; (8004748 <putEvt+0xf0>)
 80046f6:	781a      	ldrb	r2, [r3, #0]
 80046f8:	4b18      	ldr	r3, [pc, #96]	; (800475c <putEvt+0x104>)
 80046fa:	701a      	strb	r2, [r3, #0]
		}

		if (wr_evt_err) devError |= devFIFO;
 80046fc:	4b14      	ldr	r3, [pc, #80]	; (8004750 <putEvt+0xf8>)
 80046fe:	781b      	ldrb	r3, [r3, #0]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d007      	beq.n	8004714 <putEvt+0xbc>
 8004704:	4b11      	ldr	r3, [pc, #68]	; (800474c <putEvt+0xf4>)
 8004706:	881b      	ldrh	r3, [r3, #0]
 8004708:	f043 0310 	orr.w	r3, r3, #16
 800470c:	b29a      	uxth	r2, r3
 800470e:	4b0f      	ldr	r3, [pc, #60]	; (800474c <putEvt+0xf4>)
 8004710:	801a      	strh	r2, [r3, #0]
 8004712:	e006      	b.n	8004722 <putEvt+0xca>
				   else devError &= ~devFIFO;
 8004714:	4b0d      	ldr	r3, [pc, #52]	; (800474c <putEvt+0xf4>)
 8004716:	881b      	ldrh	r3, [r3, #0]
 8004718:	f023 0310 	bic.w	r3, r3, #16
 800471c:	b29a      	uxth	r2, r3
 800471e:	4b0b      	ldr	r3, [pc, #44]	; (800474c <putEvt+0xf4>)
 8004720:	801a      	strh	r2, [r3, #0]

		HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8004722:	2008      	movs	r0, #8
 8004724:	f003 fa79 	bl	8007c1a <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8004728:	2007      	movs	r0, #7
 800472a:	f003 fa76 	bl	8007c1a <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(TIM6_IRQn);
 800472e:	2036      	movs	r0, #54	; 0x36
 8004730:	f003 fa73 	bl	8007c1a <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004734:	201e      	movs	r0, #30
 8004736:	f003 fa70 	bl	8007c1a <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(USART2_IRQn);
 800473a:	2026      	movs	r0, #38	; 0x26
 800473c:	f003 fa6d 	bl	8007c1a <HAL_NVIC_EnableIRQ>

		//lock_fifo = false;
}
 8004740:	3708      	adds	r7, #8
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
 8004746:	bf00      	nop
 8004748:	20001fe2 	.word	0x20001fe2
 800474c:	20001bc8 	.word	0x20001bc8
 8004750:	20001fe1 	.word	0x20001fe1
 8004754:	20001fe0 	.word	0x20001fe0
 8004758:	200000dc 	.word	0x200000dc
 800475c:	20001fe3 	.word	0x20001fe3

08004760 <getEvt>:
//-------------------------------------------------------------------------------------------
int getEvt()
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b082      	sub	sp, #8
 8004764:	af00      	add	r7, sp, #0
int ret = evt_None;
 8004766:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800476a:	607b      	str	r3, [r7, #4]

	//while (lock_fifo);
	//lock_fifo = true;

	HAL_NVIC_DisableIRQ(USART2_IRQn);
 800476c:	2026      	movs	r0, #38	; 0x26
 800476e:	f003 fa62 	bl	8007c36 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(TIM4_IRQn);
 8004772:	201e      	movs	r0, #30
 8004774:	f003 fa5f 	bl	8007c36 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(TIM6_IRQn);
 8004778:	2036      	movs	r0, #54	; 0x36
 800477a:	f003 fa5c 	bl	8007c36 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 800477e:	2007      	movs	r0, #7
 8004780:	f003 fa59 	bl	8007c36 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI2_IRQn);
 8004784:	2008      	movs	r0, #8
 8004786:	f003 fa56 	bl	8007c36 <HAL_NVIC_DisableIRQ>

	if (cnt_evt) {
 800478a:	4b1b      	ldr	r3, [pc, #108]	; (80047f8 <getEvt+0x98>)
 800478c:	781b      	ldrb	r3, [r3, #0]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d01e      	beq.n	80047d0 <getEvt+0x70>
		ret = evt_fifo[rd_evt_adr];
 8004792:	4b1a      	ldr	r3, [pc, #104]	; (80047fc <getEvt+0x9c>)
 8004794:	781b      	ldrb	r3, [r3, #0]
 8004796:	461a      	mov	r2, r3
 8004798:	4b19      	ldr	r3, [pc, #100]	; (8004800 <getEvt+0xa0>)
 800479a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800479e:	607b      	str	r3, [r7, #4]
		if (cnt_evt) cnt_evt--;
 80047a0:	4b15      	ldr	r3, [pc, #84]	; (80047f8 <getEvt+0x98>)
 80047a2:	781b      	ldrb	r3, [r3, #0]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d005      	beq.n	80047b4 <getEvt+0x54>
 80047a8:	4b13      	ldr	r3, [pc, #76]	; (80047f8 <getEvt+0x98>)
 80047aa:	781b      	ldrb	r3, [r3, #0]
 80047ac:	3b01      	subs	r3, #1
 80047ae:	b2da      	uxtb	r2, r3
 80047b0:	4b11      	ldr	r3, [pc, #68]	; (80047f8 <getEvt+0x98>)
 80047b2:	701a      	strb	r2, [r3, #0]
		if (rd_evt_adr < (MAX_FIFO_SIZE - 1) ) {
 80047b4:	4b11      	ldr	r3, [pc, #68]	; (80047fc <getEvt+0x9c>)
 80047b6:	781b      	ldrb	r3, [r3, #0]
 80047b8:	2b3e      	cmp	r3, #62	; 0x3e
 80047ba:	d806      	bhi.n	80047ca <getEvt+0x6a>
			rd_evt_adr++;
 80047bc:	4b0f      	ldr	r3, [pc, #60]	; (80047fc <getEvt+0x9c>)
 80047be:	781b      	ldrb	r3, [r3, #0]
 80047c0:	3301      	adds	r3, #1
 80047c2:	b2da      	uxtb	r2, r3
 80047c4:	4b0d      	ldr	r3, [pc, #52]	; (80047fc <getEvt+0x9c>)
 80047c6:	701a      	strb	r2, [r3, #0]
 80047c8:	e002      	b.n	80047d0 <getEvt+0x70>
		} else {
			rd_evt_adr = 0;
 80047ca:	4b0c      	ldr	r3, [pc, #48]	; (80047fc <getEvt+0x9c>)
 80047cc:	2200      	movs	r2, #0
 80047ce:	701a      	strb	r2, [r3, #0]
		}
	}

	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80047d0:	2008      	movs	r0, #8
 80047d2:	f003 fa22 	bl	8007c1a <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80047d6:	2007      	movs	r0, #7
 80047d8:	f003 fa1f 	bl	8007c1a <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(TIM6_IRQn);
 80047dc:	2036      	movs	r0, #54	; 0x36
 80047de:	f003 fa1c 	bl	8007c1a <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80047e2:	201e      	movs	r0, #30
 80047e4:	f003 fa19 	bl	8007c1a <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 80047e8:	2026      	movs	r0, #38	; 0x26
 80047ea:	f003 fa16 	bl	8007c1a <HAL_NVIC_EnableIRQ>

	//lock_fifo = false;

	return ret;
 80047ee:	687b      	ldr	r3, [r7, #4]
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	3708      	adds	r7, #8
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}
 80047f8:	20001fe2 	.word	0x20001fe2
 80047fc:	20001fdf 	.word	0x20001fdf
 8004800:	200000dc 	.word	0x200000dc

08004804 <nameStation>:
//-------------------------------------------------------------------------------------------
#ifdef SET_DISPLAY

//-------------------------------------------------------------------------------------------
const char *nameStation(float fr)
{
 8004804:	b480      	push	{r7}
 8004806:	b085      	sub	sp, #20
 8004808:	af00      	add	r7, sp, #0
 800480a:	ed87 0a01 	vstr	s0, [r7, #4]
int8_t ik = -1;
 800480e:	23ff      	movs	r3, #255	; 0xff
 8004810:	73fb      	strb	r3, [r7, #15]

	for (int8_t i = 0; i < MAX_LIST; i++) {
 8004812:	2300      	movs	r3, #0
 8004814:	73bb      	strb	r3, [r7, #14]
 8004816:	e01b      	b.n	8004850 <nameStation+0x4c>
		if (list[i].freq == fr) {
 8004818:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800481c:	491a      	ldr	r1, [pc, #104]	; (8004888 <nameStation+0x84>)
 800481e:	4613      	mov	r3, r2
 8004820:	00db      	lsls	r3, r3, #3
 8004822:	4413      	add	r3, r2
 8004824:	009b      	lsls	r3, r3, #2
 8004826:	440b      	add	r3, r1
 8004828:	f8d3 3001 	ldr.w	r3, [r3, #1]
 800482c:	edd7 7a01 	vldr	s15, [r7, #4]
 8004830:	ee07 3a10 	vmov	s14, r3
 8004834:	eef4 7a47 	vcmp.f32	s15, s14
 8004838:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800483c:	d102      	bne.n	8004844 <nameStation+0x40>
			ik = i;
 800483e:	7bbb      	ldrb	r3, [r7, #14]
 8004840:	73fb      	strb	r3, [r7, #15]
			break;
 8004842:	e009      	b.n	8004858 <nameStation+0x54>
	for (int8_t i = 0; i < MAX_LIST; i++) {
 8004844:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004848:	b2db      	uxtb	r3, r3
 800484a:	3301      	adds	r3, #1
 800484c:	b2db      	uxtb	r3, r3
 800484e:	73bb      	strb	r3, [r7, #14]
 8004850:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004854:	2b18      	cmp	r3, #24
 8004856:	dddf      	ble.n	8004818 <nameStation+0x14>
		}
	}

	if (ik != -1) return list[ik].name;
 8004858:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800485c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004860:	d009      	beq.n	8004876 <nameStation+0x72>
 8004862:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8004866:	4613      	mov	r3, r2
 8004868:	00db      	lsls	r3, r3, #3
 800486a:	4413      	add	r3, r2
 800486c:	009b      	lsls	r3, r3, #2
 800486e:	4a06      	ldr	r2, [pc, #24]	; (8004888 <nameStation+0x84>)
 8004870:	4413      	add	r3, r2
 8004872:	3305      	adds	r3, #5
 8004874:	e001      	b.n	800487a <nameStation+0x76>
			 else return noneStation;
 8004876:	4b05      	ldr	r3, [pc, #20]	; (800488c <nameStation+0x88>)
 8004878:	681b      	ldr	r3, [r3, #0]
}
 800487a:	4618      	mov	r0, r3
 800487c:	3714      	adds	r7, #20
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr
 8004886:	bf00      	nop
 8004888:	20003034 	.word	0x20003034
 800488c:	20000204 	.word	0x20000204

08004890 <getNextList>:
//-------------------------------------------------------------------------------------------
float getNextList(float fr, uint8_t up, uint8_t *band)
{
 8004890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004894:	b08e      	sub	sp, #56	; 0x38
 8004896:	af08      	add	r7, sp, #32
 8004898:	ed87 0a03 	vstr	s0, [r7, #12]
 800489c:	4603      	mov	r3, r0
 800489e:	6079      	str	r1, [r7, #4]
 80048a0:	72fb      	strb	r3, [r7, #11]
float ret = fr;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	613b      	str	r3, [r7, #16]
int8_t ik = -1;
 80048a6:	23ff      	movs	r3, #255	; 0xff
 80048a8:	75fb      	strb	r3, [r7, #23]

	for (int8_t i = 0; i < MAX_LIST; i++) {
 80048aa:	2300      	movs	r3, #0
 80048ac:	75bb      	strb	r3, [r7, #22]
 80048ae:	e01b      	b.n	80048e8 <getNextList+0x58>
		if (list[i].freq == fr) {
 80048b0:	f997 2016 	ldrsb.w	r2, [r7, #22]
 80048b4:	4965      	ldr	r1, [pc, #404]	; (8004a4c <getNextList+0x1bc>)
 80048b6:	4613      	mov	r3, r2
 80048b8:	00db      	lsls	r3, r3, #3
 80048ba:	4413      	add	r3, r2
 80048bc:	009b      	lsls	r3, r3, #2
 80048be:	440b      	add	r3, r1
 80048c0:	f8d3 3001 	ldr.w	r3, [r3, #1]
 80048c4:	edd7 7a03 	vldr	s15, [r7, #12]
 80048c8:	ee07 3a10 	vmov	s14, r3
 80048cc:	eef4 7a47 	vcmp.f32	s15, s14
 80048d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048d4:	d102      	bne.n	80048dc <getNextList+0x4c>
			ik = i;
 80048d6:	7dbb      	ldrb	r3, [r7, #22]
 80048d8:	75fb      	strb	r3, [r7, #23]
			break;
 80048da:	e009      	b.n	80048f0 <getNextList+0x60>
	for (int8_t i = 0; i < MAX_LIST; i++) {
 80048dc:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	3301      	adds	r3, #1
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	75bb      	strb	r3, [r7, #22]
 80048e8:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80048ec:	2b18      	cmp	r3, #24
 80048ee:	dddf      	ble.n	80048b0 <getNextList+0x20>
		}
	}
	if (ik != -1) {
 80048f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80048f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048f8:	d01b      	beq.n	8004932 <getNextList+0xa2>
		if (up) {
 80048fa:	7afb      	ldrb	r3, [r7, #11]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d00a      	beq.n	8004916 <getNextList+0x86>
			if (++ik == MAX_LIST) ik = 0;
 8004900:	7dfb      	ldrb	r3, [r7, #23]
 8004902:	3301      	adds	r3, #1
 8004904:	b2db      	uxtb	r3, r3
 8004906:	75fb      	strb	r3, [r7, #23]
 8004908:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800490c:	2b19      	cmp	r3, #25
 800490e:	d161      	bne.n	80049d4 <getNextList+0x144>
 8004910:	2300      	movs	r3, #0
 8004912:	75fb      	strb	r3, [r7, #23]
 8004914:	e05e      	b.n	80049d4 <getNextList+0x144>
		} else {
			if (ik != 0) ik--; else ik = MAX_LIST - 1;
 8004916:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d006      	beq.n	800492c <getNextList+0x9c>
 800491e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004922:	b2db      	uxtb	r3, r3
 8004924:	3b01      	subs	r3, #1
 8004926:	b2db      	uxtb	r3, r3
 8004928:	75fb      	strb	r3, [r7, #23]
 800492a:	e053      	b.n	80049d4 <getNextList+0x144>
 800492c:	2318      	movs	r3, #24
 800492e:	75fb      	strb	r3, [r7, #23]
 8004930:	e050      	b.n	80049d4 <getNextList+0x144>
		}
	} else {
		if (up) {// seek_up
 8004932:	7afb      	ldrb	r3, [r7, #11]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d023      	beq.n	8004980 <getNextList+0xf0>
			for (int8_t i = ik; i < MAX_LIST; i++) {
 8004938:	7dfb      	ldrb	r3, [r7, #23]
 800493a:	757b      	strb	r3, [r7, #21]
 800493c:	e01b      	b.n	8004976 <getNextList+0xe6>
				if (list[i].freq > fr) {
 800493e:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8004942:	4942      	ldr	r1, [pc, #264]	; (8004a4c <getNextList+0x1bc>)
 8004944:	4613      	mov	r3, r2
 8004946:	00db      	lsls	r3, r3, #3
 8004948:	4413      	add	r3, r2
 800494a:	009b      	lsls	r3, r3, #2
 800494c:	440b      	add	r3, r1
 800494e:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8004952:	edd7 7a03 	vldr	s15, [r7, #12]
 8004956:	ee07 3a10 	vmov	s14, r3
 800495a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800495e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004962:	d502      	bpl.n	800496a <getNextList+0xda>
					ik = i;
 8004964:	7d7b      	ldrb	r3, [r7, #21]
 8004966:	75fb      	strb	r3, [r7, #23]
					break;
 8004968:	e02d      	b.n	80049c6 <getNextList+0x136>
			for (int8_t i = ik; i < MAX_LIST; i++) {
 800496a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800496e:	b2db      	uxtb	r3, r3
 8004970:	3301      	adds	r3, #1
 8004972:	b2db      	uxtb	r3, r3
 8004974:	757b      	strb	r3, [r7, #21]
 8004976:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800497a:	2b18      	cmp	r3, #24
 800497c:	dddf      	ble.n	800493e <getNextList+0xae>
 800497e:	e022      	b.n	80049c6 <getNextList+0x136>
				}
			}
		} else {// seek_down
			for (int8_t i = ik; i <= 0; i--) {
 8004980:	7dfb      	ldrb	r3, [r7, #23]
 8004982:	753b      	strb	r3, [r7, #20]
 8004984:	e01b      	b.n	80049be <getNextList+0x12e>
				if (list[i].freq < fr) {
 8004986:	f997 2014 	ldrsb.w	r2, [r7, #20]
 800498a:	4930      	ldr	r1, [pc, #192]	; (8004a4c <getNextList+0x1bc>)
 800498c:	4613      	mov	r3, r2
 800498e:	00db      	lsls	r3, r3, #3
 8004990:	4413      	add	r3, r2
 8004992:	009b      	lsls	r3, r3, #2
 8004994:	440b      	add	r3, r1
 8004996:	f8d3 3001 	ldr.w	r3, [r3, #1]
 800499a:	edd7 7a03 	vldr	s15, [r7, #12]
 800499e:	ee07 3a10 	vmov	s14, r3
 80049a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049aa:	dd02      	ble.n	80049b2 <getNextList+0x122>
					ik = i;
 80049ac:	7d3b      	ldrb	r3, [r7, #20]
 80049ae:	75fb      	strb	r3, [r7, #23]
					break;
 80049b0:	e009      	b.n	80049c6 <getNextList+0x136>
			for (int8_t i = ik; i <= 0; i--) {
 80049b2:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	3b01      	subs	r3, #1
 80049ba:	b2db      	uxtb	r3, r3
 80049bc:	753b      	strb	r3, [r7, #20]
 80049be:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	dddf      	ble.n	8004986 <getNextList+0xf6>
				}
			}
		}
		if (ik == -1) ik = 0;
 80049c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80049ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049ce:	d101      	bne.n	80049d4 <getNextList+0x144>
 80049d0:	2300      	movs	r3, #0
 80049d2:	75fb      	strb	r3, [r7, #23]
	}
	ret = list[ik].freq;
 80049d4:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80049d8:	491c      	ldr	r1, [pc, #112]	; (8004a4c <getNextList+0x1bc>)
 80049da:	4613      	mov	r3, r2
 80049dc:	00db      	lsls	r3, r3, #3
 80049de:	4413      	add	r3, r2
 80049e0:	009b      	lsls	r3, r3, #2
 80049e2:	440b      	add	r3, r1
 80049e4:	f8d3 3001 	ldr.w	r3, [r3, #1]
 80049e8:	613b      	str	r3, [r7, #16]
	*band = list[ik].band;
 80049ea:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80049ee:	4917      	ldr	r1, [pc, #92]	; (8004a4c <getNextList+0x1bc>)
 80049f0:	4613      	mov	r3, r2
 80049f2:	00db      	lsls	r3, r3, #3
 80049f4:	4413      	add	r3, r2
 80049f6:	009b      	lsls	r3, r3, #2
 80049f8:	440b      	add	r3, r1
 80049fa:	781a      	ldrb	r2, [r3, #0]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	701a      	strb	r2, [r3, #0]
	Report(1, "[%s] up=%u ik=%d, fr=%.1f ret=%.1f band=%u\r\n", __func__, up, ik, fr, ret, *band);
 8004a00:	f897 800b 	ldrb.w	r8, [r7, #11]
 8004a04:	f997 6017 	ldrsb.w	r6, [r7, #23]
 8004a08:	68f8      	ldr	r0, [r7, #12]
 8004a0a:	f7fb fd9d 	bl	8000548 <__aeabi_f2d>
 8004a0e:	4604      	mov	r4, r0
 8004a10:	460d      	mov	r5, r1
 8004a12:	6938      	ldr	r0, [r7, #16]
 8004a14:	f7fb fd98 	bl	8000548 <__aeabi_f2d>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	460b      	mov	r3, r1
 8004a1c:	6879      	ldr	r1, [r7, #4]
 8004a1e:	7809      	ldrb	r1, [r1, #0]
 8004a20:	9106      	str	r1, [sp, #24]
 8004a22:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004a26:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8004a2a:	9600      	str	r6, [sp, #0]
 8004a2c:	4643      	mov	r3, r8
 8004a2e:	4a08      	ldr	r2, [pc, #32]	; (8004a50 <getNextList+0x1c0>)
 8004a30:	4908      	ldr	r1, [pc, #32]	; (8004a54 <getNextList+0x1c4>)
 8004a32:	2001      	movs	r0, #1
 8004a34:	f000 fa22 	bl	8004e7c <Report>

	return ret;
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	ee07 3a90 	vmov	s15, r3
}
 8004a3e:	eeb0 0a67 	vmov.f32	s0, s15
 8004a42:	3718      	adds	r7, #24
 8004a44:	46bd      	mov	sp, r7
 8004a46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a4a:	bf00      	nop
 8004a4c:	20003034 	.word	0x20003034
 8004a50:	08015764 	.word	0x08015764
 8004a54:	08014684 	.word	0x08014684

08004a58 <showLine>:
//-------------------------------------------------------------------------------------------
void showLine(char *msg, uint16_t lin, int *last_len, bool update)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b08a      	sub	sp, #40	; 0x28
 8004a5c:	af02      	add	r7, sp, #8
 8004a5e:	60f8      	str	r0, [r7, #12]
 8004a60:	607a      	str	r2, [r7, #4]
 8004a62:	461a      	mov	r2, r3
 8004a64:	460b      	mov	r3, r1
 8004a66:	817b      	strh	r3, [r7, #10]
 8004a68:	4613      	mov	r3, r2
 8004a6a:	727b      	strb	r3, [r7, #9]
int il = strlen(msg);
 8004a6c:	68f8      	ldr	r0, [r7, #12]
 8004a6e:	f7fb fbaf 	bl	80001d0 <strlen>
 8004a72:	4603      	mov	r3, r0
 8004a74:	617b      	str	r3, [r7, #20]
int xf = ( (SCREEN_WIDTH - (lfnt->FontWidth * il) ) >> 1);// & 0x7f;
 8004a76:	4b2e      	ldr	r3, [pc, #184]	; (8004b30 <showLine+0xd8>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	781b      	ldrb	r3, [r3, #0]
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	fb02 f303 	mul.w	r3, r2, r3
 8004a84:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8004a88:	105b      	asrs	r3, r3, #1
 8004a8a:	61fb      	str	r3, [r7, #28]
bool yes = false;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	76fb      	strb	r3, [r7, #27]

	if (*last_len > il) {
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	697a      	ldr	r2, [r7, #20]
 8004a96:	429a      	cmp	r2, r3
 8004a98:	da0d      	bge.n	8004ab6 <showLine+0x5e>
		ST7565_DrawFilledRectangle(2, lin, SCREEN_WIDTH - 4, lfnt->FontHeight, PIX_OFF);
 8004a9a:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8004a9e:	4b24      	ldr	r3, [pc, #144]	; (8004b30 <showLine+0xd8>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	785b      	ldrb	r3, [r3, #1]
 8004aa4:	b21b      	sxth	r3, r3
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	9200      	str	r2, [sp, #0]
 8004aaa:	227c      	movs	r2, #124	; 0x7c
 8004aac:	2002      	movs	r0, #2
 8004aae:	f7fd f9b8 	bl	8001e22 <ST7565_DrawFilledRectangle>
		yes = true;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	76fb      	strb	r3, [r7, #27]
	}
	*last_len = il;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	697a      	ldr	r2, [r7, #20]
 8004aba:	601a      	str	r2, [r3, #0]
	if (*msg > 0x7f) {
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	781b      	ldrb	r3, [r3, #0]
 8004ac0:	b25b      	sxtb	r3, r3
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	da03      	bge.n	8004ace <showLine+0x76>
		xf += il;
 8004ac6:	69fa      	ldr	r2, [r7, #28]
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	4413      	add	r3, r2
 8004acc:	61fb      	str	r3, [r7, #28]
	}
	if (!yes) ST7565_DrawFilledRectangle(2, lin, SCREEN_WIDTH - 4, lfnt->FontHeight, PIX_OFF);
 8004ace:	7efb      	ldrb	r3, [r7, #27]
 8004ad0:	f083 0301 	eor.w	r3, r3, #1
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d00b      	beq.n	8004af2 <showLine+0x9a>
 8004ada:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8004ade:	4b14      	ldr	r3, [pc, #80]	; (8004b30 <showLine+0xd8>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	785b      	ldrb	r3, [r3, #1]
 8004ae4:	b21b      	sxth	r3, r3
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	9200      	str	r2, [sp, #0]
 8004aea:	227c      	movs	r2, #124	; 0x7c
 8004aec:	2002      	movs	r0, #2
 8004aee:	f7fd f998 	bl	8001e22 <ST7565_DrawFilledRectangle>

	if ((!xf) || (xf > (SCREEN_WIDTH - 4))) xf = 1;
 8004af2:	69fb      	ldr	r3, [r7, #28]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d002      	beq.n	8004afe <showLine+0xa6>
 8004af8:	69fb      	ldr	r3, [r7, #28]
 8004afa:	2b7c      	cmp	r3, #124	; 0x7c
 8004afc:	dd01      	ble.n	8004b02 <showLine+0xaa>
 8004afe:	2301      	movs	r3, #1
 8004b00:	61fb      	str	r3, [r7, #28]
	ST7565_Print(xf, lin, msg, lfnt, 1, PIX_ON);
 8004b02:	69fb      	ldr	r3, [r7, #28]
 8004b04:	b218      	sxth	r0, r3
 8004b06:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8004b0a:	4b09      	ldr	r3, [pc, #36]	; (8004b30 <showLine+0xd8>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	9201      	str	r2, [sp, #4]
 8004b12:	2201      	movs	r2, #1
 8004b14:	9200      	str	r2, [sp, #0]
 8004b16:	68fa      	ldr	r2, [r7, #12]
 8004b18:	f7fc ff2a 	bl	8001970 <ST7565_Print>
	if (update) ST7565_Update();
 8004b1c:	7a7b      	ldrb	r3, [r7, #9]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d001      	beq.n	8004b26 <showLine+0xce>
 8004b22:	f7fc fd75 	bl	8001610 <ST7565_Update>
}
 8004b26:	bf00      	nop
 8004b28:	3720      	adds	r7, #32
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}
 8004b2e:	bf00      	nop
 8004b30:	20003010 	.word	0x20003010

08004b34 <errLedOn>:
#endif
//-------------------------------------------------------------------------------------------
void errLedOn(bool on)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b082      	sub	sp, #8
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	71fb      	strb	r3, [r7, #7]
	if (on)
 8004b3e:	79fb      	ldrb	r3, [r7, #7]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d005      	beq.n	8004b50 <errLedOn+0x1c>
		HAL_GPIO_WritePin(ERR_LED_GPIO_Port, ERR_LED_Pin, GPIO_PIN_SET);//LED ON
 8004b44:	2201      	movs	r2, #1
 8004b46:	2108      	movs	r1, #8
 8004b48:	4806      	ldr	r0, [pc, #24]	; (8004b64 <errLedOn+0x30>)
 8004b4a:	f003 fcd5 	bl	80084f8 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(ERR_LED_GPIO_Port, ERR_LED_Pin, GPIO_PIN_RESET);//LED OFF
}
 8004b4e:	e004      	b.n	8004b5a <errLedOn+0x26>
		HAL_GPIO_WritePin(ERR_LED_GPIO_Port, ERR_LED_Pin, GPIO_PIN_RESET);//LED OFF
 8004b50:	2200      	movs	r2, #0
 8004b52:	2108      	movs	r1, #8
 8004b54:	4803      	ldr	r0, [pc, #12]	; (8004b64 <errLedOn+0x30>)
 8004b56:	f003 fccf 	bl	80084f8 <HAL_GPIO_WritePin>
}
 8004b5a:	bf00      	nop
 8004b5c:	3708      	adds	r7, #8
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	bf00      	nop
 8004b64:	48000800 	.word	0x48000800

08004b68 <get_secCounter>:
//------------------------------------------------------------------------------------
uint32_t get_secCounter()
{
 8004b68:	b480      	push	{r7}
 8004b6a:	af00      	add	r7, sp, #0
	return secCounter;
 8004b6c:	4b03      	ldr	r3, [pc, #12]	; (8004b7c <get_secCounter+0x14>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr
 8004b7a:	bf00      	nop
 8004b7c:	20001bcc 	.word	0x20001bcc

08004b80 <get_msCounter>:
{
	secCounter++;
}
//-----------------------------------------------------------------------------
uint64_t get_msCounter()
{
 8004b80:	b480      	push	{r7}
 8004b82:	af00      	add	r7, sp, #0
	return msCounter;
 8004b84:	4b04      	ldr	r3, [pc, #16]	; (8004b98 <get_msCounter+0x18>)
 8004b86:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 8004b8a:	4610      	mov	r0, r2
 8004b8c:	4619      	mov	r1, r3
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr
 8004b96:	bf00      	nop
 8004b98:	20001bd0 	.word	0x20001bd0

08004b9c <get_tmr>:
{
	msCounter++;
}
//------------------------------------------------------------------------------------------
uint32_t get_tmr(uint32_t sec)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b082      	sub	sp, #8
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
	return (get_secCounter() + sec);
 8004ba4:	f7ff ffe0 	bl	8004b68 <get_secCounter>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4413      	add	r3, r2
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3708      	adds	r7, #8
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}

08004bb6 <check_tmr>:
//------------------------------------------------------------------------------------------
bool check_tmr(uint32_t sec)
{
 8004bb6:	b580      	push	{r7, lr}
 8004bb8:	b082      	sub	sp, #8
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	6078      	str	r0, [r7, #4]
	return (get_secCounter() >= sec ? true : false);
 8004bbe:	f7ff ffd3 	bl	8004b68 <get_secCounter>
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	bf94      	ite	ls
 8004bca:	2301      	movls	r3, #1
 8004bcc:	2300      	movhi	r3, #0
 8004bce:	b2db      	uxtb	r3, r3
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3708      	adds	r7, #8
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}

08004bd8 <get_mstmr>:
//------------------------------------------------------------------------------------------
uint64_t get_mstmr(uint64_t hs)
{
 8004bd8:	b5b0      	push	{r4, r5, r7, lr}
 8004bda:	b082      	sub	sp, #8
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	e9c7 0100 	strd	r0, r1, [r7]
	return (get_msCounter() + hs);
 8004be2:	f7ff ffcd 	bl	8004b80 <get_msCounter>
 8004be6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004bea:	1884      	adds	r4, r0, r2
 8004bec:	eb41 0503 	adc.w	r5, r1, r3
 8004bf0:	4622      	mov	r2, r4
 8004bf2:	462b      	mov	r3, r5
}
 8004bf4:	4610      	mov	r0, r2
 8004bf6:	4619      	mov	r1, r3
 8004bf8:	3708      	adds	r7, #8
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bdb0      	pop	{r4, r5, r7, pc}

08004bfe <check_mstmr>:
//------------------------------------------------------------------------------------------
bool check_mstmr(uint64_t hs)
{
 8004bfe:	b580      	push	{r7, lr}
 8004c00:	b082      	sub	sp, #8
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	e9c7 0100 	strd	r0, r1, [r7]
	return (get_msCounter() >= hs ? true : false);
 8004c08:	f7ff ffba 	bl	8004b80 <get_msCounter>
 8004c0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c10:	4290      	cmp	r0, r2
 8004c12:	eb71 0303 	sbcs.w	r3, r1, r3
 8004c16:	bf2c      	ite	cs
 8004c18:	2301      	movcs	r3, #1
 8004c1a:	2300      	movcc	r3, #0
 8004c1c:	b2db      	uxtb	r3, r3
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3708      	adds	r7, #8
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}
	...

08004c28 <toUppers>:
//------------------------------------------------------------------------------------------
void toUppers(char *st)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b084      	sub	sp, #16
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
int i;

    for (i = 0; i < strlen(st); i++) *(st + i) = toupper(*(st + i));
 8004c30:	2300      	movs	r3, #0
 8004c32:	60fb      	str	r3, [r7, #12]
 8004c34:	e019      	b.n	8004c6a <toUppers+0x42>
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	4413      	add	r3, r2
 8004c3c:	781b      	ldrb	r3, [r3, #0]
 8004c3e:	72fb      	strb	r3, [r7, #11]
 8004c40:	7afb      	ldrb	r3, [r7, #11]
 8004c42:	3301      	adds	r3, #1
 8004c44:	4a0f      	ldr	r2, [pc, #60]	; (8004c84 <toUppers+0x5c>)
 8004c46:	4413      	add	r3, r2
 8004c48:	781b      	ldrb	r3, [r3, #0]
 8004c4a:	f003 0303 	and.w	r3, r3, #3
 8004c4e:	2b02      	cmp	r3, #2
 8004c50:	d102      	bne.n	8004c58 <toUppers+0x30>
 8004c52:	7afb      	ldrb	r3, [r7, #11]
 8004c54:	3b20      	subs	r3, #32
 8004c56:	e000      	b.n	8004c5a <toUppers+0x32>
 8004c58:	7afb      	ldrb	r3, [r7, #11]
 8004c5a:	68fa      	ldr	r2, [r7, #12]
 8004c5c:	6879      	ldr	r1, [r7, #4]
 8004c5e:	440a      	add	r2, r1
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	7013      	strb	r3, [r2, #0]
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	3301      	adds	r3, #1
 8004c68:	60fb      	str	r3, [r7, #12]
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f7fb fab0 	bl	80001d0 <strlen>
 8004c70:	4602      	mov	r2, r0
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d8de      	bhi.n	8004c36 <toUppers+0xe>
}
 8004c78:	bf00      	nop
 8004c7a:	bf00      	nop
 8004c7c:	3710      	adds	r7, #16
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	bf00      	nop
 8004c84:	080157e4 	.word	0x080157e4

08004c88 <set_Date>:
//------------------------------------------------------------------------------------------
void set_Date(uint32_t usec)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b094      	sub	sp, #80	; 0x50
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
struct tm ts;
time_t ep = (time_t)usec;
 8004c90:	6879      	ldr	r1, [r7, #4]
 8004c92:	2000      	movs	r0, #0
 8004c94:	460a      	mov	r2, r1
 8004c96:	4603      	mov	r3, r0
 8004c98:	e9c7 2308 	strd	r2, r3, [r7, #32]

	gmtime_r(&ep, &ts);
 8004c9c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8004ca0:	f107 0320 	add.w	r3, r7, #32
 8004ca4:	4611      	mov	r1, r2
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f00a fd84 	bl	800f7b4 <gmtime_r>

	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;
	sDate.WeekDay = ts.tm_wday;
 8004cac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	723b      	strb	r3, [r7, #8]
	sDate.Month   = ts.tm_mon + 1;
 8004cb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cb4:	b2db      	uxtb	r3, r3
 8004cb6:	3301      	adds	r3, #1
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	727b      	strb	r3, [r7, #9]
	sDate.Date    = ts.tm_mday;
 8004cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cbe:	b2db      	uxtb	r3, r3
 8004cc0:	72bb      	strb	r3, [r7, #10]
	sDate.Year    = ts.tm_year;
 8004cc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	72fb      	strb	r3, [r7, #11]
	sTime.Hours   = ts.tm_hour + tZone;
 8004cc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cca:	b2da      	uxtb	r2, r3
 8004ccc:	4b1a      	ldr	r3, [pc, #104]	; (8004d38 <set_Date+0xb0>)
 8004cce:	781b      	ldrb	r3, [r3, #0]
 8004cd0:	4413      	add	r3, r2
 8004cd2:	b2db      	uxtb	r3, r3
 8004cd4:	733b      	strb	r3, [r7, #12]
	sTime.Minutes = ts.tm_min;
 8004cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd8:	b2db      	uxtb	r3, r3
 8004cda:	737b      	strb	r3, [r7, #13]
	sTime.Seconds = ts.tm_sec;
 8004cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cde:	b2db      	uxtb	r3, r3
 8004ce0:	73bb      	strb	r3, [r7, #14]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) devError |= devRTC;
 8004ce2:	f107 030c 	add.w	r3, r7, #12
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	4619      	mov	r1, r3
 8004cea:	4814      	ldr	r0, [pc, #80]	; (8004d3c <set_Date+0xb4>)
 8004cec:	f006 fcff 	bl	800b6ee <HAL_RTC_SetTime>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d007      	beq.n	8004d06 <set_Date+0x7e>
 8004cf6:	4b12      	ldr	r3, [pc, #72]	; (8004d40 <set_Date+0xb8>)
 8004cf8:	881b      	ldrh	r3, [r3, #0]
 8004cfa:	f043 0308 	orr.w	r3, r3, #8
 8004cfe:	b29a      	uxth	r2, r3
 8004d00:	4b0f      	ldr	r3, [pc, #60]	; (8004d40 <set_Date+0xb8>)
 8004d02:	801a      	strh	r2, [r3, #0]
		if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) devError |= devRTC;
		else {
			setDate = true;
		}
	}
}
 8004d04:	e014      	b.n	8004d30 <set_Date+0xa8>
		if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) devError |= devRTC;
 8004d06:	f107 0308 	add.w	r3, r7, #8
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	4619      	mov	r1, r3
 8004d0e:	480b      	ldr	r0, [pc, #44]	; (8004d3c <set_Date+0xb4>)
 8004d10:	f006 fde6 	bl	800b8e0 <HAL_RTC_SetDate>
 8004d14:	4603      	mov	r3, r0
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d007      	beq.n	8004d2a <set_Date+0xa2>
 8004d1a:	4b09      	ldr	r3, [pc, #36]	; (8004d40 <set_Date+0xb8>)
 8004d1c:	881b      	ldrh	r3, [r3, #0]
 8004d1e:	f043 0308 	orr.w	r3, r3, #8
 8004d22:	b29a      	uxth	r2, r3
 8004d24:	4b06      	ldr	r3, [pc, #24]	; (8004d40 <set_Date+0xb8>)
 8004d26:	801a      	strh	r2, [r3, #0]
}
 8004d28:	e002      	b.n	8004d30 <set_Date+0xa8>
			setDate = true;
 8004d2a:	4b06      	ldr	r3, [pc, #24]	; (8004d44 <set_Date+0xbc>)
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	701a      	strb	r2, [r3, #0]
}
 8004d30:	bf00      	nop
 8004d32:	3750      	adds	r7, #80	; 0x50
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}
 8004d38:	20001fde 	.word	0x20001fde
 8004d3c:	20000b54 	.word	0x20000b54
 8004d40:	20001bc8 	.word	0x20001bc8
 8004d44:	20001fdd 	.word	0x20001fdd

08004d48 <sec2str>:

	return ep;
}
//------------------------------------------------------------------------------------------
int sec2str(char *st)
{
 8004d48:	b590      	push	{r4, r7, lr}
 8004d4a:	b093      	sub	sp, #76	; 0x4c
 8004d4c:	af04      	add	r7, sp, #16
 8004d4e:	6078      	str	r0, [r7, #4]
int ret = 0;
 8004d50:	2300      	movs	r3, #0
 8004d52:	637b      	str	r3, [r7, #52]	; 0x34

	if (!setDate) {
 8004d54:	4b40      	ldr	r3, [pc, #256]	; (8004e58 <sec2str+0x110>)
 8004d56:	781b      	ldrb	r3, [r3, #0]
 8004d58:	f083 0301 	eor.w	r3, r3, #1
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d040      	beq.n	8004de4 <sec2str+0x9c>
		uint32_t sec = get_secCounter();
 8004d62:	f7ff ff01 	bl	8004b68 <get_secCounter>
 8004d66:	6338      	str	r0, [r7, #48]	; 0x30

		uint32_t day = sec / (60 * 60 * 24);
 8004d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d6a:	4a3c      	ldr	r2, [pc, #240]	; (8004e5c <sec2str+0x114>)
 8004d6c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d70:	0c1b      	lsrs	r3, r3, #16
 8004d72:	62fb      	str	r3, [r7, #44]	; 0x2c
		sec %= (60 * 60 * 24);
 8004d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d76:	4a39      	ldr	r2, [pc, #228]	; (8004e5c <sec2str+0x114>)
 8004d78:	fba2 1203 	umull	r1, r2, r2, r3
 8004d7c:	0c12      	lsrs	r2, r2, #16
 8004d7e:	4938      	ldr	r1, [pc, #224]	; (8004e60 <sec2str+0x118>)
 8004d80:	fb01 f202 	mul.w	r2, r1, r2
 8004d84:	1a9b      	subs	r3, r3, r2
 8004d86:	633b      	str	r3, [r7, #48]	; 0x30
		uint32_t hour = sec / (60 * 60);
 8004d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d8a:	4a36      	ldr	r2, [pc, #216]	; (8004e64 <sec2str+0x11c>)
 8004d8c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d90:	0adb      	lsrs	r3, r3, #11
 8004d92:	62bb      	str	r3, [r7, #40]	; 0x28
		sec %= (60 * 60);
 8004d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d96:	4a33      	ldr	r2, [pc, #204]	; (8004e64 <sec2str+0x11c>)
 8004d98:	fba2 1203 	umull	r1, r2, r2, r3
 8004d9c:	0ad2      	lsrs	r2, r2, #11
 8004d9e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8004da2:	fb01 f202 	mul.w	r2, r1, r2
 8004da6:	1a9b      	subs	r3, r3, r2
 8004da8:	633b      	str	r3, [r7, #48]	; 0x30
		uint32_t min = sec / (60);
 8004daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dac:	4a2e      	ldr	r2, [pc, #184]	; (8004e68 <sec2str+0x120>)
 8004dae:	fba2 2303 	umull	r2, r3, r2, r3
 8004db2:	095b      	lsrs	r3, r3, #5
 8004db4:	627b      	str	r3, [r7, #36]	; 0x24
		sec %= 60;
 8004db6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004db8:	4b2b      	ldr	r3, [pc, #172]	; (8004e68 <sec2str+0x120>)
 8004dba:	fba3 1302 	umull	r1, r3, r3, r2
 8004dbe:	0959      	lsrs	r1, r3, #5
 8004dc0:	460b      	mov	r3, r1
 8004dc2:	011b      	lsls	r3, r3, #4
 8004dc4:	1a5b      	subs	r3, r3, r1
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	1ad3      	subs	r3, r2, r3
 8004dca:	633b      	str	r3, [r7, #48]	; 0x30

		ret = sprintf(st, "%lu.%02lu:%02lu:%02lu", day, hour, min, sec);
 8004dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dce:	9301      	str	r3, [sp, #4]
 8004dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd2:	9300      	str	r3, [sp, #0]
 8004dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004dd8:	4924      	ldr	r1, [pc, #144]	; (8004e6c <sec2str+0x124>)
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f00b fb50 	bl	8010480 <siprintf>
 8004de0:	6378      	str	r0, [r7, #52]	; 0x34
 8004de2:	e034      	b.n	8004e4e <sec2str+0x106>
	} else {
		RTC_TimeTypeDef sTime;
		RTC_DateTypeDef sDate;
		if (HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN)) devError |= devRTC;
 8004de4:	f107 030c 	add.w	r3, r7, #12
 8004de8:	2200      	movs	r2, #0
 8004dea:	4619      	mov	r1, r3
 8004dec:	4820      	ldr	r0, [pc, #128]	; (8004e70 <sec2str+0x128>)
 8004dee:	f006 fdfe 	bl	800b9ee <HAL_RTC_GetDate>
 8004df2:	4603      	mov	r3, r0
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d007      	beq.n	8004e08 <sec2str+0xc0>
 8004df8:	4b1e      	ldr	r3, [pc, #120]	; (8004e74 <sec2str+0x12c>)
 8004dfa:	881b      	ldrh	r3, [r3, #0]
 8004dfc:	f043 0308 	orr.w	r3, r3, #8
 8004e00:	b29a      	uxth	r2, r3
 8004e02:	4b1c      	ldr	r3, [pc, #112]	; (8004e74 <sec2str+0x12c>)
 8004e04:	801a      	strh	r2, [r3, #0]
 8004e06:	e022      	b.n	8004e4e <sec2str+0x106>
		else {
			if (HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN)) devError |= devRTC;
 8004e08:	f107 0310 	add.w	r3, r7, #16
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	4619      	mov	r1, r3
 8004e10:	4817      	ldr	r0, [pc, #92]	; (8004e70 <sec2str+0x128>)
 8004e12:	f006 fd09 	bl	800b828 <HAL_RTC_GetTime>
 8004e16:	4603      	mov	r3, r0
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d007      	beq.n	8004e2c <sec2str+0xe4>
 8004e1c:	4b15      	ldr	r3, [pc, #84]	; (8004e74 <sec2str+0x12c>)
 8004e1e:	881b      	ldrh	r3, [r3, #0]
 8004e20:	f043 0308 	orr.w	r3, r3, #8
 8004e24:	b29a      	uxth	r2, r3
 8004e26:	4b13      	ldr	r3, [pc, #76]	; (8004e74 <sec2str+0x12c>)
 8004e28:	801a      	strh	r2, [r3, #0]
 8004e2a:	e010      	b.n	8004e4e <sec2str+0x106>
			else {
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
								sDate.Date, sDate.Month,
 8004e2c:	7bbb      	ldrb	r3, [r7, #14]
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
 8004e2e:	4618      	mov	r0, r3
								sDate.Date, sDate.Month,
 8004e30:	7b7b      	ldrb	r3, [r7, #13]
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
 8004e32:	461c      	mov	r4, r3
								sTime.Hours, sTime.Minutes, sTime.Seconds);
 8004e34:	7c3b      	ldrb	r3, [r7, #16]
 8004e36:	7c7a      	ldrb	r2, [r7, #17]
 8004e38:	7cb9      	ldrb	r1, [r7, #18]
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
 8004e3a:	9102      	str	r1, [sp, #8]
 8004e3c:	9201      	str	r2, [sp, #4]
 8004e3e:	9300      	str	r3, [sp, #0]
 8004e40:	4623      	mov	r3, r4
 8004e42:	4602      	mov	r2, r0
 8004e44:	490c      	ldr	r1, [pc, #48]	; (8004e78 <sec2str+0x130>)
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f00b fb1a 	bl	8010480 <siprintf>
 8004e4c:	6378      	str	r0, [r7, #52]	; 0x34
			}
		}
	}

	return ret;
 8004e4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	373c      	adds	r7, #60	; 0x3c
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd90      	pop	{r4, r7, pc}
 8004e58:	20001fdd 	.word	0x20001fdd
 8004e5c:	c22e4507 	.word	0xc22e4507
 8004e60:	00015180 	.word	0x00015180
 8004e64:	91a2b3c5 	.word	0x91a2b3c5
 8004e68:	88888889 	.word	0x88888889
 8004e6c:	080146b4 	.word	0x080146b4
 8004e70:	20000b54 	.word	0x20000b54
 8004e74:	20001bc8 	.word	0x20001bc8
 8004e78:	080146cc 	.word	0x080146cc

08004e7c <Report>:
//--------------------------------------------------------------------------------------------
void Report(const uint8_t addTime, const char *fmt, ...)
{
 8004e7c:	b40e      	push	{r1, r2, r3}
 8004e7e:	b590      	push	{r4, r7, lr}
 8004e80:	b08a      	sub	sp, #40	; 0x28
 8004e82:	af00      	add	r7, sp, #0
 8004e84:	4603      	mov	r3, r0
 8004e86:	71fb      	strb	r3, [r7, #7]
#ifdef SET_BLE
	if(sleep_mode) return;
#endif

	size_t len = MAX_UART_BUF;
 8004e88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e8c:	61bb      	str	r3, [r7, #24]
	char *buf = &cmdBuf[0];
 8004e8e:	4b37      	ldr	r3, [pc, #220]	; (8004f6c <Report+0xf0>)
 8004e90:	617b      	str	r3, [r7, #20]

	uint8_t cnt = 32;
 8004e92:	2320      	movs	r3, #32
 8004e94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t stim = HAL_GetTick();
 8004e98:	f002 fd54 	bl	8007944 <HAL_GetTick>
 8004e9c:	6238      	str	r0, [r7, #32]
	uint32_t etim = stim;
 8004e9e:	6a3b      	ldr	r3, [r7, #32]
 8004ea0:	613b      	str	r3, [r7, #16]
	while (!uartRdy && cnt) {
 8004ea2:	e00e      	b.n	8004ec2 <Report+0x46>
		etim = HAL_GetTick();
 8004ea4:	f002 fd4e 	bl	8007944 <HAL_GetTick>
 8004ea8:	6138      	str	r0, [r7, #16]
		if (etim - stim) {
 8004eaa:	693a      	ldr	r2, [r7, #16]
 8004eac:	6a3b      	ldr	r3, [r7, #32]
 8004eae:	429a      	cmp	r2, r3
 8004eb0:	d007      	beq.n	8004ec2 <Report+0x46>
			stim = HAL_GetTick();
 8004eb2:	f002 fd47 	bl	8007944 <HAL_GetTick>
 8004eb6:	6238      	str	r0, [r7, #32]
			cnt--;
 8004eb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004ebc:	3b01      	subs	r3, #1
 8004ebe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (!uartRdy && cnt) {
 8004ec2:	4b2b      	ldr	r3, [pc, #172]	; (8004f70 <Report+0xf4>)
 8004ec4:	781b      	ldrb	r3, [r3, #0]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d103      	bne.n	8004ed2 <Report+0x56>
 8004eca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d1e8      	bne.n	8004ea4 <Report+0x28>
		}
	}

	//if (buf) {
		*buf = '\0';
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	701a      	strb	r2, [r3, #0]
		int dl = 0;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	61fb      	str	r3, [r7, #28]
		if (addTime) {
 8004edc:	79fb      	ldrb	r3, [r7, #7]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d010      	beq.n	8004f04 <Report+0x88>
			dl = sec2str(buf);
 8004ee2:	6978      	ldr	r0, [r7, #20]
 8004ee4:	f7ff ff30 	bl	8004d48 <sec2str>
 8004ee8:	61f8      	str	r0, [r7, #28]
			strcat(buf, " | ");
 8004eea:	6978      	ldr	r0, [r7, #20]
 8004eec:	f7fb f970 	bl	80001d0 <strlen>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	4413      	add	r3, r2
 8004ef8:	4a1e      	ldr	r2, [pc, #120]	; (8004f74 <Report+0xf8>)
 8004efa:	6810      	ldr	r0, [r2, #0]
 8004efc:	6018      	str	r0, [r3, #0]
			dl += 3;
 8004efe:	69fb      	ldr	r3, [r7, #28]
 8004f00:	3303      	adds	r3, #3
 8004f02:	61fb      	str	r3, [r7, #28]
		}

		va_list args;
		va_start(args, fmt);
 8004f04:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004f08:	60fb      	str	r3, [r7, #12]
		vsnprintf(buf + dl, len - dl, fmt, args);
 8004f0a:	69fb      	ldr	r3, [r7, #28]
 8004f0c:	697a      	ldr	r2, [r7, #20]
 8004f0e:	18d0      	adds	r0, r2, r3
 8004f10:	69fb      	ldr	r3, [r7, #28]
 8004f12:	69ba      	ldr	r2, [r7, #24]
 8004f14:	1ad1      	subs	r1, r2, r3
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f1a:	f00c f9ef 	bl	80112fc <vsniprintf>

		uartRdy = false;
 8004f1e:	4b14      	ldr	r3, [pc, #80]	; (8004f70 <Report+0xf4>)
 8004f20:	2200      	movs	r2, #0
 8004f22:	701a      	strb	r2, [r3, #0]
		if (HAL_UART_Transmit_DMA(cmdPort, (uint8_t *)buf, strlen(buf)) != HAL_OK) devError |= devUART;
 8004f24:	4b14      	ldr	r3, [pc, #80]	; (8004f78 <Report+0xfc>)
 8004f26:	681c      	ldr	r4, [r3, #0]
 8004f28:	6978      	ldr	r0, [r7, #20]
 8004f2a:	f7fb f951 	bl	80001d0 <strlen>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	461a      	mov	r2, r3
 8004f34:	6979      	ldr	r1, [r7, #20]
 8004f36:	4620      	mov	r0, r4
 8004f38:	f009 f89c 	bl	800e074 <HAL_UART_Transmit_DMA>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d006      	beq.n	8004f50 <Report+0xd4>
 8004f42:	4b0e      	ldr	r3, [pc, #56]	; (8004f7c <Report+0x100>)
 8004f44:	881b      	ldrh	r3, [r3, #0]
 8004f46:	f043 0302 	orr.w	r3, r3, #2
 8004f4a:	b29a      	uxth	r2, r3
 8004f4c:	4b0b      	ldr	r3, [pc, #44]	; (8004f7c <Report+0x100>)
 8004f4e:	801a      	strh	r2, [r3, #0]
		while (!uartRdy) {} //HAL_Delay(1)
 8004f50:	bf00      	nop
 8004f52:	4b07      	ldr	r3, [pc, #28]	; (8004f70 <Report+0xf4>)
 8004f54:	781b      	ldrb	r3, [r3, #0]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d0fb      	beq.n	8004f52 <Report+0xd6>
	//	free(buf);
	//} else {
	//	devError |= devMEM;
	//}

}
 8004f5a:	bf00      	nop
 8004f5c:	bf00      	nop
 8004f5e:	3728      	adds	r7, #40	; 0x28
 8004f60:	46bd      	mov	sp, r7
 8004f62:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8004f66:	b003      	add	sp, #12
 8004f68:	4770      	bx	lr
 8004f6a:	bf00      	nop
 8004f6c:	200013c8 	.word	0x200013c8
 8004f70:	20000014 	.word	0x20000014
 8004f74:	080146e8 	.word	0x080146e8
 8004f78:	20000010 	.word	0x20000010
 8004f7c:	20001bc8 	.word	0x20001bc8

08004f80 <HAL_TIM_PeriodElapsedCallback>:



//------------------------------------------------------------------------------------------
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f80:	b5b0      	push	{r4, r5, r7, lr}
 8004f82:	b084      	sub	sp, #16
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM4) {
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a6c      	ldr	r2, [pc, #432]	; (8005140 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d128      	bne.n	8004fe4 <HAL_TIM_PeriodElapsedCallback+0x64>
		msCounter++;//inc_msCounter();
 8004f92:	4b6c      	ldr	r3, [pc, #432]	; (8005144 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8004f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f98:	1c54      	adds	r4, r2, #1
 8004f9a:	f143 0500 	adc.w	r5, r3, #0
 8004f9e:	4b69      	ldr	r3, [pc, #420]	; (8005144 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8004fa0:	e9c3 4500 	strd	r4, r5, [r3]
		if (!(msCounter % _1s)) {// 1 seconda
 8004fa4:	4b67      	ldr	r3, [pc, #412]	; (8005144 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8004fa6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004faa:	f04f 0264 	mov.w	r2, #100	; 0x64
 8004fae:	f04f 0300 	mov.w	r3, #0
 8004fb2:	f7fb feb9 	bl	8000d28 <__aeabi_uldivmod>
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	f040 80bd 	bne.w	8005136 <HAL_TIM_PeriodElapsedCallback+0x1b6>
			secCounter++;
 8004fbc:	4b62      	ldr	r3, [pc, #392]	; (8005148 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	3301      	adds	r3, #1
 8004fc2:	4a61      	ldr	r2, [pc, #388]	; (8005148 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8004fc4:	6013      	str	r3, [r2, #0]
		  	HAL_GPIO_TogglePin(TIK_LED_GPIO_Port, TIK_LED_Pin);
 8004fc6:	2102      	movs	r1, #2
 8004fc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004fcc:	f003 faac 	bl	8008528 <HAL_GPIO_TogglePin>
#ifdef SET_DISPLAY
		  	if (startSec) putEvt(evt_Sec);
 8004fd0:	4b5e      	ldr	r3, [pc, #376]	; (800514c <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8004fd2:	781b      	ldrb	r3, [r3, #0]
 8004fd4:	b2db      	uxtb	r3, r3
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	f000 80ad 	beq.w	8005136 <HAL_TIM_PeriodElapsedCallback+0x1b6>
 8004fdc:	2008      	movs	r0, #8
 8004fde:	f7ff fb3b 	bl	8004658 <putEvt>
			break;
		}
		//
	}
#endif
}
 8004fe2:	e0a8      	b.n	8005136 <HAL_TIM_PeriodElapsedCallback+0x1b6>
	if (htim->Instance == TIM6) {
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a59      	ldr	r2, [pc, #356]	; (8005150 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	f040 809a 	bne.w	8005124 <HAL_TIM_PeriodElapsedCallback+0x1a4>
		uint8_t irdata = RECIV_PIN; // пин для приёма
 8004ff0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004ff4:	4857      	ldr	r0, [pc, #348]	; (8005154 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8004ff6:	f003 fa67 	bl	80084c8 <HAL_GPIO_ReadPin>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	73fb      	strb	r3, [r7, #15]
		irparams.timer++;  // One more 50uS tick
 8004ffe:	4b56      	ldr	r3, [pc, #344]	; (8005158 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8005000:	885b      	ldrh	r3, [r3, #2]
 8005002:	b29b      	uxth	r3, r3
 8005004:	3301      	adds	r3, #1
 8005006:	b29a      	uxth	r2, r3
 8005008:	4b53      	ldr	r3, [pc, #332]	; (8005158 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 800500a:	805a      	strh	r2, [r3, #2]
		if (irparams.rawlen >= RAWBUF) irparams.rcvstate = STATE_OVERFLOW;  // Buffer overflow
 800500c:	4b52      	ldr	r3, [pc, #328]	; (8005158 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 800500e:	785b      	ldrb	r3, [r3, #1]
		switch (irparams.rcvstate) {
 8005010:	4b51      	ldr	r3, [pc, #324]	; (8005158 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8005012:	781b      	ldrb	r3, [r3, #0]
 8005014:	b2db      	uxtb	r3, r3
 8005016:	3b02      	subs	r3, #2
 8005018:	2b04      	cmp	r3, #4
 800501a:	f200 808c 	bhi.w	8005136 <HAL_TIM_PeriodElapsedCallback+0x1b6>
 800501e:	a201      	add	r2, pc, #4	; (adr r2, 8005024 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8005020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005024:	08005039 	.word	0x08005039
 8005028:	0800508d 	.word	0x0800508d
 800502c:	080050c1 	.word	0x080050c1
 8005030:	08005107 	.word	0x08005107
 8005034:	08005115 	.word	0x08005115
				if (irdata == MARK) {
 8005038:	7bfb      	ldrb	r3, [r7, #15]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d174      	bne.n	8005128 <HAL_TIM_PeriodElapsedCallback+0x1a8>
					if (irparams.timer < GAP_TICKS) { // Not big enough to be a gap.
 800503e:	4b46      	ldr	r3, [pc, #280]	; (8005158 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8005040:	885b      	ldrh	r3, [r3, #2]
 8005042:	b29b      	uxth	r3, r3
 8005044:	2b63      	cmp	r3, #99	; 0x63
 8005046:	d803      	bhi.n	8005050 <HAL_TIM_PeriodElapsedCallback+0xd0>
						irparams.timer = 0;
 8005048:	4b43      	ldr	r3, [pc, #268]	; (8005158 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 800504a:	2200      	movs	r2, #0
 800504c:	805a      	strh	r2, [r3, #2]
			break;
 800504e:	e06b      	b.n	8005128 <HAL_TIM_PeriodElapsedCallback+0x1a8>
						irparams.overflow = 0;
 8005050:	4b41      	ldr	r3, [pc, #260]	; (8005158 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8005052:	2200      	movs	r2, #0
 8005054:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
						irparams.rawlen  = 0;
 8005058:	4b3f      	ldr	r3, [pc, #252]	; (8005158 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 800505a:	2200      	movs	r2, #0
 800505c:	705a      	strb	r2, [r3, #1]
						irparams.rawbuf[irparams.rawlen++] = irparams.timer;
 800505e:	4b3e      	ldr	r3, [pc, #248]	; (8005158 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8005060:	785b      	ldrb	r3, [r3, #1]
 8005062:	b2db      	uxtb	r3, r3
 8005064:	1c5a      	adds	r2, r3, #1
 8005066:	b2d1      	uxtb	r1, r2
 8005068:	4a3b      	ldr	r2, [pc, #236]	; (8005158 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 800506a:	7051      	strb	r1, [r2, #1]
 800506c:	4618      	mov	r0, r3
 800506e:	4b3a      	ldr	r3, [pc, #232]	; (8005158 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8005070:	885b      	ldrh	r3, [r3, #2]
 8005072:	b299      	uxth	r1, r3
 8005074:	4a38      	ldr	r2, [pc, #224]	; (8005158 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8005076:	0043      	lsls	r3, r0, #1
 8005078:	4413      	add	r3, r2
 800507a:	460a      	mov	r2, r1
 800507c:	809a      	strh	r2, [r3, #4]
						irparams.timer = 0;
 800507e:	4b36      	ldr	r3, [pc, #216]	; (8005158 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8005080:	2200      	movs	r2, #0
 8005082:	805a      	strh	r2, [r3, #2]
						irparams.rcvstate = STATE_MARK;
 8005084:	4b34      	ldr	r3, [pc, #208]	; (8005158 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8005086:	2203      	movs	r2, #3
 8005088:	701a      	strb	r2, [r3, #0]
			break;
 800508a:	e04d      	b.n	8005128 <HAL_TIM_PeriodElapsedCallback+0x1a8>
				if (irdata == SPACE) {// Mark ended; Record time
 800508c:	7bfb      	ldrb	r3, [r7, #15]
 800508e:	2b01      	cmp	r3, #1
 8005090:	d14c      	bne.n	800512c <HAL_TIM_PeriodElapsedCallback+0x1ac>
					irparams.rawbuf[irparams.rawlen++] = irparams.timer;
 8005092:	4b31      	ldr	r3, [pc, #196]	; (8005158 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8005094:	785b      	ldrb	r3, [r3, #1]
 8005096:	b2db      	uxtb	r3, r3
 8005098:	1c5a      	adds	r2, r3, #1
 800509a:	b2d1      	uxtb	r1, r2
 800509c:	4a2e      	ldr	r2, [pc, #184]	; (8005158 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 800509e:	7051      	strb	r1, [r2, #1]
 80050a0:	4618      	mov	r0, r3
 80050a2:	4b2d      	ldr	r3, [pc, #180]	; (8005158 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80050a4:	885b      	ldrh	r3, [r3, #2]
 80050a6:	b299      	uxth	r1, r3
 80050a8:	4a2b      	ldr	r2, [pc, #172]	; (8005158 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80050aa:	0043      	lsls	r3, r0, #1
 80050ac:	4413      	add	r3, r2
 80050ae:	460a      	mov	r2, r1
 80050b0:	809a      	strh	r2, [r3, #4]
					irparams.timer = 0;
 80050b2:	4b29      	ldr	r3, [pc, #164]	; (8005158 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80050b4:	2200      	movs	r2, #0
 80050b6:	805a      	strh	r2, [r3, #2]
					irparams.rcvstate = STATE_SPACE;
 80050b8:	4b27      	ldr	r3, [pc, #156]	; (8005158 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80050ba:	2204      	movs	r2, #4
 80050bc:	701a      	strb	r2, [r3, #0]
			break;
 80050be:	e035      	b.n	800512c <HAL_TIM_PeriodElapsedCallback+0x1ac>
				if (irdata == MARK) {// Space just ended; Record time
 80050c0:	7bfb      	ldrb	r3, [r7, #15]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d116      	bne.n	80050f4 <HAL_TIM_PeriodElapsedCallback+0x174>
					irparams.rawbuf[irparams.rawlen++] = irparams.timer;
 80050c6:	4b24      	ldr	r3, [pc, #144]	; (8005158 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80050c8:	785b      	ldrb	r3, [r3, #1]
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	1c5a      	adds	r2, r3, #1
 80050ce:	b2d1      	uxtb	r1, r2
 80050d0:	4a21      	ldr	r2, [pc, #132]	; (8005158 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80050d2:	7051      	strb	r1, [r2, #1]
 80050d4:	4618      	mov	r0, r3
 80050d6:	4b20      	ldr	r3, [pc, #128]	; (8005158 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80050d8:	885b      	ldrh	r3, [r3, #2]
 80050da:	b299      	uxth	r1, r3
 80050dc:	4a1e      	ldr	r2, [pc, #120]	; (8005158 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80050de:	0043      	lsls	r3, r0, #1
 80050e0:	4413      	add	r3, r2
 80050e2:	460a      	mov	r2, r1
 80050e4:	809a      	strh	r2, [r3, #4]
					irparams.timer = 0;
 80050e6:	4b1c      	ldr	r3, [pc, #112]	; (8005158 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80050e8:	2200      	movs	r2, #0
 80050ea:	805a      	strh	r2, [r3, #2]
					irparams.rcvstate = STATE_MARK;
 80050ec:	4b1a      	ldr	r3, [pc, #104]	; (8005158 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80050ee:	2203      	movs	r2, #3
 80050f0:	701a      	strb	r2, [r3, #0]
			break;
 80050f2:	e01d      	b.n	8005130 <HAL_TIM_PeriodElapsedCallback+0x1b0>
				} else if (irparams.timer > GAP_TICKS) {// Space
 80050f4:	4b18      	ldr	r3, [pc, #96]	; (8005158 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80050f6:	885b      	ldrh	r3, [r3, #2]
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	2b64      	cmp	r3, #100	; 0x64
 80050fc:	d918      	bls.n	8005130 <HAL_TIM_PeriodElapsedCallback+0x1b0>
					irparams.rcvstate = STATE_STOP;
 80050fe:	4b16      	ldr	r3, [pc, #88]	; (8005158 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8005100:	2205      	movs	r2, #5
 8005102:	701a      	strb	r2, [r3, #0]
			break;
 8005104:	e014      	b.n	8005130 <HAL_TIM_PeriodElapsedCallback+0x1b0>
			 	if (irdata == MARK) irparams.timer = 0;  // Reset gap timer
 8005106:	7bfb      	ldrb	r3, [r7, #15]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d113      	bne.n	8005134 <HAL_TIM_PeriodElapsedCallback+0x1b4>
 800510c:	4b12      	ldr	r3, [pc, #72]	; (8005158 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 800510e:	2200      	movs	r2, #0
 8005110:	805a      	strh	r2, [r3, #2]
			break;
 8005112:	e00f      	b.n	8005134 <HAL_TIM_PeriodElapsedCallback+0x1b4>
				irparams.overflow = 1;
 8005114:	4b10      	ldr	r3, [pc, #64]	; (8005158 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8005116:	2201      	movs	r2, #1
 8005118:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				irparams.rcvstate = STATE_STOP;
 800511c:	4b0e      	ldr	r3, [pc, #56]	; (8005158 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 800511e:	2205      	movs	r2, #5
 8005120:	701a      	strb	r2, [r3, #0]
			break;
 8005122:	e008      	b.n	8005136 <HAL_TIM_PeriodElapsedCallback+0x1b6>
	}
 8005124:	bf00      	nop
 8005126:	e006      	b.n	8005136 <HAL_TIM_PeriodElapsedCallback+0x1b6>
			break;
 8005128:	bf00      	nop
 800512a:	e004      	b.n	8005136 <HAL_TIM_PeriodElapsedCallback+0x1b6>
			break;
 800512c:	bf00      	nop
 800512e:	e002      	b.n	8005136 <HAL_TIM_PeriodElapsedCallback+0x1b6>
			break;
 8005130:	bf00      	nop
 8005132:	e000      	b.n	8005136 <HAL_TIM_PeriodElapsedCallback+0x1b6>
			break;
 8005134:	bf00      	nop
}
 8005136:	bf00      	nop
 8005138:	3710      	adds	r7, #16
 800513a:	46bd      	mov	sp, r7
 800513c:	bdb0      	pop	{r4, r5, r7, pc}
 800513e:	bf00      	nop
 8005140:	40000800 	.word	0x40000800
 8005144:	20001bd0 	.word	0x20001bd0
 8005148:	20001bcc 	.word	0x20001bcc
 800514c:	2000300c 	.word	0x2000300c
 8005150:	40001000 	.word	0x40001000
 8005154:	48000800 	.word	0x48000800
 8005158:	20000454 	.word	0x20000454

0800515c <HAL_UART_TxCpltCallback>:
//--------------------------------------------------------------------------------------------

//-------------------------------------------------------------------------------------------
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800515c:	b480      	push	{r7}
 800515e:	b083      	sub	sp, #12
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a0a      	ldr	r2, [pc, #40]	; (8005194 <HAL_UART_TxCpltCallback+0x38>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d103      	bne.n	8005176 <HAL_UART_TxCpltCallback+0x1a>
		uartRdy = 1;
 800516e:	4b0a      	ldr	r3, [pc, #40]	; (8005198 <HAL_UART_TxCpltCallback+0x3c>)
 8005170:	2201      	movs	r2, #1
 8005172:	701a      	strb	r2, [r3, #0]
	else
	if (huart->Instance == USART3) {
		bleRdy = 1;
	}
#endif
}
 8005174:	e007      	b.n	8005186 <HAL_UART_TxCpltCallback+0x2a>
	if (huart->Instance == USART3) {
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a08      	ldr	r2, [pc, #32]	; (800519c <HAL_UART_TxCpltCallback+0x40>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d102      	bne.n	8005186 <HAL_UART_TxCpltCallback+0x2a>
		bleRdy = 1;
 8005180:	4b07      	ldr	r3, [pc, #28]	; (80051a0 <HAL_UART_TxCpltCallback+0x44>)
 8005182:	2201      	movs	r2, #1
 8005184:	701a      	strb	r2, [r3, #0]
}
 8005186:	bf00      	nop
 8005188:	370c      	adds	r7, #12
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr
 8005192:	bf00      	nop
 8005194:	40004400 	.word	0x40004400
 8005198:	20000014 	.word	0x20000014
 800519c:	40004800 	.word	0x40004800
 80051a0:	2000021c 	.word	0x2000021c

080051a4 <HAL_UART_ErrorCallback>:
//-------------------------------------------------------------------------------------------
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b083      	sub	sp, #12
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a0e      	ldr	r2, [pc, #56]	; (80051ec <HAL_UART_ErrorCallback+0x48>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d107      	bne.n	80051c6 <HAL_UART_ErrorCallback+0x22>
		devError |= devUART;
 80051b6:	4b0e      	ldr	r3, [pc, #56]	; (80051f0 <HAL_UART_ErrorCallback+0x4c>)
 80051b8:	881b      	ldrh	r3, [r3, #0]
 80051ba:	f043 0302 	orr.w	r3, r3, #2
 80051be:	b29a      	uxth	r2, r3
 80051c0:	4b0b      	ldr	r3, [pc, #44]	; (80051f0 <HAL_UART_ErrorCallback+0x4c>)
 80051c2:	801a      	strh	r2, [r3, #0]
	else
	if (huart->Instance == USART3) {
		devError |= devBLE;
	}
#endif
}
 80051c4:	e00b      	b.n	80051de <HAL_UART_ErrorCallback+0x3a>
	if (huart->Instance == USART3) {
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a0a      	ldr	r2, [pc, #40]	; (80051f4 <HAL_UART_ErrorCallback+0x50>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d106      	bne.n	80051de <HAL_UART_ErrorCallback+0x3a>
		devError |= devBLE;
 80051d0:	4b07      	ldr	r3, [pc, #28]	; (80051f0 <HAL_UART_ErrorCallback+0x4c>)
 80051d2:	881b      	ldrh	r3, [r3, #0]
 80051d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80051d8:	b29a      	uxth	r2, r3
 80051da:	4b05      	ldr	r3, [pc, #20]	; (80051f0 <HAL_UART_ErrorCallback+0x4c>)
 80051dc:	801a      	strh	r2, [r3, #0]
}
 80051de:	bf00      	nop
 80051e0:	370c      	adds	r7, #12
 80051e2:	46bd      	mov	sp, r7
 80051e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e8:	4770      	bx	lr
 80051ea:	bf00      	nop
 80051ec:	40004400 	.word	0x40004400
 80051f0:	20001bc8 	.word	0x20001bc8
 80051f4:	40004800 	.word	0x40004800

080051f8 <HAL_UART_RxCpltCallback>:
//-------------------------------------------------------------------------------------------
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80051f8:	b590      	push	{r4, r7, lr}
 80051fa:	b08f      	sub	sp, #60	; 0x3c
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
#if defined(SET_BLE) || defined(SET_AUDIO)
	if (huart->Instance == USART3) {
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4aa8      	ldr	r2, [pc, #672]	; (80054a8 <HAL_UART_RxCpltCallback+0x2b0>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d134      	bne.n	8005274 <HAL_UART_RxCpltCallback+0x7c>
		/*if ((rxbByte > 0x0D) && (rxbByte < 0x80)) {
			if (rxbByte >= 0x20) adone = 1;
			if (adone) rxbBuf[rxbInd++] = (char)rxbByte;
		}*/
		//if (adone) {
			rxbBuf[rxbInd++] = (char)rxbByte;
 800520a:	4ba8      	ldr	r3, [pc, #672]	; (80054ac <HAL_UART_RxCpltCallback+0x2b4>)
 800520c:	881b      	ldrh	r3, [r3, #0]
 800520e:	1c5a      	adds	r2, r3, #1
 8005210:	b291      	uxth	r1, r2
 8005212:	4aa6      	ldr	r2, [pc, #664]	; (80054ac <HAL_UART_RxCpltCallback+0x2b4>)
 8005214:	8011      	strh	r1, [r2, #0]
 8005216:	461a      	mov	r2, r3
 8005218:	4ba5      	ldr	r3, [pc, #660]	; (80054b0 <HAL_UART_RxCpltCallback+0x2b8>)
 800521a:	7819      	ldrb	r1, [r3, #0]
 800521c:	4ba5      	ldr	r3, [pc, #660]	; (80054b4 <HAL_UART_RxCpltCallback+0x2bc>)
 800521e:	5499      	strb	r1, [r3, r2]
			if (rxbByte == 0x0a) {// '\n'
 8005220:	4ba3      	ldr	r3, [pc, #652]	; (80054b0 <HAL_UART_RxCpltCallback+0x2b8>)
 8005222:	781b      	ldrb	r3, [r3, #0]
 8005224:	2b0a      	cmp	r3, #10
 8005226:	d114      	bne.n	8005252 <HAL_UART_RxCpltCallback+0x5a>
				rxbBuf[--rxbInd] = '\0';
 8005228:	4ba0      	ldr	r3, [pc, #640]	; (80054ac <HAL_UART_RxCpltCallback+0x2b4>)
 800522a:	881b      	ldrh	r3, [r3, #0]
 800522c:	3b01      	subs	r3, #1
 800522e:	b29a      	uxth	r2, r3
 8005230:	4b9e      	ldr	r3, [pc, #632]	; (80054ac <HAL_UART_RxCpltCallback+0x2b4>)
 8005232:	801a      	strh	r2, [r3, #0]
 8005234:	4b9d      	ldr	r3, [pc, #628]	; (80054ac <HAL_UART_RxCpltCallback+0x2b4>)
 8005236:	881b      	ldrh	r3, [r3, #0]
 8005238:	461a      	mov	r2, r3
 800523a:	4b9e      	ldr	r3, [pc, #632]	; (80054b4 <HAL_UART_RxCpltCallback+0x2bc>)
 800523c:	2100      	movs	r1, #0
 800523e:	5499      	strb	r1, [r3, r2]
							devError |= devMEM;
						}
					}*/
					//-----------------------------------------------------------------------------
				}
				rxbInd = 0;
 8005240:	4b9a      	ldr	r3, [pc, #616]	; (80054ac <HAL_UART_RxCpltCallback+0x2b4>)
 8005242:	2200      	movs	r2, #0
 8005244:	801a      	strh	r2, [r3, #0]
				//adone = 0;
				memset(rxbBuf, 0, sizeof(rxbBuf));
 8005246:	f44f 7280 	mov.w	r2, #256	; 0x100
 800524a:	2100      	movs	r1, #0
 800524c:	4899      	ldr	r0, [pc, #612]	; (80054b4 <HAL_UART_RxCpltCallback+0x2bc>)
 800524e:	f00a fb9f 	bl	800f990 <memset>
			}
		//}
		//
		if (HAL_UART_Receive_IT(huart, &rxbByte, 1) != HAL_OK) devError |= devBLE;
 8005252:	2201      	movs	r2, #1
 8005254:	4996      	ldr	r1, [pc, #600]	; (80054b0 <HAL_UART_RxCpltCallback+0x2b8>)
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f008 feb6 	bl	800dfc8 <HAL_UART_Receive_IT>
 800525c:	4603      	mov	r3, r0
 800525e:	2b00      	cmp	r3, #0
 8005260:	f000 82d7 	beq.w	8005812 <HAL_UART_RxCpltCallback+0x61a>
 8005264:	4b94      	ldr	r3, [pc, #592]	; (80054b8 <HAL_UART_RxCpltCallback+0x2c0>)
 8005266:	881b      	ldrh	r3, [r3, #0]
 8005268:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800526c:	b29a      	uxth	r2, r3
 800526e:	4b92      	ldr	r3, [pc, #584]	; (80054b8 <HAL_UART_RxCpltCallback+0x2c0>)
 8005270:	801a      	strh	r2, [r3, #0]
			*rxBuf = '\0';
		}

		if (HAL_UART_Receive_IT(huart, &rxByte, 1) != HAL_OK) devError |= devUART;
	}
}
 8005272:	e2ce      	b.n	8005812 <HAL_UART_RxCpltCallback+0x61a>
	if (huart->Instance == USART2) {
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a90      	ldr	r2, [pc, #576]	; (80054bc <HAL_UART_RxCpltCallback+0x2c4>)
 800527a:	4293      	cmp	r3, r2
 800527c:	f040 82c9 	bne.w	8005812 <HAL_UART_RxCpltCallback+0x61a>
		rxBuf[rxInd++] = (char)rxByte;
 8005280:	4b8f      	ldr	r3, [pc, #572]	; (80054c0 <HAL_UART_RxCpltCallback+0x2c8>)
 8005282:	881b      	ldrh	r3, [r3, #0]
 8005284:	1c5a      	adds	r2, r3, #1
 8005286:	b291      	uxth	r1, r2
 8005288:	4a8d      	ldr	r2, [pc, #564]	; (80054c0 <HAL_UART_RxCpltCallback+0x2c8>)
 800528a:	8011      	strh	r1, [r2, #0]
 800528c:	461a      	mov	r2, r3
 800528e:	4b8d      	ldr	r3, [pc, #564]	; (80054c4 <HAL_UART_RxCpltCallback+0x2cc>)
 8005290:	7819      	ldrb	r1, [r3, #0]
 8005292:	4b8d      	ldr	r3, [pc, #564]	; (80054c8 <HAL_UART_RxCpltCallback+0x2d0>)
 8005294:	5499      	strb	r1, [r3, r2]
		if (rxByte == 0x0a) {//end of line
 8005296:	4b8b      	ldr	r3, [pc, #556]	; (80054c4 <HAL_UART_RxCpltCallback+0x2cc>)
 8005298:	781b      	ldrb	r3, [r3, #0]
 800529a:	2b0a      	cmp	r3, #10
 800529c:	f040 82aa 	bne.w	80057f4 <HAL_UART_RxCpltCallback+0x5fc>
			rxBuf[--rxInd] = '\0';
 80052a0:	4b87      	ldr	r3, [pc, #540]	; (80054c0 <HAL_UART_RxCpltCallback+0x2c8>)
 80052a2:	881b      	ldrh	r3, [r3, #0]
 80052a4:	3b01      	subs	r3, #1
 80052a6:	b29a      	uxth	r2, r3
 80052a8:	4b85      	ldr	r3, [pc, #532]	; (80054c0 <HAL_UART_RxCpltCallback+0x2c8>)
 80052aa:	801a      	strh	r2, [r3, #0]
 80052ac:	4b84      	ldr	r3, [pc, #528]	; (80054c0 <HAL_UART_RxCpltCallback+0x2c8>)
 80052ae:	881b      	ldrh	r3, [r3, #0]
 80052b0:	461a      	mov	r2, r3
 80052b2:	4b85      	ldr	r3, [pc, #532]	; (80054c8 <HAL_UART_RxCpltCallback+0x2d0>)
 80052b4:	2100      	movs	r1, #0
 80052b6:	5499      	strb	r1, [r3, r2]
			int i, ev = -1;
 80052b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80052bc:	633b      	str	r3, [r7, #48]	; 0x30
			if (strlen(rxBuf) >= 2) {
 80052be:	4882      	ldr	r0, [pc, #520]	; (80054c8 <HAL_UART_RxCpltCallback+0x2d0>)
 80052c0:	f7fa ff86 	bl	80001d0 <strlen>
 80052c4:	4603      	mov	r3, r0
 80052c6:	2b01      	cmp	r3, #1
 80052c8:	f240 828e 	bls.w	80057e8 <HAL_UART_RxCpltCallback+0x5f0>
				if ( (strstr(rxBuf, "at")) || (strstr(rxBuf, "AT")) ) {
 80052cc:	497f      	ldr	r1, [pc, #508]	; (80054cc <HAL_UART_RxCpltCallback+0x2d4>)
 80052ce:	487e      	ldr	r0, [pc, #504]	; (80054c8 <HAL_UART_RxCpltCallback+0x2d0>)
 80052d0:	f00b f917 	bl	8010502 <strstr>
 80052d4:	4603      	mov	r3, r0
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d106      	bne.n	80052e8 <HAL_UART_RxCpltCallback+0xf0>
 80052da:	497d      	ldr	r1, [pc, #500]	; (80054d0 <HAL_UART_RxCpltCallback+0x2d8>)
 80052dc:	487a      	ldr	r0, [pc, #488]	; (80054c8 <HAL_UART_RxCpltCallback+0x2d0>)
 80052de:	f00b f910 	bl	8010502 <strstr>
 80052e2:	4603      	mov	r3, r0
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d047      	beq.n	8005378 <HAL_UART_RxCpltCallback+0x180>
					if (bleQueCmdFlag) {
 80052e8:	4b7a      	ldr	r3, [pc, #488]	; (80054d4 <HAL_UART_RxCpltCallback+0x2dc>)
 80052ea:	781b      	ldrb	r3, [r3, #0]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d03f      	beq.n	8005370 <HAL_UART_RxCpltCallback+0x178>
						int len = strlen(rxBuf);
 80052f0:	4875      	ldr	r0, [pc, #468]	; (80054c8 <HAL_UART_RxCpltCallback+0x2d0>)
 80052f2:	f7fa ff6d 	bl	80001d0 <strlen>
 80052f6:	4603      	mov	r3, r0
 80052f8:	60fb      	str	r3, [r7, #12]
						char *to = (char *)calloc(1, len + 3);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	3303      	adds	r3, #3
 80052fe:	4619      	mov	r1, r3
 8005300:	2001      	movs	r0, #1
 8005302:	f00a fa49 	bl	800f798 <calloc>
 8005306:	4603      	mov	r3, r0
 8005308:	60bb      	str	r3, [r7, #8]
						if (to) {
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d028      	beq.n	8005362 <HAL_UART_RxCpltCallback+0x16a>
							memcpy(to, rxBuf, len);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	461a      	mov	r2, r3
 8005314:	496c      	ldr	r1, [pc, #432]	; (80054c8 <HAL_UART_RxCpltCallback+0x2d0>)
 8005316:	68b8      	ldr	r0, [r7, #8]
 8005318:	f00a fb2c 	bl	800f974 <memcpy>
							toUppers(to);
 800531c:	68b8      	ldr	r0, [r7, #8]
 800531e:	f7ff fc83 	bl	8004c28 <toUppers>
							if (putRECQ(to, &bleQueCmd) < 0) {
 8005322:	496d      	ldr	r1, [pc, #436]	; (80054d8 <HAL_UART_RxCpltCallback+0x2e0>)
 8005324:	68b8      	ldr	r0, [r7, #8]
 8005326:	f7fc fed0 	bl	80020ca <putRECQ>
 800532a:	4603      	mov	r3, r0
 800532c:	2b00      	cmp	r3, #0
 800532e:	da0a      	bge.n	8005346 <HAL_UART_RxCpltCallback+0x14e>
								devError |= devQUE;
 8005330:	4b61      	ldr	r3, [pc, #388]	; (80054b8 <HAL_UART_RxCpltCallback+0x2c0>)
 8005332:	881b      	ldrh	r3, [r3, #0]
 8005334:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005338:	b29a      	uxth	r2, r3
 800533a:	4b5f      	ldr	r3, [pc, #380]	; (80054b8 <HAL_UART_RxCpltCallback+0x2c0>)
 800533c:	801a      	strh	r2, [r3, #0]
								free(to);
 800533e:	68b8      	ldr	r0, [r7, #8]
 8005340:	f00a fb10 	bl	800f964 <free>
 8005344:	e014      	b.n	8005370 <HAL_UART_RxCpltCallback+0x178>
								if (devError & devQUE) devError &= ~devQUE;
 8005346:	4b5c      	ldr	r3, [pc, #368]	; (80054b8 <HAL_UART_RxCpltCallback+0x2c0>)
 8005348:	881b      	ldrh	r3, [r3, #0]
 800534a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800534e:	2b00      	cmp	r3, #0
 8005350:	d00e      	beq.n	8005370 <HAL_UART_RxCpltCallback+0x178>
 8005352:	4b59      	ldr	r3, [pc, #356]	; (80054b8 <HAL_UART_RxCpltCallback+0x2c0>)
 8005354:	881b      	ldrh	r3, [r3, #0]
 8005356:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800535a:	b29a      	uxth	r2, r3
 800535c:	4b56      	ldr	r3, [pc, #344]	; (80054b8 <HAL_UART_RxCpltCallback+0x2c0>)
 800535e:	801a      	strh	r2, [r3, #0]
 8005360:	e006      	b.n	8005370 <HAL_UART_RxCpltCallback+0x178>
							devError |= devMEM;
 8005362:	4b55      	ldr	r3, [pc, #340]	; (80054b8 <HAL_UART_RxCpltCallback+0x2c0>)
 8005364:	881b      	ldrh	r3, [r3, #0]
 8005366:	f043 0304 	orr.w	r3, r3, #4
 800536a:	b29a      	uxth	r2, r3
 800536c:	4b52      	ldr	r3, [pc, #328]	; (80054b8 <HAL_UART_RxCpltCallback+0x2c0>)
 800536e:	801a      	strh	r2, [r3, #0]
					ev = -2;
 8005370:	f06f 0301 	mvn.w	r3, #1
 8005374:	633b      	str	r3, [r7, #48]	; 0x30
 8005376:	e22a      	b.n	80057ce <HAL_UART_RxCpltCallback+0x5d6>
					for (i = 0; i < MAX_CMDS; i++) {
 8005378:	2300      	movs	r3, #0
 800537a:	637b      	str	r3, [r7, #52]	; 0x34
 800537c:	e221      	b.n	80057c2 <HAL_UART_RxCpltCallback+0x5ca>
						if (!strncmp(rxBuf, s_cmds[i], strlen(s_cmds[i]))) {
 800537e:	4a57      	ldr	r2, [pc, #348]	; (80054dc <HAL_UART_RxCpltCallback+0x2e4>)
 8005380:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005382:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8005386:	4a55      	ldr	r2, [pc, #340]	; (80054dc <HAL_UART_RxCpltCallback+0x2e4>)
 8005388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800538a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800538e:	4618      	mov	r0, r3
 8005390:	f7fa ff1e 	bl	80001d0 <strlen>
 8005394:	4603      	mov	r3, r0
 8005396:	461a      	mov	r2, r3
 8005398:	4621      	mov	r1, r4
 800539a:	484b      	ldr	r0, [pc, #300]	; (80054c8 <HAL_UART_RxCpltCallback+0x2d0>)
 800539c:	f00b f89d 	bl	80104da <strncmp>
 80053a0:	4603      	mov	r3, r0
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	f040 820a 	bne.w	80057bc <HAL_UART_RxCpltCallback+0x5c4>
							char *uk = rxBuf + strlen(s_cmds[i]);
 80053a8:	4a4c      	ldr	r2, [pc, #304]	; (80054dc <HAL_UART_RxCpltCallback+0x2e4>)
 80053aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053b0:	4618      	mov	r0, r3
 80053b2:	f7fa ff0d 	bl	80001d0 <strlen>
 80053b6:	4603      	mov	r3, r0
 80053b8:	4a43      	ldr	r2, [pc, #268]	; (80054c8 <HAL_UART_RxCpltCallback+0x2d0>)
 80053ba:	4413      	add	r3, r2
 80053bc:	62bb      	str	r3, [r7, #40]	; 0x28
							ev = -1;
 80053be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80053c2:	633b      	str	r3, [r7, #48]	; 0x30
							switch (i) {
 80053c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053c6:	2b17      	cmp	r3, #23
 80053c8:	f200 8200 	bhi.w	80057cc <HAL_UART_RxCpltCallback+0x5d4>
 80053cc:	a201      	add	r2, pc, #4	; (adr r2, 80053d4 <HAL_UART_RxCpltCallback+0x1dc>)
 80053ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053d2:	bf00      	nop
 80053d4:	080055bd 	.word	0x080055bd
 80053d8:	080055bd 	.word	0x080055bd
 80053dc:	080055c3 	.word	0x080055c3
 80053e0:	080057cd 	.word	0x080057cd
 80053e4:	08005615 	.word	0x08005615
 80053e8:	08005615 	.word	0x08005615
 80053ec:	08005721 	.word	0x08005721
 80053f0:	08005685 	.word	0x08005685
 80053f4:	080057cd 	.word	0x080057cd
 80053f8:	080055bd 	.word	0x080055bd
 80053fc:	080055bd 	.word	0x080055bd
 8005400:	0800557b 	.word	0x0800557b
 8005404:	08005537 	.word	0x08005537
 8005408:	08005461 	.word	0x08005461
 800540c:	080055bd 	.word	0x080055bd
 8005410:	08005519 	.word	0x08005519
 8005414:	0800557b 	.word	0x0800557b
 8005418:	08005435 	.word	0x08005435
 800541c:	080055bd 	.word	0x080055bd
 8005420:	080055bd 	.word	0x080055bd
 8005424:	080057cd 	.word	0x080057cd
 8005428:	080055bd 	.word	0x080055bd
 800542c:	080057cd 	.word	0x080057cd
 8005430:	080055bd 	.word	0x080055bd
									if (strlen(uk) >= 1) {
 8005434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005436:	781b      	ldrb	r3, [r3, #0]
 8005438:	2b00      	cmp	r3, #0
 800543a:	f000 818e 	beq.w	800575a <HAL_UART_RxCpltCallback+0x562>
										newBand = atol(uk);
 800543e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005440:	f00a f9a5 	bl	800f78e <atol>
 8005444:	4603      	mov	r3, r0
 8005446:	b2da      	uxtb	r2, r3
 8005448:	4b25      	ldr	r3, [pc, #148]	; (80054e0 <HAL_UART_RxCpltCallback+0x2e8>)
 800544a:	701a      	strb	r2, [r3, #0]
										if (newBand != Band) {
 800544c:	4b24      	ldr	r3, [pc, #144]	; (80054e0 <HAL_UART_RxCpltCallback+0x2e8>)
 800544e:	781a      	ldrb	r2, [r3, #0]
 8005450:	4b24      	ldr	r3, [pc, #144]	; (80054e4 <HAL_UART_RxCpltCallback+0x2ec>)
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	429a      	cmp	r2, r3
 8005456:	f000 8180 	beq.w	800575a <HAL_UART_RxCpltCallback+0x562>
											ev = i;
 800545a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800545c:	633b      	str	r3, [r7, #48]	; 0x30
								break;
 800545e:	e17c      	b.n	800575a <HAL_UART_RxCpltCallback+0x562>
									if (strlen(uk) >= 1) {
 8005460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005462:	781b      	ldrb	r3, [r3, #0]
 8005464:	2b00      	cmp	r3, #0
 8005466:	f000 817a 	beq.w	800575e <HAL_UART_RxCpltCallback+0x566>
										uint8_t nv = Volume;
 800546a:	4b1f      	ldr	r3, [pc, #124]	; (80054e8 <HAL_UART_RxCpltCallback+0x2f0>)
 800546c:	781b      	ldrb	r3, [r3, #0]
 800546e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
										if (strstr(uk, "up")) {
 8005472:	491e      	ldr	r1, [pc, #120]	; (80054ec <HAL_UART_RxCpltCallback+0x2f4>)
 8005474:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005476:	f00b f844 	bl	8010502 <strstr>
 800547a:	4603      	mov	r3, r0
 800547c:	2b00      	cmp	r3, #0
 800547e:	d005      	beq.n	800548c <HAL_UART_RxCpltCallback+0x294>
											nv++;
 8005480:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005484:	3301      	adds	r3, #1
 8005486:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800548a:	e039      	b.n	8005500 <HAL_UART_RxCpltCallback+0x308>
										} else if (strstr(uk, "down")) {
 800548c:	4918      	ldr	r1, [pc, #96]	; (80054f0 <HAL_UART_RxCpltCallback+0x2f8>)
 800548e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005490:	f00b f837 	bl	8010502 <strstr>
 8005494:	4603      	mov	r3, r0
 8005496:	2b00      	cmp	r3, #0
 8005498:	d02c      	beq.n	80054f4 <HAL_UART_RxCpltCallback+0x2fc>
											nv--;
 800549a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800549e:	3b01      	subs	r3, #1
 80054a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80054a4:	e02c      	b.n	8005500 <HAL_UART_RxCpltCallback+0x308>
 80054a6:	bf00      	nop
 80054a8:	40004800 	.word	0x40004800
 80054ac:	200033bc 	.word	0x200033bc
 80054b0:	200033ba 	.word	0x200033ba
 80054b4:	200033c0 	.word	0x200033c0
 80054b8:	20001bc8 	.word	0x20001bc8
 80054bc:	40004400 	.word	0x40004400
 80054c0:	20001bda 	.word	0x20001bda
 80054c4:	20001bd8 	.word	0x20001bd8
 80054c8:	20001bdc 	.word	0x20001bdc
 80054cc:	080146ec 	.word	0x080146ec
 80054d0:	080146f0 	.word	0x080146f0
 80054d4:	20003768 	.word	0x20003768
 80054d8:	20003714 	.word	0x20003714
 80054dc:	2000001c 	.word	0x2000001c
 80054e0:	200001fd 	.word	0x200001fd
 80054e4:	200001fc 	.word	0x200001fc
 80054e8:	200001ff 	.word	0x200001ff
 80054ec:	080146f4 	.word	0x080146f4
 80054f0:	080146f8 	.word	0x080146f8
											nv = (uint8_t)atol(uk);
 80054f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054f6:	f00a f94a 	bl	800f78e <atol>
 80054fa:	4603      	mov	r3, r0
 80054fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
										if ((nv >= 0) && (nv <= 15)) {
 8005500:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005504:	2b0f      	cmp	r3, #15
 8005506:	f200 812a 	bhi.w	800575e <HAL_UART_RxCpltCallback+0x566>
											newVolume = nv;
 800550a:	4a9d      	ldr	r2, [pc, #628]	; (8005780 <HAL_UART_RxCpltCallback+0x588>)
 800550c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005510:	7013      	strb	r3, [r2, #0]
											ev = i;
 8005512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005514:	633b      	str	r3, [r7, #48]	; 0x30
								break;
 8005516:	e122      	b.n	800575e <HAL_UART_RxCpltCallback+0x566>
									if (strlen(uk) >= 1) {
 8005518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800551a:	781b      	ldrb	r3, [r3, #0]
 800551c:	2b00      	cmp	r3, #0
 800551e:	f000 8120 	beq.w	8005762 <HAL_UART_RxCpltCallback+0x56a>
										newBassBoost = (uint8_t)atol(uk);
 8005522:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005524:	f00a f933 	bl	800f78e <atol>
 8005528:	4603      	mov	r3, r0
 800552a:	b2da      	uxtb	r2, r3
 800552c:	4b95      	ldr	r3, [pc, #596]	; (8005784 <HAL_UART_RxCpltCallback+0x58c>)
 800552e:	701a      	strb	r2, [r3, #0]
										ev = i;
 8005530:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005532:	633b      	str	r3, [r7, #48]	; 0x30
								break;
 8005534:	e115      	b.n	8005762 <HAL_UART_RxCpltCallback+0x56a>
									if (strlen(uk) >= 2) {
 8005536:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005538:	f7fa fe4a 	bl	80001d0 <strlen>
 800553c:	4603      	mov	r3, r0
 800553e:	2b01      	cmp	r3, #1
 8005540:	f240 8111 	bls.w	8005766 <HAL_UART_RxCpltCallback+0x56e>
										newFreq = (float)atof(uk);
 8005544:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005546:	f00a f91b 	bl	800f780 <atof>
 800554a:	ec53 2b10 	vmov	r2, r3, d0
 800554e:	4610      	mov	r0, r2
 8005550:	4619      	mov	r1, r3
 8005552:	f7fb fb49 	bl	8000be8 <__aeabi_d2f>
 8005556:	4603      	mov	r3, r0
 8005558:	4a8b      	ldr	r2, [pc, #556]	; (8005788 <HAL_UART_RxCpltCallback+0x590>)
 800555a:	6013      	str	r3, [r2, #0]
										if (newFreq != Freq) {
 800555c:	4b8a      	ldr	r3, [pc, #552]	; (8005788 <HAL_UART_RxCpltCallback+0x590>)
 800555e:	ed93 7a00 	vldr	s14, [r3]
 8005562:	4b8a      	ldr	r3, [pc, #552]	; (800578c <HAL_UART_RxCpltCallback+0x594>)
 8005564:	edd3 7a00 	vldr	s15, [r3]
 8005568:	eeb4 7a67 	vcmp.f32	s14, s15
 800556c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005570:	f000 80f9 	beq.w	8005766 <HAL_UART_RxCpltCallback+0x56e>
											ev = i;
 8005574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005576:	633b      	str	r3, [r7, #48]	; 0x30
								break;
 8005578:	e0f5      	b.n	8005766 <HAL_UART_RxCpltCallback+0x56e>
									seek_up = 1;
 800557a:	4b85      	ldr	r3, [pc, #532]	; (8005790 <HAL_UART_RxCpltCallback+0x598>)
 800557c:	2201      	movs	r2, #1
 800557e:	701a      	strb	r2, [r3, #0]
									ev = i;
 8005580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005582:	633b      	str	r3, [r7, #48]	; 0x30
									char *uki = strchr(uk, ':');
 8005584:	213a      	movs	r1, #58	; 0x3a
 8005586:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005588:	f00a ff9a 	bl	80104c0 <strchr>
 800558c:	6278      	str	r0, [r7, #36]	; 0x24
									if (uki) {
 800558e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005590:	2b00      	cmp	r3, #0
 8005592:	f000 80ea 	beq.w	800576a <HAL_UART_RxCpltCallback+0x572>
										if ((*(char *)(uki + 1) == '0') || strstr(uki + 1, "down")) seek_up = 0;
 8005596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005598:	3301      	adds	r3, #1
 800559a:	781b      	ldrb	r3, [r3, #0]
 800559c:	2b30      	cmp	r3, #48	; 0x30
 800559e:	d009      	beq.n	80055b4 <HAL_UART_RxCpltCallback+0x3bc>
 80055a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a2:	3301      	adds	r3, #1
 80055a4:	497b      	ldr	r1, [pc, #492]	; (8005794 <HAL_UART_RxCpltCallback+0x59c>)
 80055a6:	4618      	mov	r0, r3
 80055a8:	f00a ffab 	bl	8010502 <strstr>
 80055ac:	4603      	mov	r3, r0
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	f000 80db 	beq.w	800576a <HAL_UART_RxCpltCallback+0x572>
 80055b4:	4b76      	ldr	r3, [pc, #472]	; (8005790 <HAL_UART_RxCpltCallback+0x598>)
 80055b6:	2200      	movs	r2, #0
 80055b8:	701a      	strb	r2, [r3, #0]
								break;
 80055ba:	e0d6      	b.n	800576a <HAL_UART_RxCpltCallback+0x572>
									ev = i;
 80055bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055be:	633b      	str	r3, [r7, #48]	; 0x30
								break;
 80055c0:	e0dc      	b.n	800577c <HAL_UART_RxCpltCallback+0x584>
									if (strlen(uk) >= 10) {
 80055c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80055c4:	f7fa fe04 	bl	80001d0 <strlen>
 80055c8:	4603      	mov	r3, r0
 80055ca:	2b09      	cmp	r3, #9
 80055cc:	f240 80cf 	bls.w	800576e <HAL_UART_RxCpltCallback+0x576>
										char *uki = strchr(uk, ':');
 80055d0:	213a      	movs	r1, #58	; 0x3a
 80055d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80055d4:	f00a ff74 	bl	80104c0 <strchr>
 80055d8:	6138      	str	r0, [r7, #16]
										if (uki) {
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d00c      	beq.n	80055fa <HAL_UART_RxCpltCallback+0x402>
											tZone = (uint8_t)atol(uki + 1);
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	3301      	adds	r3, #1
 80055e4:	4618      	mov	r0, r3
 80055e6:	f00a f8d2 	bl	800f78e <atol>
 80055ea:	4603      	mov	r3, r0
 80055ec:	b2da      	uxtb	r2, r3
 80055ee:	4b6a      	ldr	r3, [pc, #424]	; (8005798 <HAL_UART_RxCpltCallback+0x5a0>)
 80055f0:	701a      	strb	r2, [r3, #0]
											*uki = '\0';
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	2200      	movs	r2, #0
 80055f6:	701a      	strb	r2, [r3, #0]
 80055f8:	e002      	b.n	8005600 <HAL_UART_RxCpltCallback+0x408>
											tZone = 0;
 80055fa:	4b67      	ldr	r3, [pc, #412]	; (8005798 <HAL_UART_RxCpltCallback+0x5a0>)
 80055fc:	2200      	movs	r2, #0
 80055fe:	701a      	strb	r2, [r3, #0]
										epoch = (uint32_t)atol(uk);
 8005600:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005602:	f00a f8c4 	bl	800f78e <atol>
 8005606:	4603      	mov	r3, r0
 8005608:	461a      	mov	r2, r3
 800560a:	4b64      	ldr	r3, [pc, #400]	; (800579c <HAL_UART_RxCpltCallback+0x5a4>)
 800560c:	601a      	str	r2, [r3, #0]
										ev = i;
 800560e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005610:	633b      	str	r3, [r7, #48]	; 0x30
								break;
 8005612:	e0ac      	b.n	800576e <HAL_UART_RxCpltCallback+0x576>
									if (i == cmdsRead) cmd_sector = cmdsRead;
 8005614:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005616:	2b04      	cmp	r3, #4
 8005618:	d103      	bne.n	8005622 <HAL_UART_RxCpltCallback+0x42a>
 800561a:	4b61      	ldr	r3, [pc, #388]	; (80057a0 <HAL_UART_RxCpltCallback+0x5a8>)
 800561c:	2204      	movs	r2, #4
 800561e:	601a      	str	r2, [r3, #0]
 8005620:	e002      	b.n	8005628 <HAL_UART_RxCpltCallback+0x430>
												  else cmd_sector = cmdsErase;
 8005622:	4b5f      	ldr	r3, [pc, #380]	; (80057a0 <HAL_UART_RxCpltCallback+0x5a8>)
 8005624:	2205      	movs	r2, #5
 8005626:	601a      	str	r2, [r3, #0]
									if (*uk == ':') {
 8005628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800562a:	781b      	ldrb	r3, [r3, #0]
 800562c:	2b3a      	cmp	r3, #58	; 0x3a
 800562e:	f040 80a0 	bne.w	8005772 <HAL_UART_RxCpltCallback+0x57a>
										int sek = atoi(++uk);
 8005632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005634:	3301      	adds	r3, #1
 8005636:	62bb      	str	r3, [r7, #40]	; 0x28
 8005638:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800563a:	f00a f8a4 	bl	800f786 <atoi>
 800563e:	6178      	str	r0, [r7, #20]
										if ( ((sek >= 0) && (sek < W25qxx_getSectorCount())) || (sek == -1) ) {
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	2b00      	cmp	r3, #0
 8005644:	db05      	blt.n	8005652 <HAL_UART_RxCpltCallback+0x45a>
 8005646:	f001 fd61 	bl	800710c <W25qxx_getSectorCount>
 800564a:	4602      	mov	r2, r0
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	429a      	cmp	r2, r3
 8005650:	d804      	bhi.n	800565c <HAL_UART_RxCpltCallback+0x464>
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005658:	f040 808b 	bne.w	8005772 <HAL_UART_RxCpltCallback+0x57a>
											adr_sector = sek;
 800565c:	4a51      	ldr	r2, [pc, #324]	; (80057a4 <HAL_UART_RxCpltCallback+0x5ac>)
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	6013      	str	r3, [r2, #0]
											offset_sector = 0;
 8005662:	4b51      	ldr	r3, [pc, #324]	; (80057a8 <HAL_UART_RxCpltCallback+0x5b0>)
 8005664:	2200      	movs	r2, #0
 8005666:	601a      	str	r2, [r3, #0]
											if (sek == -1) {
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800566e:	d106      	bne.n	800567e <HAL_UART_RxCpltCallback+0x486>
												if (cmd_sector == cmdsErase) ev = i;
 8005670:	4b4b      	ldr	r3, [pc, #300]	; (80057a0 <HAL_UART_RxCpltCallback+0x5a8>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	2b05      	cmp	r3, #5
 8005676:	d17c      	bne.n	8005772 <HAL_UART_RxCpltCallback+0x57a>
 8005678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800567a:	633b      	str	r3, [r7, #48]	; 0x30
								break;
 800567c:	e079      	b.n	8005772 <HAL_UART_RxCpltCallback+0x57a>
												ev = i;
 800567e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005680:	633b      	str	r3, [r7, #48]	; 0x30
								break;
 8005682:	e076      	b.n	8005772 <HAL_UART_RxCpltCallback+0x57a>
									if (*uk == ':') {
 8005684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005686:	781b      	ldrb	r3, [r3, #0]
 8005688:	2b3a      	cmp	r3, #58	; 0x3a
 800568a:	d174      	bne.n	8005776 <HAL_UART_RxCpltCallback+0x57e>
										uk++;
 800568c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800568e:	3301      	adds	r3, #1
 8005690:	62bb      	str	r3, [r7, #40]	; 0x28
										int sek = atoi(uk);
 8005692:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005694:	f00a f877 	bl	800f786 <atoi>
 8005698:	6238      	str	r0, [r7, #32]
										if ((sek >= 0) && (sek < W25qxx_getSectorCount())) {
 800569a:	6a3b      	ldr	r3, [r7, #32]
 800569c:	2b00      	cmp	r3, #0
 800569e:	db6a      	blt.n	8005776 <HAL_UART_RxCpltCallback+0x57e>
 80056a0:	f001 fd34 	bl	800710c <W25qxx_getSectorCount>
 80056a4:	4602      	mov	r2, r0
 80056a6:	6a3b      	ldr	r3, [r7, #32]
 80056a8:	429a      	cmp	r2, r3
 80056aa:	d964      	bls.n	8005776 <HAL_UART_RxCpltCallback+0x57e>
											char *ukn = strchr(uk, ':');
 80056ac:	213a      	movs	r1, #58	; 0x3a
 80056ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80056b0:	f00a ff06 	bl	80104c0 <strchr>
 80056b4:	61f8      	str	r0, [r7, #28]
											if (ukn) {
 80056b6:	69fb      	ldr	r3, [r7, #28]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d05c      	beq.n	8005776 <HAL_UART_RxCpltCallback+0x57e>
												len_write = -1;
 80056bc:	4b3b      	ldr	r3, [pc, #236]	; (80057ac <HAL_UART_RxCpltCallback+0x5b4>)
 80056be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80056c2:	601a      	str	r2, [r3, #0]
												ukn++;
 80056c4:	69fb      	ldr	r3, [r7, #28]
 80056c6:	3301      	adds	r3, #1
 80056c8:	61fb      	str	r3, [r7, #28]
												byte_write = hexToBin(ukn);
 80056ca:	69f8      	ldr	r0, [r7, #28]
 80056cc:	f7fe ff4a 	bl	8004564 <hexToBin>
 80056d0:	4603      	mov	r3, r0
 80056d2:	461a      	mov	r2, r3
 80056d4:	4b36      	ldr	r3, [pc, #216]	; (80057b0 <HAL_UART_RxCpltCallback+0x5b8>)
 80056d6:	701a      	strb	r2, [r3, #0]
												uk = strchr(ukn, ':');
 80056d8:	213a      	movs	r1, #58	; 0x3a
 80056da:	69f8      	ldr	r0, [r7, #28]
 80056dc:	f00a fef0 	bl	80104c0 <strchr>
 80056e0:	62b8      	str	r0, [r7, #40]	; 0x28
												if (uk) {
 80056e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d012      	beq.n	800570e <HAL_UART_RxCpltCallback+0x516>
													int l = atoi(++uk);
 80056e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ea:	3301      	adds	r3, #1
 80056ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80056ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80056f0:	f00a f849 	bl	800f786 <atoi>
 80056f4:	61b8      	str	r0, [r7, #24]
													if ((l > 0) && (l < W25qxx_getSectorSize())) len_write = l;
 80056f6:	69bb      	ldr	r3, [r7, #24]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	dd08      	ble.n	800570e <HAL_UART_RxCpltCallback+0x516>
 80056fc:	f001 fd12 	bl	8007124 <W25qxx_getSectorSize>
 8005700:	4602      	mov	r2, r0
 8005702:	69bb      	ldr	r3, [r7, #24]
 8005704:	429a      	cmp	r2, r3
 8005706:	d902      	bls.n	800570e <HAL_UART_RxCpltCallback+0x516>
 8005708:	4a28      	ldr	r2, [pc, #160]	; (80057ac <HAL_UART_RxCpltCallback+0x5b4>)
 800570a:	69bb      	ldr	r3, [r7, #24]
 800570c:	6013      	str	r3, [r2, #0]
												adr_sector = sek;
 800570e:	4a25      	ldr	r2, [pc, #148]	; (80057a4 <HAL_UART_RxCpltCallback+0x5ac>)
 8005710:	6a3b      	ldr	r3, [r7, #32]
 8005712:	6013      	str	r3, [r2, #0]
												offset_sector = 0;
 8005714:	4b24      	ldr	r3, [pc, #144]	; (80057a8 <HAL_UART_RxCpltCallback+0x5b0>)
 8005716:	2200      	movs	r2, #0
 8005718:	601a      	str	r2, [r3, #0]
												ev = i;//flag_sector = true;
 800571a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800571c:	633b      	str	r3, [r7, #48]	; 0x30
								break;
 800571e:	e02a      	b.n	8005776 <HAL_UART_RxCpltCallback+0x57e>
									if ((last_cmd_sector == cmdsRead) || (last_cmd_sector == cmdsNext)) {
 8005720:	4b24      	ldr	r3, [pc, #144]	; (80057b4 <HAL_UART_RxCpltCallback+0x5bc>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	2b04      	cmp	r3, #4
 8005726:	d003      	beq.n	8005730 <HAL_UART_RxCpltCallback+0x538>
 8005728:	4b22      	ldr	r3, [pc, #136]	; (80057b4 <HAL_UART_RxCpltCallback+0x5bc>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	2b06      	cmp	r3, #6
 800572e:	d124      	bne.n	800577a <HAL_UART_RxCpltCallback+0x582>
										if ((offset_sector + list_sector) < W25qxx_getSectorSize()) {
 8005730:	4b1d      	ldr	r3, [pc, #116]	; (80057a8 <HAL_UART_RxCpltCallback+0x5b0>)
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	4b20      	ldr	r3, [pc, #128]	; (80057b8 <HAL_UART_RxCpltCallback+0x5c0>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4413      	add	r3, r2
 800573a:	461c      	mov	r4, r3
 800573c:	f001 fcf2 	bl	8007124 <W25qxx_getSectorSize>
 8005740:	4603      	mov	r3, r0
 8005742:	429c      	cmp	r4, r3
 8005744:	d219      	bcs.n	800577a <HAL_UART_RxCpltCallback+0x582>
											offset_sector += list_sector;
 8005746:	4b18      	ldr	r3, [pc, #96]	; (80057a8 <HAL_UART_RxCpltCallback+0x5b0>)
 8005748:	681a      	ldr	r2, [r3, #0]
 800574a:	4b1b      	ldr	r3, [pc, #108]	; (80057b8 <HAL_UART_RxCpltCallback+0x5c0>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4413      	add	r3, r2
 8005750:	4a15      	ldr	r2, [pc, #84]	; (80057a8 <HAL_UART_RxCpltCallback+0x5b0>)
 8005752:	6013      	str	r3, [r2, #0]
											ev = i;//flag_sector = true;
 8005754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005756:	633b      	str	r3, [r7, #48]	; 0x30
								break;
 8005758:	e00f      	b.n	800577a <HAL_UART_RxCpltCallback+0x582>
								break;
 800575a:	bf00      	nop
 800575c:	e036      	b.n	80057cc <HAL_UART_RxCpltCallback+0x5d4>
								break;
 800575e:	bf00      	nop
 8005760:	e034      	b.n	80057cc <HAL_UART_RxCpltCallback+0x5d4>
								break;
 8005762:	bf00      	nop
 8005764:	e032      	b.n	80057cc <HAL_UART_RxCpltCallback+0x5d4>
								break;
 8005766:	bf00      	nop
 8005768:	e030      	b.n	80057cc <HAL_UART_RxCpltCallback+0x5d4>
								break;
 800576a:	bf00      	nop
 800576c:	e02e      	b.n	80057cc <HAL_UART_RxCpltCallback+0x5d4>
								break;
 800576e:	bf00      	nop
 8005770:	e02c      	b.n	80057cc <HAL_UART_RxCpltCallback+0x5d4>
								break;
 8005772:	bf00      	nop
 8005774:	e02a      	b.n	80057cc <HAL_UART_RxCpltCallback+0x5d4>
								break;
 8005776:	bf00      	nop
 8005778:	e028      	b.n	80057cc <HAL_UART_RxCpltCallback+0x5d4>
								break;
 800577a:	bf00      	nop
							break;
 800577c:	e026      	b.n	80057cc <HAL_UART_RxCpltCallback+0x5d4>
 800577e:	bf00      	nop
 8005780:	20000200 	.word	0x20000200
 8005784:	20003023 	.word	0x20003023
 8005788:	200001f8 	.word	0x200001f8
 800578c:	200001f4 	.word	0x200001f4
 8005790:	200001fe 	.word	0x200001fe
 8005794:	080146f8 	.word	0x080146f8
 8005798:	20001fde 	.word	0x20001fde
 800579c:	20000018 	.word	0x20000018
 80057a0:	200001e8 	.word	0x200001e8
 80057a4:	20001fe8 	.word	0x20001fe8
 80057a8:	20001fec 	.word	0x20001fec
 80057ac:	20001ff4 	.word	0x20001ff4
 80057b0:	200001f0 	.word	0x200001f0
 80057b4:	200001ec 	.word	0x200001ec
 80057b8:	20001ff0 	.word	0x20001ff0
					for (i = 0; i < MAX_CMDS; i++) {
 80057bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057be:	3301      	adds	r3, #1
 80057c0:	637b      	str	r3, [r7, #52]	; 0x34
 80057c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057c4:	2b17      	cmp	r3, #23
 80057c6:	f77f adda 	ble.w	800537e <HAL_UART_RxCpltCallback+0x186>
 80057ca:	e000      	b.n	80057ce <HAL_UART_RxCpltCallback+0x5d6>
							break;
 80057cc:	bf00      	nop
				if (ev != -2) {
 80057ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d0:	f113 0f02 	cmn.w	r3, #2
 80057d4:	d008      	beq.n	80057e8 <HAL_UART_RxCpltCallback+0x5f0>
					if (ev == -1) ev = cmdErr;
 80057d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057dc:	d101      	bne.n	80057e2 <HAL_UART_RxCpltCallback+0x5ea>
 80057de:	2303      	movs	r3, #3
 80057e0:	633b      	str	r3, [r7, #48]	; 0x30
					putEvt(ev);
 80057e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80057e4:	f7fe ff38 	bl	8004658 <putEvt>
			rxInd = 0;
 80057e8:	4b0c      	ldr	r3, [pc, #48]	; (800581c <HAL_UART_RxCpltCallback+0x624>)
 80057ea:	2200      	movs	r2, #0
 80057ec:	801a      	strh	r2, [r3, #0]
			*rxBuf = '\0';
 80057ee:	4b0c      	ldr	r3, [pc, #48]	; (8005820 <HAL_UART_RxCpltCallback+0x628>)
 80057f0:	2200      	movs	r2, #0
 80057f2:	701a      	strb	r2, [r3, #0]
		if (HAL_UART_Receive_IT(huart, &rxByte, 1) != HAL_OK) devError |= devUART;
 80057f4:	2201      	movs	r2, #1
 80057f6:	490b      	ldr	r1, [pc, #44]	; (8005824 <HAL_UART_RxCpltCallback+0x62c>)
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	f008 fbe5 	bl	800dfc8 <HAL_UART_Receive_IT>
 80057fe:	4603      	mov	r3, r0
 8005800:	2b00      	cmp	r3, #0
 8005802:	d006      	beq.n	8005812 <HAL_UART_RxCpltCallback+0x61a>
 8005804:	4b08      	ldr	r3, [pc, #32]	; (8005828 <HAL_UART_RxCpltCallback+0x630>)
 8005806:	881b      	ldrh	r3, [r3, #0]
 8005808:	f043 0302 	orr.w	r3, r3, #2
 800580c:	b29a      	uxth	r2, r3
 800580e:	4b06      	ldr	r3, [pc, #24]	; (8005828 <HAL_UART_RxCpltCallback+0x630>)
 8005810:	801a      	strh	r2, [r3, #0]
}
 8005812:	bf00      	nop
 8005814:	373c      	adds	r7, #60	; 0x3c
 8005816:	46bd      	mov	sp, r7
 8005818:	bd90      	pop	{r4, r7, pc}
 800581a:	bf00      	nop
 800581c:	20001bda 	.word	0x20001bda
 8005820:	20001bdc 	.word	0x20001bdc
 8005824:	20001bd8 	.word	0x20001bd8
 8005828:	20001bc8 	.word	0x20001bc8

0800582c <spiDone>:
//-------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------
//    Функция устанавливает в начальное состояние 'готов' служебные параметры порта SPI1:
//
void spiDone(SPI_HandleTypeDef *hspi)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b082      	sub	sp, #8
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
#ifdef SET_W25FLASH
	if (hspi->Instance == SPI2) {
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a0a      	ldr	r2, [pc, #40]	; (8005864 <spiDone+0x38>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d105      	bne.n	800584a <spiDone+0x1e>
		W25_UNSELECT();
 800583e:	f001 fa89 	bl	8006d54 <W25_UNSELECT>
		spiRdy = 1;
 8005842:	4b09      	ldr	r3, [pc, #36]	; (8005868 <spiDone+0x3c>)
 8005844:	2201      	movs	r2, #1
 8005846:	701a      	strb	r2, [r3, #0]
	else
	if (hspi->Instance == SPI1) {
		lcdRdy = 1;
	}
#endif
}
 8005848:	e007      	b.n	800585a <spiDone+0x2e>
	if (hspi->Instance == SPI1) {
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a07      	ldr	r2, [pc, #28]	; (800586c <spiDone+0x40>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d102      	bne.n	800585a <spiDone+0x2e>
		lcdRdy = 1;
 8005854:	4b06      	ldr	r3, [pc, #24]	; (8005870 <spiDone+0x44>)
 8005856:	2201      	movs	r2, #1
 8005858:	701a      	strb	r2, [r3, #0]
}
 800585a:	bf00      	nop
 800585c:	3708      	adds	r7, #8
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}
 8005862:	bf00      	nop
 8005864:	40003800 	.word	0x40003800
 8005868:	200001e4 	.word	0x200001e4
 800586c:	40013000 	.word	0x40013000
 8005870:	20000000 	.word	0x20000000

08005874 <HAL_SPI_RxCpltCallback>:
//-------------------------------------------------------------------------------------------
//    CallBack функция, вызывается по завершении приема данных от порта SPI
//
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b082      	sub	sp, #8
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
	spiDone(hspi);
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	f7ff ffd5 	bl	800582c <spiDone>
}
 8005882:	bf00      	nop
 8005884:	3708      	adds	r7, #8
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}

0800588a <HAL_SPI_TxCpltCallback>:
//-------------------------------------------------------------------------------------------
//    CallBack функция, вызывается по завершении передачи данных в порт SPI
//
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800588a:	b580      	push	{r7, lr}
 800588c:	b082      	sub	sp, #8
 800588e:	af00      	add	r7, sp, #0
 8005890:	6078      	str	r0, [r7, #4]
	spiDone(hspi);
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f7ff ffca 	bl	800582c <spiDone>
}
 8005898:	bf00      	nop
 800589a:	3708      	adds	r7, #8
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}

080058a0 <HAL_SPI_TxRxCpltCallback>:
//-------------------------------------------------------------------------------------------
//    CallBack функция, вызывается по завершении приема/передачи данных порта SPI
//
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b082      	sub	sp, #8
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
	spiDone(hspi);
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	f7ff ffbf 	bl	800582c <spiDone>
}
 80058ae:	bf00      	nop
 80058b0:	3708      	adds	r7, #8
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}
	...

080058b8 <HAL_SPI_ErrorCallback>:
//--------------------------------------------------------------------------------------------
//    CallBack функция, вызывается при возникновении ошибки у модуля SPI
//
void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b082      	sub	sp, #8
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
	spiDone(hspi);
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f7ff ffb3 	bl	800582c <spiDone>
	devError |= devSPI;
 80058c6:	4b05      	ldr	r3, [pc, #20]	; (80058dc <HAL_SPI_ErrorCallback+0x24>)
 80058c8:	881b      	ldrh	r3, [r3, #0]
 80058ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058ce:	b29a      	uxth	r2, r3
 80058d0:	4b02      	ldr	r3, [pc, #8]	; (80058dc <HAL_SPI_ErrorCallback+0x24>)
 80058d2:	801a      	strh	r2, [r3, #0]
}
 80058d4:	bf00      	nop
 80058d6:	3708      	adds	r7, #8
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}
 80058dc:	20001bc8 	.word	0x20001bc8

080058e0 <HAL_I2C_ErrorCallback>:
	}
#endif
}
//--------------------------------------------------------------------------------------------
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b083      	sub	sp, #12
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
#ifdef SET_RDA_CHIP
	if (hi2c->Instance == I2C1) {
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a07      	ldr	r2, [pc, #28]	; (800590c <HAL_I2C_ErrorCallback+0x2c>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d106      	bne.n	8005900 <HAL_I2C_ErrorCallback+0x20>
		devError |= devRDA;
 80058f2:	4b07      	ldr	r3, [pc, #28]	; (8005910 <HAL_I2C_ErrorCallback+0x30>)
 80058f4:	881b      	ldrh	r3, [r3, #0]
 80058f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058fa:	b29a      	uxth	r2, r3
 80058fc:	4b04      	ldr	r3, [pc, #16]	; (8005910 <HAL_I2C_ErrorCallback+0x30>)
 80058fe:	801a      	strh	r2, [r3, #0]
	}
#endif
}
 8005900:	bf00      	nop
 8005902:	370c      	adds	r7, #12
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr
 800590c:	40005400 	.word	0x40005400
 8005910:	20001bc8 	.word	0x20001bc8

08005914 <HAL_GPIO_EXTI_Callback>:
//--------------------------------------------------------------------------------------------
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b082      	sub	sp, #8
 8005918:	af00      	add	r7, sp, #0
 800591a:	4603      	mov	r3, r0
 800591c:	80fb      	strh	r3, [r7, #6]
#ifdef SET_SLEEP
	if (sleep_mode) {
 800591e:	4b1b      	ldr	r3, [pc, #108]	; (800598c <HAL_GPIO_EXTI_Callback+0x78>)
 8005920:	781b      	ldrb	r3, [r3, #0]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d016      	beq.n	8005954 <HAL_GPIO_EXTI_Callback+0x40>
		if ((HAL_GPIO_ReadPin(KEY0_GPIO_Port, KEY0_Pin) == GPIO_PIN_SET) ||
 8005926:	2102      	movs	r1, #2
 8005928:	4819      	ldr	r0, [pc, #100]	; (8005990 <HAL_GPIO_EXTI_Callback+0x7c>)
 800592a:	f002 fdcd 	bl	80084c8 <HAL_GPIO_ReadPin>
 800592e:	4603      	mov	r3, r0
 8005930:	2b01      	cmp	r3, #1
 8005932:	d006      	beq.n	8005942 <HAL_GPIO_EXTI_Callback+0x2e>
				(HAL_GPIO_ReadPin(KEY1_GPIO_Port, KEY1_Pin) == GPIO_PIN_SET)) {
 8005934:	2104      	movs	r1, #4
 8005936:	4816      	ldr	r0, [pc, #88]	; (8005990 <HAL_GPIO_EXTI_Callback+0x7c>)
 8005938:	f002 fdc6 	bl	80084c8 <HAL_GPIO_ReadPin>
 800593c:	4603      	mov	r3, r0
		if ((HAL_GPIO_ReadPin(KEY0_GPIO_Port, KEY0_Pin) == GPIO_PIN_SET) ||
 800593e:	2b01      	cmp	r3, #1
 8005940:	d11f      	bne.n	8005982 <HAL_GPIO_EXTI_Callback+0x6e>
			sleep_mode = false;
 8005942:	4b12      	ldr	r3, [pc, #72]	; (800598c <HAL_GPIO_EXTI_Callback+0x78>)
 8005944:	2200      	movs	r2, #0
 8005946:	701a      	strb	r2, [r3, #0]
			HAL_PWR_DisableSleepOnExit();
 8005948:	f004 fade 	bl	8009f08 <HAL_PWR_DisableSleepOnExit>
			putEvt(cmdExitSleep);
 800594c:	2014      	movs	r0, #20
 800594e:	f7fe fe83 	bl	8004658 <putEvt>
		}
		return;
 8005952:	e016      	b.n	8005982 <HAL_GPIO_EXTI_Callback+0x6e>
	}
#endif
	if ((GPIO_Pin == KEY0_Pin) || (GPIO_Pin == KEY1_Pin)) {
 8005954:	88fb      	ldrh	r3, [r7, #6]
 8005956:	2b02      	cmp	r3, #2
 8005958:	d002      	beq.n	8005960 <HAL_GPIO_EXTI_Callback+0x4c>
 800595a:	88fb      	ldrh	r3, [r7, #6]
 800595c:	2b04      	cmp	r3, #4
 800595e:	d111      	bne.n	8005984 <HAL_GPIO_EXTI_Callback+0x70>
		if (GPIO_Pin == KEY0_Pin) seek_up = 1;
 8005960:	88fb      	ldrh	r3, [r7, #6]
 8005962:	2b02      	cmp	r3, #2
 8005964:	d103      	bne.n	800596e <HAL_GPIO_EXTI_Callback+0x5a>
 8005966:	4b0b      	ldr	r3, [pc, #44]	; (8005994 <HAL_GPIO_EXTI_Callback+0x80>)
 8005968:	2201      	movs	r2, #1
 800596a:	701a      	strb	r2, [r3, #0]
 800596c:	e005      	b.n	800597a <HAL_GPIO_EXTI_Callback+0x66>
		else
		if (GPIO_Pin == KEY1_Pin) seek_up = 0;
 800596e:	88fb      	ldrh	r3, [r7, #6]
 8005970:	2b04      	cmp	r3, #4
 8005972:	d102      	bne.n	800597a <HAL_GPIO_EXTI_Callback+0x66>
 8005974:	4b07      	ldr	r3, [pc, #28]	; (8005994 <HAL_GPIO_EXTI_Callback+0x80>)
 8005976:	2200      	movs	r2, #0
 8005978:	701a      	strb	r2, [r3, #0]
		putEvt(cmdScan);
 800597a:	200b      	movs	r0, #11
 800597c:	f7fe fe6c 	bl	8004658 <putEvt>
 8005980:	e000      	b.n	8005984 <HAL_GPIO_EXTI_Callback+0x70>
		return;
 8005982:	bf00      	nop
	}
}
 8005984:	3708      	adds	r7, #8
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}
 800598a:	bf00      	nop
 800598c:	20003769 	.word	0x20003769
 8005990:	48000800 	.word	0x48000800
 8005994:	200001fe 	.word	0x200001fe

08005998 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800599c:	b672      	cpsid	i
}
 800599e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  devError |= devSYS;
 80059a0:	4b05      	ldr	r3, [pc, #20]	; (80059b8 <Error_Handler+0x20>)
 80059a2:	881b      	ldrh	r3, [r3, #0]
 80059a4:	f043 0320 	orr.w	r3, r3, #32
 80059a8:	b29a      	uxth	r2, r3
 80059aa:	4b03      	ldr	r3, [pc, #12]	; (80059b8 <Error_Handler+0x20>)
 80059ac:	801a      	strh	r2, [r3, #0]
	  errLedOn(true);
 80059ae:	2001      	movs	r0, #1
 80059b0:	f7ff f8c0 	bl	8004b34 <errLedOn>
	  devError |= devSYS;
 80059b4:	e7f4      	b.n	80059a0 <Error_Handler+0x8>
 80059b6:	bf00      	nop
 80059b8:	20001bc8 	.word	0x20001bc8

080059bc <rda5807_init>:

//==============================================================================
// Инициализация rda5807
//==============================================================================
uint8_t rda5807_init(float *freq)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b088      	sub	sp, #32
 80059c0:	af04      	add	r7, sp, #16
 80059c2:	6078      	str	r0, [r7, #4]
uint8_t buf[2] = {0, 0};
 80059c4:	2300      	movs	r3, #0
 80059c6:	813b      	strh	r3, [r7, #8]
uint8_t *id = &buf[0];
 80059c8:	f107 0308 	add.w	r3, r7, #8
 80059cc:	60fb      	str	r3, [r7, #12]

    if (HAL_I2C_Mem_Read(i2cRDA, RDA5807_RandAccess_Addr, 0, I2C_MEMADD_SIZE_8BIT, buf, 2, RDA5807_TO) != HAL_OK) {
 80059ce:	4b30      	ldr	r3, [pc, #192]	; (8005a90 <rda5807_init+0xd4>)
 80059d0:	6818      	ldr	r0, [r3, #0]
 80059d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80059d6:	9302      	str	r3, [sp, #8]
 80059d8:	2302      	movs	r3, #2
 80059da:	9301      	str	r3, [sp, #4]
 80059dc:	f107 0308 	add.w	r3, r7, #8
 80059e0:	9300      	str	r3, [sp, #0]
 80059e2:	2301      	movs	r3, #1
 80059e4:	2200      	movs	r2, #0
 80059e6:	2122      	movs	r1, #34	; 0x22
 80059e8:	f003 f868 	bl	8008abc <HAL_I2C_Mem_Read>
 80059ec:	4603      	mov	r3, r0
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d13c      	bne.n	8005a6c <rda5807_init+0xb0>
    stx[0] = '\0';
    for (int i = 0; i < 64; i++) sprintf(stx+strlen(stx)," %02x", buf11[i]);
    Report(1, "[%s] %s\r\n", __func__, stx);
#endif

    rda5807_SoftReset();
 80059f2:	f000 f927 	bl	8005c44 <rda5807_SoftReset>
    if (devError & devRDA) goto err_out;
 80059f6:	4b27      	ldr	r3, [pc, #156]	; (8005a94 <rda5807_init+0xd8>)
 80059f8:	881b      	ldrh	r3, [r3, #0]
 80059fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d136      	bne.n	8005a70 <rda5807_init+0xb4>

    rda5807_SetupDefault();
 8005a02:	f000 f949 	bl	8005c98 <rda5807_SetupDefault>
    if (devError & devRDA) goto err_out;
 8005a06:	4b23      	ldr	r3, [pc, #140]	; (8005a94 <rda5807_init+0xd8>)
 8005a08:	881b      	ldrh	r3, [r3, #0]
 8005a0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d130      	bne.n	8005a74 <rda5807_init+0xb8>

    uint16_t fr = (uint16_t)(*freq * 10);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	edd3 7a00 	vldr	s15, [r3]
 8005a18:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005a1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005a20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a24:	ee17 3a90 	vmov	r3, s15
 8005a28:	817b      	strh	r3, [r7, #10]
    rda5807_SetFreq_In100Khz(fr);
 8005a2a:	897b      	ldrh	r3, [r7, #10]
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f000 fa79 	bl	8005f24 <rda5807_SetFreq_In100Khz>
    //
    HAL_Delay(200);
 8005a32:	20c8      	movs	r0, #200	; 0xc8
 8005a34:	f001 ff92 	bl	800795c <HAL_Delay>
    //
    *freq = (float)rda5807_GetFreq_In100Khz();
 8005a38:	f000 faee 	bl	8006018 <rda5807_GetFreq_In100Khz>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	ee07 3a90 	vmov	s15, r3
 8005a42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	edc3 7a00 	vstr	s15, [r3]
    *freq /= 10;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	ed93 7a00 	vldr	s14, [r3]
 8005a52:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8005a56:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	edc3 7a00 	vstr	s15, [r3]
#ifdef SET_RDA_DEBUG
    Report(1, "[%s] Freq: %.2f\r\n", __func__, *freq);//rda5807_GetFreq_In100Khz());
#endif

    HAL_Delay(100);
 8005a60:	2064      	movs	r0, #100	; 0x64
 8005a62:	f001 ff7b 	bl	800795c <HAL_Delay>

    return *id;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	781b      	ldrb	r3, [r3, #0]
 8005a6a:	e00d      	b.n	8005a88 <rda5807_init+0xcc>
    	goto err_out;
 8005a6c:	bf00      	nop
 8005a6e:	e002      	b.n	8005a76 <rda5807_init+0xba>
    if (devError & devRDA) goto err_out;
 8005a70:	bf00      	nop
 8005a72:	e000      	b.n	8005a76 <rda5807_init+0xba>
    if (devError & devRDA) goto err_out;
 8005a74:	bf00      	nop

err_out:
	devError |= devRDA;
 8005a76:	4b07      	ldr	r3, [pc, #28]	; (8005a94 <rda5807_init+0xd8>)
 8005a78:	881b      	ldrh	r3, [r3, #0]
 8005a7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a7e:	b29a      	uxth	r2, r3
 8005a80:	4b04      	ldr	r3, [pc, #16]	; (8005a94 <rda5807_init+0xd8>)
 8005a82:	801a      	strh	r2, [r3, #0]
    return *id;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	781b      	ldrb	r3, [r3, #0]
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	3710      	adds	r7, #16
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}
 8005a90:	20000224 	.word	0x20000224
 8005a94:	20001bc8 	.word	0x20001bc8

08005a98 <rda5807_rssi>:
//==============================================================================
uint16_t rda5807_rssi()
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b082      	sub	sp, #8
 8005a9c:	af00      	add	r7, sp, #0
uint16_t word = 0;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	80fb      	strh	r3, [r7, #6]

    rda5807_read(0x0B, &word, 1);
 8005aa2:	1dbb      	adds	r3, r7, #6
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	4619      	mov	r1, r3
 8005aa8:	200b      	movs	r0, #11
 8005aaa:	f000 f85d 	bl	8005b68 <rda5807_read>

    return (word >> 9);
 8005aae:	88fb      	ldrh	r3, [r7, #6]
 8005ab0:	0a5b      	lsrs	r3, r3, #9
 8005ab2:	b29b      	uxth	r3, r3
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3708      	adds	r7, #8
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}

08005abc <rda5807_bytes_change>:

//==============================================================================
// Процедура меняет местами байты попарно в буфере pBuff 
//==============================================================================
void rda5807_bytes_change(uint8_t *pBuff, uint8_t count)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b085      	sub	sp, #20
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	460b      	mov	r3, r1
 8005ac6:	70fb      	strb	r3, [r7, #3]
    while (count > 1) {    // Если осталась хотя бы пара байт
 8005ac8:	e010      	b.n	8005aec <rda5807_bytes_change+0x30>
        uint8_t Temp = *(pBuff + 1);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	785b      	ldrb	r3, [r3, #1]
 8005ace:	73fb      	strb	r3, [r7, #15]
        *(pBuff + 1) = *pBuff;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	3301      	adds	r3, #1
 8005ad4:	687a      	ldr	r2, [r7, #4]
 8005ad6:	7812      	ldrb	r2, [r2, #0]
 8005ad8:	701a      	strb	r2, [r3, #0]
        *pBuff = Temp;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	7bfa      	ldrb	r2, [r7, #15]
 8005ade:	701a      	strb	r2, [r3, #0]
        pBuff += 2;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	3302      	adds	r3, #2
 8005ae4:	607b      	str	r3, [r7, #4]
        count -= 2;
 8005ae6:	78fb      	ldrb	r3, [r7, #3]
 8005ae8:	3b02      	subs	r3, #2
 8005aea:	70fb      	strb	r3, [r7, #3]
    while (count > 1) {    // Если осталась хотя бы пара байт
 8005aec:	78fb      	ldrb	r3, [r7, #3]
 8005aee:	2b01      	cmp	r3, #1
 8005af0:	d8eb      	bhi.n	8005aca <rda5807_bytes_change+0xe>
    }
}
 8005af2:	bf00      	nop
 8005af4:	bf00      	nop
 8005af6:	3714      	adds	r7, #20
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr

08005b00 <rda5807_write_regfile>:
//==============================================================================
// Процедура пишет в rda5807 группу регистров (кол-во RegNum) начиная с 0x02
// Используется I2C-адрес RDA5807_SeqAccess_Addr
//==============================================================================
void rda5807_write_regfile(uint16_t *pBuff, uint8_t RegNum)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b084      	sub	sp, #16
 8005b04:	af02      	add	r7, sp, #8
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	460b      	mov	r3, r1
 8005b0a:	70fb      	strb	r3, [r7, #3]
    err = i2cm_Start(I2Cx, RDA5807_SeqAccess_Addr, 0, RDA5807_TO);
    if (err) {
        Error_Handler();
    } //*/

    rda5807_bytes_change((uint8_t *)pBuff, RegNum << 1);
 8005b0c:	78fb      	ldrb	r3, [r7, #3]
 8005b0e:	005b      	lsls	r3, r3, #1
 8005b10:	b2db      	uxtb	r3, r3
 8005b12:	4619      	mov	r1, r3
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	f7ff ffd1 	bl	8005abc <rda5807_bytes_change>

//    err = i2cm_WriteBuff(I2Cx, (uint8_t *) pBuff, RegNum << 1, RDA5807_TO);
//    i2cm_Stop(I2Cx, RDA5807_TO);

    if (HAL_I2C_Master_Transmit(i2cRDA, (uint16_t)RDA5807_SeqAccess_Addr, (uint8_t *)pBuff, RegNum << 1, RDA5807_TO) != HAL_OK) {
 8005b1a:	4b11      	ldr	r3, [pc, #68]	; (8005b60 <rda5807_write_regfile+0x60>)
 8005b1c:	6818      	ldr	r0, [r3, #0]
 8005b1e:	78fb      	ldrb	r3, [r7, #3]
 8005b20:	b29b      	uxth	r3, r3
 8005b22:	005b      	lsls	r3, r3, #1
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005b2a:	9200      	str	r2, [sp, #0]
 8005b2c:	687a      	ldr	r2, [r7, #4]
 8005b2e:	2120      	movs	r1, #32
 8005b30:	f002 fdbc 	bl	80086ac <HAL_I2C_Master_Transmit>
 8005b34:	4603      	mov	r3, r0
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d006      	beq.n	8005b48 <rda5807_write_regfile+0x48>
    	devError |= devRDA;
 8005b3a:	4b0a      	ldr	r3, [pc, #40]	; (8005b64 <rda5807_write_regfile+0x64>)
 8005b3c:	881b      	ldrh	r3, [r3, #0]
 8005b3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b42:	b29a      	uxth	r2, r3
 8005b44:	4b07      	ldr	r3, [pc, #28]	; (8005b64 <rda5807_write_regfile+0x64>)
 8005b46:	801a      	strh	r2, [r3, #0]
    }

    rda5807_bytes_change((uint8_t *)pBuff, RegNum << 1);
 8005b48:	78fb      	ldrb	r3, [r7, #3]
 8005b4a:	005b      	lsls	r3, r3, #1
 8005b4c:	b2db      	uxtb	r3, r3
 8005b4e:	4619      	mov	r1, r3
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f7ff ffb3 	bl	8005abc <rda5807_bytes_change>
}
 8005b56:	bf00      	nop
 8005b58:	3708      	adds	r7, #8
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}
 8005b5e:	bf00      	nop
 8005b60:	20000224 	.word	0x20000224
 8005b64:	20001bc8 	.word	0x20001bc8

08005b68 <rda5807_read>:
//==============================================================================
// Процедура читает из rda5807 группу регистров (кол-во RegNum) начиная с RegAddr
// Используется I2C-адрес RDA5807_RandAccess_Addr (для режима совместимости с rda5800)
//==============================================================================
void rda5807_read(uint8_t RegAddr, uint16_t *pBuff, uint8_t RegNum)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b086      	sub	sp, #24
 8005b6c:	af04      	add	r7, sp, #16
 8005b6e:	4603      	mov	r3, r0
 8005b70:	6039      	str	r1, [r7, #0]
 8005b72:	71fb      	strb	r3, [r7, #7]
 8005b74:	4613      	mov	r3, r2
 8005b76:	71bb      	strb	r3, [r7, #6]
        Error_Handler();
    }
    // Читаем
    i2cm_ReadBuffAndStop(I2Cx, (uint8_t *) pBuff, RegNum << 1, RDA5807_TO); //*/

    if (HAL_I2C_Mem_Read(i2cRDA, RDA5807_RandAccess_Addr,
 8005b78:	4b13      	ldr	r3, [pc, #76]	; (8005bc8 <rda5807_read+0x60>)
 8005b7a:	6818      	ldr	r0, [r3, #0]
 8005b7c:	79fb      	ldrb	r3, [r7, #7]
 8005b7e:	b29a      	uxth	r2, r3
 8005b80:	79bb      	ldrb	r3, [r7, #6]
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	005b      	lsls	r3, r3, #1
 8005b86:	b29b      	uxth	r3, r3
 8005b88:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005b8c:	9102      	str	r1, [sp, #8]
 8005b8e:	9301      	str	r3, [sp, #4]
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	9300      	str	r3, [sp, #0]
 8005b94:	2301      	movs	r3, #1
 8005b96:	2122      	movs	r1, #34	; 0x22
 8005b98:	f002 ff90 	bl	8008abc <HAL_I2C_Mem_Read>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d006      	beq.n	8005bb0 <rda5807_read+0x48>
    				     RegAddr, I2C_MEMADD_SIZE_8BIT,
						 (uint8_t *)pBuff, RegNum << 1,
						 RDA5807_TO) != HAL_OK) {
    	devError |= devRDA;
 8005ba2:	4b0a      	ldr	r3, [pc, #40]	; (8005bcc <rda5807_read+0x64>)
 8005ba4:	881b      	ldrh	r3, [r3, #0]
 8005ba6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005baa:	b29a      	uxth	r2, r3
 8005bac:	4b07      	ldr	r3, [pc, #28]	; (8005bcc <rda5807_read+0x64>)
 8005bae:	801a      	strh	r2, [r3, #0]
    }

    rda5807_bytes_change((uint8_t *)pBuff, RegNum << 1);
 8005bb0:	79bb      	ldrb	r3, [r7, #6]
 8005bb2:	005b      	lsls	r3, r3, #1
 8005bb4:	b2db      	uxtb	r3, r3
 8005bb6:	4619      	mov	r1, r3
 8005bb8:	6838      	ldr	r0, [r7, #0]
 8005bba:	f7ff ff7f 	bl	8005abc <rda5807_bytes_change>
}
 8005bbe:	bf00      	nop
 8005bc0:	3708      	adds	r7, #8
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}
 8005bc6:	bf00      	nop
 8005bc8:	20000224 	.word	0x20000224
 8005bcc:	20001bc8 	.word	0x20001bc8

08005bd0 <rda5807_write>:
//==============================================================================
// Процедура пишет в rda5807 группу регистров (кол-во RegNum) начиная с RegAddr
// Используется I2C-адрес RDA5807_RandAccess_Addr (для режима совместимости с rda5800)
//==============================================================================
void rda5807_write(uint8_t RegAddr, uint16_t *pBuff, uint8_t RegNum)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b086      	sub	sp, #24
 8005bd4:	af04      	add	r7, sp, #16
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	6039      	str	r1, [r7, #0]
 8005bda:	71fb      	strb	r3, [r7, #7]
 8005bdc:	4613      	mov	r3, r2
 8005bde:	71bb      	strb	r3, [r7, #6]

    if (i2cm_WriteBuff(I2Cx, &RegAddr, 1, RDA5807_TO)) {
        Error_Handler();
    } //*/

    rda5807_bytes_change((uint8_t *)pBuff, RegNum << 1);
 8005be0:	79bb      	ldrb	r3, [r7, #6]
 8005be2:	005b      	lsls	r3, r3, #1
 8005be4:	b2db      	uxtb	r3, r3
 8005be6:	4619      	mov	r1, r3
 8005be8:	6838      	ldr	r0, [r7, #0]
 8005bea:	f7ff ff67 	bl	8005abc <rda5807_bytes_change>

    //err = i2cm_WriteBuff(I2Cx, (uint8_t *) pBuff, RegNum << 1, RDA5807_TO);
    //i2cm_Stop(I2Cx, RDA5807_TO);

    if (HAL_I2C_Mem_Write(i2cRDA,
 8005bee:	4b13      	ldr	r3, [pc, #76]	; (8005c3c <rda5807_write+0x6c>)
 8005bf0:	6818      	ldr	r0, [r3, #0]
 8005bf2:	79fb      	ldrb	r3, [r7, #7]
 8005bf4:	b29a      	uxth	r2, r3
 8005bf6:	79bb      	ldrb	r3, [r7, #6]
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	005b      	lsls	r3, r3, #1
 8005bfc:	b29b      	uxth	r3, r3
 8005bfe:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005c02:	9102      	str	r1, [sp, #8]
 8005c04:	9301      	str	r3, [sp, #4]
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	9300      	str	r3, [sp, #0]
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	2122      	movs	r1, #34	; 0x22
 8005c0e:	f002 fe41 	bl	8008894 <HAL_I2C_Mem_Write>
 8005c12:	4603      	mov	r3, r0
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d006      	beq.n	8005c26 <rda5807_write+0x56>
    					  RDA5807_RandAccess_Addr,
						  RegAddr, I2C_MEMADD_SIZE_8BIT,
						  (uint8_t *)pBuff, RegNum << 1,
						  RDA5807_TO) != HAL_OK) {
    	devError |= devRDA;
 8005c18:	4b09      	ldr	r3, [pc, #36]	; (8005c40 <rda5807_write+0x70>)
 8005c1a:	881b      	ldrh	r3, [r3, #0]
 8005c1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c20:	b29a      	uxth	r2, r3
 8005c22:	4b07      	ldr	r3, [pc, #28]	; (8005c40 <rda5807_write+0x70>)
 8005c24:	801a      	strh	r2, [r3, #0]
    }

    rda5807_bytes_change((uint8_t *)pBuff, RegNum << 1);
 8005c26:	79bb      	ldrb	r3, [r7, #6]
 8005c28:	005b      	lsls	r3, r3, #1
 8005c2a:	b2db      	uxtb	r3, r3
 8005c2c:	4619      	mov	r1, r3
 8005c2e:	6838      	ldr	r0, [r7, #0]
 8005c30:	f7ff ff44 	bl	8005abc <rda5807_bytes_change>
}
 8005c34:	bf00      	nop
 8005c36:	3708      	adds	r7, #8
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bd80      	pop	{r7, pc}
 8005c3c:	20000224 	.word	0x20000224
 8005c40:	20001bc8 	.word	0x20001bc8

08005c44 <rda5807_SoftReset>:

//==============================================================================
// Процедура делает программный сброс rda5807
//==============================================================================
void rda5807_SoftReset()
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b082      	sub	sp, #8
 8005c48:	af00      	add	r7, sp, #0
tReg02h reg02;

    rda5807_read(2, (uint16_t *)&reg02, 1);
 8005c4a:	1d3b      	adds	r3, r7, #4
 8005c4c:	2201      	movs	r2, #1
 8005c4e:	4619      	mov	r1, r3
 8005c50:	2002      	movs	r0, #2
 8005c52:	f7ff ff89 	bl	8005b68 <rda5807_read>

	reg02.bENABLE = 1;
 8005c56:	793b      	ldrb	r3, [r7, #4]
 8005c58:	f043 0301 	orr.w	r3, r3, #1
 8005c5c:	713b      	strb	r3, [r7, #4]
	reg02.bSOFT_RESET = 1;
 8005c5e:	793b      	ldrb	r3, [r7, #4]
 8005c60:	f043 0302 	orr.w	r3, r3, #2
 8005c64:	713b      	strb	r3, [r7, #4]
    rda5807_write(2, (uint16_t *)&reg02, 1);
 8005c66:	1d3b      	adds	r3, r7, #4
 8005c68:	2201      	movs	r2, #1
 8005c6a:	4619      	mov	r1, r3
 8005c6c:	2002      	movs	r0, #2
 8005c6e:	f7ff ffaf 	bl	8005bd0 <rda5807_write>

    reg02.bENABLE = 1;
 8005c72:	793b      	ldrb	r3, [r7, #4]
 8005c74:	f043 0301 	orr.w	r3, r3, #1
 8005c78:	713b      	strb	r3, [r7, #4]
    reg02.bSOFT_RESET = 0;
 8005c7a:	793b      	ldrb	r3, [r7, #4]
 8005c7c:	f36f 0341 	bfc	r3, #1, #1
 8005c80:	713b      	strb	r3, [r7, #4]
    rda5807_write(2, (uint16_t *)&reg02, 1);
 8005c82:	1d3b      	adds	r3, r7, #4
 8005c84:	2201      	movs	r2, #1
 8005c86:	4619      	mov	r1, r3
 8005c88:	2002      	movs	r0, #2
 8005c8a:	f7ff ffa1 	bl	8005bd0 <rda5807_write>
}
 8005c8e:	bf00      	nop
 8005c90:	3708      	adds	r7, #8
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}
	...

08005c98 <rda5807_SetupDefault>:

//==============================================================================
// Процедура производит начальную настройку rda5807
//==============================================================================
void rda5807_SetupDefault()
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	af00      	add	r7, sp, #0
	tReg06h Reg06;
	tReg07h Reg07;
} Buffs;*/

    // Регистр 0x02
    Buffs.Reg02.bENABLE = 1;
 8005c9c:	4a6b      	ldr	r2, [pc, #428]	; (8005e4c <rda5807_SetupDefault+0x1b4>)
 8005c9e:	7813      	ldrb	r3, [r2, #0]
 8005ca0:	f043 0301 	orr.w	r3, r3, #1
 8005ca4:	7013      	strb	r3, [r2, #0]
    Buffs.Reg02.bSOFT_RESET = 0;
 8005ca6:	4a69      	ldr	r2, [pc, #420]	; (8005e4c <rda5807_SetupDefault+0x1b4>)
 8005ca8:	7813      	ldrb	r3, [r2, #0]
 8005caa:	f36f 0341 	bfc	r3, #1, #1
 8005cae:	7013      	strb	r3, [r2, #0]
    Buffs.Reg02.bNEW_METHOD = 1;
 8005cb0:	4a66      	ldr	r2, [pc, #408]	; (8005e4c <rda5807_SetupDefault+0x1b4>)
 8005cb2:	7813      	ldrb	r3, [r2, #0]
 8005cb4:	f043 0304 	orr.w	r3, r3, #4
 8005cb8:	7013      	strb	r3, [r2, #0]
    Buffs.Reg02.bRDS_EN = 1;
 8005cba:	4a64      	ldr	r2, [pc, #400]	; (8005e4c <rda5807_SetupDefault+0x1b4>)
 8005cbc:	7813      	ldrb	r3, [r2, #0]
 8005cbe:	f043 0308 	orr.w	r3, r3, #8
 8005cc2:	7013      	strb	r3, [r2, #0]
    Buffs.Reg02.bCLK_MODE = 0;        // 32.768
 8005cc4:	4a61      	ldr	r2, [pc, #388]	; (8005e4c <rda5807_SetupDefault+0x1b4>)
 8005cc6:	7813      	ldrb	r3, [r2, #0]
 8005cc8:	f36f 1306 	bfc	r3, #4, #3
 8005ccc:	7013      	strb	r3, [r2, #0]
    Buffs.Reg02.bSKMODE = 0;
 8005cce:	4a5f      	ldr	r2, [pc, #380]	; (8005e4c <rda5807_SetupDefault+0x1b4>)
 8005cd0:	7813      	ldrb	r3, [r2, #0]
 8005cd2:	f36f 13c7 	bfc	r3, #7, #1
 8005cd6:	7013      	strb	r3, [r2, #0]
    Buffs.Reg02.bSEEK = 0;
 8005cd8:	4a5c      	ldr	r2, [pc, #368]	; (8005e4c <rda5807_SetupDefault+0x1b4>)
 8005cda:	7853      	ldrb	r3, [r2, #1]
 8005cdc:	f36f 0300 	bfc	r3, #0, #1
 8005ce0:	7053      	strb	r3, [r2, #1]
    Buffs.Reg02.bSEEKUP = 1;
 8005ce2:	4a5a      	ldr	r2, [pc, #360]	; (8005e4c <rda5807_SetupDefault+0x1b4>)
 8005ce4:	7853      	ldrb	r3, [r2, #1]
 8005ce6:	f043 0302 	orr.w	r3, r3, #2
 8005cea:	7053      	strb	r3, [r2, #1]
    Buffs.Reg02.bRCLK_DirectInput = 0;
 8005cec:	4a57      	ldr	r2, [pc, #348]	; (8005e4c <rda5807_SetupDefault+0x1b4>)
 8005cee:	7853      	ldrb	r3, [r2, #1]
 8005cf0:	f36f 0382 	bfc	r3, #2, #1
 8005cf4:	7053      	strb	r3, [r2, #1]
    Buffs.Reg02.bRCLK_NonCalibMode = 0;
 8005cf6:	4a55      	ldr	r2, [pc, #340]	; (8005e4c <rda5807_SetupDefault+0x1b4>)
 8005cf8:	7853      	ldrb	r3, [r2, #1]
 8005cfa:	f36f 03c3 	bfc	r3, #3, #1
 8005cfe:	7053      	strb	r3, [r2, #1]
    Buffs.Reg02.bBASS = 0;
 8005d00:	4a52      	ldr	r2, [pc, #328]	; (8005e4c <rda5807_SetupDefault+0x1b4>)
 8005d02:	7853      	ldrb	r3, [r2, #1]
 8005d04:	f36f 1304 	bfc	r3, #4, #1
 8005d08:	7053      	strb	r3, [r2, #1]
    Buffs.Reg02.bMONO = 0;
 8005d0a:	4a50      	ldr	r2, [pc, #320]	; (8005e4c <rda5807_SetupDefault+0x1b4>)
 8005d0c:	7853      	ldrb	r3, [r2, #1]
 8005d0e:	f36f 1345 	bfc	r3, #5, #1
 8005d12:	7053      	strb	r3, [r2, #1]
    Buffs.Reg02.bDMUTE = 1;
 8005d14:	4a4d      	ldr	r2, [pc, #308]	; (8005e4c <rda5807_SetupDefault+0x1b4>)
 8005d16:	7853      	ldrb	r3, [r2, #1]
 8005d18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d1c:	7053      	strb	r3, [r2, #1]
    Buffs.Reg02.bDHIZ = 1;
 8005d1e:	4a4b      	ldr	r2, [pc, #300]	; (8005e4c <rda5807_SetupDefault+0x1b4>)
 8005d20:	7853      	ldrb	r3, [r2, #1]
 8005d22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d26:	7053      	strb	r3, [r2, #1]
    // Регистр 0x03
    Buffs.Reg03.bSPACE = 0;//Step;//0;   // Шаг настройки - 0 = 100 КГц
 8005d28:	4a48      	ldr	r2, [pc, #288]	; (8005e4c <rda5807_SetupDefault+0x1b4>)
 8005d2a:	7893      	ldrb	r3, [r2, #2]
 8005d2c:	f36f 0301 	bfc	r3, #0, #2
 8005d30:	7093      	strb	r3, [r2, #2]
    Buffs.Reg03.bBAND = Band;//2;//0;    // Диапазон 2 - 76–108 MHz
 8005d32:	4b47      	ldr	r3, [pc, #284]	; (8005e50 <rda5807_SetupDefault+0x1b8>)
 8005d34:	781b      	ldrb	r3, [r3, #0]
 8005d36:	f003 0303 	and.w	r3, r3, #3
 8005d3a:	b2d9      	uxtb	r1, r3
 8005d3c:	4a43      	ldr	r2, [pc, #268]	; (8005e4c <rda5807_SetupDefault+0x1b4>)
 8005d3e:	7893      	ldrb	r3, [r2, #2]
 8005d40:	f361 0383 	bfi	r3, r1, #2, #2
 8005d44:	7093      	strb	r3, [r2, #2]
    Buffs.Reg03.bTUNE = 1;
 8005d46:	4a41      	ldr	r2, [pc, #260]	; (8005e4c <rda5807_SetupDefault+0x1b4>)
 8005d48:	7893      	ldrb	r3, [r2, #2]
 8005d4a:	f043 0310 	orr.w	r3, r3, #16
 8005d4e:	7093      	strb	r3, [r2, #2]
    Buffs.Reg03.bDIRECT_MODE = 0;
 8005d50:	4a3e      	ldr	r2, [pc, #248]	; (8005e4c <rda5807_SetupDefault+0x1b4>)
 8005d52:	7893      	ldrb	r3, [r2, #2]
 8005d54:	f36f 1345 	bfc	r3, #5, #1
 8005d58:	7093      	strb	r3, [r2, #2]
    Buffs.Reg03.bCHAN = 0;
 8005d5a:	4a3c      	ldr	r2, [pc, #240]	; (8005e4c <rda5807_SetupDefault+0x1b4>)
 8005d5c:	8853      	ldrh	r3, [r2, #2]
 8005d5e:	f36f 138f 	bfc	r3, #6, #10
 8005d62:	8053      	strh	r3, [r2, #2]
    // Регистр 0x04
    Buffs.Reg04.bRSVD1 = 0;
 8005d64:	4b39      	ldr	r3, [pc, #228]	; (8005e4c <rda5807_SetupDefault+0x1b4>)
 8005d66:	2200      	movs	r2, #0
 8005d68:	711a      	strb	r2, [r3, #4]
    Buffs.Reg04.bAFCD = 0;
 8005d6a:	4a38      	ldr	r2, [pc, #224]	; (8005e4c <rda5807_SetupDefault+0x1b4>)
 8005d6c:	7953      	ldrb	r3, [r2, #5]
 8005d6e:	f36f 0300 	bfc	r3, #0, #1
 8005d72:	7153      	strb	r3, [r2, #5]
    Buffs.Reg04.bSOFTMUTE_EN = 1;
 8005d74:	4a35      	ldr	r2, [pc, #212]	; (8005e4c <rda5807_SetupDefault+0x1b4>)
 8005d76:	7953      	ldrb	r3, [r2, #5]
 8005d78:	f043 0302 	orr.w	r3, r3, #2
 8005d7c:	7153      	strb	r3, [r2, #5]
    Buffs.Reg04.bRSVD2 = 0;
 8005d7e:	4a33      	ldr	r2, [pc, #204]	; (8005e4c <rda5807_SetupDefault+0x1b4>)
 8005d80:	7953      	ldrb	r3, [r2, #5]
 8005d82:	f36f 0382 	bfc	r3, #2, #1
 8005d86:	7153      	strb	r3, [r2, #5]
    Buffs.Reg04.bDE = 0;
 8005d88:	4a30      	ldr	r2, [pc, #192]	; (8005e4c <rda5807_SetupDefault+0x1b4>)
 8005d8a:	7953      	ldrb	r3, [r2, #5]
 8005d8c:	f36f 03c3 	bfc	r3, #3, #1
 8005d90:	7153      	strb	r3, [r2, #5]
    Buffs.Reg04.bRSVD3 = 0;
 8005d92:	4a2e      	ldr	r2, [pc, #184]	; (8005e4c <rda5807_SetupDefault+0x1b4>)
 8005d94:	7953      	ldrb	r3, [r2, #5]
 8005d96:	f36f 1307 	bfc	r3, #4, #4
 8005d9a:	7153      	strb	r3, [r2, #5]
    // Регистр 0x05
    Buffs.Reg05.bVOLUME = 0;
 8005d9c:	4a2b      	ldr	r2, [pc, #172]	; (8005e4c <rda5807_SetupDefault+0x1b4>)
 8005d9e:	7993      	ldrb	r3, [r2, #6]
 8005da0:	f36f 0303 	bfc	r3, #0, #4
 8005da4:	7193      	strb	r3, [r2, #6]
    Buffs.Reg05.bANT_GAIN = 0;
 8005da6:	4a29      	ldr	r2, [pc, #164]	; (8005e4c <rda5807_SetupDefault+0x1b4>)
 8005da8:	7993      	ldrb	r3, [r2, #6]
 8005daa:	f36f 1305 	bfc	r3, #4, #2
 8005dae:	7193      	strb	r3, [r2, #6]
    Buffs.Reg05.bANT_TYPE = ANT_TYPE_Both;//ANT_TYPE_External;//ANT_TYPE_Headphones;//ANT_TYPE_Both;
 8005db0:	4a26      	ldr	r2, [pc, #152]	; (8005e4c <rda5807_SetupDefault+0x1b4>)
 8005db2:	7993      	ldrb	r3, [r2, #6]
 8005db4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005db8:	7193      	strb	r3, [r2, #6]
    Buffs.Reg05.bSEEKTH = 8;
 8005dba:	4a24      	ldr	r2, [pc, #144]	; (8005e4c <rda5807_SetupDefault+0x1b4>)
 8005dbc:	79d3      	ldrb	r3, [r2, #7]
 8005dbe:	2108      	movs	r1, #8
 8005dc0:	f361 0303 	bfi	r3, r1, #0, #4
 8005dc4:	71d3      	strb	r3, [r2, #7]
    Buffs.Reg05.bRSVD3 = 0;
 8005dc6:	4a21      	ldr	r2, [pc, #132]	; (8005e4c <rda5807_SetupDefault+0x1b4>)
 8005dc8:	79d3      	ldrb	r3, [r2, #7]
 8005dca:	f36f 1306 	bfc	r3, #4, #3
 8005dce:	71d3      	strb	r3, [r2, #7]
    Buffs.Reg05.bINT_MODE = 1;
 8005dd0:	4a1e      	ldr	r2, [pc, #120]	; (8005e4c <rda5807_SetupDefault+0x1b4>)
 8005dd2:	79d3      	ldrb	r3, [r2, #7]
 8005dd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dd8:	71d3      	strb	r3, [r2, #7]
    // Регистр 0x06
    Buffs.Reg06.bRSVD1 = 0;
 8005dda:	4a1c      	ldr	r2, [pc, #112]	; (8005e4c <rda5807_SetupDefault+0x1b4>)
 8005ddc:	8913      	ldrh	r3, [r2, #8]
 8005dde:	f36f 030c 	bfc	r3, #0, #13
 8005de2:	8113      	strh	r3, [r2, #8]
    Buffs.Reg06.bOPEN_MODE = 0;
 8005de4:	4a19      	ldr	r2, [pc, #100]	; (8005e4c <rda5807_SetupDefault+0x1b4>)
 8005de6:	7a53      	ldrb	r3, [r2, #9]
 8005de8:	f36f 1346 	bfc	r3, #5, #2
 8005dec:	7253      	strb	r3, [r2, #9]
    Buffs.Reg06.bRSVD2 = 0;
 8005dee:	4a17      	ldr	r2, [pc, #92]	; (8005e4c <rda5807_SetupDefault+0x1b4>)
 8005df0:	7a53      	ldrb	r3, [r2, #9]
 8005df2:	f36f 13c7 	bfc	r3, #7, #1
 8005df6:	7253      	strb	r3, [r2, #9]
    // Регистр 0x07
    Buffs.Reg07.bFREQ_MODE = 0;
 8005df8:	4a14      	ldr	r2, [pc, #80]	; (8005e4c <rda5807_SetupDefault+0x1b4>)
 8005dfa:	7a93      	ldrb	r3, [r2, #10]
 8005dfc:	f36f 0300 	bfc	r3, #0, #1
 8005e00:	7293      	strb	r3, [r2, #10]
    Buffs.Reg07.bSOFTBLEND_EN = 1;
 8005e02:	4a12      	ldr	r2, [pc, #72]	; (8005e4c <rda5807_SetupDefault+0x1b4>)
 8005e04:	7a93      	ldrb	r3, [r2, #10]
 8005e06:	f043 0302 	orr.w	r3, r3, #2
 8005e0a:	7293      	strb	r3, [r2, #10]
    Buffs.Reg07.bSEEK_TH_OLD = 0;
 8005e0c:	4a0f      	ldr	r2, [pc, #60]	; (8005e4c <rda5807_SetupDefault+0x1b4>)
 8005e0e:	7a93      	ldrb	r3, [r2, #10]
 8005e10:	f36f 0387 	bfc	r3, #2, #6
 8005e14:	7293      	strb	r3, [r2, #10]
    Buffs.Reg07.bRSVD1 = 0;
 8005e16:	4a0d      	ldr	r2, [pc, #52]	; (8005e4c <rda5807_SetupDefault+0x1b4>)
 8005e18:	7ad3      	ldrb	r3, [r2, #11]
 8005e1a:	f36f 0300 	bfc	r3, #0, #1
 8005e1e:	72d3      	strb	r3, [r2, #11]
    Buffs.Reg07.b65M_50M_MODE = 1;
 8005e20:	4a0a      	ldr	r2, [pc, #40]	; (8005e4c <rda5807_SetupDefault+0x1b4>)
 8005e22:	7ad3      	ldrb	r3, [r2, #11]
 8005e24:	f043 0302 	orr.w	r3, r3, #2
 8005e28:	72d3      	strb	r3, [r2, #11]
    Buffs.Reg07.bTH_SOFRBLEND = 16;
 8005e2a:	4a08      	ldr	r2, [pc, #32]	; (8005e4c <rda5807_SetupDefault+0x1b4>)
 8005e2c:	7ad3      	ldrb	r3, [r2, #11]
 8005e2e:	2110      	movs	r1, #16
 8005e30:	f361 0386 	bfi	r3, r1, #2, #5
 8005e34:	72d3      	strb	r3, [r2, #11]
    Buffs.Reg07.bRSVD2 = 0;
 8005e36:	4a05      	ldr	r2, [pc, #20]	; (8005e4c <rda5807_SetupDefault+0x1b4>)
 8005e38:	7ad3      	ldrb	r3, [r2, #11]
 8005e3a:	f36f 13c7 	bfc	r3, #7, #1
 8005e3e:	72d3      	strb	r3, [r2, #11]

    // Пишем регистры функцией записи регистрового файла
    rda5807_write_regfile((uint16_t *)&(Buffs.Reg02), 6);
 8005e40:	2106      	movs	r1, #6
 8005e42:	4802      	ldr	r0, [pc, #8]	; (8005e4c <rda5807_SetupDefault+0x1b4>)
 8005e44:	f7ff fe5c 	bl	8005b00 <rda5807_write_regfile>
}
 8005e48:	bf00      	nop
 8005e4a:	bd80      	pop	{r7, pc}
 8005e4c:	20003794 	.word	0x20003794
 8005e50:	200001fc 	.word	0x200001fc

08005e54 <rda5807_SetVolume>:

//==============================================================================
// Процедура устанавливает уровень громкости (0..16) выхода rda5807. При Value=0 включает MUTE
//==============================================================================
void rda5807_SetVolume(uint8_t Value)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b084      	sub	sp, #16
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	71fb      	strb	r3, [r7, #7]
//tReg02h Reg02;
//tReg05h Reg05;
uint8_t Mute = Value ? 0 : 1;
 8005e5e:	79fb      	ldrb	r3, [r7, #7]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	bf0c      	ite	eq
 8005e64:	2301      	moveq	r3, #1
 8005e66:	2300      	movne	r3, #0
 8005e68:	b2db      	uxtb	r3, r3
 8005e6a:	73fb      	strb	r3, [r7, #15]

    if (Value > 16) Value = 16;
 8005e6c:	79fb      	ldrb	r3, [r7, #7]
 8005e6e:	2b10      	cmp	r3, #16
 8005e70:	d901      	bls.n	8005e76 <rda5807_SetVolume+0x22>
 8005e72:	2310      	movs	r3, #16
 8005e74:	71fb      	strb	r3, [r7, #7]

    Value--;    // Значение для поля Volume на 1 меньше, чем входной параметр функции
 8005e76:	79fb      	ldrb	r3, [r7, #7]
 8005e78:	3b01      	subs	r3, #1
 8005e7a:	71fb      	strb	r3, [r7, #7]

    if (!Mute) {
 8005e7c:	7bfb      	ldrb	r3, [r7, #15]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d112      	bne.n	8005ea8 <rda5807_SetVolume+0x54>
        // Читаем регистр 0x05
        rda5807_read(5, (uint16_t *)&Buffs.Reg05, 1);
 8005e82:	2201      	movs	r2, #1
 8005e84:	4915      	ldr	r1, [pc, #84]	; (8005edc <rda5807_SetVolume+0x88>)
 8005e86:	2005      	movs	r0, #5
 8005e88:	f7ff fe6e 	bl	8005b68 <rda5807_read>
        // Меняем значение поля VOLUME
        Buffs.Reg05.bVOLUME = Value;
 8005e8c:	79fb      	ldrb	r3, [r7, #7]
 8005e8e:	f003 030f 	and.w	r3, r3, #15
 8005e92:	b2d9      	uxtb	r1, r3
 8005e94:	4a12      	ldr	r2, [pc, #72]	; (8005ee0 <rda5807_SetVolume+0x8c>)
 8005e96:	7993      	ldrb	r3, [r2, #6]
 8005e98:	f361 0303 	bfi	r3, r1, #0, #4
 8005e9c:	7193      	strb	r3, [r2, #6]
        // Пишем регистр 0x05
        rda5807_write(5, (uint16_t *)&Buffs.Reg05, 1);
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	490e      	ldr	r1, [pc, #56]	; (8005edc <rda5807_SetVolume+0x88>)
 8005ea2:	2005      	movs	r0, #5
 8005ea4:	f7ff fe94 	bl	8005bd0 <rda5807_write>
    }

    // Читаем регистр 0x02
    rda5807_read(2, (uint16_t *)&Buffs.Reg02, 1);
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	490d      	ldr	r1, [pc, #52]	; (8005ee0 <rda5807_SetVolume+0x8c>)
 8005eac:	2002      	movs	r0, #2
 8005eae:	f7ff fe5b 	bl	8005b68 <rda5807_read>
    // Меняем значение поля VOLUME
    Buffs.Reg02.bDMUTE = Mute ? 0 : 1;
 8005eb2:	7bfb      	ldrb	r3, [r7, #15]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	bf0c      	ite	eq
 8005eb8:	2301      	moveq	r3, #1
 8005eba:	2300      	movne	r3, #0
 8005ebc:	b2d9      	uxtb	r1, r3
 8005ebe:	4a08      	ldr	r2, [pc, #32]	; (8005ee0 <rda5807_SetVolume+0x8c>)
 8005ec0:	7853      	ldrb	r3, [r2, #1]
 8005ec2:	f361 1386 	bfi	r3, r1, #6, #1
 8005ec6:	7053      	strb	r3, [r2, #1]
    // Пишем регистр 0x02
    rda5807_write(2, (uint16_t *)&Buffs.Reg02, 1);
 8005ec8:	2201      	movs	r2, #1
 8005eca:	4905      	ldr	r1, [pc, #20]	; (8005ee0 <rda5807_SetVolume+0x8c>)
 8005ecc:	2002      	movs	r0, #2
 8005ece:	f7ff fe7f 	bl	8005bd0 <rda5807_write>
}
 8005ed2:	bf00      	nop
 8005ed4:	3710      	adds	r7, #16
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}
 8005eda:	bf00      	nop
 8005edc:	2000379a 	.word	0x2000379a
 8005ee0:	20003794 	.word	0x20003794

08005ee4 <rda5807_SetBassBoost>:

//==============================================================================
// Процедура включает/выключает BassBoost
//==============================================================================
void rda5807_SetBassBoost(uint8_t Value)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b082      	sub	sp, #8
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	4603      	mov	r3, r0
 8005eec:	71fb      	strb	r3, [r7, #7]
//tReg02h Reg02;

    // Читаем регистр 0x02
    rda5807_read(2, (uint16_t *)&Buffs.Reg02, 1);
 8005eee:	2201      	movs	r2, #1
 8005ef0:	490b      	ldr	r1, [pc, #44]	; (8005f20 <rda5807_SetBassBoost+0x3c>)
 8005ef2:	2002      	movs	r0, #2
 8005ef4:	f7ff fe38 	bl	8005b68 <rda5807_read>
    // Меняем значение поля BASS
    Buffs.Reg02.bBASS = (Value) ? 1 : 0;
 8005ef8:	79fb      	ldrb	r3, [r7, #7]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	bf14      	ite	ne
 8005efe:	2301      	movne	r3, #1
 8005f00:	2300      	moveq	r3, #0
 8005f02:	b2d9      	uxtb	r1, r3
 8005f04:	4a06      	ldr	r2, [pc, #24]	; (8005f20 <rda5807_SetBassBoost+0x3c>)
 8005f06:	7853      	ldrb	r3, [r2, #1]
 8005f08:	f361 1304 	bfi	r3, r1, #4, #1
 8005f0c:	7053      	strb	r3, [r2, #1]
    // Пишем регистр 0x02
    rda5807_write(2, (uint16_t *)&Buffs.Reg02, 1);
 8005f0e:	2201      	movs	r2, #1
 8005f10:	4903      	ldr	r1, [pc, #12]	; (8005f20 <rda5807_SetBassBoost+0x3c>)
 8005f12:	2002      	movs	r0, #2
 8005f14:	f7ff fe5c 	bl	8005bd0 <rda5807_write>
}
 8005f18:	bf00      	nop
 8005f1a:	3708      	adds	r7, #8
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}
 8005f20:	20003794 	.word	0x20003794

08005f24 <rda5807_SetFreq_In100Khz>:
//==============================================================================
// Процедура устанавливает текущую частоту Freq100kHz и стартует перенастройку rda5807 на эту частоту.
// Окончание процесса можно установки можно проконтроллировать по обнулению бита STR в регистре 0x0A (функцией rda5807_Get_SeekTuneReadyFlag)
//==============================================================================
void rda5807_SetFreq_In100Khz(uint16_t Freq100kHz)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b084      	sub	sp, #16
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	80fb      	strh	r3, [r7, #6]
//tReg03h Reg03;
uint16_t l = 870, r = 1080;
 8005f2e:	f240 3366 	movw	r3, #870	; 0x366
 8005f32:	81fb      	strh	r3, [r7, #14]
 8005f34:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8005f38:	81bb      	strh	r3, [r7, #12]

    // Проверка входного параметра для диапазона Buffs.Reg03.bBAND
	switch (Buffs.Reg03.bBAND) {    // Диапазон 87–108 MHz
 8005f3a:	4b33      	ldr	r3, [pc, #204]	; (8006008 <rda5807_SetFreq_In100Khz+0xe4>)
 8005f3c:	789b      	ldrb	r3, [r3, #2]
 8005f3e:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8005f42:	b2db      	uxtb	r3, r3
 8005f44:	2b03      	cmp	r3, #3
 8005f46:	d011      	beq.n	8005f6c <rda5807_SetFreq_In100Khz+0x48>
 8005f48:	2b03      	cmp	r3, #3
 8005f4a:	dc16      	bgt.n	8005f7a <rda5807_SetFreq_In100Khz+0x56>
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d002      	beq.n	8005f56 <rda5807_SetFreq_In100Khz+0x32>
 8005f50:	2b02      	cmp	r3, #2
 8005f52:	d007      	beq.n	8005f64 <rda5807_SetFreq_In100Khz+0x40>
 8005f54:	e011      	b.n	8005f7a <rda5807_SetFreq_In100Khz+0x56>
		//case 0:// 00 = 87–108 MHz (US/Europe)
		//break;
		case 1:// 01 = 76–91 MHz (Japan)
			l = 760;
 8005f56:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 8005f5a:	81fb      	strh	r3, [r7, #14]
			r = 910;
 8005f5c:	f240 338e 	movw	r3, #910	; 0x38e
 8005f60:	81bb      	strh	r3, [r7, #12]
		break;
 8005f62:	e00a      	b.n	8005f7a <rda5807_SetFreq_In100Khz+0x56>
		case 2:// 10 = 76–108 MHz (world wide)
			l = 760;
 8005f64:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 8005f68:	81fb      	strh	r3, [r7, #14]
		break;
 8005f6a:	e006      	b.n	8005f7a <rda5807_SetFreq_In100Khz+0x56>
		case 3:// 11 = 65 –76 MHz (East Europe) or 50-65MHz
			l = 650;
 8005f6c:	f240 238a 	movw	r3, #650	; 0x28a
 8005f70:	81fb      	strh	r3, [r7, #14]
			r = 760;
 8005f72:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 8005f76:	81bb      	strh	r3, [r7, #12]
		break;
 8005f78:	bf00      	nop
	}
	lBand = ((float)l) / 10;
 8005f7a:	89fb      	ldrh	r3, [r7, #14]
 8005f7c:	ee07 3a90 	vmov	s15, r3
 8005f80:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005f84:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8005f88:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005f8c:	4b1f      	ldr	r3, [pc, #124]	; (800600c <rda5807_SetFreq_In100Khz+0xe8>)
 8005f8e:	edc3 7a00 	vstr	s15, [r3]
	rBand = ((float)r) / 10;
 8005f92:	89bb      	ldrh	r3, [r7, #12]
 8005f94:	ee07 3a90 	vmov	s15, r3
 8005f98:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005f9c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8005fa0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005fa4:	4b1a      	ldr	r3, [pc, #104]	; (8006010 <rda5807_SetFreq_In100Khz+0xec>)
 8005fa6:	edc3 7a00 	vstr	s15, [r3]

    if (Freq100kHz < l)  Freq100kHz = l;
 8005faa:	88fa      	ldrh	r2, [r7, #6]
 8005fac:	89fb      	ldrh	r3, [r7, #14]
 8005fae:	429a      	cmp	r2, r3
 8005fb0:	d201      	bcs.n	8005fb6 <rda5807_SetFreq_In100Khz+0x92>
 8005fb2:	89fb      	ldrh	r3, [r7, #14]
 8005fb4:	80fb      	strh	r3, [r7, #6]
    if (Freq100kHz > r) Freq100kHz = r;
 8005fb6:	88fa      	ldrh	r2, [r7, #6]
 8005fb8:	89bb      	ldrh	r3, [r7, #12]
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	d901      	bls.n	8005fc2 <rda5807_SetFreq_In100Khz+0x9e>
 8005fbe:	89bb      	ldrh	r3, [r7, #12]
 8005fc0:	80fb      	strh	r3, [r7, #6]

    // Вычитаем начало диапазона (left)
    Freq100kHz -= l;
 8005fc2:	88fa      	ldrh	r2, [r7, #6]
 8005fc4:	89fb      	ldrh	r3, [r7, #14]
 8005fc6:	1ad3      	subs	r3, r2, r3
 8005fc8:	80fb      	strh	r3, [r7, #6]

    // Читаем регистр 0x03
    rda5807_read(3, (uint16_t *)&Buffs.Reg03, 1);
 8005fca:	2201      	movs	r2, #1
 8005fcc:	4911      	ldr	r1, [pc, #68]	; (8006014 <rda5807_SetFreq_In100Khz+0xf0>)
 8005fce:	2003      	movs	r0, #3
 8005fd0:	f7ff fdca 	bl	8005b68 <rda5807_read>
    // Меняем значение поля CHAN
    Buffs.Reg03.bCHAN = Freq100kHz;
 8005fd4:	88fb      	ldrh	r3, [r7, #6]
 8005fd6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005fda:	b299      	uxth	r1, r3
 8005fdc:	4a0a      	ldr	r2, [pc, #40]	; (8006008 <rda5807_SetFreq_In100Khz+0xe4>)
 8005fde:	8853      	ldrh	r3, [r2, #2]
 8005fe0:	f361 138f 	bfi	r3, r1, #6, #10
 8005fe4:	8053      	strh	r3, [r2, #2]
    // Выставляем флаг начала перенастройки на канал
    Buffs.Reg03.bTUNE = 1;
 8005fe6:	4a08      	ldr	r2, [pc, #32]	; (8006008 <rda5807_SetFreq_In100Khz+0xe4>)
 8005fe8:	7893      	ldrb	r3, [r2, #2]
 8005fea:	f043 0310 	orr.w	r3, r3, #16
 8005fee:	7093      	strb	r3, [r2, #2]
    // Пишем регистр 0x03
    rda5807_write(3, (uint16_t *)&Buffs.Reg03, 1);
 8005ff0:	2201      	movs	r2, #1
 8005ff2:	4908      	ldr	r1, [pc, #32]	; (8006014 <rda5807_SetFreq_In100Khz+0xf0>)
 8005ff4:	2003      	movs	r0, #3
 8005ff6:	f7ff fdeb 	bl	8005bd0 <rda5807_write>

    HAL_Delay(50);
 8005ffa:	2032      	movs	r0, #50	; 0x32
 8005ffc:	f001 fcae 	bl	800795c <HAL_Delay>
}
 8006000:	bf00      	nop
 8006002:	3710      	adds	r7, #16
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}
 8006008:	20003794 	.word	0x20003794
 800600c:	20003014 	.word	0x20003014
 8006010:	20003018 	.word	0x20003018
 8006014:	20003796 	.word	0x20003796

08006018 <rda5807_GetFreq_In100Khz>:

//==============================================================================
// Функция читает текущую частоту, на которую настроен rda5807
//==============================================================================
uint16_t rda5807_GetFreq_In100Khz()
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b082      	sub	sp, #8
 800601c:	af00      	add	r7, sp, #0
//tReg0Ah reg0A;

    // Читаем регистр 0x0A
    rda5807_read(0x0A, (uint16_t *)&Buffs.Reg0A, 1);
 800601e:	2201      	movs	r2, #1
 8006020:	491b      	ldr	r1, [pc, #108]	; (8006090 <rda5807_GetFreq_In100Khz+0x78>)
 8006022:	200a      	movs	r0, #10
 8006024:	f7ff fda0 	bl	8005b68 <rda5807_read>

    uint16_t Freq100kHz = Buffs.Reg0A.bREADCHAN;
 8006028:	4b1a      	ldr	r3, [pc, #104]	; (8006094 <rda5807_GetFreq_In100Khz+0x7c>)
 800602a:	8a1b      	ldrh	r3, [r3, #16]
 800602c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006030:	b29b      	uxth	r3, r3
 8006032:	80bb      	strh	r3, [r7, #4]

    if (Freq100kHz == 319) return 0;
 8006034:	88bb      	ldrh	r3, [r7, #4]
 8006036:	f240 123f 	movw	r2, #319	; 0x13f
 800603a:	4293      	cmp	r3, r2
 800603c:	d101      	bne.n	8006042 <rda5807_GetFreq_In100Khz+0x2a>
 800603e:	2300      	movs	r3, #0
 8006040:	e021      	b.n	8006086 <rda5807_GetFreq_In100Khz+0x6e>

    // Прибавляем начало диапазона (87 МГц)
    uint16_t left = 870;
 8006042:	f240 3366 	movw	r3, #870	; 0x366
 8006046:	80fb      	strh	r3, [r7, #6]
    switch (Buffs.Reg03.bBAND) {    // Диапазон 87–108 MHz
 8006048:	4b12      	ldr	r3, [pc, #72]	; (8006094 <rda5807_GetFreq_In100Khz+0x7c>)
 800604a:	789b      	ldrb	r3, [r3, #2]
 800604c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8006050:	b2db      	uxtb	r3, r3
 8006052:	2b03      	cmp	r3, #3
 8006054:	d00e      	beq.n	8006074 <rda5807_GetFreq_In100Khz+0x5c>
 8006056:	2b03      	cmp	r3, #3
 8006058:	dc10      	bgt.n	800607c <rda5807_GetFreq_In100Khz+0x64>
 800605a:	2b01      	cmp	r3, #1
 800605c:	d002      	beq.n	8006064 <rda5807_GetFreq_In100Khz+0x4c>
 800605e:	2b02      	cmp	r3, #2
 8006060:	d004      	beq.n	800606c <rda5807_GetFreq_In100Khz+0x54>
 8006062:	e00b      	b.n	800607c <rda5807_GetFreq_In100Khz+0x64>
    	//case 0:// 00 = 87–108 MHz (US/Europe)
    	//break;
    	case 1:// 01 = 76–91 MHz (Japan)
    		left = 760;
 8006064:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 8006068:	80fb      	strh	r3, [r7, #6]
    	break;
 800606a:	e007      	b.n	800607c <rda5807_GetFreq_In100Khz+0x64>
    	case 2:// 10 = 76–108 MHz (world wide)
    		left = 760;
 800606c:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 8006070:	80fb      	strh	r3, [r7, #6]
    	break;
 8006072:	e003      	b.n	800607c <rda5807_GetFreq_In100Khz+0x64>
    	case 3:// 11 = 65 –76 MHz (East Europe) or 50-65MHz
    		left = 650;
 8006074:	f240 238a 	movw	r3, #650	; 0x28a
 8006078:	80fb      	strh	r3, [r7, #6]
    	break;
 800607a:	bf00      	nop
    }
    Freq100kHz += left;
 800607c:	88ba      	ldrh	r2, [r7, #4]
 800607e:	88fb      	ldrh	r3, [r7, #6]
 8006080:	4413      	add	r3, r2
 8006082:	80bb      	strh	r3, [r7, #4]

    return Freq100kHz;
 8006084:	88bb      	ldrh	r3, [r7, #4]
}
 8006086:	4618      	mov	r0, r3
 8006088:	3708      	adds	r7, #8
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}
 800608e:	bf00      	nop
 8006090:	200037a4 	.word	0x200037a4
 8006094:	20003794 	.word	0x20003794

08006098 <rda5807_StartSeek>:

//==============================================================================
// Процедура стартует поиск радиостанции вверх/вниз
//==============================================================================
void rda5807_StartSeek(uint8_t Up)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b082      	sub	sp, #8
 800609c:	af00      	add	r7, sp, #0
 800609e:	4603      	mov	r3, r0
 80060a0:	71fb      	strb	r3, [r7, #7]
//tReg02h Reg02;

    // Читаем регистр 0x02
    rda5807_read(2, (uint16_t *)&Buffs.Reg02, 1);
 80060a2:	2201      	movs	r2, #1
 80060a4:	4910      	ldr	r1, [pc, #64]	; (80060e8 <rda5807_StartSeek+0x50>)
 80060a6:	2002      	movs	r0, #2
 80060a8:	f7ff fd5e 	bl	8005b68 <rda5807_read>

    Buffs.Reg02.bSKMODE = 1;          // 07 Seek Mode (0 = wrap at the upper or lower band limit and continue seeking; 1 = stop seeking at the upper or lower band limit)
 80060ac:	4a0e      	ldr	r2, [pc, #56]	; (80060e8 <rda5807_StartSeek+0x50>)
 80060ae:	7813      	ldrb	r3, [r2, #0]
 80060b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060b4:	7013      	strb	r3, [r2, #0]
    Buffs.Reg02.bSEEK = 1;            // 08 Seek (0 = Disable stop seek; 1 = Enable)
 80060b6:	4a0c      	ldr	r2, [pc, #48]	; (80060e8 <rda5807_StartSeek+0x50>)
 80060b8:	7853      	ldrb	r3, [r2, #1]
 80060ba:	f043 0301 	orr.w	r3, r3, #1
 80060be:	7053      	strb	r3, [r2, #1]
    Buffs.Reg02.bSEEKUP = Up ? 1 : 0; // 09 Seek Up (0 = Seek down; 1 = Seek up)
 80060c0:	79fb      	ldrb	r3, [r7, #7]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	bf14      	ite	ne
 80060c6:	2301      	movne	r3, #1
 80060c8:	2300      	moveq	r3, #0
 80060ca:	b2d9      	uxtb	r1, r3
 80060cc:	4a06      	ldr	r2, [pc, #24]	; (80060e8 <rda5807_StartSeek+0x50>)
 80060ce:	7853      	ldrb	r3, [r2, #1]
 80060d0:	f361 0341 	bfi	r3, r1, #1, #1
 80060d4:	7053      	strb	r3, [r2, #1]

    // Пишем регистр 0x02
    rda5807_write(2, (uint16_t *)&Buffs.Reg02, 1);
 80060d6:	2201      	movs	r2, #1
 80060d8:	4903      	ldr	r1, [pc, #12]	; (80060e8 <rda5807_StartSeek+0x50>)
 80060da:	2002      	movs	r0, #2
 80060dc:	f7ff fd78 	bl	8005bd0 <rda5807_write>
}
 80060e0:	bf00      	nop
 80060e2:	3708      	adds	r7, #8
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}
 80060e8:	20003794 	.word	0x20003794

080060ec <rda5807_Get_SeekTuneReadyFlag>:
//==============================================================================
// Функция возвращает состояние бита STR (SeekTuneReadyFlag)
// SeekTuneReadyFlag=1 пока идёт процесс настройки на частоту или поиск радиостанции.
//==============================================================================
uint8_t rda5807_Get_SeekTuneReadyFlag()
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	af00      	add	r7, sp, #0
//tReg0Ah reg0A;

    // Читаем регистр 0x0A
    rda5807_read(0x0A, (uint16_t *)&Buffs.Reg0A, 1);
 80060f0:	2201      	movs	r2, #1
 80060f2:	4905      	ldr	r1, [pc, #20]	; (8006108 <rda5807_Get_SeekTuneReadyFlag+0x1c>)
 80060f4:	200a      	movs	r0, #10
 80060f6:	f7ff fd37 	bl	8005b68 <rda5807_read>

    return Buffs.Reg0A.bSTC;
 80060fa:	4b04      	ldr	r3, [pc, #16]	; (800610c <rda5807_Get_SeekTuneReadyFlag+0x20>)
 80060fc:	7c5b      	ldrb	r3, [r3, #17]
 80060fe:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006102:	b2db      	uxtb	r3, r3
}
 8006104:	4618      	mov	r0, r3
 8006106:	bd80      	pop	{r7, pc}
 8006108:	200037a4 	.word	0x200037a4
 800610c:	20003794 	.word	0x20003794

08006110 <rda5807_Get_StereoMonoFlag>:
//==============================================================================
//==============================================================================
bool rda5807_Get_StereoMonoFlag()
{
 8006110:	b580      	push	{r7, lr}
 8006112:	af00      	add	r7, sp, #0
//tReg0Ah reg0A;

    // Читаем регистр 0x0A
    rda5807_read(0x0A, (uint16_t *)&Buffs.Reg0A, 1);
 8006114:	2201      	movs	r2, #1
 8006116:	4908      	ldr	r1, [pc, #32]	; (8006138 <rda5807_Get_StereoMonoFlag+0x28>)
 8006118:	200a      	movs	r0, #10
 800611a:	f7ff fd25 	bl	8005b68 <rda5807_read>

    return Buffs.Reg0A.bST;     // Stereo Indicator (0 = Mono; 1 = Stereo)
 800611e:	4b07      	ldr	r3, [pc, #28]	; (800613c <rda5807_Get_StereoMonoFlag+0x2c>)
 8006120:	7c5b      	ldrb	r3, [r3, #17]
 8006122:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006126:	b2db      	uxtb	r3, r3
 8006128:	2b00      	cmp	r3, #0
 800612a:	bf14      	ite	ne
 800612c:	2301      	movne	r3, #1
 800612e:	2300      	moveq	r3, #0
 8006130:	b2db      	uxtb	r3, r3
}
 8006132:	4618      	mov	r0, r3
 8006134:	bd80      	pop	{r7, pc}
 8006136:	bf00      	nop
 8006138:	200037a4 	.word	0x200037a4
 800613c:	20003794 	.word	0x20003794

08006140 <rda5807_Get_Channel>:
//==============================================================================
uint16_t rda5807_Get_Channel()
{
 8006140:	b580      	push	{r7, lr}
 8006142:	af00      	add	r7, sp, #0
//tReg0Ah reg0A;

    // Читаем регистр 0x0A
    rda5807_read(0x0A, (uint16_t *)&Buffs.Reg0A, 1);
 8006144:	2201      	movs	r2, #1
 8006146:	4905      	ldr	r1, [pc, #20]	; (800615c <rda5807_Get_Channel+0x1c>)
 8006148:	200a      	movs	r0, #10
 800614a:	f7ff fd0d 	bl	8005b68 <rda5807_read>

    return Buffs.Reg0A.bREADCHAN;    // 0-9 Read Channel.
 800614e:	4b04      	ldr	r3, [pc, #16]	; (8006160 <rda5807_Get_Channel+0x20>)
 8006150:	8a1b      	ldrh	r3, [r3, #16]
 8006152:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006156:	b29b      	uxth	r3, r3
}
 8006158:	4618      	mov	r0, r3
 800615a:	bd80      	pop	{r7, pc}
 800615c:	200037a4 	.word	0x200037a4
 8006160:	20003794 	.word	0x20003794

08006164 <rda5807_Set_Band>:
//==============================================================================
uint8_t rda5807_Set_Band(uint8_t band)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b084      	sub	sp, #16
 8006168:	af00      	add	r7, sp, #0
 800616a:	4603      	mov	r3, r0
 800616c:	71fb      	strb	r3, [r7, #7]
	if (band > 3) return 1;
 800616e:	79fb      	ldrb	r3, [r7, #7]
 8006170:	2b03      	cmp	r3, #3
 8006172:	d901      	bls.n	8006178 <rda5807_Set_Band+0x14>
 8006174:	2301      	movs	r3, #1
 8006176:	e054      	b.n	8006222 <rda5807_Set_Band+0xbe>

    // Читаем регистр 3
    rda5807_read(3, (uint16_t *)&Buffs.Reg03, 1);
 8006178:	2201      	movs	r2, #1
 800617a:	492c      	ldr	r1, [pc, #176]	; (800622c <rda5807_Set_Band+0xc8>)
 800617c:	2003      	movs	r0, #3
 800617e:	f7ff fcf3 	bl	8005b68 <rda5807_read>

    Buffs.Reg03.bBAND = band;
 8006182:	79fb      	ldrb	r3, [r7, #7]
 8006184:	f003 0303 	and.w	r3, r3, #3
 8006188:	b2d9      	uxtb	r1, r3
 800618a:	4a29      	ldr	r2, [pc, #164]	; (8006230 <rda5807_Set_Band+0xcc>)
 800618c:	7893      	ldrb	r3, [r2, #2]
 800618e:	f361 0383 	bfi	r3, r1, #2, #2
 8006192:	7093      	strb	r3, [r2, #2]

    rda5807_write(3, (uint16_t *)&Buffs.Reg03, 1);
 8006194:	2201      	movs	r2, #1
 8006196:	4925      	ldr	r1, [pc, #148]	; (800622c <rda5807_Set_Band+0xc8>)
 8006198:	2003      	movs	r0, #3
 800619a:	f7ff fd19 	bl	8005bd0 <rda5807_write>

    uint16_t l = 870, r = 1080;
 800619e:	f240 3366 	movw	r3, #870	; 0x366
 80061a2:	81fb      	strh	r3, [r7, #14]
 80061a4:	f44f 6387 	mov.w	r3, #1080	; 0x438
 80061a8:	81bb      	strh	r3, [r7, #12]

    switch (Buffs.Reg03.bBAND) {    // Диапазон 87–108 MHz
 80061aa:	4b21      	ldr	r3, [pc, #132]	; (8006230 <rda5807_Set_Band+0xcc>)
 80061ac:	789b      	ldrb	r3, [r3, #2]
 80061ae:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80061b2:	b2db      	uxtb	r3, r3
 80061b4:	2b03      	cmp	r3, #3
 80061b6:	d011      	beq.n	80061dc <rda5807_Set_Band+0x78>
 80061b8:	2b03      	cmp	r3, #3
 80061ba:	dc16      	bgt.n	80061ea <rda5807_Set_Band+0x86>
 80061bc:	2b01      	cmp	r3, #1
 80061be:	d002      	beq.n	80061c6 <rda5807_Set_Band+0x62>
 80061c0:	2b02      	cmp	r3, #2
 80061c2:	d007      	beq.n	80061d4 <rda5807_Set_Band+0x70>
 80061c4:	e011      	b.n	80061ea <rda5807_Set_Band+0x86>
    	//case 0:// 00 = 87–108 MHz (US/Europe)
    	//break;
    	case 1:// 01 = 76–91 MHz (Japan)
    		l = 760;
 80061c6:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 80061ca:	81fb      	strh	r3, [r7, #14]
    		r = 910;
 80061cc:	f240 338e 	movw	r3, #910	; 0x38e
 80061d0:	81bb      	strh	r3, [r7, #12]
    	break;
 80061d2:	e00a      	b.n	80061ea <rda5807_Set_Band+0x86>
    	case 2:// 10 = 76–108 MHz (world wide)
    		l = 760;
 80061d4:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 80061d8:	81fb      	strh	r3, [r7, #14]
    	break;
 80061da:	e006      	b.n	80061ea <rda5807_Set_Band+0x86>
    	case 3:// 11 = 65 –76 MHz (East Europe) or 50-65MHz
    		l = 650;
 80061dc:	f240 238a 	movw	r3, #650	; 0x28a
 80061e0:	81fb      	strh	r3, [r7, #14]
    		r = 760;
 80061e2:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 80061e6:	81bb      	strh	r3, [r7, #12]
    	break;
 80061e8:	bf00      	nop
    }
    lBand = ((float)l) / 10;
 80061ea:	89fb      	ldrh	r3, [r7, #14]
 80061ec:	ee07 3a90 	vmov	s15, r3
 80061f0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80061f4:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80061f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80061fc:	4b0d      	ldr	r3, [pc, #52]	; (8006234 <rda5807_Set_Band+0xd0>)
 80061fe:	edc3 7a00 	vstr	s15, [r3]
    rBand = ((float)r) / 10;
 8006202:	89bb      	ldrh	r3, [r7, #12]
 8006204:	ee07 3a90 	vmov	s15, r3
 8006208:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800620c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8006210:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006214:	4b08      	ldr	r3, [pc, #32]	; (8006238 <rda5807_Set_Band+0xd4>)
 8006216:	edc3 7a00 	vstr	s15, [r3]

    HAL_Delay(50);
 800621a:	2032      	movs	r0, #50	; 0x32
 800621c:	f001 fb9e 	bl	800795c <HAL_Delay>

    return 0;
 8006220:	2300      	movs	r3, #0
}
 8006222:	4618      	mov	r0, r3
 8006224:	3710      	adds	r7, #16
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}
 800622a:	bf00      	nop
 800622c:	20003796 	.word	0x20003796
 8006230:	20003794 	.word	0x20003794
 8006234:	20003014 	.word	0x20003014
 8006238:	20003018 	.word	0x20003018

0800623c <rda5807_Set_Mute>:
//==============================================================================
void rda5807_Set_Mute(uint8_t mute)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b082      	sub	sp, #8
 8006240:	af00      	add	r7, sp, #0
 8006242:	4603      	mov	r3, r0
 8006244:	71fb      	strb	r3, [r7, #7]
	// Читаем регистр 2
	rda5807_read(2, (uint16_t *)&Buffs.Reg02, 1);
 8006246:	2201      	movs	r2, #1
 8006248:	490a      	ldr	r1, [pc, #40]	; (8006274 <rda5807_Set_Mute+0x38>)
 800624a:	2002      	movs	r0, #2
 800624c:	f7ff fc8c 	bl	8005b68 <rda5807_read>

	Buffs.Reg02.bDMUTE = mute & 1;
 8006250:	79fb      	ldrb	r3, [r7, #7]
 8006252:	f003 0301 	and.w	r3, r3, #1
 8006256:	b2d9      	uxtb	r1, r3
 8006258:	4a06      	ldr	r2, [pc, #24]	; (8006274 <rda5807_Set_Mute+0x38>)
 800625a:	7853      	ldrb	r3, [r2, #1]
 800625c:	f361 1386 	bfi	r3, r1, #6, #1
 8006260:	7053      	strb	r3, [r2, #1]

	rda5807_write(2, (uint16_t *)&Buffs.Reg02, 1);
 8006262:	2201      	movs	r2, #1
 8006264:	4903      	ldr	r1, [pc, #12]	; (8006274 <rda5807_Set_Mute+0x38>)
 8006266:	2002      	movs	r0, #2
 8006268:	f7ff fcb2 	bl	8005bd0 <rda5807_write>
}
 800626c:	bf00      	nop
 800626e:	3708      	adds	r7, #8
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}
 8006274:	20003794 	.word	0x20003794

08006278 <rda5807_Get_RDSData>:
	return Buffs.Reg0A.bRDSR;
}
*/
//==============================================================================
bool rda5807_Get_RDSData(uint8_t *data, bool *sync)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b082      	sub	sp, #8
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
 8006280:	6039      	str	r1, [r7, #0]
	rda5807_read(0x0A, (uint16_t *)&Buffs.Reg0A, 1);
 8006282:	2201      	movs	r2, #1
 8006284:	4914      	ldr	r1, [pc, #80]	; (80062d8 <rda5807_Get_RDSData+0x60>)
 8006286:	200a      	movs	r0, #10
 8006288:	f7ff fc6e 	bl	8005b68 <rda5807_read>

	*sync = Buffs.Reg0A.bRDSS;
 800628c:	4b13      	ldr	r3, [pc, #76]	; (80062dc <rda5807_Get_RDSData+0x64>)
 800628e:	7c5b      	ldrb	r3, [r3, #17]
 8006290:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006294:	b2db      	uxtb	r3, r3
 8006296:	2b00      	cmp	r3, #0
 8006298:	bf14      	ite	ne
 800629a:	2301      	movne	r3, #1
 800629c:	2300      	moveq	r3, #0
 800629e:	b2da      	uxtb	r2, r3
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	701a      	strb	r2, [r3, #0]

	if (Buffs.Reg0A.bRDSR) rda5807_read(0x0C, (uint16_t *)data, 4);
 80062a4:	4b0d      	ldr	r3, [pc, #52]	; (80062dc <rda5807_Get_RDSData+0x64>)
 80062a6:	7c5b      	ldrb	r3, [r3, #17]
 80062a8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80062ac:	b2db      	uxtb	r3, r3
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d004      	beq.n	80062bc <rda5807_Get_RDSData+0x44>
 80062b2:	2204      	movs	r2, #4
 80062b4:	6879      	ldr	r1, [r7, #4]
 80062b6:	200c      	movs	r0, #12
 80062b8:	f7ff fc56 	bl	8005b68 <rda5807_read>

	return Buffs.Reg0A.bRDSR;
 80062bc:	4b07      	ldr	r3, [pc, #28]	; (80062dc <rda5807_Get_RDSData+0x64>)
 80062be:	7c5b      	ldrb	r3, [r3, #17]
 80062c0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80062c4:	b2db      	uxtb	r3, r3
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	bf14      	ite	ne
 80062ca:	2301      	movne	r3, #1
 80062cc:	2300      	moveq	r3, #0
 80062ce:	b2db      	uxtb	r3, r3
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	3708      	adds	r7, #8
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}
 80062d8:	200037a4 	.word	0x200037a4
 80062dc:	20003794 	.word	0x20003794

080062e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b083      	sub	sp, #12
 80062e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80062e6:	4b0f      	ldr	r3, [pc, #60]	; (8006324 <HAL_MspInit+0x44>)
 80062e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062ea:	4a0e      	ldr	r2, [pc, #56]	; (8006324 <HAL_MspInit+0x44>)
 80062ec:	f043 0301 	orr.w	r3, r3, #1
 80062f0:	6613      	str	r3, [r2, #96]	; 0x60
 80062f2:	4b0c      	ldr	r3, [pc, #48]	; (8006324 <HAL_MspInit+0x44>)
 80062f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062f6:	f003 0301 	and.w	r3, r3, #1
 80062fa:	607b      	str	r3, [r7, #4]
 80062fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80062fe:	4b09      	ldr	r3, [pc, #36]	; (8006324 <HAL_MspInit+0x44>)
 8006300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006302:	4a08      	ldr	r2, [pc, #32]	; (8006324 <HAL_MspInit+0x44>)
 8006304:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006308:	6593      	str	r3, [r2, #88]	; 0x58
 800630a:	4b06      	ldr	r3, [pc, #24]	; (8006324 <HAL_MspInit+0x44>)
 800630c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800630e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006312:	603b      	str	r3, [r7, #0]
 8006314:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006316:	bf00      	nop
 8006318:	370c      	adds	r7, #12
 800631a:	46bd      	mov	sp, r7
 800631c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006320:	4770      	bx	lr
 8006322:	bf00      	nop
 8006324:	40021000 	.word	0x40021000

08006328 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b0ac      	sub	sp, #176	; 0xb0
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006330:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006334:	2200      	movs	r2, #0
 8006336:	601a      	str	r2, [r3, #0]
 8006338:	605a      	str	r2, [r3, #4]
 800633a:	609a      	str	r2, [r3, #8]
 800633c:	60da      	str	r2, [r3, #12]
 800633e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006340:	f107 0314 	add.w	r3, r7, #20
 8006344:	2288      	movs	r2, #136	; 0x88
 8006346:	2100      	movs	r1, #0
 8006348:	4618      	mov	r0, r3
 800634a:	f009 fb21 	bl	800f990 <memset>
  if(hi2c->Instance==I2C1)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a57      	ldr	r2, [pc, #348]	; (80064b0 <HAL_I2C_MspInit+0x188>)
 8006354:	4293      	cmp	r3, r2
 8006356:	f040 80a7 	bne.w	80064a8 <HAL_I2C_MspInit+0x180>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800635a:	2340      	movs	r3, #64	; 0x40
 800635c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800635e:	2300      	movs	r3, #0
 8006360:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006362:	f107 0314 	add.w	r3, r7, #20
 8006366:	4618      	mov	r0, r3
 8006368:	f004 fc8a 	bl	800ac80 <HAL_RCCEx_PeriphCLKConfig>
 800636c:	4603      	mov	r3, r0
 800636e:	2b00      	cmp	r3, #0
 8006370:	d001      	beq.n	8006376 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8006372:	f7ff fb11 	bl	8005998 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006376:	4b4f      	ldr	r3, [pc, #316]	; (80064b4 <HAL_I2C_MspInit+0x18c>)
 8006378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800637a:	4a4e      	ldr	r2, [pc, #312]	; (80064b4 <HAL_I2C_MspInit+0x18c>)
 800637c:	f043 0302 	orr.w	r3, r3, #2
 8006380:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006382:	4b4c      	ldr	r3, [pc, #304]	; (80064b4 <HAL_I2C_MspInit+0x18c>)
 8006384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006386:	f003 0302 	and.w	r3, r3, #2
 800638a:	613b      	str	r3, [r7, #16]
 800638c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800638e:	23c0      	movs	r3, #192	; 0xc0
 8006390:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006394:	2312      	movs	r3, #18
 8006396:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800639a:	2300      	movs	r3, #0
 800639c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80063a0:	2302      	movs	r3, #2
 80063a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80063a6:	2304      	movs	r3, #4
 80063a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80063ac:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80063b0:	4619      	mov	r1, r3
 80063b2:	4841      	ldr	r0, [pc, #260]	; (80064b8 <HAL_I2C_MspInit+0x190>)
 80063b4:	f001 fede 	bl	8008174 <HAL_GPIO_Init>

    HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_PB6);
 80063b8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80063bc:	f003 fd40 	bl	8009e40 <HAL_I2CEx_EnableFastModePlus>

    HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_PB7);
 80063c0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80063c4:	f003 fd3c 	bl	8009e40 <HAL_I2CEx_EnableFastModePlus>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80063c8:	4b3a      	ldr	r3, [pc, #232]	; (80064b4 <HAL_I2C_MspInit+0x18c>)
 80063ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063cc:	4a39      	ldr	r2, [pc, #228]	; (80064b4 <HAL_I2C_MspInit+0x18c>)
 80063ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80063d2:	6593      	str	r3, [r2, #88]	; 0x58
 80063d4:	4b37      	ldr	r3, [pc, #220]	; (80064b4 <HAL_I2C_MspInit+0x18c>)
 80063d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80063dc:	60fb      	str	r3, [r7, #12]
 80063de:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA2_Channel6;
 80063e0:	4b36      	ldr	r3, [pc, #216]	; (80064bc <HAL_I2C_MspInit+0x194>)
 80063e2:	4a37      	ldr	r2, [pc, #220]	; (80064c0 <HAL_I2C_MspInit+0x198>)
 80063e4:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_5;
 80063e6:	4b35      	ldr	r3, [pc, #212]	; (80064bc <HAL_I2C_MspInit+0x194>)
 80063e8:	2205      	movs	r2, #5
 80063ea:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80063ec:	4b33      	ldr	r3, [pc, #204]	; (80064bc <HAL_I2C_MspInit+0x194>)
 80063ee:	2200      	movs	r2, #0
 80063f0:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80063f2:	4b32      	ldr	r3, [pc, #200]	; (80064bc <HAL_I2C_MspInit+0x194>)
 80063f4:	2200      	movs	r2, #0
 80063f6:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80063f8:	4b30      	ldr	r3, [pc, #192]	; (80064bc <HAL_I2C_MspInit+0x194>)
 80063fa:	2280      	movs	r2, #128	; 0x80
 80063fc:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80063fe:	4b2f      	ldr	r3, [pc, #188]	; (80064bc <HAL_I2C_MspInit+0x194>)
 8006400:	2200      	movs	r2, #0
 8006402:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006404:	4b2d      	ldr	r3, [pc, #180]	; (80064bc <HAL_I2C_MspInit+0x194>)
 8006406:	2200      	movs	r2, #0
 8006408:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800640a:	4b2c      	ldr	r3, [pc, #176]	; (80064bc <HAL_I2C_MspInit+0x194>)
 800640c:	2200      	movs	r2, #0
 800640e:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006410:	4b2a      	ldr	r3, [pc, #168]	; (80064bc <HAL_I2C_MspInit+0x194>)
 8006412:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006416:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8006418:	4828      	ldr	r0, [pc, #160]	; (80064bc <HAL_I2C_MspInit+0x194>)
 800641a:	f001 fc27 	bl	8007c6c <HAL_DMA_Init>
 800641e:	4603      	mov	r3, r0
 8006420:	2b00      	cmp	r3, #0
 8006422:	d001      	beq.n	8006428 <HAL_I2C_MspInit+0x100>
    {
      Error_Handler();
 8006424:	f7ff fab8 	bl	8005998 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	4a24      	ldr	r2, [pc, #144]	; (80064bc <HAL_I2C_MspInit+0x194>)
 800642c:	63da      	str	r2, [r3, #60]	; 0x3c
 800642e:	4a23      	ldr	r2, [pc, #140]	; (80064bc <HAL_I2C_MspInit+0x194>)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8006434:	4b23      	ldr	r3, [pc, #140]	; (80064c4 <HAL_I2C_MspInit+0x19c>)
 8006436:	4a24      	ldr	r2, [pc, #144]	; (80064c8 <HAL_I2C_MspInit+0x1a0>)
 8006438:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_3;
 800643a:	4b22      	ldr	r3, [pc, #136]	; (80064c4 <HAL_I2C_MspInit+0x19c>)
 800643c:	2203      	movs	r2, #3
 800643e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006440:	4b20      	ldr	r3, [pc, #128]	; (80064c4 <HAL_I2C_MspInit+0x19c>)
 8006442:	2210      	movs	r2, #16
 8006444:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006446:	4b1f      	ldr	r3, [pc, #124]	; (80064c4 <HAL_I2C_MspInit+0x19c>)
 8006448:	2200      	movs	r2, #0
 800644a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800644c:	4b1d      	ldr	r3, [pc, #116]	; (80064c4 <HAL_I2C_MspInit+0x19c>)
 800644e:	2280      	movs	r2, #128	; 0x80
 8006450:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006452:	4b1c      	ldr	r3, [pc, #112]	; (80064c4 <HAL_I2C_MspInit+0x19c>)
 8006454:	2200      	movs	r2, #0
 8006456:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006458:	4b1a      	ldr	r3, [pc, #104]	; (80064c4 <HAL_I2C_MspInit+0x19c>)
 800645a:	2200      	movs	r2, #0
 800645c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800645e:	4b19      	ldr	r3, [pc, #100]	; (80064c4 <HAL_I2C_MspInit+0x19c>)
 8006460:	2200      	movs	r2, #0
 8006462:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006464:	4b17      	ldr	r3, [pc, #92]	; (80064c4 <HAL_I2C_MspInit+0x19c>)
 8006466:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800646a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800646c:	4815      	ldr	r0, [pc, #84]	; (80064c4 <HAL_I2C_MspInit+0x19c>)
 800646e:	f001 fbfd 	bl	8007c6c <HAL_DMA_Init>
 8006472:	4603      	mov	r3, r0
 8006474:	2b00      	cmp	r3, #0
 8006476:	d001      	beq.n	800647c <HAL_I2C_MspInit+0x154>
    {
      Error_Handler();
 8006478:	f7ff fa8e 	bl	8005998 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	4a11      	ldr	r2, [pc, #68]	; (80064c4 <HAL_I2C_MspInit+0x19c>)
 8006480:	639a      	str	r2, [r3, #56]	; 0x38
 8006482:	4a10      	ldr	r2, [pc, #64]	; (80064c4 <HAL_I2C_MspInit+0x19c>)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8006488:	2200      	movs	r2, #0
 800648a:	2100      	movs	r1, #0
 800648c:	201f      	movs	r0, #31
 800648e:	f001 fba8 	bl	8007be2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8006492:	201f      	movs	r0, #31
 8006494:	f001 fbc1 	bl	8007c1a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8006498:	2200      	movs	r2, #0
 800649a:	2100      	movs	r1, #0
 800649c:	2020      	movs	r0, #32
 800649e:	f001 fba0 	bl	8007be2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80064a2:	2020      	movs	r0, #32
 80064a4:	f001 fbb9 	bl	8007c1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80064a8:	bf00      	nop
 80064aa:	37b0      	adds	r7, #176	; 0xb0
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}
 80064b0:	40005400 	.word	0x40005400
 80064b4:	40021000 	.word	0x40021000
 80064b8:	48000400 	.word	0x48000400
 80064bc:	20000ac4 	.word	0x20000ac4
 80064c0:	4002046c 	.word	0x4002046c
 80064c4:	20000b0c 	.word	0x20000b0c
 80064c8:	4002006c 	.word	0x4002006c

080064cc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b0a4      	sub	sp, #144	; 0x90
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80064d4:	f107 0308 	add.w	r3, r7, #8
 80064d8:	2288      	movs	r2, #136	; 0x88
 80064da:	2100      	movs	r1, #0
 80064dc:	4618      	mov	r0, r3
 80064de:	f009 fa57 	bl	800f990 <memset>
  if(hrtc->Instance==RTC)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a10      	ldr	r2, [pc, #64]	; (8006528 <HAL_RTC_MspInit+0x5c>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d118      	bne.n	800651e <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80064ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80064f0:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80064f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80064f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80064fa:	f107 0308 	add.w	r3, r7, #8
 80064fe:	4618      	mov	r0, r3
 8006500:	f004 fbbe 	bl	800ac80 <HAL_RCCEx_PeriphCLKConfig>
 8006504:	4603      	mov	r3, r0
 8006506:	2b00      	cmp	r3, #0
 8006508:	d001      	beq.n	800650e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800650a:	f7ff fa45 	bl	8005998 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800650e:	4b07      	ldr	r3, [pc, #28]	; (800652c <HAL_RTC_MspInit+0x60>)
 8006510:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006514:	4a05      	ldr	r2, [pc, #20]	; (800652c <HAL_RTC_MspInit+0x60>)
 8006516:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800651a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800651e:	bf00      	nop
 8006520:	3790      	adds	r7, #144	; 0x90
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}
 8006526:	bf00      	nop
 8006528:	40002800 	.word	0x40002800
 800652c:	40021000 	.word	0x40021000

08006530 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b08c      	sub	sp, #48	; 0x30
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006538:	f107 031c 	add.w	r3, r7, #28
 800653c:	2200      	movs	r2, #0
 800653e:	601a      	str	r2, [r3, #0]
 8006540:	605a      	str	r2, [r3, #4]
 8006542:	609a      	str	r2, [r3, #8]
 8006544:	60da      	str	r2, [r3, #12]
 8006546:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a76      	ldr	r2, [pc, #472]	; (8006728 <HAL_SPI_MspInit+0x1f8>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d15b      	bne.n	800660a <HAL_SPI_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8006552:	4b76      	ldr	r3, [pc, #472]	; (800672c <HAL_SPI_MspInit+0x1fc>)
 8006554:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006556:	4a75      	ldr	r2, [pc, #468]	; (800672c <HAL_SPI_MspInit+0x1fc>)
 8006558:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800655c:	6613      	str	r3, [r2, #96]	; 0x60
 800655e:	4b73      	ldr	r3, [pc, #460]	; (800672c <HAL_SPI_MspInit+0x1fc>)
 8006560:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006562:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006566:	61bb      	str	r3, [r7, #24]
 8006568:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800656a:	4b70      	ldr	r3, [pc, #448]	; (800672c <HAL_SPI_MspInit+0x1fc>)
 800656c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800656e:	4a6f      	ldr	r2, [pc, #444]	; (800672c <HAL_SPI_MspInit+0x1fc>)
 8006570:	f043 0301 	orr.w	r3, r3, #1
 8006574:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006576:	4b6d      	ldr	r3, [pc, #436]	; (800672c <HAL_SPI_MspInit+0x1fc>)
 8006578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800657a:	f003 0301 	and.w	r3, r3, #1
 800657e:	617b      	str	r3, [r7, #20]
 8006580:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8006582:	23a0      	movs	r3, #160	; 0xa0
 8006584:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006586:	2302      	movs	r3, #2
 8006588:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800658a:	2300      	movs	r3, #0
 800658c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800658e:	2303      	movs	r3, #3
 8006590:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8006592:	2305      	movs	r3, #5
 8006594:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006596:	f107 031c 	add.w	r3, r7, #28
 800659a:	4619      	mov	r1, r3
 800659c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80065a0:	f001 fde8 	bl	8008174 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Channel4;
 80065a4:	4b62      	ldr	r3, [pc, #392]	; (8006730 <HAL_SPI_MspInit+0x200>)
 80065a6:	4a63      	ldr	r2, [pc, #396]	; (8006734 <HAL_SPI_MspInit+0x204>)
 80065a8:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_4;
 80065aa:	4b61      	ldr	r3, [pc, #388]	; (8006730 <HAL_SPI_MspInit+0x200>)
 80065ac:	2204      	movs	r2, #4
 80065ae:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80065b0:	4b5f      	ldr	r3, [pc, #380]	; (8006730 <HAL_SPI_MspInit+0x200>)
 80065b2:	2210      	movs	r2, #16
 80065b4:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80065b6:	4b5e      	ldr	r3, [pc, #376]	; (8006730 <HAL_SPI_MspInit+0x200>)
 80065b8:	2200      	movs	r2, #0
 80065ba:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80065bc:	4b5c      	ldr	r3, [pc, #368]	; (8006730 <HAL_SPI_MspInit+0x200>)
 80065be:	2280      	movs	r2, #128	; 0x80
 80065c0:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80065c2:	4b5b      	ldr	r3, [pc, #364]	; (8006730 <HAL_SPI_MspInit+0x200>)
 80065c4:	2200      	movs	r2, #0
 80065c6:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80065c8:	4b59      	ldr	r3, [pc, #356]	; (8006730 <HAL_SPI_MspInit+0x200>)
 80065ca:	2200      	movs	r2, #0
 80065cc:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80065ce:	4b58      	ldr	r3, [pc, #352]	; (8006730 <HAL_SPI_MspInit+0x200>)
 80065d0:	2200      	movs	r2, #0
 80065d2:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80065d4:	4b56      	ldr	r3, [pc, #344]	; (8006730 <HAL_SPI_MspInit+0x200>)
 80065d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80065da:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80065dc:	4854      	ldr	r0, [pc, #336]	; (8006730 <HAL_SPI_MspInit+0x200>)
 80065de:	f001 fb45 	bl	8007c6c <HAL_DMA_Init>
 80065e2:	4603      	mov	r3, r0
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d001      	beq.n	80065ec <HAL_SPI_MspInit+0xbc>
    {
      Error_Handler();
 80065e8:	f7ff f9d6 	bl	8005998 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	4a50      	ldr	r2, [pc, #320]	; (8006730 <HAL_SPI_MspInit+0x200>)
 80065f0:	655a      	str	r2, [r3, #84]	; 0x54
 80065f2:	4a4f      	ldr	r2, [pc, #316]	; (8006730 <HAL_SPI_MspInit+0x200>)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80065f8:	2200      	movs	r2, #0
 80065fa:	2100      	movs	r1, #0
 80065fc:	2023      	movs	r0, #35	; 0x23
 80065fe:	f001 faf0 	bl	8007be2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8006602:	2023      	movs	r0, #35	; 0x23
 8006604:	f001 fb09 	bl	8007c1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8006608:	e08a      	b.n	8006720 <HAL_SPI_MspInit+0x1f0>
  else if(hspi->Instance==SPI2)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a4a      	ldr	r2, [pc, #296]	; (8006738 <HAL_SPI_MspInit+0x208>)
 8006610:	4293      	cmp	r3, r2
 8006612:	f040 8085 	bne.w	8006720 <HAL_SPI_MspInit+0x1f0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8006616:	4b45      	ldr	r3, [pc, #276]	; (800672c <HAL_SPI_MspInit+0x1fc>)
 8006618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800661a:	4a44      	ldr	r2, [pc, #272]	; (800672c <HAL_SPI_MspInit+0x1fc>)
 800661c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006620:	6593      	str	r3, [r2, #88]	; 0x58
 8006622:	4b42      	ldr	r3, [pc, #264]	; (800672c <HAL_SPI_MspInit+0x1fc>)
 8006624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006626:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800662a:	613b      	str	r3, [r7, #16]
 800662c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800662e:	4b3f      	ldr	r3, [pc, #252]	; (800672c <HAL_SPI_MspInit+0x1fc>)
 8006630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006632:	4a3e      	ldr	r2, [pc, #248]	; (800672c <HAL_SPI_MspInit+0x1fc>)
 8006634:	f043 0302 	orr.w	r3, r3, #2
 8006638:	64d3      	str	r3, [r2, #76]	; 0x4c
 800663a:	4b3c      	ldr	r3, [pc, #240]	; (800672c <HAL_SPI_MspInit+0x1fc>)
 800663c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800663e:	f003 0302 	and.w	r3, r3, #2
 8006642:	60fb      	str	r3, [r7, #12]
 8006644:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8006646:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800664a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800664c:	2302      	movs	r3, #2
 800664e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006650:	2300      	movs	r3, #0
 8006652:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006654:	2303      	movs	r3, #3
 8006656:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8006658:	2305      	movs	r3, #5
 800665a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800665c:	f107 031c 	add.w	r3, r7, #28
 8006660:	4619      	mov	r1, r3
 8006662:	4836      	ldr	r0, [pc, #216]	; (800673c <HAL_SPI_MspInit+0x20c>)
 8006664:	f001 fd86 	bl	8008174 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Channel4;
 8006668:	4b35      	ldr	r3, [pc, #212]	; (8006740 <HAL_SPI_MspInit+0x210>)
 800666a:	4a36      	ldr	r2, [pc, #216]	; (8006744 <HAL_SPI_MspInit+0x214>)
 800666c:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_1;
 800666e:	4b34      	ldr	r3, [pc, #208]	; (8006740 <HAL_SPI_MspInit+0x210>)
 8006670:	2201      	movs	r2, #1
 8006672:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006674:	4b32      	ldr	r3, [pc, #200]	; (8006740 <HAL_SPI_MspInit+0x210>)
 8006676:	2200      	movs	r2, #0
 8006678:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800667a:	4b31      	ldr	r3, [pc, #196]	; (8006740 <HAL_SPI_MspInit+0x210>)
 800667c:	2200      	movs	r2, #0
 800667e:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006680:	4b2f      	ldr	r3, [pc, #188]	; (8006740 <HAL_SPI_MspInit+0x210>)
 8006682:	2280      	movs	r2, #128	; 0x80
 8006684:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006686:	4b2e      	ldr	r3, [pc, #184]	; (8006740 <HAL_SPI_MspInit+0x210>)
 8006688:	2200      	movs	r2, #0
 800668a:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800668c:	4b2c      	ldr	r3, [pc, #176]	; (8006740 <HAL_SPI_MspInit+0x210>)
 800668e:	2200      	movs	r2, #0
 8006690:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8006692:	4b2b      	ldr	r3, [pc, #172]	; (8006740 <HAL_SPI_MspInit+0x210>)
 8006694:	2200      	movs	r2, #0
 8006696:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8006698:	4b29      	ldr	r3, [pc, #164]	; (8006740 <HAL_SPI_MspInit+0x210>)
 800669a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800669e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80066a0:	4827      	ldr	r0, [pc, #156]	; (8006740 <HAL_SPI_MspInit+0x210>)
 80066a2:	f001 fae3 	bl	8007c6c <HAL_DMA_Init>
 80066a6:	4603      	mov	r3, r0
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d001      	beq.n	80066b0 <HAL_SPI_MspInit+0x180>
      Error_Handler();
 80066ac:	f7ff f974 	bl	8005998 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	4a23      	ldr	r2, [pc, #140]	; (8006740 <HAL_SPI_MspInit+0x210>)
 80066b4:	659a      	str	r2, [r3, #88]	; 0x58
 80066b6:	4a22      	ldr	r2, [pc, #136]	; (8006740 <HAL_SPI_MspInit+0x210>)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_spi2_tx.Instance = DMA1_Channel5;
 80066bc:	4b22      	ldr	r3, [pc, #136]	; (8006748 <HAL_SPI_MspInit+0x218>)
 80066be:	4a23      	ldr	r2, [pc, #140]	; (800674c <HAL_SPI_MspInit+0x21c>)
 80066c0:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_1;
 80066c2:	4b21      	ldr	r3, [pc, #132]	; (8006748 <HAL_SPI_MspInit+0x218>)
 80066c4:	2201      	movs	r2, #1
 80066c6:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80066c8:	4b1f      	ldr	r3, [pc, #124]	; (8006748 <HAL_SPI_MspInit+0x218>)
 80066ca:	2210      	movs	r2, #16
 80066cc:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80066ce:	4b1e      	ldr	r3, [pc, #120]	; (8006748 <HAL_SPI_MspInit+0x218>)
 80066d0:	2200      	movs	r2, #0
 80066d2:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80066d4:	4b1c      	ldr	r3, [pc, #112]	; (8006748 <HAL_SPI_MspInit+0x218>)
 80066d6:	2280      	movs	r2, #128	; 0x80
 80066d8:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80066da:	4b1b      	ldr	r3, [pc, #108]	; (8006748 <HAL_SPI_MspInit+0x218>)
 80066dc:	2200      	movs	r2, #0
 80066de:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80066e0:	4b19      	ldr	r3, [pc, #100]	; (8006748 <HAL_SPI_MspInit+0x218>)
 80066e2:	2200      	movs	r2, #0
 80066e4:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80066e6:	4b18      	ldr	r3, [pc, #96]	; (8006748 <HAL_SPI_MspInit+0x218>)
 80066e8:	2200      	movs	r2, #0
 80066ea:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80066ec:	4b16      	ldr	r3, [pc, #88]	; (8006748 <HAL_SPI_MspInit+0x218>)
 80066ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80066f2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80066f4:	4814      	ldr	r0, [pc, #80]	; (8006748 <HAL_SPI_MspInit+0x218>)
 80066f6:	f001 fab9 	bl	8007c6c <HAL_DMA_Init>
 80066fa:	4603      	mov	r3, r0
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d001      	beq.n	8006704 <HAL_SPI_MspInit+0x1d4>
      Error_Handler();
 8006700:	f7ff f94a 	bl	8005998 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	4a10      	ldr	r2, [pc, #64]	; (8006748 <HAL_SPI_MspInit+0x218>)
 8006708:	655a      	str	r2, [r3, #84]	; 0x54
 800670a:	4a0f      	ldr	r2, [pc, #60]	; (8006748 <HAL_SPI_MspInit+0x218>)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8006710:	2200      	movs	r2, #0
 8006712:	2100      	movs	r1, #0
 8006714:	2024      	movs	r0, #36	; 0x24
 8006716:	f001 fa64 	bl	8007be2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800671a:	2024      	movs	r0, #36	; 0x24
 800671c:	f001 fa7d 	bl	8007c1a <HAL_NVIC_EnableIRQ>
}
 8006720:	bf00      	nop
 8006722:	3730      	adds	r7, #48	; 0x30
 8006724:	46bd      	mov	sp, r7
 8006726:	bd80      	pop	{r7, pc}
 8006728:	40013000 	.word	0x40013000
 800672c:	40021000 	.word	0x40021000
 8006730:	20000c40 	.word	0x20000c40
 8006734:	40020444 	.word	0x40020444
 8006738:	40003800 	.word	0x40003800
 800673c:	48000400 	.word	0x48000400
 8006740:	20000c88 	.word	0x20000c88
 8006744:	40020044 	.word	0x40020044
 8006748:	20000cd0 	.word	0x20000cd0
 800674c:	40020058 	.word	0x40020058

08006750 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b084      	sub	sp, #16
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a1a      	ldr	r2, [pc, #104]	; (80067c8 <HAL_TIM_Base_MspInit+0x78>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d114      	bne.n	800678c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8006762:	4b1a      	ldr	r3, [pc, #104]	; (80067cc <HAL_TIM_Base_MspInit+0x7c>)
 8006764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006766:	4a19      	ldr	r2, [pc, #100]	; (80067cc <HAL_TIM_Base_MspInit+0x7c>)
 8006768:	f043 0304 	orr.w	r3, r3, #4
 800676c:	6593      	str	r3, [r2, #88]	; 0x58
 800676e:	4b17      	ldr	r3, [pc, #92]	; (80067cc <HAL_TIM_Base_MspInit+0x7c>)
 8006770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006772:	f003 0304 	and.w	r3, r3, #4
 8006776:	60fb      	str	r3, [r7, #12]
 8006778:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 4, 0);
 800677a:	2200      	movs	r2, #0
 800677c:	2104      	movs	r1, #4
 800677e:	201e      	movs	r0, #30
 8006780:	f001 fa2f 	bl	8007be2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8006784:	201e      	movs	r0, #30
 8006786:	f001 fa48 	bl	8007c1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800678a:	e018      	b.n	80067be <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM6)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a0f      	ldr	r2, [pc, #60]	; (80067d0 <HAL_TIM_Base_MspInit+0x80>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d113      	bne.n	80067be <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8006796:	4b0d      	ldr	r3, [pc, #52]	; (80067cc <HAL_TIM_Base_MspInit+0x7c>)
 8006798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800679a:	4a0c      	ldr	r2, [pc, #48]	; (80067cc <HAL_TIM_Base_MspInit+0x7c>)
 800679c:	f043 0310 	orr.w	r3, r3, #16
 80067a0:	6593      	str	r3, [r2, #88]	; 0x58
 80067a2:	4b0a      	ldr	r3, [pc, #40]	; (80067cc <HAL_TIM_Base_MspInit+0x7c>)
 80067a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067a6:	f003 0310 	and.w	r3, r3, #16
 80067aa:	60bb      	str	r3, [r7, #8]
 80067ac:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 2, 0);
 80067ae:	2200      	movs	r2, #0
 80067b0:	2102      	movs	r1, #2
 80067b2:	2036      	movs	r0, #54	; 0x36
 80067b4:	f001 fa15 	bl	8007be2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80067b8:	2036      	movs	r0, #54	; 0x36
 80067ba:	f001 fa2e 	bl	8007c1a <HAL_NVIC_EnableIRQ>
}
 80067be:	bf00      	nop
 80067c0:	3710      	adds	r7, #16
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}
 80067c6:	bf00      	nop
 80067c8:	40000800 	.word	0x40000800
 80067cc:	40021000 	.word	0x40021000
 80067d0:	40001000 	.word	0x40001000

080067d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b0ae      	sub	sp, #184	; 0xb8
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80067dc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80067e0:	2200      	movs	r2, #0
 80067e2:	601a      	str	r2, [r3, #0]
 80067e4:	605a      	str	r2, [r3, #4]
 80067e6:	609a      	str	r2, [r3, #8]
 80067e8:	60da      	str	r2, [r3, #12]
 80067ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80067ec:	f107 031c 	add.w	r3, r7, #28
 80067f0:	2288      	movs	r2, #136	; 0x88
 80067f2:	2100      	movs	r1, #0
 80067f4:	4618      	mov	r0, r3
 80067f6:	f009 f8cb 	bl	800f990 <memset>
  if(huart->Instance==USART2)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a74      	ldr	r2, [pc, #464]	; (80069d0 <HAL_UART_MspInit+0x1fc>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d16e      	bne.n	80068e2 <HAL_UART_MspInit+0x10e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8006804:	2302      	movs	r3, #2
 8006806:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8006808:	2300      	movs	r3, #0
 800680a:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800680c:	f107 031c 	add.w	r3, r7, #28
 8006810:	4618      	mov	r0, r3
 8006812:	f004 fa35 	bl	800ac80 <HAL_RCCEx_PeriphCLKConfig>
 8006816:	4603      	mov	r3, r0
 8006818:	2b00      	cmp	r3, #0
 800681a:	d001      	beq.n	8006820 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800681c:	f7ff f8bc 	bl	8005998 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8006820:	4b6c      	ldr	r3, [pc, #432]	; (80069d4 <HAL_UART_MspInit+0x200>)
 8006822:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006824:	4a6b      	ldr	r2, [pc, #428]	; (80069d4 <HAL_UART_MspInit+0x200>)
 8006826:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800682a:	6593      	str	r3, [r2, #88]	; 0x58
 800682c:	4b69      	ldr	r3, [pc, #420]	; (80069d4 <HAL_UART_MspInit+0x200>)
 800682e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006830:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006834:	61bb      	str	r3, [r7, #24]
 8006836:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006838:	4b66      	ldr	r3, [pc, #408]	; (80069d4 <HAL_UART_MspInit+0x200>)
 800683a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800683c:	4a65      	ldr	r2, [pc, #404]	; (80069d4 <HAL_UART_MspInit+0x200>)
 800683e:	f043 0301 	orr.w	r3, r3, #1
 8006842:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006844:	4b63      	ldr	r3, [pc, #396]	; (80069d4 <HAL_UART_MspInit+0x200>)
 8006846:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006848:	f003 0301 	and.w	r3, r3, #1
 800684c:	617b      	str	r3, [r7, #20]
 800684e:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = LOG_TX_Pin|LOG_RX_Pin;
 8006850:	230c      	movs	r3, #12
 8006852:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006856:	2302      	movs	r3, #2
 8006858:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800685c:	2300      	movs	r3, #0
 800685e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006862:	2303      	movs	r3, #3
 8006864:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006868:	2307      	movs	r3, #7
 800686a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800686e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006872:	4619      	mov	r1, r3
 8006874:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006878:	f001 fc7c 	bl	8008174 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 800687c:	4b56      	ldr	r3, [pc, #344]	; (80069d8 <HAL_UART_MspInit+0x204>)
 800687e:	4a57      	ldr	r2, [pc, #348]	; (80069dc <HAL_UART_MspInit+0x208>)
 8006880:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8006882:	4b55      	ldr	r3, [pc, #340]	; (80069d8 <HAL_UART_MspInit+0x204>)
 8006884:	2202      	movs	r2, #2
 8006886:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006888:	4b53      	ldr	r3, [pc, #332]	; (80069d8 <HAL_UART_MspInit+0x204>)
 800688a:	2210      	movs	r2, #16
 800688c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800688e:	4b52      	ldr	r3, [pc, #328]	; (80069d8 <HAL_UART_MspInit+0x204>)
 8006890:	2200      	movs	r2, #0
 8006892:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006894:	4b50      	ldr	r3, [pc, #320]	; (80069d8 <HAL_UART_MspInit+0x204>)
 8006896:	2280      	movs	r2, #128	; 0x80
 8006898:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800689a:	4b4f      	ldr	r3, [pc, #316]	; (80069d8 <HAL_UART_MspInit+0x204>)
 800689c:	2200      	movs	r2, #0
 800689e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80068a0:	4b4d      	ldr	r3, [pc, #308]	; (80069d8 <HAL_UART_MspInit+0x204>)
 80068a2:	2200      	movs	r2, #0
 80068a4:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80068a6:	4b4c      	ldr	r3, [pc, #304]	; (80069d8 <HAL_UART_MspInit+0x204>)
 80068a8:	2200      	movs	r2, #0
 80068aa:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80068ac:	4b4a      	ldr	r3, [pc, #296]	; (80069d8 <HAL_UART_MspInit+0x204>)
 80068ae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80068b2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80068b4:	4848      	ldr	r0, [pc, #288]	; (80069d8 <HAL_UART_MspInit+0x204>)
 80068b6:	f001 f9d9 	bl	8007c6c <HAL_DMA_Init>
 80068ba:	4603      	mov	r3, r0
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d001      	beq.n	80068c4 <HAL_UART_MspInit+0xf0>
    {
      Error_Handler();
 80068c0:	f7ff f86a 	bl	8005998 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	4a44      	ldr	r2, [pc, #272]	; (80069d8 <HAL_UART_MspInit+0x204>)
 80068c8:	66da      	str	r2, [r3, #108]	; 0x6c
 80068ca:	4a43      	ldr	r2, [pc, #268]	; (80069d8 <HAL_UART_MspInit+0x204>)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 80068d0:	2200      	movs	r2, #0
 80068d2:	2101      	movs	r1, #1
 80068d4:	2026      	movs	r0, #38	; 0x26
 80068d6:	f001 f984 	bl	8007be2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80068da:	2026      	movs	r0, #38	; 0x26
 80068dc:	f001 f99d 	bl	8007c1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80068e0:	e071      	b.n	80069c6 <HAL_UART_MspInit+0x1f2>
  else if(huart->Instance==USART3)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a3e      	ldr	r2, [pc, #248]	; (80069e0 <HAL_UART_MspInit+0x20c>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d16c      	bne.n	80069c6 <HAL_UART_MspInit+0x1f2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80068ec:	2304      	movs	r3, #4
 80068ee:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80068f0:	2300      	movs	r3, #0
 80068f2:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80068f4:	f107 031c 	add.w	r3, r7, #28
 80068f8:	4618      	mov	r0, r3
 80068fa:	f004 f9c1 	bl	800ac80 <HAL_RCCEx_PeriphCLKConfig>
 80068fe:	4603      	mov	r3, r0
 8006900:	2b00      	cmp	r3, #0
 8006902:	d001      	beq.n	8006908 <HAL_UART_MspInit+0x134>
      Error_Handler();
 8006904:	f7ff f848 	bl	8005998 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8006908:	4b32      	ldr	r3, [pc, #200]	; (80069d4 <HAL_UART_MspInit+0x200>)
 800690a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800690c:	4a31      	ldr	r2, [pc, #196]	; (80069d4 <HAL_UART_MspInit+0x200>)
 800690e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006912:	6593      	str	r3, [r2, #88]	; 0x58
 8006914:	4b2f      	ldr	r3, [pc, #188]	; (80069d4 <HAL_UART_MspInit+0x200>)
 8006916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006918:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800691c:	613b      	str	r3, [r7, #16]
 800691e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006920:	4b2c      	ldr	r3, [pc, #176]	; (80069d4 <HAL_UART_MspInit+0x200>)
 8006922:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006924:	4a2b      	ldr	r2, [pc, #172]	; (80069d4 <HAL_UART_MspInit+0x200>)
 8006926:	f043 0304 	orr.w	r3, r3, #4
 800692a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800692c:	4b29      	ldr	r3, [pc, #164]	; (80069d4 <HAL_UART_MspInit+0x200>)
 800692e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006930:	f003 0304 	and.w	r3, r3, #4
 8006934:	60fb      	str	r3, [r7, #12]
 8006936:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8006938:	2330      	movs	r3, #48	; 0x30
 800693a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800693e:	2302      	movs	r3, #2
 8006940:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006944:	2300      	movs	r3, #0
 8006946:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800694a:	2303      	movs	r3, #3
 800694c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006950:	2307      	movs	r3, #7
 8006952:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006956:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800695a:	4619      	mov	r1, r3
 800695c:	4821      	ldr	r0, [pc, #132]	; (80069e4 <HAL_UART_MspInit+0x210>)
 800695e:	f001 fc09 	bl	8008174 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8006962:	4b21      	ldr	r3, [pc, #132]	; (80069e8 <HAL_UART_MspInit+0x214>)
 8006964:	4a21      	ldr	r2, [pc, #132]	; (80069ec <HAL_UART_MspInit+0x218>)
 8006966:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_2;
 8006968:	4b1f      	ldr	r3, [pc, #124]	; (80069e8 <HAL_UART_MspInit+0x214>)
 800696a:	2202      	movs	r2, #2
 800696c:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800696e:	4b1e      	ldr	r3, [pc, #120]	; (80069e8 <HAL_UART_MspInit+0x214>)
 8006970:	2210      	movs	r2, #16
 8006972:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006974:	4b1c      	ldr	r3, [pc, #112]	; (80069e8 <HAL_UART_MspInit+0x214>)
 8006976:	2200      	movs	r2, #0
 8006978:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800697a:	4b1b      	ldr	r3, [pc, #108]	; (80069e8 <HAL_UART_MspInit+0x214>)
 800697c:	2280      	movs	r2, #128	; 0x80
 800697e:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006980:	4b19      	ldr	r3, [pc, #100]	; (80069e8 <HAL_UART_MspInit+0x214>)
 8006982:	2200      	movs	r2, #0
 8006984:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006986:	4b18      	ldr	r3, [pc, #96]	; (80069e8 <HAL_UART_MspInit+0x214>)
 8006988:	2200      	movs	r2, #0
 800698a:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800698c:	4b16      	ldr	r3, [pc, #88]	; (80069e8 <HAL_UART_MspInit+0x214>)
 800698e:	2200      	movs	r2, #0
 8006990:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006992:	4b15      	ldr	r3, [pc, #84]	; (80069e8 <HAL_UART_MspInit+0x214>)
 8006994:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006998:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800699a:	4813      	ldr	r0, [pc, #76]	; (80069e8 <HAL_UART_MspInit+0x214>)
 800699c:	f001 f966 	bl	8007c6c <HAL_DMA_Init>
 80069a0:	4603      	mov	r3, r0
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d001      	beq.n	80069aa <HAL_UART_MspInit+0x1d6>
      Error_Handler();
 80069a6:	f7fe fff7 	bl	8005998 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	4a0e      	ldr	r2, [pc, #56]	; (80069e8 <HAL_UART_MspInit+0x214>)
 80069ae:	66da      	str	r2, [r3, #108]	; 0x6c
 80069b0:	4a0d      	ldr	r2, [pc, #52]	; (80069e8 <HAL_UART_MspInit+0x214>)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80069b6:	2200      	movs	r2, #0
 80069b8:	2100      	movs	r1, #0
 80069ba:	2027      	movs	r0, #39	; 0x27
 80069bc:	f001 f911 	bl	8007be2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80069c0:	2027      	movs	r0, #39	; 0x27
 80069c2:	f001 f92a 	bl	8007c1a <HAL_NVIC_EnableIRQ>
}
 80069c6:	bf00      	nop
 80069c8:	37b8      	adds	r7, #184	; 0xb8
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}
 80069ce:	bf00      	nop
 80069d0:	40004400 	.word	0x40004400
 80069d4:	40021000 	.word	0x40021000
 80069d8:	20000eb8 	.word	0x20000eb8
 80069dc:	40020080 	.word	0x40020080
 80069e0:	40004800 	.word	0x40004800
 80069e4:	48000800 	.word	0x48000800
 80069e8:	20000f00 	.word	0x20000f00
 80069ec:	4002001c 	.word	0x4002001c

080069f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80069f0:	b480      	push	{r7}
 80069f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80069f4:	e7fe      	b.n	80069f4 <NMI_Handler+0x4>

080069f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80069f6:	b480      	push	{r7}
 80069f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80069fa:	e7fe      	b.n	80069fa <HardFault_Handler+0x4>

080069fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80069fc:	b480      	push	{r7}
 80069fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006a00:	e7fe      	b.n	8006a00 <MemManage_Handler+0x4>

08006a02 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006a02:	b480      	push	{r7}
 8006a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006a06:	e7fe      	b.n	8006a06 <BusFault_Handler+0x4>

08006a08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006a0c:	e7fe      	b.n	8006a0c <UsageFault_Handler+0x4>

08006a0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006a0e:	b480      	push	{r7}
 8006a10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006a12:	bf00      	nop
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	4770      	bx	lr

08006a1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006a20:	bf00      	nop
 8006a22:	46bd      	mov	sp, r7
 8006a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a28:	4770      	bx	lr

08006a2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006a2a:	b480      	push	{r7}
 8006a2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006a2e:	bf00      	nop
 8006a30:	46bd      	mov	sp, r7
 8006a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a36:	4770      	bx	lr

08006a38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006a3c:	f000 ff6e 	bl	800791c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006a40:	bf00      	nop
 8006a42:	bd80      	pop	{r7, pc}

08006a44 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY0_Pin);
 8006a48:	2002      	movs	r0, #2
 8006a4a:	f001 fd87 	bl	800855c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8006a4e:	bf00      	nop
 8006a50:	bd80      	pop	{r7, pc}

08006a52 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8006a52:	b580      	push	{r7, lr}
 8006a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY1_Pin);
 8006a56:	2004      	movs	r0, #4
 8006a58:	f001 fd80 	bl	800855c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8006a5c:	bf00      	nop
 8006a5e:	bd80      	pop	{r7, pc}

08006a60 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8006a64:	4802      	ldr	r0, [pc, #8]	; (8006a70 <DMA1_Channel2_IRQHandler+0x10>)
 8006a66:	f001 fa98 	bl	8007f9a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8006a6a:	bf00      	nop
 8006a6c:	bd80      	pop	{r7, pc}
 8006a6e:	bf00      	nop
 8006a70:	20000f00 	.word	0x20000f00

08006a74 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8006a78:	4802      	ldr	r0, [pc, #8]	; (8006a84 <DMA1_Channel4_IRQHandler+0x10>)
 8006a7a:	f001 fa8e 	bl	8007f9a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8006a7e:	bf00      	nop
 8006a80:	bd80      	pop	{r7, pc}
 8006a82:	bf00      	nop
 8006a84:	20000c88 	.word	0x20000c88

08006a88 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8006a8c:	4802      	ldr	r0, [pc, #8]	; (8006a98 <DMA1_Channel5_IRQHandler+0x10>)
 8006a8e:	f001 fa84 	bl	8007f9a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8006a92:	bf00      	nop
 8006a94:	bd80      	pop	{r7, pc}
 8006a96:	bf00      	nop
 8006a98:	20000cd0 	.word	0x20000cd0

08006a9c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8006aa0:	4802      	ldr	r0, [pc, #8]	; (8006aac <DMA1_Channel6_IRQHandler+0x10>)
 8006aa2:	f001 fa7a 	bl	8007f9a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8006aa6:	bf00      	nop
 8006aa8:	bd80      	pop	{r7, pc}
 8006aaa:	bf00      	nop
 8006aac:	20000b0c 	.word	0x20000b0c

08006ab0 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8006ab4:	4802      	ldr	r0, [pc, #8]	; (8006ac0 <DMA1_Channel7_IRQHandler+0x10>)
 8006ab6:	f001 fa70 	bl	8007f9a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8006aba:	bf00      	nop
 8006abc:	bd80      	pop	{r7, pc}
 8006abe:	bf00      	nop
 8006ac0:	20000eb8 	.word	0x20000eb8

08006ac4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8006ac8:	4802      	ldr	r0, [pc, #8]	; (8006ad4 <TIM4_IRQHandler+0x10>)
 8006aca:	f006 fdb0 	bl	800d62e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8006ace:	bf00      	nop
 8006ad0:	bd80      	pop	{r7, pc}
 8006ad2:	bf00      	nop
 8006ad4:	20000d18 	.word	0x20000d18

08006ad8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8006adc:	4802      	ldr	r0, [pc, #8]	; (8006ae8 <I2C1_EV_IRQHandler+0x10>)
 8006ade:	f002 f907 	bl	8008cf0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8006ae2:	bf00      	nop
 8006ae4:	bd80      	pop	{r7, pc}
 8006ae6:	bf00      	nop
 8006ae8:	20000a70 	.word	0x20000a70

08006aec <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8006af0:	4802      	ldr	r0, [pc, #8]	; (8006afc <I2C1_ER_IRQHandler+0x10>)
 8006af2:	f002 f917 	bl	8008d24 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8006af6:	bf00      	nop
 8006af8:	bd80      	pop	{r7, pc}
 8006afa:	bf00      	nop
 8006afc:	20000a70 	.word	0x20000a70

08006b00 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8006b04:	4802      	ldr	r0, [pc, #8]	; (8006b10 <SPI1_IRQHandler+0x10>)
 8006b06:	f006 f865 	bl	800cbd4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8006b0a:	bf00      	nop
 8006b0c:	bd80      	pop	{r7, pc}
 8006b0e:	bf00      	nop
 8006b10:	20000b78 	.word	0x20000b78

08006b14 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8006b18:	4802      	ldr	r0, [pc, #8]	; (8006b24 <SPI2_IRQHandler+0x10>)
 8006b1a:	f006 f85b 	bl	800cbd4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8006b1e:	bf00      	nop
 8006b20:	bd80      	pop	{r7, pc}
 8006b22:	bf00      	nop
 8006b24:	20000bdc 	.word	0x20000bdc

08006b28 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8006b2c:	4802      	ldr	r0, [pc, #8]	; (8006b38 <USART2_IRQHandler+0x10>)
 8006b2e:	f007 fb31 	bl	800e194 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8006b32:	bf00      	nop
 8006b34:	bd80      	pop	{r7, pc}
 8006b36:	bf00      	nop
 8006b38:	20000db0 	.word	0x20000db0

08006b3c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8006b40:	4802      	ldr	r0, [pc, #8]	; (8006b4c <USART3_IRQHandler+0x10>)
 8006b42:	f007 fb27 	bl	800e194 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8006b46:	bf00      	nop
 8006b48:	bd80      	pop	{r7, pc}
 8006b4a:	bf00      	nop
 8006b4c:	20000e34 	.word	0x20000e34

08006b50 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8006b54:	4802      	ldr	r0, [pc, #8]	; (8006b60 <TIM6_DAC_IRQHandler+0x10>)
 8006b56:	f006 fd6a 	bl	800d62e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8006b5a:	bf00      	nop
 8006b5c:	bd80      	pop	{r7, pc}
 8006b5e:	bf00      	nop
 8006b60:	20000d64 	.word	0x20000d64

08006b64 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8006b68:	4802      	ldr	r0, [pc, #8]	; (8006b74 <DMA2_Channel4_IRQHandler+0x10>)
 8006b6a:	f001 fa16 	bl	8007f9a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 8006b6e:	bf00      	nop
 8006b70:	bd80      	pop	{r7, pc}
 8006b72:	bf00      	nop
 8006b74:	20000c40 	.word	0x20000c40

08006b78 <DMA2_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA2 channel6 global interrupt.
  */
void DMA2_Channel6_IRQHandler(void)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel6_IRQn 0 */

  /* USER CODE END DMA2_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8006b7c:	4802      	ldr	r0, [pc, #8]	; (8006b88 <DMA2_Channel6_IRQHandler+0x10>)
 8006b7e:	f001 fa0c 	bl	8007f9a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel6_IRQn 1 */

  /* USER CODE END DMA2_Channel6_IRQn 1 */
}
 8006b82:	bf00      	nop
 8006b84:	bd80      	pop	{r7, pc}
 8006b86:	bf00      	nop
 8006b88:	20000ac4 	.word	0x20000ac4

08006b8c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	af00      	add	r7, sp, #0
	return 1;
 8006b90:	2301      	movs	r3, #1
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	46bd      	mov	sp, r7
 8006b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9a:	4770      	bx	lr

08006b9c <_kill>:

int _kill(int pid, int sig)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b082      	sub	sp, #8
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
 8006ba4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8006ba6:	f008 fdff 	bl	800f7a8 <__errno>
 8006baa:	4603      	mov	r3, r0
 8006bac:	2216      	movs	r2, #22
 8006bae:	601a      	str	r2, [r3, #0]
	return -1;
 8006bb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	3708      	adds	r7, #8
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd80      	pop	{r7, pc}

08006bbc <_exit>:

void _exit (int status)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b082      	sub	sp, #8
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8006bc4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006bc8:	6878      	ldr	r0, [r7, #4]
 8006bca:	f7ff ffe7 	bl	8006b9c <_kill>
	while (1) {}		/* Make sure we hang here */
 8006bce:	e7fe      	b.n	8006bce <_exit+0x12>

08006bd0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b086      	sub	sp, #24
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	60f8      	str	r0, [r7, #12]
 8006bd8:	60b9      	str	r1, [r7, #8]
 8006bda:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006bdc:	2300      	movs	r3, #0
 8006bde:	617b      	str	r3, [r7, #20]
 8006be0:	e00a      	b.n	8006bf8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8006be2:	f3af 8000 	nop.w
 8006be6:	4601      	mov	r1, r0
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	1c5a      	adds	r2, r3, #1
 8006bec:	60ba      	str	r2, [r7, #8]
 8006bee:	b2ca      	uxtb	r2, r1
 8006bf0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	3301      	adds	r3, #1
 8006bf6:	617b      	str	r3, [r7, #20]
 8006bf8:	697a      	ldr	r2, [r7, #20]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	429a      	cmp	r2, r3
 8006bfe:	dbf0      	blt.n	8006be2 <_read+0x12>
	}

return len;
 8006c00:	687b      	ldr	r3, [r7, #4]
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	3718      	adds	r7, #24
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}

08006c0a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006c0a:	b580      	push	{r7, lr}
 8006c0c:	b086      	sub	sp, #24
 8006c0e:	af00      	add	r7, sp, #0
 8006c10:	60f8      	str	r0, [r7, #12]
 8006c12:	60b9      	str	r1, [r7, #8]
 8006c14:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006c16:	2300      	movs	r3, #0
 8006c18:	617b      	str	r3, [r7, #20]
 8006c1a:	e009      	b.n	8006c30 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	1c5a      	adds	r2, r3, #1
 8006c20:	60ba      	str	r2, [r7, #8]
 8006c22:	781b      	ldrb	r3, [r3, #0]
 8006c24:	4618      	mov	r0, r3
 8006c26:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006c2a:	697b      	ldr	r3, [r7, #20]
 8006c2c:	3301      	adds	r3, #1
 8006c2e:	617b      	str	r3, [r7, #20]
 8006c30:	697a      	ldr	r2, [r7, #20]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	429a      	cmp	r2, r3
 8006c36:	dbf1      	blt.n	8006c1c <_write+0x12>
	}
	return len;
 8006c38:	687b      	ldr	r3, [r7, #4]
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3718      	adds	r7, #24
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}

08006c42 <_close>:

int _close(int file)
{
 8006c42:	b480      	push	{r7}
 8006c44:	b083      	sub	sp, #12
 8006c46:	af00      	add	r7, sp, #0
 8006c48:	6078      	str	r0, [r7, #4]
	return -1;
 8006c4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	370c      	adds	r7, #12
 8006c52:	46bd      	mov	sp, r7
 8006c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c58:	4770      	bx	lr

08006c5a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006c5a:	b480      	push	{r7}
 8006c5c:	b083      	sub	sp, #12
 8006c5e:	af00      	add	r7, sp, #0
 8006c60:	6078      	str	r0, [r7, #4]
 8006c62:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006c6a:	605a      	str	r2, [r3, #4]
	return 0;
 8006c6c:	2300      	movs	r3, #0
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	370c      	adds	r7, #12
 8006c72:	46bd      	mov	sp, r7
 8006c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c78:	4770      	bx	lr

08006c7a <_isatty>:

int _isatty(int file)
{
 8006c7a:	b480      	push	{r7}
 8006c7c:	b083      	sub	sp, #12
 8006c7e:	af00      	add	r7, sp, #0
 8006c80:	6078      	str	r0, [r7, #4]
	return 1;
 8006c82:	2301      	movs	r3, #1
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	370c      	adds	r7, #12
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8e:	4770      	bx	lr

08006c90 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b085      	sub	sp, #20
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	60f8      	str	r0, [r7, #12]
 8006c98:	60b9      	str	r1, [r7, #8]
 8006c9a:	607a      	str	r2, [r7, #4]
	return 0;
 8006c9c:	2300      	movs	r3, #0
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	3714      	adds	r7, #20
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca8:	4770      	bx	lr
	...

08006cac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b086      	sub	sp, #24
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006cb4:	4a14      	ldr	r2, [pc, #80]	; (8006d08 <_sbrk+0x5c>)
 8006cb6:	4b15      	ldr	r3, [pc, #84]	; (8006d0c <_sbrk+0x60>)
 8006cb8:	1ad3      	subs	r3, r2, r3
 8006cba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006cbc:	697b      	ldr	r3, [r7, #20]
 8006cbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006cc0:	4b13      	ldr	r3, [pc, #76]	; (8006d10 <_sbrk+0x64>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d102      	bne.n	8006cce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006cc8:	4b11      	ldr	r3, [pc, #68]	; (8006d10 <_sbrk+0x64>)
 8006cca:	4a12      	ldr	r2, [pc, #72]	; (8006d14 <_sbrk+0x68>)
 8006ccc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006cce:	4b10      	ldr	r3, [pc, #64]	; (8006d10 <_sbrk+0x64>)
 8006cd0:	681a      	ldr	r2, [r3, #0]
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	4413      	add	r3, r2
 8006cd6:	693a      	ldr	r2, [r7, #16]
 8006cd8:	429a      	cmp	r2, r3
 8006cda:	d207      	bcs.n	8006cec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006cdc:	f008 fd64 	bl	800f7a8 <__errno>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	220c      	movs	r2, #12
 8006ce4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006ce6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006cea:	e009      	b.n	8006d00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006cec:	4b08      	ldr	r3, [pc, #32]	; (8006d10 <_sbrk+0x64>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006cf2:	4b07      	ldr	r3, [pc, #28]	; (8006d10 <_sbrk+0x64>)
 8006cf4:	681a      	ldr	r2, [r3, #0]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	4413      	add	r3, r2
 8006cfa:	4a05      	ldr	r2, [pc, #20]	; (8006d10 <_sbrk+0x64>)
 8006cfc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	3718      	adds	r7, #24
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}
 8006d08:	20018000 	.word	0x20018000
 8006d0c:	00000c00 	.word	0x00000c00
 8006d10:	200037a8 	.word	0x200037a8
 8006d14:	200038f0 	.word	0x200038f0

08006d18 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8006d1c:	4b06      	ldr	r3, [pc, #24]	; (8006d38 <SystemInit+0x20>)
 8006d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d22:	4a05      	ldr	r2, [pc, #20]	; (8006d38 <SystemInit+0x20>)
 8006d24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006d28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8006d2c:	bf00      	nop
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d34:	4770      	bx	lr
 8006d36:	bf00      	nop
 8006d38:	e000ed00 	.word	0xe000ed00

08006d3c <W25_SELECT>:

extern void Report(const uint8_t addTime, const char *fmt, ...);

//------------------------------------------------------------------------------------------

void W25_SELECT()   { W25_SEL(); } //HAL_GPIO_WritePin(W25_CS_GPIO_Port, W25_CS_Pin, GPIO_PIN_RESET);//set to 0
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	af00      	add	r7, sp, #0
 8006d40:	2200      	movs	r2, #0
 8006d42:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006d46:	4802      	ldr	r0, [pc, #8]	; (8006d50 <W25_SELECT+0x14>)
 8006d48:	f001 fbd6 	bl	80084f8 <HAL_GPIO_WritePin>
 8006d4c:	bf00      	nop
 8006d4e:	bd80      	pop	{r7, pc}
 8006d50:	48000400 	.word	0x48000400

08006d54 <W25_UNSELECT>:
void W25_UNSELECT() { W25_UNSEL(); } //HAL_GPIO_WritePin(W25_CS_GPIO_Port, W25_CS_Pin, GPIO_PIN_SET);//set to 1
 8006d54:	b580      	push	{r7, lr}
 8006d56:	af00      	add	r7, sp, #0
 8006d58:	2201      	movs	r2, #1
 8006d5a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006d5e:	4802      	ldr	r0, [pc, #8]	; (8006d68 <W25_UNSELECT+0x14>)
 8006d60:	f001 fbca 	bl	80084f8 <HAL_GPIO_WritePin>
 8006d64:	bf00      	nop
 8006d66:	bd80      	pop	{r7, pc}
 8006d68:	48000400 	.word	0x48000400

08006d6c <W25qxx_Spi>:
//void W25_SELECT()   { HAL_GPIO_WritePin(W25_CS_GPIO_Port, W25_CS_Pin, GPIO_PIN_RESET); }//set to 0
//void W25_UNSELECT() { HAL_GPIO_WritePin(W25_CS_GPIO_Port, W25_CS_Pin, GPIO_PIN_SET); }//set to 1

//------------------------------------------------------------------------------------------
uint8_t W25qxx_Spi(uint8_t Data)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b086      	sub	sp, #24
 8006d70:	af02      	add	r7, sp, #8
 8006d72:	4603      	mov	r3, r0
 8006d74:	71fb      	strb	r3, [r7, #7]
uint8_t ret;

    if (HAL_SPI_TransmitReceive(portFLASH, &Data, &ret, 1, min_wait_ms) != HAL_OK) devError |= devSPI;
 8006d76:	4b0c      	ldr	r3, [pc, #48]	; (8006da8 <W25qxx_Spi+0x3c>)
 8006d78:	6818      	ldr	r0, [r3, #0]
 8006d7a:	23fa      	movs	r3, #250	; 0xfa
 8006d7c:	f107 020f 	add.w	r2, r7, #15
 8006d80:	1df9      	adds	r1, r7, #7
 8006d82:	9300      	str	r3, [sp, #0]
 8006d84:	2301      	movs	r3, #1
 8006d86:	f005 fa92 	bl	800c2ae <HAL_SPI_TransmitReceive>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d006      	beq.n	8006d9e <W25qxx_Spi+0x32>
 8006d90:	4b06      	ldr	r3, [pc, #24]	; (8006dac <W25qxx_Spi+0x40>)
 8006d92:	881b      	ldrh	r3, [r3, #0]
 8006d94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d98:	b29a      	uxth	r2, r3
 8006d9a:	4b04      	ldr	r3, [pc, #16]	; (8006dac <W25qxx_Spi+0x40>)
 8006d9c:	801a      	strh	r2, [r3, #0]

    return ret;
 8006d9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	3710      	adds	r7, #16
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}
 8006da8:	2000000c 	.word	0x2000000c
 8006dac:	20001bc8 	.word	0x20001bc8

08006db0 <W25qxx_Reset>:
//------------------------------------------------------------------------------------------
void W25qxx_Reset(void)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	af00      	add	r7, sp, #0
	W25qxx_Delay(100);
 8006db4:	2064      	movs	r0, #100	; 0x64
 8006db6:	f000 fdd1 	bl	800795c <HAL_Delay>

	W25_SELECT();
 8006dba:	f7ff ffbf 	bl	8006d3c <W25_SELECT>
		W25qxx_Spi(EN_RESET);
 8006dbe:	2066      	movs	r0, #102	; 0x66
 8006dc0:	f7ff ffd4 	bl	8006d6c <W25qxx_Spi>
		W25qxx_Spi(CHIP_RESET);
 8006dc4:	2099      	movs	r0, #153	; 0x99
 8006dc6:	f7ff ffd1 	bl	8006d6c <W25qxx_Spi>
	W25_UNSELECT();
 8006dca:	f7ff ffc3 	bl	8006d54 <W25_UNSELECT>

	W25qxx_Delay(100);
 8006dce:	2064      	movs	r0, #100	; 0x64
 8006dd0:	f000 fdc4 	bl	800795c <HAL_Delay>
}
 8006dd4:	bf00      	nop
 8006dd6:	bd80      	pop	{r7, pc}

08006dd8 <W25qxx_ReadID>:
//------------------------------------------------------------------------------------------
uint32_t W25qxx_ReadID(void)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b084      	sub	sp, #16
 8006ddc:	af00      	add	r7, sp, #0
uint32_t Temp[3] = {0};
 8006dde:	1d3b      	adds	r3, r7, #4
 8006de0:	2200      	movs	r2, #0
 8006de2:	601a      	str	r2, [r3, #0]
 8006de4:	605a      	str	r2, [r3, #4]
 8006de6:	609a      	str	r2, [r3, #8]

    W25_SELECT();//set to 0
 8006de8:	f7ff ffa8 	bl	8006d3c <W25_SELECT>

    W25qxx_Spi(JEDEC_ID);
 8006dec:	209f      	movs	r0, #159	; 0x9f
 8006dee:	f7ff ffbd 	bl	8006d6c <W25qxx_Spi>
    Temp[0] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8006df2:	20a5      	movs	r0, #165	; 0xa5
 8006df4:	f7ff ffba 	bl	8006d6c <W25qxx_Spi>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	607b      	str	r3, [r7, #4]
    Temp[1] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8006dfc:	20a5      	movs	r0, #165	; 0xa5
 8006dfe:	f7ff ffb5 	bl	8006d6c <W25qxx_Spi>
 8006e02:	4603      	mov	r3, r0
 8006e04:	60bb      	str	r3, [r7, #8]
    Temp[2] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8006e06:	20a5      	movs	r0, #165	; 0xa5
 8006e08:	f7ff ffb0 	bl	8006d6c <W25qxx_Spi>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	60fb      	str	r3, [r7, #12]

    W25_UNSELECT();//set to 1
 8006e10:	f7ff ffa0 	bl	8006d54 <W25_UNSELECT>

    return ((Temp[0] << 16) | (Temp[1] << 8) | Temp[2]);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	041a      	lsls	r2, r3, #16
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	021b      	lsls	r3, r3, #8
 8006e1c:	431a      	orrs	r2, r3
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	4313      	orrs	r3, r2
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	3710      	adds	r7, #16
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}
	...

08006e2c <W25qxx_ReadUniqID>:
//------------------------------------------------------------------------------------------
void W25qxx_ReadUniqID(void)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b082      	sub	sp, #8
 8006e30:	af00      	add	r7, sp, #0
	uint8_t dat[] = {READ_UID, W25QXX_DUMMY_BYTE, W25QXX_DUMMY_BYTE, W25QXX_DUMMY_BYTE, W25QXX_DUMMY_BYTE};
 8006e32:	4a18      	ldr	r2, [pc, #96]	; (8006e94 <W25qxx_ReadUniqID+0x68>)
 8006e34:	463b      	mov	r3, r7
 8006e36:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006e3a:	6018      	str	r0, [r3, #0]
 8006e3c:	3304      	adds	r3, #4
 8006e3e:	7019      	strb	r1, [r3, #0]
    W25_SELECT();
 8006e40:	f7ff ff7c 	bl	8006d3c <W25_SELECT>

    //W25qxx_Spi(READ_UID);
    //for (uint8_t i = 0; i < 4; i++) W25qxx_Spi(W25QXX_DUMMY_BYTE);
    //for (uint8_t i = 0; i < 8; i++) w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
    if (HAL_SPI_Transmit(portFLASH, dat, sizeof(dat), min_wait_ms) != HAL_OK) devError |= devSPI;
 8006e44:	4b14      	ldr	r3, [pc, #80]	; (8006e98 <W25qxx_ReadUniqID+0x6c>)
 8006e46:	6818      	ldr	r0, [r3, #0]
 8006e48:	23fa      	movs	r3, #250	; 0xfa
 8006e4a:	4639      	mov	r1, r7
 8006e4c:	2205      	movs	r2, #5
 8006e4e:	f004 ff90 	bl	800bd72 <HAL_SPI_Transmit>
 8006e52:	4603      	mov	r3, r0
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d006      	beq.n	8006e66 <W25qxx_ReadUniqID+0x3a>
 8006e58:	4b10      	ldr	r3, [pc, #64]	; (8006e9c <W25qxx_ReadUniqID+0x70>)
 8006e5a:	881b      	ldrh	r3, [r3, #0]
 8006e5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e60:	b29a      	uxth	r2, r3
 8006e62:	4b0e      	ldr	r3, [pc, #56]	; (8006e9c <W25qxx_ReadUniqID+0x70>)
 8006e64:	801a      	strh	r2, [r3, #0]
    if (HAL_SPI_Receive(portFLASH, w25qxx.UniqID, 8, min_wait_ms) != HAL_OK) devError |= devSPI;
 8006e66:	4b0c      	ldr	r3, [pc, #48]	; (8006e98 <W25qxx_ReadUniqID+0x6c>)
 8006e68:	6818      	ldr	r0, [r3, #0]
 8006e6a:	23fa      	movs	r3, #250	; 0xfa
 8006e6c:	2208      	movs	r2, #8
 8006e6e:	490c      	ldr	r1, [pc, #48]	; (8006ea0 <W25qxx_ReadUniqID+0x74>)
 8006e70:	f005 f8ed 	bl	800c04e <HAL_SPI_Receive>
 8006e74:	4603      	mov	r3, r0
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d006      	beq.n	8006e88 <W25qxx_ReadUniqID+0x5c>
 8006e7a:	4b08      	ldr	r3, [pc, #32]	; (8006e9c <W25qxx_ReadUniqID+0x70>)
 8006e7c:	881b      	ldrh	r3, [r3, #0]
 8006e7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e82:	b29a      	uxth	r2, r3
 8006e84:	4b05      	ldr	r3, [pc, #20]	; (8006e9c <W25qxx_ReadUniqID+0x70>)
 8006e86:	801a      	strh	r2, [r3, #0]

    W25_UNSELECT();
 8006e88:	f7ff ff64 	bl	8006d54 <W25_UNSELECT>
}
 8006e8c:	bf00      	nop
 8006e8e:	3708      	adds	r7, #8
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}
 8006e94:	08014754 	.word	0x08014754
 8006e98:	2000000c 	.word	0x2000000c
 8006e9c:	20001bc8 	.word	0x20001bc8
 8006ea0:	200037ad 	.word	0x200037ad

08006ea4 <W25qxx_WriteEnable>:
//------------------------------------------------------------------------------------------
void W25qxx_WriteEnable(void)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	af00      	add	r7, sp, #0
    W25_SELECT();
 8006ea8:	f7ff ff48 	bl	8006d3c <W25_SELECT>

    W25qxx_Spi(WRITE_ENABLE);
 8006eac:	2006      	movs	r0, #6
 8006eae:	f7ff ff5d 	bl	8006d6c <W25qxx_Spi>

    W25_UNSELECT();
 8006eb2:	f7ff ff4f 	bl	8006d54 <W25_UNSELECT>

    W25qxx_Delay(1);
 8006eb6:	2001      	movs	r0, #1
 8006eb8:	f000 fd50 	bl	800795c <HAL_Delay>
}
 8006ebc:	bf00      	nop
 8006ebe:	bd80      	pop	{r7, pc}

08006ec0 <W25qxx_ReadStatusRegister>:

    W25qxx_Delay(1);
}
//------------------------------------------------------------------------------------------
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusReg)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b084      	sub	sp, #16
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	71fb      	strb	r3, [r7, #7]
uint8_t status = 0;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	73fb      	strb	r3, [r7, #15]

    W25_SELECT();
 8006ece:	f7ff ff35 	bl	8006d3c <W25_SELECT>

    switch (SelectStatusReg) {
 8006ed2:	79fb      	ldrb	r3, [r7, #7]
 8006ed4:	2b01      	cmp	r3, #1
 8006ed6:	d002      	beq.n	8006ede <W25qxx_ReadStatusRegister+0x1e>
 8006ed8:	2b02      	cmp	r3, #2
 8006eda:	d00d      	beq.n	8006ef8 <W25qxx_ReadStatusRegister+0x38>
 8006edc:	e019      	b.n	8006f12 <W25qxx_ReadStatusRegister+0x52>
        case 1:
            W25qxx_Spi(READ_STAT_REG1);
 8006ede:	2005      	movs	r0, #5
 8006ee0:	f7ff ff44 	bl	8006d6c <W25qxx_Spi>
            status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8006ee4:	20a5      	movs	r0, #165	; 0xa5
 8006ee6:	f7ff ff41 	bl	8006d6c <W25qxx_Spi>
 8006eea:	4603      	mov	r3, r0
 8006eec:	73fb      	strb	r3, [r7, #15]
            w25qxx.StatusRegister1 = status;
 8006eee:	4a12      	ldr	r2, [pc, #72]	; (8006f38 <W25qxx_ReadStatusRegister+0x78>)
 8006ef0:	7bfb      	ldrb	r3, [r7, #15]
 8006ef2:	f882 3023 	strb.w	r3, [r2, #35]	; 0x23
        break;
 8006ef6:	e018      	b.n	8006f2a <W25qxx_ReadStatusRegister+0x6a>
        case 2:
            W25qxx_Spi(READ_STAT_REG2);
 8006ef8:	2035      	movs	r0, #53	; 0x35
 8006efa:	f7ff ff37 	bl	8006d6c <W25qxx_Spi>
            status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8006efe:	20a5      	movs	r0, #165	; 0xa5
 8006f00:	f7ff ff34 	bl	8006d6c <W25qxx_Spi>
 8006f04:	4603      	mov	r3, r0
 8006f06:	73fb      	strb	r3, [r7, #15]
            w25qxx.StatusRegister2 = status;
 8006f08:	4a0b      	ldr	r2, [pc, #44]	; (8006f38 <W25qxx_ReadStatusRegister+0x78>)
 8006f0a:	7bfb      	ldrb	r3, [r7, #15]
 8006f0c:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
        break;
 8006f10:	e00b      	b.n	8006f2a <W25qxx_ReadStatusRegister+0x6a>
        default : {
            W25qxx_Spi(READ_STAT_REG3);
 8006f12:	2015      	movs	r0, #21
 8006f14:	f7ff ff2a 	bl	8006d6c <W25qxx_Spi>
            status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8006f18:	20a5      	movs	r0, #165	; 0xa5
 8006f1a:	f7ff ff27 	bl	8006d6c <W25qxx_Spi>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	73fb      	strb	r3, [r7, #15]
            w25qxx.StatusRegister3 = status;
 8006f22:	4a05      	ldr	r2, [pc, #20]	; (8006f38 <W25qxx_ReadStatusRegister+0x78>)
 8006f24:	7bfb      	ldrb	r3, [r7, #15]
 8006f26:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
        }
    }

    W25_UNSELECT();
 8006f2a:	f7ff ff13 	bl	8006d54 <W25_UNSELECT>

    return status;
 8006f2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	3710      	adds	r7, #16
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}
 8006f38:	200037ac 	.word	0x200037ac

08006f3c <W25qxx_WaitForWriteEnd>:

    W25_UNSELECT();
}
//------------------------------------------------------------------------------------------
void W25qxx_WaitForWriteEnd(void)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	af00      	add	r7, sp, #0
    W25qxx_Delay(1);
 8006f40:	2001      	movs	r0, #1
 8006f42:	f000 fd0b 	bl	800795c <HAL_Delay>

    W25_SELECT();
 8006f46:	f7ff fef9 	bl	8006d3c <W25_SELECT>

    W25qxx_Spi(READ_STAT_REG1);
 8006f4a:	2005      	movs	r0, #5
 8006f4c:	f7ff ff0e 	bl	8006d6c <W25qxx_Spi>
    do
    {
        w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8006f50:	20a5      	movs	r0, #165	; 0xa5
 8006f52:	f7ff ff0b 	bl	8006d6c <W25qxx_Spi>
 8006f56:	4603      	mov	r3, r0
 8006f58:	461a      	mov	r2, r3
 8006f5a:	4b08      	ldr	r3, [pc, #32]	; (8006f7c <W25qxx_WaitForWriteEnd+0x40>)
 8006f5c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
        W25qxx_Delay(1);
 8006f60:	2001      	movs	r0, #1
 8006f62:	f000 fcfb 	bl	800795c <HAL_Delay>
    } while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 8006f66:	4b05      	ldr	r3, [pc, #20]	; (8006f7c <W25qxx_WaitForWriteEnd+0x40>)
 8006f68:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8006f6c:	f003 0301 	and.w	r3, r3, #1
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d1ed      	bne.n	8006f50 <W25qxx_WaitForWriteEnd+0x14>

    W25_UNSELECT();
 8006f74:	f7ff feee 	bl	8006d54 <W25_UNSELECT>
}
 8006f78:	bf00      	nop
 8006f7a:	bd80      	pop	{r7, pc}
 8006f7c:	200037ac 	.word	0x200037ac

08006f80 <W25qxx_Init>:
//------------------------------------------------------------------------------------------
bool W25qxx_Init(void)
{
 8006f80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f82:	b089      	sub	sp, #36	; 0x24
 8006f84:	af06      	add	r7, sp, #24

	W25qxx_Reset();
 8006f86:	f7ff ff13 	bl	8006db0 <W25qxx_Reset>


    w25qxx.Lock = 1;
 8006f8a:	4b54      	ldr	r3, [pc, #336]	; (80070dc <W25qxx_Init+0x15c>)
 8006f8c:	2201      	movs	r2, #1
 8006f8e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    bool ret = false;
 8006f92:	2300      	movs	r3, #0
 8006f94:	71fb      	strb	r3, [r7, #7]

    W25_UNSELECT();
 8006f96:	f7ff fedd 	bl	8006d54 <W25_UNSELECT>

    uint32_t id = W25qxx_ReadID() & 0xffff;
 8006f9a:	f7ff ff1d 	bl	8006dd8 <W25qxx_ReadID>
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	b29b      	uxth	r3, r3
 8006fa2:	603b      	str	r3, [r7, #0]
//#ifdef W25QXX_DEBUG
    Report(1, "w25qxx Init Begin... Chip ID:0x%X\r\n", id);
 8006fa4:	683a      	ldr	r2, [r7, #0]
 8006fa6:	494e      	ldr	r1, [pc, #312]	; (80070e0 <W25qxx_Init+0x160>)
 8006fa8:	2001      	movs	r0, #1
 8006faa:	f7fd ff67 	bl	8004e7c <Report>
//#endif
    id &= 0xff;
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	b2db      	uxtb	r3, r3
 8006fb2:	603b      	str	r3, [r7, #0]
    id -= 0x10;//0x4010;
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	3b10      	subs	r3, #16
 8006fb8:	603b      	str	r3, [r7, #0]
    if (id > 0x0a) id = 0;
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	2b0a      	cmp	r3, #10
 8006fbe:	d901      	bls.n	8006fc4 <W25qxx_Init+0x44>
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	603b      	str	r3, [r7, #0]
    w25qxx.ID         = id;              //W25Q10..W25Q512
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	b2da      	uxtb	r2, r3
 8006fc8:	4b44      	ldr	r3, [pc, #272]	; (80070dc <W25qxx_Init+0x15c>)
 8006fca:	701a      	strb	r2, [r3, #0]
    w25qxx.BlockCount = all_chipBLK[id]; //0..1024;
 8006fcc:	4a45      	ldr	r2, [pc, #276]	; (80070e4 <W25qxx_Init+0x164>)
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fd4:	4a41      	ldr	r2, [pc, #260]	; (80070dc <W25qxx_Init+0x15c>)
 8006fd6:	f8c2 301b 	str.w	r3, [r2, #27]
//#ifdef W25QXX_DEBUG
    Report(1, "Chip %s\r\n", all_chipID[id]);
 8006fda:	4a43      	ldr	r2, [pc, #268]	; (80070e8 <W25qxx_Init+0x168>)
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fe2:	461a      	mov	r2, r3
 8006fe4:	4941      	ldr	r1, [pc, #260]	; (80070ec <W25qxx_Init+0x16c>)
 8006fe6:	2001      	movs	r0, #1
 8006fe8:	f7fd ff48 	bl	8004e7c <Report>
//#endif

    if (id) {
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d06b      	beq.n	80070ca <W25qxx_Init+0x14a>
    	w25qxx.PageSize = 256;
 8006ff2:	4b3a      	ldr	r3, [pc, #232]	; (80070dc <W25qxx_Init+0x15c>)
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	725a      	strb	r2, [r3, #9]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	f042 0201 	orr.w	r2, r2, #1
 8006ffe:	729a      	strb	r2, [r3, #10]
    	w25qxx.SectorSize = 0x1000;
 8007000:	4b36      	ldr	r3, [pc, #216]	; (80070dc <W25qxx_Init+0x15c>)
 8007002:	2200      	movs	r2, #0
 8007004:	73da      	strb	r2, [r3, #15]
 8007006:	2200      	movs	r2, #0
 8007008:	f042 0210 	orr.w	r2, r2, #16
 800700c:	741a      	strb	r2, [r3, #16]
 800700e:	2200      	movs	r2, #0
 8007010:	745a      	strb	r2, [r3, #17]
 8007012:	2200      	movs	r2, #0
 8007014:	749a      	strb	r2, [r3, #18]
    	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 8007016:	4b31      	ldr	r3, [pc, #196]	; (80070dc <W25qxx_Init+0x15c>)
 8007018:	f8d3 301b 	ldr.w	r3, [r3, #27]
 800701c:	011b      	lsls	r3, r3, #4
 800701e:	4a2f      	ldr	r2, [pc, #188]	; (80070dc <W25qxx_Init+0x15c>)
 8007020:	f8c2 3013 	str.w	r3, [r2, #19]
    	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 8007024:	4b2d      	ldr	r3, [pc, #180]	; (80070dc <W25qxx_Init+0x15c>)
 8007026:	f8d3 3013 	ldr.w	r3, [r3, #19]
 800702a:	4a2c      	ldr	r2, [pc, #176]	; (80070dc <W25qxx_Init+0x15c>)
 800702c:	f8d2 200f 	ldr.w	r2, [r2, #15]
 8007030:	fb02 f303 	mul.w	r3, r2, r3
 8007034:	4a29      	ldr	r2, [pc, #164]	; (80070dc <W25qxx_Init+0x15c>)
 8007036:	f8b2 2009 	ldrh.w	r2, [r2, #9]
 800703a:	b292      	uxth	r2, r2
 800703c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007040:	4a26      	ldr	r2, [pc, #152]	; (80070dc <W25qxx_Init+0x15c>)
 8007042:	f8c2 300b 	str.w	r3, [r2, #11]
    	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 8007046:	4b25      	ldr	r3, [pc, #148]	; (80070dc <W25qxx_Init+0x15c>)
 8007048:	f8d3 300f 	ldr.w	r3, [r3, #15]
 800704c:	011b      	lsls	r3, r3, #4
 800704e:	4a23      	ldr	r2, [pc, #140]	; (80070dc <W25qxx_Init+0x15c>)
 8007050:	f8c2 3017 	str.w	r3, [r2, #23]
    	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 8007054:	4b21      	ldr	r3, [pc, #132]	; (80070dc <W25qxx_Init+0x15c>)
 8007056:	f8d3 3013 	ldr.w	r3, [r3, #19]
 800705a:	4a20      	ldr	r2, [pc, #128]	; (80070dc <W25qxx_Init+0x15c>)
 800705c:	f8d2 200f 	ldr.w	r2, [r2, #15]
 8007060:	fb02 f303 	mul.w	r3, r2, r3
 8007064:	0a9b      	lsrs	r3, r3, #10
 8007066:	4a1d      	ldr	r2, [pc, #116]	; (80070dc <W25qxx_Init+0x15c>)
 8007068:	f8c2 301f 	str.w	r3, [r2, #31]
    	W25qxx_ReadUniqID();
 800706c:	f7ff fede 	bl	8006e2c <W25qxx_ReadUniqID>
    	W25qxx_ReadStatusRegister(1);
 8007070:	2001      	movs	r0, #1
 8007072:	f7ff ff25 	bl	8006ec0 <W25qxx_ReadStatusRegister>
    	W25qxx_ReadStatusRegister(2);
 8007076:	2002      	movs	r0, #2
 8007078:	f7ff ff22 	bl	8006ec0 <W25qxx_ReadStatusRegister>
    	W25qxx_ReadStatusRegister(3);
 800707c:	2003      	movs	r0, #3
 800707e:	f7ff ff1f 	bl	8006ec0 <W25qxx_ReadStatusRegister>
    	ret = true;
 8007082:	2301      	movs	r3, #1
 8007084:	71fb      	strb	r3, [r7, #7]
                 "\tSector Size:\t%u bytes\r\n"
                 "\tSector Count:\t%u\r\n"
                 "\tBlock Size:\t%u bytes\r\n"
                 "\tBlock Count:\t%u\r\n"
                 "\tCapacity:\t%u KBytes\r\n",
                 w25qxx.PageSize,
 8007086:	4b15      	ldr	r3, [pc, #84]	; (80070dc <W25qxx_Init+0x15c>)
 8007088:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 800708c:	b29b      	uxth	r3, r3
    	Report(0,"\tPage Size:\t%u bytes\r\n"
 800708e:	461e      	mov	r6, r3
 8007090:	4b12      	ldr	r3, [pc, #72]	; (80070dc <W25qxx_Init+0x15c>)
 8007092:	f8d3 500b 	ldr.w	r5, [r3, #11]
 8007096:	4b11      	ldr	r3, [pc, #68]	; (80070dc <W25qxx_Init+0x15c>)
 8007098:	f8d3 300f 	ldr.w	r3, [r3, #15]
 800709c:	4a0f      	ldr	r2, [pc, #60]	; (80070dc <W25qxx_Init+0x15c>)
 800709e:	f8d2 2013 	ldr.w	r2, [r2, #19]
 80070a2:	490e      	ldr	r1, [pc, #56]	; (80070dc <W25qxx_Init+0x15c>)
 80070a4:	f8d1 1017 	ldr.w	r1, [r1, #23]
 80070a8:	480c      	ldr	r0, [pc, #48]	; (80070dc <W25qxx_Init+0x15c>)
 80070aa:	f8d0 001b 	ldr.w	r0, [r0, #27]
 80070ae:	4c0b      	ldr	r4, [pc, #44]	; (80070dc <W25qxx_Init+0x15c>)
 80070b0:	f8d4 401f 	ldr.w	r4, [r4, #31]
 80070b4:	9404      	str	r4, [sp, #16]
 80070b6:	9003      	str	r0, [sp, #12]
 80070b8:	9102      	str	r1, [sp, #8]
 80070ba:	9201      	str	r2, [sp, #4]
 80070bc:	9300      	str	r3, [sp, #0]
 80070be:	462b      	mov	r3, r5
 80070c0:	4632      	mov	r2, r6
 80070c2:	490b      	ldr	r1, [pc, #44]	; (80070f0 <W25qxx_Init+0x170>)
 80070c4:	2000      	movs	r0, #0
 80070c6:	f7fd fed9 	bl	8004e7c <Report>
                 w25qxx.BlockCount,
                 w25qxx.CapacityInKiloByte);
//#endif
    }

    w25qxx.Lock = 0;
 80070ca:	4b04      	ldr	r3, [pc, #16]	; (80070dc <W25qxx_Init+0x15c>)
 80070cc:	2200      	movs	r2, #0
 80070ce:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

    return ret;
 80070d2:	79fb      	ldrb	r3, [r7, #7]
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	370c      	adds	r7, #12
 80070d8:	46bd      	mov	sp, r7
 80070da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070dc:	200037ac 	.word	0x200037ac
 80070e0:	0801475c 	.word	0x0801475c
 80070e4:	080157b8 	.word	0x080157b8
 80070e8:	2000022c 	.word	0x2000022c
 80070ec:	08014780 	.word	0x08014780
 80070f0:	0801478c 	.word	0x0801478c

080070f4 <W25qxx_getChipID>:
//------------------------------------------------------------------------------------------
uint32_t W25qxx_getChipID()
{
 80070f4:	b480      	push	{r7}
 80070f6:	af00      	add	r7, sp, #0
	return (uint32_t)w25qxx.ID;
 80070f8:	4b03      	ldr	r3, [pc, #12]	; (8007108 <W25qxx_getChipID+0x14>)
 80070fa:	781b      	ldrb	r3, [r3, #0]
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	46bd      	mov	sp, r7
 8007100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007104:	4770      	bx	lr
 8007106:	bf00      	nop
 8007108:	200037ac 	.word	0x200037ac

0800710c <W25qxx_getSectorCount>:
uint32_t W25qxx_getSectorCount()
{
 800710c:	b480      	push	{r7}
 800710e:	af00      	add	r7, sp, #0
	return w25qxx.SectorCount;
 8007110:	4b03      	ldr	r3, [pc, #12]	; (8007120 <W25qxx_getSectorCount+0x14>)
 8007112:	f8d3 3013 	ldr.w	r3, [r3, #19]
}
 8007116:	4618      	mov	r0, r3
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr
 8007120:	200037ac 	.word	0x200037ac

08007124 <W25qxx_getSectorSize>:
uint32_t W25qxx_getSectorSize()
{
 8007124:	b480      	push	{r7}
 8007126:	af00      	add	r7, sp, #0
	return w25qxx.SectorSize;
 8007128:	4b03      	ldr	r3, [pc, #12]	; (8007138 <W25qxx_getSectorSize+0x14>)
 800712a:	f8d3 300f 	ldr.w	r3, [r3, #15]
}
 800712e:	4618      	mov	r0, r3
 8007130:	46bd      	mov	sp, r7
 8007132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007136:	4770      	bx	lr
 8007138:	200037ac 	.word	0x200037ac

0800713c <W25qxx_getPageSize>:
uint32_t W25qxx_getPageCount()
{
	return w25qxx.PageCount;
}
uint32_t W25qxx_getPageSize()
{
 800713c:	b480      	push	{r7}
 800713e:	af00      	add	r7, sp, #0
	return w25qxx.PageSize;
 8007140:	4b04      	ldr	r3, [pc, #16]	; (8007154 <W25qxx_getPageSize+0x18>)
 8007142:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8007146:	b29b      	uxth	r3, r3
}
 8007148:	4618      	mov	r0, r3
 800714a:	46bd      	mov	sp, r7
 800714c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007150:	4770      	bx	lr
 8007152:	bf00      	nop
 8007154:	200037ac 	.word	0x200037ac

08007158 <W25qxx_EraseSector>:

    w25qxx.Lock = 0;
}
//------------------------------------------------------------------------------------------
void W25qxx_EraseSector(uint32_t SectorAddr)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b082      	sub	sp, #8
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
    while (w25qxx.Lock) W25qxx_Delay(1);
 8007160:	e002      	b.n	8007168 <W25qxx_EraseSector+0x10>
 8007162:	2001      	movs	r0, #1
 8007164:	f000 fbfa 	bl	800795c <HAL_Delay>
 8007168:	4b1c      	ldr	r3, [pc, #112]	; (80071dc <W25qxx_EraseSector+0x84>)
 800716a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800716e:	2b00      	cmp	r3, #0
 8007170:	d1f7      	bne.n	8007162 <W25qxx_EraseSector+0xa>

    w25qxx.Lock = 1;
 8007172:	4b1a      	ldr	r3, [pc, #104]	; (80071dc <W25qxx_EraseSector+0x84>)
 8007174:	2201      	movs	r2, #1
 8007176:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
#ifdef W25QXX_DEBUG
    uint32_t StartTime = HAL_GetTick();
    Report(1, "%u Begin...", SectorAddr);
#endif

    W25qxx_WaitForWriteEnd();
 800717a:	f7ff fedf 	bl	8006f3c <W25qxx_WaitForWriteEnd>
    SectorAddr = SectorAddr * w25qxx.SectorSize;
 800717e:	4b17      	ldr	r3, [pc, #92]	; (80071dc <W25qxx_EraseSector+0x84>)
 8007180:	f8d3 200f 	ldr.w	r2, [r3, #15]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	fb02 f303 	mul.w	r3, r2, r3
 800718a:	607b      	str	r3, [r7, #4]
    W25qxx_WriteEnable();
 800718c:	f7ff fe8a 	bl	8006ea4 <W25qxx_WriteEnable>

    W25_SELECT();
 8007190:	f7ff fdd4 	bl	8006d3c <W25_SELECT>
    W25qxx_Spi(SECTOR_ERASE);
 8007194:	2020      	movs	r0, #32
 8007196:	f7ff fde9 	bl	8006d6c <W25qxx_Spi>
    //if (w25qxx.ID >= W25Q256) W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
    W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	0c1b      	lsrs	r3, r3, #16
 800719e:	b2db      	uxtb	r3, r3
 80071a0:	4618      	mov	r0, r3
 80071a2:	f7ff fde3 	bl	8006d6c <W25qxx_Spi>
    W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	0a1b      	lsrs	r3, r3, #8
 80071aa:	b2db      	uxtb	r3, r3
 80071ac:	4618      	mov	r0, r3
 80071ae:	f7ff fddd 	bl	8006d6c <W25qxx_Spi>
    W25qxx_Spi(SectorAddr & 0xFF);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	b2db      	uxtb	r3, r3
 80071b6:	4618      	mov	r0, r3
 80071b8:	f7ff fdd8 	bl	8006d6c <W25qxx_Spi>
    W25_UNSELECT();
 80071bc:	f7ff fdca 	bl	8006d54 <W25_UNSELECT>

    W25qxx_WaitForWriteEnd();
 80071c0:	f7ff febc 	bl	8006f3c <W25qxx_WaitForWriteEnd>

#ifdef W25QXX_DEBUG
    uint32_t dur = HAL_GetTick() - StartTime;
    Report(0, " done after %u ms (%u sec)!\r\n", dur, dur / 1000);
#endif
    W25qxx_Delay(1);
 80071c4:	2001      	movs	r0, #1
 80071c6:	f000 fbc9 	bl	800795c <HAL_Delay>

    w25qxx.Lock = 0;
 80071ca:	4b04      	ldr	r3, [pc, #16]	; (80071dc <W25qxx_EraseSector+0x84>)
 80071cc:	2200      	movs	r2, #0
 80071ce:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 80071d2:	bf00      	nop
 80071d4:	3708      	adds	r7, #8
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}
 80071da:	bf00      	nop
 80071dc:	200037ac 	.word	0x200037ac

080071e0 <W25qxx_SectorToPage>:
{
    return ((SectorAddress * w25qxx.SectorSize) / w25qxx.BlockSize);
}
//------------------------------------------------------------------------------------------
uint32_t W25qxx_SectorToPage(uint32_t SectorAddress)
{
 80071e0:	b480      	push	{r7}
 80071e2:	b083      	sub	sp, #12
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
    return (SectorAddress * w25qxx.SectorSize) / w25qxx.PageSize;
 80071e8:	4b08      	ldr	r3, [pc, #32]	; (800720c <W25qxx_SectorToPage+0x2c>)
 80071ea:	f8d3 300f 	ldr.w	r3, [r3, #15]
 80071ee:	687a      	ldr	r2, [r7, #4]
 80071f0:	fb02 f303 	mul.w	r3, r2, r3
 80071f4:	4a05      	ldr	r2, [pc, #20]	; (800720c <W25qxx_SectorToPage+0x2c>)
 80071f6:	f8b2 2009 	ldrh.w	r2, [r2, #9]
 80071fa:	b292      	uxth	r2, r2
 80071fc:	fbb3 f3f2 	udiv	r3, r3, r2
}
 8007200:	4618      	mov	r0, r3
 8007202:	370c      	adds	r7, #12
 8007204:	46bd      	mov	sp, r7
 8007206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720a:	4770      	bx	lr
 800720c:	200037ac 	.word	0x200037ac

08007210 <W25qxx_IsEmptySector>:

    return false;
}
//------------------------------------------------------------------------------------------
bool W25qxx_IsEmptySector(uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToCheck_up_to_SectorSize)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b090      	sub	sp, #64	; 0x40
 8007214:	af00      	add	r7, sp, #0
 8007216:	60f8      	str	r0, [r7, #12]
 8007218:	60b9      	str	r1, [r7, #8]
 800721a:	607a      	str	r2, [r7, #4]
    while (w25qxx.Lock) W25qxx_Delay(1);
 800721c:	e002      	b.n	8007224 <W25qxx_IsEmptySector+0x14>
 800721e:	2001      	movs	r0, #1
 8007220:	f000 fb9c 	bl	800795c <HAL_Delay>
 8007224:	4b59      	ldr	r3, [pc, #356]	; (800738c <W25qxx_IsEmptySector+0x17c>)
 8007226:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800722a:	2b00      	cmp	r3, #0
 800722c:	d1f7      	bne.n	800721e <W25qxx_IsEmptySector+0xe>

    w25qxx.Lock = 1;
 800722e:	4b57      	ldr	r3, [pc, #348]	; (800738c <W25qxx_IsEmptySector+0x17c>)
 8007230:	2201      	movs	r2, #1
 8007232:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

    if ( (NumByteToCheck_up_to_SectorSize > w25qxx.SectorSize) || (!NumByteToCheck_up_to_SectorSize) )
 8007236:	4b55      	ldr	r3, [pc, #340]	; (800738c <W25qxx_IsEmptySector+0x17c>)
 8007238:	f8d3 300f 	ldr.w	r3, [r3, #15]
 800723c:	687a      	ldr	r2, [r7, #4]
 800723e:	429a      	cmp	r2, r3
 8007240:	d802      	bhi.n	8007248 <W25qxx_IsEmptySector+0x38>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d103      	bne.n	8007250 <W25qxx_IsEmptySector+0x40>
                NumByteToCheck_up_to_SectorSize = w25qxx.SectorSize;
 8007248:	4b50      	ldr	r3, [pc, #320]	; (800738c <W25qxx_IsEmptySector+0x17c>)
 800724a:	f8d3 300f 	ldr.w	r3, [r3, #15]
 800724e:	607b      	str	r3, [r7, #4]
    uint32_t StartTime = HAL_GetTick();
#endif

    uint8_t pBuffer[32];
    uint32_t i, WorkAddress;
    for ( i = OffsetInByte; i < w25qxx.SectorSize; i += sizeof(pBuffer)) {
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007254:	e040      	b.n	80072d8 <W25qxx_IsEmptySector+0xc8>

    	W25_SELECT();
 8007256:	f7ff fd71 	bl	8006d3c <W25_SELECT>
        WorkAddress = (i + Sector_Address * w25qxx.SectorSize);
 800725a:	4b4c      	ldr	r3, [pc, #304]	; (800738c <W25qxx_IsEmptySector+0x17c>)
 800725c:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8007260:	68fa      	ldr	r2, [r7, #12]
 8007262:	fb02 f303 	mul.w	r3, r2, r3
 8007266:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007268:	4413      	add	r3, r2
 800726a:	637b      	str	r3, [r7, #52]	; 0x34
        W25qxx_Spi(DATA_READ);//FAST_READ);
 800726c:	2003      	movs	r0, #3
 800726e:	f7ff fd7d 	bl	8006d6c <W25qxx_Spi>
        //if (w25qxx.ID >= W25Q256) W25qxx_Spi((WorkAddress & 0xFF000000) >> 24);
        W25qxx_Spi((WorkAddress & 0xFF0000) >> 16);
 8007272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007274:	0c1b      	lsrs	r3, r3, #16
 8007276:	b2db      	uxtb	r3, r3
 8007278:	4618      	mov	r0, r3
 800727a:	f7ff fd77 	bl	8006d6c <W25qxx_Spi>
        W25qxx_Spi((WorkAddress & 0xFF00) >> 8);
 800727e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007280:	0a1b      	lsrs	r3, r3, #8
 8007282:	b2db      	uxtb	r3, r3
 8007284:	4618      	mov	r0, r3
 8007286:	f7ff fd71 	bl	8006d6c <W25qxx_Spi>
        W25qxx_Spi(WorkAddress & 0xFF);
 800728a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800728c:	b2db      	uxtb	r3, r3
 800728e:	4618      	mov	r0, r3
 8007290:	f7ff fd6c 	bl	8006d6c <W25qxx_Spi>
        //W25qxx_Spi(0);
        HAL_SPI_Receive(portFLASH, pBuffer, sizeof(pBuffer), min_wait_ms);
 8007294:	4b3e      	ldr	r3, [pc, #248]	; (8007390 <W25qxx_IsEmptySector+0x180>)
 8007296:	6818      	ldr	r0, [r3, #0]
 8007298:	23fa      	movs	r3, #250	; 0xfa
 800729a:	f107 0114 	add.w	r1, r7, #20
 800729e:	2220      	movs	r2, #32
 80072a0:	f004 fed5 	bl	800c04e <HAL_SPI_Receive>
        W25_UNSELECT();
 80072a4:	f7ff fd56 	bl	8006d54 <W25_UNSELECT>

        for (uint8_t x = 0; x < sizeof(pBuffer); x++) {
 80072a8:	2300      	movs	r3, #0
 80072aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80072ae:	e00c      	b.n	80072ca <W25qxx_IsEmptySector+0xba>
            if (pBuffer[x] != 0xFF) goto NOT_EMPTY;
 80072b0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80072b4:	3340      	adds	r3, #64	; 0x40
 80072b6:	443b      	add	r3, r7
 80072b8:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 80072bc:	2bff      	cmp	r3, #255	; 0xff
 80072be:	d159      	bne.n	8007374 <W25qxx_IsEmptySector+0x164>
        for (uint8_t x = 0; x < sizeof(pBuffer); x++) {
 80072c0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80072c4:	3301      	adds	r3, #1
 80072c6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80072ca:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80072ce:	2b1f      	cmp	r3, #31
 80072d0:	d9ee      	bls.n	80072b0 <W25qxx_IsEmptySector+0xa0>
    for ( i = OffsetInByte; i < w25qxx.SectorSize; i += sizeof(pBuffer)) {
 80072d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072d4:	3320      	adds	r3, #32
 80072d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80072d8:	4b2c      	ldr	r3, [pc, #176]	; (800738c <W25qxx_IsEmptySector+0x17c>)
 80072da:	f8d3 300f 	ldr.w	r3, [r3, #15]
 80072de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80072e0:	429a      	cmp	r2, r3
 80072e2:	d3b8      	bcc.n	8007256 <W25qxx_IsEmptySector+0x46>
        }
    }
    if ((w25qxx.SectorSize + OffsetInByte) % sizeof(pBuffer) != 0) {
 80072e4:	4b29      	ldr	r3, [pc, #164]	; (800738c <W25qxx_IsEmptySector+0x17c>)
 80072e6:	f8d3 200f 	ldr.w	r2, [r3, #15]
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	4413      	add	r3, r2
 80072ee:	f003 031f 	and.w	r3, r3, #31
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d038      	beq.n	8007368 <W25qxx_IsEmptySector+0x158>
        i -= sizeof(pBuffer);
 80072f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072f8:	3b20      	subs	r3, #32
 80072fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        for( ; i < w25qxx.SectorSize; i++) {
 80072fc:	e02e      	b.n	800735c <W25qxx_IsEmptySector+0x14c>

            W25_SELECT();
 80072fe:	f7ff fd1d 	bl	8006d3c <W25_SELECT>
            WorkAddress = (i + Sector_Address * w25qxx.SectorSize);
 8007302:	4b22      	ldr	r3, [pc, #136]	; (800738c <W25qxx_IsEmptySector+0x17c>)
 8007304:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8007308:	68fa      	ldr	r2, [r7, #12]
 800730a:	fb02 f303 	mul.w	r3, r2, r3
 800730e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007310:	4413      	add	r3, r2
 8007312:	637b      	str	r3, [r7, #52]	; 0x34
            W25qxx_Spi(DATA_READ);//FAST_READ);
 8007314:	2003      	movs	r0, #3
 8007316:	f7ff fd29 	bl	8006d6c <W25qxx_Spi>
            //if (w25qxx.ID >= W25Q256) W25qxx_Spi((WorkAddress & 0xFF000000) >> 24);
            W25qxx_Spi((WorkAddress & 0xFF0000) >> 16);
 800731a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800731c:	0c1b      	lsrs	r3, r3, #16
 800731e:	b2db      	uxtb	r3, r3
 8007320:	4618      	mov	r0, r3
 8007322:	f7ff fd23 	bl	8006d6c <W25qxx_Spi>
            W25qxx_Spi((WorkAddress & 0xFF00) >> 8);
 8007326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007328:	0a1b      	lsrs	r3, r3, #8
 800732a:	b2db      	uxtb	r3, r3
 800732c:	4618      	mov	r0, r3
 800732e:	f7ff fd1d 	bl	8006d6c <W25qxx_Spi>
            W25qxx_Spi(WorkAddress & 0xFF);
 8007332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007334:	b2db      	uxtb	r3, r3
 8007336:	4618      	mov	r0, r3
 8007338:	f7ff fd18 	bl	8006d6c <W25qxx_Spi>
            //W25qxx_Spi(0);
            HAL_SPI_Receive(portFLASH, pBuffer, 1, min_wait_ms);
 800733c:	4b14      	ldr	r3, [pc, #80]	; (8007390 <W25qxx_IsEmptySector+0x180>)
 800733e:	6818      	ldr	r0, [r3, #0]
 8007340:	23fa      	movs	r3, #250	; 0xfa
 8007342:	f107 0114 	add.w	r1, r7, #20
 8007346:	2201      	movs	r2, #1
 8007348:	f004 fe81 	bl	800c04e <HAL_SPI_Receive>
            W25_UNSELECT();
 800734c:	f7ff fd02 	bl	8006d54 <W25_UNSELECT>

            if (pBuffer[0] != 0xFF) goto NOT_EMPTY;
 8007350:	7d3b      	ldrb	r3, [r7, #20]
 8007352:	2bff      	cmp	r3, #255	; 0xff
 8007354:	d110      	bne.n	8007378 <W25qxx_IsEmptySector+0x168>
        for( ; i < w25qxx.SectorSize; i++) {
 8007356:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007358:	3301      	adds	r3, #1
 800735a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800735c:	4b0b      	ldr	r3, [pc, #44]	; (800738c <W25qxx_IsEmptySector+0x17c>)
 800735e:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8007362:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007364:	429a      	cmp	r2, r3
 8007366:	d3ca      	bcc.n	80072fe <W25qxx_IsEmptySector+0xee>
#ifdef W25QXX_DEBUG
    Report(1, "w25qxx CheckSector is Empty in %u ms\r\n", HAL_GetTick() - StartTime);
    //W25qxx_Delay(100);
#endif

    w25qxx.Lock = 0;
 8007368:	4b08      	ldr	r3, [pc, #32]	; (800738c <W25qxx_IsEmptySector+0x17c>)
 800736a:	2200      	movs	r2, #0
 800736c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

    return true;
 8007370:	2301      	movs	r3, #1
 8007372:	e007      	b.n	8007384 <W25qxx_IsEmptySector+0x174>
            if (pBuffer[x] != 0xFF) goto NOT_EMPTY;
 8007374:	bf00      	nop
 8007376:	e000      	b.n	800737a <W25qxx_IsEmptySector+0x16a>
            if (pBuffer[0] != 0xFF) goto NOT_EMPTY;
 8007378:	bf00      	nop
#ifdef W25QXX_DEBUG
    Report(1, "w25qxx CheckSector is Not Empty in %u ms\r\n", HAL_GetTick() - StartTime);
    //W25qxx_Delay(100);
#endif

    w25qxx.Lock = 0;
 800737a:	4b04      	ldr	r3, [pc, #16]	; (800738c <W25qxx_IsEmptySector+0x17c>)
 800737c:	2200      	movs	r2, #0
 800737e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

    return false;
 8007382:	2300      	movs	r3, #0
}
 8007384:	4618      	mov	r0, r3
 8007386:	3740      	adds	r7, #64	; 0x40
 8007388:	46bd      	mov	sp, r7
 800738a:	bd80      	pop	{r7, pc}
 800738c:	200037ac 	.word	0x200037ac
 8007390:	2000000c 	.word	0x2000000c

08007394 <W25qxx_WritePage>:

    w25qxx.Lock = 0;
}
//------------------------------------------------------------------------------------------
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b086      	sub	sp, #24
 8007398:	af00      	add	r7, sp, #0
 800739a:	60f8      	str	r0, [r7, #12]
 800739c:	60b9      	str	r1, [r7, #8]
 800739e:	607a      	str	r2, [r7, #4]
 80073a0:	603b      	str	r3, [r7, #0]
    while (w25qxx.Lock) W25qxx_Delay(1);
 80073a2:	e002      	b.n	80073aa <W25qxx_WritePage+0x16>
 80073a4:	2001      	movs	r0, #1
 80073a6:	f000 fad9 	bl	800795c <HAL_Delay>
 80073aa:	4b4d      	ldr	r3, [pc, #308]	; (80074e0 <W25qxx_WritePage+0x14c>)
 80073ac:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d1f7      	bne.n	80073a4 <W25qxx_WritePage+0x10>

    w25qxx.Lock = 1;
 80073b4:	4b4a      	ldr	r3, [pc, #296]	; (80074e0 <W25qxx_WritePage+0x14c>)
 80073b6:	2201      	movs	r2, #1
 80073b8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

    if ( ((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || !NumByteToWrite_up_to_PageSize )
 80073bc:	683a      	ldr	r2, [r7, #0]
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	4413      	add	r3, r2
 80073c2:	4a47      	ldr	r2, [pc, #284]	; (80074e0 <W25qxx_WritePage+0x14c>)
 80073c4:	f8b2 2009 	ldrh.w	r2, [r2, #9]
 80073c8:	b292      	uxth	r2, r2
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d802      	bhi.n	80073d4 <W25qxx_WritePage+0x40>
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d107      	bne.n	80073e4 <W25qxx_WritePage+0x50>
                NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 80073d4:	4b42      	ldr	r3, [pc, #264]	; (80074e0 <W25qxx_WritePage+0x14c>)
 80073d6:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 80073da:	b29b      	uxth	r3, r3
 80073dc:	461a      	mov	r2, r3
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	1ad3      	subs	r3, r2, r3
 80073e2:	603b      	str	r3, [r7, #0]
    if ( (OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize )
 80073e4:	687a      	ldr	r2, [r7, #4]
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	4413      	add	r3, r2
 80073ea:	4a3d      	ldr	r2, [pc, #244]	; (80074e0 <W25qxx_WritePage+0x14c>)
 80073ec:	f8b2 2009 	ldrh.w	r2, [r2, #9]
 80073f0:	b292      	uxth	r2, r2
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d907      	bls.n	8007406 <W25qxx_WritePage+0x72>
                NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 80073f6:	4b3a      	ldr	r3, [pc, #232]	; (80074e0 <W25qxx_WritePage+0x14c>)
 80073f8:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 80073fc:	b29b      	uxth	r3, r3
 80073fe:	461a      	mov	r2, r3
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	1ad3      	subs	r3, r2, r3
 8007404:	603b      	str	r3, [r7, #0]
    Report(1, "%s WritePage:0x%X(%u), Offset:%u ,Writes %u Bytes, begin...\r\n",
                 __func__, Page_Address, Page_Address, OffsetInByte, NumByteToWrite_up_to_PageSize);
    uint32_t StartTime = HAL_GetTick();
#endif

    W25qxx_WaitForWriteEnd();
 8007406:	f7ff fd99 	bl	8006f3c <W25qxx_WaitForWriteEnd>
    W25qxx_WriteEnable();
 800740a:	f7ff fd4b 	bl	8006ea4 <W25qxx_WriteEnable>

    Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 800740e:	4b34      	ldr	r3, [pc, #208]	; (80074e0 <W25qxx_WritePage+0x14c>)
 8007410:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8007414:	b29b      	uxth	r3, r3
 8007416:	461a      	mov	r2, r3
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	fb02 f303 	mul.w	r3, r2, r3
 800741e:	687a      	ldr	r2, [r7, #4]
 8007420:	4413      	add	r3, r2
 8007422:	60bb      	str	r3, [r7, #8]
    W25qxx_Spi((Page_Address & 0xFF00) >> 8);
    W25qxx_Spi(Page_Address&0xFF);
    HAL_SPI_Transmit(portFLASH, pBuffer, NumByteToWrite_up_to_PageSize, min_wait_ms);
    W25_UNSELECT();*/

    uint16_t lens = NumByteToWrite_up_to_PageSize + PAGE_HDR_BYTES;
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	b29b      	uxth	r3, r3
 8007428:	3304      	adds	r3, #4
 800742a:	82fb      	strh	r3, [r7, #22]
    int idx = 0;
 800742c:	2300      	movs	r3, #0
 800742e:	613b      	str	r3, [r7, #16]
    pageTmp[idx++] = PAGE_PROG;
 8007430:	693b      	ldr	r3, [r7, #16]
 8007432:	1c5a      	adds	r2, r3, #1
 8007434:	613a      	str	r2, [r7, #16]
 8007436:	4a2b      	ldr	r2, [pc, #172]	; (80074e4 <W25qxx_WritePage+0x150>)
 8007438:	2102      	movs	r1, #2
 800743a:	54d1      	strb	r1, [r2, r3]
    //if (w25qxx.ID >= W25Q256) pageTmp[idx++] = (Page_Address & 0xFF000000) >> 24;
    pageTmp[idx++] = (Page_Address & 0xFF0000) >> 16;
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	0c19      	lsrs	r1, r3, #16
 8007440:	693b      	ldr	r3, [r7, #16]
 8007442:	1c5a      	adds	r2, r3, #1
 8007444:	613a      	str	r2, [r7, #16]
 8007446:	b2c9      	uxtb	r1, r1
 8007448:	4a26      	ldr	r2, [pc, #152]	; (80074e4 <W25qxx_WritePage+0x150>)
 800744a:	54d1      	strb	r1, [r2, r3]
    pageTmp[idx++] = (Page_Address& 0xFF00) >> 8;
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	0a19      	lsrs	r1, r3, #8
 8007450:	693b      	ldr	r3, [r7, #16]
 8007452:	1c5a      	adds	r2, r3, #1
 8007454:	613a      	str	r2, [r7, #16]
 8007456:	b2c9      	uxtb	r1, r1
 8007458:	4a22      	ldr	r2, [pc, #136]	; (80074e4 <W25qxx_WritePage+0x150>)
 800745a:	54d1      	strb	r1, [r2, r3]
    pageTmp[idx++] = Page_Address & 0xFF;
 800745c:	693b      	ldr	r3, [r7, #16]
 800745e:	1c5a      	adds	r2, r3, #1
 8007460:	613a      	str	r2, [r7, #16]
 8007462:	68ba      	ldr	r2, [r7, #8]
 8007464:	b2d1      	uxtb	r1, r2
 8007466:	4a1f      	ldr	r2, [pc, #124]	; (80074e4 <W25qxx_WritePage+0x150>)
 8007468:	54d1      	strb	r1, [r2, r3]
    memcpy(&pageTmp[PAGE_HDR_BYTES], pBuffer, NumByteToWrite_up_to_PageSize);//w25qxx.PageSize);
 800746a:	683a      	ldr	r2, [r7, #0]
 800746c:	68f9      	ldr	r1, [r7, #12]
 800746e:	481e      	ldr	r0, [pc, #120]	; (80074e8 <W25qxx_WritePage+0x154>)
 8007470:	f008 fa80 	bl	800f974 <memcpy>

    spiRdy = 0;
 8007474:	4b1d      	ldr	r3, [pc, #116]	; (80074ec <W25qxx_WritePage+0x158>)
 8007476:	2200      	movs	r2, #0
 8007478:	701a      	strb	r2, [r3, #0]

w25_withDMA = 1;
 800747a:	4b1d      	ldr	r3, [pc, #116]	; (80074f0 <W25qxx_WritePage+0x15c>)
 800747c:	2201      	movs	r2, #1
 800747e:	701a      	strb	r2, [r3, #0]
    W25_SELECT();
 8007480:	f7ff fc5c 	bl	8006d3c <W25_SELECT>
    if (w25_withDMA) {
 8007484:	4b1a      	ldr	r3, [pc, #104]	; (80074f0 <W25qxx_WritePage+0x15c>)
 8007486:	781b      	ldrb	r3, [r3, #0]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d012      	beq.n	80074b2 <W25qxx_WritePage+0x11e>
    	HAL_SPI_Transmit_DMA(portFLASH, pageTmp, lens);
 800748c:	4b19      	ldr	r3, [pc, #100]	; (80074f4 <W25qxx_WritePage+0x160>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	8afa      	ldrh	r2, [r7, #22]
 8007492:	4914      	ldr	r1, [pc, #80]	; (80074e4 <W25qxx_WritePage+0x150>)
 8007494:	4618      	mov	r0, r3
 8007496:	f005 f91d 	bl	800c6d4 <HAL_SPI_Transmit_DMA>
    	while (!spiRdy) {
 800749a:	e002      	b.n	80074a2 <W25qxx_WritePage+0x10e>
    		W25qxx_Delay(1);
 800749c:	2001      	movs	r0, #1
 800749e:	f000 fa5d 	bl	800795c <HAL_Delay>
    	while (!spiRdy) {
 80074a2:	4b12      	ldr	r3, [pc, #72]	; (80074ec <W25qxx_WritePage+0x158>)
 80074a4:	781b      	ldrb	r3, [r3, #0]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d0f8      	beq.n	800749c <W25qxx_WritePage+0x108>
    	}
w25_withDMA = 0;
 80074aa:	4b11      	ldr	r3, [pc, #68]	; (80074f0 <W25qxx_WritePage+0x15c>)
 80074ac:	2200      	movs	r2, #0
 80074ae:	701a      	strb	r2, [r3, #0]
 80074b0:	e00d      	b.n	80074ce <W25qxx_WritePage+0x13a>
    } else {
    	HAL_SPI_Transmit(portFLASH, pageTmp, lens, min_wait_ms);
 80074b2:	4b10      	ldr	r3, [pc, #64]	; (80074f4 <W25qxx_WritePage+0x160>)
 80074b4:	6818      	ldr	r0, [r3, #0]
 80074b6:	23fa      	movs	r3, #250	; 0xfa
 80074b8:	8afa      	ldrh	r2, [r7, #22]
 80074ba:	490a      	ldr	r1, [pc, #40]	; (80074e4 <W25qxx_WritePage+0x150>)
 80074bc:	f004 fc59 	bl	800bd72 <HAL_SPI_Transmit>

    	W25_UNSELECT();
 80074c0:	f7ff fc48 	bl	8006d54 <W25_UNSELECT>

    	W25qxx_WaitForWriteEnd();
 80074c4:	f7ff fd3a 	bl	8006f3c <W25qxx_WaitForWriteEnd>

    	spiRdy = 1;
 80074c8:	4b08      	ldr	r3, [pc, #32]	; (80074ec <W25qxx_WritePage+0x158>)
 80074ca:	2201      	movs	r2, #1
 80074cc:	701a      	strb	r2, [r3, #0]
    	Report(0, "\r\n");
    	Report(1, "%s done after %u ms\r\n", __func__, StartTime);
#endif
    }

    w25qxx.Lock = 0;
 80074ce:	4b04      	ldr	r3, [pc, #16]	; (80074e0 <W25qxx_WritePage+0x14c>)
 80074d0:	2200      	movs	r2, #0
 80074d2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 80074d6:	bf00      	nop
 80074d8:	3718      	adds	r7, #24
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}
 80074de:	bf00      	nop
 80074e0:	200037ac 	.word	0x200037ac
 80074e4:	200037d4 	.word	0x200037d4
 80074e8:	200037d8 	.word	0x200037d8
 80074ec:	200001e4 	.word	0x200001e4
 80074f0:	200038d9 	.word	0x200038d9
 80074f4:	2000000c 	.word	0x2000000c

080074f8 <W25qxx_WriteSector>:
//------------------------------------------------------------------------------------------
void W25qxx_WriteSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_SectorSize)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b088      	sub	sp, #32
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	60f8      	str	r0, [r7, #12]
 8007500:	60b9      	str	r1, [r7, #8]
 8007502:	607a      	str	r2, [r7, #4]
 8007504:	603b      	str	r3, [r7, #0]
    if ((NumByteToWrite_up_to_SectorSize > w25qxx.SectorSize) || !NumByteToWrite_up_to_SectorSize)
 8007506:	4b31      	ldr	r3, [pc, #196]	; (80075cc <W25qxx_WriteSector+0xd4>)
 8007508:	f8d3 300f 	ldr.w	r3, [r3, #15]
 800750c:	683a      	ldr	r2, [r7, #0]
 800750e:	429a      	cmp	r2, r3
 8007510:	d802      	bhi.n	8007518 <W25qxx_WriteSector+0x20>
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d103      	bne.n	8007520 <W25qxx_WriteSector+0x28>
                NumByteToWrite_up_to_SectorSize = w25qxx.SectorSize;
 8007518:	4b2c      	ldr	r3, [pc, #176]	; (80075cc <W25qxx_WriteSector+0xd4>)
 800751a:	f8d3 300f 	ldr.w	r3, [r3, #15]
 800751e:	603b      	str	r3, [r7, #0]
    Report(1, "%s WriteSector:0x%X(%u), Offset:%u ,Write %u Bytes, begin...\r\n",
                 __func__, Sector_Address, Sector_Address, OffsetInByte, NumByteToWrite_up_to_SectorSize);
    //W25qxx_Delay(100);
#endif

    if (OffsetInByte >= w25qxx.SectorSize) {
 8007520:	4b2a      	ldr	r3, [pc, #168]	; (80075cc <W25qxx_WriteSector+0xd4>)
 8007522:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8007526:	687a      	ldr	r2, [r7, #4]
 8007528:	429a      	cmp	r2, r3
 800752a:	d24b      	bcs.n	80075c4 <W25qxx_WriteSector+0xcc>
        return;
    }

    int32_t BytesToWrite;
    uint32_t LocalOffset, StartPage;
    if ((OffsetInByte + NumByteToWrite_up_to_SectorSize) > w25qxx.SectorSize)
 800752c:	687a      	ldr	r2, [r7, #4]
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	441a      	add	r2, r3
 8007532:	4b26      	ldr	r3, [pc, #152]	; (80075cc <W25qxx_WriteSector+0xd4>)
 8007534:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8007538:	429a      	cmp	r2, r3
 800753a:	d906      	bls.n	800754a <W25qxx_WriteSector+0x52>
        BytesToWrite = w25qxx.SectorSize - OffsetInByte;
 800753c:	4b23      	ldr	r3, [pc, #140]	; (80075cc <W25qxx_WriteSector+0xd4>)
 800753e:	f8d3 200f 	ldr.w	r2, [r3, #15]
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	1ad3      	subs	r3, r2, r3
 8007546:	61fb      	str	r3, [r7, #28]
 8007548:	e001      	b.n	800754e <W25qxx_WriteSector+0x56>
    else
        BytesToWrite = NumByteToWrite_up_to_SectorSize;
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	61fb      	str	r3, [r7, #28]
    StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 800754e:	68b8      	ldr	r0, [r7, #8]
 8007550:	f7ff fe46 	bl	80071e0 <W25qxx_SectorToPage>
 8007554:	4602      	mov	r2, r0
 8007556:	4b1d      	ldr	r3, [pc, #116]	; (80075cc <W25qxx_WriteSector+0xd4>)
 8007558:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 800755c:	b29b      	uxth	r3, r3
 800755e:	4619      	mov	r1, r3
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	fbb3 f3f1 	udiv	r3, r3, r1
 8007566:	4413      	add	r3, r2
 8007568:	617b      	str	r3, [r7, #20]
    LocalOffset = OffsetInByte % w25qxx.PageSize;
 800756a:	4b18      	ldr	r3, [pc, #96]	; (80075cc <W25qxx_WriteSector+0xd4>)
 800756c:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8007570:	b29b      	uxth	r3, r3
 8007572:	461a      	mov	r2, r3
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	fbb3 f1f2 	udiv	r1, r3, r2
 800757a:	fb01 f202 	mul.w	r2, r1, r2
 800757e:	1a9b      	subs	r3, r3, r2
 8007580:	61bb      	str	r3, [r7, #24]

    do
    {
        W25qxx_WritePage(pBuffer, StartPage, LocalOffset, BytesToWrite);
 8007582:	69fb      	ldr	r3, [r7, #28]
 8007584:	69ba      	ldr	r2, [r7, #24]
 8007586:	6979      	ldr	r1, [r7, #20]
 8007588:	68f8      	ldr	r0, [r7, #12]
 800758a:	f7ff ff03 	bl	8007394 <W25qxx_WritePage>
        StartPage++;
 800758e:	697b      	ldr	r3, [r7, #20]
 8007590:	3301      	adds	r3, #1
 8007592:	617b      	str	r3, [r7, #20]
        BytesToWrite -= w25qxx.PageSize - LocalOffset;
 8007594:	4b0d      	ldr	r3, [pc, #52]	; (80075cc <W25qxx_WriteSector+0xd4>)
 8007596:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 800759a:	b29b      	uxth	r3, r3
 800759c:	461a      	mov	r2, r3
 800759e:	69bb      	ldr	r3, [r7, #24]
 80075a0:	1a9a      	subs	r2, r3, r2
 80075a2:	69fb      	ldr	r3, [r7, #28]
 80075a4:	4413      	add	r3, r2
 80075a6:	61fb      	str	r3, [r7, #28]
        pBuffer += w25qxx.PageSize;
 80075a8:	4b08      	ldr	r3, [pc, #32]	; (80075cc <W25qxx_WriteSector+0xd4>)
 80075aa:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 80075ae:	b29b      	uxth	r3, r3
 80075b0:	461a      	mov	r2, r3
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	4413      	add	r3, r2
 80075b6:	60fb      	str	r3, [r7, #12]
        LocalOffset = 0;
 80075b8:	2300      	movs	r3, #0
 80075ba:	61bb      	str	r3, [r7, #24]
    } while(BytesToWrite > 0);
 80075bc:	69fb      	ldr	r3, [r7, #28]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	dcdf      	bgt.n	8007582 <W25qxx_WriteSector+0x8a>
 80075c2:	e000      	b.n	80075c6 <W25qxx_WriteSector+0xce>
        return;
 80075c4:	bf00      	nop
#ifdef W25QXX_DEBUG
    Report(1, "%s Done\r\n", __func__);
    //W25qxx_Delay(100);
#endif

}
 80075c6:	3720      	adds	r7, #32
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}
 80075cc:	200037ac 	.word	0x200037ac

080075d0 <W25qxx_ReadPage>:

    w25qxx.Lock = 0;
}
//------------------------------------------------------------------------------------------
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b088      	sub	sp, #32
 80075d4:	af02      	add	r7, sp, #8
 80075d6:	60f8      	str	r0, [r7, #12]
 80075d8:	60b9      	str	r1, [r7, #8]
 80075da:	607a      	str	r2, [r7, #4]
 80075dc:	603b      	str	r3, [r7, #0]
    while (w25qxx.Lock) W25qxx_Delay(1);
 80075de:	e002      	b.n	80075e6 <W25qxx_ReadPage+0x16>
 80075e0:	2001      	movs	r0, #1
 80075e2:	f000 f9bb 	bl	800795c <HAL_Delay>
 80075e6:	4b51      	ldr	r3, [pc, #324]	; (800772c <W25qxx_ReadPage+0x15c>)
 80075e8:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d1f7      	bne.n	80075e0 <W25qxx_ReadPage+0x10>

    w25qxx.Lock = 1;
 80075f0:	4b4e      	ldr	r3, [pc, #312]	; (800772c <W25qxx_ReadPage+0x15c>)
 80075f2:	2201      	movs	r2, #1
 80075f4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

    if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || !NumByteToRead_up_to_PageSize)
 80075f8:	4b4c      	ldr	r3, [pc, #304]	; (800772c <W25qxx_ReadPage+0x15c>)
 80075fa:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 80075fe:	b29b      	uxth	r3, r3
 8007600:	461a      	mov	r2, r3
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	4293      	cmp	r3, r2
 8007606:	d802      	bhi.n	800760e <W25qxx_ReadPage+0x3e>
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d104      	bne.n	8007618 <W25qxx_ReadPage+0x48>
        NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 800760e:	4b47      	ldr	r3, [pc, #284]	; (800772c <W25qxx_ReadPage+0x15c>)
 8007610:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8007614:	b29b      	uxth	r3, r3
 8007616:	603b      	str	r3, [r7, #0]
    if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 8007618:	687a      	ldr	r2, [r7, #4]
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	4413      	add	r3, r2
 800761e:	4a43      	ldr	r2, [pc, #268]	; (800772c <W25qxx_ReadPage+0x15c>)
 8007620:	f8b2 2009 	ldrh.w	r2, [r2, #9]
 8007624:	b292      	uxth	r2, r2
 8007626:	4293      	cmp	r3, r2
 8007628:	d907      	bls.n	800763a <W25qxx_ReadPage+0x6a>
        NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 800762a:	4b40      	ldr	r3, [pc, #256]	; (800772c <W25qxx_ReadPage+0x15c>)
 800762c:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8007630:	b29b      	uxth	r3, r3
 8007632:	461a      	mov	r2, r3
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	1ad3      	subs	r3, r2, r3
 8007638:	603b      	str	r3, [r7, #0]
                 __func__, Page_Address, Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
    //W25qxx_Delay(100);
    uint32_t StartTime = HAL_GetTick();
#endif

    Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 800763a:	4b3c      	ldr	r3, [pc, #240]	; (800772c <W25qxx_ReadPage+0x15c>)
 800763c:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8007640:	b29b      	uxth	r3, r3
 8007642:	461a      	mov	r2, r3
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	fb02 f303 	mul.w	r3, r2, r3
 800764a:	687a      	ldr	r2, [r7, #4]
 800764c:	4413      	add	r3, r2
 800764e:	60bb      	str	r3, [r7, #8]
    W25qxx_Spi(Page_Address & 0xFF);
    //W25qxx_Spi(0);
    HAL_SPI_Receive(portFLASH, pBuffer, NumByteToRead_up_to_PageSize, min_wait_ms);
    W25_UNSELECT();
    */
    memset(pageTmp, 0, sizeof(pageTmp));
 8007650:	f240 1205 	movw	r2, #261	; 0x105
 8007654:	2100      	movs	r1, #0
 8007656:	4836      	ldr	r0, [pc, #216]	; (8007730 <W25qxx_ReadPage+0x160>)
 8007658:	f008 f99a 	bl	800f990 <memset>
    uint16_t lens = NumByteToRead_up_to_PageSize + PAGE_HDR_BYTES;// + 1;
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	b29b      	uxth	r3, r3
 8007660:	3304      	adds	r3, #4
 8007662:	82fb      	strh	r3, [r7, #22]
    int idx = 0;
 8007664:	2300      	movs	r3, #0
 8007666:	613b      	str	r3, [r7, #16]
    pageTmp[idx++] = DATA_READ;//FAST_READ;
 8007668:	693b      	ldr	r3, [r7, #16]
 800766a:	1c5a      	adds	r2, r3, #1
 800766c:	613a      	str	r2, [r7, #16]
 800766e:	4a30      	ldr	r2, [pc, #192]	; (8007730 <W25qxx_ReadPage+0x160>)
 8007670:	2103      	movs	r1, #3
 8007672:	54d1      	strb	r1, [r2, r3]
    //if (w25qxx.ID >= W25Q256) pageTmp[idx++] = (Page_Address & 0xFF000000) >> 24;
    pageTmp[idx++] = (Page_Address & 0xFF0000) >> 16;
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	0c19      	lsrs	r1, r3, #16
 8007678:	693b      	ldr	r3, [r7, #16]
 800767a:	1c5a      	adds	r2, r3, #1
 800767c:	613a      	str	r2, [r7, #16]
 800767e:	b2c9      	uxtb	r1, r1
 8007680:	4a2b      	ldr	r2, [pc, #172]	; (8007730 <W25qxx_ReadPage+0x160>)
 8007682:	54d1      	strb	r1, [r2, r3]
    pageTmp[idx++] = (Page_Address& 0xFF00) >> 8;
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	0a19      	lsrs	r1, r3, #8
 8007688:	693b      	ldr	r3, [r7, #16]
 800768a:	1c5a      	adds	r2, r3, #1
 800768c:	613a      	str	r2, [r7, #16]
 800768e:	b2c9      	uxtb	r1, r1
 8007690:	4a27      	ldr	r2, [pc, #156]	; (8007730 <W25qxx_ReadPage+0x160>)
 8007692:	54d1      	strb	r1, [r2, r3]
    pageTmp[idx++] = Page_Address & 0xFF;
 8007694:	693b      	ldr	r3, [r7, #16]
 8007696:	1c5a      	adds	r2, r3, #1
 8007698:	613a      	str	r2, [r7, #16]
 800769a:	68ba      	ldr	r2, [r7, #8]
 800769c:	b2d1      	uxtb	r1, r2
 800769e:	4a24      	ldr	r2, [pc, #144]	; (8007730 <W25qxx_ReadPage+0x160>)
 80076a0:	54d1      	strb	r1, [r2, r3]
    //pageTmp[idx++] = 0;
    spiRdy = 0;
 80076a2:	4b24      	ldr	r3, [pc, #144]	; (8007734 <W25qxx_ReadPage+0x164>)
 80076a4:	2200      	movs	r2, #0
 80076a6:	701a      	strb	r2, [r3, #0]

w25_withDMA = 1;
 80076a8:	4b23      	ldr	r3, [pc, #140]	; (8007738 <W25qxx_ReadPage+0x168>)
 80076aa:	2201      	movs	r2, #1
 80076ac:	701a      	strb	r2, [r3, #0]
    W25_SELECT();
 80076ae:	f7ff fb45 	bl	8006d3c <W25_SELECT>
    if (w25_withDMA) {
 80076b2:	4b21      	ldr	r3, [pc, #132]	; (8007738 <W25qxx_ReadPage+0x168>)
 80076b4:	781b      	ldrb	r3, [r3, #0]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d012      	beq.n	80076e0 <W25qxx_ReadPage+0x110>
    	HAL_SPI_TransmitReceive_DMA(portFLASH, pageTmp, pageTmp, lens);
 80076ba:	4b20      	ldr	r3, [pc, #128]	; (800773c <W25qxx_ReadPage+0x16c>)
 80076bc:	6818      	ldr	r0, [r3, #0]
 80076be:	8afb      	ldrh	r3, [r7, #22]
 80076c0:	4a1b      	ldr	r2, [pc, #108]	; (8007730 <W25qxx_ReadPage+0x160>)
 80076c2:	491b      	ldr	r1, [pc, #108]	; (8007730 <W25qxx_ReadPage+0x160>)
 80076c4:	f005 f8fa 	bl	800c8bc <HAL_SPI_TransmitReceive_DMA>
    	while (!spiRdy) {
 80076c8:	e002      	b.n	80076d0 <W25qxx_ReadPage+0x100>
    		W25qxx_Delay(1);
 80076ca:	2001      	movs	r0, #1
 80076cc:	f000 f946 	bl	800795c <HAL_Delay>
    	while (!spiRdy) {
 80076d0:	4b18      	ldr	r3, [pc, #96]	; (8007734 <W25qxx_ReadPage+0x164>)
 80076d2:	781b      	ldrb	r3, [r3, #0]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d0f8      	beq.n	80076ca <W25qxx_ReadPage+0xfa>
    	}
w25_withDMA = 0;
 80076d8:	4b17      	ldr	r3, [pc, #92]	; (8007738 <W25qxx_ReadPage+0x168>)
 80076da:	2200      	movs	r2, #0
 80076dc:	701a      	strb	r2, [r3, #0]
 80076de:	e017      	b.n	8007710 <W25qxx_ReadPage+0x140>
    } else {
    	if (HAL_SPI_TransmitReceive(portFLASH, pageTmp, pageTmp, lens, min_wait_ms) != HAL_OK) devError |= devSPI;
 80076e0:	4b16      	ldr	r3, [pc, #88]	; (800773c <W25qxx_ReadPage+0x16c>)
 80076e2:	6818      	ldr	r0, [r3, #0]
 80076e4:	22fa      	movs	r2, #250	; 0xfa
 80076e6:	8afb      	ldrh	r3, [r7, #22]
 80076e8:	9200      	str	r2, [sp, #0]
 80076ea:	4a11      	ldr	r2, [pc, #68]	; (8007730 <W25qxx_ReadPage+0x160>)
 80076ec:	4910      	ldr	r1, [pc, #64]	; (8007730 <W25qxx_ReadPage+0x160>)
 80076ee:	f004 fdde 	bl	800c2ae <HAL_SPI_TransmitReceive>
 80076f2:	4603      	mov	r3, r0
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d006      	beq.n	8007706 <W25qxx_ReadPage+0x136>
 80076f8:	4b11      	ldr	r3, [pc, #68]	; (8007740 <W25qxx_ReadPage+0x170>)
 80076fa:	881b      	ldrh	r3, [r3, #0]
 80076fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007700:	b29a      	uxth	r2, r3
 8007702:	4b0f      	ldr	r3, [pc, #60]	; (8007740 <W25qxx_ReadPage+0x170>)
 8007704:	801a      	strh	r2, [r3, #0]
    	W25_UNSELECT();
 8007706:	f7ff fb25 	bl	8006d54 <W25_UNSELECT>

    	spiRdy = 1;
 800770a:	4b0a      	ldr	r3, [pc, #40]	; (8007734 <W25qxx_ReadPage+0x164>)
 800770c:	2201      	movs	r2, #1
 800770e:	701a      	strb	r2, [r3, #0]
    }
	memcpy(pBuffer, &pageTmp[PAGE_HDR_BYTES], NumByteToRead_up_to_PageSize);//w25qxx.PageSize);
 8007710:	683a      	ldr	r2, [r7, #0]
 8007712:	490c      	ldr	r1, [pc, #48]	; (8007744 <W25qxx_ReadPage+0x174>)
 8007714:	68f8      	ldr	r0, [r7, #12]
 8007716:	f008 f92d 	bl	800f974 <memcpy>
    	Report(0, "\r\n");
    	Report(1, "%s done after %u ms\r\n", __func__, StartTime);
#endif


    w25qxx.Lock = 0;
 800771a:	4b04      	ldr	r3, [pc, #16]	; (800772c <W25qxx_ReadPage+0x15c>)
 800771c:	2200      	movs	r2, #0
 800771e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 8007722:	bf00      	nop
 8007724:	3718      	adds	r7, #24
 8007726:	46bd      	mov	sp, r7
 8007728:	bd80      	pop	{r7, pc}
 800772a:	bf00      	nop
 800772c:	200037ac 	.word	0x200037ac
 8007730:	200037d4 	.word	0x200037d4
 8007734:	200001e4 	.word	0x200001e4
 8007738:	200038d9 	.word	0x200038d9
 800773c:	2000000c 	.word	0x2000000c
 8007740:	20001bc8 	.word	0x20001bc8
 8007744:	200037d8 	.word	0x200037d8

08007748 <W25qxx_ReadSector>:
//------------------------------------------------------------------------------------------
void W25qxx_ReadSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_SectorSize)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b088      	sub	sp, #32
 800774c:	af00      	add	r7, sp, #0
 800774e:	60f8      	str	r0, [r7, #12]
 8007750:	60b9      	str	r1, [r7, #8]
 8007752:	607a      	str	r2, [r7, #4]
 8007754:	603b      	str	r3, [r7, #0]
    if ((NumByteToRead_up_to_SectorSize > w25qxx.SectorSize) || !NumByteToRead_up_to_SectorSize)
 8007756:	4b31      	ldr	r3, [pc, #196]	; (800781c <W25qxx_ReadSector+0xd4>)
 8007758:	f8d3 300f 	ldr.w	r3, [r3, #15]
 800775c:	683a      	ldr	r2, [r7, #0]
 800775e:	429a      	cmp	r2, r3
 8007760:	d802      	bhi.n	8007768 <W25qxx_ReadSector+0x20>
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d103      	bne.n	8007770 <W25qxx_ReadSector+0x28>
                NumByteToRead_up_to_SectorSize = w25qxx.SectorSize;
 8007768:	4b2c      	ldr	r3, [pc, #176]	; (800781c <W25qxx_ReadSector+0xd4>)
 800776a:	f8d3 300f 	ldr.w	r3, [r3, #15]
 800776e:	603b      	str	r3, [r7, #0]
    Report(1, "%s:0x%X(%u), Offset:%u ,Read %u Bytes, begin...\r\n",
                 __func__, Sector_Address, Sector_Address, OffsetInByte, NumByteToRead_up_to_SectorSize);
    //W25qxx_Delay(100);
#endif

    if (OffsetInByte >= w25qxx.SectorSize) {
 8007770:	4b2a      	ldr	r3, [pc, #168]	; (800781c <W25qxx_ReadSector+0xd4>)
 8007772:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8007776:	687a      	ldr	r2, [r7, #4]
 8007778:	429a      	cmp	r2, r3
 800777a:	d24b      	bcs.n	8007814 <W25qxx_ReadSector+0xcc>
        return;
    }

    int32_t BytesToRead;
    uint32_t LocalOffset, StartPage;
    if ((OffsetInByte + NumByteToRead_up_to_SectorSize) > w25qxx.SectorSize)
 800777c:	687a      	ldr	r2, [r7, #4]
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	441a      	add	r2, r3
 8007782:	4b26      	ldr	r3, [pc, #152]	; (800781c <W25qxx_ReadSector+0xd4>)
 8007784:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8007788:	429a      	cmp	r2, r3
 800778a:	d906      	bls.n	800779a <W25qxx_ReadSector+0x52>
        BytesToRead = w25qxx.SectorSize - OffsetInByte;
 800778c:	4b23      	ldr	r3, [pc, #140]	; (800781c <W25qxx_ReadSector+0xd4>)
 800778e:	f8d3 200f 	ldr.w	r2, [r3, #15]
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	1ad3      	subs	r3, r2, r3
 8007796:	61fb      	str	r3, [r7, #28]
 8007798:	e001      	b.n	800779e <W25qxx_ReadSector+0x56>
    else
        BytesToRead = NumByteToRead_up_to_SectorSize;
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	61fb      	str	r3, [r7, #28]
    StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 800779e:	68b8      	ldr	r0, [r7, #8]
 80077a0:	f7ff fd1e 	bl	80071e0 <W25qxx_SectorToPage>
 80077a4:	4602      	mov	r2, r0
 80077a6:	4b1d      	ldr	r3, [pc, #116]	; (800781c <W25qxx_ReadSector+0xd4>)
 80077a8:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 80077ac:	b29b      	uxth	r3, r3
 80077ae:	4619      	mov	r1, r3
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80077b6:	4413      	add	r3, r2
 80077b8:	617b      	str	r3, [r7, #20]
    LocalOffset = OffsetInByte % w25qxx.PageSize;
 80077ba:	4b18      	ldr	r3, [pc, #96]	; (800781c <W25qxx_ReadSector+0xd4>)
 80077bc:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 80077c0:	b29b      	uxth	r3, r3
 80077c2:	461a      	mov	r2, r3
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	fbb3 f1f2 	udiv	r1, r3, r2
 80077ca:	fb01 f202 	mul.w	r2, r1, r2
 80077ce:	1a9b      	subs	r3, r3, r2
 80077d0:	61bb      	str	r3, [r7, #24]
    do {
        W25qxx_ReadPage(pBuffer, StartPage, LocalOffset, BytesToRead);
 80077d2:	69fb      	ldr	r3, [r7, #28]
 80077d4:	69ba      	ldr	r2, [r7, #24]
 80077d6:	6979      	ldr	r1, [r7, #20]
 80077d8:	68f8      	ldr	r0, [r7, #12]
 80077da:	f7ff fef9 	bl	80075d0 <W25qxx_ReadPage>
        StartPage++;
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	3301      	adds	r3, #1
 80077e2:	617b      	str	r3, [r7, #20]
        BytesToRead -= w25qxx.PageSize - LocalOffset;
 80077e4:	4b0d      	ldr	r3, [pc, #52]	; (800781c <W25qxx_ReadSector+0xd4>)
 80077e6:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 80077ea:	b29b      	uxth	r3, r3
 80077ec:	461a      	mov	r2, r3
 80077ee:	69bb      	ldr	r3, [r7, #24]
 80077f0:	1a9a      	subs	r2, r3, r2
 80077f2:	69fb      	ldr	r3, [r7, #28]
 80077f4:	4413      	add	r3, r2
 80077f6:	61fb      	str	r3, [r7, #28]
        pBuffer += w25qxx.PageSize;
 80077f8:	4b08      	ldr	r3, [pc, #32]	; (800781c <W25qxx_ReadSector+0xd4>)
 80077fa:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 80077fe:	b29b      	uxth	r3, r3
 8007800:	461a      	mov	r2, r3
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	4413      	add	r3, r2
 8007806:	60fb      	str	r3, [r7, #12]
        LocalOffset = 0;
 8007808:	2300      	movs	r3, #0
 800780a:	61bb      	str	r3, [r7, #24]
    } while(BytesToRead > 0);
 800780c:	69fb      	ldr	r3, [r7, #28]
 800780e:	2b00      	cmp	r3, #0
 8007810:	dcdf      	bgt.n	80077d2 <W25qxx_ReadSector+0x8a>
 8007812:	e000      	b.n	8007816 <W25qxx_ReadSector+0xce>
        return;
 8007814:	bf00      	nop
#ifdef W25QXX_DEBUG
    Report(1, "%s done\r\n", __func__);
    //W25qxx_Delay(100);
#endif

}
 8007816:	3720      	adds	r7, #32
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}
 800781c:	200037ac 	.word	0x200037ac

08007820 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8007820:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007858 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8007824:	f7ff fa78 	bl	8006d18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007828:	480c      	ldr	r0, [pc, #48]	; (800785c <LoopForever+0x6>)
  ldr r1, =_edata
 800782a:	490d      	ldr	r1, [pc, #52]	; (8007860 <LoopForever+0xa>)
  ldr r2, =_sidata
 800782c:	4a0d      	ldr	r2, [pc, #52]	; (8007864 <LoopForever+0xe>)
  movs r3, #0
 800782e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007830:	e002      	b.n	8007838 <LoopCopyDataInit>

08007832 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007832:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007834:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007836:	3304      	adds	r3, #4

08007838 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007838:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800783a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800783c:	d3f9      	bcc.n	8007832 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800783e:	4a0a      	ldr	r2, [pc, #40]	; (8007868 <LoopForever+0x12>)
  ldr r4, =_ebss
 8007840:	4c0a      	ldr	r4, [pc, #40]	; (800786c <LoopForever+0x16>)
  movs r3, #0
 8007842:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007844:	e001      	b.n	800784a <LoopFillZerobss>

08007846 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007846:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007848:	3204      	adds	r2, #4

0800784a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800784a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800784c:	d3fb      	bcc.n	8007846 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800784e:	f008 f85d 	bl	800f90c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8007852:	f7fa fda3 	bl	800239c <main>

08007856 <LoopForever>:

LoopForever:
    b LoopForever
 8007856:	e7fe      	b.n	8007856 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8007858:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800785c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007860:	20000434 	.word	0x20000434
  ldr r2, =_sidata
 8007864:	08015c94 	.word	0x08015c94
  ldr r2, =_sbss
 8007868:	20000438 	.word	0x20000438
  ldr r4, =_ebss
 800786c:	200038f0 	.word	0x200038f0

08007870 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8007870:	e7fe      	b.n	8007870 <ADC1_2_IRQHandler>

08007872 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007872:	b580      	push	{r7, lr}
 8007874:	b082      	sub	sp, #8
 8007876:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8007878:	2300      	movs	r3, #0
 800787a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800787c:	2003      	movs	r0, #3
 800787e:	f000 f9a5 	bl	8007bcc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007882:	200f      	movs	r0, #15
 8007884:	f000 f80e 	bl	80078a4 <HAL_InitTick>
 8007888:	4603      	mov	r3, r0
 800788a:	2b00      	cmp	r3, #0
 800788c:	d002      	beq.n	8007894 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800788e:	2301      	movs	r3, #1
 8007890:	71fb      	strb	r3, [r7, #7]
 8007892:	e001      	b.n	8007898 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8007894:	f7fe fd24 	bl	80062e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8007898:	79fb      	ldrb	r3, [r7, #7]
}
 800789a:	4618      	mov	r0, r3
 800789c:	3708      	adds	r7, #8
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}
	...

080078a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b084      	sub	sp, #16
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80078ac:	2300      	movs	r3, #0
 80078ae:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80078b0:	4b17      	ldr	r3, [pc, #92]	; (8007910 <HAL_InitTick+0x6c>)
 80078b2:	781b      	ldrb	r3, [r3, #0]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d023      	beq.n	8007900 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80078b8:	4b16      	ldr	r3, [pc, #88]	; (8007914 <HAL_InitTick+0x70>)
 80078ba:	681a      	ldr	r2, [r3, #0]
 80078bc:	4b14      	ldr	r3, [pc, #80]	; (8007910 <HAL_InitTick+0x6c>)
 80078be:	781b      	ldrb	r3, [r3, #0]
 80078c0:	4619      	mov	r1, r3
 80078c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80078c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80078ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80078ce:	4618      	mov	r0, r3
 80078d0:	f000 f9bf 	bl	8007c52 <HAL_SYSTICK_Config>
 80078d4:	4603      	mov	r3, r0
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d10f      	bne.n	80078fa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2b0f      	cmp	r3, #15
 80078de:	d809      	bhi.n	80078f4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80078e0:	2200      	movs	r2, #0
 80078e2:	6879      	ldr	r1, [r7, #4]
 80078e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80078e8:	f000 f97b 	bl	8007be2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80078ec:	4a0a      	ldr	r2, [pc, #40]	; (8007918 <HAL_InitTick+0x74>)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6013      	str	r3, [r2, #0]
 80078f2:	e007      	b.n	8007904 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80078f4:	2301      	movs	r3, #1
 80078f6:	73fb      	strb	r3, [r7, #15]
 80078f8:	e004      	b.n	8007904 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80078fa:	2301      	movs	r3, #1
 80078fc:	73fb      	strb	r3, [r7, #15]
 80078fe:	e001      	b.n	8007904 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8007900:	2301      	movs	r3, #1
 8007902:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8007904:	7bfb      	ldrb	r3, [r7, #15]
}
 8007906:	4618      	mov	r0, r3
 8007908:	3710      	adds	r7, #16
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}
 800790e:	bf00      	nop
 8007910:	2000025c 	.word	0x2000025c
 8007914:	20000228 	.word	0x20000228
 8007918:	20000258 	.word	0x20000258

0800791c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800791c:	b480      	push	{r7}
 800791e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8007920:	4b06      	ldr	r3, [pc, #24]	; (800793c <HAL_IncTick+0x20>)
 8007922:	781b      	ldrb	r3, [r3, #0]
 8007924:	461a      	mov	r2, r3
 8007926:	4b06      	ldr	r3, [pc, #24]	; (8007940 <HAL_IncTick+0x24>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	4413      	add	r3, r2
 800792c:	4a04      	ldr	r2, [pc, #16]	; (8007940 <HAL_IncTick+0x24>)
 800792e:	6013      	str	r3, [r2, #0]
}
 8007930:	bf00      	nop
 8007932:	46bd      	mov	sp, r7
 8007934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007938:	4770      	bx	lr
 800793a:	bf00      	nop
 800793c:	2000025c 	.word	0x2000025c
 8007940:	200038dc 	.word	0x200038dc

08007944 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007944:	b480      	push	{r7}
 8007946:	af00      	add	r7, sp, #0
  return uwTick;
 8007948:	4b03      	ldr	r3, [pc, #12]	; (8007958 <HAL_GetTick+0x14>)
 800794a:	681b      	ldr	r3, [r3, #0]
}
 800794c:	4618      	mov	r0, r3
 800794e:	46bd      	mov	sp, r7
 8007950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007954:	4770      	bx	lr
 8007956:	bf00      	nop
 8007958:	200038dc 	.word	0x200038dc

0800795c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b084      	sub	sp, #16
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007964:	f7ff ffee 	bl	8007944 <HAL_GetTick>
 8007968:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007974:	d005      	beq.n	8007982 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8007976:	4b0a      	ldr	r3, [pc, #40]	; (80079a0 <HAL_Delay+0x44>)
 8007978:	781b      	ldrb	r3, [r3, #0]
 800797a:	461a      	mov	r2, r3
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	4413      	add	r3, r2
 8007980:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007982:	bf00      	nop
 8007984:	f7ff ffde 	bl	8007944 <HAL_GetTick>
 8007988:	4602      	mov	r2, r0
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	1ad3      	subs	r3, r2, r3
 800798e:	68fa      	ldr	r2, [r7, #12]
 8007990:	429a      	cmp	r2, r3
 8007992:	d8f7      	bhi.n	8007984 <HAL_Delay+0x28>
  {
  }
}
 8007994:	bf00      	nop
 8007996:	bf00      	nop
 8007998:	3710      	adds	r7, #16
 800799a:	46bd      	mov	sp, r7
 800799c:	bd80      	pop	{r7, pc}
 800799e:	bf00      	nop
 80079a0:	2000025c 	.word	0x2000025c

080079a4 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80079a4:	b480      	push	{r7}
 80079a6:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 80079a8:	4b05      	ldr	r3, [pc, #20]	; (80079c0 <HAL_SuspendTick+0x1c>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	4a04      	ldr	r2, [pc, #16]	; (80079c0 <HAL_SuspendTick+0x1c>)
 80079ae:	f023 0302 	bic.w	r3, r3, #2
 80079b2:	6013      	str	r3, [r2, #0]
}
 80079b4:	bf00      	nop
 80079b6:	46bd      	mov	sp, r7
 80079b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079bc:	4770      	bx	lr
 80079be:	bf00      	nop
 80079c0:	e000e010 	.word	0xe000e010

080079c4 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80079c4:	b480      	push	{r7}
 80079c6:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 80079c8:	4b05      	ldr	r3, [pc, #20]	; (80079e0 <HAL_ResumeTick+0x1c>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4a04      	ldr	r2, [pc, #16]	; (80079e0 <HAL_ResumeTick+0x1c>)
 80079ce:	f043 0302 	orr.w	r3, r3, #2
 80079d2:	6013      	str	r3, [r2, #0]
}
 80079d4:	bf00      	nop
 80079d6:	46bd      	mov	sp, r7
 80079d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079dc:	4770      	bx	lr
 80079de:	bf00      	nop
 80079e0:	e000e010 	.word	0xe000e010

080079e4 <__NVIC_SetPriorityGrouping>:
{
 80079e4:	b480      	push	{r7}
 80079e6:	b085      	sub	sp, #20
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f003 0307 	and.w	r3, r3, #7
 80079f2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80079f4:	4b0c      	ldr	r3, [pc, #48]	; (8007a28 <__NVIC_SetPriorityGrouping+0x44>)
 80079f6:	68db      	ldr	r3, [r3, #12]
 80079f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80079fa:	68ba      	ldr	r2, [r7, #8]
 80079fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007a00:	4013      	ands	r3, r2
 8007a02:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007a0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007a10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007a16:	4a04      	ldr	r2, [pc, #16]	; (8007a28 <__NVIC_SetPriorityGrouping+0x44>)
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	60d3      	str	r3, [r2, #12]
}
 8007a1c:	bf00      	nop
 8007a1e:	3714      	adds	r7, #20
 8007a20:	46bd      	mov	sp, r7
 8007a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a26:	4770      	bx	lr
 8007a28:	e000ed00 	.word	0xe000ed00

08007a2c <__NVIC_GetPriorityGrouping>:
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007a30:	4b04      	ldr	r3, [pc, #16]	; (8007a44 <__NVIC_GetPriorityGrouping+0x18>)
 8007a32:	68db      	ldr	r3, [r3, #12]
 8007a34:	0a1b      	lsrs	r3, r3, #8
 8007a36:	f003 0307 	and.w	r3, r3, #7
}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a42:	4770      	bx	lr
 8007a44:	e000ed00 	.word	0xe000ed00

08007a48 <__NVIC_EnableIRQ>:
{
 8007a48:	b480      	push	{r7}
 8007a4a:	b083      	sub	sp, #12
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	4603      	mov	r3, r0
 8007a50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	db0b      	blt.n	8007a72 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007a5a:	79fb      	ldrb	r3, [r7, #7]
 8007a5c:	f003 021f 	and.w	r2, r3, #31
 8007a60:	4907      	ldr	r1, [pc, #28]	; (8007a80 <__NVIC_EnableIRQ+0x38>)
 8007a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a66:	095b      	lsrs	r3, r3, #5
 8007a68:	2001      	movs	r0, #1
 8007a6a:	fa00 f202 	lsl.w	r2, r0, r2
 8007a6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007a72:	bf00      	nop
 8007a74:	370c      	adds	r7, #12
 8007a76:	46bd      	mov	sp, r7
 8007a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7c:	4770      	bx	lr
 8007a7e:	bf00      	nop
 8007a80:	e000e100 	.word	0xe000e100

08007a84 <__NVIC_DisableIRQ>:
{
 8007a84:	b480      	push	{r7}
 8007a86:	b083      	sub	sp, #12
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	db12      	blt.n	8007abc <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007a96:	79fb      	ldrb	r3, [r7, #7]
 8007a98:	f003 021f 	and.w	r2, r3, #31
 8007a9c:	490a      	ldr	r1, [pc, #40]	; (8007ac8 <__NVIC_DisableIRQ+0x44>)
 8007a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007aa2:	095b      	lsrs	r3, r3, #5
 8007aa4:	2001      	movs	r0, #1
 8007aa6:	fa00 f202 	lsl.w	r2, r0, r2
 8007aaa:	3320      	adds	r3, #32
 8007aac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8007ab0:	f3bf 8f4f 	dsb	sy
}
 8007ab4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007ab6:	f3bf 8f6f 	isb	sy
}
 8007aba:	bf00      	nop
}
 8007abc:	bf00      	nop
 8007abe:	370c      	adds	r7, #12
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac6:	4770      	bx	lr
 8007ac8:	e000e100 	.word	0xe000e100

08007acc <__NVIC_SetPriority>:
{
 8007acc:	b480      	push	{r7}
 8007ace:	b083      	sub	sp, #12
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	6039      	str	r1, [r7, #0]
 8007ad6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007ad8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	db0a      	blt.n	8007af6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	b2da      	uxtb	r2, r3
 8007ae4:	490c      	ldr	r1, [pc, #48]	; (8007b18 <__NVIC_SetPriority+0x4c>)
 8007ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007aea:	0112      	lsls	r2, r2, #4
 8007aec:	b2d2      	uxtb	r2, r2
 8007aee:	440b      	add	r3, r1
 8007af0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007af4:	e00a      	b.n	8007b0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	b2da      	uxtb	r2, r3
 8007afa:	4908      	ldr	r1, [pc, #32]	; (8007b1c <__NVIC_SetPriority+0x50>)
 8007afc:	79fb      	ldrb	r3, [r7, #7]
 8007afe:	f003 030f 	and.w	r3, r3, #15
 8007b02:	3b04      	subs	r3, #4
 8007b04:	0112      	lsls	r2, r2, #4
 8007b06:	b2d2      	uxtb	r2, r2
 8007b08:	440b      	add	r3, r1
 8007b0a:	761a      	strb	r2, [r3, #24]
}
 8007b0c:	bf00      	nop
 8007b0e:	370c      	adds	r7, #12
 8007b10:	46bd      	mov	sp, r7
 8007b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b16:	4770      	bx	lr
 8007b18:	e000e100 	.word	0xe000e100
 8007b1c:	e000ed00 	.word	0xe000ed00

08007b20 <NVIC_EncodePriority>:
{
 8007b20:	b480      	push	{r7}
 8007b22:	b089      	sub	sp, #36	; 0x24
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	60f8      	str	r0, [r7, #12]
 8007b28:	60b9      	str	r1, [r7, #8]
 8007b2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	f003 0307 	and.w	r3, r3, #7
 8007b32:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007b34:	69fb      	ldr	r3, [r7, #28]
 8007b36:	f1c3 0307 	rsb	r3, r3, #7
 8007b3a:	2b04      	cmp	r3, #4
 8007b3c:	bf28      	it	cs
 8007b3e:	2304      	movcs	r3, #4
 8007b40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007b42:	69fb      	ldr	r3, [r7, #28]
 8007b44:	3304      	adds	r3, #4
 8007b46:	2b06      	cmp	r3, #6
 8007b48:	d902      	bls.n	8007b50 <NVIC_EncodePriority+0x30>
 8007b4a:	69fb      	ldr	r3, [r7, #28]
 8007b4c:	3b03      	subs	r3, #3
 8007b4e:	e000      	b.n	8007b52 <NVIC_EncodePriority+0x32>
 8007b50:	2300      	movs	r3, #0
 8007b52:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007b54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007b58:	69bb      	ldr	r3, [r7, #24]
 8007b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8007b5e:	43da      	mvns	r2, r3
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	401a      	ands	r2, r3
 8007b64:	697b      	ldr	r3, [r7, #20]
 8007b66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007b68:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007b6c:	697b      	ldr	r3, [r7, #20]
 8007b6e:	fa01 f303 	lsl.w	r3, r1, r3
 8007b72:	43d9      	mvns	r1, r3
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007b78:	4313      	orrs	r3, r2
}
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	3724      	adds	r7, #36	; 0x24
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b84:	4770      	bx	lr
	...

08007b88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b082      	sub	sp, #8
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	3b01      	subs	r3, #1
 8007b94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007b98:	d301      	bcc.n	8007b9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	e00f      	b.n	8007bbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007b9e:	4a0a      	ldr	r2, [pc, #40]	; (8007bc8 <SysTick_Config+0x40>)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	3b01      	subs	r3, #1
 8007ba4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007ba6:	210f      	movs	r1, #15
 8007ba8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007bac:	f7ff ff8e 	bl	8007acc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007bb0:	4b05      	ldr	r3, [pc, #20]	; (8007bc8 <SysTick_Config+0x40>)
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007bb6:	4b04      	ldr	r3, [pc, #16]	; (8007bc8 <SysTick_Config+0x40>)
 8007bb8:	2207      	movs	r2, #7
 8007bba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007bbc:	2300      	movs	r3, #0
}
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	3708      	adds	r7, #8
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bd80      	pop	{r7, pc}
 8007bc6:	bf00      	nop
 8007bc8:	e000e010 	.word	0xe000e010

08007bcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b082      	sub	sp, #8
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f7ff ff05 	bl	80079e4 <__NVIC_SetPriorityGrouping>
}
 8007bda:	bf00      	nop
 8007bdc:	3708      	adds	r7, #8
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}

08007be2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007be2:	b580      	push	{r7, lr}
 8007be4:	b086      	sub	sp, #24
 8007be6:	af00      	add	r7, sp, #0
 8007be8:	4603      	mov	r3, r0
 8007bea:	60b9      	str	r1, [r7, #8]
 8007bec:	607a      	str	r2, [r7, #4]
 8007bee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007bf4:	f7ff ff1a 	bl	8007a2c <__NVIC_GetPriorityGrouping>
 8007bf8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007bfa:	687a      	ldr	r2, [r7, #4]
 8007bfc:	68b9      	ldr	r1, [r7, #8]
 8007bfe:	6978      	ldr	r0, [r7, #20]
 8007c00:	f7ff ff8e 	bl	8007b20 <NVIC_EncodePriority>
 8007c04:	4602      	mov	r2, r0
 8007c06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c0a:	4611      	mov	r1, r2
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	f7ff ff5d 	bl	8007acc <__NVIC_SetPriority>
}
 8007c12:	bf00      	nop
 8007c14:	3718      	adds	r7, #24
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bd80      	pop	{r7, pc}

08007c1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007c1a:	b580      	push	{r7, lr}
 8007c1c:	b082      	sub	sp, #8
 8007c1e:	af00      	add	r7, sp, #0
 8007c20:	4603      	mov	r3, r0
 8007c22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007c24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c28:	4618      	mov	r0, r3
 8007c2a:	f7ff ff0d 	bl	8007a48 <__NVIC_EnableIRQ>
}
 8007c2e:	bf00      	nop
 8007c30:	3708      	adds	r7, #8
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bd80      	pop	{r7, pc}

08007c36 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007c36:	b580      	push	{r7, lr}
 8007c38:	b082      	sub	sp, #8
 8007c3a:	af00      	add	r7, sp, #0
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8007c40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c44:	4618      	mov	r0, r3
 8007c46:	f7ff ff1d 	bl	8007a84 <__NVIC_DisableIRQ>
}
 8007c4a:	bf00      	nop
 8007c4c:	3708      	adds	r7, #8
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}

08007c52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007c52:	b580      	push	{r7, lr}
 8007c54:	b082      	sub	sp, #8
 8007c56:	af00      	add	r7, sp, #0
 8007c58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f7ff ff94 	bl	8007b88 <SysTick_Config>
 8007c60:	4603      	mov	r3, r0
}
 8007c62:	4618      	mov	r0, r3
 8007c64:	3708      	adds	r7, #8
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bd80      	pop	{r7, pc}
	...

08007c6c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b085      	sub	sp, #20
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d101      	bne.n	8007c7e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	e098      	b.n	8007db0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	461a      	mov	r2, r3
 8007c84:	4b4d      	ldr	r3, [pc, #308]	; (8007dbc <HAL_DMA_Init+0x150>)
 8007c86:	429a      	cmp	r2, r3
 8007c88:	d80f      	bhi.n	8007caa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	461a      	mov	r2, r3
 8007c90:	4b4b      	ldr	r3, [pc, #300]	; (8007dc0 <HAL_DMA_Init+0x154>)
 8007c92:	4413      	add	r3, r2
 8007c94:	4a4b      	ldr	r2, [pc, #300]	; (8007dc4 <HAL_DMA_Init+0x158>)
 8007c96:	fba2 2303 	umull	r2, r3, r2, r3
 8007c9a:	091b      	lsrs	r3, r3, #4
 8007c9c:	009a      	lsls	r2, r3, #2
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	4a48      	ldr	r2, [pc, #288]	; (8007dc8 <HAL_DMA_Init+0x15c>)
 8007ca6:	641a      	str	r2, [r3, #64]	; 0x40
 8007ca8:	e00e      	b.n	8007cc8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	461a      	mov	r2, r3
 8007cb0:	4b46      	ldr	r3, [pc, #280]	; (8007dcc <HAL_DMA_Init+0x160>)
 8007cb2:	4413      	add	r3, r2
 8007cb4:	4a43      	ldr	r2, [pc, #268]	; (8007dc4 <HAL_DMA_Init+0x158>)
 8007cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8007cba:	091b      	lsrs	r3, r3, #4
 8007cbc:	009a      	lsls	r2, r3, #2
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	4a42      	ldr	r2, [pc, #264]	; (8007dd0 <HAL_DMA_Init+0x164>)
 8007cc6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2202      	movs	r2, #2
 8007ccc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007cde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ce2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8007cec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	691b      	ldr	r3, [r3, #16]
 8007cf2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007cf8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	699b      	ldr	r3, [r3, #24]
 8007cfe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007d04:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6a1b      	ldr	r3, [r3, #32]
 8007d0a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007d0c:	68fa      	ldr	r2, [r7, #12]
 8007d0e:	4313      	orrs	r3, r2
 8007d10:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	68fa      	ldr	r2, [r7, #12]
 8007d18:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	689b      	ldr	r3, [r3, #8]
 8007d1e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007d22:	d039      	beq.n	8007d98 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d28:	4a27      	ldr	r2, [pc, #156]	; (8007dc8 <HAL_DMA_Init+0x15c>)
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d11a      	bne.n	8007d64 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8007d2e:	4b29      	ldr	r3, [pc, #164]	; (8007dd4 <HAL_DMA_Init+0x168>)
 8007d30:	681a      	ldr	r2, [r3, #0]
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d36:	f003 031c 	and.w	r3, r3, #28
 8007d3a:	210f      	movs	r1, #15
 8007d3c:	fa01 f303 	lsl.w	r3, r1, r3
 8007d40:	43db      	mvns	r3, r3
 8007d42:	4924      	ldr	r1, [pc, #144]	; (8007dd4 <HAL_DMA_Init+0x168>)
 8007d44:	4013      	ands	r3, r2
 8007d46:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8007d48:	4b22      	ldr	r3, [pc, #136]	; (8007dd4 <HAL_DMA_Init+0x168>)
 8007d4a:	681a      	ldr	r2, [r3, #0]
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6859      	ldr	r1, [r3, #4]
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d54:	f003 031c 	and.w	r3, r3, #28
 8007d58:	fa01 f303 	lsl.w	r3, r1, r3
 8007d5c:	491d      	ldr	r1, [pc, #116]	; (8007dd4 <HAL_DMA_Init+0x168>)
 8007d5e:	4313      	orrs	r3, r2
 8007d60:	600b      	str	r3, [r1, #0]
 8007d62:	e019      	b.n	8007d98 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8007d64:	4b1c      	ldr	r3, [pc, #112]	; (8007dd8 <HAL_DMA_Init+0x16c>)
 8007d66:	681a      	ldr	r2, [r3, #0]
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d6c:	f003 031c 	and.w	r3, r3, #28
 8007d70:	210f      	movs	r1, #15
 8007d72:	fa01 f303 	lsl.w	r3, r1, r3
 8007d76:	43db      	mvns	r3, r3
 8007d78:	4917      	ldr	r1, [pc, #92]	; (8007dd8 <HAL_DMA_Init+0x16c>)
 8007d7a:	4013      	ands	r3, r2
 8007d7c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8007d7e:	4b16      	ldr	r3, [pc, #88]	; (8007dd8 <HAL_DMA_Init+0x16c>)
 8007d80:	681a      	ldr	r2, [r3, #0]
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6859      	ldr	r1, [r3, #4]
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d8a:	f003 031c 	and.w	r3, r3, #28
 8007d8e:	fa01 f303 	lsl.w	r3, r1, r3
 8007d92:	4911      	ldr	r1, [pc, #68]	; (8007dd8 <HAL_DMA_Init+0x16c>)
 8007d94:	4313      	orrs	r3, r2
 8007d96:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2201      	movs	r2, #1
 8007da2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2200      	movs	r2, #0
 8007daa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007dae:	2300      	movs	r3, #0
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	3714      	adds	r7, #20
 8007db4:	46bd      	mov	sp, r7
 8007db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dba:	4770      	bx	lr
 8007dbc:	40020407 	.word	0x40020407
 8007dc0:	bffdfff8 	.word	0xbffdfff8
 8007dc4:	cccccccd 	.word	0xcccccccd
 8007dc8:	40020000 	.word	0x40020000
 8007dcc:	bffdfbf8 	.word	0xbffdfbf8
 8007dd0:	40020400 	.word	0x40020400
 8007dd4:	400200a8 	.word	0x400200a8
 8007dd8:	400204a8 	.word	0x400204a8

08007ddc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b086      	sub	sp, #24
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	60f8      	str	r0, [r7, #12]
 8007de4:	60b9      	str	r1, [r7, #8]
 8007de6:	607a      	str	r2, [r7, #4]
 8007de8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007dea:	2300      	movs	r3, #0
 8007dec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007df4:	2b01      	cmp	r3, #1
 8007df6:	d101      	bne.n	8007dfc <HAL_DMA_Start_IT+0x20>
 8007df8:	2302      	movs	r3, #2
 8007dfa:	e04b      	b.n	8007e94 <HAL_DMA_Start_IT+0xb8>
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	2201      	movs	r2, #1
 8007e00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007e0a:	b2db      	uxtb	r3, r3
 8007e0c:	2b01      	cmp	r3, #1
 8007e0e:	d13a      	bne.n	8007e86 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	2202      	movs	r2, #2
 8007e14:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	681a      	ldr	r2, [r3, #0]
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f022 0201 	bic.w	r2, r2, #1
 8007e2c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	687a      	ldr	r2, [r7, #4]
 8007e32:	68b9      	ldr	r1, [r7, #8]
 8007e34:	68f8      	ldr	r0, [r7, #12]
 8007e36:	f000 f96d 	bl	8008114 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d008      	beq.n	8007e54 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	681a      	ldr	r2, [r3, #0]
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f042 020e 	orr.w	r2, r2, #14
 8007e50:	601a      	str	r2, [r3, #0]
 8007e52:	e00f      	b.n	8007e74 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	681a      	ldr	r2, [r3, #0]
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f022 0204 	bic.w	r2, r2, #4
 8007e62:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	681a      	ldr	r2, [r3, #0]
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f042 020a 	orr.w	r2, r2, #10
 8007e72:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	681a      	ldr	r2, [r3, #0]
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f042 0201 	orr.w	r2, r2, #1
 8007e82:	601a      	str	r2, [r3, #0]
 8007e84:	e005      	b.n	8007e92 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8007e8e:	2302      	movs	r3, #2
 8007e90:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8007e92:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	3718      	adds	r7, #24
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd80      	pop	{r7, pc}

08007e9c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	b085      	sub	sp, #20
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007eae:	b2db      	uxtb	r3, r3
 8007eb0:	2b02      	cmp	r3, #2
 8007eb2:	d008      	beq.n	8007ec6 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2204      	movs	r2, #4
 8007eb8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	e022      	b.n	8007f0c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	681a      	ldr	r2, [r3, #0]
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f022 020e 	bic.w	r2, r2, #14
 8007ed4:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	681a      	ldr	r2, [r3, #0]
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f022 0201 	bic.w	r2, r2, #1
 8007ee4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007eea:	f003 021c 	and.w	r2, r3, #28
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ef2:	2101      	movs	r1, #1
 8007ef4:	fa01 f202 	lsl.w	r2, r1, r2
 8007ef8:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2201      	movs	r2, #1
 8007efe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2200      	movs	r2, #0
 8007f06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8007f0a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	3714      	adds	r7, #20
 8007f10:	46bd      	mov	sp, r7
 8007f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f16:	4770      	bx	lr

08007f18 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b084      	sub	sp, #16
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007f20:	2300      	movs	r3, #0
 8007f22:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007f2a:	b2db      	uxtb	r3, r3
 8007f2c:	2b02      	cmp	r3, #2
 8007f2e:	d005      	beq.n	8007f3c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2204      	movs	r2, #4
 8007f34:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8007f36:	2301      	movs	r3, #1
 8007f38:	73fb      	strb	r3, [r7, #15]
 8007f3a:	e029      	b.n	8007f90 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	681a      	ldr	r2, [r3, #0]
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f022 020e 	bic.w	r2, r2, #14
 8007f4a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	681a      	ldr	r2, [r3, #0]
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f022 0201 	bic.w	r2, r2, #1
 8007f5a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f60:	f003 021c 	and.w	r2, r3, #28
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f68:	2101      	movs	r1, #1
 8007f6a:	fa01 f202 	lsl.w	r2, r1, r2
 8007f6e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2201      	movs	r2, #1
 8007f74:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d003      	beq.n	8007f90 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	4798      	blx	r3
    }
  }
  return status;
 8007f90:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	3710      	adds	r7, #16
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}

08007f9a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007f9a:	b580      	push	{r7, lr}
 8007f9c:	b084      	sub	sp, #16
 8007f9e:	af00      	add	r7, sp, #0
 8007fa0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fb6:	f003 031c 	and.w	r3, r3, #28
 8007fba:	2204      	movs	r2, #4
 8007fbc:	409a      	lsls	r2, r3
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	4013      	ands	r3, r2
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d026      	beq.n	8008014 <HAL_DMA_IRQHandler+0x7a>
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	f003 0304 	and.w	r3, r3, #4
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d021      	beq.n	8008014 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f003 0320 	and.w	r3, r3, #32
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d107      	bne.n	8007fee <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	681a      	ldr	r2, [r3, #0]
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f022 0204 	bic.w	r2, r2, #4
 8007fec:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ff2:	f003 021c 	and.w	r2, r3, #28
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ffa:	2104      	movs	r1, #4
 8007ffc:	fa01 f202 	lsl.w	r2, r1, r2
 8008000:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008006:	2b00      	cmp	r3, #0
 8008008:	d071      	beq.n	80080ee <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8008012:	e06c      	b.n	80080ee <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008018:	f003 031c 	and.w	r3, r3, #28
 800801c:	2202      	movs	r2, #2
 800801e:	409a      	lsls	r2, r3
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	4013      	ands	r3, r2
 8008024:	2b00      	cmp	r3, #0
 8008026:	d02e      	beq.n	8008086 <HAL_DMA_IRQHandler+0xec>
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	f003 0302 	and.w	r3, r3, #2
 800802e:	2b00      	cmp	r3, #0
 8008030:	d029      	beq.n	8008086 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f003 0320 	and.w	r3, r3, #32
 800803c:	2b00      	cmp	r3, #0
 800803e:	d10b      	bne.n	8008058 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	681a      	ldr	r2, [r3, #0]
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f022 020a 	bic.w	r2, r2, #10
 800804e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2201      	movs	r2, #1
 8008054:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800805c:	f003 021c 	and.w	r2, r3, #28
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008064:	2102      	movs	r1, #2
 8008066:	fa01 f202 	lsl.w	r2, r1, r2
 800806a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2200      	movs	r2, #0
 8008070:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008078:	2b00      	cmp	r3, #0
 800807a:	d038      	beq.n	80080ee <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8008084:	e033      	b.n	80080ee <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800808a:	f003 031c 	and.w	r3, r3, #28
 800808e:	2208      	movs	r2, #8
 8008090:	409a      	lsls	r2, r3
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	4013      	ands	r3, r2
 8008096:	2b00      	cmp	r3, #0
 8008098:	d02a      	beq.n	80080f0 <HAL_DMA_IRQHandler+0x156>
 800809a:	68bb      	ldr	r3, [r7, #8]
 800809c:	f003 0308 	and.w	r3, r3, #8
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d025      	beq.n	80080f0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	681a      	ldr	r2, [r3, #0]
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f022 020e 	bic.w	r2, r2, #14
 80080b2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080b8:	f003 021c 	and.w	r2, r3, #28
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080c0:	2101      	movs	r1, #1
 80080c2:	fa01 f202 	lsl.w	r2, r1, r2
 80080c6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2201      	movs	r2, #1
 80080cc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2201      	movs	r2, #1
 80080d2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2200      	movs	r2, #0
 80080da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d004      	beq.n	80080f0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80080ee:	bf00      	nop
 80080f0:	bf00      	nop
}
 80080f2:	3710      	adds	r7, #16
 80080f4:	46bd      	mov	sp, r7
 80080f6:	bd80      	pop	{r7, pc}

080080f8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80080f8:	b480      	push	{r7}
 80080fa:	b083      	sub	sp, #12
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8008106:	b2db      	uxtb	r3, r3
}
 8008108:	4618      	mov	r0, r3
 800810a:	370c      	adds	r7, #12
 800810c:	46bd      	mov	sp, r7
 800810e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008112:	4770      	bx	lr

08008114 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008114:	b480      	push	{r7}
 8008116:	b085      	sub	sp, #20
 8008118:	af00      	add	r7, sp, #0
 800811a:	60f8      	str	r0, [r7, #12]
 800811c:	60b9      	str	r1, [r7, #8]
 800811e:	607a      	str	r2, [r7, #4]
 8008120:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008126:	f003 021c 	and.w	r2, r3, #28
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800812e:	2101      	movs	r1, #1
 8008130:	fa01 f202 	lsl.w	r2, r1, r2
 8008134:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	683a      	ldr	r2, [r7, #0]
 800813c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	689b      	ldr	r3, [r3, #8]
 8008142:	2b10      	cmp	r3, #16
 8008144:	d108      	bne.n	8008158 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	687a      	ldr	r2, [r7, #4]
 800814c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	68ba      	ldr	r2, [r7, #8]
 8008154:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8008156:	e007      	b.n	8008168 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	68ba      	ldr	r2, [r7, #8]
 800815e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	687a      	ldr	r2, [r7, #4]
 8008166:	60da      	str	r2, [r3, #12]
}
 8008168:	bf00      	nop
 800816a:	3714      	adds	r7, #20
 800816c:	46bd      	mov	sp, r7
 800816e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008172:	4770      	bx	lr

08008174 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008174:	b480      	push	{r7}
 8008176:	b087      	sub	sp, #28
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
 800817c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800817e:	2300      	movs	r3, #0
 8008180:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008182:	e17f      	b.n	8008484 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	681a      	ldr	r2, [r3, #0]
 8008188:	2101      	movs	r1, #1
 800818a:	697b      	ldr	r3, [r7, #20]
 800818c:	fa01 f303 	lsl.w	r3, r1, r3
 8008190:	4013      	ands	r3, r2
 8008192:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	2b00      	cmp	r3, #0
 8008198:	f000 8171 	beq.w	800847e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	685b      	ldr	r3, [r3, #4]
 80081a0:	f003 0303 	and.w	r3, r3, #3
 80081a4:	2b01      	cmp	r3, #1
 80081a6:	d005      	beq.n	80081b4 <HAL_GPIO_Init+0x40>
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	685b      	ldr	r3, [r3, #4]
 80081ac:	f003 0303 	and.w	r3, r3, #3
 80081b0:	2b02      	cmp	r3, #2
 80081b2:	d130      	bne.n	8008216 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	689b      	ldr	r3, [r3, #8]
 80081b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80081ba:	697b      	ldr	r3, [r7, #20]
 80081bc:	005b      	lsls	r3, r3, #1
 80081be:	2203      	movs	r2, #3
 80081c0:	fa02 f303 	lsl.w	r3, r2, r3
 80081c4:	43db      	mvns	r3, r3
 80081c6:	693a      	ldr	r2, [r7, #16]
 80081c8:	4013      	ands	r3, r2
 80081ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	68da      	ldr	r2, [r3, #12]
 80081d0:	697b      	ldr	r3, [r7, #20]
 80081d2:	005b      	lsls	r3, r3, #1
 80081d4:	fa02 f303 	lsl.w	r3, r2, r3
 80081d8:	693a      	ldr	r2, [r7, #16]
 80081da:	4313      	orrs	r3, r2
 80081dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	693a      	ldr	r2, [r7, #16]
 80081e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	685b      	ldr	r3, [r3, #4]
 80081e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80081ea:	2201      	movs	r2, #1
 80081ec:	697b      	ldr	r3, [r7, #20]
 80081ee:	fa02 f303 	lsl.w	r3, r2, r3
 80081f2:	43db      	mvns	r3, r3
 80081f4:	693a      	ldr	r2, [r7, #16]
 80081f6:	4013      	ands	r3, r2
 80081f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	685b      	ldr	r3, [r3, #4]
 80081fe:	091b      	lsrs	r3, r3, #4
 8008200:	f003 0201 	and.w	r2, r3, #1
 8008204:	697b      	ldr	r3, [r7, #20]
 8008206:	fa02 f303 	lsl.w	r3, r2, r3
 800820a:	693a      	ldr	r2, [r7, #16]
 800820c:	4313      	orrs	r3, r2
 800820e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	693a      	ldr	r2, [r7, #16]
 8008214:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	685b      	ldr	r3, [r3, #4]
 800821a:	f003 0303 	and.w	r3, r3, #3
 800821e:	2b03      	cmp	r3, #3
 8008220:	d118      	bne.n	8008254 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008226:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8008228:	2201      	movs	r2, #1
 800822a:	697b      	ldr	r3, [r7, #20]
 800822c:	fa02 f303 	lsl.w	r3, r2, r3
 8008230:	43db      	mvns	r3, r3
 8008232:	693a      	ldr	r2, [r7, #16]
 8008234:	4013      	ands	r3, r2
 8008236:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	685b      	ldr	r3, [r3, #4]
 800823c:	08db      	lsrs	r3, r3, #3
 800823e:	f003 0201 	and.w	r2, r3, #1
 8008242:	697b      	ldr	r3, [r7, #20]
 8008244:	fa02 f303 	lsl.w	r3, r2, r3
 8008248:	693a      	ldr	r2, [r7, #16]
 800824a:	4313      	orrs	r3, r2
 800824c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	693a      	ldr	r2, [r7, #16]
 8008252:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	685b      	ldr	r3, [r3, #4]
 8008258:	f003 0303 	and.w	r3, r3, #3
 800825c:	2b03      	cmp	r3, #3
 800825e:	d017      	beq.n	8008290 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	68db      	ldr	r3, [r3, #12]
 8008264:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008266:	697b      	ldr	r3, [r7, #20]
 8008268:	005b      	lsls	r3, r3, #1
 800826a:	2203      	movs	r2, #3
 800826c:	fa02 f303 	lsl.w	r3, r2, r3
 8008270:	43db      	mvns	r3, r3
 8008272:	693a      	ldr	r2, [r7, #16]
 8008274:	4013      	ands	r3, r2
 8008276:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	689a      	ldr	r2, [r3, #8]
 800827c:	697b      	ldr	r3, [r7, #20]
 800827e:	005b      	lsls	r3, r3, #1
 8008280:	fa02 f303 	lsl.w	r3, r2, r3
 8008284:	693a      	ldr	r2, [r7, #16]
 8008286:	4313      	orrs	r3, r2
 8008288:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	693a      	ldr	r2, [r7, #16]
 800828e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	685b      	ldr	r3, [r3, #4]
 8008294:	f003 0303 	and.w	r3, r3, #3
 8008298:	2b02      	cmp	r3, #2
 800829a:	d123      	bne.n	80082e4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800829c:	697b      	ldr	r3, [r7, #20]
 800829e:	08da      	lsrs	r2, r3, #3
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	3208      	adds	r2, #8
 80082a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80082aa:	697b      	ldr	r3, [r7, #20]
 80082ac:	f003 0307 	and.w	r3, r3, #7
 80082b0:	009b      	lsls	r3, r3, #2
 80082b2:	220f      	movs	r2, #15
 80082b4:	fa02 f303 	lsl.w	r3, r2, r3
 80082b8:	43db      	mvns	r3, r3
 80082ba:	693a      	ldr	r2, [r7, #16]
 80082bc:	4013      	ands	r3, r2
 80082be:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	691a      	ldr	r2, [r3, #16]
 80082c4:	697b      	ldr	r3, [r7, #20]
 80082c6:	f003 0307 	and.w	r3, r3, #7
 80082ca:	009b      	lsls	r3, r3, #2
 80082cc:	fa02 f303 	lsl.w	r3, r2, r3
 80082d0:	693a      	ldr	r2, [r7, #16]
 80082d2:	4313      	orrs	r3, r2
 80082d4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	08da      	lsrs	r2, r3, #3
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	3208      	adds	r2, #8
 80082de:	6939      	ldr	r1, [r7, #16]
 80082e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80082ea:	697b      	ldr	r3, [r7, #20]
 80082ec:	005b      	lsls	r3, r3, #1
 80082ee:	2203      	movs	r2, #3
 80082f0:	fa02 f303 	lsl.w	r3, r2, r3
 80082f4:	43db      	mvns	r3, r3
 80082f6:	693a      	ldr	r2, [r7, #16]
 80082f8:	4013      	ands	r3, r2
 80082fa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	685b      	ldr	r3, [r3, #4]
 8008300:	f003 0203 	and.w	r2, r3, #3
 8008304:	697b      	ldr	r3, [r7, #20]
 8008306:	005b      	lsls	r3, r3, #1
 8008308:	fa02 f303 	lsl.w	r3, r2, r3
 800830c:	693a      	ldr	r2, [r7, #16]
 800830e:	4313      	orrs	r3, r2
 8008310:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	693a      	ldr	r2, [r7, #16]
 8008316:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	685b      	ldr	r3, [r3, #4]
 800831c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008320:	2b00      	cmp	r3, #0
 8008322:	f000 80ac 	beq.w	800847e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008326:	4b5f      	ldr	r3, [pc, #380]	; (80084a4 <HAL_GPIO_Init+0x330>)
 8008328:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800832a:	4a5e      	ldr	r2, [pc, #376]	; (80084a4 <HAL_GPIO_Init+0x330>)
 800832c:	f043 0301 	orr.w	r3, r3, #1
 8008330:	6613      	str	r3, [r2, #96]	; 0x60
 8008332:	4b5c      	ldr	r3, [pc, #368]	; (80084a4 <HAL_GPIO_Init+0x330>)
 8008334:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008336:	f003 0301 	and.w	r3, r3, #1
 800833a:	60bb      	str	r3, [r7, #8]
 800833c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800833e:	4a5a      	ldr	r2, [pc, #360]	; (80084a8 <HAL_GPIO_Init+0x334>)
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	089b      	lsrs	r3, r3, #2
 8008344:	3302      	adds	r3, #2
 8008346:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800834a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800834c:	697b      	ldr	r3, [r7, #20]
 800834e:	f003 0303 	and.w	r3, r3, #3
 8008352:	009b      	lsls	r3, r3, #2
 8008354:	220f      	movs	r2, #15
 8008356:	fa02 f303 	lsl.w	r3, r2, r3
 800835a:	43db      	mvns	r3, r3
 800835c:	693a      	ldr	r2, [r7, #16]
 800835e:	4013      	ands	r3, r2
 8008360:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8008368:	d025      	beq.n	80083b6 <HAL_GPIO_Init+0x242>
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	4a4f      	ldr	r2, [pc, #316]	; (80084ac <HAL_GPIO_Init+0x338>)
 800836e:	4293      	cmp	r3, r2
 8008370:	d01f      	beq.n	80083b2 <HAL_GPIO_Init+0x23e>
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	4a4e      	ldr	r2, [pc, #312]	; (80084b0 <HAL_GPIO_Init+0x33c>)
 8008376:	4293      	cmp	r3, r2
 8008378:	d019      	beq.n	80083ae <HAL_GPIO_Init+0x23a>
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	4a4d      	ldr	r2, [pc, #308]	; (80084b4 <HAL_GPIO_Init+0x340>)
 800837e:	4293      	cmp	r3, r2
 8008380:	d013      	beq.n	80083aa <HAL_GPIO_Init+0x236>
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	4a4c      	ldr	r2, [pc, #304]	; (80084b8 <HAL_GPIO_Init+0x344>)
 8008386:	4293      	cmp	r3, r2
 8008388:	d00d      	beq.n	80083a6 <HAL_GPIO_Init+0x232>
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	4a4b      	ldr	r2, [pc, #300]	; (80084bc <HAL_GPIO_Init+0x348>)
 800838e:	4293      	cmp	r3, r2
 8008390:	d007      	beq.n	80083a2 <HAL_GPIO_Init+0x22e>
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	4a4a      	ldr	r2, [pc, #296]	; (80084c0 <HAL_GPIO_Init+0x34c>)
 8008396:	4293      	cmp	r3, r2
 8008398:	d101      	bne.n	800839e <HAL_GPIO_Init+0x22a>
 800839a:	2306      	movs	r3, #6
 800839c:	e00c      	b.n	80083b8 <HAL_GPIO_Init+0x244>
 800839e:	2307      	movs	r3, #7
 80083a0:	e00a      	b.n	80083b8 <HAL_GPIO_Init+0x244>
 80083a2:	2305      	movs	r3, #5
 80083a4:	e008      	b.n	80083b8 <HAL_GPIO_Init+0x244>
 80083a6:	2304      	movs	r3, #4
 80083a8:	e006      	b.n	80083b8 <HAL_GPIO_Init+0x244>
 80083aa:	2303      	movs	r3, #3
 80083ac:	e004      	b.n	80083b8 <HAL_GPIO_Init+0x244>
 80083ae:	2302      	movs	r3, #2
 80083b0:	e002      	b.n	80083b8 <HAL_GPIO_Init+0x244>
 80083b2:	2301      	movs	r3, #1
 80083b4:	e000      	b.n	80083b8 <HAL_GPIO_Init+0x244>
 80083b6:	2300      	movs	r3, #0
 80083b8:	697a      	ldr	r2, [r7, #20]
 80083ba:	f002 0203 	and.w	r2, r2, #3
 80083be:	0092      	lsls	r2, r2, #2
 80083c0:	4093      	lsls	r3, r2
 80083c2:	693a      	ldr	r2, [r7, #16]
 80083c4:	4313      	orrs	r3, r2
 80083c6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80083c8:	4937      	ldr	r1, [pc, #220]	; (80084a8 <HAL_GPIO_Init+0x334>)
 80083ca:	697b      	ldr	r3, [r7, #20]
 80083cc:	089b      	lsrs	r3, r3, #2
 80083ce:	3302      	adds	r3, #2
 80083d0:	693a      	ldr	r2, [r7, #16]
 80083d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80083d6:	4b3b      	ldr	r3, [pc, #236]	; (80084c4 <HAL_GPIO_Init+0x350>)
 80083d8:	689b      	ldr	r3, [r3, #8]
 80083da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	43db      	mvns	r3, r3
 80083e0:	693a      	ldr	r2, [r7, #16]
 80083e2:	4013      	ands	r3, r2
 80083e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	685b      	ldr	r3, [r3, #4]
 80083ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d003      	beq.n	80083fa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80083f2:	693a      	ldr	r2, [r7, #16]
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	4313      	orrs	r3, r2
 80083f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80083fa:	4a32      	ldr	r2, [pc, #200]	; (80084c4 <HAL_GPIO_Init+0x350>)
 80083fc:	693b      	ldr	r3, [r7, #16]
 80083fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8008400:	4b30      	ldr	r3, [pc, #192]	; (80084c4 <HAL_GPIO_Init+0x350>)
 8008402:	68db      	ldr	r3, [r3, #12]
 8008404:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	43db      	mvns	r3, r3
 800840a:	693a      	ldr	r2, [r7, #16]
 800840c:	4013      	ands	r3, r2
 800840e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	685b      	ldr	r3, [r3, #4]
 8008414:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008418:	2b00      	cmp	r3, #0
 800841a:	d003      	beq.n	8008424 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800841c:	693a      	ldr	r2, [r7, #16]
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	4313      	orrs	r3, r2
 8008422:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8008424:	4a27      	ldr	r2, [pc, #156]	; (80084c4 <HAL_GPIO_Init+0x350>)
 8008426:	693b      	ldr	r3, [r7, #16]
 8008428:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800842a:	4b26      	ldr	r3, [pc, #152]	; (80084c4 <HAL_GPIO_Init+0x350>)
 800842c:	685b      	ldr	r3, [r3, #4]
 800842e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	43db      	mvns	r3, r3
 8008434:	693a      	ldr	r2, [r7, #16]
 8008436:	4013      	ands	r3, r2
 8008438:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	685b      	ldr	r3, [r3, #4]
 800843e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008442:	2b00      	cmp	r3, #0
 8008444:	d003      	beq.n	800844e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8008446:	693a      	ldr	r2, [r7, #16]
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	4313      	orrs	r3, r2
 800844c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800844e:	4a1d      	ldr	r2, [pc, #116]	; (80084c4 <HAL_GPIO_Init+0x350>)
 8008450:	693b      	ldr	r3, [r7, #16]
 8008452:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8008454:	4b1b      	ldr	r3, [pc, #108]	; (80084c4 <HAL_GPIO_Init+0x350>)
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	43db      	mvns	r3, r3
 800845e:	693a      	ldr	r2, [r7, #16]
 8008460:	4013      	ands	r3, r2
 8008462:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	685b      	ldr	r3, [r3, #4]
 8008468:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800846c:	2b00      	cmp	r3, #0
 800846e:	d003      	beq.n	8008478 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8008470:	693a      	ldr	r2, [r7, #16]
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	4313      	orrs	r3, r2
 8008476:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8008478:	4a12      	ldr	r2, [pc, #72]	; (80084c4 <HAL_GPIO_Init+0x350>)
 800847a:	693b      	ldr	r3, [r7, #16]
 800847c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800847e:	697b      	ldr	r3, [r7, #20]
 8008480:	3301      	adds	r3, #1
 8008482:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	681a      	ldr	r2, [r3, #0]
 8008488:	697b      	ldr	r3, [r7, #20]
 800848a:	fa22 f303 	lsr.w	r3, r2, r3
 800848e:	2b00      	cmp	r3, #0
 8008490:	f47f ae78 	bne.w	8008184 <HAL_GPIO_Init+0x10>
  }
}
 8008494:	bf00      	nop
 8008496:	bf00      	nop
 8008498:	371c      	adds	r7, #28
 800849a:	46bd      	mov	sp, r7
 800849c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a0:	4770      	bx	lr
 80084a2:	bf00      	nop
 80084a4:	40021000 	.word	0x40021000
 80084a8:	40010000 	.word	0x40010000
 80084ac:	48000400 	.word	0x48000400
 80084b0:	48000800 	.word	0x48000800
 80084b4:	48000c00 	.word	0x48000c00
 80084b8:	48001000 	.word	0x48001000
 80084bc:	48001400 	.word	0x48001400
 80084c0:	48001800 	.word	0x48001800
 80084c4:	40010400 	.word	0x40010400

080084c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80084c8:	b480      	push	{r7}
 80084ca:	b085      	sub	sp, #20
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
 80084d0:	460b      	mov	r3, r1
 80084d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	691a      	ldr	r2, [r3, #16]
 80084d8:	887b      	ldrh	r3, [r7, #2]
 80084da:	4013      	ands	r3, r2
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d002      	beq.n	80084e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80084e0:	2301      	movs	r3, #1
 80084e2:	73fb      	strb	r3, [r7, #15]
 80084e4:	e001      	b.n	80084ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80084e6:	2300      	movs	r3, #0
 80084e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80084ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80084ec:	4618      	mov	r0, r3
 80084ee:	3714      	adds	r7, #20
 80084f0:	46bd      	mov	sp, r7
 80084f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f6:	4770      	bx	lr

080084f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80084f8:	b480      	push	{r7}
 80084fa:	b083      	sub	sp, #12
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
 8008500:	460b      	mov	r3, r1
 8008502:	807b      	strh	r3, [r7, #2]
 8008504:	4613      	mov	r3, r2
 8008506:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008508:	787b      	ldrb	r3, [r7, #1]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d003      	beq.n	8008516 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800850e:	887a      	ldrh	r2, [r7, #2]
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008514:	e002      	b.n	800851c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8008516:	887a      	ldrh	r2, [r7, #2]
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800851c:	bf00      	nop
 800851e:	370c      	adds	r7, #12
 8008520:	46bd      	mov	sp, r7
 8008522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008526:	4770      	bx	lr

08008528 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008528:	b480      	push	{r7}
 800852a:	b085      	sub	sp, #20
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
 8008530:	460b      	mov	r3, r1
 8008532:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	695b      	ldr	r3, [r3, #20]
 8008538:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800853a:	887a      	ldrh	r2, [r7, #2]
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	4013      	ands	r3, r2
 8008540:	041a      	lsls	r2, r3, #16
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	43d9      	mvns	r1, r3
 8008546:	887b      	ldrh	r3, [r7, #2]
 8008548:	400b      	ands	r3, r1
 800854a:	431a      	orrs	r2, r3
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	619a      	str	r2, [r3, #24]
}
 8008550:	bf00      	nop
 8008552:	3714      	adds	r7, #20
 8008554:	46bd      	mov	sp, r7
 8008556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855a:	4770      	bx	lr

0800855c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b082      	sub	sp, #8
 8008560:	af00      	add	r7, sp, #0
 8008562:	4603      	mov	r3, r0
 8008564:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8008566:	4b08      	ldr	r3, [pc, #32]	; (8008588 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008568:	695a      	ldr	r2, [r3, #20]
 800856a:	88fb      	ldrh	r3, [r7, #6]
 800856c:	4013      	ands	r3, r2
 800856e:	2b00      	cmp	r3, #0
 8008570:	d006      	beq.n	8008580 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008572:	4a05      	ldr	r2, [pc, #20]	; (8008588 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008574:	88fb      	ldrh	r3, [r7, #6]
 8008576:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008578:	88fb      	ldrh	r3, [r7, #6]
 800857a:	4618      	mov	r0, r3
 800857c:	f7fd f9ca 	bl	8005914 <HAL_GPIO_EXTI_Callback>
  }
}
 8008580:	bf00      	nop
 8008582:	3708      	adds	r7, #8
 8008584:	46bd      	mov	sp, r7
 8008586:	bd80      	pop	{r7, pc}
 8008588:	40010400 	.word	0x40010400

0800858c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b082      	sub	sp, #8
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d101      	bne.n	800859e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800859a:	2301      	movs	r3, #1
 800859c:	e081      	b.n	80086a2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80085a4:	b2db      	uxtb	r3, r3
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d106      	bne.n	80085b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2200      	movs	r2, #0
 80085ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f7fd feb8 	bl	8006328 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2224      	movs	r2, #36	; 0x24
 80085bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	681a      	ldr	r2, [r3, #0]
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f022 0201 	bic.w	r2, r2, #1
 80085ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	685a      	ldr	r2, [r3, #4]
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80085dc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	689a      	ldr	r2, [r3, #8]
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80085ec:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	68db      	ldr	r3, [r3, #12]
 80085f2:	2b01      	cmp	r3, #1
 80085f4:	d107      	bne.n	8008606 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	689a      	ldr	r2, [r3, #8]
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008602:	609a      	str	r2, [r3, #8]
 8008604:	e006      	b.n	8008614 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	689a      	ldr	r2, [r3, #8]
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8008612:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	68db      	ldr	r3, [r3, #12]
 8008618:	2b02      	cmp	r3, #2
 800861a:	d104      	bne.n	8008626 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008624:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	685b      	ldr	r3, [r3, #4]
 800862c:	687a      	ldr	r2, [r7, #4]
 800862e:	6812      	ldr	r2, [r2, #0]
 8008630:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008634:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008638:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	68da      	ldr	r2, [r3, #12]
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008648:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	691a      	ldr	r2, [r3, #16]
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	695b      	ldr	r3, [r3, #20]
 8008652:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	699b      	ldr	r3, [r3, #24]
 800865a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	430a      	orrs	r2, r1
 8008662:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	69d9      	ldr	r1, [r3, #28]
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	6a1a      	ldr	r2, [r3, #32]
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	430a      	orrs	r2, r1
 8008672:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	681a      	ldr	r2, [r3, #0]
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f042 0201 	orr.w	r2, r2, #1
 8008682:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2200      	movs	r2, #0
 8008688:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2220      	movs	r2, #32
 800868e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2200      	movs	r2, #0
 8008696:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2200      	movs	r2, #0
 800869c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80086a0:	2300      	movs	r3, #0
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	3708      	adds	r7, #8
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bd80      	pop	{r7, pc}
	...

080086ac <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b088      	sub	sp, #32
 80086b0:	af02      	add	r7, sp, #8
 80086b2:	60f8      	str	r0, [r7, #12]
 80086b4:	607a      	str	r2, [r7, #4]
 80086b6:	461a      	mov	r2, r3
 80086b8:	460b      	mov	r3, r1
 80086ba:	817b      	strh	r3, [r7, #10]
 80086bc:	4613      	mov	r3, r2
 80086be:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80086c6:	b2db      	uxtb	r3, r3
 80086c8:	2b20      	cmp	r3, #32
 80086ca:	f040 80da 	bne.w	8008882 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80086d4:	2b01      	cmp	r3, #1
 80086d6:	d101      	bne.n	80086dc <HAL_I2C_Master_Transmit+0x30>
 80086d8:	2302      	movs	r3, #2
 80086da:	e0d3      	b.n	8008884 <HAL_I2C_Master_Transmit+0x1d8>
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	2201      	movs	r2, #1
 80086e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80086e4:	f7ff f92e 	bl	8007944 <HAL_GetTick>
 80086e8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	9300      	str	r3, [sp, #0]
 80086ee:	2319      	movs	r3, #25
 80086f0:	2201      	movs	r2, #1
 80086f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80086f6:	68f8      	ldr	r0, [r7, #12]
 80086f8:	f001 f8d1 	bl	800989e <I2C_WaitOnFlagUntilTimeout>
 80086fc:	4603      	mov	r3, r0
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d001      	beq.n	8008706 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8008702:	2301      	movs	r3, #1
 8008704:	e0be      	b.n	8008884 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	2221      	movs	r2, #33	; 0x21
 800870a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	2210      	movs	r2, #16
 8008712:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	2200      	movs	r2, #0
 800871a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	687a      	ldr	r2, [r7, #4]
 8008720:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	893a      	ldrh	r2, [r7, #8]
 8008726:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	2200      	movs	r2, #0
 800872c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008732:	b29b      	uxth	r3, r3
 8008734:	2bff      	cmp	r3, #255	; 0xff
 8008736:	d90e      	bls.n	8008756 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	22ff      	movs	r2, #255	; 0xff
 800873c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008742:	b2da      	uxtb	r2, r3
 8008744:	8979      	ldrh	r1, [r7, #10]
 8008746:	4b51      	ldr	r3, [pc, #324]	; (800888c <HAL_I2C_Master_Transmit+0x1e0>)
 8008748:	9300      	str	r3, [sp, #0]
 800874a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800874e:	68f8      	ldr	r0, [r7, #12]
 8008750:	f001 fa4e 	bl	8009bf0 <I2C_TransferConfig>
 8008754:	e06c      	b.n	8008830 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800875a:	b29a      	uxth	r2, r3
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008764:	b2da      	uxtb	r2, r3
 8008766:	8979      	ldrh	r1, [r7, #10]
 8008768:	4b48      	ldr	r3, [pc, #288]	; (800888c <HAL_I2C_Master_Transmit+0x1e0>)
 800876a:	9300      	str	r3, [sp, #0]
 800876c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008770:	68f8      	ldr	r0, [r7, #12]
 8008772:	f001 fa3d 	bl	8009bf0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8008776:	e05b      	b.n	8008830 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008778:	697a      	ldr	r2, [r7, #20]
 800877a:	6a39      	ldr	r1, [r7, #32]
 800877c:	68f8      	ldr	r0, [r7, #12]
 800877e:	f001 f8ce 	bl	800991e <I2C_WaitOnTXISFlagUntilTimeout>
 8008782:	4603      	mov	r3, r0
 8008784:	2b00      	cmp	r3, #0
 8008786:	d001      	beq.n	800878c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8008788:	2301      	movs	r3, #1
 800878a:	e07b      	b.n	8008884 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008790:	781a      	ldrb	r2, [r3, #0]
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800879c:	1c5a      	adds	r2, r3, #1
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087a6:	b29b      	uxth	r3, r3
 80087a8:	3b01      	subs	r3, #1
 80087aa:	b29a      	uxth	r2, r3
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087b4:	3b01      	subs	r3, #1
 80087b6:	b29a      	uxth	r2, r3
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087c0:	b29b      	uxth	r3, r3
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d034      	beq.n	8008830 <HAL_I2C_Master_Transmit+0x184>
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d130      	bne.n	8008830 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80087ce:	697b      	ldr	r3, [r7, #20]
 80087d0:	9300      	str	r3, [sp, #0]
 80087d2:	6a3b      	ldr	r3, [r7, #32]
 80087d4:	2200      	movs	r2, #0
 80087d6:	2180      	movs	r1, #128	; 0x80
 80087d8:	68f8      	ldr	r0, [r7, #12]
 80087da:	f001 f860 	bl	800989e <I2C_WaitOnFlagUntilTimeout>
 80087de:	4603      	mov	r3, r0
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d001      	beq.n	80087e8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80087e4:	2301      	movs	r3, #1
 80087e6:	e04d      	b.n	8008884 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087ec:	b29b      	uxth	r3, r3
 80087ee:	2bff      	cmp	r3, #255	; 0xff
 80087f0:	d90e      	bls.n	8008810 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	22ff      	movs	r2, #255	; 0xff
 80087f6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087fc:	b2da      	uxtb	r2, r3
 80087fe:	8979      	ldrh	r1, [r7, #10]
 8008800:	2300      	movs	r3, #0
 8008802:	9300      	str	r3, [sp, #0]
 8008804:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008808:	68f8      	ldr	r0, [r7, #12]
 800880a:	f001 f9f1 	bl	8009bf0 <I2C_TransferConfig>
 800880e:	e00f      	b.n	8008830 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008814:	b29a      	uxth	r2, r3
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800881e:	b2da      	uxtb	r2, r3
 8008820:	8979      	ldrh	r1, [r7, #10]
 8008822:	2300      	movs	r3, #0
 8008824:	9300      	str	r3, [sp, #0]
 8008826:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800882a:	68f8      	ldr	r0, [r7, #12]
 800882c:	f001 f9e0 	bl	8009bf0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008834:	b29b      	uxth	r3, r3
 8008836:	2b00      	cmp	r3, #0
 8008838:	d19e      	bne.n	8008778 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800883a:	697a      	ldr	r2, [r7, #20]
 800883c:	6a39      	ldr	r1, [r7, #32]
 800883e:	68f8      	ldr	r0, [r7, #12]
 8008840:	f001 f8ad 	bl	800999e <I2C_WaitOnSTOPFlagUntilTimeout>
 8008844:	4603      	mov	r3, r0
 8008846:	2b00      	cmp	r3, #0
 8008848:	d001      	beq.n	800884e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800884a:	2301      	movs	r3, #1
 800884c:	e01a      	b.n	8008884 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	2220      	movs	r2, #32
 8008854:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	6859      	ldr	r1, [r3, #4]
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	681a      	ldr	r2, [r3, #0]
 8008860:	4b0b      	ldr	r3, [pc, #44]	; (8008890 <HAL_I2C_Master_Transmit+0x1e4>)
 8008862:	400b      	ands	r3, r1
 8008864:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	2220      	movs	r2, #32
 800886a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	2200      	movs	r2, #0
 8008872:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	2200      	movs	r2, #0
 800887a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800887e:	2300      	movs	r3, #0
 8008880:	e000      	b.n	8008884 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8008882:	2302      	movs	r3, #2
  }
}
 8008884:	4618      	mov	r0, r3
 8008886:	3718      	adds	r7, #24
 8008888:	46bd      	mov	sp, r7
 800888a:	bd80      	pop	{r7, pc}
 800888c:	80002000 	.word	0x80002000
 8008890:	fe00e800 	.word	0xfe00e800

08008894 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b088      	sub	sp, #32
 8008898:	af02      	add	r7, sp, #8
 800889a:	60f8      	str	r0, [r7, #12]
 800889c:	4608      	mov	r0, r1
 800889e:	4611      	mov	r1, r2
 80088a0:	461a      	mov	r2, r3
 80088a2:	4603      	mov	r3, r0
 80088a4:	817b      	strh	r3, [r7, #10]
 80088a6:	460b      	mov	r3, r1
 80088a8:	813b      	strh	r3, [r7, #8]
 80088aa:	4613      	mov	r3, r2
 80088ac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80088b4:	b2db      	uxtb	r3, r3
 80088b6:	2b20      	cmp	r3, #32
 80088b8:	f040 80f9 	bne.w	8008aae <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80088bc:	6a3b      	ldr	r3, [r7, #32]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d002      	beq.n	80088c8 <HAL_I2C_Mem_Write+0x34>
 80088c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d105      	bne.n	80088d4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80088ce:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80088d0:	2301      	movs	r3, #1
 80088d2:	e0ed      	b.n	8008ab0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80088da:	2b01      	cmp	r3, #1
 80088dc:	d101      	bne.n	80088e2 <HAL_I2C_Mem_Write+0x4e>
 80088de:	2302      	movs	r3, #2
 80088e0:	e0e6      	b.n	8008ab0 <HAL_I2C_Mem_Write+0x21c>
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	2201      	movs	r2, #1
 80088e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80088ea:	f7ff f82b 	bl	8007944 <HAL_GetTick>
 80088ee:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80088f0:	697b      	ldr	r3, [r7, #20]
 80088f2:	9300      	str	r3, [sp, #0]
 80088f4:	2319      	movs	r3, #25
 80088f6:	2201      	movs	r2, #1
 80088f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80088fc:	68f8      	ldr	r0, [r7, #12]
 80088fe:	f000 ffce 	bl	800989e <I2C_WaitOnFlagUntilTimeout>
 8008902:	4603      	mov	r3, r0
 8008904:	2b00      	cmp	r3, #0
 8008906:	d001      	beq.n	800890c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8008908:	2301      	movs	r3, #1
 800890a:	e0d1      	b.n	8008ab0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	2221      	movs	r2, #33	; 0x21
 8008910:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	2240      	movs	r2, #64	; 0x40
 8008918:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	2200      	movs	r2, #0
 8008920:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	6a3a      	ldr	r2, [r7, #32]
 8008926:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800892c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	2200      	movs	r2, #0
 8008932:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008934:	88f8      	ldrh	r0, [r7, #6]
 8008936:	893a      	ldrh	r2, [r7, #8]
 8008938:	8979      	ldrh	r1, [r7, #10]
 800893a:	697b      	ldr	r3, [r7, #20]
 800893c:	9301      	str	r3, [sp, #4]
 800893e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008940:	9300      	str	r3, [sp, #0]
 8008942:	4603      	mov	r3, r0
 8008944:	68f8      	ldr	r0, [r7, #12]
 8008946:	f000 fb87 	bl	8009058 <I2C_RequestMemoryWrite>
 800894a:	4603      	mov	r3, r0
 800894c:	2b00      	cmp	r3, #0
 800894e:	d005      	beq.n	800895c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	2200      	movs	r2, #0
 8008954:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008958:	2301      	movs	r3, #1
 800895a:	e0a9      	b.n	8008ab0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008960:	b29b      	uxth	r3, r3
 8008962:	2bff      	cmp	r3, #255	; 0xff
 8008964:	d90e      	bls.n	8008984 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	22ff      	movs	r2, #255	; 0xff
 800896a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008970:	b2da      	uxtb	r2, r3
 8008972:	8979      	ldrh	r1, [r7, #10]
 8008974:	2300      	movs	r3, #0
 8008976:	9300      	str	r3, [sp, #0]
 8008978:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800897c:	68f8      	ldr	r0, [r7, #12]
 800897e:	f001 f937 	bl	8009bf0 <I2C_TransferConfig>
 8008982:	e00f      	b.n	80089a4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008988:	b29a      	uxth	r2, r3
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008992:	b2da      	uxtb	r2, r3
 8008994:	8979      	ldrh	r1, [r7, #10]
 8008996:	2300      	movs	r3, #0
 8008998:	9300      	str	r3, [sp, #0]
 800899a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800899e:	68f8      	ldr	r0, [r7, #12]
 80089a0:	f001 f926 	bl	8009bf0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80089a4:	697a      	ldr	r2, [r7, #20]
 80089a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80089a8:	68f8      	ldr	r0, [r7, #12]
 80089aa:	f000 ffb8 	bl	800991e <I2C_WaitOnTXISFlagUntilTimeout>
 80089ae:	4603      	mov	r3, r0
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d001      	beq.n	80089b8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80089b4:	2301      	movs	r3, #1
 80089b6:	e07b      	b.n	8008ab0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089bc:	781a      	ldrb	r2, [r3, #0]
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089c8:	1c5a      	adds	r2, r3, #1
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089d2:	b29b      	uxth	r3, r3
 80089d4:	3b01      	subs	r3, #1
 80089d6:	b29a      	uxth	r2, r3
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089e0:	3b01      	subs	r3, #1
 80089e2:	b29a      	uxth	r2, r3
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089ec:	b29b      	uxth	r3, r3
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d034      	beq.n	8008a5c <HAL_I2C_Mem_Write+0x1c8>
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d130      	bne.n	8008a5c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80089fa:	697b      	ldr	r3, [r7, #20]
 80089fc:	9300      	str	r3, [sp, #0]
 80089fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a00:	2200      	movs	r2, #0
 8008a02:	2180      	movs	r1, #128	; 0x80
 8008a04:	68f8      	ldr	r0, [r7, #12]
 8008a06:	f000 ff4a 	bl	800989e <I2C_WaitOnFlagUntilTimeout>
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d001      	beq.n	8008a14 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8008a10:	2301      	movs	r3, #1
 8008a12:	e04d      	b.n	8008ab0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a18:	b29b      	uxth	r3, r3
 8008a1a:	2bff      	cmp	r3, #255	; 0xff
 8008a1c:	d90e      	bls.n	8008a3c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	22ff      	movs	r2, #255	; 0xff
 8008a22:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a28:	b2da      	uxtb	r2, r3
 8008a2a:	8979      	ldrh	r1, [r7, #10]
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	9300      	str	r3, [sp, #0]
 8008a30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008a34:	68f8      	ldr	r0, [r7, #12]
 8008a36:	f001 f8db 	bl	8009bf0 <I2C_TransferConfig>
 8008a3a:	e00f      	b.n	8008a5c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a40:	b29a      	uxth	r2, r3
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a4a:	b2da      	uxtb	r2, r3
 8008a4c:	8979      	ldrh	r1, [r7, #10]
 8008a4e:	2300      	movs	r3, #0
 8008a50:	9300      	str	r3, [sp, #0]
 8008a52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008a56:	68f8      	ldr	r0, [r7, #12]
 8008a58:	f001 f8ca 	bl	8009bf0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a60:	b29b      	uxth	r3, r3
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d19e      	bne.n	80089a4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008a66:	697a      	ldr	r2, [r7, #20]
 8008a68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008a6a:	68f8      	ldr	r0, [r7, #12]
 8008a6c:	f000 ff97 	bl	800999e <I2C_WaitOnSTOPFlagUntilTimeout>
 8008a70:	4603      	mov	r3, r0
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d001      	beq.n	8008a7a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8008a76:	2301      	movs	r3, #1
 8008a78:	e01a      	b.n	8008ab0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	2220      	movs	r2, #32
 8008a80:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	6859      	ldr	r1, [r3, #4]
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	681a      	ldr	r2, [r3, #0]
 8008a8c:	4b0a      	ldr	r3, [pc, #40]	; (8008ab8 <HAL_I2C_Mem_Write+0x224>)
 8008a8e:	400b      	ands	r3, r1
 8008a90:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	2220      	movs	r2, #32
 8008a96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008aaa:	2300      	movs	r3, #0
 8008aac:	e000      	b.n	8008ab0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8008aae:	2302      	movs	r3, #2
  }
}
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	3718      	adds	r7, #24
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	bd80      	pop	{r7, pc}
 8008ab8:	fe00e800 	.word	0xfe00e800

08008abc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b088      	sub	sp, #32
 8008ac0:	af02      	add	r7, sp, #8
 8008ac2:	60f8      	str	r0, [r7, #12]
 8008ac4:	4608      	mov	r0, r1
 8008ac6:	4611      	mov	r1, r2
 8008ac8:	461a      	mov	r2, r3
 8008aca:	4603      	mov	r3, r0
 8008acc:	817b      	strh	r3, [r7, #10]
 8008ace:	460b      	mov	r3, r1
 8008ad0:	813b      	strh	r3, [r7, #8]
 8008ad2:	4613      	mov	r3, r2
 8008ad4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008adc:	b2db      	uxtb	r3, r3
 8008ade:	2b20      	cmp	r3, #32
 8008ae0:	f040 80fd 	bne.w	8008cde <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8008ae4:	6a3b      	ldr	r3, [r7, #32]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d002      	beq.n	8008af0 <HAL_I2C_Mem_Read+0x34>
 8008aea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d105      	bne.n	8008afc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008af6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008af8:	2301      	movs	r3, #1
 8008afa:	e0f1      	b.n	8008ce0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008b02:	2b01      	cmp	r3, #1
 8008b04:	d101      	bne.n	8008b0a <HAL_I2C_Mem_Read+0x4e>
 8008b06:	2302      	movs	r3, #2
 8008b08:	e0ea      	b.n	8008ce0 <HAL_I2C_Mem_Read+0x224>
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	2201      	movs	r2, #1
 8008b0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008b12:	f7fe ff17 	bl	8007944 <HAL_GetTick>
 8008b16:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008b18:	697b      	ldr	r3, [r7, #20]
 8008b1a:	9300      	str	r3, [sp, #0]
 8008b1c:	2319      	movs	r3, #25
 8008b1e:	2201      	movs	r2, #1
 8008b20:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008b24:	68f8      	ldr	r0, [r7, #12]
 8008b26:	f000 feba 	bl	800989e <I2C_WaitOnFlagUntilTimeout>
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d001      	beq.n	8008b34 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8008b30:	2301      	movs	r3, #1
 8008b32:	e0d5      	b.n	8008ce0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	2222      	movs	r2, #34	; 0x22
 8008b38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	2240      	movs	r2, #64	; 0x40
 8008b40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	2200      	movs	r2, #0
 8008b48:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	6a3a      	ldr	r2, [r7, #32]
 8008b4e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008b54:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008b5c:	88f8      	ldrh	r0, [r7, #6]
 8008b5e:	893a      	ldrh	r2, [r7, #8]
 8008b60:	8979      	ldrh	r1, [r7, #10]
 8008b62:	697b      	ldr	r3, [r7, #20]
 8008b64:	9301      	str	r3, [sp, #4]
 8008b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b68:	9300      	str	r3, [sp, #0]
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	68f8      	ldr	r0, [r7, #12]
 8008b6e:	f000 fac7 	bl	8009100 <I2C_RequestMemoryRead>
 8008b72:	4603      	mov	r3, r0
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d005      	beq.n	8008b84 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008b80:	2301      	movs	r3, #1
 8008b82:	e0ad      	b.n	8008ce0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b88:	b29b      	uxth	r3, r3
 8008b8a:	2bff      	cmp	r3, #255	; 0xff
 8008b8c:	d90e      	bls.n	8008bac <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	22ff      	movs	r2, #255	; 0xff
 8008b92:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b98:	b2da      	uxtb	r2, r3
 8008b9a:	8979      	ldrh	r1, [r7, #10]
 8008b9c:	4b52      	ldr	r3, [pc, #328]	; (8008ce8 <HAL_I2C_Mem_Read+0x22c>)
 8008b9e:	9300      	str	r3, [sp, #0]
 8008ba0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008ba4:	68f8      	ldr	r0, [r7, #12]
 8008ba6:	f001 f823 	bl	8009bf0 <I2C_TransferConfig>
 8008baa:	e00f      	b.n	8008bcc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008bb0:	b29a      	uxth	r2, r3
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008bba:	b2da      	uxtb	r2, r3
 8008bbc:	8979      	ldrh	r1, [r7, #10]
 8008bbe:	4b4a      	ldr	r3, [pc, #296]	; (8008ce8 <HAL_I2C_Mem_Read+0x22c>)
 8008bc0:	9300      	str	r3, [sp, #0]
 8008bc2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008bc6:	68f8      	ldr	r0, [r7, #12]
 8008bc8:	f001 f812 	bl	8009bf0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8008bcc:	697b      	ldr	r3, [r7, #20]
 8008bce:	9300      	str	r3, [sp, #0]
 8008bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	2104      	movs	r1, #4
 8008bd6:	68f8      	ldr	r0, [r7, #12]
 8008bd8:	f000 fe61 	bl	800989e <I2C_WaitOnFlagUntilTimeout>
 8008bdc:	4603      	mov	r3, r0
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d001      	beq.n	8008be6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8008be2:	2301      	movs	r3, #1
 8008be4:	e07c      	b.n	8008ce0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bf0:	b2d2      	uxtb	r2, r2
 8008bf2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bf8:	1c5a      	adds	r2, r3, #1
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c02:	3b01      	subs	r3, #1
 8008c04:	b29a      	uxth	r2, r3
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c0e:	b29b      	uxth	r3, r3
 8008c10:	3b01      	subs	r3, #1
 8008c12:	b29a      	uxth	r2, r3
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c1c:	b29b      	uxth	r3, r3
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d034      	beq.n	8008c8c <HAL_I2C_Mem_Read+0x1d0>
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d130      	bne.n	8008c8c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008c2a:	697b      	ldr	r3, [r7, #20]
 8008c2c:	9300      	str	r3, [sp, #0]
 8008c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c30:	2200      	movs	r2, #0
 8008c32:	2180      	movs	r1, #128	; 0x80
 8008c34:	68f8      	ldr	r0, [r7, #12]
 8008c36:	f000 fe32 	bl	800989e <I2C_WaitOnFlagUntilTimeout>
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d001      	beq.n	8008c44 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8008c40:	2301      	movs	r3, #1
 8008c42:	e04d      	b.n	8008ce0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c48:	b29b      	uxth	r3, r3
 8008c4a:	2bff      	cmp	r3, #255	; 0xff
 8008c4c:	d90e      	bls.n	8008c6c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	22ff      	movs	r2, #255	; 0xff
 8008c52:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c58:	b2da      	uxtb	r2, r3
 8008c5a:	8979      	ldrh	r1, [r7, #10]
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	9300      	str	r3, [sp, #0]
 8008c60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008c64:	68f8      	ldr	r0, [r7, #12]
 8008c66:	f000 ffc3 	bl	8009bf0 <I2C_TransferConfig>
 8008c6a:	e00f      	b.n	8008c8c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c70:	b29a      	uxth	r2, r3
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c7a:	b2da      	uxtb	r2, r3
 8008c7c:	8979      	ldrh	r1, [r7, #10]
 8008c7e:	2300      	movs	r3, #0
 8008c80:	9300      	str	r3, [sp, #0]
 8008c82:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008c86:	68f8      	ldr	r0, [r7, #12]
 8008c88:	f000 ffb2 	bl	8009bf0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c90:	b29b      	uxth	r3, r3
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d19a      	bne.n	8008bcc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008c96:	697a      	ldr	r2, [r7, #20]
 8008c98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008c9a:	68f8      	ldr	r0, [r7, #12]
 8008c9c:	f000 fe7f 	bl	800999e <I2C_WaitOnSTOPFlagUntilTimeout>
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d001      	beq.n	8008caa <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8008ca6:	2301      	movs	r3, #1
 8008ca8:	e01a      	b.n	8008ce0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	2220      	movs	r2, #32
 8008cb0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	6859      	ldr	r1, [r3, #4]
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	681a      	ldr	r2, [r3, #0]
 8008cbc:	4b0b      	ldr	r3, [pc, #44]	; (8008cec <HAL_I2C_Mem_Read+0x230>)
 8008cbe:	400b      	ands	r3, r1
 8008cc0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	2220      	movs	r2, #32
 8008cc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	2200      	movs	r2, #0
 8008cce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008cda:	2300      	movs	r3, #0
 8008cdc:	e000      	b.n	8008ce0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8008cde:	2302      	movs	r3, #2
  }
}
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	3718      	adds	r7, #24
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	bd80      	pop	{r7, pc}
 8008ce8:	80002400 	.word	0x80002400
 8008cec:	fe00e800 	.word	0xfe00e800

08008cf0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b084      	sub	sp, #16
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	699b      	ldr	r3, [r3, #24]
 8008cfe:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d005      	beq.n	8008d1c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d14:	68ba      	ldr	r2, [r7, #8]
 8008d16:	68f9      	ldr	r1, [r7, #12]
 8008d18:	6878      	ldr	r0, [r7, #4]
 8008d1a:	4798      	blx	r3
  }
}
 8008d1c:	bf00      	nop
 8008d1e:	3710      	adds	r7, #16
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bd80      	pop	{r7, pc}

08008d24 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b086      	sub	sp, #24
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	699b      	ldr	r3, [r3, #24]
 8008d32:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8008d3c:	697b      	ldr	r3, [r7, #20]
 8008d3e:	0a1b      	lsrs	r3, r3, #8
 8008d40:	f003 0301 	and.w	r3, r3, #1
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d010      	beq.n	8008d6a <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8008d48:	693b      	ldr	r3, [r7, #16]
 8008d4a:	09db      	lsrs	r3, r3, #7
 8008d4c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d00a      	beq.n	8008d6a <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d58:	f043 0201 	orr.w	r2, r3, #1
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008d68:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8008d6a:	697b      	ldr	r3, [r7, #20]
 8008d6c:	0a9b      	lsrs	r3, r3, #10
 8008d6e:	f003 0301 	and.w	r3, r3, #1
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d010      	beq.n	8008d98 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8008d76:	693b      	ldr	r3, [r7, #16]
 8008d78:	09db      	lsrs	r3, r3, #7
 8008d7a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d00a      	beq.n	8008d98 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d86:	f043 0208 	orr.w	r2, r3, #8
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008d96:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8008d98:	697b      	ldr	r3, [r7, #20]
 8008d9a:	0a5b      	lsrs	r3, r3, #9
 8008d9c:	f003 0301 	and.w	r3, r3, #1
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d010      	beq.n	8008dc6 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8008da4:	693b      	ldr	r3, [r7, #16]
 8008da6:	09db      	lsrs	r3, r3, #7
 8008da8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d00a      	beq.n	8008dc6 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008db4:	f043 0202 	orr.w	r2, r3, #2
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008dc4:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dca:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	f003 030b 	and.w	r3, r3, #11
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d003      	beq.n	8008dde <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8008dd6:	68f9      	ldr	r1, [r7, #12]
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	f000 fc27 	bl	800962c <I2C_ITError>
  }
}
 8008dde:	bf00      	nop
 8008de0:	3718      	adds	r7, #24
 8008de2:	46bd      	mov	sp, r7
 8008de4:	bd80      	pop	{r7, pc}

08008de6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008de6:	b480      	push	{r7}
 8008de8:	b083      	sub	sp, #12
 8008dea:	af00      	add	r7, sp, #0
 8008dec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8008dee:	bf00      	nop
 8008df0:	370c      	adds	r7, #12
 8008df2:	46bd      	mov	sp, r7
 8008df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df8:	4770      	bx	lr

08008dfa <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008dfa:	b480      	push	{r7}
 8008dfc:	b083      	sub	sp, #12
 8008dfe:	af00      	add	r7, sp, #0
 8008e00:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8008e02:	bf00      	nop
 8008e04:	370c      	adds	r7, #12
 8008e06:	46bd      	mov	sp, r7
 8008e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0c:	4770      	bx	lr

08008e0e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8008e0e:	b480      	push	{r7}
 8008e10:	b083      	sub	sp, #12
 8008e12:	af00      	add	r7, sp, #0
 8008e14:	6078      	str	r0, [r7, #4]
 8008e16:	460b      	mov	r3, r1
 8008e18:	70fb      	strb	r3, [r7, #3]
 8008e1a:	4613      	mov	r3, r2
 8008e1c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8008e1e:	bf00      	nop
 8008e20:	370c      	adds	r7, #12
 8008e22:	46bd      	mov	sp, r7
 8008e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e28:	4770      	bx	lr

08008e2a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008e2a:	b480      	push	{r7}
 8008e2c:	b083      	sub	sp, #12
 8008e2e:	af00      	add	r7, sp, #0
 8008e30:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8008e32:	bf00      	nop
 8008e34:	370c      	adds	r7, #12
 8008e36:	46bd      	mov	sp, r7
 8008e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3c:	4770      	bx	lr

08008e3e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008e3e:	b480      	push	{r7}
 8008e40:	b083      	sub	sp, #12
 8008e42:	af00      	add	r7, sp, #0
 8008e44:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8008e46:	bf00      	nop
 8008e48:	370c      	adds	r7, #12
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e50:	4770      	bx	lr

08008e52 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8008e52:	b580      	push	{r7, lr}
 8008e54:	b086      	sub	sp, #24
 8008e56:	af00      	add	r7, sp, #0
 8008e58:	60f8      	str	r0, [r7, #12]
 8008e5a:	60b9      	str	r1, [r7, #8]
 8008e5c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e62:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8008e64:	68bb      	ldr	r3, [r7, #8]
 8008e66:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008e6e:	2b01      	cmp	r3, #1
 8008e70:	d101      	bne.n	8008e76 <I2C_Slave_ISR_IT+0x24>
 8008e72:	2302      	movs	r3, #2
 8008e74:	e0ec      	b.n	8009050 <I2C_Slave_ISR_IT+0x1fe>
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	2201      	movs	r2, #1
 8008e7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008e7e:	693b      	ldr	r3, [r7, #16]
 8008e80:	095b      	lsrs	r3, r3, #5
 8008e82:	f003 0301 	and.w	r3, r3, #1
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d009      	beq.n	8008e9e <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	095b      	lsrs	r3, r3, #5
 8008e8e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d003      	beq.n	8008e9e <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8008e96:	6939      	ldr	r1, [r7, #16]
 8008e98:	68f8      	ldr	r0, [r7, #12]
 8008e9a:	f000 fa67 	bl	800936c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008e9e:	693b      	ldr	r3, [r7, #16]
 8008ea0:	091b      	lsrs	r3, r3, #4
 8008ea2:	f003 0301 	and.w	r3, r3, #1
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d04d      	beq.n	8008f46 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	091b      	lsrs	r3, r3, #4
 8008eae:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d047      	beq.n	8008f46 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008eba:	b29b      	uxth	r3, r3
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d128      	bne.n	8008f12 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008ec6:	b2db      	uxtb	r3, r3
 8008ec8:	2b28      	cmp	r3, #40	; 0x28
 8008eca:	d108      	bne.n	8008ede <I2C_Slave_ISR_IT+0x8c>
 8008ecc:	697b      	ldr	r3, [r7, #20]
 8008ece:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008ed2:	d104      	bne.n	8008ede <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8008ed4:	6939      	ldr	r1, [r7, #16]
 8008ed6:	68f8      	ldr	r0, [r7, #12]
 8008ed8:	f000 fb52 	bl	8009580 <I2C_ITListenCplt>
 8008edc:	e032      	b.n	8008f44 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008ee4:	b2db      	uxtb	r3, r3
 8008ee6:	2b29      	cmp	r3, #41	; 0x29
 8008ee8:	d10e      	bne.n	8008f08 <I2C_Slave_ISR_IT+0xb6>
 8008eea:	697b      	ldr	r3, [r7, #20]
 8008eec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008ef0:	d00a      	beq.n	8008f08 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	2210      	movs	r2, #16
 8008ef8:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8008efa:	68f8      	ldr	r0, [r7, #12]
 8008efc:	f000 fc8d 	bl	800981a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8008f00:	68f8      	ldr	r0, [r7, #12]
 8008f02:	f000 f9d5 	bl	80092b0 <I2C_ITSlaveSeqCplt>
 8008f06:	e01d      	b.n	8008f44 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	2210      	movs	r2, #16
 8008f0e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8008f10:	e096      	b.n	8009040 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	2210      	movs	r2, #16
 8008f18:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f1e:	f043 0204 	orr.w	r2, r3, #4
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8008f26:	697b      	ldr	r3, [r7, #20]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d004      	beq.n	8008f36 <I2C_Slave_ISR_IT+0xe4>
 8008f2c:	697b      	ldr	r3, [r7, #20]
 8008f2e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008f32:	f040 8085 	bne.w	8009040 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f3a:	4619      	mov	r1, r3
 8008f3c:	68f8      	ldr	r0, [r7, #12]
 8008f3e:	f000 fb75 	bl	800962c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8008f42:	e07d      	b.n	8009040 <I2C_Slave_ISR_IT+0x1ee>
 8008f44:	e07c      	b.n	8009040 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8008f46:	693b      	ldr	r3, [r7, #16]
 8008f48:	089b      	lsrs	r3, r3, #2
 8008f4a:	f003 0301 	and.w	r3, r3, #1
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d030      	beq.n	8008fb4 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	089b      	lsrs	r3, r3, #2
 8008f56:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d02a      	beq.n	8008fb4 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f62:	b29b      	uxth	r3, r3
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d018      	beq.n	8008f9a <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f72:	b2d2      	uxtb	r2, r2
 8008f74:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f7a:	1c5a      	adds	r2, r3, #1
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f84:	3b01      	subs	r3, #1
 8008f86:	b29a      	uxth	r2, r3
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f90:	b29b      	uxth	r3, r3
 8008f92:	3b01      	subs	r3, #1
 8008f94:	b29a      	uxth	r2, r3
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f9e:	b29b      	uxth	r3, r3
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d14f      	bne.n	8009044 <I2C_Slave_ISR_IT+0x1f2>
 8008fa4:	697b      	ldr	r3, [r7, #20]
 8008fa6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008faa:	d04b      	beq.n	8009044 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8008fac:	68f8      	ldr	r0, [r7, #12]
 8008fae:	f000 f97f 	bl	80092b0 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8008fb2:	e047      	b.n	8009044 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8008fb4:	693b      	ldr	r3, [r7, #16]
 8008fb6:	08db      	lsrs	r3, r3, #3
 8008fb8:	f003 0301 	and.w	r3, r3, #1
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d00a      	beq.n	8008fd6 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	08db      	lsrs	r3, r3, #3
 8008fc4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d004      	beq.n	8008fd6 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8008fcc:	6939      	ldr	r1, [r7, #16]
 8008fce:	68f8      	ldr	r0, [r7, #12]
 8008fd0:	f000 f8ea 	bl	80091a8 <I2C_ITAddrCplt>
 8008fd4:	e037      	b.n	8009046 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8008fd6:	693b      	ldr	r3, [r7, #16]
 8008fd8:	085b      	lsrs	r3, r3, #1
 8008fda:	f003 0301 	and.w	r3, r3, #1
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d031      	beq.n	8009046 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	085b      	lsrs	r3, r3, #1
 8008fe6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d02b      	beq.n	8009046 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ff2:	b29b      	uxth	r3, r3
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d018      	beq.n	800902a <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ffc:	781a      	ldrb	r2, [r3, #0]
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009008:	1c5a      	adds	r2, r3, #1
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009012:	b29b      	uxth	r3, r3
 8009014:	3b01      	subs	r3, #1
 8009016:	b29a      	uxth	r2, r3
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009020:	3b01      	subs	r3, #1
 8009022:	b29a      	uxth	r2, r3
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	851a      	strh	r2, [r3, #40]	; 0x28
 8009028:	e00d      	b.n	8009046 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800902a:	697b      	ldr	r3, [r7, #20]
 800902c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009030:	d002      	beq.n	8009038 <I2C_Slave_ISR_IT+0x1e6>
 8009032:	697b      	ldr	r3, [r7, #20]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d106      	bne.n	8009046 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8009038:	68f8      	ldr	r0, [r7, #12]
 800903a:	f000 f939 	bl	80092b0 <I2C_ITSlaveSeqCplt>
 800903e:	e002      	b.n	8009046 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8009040:	bf00      	nop
 8009042:	e000      	b.n	8009046 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8009044:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	2200      	movs	r2, #0
 800904a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800904e:	2300      	movs	r3, #0
}
 8009050:	4618      	mov	r0, r3
 8009052:	3718      	adds	r7, #24
 8009054:	46bd      	mov	sp, r7
 8009056:	bd80      	pop	{r7, pc}

08009058 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b086      	sub	sp, #24
 800905c:	af02      	add	r7, sp, #8
 800905e:	60f8      	str	r0, [r7, #12]
 8009060:	4608      	mov	r0, r1
 8009062:	4611      	mov	r1, r2
 8009064:	461a      	mov	r2, r3
 8009066:	4603      	mov	r3, r0
 8009068:	817b      	strh	r3, [r7, #10]
 800906a:	460b      	mov	r3, r1
 800906c:	813b      	strh	r3, [r7, #8]
 800906e:	4613      	mov	r3, r2
 8009070:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8009072:	88fb      	ldrh	r3, [r7, #6]
 8009074:	b2da      	uxtb	r2, r3
 8009076:	8979      	ldrh	r1, [r7, #10]
 8009078:	4b20      	ldr	r3, [pc, #128]	; (80090fc <I2C_RequestMemoryWrite+0xa4>)
 800907a:	9300      	str	r3, [sp, #0]
 800907c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009080:	68f8      	ldr	r0, [r7, #12]
 8009082:	f000 fdb5 	bl	8009bf0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009086:	69fa      	ldr	r2, [r7, #28]
 8009088:	69b9      	ldr	r1, [r7, #24]
 800908a:	68f8      	ldr	r0, [r7, #12]
 800908c:	f000 fc47 	bl	800991e <I2C_WaitOnTXISFlagUntilTimeout>
 8009090:	4603      	mov	r3, r0
 8009092:	2b00      	cmp	r3, #0
 8009094:	d001      	beq.n	800909a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8009096:	2301      	movs	r3, #1
 8009098:	e02c      	b.n	80090f4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800909a:	88fb      	ldrh	r3, [r7, #6]
 800909c:	2b01      	cmp	r3, #1
 800909e:	d105      	bne.n	80090ac <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80090a0:	893b      	ldrh	r3, [r7, #8]
 80090a2:	b2da      	uxtb	r2, r3
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	629a      	str	r2, [r3, #40]	; 0x28
 80090aa:	e015      	b.n	80090d8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80090ac:	893b      	ldrh	r3, [r7, #8]
 80090ae:	0a1b      	lsrs	r3, r3, #8
 80090b0:	b29b      	uxth	r3, r3
 80090b2:	b2da      	uxtb	r2, r3
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80090ba:	69fa      	ldr	r2, [r7, #28]
 80090bc:	69b9      	ldr	r1, [r7, #24]
 80090be:	68f8      	ldr	r0, [r7, #12]
 80090c0:	f000 fc2d 	bl	800991e <I2C_WaitOnTXISFlagUntilTimeout>
 80090c4:	4603      	mov	r3, r0
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d001      	beq.n	80090ce <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80090ca:	2301      	movs	r3, #1
 80090cc:	e012      	b.n	80090f4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80090ce:	893b      	ldrh	r3, [r7, #8]
 80090d0:	b2da      	uxtb	r2, r3
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80090d8:	69fb      	ldr	r3, [r7, #28]
 80090da:	9300      	str	r3, [sp, #0]
 80090dc:	69bb      	ldr	r3, [r7, #24]
 80090de:	2200      	movs	r2, #0
 80090e0:	2180      	movs	r1, #128	; 0x80
 80090e2:	68f8      	ldr	r0, [r7, #12]
 80090e4:	f000 fbdb 	bl	800989e <I2C_WaitOnFlagUntilTimeout>
 80090e8:	4603      	mov	r3, r0
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d001      	beq.n	80090f2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80090ee:	2301      	movs	r3, #1
 80090f0:	e000      	b.n	80090f4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80090f2:	2300      	movs	r3, #0
}
 80090f4:	4618      	mov	r0, r3
 80090f6:	3710      	adds	r7, #16
 80090f8:	46bd      	mov	sp, r7
 80090fa:	bd80      	pop	{r7, pc}
 80090fc:	80002000 	.word	0x80002000

08009100 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b086      	sub	sp, #24
 8009104:	af02      	add	r7, sp, #8
 8009106:	60f8      	str	r0, [r7, #12]
 8009108:	4608      	mov	r0, r1
 800910a:	4611      	mov	r1, r2
 800910c:	461a      	mov	r2, r3
 800910e:	4603      	mov	r3, r0
 8009110:	817b      	strh	r3, [r7, #10]
 8009112:	460b      	mov	r3, r1
 8009114:	813b      	strh	r3, [r7, #8]
 8009116:	4613      	mov	r3, r2
 8009118:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800911a:	88fb      	ldrh	r3, [r7, #6]
 800911c:	b2da      	uxtb	r2, r3
 800911e:	8979      	ldrh	r1, [r7, #10]
 8009120:	4b20      	ldr	r3, [pc, #128]	; (80091a4 <I2C_RequestMemoryRead+0xa4>)
 8009122:	9300      	str	r3, [sp, #0]
 8009124:	2300      	movs	r3, #0
 8009126:	68f8      	ldr	r0, [r7, #12]
 8009128:	f000 fd62 	bl	8009bf0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800912c:	69fa      	ldr	r2, [r7, #28]
 800912e:	69b9      	ldr	r1, [r7, #24]
 8009130:	68f8      	ldr	r0, [r7, #12]
 8009132:	f000 fbf4 	bl	800991e <I2C_WaitOnTXISFlagUntilTimeout>
 8009136:	4603      	mov	r3, r0
 8009138:	2b00      	cmp	r3, #0
 800913a:	d001      	beq.n	8009140 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800913c:	2301      	movs	r3, #1
 800913e:	e02c      	b.n	800919a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009140:	88fb      	ldrh	r3, [r7, #6]
 8009142:	2b01      	cmp	r3, #1
 8009144:	d105      	bne.n	8009152 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009146:	893b      	ldrh	r3, [r7, #8]
 8009148:	b2da      	uxtb	r2, r3
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	629a      	str	r2, [r3, #40]	; 0x28
 8009150:	e015      	b.n	800917e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009152:	893b      	ldrh	r3, [r7, #8]
 8009154:	0a1b      	lsrs	r3, r3, #8
 8009156:	b29b      	uxth	r3, r3
 8009158:	b2da      	uxtb	r2, r3
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009160:	69fa      	ldr	r2, [r7, #28]
 8009162:	69b9      	ldr	r1, [r7, #24]
 8009164:	68f8      	ldr	r0, [r7, #12]
 8009166:	f000 fbda 	bl	800991e <I2C_WaitOnTXISFlagUntilTimeout>
 800916a:	4603      	mov	r3, r0
 800916c:	2b00      	cmp	r3, #0
 800916e:	d001      	beq.n	8009174 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8009170:	2301      	movs	r3, #1
 8009172:	e012      	b.n	800919a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009174:	893b      	ldrh	r3, [r7, #8]
 8009176:	b2da      	uxtb	r2, r3
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800917e:	69fb      	ldr	r3, [r7, #28]
 8009180:	9300      	str	r3, [sp, #0]
 8009182:	69bb      	ldr	r3, [r7, #24]
 8009184:	2200      	movs	r2, #0
 8009186:	2140      	movs	r1, #64	; 0x40
 8009188:	68f8      	ldr	r0, [r7, #12]
 800918a:	f000 fb88 	bl	800989e <I2C_WaitOnFlagUntilTimeout>
 800918e:	4603      	mov	r3, r0
 8009190:	2b00      	cmp	r3, #0
 8009192:	d001      	beq.n	8009198 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8009194:	2301      	movs	r3, #1
 8009196:	e000      	b.n	800919a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8009198:	2300      	movs	r3, #0
}
 800919a:	4618      	mov	r0, r3
 800919c:	3710      	adds	r7, #16
 800919e:	46bd      	mov	sp, r7
 80091a0:	bd80      	pop	{r7, pc}
 80091a2:	bf00      	nop
 80091a4:	80002000 	.word	0x80002000

080091a8 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b084      	sub	sp, #16
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
 80091b0:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80091b8:	b2db      	uxtb	r3, r3
 80091ba:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80091be:	2b28      	cmp	r3, #40	; 0x28
 80091c0:	d16a      	bne.n	8009298 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	699b      	ldr	r3, [r3, #24]
 80091c8:	0c1b      	lsrs	r3, r3, #16
 80091ca:	b2db      	uxtb	r3, r3
 80091cc:	f003 0301 	and.w	r3, r3, #1
 80091d0:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	699b      	ldr	r3, [r3, #24]
 80091d8:	0c1b      	lsrs	r3, r3, #16
 80091da:	b29b      	uxth	r3, r3
 80091dc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80091e0:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	689b      	ldr	r3, [r3, #8]
 80091e8:	b29b      	uxth	r3, r3
 80091ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80091ee:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	68db      	ldr	r3, [r3, #12]
 80091f6:	b29b      	uxth	r3, r3
 80091f8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80091fc:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	68db      	ldr	r3, [r3, #12]
 8009202:	2b02      	cmp	r3, #2
 8009204:	d138      	bne.n	8009278 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8009206:	897b      	ldrh	r3, [r7, #10]
 8009208:	09db      	lsrs	r3, r3, #7
 800920a:	b29a      	uxth	r2, r3
 800920c:	89bb      	ldrh	r3, [r7, #12]
 800920e:	4053      	eors	r3, r2
 8009210:	b29b      	uxth	r3, r3
 8009212:	f003 0306 	and.w	r3, r3, #6
 8009216:	2b00      	cmp	r3, #0
 8009218:	d11c      	bne.n	8009254 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800921a:	897b      	ldrh	r3, [r7, #10]
 800921c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009222:	1c5a      	adds	r2, r3, #1
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800922c:	2b02      	cmp	r3, #2
 800922e:	d13b      	bne.n	80092a8 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2200      	movs	r2, #0
 8009234:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	2208      	movs	r2, #8
 800923c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	2200      	movs	r2, #0
 8009242:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8009246:	89ba      	ldrh	r2, [r7, #12]
 8009248:	7bfb      	ldrb	r3, [r7, #15]
 800924a:	4619      	mov	r1, r3
 800924c:	6878      	ldr	r0, [r7, #4]
 800924e:	f7ff fdde 	bl	8008e0e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8009252:	e029      	b.n	80092a8 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8009254:	893b      	ldrh	r3, [r7, #8]
 8009256:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8009258:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800925c:	6878      	ldr	r0, [r7, #4]
 800925e:	f000 fcf9 	bl	8009c54 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2200      	movs	r2, #0
 8009266:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800926a:	89ba      	ldrh	r2, [r7, #12]
 800926c:	7bfb      	ldrb	r3, [r7, #15]
 800926e:	4619      	mov	r1, r3
 8009270:	6878      	ldr	r0, [r7, #4]
 8009272:	f7ff fdcc 	bl	8008e0e <HAL_I2C_AddrCallback>
}
 8009276:	e017      	b.n	80092a8 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8009278:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800927c:	6878      	ldr	r0, [r7, #4]
 800927e:	f000 fce9 	bl	8009c54 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	2200      	movs	r2, #0
 8009286:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800928a:	89ba      	ldrh	r2, [r7, #12]
 800928c:	7bfb      	ldrb	r3, [r7, #15]
 800928e:	4619      	mov	r1, r3
 8009290:	6878      	ldr	r0, [r7, #4]
 8009292:	f7ff fdbc 	bl	8008e0e <HAL_I2C_AddrCallback>
}
 8009296:	e007      	b.n	80092a8 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	2208      	movs	r2, #8
 800929e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2200      	movs	r2, #0
 80092a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80092a8:	bf00      	nop
 80092aa:	3710      	adds	r7, #16
 80092ac:	46bd      	mov	sp, r7
 80092ae:	bd80      	pop	{r7, pc}

080092b0 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b084      	sub	sp, #16
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2200      	movs	r2, #0
 80092c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	0b9b      	lsrs	r3, r3, #14
 80092cc:	f003 0301 	and.w	r3, r3, #1
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d008      	beq.n	80092e6 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	681a      	ldr	r2, [r3, #0]
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80092e2:	601a      	str	r2, [r3, #0]
 80092e4:	e00d      	b.n	8009302 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	0bdb      	lsrs	r3, r3, #15
 80092ea:	f003 0301 	and.w	r3, r3, #1
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d007      	beq.n	8009302 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	681a      	ldr	r2, [r3, #0]
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009300:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009308:	b2db      	uxtb	r3, r3
 800930a:	2b29      	cmp	r3, #41	; 0x29
 800930c:	d112      	bne.n	8009334 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	2228      	movs	r2, #40	; 0x28
 8009312:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	2221      	movs	r2, #33	; 0x21
 800931a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800931c:	2101      	movs	r1, #1
 800931e:	6878      	ldr	r0, [r7, #4]
 8009320:	f000 fc98 	bl	8009c54 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2200      	movs	r2, #0
 8009328:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800932c:	6878      	ldr	r0, [r7, #4]
 800932e:	f7ff fd5a 	bl	8008de6 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8009332:	e017      	b.n	8009364 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800933a:	b2db      	uxtb	r3, r3
 800933c:	2b2a      	cmp	r3, #42	; 0x2a
 800933e:	d111      	bne.n	8009364 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2228      	movs	r2, #40	; 0x28
 8009344:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2222      	movs	r2, #34	; 0x22
 800934c:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800934e:	2102      	movs	r1, #2
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	f000 fc7f 	bl	8009c54 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2200      	movs	r2, #0
 800935a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800935e:	6878      	ldr	r0, [r7, #4]
 8009360:	f7ff fd4b 	bl	8008dfa <HAL_I2C_SlaveRxCpltCallback>
}
 8009364:	bf00      	nop
 8009366:	3710      	adds	r7, #16
 8009368:	46bd      	mov	sp, r7
 800936a:	bd80      	pop	{r7, pc}

0800936c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b086      	sub	sp, #24
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
 8009374:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009388:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	2220      	movs	r2, #32
 8009390:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8009392:	7bfb      	ldrb	r3, [r7, #15]
 8009394:	2b21      	cmp	r3, #33	; 0x21
 8009396:	d002      	beq.n	800939e <I2C_ITSlaveCplt+0x32>
 8009398:	7bfb      	ldrb	r3, [r7, #15]
 800939a:	2b29      	cmp	r3, #41	; 0x29
 800939c:	d108      	bne.n	80093b0 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800939e:	f248 0101 	movw	r1, #32769	; 0x8001
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	f000 fc56 	bl	8009c54 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2221      	movs	r2, #33	; 0x21
 80093ac:	631a      	str	r2, [r3, #48]	; 0x30
 80093ae:	e00d      	b.n	80093cc <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80093b0:	7bfb      	ldrb	r3, [r7, #15]
 80093b2:	2b22      	cmp	r3, #34	; 0x22
 80093b4:	d002      	beq.n	80093bc <I2C_ITSlaveCplt+0x50>
 80093b6:	7bfb      	ldrb	r3, [r7, #15]
 80093b8:	2b2a      	cmp	r3, #42	; 0x2a
 80093ba:	d107      	bne.n	80093cc <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80093bc:	f248 0102 	movw	r1, #32770	; 0x8002
 80093c0:	6878      	ldr	r0, [r7, #4]
 80093c2:	f000 fc47 	bl	8009c54 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	2222      	movs	r2, #34	; 0x22
 80093ca:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	685a      	ldr	r2, [r3, #4]
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80093da:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	6859      	ldr	r1, [r3, #4]
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681a      	ldr	r2, [r3, #0]
 80093e6:	4b64      	ldr	r3, [pc, #400]	; (8009578 <I2C_ITSlaveCplt+0x20c>)
 80093e8:	400b      	ands	r3, r1
 80093ea:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80093ec:	6878      	ldr	r0, [r7, #4]
 80093ee:	f000 fa14 	bl	800981a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80093f2:	693b      	ldr	r3, [r7, #16]
 80093f4:	0b9b      	lsrs	r3, r3, #14
 80093f6:	f003 0301 	and.w	r3, r3, #1
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d013      	beq.n	8009426 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	681a      	ldr	r2, [r3, #0]
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800940c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009412:	2b00      	cmp	r3, #0
 8009414:	d020      	beq.n	8009458 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	685b      	ldr	r3, [r3, #4]
 800941e:	b29a      	uxth	r2, r3
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009424:	e018      	b.n	8009458 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8009426:	693b      	ldr	r3, [r7, #16]
 8009428:	0bdb      	lsrs	r3, r3, #15
 800942a:	f003 0301 	and.w	r3, r3, #1
 800942e:	2b00      	cmp	r3, #0
 8009430:	d012      	beq.n	8009458 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	681a      	ldr	r2, [r3, #0]
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009440:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009446:	2b00      	cmp	r3, #0
 8009448:	d006      	beq.n	8009458 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	685b      	ldr	r3, [r3, #4]
 8009452:	b29a      	uxth	r2, r3
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8009458:	697b      	ldr	r3, [r7, #20]
 800945a:	089b      	lsrs	r3, r3, #2
 800945c:	f003 0301 	and.w	r3, r3, #1
 8009460:	2b00      	cmp	r3, #0
 8009462:	d020      	beq.n	80094a6 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8009464:	697b      	ldr	r3, [r7, #20]
 8009466:	f023 0304 	bic.w	r3, r3, #4
 800946a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009476:	b2d2      	uxtb	r2, r2
 8009478:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800947e:	1c5a      	adds	r2, r3, #1
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009488:	2b00      	cmp	r3, #0
 800948a:	d00c      	beq.n	80094a6 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009490:	3b01      	subs	r3, #1
 8009492:	b29a      	uxth	r2, r3
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800949c:	b29b      	uxth	r3, r3
 800949e:	3b01      	subs	r3, #1
 80094a0:	b29a      	uxth	r2, r3
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094aa:	b29b      	uxth	r3, r3
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d005      	beq.n	80094bc <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094b4:	f043 0204 	orr.w	r2, r3, #4
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2200      	movs	r2, #0
 80094c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2200      	movs	r2, #0
 80094c8:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d010      	beq.n	80094f4 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094d6:	4619      	mov	r1, r3
 80094d8:	6878      	ldr	r0, [r7, #4]
 80094da:	f000 f8a7 	bl	800962c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80094e4:	b2db      	uxtb	r3, r3
 80094e6:	2b28      	cmp	r3, #40	; 0x28
 80094e8:	d141      	bne.n	800956e <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80094ea:	6979      	ldr	r1, [r7, #20]
 80094ec:	6878      	ldr	r0, [r7, #4]
 80094ee:	f000 f847 	bl	8009580 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80094f2:	e03c      	b.n	800956e <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094f8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80094fc:	d014      	beq.n	8009528 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 80094fe:	6878      	ldr	r0, [r7, #4]
 8009500:	f7ff fed6 	bl	80092b0 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	4a1d      	ldr	r2, [pc, #116]	; (800957c <I2C_ITSlaveCplt+0x210>)
 8009508:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2220      	movs	r2, #32
 800950e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	2200      	movs	r2, #0
 8009516:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2200      	movs	r2, #0
 800951c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8009520:	6878      	ldr	r0, [r7, #4]
 8009522:	f7ff fc82 	bl	8008e2a <HAL_I2C_ListenCpltCallback>
}
 8009526:	e022      	b.n	800956e <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800952e:	b2db      	uxtb	r3, r3
 8009530:	2b22      	cmp	r3, #34	; 0x22
 8009532:	d10e      	bne.n	8009552 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2220      	movs	r2, #32
 8009538:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	2200      	movs	r2, #0
 8009540:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	2200      	movs	r2, #0
 8009546:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800954a:	6878      	ldr	r0, [r7, #4]
 800954c:	f7ff fc55 	bl	8008dfa <HAL_I2C_SlaveRxCpltCallback>
}
 8009550:	e00d      	b.n	800956e <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	2220      	movs	r2, #32
 8009556:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	2200      	movs	r2, #0
 800955e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2200      	movs	r2, #0
 8009564:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009568:	6878      	ldr	r0, [r7, #4]
 800956a:	f7ff fc3c 	bl	8008de6 <HAL_I2C_SlaveTxCpltCallback>
}
 800956e:	bf00      	nop
 8009570:	3718      	adds	r7, #24
 8009572:	46bd      	mov	sp, r7
 8009574:	bd80      	pop	{r7, pc}
 8009576:	bf00      	nop
 8009578:	fe00e800 	.word	0xfe00e800
 800957c:	ffff0000 	.word	0xffff0000

08009580 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b082      	sub	sp, #8
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
 8009588:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	4a26      	ldr	r2, [pc, #152]	; (8009628 <I2C_ITListenCplt+0xa8>)
 800958e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2200      	movs	r2, #0
 8009594:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	2220      	movs	r2, #32
 800959a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2200      	movs	r2, #0
 80095a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2200      	movs	r2, #0
 80095aa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	089b      	lsrs	r3, r3, #2
 80095b0:	f003 0301 	and.w	r3, r3, #1
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d022      	beq.n	80095fe <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095c2:	b2d2      	uxtb	r2, r2
 80095c4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095ca:	1c5a      	adds	r2, r3, #1
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d012      	beq.n	80095fe <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095dc:	3b01      	subs	r3, #1
 80095de:	b29a      	uxth	r2, r3
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095e8:	b29b      	uxth	r3, r3
 80095ea:	3b01      	subs	r3, #1
 80095ec:	b29a      	uxth	r2, r3
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095f6:	f043 0204 	orr.w	r2, r3, #4
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80095fe:	f248 0103 	movw	r1, #32771	; 0x8003
 8009602:	6878      	ldr	r0, [r7, #4]
 8009604:	f000 fb26 	bl	8009c54 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	2210      	movs	r2, #16
 800960e:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2200      	movs	r2, #0
 8009614:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8009618:	6878      	ldr	r0, [r7, #4]
 800961a:	f7ff fc06 	bl	8008e2a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800961e:	bf00      	nop
 8009620:	3708      	adds	r7, #8
 8009622:	46bd      	mov	sp, r7
 8009624:	bd80      	pop	{r7, pc}
 8009626:	bf00      	nop
 8009628:	ffff0000 	.word	0xffff0000

0800962c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b084      	sub	sp, #16
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
 8009634:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800963c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	2200      	movs	r2, #0
 8009642:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	4a5d      	ldr	r2, [pc, #372]	; (80097c0 <I2C_ITError+0x194>)
 800964a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2200      	movs	r2, #0
 8009650:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	431a      	orrs	r2, r3
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800965e:	7bfb      	ldrb	r3, [r7, #15]
 8009660:	2b28      	cmp	r3, #40	; 0x28
 8009662:	d005      	beq.n	8009670 <I2C_ITError+0x44>
 8009664:	7bfb      	ldrb	r3, [r7, #15]
 8009666:	2b29      	cmp	r3, #41	; 0x29
 8009668:	d002      	beq.n	8009670 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800966a:	7bfb      	ldrb	r3, [r7, #15]
 800966c:	2b2a      	cmp	r3, #42	; 0x2a
 800966e:	d10b      	bne.n	8009688 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009670:	2103      	movs	r1, #3
 8009672:	6878      	ldr	r0, [r7, #4]
 8009674:	f000 faee 	bl	8009c54 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2228      	movs	r2, #40	; 0x28
 800967c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	4a50      	ldr	r2, [pc, #320]	; (80097c4 <I2C_ITError+0x198>)
 8009684:	635a      	str	r2, [r3, #52]	; 0x34
 8009686:	e011      	b.n	80096ac <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009688:	f248 0103 	movw	r1, #32771	; 0x8003
 800968c:	6878      	ldr	r0, [r7, #4]
 800968e:	f000 fae1 	bl	8009c54 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009698:	b2db      	uxtb	r3, r3
 800969a:	2b60      	cmp	r3, #96	; 0x60
 800969c:	d003      	beq.n	80096a6 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	2220      	movs	r2, #32
 80096a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	2200      	movs	r2, #0
 80096aa:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096b0:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d039      	beq.n	800972e <I2C_ITError+0x102>
 80096ba:	68bb      	ldr	r3, [r7, #8]
 80096bc:	2b11      	cmp	r3, #17
 80096be:	d002      	beq.n	80096c6 <I2C_ITError+0x9a>
 80096c0:	68bb      	ldr	r3, [r7, #8]
 80096c2:	2b21      	cmp	r3, #33	; 0x21
 80096c4:	d133      	bne.n	800972e <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80096d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80096d4:	d107      	bne.n	80096e6 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	681a      	ldr	r2, [r3, #0]
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80096e4:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096ea:	4618      	mov	r0, r3
 80096ec:	f7fe fd04 	bl	80080f8 <HAL_DMA_GetState>
 80096f0:	4603      	mov	r3, r0
 80096f2:	2b01      	cmp	r3, #1
 80096f4:	d017      	beq.n	8009726 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096fa:	4a33      	ldr	r2, [pc, #204]	; (80097c8 <I2C_ITError+0x19c>)
 80096fc:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	2200      	movs	r2, #0
 8009702:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800970a:	4618      	mov	r0, r3
 800970c:	f7fe fc04 	bl	8007f18 <HAL_DMA_Abort_IT>
 8009710:	4603      	mov	r3, r0
 8009712:	2b00      	cmp	r3, #0
 8009714:	d04d      	beq.n	80097b2 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800971a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800971c:	687a      	ldr	r2, [r7, #4]
 800971e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009720:	4610      	mov	r0, r2
 8009722:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009724:	e045      	b.n	80097b2 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	f000 f850 	bl	80097cc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800972c:	e041      	b.n	80097b2 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009732:	2b00      	cmp	r3, #0
 8009734:	d039      	beq.n	80097aa <I2C_ITError+0x17e>
 8009736:	68bb      	ldr	r3, [r7, #8]
 8009738:	2b12      	cmp	r3, #18
 800973a:	d002      	beq.n	8009742 <I2C_ITError+0x116>
 800973c:	68bb      	ldr	r3, [r7, #8]
 800973e:	2b22      	cmp	r3, #34	; 0x22
 8009740:	d133      	bne.n	80097aa <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800974c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009750:	d107      	bne.n	8009762 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	681a      	ldr	r2, [r3, #0]
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009760:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009766:	4618      	mov	r0, r3
 8009768:	f7fe fcc6 	bl	80080f8 <HAL_DMA_GetState>
 800976c:	4603      	mov	r3, r0
 800976e:	2b01      	cmp	r3, #1
 8009770:	d017      	beq.n	80097a2 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009776:	4a14      	ldr	r2, [pc, #80]	; (80097c8 <I2C_ITError+0x19c>)
 8009778:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	2200      	movs	r2, #0
 800977e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009786:	4618      	mov	r0, r3
 8009788:	f7fe fbc6 	bl	8007f18 <HAL_DMA_Abort_IT>
 800978c:	4603      	mov	r3, r0
 800978e:	2b00      	cmp	r3, #0
 8009790:	d011      	beq.n	80097b6 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009798:	687a      	ldr	r2, [r7, #4]
 800979a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800979c:	4610      	mov	r0, r2
 800979e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80097a0:	e009      	b.n	80097b6 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80097a2:	6878      	ldr	r0, [r7, #4]
 80097a4:	f000 f812 	bl	80097cc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80097a8:	e005      	b.n	80097b6 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80097aa:	6878      	ldr	r0, [r7, #4]
 80097ac:	f000 f80e 	bl	80097cc <I2C_TreatErrorCallback>
  }
}
 80097b0:	e002      	b.n	80097b8 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80097b2:	bf00      	nop
 80097b4:	e000      	b.n	80097b8 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80097b6:	bf00      	nop
}
 80097b8:	bf00      	nop
 80097ba:	3710      	adds	r7, #16
 80097bc:	46bd      	mov	sp, r7
 80097be:	bd80      	pop	{r7, pc}
 80097c0:	ffff0000 	.word	0xffff0000
 80097c4:	08008e53 	.word	0x08008e53
 80097c8:	08009863 	.word	0x08009863

080097cc <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b082      	sub	sp, #8
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80097da:	b2db      	uxtb	r3, r3
 80097dc:	2b60      	cmp	r3, #96	; 0x60
 80097de:	d10e      	bne.n	80097fe <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2220      	movs	r2, #32
 80097e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2200      	movs	r2, #0
 80097ec:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	2200      	movs	r2, #0
 80097f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80097f6:	6878      	ldr	r0, [r7, #4]
 80097f8:	f7ff fb21 	bl	8008e3e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80097fc:	e009      	b.n	8009812 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	2200      	movs	r2, #0
 8009802:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2200      	movs	r2, #0
 8009808:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800980c:	6878      	ldr	r0, [r7, #4]
 800980e:	f7fc f867 	bl	80058e0 <HAL_I2C_ErrorCallback>
}
 8009812:	bf00      	nop
 8009814:	3708      	adds	r7, #8
 8009816:	46bd      	mov	sp, r7
 8009818:	bd80      	pop	{r7, pc}

0800981a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800981a:	b480      	push	{r7}
 800981c:	b083      	sub	sp, #12
 800981e:	af00      	add	r7, sp, #0
 8009820:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	699b      	ldr	r3, [r3, #24]
 8009828:	f003 0302 	and.w	r3, r3, #2
 800982c:	2b02      	cmp	r3, #2
 800982e:	d103      	bne.n	8009838 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	2200      	movs	r2, #0
 8009836:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	699b      	ldr	r3, [r3, #24]
 800983e:	f003 0301 	and.w	r3, r3, #1
 8009842:	2b01      	cmp	r3, #1
 8009844:	d007      	beq.n	8009856 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	699a      	ldr	r2, [r3, #24]
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	f042 0201 	orr.w	r2, r2, #1
 8009854:	619a      	str	r2, [r3, #24]
  }
}
 8009856:	bf00      	nop
 8009858:	370c      	adds	r7, #12
 800985a:	46bd      	mov	sp, r7
 800985c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009860:	4770      	bx	lr

08009862 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8009862:	b580      	push	{r7, lr}
 8009864:	b084      	sub	sp, #16
 8009866:	af00      	add	r7, sp, #0
 8009868:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800986e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009874:	2b00      	cmp	r3, #0
 8009876:	d003      	beq.n	8009880 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800987c:	2200      	movs	r2, #0
 800987e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009884:	2b00      	cmp	r3, #0
 8009886:	d003      	beq.n	8009890 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800988c:	2200      	movs	r2, #0
 800988e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8009890:	68f8      	ldr	r0, [r7, #12]
 8009892:	f7ff ff9b 	bl	80097cc <I2C_TreatErrorCallback>
}
 8009896:	bf00      	nop
 8009898:	3710      	adds	r7, #16
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}

0800989e <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800989e:	b580      	push	{r7, lr}
 80098a0:	b084      	sub	sp, #16
 80098a2:	af00      	add	r7, sp, #0
 80098a4:	60f8      	str	r0, [r7, #12]
 80098a6:	60b9      	str	r1, [r7, #8]
 80098a8:	603b      	str	r3, [r7, #0]
 80098aa:	4613      	mov	r3, r2
 80098ac:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80098ae:	e022      	b.n	80098f6 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80098b0:	683b      	ldr	r3, [r7, #0]
 80098b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80098b6:	d01e      	beq.n	80098f6 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80098b8:	f7fe f844 	bl	8007944 <HAL_GetTick>
 80098bc:	4602      	mov	r2, r0
 80098be:	69bb      	ldr	r3, [r7, #24]
 80098c0:	1ad3      	subs	r3, r2, r3
 80098c2:	683a      	ldr	r2, [r7, #0]
 80098c4:	429a      	cmp	r2, r3
 80098c6:	d302      	bcc.n	80098ce <I2C_WaitOnFlagUntilTimeout+0x30>
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d113      	bne.n	80098f6 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098d2:	f043 0220 	orr.w	r2, r3, #32
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	2220      	movs	r2, #32
 80098de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	2200      	movs	r2, #0
 80098e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	2200      	movs	r2, #0
 80098ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80098f2:	2301      	movs	r3, #1
 80098f4:	e00f      	b.n	8009916 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	699a      	ldr	r2, [r3, #24]
 80098fc:	68bb      	ldr	r3, [r7, #8]
 80098fe:	4013      	ands	r3, r2
 8009900:	68ba      	ldr	r2, [r7, #8]
 8009902:	429a      	cmp	r2, r3
 8009904:	bf0c      	ite	eq
 8009906:	2301      	moveq	r3, #1
 8009908:	2300      	movne	r3, #0
 800990a:	b2db      	uxtb	r3, r3
 800990c:	461a      	mov	r2, r3
 800990e:	79fb      	ldrb	r3, [r7, #7]
 8009910:	429a      	cmp	r2, r3
 8009912:	d0cd      	beq.n	80098b0 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009914:	2300      	movs	r3, #0
}
 8009916:	4618      	mov	r0, r3
 8009918:	3710      	adds	r7, #16
 800991a:	46bd      	mov	sp, r7
 800991c:	bd80      	pop	{r7, pc}

0800991e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800991e:	b580      	push	{r7, lr}
 8009920:	b084      	sub	sp, #16
 8009922:	af00      	add	r7, sp, #0
 8009924:	60f8      	str	r0, [r7, #12]
 8009926:	60b9      	str	r1, [r7, #8]
 8009928:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800992a:	e02c      	b.n	8009986 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800992c:	687a      	ldr	r2, [r7, #4]
 800992e:	68b9      	ldr	r1, [r7, #8]
 8009930:	68f8      	ldr	r0, [r7, #12]
 8009932:	f000 f871 	bl	8009a18 <I2C_IsErrorOccurred>
 8009936:	4603      	mov	r3, r0
 8009938:	2b00      	cmp	r3, #0
 800993a:	d001      	beq.n	8009940 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800993c:	2301      	movs	r3, #1
 800993e:	e02a      	b.n	8009996 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009940:	68bb      	ldr	r3, [r7, #8]
 8009942:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009946:	d01e      	beq.n	8009986 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009948:	f7fd fffc 	bl	8007944 <HAL_GetTick>
 800994c:	4602      	mov	r2, r0
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	1ad3      	subs	r3, r2, r3
 8009952:	68ba      	ldr	r2, [r7, #8]
 8009954:	429a      	cmp	r2, r3
 8009956:	d302      	bcc.n	800995e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009958:	68bb      	ldr	r3, [r7, #8]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d113      	bne.n	8009986 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009962:	f043 0220 	orr.w	r2, r3, #32
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	2220      	movs	r2, #32
 800996e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	2200      	movs	r2, #0
 8009976:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	2200      	movs	r2, #0
 800997e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8009982:	2301      	movs	r3, #1
 8009984:	e007      	b.n	8009996 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	699b      	ldr	r3, [r3, #24]
 800998c:	f003 0302 	and.w	r3, r3, #2
 8009990:	2b02      	cmp	r3, #2
 8009992:	d1cb      	bne.n	800992c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009994:	2300      	movs	r3, #0
}
 8009996:	4618      	mov	r0, r3
 8009998:	3710      	adds	r7, #16
 800999a:	46bd      	mov	sp, r7
 800999c:	bd80      	pop	{r7, pc}

0800999e <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800999e:	b580      	push	{r7, lr}
 80099a0:	b084      	sub	sp, #16
 80099a2:	af00      	add	r7, sp, #0
 80099a4:	60f8      	str	r0, [r7, #12]
 80099a6:	60b9      	str	r1, [r7, #8]
 80099a8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80099aa:	e028      	b.n	80099fe <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80099ac:	687a      	ldr	r2, [r7, #4]
 80099ae:	68b9      	ldr	r1, [r7, #8]
 80099b0:	68f8      	ldr	r0, [r7, #12]
 80099b2:	f000 f831 	bl	8009a18 <I2C_IsErrorOccurred>
 80099b6:	4603      	mov	r3, r0
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d001      	beq.n	80099c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80099bc:	2301      	movs	r3, #1
 80099be:	e026      	b.n	8009a0e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80099c0:	f7fd ffc0 	bl	8007944 <HAL_GetTick>
 80099c4:	4602      	mov	r2, r0
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	1ad3      	subs	r3, r2, r3
 80099ca:	68ba      	ldr	r2, [r7, #8]
 80099cc:	429a      	cmp	r2, r3
 80099ce:	d302      	bcc.n	80099d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80099d0:	68bb      	ldr	r3, [r7, #8]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d113      	bne.n	80099fe <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099da:	f043 0220 	orr.w	r2, r3, #32
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	2220      	movs	r2, #32
 80099e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	2200      	movs	r2, #0
 80099ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	2200      	movs	r2, #0
 80099f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80099fa:	2301      	movs	r3, #1
 80099fc:	e007      	b.n	8009a0e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	699b      	ldr	r3, [r3, #24]
 8009a04:	f003 0320 	and.w	r3, r3, #32
 8009a08:	2b20      	cmp	r3, #32
 8009a0a:	d1cf      	bne.n	80099ac <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8009a0c:	2300      	movs	r3, #0
}
 8009a0e:	4618      	mov	r0, r3
 8009a10:	3710      	adds	r7, #16
 8009a12:	46bd      	mov	sp, r7
 8009a14:	bd80      	pop	{r7, pc}
	...

08009a18 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b08a      	sub	sp, #40	; 0x28
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	60f8      	str	r0, [r7, #12]
 8009a20:	60b9      	str	r1, [r7, #8]
 8009a22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009a24:	2300      	movs	r3, #0
 8009a26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	699b      	ldr	r3, [r3, #24]
 8009a30:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8009a32:	2300      	movs	r3, #0
 8009a34:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009a3a:	69bb      	ldr	r3, [r7, #24]
 8009a3c:	f003 0310 	and.w	r3, r3, #16
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d075      	beq.n	8009b30 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	2210      	movs	r2, #16
 8009a4a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009a4c:	e056      	b.n	8009afc <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009a4e:	68bb      	ldr	r3, [r7, #8]
 8009a50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009a54:	d052      	beq.n	8009afc <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009a56:	f7fd ff75 	bl	8007944 <HAL_GetTick>
 8009a5a:	4602      	mov	r2, r0
 8009a5c:	69fb      	ldr	r3, [r7, #28]
 8009a5e:	1ad3      	subs	r3, r2, r3
 8009a60:	68ba      	ldr	r2, [r7, #8]
 8009a62:	429a      	cmp	r2, r3
 8009a64:	d302      	bcc.n	8009a6c <I2C_IsErrorOccurred+0x54>
 8009a66:	68bb      	ldr	r3, [r7, #8]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d147      	bne.n	8009afc <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	685b      	ldr	r3, [r3, #4]
 8009a72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009a76:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009a7e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	699b      	ldr	r3, [r3, #24]
 8009a86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009a8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009a8e:	d12e      	bne.n	8009aee <I2C_IsErrorOccurred+0xd6>
 8009a90:	697b      	ldr	r3, [r7, #20]
 8009a92:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009a96:	d02a      	beq.n	8009aee <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8009a98:	7cfb      	ldrb	r3, [r7, #19]
 8009a9a:	2b20      	cmp	r3, #32
 8009a9c:	d027      	beq.n	8009aee <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	685a      	ldr	r2, [r3, #4]
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009aac:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8009aae:	f7fd ff49 	bl	8007944 <HAL_GetTick>
 8009ab2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009ab4:	e01b      	b.n	8009aee <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009ab6:	f7fd ff45 	bl	8007944 <HAL_GetTick>
 8009aba:	4602      	mov	r2, r0
 8009abc:	69fb      	ldr	r3, [r7, #28]
 8009abe:	1ad3      	subs	r3, r2, r3
 8009ac0:	2b19      	cmp	r3, #25
 8009ac2:	d914      	bls.n	8009aee <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ac8:	f043 0220 	orr.w	r2, r3, #32
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	2220      	movs	r2, #32
 8009ad4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	2200      	movs	r2, #0
 8009adc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8009ae8:	2301      	movs	r3, #1
 8009aea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	699b      	ldr	r3, [r3, #24]
 8009af4:	f003 0320 	and.w	r3, r3, #32
 8009af8:	2b20      	cmp	r3, #32
 8009afa:	d1dc      	bne.n	8009ab6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	699b      	ldr	r3, [r3, #24]
 8009b02:	f003 0320 	and.w	r3, r3, #32
 8009b06:	2b20      	cmp	r3, #32
 8009b08:	d003      	beq.n	8009b12 <I2C_IsErrorOccurred+0xfa>
 8009b0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d09d      	beq.n	8009a4e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009b12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d103      	bne.n	8009b22 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	2220      	movs	r2, #32
 8009b20:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009b22:	6a3b      	ldr	r3, [r7, #32]
 8009b24:	f043 0304 	orr.w	r3, r3, #4
 8009b28:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8009b2a:	2301      	movs	r3, #1
 8009b2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	699b      	ldr	r3, [r3, #24]
 8009b36:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009b38:	69bb      	ldr	r3, [r7, #24]
 8009b3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d00b      	beq.n	8009b5a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009b42:	6a3b      	ldr	r3, [r7, #32]
 8009b44:	f043 0301 	orr.w	r3, r3, #1
 8009b48:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009b52:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009b54:	2301      	movs	r3, #1
 8009b56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009b5a:	69bb      	ldr	r3, [r7, #24]
 8009b5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d00b      	beq.n	8009b7c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009b64:	6a3b      	ldr	r3, [r7, #32]
 8009b66:	f043 0308 	orr.w	r3, r3, #8
 8009b6a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009b74:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009b76:	2301      	movs	r3, #1
 8009b78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009b7c:	69bb      	ldr	r3, [r7, #24]
 8009b7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d00b      	beq.n	8009b9e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009b86:	6a3b      	ldr	r3, [r7, #32]
 8009b88:	f043 0302 	orr.w	r3, r3, #2
 8009b8c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009b96:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009b98:	2301      	movs	r3, #1
 8009b9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8009b9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d01c      	beq.n	8009be0 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009ba6:	68f8      	ldr	r0, [r7, #12]
 8009ba8:	f7ff fe37 	bl	800981a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	6859      	ldr	r1, [r3, #4]
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	681a      	ldr	r2, [r3, #0]
 8009bb6:	4b0d      	ldr	r3, [pc, #52]	; (8009bec <I2C_IsErrorOccurred+0x1d4>)
 8009bb8:	400b      	ands	r3, r1
 8009bba:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009bc0:	6a3b      	ldr	r3, [r7, #32]
 8009bc2:	431a      	orrs	r2, r3
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	2220      	movs	r2, #32
 8009bcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	2200      	movs	r2, #0
 8009bdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8009be0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009be4:	4618      	mov	r0, r3
 8009be6:	3728      	adds	r7, #40	; 0x28
 8009be8:	46bd      	mov	sp, r7
 8009bea:	bd80      	pop	{r7, pc}
 8009bec:	fe00e800 	.word	0xfe00e800

08009bf0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009bf0:	b480      	push	{r7}
 8009bf2:	b087      	sub	sp, #28
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	60f8      	str	r0, [r7, #12]
 8009bf8:	607b      	str	r3, [r7, #4]
 8009bfa:	460b      	mov	r3, r1
 8009bfc:	817b      	strh	r3, [r7, #10]
 8009bfe:	4613      	mov	r3, r2
 8009c00:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009c02:	897b      	ldrh	r3, [r7, #10]
 8009c04:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009c08:	7a7b      	ldrb	r3, [r7, #9]
 8009c0a:	041b      	lsls	r3, r3, #16
 8009c0c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009c10:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009c16:	6a3b      	ldr	r3, [r7, #32]
 8009c18:	4313      	orrs	r3, r2
 8009c1a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009c1e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	685a      	ldr	r2, [r3, #4]
 8009c26:	6a3b      	ldr	r3, [r7, #32]
 8009c28:	0d5b      	lsrs	r3, r3, #21
 8009c2a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8009c2e:	4b08      	ldr	r3, [pc, #32]	; (8009c50 <I2C_TransferConfig+0x60>)
 8009c30:	430b      	orrs	r3, r1
 8009c32:	43db      	mvns	r3, r3
 8009c34:	ea02 0103 	and.w	r1, r2, r3
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	697a      	ldr	r2, [r7, #20]
 8009c3e:	430a      	orrs	r2, r1
 8009c40:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009c42:	bf00      	nop
 8009c44:	371c      	adds	r7, #28
 8009c46:	46bd      	mov	sp, r7
 8009c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4c:	4770      	bx	lr
 8009c4e:	bf00      	nop
 8009c50:	03ff63ff 	.word	0x03ff63ff

08009c54 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8009c54:	b480      	push	{r7}
 8009c56:	b085      	sub	sp, #20
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
 8009c5c:	460b      	mov	r3, r1
 8009c5e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8009c60:	2300      	movs	r3, #0
 8009c62:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8009c64:	887b      	ldrh	r3, [r7, #2]
 8009c66:	f003 0301 	and.w	r3, r3, #1
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d00f      	beq.n	8009c8e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8009c74:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009c7c:	b2db      	uxtb	r3, r3
 8009c7e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009c82:	2b28      	cmp	r3, #40	; 0x28
 8009c84:	d003      	beq.n	8009c8e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8009c8c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8009c8e:	887b      	ldrh	r3, [r7, #2]
 8009c90:	f003 0302 	and.w	r3, r3, #2
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d00f      	beq.n	8009cb8 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8009c9e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009ca6:	b2db      	uxtb	r3, r3
 8009ca8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009cac:	2b28      	cmp	r3, #40	; 0x28
 8009cae:	d003      	beq.n	8009cb8 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8009cb6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8009cb8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	da03      	bge.n	8009cc8 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8009cc6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8009cc8:	887b      	ldrh	r3, [r7, #2]
 8009cca:	2b10      	cmp	r3, #16
 8009ccc:	d103      	bne.n	8009cd6 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8009cd4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8009cd6:	887b      	ldrh	r3, [r7, #2]
 8009cd8:	2b20      	cmp	r3, #32
 8009cda:	d103      	bne.n	8009ce4 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	f043 0320 	orr.w	r3, r3, #32
 8009ce2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8009ce4:	887b      	ldrh	r3, [r7, #2]
 8009ce6:	2b40      	cmp	r3, #64	; 0x40
 8009ce8:	d103      	bne.n	8009cf2 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009cf0:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	6819      	ldr	r1, [r3, #0]
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	43da      	mvns	r2, r3
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	400a      	ands	r2, r1
 8009d02:	601a      	str	r2, [r3, #0]
}
 8009d04:	bf00      	nop
 8009d06:	3714      	adds	r7, #20
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0e:	4770      	bx	lr

08009d10 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009d10:	b480      	push	{r7}
 8009d12:	b083      	sub	sp, #12
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
 8009d18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009d20:	b2db      	uxtb	r3, r3
 8009d22:	2b20      	cmp	r3, #32
 8009d24:	d138      	bne.n	8009d98 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009d2c:	2b01      	cmp	r3, #1
 8009d2e:	d101      	bne.n	8009d34 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009d30:	2302      	movs	r3, #2
 8009d32:	e032      	b.n	8009d9a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2201      	movs	r2, #1
 8009d38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	2224      	movs	r2, #36	; 0x24
 8009d40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	681a      	ldr	r2, [r3, #0]
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	f022 0201 	bic.w	r2, r2, #1
 8009d52:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	681a      	ldr	r2, [r3, #0]
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009d62:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	6819      	ldr	r1, [r3, #0]
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	683a      	ldr	r2, [r7, #0]
 8009d70:	430a      	orrs	r2, r1
 8009d72:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	681a      	ldr	r2, [r3, #0]
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	f042 0201 	orr.w	r2, r2, #1
 8009d82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2220      	movs	r2, #32
 8009d88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	2200      	movs	r2, #0
 8009d90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009d94:	2300      	movs	r3, #0
 8009d96:	e000      	b.n	8009d9a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009d98:	2302      	movs	r3, #2
  }
}
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	370c      	adds	r7, #12
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da4:	4770      	bx	lr

08009da6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009da6:	b480      	push	{r7}
 8009da8:	b085      	sub	sp, #20
 8009daa:	af00      	add	r7, sp, #0
 8009dac:	6078      	str	r0, [r7, #4]
 8009dae:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009db6:	b2db      	uxtb	r3, r3
 8009db8:	2b20      	cmp	r3, #32
 8009dba:	d139      	bne.n	8009e30 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009dc2:	2b01      	cmp	r3, #1
 8009dc4:	d101      	bne.n	8009dca <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009dc6:	2302      	movs	r3, #2
 8009dc8:	e033      	b.n	8009e32 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	2201      	movs	r2, #1
 8009dce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	2224      	movs	r2, #36	; 0x24
 8009dd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	681a      	ldr	r2, [r3, #0]
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	f022 0201 	bic.w	r2, r2, #1
 8009de8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009df8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	021b      	lsls	r3, r3, #8
 8009dfe:	68fa      	ldr	r2, [r7, #12]
 8009e00:	4313      	orrs	r3, r2
 8009e02:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	68fa      	ldr	r2, [r7, #12]
 8009e0a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	681a      	ldr	r2, [r3, #0]
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	f042 0201 	orr.w	r2, r2, #1
 8009e1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	2220      	movs	r2, #32
 8009e20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2200      	movs	r2, #0
 8009e28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	e000      	b.n	8009e32 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009e30:	2302      	movs	r3, #2
  }
}
 8009e32:	4618      	mov	r0, r3
 8009e34:	3714      	adds	r7, #20
 8009e36:	46bd      	mov	sp, r7
 8009e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3c:	4770      	bx	lr
	...

08009e40 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8009e40:	b480      	push	{r7}
 8009e42:	b085      	sub	sp, #20
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009e48:	4b0b      	ldr	r3, [pc, #44]	; (8009e78 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8009e4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e4c:	4a0a      	ldr	r2, [pc, #40]	; (8009e78 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8009e4e:	f043 0301 	orr.w	r3, r3, #1
 8009e52:	6613      	str	r3, [r2, #96]	; 0x60
 8009e54:	4b08      	ldr	r3, [pc, #32]	; (8009e78 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8009e56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e58:	f003 0301 	and.w	r3, r3, #1
 8009e5c:	60fb      	str	r3, [r7, #12]
 8009e5e:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8009e60:	4b06      	ldr	r3, [pc, #24]	; (8009e7c <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8009e62:	685a      	ldr	r2, [r3, #4]
 8009e64:	4905      	ldr	r1, [pc, #20]	; (8009e7c <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	4313      	orrs	r3, r2
 8009e6a:	604b      	str	r3, [r1, #4]
}
 8009e6c:	bf00      	nop
 8009e6e:	3714      	adds	r7, #20
 8009e70:	46bd      	mov	sp, r7
 8009e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e76:	4770      	bx	lr
 8009e78:	40021000 	.word	0x40021000
 8009e7c:	40010000 	.word	0x40010000

08009e80 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b082      	sub	sp, #8
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
 8009e88:	460b      	mov	r3, r1
 8009e8a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d10c      	bne.n	8009eac <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8009e92:	4b13      	ldr	r3, [pc, #76]	; (8009ee0 <HAL_PWR_EnterSLEEPMode+0x60>)
 8009e94:	695b      	ldr	r3, [r3, #20]
 8009e96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009e9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009e9e:	d10e      	bne.n	8009ebe <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8009ea0:	f000 f8b6 	bl	800a010 <HAL_PWREx_DisableLowPowerRunMode>
 8009ea4:	4603      	mov	r3, r0
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d009      	beq.n	8009ebe <HAL_PWR_EnterSLEEPMode+0x3e>
      {
        return ;
 8009eaa:	e016      	b.n	8009eda <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF) == RESET)
 8009eac:	4b0c      	ldr	r3, [pc, #48]	; (8009ee0 <HAL_PWR_EnterSLEEPMode+0x60>)
 8009eae:	695b      	ldr	r3, [r3, #20]
 8009eb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009eb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009eb8:	d001      	beq.n	8009ebe <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8009eba:	f000 f899 	bl	8009ff0 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8009ebe:	4b09      	ldr	r3, [pc, #36]	; (8009ee4 <HAL_PWR_EnterSLEEPMode+0x64>)
 8009ec0:	691b      	ldr	r3, [r3, #16]
 8009ec2:	4a08      	ldr	r2, [pc, #32]	; (8009ee4 <HAL_PWR_EnterSLEEPMode+0x64>)
 8009ec4:	f023 0304 	bic.w	r3, r3, #4
 8009ec8:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8009eca:	78fb      	ldrb	r3, [r7, #3]
 8009ecc:	2b01      	cmp	r3, #1
 8009ece:	d101      	bne.n	8009ed4 <HAL_PWR_EnterSLEEPMode+0x54>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8009ed0:	bf30      	wfi
 8009ed2:	e002      	b.n	8009eda <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8009ed4:	bf40      	sev
    __WFE();
 8009ed6:	bf20      	wfe
    __WFE();
 8009ed8:	bf20      	wfe
  }

}
 8009eda:	3708      	adds	r7, #8
 8009edc:	46bd      	mov	sp, r7
 8009ede:	bd80      	pop	{r7, pc}
 8009ee0:	40007000 	.word	0x40007000
 8009ee4:	e000ed00 	.word	0xe000ed00

08009ee8 <HAL_PWR_EnableSleepOnExit>:
  *       Setting this bit is useful when the processor is expected to run only on
  *       interruptions handling.
  * @retval None
  */
void HAL_PWR_EnableSleepOnExit(void)
{
 8009ee8:	b480      	push	{r7}
 8009eea:	af00      	add	r7, sp, #0
  /* Set SLEEPONEXIT bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8009eec:	4b05      	ldr	r3, [pc, #20]	; (8009f04 <HAL_PWR_EnableSleepOnExit+0x1c>)
 8009eee:	691b      	ldr	r3, [r3, #16]
 8009ef0:	4a04      	ldr	r2, [pc, #16]	; (8009f04 <HAL_PWR_EnableSleepOnExit+0x1c>)
 8009ef2:	f043 0302 	orr.w	r3, r3, #2
 8009ef6:	6113      	str	r3, [r2, #16]
}
 8009ef8:	bf00      	nop
 8009efa:	46bd      	mov	sp, r7
 8009efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f00:	4770      	bx	lr
 8009f02:	bf00      	nop
 8009f04:	e000ed00 	.word	0xe000ed00

08009f08 <HAL_PWR_DisableSleepOnExit>:
  * @note Clear SLEEPONEXIT bit of SCR register. When this bit is set, the processor
  *       re-enters SLEEP mode when an interruption handling is over.
  * @retval None
  */
void HAL_PWR_DisableSleepOnExit(void)
{
 8009f08:	b480      	push	{r7}
 8009f0a:	af00      	add	r7, sp, #0
  /* Clear SLEEPONEXIT bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8009f0c:	4b05      	ldr	r3, [pc, #20]	; (8009f24 <HAL_PWR_DisableSleepOnExit+0x1c>)
 8009f0e:	691b      	ldr	r3, [r3, #16]
 8009f10:	4a04      	ldr	r2, [pc, #16]	; (8009f24 <HAL_PWR_DisableSleepOnExit+0x1c>)
 8009f12:	f023 0302 	bic.w	r3, r3, #2
 8009f16:	6113      	str	r3, [r2, #16]
}
 8009f18:	bf00      	nop
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f20:	4770      	bx	lr
 8009f22:	bf00      	nop
 8009f24:	e000ed00 	.word	0xe000ed00

08009f28 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8009f28:	b480      	push	{r7}
 8009f2a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8009f2c:	4b04      	ldr	r3, [pc, #16]	; (8009f40 <HAL_PWREx_GetVoltageRange+0x18>)
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8009f34:	4618      	mov	r0, r3
 8009f36:	46bd      	mov	sp, r7
 8009f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3c:	4770      	bx	lr
 8009f3e:	bf00      	nop
 8009f40:	40007000 	.word	0x40007000

08009f44 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8009f44:	b480      	push	{r7}
 8009f46:	b085      	sub	sp, #20
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f52:	d130      	bne.n	8009fb6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8009f54:	4b23      	ldr	r3, [pc, #140]	; (8009fe4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009f5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f60:	d038      	beq.n	8009fd4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8009f62:	4b20      	ldr	r3, [pc, #128]	; (8009fe4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009f6a:	4a1e      	ldr	r2, [pc, #120]	; (8009fe4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009f6c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009f70:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8009f72:	4b1d      	ldr	r3, [pc, #116]	; (8009fe8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	2232      	movs	r2, #50	; 0x32
 8009f78:	fb02 f303 	mul.w	r3, r2, r3
 8009f7c:	4a1b      	ldr	r2, [pc, #108]	; (8009fec <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8009f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8009f82:	0c9b      	lsrs	r3, r3, #18
 8009f84:	3301      	adds	r3, #1
 8009f86:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009f88:	e002      	b.n	8009f90 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	3b01      	subs	r3, #1
 8009f8e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009f90:	4b14      	ldr	r3, [pc, #80]	; (8009fe4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009f92:	695b      	ldr	r3, [r3, #20]
 8009f94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009f98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009f9c:	d102      	bne.n	8009fa4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d1f2      	bne.n	8009f8a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009fa4:	4b0f      	ldr	r3, [pc, #60]	; (8009fe4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009fa6:	695b      	ldr	r3, [r3, #20]
 8009fa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009fac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009fb0:	d110      	bne.n	8009fd4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8009fb2:	2303      	movs	r3, #3
 8009fb4:	e00f      	b.n	8009fd6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8009fb6:	4b0b      	ldr	r3, [pc, #44]	; (8009fe4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009fbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009fc2:	d007      	beq.n	8009fd4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8009fc4:	4b07      	ldr	r3, [pc, #28]	; (8009fe4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009fcc:	4a05      	ldr	r2, [pc, #20]	; (8009fe4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009fce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009fd2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8009fd4:	2300      	movs	r3, #0
}
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	3714      	adds	r7, #20
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe0:	4770      	bx	lr
 8009fe2:	bf00      	nop
 8009fe4:	40007000 	.word	0x40007000
 8009fe8:	20000228 	.word	0x20000228
 8009fec:	431bde83 	.word	0x431bde83

08009ff0 <HAL_PWREx_EnableLowPowerRunMode>:
  *        Setting RUN_PD in FLASH_ACR then appropriately reducing the clock frequency must
  *        be done before calling HAL_PWREx_EnableLowPowerRunMode() API.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8009ff0:	b480      	push	{r7}
 8009ff2:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8009ff4:	4b05      	ldr	r3, [pc, #20]	; (800a00c <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	4a04      	ldr	r2, [pc, #16]	; (800a00c <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 8009ffa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009ffe:	6013      	str	r3, [r2, #0]
}
 800a000:	bf00      	nop
 800a002:	46bd      	mov	sp, r7
 800a004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a008:	4770      	bx	lr
 800a00a:	bf00      	nop
 800a00c:	40007000 	.word	0x40007000

0800a010 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 800a010:	b480      	push	{r7}
 800a012:	b083      	sub	sp, #12
 800a014:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 800a016:	4b17      	ldr	r3, [pc, #92]	; (800a074 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	4a16      	ldr	r2, [pc, #88]	; (800a074 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800a01c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a020:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800a022:	4b15      	ldr	r3, [pc, #84]	; (800a078 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	2232      	movs	r2, #50	; 0x32
 800a028:	fb02 f303 	mul.w	r3, r2, r3
 800a02c:	4a13      	ldr	r2, [pc, #76]	; (800a07c <HAL_PWREx_DisableLowPowerRunMode+0x6c>)
 800a02e:	fba2 2303 	umull	r2, r3, r2, r3
 800a032:	0c9b      	lsrs	r3, r3, #18
 800a034:	3301      	adds	r3, #1
 800a036:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800a038:	e002      	b.n	800a040 <HAL_PWREx_DisableLowPowerRunMode+0x30>
  {
    wait_loop_index--;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	3b01      	subs	r3, #1
 800a03e:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800a040:	4b0c      	ldr	r3, [pc, #48]	; (800a074 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800a042:	695b      	ldr	r3, [r3, #20]
 800a044:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a048:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a04c:	d102      	bne.n	800a054 <HAL_PWREx_DisableLowPowerRunMode+0x44>
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d1f2      	bne.n	800a03a <HAL_PWREx_DisableLowPowerRunMode+0x2a>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 800a054:	4b07      	ldr	r3, [pc, #28]	; (800a074 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800a056:	695b      	ldr	r3, [r3, #20]
 800a058:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a05c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a060:	d101      	bne.n	800a066 <HAL_PWREx_DisableLowPowerRunMode+0x56>
  {
    return HAL_TIMEOUT;
 800a062:	2303      	movs	r3, #3
 800a064:	e000      	b.n	800a068 <HAL_PWREx_DisableLowPowerRunMode+0x58>
  }

  return HAL_OK;
 800a066:	2300      	movs	r3, #0
}
 800a068:	4618      	mov	r0, r3
 800a06a:	370c      	adds	r7, #12
 800a06c:	46bd      	mov	sp, r7
 800a06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a072:	4770      	bx	lr
 800a074:	40007000 	.word	0x40007000
 800a078:	20000228 	.word	0x20000228
 800a07c:	431bde83 	.word	0x431bde83

0800a080 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b088      	sub	sp, #32
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d101      	bne.n	800a092 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a08e:	2301      	movs	r3, #1
 800a090:	e3ca      	b.n	800a828 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a092:	4b97      	ldr	r3, [pc, #604]	; (800a2f0 <HAL_RCC_OscConfig+0x270>)
 800a094:	689b      	ldr	r3, [r3, #8]
 800a096:	f003 030c 	and.w	r3, r3, #12
 800a09a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a09c:	4b94      	ldr	r3, [pc, #592]	; (800a2f0 <HAL_RCC_OscConfig+0x270>)
 800a09e:	68db      	ldr	r3, [r3, #12]
 800a0a0:	f003 0303 	and.w	r3, r3, #3
 800a0a4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	f003 0310 	and.w	r3, r3, #16
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	f000 80e4 	beq.w	800a27c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800a0b4:	69bb      	ldr	r3, [r7, #24]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d007      	beq.n	800a0ca <HAL_RCC_OscConfig+0x4a>
 800a0ba:	69bb      	ldr	r3, [r7, #24]
 800a0bc:	2b0c      	cmp	r3, #12
 800a0be:	f040 808b 	bne.w	800a1d8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800a0c2:	697b      	ldr	r3, [r7, #20]
 800a0c4:	2b01      	cmp	r3, #1
 800a0c6:	f040 8087 	bne.w	800a1d8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800a0ca:	4b89      	ldr	r3, [pc, #548]	; (800a2f0 <HAL_RCC_OscConfig+0x270>)
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	f003 0302 	and.w	r3, r3, #2
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d005      	beq.n	800a0e2 <HAL_RCC_OscConfig+0x62>
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	699b      	ldr	r3, [r3, #24]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d101      	bne.n	800a0e2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800a0de:	2301      	movs	r3, #1
 800a0e0:	e3a2      	b.n	800a828 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	6a1a      	ldr	r2, [r3, #32]
 800a0e6:	4b82      	ldr	r3, [pc, #520]	; (800a2f0 <HAL_RCC_OscConfig+0x270>)
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	f003 0308 	and.w	r3, r3, #8
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d004      	beq.n	800a0fc <HAL_RCC_OscConfig+0x7c>
 800a0f2:	4b7f      	ldr	r3, [pc, #508]	; (800a2f0 <HAL_RCC_OscConfig+0x270>)
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a0fa:	e005      	b.n	800a108 <HAL_RCC_OscConfig+0x88>
 800a0fc:	4b7c      	ldr	r3, [pc, #496]	; (800a2f0 <HAL_RCC_OscConfig+0x270>)
 800a0fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a102:	091b      	lsrs	r3, r3, #4
 800a104:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a108:	4293      	cmp	r3, r2
 800a10a:	d223      	bcs.n	800a154 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	6a1b      	ldr	r3, [r3, #32]
 800a110:	4618      	mov	r0, r3
 800a112:	f000 fd55 	bl	800abc0 <RCC_SetFlashLatencyFromMSIRange>
 800a116:	4603      	mov	r3, r0
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d001      	beq.n	800a120 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800a11c:	2301      	movs	r3, #1
 800a11e:	e383      	b.n	800a828 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a120:	4b73      	ldr	r3, [pc, #460]	; (800a2f0 <HAL_RCC_OscConfig+0x270>)
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	4a72      	ldr	r2, [pc, #456]	; (800a2f0 <HAL_RCC_OscConfig+0x270>)
 800a126:	f043 0308 	orr.w	r3, r3, #8
 800a12a:	6013      	str	r3, [r2, #0]
 800a12c:	4b70      	ldr	r3, [pc, #448]	; (800a2f0 <HAL_RCC_OscConfig+0x270>)
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	6a1b      	ldr	r3, [r3, #32]
 800a138:	496d      	ldr	r1, [pc, #436]	; (800a2f0 <HAL_RCC_OscConfig+0x270>)
 800a13a:	4313      	orrs	r3, r2
 800a13c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a13e:	4b6c      	ldr	r3, [pc, #432]	; (800a2f0 <HAL_RCC_OscConfig+0x270>)
 800a140:	685b      	ldr	r3, [r3, #4]
 800a142:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	69db      	ldr	r3, [r3, #28]
 800a14a:	021b      	lsls	r3, r3, #8
 800a14c:	4968      	ldr	r1, [pc, #416]	; (800a2f0 <HAL_RCC_OscConfig+0x270>)
 800a14e:	4313      	orrs	r3, r2
 800a150:	604b      	str	r3, [r1, #4]
 800a152:	e025      	b.n	800a1a0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a154:	4b66      	ldr	r3, [pc, #408]	; (800a2f0 <HAL_RCC_OscConfig+0x270>)
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	4a65      	ldr	r2, [pc, #404]	; (800a2f0 <HAL_RCC_OscConfig+0x270>)
 800a15a:	f043 0308 	orr.w	r3, r3, #8
 800a15e:	6013      	str	r3, [r2, #0]
 800a160:	4b63      	ldr	r3, [pc, #396]	; (800a2f0 <HAL_RCC_OscConfig+0x270>)
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	6a1b      	ldr	r3, [r3, #32]
 800a16c:	4960      	ldr	r1, [pc, #384]	; (800a2f0 <HAL_RCC_OscConfig+0x270>)
 800a16e:	4313      	orrs	r3, r2
 800a170:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a172:	4b5f      	ldr	r3, [pc, #380]	; (800a2f0 <HAL_RCC_OscConfig+0x270>)
 800a174:	685b      	ldr	r3, [r3, #4]
 800a176:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	69db      	ldr	r3, [r3, #28]
 800a17e:	021b      	lsls	r3, r3, #8
 800a180:	495b      	ldr	r1, [pc, #364]	; (800a2f0 <HAL_RCC_OscConfig+0x270>)
 800a182:	4313      	orrs	r3, r2
 800a184:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800a186:	69bb      	ldr	r3, [r7, #24]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d109      	bne.n	800a1a0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	6a1b      	ldr	r3, [r3, #32]
 800a190:	4618      	mov	r0, r3
 800a192:	f000 fd15 	bl	800abc0 <RCC_SetFlashLatencyFromMSIRange>
 800a196:	4603      	mov	r3, r0
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d001      	beq.n	800a1a0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800a19c:	2301      	movs	r3, #1
 800a19e:	e343      	b.n	800a828 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800a1a0:	f000 fc4a 	bl	800aa38 <HAL_RCC_GetSysClockFreq>
 800a1a4:	4602      	mov	r2, r0
 800a1a6:	4b52      	ldr	r3, [pc, #328]	; (800a2f0 <HAL_RCC_OscConfig+0x270>)
 800a1a8:	689b      	ldr	r3, [r3, #8]
 800a1aa:	091b      	lsrs	r3, r3, #4
 800a1ac:	f003 030f 	and.w	r3, r3, #15
 800a1b0:	4950      	ldr	r1, [pc, #320]	; (800a2f4 <HAL_RCC_OscConfig+0x274>)
 800a1b2:	5ccb      	ldrb	r3, [r1, r3]
 800a1b4:	f003 031f 	and.w	r3, r3, #31
 800a1b8:	fa22 f303 	lsr.w	r3, r2, r3
 800a1bc:	4a4e      	ldr	r2, [pc, #312]	; (800a2f8 <HAL_RCC_OscConfig+0x278>)
 800a1be:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800a1c0:	4b4e      	ldr	r3, [pc, #312]	; (800a2fc <HAL_RCC_OscConfig+0x27c>)
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	f7fd fb6d 	bl	80078a4 <HAL_InitTick>
 800a1ca:	4603      	mov	r3, r0
 800a1cc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800a1ce:	7bfb      	ldrb	r3, [r7, #15]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d052      	beq.n	800a27a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800a1d4:	7bfb      	ldrb	r3, [r7, #15]
 800a1d6:	e327      	b.n	800a828 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	699b      	ldr	r3, [r3, #24]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d032      	beq.n	800a246 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800a1e0:	4b43      	ldr	r3, [pc, #268]	; (800a2f0 <HAL_RCC_OscConfig+0x270>)
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	4a42      	ldr	r2, [pc, #264]	; (800a2f0 <HAL_RCC_OscConfig+0x270>)
 800a1e6:	f043 0301 	orr.w	r3, r3, #1
 800a1ea:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800a1ec:	f7fd fbaa 	bl	8007944 <HAL_GetTick>
 800a1f0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800a1f2:	e008      	b.n	800a206 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a1f4:	f7fd fba6 	bl	8007944 <HAL_GetTick>
 800a1f8:	4602      	mov	r2, r0
 800a1fa:	693b      	ldr	r3, [r7, #16]
 800a1fc:	1ad3      	subs	r3, r2, r3
 800a1fe:	2b02      	cmp	r3, #2
 800a200:	d901      	bls.n	800a206 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800a202:	2303      	movs	r3, #3
 800a204:	e310      	b.n	800a828 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800a206:	4b3a      	ldr	r3, [pc, #232]	; (800a2f0 <HAL_RCC_OscConfig+0x270>)
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	f003 0302 	and.w	r3, r3, #2
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d0f0      	beq.n	800a1f4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a212:	4b37      	ldr	r3, [pc, #220]	; (800a2f0 <HAL_RCC_OscConfig+0x270>)
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	4a36      	ldr	r2, [pc, #216]	; (800a2f0 <HAL_RCC_OscConfig+0x270>)
 800a218:	f043 0308 	orr.w	r3, r3, #8
 800a21c:	6013      	str	r3, [r2, #0]
 800a21e:	4b34      	ldr	r3, [pc, #208]	; (800a2f0 <HAL_RCC_OscConfig+0x270>)
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	6a1b      	ldr	r3, [r3, #32]
 800a22a:	4931      	ldr	r1, [pc, #196]	; (800a2f0 <HAL_RCC_OscConfig+0x270>)
 800a22c:	4313      	orrs	r3, r2
 800a22e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a230:	4b2f      	ldr	r3, [pc, #188]	; (800a2f0 <HAL_RCC_OscConfig+0x270>)
 800a232:	685b      	ldr	r3, [r3, #4]
 800a234:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	69db      	ldr	r3, [r3, #28]
 800a23c:	021b      	lsls	r3, r3, #8
 800a23e:	492c      	ldr	r1, [pc, #176]	; (800a2f0 <HAL_RCC_OscConfig+0x270>)
 800a240:	4313      	orrs	r3, r2
 800a242:	604b      	str	r3, [r1, #4]
 800a244:	e01a      	b.n	800a27c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800a246:	4b2a      	ldr	r3, [pc, #168]	; (800a2f0 <HAL_RCC_OscConfig+0x270>)
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	4a29      	ldr	r2, [pc, #164]	; (800a2f0 <HAL_RCC_OscConfig+0x270>)
 800a24c:	f023 0301 	bic.w	r3, r3, #1
 800a250:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800a252:	f7fd fb77 	bl	8007944 <HAL_GetTick>
 800a256:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800a258:	e008      	b.n	800a26c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a25a:	f7fd fb73 	bl	8007944 <HAL_GetTick>
 800a25e:	4602      	mov	r2, r0
 800a260:	693b      	ldr	r3, [r7, #16]
 800a262:	1ad3      	subs	r3, r2, r3
 800a264:	2b02      	cmp	r3, #2
 800a266:	d901      	bls.n	800a26c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800a268:	2303      	movs	r3, #3
 800a26a:	e2dd      	b.n	800a828 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800a26c:	4b20      	ldr	r3, [pc, #128]	; (800a2f0 <HAL_RCC_OscConfig+0x270>)
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	f003 0302 	and.w	r3, r3, #2
 800a274:	2b00      	cmp	r3, #0
 800a276:	d1f0      	bne.n	800a25a <HAL_RCC_OscConfig+0x1da>
 800a278:	e000      	b.n	800a27c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800a27a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	f003 0301 	and.w	r3, r3, #1
 800a284:	2b00      	cmp	r3, #0
 800a286:	d074      	beq.n	800a372 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800a288:	69bb      	ldr	r3, [r7, #24]
 800a28a:	2b08      	cmp	r3, #8
 800a28c:	d005      	beq.n	800a29a <HAL_RCC_OscConfig+0x21a>
 800a28e:	69bb      	ldr	r3, [r7, #24]
 800a290:	2b0c      	cmp	r3, #12
 800a292:	d10e      	bne.n	800a2b2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800a294:	697b      	ldr	r3, [r7, #20]
 800a296:	2b03      	cmp	r3, #3
 800a298:	d10b      	bne.n	800a2b2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a29a:	4b15      	ldr	r3, [pc, #84]	; (800a2f0 <HAL_RCC_OscConfig+0x270>)
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d064      	beq.n	800a370 <HAL_RCC_OscConfig+0x2f0>
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	685b      	ldr	r3, [r3, #4]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d160      	bne.n	800a370 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800a2ae:	2301      	movs	r3, #1
 800a2b0:	e2ba      	b.n	800a828 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	685b      	ldr	r3, [r3, #4]
 800a2b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a2ba:	d106      	bne.n	800a2ca <HAL_RCC_OscConfig+0x24a>
 800a2bc:	4b0c      	ldr	r3, [pc, #48]	; (800a2f0 <HAL_RCC_OscConfig+0x270>)
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	4a0b      	ldr	r2, [pc, #44]	; (800a2f0 <HAL_RCC_OscConfig+0x270>)
 800a2c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a2c6:	6013      	str	r3, [r2, #0]
 800a2c8:	e026      	b.n	800a318 <HAL_RCC_OscConfig+0x298>
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	685b      	ldr	r3, [r3, #4]
 800a2ce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a2d2:	d115      	bne.n	800a300 <HAL_RCC_OscConfig+0x280>
 800a2d4:	4b06      	ldr	r3, [pc, #24]	; (800a2f0 <HAL_RCC_OscConfig+0x270>)
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	4a05      	ldr	r2, [pc, #20]	; (800a2f0 <HAL_RCC_OscConfig+0x270>)
 800a2da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a2de:	6013      	str	r3, [r2, #0]
 800a2e0:	4b03      	ldr	r3, [pc, #12]	; (800a2f0 <HAL_RCC_OscConfig+0x270>)
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	4a02      	ldr	r2, [pc, #8]	; (800a2f0 <HAL_RCC_OscConfig+0x270>)
 800a2e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a2ea:	6013      	str	r3, [r2, #0]
 800a2ec:	e014      	b.n	800a318 <HAL_RCC_OscConfig+0x298>
 800a2ee:	bf00      	nop
 800a2f0:	40021000 	.word	0x40021000
 800a2f4:	08015770 	.word	0x08015770
 800a2f8:	20000228 	.word	0x20000228
 800a2fc:	20000258 	.word	0x20000258
 800a300:	4ba0      	ldr	r3, [pc, #640]	; (800a584 <HAL_RCC_OscConfig+0x504>)
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	4a9f      	ldr	r2, [pc, #636]	; (800a584 <HAL_RCC_OscConfig+0x504>)
 800a306:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a30a:	6013      	str	r3, [r2, #0]
 800a30c:	4b9d      	ldr	r3, [pc, #628]	; (800a584 <HAL_RCC_OscConfig+0x504>)
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	4a9c      	ldr	r2, [pc, #624]	; (800a584 <HAL_RCC_OscConfig+0x504>)
 800a312:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a316:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	685b      	ldr	r3, [r3, #4]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d013      	beq.n	800a348 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a320:	f7fd fb10 	bl	8007944 <HAL_GetTick>
 800a324:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a326:	e008      	b.n	800a33a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a328:	f7fd fb0c 	bl	8007944 <HAL_GetTick>
 800a32c:	4602      	mov	r2, r0
 800a32e:	693b      	ldr	r3, [r7, #16]
 800a330:	1ad3      	subs	r3, r2, r3
 800a332:	2b64      	cmp	r3, #100	; 0x64
 800a334:	d901      	bls.n	800a33a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800a336:	2303      	movs	r3, #3
 800a338:	e276      	b.n	800a828 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a33a:	4b92      	ldr	r3, [pc, #584]	; (800a584 <HAL_RCC_OscConfig+0x504>)
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a342:	2b00      	cmp	r3, #0
 800a344:	d0f0      	beq.n	800a328 <HAL_RCC_OscConfig+0x2a8>
 800a346:	e014      	b.n	800a372 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a348:	f7fd fafc 	bl	8007944 <HAL_GetTick>
 800a34c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a34e:	e008      	b.n	800a362 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a350:	f7fd faf8 	bl	8007944 <HAL_GetTick>
 800a354:	4602      	mov	r2, r0
 800a356:	693b      	ldr	r3, [r7, #16]
 800a358:	1ad3      	subs	r3, r2, r3
 800a35a:	2b64      	cmp	r3, #100	; 0x64
 800a35c:	d901      	bls.n	800a362 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800a35e:	2303      	movs	r3, #3
 800a360:	e262      	b.n	800a828 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a362:	4b88      	ldr	r3, [pc, #544]	; (800a584 <HAL_RCC_OscConfig+0x504>)
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d1f0      	bne.n	800a350 <HAL_RCC_OscConfig+0x2d0>
 800a36e:	e000      	b.n	800a372 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a370:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	f003 0302 	and.w	r3, r3, #2
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d060      	beq.n	800a440 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800a37e:	69bb      	ldr	r3, [r7, #24]
 800a380:	2b04      	cmp	r3, #4
 800a382:	d005      	beq.n	800a390 <HAL_RCC_OscConfig+0x310>
 800a384:	69bb      	ldr	r3, [r7, #24]
 800a386:	2b0c      	cmp	r3, #12
 800a388:	d119      	bne.n	800a3be <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800a38a:	697b      	ldr	r3, [r7, #20]
 800a38c:	2b02      	cmp	r3, #2
 800a38e:	d116      	bne.n	800a3be <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a390:	4b7c      	ldr	r3, [pc, #496]	; (800a584 <HAL_RCC_OscConfig+0x504>)
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d005      	beq.n	800a3a8 <HAL_RCC_OscConfig+0x328>
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	68db      	ldr	r3, [r3, #12]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d101      	bne.n	800a3a8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800a3a4:	2301      	movs	r3, #1
 800a3a6:	e23f      	b.n	800a828 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a3a8:	4b76      	ldr	r3, [pc, #472]	; (800a584 <HAL_RCC_OscConfig+0x504>)
 800a3aa:	685b      	ldr	r3, [r3, #4]
 800a3ac:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	691b      	ldr	r3, [r3, #16]
 800a3b4:	061b      	lsls	r3, r3, #24
 800a3b6:	4973      	ldr	r1, [pc, #460]	; (800a584 <HAL_RCC_OscConfig+0x504>)
 800a3b8:	4313      	orrs	r3, r2
 800a3ba:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a3bc:	e040      	b.n	800a440 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	68db      	ldr	r3, [r3, #12]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d023      	beq.n	800a40e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a3c6:	4b6f      	ldr	r3, [pc, #444]	; (800a584 <HAL_RCC_OscConfig+0x504>)
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	4a6e      	ldr	r2, [pc, #440]	; (800a584 <HAL_RCC_OscConfig+0x504>)
 800a3cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a3d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a3d2:	f7fd fab7 	bl	8007944 <HAL_GetTick>
 800a3d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a3d8:	e008      	b.n	800a3ec <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a3da:	f7fd fab3 	bl	8007944 <HAL_GetTick>
 800a3de:	4602      	mov	r2, r0
 800a3e0:	693b      	ldr	r3, [r7, #16]
 800a3e2:	1ad3      	subs	r3, r2, r3
 800a3e4:	2b02      	cmp	r3, #2
 800a3e6:	d901      	bls.n	800a3ec <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800a3e8:	2303      	movs	r3, #3
 800a3ea:	e21d      	b.n	800a828 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a3ec:	4b65      	ldr	r3, [pc, #404]	; (800a584 <HAL_RCC_OscConfig+0x504>)
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d0f0      	beq.n	800a3da <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a3f8:	4b62      	ldr	r3, [pc, #392]	; (800a584 <HAL_RCC_OscConfig+0x504>)
 800a3fa:	685b      	ldr	r3, [r3, #4]
 800a3fc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	691b      	ldr	r3, [r3, #16]
 800a404:	061b      	lsls	r3, r3, #24
 800a406:	495f      	ldr	r1, [pc, #380]	; (800a584 <HAL_RCC_OscConfig+0x504>)
 800a408:	4313      	orrs	r3, r2
 800a40a:	604b      	str	r3, [r1, #4]
 800a40c:	e018      	b.n	800a440 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a40e:	4b5d      	ldr	r3, [pc, #372]	; (800a584 <HAL_RCC_OscConfig+0x504>)
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	4a5c      	ldr	r2, [pc, #368]	; (800a584 <HAL_RCC_OscConfig+0x504>)
 800a414:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a418:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a41a:	f7fd fa93 	bl	8007944 <HAL_GetTick>
 800a41e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a420:	e008      	b.n	800a434 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a422:	f7fd fa8f 	bl	8007944 <HAL_GetTick>
 800a426:	4602      	mov	r2, r0
 800a428:	693b      	ldr	r3, [r7, #16]
 800a42a:	1ad3      	subs	r3, r2, r3
 800a42c:	2b02      	cmp	r3, #2
 800a42e:	d901      	bls.n	800a434 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800a430:	2303      	movs	r3, #3
 800a432:	e1f9      	b.n	800a828 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a434:	4b53      	ldr	r3, [pc, #332]	; (800a584 <HAL_RCC_OscConfig+0x504>)
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d1f0      	bne.n	800a422 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	f003 0308 	and.w	r3, r3, #8
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d03c      	beq.n	800a4c6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	695b      	ldr	r3, [r3, #20]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d01c      	beq.n	800a48e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a454:	4b4b      	ldr	r3, [pc, #300]	; (800a584 <HAL_RCC_OscConfig+0x504>)
 800a456:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a45a:	4a4a      	ldr	r2, [pc, #296]	; (800a584 <HAL_RCC_OscConfig+0x504>)
 800a45c:	f043 0301 	orr.w	r3, r3, #1
 800a460:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a464:	f7fd fa6e 	bl	8007944 <HAL_GetTick>
 800a468:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a46a:	e008      	b.n	800a47e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a46c:	f7fd fa6a 	bl	8007944 <HAL_GetTick>
 800a470:	4602      	mov	r2, r0
 800a472:	693b      	ldr	r3, [r7, #16]
 800a474:	1ad3      	subs	r3, r2, r3
 800a476:	2b02      	cmp	r3, #2
 800a478:	d901      	bls.n	800a47e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800a47a:	2303      	movs	r3, #3
 800a47c:	e1d4      	b.n	800a828 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a47e:	4b41      	ldr	r3, [pc, #260]	; (800a584 <HAL_RCC_OscConfig+0x504>)
 800a480:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a484:	f003 0302 	and.w	r3, r3, #2
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d0ef      	beq.n	800a46c <HAL_RCC_OscConfig+0x3ec>
 800a48c:	e01b      	b.n	800a4c6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a48e:	4b3d      	ldr	r3, [pc, #244]	; (800a584 <HAL_RCC_OscConfig+0x504>)
 800a490:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a494:	4a3b      	ldr	r2, [pc, #236]	; (800a584 <HAL_RCC_OscConfig+0x504>)
 800a496:	f023 0301 	bic.w	r3, r3, #1
 800a49a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a49e:	f7fd fa51 	bl	8007944 <HAL_GetTick>
 800a4a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a4a4:	e008      	b.n	800a4b8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a4a6:	f7fd fa4d 	bl	8007944 <HAL_GetTick>
 800a4aa:	4602      	mov	r2, r0
 800a4ac:	693b      	ldr	r3, [r7, #16]
 800a4ae:	1ad3      	subs	r3, r2, r3
 800a4b0:	2b02      	cmp	r3, #2
 800a4b2:	d901      	bls.n	800a4b8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800a4b4:	2303      	movs	r3, #3
 800a4b6:	e1b7      	b.n	800a828 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a4b8:	4b32      	ldr	r3, [pc, #200]	; (800a584 <HAL_RCC_OscConfig+0x504>)
 800a4ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a4be:	f003 0302 	and.w	r3, r3, #2
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d1ef      	bne.n	800a4a6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	f003 0304 	and.w	r3, r3, #4
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	f000 80a6 	beq.w	800a620 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800a4d8:	4b2a      	ldr	r3, [pc, #168]	; (800a584 <HAL_RCC_OscConfig+0x504>)
 800a4da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a4dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d10d      	bne.n	800a500 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a4e4:	4b27      	ldr	r3, [pc, #156]	; (800a584 <HAL_RCC_OscConfig+0x504>)
 800a4e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a4e8:	4a26      	ldr	r2, [pc, #152]	; (800a584 <HAL_RCC_OscConfig+0x504>)
 800a4ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a4ee:	6593      	str	r3, [r2, #88]	; 0x58
 800a4f0:	4b24      	ldr	r3, [pc, #144]	; (800a584 <HAL_RCC_OscConfig+0x504>)
 800a4f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a4f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a4f8:	60bb      	str	r3, [r7, #8]
 800a4fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a4fc:	2301      	movs	r3, #1
 800a4fe:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a500:	4b21      	ldr	r3, [pc, #132]	; (800a588 <HAL_RCC_OscConfig+0x508>)
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d118      	bne.n	800a53e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a50c:	4b1e      	ldr	r3, [pc, #120]	; (800a588 <HAL_RCC_OscConfig+0x508>)
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	4a1d      	ldr	r2, [pc, #116]	; (800a588 <HAL_RCC_OscConfig+0x508>)
 800a512:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a516:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a518:	f7fd fa14 	bl	8007944 <HAL_GetTick>
 800a51c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a51e:	e008      	b.n	800a532 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a520:	f7fd fa10 	bl	8007944 <HAL_GetTick>
 800a524:	4602      	mov	r2, r0
 800a526:	693b      	ldr	r3, [r7, #16]
 800a528:	1ad3      	subs	r3, r2, r3
 800a52a:	2b02      	cmp	r3, #2
 800a52c:	d901      	bls.n	800a532 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800a52e:	2303      	movs	r3, #3
 800a530:	e17a      	b.n	800a828 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a532:	4b15      	ldr	r3, [pc, #84]	; (800a588 <HAL_RCC_OscConfig+0x508>)
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d0f0      	beq.n	800a520 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	689b      	ldr	r3, [r3, #8]
 800a542:	2b01      	cmp	r3, #1
 800a544:	d108      	bne.n	800a558 <HAL_RCC_OscConfig+0x4d8>
 800a546:	4b0f      	ldr	r3, [pc, #60]	; (800a584 <HAL_RCC_OscConfig+0x504>)
 800a548:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a54c:	4a0d      	ldr	r2, [pc, #52]	; (800a584 <HAL_RCC_OscConfig+0x504>)
 800a54e:	f043 0301 	orr.w	r3, r3, #1
 800a552:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a556:	e029      	b.n	800a5ac <HAL_RCC_OscConfig+0x52c>
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	689b      	ldr	r3, [r3, #8]
 800a55c:	2b05      	cmp	r3, #5
 800a55e:	d115      	bne.n	800a58c <HAL_RCC_OscConfig+0x50c>
 800a560:	4b08      	ldr	r3, [pc, #32]	; (800a584 <HAL_RCC_OscConfig+0x504>)
 800a562:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a566:	4a07      	ldr	r2, [pc, #28]	; (800a584 <HAL_RCC_OscConfig+0x504>)
 800a568:	f043 0304 	orr.w	r3, r3, #4
 800a56c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a570:	4b04      	ldr	r3, [pc, #16]	; (800a584 <HAL_RCC_OscConfig+0x504>)
 800a572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a576:	4a03      	ldr	r2, [pc, #12]	; (800a584 <HAL_RCC_OscConfig+0x504>)
 800a578:	f043 0301 	orr.w	r3, r3, #1
 800a57c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a580:	e014      	b.n	800a5ac <HAL_RCC_OscConfig+0x52c>
 800a582:	bf00      	nop
 800a584:	40021000 	.word	0x40021000
 800a588:	40007000 	.word	0x40007000
 800a58c:	4b9c      	ldr	r3, [pc, #624]	; (800a800 <HAL_RCC_OscConfig+0x780>)
 800a58e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a592:	4a9b      	ldr	r2, [pc, #620]	; (800a800 <HAL_RCC_OscConfig+0x780>)
 800a594:	f023 0301 	bic.w	r3, r3, #1
 800a598:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a59c:	4b98      	ldr	r3, [pc, #608]	; (800a800 <HAL_RCC_OscConfig+0x780>)
 800a59e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a5a2:	4a97      	ldr	r2, [pc, #604]	; (800a800 <HAL_RCC_OscConfig+0x780>)
 800a5a4:	f023 0304 	bic.w	r3, r3, #4
 800a5a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	689b      	ldr	r3, [r3, #8]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d016      	beq.n	800a5e2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a5b4:	f7fd f9c6 	bl	8007944 <HAL_GetTick>
 800a5b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a5ba:	e00a      	b.n	800a5d2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a5bc:	f7fd f9c2 	bl	8007944 <HAL_GetTick>
 800a5c0:	4602      	mov	r2, r0
 800a5c2:	693b      	ldr	r3, [r7, #16]
 800a5c4:	1ad3      	subs	r3, r2, r3
 800a5c6:	f241 3288 	movw	r2, #5000	; 0x1388
 800a5ca:	4293      	cmp	r3, r2
 800a5cc:	d901      	bls.n	800a5d2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800a5ce:	2303      	movs	r3, #3
 800a5d0:	e12a      	b.n	800a828 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a5d2:	4b8b      	ldr	r3, [pc, #556]	; (800a800 <HAL_RCC_OscConfig+0x780>)
 800a5d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a5d8:	f003 0302 	and.w	r3, r3, #2
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d0ed      	beq.n	800a5bc <HAL_RCC_OscConfig+0x53c>
 800a5e0:	e015      	b.n	800a60e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a5e2:	f7fd f9af 	bl	8007944 <HAL_GetTick>
 800a5e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a5e8:	e00a      	b.n	800a600 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a5ea:	f7fd f9ab 	bl	8007944 <HAL_GetTick>
 800a5ee:	4602      	mov	r2, r0
 800a5f0:	693b      	ldr	r3, [r7, #16]
 800a5f2:	1ad3      	subs	r3, r2, r3
 800a5f4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a5f8:	4293      	cmp	r3, r2
 800a5fa:	d901      	bls.n	800a600 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800a5fc:	2303      	movs	r3, #3
 800a5fe:	e113      	b.n	800a828 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a600:	4b7f      	ldr	r3, [pc, #508]	; (800a800 <HAL_RCC_OscConfig+0x780>)
 800a602:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a606:	f003 0302 	and.w	r3, r3, #2
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d1ed      	bne.n	800a5ea <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a60e:	7ffb      	ldrb	r3, [r7, #31]
 800a610:	2b01      	cmp	r3, #1
 800a612:	d105      	bne.n	800a620 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a614:	4b7a      	ldr	r3, [pc, #488]	; (800a800 <HAL_RCC_OscConfig+0x780>)
 800a616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a618:	4a79      	ldr	r2, [pc, #484]	; (800a800 <HAL_RCC_OscConfig+0x780>)
 800a61a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a61e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a624:	2b00      	cmp	r3, #0
 800a626:	f000 80fe 	beq.w	800a826 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a62e:	2b02      	cmp	r3, #2
 800a630:	f040 80d0 	bne.w	800a7d4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800a634:	4b72      	ldr	r3, [pc, #456]	; (800a800 <HAL_RCC_OscConfig+0x780>)
 800a636:	68db      	ldr	r3, [r3, #12]
 800a638:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800a63a:	697b      	ldr	r3, [r7, #20]
 800a63c:	f003 0203 	and.w	r2, r3, #3
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a644:	429a      	cmp	r2, r3
 800a646:	d130      	bne.n	800a6aa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a648:	697b      	ldr	r3, [r7, #20]
 800a64a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a652:	3b01      	subs	r3, #1
 800a654:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800a656:	429a      	cmp	r2, r3
 800a658:	d127      	bne.n	800a6aa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a65a:	697b      	ldr	r3, [r7, #20]
 800a65c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a664:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a666:	429a      	cmp	r2, r3
 800a668:	d11f      	bne.n	800a6aa <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800a66a:	697b      	ldr	r3, [r7, #20]
 800a66c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a670:	687a      	ldr	r2, [r7, #4]
 800a672:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a674:	2a07      	cmp	r2, #7
 800a676:	bf14      	ite	ne
 800a678:	2201      	movne	r2, #1
 800a67a:	2200      	moveq	r2, #0
 800a67c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a67e:	4293      	cmp	r3, r2
 800a680:	d113      	bne.n	800a6aa <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a682:	697b      	ldr	r3, [r7, #20]
 800a684:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a68c:	085b      	lsrs	r3, r3, #1
 800a68e:	3b01      	subs	r3, #1
 800a690:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800a692:	429a      	cmp	r2, r3
 800a694:	d109      	bne.n	800a6aa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800a696:	697b      	ldr	r3, [r7, #20]
 800a698:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6a0:	085b      	lsrs	r3, r3, #1
 800a6a2:	3b01      	subs	r3, #1
 800a6a4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a6a6:	429a      	cmp	r2, r3
 800a6a8:	d06e      	beq.n	800a788 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800a6aa:	69bb      	ldr	r3, [r7, #24]
 800a6ac:	2b0c      	cmp	r3, #12
 800a6ae:	d069      	beq.n	800a784 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800a6b0:	4b53      	ldr	r3, [pc, #332]	; (800a800 <HAL_RCC_OscConfig+0x780>)
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d105      	bne.n	800a6c8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800a6bc:	4b50      	ldr	r3, [pc, #320]	; (800a800 <HAL_RCC_OscConfig+0x780>)
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d001      	beq.n	800a6cc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800a6c8:	2301      	movs	r3, #1
 800a6ca:	e0ad      	b.n	800a828 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800a6cc:	4b4c      	ldr	r3, [pc, #304]	; (800a800 <HAL_RCC_OscConfig+0x780>)
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	4a4b      	ldr	r2, [pc, #300]	; (800a800 <HAL_RCC_OscConfig+0x780>)
 800a6d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a6d6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800a6d8:	f7fd f934 	bl	8007944 <HAL_GetTick>
 800a6dc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a6de:	e008      	b.n	800a6f2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a6e0:	f7fd f930 	bl	8007944 <HAL_GetTick>
 800a6e4:	4602      	mov	r2, r0
 800a6e6:	693b      	ldr	r3, [r7, #16]
 800a6e8:	1ad3      	subs	r3, r2, r3
 800a6ea:	2b02      	cmp	r3, #2
 800a6ec:	d901      	bls.n	800a6f2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800a6ee:	2303      	movs	r3, #3
 800a6f0:	e09a      	b.n	800a828 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a6f2:	4b43      	ldr	r3, [pc, #268]	; (800a800 <HAL_RCC_OscConfig+0x780>)
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d1f0      	bne.n	800a6e0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a6fe:	4b40      	ldr	r3, [pc, #256]	; (800a800 <HAL_RCC_OscConfig+0x780>)
 800a700:	68da      	ldr	r2, [r3, #12]
 800a702:	4b40      	ldr	r3, [pc, #256]	; (800a804 <HAL_RCC_OscConfig+0x784>)
 800a704:	4013      	ands	r3, r2
 800a706:	687a      	ldr	r2, [r7, #4]
 800a708:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800a70a:	687a      	ldr	r2, [r7, #4]
 800a70c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800a70e:	3a01      	subs	r2, #1
 800a710:	0112      	lsls	r2, r2, #4
 800a712:	4311      	orrs	r1, r2
 800a714:	687a      	ldr	r2, [r7, #4]
 800a716:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800a718:	0212      	lsls	r2, r2, #8
 800a71a:	4311      	orrs	r1, r2
 800a71c:	687a      	ldr	r2, [r7, #4]
 800a71e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800a720:	0852      	lsrs	r2, r2, #1
 800a722:	3a01      	subs	r2, #1
 800a724:	0552      	lsls	r2, r2, #21
 800a726:	4311      	orrs	r1, r2
 800a728:	687a      	ldr	r2, [r7, #4]
 800a72a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800a72c:	0852      	lsrs	r2, r2, #1
 800a72e:	3a01      	subs	r2, #1
 800a730:	0652      	lsls	r2, r2, #25
 800a732:	4311      	orrs	r1, r2
 800a734:	687a      	ldr	r2, [r7, #4]
 800a736:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a738:	0912      	lsrs	r2, r2, #4
 800a73a:	0452      	lsls	r2, r2, #17
 800a73c:	430a      	orrs	r2, r1
 800a73e:	4930      	ldr	r1, [pc, #192]	; (800a800 <HAL_RCC_OscConfig+0x780>)
 800a740:	4313      	orrs	r3, r2
 800a742:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800a744:	4b2e      	ldr	r3, [pc, #184]	; (800a800 <HAL_RCC_OscConfig+0x780>)
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	4a2d      	ldr	r2, [pc, #180]	; (800a800 <HAL_RCC_OscConfig+0x780>)
 800a74a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a74e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800a750:	4b2b      	ldr	r3, [pc, #172]	; (800a800 <HAL_RCC_OscConfig+0x780>)
 800a752:	68db      	ldr	r3, [r3, #12]
 800a754:	4a2a      	ldr	r2, [pc, #168]	; (800a800 <HAL_RCC_OscConfig+0x780>)
 800a756:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a75a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800a75c:	f7fd f8f2 	bl	8007944 <HAL_GetTick>
 800a760:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a762:	e008      	b.n	800a776 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a764:	f7fd f8ee 	bl	8007944 <HAL_GetTick>
 800a768:	4602      	mov	r2, r0
 800a76a:	693b      	ldr	r3, [r7, #16]
 800a76c:	1ad3      	subs	r3, r2, r3
 800a76e:	2b02      	cmp	r3, #2
 800a770:	d901      	bls.n	800a776 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800a772:	2303      	movs	r3, #3
 800a774:	e058      	b.n	800a828 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a776:	4b22      	ldr	r3, [pc, #136]	; (800a800 <HAL_RCC_OscConfig+0x780>)
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d0f0      	beq.n	800a764 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800a782:	e050      	b.n	800a826 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800a784:	2301      	movs	r3, #1
 800a786:	e04f      	b.n	800a828 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a788:	4b1d      	ldr	r3, [pc, #116]	; (800a800 <HAL_RCC_OscConfig+0x780>)
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a790:	2b00      	cmp	r3, #0
 800a792:	d148      	bne.n	800a826 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800a794:	4b1a      	ldr	r3, [pc, #104]	; (800a800 <HAL_RCC_OscConfig+0x780>)
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	4a19      	ldr	r2, [pc, #100]	; (800a800 <HAL_RCC_OscConfig+0x780>)
 800a79a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a79e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800a7a0:	4b17      	ldr	r3, [pc, #92]	; (800a800 <HAL_RCC_OscConfig+0x780>)
 800a7a2:	68db      	ldr	r3, [r3, #12]
 800a7a4:	4a16      	ldr	r2, [pc, #88]	; (800a800 <HAL_RCC_OscConfig+0x780>)
 800a7a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a7aa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a7ac:	f7fd f8ca 	bl	8007944 <HAL_GetTick>
 800a7b0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a7b2:	e008      	b.n	800a7c6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a7b4:	f7fd f8c6 	bl	8007944 <HAL_GetTick>
 800a7b8:	4602      	mov	r2, r0
 800a7ba:	693b      	ldr	r3, [r7, #16]
 800a7bc:	1ad3      	subs	r3, r2, r3
 800a7be:	2b02      	cmp	r3, #2
 800a7c0:	d901      	bls.n	800a7c6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800a7c2:	2303      	movs	r3, #3
 800a7c4:	e030      	b.n	800a828 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a7c6:	4b0e      	ldr	r3, [pc, #56]	; (800a800 <HAL_RCC_OscConfig+0x780>)
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d0f0      	beq.n	800a7b4 <HAL_RCC_OscConfig+0x734>
 800a7d2:	e028      	b.n	800a826 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800a7d4:	69bb      	ldr	r3, [r7, #24]
 800a7d6:	2b0c      	cmp	r3, #12
 800a7d8:	d023      	beq.n	800a822 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a7da:	4b09      	ldr	r3, [pc, #36]	; (800a800 <HAL_RCC_OscConfig+0x780>)
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	4a08      	ldr	r2, [pc, #32]	; (800a800 <HAL_RCC_OscConfig+0x780>)
 800a7e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a7e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a7e6:	f7fd f8ad 	bl	8007944 <HAL_GetTick>
 800a7ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a7ec:	e00c      	b.n	800a808 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a7ee:	f7fd f8a9 	bl	8007944 <HAL_GetTick>
 800a7f2:	4602      	mov	r2, r0
 800a7f4:	693b      	ldr	r3, [r7, #16]
 800a7f6:	1ad3      	subs	r3, r2, r3
 800a7f8:	2b02      	cmp	r3, #2
 800a7fa:	d905      	bls.n	800a808 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800a7fc:	2303      	movs	r3, #3
 800a7fe:	e013      	b.n	800a828 <HAL_RCC_OscConfig+0x7a8>
 800a800:	40021000 	.word	0x40021000
 800a804:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a808:	4b09      	ldr	r3, [pc, #36]	; (800a830 <HAL_RCC_OscConfig+0x7b0>)
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a810:	2b00      	cmp	r3, #0
 800a812:	d1ec      	bne.n	800a7ee <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800a814:	4b06      	ldr	r3, [pc, #24]	; (800a830 <HAL_RCC_OscConfig+0x7b0>)
 800a816:	68da      	ldr	r2, [r3, #12]
 800a818:	4905      	ldr	r1, [pc, #20]	; (800a830 <HAL_RCC_OscConfig+0x7b0>)
 800a81a:	4b06      	ldr	r3, [pc, #24]	; (800a834 <HAL_RCC_OscConfig+0x7b4>)
 800a81c:	4013      	ands	r3, r2
 800a81e:	60cb      	str	r3, [r1, #12]
 800a820:	e001      	b.n	800a826 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800a822:	2301      	movs	r3, #1
 800a824:	e000      	b.n	800a828 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800a826:	2300      	movs	r3, #0
}
 800a828:	4618      	mov	r0, r3
 800a82a:	3720      	adds	r7, #32
 800a82c:	46bd      	mov	sp, r7
 800a82e:	bd80      	pop	{r7, pc}
 800a830:	40021000 	.word	0x40021000
 800a834:	feeefffc 	.word	0xfeeefffc

0800a838 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b084      	sub	sp, #16
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
 800a840:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d101      	bne.n	800a84c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a848:	2301      	movs	r3, #1
 800a84a:	e0e7      	b.n	800aa1c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a84c:	4b75      	ldr	r3, [pc, #468]	; (800aa24 <HAL_RCC_ClockConfig+0x1ec>)
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	f003 0307 	and.w	r3, r3, #7
 800a854:	683a      	ldr	r2, [r7, #0]
 800a856:	429a      	cmp	r2, r3
 800a858:	d910      	bls.n	800a87c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a85a:	4b72      	ldr	r3, [pc, #456]	; (800aa24 <HAL_RCC_ClockConfig+0x1ec>)
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	f023 0207 	bic.w	r2, r3, #7
 800a862:	4970      	ldr	r1, [pc, #448]	; (800aa24 <HAL_RCC_ClockConfig+0x1ec>)
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	4313      	orrs	r3, r2
 800a868:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a86a:	4b6e      	ldr	r3, [pc, #440]	; (800aa24 <HAL_RCC_ClockConfig+0x1ec>)
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	f003 0307 	and.w	r3, r3, #7
 800a872:	683a      	ldr	r2, [r7, #0]
 800a874:	429a      	cmp	r2, r3
 800a876:	d001      	beq.n	800a87c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a878:	2301      	movs	r3, #1
 800a87a:	e0cf      	b.n	800aa1c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	f003 0302 	and.w	r3, r3, #2
 800a884:	2b00      	cmp	r3, #0
 800a886:	d010      	beq.n	800a8aa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	689a      	ldr	r2, [r3, #8]
 800a88c:	4b66      	ldr	r3, [pc, #408]	; (800aa28 <HAL_RCC_ClockConfig+0x1f0>)
 800a88e:	689b      	ldr	r3, [r3, #8]
 800a890:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a894:	429a      	cmp	r2, r3
 800a896:	d908      	bls.n	800a8aa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a898:	4b63      	ldr	r3, [pc, #396]	; (800aa28 <HAL_RCC_ClockConfig+0x1f0>)
 800a89a:	689b      	ldr	r3, [r3, #8]
 800a89c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	689b      	ldr	r3, [r3, #8]
 800a8a4:	4960      	ldr	r1, [pc, #384]	; (800aa28 <HAL_RCC_ClockConfig+0x1f0>)
 800a8a6:	4313      	orrs	r3, r2
 800a8a8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	f003 0301 	and.w	r3, r3, #1
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d04c      	beq.n	800a950 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	685b      	ldr	r3, [r3, #4]
 800a8ba:	2b03      	cmp	r3, #3
 800a8bc:	d107      	bne.n	800a8ce <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a8be:	4b5a      	ldr	r3, [pc, #360]	; (800aa28 <HAL_RCC_ClockConfig+0x1f0>)
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d121      	bne.n	800a90e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800a8ca:	2301      	movs	r3, #1
 800a8cc:	e0a6      	b.n	800aa1c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	685b      	ldr	r3, [r3, #4]
 800a8d2:	2b02      	cmp	r3, #2
 800a8d4:	d107      	bne.n	800a8e6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a8d6:	4b54      	ldr	r3, [pc, #336]	; (800aa28 <HAL_RCC_ClockConfig+0x1f0>)
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d115      	bne.n	800a90e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800a8e2:	2301      	movs	r3, #1
 800a8e4:	e09a      	b.n	800aa1c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	685b      	ldr	r3, [r3, #4]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d107      	bne.n	800a8fe <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800a8ee:	4b4e      	ldr	r3, [pc, #312]	; (800aa28 <HAL_RCC_ClockConfig+0x1f0>)
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	f003 0302 	and.w	r3, r3, #2
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d109      	bne.n	800a90e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800a8fa:	2301      	movs	r3, #1
 800a8fc:	e08e      	b.n	800aa1c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a8fe:	4b4a      	ldr	r3, [pc, #296]	; (800aa28 <HAL_RCC_ClockConfig+0x1f0>)
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a906:	2b00      	cmp	r3, #0
 800a908:	d101      	bne.n	800a90e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800a90a:	2301      	movs	r3, #1
 800a90c:	e086      	b.n	800aa1c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a90e:	4b46      	ldr	r3, [pc, #280]	; (800aa28 <HAL_RCC_ClockConfig+0x1f0>)
 800a910:	689b      	ldr	r3, [r3, #8]
 800a912:	f023 0203 	bic.w	r2, r3, #3
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	685b      	ldr	r3, [r3, #4]
 800a91a:	4943      	ldr	r1, [pc, #268]	; (800aa28 <HAL_RCC_ClockConfig+0x1f0>)
 800a91c:	4313      	orrs	r3, r2
 800a91e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a920:	f7fd f810 	bl	8007944 <HAL_GetTick>
 800a924:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a926:	e00a      	b.n	800a93e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a928:	f7fd f80c 	bl	8007944 <HAL_GetTick>
 800a92c:	4602      	mov	r2, r0
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	1ad3      	subs	r3, r2, r3
 800a932:	f241 3288 	movw	r2, #5000	; 0x1388
 800a936:	4293      	cmp	r3, r2
 800a938:	d901      	bls.n	800a93e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800a93a:	2303      	movs	r3, #3
 800a93c:	e06e      	b.n	800aa1c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a93e:	4b3a      	ldr	r3, [pc, #232]	; (800aa28 <HAL_RCC_ClockConfig+0x1f0>)
 800a940:	689b      	ldr	r3, [r3, #8]
 800a942:	f003 020c 	and.w	r2, r3, #12
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	685b      	ldr	r3, [r3, #4]
 800a94a:	009b      	lsls	r3, r3, #2
 800a94c:	429a      	cmp	r2, r3
 800a94e:	d1eb      	bne.n	800a928 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	f003 0302 	and.w	r3, r3, #2
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d010      	beq.n	800a97e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	689a      	ldr	r2, [r3, #8]
 800a960:	4b31      	ldr	r3, [pc, #196]	; (800aa28 <HAL_RCC_ClockConfig+0x1f0>)
 800a962:	689b      	ldr	r3, [r3, #8]
 800a964:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a968:	429a      	cmp	r2, r3
 800a96a:	d208      	bcs.n	800a97e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a96c:	4b2e      	ldr	r3, [pc, #184]	; (800aa28 <HAL_RCC_ClockConfig+0x1f0>)
 800a96e:	689b      	ldr	r3, [r3, #8]
 800a970:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	689b      	ldr	r3, [r3, #8]
 800a978:	492b      	ldr	r1, [pc, #172]	; (800aa28 <HAL_RCC_ClockConfig+0x1f0>)
 800a97a:	4313      	orrs	r3, r2
 800a97c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a97e:	4b29      	ldr	r3, [pc, #164]	; (800aa24 <HAL_RCC_ClockConfig+0x1ec>)
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	f003 0307 	and.w	r3, r3, #7
 800a986:	683a      	ldr	r2, [r7, #0]
 800a988:	429a      	cmp	r2, r3
 800a98a:	d210      	bcs.n	800a9ae <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a98c:	4b25      	ldr	r3, [pc, #148]	; (800aa24 <HAL_RCC_ClockConfig+0x1ec>)
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	f023 0207 	bic.w	r2, r3, #7
 800a994:	4923      	ldr	r1, [pc, #140]	; (800aa24 <HAL_RCC_ClockConfig+0x1ec>)
 800a996:	683b      	ldr	r3, [r7, #0]
 800a998:	4313      	orrs	r3, r2
 800a99a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a99c:	4b21      	ldr	r3, [pc, #132]	; (800aa24 <HAL_RCC_ClockConfig+0x1ec>)
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	f003 0307 	and.w	r3, r3, #7
 800a9a4:	683a      	ldr	r2, [r7, #0]
 800a9a6:	429a      	cmp	r2, r3
 800a9a8:	d001      	beq.n	800a9ae <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800a9aa:	2301      	movs	r3, #1
 800a9ac:	e036      	b.n	800aa1c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	f003 0304 	and.w	r3, r3, #4
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d008      	beq.n	800a9cc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a9ba:	4b1b      	ldr	r3, [pc, #108]	; (800aa28 <HAL_RCC_ClockConfig+0x1f0>)
 800a9bc:	689b      	ldr	r3, [r3, #8]
 800a9be:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	68db      	ldr	r3, [r3, #12]
 800a9c6:	4918      	ldr	r1, [pc, #96]	; (800aa28 <HAL_RCC_ClockConfig+0x1f0>)
 800a9c8:	4313      	orrs	r3, r2
 800a9ca:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	f003 0308 	and.w	r3, r3, #8
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d009      	beq.n	800a9ec <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a9d8:	4b13      	ldr	r3, [pc, #76]	; (800aa28 <HAL_RCC_ClockConfig+0x1f0>)
 800a9da:	689b      	ldr	r3, [r3, #8]
 800a9dc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	691b      	ldr	r3, [r3, #16]
 800a9e4:	00db      	lsls	r3, r3, #3
 800a9e6:	4910      	ldr	r1, [pc, #64]	; (800aa28 <HAL_RCC_ClockConfig+0x1f0>)
 800a9e8:	4313      	orrs	r3, r2
 800a9ea:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800a9ec:	f000 f824 	bl	800aa38 <HAL_RCC_GetSysClockFreq>
 800a9f0:	4602      	mov	r2, r0
 800a9f2:	4b0d      	ldr	r3, [pc, #52]	; (800aa28 <HAL_RCC_ClockConfig+0x1f0>)
 800a9f4:	689b      	ldr	r3, [r3, #8]
 800a9f6:	091b      	lsrs	r3, r3, #4
 800a9f8:	f003 030f 	and.w	r3, r3, #15
 800a9fc:	490b      	ldr	r1, [pc, #44]	; (800aa2c <HAL_RCC_ClockConfig+0x1f4>)
 800a9fe:	5ccb      	ldrb	r3, [r1, r3]
 800aa00:	f003 031f 	and.w	r3, r3, #31
 800aa04:	fa22 f303 	lsr.w	r3, r2, r3
 800aa08:	4a09      	ldr	r2, [pc, #36]	; (800aa30 <HAL_RCC_ClockConfig+0x1f8>)
 800aa0a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800aa0c:	4b09      	ldr	r3, [pc, #36]	; (800aa34 <HAL_RCC_ClockConfig+0x1fc>)
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	4618      	mov	r0, r3
 800aa12:	f7fc ff47 	bl	80078a4 <HAL_InitTick>
 800aa16:	4603      	mov	r3, r0
 800aa18:	72fb      	strb	r3, [r7, #11]

  return status;
 800aa1a:	7afb      	ldrb	r3, [r7, #11]
}
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	3710      	adds	r7, #16
 800aa20:	46bd      	mov	sp, r7
 800aa22:	bd80      	pop	{r7, pc}
 800aa24:	40022000 	.word	0x40022000
 800aa28:	40021000 	.word	0x40021000
 800aa2c:	08015770 	.word	0x08015770
 800aa30:	20000228 	.word	0x20000228
 800aa34:	20000258 	.word	0x20000258

0800aa38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800aa38:	b480      	push	{r7}
 800aa3a:	b089      	sub	sp, #36	; 0x24
 800aa3c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800aa3e:	2300      	movs	r3, #0
 800aa40:	61fb      	str	r3, [r7, #28]
 800aa42:	2300      	movs	r3, #0
 800aa44:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800aa46:	4b3e      	ldr	r3, [pc, #248]	; (800ab40 <HAL_RCC_GetSysClockFreq+0x108>)
 800aa48:	689b      	ldr	r3, [r3, #8]
 800aa4a:	f003 030c 	and.w	r3, r3, #12
 800aa4e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800aa50:	4b3b      	ldr	r3, [pc, #236]	; (800ab40 <HAL_RCC_GetSysClockFreq+0x108>)
 800aa52:	68db      	ldr	r3, [r3, #12]
 800aa54:	f003 0303 	and.w	r3, r3, #3
 800aa58:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800aa5a:	693b      	ldr	r3, [r7, #16]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d005      	beq.n	800aa6c <HAL_RCC_GetSysClockFreq+0x34>
 800aa60:	693b      	ldr	r3, [r7, #16]
 800aa62:	2b0c      	cmp	r3, #12
 800aa64:	d121      	bne.n	800aaaa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	2b01      	cmp	r3, #1
 800aa6a:	d11e      	bne.n	800aaaa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800aa6c:	4b34      	ldr	r3, [pc, #208]	; (800ab40 <HAL_RCC_GetSysClockFreq+0x108>)
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	f003 0308 	and.w	r3, r3, #8
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d107      	bne.n	800aa88 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800aa78:	4b31      	ldr	r3, [pc, #196]	; (800ab40 <HAL_RCC_GetSysClockFreq+0x108>)
 800aa7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aa7e:	0a1b      	lsrs	r3, r3, #8
 800aa80:	f003 030f 	and.w	r3, r3, #15
 800aa84:	61fb      	str	r3, [r7, #28]
 800aa86:	e005      	b.n	800aa94 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800aa88:	4b2d      	ldr	r3, [pc, #180]	; (800ab40 <HAL_RCC_GetSysClockFreq+0x108>)
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	091b      	lsrs	r3, r3, #4
 800aa8e:	f003 030f 	and.w	r3, r3, #15
 800aa92:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800aa94:	4a2b      	ldr	r2, [pc, #172]	; (800ab44 <HAL_RCC_GetSysClockFreq+0x10c>)
 800aa96:	69fb      	ldr	r3, [r7, #28]
 800aa98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aa9c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800aa9e:	693b      	ldr	r3, [r7, #16]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d10d      	bne.n	800aac0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800aaa4:	69fb      	ldr	r3, [r7, #28]
 800aaa6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800aaa8:	e00a      	b.n	800aac0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800aaaa:	693b      	ldr	r3, [r7, #16]
 800aaac:	2b04      	cmp	r3, #4
 800aaae:	d102      	bne.n	800aab6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800aab0:	4b25      	ldr	r3, [pc, #148]	; (800ab48 <HAL_RCC_GetSysClockFreq+0x110>)
 800aab2:	61bb      	str	r3, [r7, #24]
 800aab4:	e004      	b.n	800aac0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800aab6:	693b      	ldr	r3, [r7, #16]
 800aab8:	2b08      	cmp	r3, #8
 800aaba:	d101      	bne.n	800aac0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800aabc:	4b23      	ldr	r3, [pc, #140]	; (800ab4c <HAL_RCC_GetSysClockFreq+0x114>)
 800aabe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800aac0:	693b      	ldr	r3, [r7, #16]
 800aac2:	2b0c      	cmp	r3, #12
 800aac4:	d134      	bne.n	800ab30 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800aac6:	4b1e      	ldr	r3, [pc, #120]	; (800ab40 <HAL_RCC_GetSysClockFreq+0x108>)
 800aac8:	68db      	ldr	r3, [r3, #12]
 800aaca:	f003 0303 	and.w	r3, r3, #3
 800aace:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800aad0:	68bb      	ldr	r3, [r7, #8]
 800aad2:	2b02      	cmp	r3, #2
 800aad4:	d003      	beq.n	800aade <HAL_RCC_GetSysClockFreq+0xa6>
 800aad6:	68bb      	ldr	r3, [r7, #8]
 800aad8:	2b03      	cmp	r3, #3
 800aada:	d003      	beq.n	800aae4 <HAL_RCC_GetSysClockFreq+0xac>
 800aadc:	e005      	b.n	800aaea <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800aade:	4b1a      	ldr	r3, [pc, #104]	; (800ab48 <HAL_RCC_GetSysClockFreq+0x110>)
 800aae0:	617b      	str	r3, [r7, #20]
      break;
 800aae2:	e005      	b.n	800aaf0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800aae4:	4b19      	ldr	r3, [pc, #100]	; (800ab4c <HAL_RCC_GetSysClockFreq+0x114>)
 800aae6:	617b      	str	r3, [r7, #20]
      break;
 800aae8:	e002      	b.n	800aaf0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800aaea:	69fb      	ldr	r3, [r7, #28]
 800aaec:	617b      	str	r3, [r7, #20]
      break;
 800aaee:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800aaf0:	4b13      	ldr	r3, [pc, #76]	; (800ab40 <HAL_RCC_GetSysClockFreq+0x108>)
 800aaf2:	68db      	ldr	r3, [r3, #12]
 800aaf4:	091b      	lsrs	r3, r3, #4
 800aaf6:	f003 0307 	and.w	r3, r3, #7
 800aafa:	3301      	adds	r3, #1
 800aafc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800aafe:	4b10      	ldr	r3, [pc, #64]	; (800ab40 <HAL_RCC_GetSysClockFreq+0x108>)
 800ab00:	68db      	ldr	r3, [r3, #12]
 800ab02:	0a1b      	lsrs	r3, r3, #8
 800ab04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab08:	697a      	ldr	r2, [r7, #20]
 800ab0a:	fb03 f202 	mul.w	r2, r3, r2
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab14:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800ab16:	4b0a      	ldr	r3, [pc, #40]	; (800ab40 <HAL_RCC_GetSysClockFreq+0x108>)
 800ab18:	68db      	ldr	r3, [r3, #12]
 800ab1a:	0e5b      	lsrs	r3, r3, #25
 800ab1c:	f003 0303 	and.w	r3, r3, #3
 800ab20:	3301      	adds	r3, #1
 800ab22:	005b      	lsls	r3, r3, #1
 800ab24:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800ab26:	697a      	ldr	r2, [r7, #20]
 800ab28:	683b      	ldr	r3, [r7, #0]
 800ab2a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab2e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800ab30:	69bb      	ldr	r3, [r7, #24]
}
 800ab32:	4618      	mov	r0, r3
 800ab34:	3724      	adds	r7, #36	; 0x24
 800ab36:	46bd      	mov	sp, r7
 800ab38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3c:	4770      	bx	lr
 800ab3e:	bf00      	nop
 800ab40:	40021000 	.word	0x40021000
 800ab44:	08015788 	.word	0x08015788
 800ab48:	00f42400 	.word	0x00f42400
 800ab4c:	007a1200 	.word	0x007a1200

0800ab50 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ab50:	b480      	push	{r7}
 800ab52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ab54:	4b03      	ldr	r3, [pc, #12]	; (800ab64 <HAL_RCC_GetHCLKFreq+0x14>)
 800ab56:	681b      	ldr	r3, [r3, #0]
}
 800ab58:	4618      	mov	r0, r3
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab60:	4770      	bx	lr
 800ab62:	bf00      	nop
 800ab64:	20000228 	.word	0x20000228

0800ab68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800ab6c:	f7ff fff0 	bl	800ab50 <HAL_RCC_GetHCLKFreq>
 800ab70:	4602      	mov	r2, r0
 800ab72:	4b06      	ldr	r3, [pc, #24]	; (800ab8c <HAL_RCC_GetPCLK1Freq+0x24>)
 800ab74:	689b      	ldr	r3, [r3, #8]
 800ab76:	0a1b      	lsrs	r3, r3, #8
 800ab78:	f003 0307 	and.w	r3, r3, #7
 800ab7c:	4904      	ldr	r1, [pc, #16]	; (800ab90 <HAL_RCC_GetPCLK1Freq+0x28>)
 800ab7e:	5ccb      	ldrb	r3, [r1, r3]
 800ab80:	f003 031f 	and.w	r3, r3, #31
 800ab84:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ab88:	4618      	mov	r0, r3
 800ab8a:	bd80      	pop	{r7, pc}
 800ab8c:	40021000 	.word	0x40021000
 800ab90:	08015780 	.word	0x08015780

0800ab94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800ab98:	f7ff ffda 	bl	800ab50 <HAL_RCC_GetHCLKFreq>
 800ab9c:	4602      	mov	r2, r0
 800ab9e:	4b06      	ldr	r3, [pc, #24]	; (800abb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800aba0:	689b      	ldr	r3, [r3, #8]
 800aba2:	0adb      	lsrs	r3, r3, #11
 800aba4:	f003 0307 	and.w	r3, r3, #7
 800aba8:	4904      	ldr	r1, [pc, #16]	; (800abbc <HAL_RCC_GetPCLK2Freq+0x28>)
 800abaa:	5ccb      	ldrb	r3, [r1, r3]
 800abac:	f003 031f 	and.w	r3, r3, #31
 800abb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800abb4:	4618      	mov	r0, r3
 800abb6:	bd80      	pop	{r7, pc}
 800abb8:	40021000 	.word	0x40021000
 800abbc:	08015780 	.word	0x08015780

0800abc0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b086      	sub	sp, #24
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800abc8:	2300      	movs	r3, #0
 800abca:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800abcc:	4b2a      	ldr	r3, [pc, #168]	; (800ac78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800abce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800abd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d003      	beq.n	800abe0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800abd8:	f7ff f9a6 	bl	8009f28 <HAL_PWREx_GetVoltageRange>
 800abdc:	6178      	str	r0, [r7, #20]
 800abde:	e014      	b.n	800ac0a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800abe0:	4b25      	ldr	r3, [pc, #148]	; (800ac78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800abe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800abe4:	4a24      	ldr	r2, [pc, #144]	; (800ac78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800abe6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800abea:	6593      	str	r3, [r2, #88]	; 0x58
 800abec:	4b22      	ldr	r3, [pc, #136]	; (800ac78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800abee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800abf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800abf4:	60fb      	str	r3, [r7, #12]
 800abf6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800abf8:	f7ff f996 	bl	8009f28 <HAL_PWREx_GetVoltageRange>
 800abfc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800abfe:	4b1e      	ldr	r3, [pc, #120]	; (800ac78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800ac00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac02:	4a1d      	ldr	r2, [pc, #116]	; (800ac78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800ac04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ac08:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800ac0a:	697b      	ldr	r3, [r7, #20]
 800ac0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ac10:	d10b      	bne.n	800ac2a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	2b80      	cmp	r3, #128	; 0x80
 800ac16:	d919      	bls.n	800ac4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	2ba0      	cmp	r3, #160	; 0xa0
 800ac1c:	d902      	bls.n	800ac24 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800ac1e:	2302      	movs	r3, #2
 800ac20:	613b      	str	r3, [r7, #16]
 800ac22:	e013      	b.n	800ac4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800ac24:	2301      	movs	r3, #1
 800ac26:	613b      	str	r3, [r7, #16]
 800ac28:	e010      	b.n	800ac4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	2b80      	cmp	r3, #128	; 0x80
 800ac2e:	d902      	bls.n	800ac36 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800ac30:	2303      	movs	r3, #3
 800ac32:	613b      	str	r3, [r7, #16]
 800ac34:	e00a      	b.n	800ac4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	2b80      	cmp	r3, #128	; 0x80
 800ac3a:	d102      	bne.n	800ac42 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800ac3c:	2302      	movs	r3, #2
 800ac3e:	613b      	str	r3, [r7, #16]
 800ac40:	e004      	b.n	800ac4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	2b70      	cmp	r3, #112	; 0x70
 800ac46:	d101      	bne.n	800ac4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800ac48:	2301      	movs	r3, #1
 800ac4a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800ac4c:	4b0b      	ldr	r3, [pc, #44]	; (800ac7c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	f023 0207 	bic.w	r2, r3, #7
 800ac54:	4909      	ldr	r1, [pc, #36]	; (800ac7c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800ac56:	693b      	ldr	r3, [r7, #16]
 800ac58:	4313      	orrs	r3, r2
 800ac5a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800ac5c:	4b07      	ldr	r3, [pc, #28]	; (800ac7c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	f003 0307 	and.w	r3, r3, #7
 800ac64:	693a      	ldr	r2, [r7, #16]
 800ac66:	429a      	cmp	r2, r3
 800ac68:	d001      	beq.n	800ac6e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800ac6a:	2301      	movs	r3, #1
 800ac6c:	e000      	b.n	800ac70 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800ac6e:	2300      	movs	r3, #0
}
 800ac70:	4618      	mov	r0, r3
 800ac72:	3718      	adds	r7, #24
 800ac74:	46bd      	mov	sp, r7
 800ac76:	bd80      	pop	{r7, pc}
 800ac78:	40021000 	.word	0x40021000
 800ac7c:	40022000 	.word	0x40022000

0800ac80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ac80:	b580      	push	{r7, lr}
 800ac82:	b086      	sub	sp, #24
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800ac88:	2300      	movs	r3, #0
 800ac8a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d041      	beq.n	800ad20 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aca0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800aca4:	d02a      	beq.n	800acfc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800aca6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800acaa:	d824      	bhi.n	800acf6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800acac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800acb0:	d008      	beq.n	800acc4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800acb2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800acb6:	d81e      	bhi.n	800acf6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d00a      	beq.n	800acd2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800acbc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800acc0:	d010      	beq.n	800ace4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800acc2:	e018      	b.n	800acf6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800acc4:	4b86      	ldr	r3, [pc, #536]	; (800aee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800acc6:	68db      	ldr	r3, [r3, #12]
 800acc8:	4a85      	ldr	r2, [pc, #532]	; (800aee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800acca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800acce:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800acd0:	e015      	b.n	800acfe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	3304      	adds	r3, #4
 800acd6:	2100      	movs	r1, #0
 800acd8:	4618      	mov	r0, r3
 800acda:	f000 fabb 	bl	800b254 <RCCEx_PLLSAI1_Config>
 800acde:	4603      	mov	r3, r0
 800ace0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800ace2:	e00c      	b.n	800acfe <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	3320      	adds	r3, #32
 800ace8:	2100      	movs	r1, #0
 800acea:	4618      	mov	r0, r3
 800acec:	f000 fba6 	bl	800b43c <RCCEx_PLLSAI2_Config>
 800acf0:	4603      	mov	r3, r0
 800acf2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800acf4:	e003      	b.n	800acfe <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800acf6:	2301      	movs	r3, #1
 800acf8:	74fb      	strb	r3, [r7, #19]
      break;
 800acfa:	e000      	b.n	800acfe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800acfc:	bf00      	nop
    }

    if(ret == HAL_OK)
 800acfe:	7cfb      	ldrb	r3, [r7, #19]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d10b      	bne.n	800ad1c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ad04:	4b76      	ldr	r3, [pc, #472]	; (800aee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ad06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad0a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ad12:	4973      	ldr	r1, [pc, #460]	; (800aee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ad14:	4313      	orrs	r3, r2
 800ad16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800ad1a:	e001      	b.n	800ad20 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad1c:	7cfb      	ldrb	r3, [r7, #19]
 800ad1e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d041      	beq.n	800adb0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ad30:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ad34:	d02a      	beq.n	800ad8c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800ad36:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ad3a:	d824      	bhi.n	800ad86 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800ad3c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ad40:	d008      	beq.n	800ad54 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800ad42:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ad46:	d81e      	bhi.n	800ad86 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d00a      	beq.n	800ad62 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800ad4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ad50:	d010      	beq.n	800ad74 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800ad52:	e018      	b.n	800ad86 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800ad54:	4b62      	ldr	r3, [pc, #392]	; (800aee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ad56:	68db      	ldr	r3, [r3, #12]
 800ad58:	4a61      	ldr	r2, [pc, #388]	; (800aee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ad5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ad5e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800ad60:	e015      	b.n	800ad8e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	3304      	adds	r3, #4
 800ad66:	2100      	movs	r1, #0
 800ad68:	4618      	mov	r0, r3
 800ad6a:	f000 fa73 	bl	800b254 <RCCEx_PLLSAI1_Config>
 800ad6e:	4603      	mov	r3, r0
 800ad70:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800ad72:	e00c      	b.n	800ad8e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	3320      	adds	r3, #32
 800ad78:	2100      	movs	r1, #0
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	f000 fb5e 	bl	800b43c <RCCEx_PLLSAI2_Config>
 800ad80:	4603      	mov	r3, r0
 800ad82:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800ad84:	e003      	b.n	800ad8e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ad86:	2301      	movs	r3, #1
 800ad88:	74fb      	strb	r3, [r7, #19]
      break;
 800ad8a:	e000      	b.n	800ad8e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800ad8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ad8e:	7cfb      	ldrb	r3, [r7, #19]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d10b      	bne.n	800adac <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800ad94:	4b52      	ldr	r3, [pc, #328]	; (800aee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ad96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad9a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ada2:	494f      	ldr	r1, [pc, #316]	; (800aee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ada4:	4313      	orrs	r3, r2
 800ada6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800adaa:	e001      	b.n	800adb0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800adac:	7cfb      	ldrb	r3, [r7, #19]
 800adae:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800adb8:	2b00      	cmp	r3, #0
 800adba:	f000 80a0 	beq.w	800aefe <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800adbe:	2300      	movs	r3, #0
 800adc0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800adc2:	4b47      	ldr	r3, [pc, #284]	; (800aee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800adc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800adc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d101      	bne.n	800add2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800adce:	2301      	movs	r3, #1
 800add0:	e000      	b.n	800add4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800add2:	2300      	movs	r3, #0
 800add4:	2b00      	cmp	r3, #0
 800add6:	d00d      	beq.n	800adf4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800add8:	4b41      	ldr	r3, [pc, #260]	; (800aee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800adda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800addc:	4a40      	ldr	r2, [pc, #256]	; (800aee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800adde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ade2:	6593      	str	r3, [r2, #88]	; 0x58
 800ade4:	4b3e      	ldr	r3, [pc, #248]	; (800aee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ade6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ade8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800adec:	60bb      	str	r3, [r7, #8]
 800adee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800adf0:	2301      	movs	r3, #1
 800adf2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800adf4:	4b3b      	ldr	r3, [pc, #236]	; (800aee4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	4a3a      	ldr	r2, [pc, #232]	; (800aee4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800adfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800adfe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ae00:	f7fc fda0 	bl	8007944 <HAL_GetTick>
 800ae04:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800ae06:	e009      	b.n	800ae1c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ae08:	f7fc fd9c 	bl	8007944 <HAL_GetTick>
 800ae0c:	4602      	mov	r2, r0
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	1ad3      	subs	r3, r2, r3
 800ae12:	2b02      	cmp	r3, #2
 800ae14:	d902      	bls.n	800ae1c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800ae16:	2303      	movs	r3, #3
 800ae18:	74fb      	strb	r3, [r7, #19]
        break;
 800ae1a:	e005      	b.n	800ae28 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800ae1c:	4b31      	ldr	r3, [pc, #196]	; (800aee4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d0ef      	beq.n	800ae08 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800ae28:	7cfb      	ldrb	r3, [r7, #19]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d15c      	bne.n	800aee8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800ae2e:	4b2c      	ldr	r3, [pc, #176]	; (800aee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ae30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ae38:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800ae3a:	697b      	ldr	r3, [r7, #20]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d01f      	beq.n	800ae80 <HAL_RCCEx_PeriphCLKConfig+0x200>
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ae46:	697a      	ldr	r2, [r7, #20]
 800ae48:	429a      	cmp	r2, r3
 800ae4a:	d019      	beq.n	800ae80 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800ae4c:	4b24      	ldr	r3, [pc, #144]	; (800aee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ae4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ae56:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800ae58:	4b21      	ldr	r3, [pc, #132]	; (800aee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ae5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae5e:	4a20      	ldr	r2, [pc, #128]	; (800aee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ae60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ae64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800ae68:	4b1d      	ldr	r3, [pc, #116]	; (800aee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ae6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae6e:	4a1c      	ldr	r2, [pc, #112]	; (800aee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ae70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ae74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800ae78:	4a19      	ldr	r2, [pc, #100]	; (800aee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ae7a:	697b      	ldr	r3, [r7, #20]
 800ae7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800ae80:	697b      	ldr	r3, [r7, #20]
 800ae82:	f003 0301 	and.w	r3, r3, #1
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d016      	beq.n	800aeb8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ae8a:	f7fc fd5b 	bl	8007944 <HAL_GetTick>
 800ae8e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800ae90:	e00b      	b.n	800aeaa <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ae92:	f7fc fd57 	bl	8007944 <HAL_GetTick>
 800ae96:	4602      	mov	r2, r0
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	1ad3      	subs	r3, r2, r3
 800ae9c:	f241 3288 	movw	r2, #5000	; 0x1388
 800aea0:	4293      	cmp	r3, r2
 800aea2:	d902      	bls.n	800aeaa <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800aea4:	2303      	movs	r3, #3
 800aea6:	74fb      	strb	r3, [r7, #19]
            break;
 800aea8:	e006      	b.n	800aeb8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800aeaa:	4b0d      	ldr	r3, [pc, #52]	; (800aee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800aeac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aeb0:	f003 0302 	and.w	r3, r3, #2
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d0ec      	beq.n	800ae92 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800aeb8:	7cfb      	ldrb	r3, [r7, #19]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d10c      	bne.n	800aed8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800aebe:	4b08      	ldr	r3, [pc, #32]	; (800aee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800aec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aec4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aece:	4904      	ldr	r1, [pc, #16]	; (800aee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800aed0:	4313      	orrs	r3, r2
 800aed2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800aed6:	e009      	b.n	800aeec <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800aed8:	7cfb      	ldrb	r3, [r7, #19]
 800aeda:	74bb      	strb	r3, [r7, #18]
 800aedc:	e006      	b.n	800aeec <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800aede:	bf00      	nop
 800aee0:	40021000 	.word	0x40021000
 800aee4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aee8:	7cfb      	ldrb	r3, [r7, #19]
 800aeea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800aeec:	7c7b      	ldrb	r3, [r7, #17]
 800aeee:	2b01      	cmp	r3, #1
 800aef0:	d105      	bne.n	800aefe <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800aef2:	4b9e      	ldr	r3, [pc, #632]	; (800b16c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800aef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aef6:	4a9d      	ldr	r2, [pc, #628]	; (800b16c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800aef8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800aefc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	f003 0301 	and.w	r3, r3, #1
 800af06:	2b00      	cmp	r3, #0
 800af08:	d00a      	beq.n	800af20 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800af0a:	4b98      	ldr	r3, [pc, #608]	; (800b16c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800af0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af10:	f023 0203 	bic.w	r2, r3, #3
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af18:	4994      	ldr	r1, [pc, #592]	; (800b16c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800af1a:	4313      	orrs	r3, r2
 800af1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	f003 0302 	and.w	r3, r3, #2
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d00a      	beq.n	800af42 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800af2c:	4b8f      	ldr	r3, [pc, #572]	; (800b16c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800af2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af32:	f023 020c 	bic.w	r2, r3, #12
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af3a:	498c      	ldr	r1, [pc, #560]	; (800b16c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800af3c:	4313      	orrs	r3, r2
 800af3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	f003 0304 	and.w	r3, r3, #4
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d00a      	beq.n	800af64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800af4e:	4b87      	ldr	r3, [pc, #540]	; (800b16c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800af50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af54:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af5c:	4983      	ldr	r1, [pc, #524]	; (800b16c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800af5e:	4313      	orrs	r3, r2
 800af60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	f003 0308 	and.w	r3, r3, #8
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d00a      	beq.n	800af86 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800af70:	4b7e      	ldr	r3, [pc, #504]	; (800b16c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800af72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af76:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af7e:	497b      	ldr	r1, [pc, #492]	; (800b16c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800af80:	4313      	orrs	r3, r2
 800af82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	f003 0310 	and.w	r3, r3, #16
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d00a      	beq.n	800afa8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800af92:	4b76      	ldr	r3, [pc, #472]	; (800b16c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800af94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af98:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800afa0:	4972      	ldr	r1, [pc, #456]	; (800b16c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800afa2:	4313      	orrs	r3, r2
 800afa4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	f003 0320 	and.w	r3, r3, #32
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d00a      	beq.n	800afca <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800afb4:	4b6d      	ldr	r3, [pc, #436]	; (800b16c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800afb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800afba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800afc2:	496a      	ldr	r1, [pc, #424]	; (800b16c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800afc4:	4313      	orrs	r3, r2
 800afc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d00a      	beq.n	800afec <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800afd6:	4b65      	ldr	r3, [pc, #404]	; (800b16c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800afd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800afdc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800afe4:	4961      	ldr	r1, [pc, #388]	; (800b16c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800afe6:	4313      	orrs	r3, r2
 800afe8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d00a      	beq.n	800b00e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800aff8:	4b5c      	ldr	r3, [pc, #368]	; (800b16c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800affa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800affe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b006:	4959      	ldr	r1, [pc, #356]	; (800b16c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b008:	4313      	orrs	r3, r2
 800b00a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b016:	2b00      	cmp	r3, #0
 800b018:	d00a      	beq.n	800b030 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800b01a:	4b54      	ldr	r3, [pc, #336]	; (800b16c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b01c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b020:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b028:	4950      	ldr	r1, [pc, #320]	; (800b16c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b02a:	4313      	orrs	r3, r2
 800b02c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d00a      	beq.n	800b052 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800b03c:	4b4b      	ldr	r3, [pc, #300]	; (800b16c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b03e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b042:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b04a:	4948      	ldr	r1, [pc, #288]	; (800b16c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b04c:	4313      	orrs	r3, r2
 800b04e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d00a      	beq.n	800b074 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800b05e:	4b43      	ldr	r3, [pc, #268]	; (800b16c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b060:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b064:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b06c:	493f      	ldr	r1, [pc, #252]	; (800b16c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b06e:	4313      	orrs	r3, r2
 800b070:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d028      	beq.n	800b0d2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b080:	4b3a      	ldr	r3, [pc, #232]	; (800b16c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b082:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b086:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b08e:	4937      	ldr	r1, [pc, #220]	; (800b16c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b090:	4313      	orrs	r3, r2
 800b092:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b09a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b09e:	d106      	bne.n	800b0ae <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b0a0:	4b32      	ldr	r3, [pc, #200]	; (800b16c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b0a2:	68db      	ldr	r3, [r3, #12]
 800b0a4:	4a31      	ldr	r2, [pc, #196]	; (800b16c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b0a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b0aa:	60d3      	str	r3, [r2, #12]
 800b0ac:	e011      	b.n	800b0d2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b0b2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b0b6:	d10c      	bne.n	800b0d2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	3304      	adds	r3, #4
 800b0bc:	2101      	movs	r1, #1
 800b0be:	4618      	mov	r0, r3
 800b0c0:	f000 f8c8 	bl	800b254 <RCCEx_PLLSAI1_Config>
 800b0c4:	4603      	mov	r3, r0
 800b0c6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800b0c8:	7cfb      	ldrb	r3, [r7, #19]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d001      	beq.n	800b0d2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800b0ce:	7cfb      	ldrb	r3, [r7, #19]
 800b0d0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d028      	beq.n	800b130 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800b0de:	4b23      	ldr	r3, [pc, #140]	; (800b16c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b0e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0e4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0ec:	491f      	ldr	r1, [pc, #124]	; (800b16c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b0ee:	4313      	orrs	r3, r2
 800b0f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b0fc:	d106      	bne.n	800b10c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b0fe:	4b1b      	ldr	r3, [pc, #108]	; (800b16c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b100:	68db      	ldr	r3, [r3, #12]
 800b102:	4a1a      	ldr	r2, [pc, #104]	; (800b16c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b104:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b108:	60d3      	str	r3, [r2, #12]
 800b10a:	e011      	b.n	800b130 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b110:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b114:	d10c      	bne.n	800b130 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	3304      	adds	r3, #4
 800b11a:	2101      	movs	r1, #1
 800b11c:	4618      	mov	r0, r3
 800b11e:	f000 f899 	bl	800b254 <RCCEx_PLLSAI1_Config>
 800b122:	4603      	mov	r3, r0
 800b124:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800b126:	7cfb      	ldrb	r3, [r7, #19]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d001      	beq.n	800b130 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800b12c:	7cfb      	ldrb	r3, [r7, #19]
 800b12e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d02b      	beq.n	800b194 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b13c:	4b0b      	ldr	r3, [pc, #44]	; (800b16c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b13e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b142:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b14a:	4908      	ldr	r1, [pc, #32]	; (800b16c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b14c:	4313      	orrs	r3, r2
 800b14e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b156:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b15a:	d109      	bne.n	800b170 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b15c:	4b03      	ldr	r3, [pc, #12]	; (800b16c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b15e:	68db      	ldr	r3, [r3, #12]
 800b160:	4a02      	ldr	r2, [pc, #8]	; (800b16c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b162:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b166:	60d3      	str	r3, [r2, #12]
 800b168:	e014      	b.n	800b194 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800b16a:	bf00      	nop
 800b16c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b174:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b178:	d10c      	bne.n	800b194 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	3304      	adds	r3, #4
 800b17e:	2101      	movs	r1, #1
 800b180:	4618      	mov	r0, r3
 800b182:	f000 f867 	bl	800b254 <RCCEx_PLLSAI1_Config>
 800b186:	4603      	mov	r3, r0
 800b188:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800b18a:	7cfb      	ldrb	r3, [r7, #19]
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d001      	beq.n	800b194 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800b190:	7cfb      	ldrb	r3, [r7, #19]
 800b192:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d02f      	beq.n	800b200 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b1a0:	4b2b      	ldr	r3, [pc, #172]	; (800b250 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800b1a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1a6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b1ae:	4928      	ldr	r1, [pc, #160]	; (800b250 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800b1b0:	4313      	orrs	r3, r2
 800b1b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b1ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b1be:	d10d      	bne.n	800b1dc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	3304      	adds	r3, #4
 800b1c4:	2102      	movs	r1, #2
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	f000 f844 	bl	800b254 <RCCEx_PLLSAI1_Config>
 800b1cc:	4603      	mov	r3, r0
 800b1ce:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800b1d0:	7cfb      	ldrb	r3, [r7, #19]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d014      	beq.n	800b200 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800b1d6:	7cfb      	ldrb	r3, [r7, #19]
 800b1d8:	74bb      	strb	r3, [r7, #18]
 800b1da:	e011      	b.n	800b200 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b1e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b1e4:	d10c      	bne.n	800b200 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	3320      	adds	r3, #32
 800b1ea:	2102      	movs	r1, #2
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	f000 f925 	bl	800b43c <RCCEx_PLLSAI2_Config>
 800b1f2:	4603      	mov	r3, r0
 800b1f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800b1f6:	7cfb      	ldrb	r3, [r7, #19]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d001      	beq.n	800b200 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800b1fc:	7cfb      	ldrb	r3, [r7, #19]
 800b1fe:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d00a      	beq.n	800b222 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b20c:	4b10      	ldr	r3, [pc, #64]	; (800b250 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800b20e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b212:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b21a:	490d      	ldr	r1, [pc, #52]	; (800b250 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800b21c:	4313      	orrs	r3, r2
 800b21e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d00b      	beq.n	800b246 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b22e:	4b08      	ldr	r3, [pc, #32]	; (800b250 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800b230:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b234:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b23e:	4904      	ldr	r1, [pc, #16]	; (800b250 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800b240:	4313      	orrs	r3, r2
 800b242:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800b246:	7cbb      	ldrb	r3, [r7, #18]
}
 800b248:	4618      	mov	r0, r3
 800b24a:	3718      	adds	r7, #24
 800b24c:	46bd      	mov	sp, r7
 800b24e:	bd80      	pop	{r7, pc}
 800b250:	40021000 	.word	0x40021000

0800b254 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800b254:	b580      	push	{r7, lr}
 800b256:	b084      	sub	sp, #16
 800b258:	af00      	add	r7, sp, #0
 800b25a:	6078      	str	r0, [r7, #4]
 800b25c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b25e:	2300      	movs	r3, #0
 800b260:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800b262:	4b75      	ldr	r3, [pc, #468]	; (800b438 <RCCEx_PLLSAI1_Config+0x1e4>)
 800b264:	68db      	ldr	r3, [r3, #12]
 800b266:	f003 0303 	and.w	r3, r3, #3
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d018      	beq.n	800b2a0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800b26e:	4b72      	ldr	r3, [pc, #456]	; (800b438 <RCCEx_PLLSAI1_Config+0x1e4>)
 800b270:	68db      	ldr	r3, [r3, #12]
 800b272:	f003 0203 	and.w	r2, r3, #3
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	429a      	cmp	r2, r3
 800b27c:	d10d      	bne.n	800b29a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	681b      	ldr	r3, [r3, #0]
       ||
 800b282:	2b00      	cmp	r3, #0
 800b284:	d009      	beq.n	800b29a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800b286:	4b6c      	ldr	r3, [pc, #432]	; (800b438 <RCCEx_PLLSAI1_Config+0x1e4>)
 800b288:	68db      	ldr	r3, [r3, #12]
 800b28a:	091b      	lsrs	r3, r3, #4
 800b28c:	f003 0307 	and.w	r3, r3, #7
 800b290:	1c5a      	adds	r2, r3, #1
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	685b      	ldr	r3, [r3, #4]
       ||
 800b296:	429a      	cmp	r2, r3
 800b298:	d047      	beq.n	800b32a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800b29a:	2301      	movs	r3, #1
 800b29c:	73fb      	strb	r3, [r7, #15]
 800b29e:	e044      	b.n	800b32a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	2b03      	cmp	r3, #3
 800b2a6:	d018      	beq.n	800b2da <RCCEx_PLLSAI1_Config+0x86>
 800b2a8:	2b03      	cmp	r3, #3
 800b2aa:	d825      	bhi.n	800b2f8 <RCCEx_PLLSAI1_Config+0xa4>
 800b2ac:	2b01      	cmp	r3, #1
 800b2ae:	d002      	beq.n	800b2b6 <RCCEx_PLLSAI1_Config+0x62>
 800b2b0:	2b02      	cmp	r3, #2
 800b2b2:	d009      	beq.n	800b2c8 <RCCEx_PLLSAI1_Config+0x74>
 800b2b4:	e020      	b.n	800b2f8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800b2b6:	4b60      	ldr	r3, [pc, #384]	; (800b438 <RCCEx_PLLSAI1_Config+0x1e4>)
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	f003 0302 	and.w	r3, r3, #2
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d11d      	bne.n	800b2fe <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800b2c2:	2301      	movs	r3, #1
 800b2c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b2c6:	e01a      	b.n	800b2fe <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800b2c8:	4b5b      	ldr	r3, [pc, #364]	; (800b438 <RCCEx_PLLSAI1_Config+0x1e4>)
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d116      	bne.n	800b302 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800b2d4:	2301      	movs	r3, #1
 800b2d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b2d8:	e013      	b.n	800b302 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800b2da:	4b57      	ldr	r3, [pc, #348]	; (800b438 <RCCEx_PLLSAI1_Config+0x1e4>)
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d10f      	bne.n	800b306 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800b2e6:	4b54      	ldr	r3, [pc, #336]	; (800b438 <RCCEx_PLLSAI1_Config+0x1e4>)
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d109      	bne.n	800b306 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800b2f2:	2301      	movs	r3, #1
 800b2f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b2f6:	e006      	b.n	800b306 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800b2f8:	2301      	movs	r3, #1
 800b2fa:	73fb      	strb	r3, [r7, #15]
      break;
 800b2fc:	e004      	b.n	800b308 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800b2fe:	bf00      	nop
 800b300:	e002      	b.n	800b308 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800b302:	bf00      	nop
 800b304:	e000      	b.n	800b308 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800b306:	bf00      	nop
    }

    if(status == HAL_OK)
 800b308:	7bfb      	ldrb	r3, [r7, #15]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d10d      	bne.n	800b32a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800b30e:	4b4a      	ldr	r3, [pc, #296]	; (800b438 <RCCEx_PLLSAI1_Config+0x1e4>)
 800b310:	68db      	ldr	r3, [r3, #12]
 800b312:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	6819      	ldr	r1, [r3, #0]
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	685b      	ldr	r3, [r3, #4]
 800b31e:	3b01      	subs	r3, #1
 800b320:	011b      	lsls	r3, r3, #4
 800b322:	430b      	orrs	r3, r1
 800b324:	4944      	ldr	r1, [pc, #272]	; (800b438 <RCCEx_PLLSAI1_Config+0x1e4>)
 800b326:	4313      	orrs	r3, r2
 800b328:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800b32a:	7bfb      	ldrb	r3, [r7, #15]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d17d      	bne.n	800b42c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800b330:	4b41      	ldr	r3, [pc, #260]	; (800b438 <RCCEx_PLLSAI1_Config+0x1e4>)
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	4a40      	ldr	r2, [pc, #256]	; (800b438 <RCCEx_PLLSAI1_Config+0x1e4>)
 800b336:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b33a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b33c:	f7fc fb02 	bl	8007944 <HAL_GetTick>
 800b340:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800b342:	e009      	b.n	800b358 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800b344:	f7fc fafe 	bl	8007944 <HAL_GetTick>
 800b348:	4602      	mov	r2, r0
 800b34a:	68bb      	ldr	r3, [r7, #8]
 800b34c:	1ad3      	subs	r3, r2, r3
 800b34e:	2b02      	cmp	r3, #2
 800b350:	d902      	bls.n	800b358 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800b352:	2303      	movs	r3, #3
 800b354:	73fb      	strb	r3, [r7, #15]
        break;
 800b356:	e005      	b.n	800b364 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800b358:	4b37      	ldr	r3, [pc, #220]	; (800b438 <RCCEx_PLLSAI1_Config+0x1e4>)
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b360:	2b00      	cmp	r3, #0
 800b362:	d1ef      	bne.n	800b344 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800b364:	7bfb      	ldrb	r3, [r7, #15]
 800b366:	2b00      	cmp	r3, #0
 800b368:	d160      	bne.n	800b42c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800b36a:	683b      	ldr	r3, [r7, #0]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d111      	bne.n	800b394 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800b370:	4b31      	ldr	r3, [pc, #196]	; (800b438 <RCCEx_PLLSAI1_Config+0x1e4>)
 800b372:	691b      	ldr	r3, [r3, #16]
 800b374:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800b378:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b37c:	687a      	ldr	r2, [r7, #4]
 800b37e:	6892      	ldr	r2, [r2, #8]
 800b380:	0211      	lsls	r1, r2, #8
 800b382:	687a      	ldr	r2, [r7, #4]
 800b384:	68d2      	ldr	r2, [r2, #12]
 800b386:	0912      	lsrs	r2, r2, #4
 800b388:	0452      	lsls	r2, r2, #17
 800b38a:	430a      	orrs	r2, r1
 800b38c:	492a      	ldr	r1, [pc, #168]	; (800b438 <RCCEx_PLLSAI1_Config+0x1e4>)
 800b38e:	4313      	orrs	r3, r2
 800b390:	610b      	str	r3, [r1, #16]
 800b392:	e027      	b.n	800b3e4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800b394:	683b      	ldr	r3, [r7, #0]
 800b396:	2b01      	cmp	r3, #1
 800b398:	d112      	bne.n	800b3c0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800b39a:	4b27      	ldr	r3, [pc, #156]	; (800b438 <RCCEx_PLLSAI1_Config+0x1e4>)
 800b39c:	691b      	ldr	r3, [r3, #16]
 800b39e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800b3a2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800b3a6:	687a      	ldr	r2, [r7, #4]
 800b3a8:	6892      	ldr	r2, [r2, #8]
 800b3aa:	0211      	lsls	r1, r2, #8
 800b3ac:	687a      	ldr	r2, [r7, #4]
 800b3ae:	6912      	ldr	r2, [r2, #16]
 800b3b0:	0852      	lsrs	r2, r2, #1
 800b3b2:	3a01      	subs	r2, #1
 800b3b4:	0552      	lsls	r2, r2, #21
 800b3b6:	430a      	orrs	r2, r1
 800b3b8:	491f      	ldr	r1, [pc, #124]	; (800b438 <RCCEx_PLLSAI1_Config+0x1e4>)
 800b3ba:	4313      	orrs	r3, r2
 800b3bc:	610b      	str	r3, [r1, #16]
 800b3be:	e011      	b.n	800b3e4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800b3c0:	4b1d      	ldr	r3, [pc, #116]	; (800b438 <RCCEx_PLLSAI1_Config+0x1e4>)
 800b3c2:	691b      	ldr	r3, [r3, #16]
 800b3c4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800b3c8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800b3cc:	687a      	ldr	r2, [r7, #4]
 800b3ce:	6892      	ldr	r2, [r2, #8]
 800b3d0:	0211      	lsls	r1, r2, #8
 800b3d2:	687a      	ldr	r2, [r7, #4]
 800b3d4:	6952      	ldr	r2, [r2, #20]
 800b3d6:	0852      	lsrs	r2, r2, #1
 800b3d8:	3a01      	subs	r2, #1
 800b3da:	0652      	lsls	r2, r2, #25
 800b3dc:	430a      	orrs	r2, r1
 800b3de:	4916      	ldr	r1, [pc, #88]	; (800b438 <RCCEx_PLLSAI1_Config+0x1e4>)
 800b3e0:	4313      	orrs	r3, r2
 800b3e2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800b3e4:	4b14      	ldr	r3, [pc, #80]	; (800b438 <RCCEx_PLLSAI1_Config+0x1e4>)
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	4a13      	ldr	r2, [pc, #76]	; (800b438 <RCCEx_PLLSAI1_Config+0x1e4>)
 800b3ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b3ee:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b3f0:	f7fc faa8 	bl	8007944 <HAL_GetTick>
 800b3f4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800b3f6:	e009      	b.n	800b40c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800b3f8:	f7fc faa4 	bl	8007944 <HAL_GetTick>
 800b3fc:	4602      	mov	r2, r0
 800b3fe:	68bb      	ldr	r3, [r7, #8]
 800b400:	1ad3      	subs	r3, r2, r3
 800b402:	2b02      	cmp	r3, #2
 800b404:	d902      	bls.n	800b40c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800b406:	2303      	movs	r3, #3
 800b408:	73fb      	strb	r3, [r7, #15]
          break;
 800b40a:	e005      	b.n	800b418 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800b40c:	4b0a      	ldr	r3, [pc, #40]	; (800b438 <RCCEx_PLLSAI1_Config+0x1e4>)
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b414:	2b00      	cmp	r3, #0
 800b416:	d0ef      	beq.n	800b3f8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800b418:	7bfb      	ldrb	r3, [r7, #15]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d106      	bne.n	800b42c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800b41e:	4b06      	ldr	r3, [pc, #24]	; (800b438 <RCCEx_PLLSAI1_Config+0x1e4>)
 800b420:	691a      	ldr	r2, [r3, #16]
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	699b      	ldr	r3, [r3, #24]
 800b426:	4904      	ldr	r1, [pc, #16]	; (800b438 <RCCEx_PLLSAI1_Config+0x1e4>)
 800b428:	4313      	orrs	r3, r2
 800b42a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800b42c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b42e:	4618      	mov	r0, r3
 800b430:	3710      	adds	r7, #16
 800b432:	46bd      	mov	sp, r7
 800b434:	bd80      	pop	{r7, pc}
 800b436:	bf00      	nop
 800b438:	40021000 	.word	0x40021000

0800b43c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800b43c:	b580      	push	{r7, lr}
 800b43e:	b084      	sub	sp, #16
 800b440:	af00      	add	r7, sp, #0
 800b442:	6078      	str	r0, [r7, #4]
 800b444:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b446:	2300      	movs	r3, #0
 800b448:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800b44a:	4b6a      	ldr	r3, [pc, #424]	; (800b5f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800b44c:	68db      	ldr	r3, [r3, #12]
 800b44e:	f003 0303 	and.w	r3, r3, #3
 800b452:	2b00      	cmp	r3, #0
 800b454:	d018      	beq.n	800b488 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800b456:	4b67      	ldr	r3, [pc, #412]	; (800b5f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800b458:	68db      	ldr	r3, [r3, #12]
 800b45a:	f003 0203 	and.w	r2, r3, #3
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	429a      	cmp	r2, r3
 800b464:	d10d      	bne.n	800b482 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	681b      	ldr	r3, [r3, #0]
       ||
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d009      	beq.n	800b482 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800b46e:	4b61      	ldr	r3, [pc, #388]	; (800b5f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800b470:	68db      	ldr	r3, [r3, #12]
 800b472:	091b      	lsrs	r3, r3, #4
 800b474:	f003 0307 	and.w	r3, r3, #7
 800b478:	1c5a      	adds	r2, r3, #1
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	685b      	ldr	r3, [r3, #4]
       ||
 800b47e:	429a      	cmp	r2, r3
 800b480:	d047      	beq.n	800b512 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800b482:	2301      	movs	r3, #1
 800b484:	73fb      	strb	r3, [r7, #15]
 800b486:	e044      	b.n	800b512 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	2b03      	cmp	r3, #3
 800b48e:	d018      	beq.n	800b4c2 <RCCEx_PLLSAI2_Config+0x86>
 800b490:	2b03      	cmp	r3, #3
 800b492:	d825      	bhi.n	800b4e0 <RCCEx_PLLSAI2_Config+0xa4>
 800b494:	2b01      	cmp	r3, #1
 800b496:	d002      	beq.n	800b49e <RCCEx_PLLSAI2_Config+0x62>
 800b498:	2b02      	cmp	r3, #2
 800b49a:	d009      	beq.n	800b4b0 <RCCEx_PLLSAI2_Config+0x74>
 800b49c:	e020      	b.n	800b4e0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800b49e:	4b55      	ldr	r3, [pc, #340]	; (800b5f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	f003 0302 	and.w	r3, r3, #2
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d11d      	bne.n	800b4e6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800b4aa:	2301      	movs	r3, #1
 800b4ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b4ae:	e01a      	b.n	800b4e6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800b4b0:	4b50      	ldr	r3, [pc, #320]	; (800b5f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d116      	bne.n	800b4ea <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800b4bc:	2301      	movs	r3, #1
 800b4be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b4c0:	e013      	b.n	800b4ea <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800b4c2:	4b4c      	ldr	r3, [pc, #304]	; (800b5f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d10f      	bne.n	800b4ee <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800b4ce:	4b49      	ldr	r3, [pc, #292]	; (800b5f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d109      	bne.n	800b4ee <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800b4da:	2301      	movs	r3, #1
 800b4dc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b4de:	e006      	b.n	800b4ee <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800b4e0:	2301      	movs	r3, #1
 800b4e2:	73fb      	strb	r3, [r7, #15]
      break;
 800b4e4:	e004      	b.n	800b4f0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800b4e6:	bf00      	nop
 800b4e8:	e002      	b.n	800b4f0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800b4ea:	bf00      	nop
 800b4ec:	e000      	b.n	800b4f0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800b4ee:	bf00      	nop
    }

    if(status == HAL_OK)
 800b4f0:	7bfb      	ldrb	r3, [r7, #15]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d10d      	bne.n	800b512 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800b4f6:	4b3f      	ldr	r3, [pc, #252]	; (800b5f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800b4f8:	68db      	ldr	r3, [r3, #12]
 800b4fa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	6819      	ldr	r1, [r3, #0]
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	685b      	ldr	r3, [r3, #4]
 800b506:	3b01      	subs	r3, #1
 800b508:	011b      	lsls	r3, r3, #4
 800b50a:	430b      	orrs	r3, r1
 800b50c:	4939      	ldr	r1, [pc, #228]	; (800b5f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800b50e:	4313      	orrs	r3, r2
 800b510:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800b512:	7bfb      	ldrb	r3, [r7, #15]
 800b514:	2b00      	cmp	r3, #0
 800b516:	d167      	bne.n	800b5e8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800b518:	4b36      	ldr	r3, [pc, #216]	; (800b5f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	4a35      	ldr	r2, [pc, #212]	; (800b5f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800b51e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b522:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b524:	f7fc fa0e 	bl	8007944 <HAL_GetTick>
 800b528:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800b52a:	e009      	b.n	800b540 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800b52c:	f7fc fa0a 	bl	8007944 <HAL_GetTick>
 800b530:	4602      	mov	r2, r0
 800b532:	68bb      	ldr	r3, [r7, #8]
 800b534:	1ad3      	subs	r3, r2, r3
 800b536:	2b02      	cmp	r3, #2
 800b538:	d902      	bls.n	800b540 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800b53a:	2303      	movs	r3, #3
 800b53c:	73fb      	strb	r3, [r7, #15]
        break;
 800b53e:	e005      	b.n	800b54c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800b540:	4b2c      	ldr	r3, [pc, #176]	; (800b5f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d1ef      	bne.n	800b52c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800b54c:	7bfb      	ldrb	r3, [r7, #15]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d14a      	bne.n	800b5e8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800b552:	683b      	ldr	r3, [r7, #0]
 800b554:	2b00      	cmp	r3, #0
 800b556:	d111      	bne.n	800b57c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800b558:	4b26      	ldr	r3, [pc, #152]	; (800b5f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800b55a:	695b      	ldr	r3, [r3, #20]
 800b55c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800b560:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b564:	687a      	ldr	r2, [r7, #4]
 800b566:	6892      	ldr	r2, [r2, #8]
 800b568:	0211      	lsls	r1, r2, #8
 800b56a:	687a      	ldr	r2, [r7, #4]
 800b56c:	68d2      	ldr	r2, [r2, #12]
 800b56e:	0912      	lsrs	r2, r2, #4
 800b570:	0452      	lsls	r2, r2, #17
 800b572:	430a      	orrs	r2, r1
 800b574:	491f      	ldr	r1, [pc, #124]	; (800b5f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800b576:	4313      	orrs	r3, r2
 800b578:	614b      	str	r3, [r1, #20]
 800b57a:	e011      	b.n	800b5a0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800b57c:	4b1d      	ldr	r3, [pc, #116]	; (800b5f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800b57e:	695b      	ldr	r3, [r3, #20]
 800b580:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800b584:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800b588:	687a      	ldr	r2, [r7, #4]
 800b58a:	6892      	ldr	r2, [r2, #8]
 800b58c:	0211      	lsls	r1, r2, #8
 800b58e:	687a      	ldr	r2, [r7, #4]
 800b590:	6912      	ldr	r2, [r2, #16]
 800b592:	0852      	lsrs	r2, r2, #1
 800b594:	3a01      	subs	r2, #1
 800b596:	0652      	lsls	r2, r2, #25
 800b598:	430a      	orrs	r2, r1
 800b59a:	4916      	ldr	r1, [pc, #88]	; (800b5f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800b59c:	4313      	orrs	r3, r2
 800b59e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800b5a0:	4b14      	ldr	r3, [pc, #80]	; (800b5f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	4a13      	ldr	r2, [pc, #76]	; (800b5f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800b5a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b5aa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b5ac:	f7fc f9ca 	bl	8007944 <HAL_GetTick>
 800b5b0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800b5b2:	e009      	b.n	800b5c8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800b5b4:	f7fc f9c6 	bl	8007944 <HAL_GetTick>
 800b5b8:	4602      	mov	r2, r0
 800b5ba:	68bb      	ldr	r3, [r7, #8]
 800b5bc:	1ad3      	subs	r3, r2, r3
 800b5be:	2b02      	cmp	r3, #2
 800b5c0:	d902      	bls.n	800b5c8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800b5c2:	2303      	movs	r3, #3
 800b5c4:	73fb      	strb	r3, [r7, #15]
          break;
 800b5c6:	e005      	b.n	800b5d4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800b5c8:	4b0a      	ldr	r3, [pc, #40]	; (800b5f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d0ef      	beq.n	800b5b4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800b5d4:	7bfb      	ldrb	r3, [r7, #15]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d106      	bne.n	800b5e8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800b5da:	4b06      	ldr	r3, [pc, #24]	; (800b5f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800b5dc:	695a      	ldr	r2, [r3, #20]
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	695b      	ldr	r3, [r3, #20]
 800b5e2:	4904      	ldr	r1, [pc, #16]	; (800b5f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800b5e4:	4313      	orrs	r3, r2
 800b5e6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800b5e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	3710      	adds	r7, #16
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	bd80      	pop	{r7, pc}
 800b5f2:	bf00      	nop
 800b5f4:	40021000 	.word	0x40021000

0800b5f8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800b5f8:	b580      	push	{r7, lr}
 800b5fa:	b084      	sub	sp, #16
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800b600:	2301      	movs	r3, #1
 800b602:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	2b00      	cmp	r3, #0
 800b608:	d06c      	beq.n	800b6e4 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800b610:	b2db      	uxtb	r3, r3
 800b612:	2b00      	cmp	r3, #0
 800b614:	d106      	bne.n	800b624 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	2200      	movs	r2, #0
 800b61a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800b61e:	6878      	ldr	r0, [r7, #4]
 800b620:	f7fa ff54 	bl	80064cc <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	2202      	movs	r2, #2
 800b628:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	22ca      	movs	r2, #202	; 0xca
 800b632:	625a      	str	r2, [r3, #36]	; 0x24
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	2253      	movs	r2, #83	; 0x53
 800b63a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800b63c:	6878      	ldr	r0, [r7, #4]
 800b63e:	f000 fa49 	bl	800bad4 <RTC_EnterInitMode>
 800b642:	4603      	mov	r3, r0
 800b644:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800b646:	7bfb      	ldrb	r3, [r7, #15]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d14b      	bne.n	800b6e4 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	689b      	ldr	r3, [r3, #8]
 800b652:	687a      	ldr	r2, [r7, #4]
 800b654:	6812      	ldr	r2, [r2, #0]
 800b656:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b65a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b65e:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	6899      	ldr	r1, [r3, #8]
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	685a      	ldr	r2, [r3, #4]
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	691b      	ldr	r3, [r3, #16]
 800b66e:	431a      	orrs	r2, r3
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	699b      	ldr	r3, [r3, #24]
 800b674:	431a      	orrs	r2, r3
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	430a      	orrs	r2, r1
 800b67c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	687a      	ldr	r2, [r7, #4]
 800b684:	68d2      	ldr	r2, [r2, #12]
 800b686:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	6919      	ldr	r1, [r3, #16]
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	689b      	ldr	r3, [r3, #8]
 800b692:	041a      	lsls	r2, r3, #16
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	430a      	orrs	r2, r1
 800b69a:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800b69c:	6878      	ldr	r0, [r7, #4]
 800b69e:	f000 fa4d 	bl	800bb3c <RTC_ExitInitMode>
 800b6a2:	4603      	mov	r3, r0
 800b6a4:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800b6a6:	7bfb      	ldrb	r3, [r7, #15]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d11b      	bne.n	800b6e4 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	f022 0203 	bic.w	r2, r2, #3
 800b6ba:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	69da      	ldr	r2, [r3, #28]
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	695b      	ldr	r3, [r3, #20]
 800b6ca:	431a      	orrs	r2, r3
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	430a      	orrs	r2, r1
 800b6d2:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	22ff      	movs	r2, #255	; 0xff
 800b6da:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	2201      	movs	r2, #1
 800b6e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 800b6e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	3710      	adds	r7, #16
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	bd80      	pop	{r7, pc}

0800b6ee <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800b6ee:	b590      	push	{r4, r7, lr}
 800b6f0:	b087      	sub	sp, #28
 800b6f2:	af00      	add	r7, sp, #0
 800b6f4:	60f8      	str	r0, [r7, #12]
 800b6f6:	60b9      	str	r1, [r7, #8]
 800b6f8:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b700:	2b01      	cmp	r3, #1
 800b702:	d101      	bne.n	800b708 <HAL_RTC_SetTime+0x1a>
 800b704:	2302      	movs	r3, #2
 800b706:	e08b      	b.n	800b820 <HAL_RTC_SetTime+0x132>
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	2201      	movs	r2, #1
 800b70c:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	2202      	movs	r2, #2
 800b714:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	22ca      	movs	r2, #202	; 0xca
 800b71e:	625a      	str	r2, [r3, #36]	; 0x24
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	2253      	movs	r2, #83	; 0x53
 800b726:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800b728:	68f8      	ldr	r0, [r7, #12]
 800b72a:	f000 f9d3 	bl	800bad4 <RTC_EnterInitMode>
 800b72e:	4603      	mov	r3, r0
 800b730:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800b732:	7cfb      	ldrb	r3, [r7, #19]
 800b734:	2b00      	cmp	r3, #0
 800b736:	d163      	bne.n	800b800 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d126      	bne.n	800b78c <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	689b      	ldr	r3, [r3, #8]
 800b744:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d102      	bne.n	800b752 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800b74c:	68bb      	ldr	r3, [r7, #8]
 800b74e:	2200      	movs	r2, #0
 800b750:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800b752:	68bb      	ldr	r3, [r7, #8]
 800b754:	781b      	ldrb	r3, [r3, #0]
 800b756:	4618      	mov	r0, r3
 800b758:	f000 fa2e 	bl	800bbb8 <RTC_ByteToBcd2>
 800b75c:	4603      	mov	r3, r0
 800b75e:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b760:	68bb      	ldr	r3, [r7, #8]
 800b762:	785b      	ldrb	r3, [r3, #1]
 800b764:	4618      	mov	r0, r3
 800b766:	f000 fa27 	bl	800bbb8 <RTC_ByteToBcd2>
 800b76a:	4603      	mov	r3, r0
 800b76c:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800b76e:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800b770:	68bb      	ldr	r3, [r7, #8]
 800b772:	789b      	ldrb	r3, [r3, #2]
 800b774:	4618      	mov	r0, r3
 800b776:	f000 fa1f 	bl	800bbb8 <RTC_ByteToBcd2>
 800b77a:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b77c:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800b780:	68bb      	ldr	r3, [r7, #8]
 800b782:	78db      	ldrb	r3, [r3, #3]
 800b784:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800b786:	4313      	orrs	r3, r2
 800b788:	617b      	str	r3, [r7, #20]
 800b78a:	e018      	b.n	800b7be <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	689b      	ldr	r3, [r3, #8]
 800b792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b796:	2b00      	cmp	r3, #0
 800b798:	d102      	bne.n	800b7a0 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800b79a:	68bb      	ldr	r3, [r7, #8]
 800b79c:	2200      	movs	r2, #0
 800b79e:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800b7a0:	68bb      	ldr	r3, [r7, #8]
 800b7a2:	781b      	ldrb	r3, [r3, #0]
 800b7a4:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b7a6:	68bb      	ldr	r3, [r7, #8]
 800b7a8:	785b      	ldrb	r3, [r3, #1]
 800b7aa:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800b7ac:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800b7ae:	68ba      	ldr	r2, [r7, #8]
 800b7b0:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b7b2:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800b7b4:	68bb      	ldr	r3, [r7, #8]
 800b7b6:	78db      	ldrb	r3, [r3, #3]
 800b7b8:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800b7ba:	4313      	orrs	r3, r2
 800b7bc:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	681a      	ldr	r2, [r3, #0]
 800b7c2:	697b      	ldr	r3, [r7, #20]
 800b7c4:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800b7c8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800b7cc:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	689a      	ldr	r2, [r3, #8]
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b7dc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	6899      	ldr	r1, [r3, #8]
 800b7e4:	68bb      	ldr	r3, [r7, #8]
 800b7e6:	68da      	ldr	r2, [r3, #12]
 800b7e8:	68bb      	ldr	r3, [r7, #8]
 800b7ea:	691b      	ldr	r3, [r3, #16]
 800b7ec:	431a      	orrs	r2, r3
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	430a      	orrs	r2, r1
 800b7f4:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800b7f6:	68f8      	ldr	r0, [r7, #12]
 800b7f8:	f000 f9a0 	bl	800bb3c <RTC_ExitInitMode>
 800b7fc:	4603      	mov	r3, r0
 800b7fe:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	22ff      	movs	r2, #255	; 0xff
 800b806:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800b808:	7cfb      	ldrb	r3, [r7, #19]
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d103      	bne.n	800b816 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	2201      	movs	r2, #1
 800b812:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	2200      	movs	r2, #0
 800b81a:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800b81e:	7cfb      	ldrb	r3, [r7, #19]
}
 800b820:	4618      	mov	r0, r3
 800b822:	371c      	adds	r7, #28
 800b824:	46bd      	mov	sp, r7
 800b826:	bd90      	pop	{r4, r7, pc}

0800b828 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800b828:	b580      	push	{r7, lr}
 800b82a:	b086      	sub	sp, #24
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	60f8      	str	r0, [r7, #12]
 800b830:	60b9      	str	r1, [r7, #8]
 800b832:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b83a:	68bb      	ldr	r3, [r7, #8]
 800b83c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	691b      	ldr	r3, [r3, #16]
 800b844:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800b848:	68bb      	ldr	r3, [r7, #8]
 800b84a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800b856:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800b85a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 800b85c:	697b      	ldr	r3, [r7, #20]
 800b85e:	0c1b      	lsrs	r3, r3, #16
 800b860:	b2db      	uxtb	r3, r3
 800b862:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b866:	b2da      	uxtb	r2, r3
 800b868:	68bb      	ldr	r3, [r7, #8]
 800b86a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800b86c:	697b      	ldr	r3, [r7, #20]
 800b86e:	0a1b      	lsrs	r3, r3, #8
 800b870:	b2db      	uxtb	r3, r3
 800b872:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b876:	b2da      	uxtb	r2, r3
 800b878:	68bb      	ldr	r3, [r7, #8]
 800b87a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 800b87c:	697b      	ldr	r3, [r7, #20]
 800b87e:	b2db      	uxtb	r3, r3
 800b880:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b884:	b2da      	uxtb	r2, r3
 800b886:	68bb      	ldr	r3, [r7, #8]
 800b888:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800b88a:	697b      	ldr	r3, [r7, #20]
 800b88c:	0d9b      	lsrs	r3, r3, #22
 800b88e:	b2db      	uxtb	r3, r3
 800b890:	f003 0301 	and.w	r3, r3, #1
 800b894:	b2da      	uxtb	r2, r3
 800b896:	68bb      	ldr	r3, [r7, #8]
 800b898:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d11a      	bne.n	800b8d6 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800b8a0:	68bb      	ldr	r3, [r7, #8]
 800b8a2:	781b      	ldrb	r3, [r3, #0]
 800b8a4:	4618      	mov	r0, r3
 800b8a6:	f000 f9a7 	bl	800bbf8 <RTC_Bcd2ToByte>
 800b8aa:	4603      	mov	r3, r0
 800b8ac:	461a      	mov	r2, r3
 800b8ae:	68bb      	ldr	r3, [r7, #8]
 800b8b0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800b8b2:	68bb      	ldr	r3, [r7, #8]
 800b8b4:	785b      	ldrb	r3, [r3, #1]
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	f000 f99e 	bl	800bbf8 <RTC_Bcd2ToByte>
 800b8bc:	4603      	mov	r3, r0
 800b8be:	461a      	mov	r2, r3
 800b8c0:	68bb      	ldr	r3, [r7, #8]
 800b8c2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800b8c4:	68bb      	ldr	r3, [r7, #8]
 800b8c6:	789b      	ldrb	r3, [r3, #2]
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	f000 f995 	bl	800bbf8 <RTC_Bcd2ToByte>
 800b8ce:	4603      	mov	r3, r0
 800b8d0:	461a      	mov	r2, r3
 800b8d2:	68bb      	ldr	r3, [r7, #8]
 800b8d4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800b8d6:	2300      	movs	r3, #0
}
 800b8d8:	4618      	mov	r0, r3
 800b8da:	3718      	adds	r7, #24
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	bd80      	pop	{r7, pc}

0800b8e0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800b8e0:	b590      	push	{r4, r7, lr}
 800b8e2:	b087      	sub	sp, #28
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	60f8      	str	r0, [r7, #12]
 800b8e8:	60b9      	str	r1, [r7, #8]
 800b8ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b8f2:	2b01      	cmp	r3, #1
 800b8f4:	d101      	bne.n	800b8fa <HAL_RTC_SetDate+0x1a>
 800b8f6:	2302      	movs	r3, #2
 800b8f8:	e075      	b.n	800b9e6 <HAL_RTC_SetDate+0x106>
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	2201      	movs	r2, #1
 800b8fe:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	2202      	movs	r2, #2
 800b906:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d10e      	bne.n	800b92e <HAL_RTC_SetDate+0x4e>
 800b910:	68bb      	ldr	r3, [r7, #8]
 800b912:	785b      	ldrb	r3, [r3, #1]
 800b914:	f003 0310 	and.w	r3, r3, #16
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d008      	beq.n	800b92e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800b91c:	68bb      	ldr	r3, [r7, #8]
 800b91e:	785b      	ldrb	r3, [r3, #1]
 800b920:	f023 0310 	bic.w	r3, r3, #16
 800b924:	b2db      	uxtb	r3, r3
 800b926:	330a      	adds	r3, #10
 800b928:	b2da      	uxtb	r2, r3
 800b92a:	68bb      	ldr	r3, [r7, #8]
 800b92c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	2b00      	cmp	r3, #0
 800b932:	d11c      	bne.n	800b96e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800b934:	68bb      	ldr	r3, [r7, #8]
 800b936:	78db      	ldrb	r3, [r3, #3]
 800b938:	4618      	mov	r0, r3
 800b93a:	f000 f93d 	bl	800bbb8 <RTC_ByteToBcd2>
 800b93e:	4603      	mov	r3, r0
 800b940:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800b942:	68bb      	ldr	r3, [r7, #8]
 800b944:	785b      	ldrb	r3, [r3, #1]
 800b946:	4618      	mov	r0, r3
 800b948:	f000 f936 	bl	800bbb8 <RTC_ByteToBcd2>
 800b94c:	4603      	mov	r3, r0
 800b94e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800b950:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800b952:	68bb      	ldr	r3, [r7, #8]
 800b954:	789b      	ldrb	r3, [r3, #2]
 800b956:	4618      	mov	r0, r3
 800b958:	f000 f92e 	bl	800bbb8 <RTC_ByteToBcd2>
 800b95c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800b95e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800b962:	68bb      	ldr	r3, [r7, #8]
 800b964:	781b      	ldrb	r3, [r3, #0]
 800b966:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800b968:	4313      	orrs	r3, r2
 800b96a:	617b      	str	r3, [r7, #20]
 800b96c:	e00e      	b.n	800b98c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800b96e:	68bb      	ldr	r3, [r7, #8]
 800b970:	78db      	ldrb	r3, [r3, #3]
 800b972:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800b974:	68bb      	ldr	r3, [r7, #8]
 800b976:	785b      	ldrb	r3, [r3, #1]
 800b978:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800b97a:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800b97c:	68ba      	ldr	r2, [r7, #8]
 800b97e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800b980:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800b982:	68bb      	ldr	r3, [r7, #8]
 800b984:	781b      	ldrb	r3, [r3, #0]
 800b986:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800b988:	4313      	orrs	r3, r2
 800b98a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	22ca      	movs	r2, #202	; 0xca
 800b992:	625a      	str	r2, [r3, #36]	; 0x24
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	2253      	movs	r2, #83	; 0x53
 800b99a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800b99c:	68f8      	ldr	r0, [r7, #12]
 800b99e:	f000 f899 	bl	800bad4 <RTC_EnterInitMode>
 800b9a2:	4603      	mov	r3, r0
 800b9a4:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800b9a6:	7cfb      	ldrb	r3, [r7, #19]
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d10c      	bne.n	800b9c6 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	681a      	ldr	r2, [r3, #0]
 800b9b0:	697b      	ldr	r3, [r7, #20]
 800b9b2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b9b6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b9ba:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800b9bc:	68f8      	ldr	r0, [r7, #12]
 800b9be:	f000 f8bd 	bl	800bb3c <RTC_ExitInitMode>
 800b9c2:	4603      	mov	r3, r0
 800b9c4:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	22ff      	movs	r2, #255	; 0xff
 800b9cc:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800b9ce:	7cfb      	ldrb	r3, [r7, #19]
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d103      	bne.n	800b9dc <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	2201      	movs	r2, #1
 800b9d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	2200      	movs	r2, #0
 800b9e0:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800b9e4:	7cfb      	ldrb	r3, [r7, #19]
}
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	371c      	adds	r7, #28
 800b9ea:	46bd      	mov	sp, r7
 800b9ec:	bd90      	pop	{r4, r7, pc}

0800b9ee <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800b9ee:	b580      	push	{r7, lr}
 800b9f0:	b086      	sub	sp, #24
 800b9f2:	af00      	add	r7, sp, #0
 800b9f4:	60f8      	str	r0, [r7, #12]
 800b9f6:	60b9      	str	r1, [r7, #8]
 800b9f8:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	685b      	ldr	r3, [r3, #4]
 800ba00:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ba04:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800ba08:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800ba0a:	697b      	ldr	r3, [r7, #20]
 800ba0c:	0c1b      	lsrs	r3, r3, #16
 800ba0e:	b2da      	uxtb	r2, r3
 800ba10:	68bb      	ldr	r3, [r7, #8]
 800ba12:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800ba14:	697b      	ldr	r3, [r7, #20]
 800ba16:	0a1b      	lsrs	r3, r3, #8
 800ba18:	b2db      	uxtb	r3, r3
 800ba1a:	f003 031f 	and.w	r3, r3, #31
 800ba1e:	b2da      	uxtb	r2, r3
 800ba20:	68bb      	ldr	r3, [r7, #8]
 800ba22:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800ba24:	697b      	ldr	r3, [r7, #20]
 800ba26:	b2db      	uxtb	r3, r3
 800ba28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ba2c:	b2da      	uxtb	r2, r3
 800ba2e:	68bb      	ldr	r3, [r7, #8]
 800ba30:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 800ba32:	697b      	ldr	r3, [r7, #20]
 800ba34:	0b5b      	lsrs	r3, r3, #13
 800ba36:	b2db      	uxtb	r3, r3
 800ba38:	f003 0307 	and.w	r3, r3, #7
 800ba3c:	b2da      	uxtb	r2, r3
 800ba3e:	68bb      	ldr	r3, [r7, #8]
 800ba40:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d11a      	bne.n	800ba7e <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800ba48:	68bb      	ldr	r3, [r7, #8]
 800ba4a:	78db      	ldrb	r3, [r3, #3]
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	f000 f8d3 	bl	800bbf8 <RTC_Bcd2ToByte>
 800ba52:	4603      	mov	r3, r0
 800ba54:	461a      	mov	r2, r3
 800ba56:	68bb      	ldr	r3, [r7, #8]
 800ba58:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800ba5a:	68bb      	ldr	r3, [r7, #8]
 800ba5c:	785b      	ldrb	r3, [r3, #1]
 800ba5e:	4618      	mov	r0, r3
 800ba60:	f000 f8ca 	bl	800bbf8 <RTC_Bcd2ToByte>
 800ba64:	4603      	mov	r3, r0
 800ba66:	461a      	mov	r2, r3
 800ba68:	68bb      	ldr	r3, [r7, #8]
 800ba6a:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800ba6c:	68bb      	ldr	r3, [r7, #8]
 800ba6e:	789b      	ldrb	r3, [r3, #2]
 800ba70:	4618      	mov	r0, r3
 800ba72:	f000 f8c1 	bl	800bbf8 <RTC_Bcd2ToByte>
 800ba76:	4603      	mov	r3, r0
 800ba78:	461a      	mov	r2, r3
 800ba7a:	68bb      	ldr	r3, [r7, #8]
 800ba7c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800ba7e:	2300      	movs	r3, #0
}
 800ba80:	4618      	mov	r0, r3
 800ba82:	3718      	adds	r7, #24
 800ba84:	46bd      	mov	sp, r7
 800ba86:	bd80      	pop	{r7, pc}

0800ba88 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800ba88:	b580      	push	{r7, lr}
 800ba8a:	b084      	sub	sp, #16
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	68da      	ldr	r2, [r3, #12]
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800ba9e:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 800baa0:	f7fb ff50 	bl	8007944 <HAL_GetTick>
 800baa4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800baa6:	e009      	b.n	800babc <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800baa8:	f7fb ff4c 	bl	8007944 <HAL_GetTick>
 800baac:	4602      	mov	r2, r0
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	1ad3      	subs	r3, r2, r3
 800bab2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bab6:	d901      	bls.n	800babc <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800bab8:	2303      	movs	r3, #3
 800baba:	e007      	b.n	800bacc <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	68db      	ldr	r3, [r3, #12]
 800bac2:	f003 0320 	and.w	r3, r3, #32
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d0ee      	beq.n	800baa8 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800baca:	2300      	movs	r3, #0
}
 800bacc:	4618      	mov	r0, r3
 800bace:	3710      	adds	r7, #16
 800bad0:	46bd      	mov	sp, r7
 800bad2:	bd80      	pop	{r7, pc}

0800bad4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b084      	sub	sp, #16
 800bad8:	af00      	add	r7, sp, #0
 800bada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800badc:	2300      	movs	r3, #0
 800bade:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	68db      	ldr	r3, [r3, #12]
 800bae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800baea:	2b00      	cmp	r3, #0
 800baec:	d120      	bne.n	800bb30 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800baf6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800baf8:	f7fb ff24 	bl	8007944 <HAL_GetTick>
 800bafc:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800bafe:	e00d      	b.n	800bb1c <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800bb00:	f7fb ff20 	bl	8007944 <HAL_GetTick>
 800bb04:	4602      	mov	r2, r0
 800bb06:	68bb      	ldr	r3, [r7, #8]
 800bb08:	1ad3      	subs	r3, r2, r3
 800bb0a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bb0e:	d905      	bls.n	800bb1c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800bb10:	2303      	movs	r3, #3
 800bb12:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	2203      	movs	r2, #3
 800bb18:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	68db      	ldr	r3, [r3, #12]
 800bb22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d102      	bne.n	800bb30 <RTC_EnterInitMode+0x5c>
 800bb2a:	7bfb      	ldrb	r3, [r7, #15]
 800bb2c:	2b03      	cmp	r3, #3
 800bb2e:	d1e7      	bne.n	800bb00 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800bb30:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb32:	4618      	mov	r0, r3
 800bb34:	3710      	adds	r7, #16
 800bb36:	46bd      	mov	sp, r7
 800bb38:	bd80      	pop	{r7, pc}
	...

0800bb3c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800bb3c:	b580      	push	{r7, lr}
 800bb3e:	b084      	sub	sp, #16
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bb44:	2300      	movs	r3, #0
 800bb46:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800bb48:	4b1a      	ldr	r3, [pc, #104]	; (800bbb4 <RTC_ExitInitMode+0x78>)
 800bb4a:	68db      	ldr	r3, [r3, #12]
 800bb4c:	4a19      	ldr	r2, [pc, #100]	; (800bbb4 <RTC_ExitInitMode+0x78>)
 800bb4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bb52:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800bb54:	4b17      	ldr	r3, [pc, #92]	; (800bbb4 <RTC_ExitInitMode+0x78>)
 800bb56:	689b      	ldr	r3, [r3, #8]
 800bb58:	f003 0320 	and.w	r3, r3, #32
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d10c      	bne.n	800bb7a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800bb60:	6878      	ldr	r0, [r7, #4]
 800bb62:	f7ff ff91 	bl	800ba88 <HAL_RTC_WaitForSynchro>
 800bb66:	4603      	mov	r3, r0
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d01e      	beq.n	800bbaa <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	2203      	movs	r2, #3
 800bb70:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800bb74:	2303      	movs	r3, #3
 800bb76:	73fb      	strb	r3, [r7, #15]
 800bb78:	e017      	b.n	800bbaa <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800bb7a:	4b0e      	ldr	r3, [pc, #56]	; (800bbb4 <RTC_ExitInitMode+0x78>)
 800bb7c:	689b      	ldr	r3, [r3, #8]
 800bb7e:	4a0d      	ldr	r2, [pc, #52]	; (800bbb4 <RTC_ExitInitMode+0x78>)
 800bb80:	f023 0320 	bic.w	r3, r3, #32
 800bb84:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800bb86:	6878      	ldr	r0, [r7, #4]
 800bb88:	f7ff ff7e 	bl	800ba88 <HAL_RTC_WaitForSynchro>
 800bb8c:	4603      	mov	r3, r0
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d005      	beq.n	800bb9e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	2203      	movs	r2, #3
 800bb96:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800bb9a:	2303      	movs	r3, #3
 800bb9c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800bb9e:	4b05      	ldr	r3, [pc, #20]	; (800bbb4 <RTC_ExitInitMode+0x78>)
 800bba0:	689b      	ldr	r3, [r3, #8]
 800bba2:	4a04      	ldr	r2, [pc, #16]	; (800bbb4 <RTC_ExitInitMode+0x78>)
 800bba4:	f043 0320 	orr.w	r3, r3, #32
 800bba8:	6093      	str	r3, [r2, #8]
  }

  return status;
 800bbaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbac:	4618      	mov	r0, r3
 800bbae:	3710      	adds	r7, #16
 800bbb0:	46bd      	mov	sp, r7
 800bbb2:	bd80      	pop	{r7, pc}
 800bbb4:	40002800 	.word	0x40002800

0800bbb8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800bbb8:	b480      	push	{r7}
 800bbba:	b085      	sub	sp, #20
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	4603      	mov	r3, r0
 800bbc0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800bbc2:	2300      	movs	r3, #0
 800bbc4:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 800bbc6:	79fb      	ldrb	r3, [r7, #7]
 800bbc8:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 800bbca:	e005      	b.n	800bbd8 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	3301      	adds	r3, #1
 800bbd0:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 800bbd2:	7afb      	ldrb	r3, [r7, #11]
 800bbd4:	3b0a      	subs	r3, #10
 800bbd6:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 800bbd8:	7afb      	ldrb	r3, [r7, #11]
 800bbda:	2b09      	cmp	r3, #9
 800bbdc:	d8f6      	bhi.n	800bbcc <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	b2db      	uxtb	r3, r3
 800bbe2:	011b      	lsls	r3, r3, #4
 800bbe4:	b2da      	uxtb	r2, r3
 800bbe6:	7afb      	ldrb	r3, [r7, #11]
 800bbe8:	4313      	orrs	r3, r2
 800bbea:	b2db      	uxtb	r3, r3
}
 800bbec:	4618      	mov	r0, r3
 800bbee:	3714      	adds	r7, #20
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf6:	4770      	bx	lr

0800bbf8 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800bbf8:	b480      	push	{r7}
 800bbfa:	b085      	sub	sp, #20
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	4603      	mov	r3, r0
 800bc00:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800bc02:	79fb      	ldrb	r3, [r7, #7]
 800bc04:	091b      	lsrs	r3, r3, #4
 800bc06:	b2db      	uxtb	r3, r3
 800bc08:	461a      	mov	r2, r3
 800bc0a:	0092      	lsls	r2, r2, #2
 800bc0c:	4413      	add	r3, r2
 800bc0e:	005b      	lsls	r3, r3, #1
 800bc10:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800bc12:	79fb      	ldrb	r3, [r7, #7]
 800bc14:	f003 030f 	and.w	r3, r3, #15
 800bc18:	b2da      	uxtb	r2, r3
 800bc1a:	7bfb      	ldrb	r3, [r7, #15]
 800bc1c:	4413      	add	r3, r2
 800bc1e:	b2db      	uxtb	r3, r3
}
 800bc20:	4618      	mov	r0, r3
 800bc22:	3714      	adds	r7, #20
 800bc24:	46bd      	mov	sp, r7
 800bc26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2a:	4770      	bx	lr

0800bc2c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800bc2c:	b580      	push	{r7, lr}
 800bc2e:	b084      	sub	sp, #16
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d101      	bne.n	800bc3e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800bc3a:	2301      	movs	r3, #1
 800bc3c:	e095      	b.n	800bd6a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d108      	bne.n	800bc58 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	685b      	ldr	r3, [r3, #4]
 800bc4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bc4e:	d009      	beq.n	800bc64 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	2200      	movs	r2, #0
 800bc54:	61da      	str	r2, [r3, #28]
 800bc56:	e005      	b.n	800bc64 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	2200      	movs	r2, #0
 800bc5c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	2200      	movs	r2, #0
 800bc62:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	2200      	movs	r2, #0
 800bc68:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800bc70:	b2db      	uxtb	r3, r3
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d106      	bne.n	800bc84 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	2200      	movs	r2, #0
 800bc7a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800bc7e:	6878      	ldr	r0, [r7, #4]
 800bc80:	f7fa fc56 	bl	8006530 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	2202      	movs	r2, #2
 800bc88:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	681a      	ldr	r2, [r3, #0]
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bc9a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	68db      	ldr	r3, [r3, #12]
 800bca0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bca4:	d902      	bls.n	800bcac <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800bca6:	2300      	movs	r3, #0
 800bca8:	60fb      	str	r3, [r7, #12]
 800bcaa:	e002      	b.n	800bcb2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800bcac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bcb0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	68db      	ldr	r3, [r3, #12]
 800bcb6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800bcba:	d007      	beq.n	800bccc <HAL_SPI_Init+0xa0>
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	68db      	ldr	r3, [r3, #12]
 800bcc0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bcc4:	d002      	beq.n	800bccc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	2200      	movs	r2, #0
 800bcca:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	685b      	ldr	r3, [r3, #4]
 800bcd0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	689b      	ldr	r3, [r3, #8]
 800bcd8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800bcdc:	431a      	orrs	r2, r3
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	691b      	ldr	r3, [r3, #16]
 800bce2:	f003 0302 	and.w	r3, r3, #2
 800bce6:	431a      	orrs	r2, r3
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	695b      	ldr	r3, [r3, #20]
 800bcec:	f003 0301 	and.w	r3, r3, #1
 800bcf0:	431a      	orrs	r2, r3
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	699b      	ldr	r3, [r3, #24]
 800bcf6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bcfa:	431a      	orrs	r2, r3
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	69db      	ldr	r3, [r3, #28]
 800bd00:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bd04:	431a      	orrs	r2, r3
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	6a1b      	ldr	r3, [r3, #32]
 800bd0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd0e:	ea42 0103 	orr.w	r1, r2, r3
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd16:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	430a      	orrs	r2, r1
 800bd20:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	699b      	ldr	r3, [r3, #24]
 800bd26:	0c1b      	lsrs	r3, r3, #16
 800bd28:	f003 0204 	and.w	r2, r3, #4
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd30:	f003 0310 	and.w	r3, r3, #16
 800bd34:	431a      	orrs	r2, r3
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd3a:	f003 0308 	and.w	r3, r3, #8
 800bd3e:	431a      	orrs	r2, r3
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	68db      	ldr	r3, [r3, #12]
 800bd44:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800bd48:	ea42 0103 	orr.w	r1, r2, r3
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	430a      	orrs	r2, r1
 800bd58:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	2200      	movs	r2, #0
 800bd5e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	2201      	movs	r2, #1
 800bd64:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800bd68:	2300      	movs	r3, #0
}
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	3710      	adds	r7, #16
 800bd6e:	46bd      	mov	sp, r7
 800bd70:	bd80      	pop	{r7, pc}

0800bd72 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bd72:	b580      	push	{r7, lr}
 800bd74:	b088      	sub	sp, #32
 800bd76:	af00      	add	r7, sp, #0
 800bd78:	60f8      	str	r0, [r7, #12]
 800bd7a:	60b9      	str	r1, [r7, #8]
 800bd7c:	603b      	str	r3, [r7, #0]
 800bd7e:	4613      	mov	r3, r2
 800bd80:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800bd82:	2300      	movs	r3, #0
 800bd84:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800bd8c:	2b01      	cmp	r3, #1
 800bd8e:	d101      	bne.n	800bd94 <HAL_SPI_Transmit+0x22>
 800bd90:	2302      	movs	r3, #2
 800bd92:	e158      	b.n	800c046 <HAL_SPI_Transmit+0x2d4>
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	2201      	movs	r2, #1
 800bd98:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bd9c:	f7fb fdd2 	bl	8007944 <HAL_GetTick>
 800bda0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800bda2:	88fb      	ldrh	r3, [r7, #6]
 800bda4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800bdac:	b2db      	uxtb	r3, r3
 800bdae:	2b01      	cmp	r3, #1
 800bdb0:	d002      	beq.n	800bdb8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800bdb2:	2302      	movs	r3, #2
 800bdb4:	77fb      	strb	r3, [r7, #31]
    goto error;
 800bdb6:	e13d      	b.n	800c034 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800bdb8:	68bb      	ldr	r3, [r7, #8]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d002      	beq.n	800bdc4 <HAL_SPI_Transmit+0x52>
 800bdbe:	88fb      	ldrh	r3, [r7, #6]
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d102      	bne.n	800bdca <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800bdc4:	2301      	movs	r3, #1
 800bdc6:	77fb      	strb	r3, [r7, #31]
    goto error;
 800bdc8:	e134      	b.n	800c034 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	2203      	movs	r2, #3
 800bdce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	2200      	movs	r2, #0
 800bdd6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	68ba      	ldr	r2, [r7, #8]
 800bddc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	88fa      	ldrh	r2, [r7, #6]
 800bde2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	88fa      	ldrh	r2, [r7, #6]
 800bde8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	2200      	movs	r2, #0
 800bdee:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	2200      	movs	r2, #0
 800bdf4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	2200      	movs	r2, #0
 800bdfc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	2200      	movs	r2, #0
 800be04:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	2200      	movs	r2, #0
 800be0a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	689b      	ldr	r3, [r3, #8]
 800be10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800be14:	d10f      	bne.n	800be36 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	681a      	ldr	r2, [r3, #0]
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800be24:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	681a      	ldr	r2, [r3, #0]
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800be34:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be40:	2b40      	cmp	r3, #64	; 0x40
 800be42:	d007      	beq.n	800be54 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	681a      	ldr	r2, [r3, #0]
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800be52:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	68db      	ldr	r3, [r3, #12]
 800be58:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800be5c:	d94b      	bls.n	800bef6 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	685b      	ldr	r3, [r3, #4]
 800be62:	2b00      	cmp	r3, #0
 800be64:	d002      	beq.n	800be6c <HAL_SPI_Transmit+0xfa>
 800be66:	8afb      	ldrh	r3, [r7, #22]
 800be68:	2b01      	cmp	r3, #1
 800be6a:	d13e      	bne.n	800beea <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be70:	881a      	ldrh	r2, [r3, #0]
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be7c:	1c9a      	adds	r2, r3, #2
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800be86:	b29b      	uxth	r3, r3
 800be88:	3b01      	subs	r3, #1
 800be8a:	b29a      	uxth	r2, r3
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800be90:	e02b      	b.n	800beea <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	689b      	ldr	r3, [r3, #8]
 800be98:	f003 0302 	and.w	r3, r3, #2
 800be9c:	2b02      	cmp	r3, #2
 800be9e:	d112      	bne.n	800bec6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bea4:	881a      	ldrh	r2, [r3, #0]
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800beb0:	1c9a      	adds	r2, r3, #2
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800beba:	b29b      	uxth	r3, r3
 800bebc:	3b01      	subs	r3, #1
 800bebe:	b29a      	uxth	r2, r3
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	87da      	strh	r2, [r3, #62]	; 0x3e
 800bec4:	e011      	b.n	800beea <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bec6:	f7fb fd3d 	bl	8007944 <HAL_GetTick>
 800beca:	4602      	mov	r2, r0
 800becc:	69bb      	ldr	r3, [r7, #24]
 800bece:	1ad3      	subs	r3, r2, r3
 800bed0:	683a      	ldr	r2, [r7, #0]
 800bed2:	429a      	cmp	r2, r3
 800bed4:	d803      	bhi.n	800bede <HAL_SPI_Transmit+0x16c>
 800bed6:	683b      	ldr	r3, [r7, #0]
 800bed8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bedc:	d102      	bne.n	800bee4 <HAL_SPI_Transmit+0x172>
 800bede:	683b      	ldr	r3, [r7, #0]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d102      	bne.n	800beea <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800bee4:	2303      	movs	r3, #3
 800bee6:	77fb      	strb	r3, [r7, #31]
          goto error;
 800bee8:	e0a4      	b.n	800c034 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800beee:	b29b      	uxth	r3, r3
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d1ce      	bne.n	800be92 <HAL_SPI_Transmit+0x120>
 800bef4:	e07c      	b.n	800bff0 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	685b      	ldr	r3, [r3, #4]
 800befa:	2b00      	cmp	r3, #0
 800befc:	d002      	beq.n	800bf04 <HAL_SPI_Transmit+0x192>
 800befe:	8afb      	ldrh	r3, [r7, #22]
 800bf00:	2b01      	cmp	r3, #1
 800bf02:	d170      	bne.n	800bfe6 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bf08:	b29b      	uxth	r3, r3
 800bf0a:	2b01      	cmp	r3, #1
 800bf0c:	d912      	bls.n	800bf34 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf12:	881a      	ldrh	r2, [r3, #0]
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf1e:	1c9a      	adds	r2, r3, #2
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bf28:	b29b      	uxth	r3, r3
 800bf2a:	3b02      	subs	r3, #2
 800bf2c:	b29a      	uxth	r2, r3
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	87da      	strh	r2, [r3, #62]	; 0x3e
 800bf32:	e058      	b.n	800bfe6 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	330c      	adds	r3, #12
 800bf3e:	7812      	ldrb	r2, [r2, #0]
 800bf40:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf46:	1c5a      	adds	r2, r3, #1
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bf50:	b29b      	uxth	r3, r3
 800bf52:	3b01      	subs	r3, #1
 800bf54:	b29a      	uxth	r2, r3
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800bf5a:	e044      	b.n	800bfe6 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	689b      	ldr	r3, [r3, #8]
 800bf62:	f003 0302 	and.w	r3, r3, #2
 800bf66:	2b02      	cmp	r3, #2
 800bf68:	d12b      	bne.n	800bfc2 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bf6e:	b29b      	uxth	r3, r3
 800bf70:	2b01      	cmp	r3, #1
 800bf72:	d912      	bls.n	800bf9a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf78:	881a      	ldrh	r2, [r3, #0]
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf84:	1c9a      	adds	r2, r3, #2
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bf8e:	b29b      	uxth	r3, r3
 800bf90:	3b02      	subs	r3, #2
 800bf92:	b29a      	uxth	r2, r3
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	87da      	strh	r2, [r3, #62]	; 0x3e
 800bf98:	e025      	b.n	800bfe6 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	330c      	adds	r3, #12
 800bfa4:	7812      	ldrb	r2, [r2, #0]
 800bfa6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfac:	1c5a      	adds	r2, r3, #1
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bfb6:	b29b      	uxth	r3, r3
 800bfb8:	3b01      	subs	r3, #1
 800bfba:	b29a      	uxth	r2, r3
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	87da      	strh	r2, [r3, #62]	; 0x3e
 800bfc0:	e011      	b.n	800bfe6 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bfc2:	f7fb fcbf 	bl	8007944 <HAL_GetTick>
 800bfc6:	4602      	mov	r2, r0
 800bfc8:	69bb      	ldr	r3, [r7, #24]
 800bfca:	1ad3      	subs	r3, r2, r3
 800bfcc:	683a      	ldr	r2, [r7, #0]
 800bfce:	429a      	cmp	r2, r3
 800bfd0:	d803      	bhi.n	800bfda <HAL_SPI_Transmit+0x268>
 800bfd2:	683b      	ldr	r3, [r7, #0]
 800bfd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bfd8:	d102      	bne.n	800bfe0 <HAL_SPI_Transmit+0x26e>
 800bfda:	683b      	ldr	r3, [r7, #0]
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d102      	bne.n	800bfe6 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800bfe0:	2303      	movs	r3, #3
 800bfe2:	77fb      	strb	r3, [r7, #31]
          goto error;
 800bfe4:	e026      	b.n	800c034 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bfea:	b29b      	uxth	r3, r3
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d1b5      	bne.n	800bf5c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800bff0:	69ba      	ldr	r2, [r7, #24]
 800bff2:	6839      	ldr	r1, [r7, #0]
 800bff4:	68f8      	ldr	r0, [r7, #12]
 800bff6:	f001 f9dd 	bl	800d3b4 <SPI_EndRxTxTransaction>
 800bffa:	4603      	mov	r3, r0
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d002      	beq.n	800c006 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	2220      	movs	r2, #32
 800c004:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	689b      	ldr	r3, [r3, #8]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d10a      	bne.n	800c024 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c00e:	2300      	movs	r3, #0
 800c010:	613b      	str	r3, [r7, #16]
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	68db      	ldr	r3, [r3, #12]
 800c018:	613b      	str	r3, [r7, #16]
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	689b      	ldr	r3, [r3, #8]
 800c020:	613b      	str	r3, [r7, #16]
 800c022:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d002      	beq.n	800c032 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800c02c:	2301      	movs	r3, #1
 800c02e:	77fb      	strb	r3, [r7, #31]
 800c030:	e000      	b.n	800c034 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800c032:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	2201      	movs	r2, #1
 800c038:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	2200      	movs	r2, #0
 800c040:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800c044:	7ffb      	ldrb	r3, [r7, #31]
}
 800c046:	4618      	mov	r0, r3
 800c048:	3720      	adds	r7, #32
 800c04a:	46bd      	mov	sp, r7
 800c04c:	bd80      	pop	{r7, pc}

0800c04e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c04e:	b580      	push	{r7, lr}
 800c050:	b088      	sub	sp, #32
 800c052:	af02      	add	r7, sp, #8
 800c054:	60f8      	str	r0, [r7, #12]
 800c056:	60b9      	str	r1, [r7, #8]
 800c058:	603b      	str	r3, [r7, #0]
 800c05a:	4613      	mov	r3, r2
 800c05c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c05e:	2300      	movs	r3, #0
 800c060:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	685b      	ldr	r3, [r3, #4]
 800c066:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c06a:	d112      	bne.n	800c092 <HAL_SPI_Receive+0x44>
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	689b      	ldr	r3, [r3, #8]
 800c070:	2b00      	cmp	r3, #0
 800c072:	d10e      	bne.n	800c092 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	2204      	movs	r2, #4
 800c078:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800c07c:	88fa      	ldrh	r2, [r7, #6]
 800c07e:	683b      	ldr	r3, [r7, #0]
 800c080:	9300      	str	r3, [sp, #0]
 800c082:	4613      	mov	r3, r2
 800c084:	68ba      	ldr	r2, [r7, #8]
 800c086:	68b9      	ldr	r1, [r7, #8]
 800c088:	68f8      	ldr	r0, [r7, #12]
 800c08a:	f000 f910 	bl	800c2ae <HAL_SPI_TransmitReceive>
 800c08e:	4603      	mov	r3, r0
 800c090:	e109      	b.n	800c2a6 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800c098:	2b01      	cmp	r3, #1
 800c09a:	d101      	bne.n	800c0a0 <HAL_SPI_Receive+0x52>
 800c09c:	2302      	movs	r3, #2
 800c09e:	e102      	b.n	800c2a6 <HAL_SPI_Receive+0x258>
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	2201      	movs	r2, #1
 800c0a4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c0a8:	f7fb fc4c 	bl	8007944 <HAL_GetTick>
 800c0ac:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c0b4:	b2db      	uxtb	r3, r3
 800c0b6:	2b01      	cmp	r3, #1
 800c0b8:	d002      	beq.n	800c0c0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800c0ba:	2302      	movs	r3, #2
 800c0bc:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c0be:	e0e9      	b.n	800c294 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 800c0c0:	68bb      	ldr	r3, [r7, #8]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d002      	beq.n	800c0cc <HAL_SPI_Receive+0x7e>
 800c0c6:	88fb      	ldrh	r3, [r7, #6]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d102      	bne.n	800c0d2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800c0cc:	2301      	movs	r3, #1
 800c0ce:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c0d0:	e0e0      	b.n	800c294 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	2204      	movs	r2, #4
 800c0d6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	2200      	movs	r2, #0
 800c0de:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	68ba      	ldr	r2, [r7, #8]
 800c0e4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	88fa      	ldrh	r2, [r7, #6]
 800c0ea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	88fa      	ldrh	r2, [r7, #6]
 800c0f2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	2200      	movs	r2, #0
 800c0fa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	2200      	movs	r2, #0
 800c100:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	2200      	movs	r2, #0
 800c106:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	2200      	movs	r2, #0
 800c10c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	2200      	movs	r2, #0
 800c112:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	68db      	ldr	r3, [r3, #12]
 800c118:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c11c:	d908      	bls.n	800c130 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	685a      	ldr	r2, [r3, #4]
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c12c:	605a      	str	r2, [r3, #4]
 800c12e:	e007      	b.n	800c140 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	685a      	ldr	r2, [r3, #4]
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c13e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	689b      	ldr	r3, [r3, #8]
 800c144:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c148:	d10f      	bne.n	800c16a <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	681a      	ldr	r2, [r3, #0]
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c158:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	681a      	ldr	r2, [r3, #0]
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c168:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c174:	2b40      	cmp	r3, #64	; 0x40
 800c176:	d007      	beq.n	800c188 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	681a      	ldr	r2, [r3, #0]
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c186:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	68db      	ldr	r3, [r3, #12]
 800c18c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c190:	d867      	bhi.n	800c262 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800c192:	e030      	b.n	800c1f6 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	689b      	ldr	r3, [r3, #8]
 800c19a:	f003 0301 	and.w	r3, r3, #1
 800c19e:	2b01      	cmp	r3, #1
 800c1a0:	d117      	bne.n	800c1d2 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	f103 020c 	add.w	r2, r3, #12
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1ae:	7812      	ldrb	r2, [r2, #0]
 800c1b0:	b2d2      	uxtb	r2, r2
 800c1b2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1b8:	1c5a      	adds	r2, r3, #1
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c1c4:	b29b      	uxth	r3, r3
 800c1c6:	3b01      	subs	r3, #1
 800c1c8:	b29a      	uxth	r2, r3
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800c1d0:	e011      	b.n	800c1f6 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c1d2:	f7fb fbb7 	bl	8007944 <HAL_GetTick>
 800c1d6:	4602      	mov	r2, r0
 800c1d8:	693b      	ldr	r3, [r7, #16]
 800c1da:	1ad3      	subs	r3, r2, r3
 800c1dc:	683a      	ldr	r2, [r7, #0]
 800c1de:	429a      	cmp	r2, r3
 800c1e0:	d803      	bhi.n	800c1ea <HAL_SPI_Receive+0x19c>
 800c1e2:	683b      	ldr	r3, [r7, #0]
 800c1e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c1e8:	d102      	bne.n	800c1f0 <HAL_SPI_Receive+0x1a2>
 800c1ea:	683b      	ldr	r3, [r7, #0]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d102      	bne.n	800c1f6 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 800c1f0:	2303      	movs	r3, #3
 800c1f2:	75fb      	strb	r3, [r7, #23]
          goto error;
 800c1f4:	e04e      	b.n	800c294 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c1fc:	b29b      	uxth	r3, r3
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d1c8      	bne.n	800c194 <HAL_SPI_Receive+0x146>
 800c202:	e034      	b.n	800c26e <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	689b      	ldr	r3, [r3, #8]
 800c20a:	f003 0301 	and.w	r3, r3, #1
 800c20e:	2b01      	cmp	r3, #1
 800c210:	d115      	bne.n	800c23e <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	68da      	ldr	r2, [r3, #12]
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c21c:	b292      	uxth	r2, r2
 800c21e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c224:	1c9a      	adds	r2, r3, #2
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c230:	b29b      	uxth	r3, r3
 800c232:	3b01      	subs	r3, #1
 800c234:	b29a      	uxth	r2, r3
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800c23c:	e011      	b.n	800c262 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c23e:	f7fb fb81 	bl	8007944 <HAL_GetTick>
 800c242:	4602      	mov	r2, r0
 800c244:	693b      	ldr	r3, [r7, #16]
 800c246:	1ad3      	subs	r3, r2, r3
 800c248:	683a      	ldr	r2, [r7, #0]
 800c24a:	429a      	cmp	r2, r3
 800c24c:	d803      	bhi.n	800c256 <HAL_SPI_Receive+0x208>
 800c24e:	683b      	ldr	r3, [r7, #0]
 800c250:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c254:	d102      	bne.n	800c25c <HAL_SPI_Receive+0x20e>
 800c256:	683b      	ldr	r3, [r7, #0]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d102      	bne.n	800c262 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 800c25c:	2303      	movs	r3, #3
 800c25e:	75fb      	strb	r3, [r7, #23]
          goto error;
 800c260:	e018      	b.n	800c294 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c268:	b29b      	uxth	r3, r3
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d1ca      	bne.n	800c204 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c26e:	693a      	ldr	r2, [r7, #16]
 800c270:	6839      	ldr	r1, [r7, #0]
 800c272:	68f8      	ldr	r0, [r7, #12]
 800c274:	f001 f846 	bl	800d304 <SPI_EndRxTransaction>
 800c278:	4603      	mov	r3, r0
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d002      	beq.n	800c284 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	2220      	movs	r2, #32
 800c282:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d002      	beq.n	800c292 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 800c28c:	2301      	movs	r3, #1
 800c28e:	75fb      	strb	r3, [r7, #23]
 800c290:	e000      	b.n	800c294 <HAL_SPI_Receive+0x246>
  }

error :
 800c292:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	2201      	movs	r2, #1
 800c298:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	2200      	movs	r2, #0
 800c2a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800c2a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	3718      	adds	r7, #24
 800c2aa:	46bd      	mov	sp, r7
 800c2ac:	bd80      	pop	{r7, pc}

0800c2ae <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800c2ae:	b580      	push	{r7, lr}
 800c2b0:	b08a      	sub	sp, #40	; 0x28
 800c2b2:	af00      	add	r7, sp, #0
 800c2b4:	60f8      	str	r0, [r7, #12]
 800c2b6:	60b9      	str	r1, [r7, #8]
 800c2b8:	607a      	str	r2, [r7, #4]
 800c2ba:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800c2bc:	2301      	movs	r3, #1
 800c2be:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800c2c0:	2300      	movs	r3, #0
 800c2c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800c2cc:	2b01      	cmp	r3, #1
 800c2ce:	d101      	bne.n	800c2d4 <HAL_SPI_TransmitReceive+0x26>
 800c2d0:	2302      	movs	r3, #2
 800c2d2:	e1fb      	b.n	800c6cc <HAL_SPI_TransmitReceive+0x41e>
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	2201      	movs	r2, #1
 800c2d8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c2dc:	f7fb fb32 	bl	8007944 <HAL_GetTick>
 800c2e0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c2e8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	685b      	ldr	r3, [r3, #4]
 800c2ee:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800c2f0:	887b      	ldrh	r3, [r7, #2]
 800c2f2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800c2f4:	887b      	ldrh	r3, [r7, #2]
 800c2f6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800c2f8:	7efb      	ldrb	r3, [r7, #27]
 800c2fa:	2b01      	cmp	r3, #1
 800c2fc:	d00e      	beq.n	800c31c <HAL_SPI_TransmitReceive+0x6e>
 800c2fe:	697b      	ldr	r3, [r7, #20]
 800c300:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c304:	d106      	bne.n	800c314 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	689b      	ldr	r3, [r3, #8]
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d102      	bne.n	800c314 <HAL_SPI_TransmitReceive+0x66>
 800c30e:	7efb      	ldrb	r3, [r7, #27]
 800c310:	2b04      	cmp	r3, #4
 800c312:	d003      	beq.n	800c31c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800c314:	2302      	movs	r3, #2
 800c316:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800c31a:	e1cd      	b.n	800c6b8 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800c31c:	68bb      	ldr	r3, [r7, #8]
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d005      	beq.n	800c32e <HAL_SPI_TransmitReceive+0x80>
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	2b00      	cmp	r3, #0
 800c326:	d002      	beq.n	800c32e <HAL_SPI_TransmitReceive+0x80>
 800c328:	887b      	ldrh	r3, [r7, #2]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d103      	bne.n	800c336 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800c32e:	2301      	movs	r3, #1
 800c330:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800c334:	e1c0      	b.n	800c6b8 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c33c:	b2db      	uxtb	r3, r3
 800c33e:	2b04      	cmp	r3, #4
 800c340:	d003      	beq.n	800c34a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	2205      	movs	r2, #5
 800c346:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	2200      	movs	r2, #0
 800c34e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	687a      	ldr	r2, [r7, #4]
 800c354:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	887a      	ldrh	r2, [r7, #2]
 800c35a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	887a      	ldrh	r2, [r7, #2]
 800c362:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	68ba      	ldr	r2, [r7, #8]
 800c36a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	887a      	ldrh	r2, [r7, #2]
 800c370:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	887a      	ldrh	r2, [r7, #2]
 800c376:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	2200      	movs	r2, #0
 800c37c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	2200      	movs	r2, #0
 800c382:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	68db      	ldr	r3, [r3, #12]
 800c388:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c38c:	d802      	bhi.n	800c394 <HAL_SPI_TransmitReceive+0xe6>
 800c38e:	8a3b      	ldrh	r3, [r7, #16]
 800c390:	2b01      	cmp	r3, #1
 800c392:	d908      	bls.n	800c3a6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	685a      	ldr	r2, [r3, #4]
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c3a2:	605a      	str	r2, [r3, #4]
 800c3a4:	e007      	b.n	800c3b6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	685a      	ldr	r2, [r3, #4]
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c3b4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c3c0:	2b40      	cmp	r3, #64	; 0x40
 800c3c2:	d007      	beq.n	800c3d4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	681a      	ldr	r2, [r3, #0]
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c3d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	68db      	ldr	r3, [r3, #12]
 800c3d8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c3dc:	d97c      	bls.n	800c4d8 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	685b      	ldr	r3, [r3, #4]
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d002      	beq.n	800c3ec <HAL_SPI_TransmitReceive+0x13e>
 800c3e6:	8a7b      	ldrh	r3, [r7, #18]
 800c3e8:	2b01      	cmp	r3, #1
 800c3ea:	d169      	bne.n	800c4c0 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3f0:	881a      	ldrh	r2, [r3, #0]
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3fc:	1c9a      	adds	r2, r3, #2
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c406:	b29b      	uxth	r3, r3
 800c408:	3b01      	subs	r3, #1
 800c40a:	b29a      	uxth	r2, r3
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c410:	e056      	b.n	800c4c0 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	689b      	ldr	r3, [r3, #8]
 800c418:	f003 0302 	and.w	r3, r3, #2
 800c41c:	2b02      	cmp	r3, #2
 800c41e:	d11b      	bne.n	800c458 <HAL_SPI_TransmitReceive+0x1aa>
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c424:	b29b      	uxth	r3, r3
 800c426:	2b00      	cmp	r3, #0
 800c428:	d016      	beq.n	800c458 <HAL_SPI_TransmitReceive+0x1aa>
 800c42a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c42c:	2b01      	cmp	r3, #1
 800c42e:	d113      	bne.n	800c458 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c434:	881a      	ldrh	r2, [r3, #0]
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c440:	1c9a      	adds	r2, r3, #2
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c44a:	b29b      	uxth	r3, r3
 800c44c:	3b01      	subs	r3, #1
 800c44e:	b29a      	uxth	r2, r3
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c454:	2300      	movs	r3, #0
 800c456:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	689b      	ldr	r3, [r3, #8]
 800c45e:	f003 0301 	and.w	r3, r3, #1
 800c462:	2b01      	cmp	r3, #1
 800c464:	d11c      	bne.n	800c4a0 <HAL_SPI_TransmitReceive+0x1f2>
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c46c:	b29b      	uxth	r3, r3
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d016      	beq.n	800c4a0 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	68da      	ldr	r2, [r3, #12]
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c47c:	b292      	uxth	r2, r2
 800c47e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c484:	1c9a      	adds	r2, r3, #2
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c490:	b29b      	uxth	r3, r3
 800c492:	3b01      	subs	r3, #1
 800c494:	b29a      	uxth	r2, r3
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c49c:	2301      	movs	r3, #1
 800c49e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800c4a0:	f7fb fa50 	bl	8007944 <HAL_GetTick>
 800c4a4:	4602      	mov	r2, r0
 800c4a6:	69fb      	ldr	r3, [r7, #28]
 800c4a8:	1ad3      	subs	r3, r2, r3
 800c4aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c4ac:	429a      	cmp	r2, r3
 800c4ae:	d807      	bhi.n	800c4c0 <HAL_SPI_TransmitReceive+0x212>
 800c4b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c4b6:	d003      	beq.n	800c4c0 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800c4b8:	2303      	movs	r3, #3
 800c4ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800c4be:	e0fb      	b.n	800c6b8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c4c4:	b29b      	uxth	r3, r3
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d1a3      	bne.n	800c412 <HAL_SPI_TransmitReceive+0x164>
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c4d0:	b29b      	uxth	r3, r3
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d19d      	bne.n	800c412 <HAL_SPI_TransmitReceive+0x164>
 800c4d6:	e0df      	b.n	800c698 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	685b      	ldr	r3, [r3, #4]
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d003      	beq.n	800c4e8 <HAL_SPI_TransmitReceive+0x23a>
 800c4e0:	8a7b      	ldrh	r3, [r7, #18]
 800c4e2:	2b01      	cmp	r3, #1
 800c4e4:	f040 80cb 	bne.w	800c67e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c4ec:	b29b      	uxth	r3, r3
 800c4ee:	2b01      	cmp	r3, #1
 800c4f0:	d912      	bls.n	800c518 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4f6:	881a      	ldrh	r2, [r3, #0]
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c502:	1c9a      	adds	r2, r3, #2
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c50c:	b29b      	uxth	r3, r3
 800c50e:	3b02      	subs	r3, #2
 800c510:	b29a      	uxth	r2, r3
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c516:	e0b2      	b.n	800c67e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	330c      	adds	r3, #12
 800c522:	7812      	ldrb	r2, [r2, #0]
 800c524:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c52a:	1c5a      	adds	r2, r3, #1
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c534:	b29b      	uxth	r3, r3
 800c536:	3b01      	subs	r3, #1
 800c538:	b29a      	uxth	r2, r3
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c53e:	e09e      	b.n	800c67e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	689b      	ldr	r3, [r3, #8]
 800c546:	f003 0302 	and.w	r3, r3, #2
 800c54a:	2b02      	cmp	r3, #2
 800c54c:	d134      	bne.n	800c5b8 <HAL_SPI_TransmitReceive+0x30a>
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c552:	b29b      	uxth	r3, r3
 800c554:	2b00      	cmp	r3, #0
 800c556:	d02f      	beq.n	800c5b8 <HAL_SPI_TransmitReceive+0x30a>
 800c558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c55a:	2b01      	cmp	r3, #1
 800c55c:	d12c      	bne.n	800c5b8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c562:	b29b      	uxth	r3, r3
 800c564:	2b01      	cmp	r3, #1
 800c566:	d912      	bls.n	800c58e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c56c:	881a      	ldrh	r2, [r3, #0]
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c578:	1c9a      	adds	r2, r3, #2
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c582:	b29b      	uxth	r3, r3
 800c584:	3b02      	subs	r3, #2
 800c586:	b29a      	uxth	r2, r3
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c58c:	e012      	b.n	800c5b4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	330c      	adds	r3, #12
 800c598:	7812      	ldrb	r2, [r2, #0]
 800c59a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5a0:	1c5a      	adds	r2, r3, #1
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c5aa:	b29b      	uxth	r3, r3
 800c5ac:	3b01      	subs	r3, #1
 800c5ae:	b29a      	uxth	r2, r3
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c5b4:	2300      	movs	r3, #0
 800c5b6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	689b      	ldr	r3, [r3, #8]
 800c5be:	f003 0301 	and.w	r3, r3, #1
 800c5c2:	2b01      	cmp	r3, #1
 800c5c4:	d148      	bne.n	800c658 <HAL_SPI_TransmitReceive+0x3aa>
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c5cc:	b29b      	uxth	r3, r3
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d042      	beq.n	800c658 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c5d8:	b29b      	uxth	r3, r3
 800c5da:	2b01      	cmp	r3, #1
 800c5dc:	d923      	bls.n	800c626 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	68da      	ldr	r2, [r3, #12]
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5e8:	b292      	uxth	r2, r2
 800c5ea:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5f0:	1c9a      	adds	r2, r3, #2
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c5fc:	b29b      	uxth	r3, r3
 800c5fe:	3b02      	subs	r3, #2
 800c600:	b29a      	uxth	r2, r3
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c60e:	b29b      	uxth	r3, r3
 800c610:	2b01      	cmp	r3, #1
 800c612:	d81f      	bhi.n	800c654 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	685a      	ldr	r2, [r3, #4]
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c622:	605a      	str	r2, [r3, #4]
 800c624:	e016      	b.n	800c654 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	f103 020c 	add.w	r2, r3, #12
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c632:	7812      	ldrb	r2, [r2, #0]
 800c634:	b2d2      	uxtb	r2, r2
 800c636:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c63c:	1c5a      	adds	r2, r3, #1
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c648:	b29b      	uxth	r3, r3
 800c64a:	3b01      	subs	r3, #1
 800c64c:	b29a      	uxth	r2, r3
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c654:	2301      	movs	r3, #1
 800c656:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800c658:	f7fb f974 	bl	8007944 <HAL_GetTick>
 800c65c:	4602      	mov	r2, r0
 800c65e:	69fb      	ldr	r3, [r7, #28]
 800c660:	1ad3      	subs	r3, r2, r3
 800c662:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c664:	429a      	cmp	r2, r3
 800c666:	d803      	bhi.n	800c670 <HAL_SPI_TransmitReceive+0x3c2>
 800c668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c66a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c66e:	d102      	bne.n	800c676 <HAL_SPI_TransmitReceive+0x3c8>
 800c670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c672:	2b00      	cmp	r3, #0
 800c674:	d103      	bne.n	800c67e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800c676:	2303      	movs	r3, #3
 800c678:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800c67c:	e01c      	b.n	800c6b8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c682:	b29b      	uxth	r3, r3
 800c684:	2b00      	cmp	r3, #0
 800c686:	f47f af5b 	bne.w	800c540 <HAL_SPI_TransmitReceive+0x292>
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c690:	b29b      	uxth	r3, r3
 800c692:	2b00      	cmp	r3, #0
 800c694:	f47f af54 	bne.w	800c540 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c698:	69fa      	ldr	r2, [r7, #28]
 800c69a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c69c:	68f8      	ldr	r0, [r7, #12]
 800c69e:	f000 fe89 	bl	800d3b4 <SPI_EndRxTxTransaction>
 800c6a2:	4603      	mov	r3, r0
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d006      	beq.n	800c6b6 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800c6a8:	2301      	movs	r3, #1
 800c6aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	2220      	movs	r2, #32
 800c6b2:	661a      	str	r2, [r3, #96]	; 0x60
 800c6b4:	e000      	b.n	800c6b8 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800c6b6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	2201      	movs	r2, #1
 800c6bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	2200      	movs	r2, #0
 800c6c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800c6c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800c6cc:	4618      	mov	r0, r3
 800c6ce:	3728      	adds	r7, #40	; 0x28
 800c6d0:	46bd      	mov	sp, r7
 800c6d2:	bd80      	pop	{r7, pc}

0800c6d4 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800c6d4:	b580      	push	{r7, lr}
 800c6d6:	b086      	sub	sp, #24
 800c6d8:	af00      	add	r7, sp, #0
 800c6da:	60f8      	str	r0, [r7, #12]
 800c6dc:	60b9      	str	r1, [r7, #8]
 800c6de:	4613      	mov	r3, r2
 800c6e0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c6e2:	2300      	movs	r3, #0
 800c6e4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800c6ec:	2b01      	cmp	r3, #1
 800c6ee:	d101      	bne.n	800c6f4 <HAL_SPI_Transmit_DMA+0x20>
 800c6f0:	2302      	movs	r3, #2
 800c6f2:	e0d8      	b.n	800c8a6 <HAL_SPI_Transmit_DMA+0x1d2>
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	2201      	movs	r2, #1
 800c6f8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c702:	b2db      	uxtb	r3, r3
 800c704:	2b01      	cmp	r3, #1
 800c706:	d002      	beq.n	800c70e <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800c708:	2302      	movs	r3, #2
 800c70a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c70c:	e0c6      	b.n	800c89c <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 800c70e:	68bb      	ldr	r3, [r7, #8]
 800c710:	2b00      	cmp	r3, #0
 800c712:	d002      	beq.n	800c71a <HAL_SPI_Transmit_DMA+0x46>
 800c714:	88fb      	ldrh	r3, [r7, #6]
 800c716:	2b00      	cmp	r3, #0
 800c718:	d102      	bne.n	800c720 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800c71a:	2301      	movs	r3, #1
 800c71c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c71e:	e0bd      	b.n	800c89c <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	2203      	movs	r2, #3
 800c724:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	2200      	movs	r2, #0
 800c72c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	68ba      	ldr	r2, [r7, #8]
 800c732:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	88fa      	ldrh	r2, [r7, #6]
 800c738:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	88fa      	ldrh	r2, [r7, #6]
 800c73e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	2200      	movs	r2, #0
 800c744:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	2200      	movs	r2, #0
 800c74a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	2200      	movs	r2, #0
 800c750:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	2200      	movs	r2, #0
 800c756:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	2200      	movs	r2, #0
 800c75e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	689b      	ldr	r3, [r3, #8]
 800c766:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c76a:	d10f      	bne.n	800c78c <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	681a      	ldr	r2, [r3, #0]
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c77a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	681a      	ldr	r2, [r3, #0]
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c78a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c790:	4a47      	ldr	r2, [pc, #284]	; (800c8b0 <HAL_SPI_Transmit_DMA+0x1dc>)
 800c792:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c798:	4a46      	ldr	r2, [pc, #280]	; (800c8b4 <HAL_SPI_Transmit_DMA+0x1e0>)
 800c79a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c7a0:	4a45      	ldr	r2, [pc, #276]	; (800c8b8 <HAL_SPI_Transmit_DMA+0x1e4>)
 800c7a2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c7a8:	2200      	movs	r2, #0
 800c7aa:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	685a      	ldr	r2, [r3, #4]
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c7ba:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	68db      	ldr	r3, [r3, #12]
 800c7c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c7c4:	d82d      	bhi.n	800c822 <HAL_SPI_Transmit_DMA+0x14e>
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c7ca:	699b      	ldr	r3, [r3, #24]
 800c7cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c7d0:	d127      	bne.n	800c822 <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c7d6:	b29b      	uxth	r3, r3
 800c7d8:	f003 0301 	and.w	r3, r3, #1
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d10f      	bne.n	800c800 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	685a      	ldr	r2, [r3, #4]
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c7ee:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c7f4:	b29b      	uxth	r3, r3
 800c7f6:	085b      	lsrs	r3, r3, #1
 800c7f8:	b29a      	uxth	r2, r3
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c7fe:	e010      	b.n	800c822 <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	685a      	ldr	r2, [r3, #4]
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c80e:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c814:	b29b      	uxth	r3, r3
 800c816:	085b      	lsrs	r3, r3, #1
 800c818:	b29b      	uxth	r3, r3
 800c81a:	3301      	adds	r3, #1
 800c81c:	b29a      	uxth	r2, r3
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c82a:	4619      	mov	r1, r3
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	330c      	adds	r3, #12
 800c832:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c838:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800c83a:	f7fb facf 	bl	8007ddc <HAL_DMA_Start_IT>
 800c83e:	4603      	mov	r3, r0
 800c840:	2b00      	cmp	r3, #0
 800c842:	d00c      	beq.n	800c85e <HAL_SPI_Transmit_DMA+0x18a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c848:	f043 0210 	orr.w	r2, r3, #16
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800c850:	2301      	movs	r3, #1
 800c852:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	2201      	movs	r2, #1
 800c858:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800c85c:	e01e      	b.n	800c89c <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c868:	2b40      	cmp	r3, #64	; 0x40
 800c86a:	d007      	beq.n	800c87c <HAL_SPI_Transmit_DMA+0x1a8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	681a      	ldr	r2, [r3, #0]
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c87a:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	685a      	ldr	r2, [r3, #4]
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	f042 0220 	orr.w	r2, r2, #32
 800c88a:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	685a      	ldr	r2, [r3, #4]
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	f042 0202 	orr.w	r2, r2, #2
 800c89a:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	2200      	movs	r2, #0
 800c8a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800c8a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c8a6:	4618      	mov	r0, r3
 800c8a8:	3718      	adds	r7, #24
 800c8aa:	46bd      	mov	sp, r7
 800c8ac:	bd80      	pop	{r7, pc}
 800c8ae:	bf00      	nop
 800c8b0:	0800d00b 	.word	0x0800d00b
 800c8b4:	0800ce2d 	.word	0x0800ce2d
 800c8b8:	0800d05f 	.word	0x0800d05f

0800c8bc <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800c8bc:	b580      	push	{r7, lr}
 800c8be:	b086      	sub	sp, #24
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	60f8      	str	r0, [r7, #12]
 800c8c4:	60b9      	str	r1, [r7, #8]
 800c8c6:	607a      	str	r2, [r7, #4]
 800c8c8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c8ca:	2300      	movs	r3, #0
 800c8cc:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800c8d4:	2b01      	cmp	r3, #1
 800c8d6:	d101      	bne.n	800c8dc <HAL_SPI_TransmitReceive_DMA+0x20>
 800c8d8:	2302      	movs	r3, #2
 800c8da:	e16c      	b.n	800cbb6 <HAL_SPI_TransmitReceive_DMA+0x2fa>
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	2201      	movs	r2, #1
 800c8e0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c8ea:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	685b      	ldr	r3, [r3, #4]
 800c8f0:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800c8f2:	7dbb      	ldrb	r3, [r7, #22]
 800c8f4:	2b01      	cmp	r3, #1
 800c8f6:	d00d      	beq.n	800c914 <HAL_SPI_TransmitReceive_DMA+0x58>
 800c8f8:	693b      	ldr	r3, [r7, #16]
 800c8fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c8fe:	d106      	bne.n	800c90e <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	689b      	ldr	r3, [r3, #8]
 800c904:	2b00      	cmp	r3, #0
 800c906:	d102      	bne.n	800c90e <HAL_SPI_TransmitReceive_DMA+0x52>
 800c908:	7dbb      	ldrb	r3, [r7, #22]
 800c90a:	2b04      	cmp	r3, #4
 800c90c:	d002      	beq.n	800c914 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800c90e:	2302      	movs	r3, #2
 800c910:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c912:	e14b      	b.n	800cbac <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800c914:	68bb      	ldr	r3, [r7, #8]
 800c916:	2b00      	cmp	r3, #0
 800c918:	d005      	beq.n	800c926 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d002      	beq.n	800c926 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800c920:	887b      	ldrh	r3, [r7, #2]
 800c922:	2b00      	cmp	r3, #0
 800c924:	d102      	bne.n	800c92c <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800c926:	2301      	movs	r3, #1
 800c928:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c92a:	e13f      	b.n	800cbac <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c932:	b2db      	uxtb	r3, r3
 800c934:	2b04      	cmp	r3, #4
 800c936:	d003      	beq.n	800c940 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	2205      	movs	r2, #5
 800c93c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	2200      	movs	r2, #0
 800c944:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	68ba      	ldr	r2, [r7, #8]
 800c94a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	887a      	ldrh	r2, [r7, #2]
 800c950:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	887a      	ldrh	r2, [r7, #2]
 800c956:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	687a      	ldr	r2, [r7, #4]
 800c95c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	887a      	ldrh	r2, [r7, #2]
 800c962:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	887a      	ldrh	r2, [r7, #2]
 800c96a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	2200      	movs	r2, #0
 800c972:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	2200      	movs	r2, #0
 800c978:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	685a      	ldr	r2, [r3, #4]
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 800c988:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	68db      	ldr	r3, [r3, #12]
 800c98e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c992:	d908      	bls.n	800c9a6 <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	685a      	ldr	r2, [r3, #4]
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c9a2:	605a      	str	r2, [r3, #4]
 800c9a4:	e06f      	b.n	800ca86 <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	685a      	ldr	r2, [r3, #4]
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c9b4:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c9ba:	699b      	ldr	r3, [r3, #24]
 800c9bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c9c0:	d126      	bne.n	800ca10 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800c9c6:	f003 0301 	and.w	r3, r3, #1
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d10f      	bne.n	800c9ee <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	685a      	ldr	r2, [r3, #4]
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c9dc:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c9e2:	b29b      	uxth	r3, r3
 800c9e4:	085b      	lsrs	r3, r3, #1
 800c9e6:	b29a      	uxth	r2, r3
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c9ec:	e010      	b.n	800ca10 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	685a      	ldr	r2, [r3, #4]
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c9fc:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ca02:	b29b      	uxth	r3, r3
 800ca04:	085b      	lsrs	r3, r3, #1
 800ca06:	b29b      	uxth	r3, r3
 800ca08:	3301      	adds	r3, #1
 800ca0a:	b29a      	uxth	r2, r3
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ca14:	699b      	ldr	r3, [r3, #24]
 800ca16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ca1a:	d134      	bne.n	800ca86 <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	685a      	ldr	r2, [r3, #4]
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800ca2a:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ca32:	b29b      	uxth	r3, r3
 800ca34:	f003 0301 	and.w	r3, r3, #1
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d111      	bne.n	800ca60 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	685a      	ldr	r2, [r3, #4]
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ca4a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ca52:	b29b      	uxth	r3, r3
 800ca54:	085b      	lsrs	r3, r3, #1
 800ca56:	b29a      	uxth	r2, r3
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800ca5e:	e012      	b.n	800ca86 <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	685a      	ldr	r2, [r3, #4]
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ca6e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ca76:	b29b      	uxth	r3, r3
 800ca78:	085b      	lsrs	r3, r3, #1
 800ca7a:	b29b      	uxth	r3, r3
 800ca7c:	3301      	adds	r3, #1
 800ca7e:	b29a      	uxth	r2, r3
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ca8c:	b2db      	uxtb	r3, r3
 800ca8e:	2b04      	cmp	r3, #4
 800ca90:	d108      	bne.n	800caa4 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ca96:	4a4a      	ldr	r2, [pc, #296]	; (800cbc0 <HAL_SPI_TransmitReceive_DMA+0x304>)
 800ca98:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ca9e:	4a49      	ldr	r2, [pc, #292]	; (800cbc4 <HAL_SPI_TransmitReceive_DMA+0x308>)
 800caa0:	62da      	str	r2, [r3, #44]	; 0x2c
 800caa2:	e007      	b.n	800cab4 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800caa8:	4a47      	ldr	r2, [pc, #284]	; (800cbc8 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 800caaa:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cab0:	4a46      	ldr	r2, [pc, #280]	; (800cbcc <HAL_SPI_TransmitReceive_DMA+0x310>)
 800cab2:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cab8:	4a45      	ldr	r2, [pc, #276]	; (800cbd0 <HAL_SPI_TransmitReceive_DMA+0x314>)
 800caba:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cac0:	2200      	movs	r2, #0
 800cac2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	330c      	adds	r3, #12
 800cace:	4619      	mov	r1, r3
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cad4:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800cadc:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800cade:	f7fb f97d 	bl	8007ddc <HAL_DMA_Start_IT>
 800cae2:	4603      	mov	r3, r0
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d00c      	beq.n	800cb02 <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800caec:	f043 0210 	orr.w	r2, r3, #16
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800caf4:	2301      	movs	r3, #1
 800caf6:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	2201      	movs	r2, #1
 800cafc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800cb00:	e054      	b.n	800cbac <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	685a      	ldr	r2, [r3, #4]
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	f042 0201 	orr.w	r2, r2, #1
 800cb10:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb16:	2200      	movs	r2, #0
 800cb18:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb1e:	2200      	movs	r2, #0
 800cb20:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb26:	2200      	movs	r2, #0
 800cb28:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb2e:	2200      	movs	r2, #0
 800cb30:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb3a:	4619      	mov	r1, r3
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	330c      	adds	r3, #12
 800cb42:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cb48:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800cb4a:	f7fb f947 	bl	8007ddc <HAL_DMA_Start_IT>
 800cb4e:	4603      	mov	r3, r0
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d00c      	beq.n	800cb6e <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cb58:	f043 0210 	orr.w	r2, r3, #16
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800cb60:	2301      	movs	r3, #1
 800cb62:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	2201      	movs	r2, #1
 800cb68:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800cb6c:	e01e      	b.n	800cbac <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb78:	2b40      	cmp	r3, #64	; 0x40
 800cb7a:	d007      	beq.n	800cb8c <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	681a      	ldr	r2, [r3, #0]
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cb8a:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	685a      	ldr	r2, [r3, #4]
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	f042 0220 	orr.w	r2, r2, #32
 800cb9a:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	685a      	ldr	r2, [r3, #4]
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	f042 0202 	orr.w	r2, r2, #2
 800cbaa:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	2200      	movs	r2, #0
 800cbb0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800cbb4:	7dfb      	ldrb	r3, [r7, #23]
}
 800cbb6:	4618      	mov	r0, r3
 800cbb8:	3718      	adds	r7, #24
 800cbba:	46bd      	mov	sp, r7
 800cbbc:	bd80      	pop	{r7, pc}
 800cbbe:	bf00      	nop
 800cbc0:	0800d027 	.word	0x0800d027
 800cbc4:	0800ced3 	.word	0x0800ced3
 800cbc8:	0800d043 	.word	0x0800d043
 800cbcc:	0800cf7b 	.word	0x0800cf7b
 800cbd0:	0800d05f 	.word	0x0800d05f

0800cbd4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800cbd4:	b580      	push	{r7, lr}
 800cbd6:	b088      	sub	sp, #32
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	685b      	ldr	r3, [r3, #4]
 800cbe2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	689b      	ldr	r3, [r3, #8]
 800cbea:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800cbec:	69bb      	ldr	r3, [r7, #24]
 800cbee:	099b      	lsrs	r3, r3, #6
 800cbf0:	f003 0301 	and.w	r3, r3, #1
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d10f      	bne.n	800cc18 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800cbf8:	69bb      	ldr	r3, [r7, #24]
 800cbfa:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d00a      	beq.n	800cc18 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800cc02:	69fb      	ldr	r3, [r7, #28]
 800cc04:	099b      	lsrs	r3, r3, #6
 800cc06:	f003 0301 	and.w	r3, r3, #1
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d004      	beq.n	800cc18 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cc12:	6878      	ldr	r0, [r7, #4]
 800cc14:	4798      	blx	r3
    return;
 800cc16:	e0d7      	b.n	800cdc8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800cc18:	69bb      	ldr	r3, [r7, #24]
 800cc1a:	085b      	lsrs	r3, r3, #1
 800cc1c:	f003 0301 	and.w	r3, r3, #1
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d00a      	beq.n	800cc3a <HAL_SPI_IRQHandler+0x66>
 800cc24:	69fb      	ldr	r3, [r7, #28]
 800cc26:	09db      	lsrs	r3, r3, #7
 800cc28:	f003 0301 	and.w	r3, r3, #1
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d004      	beq.n	800cc3a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cc34:	6878      	ldr	r0, [r7, #4]
 800cc36:	4798      	blx	r3
    return;
 800cc38:	e0c6      	b.n	800cdc8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800cc3a:	69bb      	ldr	r3, [r7, #24]
 800cc3c:	095b      	lsrs	r3, r3, #5
 800cc3e:	f003 0301 	and.w	r3, r3, #1
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d10c      	bne.n	800cc60 <HAL_SPI_IRQHandler+0x8c>
 800cc46:	69bb      	ldr	r3, [r7, #24]
 800cc48:	099b      	lsrs	r3, r3, #6
 800cc4a:	f003 0301 	and.w	r3, r3, #1
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d106      	bne.n	800cc60 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800cc52:	69bb      	ldr	r3, [r7, #24]
 800cc54:	0a1b      	lsrs	r3, r3, #8
 800cc56:	f003 0301 	and.w	r3, r3, #1
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	f000 80b4 	beq.w	800cdc8 <HAL_SPI_IRQHandler+0x1f4>
 800cc60:	69fb      	ldr	r3, [r7, #28]
 800cc62:	095b      	lsrs	r3, r3, #5
 800cc64:	f003 0301 	and.w	r3, r3, #1
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	f000 80ad 	beq.w	800cdc8 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800cc6e:	69bb      	ldr	r3, [r7, #24]
 800cc70:	099b      	lsrs	r3, r3, #6
 800cc72:	f003 0301 	and.w	r3, r3, #1
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d023      	beq.n	800ccc2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800cc80:	b2db      	uxtb	r3, r3
 800cc82:	2b03      	cmp	r3, #3
 800cc84:	d011      	beq.n	800ccaa <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cc8a:	f043 0204 	orr.w	r2, r3, #4
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800cc92:	2300      	movs	r3, #0
 800cc94:	617b      	str	r3, [r7, #20]
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	68db      	ldr	r3, [r3, #12]
 800cc9c:	617b      	str	r3, [r7, #20]
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	689b      	ldr	r3, [r3, #8]
 800cca4:	617b      	str	r3, [r7, #20]
 800cca6:	697b      	ldr	r3, [r7, #20]
 800cca8:	e00b      	b.n	800ccc2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ccaa:	2300      	movs	r3, #0
 800ccac:	613b      	str	r3, [r7, #16]
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	68db      	ldr	r3, [r3, #12]
 800ccb4:	613b      	str	r3, [r7, #16]
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	689b      	ldr	r3, [r3, #8]
 800ccbc:	613b      	str	r3, [r7, #16]
 800ccbe:	693b      	ldr	r3, [r7, #16]
        return;
 800ccc0:	e082      	b.n	800cdc8 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800ccc2:	69bb      	ldr	r3, [r7, #24]
 800ccc4:	095b      	lsrs	r3, r3, #5
 800ccc6:	f003 0301 	and.w	r3, r3, #1
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d014      	beq.n	800ccf8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ccd2:	f043 0201 	orr.w	r2, r3, #1
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800ccda:	2300      	movs	r3, #0
 800ccdc:	60fb      	str	r3, [r7, #12]
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	689b      	ldr	r3, [r3, #8]
 800cce4:	60fb      	str	r3, [r7, #12]
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	681a      	ldr	r2, [r3, #0]
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ccf4:	601a      	str	r2, [r3, #0]
 800ccf6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800ccf8:	69bb      	ldr	r3, [r7, #24]
 800ccfa:	0a1b      	lsrs	r3, r3, #8
 800ccfc:	f003 0301 	and.w	r3, r3, #1
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d00c      	beq.n	800cd1e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cd08:	f043 0208 	orr.w	r2, r3, #8
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800cd10:	2300      	movs	r3, #0
 800cd12:	60bb      	str	r3, [r7, #8]
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	689b      	ldr	r3, [r3, #8]
 800cd1a:	60bb      	str	r3, [r7, #8]
 800cd1c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d04f      	beq.n	800cdc6 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	685a      	ldr	r2, [r3, #4]
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800cd34:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	2201      	movs	r2, #1
 800cd3a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800cd3e:	69fb      	ldr	r3, [r7, #28]
 800cd40:	f003 0302 	and.w	r3, r3, #2
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d104      	bne.n	800cd52 <HAL_SPI_IRQHandler+0x17e>
 800cd48:	69fb      	ldr	r3, [r7, #28]
 800cd4a:	f003 0301 	and.w	r3, r3, #1
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d034      	beq.n	800cdbc <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	685a      	ldr	r2, [r3, #4]
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	f022 0203 	bic.w	r2, r2, #3
 800cd60:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d011      	beq.n	800cd8e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cd6e:	4a18      	ldr	r2, [pc, #96]	; (800cdd0 <HAL_SPI_IRQHandler+0x1fc>)
 800cd70:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cd76:	4618      	mov	r0, r3
 800cd78:	f7fb f8ce 	bl	8007f18 <HAL_DMA_Abort_IT>
 800cd7c:	4603      	mov	r3, r0
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d005      	beq.n	800cd8e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cd86:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d016      	beq.n	800cdc4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cd9a:	4a0d      	ldr	r2, [pc, #52]	; (800cdd0 <HAL_SPI_IRQHandler+0x1fc>)
 800cd9c:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cda2:	4618      	mov	r0, r3
 800cda4:	f7fb f8b8 	bl	8007f18 <HAL_DMA_Abort_IT>
 800cda8:	4603      	mov	r3, r0
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d00a      	beq.n	800cdc4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cdb2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800cdba:	e003      	b.n	800cdc4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800cdbc:	6878      	ldr	r0, [r7, #4]
 800cdbe:	f7f8 fd7b 	bl	80058b8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800cdc2:	e000      	b.n	800cdc6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800cdc4:	bf00      	nop
    return;
 800cdc6:	bf00      	nop
  }
}
 800cdc8:	3720      	adds	r7, #32
 800cdca:	46bd      	mov	sp, r7
 800cdcc:	bd80      	pop	{r7, pc}
 800cdce:	bf00      	nop
 800cdd0:	0800d09f 	.word	0x0800d09f

0800cdd4 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800cdd4:	b480      	push	{r7}
 800cdd6:	b083      	sub	sp, #12
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800cddc:	bf00      	nop
 800cdde:	370c      	adds	r7, #12
 800cde0:	46bd      	mov	sp, r7
 800cde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde6:	4770      	bx	lr

0800cde8 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800cde8:	b480      	push	{r7}
 800cdea:	b083      	sub	sp, #12
 800cdec:	af00      	add	r7, sp, #0
 800cdee:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800cdf0:	bf00      	nop
 800cdf2:	370c      	adds	r7, #12
 800cdf4:	46bd      	mov	sp, r7
 800cdf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdfa:	4770      	bx	lr

0800cdfc <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800cdfc:	b480      	push	{r7}
 800cdfe:	b083      	sub	sp, #12
 800ce00:	af00      	add	r7, sp, #0
 800ce02:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800ce04:	bf00      	nop
 800ce06:	370c      	adds	r7, #12
 800ce08:	46bd      	mov	sp, r7
 800ce0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce0e:	4770      	bx	lr

0800ce10 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800ce10:	b480      	push	{r7}
 800ce12:	b083      	sub	sp, #12
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ce1e:	b2db      	uxtb	r3, r3
}
 800ce20:	4618      	mov	r0, r3
 800ce22:	370c      	adds	r7, #12
 800ce24:	46bd      	mov	sp, r7
 800ce26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce2a:	4770      	bx	lr

0800ce2c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ce2c:	b580      	push	{r7, lr}
 800ce2e:	b086      	sub	sp, #24
 800ce30:	af00      	add	r7, sp, #0
 800ce32:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce38:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ce3a:	f7fa fd83 	bl	8007944 <HAL_GetTick>
 800ce3e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	f003 0320 	and.w	r3, r3, #32
 800ce4a:	2b20      	cmp	r3, #32
 800ce4c:	d03b      	beq.n	800cec6 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800ce4e:	697b      	ldr	r3, [r7, #20]
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	685a      	ldr	r2, [r3, #4]
 800ce54:	697b      	ldr	r3, [r7, #20]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	f022 0220 	bic.w	r2, r2, #32
 800ce5c:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800ce5e:	697b      	ldr	r3, [r7, #20]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	685a      	ldr	r2, [r3, #4]
 800ce64:	697b      	ldr	r3, [r7, #20]
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	f022 0202 	bic.w	r2, r2, #2
 800ce6c:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800ce6e:	693a      	ldr	r2, [r7, #16]
 800ce70:	2164      	movs	r1, #100	; 0x64
 800ce72:	6978      	ldr	r0, [r7, #20]
 800ce74:	f000 fa9e 	bl	800d3b4 <SPI_EndRxTxTransaction>
 800ce78:	4603      	mov	r3, r0
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d005      	beq.n	800ce8a <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ce7e:	697b      	ldr	r3, [r7, #20]
 800ce80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ce82:	f043 0220 	orr.w	r2, r3, #32
 800ce86:	697b      	ldr	r3, [r7, #20]
 800ce88:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ce8a:	697b      	ldr	r3, [r7, #20]
 800ce8c:	689b      	ldr	r3, [r3, #8]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d10a      	bne.n	800cea8 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ce92:	2300      	movs	r3, #0
 800ce94:	60fb      	str	r3, [r7, #12]
 800ce96:	697b      	ldr	r3, [r7, #20]
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	68db      	ldr	r3, [r3, #12]
 800ce9c:	60fb      	str	r3, [r7, #12]
 800ce9e:	697b      	ldr	r3, [r7, #20]
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	689b      	ldr	r3, [r3, #8]
 800cea4:	60fb      	str	r3, [r7, #12]
 800cea6:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800cea8:	697b      	ldr	r3, [r7, #20]
 800ceaa:	2200      	movs	r2, #0
 800ceac:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800ceae:	697b      	ldr	r3, [r7, #20]
 800ceb0:	2201      	movs	r2, #1
 800ceb2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ceb6:	697b      	ldr	r3, [r7, #20]
 800ceb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d003      	beq.n	800cec6 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800cebe:	6978      	ldr	r0, [r7, #20]
 800cec0:	f7f8 fcfa 	bl	80058b8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800cec4:	e002      	b.n	800cecc <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800cec6:	6978      	ldr	r0, [r7, #20]
 800cec8:	f7f8 fcdf 	bl	800588a <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800cecc:	3718      	adds	r7, #24
 800cece:	46bd      	mov	sp, r7
 800ced0:	bd80      	pop	{r7, pc}

0800ced2 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ced2:	b580      	push	{r7, lr}
 800ced4:	b084      	sub	sp, #16
 800ced6:	af00      	add	r7, sp, #0
 800ced8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cede:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800cee0:	f7fa fd30 	bl	8007944 <HAL_GetTick>
 800cee4:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	f003 0320 	and.w	r3, r3, #32
 800cef0:	2b20      	cmp	r3, #32
 800cef2:	d03c      	beq.n	800cf6e <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	685a      	ldr	r2, [r3, #4]
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	f022 0220 	bic.w	r2, r2, #32
 800cf02:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	689b      	ldr	r3, [r3, #8]
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d10d      	bne.n	800cf28 <SPI_DMAReceiveCplt+0x56>
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	685b      	ldr	r3, [r3, #4]
 800cf10:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cf14:	d108      	bne.n	800cf28 <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	685a      	ldr	r2, [r3, #4]
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	f022 0203 	bic.w	r2, r2, #3
 800cf24:	605a      	str	r2, [r3, #4]
 800cf26:	e007      	b.n	800cf38 <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	685a      	ldr	r2, [r3, #4]
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	f022 0201 	bic.w	r2, r2, #1
 800cf36:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800cf38:	68ba      	ldr	r2, [r7, #8]
 800cf3a:	2164      	movs	r1, #100	; 0x64
 800cf3c:	68f8      	ldr	r0, [r7, #12]
 800cf3e:	f000 f9e1 	bl	800d304 <SPI_EndRxTransaction>
 800cf42:	4603      	mov	r3, r0
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d002      	beq.n	800cf4e <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	2220      	movs	r2, #32
 800cf4c:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	2200      	movs	r2, #0
 800cf52:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	2201      	movs	r2, #1
 800cf5a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d003      	beq.n	800cf6e <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800cf66:	68f8      	ldr	r0, [r7, #12]
 800cf68:	f7f8 fca6 	bl	80058b8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800cf6c:	e002      	b.n	800cf74 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800cf6e:	68f8      	ldr	r0, [r7, #12]
 800cf70:	f7f8 fc80 	bl	8005874 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800cf74:	3710      	adds	r7, #16
 800cf76:	46bd      	mov	sp, r7
 800cf78:	bd80      	pop	{r7, pc}

0800cf7a <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800cf7a:	b580      	push	{r7, lr}
 800cf7c:	b084      	sub	sp, #16
 800cf7e:	af00      	add	r7, sp, #0
 800cf80:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf86:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800cf88:	f7fa fcdc 	bl	8007944 <HAL_GetTick>
 800cf8c:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	f003 0320 	and.w	r3, r3, #32
 800cf98:	2b20      	cmp	r3, #32
 800cf9a:	d030      	beq.n	800cffe <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	685a      	ldr	r2, [r3, #4]
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	f022 0220 	bic.w	r2, r2, #32
 800cfaa:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800cfac:	68ba      	ldr	r2, [r7, #8]
 800cfae:	2164      	movs	r1, #100	; 0x64
 800cfb0:	68f8      	ldr	r0, [r7, #12]
 800cfb2:	f000 f9ff 	bl	800d3b4 <SPI_EndRxTxTransaction>
 800cfb6:	4603      	mov	r3, r0
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d005      	beq.n	800cfc8 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cfc0:	f043 0220 	orr.w	r2, r3, #32
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	685a      	ldr	r2, [r3, #4]
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	f022 0203 	bic.w	r2, r2, #3
 800cfd6:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	2200      	movs	r2, #0
 800cfdc:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	2200      	movs	r2, #0
 800cfe2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	2201      	movs	r2, #1
 800cfea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d003      	beq.n	800cffe <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800cff6:	68f8      	ldr	r0, [r7, #12]
 800cff8:	f7f8 fc5e 	bl	80058b8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800cffc:	e002      	b.n	800d004 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800cffe:	68f8      	ldr	r0, [r7, #12]
 800d000:	f7f8 fc4e 	bl	80058a0 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d004:	3710      	adds	r7, #16
 800d006:	46bd      	mov	sp, r7
 800d008:	bd80      	pop	{r7, pc}

0800d00a <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d00a:	b580      	push	{r7, lr}
 800d00c:	b084      	sub	sp, #16
 800d00e:	af00      	add	r7, sp, #0
 800d010:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d016:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800d018:	68f8      	ldr	r0, [r7, #12]
 800d01a:	f7ff fedb 	bl	800cdd4 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d01e:	bf00      	nop
 800d020:	3710      	adds	r7, #16
 800d022:	46bd      	mov	sp, r7
 800d024:	bd80      	pop	{r7, pc}

0800d026 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d026:	b580      	push	{r7, lr}
 800d028:	b084      	sub	sp, #16
 800d02a:	af00      	add	r7, sp, #0
 800d02c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d032:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800d034:	68f8      	ldr	r0, [r7, #12]
 800d036:	f7ff fed7 	bl	800cde8 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d03a:	bf00      	nop
 800d03c:	3710      	adds	r7, #16
 800d03e:	46bd      	mov	sp, r7
 800d040:	bd80      	pop	{r7, pc}

0800d042 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d042:	b580      	push	{r7, lr}
 800d044:	b084      	sub	sp, #16
 800d046:	af00      	add	r7, sp, #0
 800d048:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d04e:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800d050:	68f8      	ldr	r0, [r7, #12]
 800d052:	f7ff fed3 	bl	800cdfc <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d056:	bf00      	nop
 800d058:	3710      	adds	r7, #16
 800d05a:	46bd      	mov	sp, r7
 800d05c:	bd80      	pop	{r7, pc}

0800d05e <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800d05e:	b580      	push	{r7, lr}
 800d060:	b084      	sub	sp, #16
 800d062:	af00      	add	r7, sp, #0
 800d064:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d06a:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	685a      	ldr	r2, [r3, #4]
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	f022 0203 	bic.w	r2, r2, #3
 800d07a:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d080:	f043 0210 	orr.w	r2, r3, #16
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	2201      	movs	r2, #1
 800d08c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800d090:	68f8      	ldr	r0, [r7, #12]
 800d092:	f7f8 fc11 	bl	80058b8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d096:	bf00      	nop
 800d098:	3710      	adds	r7, #16
 800d09a:	46bd      	mov	sp, r7
 800d09c:	bd80      	pop	{r7, pc}

0800d09e <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d09e:	b580      	push	{r7, lr}
 800d0a0:	b084      	sub	sp, #16
 800d0a2:	af00      	add	r7, sp, #0
 800d0a4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0aa:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	2200      	movs	r2, #0
 800d0b0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	2200      	movs	r2, #0
 800d0b8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800d0ba:	68f8      	ldr	r0, [r7, #12]
 800d0bc:	f7f8 fbfc 	bl	80058b8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d0c0:	bf00      	nop
 800d0c2:	3710      	adds	r7, #16
 800d0c4:	46bd      	mov	sp, r7
 800d0c6:	bd80      	pop	{r7, pc}

0800d0c8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800d0c8:	b580      	push	{r7, lr}
 800d0ca:	b088      	sub	sp, #32
 800d0cc:	af00      	add	r7, sp, #0
 800d0ce:	60f8      	str	r0, [r7, #12]
 800d0d0:	60b9      	str	r1, [r7, #8]
 800d0d2:	603b      	str	r3, [r7, #0]
 800d0d4:	4613      	mov	r3, r2
 800d0d6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800d0d8:	f7fa fc34 	bl	8007944 <HAL_GetTick>
 800d0dc:	4602      	mov	r2, r0
 800d0de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0e0:	1a9b      	subs	r3, r3, r2
 800d0e2:	683a      	ldr	r2, [r7, #0]
 800d0e4:	4413      	add	r3, r2
 800d0e6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800d0e8:	f7fa fc2c 	bl	8007944 <HAL_GetTick>
 800d0ec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800d0ee:	4b39      	ldr	r3, [pc, #228]	; (800d1d4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	015b      	lsls	r3, r3, #5
 800d0f4:	0d1b      	lsrs	r3, r3, #20
 800d0f6:	69fa      	ldr	r2, [r7, #28]
 800d0f8:	fb02 f303 	mul.w	r3, r2, r3
 800d0fc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d0fe:	e054      	b.n	800d1aa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800d100:	683b      	ldr	r3, [r7, #0]
 800d102:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d106:	d050      	beq.n	800d1aa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800d108:	f7fa fc1c 	bl	8007944 <HAL_GetTick>
 800d10c:	4602      	mov	r2, r0
 800d10e:	69bb      	ldr	r3, [r7, #24]
 800d110:	1ad3      	subs	r3, r2, r3
 800d112:	69fa      	ldr	r2, [r7, #28]
 800d114:	429a      	cmp	r2, r3
 800d116:	d902      	bls.n	800d11e <SPI_WaitFlagStateUntilTimeout+0x56>
 800d118:	69fb      	ldr	r3, [r7, #28]
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d13d      	bne.n	800d19a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	685a      	ldr	r2, [r3, #4]
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800d12c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	685b      	ldr	r3, [r3, #4]
 800d132:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d136:	d111      	bne.n	800d15c <SPI_WaitFlagStateUntilTimeout+0x94>
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	689b      	ldr	r3, [r3, #8]
 800d13c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d140:	d004      	beq.n	800d14c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	689b      	ldr	r3, [r3, #8]
 800d146:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d14a:	d107      	bne.n	800d15c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	681a      	ldr	r2, [r3, #0]
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d15a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d160:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d164:	d10f      	bne.n	800d186 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	681a      	ldr	r2, [r3, #0]
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d174:	601a      	str	r2, [r3, #0]
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	681a      	ldr	r2, [r3, #0]
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d184:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	2201      	movs	r2, #1
 800d18a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	2200      	movs	r2, #0
 800d192:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800d196:	2303      	movs	r3, #3
 800d198:	e017      	b.n	800d1ca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800d19a:	697b      	ldr	r3, [r7, #20]
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d101      	bne.n	800d1a4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800d1a0:	2300      	movs	r3, #0
 800d1a2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800d1a4:	697b      	ldr	r3, [r7, #20]
 800d1a6:	3b01      	subs	r3, #1
 800d1a8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	689a      	ldr	r2, [r3, #8]
 800d1b0:	68bb      	ldr	r3, [r7, #8]
 800d1b2:	4013      	ands	r3, r2
 800d1b4:	68ba      	ldr	r2, [r7, #8]
 800d1b6:	429a      	cmp	r2, r3
 800d1b8:	bf0c      	ite	eq
 800d1ba:	2301      	moveq	r3, #1
 800d1bc:	2300      	movne	r3, #0
 800d1be:	b2db      	uxtb	r3, r3
 800d1c0:	461a      	mov	r2, r3
 800d1c2:	79fb      	ldrb	r3, [r7, #7]
 800d1c4:	429a      	cmp	r2, r3
 800d1c6:	d19b      	bne.n	800d100 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800d1c8:	2300      	movs	r3, #0
}
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	3720      	adds	r7, #32
 800d1ce:	46bd      	mov	sp, r7
 800d1d0:	bd80      	pop	{r7, pc}
 800d1d2:	bf00      	nop
 800d1d4:	20000228 	.word	0x20000228

0800d1d8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800d1d8:	b580      	push	{r7, lr}
 800d1da:	b08a      	sub	sp, #40	; 0x28
 800d1dc:	af00      	add	r7, sp, #0
 800d1de:	60f8      	str	r0, [r7, #12]
 800d1e0:	60b9      	str	r1, [r7, #8]
 800d1e2:	607a      	str	r2, [r7, #4]
 800d1e4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800d1e6:	2300      	movs	r3, #0
 800d1e8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800d1ea:	f7fa fbab 	bl	8007944 <HAL_GetTick>
 800d1ee:	4602      	mov	r2, r0
 800d1f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1f2:	1a9b      	subs	r3, r3, r2
 800d1f4:	683a      	ldr	r2, [r7, #0]
 800d1f6:	4413      	add	r3, r2
 800d1f8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800d1fa:	f7fa fba3 	bl	8007944 <HAL_GetTick>
 800d1fe:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	330c      	adds	r3, #12
 800d206:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800d208:	4b3d      	ldr	r3, [pc, #244]	; (800d300 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800d20a:	681a      	ldr	r2, [r3, #0]
 800d20c:	4613      	mov	r3, r2
 800d20e:	009b      	lsls	r3, r3, #2
 800d210:	4413      	add	r3, r2
 800d212:	00da      	lsls	r2, r3, #3
 800d214:	1ad3      	subs	r3, r2, r3
 800d216:	0d1b      	lsrs	r3, r3, #20
 800d218:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d21a:	fb02 f303 	mul.w	r3, r2, r3
 800d21e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800d220:	e060      	b.n	800d2e4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800d222:	68bb      	ldr	r3, [r7, #8]
 800d224:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800d228:	d107      	bne.n	800d23a <SPI_WaitFifoStateUntilTimeout+0x62>
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d104      	bne.n	800d23a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800d230:	69fb      	ldr	r3, [r7, #28]
 800d232:	781b      	ldrb	r3, [r3, #0]
 800d234:	b2db      	uxtb	r3, r3
 800d236:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800d238:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800d23a:	683b      	ldr	r3, [r7, #0]
 800d23c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d240:	d050      	beq.n	800d2e4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800d242:	f7fa fb7f 	bl	8007944 <HAL_GetTick>
 800d246:	4602      	mov	r2, r0
 800d248:	6a3b      	ldr	r3, [r7, #32]
 800d24a:	1ad3      	subs	r3, r2, r3
 800d24c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d24e:	429a      	cmp	r2, r3
 800d250:	d902      	bls.n	800d258 <SPI_WaitFifoStateUntilTimeout+0x80>
 800d252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d254:	2b00      	cmp	r3, #0
 800d256:	d13d      	bne.n	800d2d4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	685a      	ldr	r2, [r3, #4]
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800d266:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	685b      	ldr	r3, [r3, #4]
 800d26c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d270:	d111      	bne.n	800d296 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	689b      	ldr	r3, [r3, #8]
 800d276:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d27a:	d004      	beq.n	800d286 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	689b      	ldr	r3, [r3, #8]
 800d280:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d284:	d107      	bne.n	800d296 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	681a      	ldr	r2, [r3, #0]
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d294:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d29a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d29e:	d10f      	bne.n	800d2c0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	681a      	ldr	r2, [r3, #0]
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d2ae:	601a      	str	r2, [r3, #0]
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	681a      	ldr	r2, [r3, #0]
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d2be:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	2201      	movs	r2, #1
 800d2c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	2200      	movs	r2, #0
 800d2cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800d2d0:	2303      	movs	r3, #3
 800d2d2:	e010      	b.n	800d2f6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800d2d4:	69bb      	ldr	r3, [r7, #24]
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d101      	bne.n	800d2de <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800d2da:	2300      	movs	r3, #0
 800d2dc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800d2de:	69bb      	ldr	r3, [r7, #24]
 800d2e0:	3b01      	subs	r3, #1
 800d2e2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	689a      	ldr	r2, [r3, #8]
 800d2ea:	68bb      	ldr	r3, [r7, #8]
 800d2ec:	4013      	ands	r3, r2
 800d2ee:	687a      	ldr	r2, [r7, #4]
 800d2f0:	429a      	cmp	r2, r3
 800d2f2:	d196      	bne.n	800d222 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800d2f4:	2300      	movs	r3, #0
}
 800d2f6:	4618      	mov	r0, r3
 800d2f8:	3728      	adds	r7, #40	; 0x28
 800d2fa:	46bd      	mov	sp, r7
 800d2fc:	bd80      	pop	{r7, pc}
 800d2fe:	bf00      	nop
 800d300:	20000228 	.word	0x20000228

0800d304 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800d304:	b580      	push	{r7, lr}
 800d306:	b086      	sub	sp, #24
 800d308:	af02      	add	r7, sp, #8
 800d30a:	60f8      	str	r0, [r7, #12]
 800d30c:	60b9      	str	r1, [r7, #8]
 800d30e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	685b      	ldr	r3, [r3, #4]
 800d314:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d318:	d111      	bne.n	800d33e <SPI_EndRxTransaction+0x3a>
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	689b      	ldr	r3, [r3, #8]
 800d31e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d322:	d004      	beq.n	800d32e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	689b      	ldr	r3, [r3, #8]
 800d328:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d32c:	d107      	bne.n	800d33e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	681a      	ldr	r2, [r3, #0]
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d33c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	9300      	str	r3, [sp, #0]
 800d342:	68bb      	ldr	r3, [r7, #8]
 800d344:	2200      	movs	r2, #0
 800d346:	2180      	movs	r1, #128	; 0x80
 800d348:	68f8      	ldr	r0, [r7, #12]
 800d34a:	f7ff febd 	bl	800d0c8 <SPI_WaitFlagStateUntilTimeout>
 800d34e:	4603      	mov	r3, r0
 800d350:	2b00      	cmp	r3, #0
 800d352:	d007      	beq.n	800d364 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d358:	f043 0220 	orr.w	r2, r3, #32
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800d360:	2303      	movs	r3, #3
 800d362:	e023      	b.n	800d3ac <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	685b      	ldr	r3, [r3, #4]
 800d368:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d36c:	d11d      	bne.n	800d3aa <SPI_EndRxTransaction+0xa6>
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	689b      	ldr	r3, [r3, #8]
 800d372:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d376:	d004      	beq.n	800d382 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	689b      	ldr	r3, [r3, #8]
 800d37c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d380:	d113      	bne.n	800d3aa <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	9300      	str	r3, [sp, #0]
 800d386:	68bb      	ldr	r3, [r7, #8]
 800d388:	2200      	movs	r2, #0
 800d38a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800d38e:	68f8      	ldr	r0, [r7, #12]
 800d390:	f7ff ff22 	bl	800d1d8 <SPI_WaitFifoStateUntilTimeout>
 800d394:	4603      	mov	r3, r0
 800d396:	2b00      	cmp	r3, #0
 800d398:	d007      	beq.n	800d3aa <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d39e:	f043 0220 	orr.w	r2, r3, #32
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800d3a6:	2303      	movs	r3, #3
 800d3a8:	e000      	b.n	800d3ac <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800d3aa:	2300      	movs	r3, #0
}
 800d3ac:	4618      	mov	r0, r3
 800d3ae:	3710      	adds	r7, #16
 800d3b0:	46bd      	mov	sp, r7
 800d3b2:	bd80      	pop	{r7, pc}

0800d3b4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800d3b4:	b580      	push	{r7, lr}
 800d3b6:	b086      	sub	sp, #24
 800d3b8:	af02      	add	r7, sp, #8
 800d3ba:	60f8      	str	r0, [r7, #12]
 800d3bc:	60b9      	str	r1, [r7, #8]
 800d3be:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	9300      	str	r3, [sp, #0]
 800d3c4:	68bb      	ldr	r3, [r7, #8]
 800d3c6:	2200      	movs	r2, #0
 800d3c8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800d3cc:	68f8      	ldr	r0, [r7, #12]
 800d3ce:	f7ff ff03 	bl	800d1d8 <SPI_WaitFifoStateUntilTimeout>
 800d3d2:	4603      	mov	r3, r0
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d007      	beq.n	800d3e8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d3dc:	f043 0220 	orr.w	r2, r3, #32
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800d3e4:	2303      	movs	r3, #3
 800d3e6:	e027      	b.n	800d438 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	9300      	str	r3, [sp, #0]
 800d3ec:	68bb      	ldr	r3, [r7, #8]
 800d3ee:	2200      	movs	r2, #0
 800d3f0:	2180      	movs	r1, #128	; 0x80
 800d3f2:	68f8      	ldr	r0, [r7, #12]
 800d3f4:	f7ff fe68 	bl	800d0c8 <SPI_WaitFlagStateUntilTimeout>
 800d3f8:	4603      	mov	r3, r0
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d007      	beq.n	800d40e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d402:	f043 0220 	orr.w	r2, r3, #32
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800d40a:	2303      	movs	r3, #3
 800d40c:	e014      	b.n	800d438 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	9300      	str	r3, [sp, #0]
 800d412:	68bb      	ldr	r3, [r7, #8]
 800d414:	2200      	movs	r2, #0
 800d416:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800d41a:	68f8      	ldr	r0, [r7, #12]
 800d41c:	f7ff fedc 	bl	800d1d8 <SPI_WaitFifoStateUntilTimeout>
 800d420:	4603      	mov	r3, r0
 800d422:	2b00      	cmp	r3, #0
 800d424:	d007      	beq.n	800d436 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d42a:	f043 0220 	orr.w	r2, r3, #32
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800d432:	2303      	movs	r3, #3
 800d434:	e000      	b.n	800d438 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800d436:	2300      	movs	r3, #0
}
 800d438:	4618      	mov	r0, r3
 800d43a:	3710      	adds	r7, #16
 800d43c:	46bd      	mov	sp, r7
 800d43e:	bd80      	pop	{r7, pc}

0800d440 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d440:	b580      	push	{r7, lr}
 800d442:	b082      	sub	sp, #8
 800d444:	af00      	add	r7, sp, #0
 800d446:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d101      	bne.n	800d452 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d44e:	2301      	movs	r3, #1
 800d450:	e049      	b.n	800d4e6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d458:	b2db      	uxtb	r3, r3
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d106      	bne.n	800d46c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	2200      	movs	r2, #0
 800d462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d466:	6878      	ldr	r0, [r7, #4]
 800d468:	f7f9 f972 	bl	8006750 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	2202      	movs	r2, #2
 800d470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	681a      	ldr	r2, [r3, #0]
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	3304      	adds	r3, #4
 800d47c:	4619      	mov	r1, r3
 800d47e:	4610      	mov	r0, r2
 800d480:	f000 fae6 	bl	800da50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	2201      	movs	r2, #1
 800d488:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	2201      	movs	r2, #1
 800d490:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	2201      	movs	r2, #1
 800d498:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	2201      	movs	r2, #1
 800d4a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	2201      	movs	r2, #1
 800d4a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	2201      	movs	r2, #1
 800d4b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	2201      	movs	r2, #1
 800d4b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	2201      	movs	r2, #1
 800d4c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	2201      	movs	r2, #1
 800d4c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	2201      	movs	r2, #1
 800d4d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	2201      	movs	r2, #1
 800d4d8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	2201      	movs	r2, #1
 800d4e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d4e4:	2300      	movs	r3, #0
}
 800d4e6:	4618      	mov	r0, r3
 800d4e8:	3708      	adds	r7, #8
 800d4ea:	46bd      	mov	sp, r7
 800d4ec:	bd80      	pop	{r7, pc}
	...

0800d4f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d4f0:	b480      	push	{r7}
 800d4f2:	b085      	sub	sp, #20
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d4fe:	b2db      	uxtb	r3, r3
 800d500:	2b01      	cmp	r3, #1
 800d502:	d001      	beq.n	800d508 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d504:	2301      	movs	r3, #1
 800d506:	e04f      	b.n	800d5a8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	2202      	movs	r2, #2
 800d50c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	68da      	ldr	r2, [r3, #12]
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	f042 0201 	orr.w	r2, r2, #1
 800d51e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	4a23      	ldr	r2, [pc, #140]	; (800d5b4 <HAL_TIM_Base_Start_IT+0xc4>)
 800d526:	4293      	cmp	r3, r2
 800d528:	d01d      	beq.n	800d566 <HAL_TIM_Base_Start_IT+0x76>
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d532:	d018      	beq.n	800d566 <HAL_TIM_Base_Start_IT+0x76>
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	4a1f      	ldr	r2, [pc, #124]	; (800d5b8 <HAL_TIM_Base_Start_IT+0xc8>)
 800d53a:	4293      	cmp	r3, r2
 800d53c:	d013      	beq.n	800d566 <HAL_TIM_Base_Start_IT+0x76>
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	4a1e      	ldr	r2, [pc, #120]	; (800d5bc <HAL_TIM_Base_Start_IT+0xcc>)
 800d544:	4293      	cmp	r3, r2
 800d546:	d00e      	beq.n	800d566 <HAL_TIM_Base_Start_IT+0x76>
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	4a1c      	ldr	r2, [pc, #112]	; (800d5c0 <HAL_TIM_Base_Start_IT+0xd0>)
 800d54e:	4293      	cmp	r3, r2
 800d550:	d009      	beq.n	800d566 <HAL_TIM_Base_Start_IT+0x76>
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	4a1b      	ldr	r2, [pc, #108]	; (800d5c4 <HAL_TIM_Base_Start_IT+0xd4>)
 800d558:	4293      	cmp	r3, r2
 800d55a:	d004      	beq.n	800d566 <HAL_TIM_Base_Start_IT+0x76>
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	4a19      	ldr	r2, [pc, #100]	; (800d5c8 <HAL_TIM_Base_Start_IT+0xd8>)
 800d562:	4293      	cmp	r3, r2
 800d564:	d115      	bne.n	800d592 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	689a      	ldr	r2, [r3, #8]
 800d56c:	4b17      	ldr	r3, [pc, #92]	; (800d5cc <HAL_TIM_Base_Start_IT+0xdc>)
 800d56e:	4013      	ands	r3, r2
 800d570:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	2b06      	cmp	r3, #6
 800d576:	d015      	beq.n	800d5a4 <HAL_TIM_Base_Start_IT+0xb4>
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d57e:	d011      	beq.n	800d5a4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	681a      	ldr	r2, [r3, #0]
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	f042 0201 	orr.w	r2, r2, #1
 800d58e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d590:	e008      	b.n	800d5a4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	681a      	ldr	r2, [r3, #0]
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	f042 0201 	orr.w	r2, r2, #1
 800d5a0:	601a      	str	r2, [r3, #0]
 800d5a2:	e000      	b.n	800d5a6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d5a4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d5a6:	2300      	movs	r3, #0
}
 800d5a8:	4618      	mov	r0, r3
 800d5aa:	3714      	adds	r7, #20
 800d5ac:	46bd      	mov	sp, r7
 800d5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b2:	4770      	bx	lr
 800d5b4:	40012c00 	.word	0x40012c00
 800d5b8:	40000400 	.word	0x40000400
 800d5bc:	40000800 	.word	0x40000800
 800d5c0:	40000c00 	.word	0x40000c00
 800d5c4:	40013400 	.word	0x40013400
 800d5c8:	40014000 	.word	0x40014000
 800d5cc:	00010007 	.word	0x00010007

0800d5d0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800d5d0:	b480      	push	{r7}
 800d5d2:	b083      	sub	sp, #12
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	68da      	ldr	r2, [r3, #12]
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	f022 0201 	bic.w	r2, r2, #1
 800d5e6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	6a1a      	ldr	r2, [r3, #32]
 800d5ee:	f241 1311 	movw	r3, #4369	; 0x1111
 800d5f2:	4013      	ands	r3, r2
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d10f      	bne.n	800d618 <HAL_TIM_Base_Stop_IT+0x48>
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	6a1a      	ldr	r2, [r3, #32]
 800d5fe:	f240 4344 	movw	r3, #1092	; 0x444
 800d602:	4013      	ands	r3, r2
 800d604:	2b00      	cmp	r3, #0
 800d606:	d107      	bne.n	800d618 <HAL_TIM_Base_Stop_IT+0x48>
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	681a      	ldr	r2, [r3, #0]
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	f022 0201 	bic.w	r2, r2, #1
 800d616:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	2201      	movs	r2, #1
 800d61c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800d620:	2300      	movs	r3, #0
}
 800d622:	4618      	mov	r0, r3
 800d624:	370c      	adds	r7, #12
 800d626:	46bd      	mov	sp, r7
 800d628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d62c:	4770      	bx	lr

0800d62e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d62e:	b580      	push	{r7, lr}
 800d630:	b082      	sub	sp, #8
 800d632:	af00      	add	r7, sp, #0
 800d634:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	691b      	ldr	r3, [r3, #16]
 800d63c:	f003 0302 	and.w	r3, r3, #2
 800d640:	2b02      	cmp	r3, #2
 800d642:	d122      	bne.n	800d68a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	68db      	ldr	r3, [r3, #12]
 800d64a:	f003 0302 	and.w	r3, r3, #2
 800d64e:	2b02      	cmp	r3, #2
 800d650:	d11b      	bne.n	800d68a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	f06f 0202 	mvn.w	r2, #2
 800d65a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	2201      	movs	r2, #1
 800d660:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	699b      	ldr	r3, [r3, #24]
 800d668:	f003 0303 	and.w	r3, r3, #3
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d003      	beq.n	800d678 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d670:	6878      	ldr	r0, [r7, #4]
 800d672:	f000 f9ce 	bl	800da12 <HAL_TIM_IC_CaptureCallback>
 800d676:	e005      	b.n	800d684 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d678:	6878      	ldr	r0, [r7, #4]
 800d67a:	f000 f9c0 	bl	800d9fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d67e:	6878      	ldr	r0, [r7, #4]
 800d680:	f000 f9d1 	bl	800da26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	2200      	movs	r2, #0
 800d688:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	691b      	ldr	r3, [r3, #16]
 800d690:	f003 0304 	and.w	r3, r3, #4
 800d694:	2b04      	cmp	r3, #4
 800d696:	d122      	bne.n	800d6de <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	68db      	ldr	r3, [r3, #12]
 800d69e:	f003 0304 	and.w	r3, r3, #4
 800d6a2:	2b04      	cmp	r3, #4
 800d6a4:	d11b      	bne.n	800d6de <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	f06f 0204 	mvn.w	r2, #4
 800d6ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	2202      	movs	r2, #2
 800d6b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	699b      	ldr	r3, [r3, #24]
 800d6bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d003      	beq.n	800d6cc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d6c4:	6878      	ldr	r0, [r7, #4]
 800d6c6:	f000 f9a4 	bl	800da12 <HAL_TIM_IC_CaptureCallback>
 800d6ca:	e005      	b.n	800d6d8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d6cc:	6878      	ldr	r0, [r7, #4]
 800d6ce:	f000 f996 	bl	800d9fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d6d2:	6878      	ldr	r0, [r7, #4]
 800d6d4:	f000 f9a7 	bl	800da26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	2200      	movs	r2, #0
 800d6dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	691b      	ldr	r3, [r3, #16]
 800d6e4:	f003 0308 	and.w	r3, r3, #8
 800d6e8:	2b08      	cmp	r3, #8
 800d6ea:	d122      	bne.n	800d732 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	68db      	ldr	r3, [r3, #12]
 800d6f2:	f003 0308 	and.w	r3, r3, #8
 800d6f6:	2b08      	cmp	r3, #8
 800d6f8:	d11b      	bne.n	800d732 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	f06f 0208 	mvn.w	r2, #8
 800d702:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	2204      	movs	r2, #4
 800d708:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	69db      	ldr	r3, [r3, #28]
 800d710:	f003 0303 	and.w	r3, r3, #3
 800d714:	2b00      	cmp	r3, #0
 800d716:	d003      	beq.n	800d720 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d718:	6878      	ldr	r0, [r7, #4]
 800d71a:	f000 f97a 	bl	800da12 <HAL_TIM_IC_CaptureCallback>
 800d71e:	e005      	b.n	800d72c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d720:	6878      	ldr	r0, [r7, #4]
 800d722:	f000 f96c 	bl	800d9fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d726:	6878      	ldr	r0, [r7, #4]
 800d728:	f000 f97d 	bl	800da26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	2200      	movs	r2, #0
 800d730:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	691b      	ldr	r3, [r3, #16]
 800d738:	f003 0310 	and.w	r3, r3, #16
 800d73c:	2b10      	cmp	r3, #16
 800d73e:	d122      	bne.n	800d786 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	68db      	ldr	r3, [r3, #12]
 800d746:	f003 0310 	and.w	r3, r3, #16
 800d74a:	2b10      	cmp	r3, #16
 800d74c:	d11b      	bne.n	800d786 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	f06f 0210 	mvn.w	r2, #16
 800d756:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	2208      	movs	r2, #8
 800d75c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	69db      	ldr	r3, [r3, #28]
 800d764:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d003      	beq.n	800d774 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d76c:	6878      	ldr	r0, [r7, #4]
 800d76e:	f000 f950 	bl	800da12 <HAL_TIM_IC_CaptureCallback>
 800d772:	e005      	b.n	800d780 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d774:	6878      	ldr	r0, [r7, #4]
 800d776:	f000 f942 	bl	800d9fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d77a:	6878      	ldr	r0, [r7, #4]
 800d77c:	f000 f953 	bl	800da26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	2200      	movs	r2, #0
 800d784:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	691b      	ldr	r3, [r3, #16]
 800d78c:	f003 0301 	and.w	r3, r3, #1
 800d790:	2b01      	cmp	r3, #1
 800d792:	d10e      	bne.n	800d7b2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	68db      	ldr	r3, [r3, #12]
 800d79a:	f003 0301 	and.w	r3, r3, #1
 800d79e:	2b01      	cmp	r3, #1
 800d7a0:	d107      	bne.n	800d7b2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	f06f 0201 	mvn.w	r2, #1
 800d7aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d7ac:	6878      	ldr	r0, [r7, #4]
 800d7ae:	f7f7 fbe7 	bl	8004f80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	691b      	ldr	r3, [r3, #16]
 800d7b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d7bc:	2b80      	cmp	r3, #128	; 0x80
 800d7be:	d10e      	bne.n	800d7de <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	68db      	ldr	r3, [r3, #12]
 800d7c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d7ca:	2b80      	cmp	r3, #128	; 0x80
 800d7cc:	d107      	bne.n	800d7de <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d7d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d7d8:	6878      	ldr	r0, [r7, #4]
 800d7da:	f000 faff 	bl	800dddc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	691b      	ldr	r3, [r3, #16]
 800d7e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d7e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d7ec:	d10e      	bne.n	800d80c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	68db      	ldr	r3, [r3, #12]
 800d7f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d7f8:	2b80      	cmp	r3, #128	; 0x80
 800d7fa:	d107      	bne.n	800d80c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d804:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d806:	6878      	ldr	r0, [r7, #4]
 800d808:	f000 faf2 	bl	800ddf0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	691b      	ldr	r3, [r3, #16]
 800d812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d816:	2b40      	cmp	r3, #64	; 0x40
 800d818:	d10e      	bne.n	800d838 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	68db      	ldr	r3, [r3, #12]
 800d820:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d824:	2b40      	cmp	r3, #64	; 0x40
 800d826:	d107      	bne.n	800d838 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d830:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d832:	6878      	ldr	r0, [r7, #4]
 800d834:	f000 f901 	bl	800da3a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	691b      	ldr	r3, [r3, #16]
 800d83e:	f003 0320 	and.w	r3, r3, #32
 800d842:	2b20      	cmp	r3, #32
 800d844:	d10e      	bne.n	800d864 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	68db      	ldr	r3, [r3, #12]
 800d84c:	f003 0320 	and.w	r3, r3, #32
 800d850:	2b20      	cmp	r3, #32
 800d852:	d107      	bne.n	800d864 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	f06f 0220 	mvn.w	r2, #32
 800d85c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d85e:	6878      	ldr	r0, [r7, #4]
 800d860:	f000 fab2 	bl	800ddc8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d864:	bf00      	nop
 800d866:	3708      	adds	r7, #8
 800d868:	46bd      	mov	sp, r7
 800d86a:	bd80      	pop	{r7, pc}

0800d86c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d86c:	b580      	push	{r7, lr}
 800d86e:	b084      	sub	sp, #16
 800d870:	af00      	add	r7, sp, #0
 800d872:	6078      	str	r0, [r7, #4]
 800d874:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d876:	2300      	movs	r3, #0
 800d878:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d880:	2b01      	cmp	r3, #1
 800d882:	d101      	bne.n	800d888 <HAL_TIM_ConfigClockSource+0x1c>
 800d884:	2302      	movs	r3, #2
 800d886:	e0b6      	b.n	800d9f6 <HAL_TIM_ConfigClockSource+0x18a>
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	2201      	movs	r2, #1
 800d88c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	2202      	movs	r2, #2
 800d894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	689b      	ldr	r3, [r3, #8]
 800d89e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d8a0:	68bb      	ldr	r3, [r7, #8]
 800d8a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d8a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800d8aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d8ac:	68bb      	ldr	r3, [r7, #8]
 800d8ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d8b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	68ba      	ldr	r2, [r7, #8]
 800d8ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d8bc:	683b      	ldr	r3, [r7, #0]
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d8c4:	d03e      	beq.n	800d944 <HAL_TIM_ConfigClockSource+0xd8>
 800d8c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d8ca:	f200 8087 	bhi.w	800d9dc <HAL_TIM_ConfigClockSource+0x170>
 800d8ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d8d2:	f000 8086 	beq.w	800d9e2 <HAL_TIM_ConfigClockSource+0x176>
 800d8d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d8da:	d87f      	bhi.n	800d9dc <HAL_TIM_ConfigClockSource+0x170>
 800d8dc:	2b70      	cmp	r3, #112	; 0x70
 800d8de:	d01a      	beq.n	800d916 <HAL_TIM_ConfigClockSource+0xaa>
 800d8e0:	2b70      	cmp	r3, #112	; 0x70
 800d8e2:	d87b      	bhi.n	800d9dc <HAL_TIM_ConfigClockSource+0x170>
 800d8e4:	2b60      	cmp	r3, #96	; 0x60
 800d8e6:	d050      	beq.n	800d98a <HAL_TIM_ConfigClockSource+0x11e>
 800d8e8:	2b60      	cmp	r3, #96	; 0x60
 800d8ea:	d877      	bhi.n	800d9dc <HAL_TIM_ConfigClockSource+0x170>
 800d8ec:	2b50      	cmp	r3, #80	; 0x50
 800d8ee:	d03c      	beq.n	800d96a <HAL_TIM_ConfigClockSource+0xfe>
 800d8f0:	2b50      	cmp	r3, #80	; 0x50
 800d8f2:	d873      	bhi.n	800d9dc <HAL_TIM_ConfigClockSource+0x170>
 800d8f4:	2b40      	cmp	r3, #64	; 0x40
 800d8f6:	d058      	beq.n	800d9aa <HAL_TIM_ConfigClockSource+0x13e>
 800d8f8:	2b40      	cmp	r3, #64	; 0x40
 800d8fa:	d86f      	bhi.n	800d9dc <HAL_TIM_ConfigClockSource+0x170>
 800d8fc:	2b30      	cmp	r3, #48	; 0x30
 800d8fe:	d064      	beq.n	800d9ca <HAL_TIM_ConfigClockSource+0x15e>
 800d900:	2b30      	cmp	r3, #48	; 0x30
 800d902:	d86b      	bhi.n	800d9dc <HAL_TIM_ConfigClockSource+0x170>
 800d904:	2b20      	cmp	r3, #32
 800d906:	d060      	beq.n	800d9ca <HAL_TIM_ConfigClockSource+0x15e>
 800d908:	2b20      	cmp	r3, #32
 800d90a:	d867      	bhi.n	800d9dc <HAL_TIM_ConfigClockSource+0x170>
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d05c      	beq.n	800d9ca <HAL_TIM_ConfigClockSource+0x15e>
 800d910:	2b10      	cmp	r3, #16
 800d912:	d05a      	beq.n	800d9ca <HAL_TIM_ConfigClockSource+0x15e>
 800d914:	e062      	b.n	800d9dc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	6818      	ldr	r0, [r3, #0]
 800d91a:	683b      	ldr	r3, [r7, #0]
 800d91c:	6899      	ldr	r1, [r3, #8]
 800d91e:	683b      	ldr	r3, [r7, #0]
 800d920:	685a      	ldr	r2, [r3, #4]
 800d922:	683b      	ldr	r3, [r7, #0]
 800d924:	68db      	ldr	r3, [r3, #12]
 800d926:	f000 f9a7 	bl	800dc78 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	689b      	ldr	r3, [r3, #8]
 800d930:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d932:	68bb      	ldr	r3, [r7, #8]
 800d934:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d938:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	68ba      	ldr	r2, [r7, #8]
 800d940:	609a      	str	r2, [r3, #8]
      break;
 800d942:	e04f      	b.n	800d9e4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	6818      	ldr	r0, [r3, #0]
 800d948:	683b      	ldr	r3, [r7, #0]
 800d94a:	6899      	ldr	r1, [r3, #8]
 800d94c:	683b      	ldr	r3, [r7, #0]
 800d94e:	685a      	ldr	r2, [r3, #4]
 800d950:	683b      	ldr	r3, [r7, #0]
 800d952:	68db      	ldr	r3, [r3, #12]
 800d954:	f000 f990 	bl	800dc78 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	689a      	ldr	r2, [r3, #8]
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d966:	609a      	str	r2, [r3, #8]
      break;
 800d968:	e03c      	b.n	800d9e4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	6818      	ldr	r0, [r3, #0]
 800d96e:	683b      	ldr	r3, [r7, #0]
 800d970:	6859      	ldr	r1, [r3, #4]
 800d972:	683b      	ldr	r3, [r7, #0]
 800d974:	68db      	ldr	r3, [r3, #12]
 800d976:	461a      	mov	r2, r3
 800d978:	f000 f904 	bl	800db84 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	2150      	movs	r1, #80	; 0x50
 800d982:	4618      	mov	r0, r3
 800d984:	f000 f95d 	bl	800dc42 <TIM_ITRx_SetConfig>
      break;
 800d988:	e02c      	b.n	800d9e4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	6818      	ldr	r0, [r3, #0]
 800d98e:	683b      	ldr	r3, [r7, #0]
 800d990:	6859      	ldr	r1, [r3, #4]
 800d992:	683b      	ldr	r3, [r7, #0]
 800d994:	68db      	ldr	r3, [r3, #12]
 800d996:	461a      	mov	r2, r3
 800d998:	f000 f923 	bl	800dbe2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	2160      	movs	r1, #96	; 0x60
 800d9a2:	4618      	mov	r0, r3
 800d9a4:	f000 f94d 	bl	800dc42 <TIM_ITRx_SetConfig>
      break;
 800d9a8:	e01c      	b.n	800d9e4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	6818      	ldr	r0, [r3, #0]
 800d9ae:	683b      	ldr	r3, [r7, #0]
 800d9b0:	6859      	ldr	r1, [r3, #4]
 800d9b2:	683b      	ldr	r3, [r7, #0]
 800d9b4:	68db      	ldr	r3, [r3, #12]
 800d9b6:	461a      	mov	r2, r3
 800d9b8:	f000 f8e4 	bl	800db84 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	2140      	movs	r1, #64	; 0x40
 800d9c2:	4618      	mov	r0, r3
 800d9c4:	f000 f93d 	bl	800dc42 <TIM_ITRx_SetConfig>
      break;
 800d9c8:	e00c      	b.n	800d9e4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	681a      	ldr	r2, [r3, #0]
 800d9ce:	683b      	ldr	r3, [r7, #0]
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	4619      	mov	r1, r3
 800d9d4:	4610      	mov	r0, r2
 800d9d6:	f000 f934 	bl	800dc42 <TIM_ITRx_SetConfig>
      break;
 800d9da:	e003      	b.n	800d9e4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800d9dc:	2301      	movs	r3, #1
 800d9de:	73fb      	strb	r3, [r7, #15]
      break;
 800d9e0:	e000      	b.n	800d9e4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800d9e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	2201      	movs	r2, #1
 800d9e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	2200      	movs	r2, #0
 800d9f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d9f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9f6:	4618      	mov	r0, r3
 800d9f8:	3710      	adds	r7, #16
 800d9fa:	46bd      	mov	sp, r7
 800d9fc:	bd80      	pop	{r7, pc}

0800d9fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d9fe:	b480      	push	{r7}
 800da00:	b083      	sub	sp, #12
 800da02:	af00      	add	r7, sp, #0
 800da04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800da06:	bf00      	nop
 800da08:	370c      	adds	r7, #12
 800da0a:	46bd      	mov	sp, r7
 800da0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da10:	4770      	bx	lr

0800da12 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800da12:	b480      	push	{r7}
 800da14:	b083      	sub	sp, #12
 800da16:	af00      	add	r7, sp, #0
 800da18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800da1a:	bf00      	nop
 800da1c:	370c      	adds	r7, #12
 800da1e:	46bd      	mov	sp, r7
 800da20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da24:	4770      	bx	lr

0800da26 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800da26:	b480      	push	{r7}
 800da28:	b083      	sub	sp, #12
 800da2a:	af00      	add	r7, sp, #0
 800da2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800da2e:	bf00      	nop
 800da30:	370c      	adds	r7, #12
 800da32:	46bd      	mov	sp, r7
 800da34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da38:	4770      	bx	lr

0800da3a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800da3a:	b480      	push	{r7}
 800da3c:	b083      	sub	sp, #12
 800da3e:	af00      	add	r7, sp, #0
 800da40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800da42:	bf00      	nop
 800da44:	370c      	adds	r7, #12
 800da46:	46bd      	mov	sp, r7
 800da48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da4c:	4770      	bx	lr
	...

0800da50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800da50:	b480      	push	{r7}
 800da52:	b085      	sub	sp, #20
 800da54:	af00      	add	r7, sp, #0
 800da56:	6078      	str	r0, [r7, #4]
 800da58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	4a40      	ldr	r2, [pc, #256]	; (800db64 <TIM_Base_SetConfig+0x114>)
 800da64:	4293      	cmp	r3, r2
 800da66:	d013      	beq.n	800da90 <TIM_Base_SetConfig+0x40>
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800da6e:	d00f      	beq.n	800da90 <TIM_Base_SetConfig+0x40>
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	4a3d      	ldr	r2, [pc, #244]	; (800db68 <TIM_Base_SetConfig+0x118>)
 800da74:	4293      	cmp	r3, r2
 800da76:	d00b      	beq.n	800da90 <TIM_Base_SetConfig+0x40>
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	4a3c      	ldr	r2, [pc, #240]	; (800db6c <TIM_Base_SetConfig+0x11c>)
 800da7c:	4293      	cmp	r3, r2
 800da7e:	d007      	beq.n	800da90 <TIM_Base_SetConfig+0x40>
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	4a3b      	ldr	r2, [pc, #236]	; (800db70 <TIM_Base_SetConfig+0x120>)
 800da84:	4293      	cmp	r3, r2
 800da86:	d003      	beq.n	800da90 <TIM_Base_SetConfig+0x40>
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	4a3a      	ldr	r2, [pc, #232]	; (800db74 <TIM_Base_SetConfig+0x124>)
 800da8c:	4293      	cmp	r3, r2
 800da8e:	d108      	bne.n	800daa2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800da96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800da98:	683b      	ldr	r3, [r7, #0]
 800da9a:	685b      	ldr	r3, [r3, #4]
 800da9c:	68fa      	ldr	r2, [r7, #12]
 800da9e:	4313      	orrs	r3, r2
 800daa0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	4a2f      	ldr	r2, [pc, #188]	; (800db64 <TIM_Base_SetConfig+0x114>)
 800daa6:	4293      	cmp	r3, r2
 800daa8:	d01f      	beq.n	800daea <TIM_Base_SetConfig+0x9a>
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dab0:	d01b      	beq.n	800daea <TIM_Base_SetConfig+0x9a>
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	4a2c      	ldr	r2, [pc, #176]	; (800db68 <TIM_Base_SetConfig+0x118>)
 800dab6:	4293      	cmp	r3, r2
 800dab8:	d017      	beq.n	800daea <TIM_Base_SetConfig+0x9a>
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	4a2b      	ldr	r2, [pc, #172]	; (800db6c <TIM_Base_SetConfig+0x11c>)
 800dabe:	4293      	cmp	r3, r2
 800dac0:	d013      	beq.n	800daea <TIM_Base_SetConfig+0x9a>
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	4a2a      	ldr	r2, [pc, #168]	; (800db70 <TIM_Base_SetConfig+0x120>)
 800dac6:	4293      	cmp	r3, r2
 800dac8:	d00f      	beq.n	800daea <TIM_Base_SetConfig+0x9a>
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	4a29      	ldr	r2, [pc, #164]	; (800db74 <TIM_Base_SetConfig+0x124>)
 800dace:	4293      	cmp	r3, r2
 800dad0:	d00b      	beq.n	800daea <TIM_Base_SetConfig+0x9a>
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	4a28      	ldr	r2, [pc, #160]	; (800db78 <TIM_Base_SetConfig+0x128>)
 800dad6:	4293      	cmp	r3, r2
 800dad8:	d007      	beq.n	800daea <TIM_Base_SetConfig+0x9a>
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	4a27      	ldr	r2, [pc, #156]	; (800db7c <TIM_Base_SetConfig+0x12c>)
 800dade:	4293      	cmp	r3, r2
 800dae0:	d003      	beq.n	800daea <TIM_Base_SetConfig+0x9a>
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	4a26      	ldr	r2, [pc, #152]	; (800db80 <TIM_Base_SetConfig+0x130>)
 800dae6:	4293      	cmp	r3, r2
 800dae8:	d108      	bne.n	800dafc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800daf0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800daf2:	683b      	ldr	r3, [r7, #0]
 800daf4:	68db      	ldr	r3, [r3, #12]
 800daf6:	68fa      	ldr	r2, [r7, #12]
 800daf8:	4313      	orrs	r3, r2
 800dafa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800db02:	683b      	ldr	r3, [r7, #0]
 800db04:	695b      	ldr	r3, [r3, #20]
 800db06:	4313      	orrs	r3, r2
 800db08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	68fa      	ldr	r2, [r7, #12]
 800db0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800db10:	683b      	ldr	r3, [r7, #0]
 800db12:	689a      	ldr	r2, [r3, #8]
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800db18:	683b      	ldr	r3, [r7, #0]
 800db1a:	681a      	ldr	r2, [r3, #0]
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	4a10      	ldr	r2, [pc, #64]	; (800db64 <TIM_Base_SetConfig+0x114>)
 800db24:	4293      	cmp	r3, r2
 800db26:	d00f      	beq.n	800db48 <TIM_Base_SetConfig+0xf8>
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	4a12      	ldr	r2, [pc, #72]	; (800db74 <TIM_Base_SetConfig+0x124>)
 800db2c:	4293      	cmp	r3, r2
 800db2e:	d00b      	beq.n	800db48 <TIM_Base_SetConfig+0xf8>
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	4a11      	ldr	r2, [pc, #68]	; (800db78 <TIM_Base_SetConfig+0x128>)
 800db34:	4293      	cmp	r3, r2
 800db36:	d007      	beq.n	800db48 <TIM_Base_SetConfig+0xf8>
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	4a10      	ldr	r2, [pc, #64]	; (800db7c <TIM_Base_SetConfig+0x12c>)
 800db3c:	4293      	cmp	r3, r2
 800db3e:	d003      	beq.n	800db48 <TIM_Base_SetConfig+0xf8>
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	4a0f      	ldr	r2, [pc, #60]	; (800db80 <TIM_Base_SetConfig+0x130>)
 800db44:	4293      	cmp	r3, r2
 800db46:	d103      	bne.n	800db50 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800db48:	683b      	ldr	r3, [r7, #0]
 800db4a:	691a      	ldr	r2, [r3, #16]
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	2201      	movs	r2, #1
 800db54:	615a      	str	r2, [r3, #20]
}
 800db56:	bf00      	nop
 800db58:	3714      	adds	r7, #20
 800db5a:	46bd      	mov	sp, r7
 800db5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db60:	4770      	bx	lr
 800db62:	bf00      	nop
 800db64:	40012c00 	.word	0x40012c00
 800db68:	40000400 	.word	0x40000400
 800db6c:	40000800 	.word	0x40000800
 800db70:	40000c00 	.word	0x40000c00
 800db74:	40013400 	.word	0x40013400
 800db78:	40014000 	.word	0x40014000
 800db7c:	40014400 	.word	0x40014400
 800db80:	40014800 	.word	0x40014800

0800db84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800db84:	b480      	push	{r7}
 800db86:	b087      	sub	sp, #28
 800db88:	af00      	add	r7, sp, #0
 800db8a:	60f8      	str	r0, [r7, #12]
 800db8c:	60b9      	str	r1, [r7, #8]
 800db8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	6a1b      	ldr	r3, [r3, #32]
 800db94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	6a1b      	ldr	r3, [r3, #32]
 800db9a:	f023 0201 	bic.w	r2, r3, #1
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	699b      	ldr	r3, [r3, #24]
 800dba6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800dba8:	693b      	ldr	r3, [r7, #16]
 800dbaa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800dbae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	011b      	lsls	r3, r3, #4
 800dbb4:	693a      	ldr	r2, [r7, #16]
 800dbb6:	4313      	orrs	r3, r2
 800dbb8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800dbba:	697b      	ldr	r3, [r7, #20]
 800dbbc:	f023 030a 	bic.w	r3, r3, #10
 800dbc0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800dbc2:	697a      	ldr	r2, [r7, #20]
 800dbc4:	68bb      	ldr	r3, [r7, #8]
 800dbc6:	4313      	orrs	r3, r2
 800dbc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	693a      	ldr	r2, [r7, #16]
 800dbce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	697a      	ldr	r2, [r7, #20]
 800dbd4:	621a      	str	r2, [r3, #32]
}
 800dbd6:	bf00      	nop
 800dbd8:	371c      	adds	r7, #28
 800dbda:	46bd      	mov	sp, r7
 800dbdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe0:	4770      	bx	lr

0800dbe2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800dbe2:	b480      	push	{r7}
 800dbe4:	b087      	sub	sp, #28
 800dbe6:	af00      	add	r7, sp, #0
 800dbe8:	60f8      	str	r0, [r7, #12]
 800dbea:	60b9      	str	r1, [r7, #8]
 800dbec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	6a1b      	ldr	r3, [r3, #32]
 800dbf2:	f023 0210 	bic.w	r2, r3, #16
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	699b      	ldr	r3, [r3, #24]
 800dbfe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	6a1b      	ldr	r3, [r3, #32]
 800dc04:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800dc06:	697b      	ldr	r3, [r7, #20]
 800dc08:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800dc0c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	031b      	lsls	r3, r3, #12
 800dc12:	697a      	ldr	r2, [r7, #20]
 800dc14:	4313      	orrs	r3, r2
 800dc16:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800dc18:	693b      	ldr	r3, [r7, #16]
 800dc1a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800dc1e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800dc20:	68bb      	ldr	r3, [r7, #8]
 800dc22:	011b      	lsls	r3, r3, #4
 800dc24:	693a      	ldr	r2, [r7, #16]
 800dc26:	4313      	orrs	r3, r2
 800dc28:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	697a      	ldr	r2, [r7, #20]
 800dc2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	693a      	ldr	r2, [r7, #16]
 800dc34:	621a      	str	r2, [r3, #32]
}
 800dc36:	bf00      	nop
 800dc38:	371c      	adds	r7, #28
 800dc3a:	46bd      	mov	sp, r7
 800dc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc40:	4770      	bx	lr

0800dc42 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800dc42:	b480      	push	{r7}
 800dc44:	b085      	sub	sp, #20
 800dc46:	af00      	add	r7, sp, #0
 800dc48:	6078      	str	r0, [r7, #4]
 800dc4a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	689b      	ldr	r3, [r3, #8]
 800dc50:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dc58:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800dc5a:	683a      	ldr	r2, [r7, #0]
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	4313      	orrs	r3, r2
 800dc60:	f043 0307 	orr.w	r3, r3, #7
 800dc64:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	68fa      	ldr	r2, [r7, #12]
 800dc6a:	609a      	str	r2, [r3, #8]
}
 800dc6c:	bf00      	nop
 800dc6e:	3714      	adds	r7, #20
 800dc70:	46bd      	mov	sp, r7
 800dc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc76:	4770      	bx	lr

0800dc78 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800dc78:	b480      	push	{r7}
 800dc7a:	b087      	sub	sp, #28
 800dc7c:	af00      	add	r7, sp, #0
 800dc7e:	60f8      	str	r0, [r7, #12]
 800dc80:	60b9      	str	r1, [r7, #8]
 800dc82:	607a      	str	r2, [r7, #4]
 800dc84:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	689b      	ldr	r3, [r3, #8]
 800dc8a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800dc8c:	697b      	ldr	r3, [r7, #20]
 800dc8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800dc92:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800dc94:	683b      	ldr	r3, [r7, #0]
 800dc96:	021a      	lsls	r2, r3, #8
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	431a      	orrs	r2, r3
 800dc9c:	68bb      	ldr	r3, [r7, #8]
 800dc9e:	4313      	orrs	r3, r2
 800dca0:	697a      	ldr	r2, [r7, #20]
 800dca2:	4313      	orrs	r3, r2
 800dca4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	697a      	ldr	r2, [r7, #20]
 800dcaa:	609a      	str	r2, [r3, #8]
}
 800dcac:	bf00      	nop
 800dcae:	371c      	adds	r7, #28
 800dcb0:	46bd      	mov	sp, r7
 800dcb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb6:	4770      	bx	lr

0800dcb8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800dcb8:	b480      	push	{r7}
 800dcba:	b085      	sub	sp, #20
 800dcbc:	af00      	add	r7, sp, #0
 800dcbe:	6078      	str	r0, [r7, #4]
 800dcc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dcc8:	2b01      	cmp	r3, #1
 800dcca:	d101      	bne.n	800dcd0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800dccc:	2302      	movs	r3, #2
 800dcce:	e068      	b.n	800dda2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	2201      	movs	r2, #1
 800dcd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	2202      	movs	r2, #2
 800dcdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	685b      	ldr	r3, [r3, #4]
 800dce6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	689b      	ldr	r3, [r3, #8]
 800dcee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	4a2e      	ldr	r2, [pc, #184]	; (800ddb0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800dcf6:	4293      	cmp	r3, r2
 800dcf8:	d004      	beq.n	800dd04 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	4a2d      	ldr	r2, [pc, #180]	; (800ddb4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800dd00:	4293      	cmp	r3, r2
 800dd02:	d108      	bne.n	800dd16 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800dd0a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800dd0c:	683b      	ldr	r3, [r7, #0]
 800dd0e:	685b      	ldr	r3, [r3, #4]
 800dd10:	68fa      	ldr	r2, [r7, #12]
 800dd12:	4313      	orrs	r3, r2
 800dd14:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dd1c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800dd1e:	683b      	ldr	r3, [r7, #0]
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	68fa      	ldr	r2, [r7, #12]
 800dd24:	4313      	orrs	r3, r2
 800dd26:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	68fa      	ldr	r2, [r7, #12]
 800dd2e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	4a1e      	ldr	r2, [pc, #120]	; (800ddb0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800dd36:	4293      	cmp	r3, r2
 800dd38:	d01d      	beq.n	800dd76 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dd42:	d018      	beq.n	800dd76 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	4a1b      	ldr	r2, [pc, #108]	; (800ddb8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800dd4a:	4293      	cmp	r3, r2
 800dd4c:	d013      	beq.n	800dd76 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	4a1a      	ldr	r2, [pc, #104]	; (800ddbc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800dd54:	4293      	cmp	r3, r2
 800dd56:	d00e      	beq.n	800dd76 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	4a18      	ldr	r2, [pc, #96]	; (800ddc0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800dd5e:	4293      	cmp	r3, r2
 800dd60:	d009      	beq.n	800dd76 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	4a13      	ldr	r2, [pc, #76]	; (800ddb4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800dd68:	4293      	cmp	r3, r2
 800dd6a:	d004      	beq.n	800dd76 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	4a14      	ldr	r2, [pc, #80]	; (800ddc4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800dd72:	4293      	cmp	r3, r2
 800dd74:	d10c      	bne.n	800dd90 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800dd76:	68bb      	ldr	r3, [r7, #8]
 800dd78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dd7c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800dd7e:	683b      	ldr	r3, [r7, #0]
 800dd80:	689b      	ldr	r3, [r3, #8]
 800dd82:	68ba      	ldr	r2, [r7, #8]
 800dd84:	4313      	orrs	r3, r2
 800dd86:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	68ba      	ldr	r2, [r7, #8]
 800dd8e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	2201      	movs	r2, #1
 800dd94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	2200      	movs	r2, #0
 800dd9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800dda0:	2300      	movs	r3, #0
}
 800dda2:	4618      	mov	r0, r3
 800dda4:	3714      	adds	r7, #20
 800dda6:	46bd      	mov	sp, r7
 800dda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddac:	4770      	bx	lr
 800ddae:	bf00      	nop
 800ddb0:	40012c00 	.word	0x40012c00
 800ddb4:	40013400 	.word	0x40013400
 800ddb8:	40000400 	.word	0x40000400
 800ddbc:	40000800 	.word	0x40000800
 800ddc0:	40000c00 	.word	0x40000c00
 800ddc4:	40014000 	.word	0x40014000

0800ddc8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ddc8:	b480      	push	{r7}
 800ddca:	b083      	sub	sp, #12
 800ddcc:	af00      	add	r7, sp, #0
 800ddce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ddd0:	bf00      	nop
 800ddd2:	370c      	adds	r7, #12
 800ddd4:	46bd      	mov	sp, r7
 800ddd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddda:	4770      	bx	lr

0800dddc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800dddc:	b480      	push	{r7}
 800ddde:	b083      	sub	sp, #12
 800dde0:	af00      	add	r7, sp, #0
 800dde2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800dde4:	bf00      	nop
 800dde6:	370c      	adds	r7, #12
 800dde8:	46bd      	mov	sp, r7
 800ddea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddee:	4770      	bx	lr

0800ddf0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ddf0:	b480      	push	{r7}
 800ddf2:	b083      	sub	sp, #12
 800ddf4:	af00      	add	r7, sp, #0
 800ddf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ddf8:	bf00      	nop
 800ddfa:	370c      	adds	r7, #12
 800ddfc:	46bd      	mov	sp, r7
 800ddfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de02:	4770      	bx	lr

0800de04 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800de04:	b580      	push	{r7, lr}
 800de06:	b082      	sub	sp, #8
 800de08:	af00      	add	r7, sp, #0
 800de0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d101      	bne.n	800de16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800de12:	2301      	movs	r3, #1
 800de14:	e040      	b.n	800de98 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d106      	bne.n	800de2c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	2200      	movs	r2, #0
 800de22:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800de26:	6878      	ldr	r0, [r7, #4]
 800de28:	f7f8 fcd4 	bl	80067d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	2224      	movs	r2, #36	; 0x24
 800de30:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	681a      	ldr	r2, [r3, #0]
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	f022 0201 	bic.w	r2, r2, #1
 800de40:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800de42:	6878      	ldr	r0, [r7, #4]
 800de44:	f000 fc9e 	bl	800e784 <UART_SetConfig>
 800de48:	4603      	mov	r3, r0
 800de4a:	2b01      	cmp	r3, #1
 800de4c:	d101      	bne.n	800de52 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800de4e:	2301      	movs	r3, #1
 800de50:	e022      	b.n	800de98 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de56:	2b00      	cmp	r3, #0
 800de58:	d002      	beq.n	800de60 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800de5a:	6878      	ldr	r0, [r7, #4]
 800de5c:	f000 ff4a 	bl	800ecf4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	685a      	ldr	r2, [r3, #4]
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800de6e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	689a      	ldr	r2, [r3, #8]
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800de7e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	681a      	ldr	r2, [r3, #0]
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	f042 0201 	orr.w	r2, r2, #1
 800de8e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800de90:	6878      	ldr	r0, [r7, #4]
 800de92:	f000 ffd1 	bl	800ee38 <UART_CheckIdleState>
 800de96:	4603      	mov	r3, r0
}
 800de98:	4618      	mov	r0, r3
 800de9a:	3708      	adds	r7, #8
 800de9c:	46bd      	mov	sp, r7
 800de9e:	bd80      	pop	{r7, pc}

0800dea0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dea0:	b580      	push	{r7, lr}
 800dea2:	b08a      	sub	sp, #40	; 0x28
 800dea4:	af02      	add	r7, sp, #8
 800dea6:	60f8      	str	r0, [r7, #12]
 800dea8:	60b9      	str	r1, [r7, #8]
 800deaa:	603b      	str	r3, [r7, #0]
 800deac:	4613      	mov	r3, r2
 800deae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800deb4:	2b20      	cmp	r3, #32
 800deb6:	f040 8082 	bne.w	800dfbe <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800deba:	68bb      	ldr	r3, [r7, #8]
 800debc:	2b00      	cmp	r3, #0
 800debe:	d002      	beq.n	800dec6 <HAL_UART_Transmit+0x26>
 800dec0:	88fb      	ldrh	r3, [r7, #6]
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d101      	bne.n	800deca <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800dec6:	2301      	movs	r3, #1
 800dec8:	e07a      	b.n	800dfc0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800ded0:	2b01      	cmp	r3, #1
 800ded2:	d101      	bne.n	800ded8 <HAL_UART_Transmit+0x38>
 800ded4:	2302      	movs	r3, #2
 800ded6:	e073      	b.n	800dfc0 <HAL_UART_Transmit+0x120>
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	2201      	movs	r2, #1
 800dedc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	2200      	movs	r2, #0
 800dee4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	2221      	movs	r2, #33	; 0x21
 800deec:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800deee:	f7f9 fd29 	bl	8007944 <HAL_GetTick>
 800def2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	88fa      	ldrh	r2, [r7, #6]
 800def8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	88fa      	ldrh	r2, [r7, #6]
 800df00:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	689b      	ldr	r3, [r3, #8]
 800df08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800df0c:	d108      	bne.n	800df20 <HAL_UART_Transmit+0x80>
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	691b      	ldr	r3, [r3, #16]
 800df12:	2b00      	cmp	r3, #0
 800df14:	d104      	bne.n	800df20 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800df16:	2300      	movs	r3, #0
 800df18:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800df1a:	68bb      	ldr	r3, [r7, #8]
 800df1c:	61bb      	str	r3, [r7, #24]
 800df1e:	e003      	b.n	800df28 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800df20:	68bb      	ldr	r3, [r7, #8]
 800df22:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800df24:	2300      	movs	r3, #0
 800df26:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	2200      	movs	r2, #0
 800df2c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800df30:	e02d      	b.n	800df8e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800df32:	683b      	ldr	r3, [r7, #0]
 800df34:	9300      	str	r3, [sp, #0]
 800df36:	697b      	ldr	r3, [r7, #20]
 800df38:	2200      	movs	r2, #0
 800df3a:	2180      	movs	r1, #128	; 0x80
 800df3c:	68f8      	ldr	r0, [r7, #12]
 800df3e:	f000 ffc4 	bl	800eeca <UART_WaitOnFlagUntilTimeout>
 800df42:	4603      	mov	r3, r0
 800df44:	2b00      	cmp	r3, #0
 800df46:	d001      	beq.n	800df4c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800df48:	2303      	movs	r3, #3
 800df4a:	e039      	b.n	800dfc0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800df4c:	69fb      	ldr	r3, [r7, #28]
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d10b      	bne.n	800df6a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800df52:	69bb      	ldr	r3, [r7, #24]
 800df54:	881a      	ldrh	r2, [r3, #0]
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800df5e:	b292      	uxth	r2, r2
 800df60:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800df62:	69bb      	ldr	r3, [r7, #24]
 800df64:	3302      	adds	r3, #2
 800df66:	61bb      	str	r3, [r7, #24]
 800df68:	e008      	b.n	800df7c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800df6a:	69fb      	ldr	r3, [r7, #28]
 800df6c:	781a      	ldrb	r2, [r3, #0]
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	b292      	uxth	r2, r2
 800df74:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800df76:	69fb      	ldr	r3, [r7, #28]
 800df78:	3301      	adds	r3, #1
 800df7a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800df82:	b29b      	uxth	r3, r3
 800df84:	3b01      	subs	r3, #1
 800df86:	b29a      	uxth	r2, r3
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800df94:	b29b      	uxth	r3, r3
 800df96:	2b00      	cmp	r3, #0
 800df98:	d1cb      	bne.n	800df32 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800df9a:	683b      	ldr	r3, [r7, #0]
 800df9c:	9300      	str	r3, [sp, #0]
 800df9e:	697b      	ldr	r3, [r7, #20]
 800dfa0:	2200      	movs	r2, #0
 800dfa2:	2140      	movs	r1, #64	; 0x40
 800dfa4:	68f8      	ldr	r0, [r7, #12]
 800dfa6:	f000 ff90 	bl	800eeca <UART_WaitOnFlagUntilTimeout>
 800dfaa:	4603      	mov	r3, r0
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d001      	beq.n	800dfb4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800dfb0:	2303      	movs	r3, #3
 800dfb2:	e005      	b.n	800dfc0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	2220      	movs	r2, #32
 800dfb8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800dfba:	2300      	movs	r3, #0
 800dfbc:	e000      	b.n	800dfc0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800dfbe:	2302      	movs	r3, #2
  }
}
 800dfc0:	4618      	mov	r0, r3
 800dfc2:	3720      	adds	r7, #32
 800dfc4:	46bd      	mov	sp, r7
 800dfc6:	bd80      	pop	{r7, pc}

0800dfc8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800dfc8:	b580      	push	{r7, lr}
 800dfca:	b08a      	sub	sp, #40	; 0x28
 800dfcc:	af00      	add	r7, sp, #0
 800dfce:	60f8      	str	r0, [r7, #12]
 800dfd0:	60b9      	str	r1, [r7, #8]
 800dfd2:	4613      	mov	r3, r2
 800dfd4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dfda:	2b20      	cmp	r3, #32
 800dfdc:	d142      	bne.n	800e064 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800dfde:	68bb      	ldr	r3, [r7, #8]
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d002      	beq.n	800dfea <HAL_UART_Receive_IT+0x22>
 800dfe4:	88fb      	ldrh	r3, [r7, #6]
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d101      	bne.n	800dfee <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800dfea:	2301      	movs	r3, #1
 800dfec:	e03b      	b.n	800e066 <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800dff4:	2b01      	cmp	r3, #1
 800dff6:	d101      	bne.n	800dffc <HAL_UART_Receive_IT+0x34>
 800dff8:	2302      	movs	r3, #2
 800dffa:	e034      	b.n	800e066 <HAL_UART_Receive_IT+0x9e>
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	2201      	movs	r2, #1
 800e000:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	2200      	movs	r2, #0
 800e008:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	4a18      	ldr	r2, [pc, #96]	; (800e070 <HAL_UART_Receive_IT+0xa8>)
 800e010:	4293      	cmp	r3, r2
 800e012:	d01f      	beq.n	800e054 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	685b      	ldr	r3, [r3, #4]
 800e01a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d018      	beq.n	800e054 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e028:	697b      	ldr	r3, [r7, #20]
 800e02a:	e853 3f00 	ldrex	r3, [r3]
 800e02e:	613b      	str	r3, [r7, #16]
   return(result);
 800e030:	693b      	ldr	r3, [r7, #16]
 800e032:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e036:	627b      	str	r3, [r7, #36]	; 0x24
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	461a      	mov	r2, r3
 800e03e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e040:	623b      	str	r3, [r7, #32]
 800e042:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e044:	69f9      	ldr	r1, [r7, #28]
 800e046:	6a3a      	ldr	r2, [r7, #32]
 800e048:	e841 2300 	strex	r3, r2, [r1]
 800e04c:	61bb      	str	r3, [r7, #24]
   return(result);
 800e04e:	69bb      	ldr	r3, [r7, #24]
 800e050:	2b00      	cmp	r3, #0
 800e052:	d1e6      	bne.n	800e022 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800e054:	88fb      	ldrh	r3, [r7, #6]
 800e056:	461a      	mov	r2, r3
 800e058:	68b9      	ldr	r1, [r7, #8]
 800e05a:	68f8      	ldr	r0, [r7, #12]
 800e05c:	f000 fffa 	bl	800f054 <UART_Start_Receive_IT>
 800e060:	4603      	mov	r3, r0
 800e062:	e000      	b.n	800e066 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800e064:	2302      	movs	r3, #2
  }
}
 800e066:	4618      	mov	r0, r3
 800e068:	3728      	adds	r7, #40	; 0x28
 800e06a:	46bd      	mov	sp, r7
 800e06c:	bd80      	pop	{r7, pc}
 800e06e:	bf00      	nop
 800e070:	40008000 	.word	0x40008000

0800e074 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800e074:	b580      	push	{r7, lr}
 800e076:	b08a      	sub	sp, #40	; 0x28
 800e078:	af00      	add	r7, sp, #0
 800e07a:	60f8      	str	r0, [r7, #12]
 800e07c:	60b9      	str	r1, [r7, #8]
 800e07e:	4613      	mov	r3, r2
 800e080:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e086:	2b20      	cmp	r3, #32
 800e088:	d178      	bne.n	800e17c <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800e08a:	68bb      	ldr	r3, [r7, #8]
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d002      	beq.n	800e096 <HAL_UART_Transmit_DMA+0x22>
 800e090:	88fb      	ldrh	r3, [r7, #6]
 800e092:	2b00      	cmp	r3, #0
 800e094:	d101      	bne.n	800e09a <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800e096:	2301      	movs	r3, #1
 800e098:	e071      	b.n	800e17e <HAL_UART_Transmit_DMA+0x10a>
    }

    __HAL_LOCK(huart);
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800e0a0:	2b01      	cmp	r3, #1
 800e0a2:	d101      	bne.n	800e0a8 <HAL_UART_Transmit_DMA+0x34>
 800e0a4:	2302      	movs	r3, #2
 800e0a6:	e06a      	b.n	800e17e <HAL_UART_Transmit_DMA+0x10a>
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	2201      	movs	r2, #1
 800e0ac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	68ba      	ldr	r2, [r7, #8]
 800e0b4:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	88fa      	ldrh	r2, [r7, #6]
 800e0ba:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	88fa      	ldrh	r2, [r7, #6]
 800e0c2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	2200      	movs	r2, #0
 800e0ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	2221      	movs	r2, #33	; 0x21
 800e0d2:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d02b      	beq.n	800e134 <HAL_UART_Transmit_DMA+0xc0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e0e0:	4a29      	ldr	r2, [pc, #164]	; (800e188 <HAL_UART_Transmit_DMA+0x114>)
 800e0e2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e0e8:	4a28      	ldr	r2, [pc, #160]	; (800e18c <HAL_UART_Transmit_DMA+0x118>)
 800e0ea:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e0f0:	4a27      	ldr	r2, [pc, #156]	; (800e190 <HAL_UART_Transmit_DMA+0x11c>)
 800e0f2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e0f8:	2200      	movs	r2, #0
 800e0fa:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e104:	4619      	mov	r1, r3
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	3328      	adds	r3, #40	; 0x28
 800e10c:	461a      	mov	r2, r3
 800e10e:	88fb      	ldrh	r3, [r7, #6]
 800e110:	f7f9 fe64 	bl	8007ddc <HAL_DMA_Start_IT>
 800e114:	4603      	mov	r3, r0
 800e116:	2b00      	cmp	r3, #0
 800e118:	d00c      	beq.n	800e134 <HAL_UART_Transmit_DMA+0xc0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	2210      	movs	r2, #16
 800e11e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800e122:	68fb      	ldr	r3, [r7, #12]
 800e124:	2200      	movs	r2, #0
 800e126:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	2220      	movs	r2, #32
 800e12e:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 800e130:	2301      	movs	r3, #1
 800e132:	e024      	b.n	800e17e <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	2240      	movs	r2, #64	; 0x40
 800e13a:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	2200      	movs	r2, #0
 800e140:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	3308      	adds	r3, #8
 800e14a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e14c:	697b      	ldr	r3, [r7, #20]
 800e14e:	e853 3f00 	ldrex	r3, [r3]
 800e152:	613b      	str	r3, [r7, #16]
   return(result);
 800e154:	693b      	ldr	r3, [r7, #16]
 800e156:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e15a:	627b      	str	r3, [r7, #36]	; 0x24
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	3308      	adds	r3, #8
 800e162:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e164:	623a      	str	r2, [r7, #32]
 800e166:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e168:	69f9      	ldr	r1, [r7, #28]
 800e16a:	6a3a      	ldr	r2, [r7, #32]
 800e16c:	e841 2300 	strex	r3, r2, [r1]
 800e170:	61bb      	str	r3, [r7, #24]
   return(result);
 800e172:	69bb      	ldr	r3, [r7, #24]
 800e174:	2b00      	cmp	r3, #0
 800e176:	d1e5      	bne.n	800e144 <HAL_UART_Transmit_DMA+0xd0>

    return HAL_OK;
 800e178:	2300      	movs	r3, #0
 800e17a:	e000      	b.n	800e17e <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800e17c:	2302      	movs	r3, #2
  }
}
 800e17e:	4618      	mov	r0, r3
 800e180:	3728      	adds	r7, #40	; 0x28
 800e182:	46bd      	mov	sp, r7
 800e184:	bd80      	pop	{r7, pc}
 800e186:	bf00      	nop
 800e188:	0800f2fb 	.word	0x0800f2fb
 800e18c:	0800f395 	.word	0x0800f395
 800e190:	0800f3b1 	.word	0x0800f3b1

0800e194 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e194:	b580      	push	{r7, lr}
 800e196:	b0ba      	sub	sp, #232	; 0xe8
 800e198:	af00      	add	r7, sp, #0
 800e19a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	69db      	ldr	r3, [r3, #28]
 800e1a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	689b      	ldr	r3, [r3, #8]
 800e1b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800e1ba:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800e1be:	f640 030f 	movw	r3, #2063	; 0x80f
 800e1c2:	4013      	ands	r3, r2
 800e1c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800e1c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d115      	bne.n	800e1fc <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800e1d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e1d4:	f003 0320 	and.w	r3, r3, #32
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d00f      	beq.n	800e1fc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800e1dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e1e0:	f003 0320 	and.w	r3, r3, #32
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d009      	beq.n	800e1fc <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	f000 82a6 	beq.w	800e73e <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e1f6:	6878      	ldr	r0, [r7, #4]
 800e1f8:	4798      	blx	r3
      }
      return;
 800e1fa:	e2a0      	b.n	800e73e <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800e1fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e200:	2b00      	cmp	r3, #0
 800e202:	f000 8117 	beq.w	800e434 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800e206:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e20a:	f003 0301 	and.w	r3, r3, #1
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d106      	bne.n	800e220 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800e212:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800e216:	4b85      	ldr	r3, [pc, #532]	; (800e42c <HAL_UART_IRQHandler+0x298>)
 800e218:	4013      	ands	r3, r2
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	f000 810a 	beq.w	800e434 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e220:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e224:	f003 0301 	and.w	r3, r3, #1
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d011      	beq.n	800e250 <HAL_UART_IRQHandler+0xbc>
 800e22c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e230:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e234:	2b00      	cmp	r3, #0
 800e236:	d00b      	beq.n	800e250 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	2201      	movs	r2, #1
 800e23e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e246:	f043 0201 	orr.w	r2, r3, #1
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e250:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e254:	f003 0302 	and.w	r3, r3, #2
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d011      	beq.n	800e280 <HAL_UART_IRQHandler+0xec>
 800e25c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e260:	f003 0301 	and.w	r3, r3, #1
 800e264:	2b00      	cmp	r3, #0
 800e266:	d00b      	beq.n	800e280 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	2202      	movs	r2, #2
 800e26e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e276:	f043 0204 	orr.w	r2, r3, #4
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e280:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e284:	f003 0304 	and.w	r3, r3, #4
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d011      	beq.n	800e2b0 <HAL_UART_IRQHandler+0x11c>
 800e28c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e290:	f003 0301 	and.w	r3, r3, #1
 800e294:	2b00      	cmp	r3, #0
 800e296:	d00b      	beq.n	800e2b0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	2204      	movs	r2, #4
 800e29e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e2a6:	f043 0202 	orr.w	r2, r3, #2
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e2b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e2b4:	f003 0308 	and.w	r3, r3, #8
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d017      	beq.n	800e2ec <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800e2bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e2c0:	f003 0320 	and.w	r3, r3, #32
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d105      	bne.n	800e2d4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800e2c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e2cc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d00b      	beq.n	800e2ec <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	2208      	movs	r2, #8
 800e2da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e2e2:	f043 0208 	orr.w	r2, r3, #8
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e2ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e2f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d012      	beq.n	800e31e <HAL_UART_IRQHandler+0x18a>
 800e2f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e2fc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e300:	2b00      	cmp	r3, #0
 800e302:	d00c      	beq.n	800e31e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e30c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e314:	f043 0220 	orr.w	r2, r3, #32
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e324:	2b00      	cmp	r3, #0
 800e326:	f000 820c 	beq.w	800e742 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800e32a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e32e:	f003 0320 	and.w	r3, r3, #32
 800e332:	2b00      	cmp	r3, #0
 800e334:	d00d      	beq.n	800e352 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800e336:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e33a:	f003 0320 	and.w	r3, r3, #32
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d007      	beq.n	800e352 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e346:	2b00      	cmp	r3, #0
 800e348:	d003      	beq.n	800e352 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e34e:	6878      	ldr	r0, [r7, #4]
 800e350:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e358:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	689b      	ldr	r3, [r3, #8]
 800e362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e366:	2b40      	cmp	r3, #64	; 0x40
 800e368:	d005      	beq.n	800e376 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e36a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e36e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e372:	2b00      	cmp	r3, #0
 800e374:	d04f      	beq.n	800e416 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e376:	6878      	ldr	r0, [r7, #4]
 800e378:	f000 ff5c 	bl	800f234 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	689b      	ldr	r3, [r3, #8]
 800e382:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e386:	2b40      	cmp	r3, #64	; 0x40
 800e388:	d141      	bne.n	800e40e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	3308      	adds	r3, #8
 800e390:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e394:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e398:	e853 3f00 	ldrex	r3, [r3]
 800e39c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800e3a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e3a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e3a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	3308      	adds	r3, #8
 800e3b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800e3b6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800e3ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800e3c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800e3c6:	e841 2300 	strex	r3, r2, [r1]
 800e3ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800e3ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d1d9      	bne.n	800e38a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d013      	beq.n	800e406 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e3e2:	4a13      	ldr	r2, [pc, #76]	; (800e430 <HAL_UART_IRQHandler+0x29c>)
 800e3e4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e3ea:	4618      	mov	r0, r3
 800e3ec:	f7f9 fd94 	bl	8007f18 <HAL_DMA_Abort_IT>
 800e3f0:	4603      	mov	r3, r0
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d017      	beq.n	800e426 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e3fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3fc:	687a      	ldr	r2, [r7, #4]
 800e3fe:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800e400:	4610      	mov	r0, r2
 800e402:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e404:	e00f      	b.n	800e426 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e406:	6878      	ldr	r0, [r7, #4]
 800e408:	f7f6 fecc 	bl	80051a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e40c:	e00b      	b.n	800e426 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e40e:	6878      	ldr	r0, [r7, #4]
 800e410:	f7f6 fec8 	bl	80051a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e414:	e007      	b.n	800e426 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e416:	6878      	ldr	r0, [r7, #4]
 800e418:	f7f6 fec4 	bl	80051a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	2200      	movs	r2, #0
 800e420:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800e424:	e18d      	b.n	800e742 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e426:	bf00      	nop
    return;
 800e428:	e18b      	b.n	800e742 <HAL_UART_IRQHandler+0x5ae>
 800e42a:	bf00      	nop
 800e42c:	04000120 	.word	0x04000120
 800e430:	0800f42d 	.word	0x0800f42d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e438:	2b01      	cmp	r3, #1
 800e43a:	f040 8146 	bne.w	800e6ca <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e43e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e442:	f003 0310 	and.w	r3, r3, #16
 800e446:	2b00      	cmp	r3, #0
 800e448:	f000 813f 	beq.w	800e6ca <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e44c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e450:	f003 0310 	and.w	r3, r3, #16
 800e454:	2b00      	cmp	r3, #0
 800e456:	f000 8138 	beq.w	800e6ca <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	2210      	movs	r2, #16
 800e460:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	689b      	ldr	r3, [r3, #8]
 800e468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e46c:	2b40      	cmp	r3, #64	; 0x40
 800e46e:	f040 80b4 	bne.w	800e5da <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	685b      	ldr	r3, [r3, #4]
 800e47a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e47e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800e482:	2b00      	cmp	r3, #0
 800e484:	f000 815f 	beq.w	800e746 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800e48e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e492:	429a      	cmp	r2, r3
 800e494:	f080 8157 	bcs.w	800e746 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e49e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	f003 0320 	and.w	r3, r3, #32
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	f040 8085 	bne.w	800e5be <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e4c0:	e853 3f00 	ldrex	r3, [r3]
 800e4c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800e4c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e4cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e4d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	461a      	mov	r2, r3
 800e4da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e4de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e4e2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4e6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800e4ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800e4ee:	e841 2300 	strex	r3, r2, [r1]
 800e4f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800e4f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d1da      	bne.n	800e4b4 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	3308      	adds	r3, #8
 800e504:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e506:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e508:	e853 3f00 	ldrex	r3, [r3]
 800e50c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800e50e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e510:	f023 0301 	bic.w	r3, r3, #1
 800e514:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	3308      	adds	r3, #8
 800e51e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800e522:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e526:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e528:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800e52a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e52e:	e841 2300 	strex	r3, r2, [r1]
 800e532:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800e534:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e536:	2b00      	cmp	r3, #0
 800e538:	d1e1      	bne.n	800e4fe <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	3308      	adds	r3, #8
 800e540:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e542:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e544:	e853 3f00 	ldrex	r3, [r3]
 800e548:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800e54a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e54c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e550:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	3308      	adds	r3, #8
 800e55a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800e55e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800e560:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e562:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e564:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e566:	e841 2300 	strex	r3, r2, [r1]
 800e56a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800e56c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d1e3      	bne.n	800e53a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	2220      	movs	r2, #32
 800e576:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	2200      	movs	r2, #0
 800e57c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e584:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e586:	e853 3f00 	ldrex	r3, [r3]
 800e58a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e58c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e58e:	f023 0310 	bic.w	r3, r3, #16
 800e592:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	461a      	mov	r2, r3
 800e59c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e5a0:	65bb      	str	r3, [r7, #88]	; 0x58
 800e5a2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5a4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e5a6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e5a8:	e841 2300 	strex	r3, r2, [r1]
 800e5ac:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e5ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d1e4      	bne.n	800e57e <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e5b8:	4618      	mov	r0, r3
 800e5ba:	f7f9 fc6f 	bl	8007e9c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800e5ca:	b29b      	uxth	r3, r3
 800e5cc:	1ad3      	subs	r3, r2, r3
 800e5ce:	b29b      	uxth	r3, r3
 800e5d0:	4619      	mov	r1, r3
 800e5d2:	6878      	ldr	r0, [r7, #4]
 800e5d4:	f000 f8ca 	bl	800e76c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e5d8:	e0b5      	b.n	800e746 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800e5e6:	b29b      	uxth	r3, r3
 800e5e8:	1ad3      	subs	r3, r2, r3
 800e5ea:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800e5f4:	b29b      	uxth	r3, r3
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	f000 80a7 	beq.w	800e74a <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 800e5fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e600:	2b00      	cmp	r3, #0
 800e602:	f000 80a2 	beq.w	800e74a <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e60c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e60e:	e853 3f00 	ldrex	r3, [r3]
 800e612:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e614:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e616:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e61a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	461a      	mov	r2, r3
 800e624:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e628:	647b      	str	r3, [r7, #68]	; 0x44
 800e62a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e62c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e62e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e630:	e841 2300 	strex	r3, r2, [r1]
 800e634:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e636:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d1e4      	bne.n	800e606 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	3308      	adds	r3, #8
 800e642:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e646:	e853 3f00 	ldrex	r3, [r3]
 800e64a:	623b      	str	r3, [r7, #32]
   return(result);
 800e64c:	6a3b      	ldr	r3, [r7, #32]
 800e64e:	f023 0301 	bic.w	r3, r3, #1
 800e652:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	3308      	adds	r3, #8
 800e65c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800e660:	633a      	str	r2, [r7, #48]	; 0x30
 800e662:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e664:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e666:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e668:	e841 2300 	strex	r3, r2, [r1]
 800e66c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e66e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e670:	2b00      	cmp	r3, #0
 800e672:	d1e3      	bne.n	800e63c <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	2220      	movs	r2, #32
 800e678:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	2200      	movs	r2, #0
 800e67e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	2200      	movs	r2, #0
 800e684:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e68c:	693b      	ldr	r3, [r7, #16]
 800e68e:	e853 3f00 	ldrex	r3, [r3]
 800e692:	60fb      	str	r3, [r7, #12]
   return(result);
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	f023 0310 	bic.w	r3, r3, #16
 800e69a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	461a      	mov	r2, r3
 800e6a4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800e6a8:	61fb      	str	r3, [r7, #28]
 800e6aa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6ac:	69b9      	ldr	r1, [r7, #24]
 800e6ae:	69fa      	ldr	r2, [r7, #28]
 800e6b0:	e841 2300 	strex	r3, r2, [r1]
 800e6b4:	617b      	str	r3, [r7, #20]
   return(result);
 800e6b6:	697b      	ldr	r3, [r7, #20]
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d1e4      	bne.n	800e686 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e6bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e6c0:	4619      	mov	r1, r3
 800e6c2:	6878      	ldr	r0, [r7, #4]
 800e6c4:	f000 f852 	bl	800e76c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e6c8:	e03f      	b.n	800e74a <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800e6ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e6ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d00e      	beq.n	800e6f4 <HAL_UART_IRQHandler+0x560>
 800e6d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e6da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d008      	beq.n	800e6f4 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	681b      	ldr	r3, [r3, #0]
 800e6e6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800e6ea:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800e6ec:	6878      	ldr	r0, [r7, #4]
 800e6ee:	f001 f83d 	bl	800f76c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e6f2:	e02d      	b.n	800e750 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800e6f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e6f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d00e      	beq.n	800e71e <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800e700:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e704:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d008      	beq.n	800e71e <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e710:	2b00      	cmp	r3, #0
 800e712:	d01c      	beq.n	800e74e <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e718:	6878      	ldr	r0, [r7, #4]
 800e71a:	4798      	blx	r3
    }
    return;
 800e71c:	e017      	b.n	800e74e <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e71e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e726:	2b00      	cmp	r3, #0
 800e728:	d012      	beq.n	800e750 <HAL_UART_IRQHandler+0x5bc>
 800e72a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e72e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e732:	2b00      	cmp	r3, #0
 800e734:	d00c      	beq.n	800e750 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800e736:	6878      	ldr	r0, [r7, #4]
 800e738:	f000 fe8e 	bl	800f458 <UART_EndTransmit_IT>
    return;
 800e73c:	e008      	b.n	800e750 <HAL_UART_IRQHandler+0x5bc>
      return;
 800e73e:	bf00      	nop
 800e740:	e006      	b.n	800e750 <HAL_UART_IRQHandler+0x5bc>
    return;
 800e742:	bf00      	nop
 800e744:	e004      	b.n	800e750 <HAL_UART_IRQHandler+0x5bc>
      return;
 800e746:	bf00      	nop
 800e748:	e002      	b.n	800e750 <HAL_UART_IRQHandler+0x5bc>
      return;
 800e74a:	bf00      	nop
 800e74c:	e000      	b.n	800e750 <HAL_UART_IRQHandler+0x5bc>
    return;
 800e74e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800e750:	37e8      	adds	r7, #232	; 0xe8
 800e752:	46bd      	mov	sp, r7
 800e754:	bd80      	pop	{r7, pc}
 800e756:	bf00      	nop

0800e758 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800e758:	b480      	push	{r7}
 800e75a:	b083      	sub	sp, #12
 800e75c:	af00      	add	r7, sp, #0
 800e75e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800e760:	bf00      	nop
 800e762:	370c      	adds	r7, #12
 800e764:	46bd      	mov	sp, r7
 800e766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e76a:	4770      	bx	lr

0800e76c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e76c:	b480      	push	{r7}
 800e76e:	b083      	sub	sp, #12
 800e770:	af00      	add	r7, sp, #0
 800e772:	6078      	str	r0, [r7, #4]
 800e774:	460b      	mov	r3, r1
 800e776:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e778:	bf00      	nop
 800e77a:	370c      	adds	r7, #12
 800e77c:	46bd      	mov	sp, r7
 800e77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e782:	4770      	bx	lr

0800e784 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e784:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e788:	b08a      	sub	sp, #40	; 0x28
 800e78a:	af00      	add	r7, sp, #0
 800e78c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e78e:	2300      	movs	r3, #0
 800e790:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	689a      	ldr	r2, [r3, #8]
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	691b      	ldr	r3, [r3, #16]
 800e79c:	431a      	orrs	r2, r3
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	695b      	ldr	r3, [r3, #20]
 800e7a2:	431a      	orrs	r2, r3
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	69db      	ldr	r3, [r3, #28]
 800e7a8:	4313      	orrs	r3, r2
 800e7aa:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	681a      	ldr	r2, [r3, #0]
 800e7b2:	4ba4      	ldr	r3, [pc, #656]	; (800ea44 <UART_SetConfig+0x2c0>)
 800e7b4:	4013      	ands	r3, r2
 800e7b6:	68fa      	ldr	r2, [r7, #12]
 800e7b8:	6812      	ldr	r2, [r2, #0]
 800e7ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e7bc:	430b      	orrs	r3, r1
 800e7be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	685b      	ldr	r3, [r3, #4]
 800e7c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	68da      	ldr	r2, [r3, #12]
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	430a      	orrs	r2, r1
 800e7d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	699b      	ldr	r3, [r3, #24]
 800e7da:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	4a99      	ldr	r2, [pc, #612]	; (800ea48 <UART_SetConfig+0x2c4>)
 800e7e2:	4293      	cmp	r3, r2
 800e7e4:	d004      	beq.n	800e7f0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e7e6:	68fb      	ldr	r3, [r7, #12]
 800e7e8:	6a1b      	ldr	r3, [r3, #32]
 800e7ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e7ec:	4313      	orrs	r3, r2
 800e7ee:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	689b      	ldr	r3, [r3, #8]
 800e7f6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e800:	430a      	orrs	r2, r1
 800e802:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	4a90      	ldr	r2, [pc, #576]	; (800ea4c <UART_SetConfig+0x2c8>)
 800e80a:	4293      	cmp	r3, r2
 800e80c:	d126      	bne.n	800e85c <UART_SetConfig+0xd8>
 800e80e:	4b90      	ldr	r3, [pc, #576]	; (800ea50 <UART_SetConfig+0x2cc>)
 800e810:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e814:	f003 0303 	and.w	r3, r3, #3
 800e818:	2b03      	cmp	r3, #3
 800e81a:	d81b      	bhi.n	800e854 <UART_SetConfig+0xd0>
 800e81c:	a201      	add	r2, pc, #4	; (adr r2, 800e824 <UART_SetConfig+0xa0>)
 800e81e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e822:	bf00      	nop
 800e824:	0800e835 	.word	0x0800e835
 800e828:	0800e845 	.word	0x0800e845
 800e82c:	0800e83d 	.word	0x0800e83d
 800e830:	0800e84d 	.word	0x0800e84d
 800e834:	2301      	movs	r3, #1
 800e836:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e83a:	e116      	b.n	800ea6a <UART_SetConfig+0x2e6>
 800e83c:	2302      	movs	r3, #2
 800e83e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e842:	e112      	b.n	800ea6a <UART_SetConfig+0x2e6>
 800e844:	2304      	movs	r3, #4
 800e846:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e84a:	e10e      	b.n	800ea6a <UART_SetConfig+0x2e6>
 800e84c:	2308      	movs	r3, #8
 800e84e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e852:	e10a      	b.n	800ea6a <UART_SetConfig+0x2e6>
 800e854:	2310      	movs	r3, #16
 800e856:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e85a:	e106      	b.n	800ea6a <UART_SetConfig+0x2e6>
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	4a7c      	ldr	r2, [pc, #496]	; (800ea54 <UART_SetConfig+0x2d0>)
 800e862:	4293      	cmp	r3, r2
 800e864:	d138      	bne.n	800e8d8 <UART_SetConfig+0x154>
 800e866:	4b7a      	ldr	r3, [pc, #488]	; (800ea50 <UART_SetConfig+0x2cc>)
 800e868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e86c:	f003 030c 	and.w	r3, r3, #12
 800e870:	2b0c      	cmp	r3, #12
 800e872:	d82d      	bhi.n	800e8d0 <UART_SetConfig+0x14c>
 800e874:	a201      	add	r2, pc, #4	; (adr r2, 800e87c <UART_SetConfig+0xf8>)
 800e876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e87a:	bf00      	nop
 800e87c:	0800e8b1 	.word	0x0800e8b1
 800e880:	0800e8d1 	.word	0x0800e8d1
 800e884:	0800e8d1 	.word	0x0800e8d1
 800e888:	0800e8d1 	.word	0x0800e8d1
 800e88c:	0800e8c1 	.word	0x0800e8c1
 800e890:	0800e8d1 	.word	0x0800e8d1
 800e894:	0800e8d1 	.word	0x0800e8d1
 800e898:	0800e8d1 	.word	0x0800e8d1
 800e89c:	0800e8b9 	.word	0x0800e8b9
 800e8a0:	0800e8d1 	.word	0x0800e8d1
 800e8a4:	0800e8d1 	.word	0x0800e8d1
 800e8a8:	0800e8d1 	.word	0x0800e8d1
 800e8ac:	0800e8c9 	.word	0x0800e8c9
 800e8b0:	2300      	movs	r3, #0
 800e8b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e8b6:	e0d8      	b.n	800ea6a <UART_SetConfig+0x2e6>
 800e8b8:	2302      	movs	r3, #2
 800e8ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e8be:	e0d4      	b.n	800ea6a <UART_SetConfig+0x2e6>
 800e8c0:	2304      	movs	r3, #4
 800e8c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e8c6:	e0d0      	b.n	800ea6a <UART_SetConfig+0x2e6>
 800e8c8:	2308      	movs	r3, #8
 800e8ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e8ce:	e0cc      	b.n	800ea6a <UART_SetConfig+0x2e6>
 800e8d0:	2310      	movs	r3, #16
 800e8d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e8d6:	e0c8      	b.n	800ea6a <UART_SetConfig+0x2e6>
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	4a5e      	ldr	r2, [pc, #376]	; (800ea58 <UART_SetConfig+0x2d4>)
 800e8de:	4293      	cmp	r3, r2
 800e8e0:	d125      	bne.n	800e92e <UART_SetConfig+0x1aa>
 800e8e2:	4b5b      	ldr	r3, [pc, #364]	; (800ea50 <UART_SetConfig+0x2cc>)
 800e8e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e8e8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800e8ec:	2b30      	cmp	r3, #48	; 0x30
 800e8ee:	d016      	beq.n	800e91e <UART_SetConfig+0x19a>
 800e8f0:	2b30      	cmp	r3, #48	; 0x30
 800e8f2:	d818      	bhi.n	800e926 <UART_SetConfig+0x1a2>
 800e8f4:	2b20      	cmp	r3, #32
 800e8f6:	d00a      	beq.n	800e90e <UART_SetConfig+0x18a>
 800e8f8:	2b20      	cmp	r3, #32
 800e8fa:	d814      	bhi.n	800e926 <UART_SetConfig+0x1a2>
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d002      	beq.n	800e906 <UART_SetConfig+0x182>
 800e900:	2b10      	cmp	r3, #16
 800e902:	d008      	beq.n	800e916 <UART_SetConfig+0x192>
 800e904:	e00f      	b.n	800e926 <UART_SetConfig+0x1a2>
 800e906:	2300      	movs	r3, #0
 800e908:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e90c:	e0ad      	b.n	800ea6a <UART_SetConfig+0x2e6>
 800e90e:	2302      	movs	r3, #2
 800e910:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e914:	e0a9      	b.n	800ea6a <UART_SetConfig+0x2e6>
 800e916:	2304      	movs	r3, #4
 800e918:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e91c:	e0a5      	b.n	800ea6a <UART_SetConfig+0x2e6>
 800e91e:	2308      	movs	r3, #8
 800e920:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e924:	e0a1      	b.n	800ea6a <UART_SetConfig+0x2e6>
 800e926:	2310      	movs	r3, #16
 800e928:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e92c:	e09d      	b.n	800ea6a <UART_SetConfig+0x2e6>
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	4a4a      	ldr	r2, [pc, #296]	; (800ea5c <UART_SetConfig+0x2d8>)
 800e934:	4293      	cmp	r3, r2
 800e936:	d125      	bne.n	800e984 <UART_SetConfig+0x200>
 800e938:	4b45      	ldr	r3, [pc, #276]	; (800ea50 <UART_SetConfig+0x2cc>)
 800e93a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e93e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800e942:	2bc0      	cmp	r3, #192	; 0xc0
 800e944:	d016      	beq.n	800e974 <UART_SetConfig+0x1f0>
 800e946:	2bc0      	cmp	r3, #192	; 0xc0
 800e948:	d818      	bhi.n	800e97c <UART_SetConfig+0x1f8>
 800e94a:	2b80      	cmp	r3, #128	; 0x80
 800e94c:	d00a      	beq.n	800e964 <UART_SetConfig+0x1e0>
 800e94e:	2b80      	cmp	r3, #128	; 0x80
 800e950:	d814      	bhi.n	800e97c <UART_SetConfig+0x1f8>
 800e952:	2b00      	cmp	r3, #0
 800e954:	d002      	beq.n	800e95c <UART_SetConfig+0x1d8>
 800e956:	2b40      	cmp	r3, #64	; 0x40
 800e958:	d008      	beq.n	800e96c <UART_SetConfig+0x1e8>
 800e95a:	e00f      	b.n	800e97c <UART_SetConfig+0x1f8>
 800e95c:	2300      	movs	r3, #0
 800e95e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e962:	e082      	b.n	800ea6a <UART_SetConfig+0x2e6>
 800e964:	2302      	movs	r3, #2
 800e966:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e96a:	e07e      	b.n	800ea6a <UART_SetConfig+0x2e6>
 800e96c:	2304      	movs	r3, #4
 800e96e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e972:	e07a      	b.n	800ea6a <UART_SetConfig+0x2e6>
 800e974:	2308      	movs	r3, #8
 800e976:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e97a:	e076      	b.n	800ea6a <UART_SetConfig+0x2e6>
 800e97c:	2310      	movs	r3, #16
 800e97e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e982:	e072      	b.n	800ea6a <UART_SetConfig+0x2e6>
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	4a35      	ldr	r2, [pc, #212]	; (800ea60 <UART_SetConfig+0x2dc>)
 800e98a:	4293      	cmp	r3, r2
 800e98c:	d12a      	bne.n	800e9e4 <UART_SetConfig+0x260>
 800e98e:	4b30      	ldr	r3, [pc, #192]	; (800ea50 <UART_SetConfig+0x2cc>)
 800e990:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e994:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e998:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e99c:	d01a      	beq.n	800e9d4 <UART_SetConfig+0x250>
 800e99e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e9a2:	d81b      	bhi.n	800e9dc <UART_SetConfig+0x258>
 800e9a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e9a8:	d00c      	beq.n	800e9c4 <UART_SetConfig+0x240>
 800e9aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e9ae:	d815      	bhi.n	800e9dc <UART_SetConfig+0x258>
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d003      	beq.n	800e9bc <UART_SetConfig+0x238>
 800e9b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e9b8:	d008      	beq.n	800e9cc <UART_SetConfig+0x248>
 800e9ba:	e00f      	b.n	800e9dc <UART_SetConfig+0x258>
 800e9bc:	2300      	movs	r3, #0
 800e9be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e9c2:	e052      	b.n	800ea6a <UART_SetConfig+0x2e6>
 800e9c4:	2302      	movs	r3, #2
 800e9c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e9ca:	e04e      	b.n	800ea6a <UART_SetConfig+0x2e6>
 800e9cc:	2304      	movs	r3, #4
 800e9ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e9d2:	e04a      	b.n	800ea6a <UART_SetConfig+0x2e6>
 800e9d4:	2308      	movs	r3, #8
 800e9d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e9da:	e046      	b.n	800ea6a <UART_SetConfig+0x2e6>
 800e9dc:	2310      	movs	r3, #16
 800e9de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e9e2:	e042      	b.n	800ea6a <UART_SetConfig+0x2e6>
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	4a17      	ldr	r2, [pc, #92]	; (800ea48 <UART_SetConfig+0x2c4>)
 800e9ea:	4293      	cmp	r3, r2
 800e9ec:	d13a      	bne.n	800ea64 <UART_SetConfig+0x2e0>
 800e9ee:	4b18      	ldr	r3, [pc, #96]	; (800ea50 <UART_SetConfig+0x2cc>)
 800e9f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e9f4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800e9f8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e9fc:	d01a      	beq.n	800ea34 <UART_SetConfig+0x2b0>
 800e9fe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ea02:	d81b      	bhi.n	800ea3c <UART_SetConfig+0x2b8>
 800ea04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ea08:	d00c      	beq.n	800ea24 <UART_SetConfig+0x2a0>
 800ea0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ea0e:	d815      	bhi.n	800ea3c <UART_SetConfig+0x2b8>
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d003      	beq.n	800ea1c <UART_SetConfig+0x298>
 800ea14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ea18:	d008      	beq.n	800ea2c <UART_SetConfig+0x2a8>
 800ea1a:	e00f      	b.n	800ea3c <UART_SetConfig+0x2b8>
 800ea1c:	2300      	movs	r3, #0
 800ea1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ea22:	e022      	b.n	800ea6a <UART_SetConfig+0x2e6>
 800ea24:	2302      	movs	r3, #2
 800ea26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ea2a:	e01e      	b.n	800ea6a <UART_SetConfig+0x2e6>
 800ea2c:	2304      	movs	r3, #4
 800ea2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ea32:	e01a      	b.n	800ea6a <UART_SetConfig+0x2e6>
 800ea34:	2308      	movs	r3, #8
 800ea36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ea3a:	e016      	b.n	800ea6a <UART_SetConfig+0x2e6>
 800ea3c:	2310      	movs	r3, #16
 800ea3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ea42:	e012      	b.n	800ea6a <UART_SetConfig+0x2e6>
 800ea44:	efff69f3 	.word	0xefff69f3
 800ea48:	40008000 	.word	0x40008000
 800ea4c:	40013800 	.word	0x40013800
 800ea50:	40021000 	.word	0x40021000
 800ea54:	40004400 	.word	0x40004400
 800ea58:	40004800 	.word	0x40004800
 800ea5c:	40004c00 	.word	0x40004c00
 800ea60:	40005000 	.word	0x40005000
 800ea64:	2310      	movs	r3, #16
 800ea66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ea6a:	68fb      	ldr	r3, [r7, #12]
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	4a9f      	ldr	r2, [pc, #636]	; (800ecec <UART_SetConfig+0x568>)
 800ea70:	4293      	cmp	r3, r2
 800ea72:	d17a      	bne.n	800eb6a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ea74:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ea78:	2b08      	cmp	r3, #8
 800ea7a:	d824      	bhi.n	800eac6 <UART_SetConfig+0x342>
 800ea7c:	a201      	add	r2, pc, #4	; (adr r2, 800ea84 <UART_SetConfig+0x300>)
 800ea7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea82:	bf00      	nop
 800ea84:	0800eaa9 	.word	0x0800eaa9
 800ea88:	0800eac7 	.word	0x0800eac7
 800ea8c:	0800eab1 	.word	0x0800eab1
 800ea90:	0800eac7 	.word	0x0800eac7
 800ea94:	0800eab7 	.word	0x0800eab7
 800ea98:	0800eac7 	.word	0x0800eac7
 800ea9c:	0800eac7 	.word	0x0800eac7
 800eaa0:	0800eac7 	.word	0x0800eac7
 800eaa4:	0800eabf 	.word	0x0800eabf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800eaa8:	f7fc f85e 	bl	800ab68 <HAL_RCC_GetPCLK1Freq>
 800eaac:	61f8      	str	r0, [r7, #28]
        break;
 800eaae:	e010      	b.n	800ead2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800eab0:	4b8f      	ldr	r3, [pc, #572]	; (800ecf0 <UART_SetConfig+0x56c>)
 800eab2:	61fb      	str	r3, [r7, #28]
        break;
 800eab4:	e00d      	b.n	800ead2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800eab6:	f7fb ffbf 	bl	800aa38 <HAL_RCC_GetSysClockFreq>
 800eaba:	61f8      	str	r0, [r7, #28]
        break;
 800eabc:	e009      	b.n	800ead2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800eabe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800eac2:	61fb      	str	r3, [r7, #28]
        break;
 800eac4:	e005      	b.n	800ead2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800eac6:	2300      	movs	r3, #0
 800eac8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800eaca:	2301      	movs	r3, #1
 800eacc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800ead0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ead2:	69fb      	ldr	r3, [r7, #28]
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	f000 80fb 	beq.w	800ecd0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	685a      	ldr	r2, [r3, #4]
 800eade:	4613      	mov	r3, r2
 800eae0:	005b      	lsls	r3, r3, #1
 800eae2:	4413      	add	r3, r2
 800eae4:	69fa      	ldr	r2, [r7, #28]
 800eae6:	429a      	cmp	r2, r3
 800eae8:	d305      	bcc.n	800eaf6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	685b      	ldr	r3, [r3, #4]
 800eaee:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800eaf0:	69fa      	ldr	r2, [r7, #28]
 800eaf2:	429a      	cmp	r2, r3
 800eaf4:	d903      	bls.n	800eafe <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800eaf6:	2301      	movs	r3, #1
 800eaf8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800eafc:	e0e8      	b.n	800ecd0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800eafe:	69fb      	ldr	r3, [r7, #28]
 800eb00:	2200      	movs	r2, #0
 800eb02:	461c      	mov	r4, r3
 800eb04:	4615      	mov	r5, r2
 800eb06:	f04f 0200 	mov.w	r2, #0
 800eb0a:	f04f 0300 	mov.w	r3, #0
 800eb0e:	022b      	lsls	r3, r5, #8
 800eb10:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800eb14:	0222      	lsls	r2, r4, #8
 800eb16:	68f9      	ldr	r1, [r7, #12]
 800eb18:	6849      	ldr	r1, [r1, #4]
 800eb1a:	0849      	lsrs	r1, r1, #1
 800eb1c:	2000      	movs	r0, #0
 800eb1e:	4688      	mov	r8, r1
 800eb20:	4681      	mov	r9, r0
 800eb22:	eb12 0a08 	adds.w	sl, r2, r8
 800eb26:	eb43 0b09 	adc.w	fp, r3, r9
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	685b      	ldr	r3, [r3, #4]
 800eb2e:	2200      	movs	r2, #0
 800eb30:	603b      	str	r3, [r7, #0]
 800eb32:	607a      	str	r2, [r7, #4]
 800eb34:	e9d7 2300 	ldrd	r2, r3, [r7]
 800eb38:	4650      	mov	r0, sl
 800eb3a:	4659      	mov	r1, fp
 800eb3c:	f7f2 f8f4 	bl	8000d28 <__aeabi_uldivmod>
 800eb40:	4602      	mov	r2, r0
 800eb42:	460b      	mov	r3, r1
 800eb44:	4613      	mov	r3, r2
 800eb46:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800eb48:	69bb      	ldr	r3, [r7, #24]
 800eb4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800eb4e:	d308      	bcc.n	800eb62 <UART_SetConfig+0x3de>
 800eb50:	69bb      	ldr	r3, [r7, #24]
 800eb52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800eb56:	d204      	bcs.n	800eb62 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	69ba      	ldr	r2, [r7, #24]
 800eb5e:	60da      	str	r2, [r3, #12]
 800eb60:	e0b6      	b.n	800ecd0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800eb62:	2301      	movs	r3, #1
 800eb64:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800eb68:	e0b2      	b.n	800ecd0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	69db      	ldr	r3, [r3, #28]
 800eb6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eb72:	d15e      	bne.n	800ec32 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800eb74:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800eb78:	2b08      	cmp	r3, #8
 800eb7a:	d828      	bhi.n	800ebce <UART_SetConfig+0x44a>
 800eb7c:	a201      	add	r2, pc, #4	; (adr r2, 800eb84 <UART_SetConfig+0x400>)
 800eb7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb82:	bf00      	nop
 800eb84:	0800eba9 	.word	0x0800eba9
 800eb88:	0800ebb1 	.word	0x0800ebb1
 800eb8c:	0800ebb9 	.word	0x0800ebb9
 800eb90:	0800ebcf 	.word	0x0800ebcf
 800eb94:	0800ebbf 	.word	0x0800ebbf
 800eb98:	0800ebcf 	.word	0x0800ebcf
 800eb9c:	0800ebcf 	.word	0x0800ebcf
 800eba0:	0800ebcf 	.word	0x0800ebcf
 800eba4:	0800ebc7 	.word	0x0800ebc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800eba8:	f7fb ffde 	bl	800ab68 <HAL_RCC_GetPCLK1Freq>
 800ebac:	61f8      	str	r0, [r7, #28]
        break;
 800ebae:	e014      	b.n	800ebda <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ebb0:	f7fb fff0 	bl	800ab94 <HAL_RCC_GetPCLK2Freq>
 800ebb4:	61f8      	str	r0, [r7, #28]
        break;
 800ebb6:	e010      	b.n	800ebda <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ebb8:	4b4d      	ldr	r3, [pc, #308]	; (800ecf0 <UART_SetConfig+0x56c>)
 800ebba:	61fb      	str	r3, [r7, #28]
        break;
 800ebbc:	e00d      	b.n	800ebda <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ebbe:	f7fb ff3b 	bl	800aa38 <HAL_RCC_GetSysClockFreq>
 800ebc2:	61f8      	str	r0, [r7, #28]
        break;
 800ebc4:	e009      	b.n	800ebda <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ebc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ebca:	61fb      	str	r3, [r7, #28]
        break;
 800ebcc:	e005      	b.n	800ebda <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800ebce:	2300      	movs	r3, #0
 800ebd0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800ebd2:	2301      	movs	r3, #1
 800ebd4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800ebd8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ebda:	69fb      	ldr	r3, [r7, #28]
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d077      	beq.n	800ecd0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ebe0:	69fb      	ldr	r3, [r7, #28]
 800ebe2:	005a      	lsls	r2, r3, #1
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	685b      	ldr	r3, [r3, #4]
 800ebe8:	085b      	lsrs	r3, r3, #1
 800ebea:	441a      	add	r2, r3
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	685b      	ldr	r3, [r3, #4]
 800ebf0:	fbb2 f3f3 	udiv	r3, r2, r3
 800ebf4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ebf6:	69bb      	ldr	r3, [r7, #24]
 800ebf8:	2b0f      	cmp	r3, #15
 800ebfa:	d916      	bls.n	800ec2a <UART_SetConfig+0x4a6>
 800ebfc:	69bb      	ldr	r3, [r7, #24]
 800ebfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ec02:	d212      	bcs.n	800ec2a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ec04:	69bb      	ldr	r3, [r7, #24]
 800ec06:	b29b      	uxth	r3, r3
 800ec08:	f023 030f 	bic.w	r3, r3, #15
 800ec0c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ec0e:	69bb      	ldr	r3, [r7, #24]
 800ec10:	085b      	lsrs	r3, r3, #1
 800ec12:	b29b      	uxth	r3, r3
 800ec14:	f003 0307 	and.w	r3, r3, #7
 800ec18:	b29a      	uxth	r2, r3
 800ec1a:	8afb      	ldrh	r3, [r7, #22]
 800ec1c:	4313      	orrs	r3, r2
 800ec1e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	8afa      	ldrh	r2, [r7, #22]
 800ec26:	60da      	str	r2, [r3, #12]
 800ec28:	e052      	b.n	800ecd0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800ec2a:	2301      	movs	r3, #1
 800ec2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800ec30:	e04e      	b.n	800ecd0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ec32:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ec36:	2b08      	cmp	r3, #8
 800ec38:	d827      	bhi.n	800ec8a <UART_SetConfig+0x506>
 800ec3a:	a201      	add	r2, pc, #4	; (adr r2, 800ec40 <UART_SetConfig+0x4bc>)
 800ec3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec40:	0800ec65 	.word	0x0800ec65
 800ec44:	0800ec6d 	.word	0x0800ec6d
 800ec48:	0800ec75 	.word	0x0800ec75
 800ec4c:	0800ec8b 	.word	0x0800ec8b
 800ec50:	0800ec7b 	.word	0x0800ec7b
 800ec54:	0800ec8b 	.word	0x0800ec8b
 800ec58:	0800ec8b 	.word	0x0800ec8b
 800ec5c:	0800ec8b 	.word	0x0800ec8b
 800ec60:	0800ec83 	.word	0x0800ec83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ec64:	f7fb ff80 	bl	800ab68 <HAL_RCC_GetPCLK1Freq>
 800ec68:	61f8      	str	r0, [r7, #28]
        break;
 800ec6a:	e014      	b.n	800ec96 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ec6c:	f7fb ff92 	bl	800ab94 <HAL_RCC_GetPCLK2Freq>
 800ec70:	61f8      	str	r0, [r7, #28]
        break;
 800ec72:	e010      	b.n	800ec96 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ec74:	4b1e      	ldr	r3, [pc, #120]	; (800ecf0 <UART_SetConfig+0x56c>)
 800ec76:	61fb      	str	r3, [r7, #28]
        break;
 800ec78:	e00d      	b.n	800ec96 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ec7a:	f7fb fedd 	bl	800aa38 <HAL_RCC_GetSysClockFreq>
 800ec7e:	61f8      	str	r0, [r7, #28]
        break;
 800ec80:	e009      	b.n	800ec96 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ec82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ec86:	61fb      	str	r3, [r7, #28]
        break;
 800ec88:	e005      	b.n	800ec96 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800ec8a:	2300      	movs	r3, #0
 800ec8c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800ec8e:	2301      	movs	r3, #1
 800ec90:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800ec94:	bf00      	nop
    }

    if (pclk != 0U)
 800ec96:	69fb      	ldr	r3, [r7, #28]
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d019      	beq.n	800ecd0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	685b      	ldr	r3, [r3, #4]
 800eca0:	085a      	lsrs	r2, r3, #1
 800eca2:	69fb      	ldr	r3, [r7, #28]
 800eca4:	441a      	add	r2, r3
 800eca6:	68fb      	ldr	r3, [r7, #12]
 800eca8:	685b      	ldr	r3, [r3, #4]
 800ecaa:	fbb2 f3f3 	udiv	r3, r2, r3
 800ecae:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ecb0:	69bb      	ldr	r3, [r7, #24]
 800ecb2:	2b0f      	cmp	r3, #15
 800ecb4:	d909      	bls.n	800ecca <UART_SetConfig+0x546>
 800ecb6:	69bb      	ldr	r3, [r7, #24]
 800ecb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ecbc:	d205      	bcs.n	800ecca <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ecbe:	69bb      	ldr	r3, [r7, #24]
 800ecc0:	b29a      	uxth	r2, r3
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	60da      	str	r2, [r3, #12]
 800ecc8:	e002      	b.n	800ecd0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800ecca:	2301      	movs	r3, #1
 800eccc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	2200      	movs	r2, #0
 800ecd4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	2200      	movs	r2, #0
 800ecda:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800ecdc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800ece0:	4618      	mov	r0, r3
 800ece2:	3728      	adds	r7, #40	; 0x28
 800ece4:	46bd      	mov	sp, r7
 800ece6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ecea:	bf00      	nop
 800ecec:	40008000 	.word	0x40008000
 800ecf0:	00f42400 	.word	0x00f42400

0800ecf4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ecf4:	b480      	push	{r7}
 800ecf6:	b083      	sub	sp, #12
 800ecf8:	af00      	add	r7, sp, #0
 800ecfa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed00:	f003 0301 	and.w	r3, r3, #1
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d00a      	beq.n	800ed1e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	685b      	ldr	r3, [r3, #4]
 800ed0e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	430a      	orrs	r2, r1
 800ed1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed22:	f003 0302 	and.w	r3, r3, #2
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d00a      	beq.n	800ed40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	685b      	ldr	r3, [r3, #4]
 800ed30:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	430a      	orrs	r2, r1
 800ed3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed44:	f003 0304 	and.w	r3, r3, #4
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d00a      	beq.n	800ed62 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	685b      	ldr	r3, [r3, #4]
 800ed52:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	681b      	ldr	r3, [r3, #0]
 800ed5e:	430a      	orrs	r2, r1
 800ed60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed66:	f003 0308 	and.w	r3, r3, #8
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d00a      	beq.n	800ed84 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	685b      	ldr	r3, [r3, #4]
 800ed74:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	430a      	orrs	r2, r1
 800ed82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed88:	f003 0310 	and.w	r3, r3, #16
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d00a      	beq.n	800eda6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	689b      	ldr	r3, [r3, #8]
 800ed96:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	430a      	orrs	r2, r1
 800eda4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edaa:	f003 0320 	and.w	r3, r3, #32
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d00a      	beq.n	800edc8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	689b      	ldr	r3, [r3, #8]
 800edb8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	430a      	orrs	r2, r1
 800edc6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d01a      	beq.n	800ee0a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	685b      	ldr	r3, [r3, #4]
 800edda:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	430a      	orrs	r2, r1
 800ede8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800edee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800edf2:	d10a      	bne.n	800ee0a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	681b      	ldr	r3, [r3, #0]
 800edf8:	685b      	ldr	r3, [r3, #4]
 800edfa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	430a      	orrs	r2, r1
 800ee08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d00a      	beq.n	800ee2c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	685b      	ldr	r3, [r3, #4]
 800ee1c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	430a      	orrs	r2, r1
 800ee2a:	605a      	str	r2, [r3, #4]
  }
}
 800ee2c:	bf00      	nop
 800ee2e:	370c      	adds	r7, #12
 800ee30:	46bd      	mov	sp, r7
 800ee32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee36:	4770      	bx	lr

0800ee38 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ee38:	b580      	push	{r7, lr}
 800ee3a:	b086      	sub	sp, #24
 800ee3c:	af02      	add	r7, sp, #8
 800ee3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	2200      	movs	r2, #0
 800ee44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ee48:	f7f8 fd7c 	bl	8007944 <HAL_GetTick>
 800ee4c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	681b      	ldr	r3, [r3, #0]
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	f003 0308 	and.w	r3, r3, #8
 800ee58:	2b08      	cmp	r3, #8
 800ee5a:	d10e      	bne.n	800ee7a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ee5c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ee60:	9300      	str	r3, [sp, #0]
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	2200      	movs	r2, #0
 800ee66:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ee6a:	6878      	ldr	r0, [r7, #4]
 800ee6c:	f000 f82d 	bl	800eeca <UART_WaitOnFlagUntilTimeout>
 800ee70:	4603      	mov	r3, r0
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d001      	beq.n	800ee7a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ee76:	2303      	movs	r3, #3
 800ee78:	e023      	b.n	800eec2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	f003 0304 	and.w	r3, r3, #4
 800ee84:	2b04      	cmp	r3, #4
 800ee86:	d10e      	bne.n	800eea6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ee88:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ee8c:	9300      	str	r3, [sp, #0]
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	2200      	movs	r2, #0
 800ee92:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ee96:	6878      	ldr	r0, [r7, #4]
 800ee98:	f000 f817 	bl	800eeca <UART_WaitOnFlagUntilTimeout>
 800ee9c:	4603      	mov	r3, r0
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d001      	beq.n	800eea6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800eea2:	2303      	movs	r3, #3
 800eea4:	e00d      	b.n	800eec2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	2220      	movs	r2, #32
 800eeaa:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	2220      	movs	r2, #32
 800eeb0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	2200      	movs	r2, #0
 800eeb6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	2200      	movs	r2, #0
 800eebc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800eec0:	2300      	movs	r3, #0
}
 800eec2:	4618      	mov	r0, r3
 800eec4:	3710      	adds	r7, #16
 800eec6:	46bd      	mov	sp, r7
 800eec8:	bd80      	pop	{r7, pc}

0800eeca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800eeca:	b580      	push	{r7, lr}
 800eecc:	b09c      	sub	sp, #112	; 0x70
 800eece:	af00      	add	r7, sp, #0
 800eed0:	60f8      	str	r0, [r7, #12]
 800eed2:	60b9      	str	r1, [r7, #8]
 800eed4:	603b      	str	r3, [r7, #0]
 800eed6:	4613      	mov	r3, r2
 800eed8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800eeda:	e0a5      	b.n	800f028 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800eedc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800eede:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eee2:	f000 80a1 	beq.w	800f028 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800eee6:	f7f8 fd2d 	bl	8007944 <HAL_GetTick>
 800eeea:	4602      	mov	r2, r0
 800eeec:	683b      	ldr	r3, [r7, #0]
 800eeee:	1ad3      	subs	r3, r2, r3
 800eef0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800eef2:	429a      	cmp	r2, r3
 800eef4:	d302      	bcc.n	800eefc <UART_WaitOnFlagUntilTimeout+0x32>
 800eef6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d13e      	bne.n	800ef7a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ef04:	e853 3f00 	ldrex	r3, [r3]
 800ef08:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ef0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ef0c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ef10:	667b      	str	r3, [r7, #100]	; 0x64
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	461a      	mov	r2, r3
 800ef18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ef1a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ef1c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef1e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ef20:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ef22:	e841 2300 	strex	r3, r2, [r1]
 800ef26:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800ef28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d1e6      	bne.n	800eefc <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ef2e:	68fb      	ldr	r3, [r7, #12]
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	3308      	adds	r3, #8
 800ef34:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ef38:	e853 3f00 	ldrex	r3, [r3]
 800ef3c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ef3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef40:	f023 0301 	bic.w	r3, r3, #1
 800ef44:	663b      	str	r3, [r7, #96]	; 0x60
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	681b      	ldr	r3, [r3, #0]
 800ef4a:	3308      	adds	r3, #8
 800ef4c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ef4e:	64ba      	str	r2, [r7, #72]	; 0x48
 800ef50:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef52:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ef54:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ef56:	e841 2300 	strex	r3, r2, [r1]
 800ef5a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ef5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d1e5      	bne.n	800ef2e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	2220      	movs	r2, #32
 800ef66:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	2220      	movs	r2, #32
 800ef6c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800ef6e:	68fb      	ldr	r3, [r7, #12]
 800ef70:	2200      	movs	r2, #0
 800ef72:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800ef76:	2303      	movs	r3, #3
 800ef78:	e067      	b.n	800f04a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	681b      	ldr	r3, [r3, #0]
 800ef80:	f003 0304 	and.w	r3, r3, #4
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d04f      	beq.n	800f028 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	69db      	ldr	r3, [r3, #28]
 800ef8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ef92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ef96:	d147      	bne.n	800f028 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800efa0:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800efa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efaa:	e853 3f00 	ldrex	r3, [r3]
 800efae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800efb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efb2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800efb6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	461a      	mov	r2, r3
 800efbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800efc0:	637b      	str	r3, [r7, #52]	; 0x34
 800efc2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800efc4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800efc6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800efc8:	e841 2300 	strex	r3, r2, [r1]
 800efcc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800efce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d1e6      	bne.n	800efa2 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	3308      	adds	r3, #8
 800efda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800efdc:	697b      	ldr	r3, [r7, #20]
 800efde:	e853 3f00 	ldrex	r3, [r3]
 800efe2:	613b      	str	r3, [r7, #16]
   return(result);
 800efe4:	693b      	ldr	r3, [r7, #16]
 800efe6:	f023 0301 	bic.w	r3, r3, #1
 800efea:	66bb      	str	r3, [r7, #104]	; 0x68
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	3308      	adds	r3, #8
 800eff2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800eff4:	623a      	str	r2, [r7, #32]
 800eff6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eff8:	69f9      	ldr	r1, [r7, #28]
 800effa:	6a3a      	ldr	r2, [r7, #32]
 800effc:	e841 2300 	strex	r3, r2, [r1]
 800f000:	61bb      	str	r3, [r7, #24]
   return(result);
 800f002:	69bb      	ldr	r3, [r7, #24]
 800f004:	2b00      	cmp	r3, #0
 800f006:	d1e5      	bne.n	800efd4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	2220      	movs	r2, #32
 800f00c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800f00e:	68fb      	ldr	r3, [r7, #12]
 800f010:	2220      	movs	r2, #32
 800f012:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	2220      	movs	r2, #32
 800f018:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f01c:	68fb      	ldr	r3, [r7, #12]
 800f01e:	2200      	movs	r2, #0
 800f020:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800f024:	2303      	movs	r3, #3
 800f026:	e010      	b.n	800f04a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	69da      	ldr	r2, [r3, #28]
 800f02e:	68bb      	ldr	r3, [r7, #8]
 800f030:	4013      	ands	r3, r2
 800f032:	68ba      	ldr	r2, [r7, #8]
 800f034:	429a      	cmp	r2, r3
 800f036:	bf0c      	ite	eq
 800f038:	2301      	moveq	r3, #1
 800f03a:	2300      	movne	r3, #0
 800f03c:	b2db      	uxtb	r3, r3
 800f03e:	461a      	mov	r2, r3
 800f040:	79fb      	ldrb	r3, [r7, #7]
 800f042:	429a      	cmp	r2, r3
 800f044:	f43f af4a 	beq.w	800eedc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f048:	2300      	movs	r3, #0
}
 800f04a:	4618      	mov	r0, r3
 800f04c:	3770      	adds	r7, #112	; 0x70
 800f04e:	46bd      	mov	sp, r7
 800f050:	bd80      	pop	{r7, pc}
	...

0800f054 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f054:	b480      	push	{r7}
 800f056:	b097      	sub	sp, #92	; 0x5c
 800f058:	af00      	add	r7, sp, #0
 800f05a:	60f8      	str	r0, [r7, #12]
 800f05c:	60b9      	str	r1, [r7, #8]
 800f05e:	4613      	mov	r3, r2
 800f060:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800f062:	68fb      	ldr	r3, [r7, #12]
 800f064:	68ba      	ldr	r2, [r7, #8]
 800f066:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	88fa      	ldrh	r2, [r7, #6]
 800f06c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	88fa      	ldrh	r2, [r7, #6]
 800f074:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	2200      	movs	r2, #0
 800f07c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	689b      	ldr	r3, [r3, #8]
 800f082:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f086:	d10e      	bne.n	800f0a6 <UART_Start_Receive_IT+0x52>
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	691b      	ldr	r3, [r3, #16]
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d105      	bne.n	800f09c <UART_Start_Receive_IT+0x48>
 800f090:	68fb      	ldr	r3, [r7, #12]
 800f092:	f240 12ff 	movw	r2, #511	; 0x1ff
 800f096:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800f09a:	e02d      	b.n	800f0f8 <UART_Start_Receive_IT+0xa4>
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	22ff      	movs	r2, #255	; 0xff
 800f0a0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800f0a4:	e028      	b.n	800f0f8 <UART_Start_Receive_IT+0xa4>
 800f0a6:	68fb      	ldr	r3, [r7, #12]
 800f0a8:	689b      	ldr	r3, [r3, #8]
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d10d      	bne.n	800f0ca <UART_Start_Receive_IT+0x76>
 800f0ae:	68fb      	ldr	r3, [r7, #12]
 800f0b0:	691b      	ldr	r3, [r3, #16]
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d104      	bne.n	800f0c0 <UART_Start_Receive_IT+0x6c>
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	22ff      	movs	r2, #255	; 0xff
 800f0ba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800f0be:	e01b      	b.n	800f0f8 <UART_Start_Receive_IT+0xa4>
 800f0c0:	68fb      	ldr	r3, [r7, #12]
 800f0c2:	227f      	movs	r2, #127	; 0x7f
 800f0c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800f0c8:	e016      	b.n	800f0f8 <UART_Start_Receive_IT+0xa4>
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	689b      	ldr	r3, [r3, #8]
 800f0ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f0d2:	d10d      	bne.n	800f0f0 <UART_Start_Receive_IT+0x9c>
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	691b      	ldr	r3, [r3, #16]
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d104      	bne.n	800f0e6 <UART_Start_Receive_IT+0x92>
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	227f      	movs	r2, #127	; 0x7f
 800f0e0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800f0e4:	e008      	b.n	800f0f8 <UART_Start_Receive_IT+0xa4>
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	223f      	movs	r2, #63	; 0x3f
 800f0ea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800f0ee:	e003      	b.n	800f0f8 <UART_Start_Receive_IT+0xa4>
 800f0f0:	68fb      	ldr	r3, [r7, #12]
 800f0f2:	2200      	movs	r2, #0
 800f0f4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	2200      	movs	r2, #0
 800f0fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	2222      	movs	r2, #34	; 0x22
 800f104:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f106:	68fb      	ldr	r3, [r7, #12]
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	3308      	adds	r3, #8
 800f10c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f10e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f110:	e853 3f00 	ldrex	r3, [r3]
 800f114:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f118:	f043 0301 	orr.w	r3, r3, #1
 800f11c:	657b      	str	r3, [r7, #84]	; 0x54
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	681b      	ldr	r3, [r3, #0]
 800f122:	3308      	adds	r3, #8
 800f124:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f126:	64ba      	str	r2, [r7, #72]	; 0x48
 800f128:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f12a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f12c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f12e:	e841 2300 	strex	r3, r2, [r1]
 800f132:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800f134:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f136:	2b00      	cmp	r3, #0
 800f138:	d1e5      	bne.n	800f106 <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	689b      	ldr	r3, [r3, #8]
 800f13e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f142:	d107      	bne.n	800f154 <UART_Start_Receive_IT+0x100>
 800f144:	68fb      	ldr	r3, [r7, #12]
 800f146:	691b      	ldr	r3, [r3, #16]
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d103      	bne.n	800f154 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800f14c:	68fb      	ldr	r3, [r7, #12]
 800f14e:	4a24      	ldr	r2, [pc, #144]	; (800f1e0 <UART_Start_Receive_IT+0x18c>)
 800f150:	665a      	str	r2, [r3, #100]	; 0x64
 800f152:	e002      	b.n	800f15a <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800f154:	68fb      	ldr	r3, [r7, #12]
 800f156:	4a23      	ldr	r2, [pc, #140]	; (800f1e4 <UART_Start_Receive_IT+0x190>)
 800f158:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	2200      	movs	r2, #0
 800f15e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800f162:	68fb      	ldr	r3, [r7, #12]
 800f164:	691b      	ldr	r3, [r3, #16]
 800f166:	2b00      	cmp	r3, #0
 800f168:	d019      	beq.n	800f19e <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f172:	e853 3f00 	ldrex	r3, [r3]
 800f176:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f17a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800f17e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	461a      	mov	r2, r3
 800f186:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f188:	637b      	str	r3, [r7, #52]	; 0x34
 800f18a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f18c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f18e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f190:	e841 2300 	strex	r3, r2, [r1]
 800f194:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800f196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f198:	2b00      	cmp	r3, #0
 800f19a:	d1e6      	bne.n	800f16a <UART_Start_Receive_IT+0x116>
 800f19c:	e018      	b.n	800f1d0 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800f19e:	68fb      	ldr	r3, [r7, #12]
 800f1a0:	681b      	ldr	r3, [r3, #0]
 800f1a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1a4:	697b      	ldr	r3, [r7, #20]
 800f1a6:	e853 3f00 	ldrex	r3, [r3]
 800f1aa:	613b      	str	r3, [r7, #16]
   return(result);
 800f1ac:	693b      	ldr	r3, [r7, #16]
 800f1ae:	f043 0320 	orr.w	r3, r3, #32
 800f1b2:	653b      	str	r3, [r7, #80]	; 0x50
 800f1b4:	68fb      	ldr	r3, [r7, #12]
 800f1b6:	681b      	ldr	r3, [r3, #0]
 800f1b8:	461a      	mov	r2, r3
 800f1ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f1bc:	623b      	str	r3, [r7, #32]
 800f1be:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1c0:	69f9      	ldr	r1, [r7, #28]
 800f1c2:	6a3a      	ldr	r2, [r7, #32]
 800f1c4:	e841 2300 	strex	r3, r2, [r1]
 800f1c8:	61bb      	str	r3, [r7, #24]
   return(result);
 800f1ca:	69bb      	ldr	r3, [r7, #24]
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	d1e6      	bne.n	800f19e <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800f1d0:	2300      	movs	r3, #0
}
 800f1d2:	4618      	mov	r0, r3
 800f1d4:	375c      	adds	r7, #92	; 0x5c
 800f1d6:	46bd      	mov	sp, r7
 800f1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1dc:	4770      	bx	lr
 800f1de:	bf00      	nop
 800f1e0:	0800f60d 	.word	0x0800f60d
 800f1e4:	0800f4ad 	.word	0x0800f4ad

0800f1e8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800f1e8:	b480      	push	{r7}
 800f1ea:	b089      	sub	sp, #36	; 0x24
 800f1ec:	af00      	add	r7, sp, #0
 800f1ee:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	e853 3f00 	ldrex	r3, [r3]
 800f1fc:	60bb      	str	r3, [r7, #8]
   return(result);
 800f1fe:	68bb      	ldr	r3, [r7, #8]
 800f200:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800f204:	61fb      	str	r3, [r7, #28]
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	681b      	ldr	r3, [r3, #0]
 800f20a:	461a      	mov	r2, r3
 800f20c:	69fb      	ldr	r3, [r7, #28]
 800f20e:	61bb      	str	r3, [r7, #24]
 800f210:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f212:	6979      	ldr	r1, [r7, #20]
 800f214:	69ba      	ldr	r2, [r7, #24]
 800f216:	e841 2300 	strex	r3, r2, [r1]
 800f21a:	613b      	str	r3, [r7, #16]
   return(result);
 800f21c:	693b      	ldr	r3, [r7, #16]
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d1e6      	bne.n	800f1f0 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	2220      	movs	r2, #32
 800f226:	679a      	str	r2, [r3, #120]	; 0x78
}
 800f228:	bf00      	nop
 800f22a:	3724      	adds	r7, #36	; 0x24
 800f22c:	46bd      	mov	sp, r7
 800f22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f232:	4770      	bx	lr

0800f234 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f234:	b480      	push	{r7}
 800f236:	b095      	sub	sp, #84	; 0x54
 800f238:	af00      	add	r7, sp, #0
 800f23a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f242:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f244:	e853 3f00 	ldrex	r3, [r3]
 800f248:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f24a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f24c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f250:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	681b      	ldr	r3, [r3, #0]
 800f256:	461a      	mov	r2, r3
 800f258:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f25a:	643b      	str	r3, [r7, #64]	; 0x40
 800f25c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f25e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f260:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f262:	e841 2300 	strex	r3, r2, [r1]
 800f266:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	d1e6      	bne.n	800f23c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	681b      	ldr	r3, [r3, #0]
 800f272:	3308      	adds	r3, #8
 800f274:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f276:	6a3b      	ldr	r3, [r7, #32]
 800f278:	e853 3f00 	ldrex	r3, [r3]
 800f27c:	61fb      	str	r3, [r7, #28]
   return(result);
 800f27e:	69fb      	ldr	r3, [r7, #28]
 800f280:	f023 0301 	bic.w	r3, r3, #1
 800f284:	64bb      	str	r3, [r7, #72]	; 0x48
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	3308      	adds	r3, #8
 800f28c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f28e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f290:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f292:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f294:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f296:	e841 2300 	strex	r3, r2, [r1]
 800f29a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f29c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d1e5      	bne.n	800f26e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f2a6:	2b01      	cmp	r3, #1
 800f2a8:	d118      	bne.n	800f2dc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2b0:	68fb      	ldr	r3, [r7, #12]
 800f2b2:	e853 3f00 	ldrex	r3, [r3]
 800f2b6:	60bb      	str	r3, [r7, #8]
   return(result);
 800f2b8:	68bb      	ldr	r3, [r7, #8]
 800f2ba:	f023 0310 	bic.w	r3, r3, #16
 800f2be:	647b      	str	r3, [r7, #68]	; 0x44
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	681b      	ldr	r3, [r3, #0]
 800f2c4:	461a      	mov	r2, r3
 800f2c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f2c8:	61bb      	str	r3, [r7, #24]
 800f2ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f2cc:	6979      	ldr	r1, [r7, #20]
 800f2ce:	69ba      	ldr	r2, [r7, #24]
 800f2d0:	e841 2300 	strex	r3, r2, [r1]
 800f2d4:	613b      	str	r3, [r7, #16]
   return(result);
 800f2d6:	693b      	ldr	r3, [r7, #16]
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d1e6      	bne.n	800f2aa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	2220      	movs	r2, #32
 800f2e0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	2200      	movs	r2, #0
 800f2e6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	2200      	movs	r2, #0
 800f2ec:	665a      	str	r2, [r3, #100]	; 0x64
}
 800f2ee:	bf00      	nop
 800f2f0:	3754      	adds	r7, #84	; 0x54
 800f2f2:	46bd      	mov	sp, r7
 800f2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2f8:	4770      	bx	lr

0800f2fa <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800f2fa:	b580      	push	{r7, lr}
 800f2fc:	b090      	sub	sp, #64	; 0x40
 800f2fe:	af00      	add	r7, sp, #0
 800f300:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f306:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	681b      	ldr	r3, [r3, #0]
 800f30e:	f003 0320 	and.w	r3, r3, #32
 800f312:	2b00      	cmp	r3, #0
 800f314:	d137      	bne.n	800f386 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800f316:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f318:	2200      	movs	r2, #0
 800f31a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f31e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	3308      	adds	r3, #8
 800f324:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f328:	e853 3f00 	ldrex	r3, [r3]
 800f32c:	623b      	str	r3, [r7, #32]
   return(result);
 800f32e:	6a3b      	ldr	r3, [r7, #32]
 800f330:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f334:	63bb      	str	r3, [r7, #56]	; 0x38
 800f336:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f338:	681b      	ldr	r3, [r3, #0]
 800f33a:	3308      	adds	r3, #8
 800f33c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f33e:	633a      	str	r2, [r7, #48]	; 0x30
 800f340:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f342:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f344:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f346:	e841 2300 	strex	r3, r2, [r1]
 800f34a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f34c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d1e5      	bne.n	800f31e <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f352:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f354:	681b      	ldr	r3, [r3, #0]
 800f356:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f358:	693b      	ldr	r3, [r7, #16]
 800f35a:	e853 3f00 	ldrex	r3, [r3]
 800f35e:	60fb      	str	r3, [r7, #12]
   return(result);
 800f360:	68fb      	ldr	r3, [r7, #12]
 800f362:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f366:	637b      	str	r3, [r7, #52]	; 0x34
 800f368:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	461a      	mov	r2, r3
 800f36e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f370:	61fb      	str	r3, [r7, #28]
 800f372:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f374:	69b9      	ldr	r1, [r7, #24]
 800f376:	69fa      	ldr	r2, [r7, #28]
 800f378:	e841 2300 	strex	r3, r2, [r1]
 800f37c:	617b      	str	r3, [r7, #20]
   return(result);
 800f37e:	697b      	ldr	r3, [r7, #20]
 800f380:	2b00      	cmp	r3, #0
 800f382:	d1e6      	bne.n	800f352 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f384:	e002      	b.n	800f38c <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800f386:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800f388:	f7f5 fee8 	bl	800515c <HAL_UART_TxCpltCallback>
}
 800f38c:	bf00      	nop
 800f38e:	3740      	adds	r7, #64	; 0x40
 800f390:	46bd      	mov	sp, r7
 800f392:	bd80      	pop	{r7, pc}

0800f394 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f394:	b580      	push	{r7, lr}
 800f396:	b084      	sub	sp, #16
 800f398:	af00      	add	r7, sp, #0
 800f39a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f3a0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800f3a2:	68f8      	ldr	r0, [r7, #12]
 800f3a4:	f7ff f9d8 	bl	800e758 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f3a8:	bf00      	nop
 800f3aa:	3710      	adds	r7, #16
 800f3ac:	46bd      	mov	sp, r7
 800f3ae:	bd80      	pop	{r7, pc}

0800f3b0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800f3b0:	b580      	push	{r7, lr}
 800f3b2:	b086      	sub	sp, #24
 800f3b4:	af00      	add	r7, sp, #0
 800f3b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f3bc:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800f3be:	697b      	ldr	r3, [r7, #20]
 800f3c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f3c2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800f3c4:	697b      	ldr	r3, [r7, #20]
 800f3c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f3c8:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800f3ca:	697b      	ldr	r3, [r7, #20]
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	689b      	ldr	r3, [r3, #8]
 800f3d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f3d4:	2b80      	cmp	r3, #128	; 0x80
 800f3d6:	d109      	bne.n	800f3ec <UART_DMAError+0x3c>
 800f3d8:	693b      	ldr	r3, [r7, #16]
 800f3da:	2b21      	cmp	r3, #33	; 0x21
 800f3dc:	d106      	bne.n	800f3ec <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800f3de:	697b      	ldr	r3, [r7, #20]
 800f3e0:	2200      	movs	r2, #0
 800f3e2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800f3e6:	6978      	ldr	r0, [r7, #20]
 800f3e8:	f7ff fefe 	bl	800f1e8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800f3ec:	697b      	ldr	r3, [r7, #20]
 800f3ee:	681b      	ldr	r3, [r3, #0]
 800f3f0:	689b      	ldr	r3, [r3, #8]
 800f3f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f3f6:	2b40      	cmp	r3, #64	; 0x40
 800f3f8:	d109      	bne.n	800f40e <UART_DMAError+0x5e>
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	2b22      	cmp	r3, #34	; 0x22
 800f3fe:	d106      	bne.n	800f40e <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800f400:	697b      	ldr	r3, [r7, #20]
 800f402:	2200      	movs	r2, #0
 800f404:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800f408:	6978      	ldr	r0, [r7, #20]
 800f40a:	f7ff ff13 	bl	800f234 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800f40e:	697b      	ldr	r3, [r7, #20]
 800f410:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f414:	f043 0210 	orr.w	r2, r3, #16
 800f418:	697b      	ldr	r3, [r7, #20]
 800f41a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f41e:	6978      	ldr	r0, [r7, #20]
 800f420:	f7f5 fec0 	bl	80051a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f424:	bf00      	nop
 800f426:	3718      	adds	r7, #24
 800f428:	46bd      	mov	sp, r7
 800f42a:	bd80      	pop	{r7, pc}

0800f42c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f42c:	b580      	push	{r7, lr}
 800f42e:	b084      	sub	sp, #16
 800f430:	af00      	add	r7, sp, #0
 800f432:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f438:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800f43a:	68fb      	ldr	r3, [r7, #12]
 800f43c:	2200      	movs	r2, #0
 800f43e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800f442:	68fb      	ldr	r3, [r7, #12]
 800f444:	2200      	movs	r2, #0
 800f446:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f44a:	68f8      	ldr	r0, [r7, #12]
 800f44c:	f7f5 feaa 	bl	80051a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f450:	bf00      	nop
 800f452:	3710      	adds	r7, #16
 800f454:	46bd      	mov	sp, r7
 800f456:	bd80      	pop	{r7, pc}

0800f458 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f458:	b580      	push	{r7, lr}
 800f45a:	b088      	sub	sp, #32
 800f45c:	af00      	add	r7, sp, #0
 800f45e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	e853 3f00 	ldrex	r3, [r3]
 800f46c:	60bb      	str	r3, [r7, #8]
   return(result);
 800f46e:	68bb      	ldr	r3, [r7, #8]
 800f470:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f474:	61fb      	str	r3, [r7, #28]
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	461a      	mov	r2, r3
 800f47c:	69fb      	ldr	r3, [r7, #28]
 800f47e:	61bb      	str	r3, [r7, #24]
 800f480:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f482:	6979      	ldr	r1, [r7, #20]
 800f484:	69ba      	ldr	r2, [r7, #24]
 800f486:	e841 2300 	strex	r3, r2, [r1]
 800f48a:	613b      	str	r3, [r7, #16]
   return(result);
 800f48c:	693b      	ldr	r3, [r7, #16]
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d1e6      	bne.n	800f460 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	2220      	movs	r2, #32
 800f496:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	2200      	movs	r2, #0
 800f49c:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f49e:	6878      	ldr	r0, [r7, #4]
 800f4a0:	f7f5 fe5c 	bl	800515c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f4a4:	bf00      	nop
 800f4a6:	3720      	adds	r7, #32
 800f4a8:	46bd      	mov	sp, r7
 800f4aa:	bd80      	pop	{r7, pc}

0800f4ac <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800f4ac:	b580      	push	{r7, lr}
 800f4ae:	b096      	sub	sp, #88	; 0x58
 800f4b0:	af00      	add	r7, sp, #0
 800f4b2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f4ba:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f4c2:	2b22      	cmp	r3, #34	; 0x22
 800f4c4:	f040 8094 	bne.w	800f5f0 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	681b      	ldr	r3, [r3, #0]
 800f4cc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f4ce:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800f4d2:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800f4d6:	b2d9      	uxtb	r1, r3
 800f4d8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800f4dc:	b2da      	uxtb	r2, r3
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f4e2:	400a      	ands	r2, r1
 800f4e4:	b2d2      	uxtb	r2, r2
 800f4e6:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f4ec:	1c5a      	adds	r2, r3, #1
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800f4f8:	b29b      	uxth	r3, r3
 800f4fa:	3b01      	subs	r3, #1
 800f4fc:	b29a      	uxth	r2, r3
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800f50a:	b29b      	uxth	r3, r3
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d179      	bne.n	800f604 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f518:	e853 3f00 	ldrex	r3, [r3]
 800f51c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f51e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f520:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f524:	653b      	str	r3, [r7, #80]	; 0x50
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	461a      	mov	r2, r3
 800f52c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f52e:	647b      	str	r3, [r7, #68]	; 0x44
 800f530:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f532:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f534:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f536:	e841 2300 	strex	r3, r2, [r1]
 800f53a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f53c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d1e6      	bne.n	800f510 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	3308      	adds	r3, #8
 800f548:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f54a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f54c:	e853 3f00 	ldrex	r3, [r3]
 800f550:	623b      	str	r3, [r7, #32]
   return(result);
 800f552:	6a3b      	ldr	r3, [r7, #32]
 800f554:	f023 0301 	bic.w	r3, r3, #1
 800f558:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	681b      	ldr	r3, [r3, #0]
 800f55e:	3308      	adds	r3, #8
 800f560:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f562:	633a      	str	r2, [r7, #48]	; 0x30
 800f564:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f566:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f568:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f56a:	e841 2300 	strex	r3, r2, [r1]
 800f56e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f572:	2b00      	cmp	r3, #0
 800f574:	d1e5      	bne.n	800f542 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	2220      	movs	r2, #32
 800f57a:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	2200      	movs	r2, #0
 800f580:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f586:	2b01      	cmp	r3, #1
 800f588:	d12e      	bne.n	800f5e8 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	2200      	movs	r2, #0
 800f58e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	681b      	ldr	r3, [r3, #0]
 800f594:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f596:	693b      	ldr	r3, [r7, #16]
 800f598:	e853 3f00 	ldrex	r3, [r3]
 800f59c:	60fb      	str	r3, [r7, #12]
   return(result);
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	f023 0310 	bic.w	r3, r3, #16
 800f5a4:	64bb      	str	r3, [r7, #72]	; 0x48
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	681b      	ldr	r3, [r3, #0]
 800f5aa:	461a      	mov	r2, r3
 800f5ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f5ae:	61fb      	str	r3, [r7, #28]
 800f5b0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5b2:	69b9      	ldr	r1, [r7, #24]
 800f5b4:	69fa      	ldr	r2, [r7, #28]
 800f5b6:	e841 2300 	strex	r3, r2, [r1]
 800f5ba:	617b      	str	r3, [r7, #20]
   return(result);
 800f5bc:	697b      	ldr	r3, [r7, #20]
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	d1e6      	bne.n	800f590 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	681b      	ldr	r3, [r3, #0]
 800f5c6:	69db      	ldr	r3, [r3, #28]
 800f5c8:	f003 0310 	and.w	r3, r3, #16
 800f5cc:	2b10      	cmp	r3, #16
 800f5ce:	d103      	bne.n	800f5d8 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	681b      	ldr	r3, [r3, #0]
 800f5d4:	2210      	movs	r2, #16
 800f5d6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800f5de:	4619      	mov	r1, r3
 800f5e0:	6878      	ldr	r0, [r7, #4]
 800f5e2:	f7ff f8c3 	bl	800e76c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f5e6:	e00d      	b.n	800f604 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800f5e8:	6878      	ldr	r0, [r7, #4]
 800f5ea:	f7f5 fe05 	bl	80051f8 <HAL_UART_RxCpltCallback>
}
 800f5ee:	e009      	b.n	800f604 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	681b      	ldr	r3, [r3, #0]
 800f5f4:	8b1b      	ldrh	r3, [r3, #24]
 800f5f6:	b29a      	uxth	r2, r3
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	681b      	ldr	r3, [r3, #0]
 800f5fc:	f042 0208 	orr.w	r2, r2, #8
 800f600:	b292      	uxth	r2, r2
 800f602:	831a      	strh	r2, [r3, #24]
}
 800f604:	bf00      	nop
 800f606:	3758      	adds	r7, #88	; 0x58
 800f608:	46bd      	mov	sp, r7
 800f60a:	bd80      	pop	{r7, pc}

0800f60c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800f60c:	b580      	push	{r7, lr}
 800f60e:	b096      	sub	sp, #88	; 0x58
 800f610:	af00      	add	r7, sp, #0
 800f612:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f61a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f622:	2b22      	cmp	r3, #34	; 0x22
 800f624:	f040 8094 	bne.w	800f750 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f62e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f636:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800f638:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800f63c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800f640:	4013      	ands	r3, r2
 800f642:	b29a      	uxth	r2, r3
 800f644:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f646:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f64c:	1c9a      	adds	r2, r3, #2
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800f658:	b29b      	uxth	r3, r3
 800f65a:	3b01      	subs	r3, #1
 800f65c:	b29a      	uxth	r2, r3
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800f66a:	b29b      	uxth	r3, r3
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d179      	bne.n	800f764 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	681b      	ldr	r3, [r3, #0]
 800f674:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f678:	e853 3f00 	ldrex	r3, [r3]
 800f67c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f67e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f680:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f684:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	461a      	mov	r2, r3
 800f68c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f68e:	643b      	str	r3, [r7, #64]	; 0x40
 800f690:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f692:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f694:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f696:	e841 2300 	strex	r3, r2, [r1]
 800f69a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f69c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d1e6      	bne.n	800f670 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	3308      	adds	r3, #8
 800f6a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6aa:	6a3b      	ldr	r3, [r7, #32]
 800f6ac:	e853 3f00 	ldrex	r3, [r3]
 800f6b0:	61fb      	str	r3, [r7, #28]
   return(result);
 800f6b2:	69fb      	ldr	r3, [r7, #28]
 800f6b4:	f023 0301 	bic.w	r3, r3, #1
 800f6b8:	64bb      	str	r3, [r7, #72]	; 0x48
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	681b      	ldr	r3, [r3, #0]
 800f6be:	3308      	adds	r3, #8
 800f6c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f6c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f6c4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f6c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f6ca:	e841 2300 	strex	r3, r2, [r1]
 800f6ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f6d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d1e5      	bne.n	800f6a2 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	2220      	movs	r2, #32
 800f6da:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	2200      	movs	r2, #0
 800f6e0:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f6e6:	2b01      	cmp	r3, #1
 800f6e8:	d12e      	bne.n	800f748 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	2200      	movs	r2, #0
 800f6ee:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6f6:	68fb      	ldr	r3, [r7, #12]
 800f6f8:	e853 3f00 	ldrex	r3, [r3]
 800f6fc:	60bb      	str	r3, [r7, #8]
   return(result);
 800f6fe:	68bb      	ldr	r3, [r7, #8]
 800f700:	f023 0310 	bic.w	r3, r3, #16
 800f704:	647b      	str	r3, [r7, #68]	; 0x44
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	461a      	mov	r2, r3
 800f70c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f70e:	61bb      	str	r3, [r7, #24]
 800f710:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f712:	6979      	ldr	r1, [r7, #20]
 800f714:	69ba      	ldr	r2, [r7, #24]
 800f716:	e841 2300 	strex	r3, r2, [r1]
 800f71a:	613b      	str	r3, [r7, #16]
   return(result);
 800f71c:	693b      	ldr	r3, [r7, #16]
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d1e6      	bne.n	800f6f0 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	69db      	ldr	r3, [r3, #28]
 800f728:	f003 0310 	and.w	r3, r3, #16
 800f72c:	2b10      	cmp	r3, #16
 800f72e:	d103      	bne.n	800f738 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	681b      	ldr	r3, [r3, #0]
 800f734:	2210      	movs	r2, #16
 800f736:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800f73e:	4619      	mov	r1, r3
 800f740:	6878      	ldr	r0, [r7, #4]
 800f742:	f7ff f813 	bl	800e76c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f746:	e00d      	b.n	800f764 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800f748:	6878      	ldr	r0, [r7, #4]
 800f74a:	f7f5 fd55 	bl	80051f8 <HAL_UART_RxCpltCallback>
}
 800f74e:	e009      	b.n	800f764 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	681b      	ldr	r3, [r3, #0]
 800f754:	8b1b      	ldrh	r3, [r3, #24]
 800f756:	b29a      	uxth	r2, r3
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	f042 0208 	orr.w	r2, r2, #8
 800f760:	b292      	uxth	r2, r2
 800f762:	831a      	strh	r2, [r3, #24]
}
 800f764:	bf00      	nop
 800f766:	3758      	adds	r7, #88	; 0x58
 800f768:	46bd      	mov	sp, r7
 800f76a:	bd80      	pop	{r7, pc}

0800f76c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800f76c:	b480      	push	{r7}
 800f76e:	b083      	sub	sp, #12
 800f770:	af00      	add	r7, sp, #0
 800f772:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800f774:	bf00      	nop
 800f776:	370c      	adds	r7, #12
 800f778:	46bd      	mov	sp, r7
 800f77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f77e:	4770      	bx	lr

0800f780 <atof>:
 800f780:	2100      	movs	r1, #0
 800f782:	f001 bcf7 	b.w	8011174 <strtod>

0800f786 <atoi>:
 800f786:	220a      	movs	r2, #10
 800f788:	2100      	movs	r1, #0
 800f78a:	f001 bd81 	b.w	8011290 <strtol>

0800f78e <atol>:
 800f78e:	220a      	movs	r2, #10
 800f790:	2100      	movs	r1, #0
 800f792:	f001 bd7d 	b.w	8011290 <strtol>
	...

0800f798 <calloc>:
 800f798:	4b02      	ldr	r3, [pc, #8]	; (800f7a4 <calloc+0xc>)
 800f79a:	460a      	mov	r2, r1
 800f79c:	4601      	mov	r1, r0
 800f79e:	6818      	ldr	r0, [r3, #0]
 800f7a0:	f000 b8fe 	b.w	800f9a0 <_calloc_r>
 800f7a4:	20000260 	.word	0x20000260

0800f7a8 <__errno>:
 800f7a8:	4b01      	ldr	r3, [pc, #4]	; (800f7b0 <__errno+0x8>)
 800f7aa:	6818      	ldr	r0, [r3, #0]
 800f7ac:	4770      	bx	lr
 800f7ae:	bf00      	nop
 800f7b0:	20000260 	.word	0x20000260

0800f7b4 <gmtime_r>:
 800f7b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f7b8:	e9d0 6700 	ldrd	r6, r7, [r0]
 800f7bc:	460c      	mov	r4, r1
 800f7be:	4a4f      	ldr	r2, [pc, #316]	; (800f8fc <gmtime_r+0x148>)
 800f7c0:	2300      	movs	r3, #0
 800f7c2:	4630      	mov	r0, r6
 800f7c4:	4639      	mov	r1, r7
 800f7c6:	f7f1 fa5f 	bl	8000c88 <__aeabi_ldivmod>
 800f7ca:	4639      	mov	r1, r7
 800f7cc:	4605      	mov	r5, r0
 800f7ce:	4a4b      	ldr	r2, [pc, #300]	; (800f8fc <gmtime_r+0x148>)
 800f7d0:	4630      	mov	r0, r6
 800f7d2:	2300      	movs	r3, #0
 800f7d4:	f7f1 fa58 	bl	8000c88 <__aeabi_ldivmod>
 800f7d8:	2a00      	cmp	r2, #0
 800f7da:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 800f7de:	bfb7      	itett	lt
 800f7e0:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 800f7e4:	f600 236c 	addwge	r3, r0, #2668	; 0xa6c
 800f7e8:	f600 236b 	addwlt	r3, r0, #2667	; 0xa6b
 800f7ec:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 800f7f0:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 800f7f4:	fbb2 f1f0 	udiv	r1, r2, r0
 800f7f8:	fb00 2211 	mls	r2, r0, r1, r2
 800f7fc:	203c      	movs	r0, #60	; 0x3c
 800f7fe:	60a1      	str	r1, [r4, #8]
 800f800:	fbb2 f1f0 	udiv	r1, r2, r0
 800f804:	fb00 2211 	mls	r2, r0, r1, r2
 800f808:	6061      	str	r1, [r4, #4]
 800f80a:	6022      	str	r2, [r4, #0]
 800f80c:	2107      	movs	r1, #7
 800f80e:	1cda      	adds	r2, r3, #3
 800f810:	fb92 f1f1 	sdiv	r1, r2, r1
 800f814:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800f818:	1a52      	subs	r2, r2, r1
 800f81a:	bf48      	it	mi
 800f81c:	3207      	addmi	r2, #7
 800f81e:	4d38      	ldr	r5, [pc, #224]	; (800f900 <gmtime_r+0x14c>)
 800f820:	4838      	ldr	r0, [pc, #224]	; (800f904 <gmtime_r+0x150>)
 800f822:	61a2      	str	r2, [r4, #24]
 800f824:	2b00      	cmp	r3, #0
 800f826:	bfb7      	itett	lt
 800f828:	f5a3 320e 	sublt.w	r2, r3, #145408	; 0x23800
 800f82c:	fb93 f5f5 	sdivge	r5, r3, r5
 800f830:	f5a2 722c 	sublt.w	r2, r2, #688	; 0x2b0
 800f834:	fb92 f5f5 	sdivlt	r5, r2, r5
 800f838:	fb00 3005 	mla	r0, r0, r5, r3
 800f83c:	f648 62ac 	movw	r2, #36524	; 0x8eac
 800f840:	fbb0 f2f2 	udiv	r2, r0, r2
 800f844:	4402      	add	r2, r0
 800f846:	f240 53b4 	movw	r3, #1460	; 0x5b4
 800f84a:	fbb0 f1f3 	udiv	r1, r0, r3
 800f84e:	1a52      	subs	r2, r2, r1
 800f850:	f240 1c6d 	movw	ip, #365	; 0x16d
 800f854:	492c      	ldr	r1, [pc, #176]	; (800f908 <gmtime_r+0x154>)
 800f856:	fbb0 f1f1 	udiv	r1, r0, r1
 800f85a:	2764      	movs	r7, #100	; 0x64
 800f85c:	1a52      	subs	r2, r2, r1
 800f85e:	fbb2 f1fc 	udiv	r1, r2, ip
 800f862:	fbb2 f3f3 	udiv	r3, r2, r3
 800f866:	fbb1 f6f7 	udiv	r6, r1, r7
 800f86a:	1af3      	subs	r3, r6, r3
 800f86c:	4403      	add	r3, r0
 800f86e:	fb0c 3311 	mls	r3, ip, r1, r3
 800f872:	2299      	movs	r2, #153	; 0x99
 800f874:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 800f878:	f10e 0e02 	add.w	lr, lr, #2
 800f87c:	f103 0c01 	add.w	ip, r3, #1
 800f880:	fbbe f0f2 	udiv	r0, lr, r2
 800f884:	4342      	muls	r2, r0
 800f886:	3202      	adds	r2, #2
 800f888:	f04f 0805 	mov.w	r8, #5
 800f88c:	fbb2 f2f8 	udiv	r2, r2, r8
 800f890:	ebac 0c02 	sub.w	ip, ip, r2
 800f894:	f240 52f9 	movw	r2, #1529	; 0x5f9
 800f898:	4596      	cmp	lr, r2
 800f89a:	bf94      	ite	ls
 800f89c:	2202      	movls	r2, #2
 800f89e:	f06f 0209 	mvnhi.w	r2, #9
 800f8a2:	4410      	add	r0, r2
 800f8a4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800f8a8:	fb02 1505 	mla	r5, r2, r5, r1
 800f8ac:	2801      	cmp	r0, #1
 800f8ae:	bf98      	it	ls
 800f8b0:	3501      	addls	r5, #1
 800f8b2:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 800f8b6:	d30d      	bcc.n	800f8d4 <gmtime_r+0x120>
 800f8b8:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800f8bc:	61e3      	str	r3, [r4, #28]
 800f8be:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 800f8c2:	2300      	movs	r3, #0
 800f8c4:	e9c4 0504 	strd	r0, r5, [r4, #16]
 800f8c8:	f8c4 c00c 	str.w	ip, [r4, #12]
 800f8cc:	6223      	str	r3, [r4, #32]
 800f8ce:	4620      	mov	r0, r4
 800f8d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f8d4:	078a      	lsls	r2, r1, #30
 800f8d6:	d102      	bne.n	800f8de <gmtime_r+0x12a>
 800f8d8:	fb07 1616 	mls	r6, r7, r6, r1
 800f8dc:	b95e      	cbnz	r6, 800f8f6 <gmtime_r+0x142>
 800f8de:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800f8e2:	fbb1 f6f2 	udiv	r6, r1, r2
 800f8e6:	fb02 1216 	mls	r2, r2, r6, r1
 800f8ea:	fab2 f282 	clz	r2, r2
 800f8ee:	0952      	lsrs	r2, r2, #5
 800f8f0:	333b      	adds	r3, #59	; 0x3b
 800f8f2:	4413      	add	r3, r2
 800f8f4:	e7e2      	b.n	800f8bc <gmtime_r+0x108>
 800f8f6:	2201      	movs	r2, #1
 800f8f8:	e7fa      	b.n	800f8f0 <gmtime_r+0x13c>
 800f8fa:	bf00      	nop
 800f8fc:	00015180 	.word	0x00015180
 800f900:	00023ab1 	.word	0x00023ab1
 800f904:	fffdc54f 	.word	0xfffdc54f
 800f908:	00023ab0 	.word	0x00023ab0

0800f90c <__libc_init_array>:
 800f90c:	b570      	push	{r4, r5, r6, lr}
 800f90e:	4d0d      	ldr	r5, [pc, #52]	; (800f944 <__libc_init_array+0x38>)
 800f910:	4c0d      	ldr	r4, [pc, #52]	; (800f948 <__libc_init_array+0x3c>)
 800f912:	1b64      	subs	r4, r4, r5
 800f914:	10a4      	asrs	r4, r4, #2
 800f916:	2600      	movs	r6, #0
 800f918:	42a6      	cmp	r6, r4
 800f91a:	d109      	bne.n	800f930 <__libc_init_array+0x24>
 800f91c:	4d0b      	ldr	r5, [pc, #44]	; (800f94c <__libc_init_array+0x40>)
 800f91e:	4c0c      	ldr	r4, [pc, #48]	; (800f950 <__libc_init_array+0x44>)
 800f920:	f004 fae8 	bl	8013ef4 <_init>
 800f924:	1b64      	subs	r4, r4, r5
 800f926:	10a4      	asrs	r4, r4, #2
 800f928:	2600      	movs	r6, #0
 800f92a:	42a6      	cmp	r6, r4
 800f92c:	d105      	bne.n	800f93a <__libc_init_array+0x2e>
 800f92e:	bd70      	pop	{r4, r5, r6, pc}
 800f930:	f855 3b04 	ldr.w	r3, [r5], #4
 800f934:	4798      	blx	r3
 800f936:	3601      	adds	r6, #1
 800f938:	e7ee      	b.n	800f918 <__libc_init_array+0xc>
 800f93a:	f855 3b04 	ldr.w	r3, [r5], #4
 800f93e:	4798      	blx	r3
 800f940:	3601      	adds	r6, #1
 800f942:	e7f2      	b.n	800f92a <__libc_init_array+0x1e>
 800f944:	08015c8c 	.word	0x08015c8c
 800f948:	08015c8c 	.word	0x08015c8c
 800f94c:	08015c8c 	.word	0x08015c8c
 800f950:	08015c90 	.word	0x08015c90

0800f954 <malloc>:
 800f954:	4b02      	ldr	r3, [pc, #8]	; (800f960 <malloc+0xc>)
 800f956:	4601      	mov	r1, r0
 800f958:	6818      	ldr	r0, [r3, #0]
 800f95a:	f000 b8a3 	b.w	800faa4 <_malloc_r>
 800f95e:	bf00      	nop
 800f960:	20000260 	.word	0x20000260

0800f964 <free>:
 800f964:	4b02      	ldr	r3, [pc, #8]	; (800f970 <free+0xc>)
 800f966:	4601      	mov	r1, r0
 800f968:	6818      	ldr	r0, [r3, #0]
 800f96a:	f000 b82f 	b.w	800f9cc <_free_r>
 800f96e:	bf00      	nop
 800f970:	20000260 	.word	0x20000260

0800f974 <memcpy>:
 800f974:	440a      	add	r2, r1
 800f976:	4291      	cmp	r1, r2
 800f978:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800f97c:	d100      	bne.n	800f980 <memcpy+0xc>
 800f97e:	4770      	bx	lr
 800f980:	b510      	push	{r4, lr}
 800f982:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f986:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f98a:	4291      	cmp	r1, r2
 800f98c:	d1f9      	bne.n	800f982 <memcpy+0xe>
 800f98e:	bd10      	pop	{r4, pc}

0800f990 <memset>:
 800f990:	4402      	add	r2, r0
 800f992:	4603      	mov	r3, r0
 800f994:	4293      	cmp	r3, r2
 800f996:	d100      	bne.n	800f99a <memset+0xa>
 800f998:	4770      	bx	lr
 800f99a:	f803 1b01 	strb.w	r1, [r3], #1
 800f99e:	e7f9      	b.n	800f994 <memset+0x4>

0800f9a0 <_calloc_r>:
 800f9a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f9a2:	fba1 2402 	umull	r2, r4, r1, r2
 800f9a6:	b94c      	cbnz	r4, 800f9bc <_calloc_r+0x1c>
 800f9a8:	4611      	mov	r1, r2
 800f9aa:	9201      	str	r2, [sp, #4]
 800f9ac:	f000 f87a 	bl	800faa4 <_malloc_r>
 800f9b0:	9a01      	ldr	r2, [sp, #4]
 800f9b2:	4605      	mov	r5, r0
 800f9b4:	b930      	cbnz	r0, 800f9c4 <_calloc_r+0x24>
 800f9b6:	4628      	mov	r0, r5
 800f9b8:	b003      	add	sp, #12
 800f9ba:	bd30      	pop	{r4, r5, pc}
 800f9bc:	220c      	movs	r2, #12
 800f9be:	6002      	str	r2, [r0, #0]
 800f9c0:	2500      	movs	r5, #0
 800f9c2:	e7f8      	b.n	800f9b6 <_calloc_r+0x16>
 800f9c4:	4621      	mov	r1, r4
 800f9c6:	f7ff ffe3 	bl	800f990 <memset>
 800f9ca:	e7f4      	b.n	800f9b6 <_calloc_r+0x16>

0800f9cc <_free_r>:
 800f9cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f9ce:	2900      	cmp	r1, #0
 800f9d0:	d044      	beq.n	800fa5c <_free_r+0x90>
 800f9d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f9d6:	9001      	str	r0, [sp, #4]
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	f1a1 0404 	sub.w	r4, r1, #4
 800f9de:	bfb8      	it	lt
 800f9e0:	18e4      	addlt	r4, r4, r3
 800f9e2:	f002 fe9d 	bl	8012720 <__malloc_lock>
 800f9e6:	4a1e      	ldr	r2, [pc, #120]	; (800fa60 <_free_r+0x94>)
 800f9e8:	9801      	ldr	r0, [sp, #4]
 800f9ea:	6813      	ldr	r3, [r2, #0]
 800f9ec:	b933      	cbnz	r3, 800f9fc <_free_r+0x30>
 800f9ee:	6063      	str	r3, [r4, #4]
 800f9f0:	6014      	str	r4, [r2, #0]
 800f9f2:	b003      	add	sp, #12
 800f9f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f9f8:	f002 be98 	b.w	801272c <__malloc_unlock>
 800f9fc:	42a3      	cmp	r3, r4
 800f9fe:	d908      	bls.n	800fa12 <_free_r+0x46>
 800fa00:	6825      	ldr	r5, [r4, #0]
 800fa02:	1961      	adds	r1, r4, r5
 800fa04:	428b      	cmp	r3, r1
 800fa06:	bf01      	itttt	eq
 800fa08:	6819      	ldreq	r1, [r3, #0]
 800fa0a:	685b      	ldreq	r3, [r3, #4]
 800fa0c:	1949      	addeq	r1, r1, r5
 800fa0e:	6021      	streq	r1, [r4, #0]
 800fa10:	e7ed      	b.n	800f9ee <_free_r+0x22>
 800fa12:	461a      	mov	r2, r3
 800fa14:	685b      	ldr	r3, [r3, #4]
 800fa16:	b10b      	cbz	r3, 800fa1c <_free_r+0x50>
 800fa18:	42a3      	cmp	r3, r4
 800fa1a:	d9fa      	bls.n	800fa12 <_free_r+0x46>
 800fa1c:	6811      	ldr	r1, [r2, #0]
 800fa1e:	1855      	adds	r5, r2, r1
 800fa20:	42a5      	cmp	r5, r4
 800fa22:	d10b      	bne.n	800fa3c <_free_r+0x70>
 800fa24:	6824      	ldr	r4, [r4, #0]
 800fa26:	4421      	add	r1, r4
 800fa28:	1854      	adds	r4, r2, r1
 800fa2a:	42a3      	cmp	r3, r4
 800fa2c:	6011      	str	r1, [r2, #0]
 800fa2e:	d1e0      	bne.n	800f9f2 <_free_r+0x26>
 800fa30:	681c      	ldr	r4, [r3, #0]
 800fa32:	685b      	ldr	r3, [r3, #4]
 800fa34:	6053      	str	r3, [r2, #4]
 800fa36:	4421      	add	r1, r4
 800fa38:	6011      	str	r1, [r2, #0]
 800fa3a:	e7da      	b.n	800f9f2 <_free_r+0x26>
 800fa3c:	d902      	bls.n	800fa44 <_free_r+0x78>
 800fa3e:	230c      	movs	r3, #12
 800fa40:	6003      	str	r3, [r0, #0]
 800fa42:	e7d6      	b.n	800f9f2 <_free_r+0x26>
 800fa44:	6825      	ldr	r5, [r4, #0]
 800fa46:	1961      	adds	r1, r4, r5
 800fa48:	428b      	cmp	r3, r1
 800fa4a:	bf04      	itt	eq
 800fa4c:	6819      	ldreq	r1, [r3, #0]
 800fa4e:	685b      	ldreq	r3, [r3, #4]
 800fa50:	6063      	str	r3, [r4, #4]
 800fa52:	bf04      	itt	eq
 800fa54:	1949      	addeq	r1, r1, r5
 800fa56:	6021      	streq	r1, [r4, #0]
 800fa58:	6054      	str	r4, [r2, #4]
 800fa5a:	e7ca      	b.n	800f9f2 <_free_r+0x26>
 800fa5c:	b003      	add	sp, #12
 800fa5e:	bd30      	pop	{r4, r5, pc}
 800fa60:	200038e0 	.word	0x200038e0

0800fa64 <sbrk_aligned>:
 800fa64:	b570      	push	{r4, r5, r6, lr}
 800fa66:	4e0e      	ldr	r6, [pc, #56]	; (800faa0 <sbrk_aligned+0x3c>)
 800fa68:	460c      	mov	r4, r1
 800fa6a:	6831      	ldr	r1, [r6, #0]
 800fa6c:	4605      	mov	r5, r0
 800fa6e:	b911      	cbnz	r1, 800fa76 <sbrk_aligned+0x12>
 800fa70:	f000 fcf6 	bl	8010460 <_sbrk_r>
 800fa74:	6030      	str	r0, [r6, #0]
 800fa76:	4621      	mov	r1, r4
 800fa78:	4628      	mov	r0, r5
 800fa7a:	f000 fcf1 	bl	8010460 <_sbrk_r>
 800fa7e:	1c43      	adds	r3, r0, #1
 800fa80:	d00a      	beq.n	800fa98 <sbrk_aligned+0x34>
 800fa82:	1cc4      	adds	r4, r0, #3
 800fa84:	f024 0403 	bic.w	r4, r4, #3
 800fa88:	42a0      	cmp	r0, r4
 800fa8a:	d007      	beq.n	800fa9c <sbrk_aligned+0x38>
 800fa8c:	1a21      	subs	r1, r4, r0
 800fa8e:	4628      	mov	r0, r5
 800fa90:	f000 fce6 	bl	8010460 <_sbrk_r>
 800fa94:	3001      	adds	r0, #1
 800fa96:	d101      	bne.n	800fa9c <sbrk_aligned+0x38>
 800fa98:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800fa9c:	4620      	mov	r0, r4
 800fa9e:	bd70      	pop	{r4, r5, r6, pc}
 800faa0:	200038e4 	.word	0x200038e4

0800faa4 <_malloc_r>:
 800faa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800faa8:	1ccd      	adds	r5, r1, #3
 800faaa:	f025 0503 	bic.w	r5, r5, #3
 800faae:	3508      	adds	r5, #8
 800fab0:	2d0c      	cmp	r5, #12
 800fab2:	bf38      	it	cc
 800fab4:	250c      	movcc	r5, #12
 800fab6:	2d00      	cmp	r5, #0
 800fab8:	4607      	mov	r7, r0
 800faba:	db01      	blt.n	800fac0 <_malloc_r+0x1c>
 800fabc:	42a9      	cmp	r1, r5
 800fabe:	d905      	bls.n	800facc <_malloc_r+0x28>
 800fac0:	230c      	movs	r3, #12
 800fac2:	603b      	str	r3, [r7, #0]
 800fac4:	2600      	movs	r6, #0
 800fac6:	4630      	mov	r0, r6
 800fac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800facc:	4e2e      	ldr	r6, [pc, #184]	; (800fb88 <_malloc_r+0xe4>)
 800face:	f002 fe27 	bl	8012720 <__malloc_lock>
 800fad2:	6833      	ldr	r3, [r6, #0]
 800fad4:	461c      	mov	r4, r3
 800fad6:	bb34      	cbnz	r4, 800fb26 <_malloc_r+0x82>
 800fad8:	4629      	mov	r1, r5
 800fada:	4638      	mov	r0, r7
 800fadc:	f7ff ffc2 	bl	800fa64 <sbrk_aligned>
 800fae0:	1c43      	adds	r3, r0, #1
 800fae2:	4604      	mov	r4, r0
 800fae4:	d14d      	bne.n	800fb82 <_malloc_r+0xde>
 800fae6:	6834      	ldr	r4, [r6, #0]
 800fae8:	4626      	mov	r6, r4
 800faea:	2e00      	cmp	r6, #0
 800faec:	d140      	bne.n	800fb70 <_malloc_r+0xcc>
 800faee:	6823      	ldr	r3, [r4, #0]
 800faf0:	4631      	mov	r1, r6
 800faf2:	4638      	mov	r0, r7
 800faf4:	eb04 0803 	add.w	r8, r4, r3
 800faf8:	f000 fcb2 	bl	8010460 <_sbrk_r>
 800fafc:	4580      	cmp	r8, r0
 800fafe:	d13a      	bne.n	800fb76 <_malloc_r+0xd2>
 800fb00:	6821      	ldr	r1, [r4, #0]
 800fb02:	3503      	adds	r5, #3
 800fb04:	1a6d      	subs	r5, r5, r1
 800fb06:	f025 0503 	bic.w	r5, r5, #3
 800fb0a:	3508      	adds	r5, #8
 800fb0c:	2d0c      	cmp	r5, #12
 800fb0e:	bf38      	it	cc
 800fb10:	250c      	movcc	r5, #12
 800fb12:	4629      	mov	r1, r5
 800fb14:	4638      	mov	r0, r7
 800fb16:	f7ff ffa5 	bl	800fa64 <sbrk_aligned>
 800fb1a:	3001      	adds	r0, #1
 800fb1c:	d02b      	beq.n	800fb76 <_malloc_r+0xd2>
 800fb1e:	6823      	ldr	r3, [r4, #0]
 800fb20:	442b      	add	r3, r5
 800fb22:	6023      	str	r3, [r4, #0]
 800fb24:	e00e      	b.n	800fb44 <_malloc_r+0xa0>
 800fb26:	6822      	ldr	r2, [r4, #0]
 800fb28:	1b52      	subs	r2, r2, r5
 800fb2a:	d41e      	bmi.n	800fb6a <_malloc_r+0xc6>
 800fb2c:	2a0b      	cmp	r2, #11
 800fb2e:	d916      	bls.n	800fb5e <_malloc_r+0xba>
 800fb30:	1961      	adds	r1, r4, r5
 800fb32:	42a3      	cmp	r3, r4
 800fb34:	6025      	str	r5, [r4, #0]
 800fb36:	bf18      	it	ne
 800fb38:	6059      	strne	r1, [r3, #4]
 800fb3a:	6863      	ldr	r3, [r4, #4]
 800fb3c:	bf08      	it	eq
 800fb3e:	6031      	streq	r1, [r6, #0]
 800fb40:	5162      	str	r2, [r4, r5]
 800fb42:	604b      	str	r3, [r1, #4]
 800fb44:	4638      	mov	r0, r7
 800fb46:	f104 060b 	add.w	r6, r4, #11
 800fb4a:	f002 fdef 	bl	801272c <__malloc_unlock>
 800fb4e:	f026 0607 	bic.w	r6, r6, #7
 800fb52:	1d23      	adds	r3, r4, #4
 800fb54:	1af2      	subs	r2, r6, r3
 800fb56:	d0b6      	beq.n	800fac6 <_malloc_r+0x22>
 800fb58:	1b9b      	subs	r3, r3, r6
 800fb5a:	50a3      	str	r3, [r4, r2]
 800fb5c:	e7b3      	b.n	800fac6 <_malloc_r+0x22>
 800fb5e:	6862      	ldr	r2, [r4, #4]
 800fb60:	42a3      	cmp	r3, r4
 800fb62:	bf0c      	ite	eq
 800fb64:	6032      	streq	r2, [r6, #0]
 800fb66:	605a      	strne	r2, [r3, #4]
 800fb68:	e7ec      	b.n	800fb44 <_malloc_r+0xa0>
 800fb6a:	4623      	mov	r3, r4
 800fb6c:	6864      	ldr	r4, [r4, #4]
 800fb6e:	e7b2      	b.n	800fad6 <_malloc_r+0x32>
 800fb70:	4634      	mov	r4, r6
 800fb72:	6876      	ldr	r6, [r6, #4]
 800fb74:	e7b9      	b.n	800faea <_malloc_r+0x46>
 800fb76:	230c      	movs	r3, #12
 800fb78:	603b      	str	r3, [r7, #0]
 800fb7a:	4638      	mov	r0, r7
 800fb7c:	f002 fdd6 	bl	801272c <__malloc_unlock>
 800fb80:	e7a1      	b.n	800fac6 <_malloc_r+0x22>
 800fb82:	6025      	str	r5, [r4, #0]
 800fb84:	e7de      	b.n	800fb44 <_malloc_r+0xa0>
 800fb86:	bf00      	nop
 800fb88:	200038e0 	.word	0x200038e0

0800fb8c <__cvt>:
 800fb8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fb90:	ec55 4b10 	vmov	r4, r5, d0
 800fb94:	2d00      	cmp	r5, #0
 800fb96:	460e      	mov	r6, r1
 800fb98:	4619      	mov	r1, r3
 800fb9a:	462b      	mov	r3, r5
 800fb9c:	bfbb      	ittet	lt
 800fb9e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800fba2:	461d      	movlt	r5, r3
 800fba4:	2300      	movge	r3, #0
 800fba6:	232d      	movlt	r3, #45	; 0x2d
 800fba8:	700b      	strb	r3, [r1, #0]
 800fbaa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fbac:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800fbb0:	4691      	mov	r9, r2
 800fbb2:	f023 0820 	bic.w	r8, r3, #32
 800fbb6:	bfbc      	itt	lt
 800fbb8:	4622      	movlt	r2, r4
 800fbba:	4614      	movlt	r4, r2
 800fbbc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800fbc0:	d005      	beq.n	800fbce <__cvt+0x42>
 800fbc2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800fbc6:	d100      	bne.n	800fbca <__cvt+0x3e>
 800fbc8:	3601      	adds	r6, #1
 800fbca:	2102      	movs	r1, #2
 800fbcc:	e000      	b.n	800fbd0 <__cvt+0x44>
 800fbce:	2103      	movs	r1, #3
 800fbd0:	ab03      	add	r3, sp, #12
 800fbd2:	9301      	str	r3, [sp, #4]
 800fbd4:	ab02      	add	r3, sp, #8
 800fbd6:	9300      	str	r3, [sp, #0]
 800fbd8:	ec45 4b10 	vmov	d0, r4, r5
 800fbdc:	4653      	mov	r3, sl
 800fbde:	4632      	mov	r2, r6
 800fbe0:	f001 fc26 	bl	8011430 <_dtoa_r>
 800fbe4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800fbe8:	4607      	mov	r7, r0
 800fbea:	d102      	bne.n	800fbf2 <__cvt+0x66>
 800fbec:	f019 0f01 	tst.w	r9, #1
 800fbf0:	d022      	beq.n	800fc38 <__cvt+0xac>
 800fbf2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800fbf6:	eb07 0906 	add.w	r9, r7, r6
 800fbfa:	d110      	bne.n	800fc1e <__cvt+0x92>
 800fbfc:	783b      	ldrb	r3, [r7, #0]
 800fbfe:	2b30      	cmp	r3, #48	; 0x30
 800fc00:	d10a      	bne.n	800fc18 <__cvt+0x8c>
 800fc02:	2200      	movs	r2, #0
 800fc04:	2300      	movs	r3, #0
 800fc06:	4620      	mov	r0, r4
 800fc08:	4629      	mov	r1, r5
 800fc0a:	f7f0 ff5d 	bl	8000ac8 <__aeabi_dcmpeq>
 800fc0e:	b918      	cbnz	r0, 800fc18 <__cvt+0x8c>
 800fc10:	f1c6 0601 	rsb	r6, r6, #1
 800fc14:	f8ca 6000 	str.w	r6, [sl]
 800fc18:	f8da 3000 	ldr.w	r3, [sl]
 800fc1c:	4499      	add	r9, r3
 800fc1e:	2200      	movs	r2, #0
 800fc20:	2300      	movs	r3, #0
 800fc22:	4620      	mov	r0, r4
 800fc24:	4629      	mov	r1, r5
 800fc26:	f7f0 ff4f 	bl	8000ac8 <__aeabi_dcmpeq>
 800fc2a:	b108      	cbz	r0, 800fc30 <__cvt+0xa4>
 800fc2c:	f8cd 900c 	str.w	r9, [sp, #12]
 800fc30:	2230      	movs	r2, #48	; 0x30
 800fc32:	9b03      	ldr	r3, [sp, #12]
 800fc34:	454b      	cmp	r3, r9
 800fc36:	d307      	bcc.n	800fc48 <__cvt+0xbc>
 800fc38:	9b03      	ldr	r3, [sp, #12]
 800fc3a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fc3c:	1bdb      	subs	r3, r3, r7
 800fc3e:	4638      	mov	r0, r7
 800fc40:	6013      	str	r3, [r2, #0]
 800fc42:	b004      	add	sp, #16
 800fc44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc48:	1c59      	adds	r1, r3, #1
 800fc4a:	9103      	str	r1, [sp, #12]
 800fc4c:	701a      	strb	r2, [r3, #0]
 800fc4e:	e7f0      	b.n	800fc32 <__cvt+0xa6>

0800fc50 <__exponent>:
 800fc50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fc52:	4603      	mov	r3, r0
 800fc54:	2900      	cmp	r1, #0
 800fc56:	bfb8      	it	lt
 800fc58:	4249      	neglt	r1, r1
 800fc5a:	f803 2b02 	strb.w	r2, [r3], #2
 800fc5e:	bfb4      	ite	lt
 800fc60:	222d      	movlt	r2, #45	; 0x2d
 800fc62:	222b      	movge	r2, #43	; 0x2b
 800fc64:	2909      	cmp	r1, #9
 800fc66:	7042      	strb	r2, [r0, #1]
 800fc68:	dd2a      	ble.n	800fcc0 <__exponent+0x70>
 800fc6a:	f10d 0407 	add.w	r4, sp, #7
 800fc6e:	46a4      	mov	ip, r4
 800fc70:	270a      	movs	r7, #10
 800fc72:	46a6      	mov	lr, r4
 800fc74:	460a      	mov	r2, r1
 800fc76:	fb91 f6f7 	sdiv	r6, r1, r7
 800fc7a:	fb07 1516 	mls	r5, r7, r6, r1
 800fc7e:	3530      	adds	r5, #48	; 0x30
 800fc80:	2a63      	cmp	r2, #99	; 0x63
 800fc82:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800fc86:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800fc8a:	4631      	mov	r1, r6
 800fc8c:	dcf1      	bgt.n	800fc72 <__exponent+0x22>
 800fc8e:	3130      	adds	r1, #48	; 0x30
 800fc90:	f1ae 0502 	sub.w	r5, lr, #2
 800fc94:	f804 1c01 	strb.w	r1, [r4, #-1]
 800fc98:	1c44      	adds	r4, r0, #1
 800fc9a:	4629      	mov	r1, r5
 800fc9c:	4561      	cmp	r1, ip
 800fc9e:	d30a      	bcc.n	800fcb6 <__exponent+0x66>
 800fca0:	f10d 0209 	add.w	r2, sp, #9
 800fca4:	eba2 020e 	sub.w	r2, r2, lr
 800fca8:	4565      	cmp	r5, ip
 800fcaa:	bf88      	it	hi
 800fcac:	2200      	movhi	r2, #0
 800fcae:	4413      	add	r3, r2
 800fcb0:	1a18      	subs	r0, r3, r0
 800fcb2:	b003      	add	sp, #12
 800fcb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fcb6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fcba:	f804 2f01 	strb.w	r2, [r4, #1]!
 800fcbe:	e7ed      	b.n	800fc9c <__exponent+0x4c>
 800fcc0:	2330      	movs	r3, #48	; 0x30
 800fcc2:	3130      	adds	r1, #48	; 0x30
 800fcc4:	7083      	strb	r3, [r0, #2]
 800fcc6:	70c1      	strb	r1, [r0, #3]
 800fcc8:	1d03      	adds	r3, r0, #4
 800fcca:	e7f1      	b.n	800fcb0 <__exponent+0x60>

0800fccc <_printf_float>:
 800fccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcd0:	ed2d 8b02 	vpush	{d8}
 800fcd4:	b08d      	sub	sp, #52	; 0x34
 800fcd6:	460c      	mov	r4, r1
 800fcd8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800fcdc:	4616      	mov	r6, r2
 800fcde:	461f      	mov	r7, r3
 800fce0:	4605      	mov	r5, r0
 800fce2:	f002 fd03 	bl	80126ec <_localeconv_r>
 800fce6:	f8d0 a000 	ldr.w	sl, [r0]
 800fcea:	4650      	mov	r0, sl
 800fcec:	f7f0 fa70 	bl	80001d0 <strlen>
 800fcf0:	2300      	movs	r3, #0
 800fcf2:	930a      	str	r3, [sp, #40]	; 0x28
 800fcf4:	6823      	ldr	r3, [r4, #0]
 800fcf6:	9305      	str	r3, [sp, #20]
 800fcf8:	f8d8 3000 	ldr.w	r3, [r8]
 800fcfc:	f894 b018 	ldrb.w	fp, [r4, #24]
 800fd00:	3307      	adds	r3, #7
 800fd02:	f023 0307 	bic.w	r3, r3, #7
 800fd06:	f103 0208 	add.w	r2, r3, #8
 800fd0a:	f8c8 2000 	str.w	r2, [r8]
 800fd0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd12:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800fd16:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800fd1a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800fd1e:	9307      	str	r3, [sp, #28]
 800fd20:	f8cd 8018 	str.w	r8, [sp, #24]
 800fd24:	ee08 0a10 	vmov	s16, r0
 800fd28:	4b9f      	ldr	r3, [pc, #636]	; (800ffa8 <_printf_float+0x2dc>)
 800fd2a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fd2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fd32:	f7f0 fefb 	bl	8000b2c <__aeabi_dcmpun>
 800fd36:	bb88      	cbnz	r0, 800fd9c <_printf_float+0xd0>
 800fd38:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fd3c:	4b9a      	ldr	r3, [pc, #616]	; (800ffa8 <_printf_float+0x2dc>)
 800fd3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fd42:	f7f0 fed5 	bl	8000af0 <__aeabi_dcmple>
 800fd46:	bb48      	cbnz	r0, 800fd9c <_printf_float+0xd0>
 800fd48:	2200      	movs	r2, #0
 800fd4a:	2300      	movs	r3, #0
 800fd4c:	4640      	mov	r0, r8
 800fd4e:	4649      	mov	r1, r9
 800fd50:	f7f0 fec4 	bl	8000adc <__aeabi_dcmplt>
 800fd54:	b110      	cbz	r0, 800fd5c <_printf_float+0x90>
 800fd56:	232d      	movs	r3, #45	; 0x2d
 800fd58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fd5c:	4b93      	ldr	r3, [pc, #588]	; (800ffac <_printf_float+0x2e0>)
 800fd5e:	4894      	ldr	r0, [pc, #592]	; (800ffb0 <_printf_float+0x2e4>)
 800fd60:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800fd64:	bf94      	ite	ls
 800fd66:	4698      	movls	r8, r3
 800fd68:	4680      	movhi	r8, r0
 800fd6a:	2303      	movs	r3, #3
 800fd6c:	6123      	str	r3, [r4, #16]
 800fd6e:	9b05      	ldr	r3, [sp, #20]
 800fd70:	f023 0204 	bic.w	r2, r3, #4
 800fd74:	6022      	str	r2, [r4, #0]
 800fd76:	f04f 0900 	mov.w	r9, #0
 800fd7a:	9700      	str	r7, [sp, #0]
 800fd7c:	4633      	mov	r3, r6
 800fd7e:	aa0b      	add	r2, sp, #44	; 0x2c
 800fd80:	4621      	mov	r1, r4
 800fd82:	4628      	mov	r0, r5
 800fd84:	f000 f9d8 	bl	8010138 <_printf_common>
 800fd88:	3001      	adds	r0, #1
 800fd8a:	f040 8090 	bne.w	800feae <_printf_float+0x1e2>
 800fd8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fd92:	b00d      	add	sp, #52	; 0x34
 800fd94:	ecbd 8b02 	vpop	{d8}
 800fd98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd9c:	4642      	mov	r2, r8
 800fd9e:	464b      	mov	r3, r9
 800fda0:	4640      	mov	r0, r8
 800fda2:	4649      	mov	r1, r9
 800fda4:	f7f0 fec2 	bl	8000b2c <__aeabi_dcmpun>
 800fda8:	b140      	cbz	r0, 800fdbc <_printf_float+0xf0>
 800fdaa:	464b      	mov	r3, r9
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	bfbc      	itt	lt
 800fdb0:	232d      	movlt	r3, #45	; 0x2d
 800fdb2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800fdb6:	487f      	ldr	r0, [pc, #508]	; (800ffb4 <_printf_float+0x2e8>)
 800fdb8:	4b7f      	ldr	r3, [pc, #508]	; (800ffb8 <_printf_float+0x2ec>)
 800fdba:	e7d1      	b.n	800fd60 <_printf_float+0x94>
 800fdbc:	6863      	ldr	r3, [r4, #4]
 800fdbe:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800fdc2:	9206      	str	r2, [sp, #24]
 800fdc4:	1c5a      	adds	r2, r3, #1
 800fdc6:	d13f      	bne.n	800fe48 <_printf_float+0x17c>
 800fdc8:	2306      	movs	r3, #6
 800fdca:	6063      	str	r3, [r4, #4]
 800fdcc:	9b05      	ldr	r3, [sp, #20]
 800fdce:	6861      	ldr	r1, [r4, #4]
 800fdd0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800fdd4:	2300      	movs	r3, #0
 800fdd6:	9303      	str	r3, [sp, #12]
 800fdd8:	ab0a      	add	r3, sp, #40	; 0x28
 800fdda:	e9cd b301 	strd	fp, r3, [sp, #4]
 800fdde:	ab09      	add	r3, sp, #36	; 0x24
 800fde0:	ec49 8b10 	vmov	d0, r8, r9
 800fde4:	9300      	str	r3, [sp, #0]
 800fde6:	6022      	str	r2, [r4, #0]
 800fde8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800fdec:	4628      	mov	r0, r5
 800fdee:	f7ff fecd 	bl	800fb8c <__cvt>
 800fdf2:	9b06      	ldr	r3, [sp, #24]
 800fdf4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fdf6:	2b47      	cmp	r3, #71	; 0x47
 800fdf8:	4680      	mov	r8, r0
 800fdfa:	d108      	bne.n	800fe0e <_printf_float+0x142>
 800fdfc:	1cc8      	adds	r0, r1, #3
 800fdfe:	db02      	blt.n	800fe06 <_printf_float+0x13a>
 800fe00:	6863      	ldr	r3, [r4, #4]
 800fe02:	4299      	cmp	r1, r3
 800fe04:	dd41      	ble.n	800fe8a <_printf_float+0x1be>
 800fe06:	f1ab 0b02 	sub.w	fp, fp, #2
 800fe0a:	fa5f fb8b 	uxtb.w	fp, fp
 800fe0e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800fe12:	d820      	bhi.n	800fe56 <_printf_float+0x18a>
 800fe14:	3901      	subs	r1, #1
 800fe16:	465a      	mov	r2, fp
 800fe18:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800fe1c:	9109      	str	r1, [sp, #36]	; 0x24
 800fe1e:	f7ff ff17 	bl	800fc50 <__exponent>
 800fe22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fe24:	1813      	adds	r3, r2, r0
 800fe26:	2a01      	cmp	r2, #1
 800fe28:	4681      	mov	r9, r0
 800fe2a:	6123      	str	r3, [r4, #16]
 800fe2c:	dc02      	bgt.n	800fe34 <_printf_float+0x168>
 800fe2e:	6822      	ldr	r2, [r4, #0]
 800fe30:	07d2      	lsls	r2, r2, #31
 800fe32:	d501      	bpl.n	800fe38 <_printf_float+0x16c>
 800fe34:	3301      	adds	r3, #1
 800fe36:	6123      	str	r3, [r4, #16]
 800fe38:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d09c      	beq.n	800fd7a <_printf_float+0xae>
 800fe40:	232d      	movs	r3, #45	; 0x2d
 800fe42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fe46:	e798      	b.n	800fd7a <_printf_float+0xae>
 800fe48:	9a06      	ldr	r2, [sp, #24]
 800fe4a:	2a47      	cmp	r2, #71	; 0x47
 800fe4c:	d1be      	bne.n	800fdcc <_printf_float+0x100>
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d1bc      	bne.n	800fdcc <_printf_float+0x100>
 800fe52:	2301      	movs	r3, #1
 800fe54:	e7b9      	b.n	800fdca <_printf_float+0xfe>
 800fe56:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800fe5a:	d118      	bne.n	800fe8e <_printf_float+0x1c2>
 800fe5c:	2900      	cmp	r1, #0
 800fe5e:	6863      	ldr	r3, [r4, #4]
 800fe60:	dd0b      	ble.n	800fe7a <_printf_float+0x1ae>
 800fe62:	6121      	str	r1, [r4, #16]
 800fe64:	b913      	cbnz	r3, 800fe6c <_printf_float+0x1a0>
 800fe66:	6822      	ldr	r2, [r4, #0]
 800fe68:	07d0      	lsls	r0, r2, #31
 800fe6a:	d502      	bpl.n	800fe72 <_printf_float+0x1a6>
 800fe6c:	3301      	adds	r3, #1
 800fe6e:	440b      	add	r3, r1
 800fe70:	6123      	str	r3, [r4, #16]
 800fe72:	65a1      	str	r1, [r4, #88]	; 0x58
 800fe74:	f04f 0900 	mov.w	r9, #0
 800fe78:	e7de      	b.n	800fe38 <_printf_float+0x16c>
 800fe7a:	b913      	cbnz	r3, 800fe82 <_printf_float+0x1b6>
 800fe7c:	6822      	ldr	r2, [r4, #0]
 800fe7e:	07d2      	lsls	r2, r2, #31
 800fe80:	d501      	bpl.n	800fe86 <_printf_float+0x1ba>
 800fe82:	3302      	adds	r3, #2
 800fe84:	e7f4      	b.n	800fe70 <_printf_float+0x1a4>
 800fe86:	2301      	movs	r3, #1
 800fe88:	e7f2      	b.n	800fe70 <_printf_float+0x1a4>
 800fe8a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800fe8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fe90:	4299      	cmp	r1, r3
 800fe92:	db05      	blt.n	800fea0 <_printf_float+0x1d4>
 800fe94:	6823      	ldr	r3, [r4, #0]
 800fe96:	6121      	str	r1, [r4, #16]
 800fe98:	07d8      	lsls	r0, r3, #31
 800fe9a:	d5ea      	bpl.n	800fe72 <_printf_float+0x1a6>
 800fe9c:	1c4b      	adds	r3, r1, #1
 800fe9e:	e7e7      	b.n	800fe70 <_printf_float+0x1a4>
 800fea0:	2900      	cmp	r1, #0
 800fea2:	bfd4      	ite	le
 800fea4:	f1c1 0202 	rsble	r2, r1, #2
 800fea8:	2201      	movgt	r2, #1
 800feaa:	4413      	add	r3, r2
 800feac:	e7e0      	b.n	800fe70 <_printf_float+0x1a4>
 800feae:	6823      	ldr	r3, [r4, #0]
 800feb0:	055a      	lsls	r2, r3, #21
 800feb2:	d407      	bmi.n	800fec4 <_printf_float+0x1f8>
 800feb4:	6923      	ldr	r3, [r4, #16]
 800feb6:	4642      	mov	r2, r8
 800feb8:	4631      	mov	r1, r6
 800feba:	4628      	mov	r0, r5
 800febc:	47b8      	blx	r7
 800febe:	3001      	adds	r0, #1
 800fec0:	d12c      	bne.n	800ff1c <_printf_float+0x250>
 800fec2:	e764      	b.n	800fd8e <_printf_float+0xc2>
 800fec4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800fec8:	f240 80e0 	bls.w	801008c <_printf_float+0x3c0>
 800fecc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800fed0:	2200      	movs	r2, #0
 800fed2:	2300      	movs	r3, #0
 800fed4:	f7f0 fdf8 	bl	8000ac8 <__aeabi_dcmpeq>
 800fed8:	2800      	cmp	r0, #0
 800feda:	d034      	beq.n	800ff46 <_printf_float+0x27a>
 800fedc:	4a37      	ldr	r2, [pc, #220]	; (800ffbc <_printf_float+0x2f0>)
 800fede:	2301      	movs	r3, #1
 800fee0:	4631      	mov	r1, r6
 800fee2:	4628      	mov	r0, r5
 800fee4:	47b8      	blx	r7
 800fee6:	3001      	adds	r0, #1
 800fee8:	f43f af51 	beq.w	800fd8e <_printf_float+0xc2>
 800feec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fef0:	429a      	cmp	r2, r3
 800fef2:	db02      	blt.n	800fefa <_printf_float+0x22e>
 800fef4:	6823      	ldr	r3, [r4, #0]
 800fef6:	07d8      	lsls	r0, r3, #31
 800fef8:	d510      	bpl.n	800ff1c <_printf_float+0x250>
 800fefa:	ee18 3a10 	vmov	r3, s16
 800fefe:	4652      	mov	r2, sl
 800ff00:	4631      	mov	r1, r6
 800ff02:	4628      	mov	r0, r5
 800ff04:	47b8      	blx	r7
 800ff06:	3001      	adds	r0, #1
 800ff08:	f43f af41 	beq.w	800fd8e <_printf_float+0xc2>
 800ff0c:	f04f 0800 	mov.w	r8, #0
 800ff10:	f104 091a 	add.w	r9, r4, #26
 800ff14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ff16:	3b01      	subs	r3, #1
 800ff18:	4543      	cmp	r3, r8
 800ff1a:	dc09      	bgt.n	800ff30 <_printf_float+0x264>
 800ff1c:	6823      	ldr	r3, [r4, #0]
 800ff1e:	079b      	lsls	r3, r3, #30
 800ff20:	f100 8105 	bmi.w	801012e <_printf_float+0x462>
 800ff24:	68e0      	ldr	r0, [r4, #12]
 800ff26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ff28:	4298      	cmp	r0, r3
 800ff2a:	bfb8      	it	lt
 800ff2c:	4618      	movlt	r0, r3
 800ff2e:	e730      	b.n	800fd92 <_printf_float+0xc6>
 800ff30:	2301      	movs	r3, #1
 800ff32:	464a      	mov	r2, r9
 800ff34:	4631      	mov	r1, r6
 800ff36:	4628      	mov	r0, r5
 800ff38:	47b8      	blx	r7
 800ff3a:	3001      	adds	r0, #1
 800ff3c:	f43f af27 	beq.w	800fd8e <_printf_float+0xc2>
 800ff40:	f108 0801 	add.w	r8, r8, #1
 800ff44:	e7e6      	b.n	800ff14 <_printf_float+0x248>
 800ff46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	dc39      	bgt.n	800ffc0 <_printf_float+0x2f4>
 800ff4c:	4a1b      	ldr	r2, [pc, #108]	; (800ffbc <_printf_float+0x2f0>)
 800ff4e:	2301      	movs	r3, #1
 800ff50:	4631      	mov	r1, r6
 800ff52:	4628      	mov	r0, r5
 800ff54:	47b8      	blx	r7
 800ff56:	3001      	adds	r0, #1
 800ff58:	f43f af19 	beq.w	800fd8e <_printf_float+0xc2>
 800ff5c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ff60:	4313      	orrs	r3, r2
 800ff62:	d102      	bne.n	800ff6a <_printf_float+0x29e>
 800ff64:	6823      	ldr	r3, [r4, #0]
 800ff66:	07d9      	lsls	r1, r3, #31
 800ff68:	d5d8      	bpl.n	800ff1c <_printf_float+0x250>
 800ff6a:	ee18 3a10 	vmov	r3, s16
 800ff6e:	4652      	mov	r2, sl
 800ff70:	4631      	mov	r1, r6
 800ff72:	4628      	mov	r0, r5
 800ff74:	47b8      	blx	r7
 800ff76:	3001      	adds	r0, #1
 800ff78:	f43f af09 	beq.w	800fd8e <_printf_float+0xc2>
 800ff7c:	f04f 0900 	mov.w	r9, #0
 800ff80:	f104 0a1a 	add.w	sl, r4, #26
 800ff84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff86:	425b      	negs	r3, r3
 800ff88:	454b      	cmp	r3, r9
 800ff8a:	dc01      	bgt.n	800ff90 <_printf_float+0x2c4>
 800ff8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ff8e:	e792      	b.n	800feb6 <_printf_float+0x1ea>
 800ff90:	2301      	movs	r3, #1
 800ff92:	4652      	mov	r2, sl
 800ff94:	4631      	mov	r1, r6
 800ff96:	4628      	mov	r0, r5
 800ff98:	47b8      	blx	r7
 800ff9a:	3001      	adds	r0, #1
 800ff9c:	f43f aef7 	beq.w	800fd8e <_printf_float+0xc2>
 800ffa0:	f109 0901 	add.w	r9, r9, #1
 800ffa4:	e7ee      	b.n	800ff84 <_printf_float+0x2b8>
 800ffa6:	bf00      	nop
 800ffa8:	7fefffff 	.word	0x7fefffff
 800ffac:	080158ec 	.word	0x080158ec
 800ffb0:	080158f0 	.word	0x080158f0
 800ffb4:	080158f8 	.word	0x080158f8
 800ffb8:	080158f4 	.word	0x080158f4
 800ffbc:	080158fc 	.word	0x080158fc
 800ffc0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ffc2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ffc4:	429a      	cmp	r2, r3
 800ffc6:	bfa8      	it	ge
 800ffc8:	461a      	movge	r2, r3
 800ffca:	2a00      	cmp	r2, #0
 800ffcc:	4691      	mov	r9, r2
 800ffce:	dc37      	bgt.n	8010040 <_printf_float+0x374>
 800ffd0:	f04f 0b00 	mov.w	fp, #0
 800ffd4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ffd8:	f104 021a 	add.w	r2, r4, #26
 800ffdc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ffde:	9305      	str	r3, [sp, #20]
 800ffe0:	eba3 0309 	sub.w	r3, r3, r9
 800ffe4:	455b      	cmp	r3, fp
 800ffe6:	dc33      	bgt.n	8010050 <_printf_float+0x384>
 800ffe8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ffec:	429a      	cmp	r2, r3
 800ffee:	db3b      	blt.n	8010068 <_printf_float+0x39c>
 800fff0:	6823      	ldr	r3, [r4, #0]
 800fff2:	07da      	lsls	r2, r3, #31
 800fff4:	d438      	bmi.n	8010068 <_printf_float+0x39c>
 800fff6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fff8:	9a05      	ldr	r2, [sp, #20]
 800fffa:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fffc:	1a9a      	subs	r2, r3, r2
 800fffe:	eba3 0901 	sub.w	r9, r3, r1
 8010002:	4591      	cmp	r9, r2
 8010004:	bfa8      	it	ge
 8010006:	4691      	movge	r9, r2
 8010008:	f1b9 0f00 	cmp.w	r9, #0
 801000c:	dc35      	bgt.n	801007a <_printf_float+0x3ae>
 801000e:	f04f 0800 	mov.w	r8, #0
 8010012:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010016:	f104 0a1a 	add.w	sl, r4, #26
 801001a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801001e:	1a9b      	subs	r3, r3, r2
 8010020:	eba3 0309 	sub.w	r3, r3, r9
 8010024:	4543      	cmp	r3, r8
 8010026:	f77f af79 	ble.w	800ff1c <_printf_float+0x250>
 801002a:	2301      	movs	r3, #1
 801002c:	4652      	mov	r2, sl
 801002e:	4631      	mov	r1, r6
 8010030:	4628      	mov	r0, r5
 8010032:	47b8      	blx	r7
 8010034:	3001      	adds	r0, #1
 8010036:	f43f aeaa 	beq.w	800fd8e <_printf_float+0xc2>
 801003a:	f108 0801 	add.w	r8, r8, #1
 801003e:	e7ec      	b.n	801001a <_printf_float+0x34e>
 8010040:	4613      	mov	r3, r2
 8010042:	4631      	mov	r1, r6
 8010044:	4642      	mov	r2, r8
 8010046:	4628      	mov	r0, r5
 8010048:	47b8      	blx	r7
 801004a:	3001      	adds	r0, #1
 801004c:	d1c0      	bne.n	800ffd0 <_printf_float+0x304>
 801004e:	e69e      	b.n	800fd8e <_printf_float+0xc2>
 8010050:	2301      	movs	r3, #1
 8010052:	4631      	mov	r1, r6
 8010054:	4628      	mov	r0, r5
 8010056:	9205      	str	r2, [sp, #20]
 8010058:	47b8      	blx	r7
 801005a:	3001      	adds	r0, #1
 801005c:	f43f ae97 	beq.w	800fd8e <_printf_float+0xc2>
 8010060:	9a05      	ldr	r2, [sp, #20]
 8010062:	f10b 0b01 	add.w	fp, fp, #1
 8010066:	e7b9      	b.n	800ffdc <_printf_float+0x310>
 8010068:	ee18 3a10 	vmov	r3, s16
 801006c:	4652      	mov	r2, sl
 801006e:	4631      	mov	r1, r6
 8010070:	4628      	mov	r0, r5
 8010072:	47b8      	blx	r7
 8010074:	3001      	adds	r0, #1
 8010076:	d1be      	bne.n	800fff6 <_printf_float+0x32a>
 8010078:	e689      	b.n	800fd8e <_printf_float+0xc2>
 801007a:	9a05      	ldr	r2, [sp, #20]
 801007c:	464b      	mov	r3, r9
 801007e:	4442      	add	r2, r8
 8010080:	4631      	mov	r1, r6
 8010082:	4628      	mov	r0, r5
 8010084:	47b8      	blx	r7
 8010086:	3001      	adds	r0, #1
 8010088:	d1c1      	bne.n	801000e <_printf_float+0x342>
 801008a:	e680      	b.n	800fd8e <_printf_float+0xc2>
 801008c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801008e:	2a01      	cmp	r2, #1
 8010090:	dc01      	bgt.n	8010096 <_printf_float+0x3ca>
 8010092:	07db      	lsls	r3, r3, #31
 8010094:	d538      	bpl.n	8010108 <_printf_float+0x43c>
 8010096:	2301      	movs	r3, #1
 8010098:	4642      	mov	r2, r8
 801009a:	4631      	mov	r1, r6
 801009c:	4628      	mov	r0, r5
 801009e:	47b8      	blx	r7
 80100a0:	3001      	adds	r0, #1
 80100a2:	f43f ae74 	beq.w	800fd8e <_printf_float+0xc2>
 80100a6:	ee18 3a10 	vmov	r3, s16
 80100aa:	4652      	mov	r2, sl
 80100ac:	4631      	mov	r1, r6
 80100ae:	4628      	mov	r0, r5
 80100b0:	47b8      	blx	r7
 80100b2:	3001      	adds	r0, #1
 80100b4:	f43f ae6b 	beq.w	800fd8e <_printf_float+0xc2>
 80100b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80100bc:	2200      	movs	r2, #0
 80100be:	2300      	movs	r3, #0
 80100c0:	f7f0 fd02 	bl	8000ac8 <__aeabi_dcmpeq>
 80100c4:	b9d8      	cbnz	r0, 80100fe <_printf_float+0x432>
 80100c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80100c8:	f108 0201 	add.w	r2, r8, #1
 80100cc:	3b01      	subs	r3, #1
 80100ce:	4631      	mov	r1, r6
 80100d0:	4628      	mov	r0, r5
 80100d2:	47b8      	blx	r7
 80100d4:	3001      	adds	r0, #1
 80100d6:	d10e      	bne.n	80100f6 <_printf_float+0x42a>
 80100d8:	e659      	b.n	800fd8e <_printf_float+0xc2>
 80100da:	2301      	movs	r3, #1
 80100dc:	4652      	mov	r2, sl
 80100de:	4631      	mov	r1, r6
 80100e0:	4628      	mov	r0, r5
 80100e2:	47b8      	blx	r7
 80100e4:	3001      	adds	r0, #1
 80100e6:	f43f ae52 	beq.w	800fd8e <_printf_float+0xc2>
 80100ea:	f108 0801 	add.w	r8, r8, #1
 80100ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80100f0:	3b01      	subs	r3, #1
 80100f2:	4543      	cmp	r3, r8
 80100f4:	dcf1      	bgt.n	80100da <_printf_float+0x40e>
 80100f6:	464b      	mov	r3, r9
 80100f8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80100fc:	e6dc      	b.n	800feb8 <_printf_float+0x1ec>
 80100fe:	f04f 0800 	mov.w	r8, #0
 8010102:	f104 0a1a 	add.w	sl, r4, #26
 8010106:	e7f2      	b.n	80100ee <_printf_float+0x422>
 8010108:	2301      	movs	r3, #1
 801010a:	4642      	mov	r2, r8
 801010c:	e7df      	b.n	80100ce <_printf_float+0x402>
 801010e:	2301      	movs	r3, #1
 8010110:	464a      	mov	r2, r9
 8010112:	4631      	mov	r1, r6
 8010114:	4628      	mov	r0, r5
 8010116:	47b8      	blx	r7
 8010118:	3001      	adds	r0, #1
 801011a:	f43f ae38 	beq.w	800fd8e <_printf_float+0xc2>
 801011e:	f108 0801 	add.w	r8, r8, #1
 8010122:	68e3      	ldr	r3, [r4, #12]
 8010124:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010126:	1a5b      	subs	r3, r3, r1
 8010128:	4543      	cmp	r3, r8
 801012a:	dcf0      	bgt.n	801010e <_printf_float+0x442>
 801012c:	e6fa      	b.n	800ff24 <_printf_float+0x258>
 801012e:	f04f 0800 	mov.w	r8, #0
 8010132:	f104 0919 	add.w	r9, r4, #25
 8010136:	e7f4      	b.n	8010122 <_printf_float+0x456>

08010138 <_printf_common>:
 8010138:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801013c:	4616      	mov	r6, r2
 801013e:	4699      	mov	r9, r3
 8010140:	688a      	ldr	r2, [r1, #8]
 8010142:	690b      	ldr	r3, [r1, #16]
 8010144:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010148:	4293      	cmp	r3, r2
 801014a:	bfb8      	it	lt
 801014c:	4613      	movlt	r3, r2
 801014e:	6033      	str	r3, [r6, #0]
 8010150:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010154:	4607      	mov	r7, r0
 8010156:	460c      	mov	r4, r1
 8010158:	b10a      	cbz	r2, 801015e <_printf_common+0x26>
 801015a:	3301      	adds	r3, #1
 801015c:	6033      	str	r3, [r6, #0]
 801015e:	6823      	ldr	r3, [r4, #0]
 8010160:	0699      	lsls	r1, r3, #26
 8010162:	bf42      	ittt	mi
 8010164:	6833      	ldrmi	r3, [r6, #0]
 8010166:	3302      	addmi	r3, #2
 8010168:	6033      	strmi	r3, [r6, #0]
 801016a:	6825      	ldr	r5, [r4, #0]
 801016c:	f015 0506 	ands.w	r5, r5, #6
 8010170:	d106      	bne.n	8010180 <_printf_common+0x48>
 8010172:	f104 0a19 	add.w	sl, r4, #25
 8010176:	68e3      	ldr	r3, [r4, #12]
 8010178:	6832      	ldr	r2, [r6, #0]
 801017a:	1a9b      	subs	r3, r3, r2
 801017c:	42ab      	cmp	r3, r5
 801017e:	dc26      	bgt.n	80101ce <_printf_common+0x96>
 8010180:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010184:	1e13      	subs	r3, r2, #0
 8010186:	6822      	ldr	r2, [r4, #0]
 8010188:	bf18      	it	ne
 801018a:	2301      	movne	r3, #1
 801018c:	0692      	lsls	r2, r2, #26
 801018e:	d42b      	bmi.n	80101e8 <_printf_common+0xb0>
 8010190:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010194:	4649      	mov	r1, r9
 8010196:	4638      	mov	r0, r7
 8010198:	47c0      	blx	r8
 801019a:	3001      	adds	r0, #1
 801019c:	d01e      	beq.n	80101dc <_printf_common+0xa4>
 801019e:	6823      	ldr	r3, [r4, #0]
 80101a0:	68e5      	ldr	r5, [r4, #12]
 80101a2:	6832      	ldr	r2, [r6, #0]
 80101a4:	f003 0306 	and.w	r3, r3, #6
 80101a8:	2b04      	cmp	r3, #4
 80101aa:	bf08      	it	eq
 80101ac:	1aad      	subeq	r5, r5, r2
 80101ae:	68a3      	ldr	r3, [r4, #8]
 80101b0:	6922      	ldr	r2, [r4, #16]
 80101b2:	bf0c      	ite	eq
 80101b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80101b8:	2500      	movne	r5, #0
 80101ba:	4293      	cmp	r3, r2
 80101bc:	bfc4      	itt	gt
 80101be:	1a9b      	subgt	r3, r3, r2
 80101c0:	18ed      	addgt	r5, r5, r3
 80101c2:	2600      	movs	r6, #0
 80101c4:	341a      	adds	r4, #26
 80101c6:	42b5      	cmp	r5, r6
 80101c8:	d11a      	bne.n	8010200 <_printf_common+0xc8>
 80101ca:	2000      	movs	r0, #0
 80101cc:	e008      	b.n	80101e0 <_printf_common+0xa8>
 80101ce:	2301      	movs	r3, #1
 80101d0:	4652      	mov	r2, sl
 80101d2:	4649      	mov	r1, r9
 80101d4:	4638      	mov	r0, r7
 80101d6:	47c0      	blx	r8
 80101d8:	3001      	adds	r0, #1
 80101da:	d103      	bne.n	80101e4 <_printf_common+0xac>
 80101dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80101e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80101e4:	3501      	adds	r5, #1
 80101e6:	e7c6      	b.n	8010176 <_printf_common+0x3e>
 80101e8:	18e1      	adds	r1, r4, r3
 80101ea:	1c5a      	adds	r2, r3, #1
 80101ec:	2030      	movs	r0, #48	; 0x30
 80101ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80101f2:	4422      	add	r2, r4
 80101f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80101f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80101fc:	3302      	adds	r3, #2
 80101fe:	e7c7      	b.n	8010190 <_printf_common+0x58>
 8010200:	2301      	movs	r3, #1
 8010202:	4622      	mov	r2, r4
 8010204:	4649      	mov	r1, r9
 8010206:	4638      	mov	r0, r7
 8010208:	47c0      	blx	r8
 801020a:	3001      	adds	r0, #1
 801020c:	d0e6      	beq.n	80101dc <_printf_common+0xa4>
 801020e:	3601      	adds	r6, #1
 8010210:	e7d9      	b.n	80101c6 <_printf_common+0x8e>
	...

08010214 <_printf_i>:
 8010214:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010218:	7e0f      	ldrb	r7, [r1, #24]
 801021a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801021c:	2f78      	cmp	r7, #120	; 0x78
 801021e:	4691      	mov	r9, r2
 8010220:	4680      	mov	r8, r0
 8010222:	460c      	mov	r4, r1
 8010224:	469a      	mov	sl, r3
 8010226:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801022a:	d807      	bhi.n	801023c <_printf_i+0x28>
 801022c:	2f62      	cmp	r7, #98	; 0x62
 801022e:	d80a      	bhi.n	8010246 <_printf_i+0x32>
 8010230:	2f00      	cmp	r7, #0
 8010232:	f000 80d8 	beq.w	80103e6 <_printf_i+0x1d2>
 8010236:	2f58      	cmp	r7, #88	; 0x58
 8010238:	f000 80a3 	beq.w	8010382 <_printf_i+0x16e>
 801023c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010240:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010244:	e03a      	b.n	80102bc <_printf_i+0xa8>
 8010246:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801024a:	2b15      	cmp	r3, #21
 801024c:	d8f6      	bhi.n	801023c <_printf_i+0x28>
 801024e:	a101      	add	r1, pc, #4	; (adr r1, 8010254 <_printf_i+0x40>)
 8010250:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010254:	080102ad 	.word	0x080102ad
 8010258:	080102c1 	.word	0x080102c1
 801025c:	0801023d 	.word	0x0801023d
 8010260:	0801023d 	.word	0x0801023d
 8010264:	0801023d 	.word	0x0801023d
 8010268:	0801023d 	.word	0x0801023d
 801026c:	080102c1 	.word	0x080102c1
 8010270:	0801023d 	.word	0x0801023d
 8010274:	0801023d 	.word	0x0801023d
 8010278:	0801023d 	.word	0x0801023d
 801027c:	0801023d 	.word	0x0801023d
 8010280:	080103cd 	.word	0x080103cd
 8010284:	080102f1 	.word	0x080102f1
 8010288:	080103af 	.word	0x080103af
 801028c:	0801023d 	.word	0x0801023d
 8010290:	0801023d 	.word	0x0801023d
 8010294:	080103ef 	.word	0x080103ef
 8010298:	0801023d 	.word	0x0801023d
 801029c:	080102f1 	.word	0x080102f1
 80102a0:	0801023d 	.word	0x0801023d
 80102a4:	0801023d 	.word	0x0801023d
 80102a8:	080103b7 	.word	0x080103b7
 80102ac:	682b      	ldr	r3, [r5, #0]
 80102ae:	1d1a      	adds	r2, r3, #4
 80102b0:	681b      	ldr	r3, [r3, #0]
 80102b2:	602a      	str	r2, [r5, #0]
 80102b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80102b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80102bc:	2301      	movs	r3, #1
 80102be:	e0a3      	b.n	8010408 <_printf_i+0x1f4>
 80102c0:	6820      	ldr	r0, [r4, #0]
 80102c2:	6829      	ldr	r1, [r5, #0]
 80102c4:	0606      	lsls	r6, r0, #24
 80102c6:	f101 0304 	add.w	r3, r1, #4
 80102ca:	d50a      	bpl.n	80102e2 <_printf_i+0xce>
 80102cc:	680e      	ldr	r6, [r1, #0]
 80102ce:	602b      	str	r3, [r5, #0]
 80102d0:	2e00      	cmp	r6, #0
 80102d2:	da03      	bge.n	80102dc <_printf_i+0xc8>
 80102d4:	232d      	movs	r3, #45	; 0x2d
 80102d6:	4276      	negs	r6, r6
 80102d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80102dc:	485e      	ldr	r0, [pc, #376]	; (8010458 <_printf_i+0x244>)
 80102de:	230a      	movs	r3, #10
 80102e0:	e019      	b.n	8010316 <_printf_i+0x102>
 80102e2:	680e      	ldr	r6, [r1, #0]
 80102e4:	602b      	str	r3, [r5, #0]
 80102e6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80102ea:	bf18      	it	ne
 80102ec:	b236      	sxthne	r6, r6
 80102ee:	e7ef      	b.n	80102d0 <_printf_i+0xbc>
 80102f0:	682b      	ldr	r3, [r5, #0]
 80102f2:	6820      	ldr	r0, [r4, #0]
 80102f4:	1d19      	adds	r1, r3, #4
 80102f6:	6029      	str	r1, [r5, #0]
 80102f8:	0601      	lsls	r1, r0, #24
 80102fa:	d501      	bpl.n	8010300 <_printf_i+0xec>
 80102fc:	681e      	ldr	r6, [r3, #0]
 80102fe:	e002      	b.n	8010306 <_printf_i+0xf2>
 8010300:	0646      	lsls	r6, r0, #25
 8010302:	d5fb      	bpl.n	80102fc <_printf_i+0xe8>
 8010304:	881e      	ldrh	r6, [r3, #0]
 8010306:	4854      	ldr	r0, [pc, #336]	; (8010458 <_printf_i+0x244>)
 8010308:	2f6f      	cmp	r7, #111	; 0x6f
 801030a:	bf0c      	ite	eq
 801030c:	2308      	moveq	r3, #8
 801030e:	230a      	movne	r3, #10
 8010310:	2100      	movs	r1, #0
 8010312:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010316:	6865      	ldr	r5, [r4, #4]
 8010318:	60a5      	str	r5, [r4, #8]
 801031a:	2d00      	cmp	r5, #0
 801031c:	bfa2      	ittt	ge
 801031e:	6821      	ldrge	r1, [r4, #0]
 8010320:	f021 0104 	bicge.w	r1, r1, #4
 8010324:	6021      	strge	r1, [r4, #0]
 8010326:	b90e      	cbnz	r6, 801032c <_printf_i+0x118>
 8010328:	2d00      	cmp	r5, #0
 801032a:	d04d      	beq.n	80103c8 <_printf_i+0x1b4>
 801032c:	4615      	mov	r5, r2
 801032e:	fbb6 f1f3 	udiv	r1, r6, r3
 8010332:	fb03 6711 	mls	r7, r3, r1, r6
 8010336:	5dc7      	ldrb	r7, [r0, r7]
 8010338:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801033c:	4637      	mov	r7, r6
 801033e:	42bb      	cmp	r3, r7
 8010340:	460e      	mov	r6, r1
 8010342:	d9f4      	bls.n	801032e <_printf_i+0x11a>
 8010344:	2b08      	cmp	r3, #8
 8010346:	d10b      	bne.n	8010360 <_printf_i+0x14c>
 8010348:	6823      	ldr	r3, [r4, #0]
 801034a:	07de      	lsls	r6, r3, #31
 801034c:	d508      	bpl.n	8010360 <_printf_i+0x14c>
 801034e:	6923      	ldr	r3, [r4, #16]
 8010350:	6861      	ldr	r1, [r4, #4]
 8010352:	4299      	cmp	r1, r3
 8010354:	bfde      	ittt	le
 8010356:	2330      	movle	r3, #48	; 0x30
 8010358:	f805 3c01 	strble.w	r3, [r5, #-1]
 801035c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8010360:	1b52      	subs	r2, r2, r5
 8010362:	6122      	str	r2, [r4, #16]
 8010364:	f8cd a000 	str.w	sl, [sp]
 8010368:	464b      	mov	r3, r9
 801036a:	aa03      	add	r2, sp, #12
 801036c:	4621      	mov	r1, r4
 801036e:	4640      	mov	r0, r8
 8010370:	f7ff fee2 	bl	8010138 <_printf_common>
 8010374:	3001      	adds	r0, #1
 8010376:	d14c      	bne.n	8010412 <_printf_i+0x1fe>
 8010378:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801037c:	b004      	add	sp, #16
 801037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010382:	4835      	ldr	r0, [pc, #212]	; (8010458 <_printf_i+0x244>)
 8010384:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8010388:	6829      	ldr	r1, [r5, #0]
 801038a:	6823      	ldr	r3, [r4, #0]
 801038c:	f851 6b04 	ldr.w	r6, [r1], #4
 8010390:	6029      	str	r1, [r5, #0]
 8010392:	061d      	lsls	r5, r3, #24
 8010394:	d514      	bpl.n	80103c0 <_printf_i+0x1ac>
 8010396:	07df      	lsls	r7, r3, #31
 8010398:	bf44      	itt	mi
 801039a:	f043 0320 	orrmi.w	r3, r3, #32
 801039e:	6023      	strmi	r3, [r4, #0]
 80103a0:	b91e      	cbnz	r6, 80103aa <_printf_i+0x196>
 80103a2:	6823      	ldr	r3, [r4, #0]
 80103a4:	f023 0320 	bic.w	r3, r3, #32
 80103a8:	6023      	str	r3, [r4, #0]
 80103aa:	2310      	movs	r3, #16
 80103ac:	e7b0      	b.n	8010310 <_printf_i+0xfc>
 80103ae:	6823      	ldr	r3, [r4, #0]
 80103b0:	f043 0320 	orr.w	r3, r3, #32
 80103b4:	6023      	str	r3, [r4, #0]
 80103b6:	2378      	movs	r3, #120	; 0x78
 80103b8:	4828      	ldr	r0, [pc, #160]	; (801045c <_printf_i+0x248>)
 80103ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80103be:	e7e3      	b.n	8010388 <_printf_i+0x174>
 80103c0:	0659      	lsls	r1, r3, #25
 80103c2:	bf48      	it	mi
 80103c4:	b2b6      	uxthmi	r6, r6
 80103c6:	e7e6      	b.n	8010396 <_printf_i+0x182>
 80103c8:	4615      	mov	r5, r2
 80103ca:	e7bb      	b.n	8010344 <_printf_i+0x130>
 80103cc:	682b      	ldr	r3, [r5, #0]
 80103ce:	6826      	ldr	r6, [r4, #0]
 80103d0:	6961      	ldr	r1, [r4, #20]
 80103d2:	1d18      	adds	r0, r3, #4
 80103d4:	6028      	str	r0, [r5, #0]
 80103d6:	0635      	lsls	r5, r6, #24
 80103d8:	681b      	ldr	r3, [r3, #0]
 80103da:	d501      	bpl.n	80103e0 <_printf_i+0x1cc>
 80103dc:	6019      	str	r1, [r3, #0]
 80103de:	e002      	b.n	80103e6 <_printf_i+0x1d2>
 80103e0:	0670      	lsls	r0, r6, #25
 80103e2:	d5fb      	bpl.n	80103dc <_printf_i+0x1c8>
 80103e4:	8019      	strh	r1, [r3, #0]
 80103e6:	2300      	movs	r3, #0
 80103e8:	6123      	str	r3, [r4, #16]
 80103ea:	4615      	mov	r5, r2
 80103ec:	e7ba      	b.n	8010364 <_printf_i+0x150>
 80103ee:	682b      	ldr	r3, [r5, #0]
 80103f0:	1d1a      	adds	r2, r3, #4
 80103f2:	602a      	str	r2, [r5, #0]
 80103f4:	681d      	ldr	r5, [r3, #0]
 80103f6:	6862      	ldr	r2, [r4, #4]
 80103f8:	2100      	movs	r1, #0
 80103fa:	4628      	mov	r0, r5
 80103fc:	f7ef fef0 	bl	80001e0 <memchr>
 8010400:	b108      	cbz	r0, 8010406 <_printf_i+0x1f2>
 8010402:	1b40      	subs	r0, r0, r5
 8010404:	6060      	str	r0, [r4, #4]
 8010406:	6863      	ldr	r3, [r4, #4]
 8010408:	6123      	str	r3, [r4, #16]
 801040a:	2300      	movs	r3, #0
 801040c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010410:	e7a8      	b.n	8010364 <_printf_i+0x150>
 8010412:	6923      	ldr	r3, [r4, #16]
 8010414:	462a      	mov	r2, r5
 8010416:	4649      	mov	r1, r9
 8010418:	4640      	mov	r0, r8
 801041a:	47d0      	blx	sl
 801041c:	3001      	adds	r0, #1
 801041e:	d0ab      	beq.n	8010378 <_printf_i+0x164>
 8010420:	6823      	ldr	r3, [r4, #0]
 8010422:	079b      	lsls	r3, r3, #30
 8010424:	d413      	bmi.n	801044e <_printf_i+0x23a>
 8010426:	68e0      	ldr	r0, [r4, #12]
 8010428:	9b03      	ldr	r3, [sp, #12]
 801042a:	4298      	cmp	r0, r3
 801042c:	bfb8      	it	lt
 801042e:	4618      	movlt	r0, r3
 8010430:	e7a4      	b.n	801037c <_printf_i+0x168>
 8010432:	2301      	movs	r3, #1
 8010434:	4632      	mov	r2, r6
 8010436:	4649      	mov	r1, r9
 8010438:	4640      	mov	r0, r8
 801043a:	47d0      	blx	sl
 801043c:	3001      	adds	r0, #1
 801043e:	d09b      	beq.n	8010378 <_printf_i+0x164>
 8010440:	3501      	adds	r5, #1
 8010442:	68e3      	ldr	r3, [r4, #12]
 8010444:	9903      	ldr	r1, [sp, #12]
 8010446:	1a5b      	subs	r3, r3, r1
 8010448:	42ab      	cmp	r3, r5
 801044a:	dcf2      	bgt.n	8010432 <_printf_i+0x21e>
 801044c:	e7eb      	b.n	8010426 <_printf_i+0x212>
 801044e:	2500      	movs	r5, #0
 8010450:	f104 0619 	add.w	r6, r4, #25
 8010454:	e7f5      	b.n	8010442 <_printf_i+0x22e>
 8010456:	bf00      	nop
 8010458:	080158fe 	.word	0x080158fe
 801045c:	0801590f 	.word	0x0801590f

08010460 <_sbrk_r>:
 8010460:	b538      	push	{r3, r4, r5, lr}
 8010462:	4d06      	ldr	r5, [pc, #24]	; (801047c <_sbrk_r+0x1c>)
 8010464:	2300      	movs	r3, #0
 8010466:	4604      	mov	r4, r0
 8010468:	4608      	mov	r0, r1
 801046a:	602b      	str	r3, [r5, #0]
 801046c:	f7f6 fc1e 	bl	8006cac <_sbrk>
 8010470:	1c43      	adds	r3, r0, #1
 8010472:	d102      	bne.n	801047a <_sbrk_r+0x1a>
 8010474:	682b      	ldr	r3, [r5, #0]
 8010476:	b103      	cbz	r3, 801047a <_sbrk_r+0x1a>
 8010478:	6023      	str	r3, [r4, #0]
 801047a:	bd38      	pop	{r3, r4, r5, pc}
 801047c:	200038ec 	.word	0x200038ec

08010480 <siprintf>:
 8010480:	b40e      	push	{r1, r2, r3}
 8010482:	b500      	push	{lr}
 8010484:	b09c      	sub	sp, #112	; 0x70
 8010486:	ab1d      	add	r3, sp, #116	; 0x74
 8010488:	9002      	str	r0, [sp, #8]
 801048a:	9006      	str	r0, [sp, #24]
 801048c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010490:	4809      	ldr	r0, [pc, #36]	; (80104b8 <siprintf+0x38>)
 8010492:	9107      	str	r1, [sp, #28]
 8010494:	9104      	str	r1, [sp, #16]
 8010496:	4909      	ldr	r1, [pc, #36]	; (80104bc <siprintf+0x3c>)
 8010498:	f853 2b04 	ldr.w	r2, [r3], #4
 801049c:	9105      	str	r1, [sp, #20]
 801049e:	6800      	ldr	r0, [r0, #0]
 80104a0:	9301      	str	r3, [sp, #4]
 80104a2:	a902      	add	r1, sp, #8
 80104a4:	f002 fe64 	bl	8013170 <_svfiprintf_r>
 80104a8:	9b02      	ldr	r3, [sp, #8]
 80104aa:	2200      	movs	r2, #0
 80104ac:	701a      	strb	r2, [r3, #0]
 80104ae:	b01c      	add	sp, #112	; 0x70
 80104b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80104b4:	b003      	add	sp, #12
 80104b6:	4770      	bx	lr
 80104b8:	20000260 	.word	0x20000260
 80104bc:	ffff0208 	.word	0xffff0208

080104c0 <strchr>:
 80104c0:	b2c9      	uxtb	r1, r1
 80104c2:	4603      	mov	r3, r0
 80104c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80104c8:	b11a      	cbz	r2, 80104d2 <strchr+0x12>
 80104ca:	428a      	cmp	r2, r1
 80104cc:	d1f9      	bne.n	80104c2 <strchr+0x2>
 80104ce:	4618      	mov	r0, r3
 80104d0:	4770      	bx	lr
 80104d2:	2900      	cmp	r1, #0
 80104d4:	bf18      	it	ne
 80104d6:	2300      	movne	r3, #0
 80104d8:	e7f9      	b.n	80104ce <strchr+0xe>

080104da <strncmp>:
 80104da:	b510      	push	{r4, lr}
 80104dc:	b17a      	cbz	r2, 80104fe <strncmp+0x24>
 80104de:	4603      	mov	r3, r0
 80104e0:	3901      	subs	r1, #1
 80104e2:	1884      	adds	r4, r0, r2
 80104e4:	f813 0b01 	ldrb.w	r0, [r3], #1
 80104e8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80104ec:	4290      	cmp	r0, r2
 80104ee:	d101      	bne.n	80104f4 <strncmp+0x1a>
 80104f0:	42a3      	cmp	r3, r4
 80104f2:	d101      	bne.n	80104f8 <strncmp+0x1e>
 80104f4:	1a80      	subs	r0, r0, r2
 80104f6:	bd10      	pop	{r4, pc}
 80104f8:	2800      	cmp	r0, #0
 80104fa:	d1f3      	bne.n	80104e4 <strncmp+0xa>
 80104fc:	e7fa      	b.n	80104f4 <strncmp+0x1a>
 80104fe:	4610      	mov	r0, r2
 8010500:	e7f9      	b.n	80104f6 <strncmp+0x1c>

08010502 <strstr>:
 8010502:	780a      	ldrb	r2, [r1, #0]
 8010504:	b570      	push	{r4, r5, r6, lr}
 8010506:	b96a      	cbnz	r2, 8010524 <strstr+0x22>
 8010508:	bd70      	pop	{r4, r5, r6, pc}
 801050a:	429a      	cmp	r2, r3
 801050c:	d109      	bne.n	8010522 <strstr+0x20>
 801050e:	460c      	mov	r4, r1
 8010510:	4605      	mov	r5, r0
 8010512:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8010516:	2b00      	cmp	r3, #0
 8010518:	d0f6      	beq.n	8010508 <strstr+0x6>
 801051a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801051e:	429e      	cmp	r6, r3
 8010520:	d0f7      	beq.n	8010512 <strstr+0x10>
 8010522:	3001      	adds	r0, #1
 8010524:	7803      	ldrb	r3, [r0, #0]
 8010526:	2b00      	cmp	r3, #0
 8010528:	d1ef      	bne.n	801050a <strstr+0x8>
 801052a:	4618      	mov	r0, r3
 801052c:	e7ec      	b.n	8010508 <strstr+0x6>

0801052e <sulp>:
 801052e:	b570      	push	{r4, r5, r6, lr}
 8010530:	4604      	mov	r4, r0
 8010532:	460d      	mov	r5, r1
 8010534:	ec45 4b10 	vmov	d0, r4, r5
 8010538:	4616      	mov	r6, r2
 801053a:	f002 fc6f 	bl	8012e1c <__ulp>
 801053e:	ec51 0b10 	vmov	r0, r1, d0
 8010542:	b17e      	cbz	r6, 8010564 <sulp+0x36>
 8010544:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8010548:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801054c:	2b00      	cmp	r3, #0
 801054e:	dd09      	ble.n	8010564 <sulp+0x36>
 8010550:	051b      	lsls	r3, r3, #20
 8010552:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8010556:	2400      	movs	r4, #0
 8010558:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801055c:	4622      	mov	r2, r4
 801055e:	462b      	mov	r3, r5
 8010560:	f7f0 f84a 	bl	80005f8 <__aeabi_dmul>
 8010564:	bd70      	pop	{r4, r5, r6, pc}
	...

08010568 <_strtod_l>:
 8010568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801056c:	ed2d 8b02 	vpush	{d8}
 8010570:	b09d      	sub	sp, #116	; 0x74
 8010572:	461f      	mov	r7, r3
 8010574:	2300      	movs	r3, #0
 8010576:	9318      	str	r3, [sp, #96]	; 0x60
 8010578:	4ba2      	ldr	r3, [pc, #648]	; (8010804 <_strtod_l+0x29c>)
 801057a:	9213      	str	r2, [sp, #76]	; 0x4c
 801057c:	681b      	ldr	r3, [r3, #0]
 801057e:	9305      	str	r3, [sp, #20]
 8010580:	4604      	mov	r4, r0
 8010582:	4618      	mov	r0, r3
 8010584:	4688      	mov	r8, r1
 8010586:	f7ef fe23 	bl	80001d0 <strlen>
 801058a:	f04f 0a00 	mov.w	sl, #0
 801058e:	4605      	mov	r5, r0
 8010590:	f04f 0b00 	mov.w	fp, #0
 8010594:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8010598:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801059a:	781a      	ldrb	r2, [r3, #0]
 801059c:	2a2b      	cmp	r2, #43	; 0x2b
 801059e:	d04e      	beq.n	801063e <_strtod_l+0xd6>
 80105a0:	d83b      	bhi.n	801061a <_strtod_l+0xb2>
 80105a2:	2a0d      	cmp	r2, #13
 80105a4:	d834      	bhi.n	8010610 <_strtod_l+0xa8>
 80105a6:	2a08      	cmp	r2, #8
 80105a8:	d834      	bhi.n	8010614 <_strtod_l+0xac>
 80105aa:	2a00      	cmp	r2, #0
 80105ac:	d03e      	beq.n	801062c <_strtod_l+0xc4>
 80105ae:	2300      	movs	r3, #0
 80105b0:	930a      	str	r3, [sp, #40]	; 0x28
 80105b2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80105b4:	7833      	ldrb	r3, [r6, #0]
 80105b6:	2b30      	cmp	r3, #48	; 0x30
 80105b8:	f040 80b0 	bne.w	801071c <_strtod_l+0x1b4>
 80105bc:	7873      	ldrb	r3, [r6, #1]
 80105be:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80105c2:	2b58      	cmp	r3, #88	; 0x58
 80105c4:	d168      	bne.n	8010698 <_strtod_l+0x130>
 80105c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80105c8:	9301      	str	r3, [sp, #4]
 80105ca:	ab18      	add	r3, sp, #96	; 0x60
 80105cc:	9702      	str	r7, [sp, #8]
 80105ce:	9300      	str	r3, [sp, #0]
 80105d0:	4a8d      	ldr	r2, [pc, #564]	; (8010808 <_strtod_l+0x2a0>)
 80105d2:	ab19      	add	r3, sp, #100	; 0x64
 80105d4:	a917      	add	r1, sp, #92	; 0x5c
 80105d6:	4620      	mov	r0, r4
 80105d8:	f001 fd80 	bl	80120dc <__gethex>
 80105dc:	f010 0707 	ands.w	r7, r0, #7
 80105e0:	4605      	mov	r5, r0
 80105e2:	d005      	beq.n	80105f0 <_strtod_l+0x88>
 80105e4:	2f06      	cmp	r7, #6
 80105e6:	d12c      	bne.n	8010642 <_strtod_l+0xda>
 80105e8:	3601      	adds	r6, #1
 80105ea:	2300      	movs	r3, #0
 80105ec:	9617      	str	r6, [sp, #92]	; 0x5c
 80105ee:	930a      	str	r3, [sp, #40]	; 0x28
 80105f0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	f040 8590 	bne.w	8011118 <_strtod_l+0xbb0>
 80105f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80105fa:	b1eb      	cbz	r3, 8010638 <_strtod_l+0xd0>
 80105fc:	4652      	mov	r2, sl
 80105fe:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8010602:	ec43 2b10 	vmov	d0, r2, r3
 8010606:	b01d      	add	sp, #116	; 0x74
 8010608:	ecbd 8b02 	vpop	{d8}
 801060c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010610:	2a20      	cmp	r2, #32
 8010612:	d1cc      	bne.n	80105ae <_strtod_l+0x46>
 8010614:	3301      	adds	r3, #1
 8010616:	9317      	str	r3, [sp, #92]	; 0x5c
 8010618:	e7be      	b.n	8010598 <_strtod_l+0x30>
 801061a:	2a2d      	cmp	r2, #45	; 0x2d
 801061c:	d1c7      	bne.n	80105ae <_strtod_l+0x46>
 801061e:	2201      	movs	r2, #1
 8010620:	920a      	str	r2, [sp, #40]	; 0x28
 8010622:	1c5a      	adds	r2, r3, #1
 8010624:	9217      	str	r2, [sp, #92]	; 0x5c
 8010626:	785b      	ldrb	r3, [r3, #1]
 8010628:	2b00      	cmp	r3, #0
 801062a:	d1c2      	bne.n	80105b2 <_strtod_l+0x4a>
 801062c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801062e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8010632:	2b00      	cmp	r3, #0
 8010634:	f040 856e 	bne.w	8011114 <_strtod_l+0xbac>
 8010638:	4652      	mov	r2, sl
 801063a:	465b      	mov	r3, fp
 801063c:	e7e1      	b.n	8010602 <_strtod_l+0x9a>
 801063e:	2200      	movs	r2, #0
 8010640:	e7ee      	b.n	8010620 <_strtod_l+0xb8>
 8010642:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8010644:	b13a      	cbz	r2, 8010656 <_strtod_l+0xee>
 8010646:	2135      	movs	r1, #53	; 0x35
 8010648:	a81a      	add	r0, sp, #104	; 0x68
 801064a:	f002 fcf2 	bl	8013032 <__copybits>
 801064e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010650:	4620      	mov	r0, r4
 8010652:	f002 f8b1 	bl	80127b8 <_Bfree>
 8010656:	3f01      	subs	r7, #1
 8010658:	2f04      	cmp	r7, #4
 801065a:	d806      	bhi.n	801066a <_strtod_l+0x102>
 801065c:	e8df f007 	tbb	[pc, r7]
 8010660:	1714030a 	.word	0x1714030a
 8010664:	0a          	.byte	0x0a
 8010665:	00          	.byte	0x00
 8010666:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 801066a:	0728      	lsls	r0, r5, #28
 801066c:	d5c0      	bpl.n	80105f0 <_strtod_l+0x88>
 801066e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8010672:	e7bd      	b.n	80105f0 <_strtod_l+0x88>
 8010674:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8010678:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801067a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801067e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8010682:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8010686:	e7f0      	b.n	801066a <_strtod_l+0x102>
 8010688:	f8df b180 	ldr.w	fp, [pc, #384]	; 801080c <_strtod_l+0x2a4>
 801068c:	e7ed      	b.n	801066a <_strtod_l+0x102>
 801068e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8010692:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8010696:	e7e8      	b.n	801066a <_strtod_l+0x102>
 8010698:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801069a:	1c5a      	adds	r2, r3, #1
 801069c:	9217      	str	r2, [sp, #92]	; 0x5c
 801069e:	785b      	ldrb	r3, [r3, #1]
 80106a0:	2b30      	cmp	r3, #48	; 0x30
 80106a2:	d0f9      	beq.n	8010698 <_strtod_l+0x130>
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	d0a3      	beq.n	80105f0 <_strtod_l+0x88>
 80106a8:	2301      	movs	r3, #1
 80106aa:	f04f 0900 	mov.w	r9, #0
 80106ae:	9304      	str	r3, [sp, #16]
 80106b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80106b2:	9308      	str	r3, [sp, #32]
 80106b4:	f8cd 901c 	str.w	r9, [sp, #28]
 80106b8:	464f      	mov	r7, r9
 80106ba:	220a      	movs	r2, #10
 80106bc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80106be:	7806      	ldrb	r6, [r0, #0]
 80106c0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80106c4:	b2d9      	uxtb	r1, r3
 80106c6:	2909      	cmp	r1, #9
 80106c8:	d92a      	bls.n	8010720 <_strtod_l+0x1b8>
 80106ca:	9905      	ldr	r1, [sp, #20]
 80106cc:	462a      	mov	r2, r5
 80106ce:	f7ff ff04 	bl	80104da <strncmp>
 80106d2:	b398      	cbz	r0, 801073c <_strtod_l+0x1d4>
 80106d4:	2000      	movs	r0, #0
 80106d6:	4632      	mov	r2, r6
 80106d8:	463d      	mov	r5, r7
 80106da:	9005      	str	r0, [sp, #20]
 80106dc:	4603      	mov	r3, r0
 80106de:	2a65      	cmp	r2, #101	; 0x65
 80106e0:	d001      	beq.n	80106e6 <_strtod_l+0x17e>
 80106e2:	2a45      	cmp	r2, #69	; 0x45
 80106e4:	d118      	bne.n	8010718 <_strtod_l+0x1b0>
 80106e6:	b91d      	cbnz	r5, 80106f0 <_strtod_l+0x188>
 80106e8:	9a04      	ldr	r2, [sp, #16]
 80106ea:	4302      	orrs	r2, r0
 80106ec:	d09e      	beq.n	801062c <_strtod_l+0xc4>
 80106ee:	2500      	movs	r5, #0
 80106f0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80106f4:	f108 0201 	add.w	r2, r8, #1
 80106f8:	9217      	str	r2, [sp, #92]	; 0x5c
 80106fa:	f898 2001 	ldrb.w	r2, [r8, #1]
 80106fe:	2a2b      	cmp	r2, #43	; 0x2b
 8010700:	d075      	beq.n	80107ee <_strtod_l+0x286>
 8010702:	2a2d      	cmp	r2, #45	; 0x2d
 8010704:	d07b      	beq.n	80107fe <_strtod_l+0x296>
 8010706:	f04f 0c00 	mov.w	ip, #0
 801070a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 801070e:	2909      	cmp	r1, #9
 8010710:	f240 8082 	bls.w	8010818 <_strtod_l+0x2b0>
 8010714:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8010718:	2600      	movs	r6, #0
 801071a:	e09d      	b.n	8010858 <_strtod_l+0x2f0>
 801071c:	2300      	movs	r3, #0
 801071e:	e7c4      	b.n	80106aa <_strtod_l+0x142>
 8010720:	2f08      	cmp	r7, #8
 8010722:	bfd8      	it	le
 8010724:	9907      	ldrle	r1, [sp, #28]
 8010726:	f100 0001 	add.w	r0, r0, #1
 801072a:	bfda      	itte	le
 801072c:	fb02 3301 	mlale	r3, r2, r1, r3
 8010730:	9307      	strle	r3, [sp, #28]
 8010732:	fb02 3909 	mlagt	r9, r2, r9, r3
 8010736:	3701      	adds	r7, #1
 8010738:	9017      	str	r0, [sp, #92]	; 0x5c
 801073a:	e7bf      	b.n	80106bc <_strtod_l+0x154>
 801073c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801073e:	195a      	adds	r2, r3, r5
 8010740:	9217      	str	r2, [sp, #92]	; 0x5c
 8010742:	5d5a      	ldrb	r2, [r3, r5]
 8010744:	2f00      	cmp	r7, #0
 8010746:	d037      	beq.n	80107b8 <_strtod_l+0x250>
 8010748:	9005      	str	r0, [sp, #20]
 801074a:	463d      	mov	r5, r7
 801074c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8010750:	2b09      	cmp	r3, #9
 8010752:	d912      	bls.n	801077a <_strtod_l+0x212>
 8010754:	2301      	movs	r3, #1
 8010756:	e7c2      	b.n	80106de <_strtod_l+0x176>
 8010758:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801075a:	1c5a      	adds	r2, r3, #1
 801075c:	9217      	str	r2, [sp, #92]	; 0x5c
 801075e:	785a      	ldrb	r2, [r3, #1]
 8010760:	3001      	adds	r0, #1
 8010762:	2a30      	cmp	r2, #48	; 0x30
 8010764:	d0f8      	beq.n	8010758 <_strtod_l+0x1f0>
 8010766:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801076a:	2b08      	cmp	r3, #8
 801076c:	f200 84d9 	bhi.w	8011122 <_strtod_l+0xbba>
 8010770:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010772:	9005      	str	r0, [sp, #20]
 8010774:	2000      	movs	r0, #0
 8010776:	9308      	str	r3, [sp, #32]
 8010778:	4605      	mov	r5, r0
 801077a:	3a30      	subs	r2, #48	; 0x30
 801077c:	f100 0301 	add.w	r3, r0, #1
 8010780:	d014      	beq.n	80107ac <_strtod_l+0x244>
 8010782:	9905      	ldr	r1, [sp, #20]
 8010784:	4419      	add	r1, r3
 8010786:	9105      	str	r1, [sp, #20]
 8010788:	462b      	mov	r3, r5
 801078a:	eb00 0e05 	add.w	lr, r0, r5
 801078e:	210a      	movs	r1, #10
 8010790:	4573      	cmp	r3, lr
 8010792:	d113      	bne.n	80107bc <_strtod_l+0x254>
 8010794:	182b      	adds	r3, r5, r0
 8010796:	2b08      	cmp	r3, #8
 8010798:	f105 0501 	add.w	r5, r5, #1
 801079c:	4405      	add	r5, r0
 801079e:	dc1c      	bgt.n	80107da <_strtod_l+0x272>
 80107a0:	9907      	ldr	r1, [sp, #28]
 80107a2:	230a      	movs	r3, #10
 80107a4:	fb03 2301 	mla	r3, r3, r1, r2
 80107a8:	9307      	str	r3, [sp, #28]
 80107aa:	2300      	movs	r3, #0
 80107ac:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80107ae:	1c51      	adds	r1, r2, #1
 80107b0:	9117      	str	r1, [sp, #92]	; 0x5c
 80107b2:	7852      	ldrb	r2, [r2, #1]
 80107b4:	4618      	mov	r0, r3
 80107b6:	e7c9      	b.n	801074c <_strtod_l+0x1e4>
 80107b8:	4638      	mov	r0, r7
 80107ba:	e7d2      	b.n	8010762 <_strtod_l+0x1fa>
 80107bc:	2b08      	cmp	r3, #8
 80107be:	dc04      	bgt.n	80107ca <_strtod_l+0x262>
 80107c0:	9e07      	ldr	r6, [sp, #28]
 80107c2:	434e      	muls	r6, r1
 80107c4:	9607      	str	r6, [sp, #28]
 80107c6:	3301      	adds	r3, #1
 80107c8:	e7e2      	b.n	8010790 <_strtod_l+0x228>
 80107ca:	f103 0c01 	add.w	ip, r3, #1
 80107ce:	f1bc 0f10 	cmp.w	ip, #16
 80107d2:	bfd8      	it	le
 80107d4:	fb01 f909 	mulle.w	r9, r1, r9
 80107d8:	e7f5      	b.n	80107c6 <_strtod_l+0x25e>
 80107da:	2d10      	cmp	r5, #16
 80107dc:	bfdc      	itt	le
 80107de:	230a      	movle	r3, #10
 80107e0:	fb03 2909 	mlale	r9, r3, r9, r2
 80107e4:	e7e1      	b.n	80107aa <_strtod_l+0x242>
 80107e6:	2300      	movs	r3, #0
 80107e8:	9305      	str	r3, [sp, #20]
 80107ea:	2301      	movs	r3, #1
 80107ec:	e77c      	b.n	80106e8 <_strtod_l+0x180>
 80107ee:	f04f 0c00 	mov.w	ip, #0
 80107f2:	f108 0202 	add.w	r2, r8, #2
 80107f6:	9217      	str	r2, [sp, #92]	; 0x5c
 80107f8:	f898 2002 	ldrb.w	r2, [r8, #2]
 80107fc:	e785      	b.n	801070a <_strtod_l+0x1a2>
 80107fe:	f04f 0c01 	mov.w	ip, #1
 8010802:	e7f6      	b.n	80107f2 <_strtod_l+0x28a>
 8010804:	08015a68 	.word	0x08015a68
 8010808:	08015920 	.word	0x08015920
 801080c:	7ff00000 	.word	0x7ff00000
 8010810:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010812:	1c51      	adds	r1, r2, #1
 8010814:	9117      	str	r1, [sp, #92]	; 0x5c
 8010816:	7852      	ldrb	r2, [r2, #1]
 8010818:	2a30      	cmp	r2, #48	; 0x30
 801081a:	d0f9      	beq.n	8010810 <_strtod_l+0x2a8>
 801081c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8010820:	2908      	cmp	r1, #8
 8010822:	f63f af79 	bhi.w	8010718 <_strtod_l+0x1b0>
 8010826:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 801082a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801082c:	9206      	str	r2, [sp, #24]
 801082e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010830:	1c51      	adds	r1, r2, #1
 8010832:	9117      	str	r1, [sp, #92]	; 0x5c
 8010834:	7852      	ldrb	r2, [r2, #1]
 8010836:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 801083a:	2e09      	cmp	r6, #9
 801083c:	d937      	bls.n	80108ae <_strtod_l+0x346>
 801083e:	9e06      	ldr	r6, [sp, #24]
 8010840:	1b89      	subs	r1, r1, r6
 8010842:	2908      	cmp	r1, #8
 8010844:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8010848:	dc02      	bgt.n	8010850 <_strtod_l+0x2e8>
 801084a:	4576      	cmp	r6, lr
 801084c:	bfa8      	it	ge
 801084e:	4676      	movge	r6, lr
 8010850:	f1bc 0f00 	cmp.w	ip, #0
 8010854:	d000      	beq.n	8010858 <_strtod_l+0x2f0>
 8010856:	4276      	negs	r6, r6
 8010858:	2d00      	cmp	r5, #0
 801085a:	d14d      	bne.n	80108f8 <_strtod_l+0x390>
 801085c:	9904      	ldr	r1, [sp, #16]
 801085e:	4301      	orrs	r1, r0
 8010860:	f47f aec6 	bne.w	80105f0 <_strtod_l+0x88>
 8010864:	2b00      	cmp	r3, #0
 8010866:	f47f aee1 	bne.w	801062c <_strtod_l+0xc4>
 801086a:	2a69      	cmp	r2, #105	; 0x69
 801086c:	d027      	beq.n	80108be <_strtod_l+0x356>
 801086e:	dc24      	bgt.n	80108ba <_strtod_l+0x352>
 8010870:	2a49      	cmp	r2, #73	; 0x49
 8010872:	d024      	beq.n	80108be <_strtod_l+0x356>
 8010874:	2a4e      	cmp	r2, #78	; 0x4e
 8010876:	f47f aed9 	bne.w	801062c <_strtod_l+0xc4>
 801087a:	499f      	ldr	r1, [pc, #636]	; (8010af8 <_strtod_l+0x590>)
 801087c:	a817      	add	r0, sp, #92	; 0x5c
 801087e:	f001 fe85 	bl	801258c <__match>
 8010882:	2800      	cmp	r0, #0
 8010884:	f43f aed2 	beq.w	801062c <_strtod_l+0xc4>
 8010888:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801088a:	781b      	ldrb	r3, [r3, #0]
 801088c:	2b28      	cmp	r3, #40	; 0x28
 801088e:	d12d      	bne.n	80108ec <_strtod_l+0x384>
 8010890:	499a      	ldr	r1, [pc, #616]	; (8010afc <_strtod_l+0x594>)
 8010892:	aa1a      	add	r2, sp, #104	; 0x68
 8010894:	a817      	add	r0, sp, #92	; 0x5c
 8010896:	f001 fe8d 	bl	80125b4 <__hexnan>
 801089a:	2805      	cmp	r0, #5
 801089c:	d126      	bne.n	80108ec <_strtod_l+0x384>
 801089e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80108a0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80108a4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80108a8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80108ac:	e6a0      	b.n	80105f0 <_strtod_l+0x88>
 80108ae:	210a      	movs	r1, #10
 80108b0:	fb01 2e0e 	mla	lr, r1, lr, r2
 80108b4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80108b8:	e7b9      	b.n	801082e <_strtod_l+0x2c6>
 80108ba:	2a6e      	cmp	r2, #110	; 0x6e
 80108bc:	e7db      	b.n	8010876 <_strtod_l+0x30e>
 80108be:	4990      	ldr	r1, [pc, #576]	; (8010b00 <_strtod_l+0x598>)
 80108c0:	a817      	add	r0, sp, #92	; 0x5c
 80108c2:	f001 fe63 	bl	801258c <__match>
 80108c6:	2800      	cmp	r0, #0
 80108c8:	f43f aeb0 	beq.w	801062c <_strtod_l+0xc4>
 80108cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80108ce:	498d      	ldr	r1, [pc, #564]	; (8010b04 <_strtod_l+0x59c>)
 80108d0:	3b01      	subs	r3, #1
 80108d2:	a817      	add	r0, sp, #92	; 0x5c
 80108d4:	9317      	str	r3, [sp, #92]	; 0x5c
 80108d6:	f001 fe59 	bl	801258c <__match>
 80108da:	b910      	cbnz	r0, 80108e2 <_strtod_l+0x37a>
 80108dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80108de:	3301      	adds	r3, #1
 80108e0:	9317      	str	r3, [sp, #92]	; 0x5c
 80108e2:	f8df b230 	ldr.w	fp, [pc, #560]	; 8010b14 <_strtod_l+0x5ac>
 80108e6:	f04f 0a00 	mov.w	sl, #0
 80108ea:	e681      	b.n	80105f0 <_strtod_l+0x88>
 80108ec:	4886      	ldr	r0, [pc, #536]	; (8010b08 <_strtod_l+0x5a0>)
 80108ee:	f002 fd3f 	bl	8013370 <nan>
 80108f2:	ec5b ab10 	vmov	sl, fp, d0
 80108f6:	e67b      	b.n	80105f0 <_strtod_l+0x88>
 80108f8:	9b05      	ldr	r3, [sp, #20]
 80108fa:	9807      	ldr	r0, [sp, #28]
 80108fc:	1af3      	subs	r3, r6, r3
 80108fe:	2f00      	cmp	r7, #0
 8010900:	bf08      	it	eq
 8010902:	462f      	moveq	r7, r5
 8010904:	2d10      	cmp	r5, #16
 8010906:	9306      	str	r3, [sp, #24]
 8010908:	46a8      	mov	r8, r5
 801090a:	bfa8      	it	ge
 801090c:	f04f 0810 	movge.w	r8, #16
 8010910:	f7ef fdf8 	bl	8000504 <__aeabi_ui2d>
 8010914:	2d09      	cmp	r5, #9
 8010916:	4682      	mov	sl, r0
 8010918:	468b      	mov	fp, r1
 801091a:	dd13      	ble.n	8010944 <_strtod_l+0x3dc>
 801091c:	4b7b      	ldr	r3, [pc, #492]	; (8010b0c <_strtod_l+0x5a4>)
 801091e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8010922:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8010926:	f7ef fe67 	bl	80005f8 <__aeabi_dmul>
 801092a:	4682      	mov	sl, r0
 801092c:	4648      	mov	r0, r9
 801092e:	468b      	mov	fp, r1
 8010930:	f7ef fde8 	bl	8000504 <__aeabi_ui2d>
 8010934:	4602      	mov	r2, r0
 8010936:	460b      	mov	r3, r1
 8010938:	4650      	mov	r0, sl
 801093a:	4659      	mov	r1, fp
 801093c:	f7ef fca6 	bl	800028c <__adddf3>
 8010940:	4682      	mov	sl, r0
 8010942:	468b      	mov	fp, r1
 8010944:	2d0f      	cmp	r5, #15
 8010946:	dc38      	bgt.n	80109ba <_strtod_l+0x452>
 8010948:	9b06      	ldr	r3, [sp, #24]
 801094a:	2b00      	cmp	r3, #0
 801094c:	f43f ae50 	beq.w	80105f0 <_strtod_l+0x88>
 8010950:	dd24      	ble.n	801099c <_strtod_l+0x434>
 8010952:	2b16      	cmp	r3, #22
 8010954:	dc0b      	bgt.n	801096e <_strtod_l+0x406>
 8010956:	496d      	ldr	r1, [pc, #436]	; (8010b0c <_strtod_l+0x5a4>)
 8010958:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801095c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010960:	4652      	mov	r2, sl
 8010962:	465b      	mov	r3, fp
 8010964:	f7ef fe48 	bl	80005f8 <__aeabi_dmul>
 8010968:	4682      	mov	sl, r0
 801096a:	468b      	mov	fp, r1
 801096c:	e640      	b.n	80105f0 <_strtod_l+0x88>
 801096e:	9a06      	ldr	r2, [sp, #24]
 8010970:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8010974:	4293      	cmp	r3, r2
 8010976:	db20      	blt.n	80109ba <_strtod_l+0x452>
 8010978:	4c64      	ldr	r4, [pc, #400]	; (8010b0c <_strtod_l+0x5a4>)
 801097a:	f1c5 050f 	rsb	r5, r5, #15
 801097e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8010982:	4652      	mov	r2, sl
 8010984:	465b      	mov	r3, fp
 8010986:	e9d1 0100 	ldrd	r0, r1, [r1]
 801098a:	f7ef fe35 	bl	80005f8 <__aeabi_dmul>
 801098e:	9b06      	ldr	r3, [sp, #24]
 8010990:	1b5d      	subs	r5, r3, r5
 8010992:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8010996:	e9d4 2300 	ldrd	r2, r3, [r4]
 801099a:	e7e3      	b.n	8010964 <_strtod_l+0x3fc>
 801099c:	9b06      	ldr	r3, [sp, #24]
 801099e:	3316      	adds	r3, #22
 80109a0:	db0b      	blt.n	80109ba <_strtod_l+0x452>
 80109a2:	9b05      	ldr	r3, [sp, #20]
 80109a4:	1b9e      	subs	r6, r3, r6
 80109a6:	4b59      	ldr	r3, [pc, #356]	; (8010b0c <_strtod_l+0x5a4>)
 80109a8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80109ac:	e9d6 2300 	ldrd	r2, r3, [r6]
 80109b0:	4650      	mov	r0, sl
 80109b2:	4659      	mov	r1, fp
 80109b4:	f7ef ff4a 	bl	800084c <__aeabi_ddiv>
 80109b8:	e7d6      	b.n	8010968 <_strtod_l+0x400>
 80109ba:	9b06      	ldr	r3, [sp, #24]
 80109bc:	eba5 0808 	sub.w	r8, r5, r8
 80109c0:	4498      	add	r8, r3
 80109c2:	f1b8 0f00 	cmp.w	r8, #0
 80109c6:	dd74      	ble.n	8010ab2 <_strtod_l+0x54a>
 80109c8:	f018 030f 	ands.w	r3, r8, #15
 80109cc:	d00a      	beq.n	80109e4 <_strtod_l+0x47c>
 80109ce:	494f      	ldr	r1, [pc, #316]	; (8010b0c <_strtod_l+0x5a4>)
 80109d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80109d4:	4652      	mov	r2, sl
 80109d6:	465b      	mov	r3, fp
 80109d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80109dc:	f7ef fe0c 	bl	80005f8 <__aeabi_dmul>
 80109e0:	4682      	mov	sl, r0
 80109e2:	468b      	mov	fp, r1
 80109e4:	f038 080f 	bics.w	r8, r8, #15
 80109e8:	d04f      	beq.n	8010a8a <_strtod_l+0x522>
 80109ea:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80109ee:	dd22      	ble.n	8010a36 <_strtod_l+0x4ce>
 80109f0:	2500      	movs	r5, #0
 80109f2:	462e      	mov	r6, r5
 80109f4:	9507      	str	r5, [sp, #28]
 80109f6:	9505      	str	r5, [sp, #20]
 80109f8:	2322      	movs	r3, #34	; 0x22
 80109fa:	f8df b118 	ldr.w	fp, [pc, #280]	; 8010b14 <_strtod_l+0x5ac>
 80109fe:	6023      	str	r3, [r4, #0]
 8010a00:	f04f 0a00 	mov.w	sl, #0
 8010a04:	9b07      	ldr	r3, [sp, #28]
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	f43f adf2 	beq.w	80105f0 <_strtod_l+0x88>
 8010a0c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010a0e:	4620      	mov	r0, r4
 8010a10:	f001 fed2 	bl	80127b8 <_Bfree>
 8010a14:	9905      	ldr	r1, [sp, #20]
 8010a16:	4620      	mov	r0, r4
 8010a18:	f001 fece 	bl	80127b8 <_Bfree>
 8010a1c:	4631      	mov	r1, r6
 8010a1e:	4620      	mov	r0, r4
 8010a20:	f001 feca 	bl	80127b8 <_Bfree>
 8010a24:	9907      	ldr	r1, [sp, #28]
 8010a26:	4620      	mov	r0, r4
 8010a28:	f001 fec6 	bl	80127b8 <_Bfree>
 8010a2c:	4629      	mov	r1, r5
 8010a2e:	4620      	mov	r0, r4
 8010a30:	f001 fec2 	bl	80127b8 <_Bfree>
 8010a34:	e5dc      	b.n	80105f0 <_strtod_l+0x88>
 8010a36:	4b36      	ldr	r3, [pc, #216]	; (8010b10 <_strtod_l+0x5a8>)
 8010a38:	9304      	str	r3, [sp, #16]
 8010a3a:	2300      	movs	r3, #0
 8010a3c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8010a40:	4650      	mov	r0, sl
 8010a42:	4659      	mov	r1, fp
 8010a44:	4699      	mov	r9, r3
 8010a46:	f1b8 0f01 	cmp.w	r8, #1
 8010a4a:	dc21      	bgt.n	8010a90 <_strtod_l+0x528>
 8010a4c:	b10b      	cbz	r3, 8010a52 <_strtod_l+0x4ea>
 8010a4e:	4682      	mov	sl, r0
 8010a50:	468b      	mov	fp, r1
 8010a52:	4b2f      	ldr	r3, [pc, #188]	; (8010b10 <_strtod_l+0x5a8>)
 8010a54:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8010a58:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8010a5c:	4652      	mov	r2, sl
 8010a5e:	465b      	mov	r3, fp
 8010a60:	e9d9 0100 	ldrd	r0, r1, [r9]
 8010a64:	f7ef fdc8 	bl	80005f8 <__aeabi_dmul>
 8010a68:	4b2a      	ldr	r3, [pc, #168]	; (8010b14 <_strtod_l+0x5ac>)
 8010a6a:	460a      	mov	r2, r1
 8010a6c:	400b      	ands	r3, r1
 8010a6e:	492a      	ldr	r1, [pc, #168]	; (8010b18 <_strtod_l+0x5b0>)
 8010a70:	428b      	cmp	r3, r1
 8010a72:	4682      	mov	sl, r0
 8010a74:	d8bc      	bhi.n	80109f0 <_strtod_l+0x488>
 8010a76:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8010a7a:	428b      	cmp	r3, r1
 8010a7c:	bf86      	itte	hi
 8010a7e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8010b1c <_strtod_l+0x5b4>
 8010a82:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8010a86:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8010a8a:	2300      	movs	r3, #0
 8010a8c:	9304      	str	r3, [sp, #16]
 8010a8e:	e084      	b.n	8010b9a <_strtod_l+0x632>
 8010a90:	f018 0f01 	tst.w	r8, #1
 8010a94:	d005      	beq.n	8010aa2 <_strtod_l+0x53a>
 8010a96:	9b04      	ldr	r3, [sp, #16]
 8010a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a9c:	f7ef fdac 	bl	80005f8 <__aeabi_dmul>
 8010aa0:	2301      	movs	r3, #1
 8010aa2:	9a04      	ldr	r2, [sp, #16]
 8010aa4:	3208      	adds	r2, #8
 8010aa6:	f109 0901 	add.w	r9, r9, #1
 8010aaa:	ea4f 0868 	mov.w	r8, r8, asr #1
 8010aae:	9204      	str	r2, [sp, #16]
 8010ab0:	e7c9      	b.n	8010a46 <_strtod_l+0x4de>
 8010ab2:	d0ea      	beq.n	8010a8a <_strtod_l+0x522>
 8010ab4:	f1c8 0800 	rsb	r8, r8, #0
 8010ab8:	f018 020f 	ands.w	r2, r8, #15
 8010abc:	d00a      	beq.n	8010ad4 <_strtod_l+0x56c>
 8010abe:	4b13      	ldr	r3, [pc, #76]	; (8010b0c <_strtod_l+0x5a4>)
 8010ac0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010ac4:	4650      	mov	r0, sl
 8010ac6:	4659      	mov	r1, fp
 8010ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010acc:	f7ef febe 	bl	800084c <__aeabi_ddiv>
 8010ad0:	4682      	mov	sl, r0
 8010ad2:	468b      	mov	fp, r1
 8010ad4:	ea5f 1828 	movs.w	r8, r8, asr #4
 8010ad8:	d0d7      	beq.n	8010a8a <_strtod_l+0x522>
 8010ada:	f1b8 0f1f 	cmp.w	r8, #31
 8010ade:	dd1f      	ble.n	8010b20 <_strtod_l+0x5b8>
 8010ae0:	2500      	movs	r5, #0
 8010ae2:	462e      	mov	r6, r5
 8010ae4:	9507      	str	r5, [sp, #28]
 8010ae6:	9505      	str	r5, [sp, #20]
 8010ae8:	2322      	movs	r3, #34	; 0x22
 8010aea:	f04f 0a00 	mov.w	sl, #0
 8010aee:	f04f 0b00 	mov.w	fp, #0
 8010af2:	6023      	str	r3, [r4, #0]
 8010af4:	e786      	b.n	8010a04 <_strtod_l+0x49c>
 8010af6:	bf00      	nop
 8010af8:	080158f9 	.word	0x080158f9
 8010afc:	08015934 	.word	0x08015934
 8010b00:	080158f1 	.word	0x080158f1
 8010b04:	08015973 	.word	0x08015973
 8010b08:	08015c20 	.word	0x08015c20
 8010b0c:	08015b00 	.word	0x08015b00
 8010b10:	08015ad8 	.word	0x08015ad8
 8010b14:	7ff00000 	.word	0x7ff00000
 8010b18:	7ca00000 	.word	0x7ca00000
 8010b1c:	7fefffff 	.word	0x7fefffff
 8010b20:	f018 0310 	ands.w	r3, r8, #16
 8010b24:	bf18      	it	ne
 8010b26:	236a      	movne	r3, #106	; 0x6a
 8010b28:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8010ed8 <_strtod_l+0x970>
 8010b2c:	9304      	str	r3, [sp, #16]
 8010b2e:	4650      	mov	r0, sl
 8010b30:	4659      	mov	r1, fp
 8010b32:	2300      	movs	r3, #0
 8010b34:	f018 0f01 	tst.w	r8, #1
 8010b38:	d004      	beq.n	8010b44 <_strtod_l+0x5dc>
 8010b3a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8010b3e:	f7ef fd5b 	bl	80005f8 <__aeabi_dmul>
 8010b42:	2301      	movs	r3, #1
 8010b44:	ea5f 0868 	movs.w	r8, r8, asr #1
 8010b48:	f109 0908 	add.w	r9, r9, #8
 8010b4c:	d1f2      	bne.n	8010b34 <_strtod_l+0x5cc>
 8010b4e:	b10b      	cbz	r3, 8010b54 <_strtod_l+0x5ec>
 8010b50:	4682      	mov	sl, r0
 8010b52:	468b      	mov	fp, r1
 8010b54:	9b04      	ldr	r3, [sp, #16]
 8010b56:	b1c3      	cbz	r3, 8010b8a <_strtod_l+0x622>
 8010b58:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8010b5c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	4659      	mov	r1, fp
 8010b64:	dd11      	ble.n	8010b8a <_strtod_l+0x622>
 8010b66:	2b1f      	cmp	r3, #31
 8010b68:	f340 8124 	ble.w	8010db4 <_strtod_l+0x84c>
 8010b6c:	2b34      	cmp	r3, #52	; 0x34
 8010b6e:	bfde      	ittt	le
 8010b70:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8010b74:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8010b78:	fa03 f202 	lslle.w	r2, r3, r2
 8010b7c:	f04f 0a00 	mov.w	sl, #0
 8010b80:	bfcc      	ite	gt
 8010b82:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8010b86:	ea02 0b01 	andle.w	fp, r2, r1
 8010b8a:	2200      	movs	r2, #0
 8010b8c:	2300      	movs	r3, #0
 8010b8e:	4650      	mov	r0, sl
 8010b90:	4659      	mov	r1, fp
 8010b92:	f7ef ff99 	bl	8000ac8 <__aeabi_dcmpeq>
 8010b96:	2800      	cmp	r0, #0
 8010b98:	d1a2      	bne.n	8010ae0 <_strtod_l+0x578>
 8010b9a:	9b07      	ldr	r3, [sp, #28]
 8010b9c:	9300      	str	r3, [sp, #0]
 8010b9e:	9908      	ldr	r1, [sp, #32]
 8010ba0:	462b      	mov	r3, r5
 8010ba2:	463a      	mov	r2, r7
 8010ba4:	4620      	mov	r0, r4
 8010ba6:	f001 fe6f 	bl	8012888 <__s2b>
 8010baa:	9007      	str	r0, [sp, #28]
 8010bac:	2800      	cmp	r0, #0
 8010bae:	f43f af1f 	beq.w	80109f0 <_strtod_l+0x488>
 8010bb2:	9b05      	ldr	r3, [sp, #20]
 8010bb4:	1b9e      	subs	r6, r3, r6
 8010bb6:	9b06      	ldr	r3, [sp, #24]
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	bfb4      	ite	lt
 8010bbc:	4633      	movlt	r3, r6
 8010bbe:	2300      	movge	r3, #0
 8010bc0:	930c      	str	r3, [sp, #48]	; 0x30
 8010bc2:	9b06      	ldr	r3, [sp, #24]
 8010bc4:	2500      	movs	r5, #0
 8010bc6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010bca:	9312      	str	r3, [sp, #72]	; 0x48
 8010bcc:	462e      	mov	r6, r5
 8010bce:	9b07      	ldr	r3, [sp, #28]
 8010bd0:	4620      	mov	r0, r4
 8010bd2:	6859      	ldr	r1, [r3, #4]
 8010bd4:	f001 fdb0 	bl	8012738 <_Balloc>
 8010bd8:	9005      	str	r0, [sp, #20]
 8010bda:	2800      	cmp	r0, #0
 8010bdc:	f43f af0c 	beq.w	80109f8 <_strtod_l+0x490>
 8010be0:	9b07      	ldr	r3, [sp, #28]
 8010be2:	691a      	ldr	r2, [r3, #16]
 8010be4:	3202      	adds	r2, #2
 8010be6:	f103 010c 	add.w	r1, r3, #12
 8010bea:	0092      	lsls	r2, r2, #2
 8010bec:	300c      	adds	r0, #12
 8010bee:	f7fe fec1 	bl	800f974 <memcpy>
 8010bf2:	ec4b ab10 	vmov	d0, sl, fp
 8010bf6:	aa1a      	add	r2, sp, #104	; 0x68
 8010bf8:	a919      	add	r1, sp, #100	; 0x64
 8010bfa:	4620      	mov	r0, r4
 8010bfc:	f002 f98a 	bl	8012f14 <__d2b>
 8010c00:	ec4b ab18 	vmov	d8, sl, fp
 8010c04:	9018      	str	r0, [sp, #96]	; 0x60
 8010c06:	2800      	cmp	r0, #0
 8010c08:	f43f aef6 	beq.w	80109f8 <_strtod_l+0x490>
 8010c0c:	2101      	movs	r1, #1
 8010c0e:	4620      	mov	r0, r4
 8010c10:	f001 fed4 	bl	80129bc <__i2b>
 8010c14:	4606      	mov	r6, r0
 8010c16:	2800      	cmp	r0, #0
 8010c18:	f43f aeee 	beq.w	80109f8 <_strtod_l+0x490>
 8010c1c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8010c1e:	9904      	ldr	r1, [sp, #16]
 8010c20:	2b00      	cmp	r3, #0
 8010c22:	bfab      	itete	ge
 8010c24:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8010c26:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8010c28:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8010c2a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8010c2e:	bfac      	ite	ge
 8010c30:	eb03 0902 	addge.w	r9, r3, r2
 8010c34:	1ad7      	sublt	r7, r2, r3
 8010c36:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8010c38:	eba3 0801 	sub.w	r8, r3, r1
 8010c3c:	4490      	add	r8, r2
 8010c3e:	4ba1      	ldr	r3, [pc, #644]	; (8010ec4 <_strtod_l+0x95c>)
 8010c40:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8010c44:	4598      	cmp	r8, r3
 8010c46:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8010c4a:	f280 80c7 	bge.w	8010ddc <_strtod_l+0x874>
 8010c4e:	eba3 0308 	sub.w	r3, r3, r8
 8010c52:	2b1f      	cmp	r3, #31
 8010c54:	eba2 0203 	sub.w	r2, r2, r3
 8010c58:	f04f 0101 	mov.w	r1, #1
 8010c5c:	f300 80b1 	bgt.w	8010dc2 <_strtod_l+0x85a>
 8010c60:	fa01 f303 	lsl.w	r3, r1, r3
 8010c64:	930d      	str	r3, [sp, #52]	; 0x34
 8010c66:	2300      	movs	r3, #0
 8010c68:	9308      	str	r3, [sp, #32]
 8010c6a:	eb09 0802 	add.w	r8, r9, r2
 8010c6e:	9b04      	ldr	r3, [sp, #16]
 8010c70:	45c1      	cmp	r9, r8
 8010c72:	4417      	add	r7, r2
 8010c74:	441f      	add	r7, r3
 8010c76:	464b      	mov	r3, r9
 8010c78:	bfa8      	it	ge
 8010c7a:	4643      	movge	r3, r8
 8010c7c:	42bb      	cmp	r3, r7
 8010c7e:	bfa8      	it	ge
 8010c80:	463b      	movge	r3, r7
 8010c82:	2b00      	cmp	r3, #0
 8010c84:	bfc2      	ittt	gt
 8010c86:	eba8 0803 	subgt.w	r8, r8, r3
 8010c8a:	1aff      	subgt	r7, r7, r3
 8010c8c:	eba9 0903 	subgt.w	r9, r9, r3
 8010c90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	dd17      	ble.n	8010cc6 <_strtod_l+0x75e>
 8010c96:	4631      	mov	r1, r6
 8010c98:	461a      	mov	r2, r3
 8010c9a:	4620      	mov	r0, r4
 8010c9c:	f001 ff4e 	bl	8012b3c <__pow5mult>
 8010ca0:	4606      	mov	r6, r0
 8010ca2:	2800      	cmp	r0, #0
 8010ca4:	f43f aea8 	beq.w	80109f8 <_strtod_l+0x490>
 8010ca8:	4601      	mov	r1, r0
 8010caa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8010cac:	4620      	mov	r0, r4
 8010cae:	f001 fe9b 	bl	80129e8 <__multiply>
 8010cb2:	900b      	str	r0, [sp, #44]	; 0x2c
 8010cb4:	2800      	cmp	r0, #0
 8010cb6:	f43f ae9f 	beq.w	80109f8 <_strtod_l+0x490>
 8010cba:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010cbc:	4620      	mov	r0, r4
 8010cbe:	f001 fd7b 	bl	80127b8 <_Bfree>
 8010cc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010cc4:	9318      	str	r3, [sp, #96]	; 0x60
 8010cc6:	f1b8 0f00 	cmp.w	r8, #0
 8010cca:	f300 808c 	bgt.w	8010de6 <_strtod_l+0x87e>
 8010cce:	9b06      	ldr	r3, [sp, #24]
 8010cd0:	2b00      	cmp	r3, #0
 8010cd2:	dd08      	ble.n	8010ce6 <_strtod_l+0x77e>
 8010cd4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010cd6:	9905      	ldr	r1, [sp, #20]
 8010cd8:	4620      	mov	r0, r4
 8010cda:	f001 ff2f 	bl	8012b3c <__pow5mult>
 8010cde:	9005      	str	r0, [sp, #20]
 8010ce0:	2800      	cmp	r0, #0
 8010ce2:	f43f ae89 	beq.w	80109f8 <_strtod_l+0x490>
 8010ce6:	2f00      	cmp	r7, #0
 8010ce8:	dd08      	ble.n	8010cfc <_strtod_l+0x794>
 8010cea:	9905      	ldr	r1, [sp, #20]
 8010cec:	463a      	mov	r2, r7
 8010cee:	4620      	mov	r0, r4
 8010cf0:	f001 ff7e 	bl	8012bf0 <__lshift>
 8010cf4:	9005      	str	r0, [sp, #20]
 8010cf6:	2800      	cmp	r0, #0
 8010cf8:	f43f ae7e 	beq.w	80109f8 <_strtod_l+0x490>
 8010cfc:	f1b9 0f00 	cmp.w	r9, #0
 8010d00:	dd08      	ble.n	8010d14 <_strtod_l+0x7ac>
 8010d02:	4631      	mov	r1, r6
 8010d04:	464a      	mov	r2, r9
 8010d06:	4620      	mov	r0, r4
 8010d08:	f001 ff72 	bl	8012bf0 <__lshift>
 8010d0c:	4606      	mov	r6, r0
 8010d0e:	2800      	cmp	r0, #0
 8010d10:	f43f ae72 	beq.w	80109f8 <_strtod_l+0x490>
 8010d14:	9a05      	ldr	r2, [sp, #20]
 8010d16:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010d18:	4620      	mov	r0, r4
 8010d1a:	f001 fff5 	bl	8012d08 <__mdiff>
 8010d1e:	4605      	mov	r5, r0
 8010d20:	2800      	cmp	r0, #0
 8010d22:	f43f ae69 	beq.w	80109f8 <_strtod_l+0x490>
 8010d26:	68c3      	ldr	r3, [r0, #12]
 8010d28:	930b      	str	r3, [sp, #44]	; 0x2c
 8010d2a:	2300      	movs	r3, #0
 8010d2c:	60c3      	str	r3, [r0, #12]
 8010d2e:	4631      	mov	r1, r6
 8010d30:	f001 ffce 	bl	8012cd0 <__mcmp>
 8010d34:	2800      	cmp	r0, #0
 8010d36:	da60      	bge.n	8010dfa <_strtod_l+0x892>
 8010d38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010d3a:	ea53 030a 	orrs.w	r3, r3, sl
 8010d3e:	f040 8082 	bne.w	8010e46 <_strtod_l+0x8de>
 8010d42:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	d17d      	bne.n	8010e46 <_strtod_l+0x8de>
 8010d4a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010d4e:	0d1b      	lsrs	r3, r3, #20
 8010d50:	051b      	lsls	r3, r3, #20
 8010d52:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8010d56:	d976      	bls.n	8010e46 <_strtod_l+0x8de>
 8010d58:	696b      	ldr	r3, [r5, #20]
 8010d5a:	b913      	cbnz	r3, 8010d62 <_strtod_l+0x7fa>
 8010d5c:	692b      	ldr	r3, [r5, #16]
 8010d5e:	2b01      	cmp	r3, #1
 8010d60:	dd71      	ble.n	8010e46 <_strtod_l+0x8de>
 8010d62:	4629      	mov	r1, r5
 8010d64:	2201      	movs	r2, #1
 8010d66:	4620      	mov	r0, r4
 8010d68:	f001 ff42 	bl	8012bf0 <__lshift>
 8010d6c:	4631      	mov	r1, r6
 8010d6e:	4605      	mov	r5, r0
 8010d70:	f001 ffae 	bl	8012cd0 <__mcmp>
 8010d74:	2800      	cmp	r0, #0
 8010d76:	dd66      	ble.n	8010e46 <_strtod_l+0x8de>
 8010d78:	9904      	ldr	r1, [sp, #16]
 8010d7a:	4a53      	ldr	r2, [pc, #332]	; (8010ec8 <_strtod_l+0x960>)
 8010d7c:	465b      	mov	r3, fp
 8010d7e:	2900      	cmp	r1, #0
 8010d80:	f000 8081 	beq.w	8010e86 <_strtod_l+0x91e>
 8010d84:	ea02 010b 	and.w	r1, r2, fp
 8010d88:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8010d8c:	dc7b      	bgt.n	8010e86 <_strtod_l+0x91e>
 8010d8e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8010d92:	f77f aea9 	ble.w	8010ae8 <_strtod_l+0x580>
 8010d96:	4b4d      	ldr	r3, [pc, #308]	; (8010ecc <_strtod_l+0x964>)
 8010d98:	4650      	mov	r0, sl
 8010d9a:	4659      	mov	r1, fp
 8010d9c:	2200      	movs	r2, #0
 8010d9e:	f7ef fc2b 	bl	80005f8 <__aeabi_dmul>
 8010da2:	460b      	mov	r3, r1
 8010da4:	4303      	orrs	r3, r0
 8010da6:	bf08      	it	eq
 8010da8:	2322      	moveq	r3, #34	; 0x22
 8010daa:	4682      	mov	sl, r0
 8010dac:	468b      	mov	fp, r1
 8010dae:	bf08      	it	eq
 8010db0:	6023      	streq	r3, [r4, #0]
 8010db2:	e62b      	b.n	8010a0c <_strtod_l+0x4a4>
 8010db4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010db8:	fa02 f303 	lsl.w	r3, r2, r3
 8010dbc:	ea03 0a0a 	and.w	sl, r3, sl
 8010dc0:	e6e3      	b.n	8010b8a <_strtod_l+0x622>
 8010dc2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8010dc6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8010dca:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8010dce:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8010dd2:	fa01 f308 	lsl.w	r3, r1, r8
 8010dd6:	9308      	str	r3, [sp, #32]
 8010dd8:	910d      	str	r1, [sp, #52]	; 0x34
 8010dda:	e746      	b.n	8010c6a <_strtod_l+0x702>
 8010ddc:	2300      	movs	r3, #0
 8010dde:	9308      	str	r3, [sp, #32]
 8010de0:	2301      	movs	r3, #1
 8010de2:	930d      	str	r3, [sp, #52]	; 0x34
 8010de4:	e741      	b.n	8010c6a <_strtod_l+0x702>
 8010de6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010de8:	4642      	mov	r2, r8
 8010dea:	4620      	mov	r0, r4
 8010dec:	f001 ff00 	bl	8012bf0 <__lshift>
 8010df0:	9018      	str	r0, [sp, #96]	; 0x60
 8010df2:	2800      	cmp	r0, #0
 8010df4:	f47f af6b 	bne.w	8010cce <_strtod_l+0x766>
 8010df8:	e5fe      	b.n	80109f8 <_strtod_l+0x490>
 8010dfa:	465f      	mov	r7, fp
 8010dfc:	d16e      	bne.n	8010edc <_strtod_l+0x974>
 8010dfe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010e00:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010e04:	b342      	cbz	r2, 8010e58 <_strtod_l+0x8f0>
 8010e06:	4a32      	ldr	r2, [pc, #200]	; (8010ed0 <_strtod_l+0x968>)
 8010e08:	4293      	cmp	r3, r2
 8010e0a:	d128      	bne.n	8010e5e <_strtod_l+0x8f6>
 8010e0c:	9b04      	ldr	r3, [sp, #16]
 8010e0e:	4651      	mov	r1, sl
 8010e10:	b1eb      	cbz	r3, 8010e4e <_strtod_l+0x8e6>
 8010e12:	4b2d      	ldr	r3, [pc, #180]	; (8010ec8 <_strtod_l+0x960>)
 8010e14:	403b      	ands	r3, r7
 8010e16:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8010e1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010e1e:	d819      	bhi.n	8010e54 <_strtod_l+0x8ec>
 8010e20:	0d1b      	lsrs	r3, r3, #20
 8010e22:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010e26:	fa02 f303 	lsl.w	r3, r2, r3
 8010e2a:	4299      	cmp	r1, r3
 8010e2c:	d117      	bne.n	8010e5e <_strtod_l+0x8f6>
 8010e2e:	4b29      	ldr	r3, [pc, #164]	; (8010ed4 <_strtod_l+0x96c>)
 8010e30:	429f      	cmp	r7, r3
 8010e32:	d102      	bne.n	8010e3a <_strtod_l+0x8d2>
 8010e34:	3101      	adds	r1, #1
 8010e36:	f43f addf 	beq.w	80109f8 <_strtod_l+0x490>
 8010e3a:	4b23      	ldr	r3, [pc, #140]	; (8010ec8 <_strtod_l+0x960>)
 8010e3c:	403b      	ands	r3, r7
 8010e3e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8010e42:	f04f 0a00 	mov.w	sl, #0
 8010e46:	9b04      	ldr	r3, [sp, #16]
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	d1a4      	bne.n	8010d96 <_strtod_l+0x82e>
 8010e4c:	e5de      	b.n	8010a0c <_strtod_l+0x4a4>
 8010e4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010e52:	e7ea      	b.n	8010e2a <_strtod_l+0x8c2>
 8010e54:	4613      	mov	r3, r2
 8010e56:	e7e8      	b.n	8010e2a <_strtod_l+0x8c2>
 8010e58:	ea53 030a 	orrs.w	r3, r3, sl
 8010e5c:	d08c      	beq.n	8010d78 <_strtod_l+0x810>
 8010e5e:	9b08      	ldr	r3, [sp, #32]
 8010e60:	b1db      	cbz	r3, 8010e9a <_strtod_l+0x932>
 8010e62:	423b      	tst	r3, r7
 8010e64:	d0ef      	beq.n	8010e46 <_strtod_l+0x8de>
 8010e66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010e68:	9a04      	ldr	r2, [sp, #16]
 8010e6a:	4650      	mov	r0, sl
 8010e6c:	4659      	mov	r1, fp
 8010e6e:	b1c3      	cbz	r3, 8010ea2 <_strtod_l+0x93a>
 8010e70:	f7ff fb5d 	bl	801052e <sulp>
 8010e74:	4602      	mov	r2, r0
 8010e76:	460b      	mov	r3, r1
 8010e78:	ec51 0b18 	vmov	r0, r1, d8
 8010e7c:	f7ef fa06 	bl	800028c <__adddf3>
 8010e80:	4682      	mov	sl, r0
 8010e82:	468b      	mov	fp, r1
 8010e84:	e7df      	b.n	8010e46 <_strtod_l+0x8de>
 8010e86:	4013      	ands	r3, r2
 8010e88:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8010e8c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8010e90:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8010e94:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8010e98:	e7d5      	b.n	8010e46 <_strtod_l+0x8de>
 8010e9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010e9c:	ea13 0f0a 	tst.w	r3, sl
 8010ea0:	e7e0      	b.n	8010e64 <_strtod_l+0x8fc>
 8010ea2:	f7ff fb44 	bl	801052e <sulp>
 8010ea6:	4602      	mov	r2, r0
 8010ea8:	460b      	mov	r3, r1
 8010eaa:	ec51 0b18 	vmov	r0, r1, d8
 8010eae:	f7ef f9eb 	bl	8000288 <__aeabi_dsub>
 8010eb2:	2200      	movs	r2, #0
 8010eb4:	2300      	movs	r3, #0
 8010eb6:	4682      	mov	sl, r0
 8010eb8:	468b      	mov	fp, r1
 8010eba:	f7ef fe05 	bl	8000ac8 <__aeabi_dcmpeq>
 8010ebe:	2800      	cmp	r0, #0
 8010ec0:	d0c1      	beq.n	8010e46 <_strtod_l+0x8de>
 8010ec2:	e611      	b.n	8010ae8 <_strtod_l+0x580>
 8010ec4:	fffffc02 	.word	0xfffffc02
 8010ec8:	7ff00000 	.word	0x7ff00000
 8010ecc:	39500000 	.word	0x39500000
 8010ed0:	000fffff 	.word	0x000fffff
 8010ed4:	7fefffff 	.word	0x7fefffff
 8010ed8:	08015948 	.word	0x08015948
 8010edc:	4631      	mov	r1, r6
 8010ede:	4628      	mov	r0, r5
 8010ee0:	f002 f874 	bl	8012fcc <__ratio>
 8010ee4:	ec59 8b10 	vmov	r8, r9, d0
 8010ee8:	ee10 0a10 	vmov	r0, s0
 8010eec:	2200      	movs	r2, #0
 8010eee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010ef2:	4649      	mov	r1, r9
 8010ef4:	f7ef fdfc 	bl	8000af0 <__aeabi_dcmple>
 8010ef8:	2800      	cmp	r0, #0
 8010efa:	d07a      	beq.n	8010ff2 <_strtod_l+0xa8a>
 8010efc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	d04a      	beq.n	8010f98 <_strtod_l+0xa30>
 8010f02:	4b95      	ldr	r3, [pc, #596]	; (8011158 <_strtod_l+0xbf0>)
 8010f04:	2200      	movs	r2, #0
 8010f06:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010f0a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8011158 <_strtod_l+0xbf0>
 8010f0e:	f04f 0800 	mov.w	r8, #0
 8010f12:	4b92      	ldr	r3, [pc, #584]	; (801115c <_strtod_l+0xbf4>)
 8010f14:	403b      	ands	r3, r7
 8010f16:	930d      	str	r3, [sp, #52]	; 0x34
 8010f18:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010f1a:	4b91      	ldr	r3, [pc, #580]	; (8011160 <_strtod_l+0xbf8>)
 8010f1c:	429a      	cmp	r2, r3
 8010f1e:	f040 80b0 	bne.w	8011082 <_strtod_l+0xb1a>
 8010f22:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010f26:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8010f2a:	ec4b ab10 	vmov	d0, sl, fp
 8010f2e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010f32:	f001 ff73 	bl	8012e1c <__ulp>
 8010f36:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010f3a:	ec53 2b10 	vmov	r2, r3, d0
 8010f3e:	f7ef fb5b 	bl	80005f8 <__aeabi_dmul>
 8010f42:	4652      	mov	r2, sl
 8010f44:	465b      	mov	r3, fp
 8010f46:	f7ef f9a1 	bl	800028c <__adddf3>
 8010f4a:	460b      	mov	r3, r1
 8010f4c:	4983      	ldr	r1, [pc, #524]	; (801115c <_strtod_l+0xbf4>)
 8010f4e:	4a85      	ldr	r2, [pc, #532]	; (8011164 <_strtod_l+0xbfc>)
 8010f50:	4019      	ands	r1, r3
 8010f52:	4291      	cmp	r1, r2
 8010f54:	4682      	mov	sl, r0
 8010f56:	d960      	bls.n	801101a <_strtod_l+0xab2>
 8010f58:	ee18 3a90 	vmov	r3, s17
 8010f5c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8010f60:	4293      	cmp	r3, r2
 8010f62:	d104      	bne.n	8010f6e <_strtod_l+0xa06>
 8010f64:	ee18 3a10 	vmov	r3, s16
 8010f68:	3301      	adds	r3, #1
 8010f6a:	f43f ad45 	beq.w	80109f8 <_strtod_l+0x490>
 8010f6e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8011170 <_strtod_l+0xc08>
 8010f72:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8010f76:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010f78:	4620      	mov	r0, r4
 8010f7a:	f001 fc1d 	bl	80127b8 <_Bfree>
 8010f7e:	9905      	ldr	r1, [sp, #20]
 8010f80:	4620      	mov	r0, r4
 8010f82:	f001 fc19 	bl	80127b8 <_Bfree>
 8010f86:	4631      	mov	r1, r6
 8010f88:	4620      	mov	r0, r4
 8010f8a:	f001 fc15 	bl	80127b8 <_Bfree>
 8010f8e:	4629      	mov	r1, r5
 8010f90:	4620      	mov	r0, r4
 8010f92:	f001 fc11 	bl	80127b8 <_Bfree>
 8010f96:	e61a      	b.n	8010bce <_strtod_l+0x666>
 8010f98:	f1ba 0f00 	cmp.w	sl, #0
 8010f9c:	d11b      	bne.n	8010fd6 <_strtod_l+0xa6e>
 8010f9e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010fa2:	b9f3      	cbnz	r3, 8010fe2 <_strtod_l+0xa7a>
 8010fa4:	4b6c      	ldr	r3, [pc, #432]	; (8011158 <_strtod_l+0xbf0>)
 8010fa6:	2200      	movs	r2, #0
 8010fa8:	4640      	mov	r0, r8
 8010faa:	4649      	mov	r1, r9
 8010fac:	f7ef fd96 	bl	8000adc <__aeabi_dcmplt>
 8010fb0:	b9d0      	cbnz	r0, 8010fe8 <_strtod_l+0xa80>
 8010fb2:	4640      	mov	r0, r8
 8010fb4:	4649      	mov	r1, r9
 8010fb6:	4b6c      	ldr	r3, [pc, #432]	; (8011168 <_strtod_l+0xc00>)
 8010fb8:	2200      	movs	r2, #0
 8010fba:	f7ef fb1d 	bl	80005f8 <__aeabi_dmul>
 8010fbe:	4680      	mov	r8, r0
 8010fc0:	4689      	mov	r9, r1
 8010fc2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8010fc6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8010fca:	9315      	str	r3, [sp, #84]	; 0x54
 8010fcc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8010fd0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010fd4:	e79d      	b.n	8010f12 <_strtod_l+0x9aa>
 8010fd6:	f1ba 0f01 	cmp.w	sl, #1
 8010fda:	d102      	bne.n	8010fe2 <_strtod_l+0xa7a>
 8010fdc:	2f00      	cmp	r7, #0
 8010fde:	f43f ad83 	beq.w	8010ae8 <_strtod_l+0x580>
 8010fe2:	4b62      	ldr	r3, [pc, #392]	; (801116c <_strtod_l+0xc04>)
 8010fe4:	2200      	movs	r2, #0
 8010fe6:	e78e      	b.n	8010f06 <_strtod_l+0x99e>
 8010fe8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8011168 <_strtod_l+0xc00>
 8010fec:	f04f 0800 	mov.w	r8, #0
 8010ff0:	e7e7      	b.n	8010fc2 <_strtod_l+0xa5a>
 8010ff2:	4b5d      	ldr	r3, [pc, #372]	; (8011168 <_strtod_l+0xc00>)
 8010ff4:	4640      	mov	r0, r8
 8010ff6:	4649      	mov	r1, r9
 8010ff8:	2200      	movs	r2, #0
 8010ffa:	f7ef fafd 	bl	80005f8 <__aeabi_dmul>
 8010ffe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011000:	4680      	mov	r8, r0
 8011002:	4689      	mov	r9, r1
 8011004:	b933      	cbnz	r3, 8011014 <_strtod_l+0xaac>
 8011006:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801100a:	900e      	str	r0, [sp, #56]	; 0x38
 801100c:	930f      	str	r3, [sp, #60]	; 0x3c
 801100e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8011012:	e7dd      	b.n	8010fd0 <_strtod_l+0xa68>
 8011014:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8011018:	e7f9      	b.n	801100e <_strtod_l+0xaa6>
 801101a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801101e:	9b04      	ldr	r3, [sp, #16]
 8011020:	2b00      	cmp	r3, #0
 8011022:	d1a8      	bne.n	8010f76 <_strtod_l+0xa0e>
 8011024:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011028:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801102a:	0d1b      	lsrs	r3, r3, #20
 801102c:	051b      	lsls	r3, r3, #20
 801102e:	429a      	cmp	r2, r3
 8011030:	d1a1      	bne.n	8010f76 <_strtod_l+0xa0e>
 8011032:	4640      	mov	r0, r8
 8011034:	4649      	mov	r1, r9
 8011036:	f7ef fe8f 	bl	8000d58 <__aeabi_d2lz>
 801103a:	f7ef faaf 	bl	800059c <__aeabi_l2d>
 801103e:	4602      	mov	r2, r0
 8011040:	460b      	mov	r3, r1
 8011042:	4640      	mov	r0, r8
 8011044:	4649      	mov	r1, r9
 8011046:	f7ef f91f 	bl	8000288 <__aeabi_dsub>
 801104a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801104c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011050:	ea43 030a 	orr.w	r3, r3, sl
 8011054:	4313      	orrs	r3, r2
 8011056:	4680      	mov	r8, r0
 8011058:	4689      	mov	r9, r1
 801105a:	d055      	beq.n	8011108 <_strtod_l+0xba0>
 801105c:	a336      	add	r3, pc, #216	; (adr r3, 8011138 <_strtod_l+0xbd0>)
 801105e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011062:	f7ef fd3b 	bl	8000adc <__aeabi_dcmplt>
 8011066:	2800      	cmp	r0, #0
 8011068:	f47f acd0 	bne.w	8010a0c <_strtod_l+0x4a4>
 801106c:	a334      	add	r3, pc, #208	; (adr r3, 8011140 <_strtod_l+0xbd8>)
 801106e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011072:	4640      	mov	r0, r8
 8011074:	4649      	mov	r1, r9
 8011076:	f7ef fd4f 	bl	8000b18 <__aeabi_dcmpgt>
 801107a:	2800      	cmp	r0, #0
 801107c:	f43f af7b 	beq.w	8010f76 <_strtod_l+0xa0e>
 8011080:	e4c4      	b.n	8010a0c <_strtod_l+0x4a4>
 8011082:	9b04      	ldr	r3, [sp, #16]
 8011084:	b333      	cbz	r3, 80110d4 <_strtod_l+0xb6c>
 8011086:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011088:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801108c:	d822      	bhi.n	80110d4 <_strtod_l+0xb6c>
 801108e:	a32e      	add	r3, pc, #184	; (adr r3, 8011148 <_strtod_l+0xbe0>)
 8011090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011094:	4640      	mov	r0, r8
 8011096:	4649      	mov	r1, r9
 8011098:	f7ef fd2a 	bl	8000af0 <__aeabi_dcmple>
 801109c:	b1a0      	cbz	r0, 80110c8 <_strtod_l+0xb60>
 801109e:	4649      	mov	r1, r9
 80110a0:	4640      	mov	r0, r8
 80110a2:	f7ef fd81 	bl	8000ba8 <__aeabi_d2uiz>
 80110a6:	2801      	cmp	r0, #1
 80110a8:	bf38      	it	cc
 80110aa:	2001      	movcc	r0, #1
 80110ac:	f7ef fa2a 	bl	8000504 <__aeabi_ui2d>
 80110b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80110b2:	4680      	mov	r8, r0
 80110b4:	4689      	mov	r9, r1
 80110b6:	bb23      	cbnz	r3, 8011102 <_strtod_l+0xb9a>
 80110b8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80110bc:	9010      	str	r0, [sp, #64]	; 0x40
 80110be:	9311      	str	r3, [sp, #68]	; 0x44
 80110c0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80110c4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80110c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80110ca:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80110cc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80110d0:	1a9b      	subs	r3, r3, r2
 80110d2:	9309      	str	r3, [sp, #36]	; 0x24
 80110d4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80110d8:	eeb0 0a48 	vmov.f32	s0, s16
 80110dc:	eef0 0a68 	vmov.f32	s1, s17
 80110e0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80110e4:	f001 fe9a 	bl	8012e1c <__ulp>
 80110e8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80110ec:	ec53 2b10 	vmov	r2, r3, d0
 80110f0:	f7ef fa82 	bl	80005f8 <__aeabi_dmul>
 80110f4:	ec53 2b18 	vmov	r2, r3, d8
 80110f8:	f7ef f8c8 	bl	800028c <__adddf3>
 80110fc:	4682      	mov	sl, r0
 80110fe:	468b      	mov	fp, r1
 8011100:	e78d      	b.n	801101e <_strtod_l+0xab6>
 8011102:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8011106:	e7db      	b.n	80110c0 <_strtod_l+0xb58>
 8011108:	a311      	add	r3, pc, #68	; (adr r3, 8011150 <_strtod_l+0xbe8>)
 801110a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801110e:	f7ef fce5 	bl	8000adc <__aeabi_dcmplt>
 8011112:	e7b2      	b.n	801107a <_strtod_l+0xb12>
 8011114:	2300      	movs	r3, #0
 8011116:	930a      	str	r3, [sp, #40]	; 0x28
 8011118:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801111a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801111c:	6013      	str	r3, [r2, #0]
 801111e:	f7ff ba6b 	b.w	80105f8 <_strtod_l+0x90>
 8011122:	2a65      	cmp	r2, #101	; 0x65
 8011124:	f43f ab5f 	beq.w	80107e6 <_strtod_l+0x27e>
 8011128:	2a45      	cmp	r2, #69	; 0x45
 801112a:	f43f ab5c 	beq.w	80107e6 <_strtod_l+0x27e>
 801112e:	2301      	movs	r3, #1
 8011130:	f7ff bb94 	b.w	801085c <_strtod_l+0x2f4>
 8011134:	f3af 8000 	nop.w
 8011138:	94a03595 	.word	0x94a03595
 801113c:	3fdfffff 	.word	0x3fdfffff
 8011140:	35afe535 	.word	0x35afe535
 8011144:	3fe00000 	.word	0x3fe00000
 8011148:	ffc00000 	.word	0xffc00000
 801114c:	41dfffff 	.word	0x41dfffff
 8011150:	94a03595 	.word	0x94a03595
 8011154:	3fcfffff 	.word	0x3fcfffff
 8011158:	3ff00000 	.word	0x3ff00000
 801115c:	7ff00000 	.word	0x7ff00000
 8011160:	7fe00000 	.word	0x7fe00000
 8011164:	7c9fffff 	.word	0x7c9fffff
 8011168:	3fe00000 	.word	0x3fe00000
 801116c:	bff00000 	.word	0xbff00000
 8011170:	7fefffff 	.word	0x7fefffff

08011174 <strtod>:
 8011174:	460a      	mov	r2, r1
 8011176:	4601      	mov	r1, r0
 8011178:	4802      	ldr	r0, [pc, #8]	; (8011184 <strtod+0x10>)
 801117a:	4b03      	ldr	r3, [pc, #12]	; (8011188 <strtod+0x14>)
 801117c:	6800      	ldr	r0, [r0, #0]
 801117e:	f7ff b9f3 	b.w	8010568 <_strtod_l>
 8011182:	bf00      	nop
 8011184:	20000260 	.word	0x20000260
 8011188:	200002c8 	.word	0x200002c8

0801118c <_strtol_l.constprop.0>:
 801118c:	2b01      	cmp	r3, #1
 801118e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011192:	d001      	beq.n	8011198 <_strtol_l.constprop.0+0xc>
 8011194:	2b24      	cmp	r3, #36	; 0x24
 8011196:	d906      	bls.n	80111a6 <_strtol_l.constprop.0+0x1a>
 8011198:	f7fe fb06 	bl	800f7a8 <__errno>
 801119c:	2316      	movs	r3, #22
 801119e:	6003      	str	r3, [r0, #0]
 80111a0:	2000      	movs	r0, #0
 80111a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80111a6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801128c <_strtol_l.constprop.0+0x100>
 80111aa:	460d      	mov	r5, r1
 80111ac:	462e      	mov	r6, r5
 80111ae:	f815 4b01 	ldrb.w	r4, [r5], #1
 80111b2:	f814 700c 	ldrb.w	r7, [r4, ip]
 80111b6:	f017 0708 	ands.w	r7, r7, #8
 80111ba:	d1f7      	bne.n	80111ac <_strtol_l.constprop.0+0x20>
 80111bc:	2c2d      	cmp	r4, #45	; 0x2d
 80111be:	d132      	bne.n	8011226 <_strtol_l.constprop.0+0x9a>
 80111c0:	782c      	ldrb	r4, [r5, #0]
 80111c2:	2701      	movs	r7, #1
 80111c4:	1cb5      	adds	r5, r6, #2
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	d05b      	beq.n	8011282 <_strtol_l.constprop.0+0xf6>
 80111ca:	2b10      	cmp	r3, #16
 80111cc:	d109      	bne.n	80111e2 <_strtol_l.constprop.0+0x56>
 80111ce:	2c30      	cmp	r4, #48	; 0x30
 80111d0:	d107      	bne.n	80111e2 <_strtol_l.constprop.0+0x56>
 80111d2:	782c      	ldrb	r4, [r5, #0]
 80111d4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80111d8:	2c58      	cmp	r4, #88	; 0x58
 80111da:	d14d      	bne.n	8011278 <_strtol_l.constprop.0+0xec>
 80111dc:	786c      	ldrb	r4, [r5, #1]
 80111de:	2310      	movs	r3, #16
 80111e0:	3502      	adds	r5, #2
 80111e2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80111e6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80111ea:	f04f 0c00 	mov.w	ip, #0
 80111ee:	fbb8 f9f3 	udiv	r9, r8, r3
 80111f2:	4666      	mov	r6, ip
 80111f4:	fb03 8a19 	mls	sl, r3, r9, r8
 80111f8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80111fc:	f1be 0f09 	cmp.w	lr, #9
 8011200:	d816      	bhi.n	8011230 <_strtol_l.constprop.0+0xa4>
 8011202:	4674      	mov	r4, lr
 8011204:	42a3      	cmp	r3, r4
 8011206:	dd24      	ble.n	8011252 <_strtol_l.constprop.0+0xc6>
 8011208:	f1bc 0f00 	cmp.w	ip, #0
 801120c:	db1e      	blt.n	801124c <_strtol_l.constprop.0+0xc0>
 801120e:	45b1      	cmp	r9, r6
 8011210:	d31c      	bcc.n	801124c <_strtol_l.constprop.0+0xc0>
 8011212:	d101      	bne.n	8011218 <_strtol_l.constprop.0+0x8c>
 8011214:	45a2      	cmp	sl, r4
 8011216:	db19      	blt.n	801124c <_strtol_l.constprop.0+0xc0>
 8011218:	fb06 4603 	mla	r6, r6, r3, r4
 801121c:	f04f 0c01 	mov.w	ip, #1
 8011220:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011224:	e7e8      	b.n	80111f8 <_strtol_l.constprop.0+0x6c>
 8011226:	2c2b      	cmp	r4, #43	; 0x2b
 8011228:	bf04      	itt	eq
 801122a:	782c      	ldrbeq	r4, [r5, #0]
 801122c:	1cb5      	addeq	r5, r6, #2
 801122e:	e7ca      	b.n	80111c6 <_strtol_l.constprop.0+0x3a>
 8011230:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8011234:	f1be 0f19 	cmp.w	lr, #25
 8011238:	d801      	bhi.n	801123e <_strtol_l.constprop.0+0xb2>
 801123a:	3c37      	subs	r4, #55	; 0x37
 801123c:	e7e2      	b.n	8011204 <_strtol_l.constprop.0+0x78>
 801123e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8011242:	f1be 0f19 	cmp.w	lr, #25
 8011246:	d804      	bhi.n	8011252 <_strtol_l.constprop.0+0xc6>
 8011248:	3c57      	subs	r4, #87	; 0x57
 801124a:	e7db      	b.n	8011204 <_strtol_l.constprop.0+0x78>
 801124c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8011250:	e7e6      	b.n	8011220 <_strtol_l.constprop.0+0x94>
 8011252:	f1bc 0f00 	cmp.w	ip, #0
 8011256:	da05      	bge.n	8011264 <_strtol_l.constprop.0+0xd8>
 8011258:	2322      	movs	r3, #34	; 0x22
 801125a:	6003      	str	r3, [r0, #0]
 801125c:	4646      	mov	r6, r8
 801125e:	b942      	cbnz	r2, 8011272 <_strtol_l.constprop.0+0xe6>
 8011260:	4630      	mov	r0, r6
 8011262:	e79e      	b.n	80111a2 <_strtol_l.constprop.0+0x16>
 8011264:	b107      	cbz	r7, 8011268 <_strtol_l.constprop.0+0xdc>
 8011266:	4276      	negs	r6, r6
 8011268:	2a00      	cmp	r2, #0
 801126a:	d0f9      	beq.n	8011260 <_strtol_l.constprop.0+0xd4>
 801126c:	f1bc 0f00 	cmp.w	ip, #0
 8011270:	d000      	beq.n	8011274 <_strtol_l.constprop.0+0xe8>
 8011272:	1e69      	subs	r1, r5, #1
 8011274:	6011      	str	r1, [r2, #0]
 8011276:	e7f3      	b.n	8011260 <_strtol_l.constprop.0+0xd4>
 8011278:	2430      	movs	r4, #48	; 0x30
 801127a:	2b00      	cmp	r3, #0
 801127c:	d1b1      	bne.n	80111e2 <_strtol_l.constprop.0+0x56>
 801127e:	2308      	movs	r3, #8
 8011280:	e7af      	b.n	80111e2 <_strtol_l.constprop.0+0x56>
 8011282:	2c30      	cmp	r4, #48	; 0x30
 8011284:	d0a5      	beq.n	80111d2 <_strtol_l.constprop.0+0x46>
 8011286:	230a      	movs	r3, #10
 8011288:	e7ab      	b.n	80111e2 <_strtol_l.constprop.0+0x56>
 801128a:	bf00      	nop
 801128c:	080157e5 	.word	0x080157e5

08011290 <strtol>:
 8011290:	4613      	mov	r3, r2
 8011292:	460a      	mov	r2, r1
 8011294:	4601      	mov	r1, r0
 8011296:	4802      	ldr	r0, [pc, #8]	; (80112a0 <strtol+0x10>)
 8011298:	6800      	ldr	r0, [r0, #0]
 801129a:	f7ff bf77 	b.w	801118c <_strtol_l.constprop.0>
 801129e:	bf00      	nop
 80112a0:	20000260 	.word	0x20000260

080112a4 <_vsniprintf_r>:
 80112a4:	b530      	push	{r4, r5, lr}
 80112a6:	4614      	mov	r4, r2
 80112a8:	2c00      	cmp	r4, #0
 80112aa:	b09b      	sub	sp, #108	; 0x6c
 80112ac:	4605      	mov	r5, r0
 80112ae:	461a      	mov	r2, r3
 80112b0:	da05      	bge.n	80112be <_vsniprintf_r+0x1a>
 80112b2:	238b      	movs	r3, #139	; 0x8b
 80112b4:	6003      	str	r3, [r0, #0]
 80112b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80112ba:	b01b      	add	sp, #108	; 0x6c
 80112bc:	bd30      	pop	{r4, r5, pc}
 80112be:	f44f 7302 	mov.w	r3, #520	; 0x208
 80112c2:	f8ad 300c 	strh.w	r3, [sp, #12]
 80112c6:	bf14      	ite	ne
 80112c8:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80112cc:	4623      	moveq	r3, r4
 80112ce:	9302      	str	r3, [sp, #8]
 80112d0:	9305      	str	r3, [sp, #20]
 80112d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80112d6:	9100      	str	r1, [sp, #0]
 80112d8:	9104      	str	r1, [sp, #16]
 80112da:	f8ad 300e 	strh.w	r3, [sp, #14]
 80112de:	4669      	mov	r1, sp
 80112e0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80112e2:	f001 ff45 	bl	8013170 <_svfiprintf_r>
 80112e6:	1c43      	adds	r3, r0, #1
 80112e8:	bfbc      	itt	lt
 80112ea:	238b      	movlt	r3, #139	; 0x8b
 80112ec:	602b      	strlt	r3, [r5, #0]
 80112ee:	2c00      	cmp	r4, #0
 80112f0:	d0e3      	beq.n	80112ba <_vsniprintf_r+0x16>
 80112f2:	9b00      	ldr	r3, [sp, #0]
 80112f4:	2200      	movs	r2, #0
 80112f6:	701a      	strb	r2, [r3, #0]
 80112f8:	e7df      	b.n	80112ba <_vsniprintf_r+0x16>
	...

080112fc <vsniprintf>:
 80112fc:	b507      	push	{r0, r1, r2, lr}
 80112fe:	9300      	str	r3, [sp, #0]
 8011300:	4613      	mov	r3, r2
 8011302:	460a      	mov	r2, r1
 8011304:	4601      	mov	r1, r0
 8011306:	4803      	ldr	r0, [pc, #12]	; (8011314 <vsniprintf+0x18>)
 8011308:	6800      	ldr	r0, [r0, #0]
 801130a:	f7ff ffcb 	bl	80112a4 <_vsniprintf_r>
 801130e:	b003      	add	sp, #12
 8011310:	f85d fb04 	ldr.w	pc, [sp], #4
 8011314:	20000260 	.word	0x20000260

08011318 <quorem>:
 8011318:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801131c:	6903      	ldr	r3, [r0, #16]
 801131e:	690c      	ldr	r4, [r1, #16]
 8011320:	42a3      	cmp	r3, r4
 8011322:	4607      	mov	r7, r0
 8011324:	f2c0 8081 	blt.w	801142a <quorem+0x112>
 8011328:	3c01      	subs	r4, #1
 801132a:	f101 0814 	add.w	r8, r1, #20
 801132e:	f100 0514 	add.w	r5, r0, #20
 8011332:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011336:	9301      	str	r3, [sp, #4]
 8011338:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801133c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011340:	3301      	adds	r3, #1
 8011342:	429a      	cmp	r2, r3
 8011344:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8011348:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801134c:	fbb2 f6f3 	udiv	r6, r2, r3
 8011350:	d331      	bcc.n	80113b6 <quorem+0x9e>
 8011352:	f04f 0e00 	mov.w	lr, #0
 8011356:	4640      	mov	r0, r8
 8011358:	46ac      	mov	ip, r5
 801135a:	46f2      	mov	sl, lr
 801135c:	f850 2b04 	ldr.w	r2, [r0], #4
 8011360:	b293      	uxth	r3, r2
 8011362:	fb06 e303 	mla	r3, r6, r3, lr
 8011366:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801136a:	b29b      	uxth	r3, r3
 801136c:	ebaa 0303 	sub.w	r3, sl, r3
 8011370:	f8dc a000 	ldr.w	sl, [ip]
 8011374:	0c12      	lsrs	r2, r2, #16
 8011376:	fa13 f38a 	uxtah	r3, r3, sl
 801137a:	fb06 e202 	mla	r2, r6, r2, lr
 801137e:	9300      	str	r3, [sp, #0]
 8011380:	9b00      	ldr	r3, [sp, #0]
 8011382:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8011386:	b292      	uxth	r2, r2
 8011388:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801138c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011390:	f8bd 3000 	ldrh.w	r3, [sp]
 8011394:	4581      	cmp	r9, r0
 8011396:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801139a:	f84c 3b04 	str.w	r3, [ip], #4
 801139e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80113a2:	d2db      	bcs.n	801135c <quorem+0x44>
 80113a4:	f855 300b 	ldr.w	r3, [r5, fp]
 80113a8:	b92b      	cbnz	r3, 80113b6 <quorem+0x9e>
 80113aa:	9b01      	ldr	r3, [sp, #4]
 80113ac:	3b04      	subs	r3, #4
 80113ae:	429d      	cmp	r5, r3
 80113b0:	461a      	mov	r2, r3
 80113b2:	d32e      	bcc.n	8011412 <quorem+0xfa>
 80113b4:	613c      	str	r4, [r7, #16]
 80113b6:	4638      	mov	r0, r7
 80113b8:	f001 fc8a 	bl	8012cd0 <__mcmp>
 80113bc:	2800      	cmp	r0, #0
 80113be:	db24      	blt.n	801140a <quorem+0xf2>
 80113c0:	3601      	adds	r6, #1
 80113c2:	4628      	mov	r0, r5
 80113c4:	f04f 0c00 	mov.w	ip, #0
 80113c8:	f858 2b04 	ldr.w	r2, [r8], #4
 80113cc:	f8d0 e000 	ldr.w	lr, [r0]
 80113d0:	b293      	uxth	r3, r2
 80113d2:	ebac 0303 	sub.w	r3, ip, r3
 80113d6:	0c12      	lsrs	r2, r2, #16
 80113d8:	fa13 f38e 	uxtah	r3, r3, lr
 80113dc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80113e0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80113e4:	b29b      	uxth	r3, r3
 80113e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80113ea:	45c1      	cmp	r9, r8
 80113ec:	f840 3b04 	str.w	r3, [r0], #4
 80113f0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80113f4:	d2e8      	bcs.n	80113c8 <quorem+0xb0>
 80113f6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80113fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80113fe:	b922      	cbnz	r2, 801140a <quorem+0xf2>
 8011400:	3b04      	subs	r3, #4
 8011402:	429d      	cmp	r5, r3
 8011404:	461a      	mov	r2, r3
 8011406:	d30a      	bcc.n	801141e <quorem+0x106>
 8011408:	613c      	str	r4, [r7, #16]
 801140a:	4630      	mov	r0, r6
 801140c:	b003      	add	sp, #12
 801140e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011412:	6812      	ldr	r2, [r2, #0]
 8011414:	3b04      	subs	r3, #4
 8011416:	2a00      	cmp	r2, #0
 8011418:	d1cc      	bne.n	80113b4 <quorem+0x9c>
 801141a:	3c01      	subs	r4, #1
 801141c:	e7c7      	b.n	80113ae <quorem+0x96>
 801141e:	6812      	ldr	r2, [r2, #0]
 8011420:	3b04      	subs	r3, #4
 8011422:	2a00      	cmp	r2, #0
 8011424:	d1f0      	bne.n	8011408 <quorem+0xf0>
 8011426:	3c01      	subs	r4, #1
 8011428:	e7eb      	b.n	8011402 <quorem+0xea>
 801142a:	2000      	movs	r0, #0
 801142c:	e7ee      	b.n	801140c <quorem+0xf4>
	...

08011430 <_dtoa_r>:
 8011430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011434:	ed2d 8b04 	vpush	{d8-d9}
 8011438:	ec57 6b10 	vmov	r6, r7, d0
 801143c:	b093      	sub	sp, #76	; 0x4c
 801143e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8011440:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8011444:	9106      	str	r1, [sp, #24]
 8011446:	ee10 aa10 	vmov	sl, s0
 801144a:	4604      	mov	r4, r0
 801144c:	9209      	str	r2, [sp, #36]	; 0x24
 801144e:	930c      	str	r3, [sp, #48]	; 0x30
 8011450:	46bb      	mov	fp, r7
 8011452:	b975      	cbnz	r5, 8011472 <_dtoa_r+0x42>
 8011454:	2010      	movs	r0, #16
 8011456:	f7fe fa7d 	bl	800f954 <malloc>
 801145a:	4602      	mov	r2, r0
 801145c:	6260      	str	r0, [r4, #36]	; 0x24
 801145e:	b920      	cbnz	r0, 801146a <_dtoa_r+0x3a>
 8011460:	4ba7      	ldr	r3, [pc, #668]	; (8011700 <_dtoa_r+0x2d0>)
 8011462:	21ea      	movs	r1, #234	; 0xea
 8011464:	48a7      	ldr	r0, [pc, #668]	; (8011704 <_dtoa_r+0x2d4>)
 8011466:	f001 ffed 	bl	8013444 <__assert_func>
 801146a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801146e:	6005      	str	r5, [r0, #0]
 8011470:	60c5      	str	r5, [r0, #12]
 8011472:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011474:	6819      	ldr	r1, [r3, #0]
 8011476:	b151      	cbz	r1, 801148e <_dtoa_r+0x5e>
 8011478:	685a      	ldr	r2, [r3, #4]
 801147a:	604a      	str	r2, [r1, #4]
 801147c:	2301      	movs	r3, #1
 801147e:	4093      	lsls	r3, r2
 8011480:	608b      	str	r3, [r1, #8]
 8011482:	4620      	mov	r0, r4
 8011484:	f001 f998 	bl	80127b8 <_Bfree>
 8011488:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801148a:	2200      	movs	r2, #0
 801148c:	601a      	str	r2, [r3, #0]
 801148e:	1e3b      	subs	r3, r7, #0
 8011490:	bfaa      	itet	ge
 8011492:	2300      	movge	r3, #0
 8011494:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8011498:	f8c8 3000 	strge.w	r3, [r8]
 801149c:	4b9a      	ldr	r3, [pc, #616]	; (8011708 <_dtoa_r+0x2d8>)
 801149e:	bfbc      	itt	lt
 80114a0:	2201      	movlt	r2, #1
 80114a2:	f8c8 2000 	strlt.w	r2, [r8]
 80114a6:	ea33 030b 	bics.w	r3, r3, fp
 80114aa:	d11b      	bne.n	80114e4 <_dtoa_r+0xb4>
 80114ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80114ae:	f242 730f 	movw	r3, #9999	; 0x270f
 80114b2:	6013      	str	r3, [r2, #0]
 80114b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80114b8:	4333      	orrs	r3, r6
 80114ba:	f000 8592 	beq.w	8011fe2 <_dtoa_r+0xbb2>
 80114be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80114c0:	b963      	cbnz	r3, 80114dc <_dtoa_r+0xac>
 80114c2:	4b92      	ldr	r3, [pc, #584]	; (801170c <_dtoa_r+0x2dc>)
 80114c4:	e022      	b.n	801150c <_dtoa_r+0xdc>
 80114c6:	4b92      	ldr	r3, [pc, #584]	; (8011710 <_dtoa_r+0x2e0>)
 80114c8:	9301      	str	r3, [sp, #4]
 80114ca:	3308      	adds	r3, #8
 80114cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80114ce:	6013      	str	r3, [r2, #0]
 80114d0:	9801      	ldr	r0, [sp, #4]
 80114d2:	b013      	add	sp, #76	; 0x4c
 80114d4:	ecbd 8b04 	vpop	{d8-d9}
 80114d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80114dc:	4b8b      	ldr	r3, [pc, #556]	; (801170c <_dtoa_r+0x2dc>)
 80114de:	9301      	str	r3, [sp, #4]
 80114e0:	3303      	adds	r3, #3
 80114e2:	e7f3      	b.n	80114cc <_dtoa_r+0x9c>
 80114e4:	2200      	movs	r2, #0
 80114e6:	2300      	movs	r3, #0
 80114e8:	4650      	mov	r0, sl
 80114ea:	4659      	mov	r1, fp
 80114ec:	f7ef faec 	bl	8000ac8 <__aeabi_dcmpeq>
 80114f0:	ec4b ab19 	vmov	d9, sl, fp
 80114f4:	4680      	mov	r8, r0
 80114f6:	b158      	cbz	r0, 8011510 <_dtoa_r+0xe0>
 80114f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80114fa:	2301      	movs	r3, #1
 80114fc:	6013      	str	r3, [r2, #0]
 80114fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011500:	2b00      	cmp	r3, #0
 8011502:	f000 856b 	beq.w	8011fdc <_dtoa_r+0xbac>
 8011506:	4883      	ldr	r0, [pc, #524]	; (8011714 <_dtoa_r+0x2e4>)
 8011508:	6018      	str	r0, [r3, #0]
 801150a:	1e43      	subs	r3, r0, #1
 801150c:	9301      	str	r3, [sp, #4]
 801150e:	e7df      	b.n	80114d0 <_dtoa_r+0xa0>
 8011510:	ec4b ab10 	vmov	d0, sl, fp
 8011514:	aa10      	add	r2, sp, #64	; 0x40
 8011516:	a911      	add	r1, sp, #68	; 0x44
 8011518:	4620      	mov	r0, r4
 801151a:	f001 fcfb 	bl	8012f14 <__d2b>
 801151e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8011522:	ee08 0a10 	vmov	s16, r0
 8011526:	2d00      	cmp	r5, #0
 8011528:	f000 8084 	beq.w	8011634 <_dtoa_r+0x204>
 801152c:	ee19 3a90 	vmov	r3, s19
 8011530:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011534:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8011538:	4656      	mov	r6, sl
 801153a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801153e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8011542:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8011546:	4b74      	ldr	r3, [pc, #464]	; (8011718 <_dtoa_r+0x2e8>)
 8011548:	2200      	movs	r2, #0
 801154a:	4630      	mov	r0, r6
 801154c:	4639      	mov	r1, r7
 801154e:	f7ee fe9b 	bl	8000288 <__aeabi_dsub>
 8011552:	a365      	add	r3, pc, #404	; (adr r3, 80116e8 <_dtoa_r+0x2b8>)
 8011554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011558:	f7ef f84e 	bl	80005f8 <__aeabi_dmul>
 801155c:	a364      	add	r3, pc, #400	; (adr r3, 80116f0 <_dtoa_r+0x2c0>)
 801155e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011562:	f7ee fe93 	bl	800028c <__adddf3>
 8011566:	4606      	mov	r6, r0
 8011568:	4628      	mov	r0, r5
 801156a:	460f      	mov	r7, r1
 801156c:	f7ee ffda 	bl	8000524 <__aeabi_i2d>
 8011570:	a361      	add	r3, pc, #388	; (adr r3, 80116f8 <_dtoa_r+0x2c8>)
 8011572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011576:	f7ef f83f 	bl	80005f8 <__aeabi_dmul>
 801157a:	4602      	mov	r2, r0
 801157c:	460b      	mov	r3, r1
 801157e:	4630      	mov	r0, r6
 8011580:	4639      	mov	r1, r7
 8011582:	f7ee fe83 	bl	800028c <__adddf3>
 8011586:	4606      	mov	r6, r0
 8011588:	460f      	mov	r7, r1
 801158a:	f7ef fae5 	bl	8000b58 <__aeabi_d2iz>
 801158e:	2200      	movs	r2, #0
 8011590:	9000      	str	r0, [sp, #0]
 8011592:	2300      	movs	r3, #0
 8011594:	4630      	mov	r0, r6
 8011596:	4639      	mov	r1, r7
 8011598:	f7ef faa0 	bl	8000adc <__aeabi_dcmplt>
 801159c:	b150      	cbz	r0, 80115b4 <_dtoa_r+0x184>
 801159e:	9800      	ldr	r0, [sp, #0]
 80115a0:	f7ee ffc0 	bl	8000524 <__aeabi_i2d>
 80115a4:	4632      	mov	r2, r6
 80115a6:	463b      	mov	r3, r7
 80115a8:	f7ef fa8e 	bl	8000ac8 <__aeabi_dcmpeq>
 80115ac:	b910      	cbnz	r0, 80115b4 <_dtoa_r+0x184>
 80115ae:	9b00      	ldr	r3, [sp, #0]
 80115b0:	3b01      	subs	r3, #1
 80115b2:	9300      	str	r3, [sp, #0]
 80115b4:	9b00      	ldr	r3, [sp, #0]
 80115b6:	2b16      	cmp	r3, #22
 80115b8:	d85a      	bhi.n	8011670 <_dtoa_r+0x240>
 80115ba:	9a00      	ldr	r2, [sp, #0]
 80115bc:	4b57      	ldr	r3, [pc, #348]	; (801171c <_dtoa_r+0x2ec>)
 80115be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80115c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115c6:	ec51 0b19 	vmov	r0, r1, d9
 80115ca:	f7ef fa87 	bl	8000adc <__aeabi_dcmplt>
 80115ce:	2800      	cmp	r0, #0
 80115d0:	d050      	beq.n	8011674 <_dtoa_r+0x244>
 80115d2:	9b00      	ldr	r3, [sp, #0]
 80115d4:	3b01      	subs	r3, #1
 80115d6:	9300      	str	r3, [sp, #0]
 80115d8:	2300      	movs	r3, #0
 80115da:	930b      	str	r3, [sp, #44]	; 0x2c
 80115dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80115de:	1b5d      	subs	r5, r3, r5
 80115e0:	1e6b      	subs	r3, r5, #1
 80115e2:	9305      	str	r3, [sp, #20]
 80115e4:	bf45      	ittet	mi
 80115e6:	f1c5 0301 	rsbmi	r3, r5, #1
 80115ea:	9304      	strmi	r3, [sp, #16]
 80115ec:	2300      	movpl	r3, #0
 80115ee:	2300      	movmi	r3, #0
 80115f0:	bf4c      	ite	mi
 80115f2:	9305      	strmi	r3, [sp, #20]
 80115f4:	9304      	strpl	r3, [sp, #16]
 80115f6:	9b00      	ldr	r3, [sp, #0]
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	db3d      	blt.n	8011678 <_dtoa_r+0x248>
 80115fc:	9b05      	ldr	r3, [sp, #20]
 80115fe:	9a00      	ldr	r2, [sp, #0]
 8011600:	920a      	str	r2, [sp, #40]	; 0x28
 8011602:	4413      	add	r3, r2
 8011604:	9305      	str	r3, [sp, #20]
 8011606:	2300      	movs	r3, #0
 8011608:	9307      	str	r3, [sp, #28]
 801160a:	9b06      	ldr	r3, [sp, #24]
 801160c:	2b09      	cmp	r3, #9
 801160e:	f200 8089 	bhi.w	8011724 <_dtoa_r+0x2f4>
 8011612:	2b05      	cmp	r3, #5
 8011614:	bfc4      	itt	gt
 8011616:	3b04      	subgt	r3, #4
 8011618:	9306      	strgt	r3, [sp, #24]
 801161a:	9b06      	ldr	r3, [sp, #24]
 801161c:	f1a3 0302 	sub.w	r3, r3, #2
 8011620:	bfcc      	ite	gt
 8011622:	2500      	movgt	r5, #0
 8011624:	2501      	movle	r5, #1
 8011626:	2b03      	cmp	r3, #3
 8011628:	f200 8087 	bhi.w	801173a <_dtoa_r+0x30a>
 801162c:	e8df f003 	tbb	[pc, r3]
 8011630:	59383a2d 	.word	0x59383a2d
 8011634:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8011638:	441d      	add	r5, r3
 801163a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801163e:	2b20      	cmp	r3, #32
 8011640:	bfc1      	itttt	gt
 8011642:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8011646:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801164a:	fa0b f303 	lslgt.w	r3, fp, r3
 801164e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8011652:	bfda      	itte	le
 8011654:	f1c3 0320 	rsble	r3, r3, #32
 8011658:	fa06 f003 	lslle.w	r0, r6, r3
 801165c:	4318      	orrgt	r0, r3
 801165e:	f7ee ff51 	bl	8000504 <__aeabi_ui2d>
 8011662:	2301      	movs	r3, #1
 8011664:	4606      	mov	r6, r0
 8011666:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801166a:	3d01      	subs	r5, #1
 801166c:	930e      	str	r3, [sp, #56]	; 0x38
 801166e:	e76a      	b.n	8011546 <_dtoa_r+0x116>
 8011670:	2301      	movs	r3, #1
 8011672:	e7b2      	b.n	80115da <_dtoa_r+0x1aa>
 8011674:	900b      	str	r0, [sp, #44]	; 0x2c
 8011676:	e7b1      	b.n	80115dc <_dtoa_r+0x1ac>
 8011678:	9b04      	ldr	r3, [sp, #16]
 801167a:	9a00      	ldr	r2, [sp, #0]
 801167c:	1a9b      	subs	r3, r3, r2
 801167e:	9304      	str	r3, [sp, #16]
 8011680:	4253      	negs	r3, r2
 8011682:	9307      	str	r3, [sp, #28]
 8011684:	2300      	movs	r3, #0
 8011686:	930a      	str	r3, [sp, #40]	; 0x28
 8011688:	e7bf      	b.n	801160a <_dtoa_r+0x1da>
 801168a:	2300      	movs	r3, #0
 801168c:	9308      	str	r3, [sp, #32]
 801168e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011690:	2b00      	cmp	r3, #0
 8011692:	dc55      	bgt.n	8011740 <_dtoa_r+0x310>
 8011694:	2301      	movs	r3, #1
 8011696:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801169a:	461a      	mov	r2, r3
 801169c:	9209      	str	r2, [sp, #36]	; 0x24
 801169e:	e00c      	b.n	80116ba <_dtoa_r+0x28a>
 80116a0:	2301      	movs	r3, #1
 80116a2:	e7f3      	b.n	801168c <_dtoa_r+0x25c>
 80116a4:	2300      	movs	r3, #0
 80116a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80116a8:	9308      	str	r3, [sp, #32]
 80116aa:	9b00      	ldr	r3, [sp, #0]
 80116ac:	4413      	add	r3, r2
 80116ae:	9302      	str	r3, [sp, #8]
 80116b0:	3301      	adds	r3, #1
 80116b2:	2b01      	cmp	r3, #1
 80116b4:	9303      	str	r3, [sp, #12]
 80116b6:	bfb8      	it	lt
 80116b8:	2301      	movlt	r3, #1
 80116ba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80116bc:	2200      	movs	r2, #0
 80116be:	6042      	str	r2, [r0, #4]
 80116c0:	2204      	movs	r2, #4
 80116c2:	f102 0614 	add.w	r6, r2, #20
 80116c6:	429e      	cmp	r6, r3
 80116c8:	6841      	ldr	r1, [r0, #4]
 80116ca:	d93d      	bls.n	8011748 <_dtoa_r+0x318>
 80116cc:	4620      	mov	r0, r4
 80116ce:	f001 f833 	bl	8012738 <_Balloc>
 80116d2:	9001      	str	r0, [sp, #4]
 80116d4:	2800      	cmp	r0, #0
 80116d6:	d13b      	bne.n	8011750 <_dtoa_r+0x320>
 80116d8:	4b11      	ldr	r3, [pc, #68]	; (8011720 <_dtoa_r+0x2f0>)
 80116da:	4602      	mov	r2, r0
 80116dc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80116e0:	e6c0      	b.n	8011464 <_dtoa_r+0x34>
 80116e2:	2301      	movs	r3, #1
 80116e4:	e7df      	b.n	80116a6 <_dtoa_r+0x276>
 80116e6:	bf00      	nop
 80116e8:	636f4361 	.word	0x636f4361
 80116ec:	3fd287a7 	.word	0x3fd287a7
 80116f0:	8b60c8b3 	.word	0x8b60c8b3
 80116f4:	3fc68a28 	.word	0x3fc68a28
 80116f8:	509f79fb 	.word	0x509f79fb
 80116fc:	3fd34413 	.word	0x3fd34413
 8011700:	0801597d 	.word	0x0801597d
 8011704:	08015994 	.word	0x08015994
 8011708:	7ff00000 	.word	0x7ff00000
 801170c:	08015979 	.word	0x08015979
 8011710:	08015970 	.word	0x08015970
 8011714:	080158fd 	.word	0x080158fd
 8011718:	3ff80000 	.word	0x3ff80000
 801171c:	08015b00 	.word	0x08015b00
 8011720:	080159ef 	.word	0x080159ef
 8011724:	2501      	movs	r5, #1
 8011726:	2300      	movs	r3, #0
 8011728:	9306      	str	r3, [sp, #24]
 801172a:	9508      	str	r5, [sp, #32]
 801172c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011730:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8011734:	2200      	movs	r2, #0
 8011736:	2312      	movs	r3, #18
 8011738:	e7b0      	b.n	801169c <_dtoa_r+0x26c>
 801173a:	2301      	movs	r3, #1
 801173c:	9308      	str	r3, [sp, #32]
 801173e:	e7f5      	b.n	801172c <_dtoa_r+0x2fc>
 8011740:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011742:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8011746:	e7b8      	b.n	80116ba <_dtoa_r+0x28a>
 8011748:	3101      	adds	r1, #1
 801174a:	6041      	str	r1, [r0, #4]
 801174c:	0052      	lsls	r2, r2, #1
 801174e:	e7b8      	b.n	80116c2 <_dtoa_r+0x292>
 8011750:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011752:	9a01      	ldr	r2, [sp, #4]
 8011754:	601a      	str	r2, [r3, #0]
 8011756:	9b03      	ldr	r3, [sp, #12]
 8011758:	2b0e      	cmp	r3, #14
 801175a:	f200 809d 	bhi.w	8011898 <_dtoa_r+0x468>
 801175e:	2d00      	cmp	r5, #0
 8011760:	f000 809a 	beq.w	8011898 <_dtoa_r+0x468>
 8011764:	9b00      	ldr	r3, [sp, #0]
 8011766:	2b00      	cmp	r3, #0
 8011768:	dd32      	ble.n	80117d0 <_dtoa_r+0x3a0>
 801176a:	4ab7      	ldr	r2, [pc, #732]	; (8011a48 <_dtoa_r+0x618>)
 801176c:	f003 030f 	and.w	r3, r3, #15
 8011770:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8011774:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011778:	9b00      	ldr	r3, [sp, #0]
 801177a:	05d8      	lsls	r0, r3, #23
 801177c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8011780:	d516      	bpl.n	80117b0 <_dtoa_r+0x380>
 8011782:	4bb2      	ldr	r3, [pc, #712]	; (8011a4c <_dtoa_r+0x61c>)
 8011784:	ec51 0b19 	vmov	r0, r1, d9
 8011788:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801178c:	f7ef f85e 	bl	800084c <__aeabi_ddiv>
 8011790:	f007 070f 	and.w	r7, r7, #15
 8011794:	4682      	mov	sl, r0
 8011796:	468b      	mov	fp, r1
 8011798:	2503      	movs	r5, #3
 801179a:	4eac      	ldr	r6, [pc, #688]	; (8011a4c <_dtoa_r+0x61c>)
 801179c:	b957      	cbnz	r7, 80117b4 <_dtoa_r+0x384>
 801179e:	4642      	mov	r2, r8
 80117a0:	464b      	mov	r3, r9
 80117a2:	4650      	mov	r0, sl
 80117a4:	4659      	mov	r1, fp
 80117a6:	f7ef f851 	bl	800084c <__aeabi_ddiv>
 80117aa:	4682      	mov	sl, r0
 80117ac:	468b      	mov	fp, r1
 80117ae:	e028      	b.n	8011802 <_dtoa_r+0x3d2>
 80117b0:	2502      	movs	r5, #2
 80117b2:	e7f2      	b.n	801179a <_dtoa_r+0x36a>
 80117b4:	07f9      	lsls	r1, r7, #31
 80117b6:	d508      	bpl.n	80117ca <_dtoa_r+0x39a>
 80117b8:	4640      	mov	r0, r8
 80117ba:	4649      	mov	r1, r9
 80117bc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80117c0:	f7ee ff1a 	bl	80005f8 <__aeabi_dmul>
 80117c4:	3501      	adds	r5, #1
 80117c6:	4680      	mov	r8, r0
 80117c8:	4689      	mov	r9, r1
 80117ca:	107f      	asrs	r7, r7, #1
 80117cc:	3608      	adds	r6, #8
 80117ce:	e7e5      	b.n	801179c <_dtoa_r+0x36c>
 80117d0:	f000 809b 	beq.w	801190a <_dtoa_r+0x4da>
 80117d4:	9b00      	ldr	r3, [sp, #0]
 80117d6:	4f9d      	ldr	r7, [pc, #628]	; (8011a4c <_dtoa_r+0x61c>)
 80117d8:	425e      	negs	r6, r3
 80117da:	4b9b      	ldr	r3, [pc, #620]	; (8011a48 <_dtoa_r+0x618>)
 80117dc:	f006 020f 	and.w	r2, r6, #15
 80117e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80117e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117e8:	ec51 0b19 	vmov	r0, r1, d9
 80117ec:	f7ee ff04 	bl	80005f8 <__aeabi_dmul>
 80117f0:	1136      	asrs	r6, r6, #4
 80117f2:	4682      	mov	sl, r0
 80117f4:	468b      	mov	fp, r1
 80117f6:	2300      	movs	r3, #0
 80117f8:	2502      	movs	r5, #2
 80117fa:	2e00      	cmp	r6, #0
 80117fc:	d17a      	bne.n	80118f4 <_dtoa_r+0x4c4>
 80117fe:	2b00      	cmp	r3, #0
 8011800:	d1d3      	bne.n	80117aa <_dtoa_r+0x37a>
 8011802:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011804:	2b00      	cmp	r3, #0
 8011806:	f000 8082 	beq.w	801190e <_dtoa_r+0x4de>
 801180a:	4b91      	ldr	r3, [pc, #580]	; (8011a50 <_dtoa_r+0x620>)
 801180c:	2200      	movs	r2, #0
 801180e:	4650      	mov	r0, sl
 8011810:	4659      	mov	r1, fp
 8011812:	f7ef f963 	bl	8000adc <__aeabi_dcmplt>
 8011816:	2800      	cmp	r0, #0
 8011818:	d079      	beq.n	801190e <_dtoa_r+0x4de>
 801181a:	9b03      	ldr	r3, [sp, #12]
 801181c:	2b00      	cmp	r3, #0
 801181e:	d076      	beq.n	801190e <_dtoa_r+0x4de>
 8011820:	9b02      	ldr	r3, [sp, #8]
 8011822:	2b00      	cmp	r3, #0
 8011824:	dd36      	ble.n	8011894 <_dtoa_r+0x464>
 8011826:	9b00      	ldr	r3, [sp, #0]
 8011828:	4650      	mov	r0, sl
 801182a:	4659      	mov	r1, fp
 801182c:	1e5f      	subs	r7, r3, #1
 801182e:	2200      	movs	r2, #0
 8011830:	4b88      	ldr	r3, [pc, #544]	; (8011a54 <_dtoa_r+0x624>)
 8011832:	f7ee fee1 	bl	80005f8 <__aeabi_dmul>
 8011836:	9e02      	ldr	r6, [sp, #8]
 8011838:	4682      	mov	sl, r0
 801183a:	468b      	mov	fp, r1
 801183c:	3501      	adds	r5, #1
 801183e:	4628      	mov	r0, r5
 8011840:	f7ee fe70 	bl	8000524 <__aeabi_i2d>
 8011844:	4652      	mov	r2, sl
 8011846:	465b      	mov	r3, fp
 8011848:	f7ee fed6 	bl	80005f8 <__aeabi_dmul>
 801184c:	4b82      	ldr	r3, [pc, #520]	; (8011a58 <_dtoa_r+0x628>)
 801184e:	2200      	movs	r2, #0
 8011850:	f7ee fd1c 	bl	800028c <__adddf3>
 8011854:	46d0      	mov	r8, sl
 8011856:	46d9      	mov	r9, fp
 8011858:	4682      	mov	sl, r0
 801185a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 801185e:	2e00      	cmp	r6, #0
 8011860:	d158      	bne.n	8011914 <_dtoa_r+0x4e4>
 8011862:	4b7e      	ldr	r3, [pc, #504]	; (8011a5c <_dtoa_r+0x62c>)
 8011864:	2200      	movs	r2, #0
 8011866:	4640      	mov	r0, r8
 8011868:	4649      	mov	r1, r9
 801186a:	f7ee fd0d 	bl	8000288 <__aeabi_dsub>
 801186e:	4652      	mov	r2, sl
 8011870:	465b      	mov	r3, fp
 8011872:	4680      	mov	r8, r0
 8011874:	4689      	mov	r9, r1
 8011876:	f7ef f94f 	bl	8000b18 <__aeabi_dcmpgt>
 801187a:	2800      	cmp	r0, #0
 801187c:	f040 8295 	bne.w	8011daa <_dtoa_r+0x97a>
 8011880:	4652      	mov	r2, sl
 8011882:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8011886:	4640      	mov	r0, r8
 8011888:	4649      	mov	r1, r9
 801188a:	f7ef f927 	bl	8000adc <__aeabi_dcmplt>
 801188e:	2800      	cmp	r0, #0
 8011890:	f040 8289 	bne.w	8011da6 <_dtoa_r+0x976>
 8011894:	ec5b ab19 	vmov	sl, fp, d9
 8011898:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801189a:	2b00      	cmp	r3, #0
 801189c:	f2c0 8148 	blt.w	8011b30 <_dtoa_r+0x700>
 80118a0:	9a00      	ldr	r2, [sp, #0]
 80118a2:	2a0e      	cmp	r2, #14
 80118a4:	f300 8144 	bgt.w	8011b30 <_dtoa_r+0x700>
 80118a8:	4b67      	ldr	r3, [pc, #412]	; (8011a48 <_dtoa_r+0x618>)
 80118aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80118ae:	e9d3 8900 	ldrd	r8, r9, [r3]
 80118b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	f280 80d5 	bge.w	8011a64 <_dtoa_r+0x634>
 80118ba:	9b03      	ldr	r3, [sp, #12]
 80118bc:	2b00      	cmp	r3, #0
 80118be:	f300 80d1 	bgt.w	8011a64 <_dtoa_r+0x634>
 80118c2:	f040 826f 	bne.w	8011da4 <_dtoa_r+0x974>
 80118c6:	4b65      	ldr	r3, [pc, #404]	; (8011a5c <_dtoa_r+0x62c>)
 80118c8:	2200      	movs	r2, #0
 80118ca:	4640      	mov	r0, r8
 80118cc:	4649      	mov	r1, r9
 80118ce:	f7ee fe93 	bl	80005f8 <__aeabi_dmul>
 80118d2:	4652      	mov	r2, sl
 80118d4:	465b      	mov	r3, fp
 80118d6:	f7ef f915 	bl	8000b04 <__aeabi_dcmpge>
 80118da:	9e03      	ldr	r6, [sp, #12]
 80118dc:	4637      	mov	r7, r6
 80118de:	2800      	cmp	r0, #0
 80118e0:	f040 8245 	bne.w	8011d6e <_dtoa_r+0x93e>
 80118e4:	9d01      	ldr	r5, [sp, #4]
 80118e6:	2331      	movs	r3, #49	; 0x31
 80118e8:	f805 3b01 	strb.w	r3, [r5], #1
 80118ec:	9b00      	ldr	r3, [sp, #0]
 80118ee:	3301      	adds	r3, #1
 80118f0:	9300      	str	r3, [sp, #0]
 80118f2:	e240      	b.n	8011d76 <_dtoa_r+0x946>
 80118f4:	07f2      	lsls	r2, r6, #31
 80118f6:	d505      	bpl.n	8011904 <_dtoa_r+0x4d4>
 80118f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80118fc:	f7ee fe7c 	bl	80005f8 <__aeabi_dmul>
 8011900:	3501      	adds	r5, #1
 8011902:	2301      	movs	r3, #1
 8011904:	1076      	asrs	r6, r6, #1
 8011906:	3708      	adds	r7, #8
 8011908:	e777      	b.n	80117fa <_dtoa_r+0x3ca>
 801190a:	2502      	movs	r5, #2
 801190c:	e779      	b.n	8011802 <_dtoa_r+0x3d2>
 801190e:	9f00      	ldr	r7, [sp, #0]
 8011910:	9e03      	ldr	r6, [sp, #12]
 8011912:	e794      	b.n	801183e <_dtoa_r+0x40e>
 8011914:	9901      	ldr	r1, [sp, #4]
 8011916:	4b4c      	ldr	r3, [pc, #304]	; (8011a48 <_dtoa_r+0x618>)
 8011918:	4431      	add	r1, r6
 801191a:	910d      	str	r1, [sp, #52]	; 0x34
 801191c:	9908      	ldr	r1, [sp, #32]
 801191e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8011922:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8011926:	2900      	cmp	r1, #0
 8011928:	d043      	beq.n	80119b2 <_dtoa_r+0x582>
 801192a:	494d      	ldr	r1, [pc, #308]	; (8011a60 <_dtoa_r+0x630>)
 801192c:	2000      	movs	r0, #0
 801192e:	f7ee ff8d 	bl	800084c <__aeabi_ddiv>
 8011932:	4652      	mov	r2, sl
 8011934:	465b      	mov	r3, fp
 8011936:	f7ee fca7 	bl	8000288 <__aeabi_dsub>
 801193a:	9d01      	ldr	r5, [sp, #4]
 801193c:	4682      	mov	sl, r0
 801193e:	468b      	mov	fp, r1
 8011940:	4649      	mov	r1, r9
 8011942:	4640      	mov	r0, r8
 8011944:	f7ef f908 	bl	8000b58 <__aeabi_d2iz>
 8011948:	4606      	mov	r6, r0
 801194a:	f7ee fdeb 	bl	8000524 <__aeabi_i2d>
 801194e:	4602      	mov	r2, r0
 8011950:	460b      	mov	r3, r1
 8011952:	4640      	mov	r0, r8
 8011954:	4649      	mov	r1, r9
 8011956:	f7ee fc97 	bl	8000288 <__aeabi_dsub>
 801195a:	3630      	adds	r6, #48	; 0x30
 801195c:	f805 6b01 	strb.w	r6, [r5], #1
 8011960:	4652      	mov	r2, sl
 8011962:	465b      	mov	r3, fp
 8011964:	4680      	mov	r8, r0
 8011966:	4689      	mov	r9, r1
 8011968:	f7ef f8b8 	bl	8000adc <__aeabi_dcmplt>
 801196c:	2800      	cmp	r0, #0
 801196e:	d163      	bne.n	8011a38 <_dtoa_r+0x608>
 8011970:	4642      	mov	r2, r8
 8011972:	464b      	mov	r3, r9
 8011974:	4936      	ldr	r1, [pc, #216]	; (8011a50 <_dtoa_r+0x620>)
 8011976:	2000      	movs	r0, #0
 8011978:	f7ee fc86 	bl	8000288 <__aeabi_dsub>
 801197c:	4652      	mov	r2, sl
 801197e:	465b      	mov	r3, fp
 8011980:	f7ef f8ac 	bl	8000adc <__aeabi_dcmplt>
 8011984:	2800      	cmp	r0, #0
 8011986:	f040 80b5 	bne.w	8011af4 <_dtoa_r+0x6c4>
 801198a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801198c:	429d      	cmp	r5, r3
 801198e:	d081      	beq.n	8011894 <_dtoa_r+0x464>
 8011990:	4b30      	ldr	r3, [pc, #192]	; (8011a54 <_dtoa_r+0x624>)
 8011992:	2200      	movs	r2, #0
 8011994:	4650      	mov	r0, sl
 8011996:	4659      	mov	r1, fp
 8011998:	f7ee fe2e 	bl	80005f8 <__aeabi_dmul>
 801199c:	4b2d      	ldr	r3, [pc, #180]	; (8011a54 <_dtoa_r+0x624>)
 801199e:	4682      	mov	sl, r0
 80119a0:	468b      	mov	fp, r1
 80119a2:	4640      	mov	r0, r8
 80119a4:	4649      	mov	r1, r9
 80119a6:	2200      	movs	r2, #0
 80119a8:	f7ee fe26 	bl	80005f8 <__aeabi_dmul>
 80119ac:	4680      	mov	r8, r0
 80119ae:	4689      	mov	r9, r1
 80119b0:	e7c6      	b.n	8011940 <_dtoa_r+0x510>
 80119b2:	4650      	mov	r0, sl
 80119b4:	4659      	mov	r1, fp
 80119b6:	f7ee fe1f 	bl	80005f8 <__aeabi_dmul>
 80119ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80119bc:	9d01      	ldr	r5, [sp, #4]
 80119be:	930f      	str	r3, [sp, #60]	; 0x3c
 80119c0:	4682      	mov	sl, r0
 80119c2:	468b      	mov	fp, r1
 80119c4:	4649      	mov	r1, r9
 80119c6:	4640      	mov	r0, r8
 80119c8:	f7ef f8c6 	bl	8000b58 <__aeabi_d2iz>
 80119cc:	4606      	mov	r6, r0
 80119ce:	f7ee fda9 	bl	8000524 <__aeabi_i2d>
 80119d2:	3630      	adds	r6, #48	; 0x30
 80119d4:	4602      	mov	r2, r0
 80119d6:	460b      	mov	r3, r1
 80119d8:	4640      	mov	r0, r8
 80119da:	4649      	mov	r1, r9
 80119dc:	f7ee fc54 	bl	8000288 <__aeabi_dsub>
 80119e0:	f805 6b01 	strb.w	r6, [r5], #1
 80119e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80119e6:	429d      	cmp	r5, r3
 80119e8:	4680      	mov	r8, r0
 80119ea:	4689      	mov	r9, r1
 80119ec:	f04f 0200 	mov.w	r2, #0
 80119f0:	d124      	bne.n	8011a3c <_dtoa_r+0x60c>
 80119f2:	4b1b      	ldr	r3, [pc, #108]	; (8011a60 <_dtoa_r+0x630>)
 80119f4:	4650      	mov	r0, sl
 80119f6:	4659      	mov	r1, fp
 80119f8:	f7ee fc48 	bl	800028c <__adddf3>
 80119fc:	4602      	mov	r2, r0
 80119fe:	460b      	mov	r3, r1
 8011a00:	4640      	mov	r0, r8
 8011a02:	4649      	mov	r1, r9
 8011a04:	f7ef f888 	bl	8000b18 <__aeabi_dcmpgt>
 8011a08:	2800      	cmp	r0, #0
 8011a0a:	d173      	bne.n	8011af4 <_dtoa_r+0x6c4>
 8011a0c:	4652      	mov	r2, sl
 8011a0e:	465b      	mov	r3, fp
 8011a10:	4913      	ldr	r1, [pc, #76]	; (8011a60 <_dtoa_r+0x630>)
 8011a12:	2000      	movs	r0, #0
 8011a14:	f7ee fc38 	bl	8000288 <__aeabi_dsub>
 8011a18:	4602      	mov	r2, r0
 8011a1a:	460b      	mov	r3, r1
 8011a1c:	4640      	mov	r0, r8
 8011a1e:	4649      	mov	r1, r9
 8011a20:	f7ef f85c 	bl	8000adc <__aeabi_dcmplt>
 8011a24:	2800      	cmp	r0, #0
 8011a26:	f43f af35 	beq.w	8011894 <_dtoa_r+0x464>
 8011a2a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8011a2c:	1e6b      	subs	r3, r5, #1
 8011a2e:	930f      	str	r3, [sp, #60]	; 0x3c
 8011a30:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011a34:	2b30      	cmp	r3, #48	; 0x30
 8011a36:	d0f8      	beq.n	8011a2a <_dtoa_r+0x5fa>
 8011a38:	9700      	str	r7, [sp, #0]
 8011a3a:	e049      	b.n	8011ad0 <_dtoa_r+0x6a0>
 8011a3c:	4b05      	ldr	r3, [pc, #20]	; (8011a54 <_dtoa_r+0x624>)
 8011a3e:	f7ee fddb 	bl	80005f8 <__aeabi_dmul>
 8011a42:	4680      	mov	r8, r0
 8011a44:	4689      	mov	r9, r1
 8011a46:	e7bd      	b.n	80119c4 <_dtoa_r+0x594>
 8011a48:	08015b00 	.word	0x08015b00
 8011a4c:	08015ad8 	.word	0x08015ad8
 8011a50:	3ff00000 	.word	0x3ff00000
 8011a54:	40240000 	.word	0x40240000
 8011a58:	401c0000 	.word	0x401c0000
 8011a5c:	40140000 	.word	0x40140000
 8011a60:	3fe00000 	.word	0x3fe00000
 8011a64:	9d01      	ldr	r5, [sp, #4]
 8011a66:	4656      	mov	r6, sl
 8011a68:	465f      	mov	r7, fp
 8011a6a:	4642      	mov	r2, r8
 8011a6c:	464b      	mov	r3, r9
 8011a6e:	4630      	mov	r0, r6
 8011a70:	4639      	mov	r1, r7
 8011a72:	f7ee feeb 	bl	800084c <__aeabi_ddiv>
 8011a76:	f7ef f86f 	bl	8000b58 <__aeabi_d2iz>
 8011a7a:	4682      	mov	sl, r0
 8011a7c:	f7ee fd52 	bl	8000524 <__aeabi_i2d>
 8011a80:	4642      	mov	r2, r8
 8011a82:	464b      	mov	r3, r9
 8011a84:	f7ee fdb8 	bl	80005f8 <__aeabi_dmul>
 8011a88:	4602      	mov	r2, r0
 8011a8a:	460b      	mov	r3, r1
 8011a8c:	4630      	mov	r0, r6
 8011a8e:	4639      	mov	r1, r7
 8011a90:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8011a94:	f7ee fbf8 	bl	8000288 <__aeabi_dsub>
 8011a98:	f805 6b01 	strb.w	r6, [r5], #1
 8011a9c:	9e01      	ldr	r6, [sp, #4]
 8011a9e:	9f03      	ldr	r7, [sp, #12]
 8011aa0:	1bae      	subs	r6, r5, r6
 8011aa2:	42b7      	cmp	r7, r6
 8011aa4:	4602      	mov	r2, r0
 8011aa6:	460b      	mov	r3, r1
 8011aa8:	d135      	bne.n	8011b16 <_dtoa_r+0x6e6>
 8011aaa:	f7ee fbef 	bl	800028c <__adddf3>
 8011aae:	4642      	mov	r2, r8
 8011ab0:	464b      	mov	r3, r9
 8011ab2:	4606      	mov	r6, r0
 8011ab4:	460f      	mov	r7, r1
 8011ab6:	f7ef f82f 	bl	8000b18 <__aeabi_dcmpgt>
 8011aba:	b9d0      	cbnz	r0, 8011af2 <_dtoa_r+0x6c2>
 8011abc:	4642      	mov	r2, r8
 8011abe:	464b      	mov	r3, r9
 8011ac0:	4630      	mov	r0, r6
 8011ac2:	4639      	mov	r1, r7
 8011ac4:	f7ef f800 	bl	8000ac8 <__aeabi_dcmpeq>
 8011ac8:	b110      	cbz	r0, 8011ad0 <_dtoa_r+0x6a0>
 8011aca:	f01a 0f01 	tst.w	sl, #1
 8011ace:	d110      	bne.n	8011af2 <_dtoa_r+0x6c2>
 8011ad0:	4620      	mov	r0, r4
 8011ad2:	ee18 1a10 	vmov	r1, s16
 8011ad6:	f000 fe6f 	bl	80127b8 <_Bfree>
 8011ada:	2300      	movs	r3, #0
 8011adc:	9800      	ldr	r0, [sp, #0]
 8011ade:	702b      	strb	r3, [r5, #0]
 8011ae0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011ae2:	3001      	adds	r0, #1
 8011ae4:	6018      	str	r0, [r3, #0]
 8011ae6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011ae8:	2b00      	cmp	r3, #0
 8011aea:	f43f acf1 	beq.w	80114d0 <_dtoa_r+0xa0>
 8011aee:	601d      	str	r5, [r3, #0]
 8011af0:	e4ee      	b.n	80114d0 <_dtoa_r+0xa0>
 8011af2:	9f00      	ldr	r7, [sp, #0]
 8011af4:	462b      	mov	r3, r5
 8011af6:	461d      	mov	r5, r3
 8011af8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011afc:	2a39      	cmp	r2, #57	; 0x39
 8011afe:	d106      	bne.n	8011b0e <_dtoa_r+0x6de>
 8011b00:	9a01      	ldr	r2, [sp, #4]
 8011b02:	429a      	cmp	r2, r3
 8011b04:	d1f7      	bne.n	8011af6 <_dtoa_r+0x6c6>
 8011b06:	9901      	ldr	r1, [sp, #4]
 8011b08:	2230      	movs	r2, #48	; 0x30
 8011b0a:	3701      	adds	r7, #1
 8011b0c:	700a      	strb	r2, [r1, #0]
 8011b0e:	781a      	ldrb	r2, [r3, #0]
 8011b10:	3201      	adds	r2, #1
 8011b12:	701a      	strb	r2, [r3, #0]
 8011b14:	e790      	b.n	8011a38 <_dtoa_r+0x608>
 8011b16:	4ba6      	ldr	r3, [pc, #664]	; (8011db0 <_dtoa_r+0x980>)
 8011b18:	2200      	movs	r2, #0
 8011b1a:	f7ee fd6d 	bl	80005f8 <__aeabi_dmul>
 8011b1e:	2200      	movs	r2, #0
 8011b20:	2300      	movs	r3, #0
 8011b22:	4606      	mov	r6, r0
 8011b24:	460f      	mov	r7, r1
 8011b26:	f7ee ffcf 	bl	8000ac8 <__aeabi_dcmpeq>
 8011b2a:	2800      	cmp	r0, #0
 8011b2c:	d09d      	beq.n	8011a6a <_dtoa_r+0x63a>
 8011b2e:	e7cf      	b.n	8011ad0 <_dtoa_r+0x6a0>
 8011b30:	9a08      	ldr	r2, [sp, #32]
 8011b32:	2a00      	cmp	r2, #0
 8011b34:	f000 80d7 	beq.w	8011ce6 <_dtoa_r+0x8b6>
 8011b38:	9a06      	ldr	r2, [sp, #24]
 8011b3a:	2a01      	cmp	r2, #1
 8011b3c:	f300 80ba 	bgt.w	8011cb4 <_dtoa_r+0x884>
 8011b40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011b42:	2a00      	cmp	r2, #0
 8011b44:	f000 80b2 	beq.w	8011cac <_dtoa_r+0x87c>
 8011b48:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8011b4c:	9e07      	ldr	r6, [sp, #28]
 8011b4e:	9d04      	ldr	r5, [sp, #16]
 8011b50:	9a04      	ldr	r2, [sp, #16]
 8011b52:	441a      	add	r2, r3
 8011b54:	9204      	str	r2, [sp, #16]
 8011b56:	9a05      	ldr	r2, [sp, #20]
 8011b58:	2101      	movs	r1, #1
 8011b5a:	441a      	add	r2, r3
 8011b5c:	4620      	mov	r0, r4
 8011b5e:	9205      	str	r2, [sp, #20]
 8011b60:	f000 ff2c 	bl	80129bc <__i2b>
 8011b64:	4607      	mov	r7, r0
 8011b66:	2d00      	cmp	r5, #0
 8011b68:	dd0c      	ble.n	8011b84 <_dtoa_r+0x754>
 8011b6a:	9b05      	ldr	r3, [sp, #20]
 8011b6c:	2b00      	cmp	r3, #0
 8011b6e:	dd09      	ble.n	8011b84 <_dtoa_r+0x754>
 8011b70:	42ab      	cmp	r3, r5
 8011b72:	9a04      	ldr	r2, [sp, #16]
 8011b74:	bfa8      	it	ge
 8011b76:	462b      	movge	r3, r5
 8011b78:	1ad2      	subs	r2, r2, r3
 8011b7a:	9204      	str	r2, [sp, #16]
 8011b7c:	9a05      	ldr	r2, [sp, #20]
 8011b7e:	1aed      	subs	r5, r5, r3
 8011b80:	1ad3      	subs	r3, r2, r3
 8011b82:	9305      	str	r3, [sp, #20]
 8011b84:	9b07      	ldr	r3, [sp, #28]
 8011b86:	b31b      	cbz	r3, 8011bd0 <_dtoa_r+0x7a0>
 8011b88:	9b08      	ldr	r3, [sp, #32]
 8011b8a:	2b00      	cmp	r3, #0
 8011b8c:	f000 80af 	beq.w	8011cee <_dtoa_r+0x8be>
 8011b90:	2e00      	cmp	r6, #0
 8011b92:	dd13      	ble.n	8011bbc <_dtoa_r+0x78c>
 8011b94:	4639      	mov	r1, r7
 8011b96:	4632      	mov	r2, r6
 8011b98:	4620      	mov	r0, r4
 8011b9a:	f000 ffcf 	bl	8012b3c <__pow5mult>
 8011b9e:	ee18 2a10 	vmov	r2, s16
 8011ba2:	4601      	mov	r1, r0
 8011ba4:	4607      	mov	r7, r0
 8011ba6:	4620      	mov	r0, r4
 8011ba8:	f000 ff1e 	bl	80129e8 <__multiply>
 8011bac:	ee18 1a10 	vmov	r1, s16
 8011bb0:	4680      	mov	r8, r0
 8011bb2:	4620      	mov	r0, r4
 8011bb4:	f000 fe00 	bl	80127b8 <_Bfree>
 8011bb8:	ee08 8a10 	vmov	s16, r8
 8011bbc:	9b07      	ldr	r3, [sp, #28]
 8011bbe:	1b9a      	subs	r2, r3, r6
 8011bc0:	d006      	beq.n	8011bd0 <_dtoa_r+0x7a0>
 8011bc2:	ee18 1a10 	vmov	r1, s16
 8011bc6:	4620      	mov	r0, r4
 8011bc8:	f000 ffb8 	bl	8012b3c <__pow5mult>
 8011bcc:	ee08 0a10 	vmov	s16, r0
 8011bd0:	2101      	movs	r1, #1
 8011bd2:	4620      	mov	r0, r4
 8011bd4:	f000 fef2 	bl	80129bc <__i2b>
 8011bd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011bda:	2b00      	cmp	r3, #0
 8011bdc:	4606      	mov	r6, r0
 8011bde:	f340 8088 	ble.w	8011cf2 <_dtoa_r+0x8c2>
 8011be2:	461a      	mov	r2, r3
 8011be4:	4601      	mov	r1, r0
 8011be6:	4620      	mov	r0, r4
 8011be8:	f000 ffa8 	bl	8012b3c <__pow5mult>
 8011bec:	9b06      	ldr	r3, [sp, #24]
 8011bee:	2b01      	cmp	r3, #1
 8011bf0:	4606      	mov	r6, r0
 8011bf2:	f340 8081 	ble.w	8011cf8 <_dtoa_r+0x8c8>
 8011bf6:	f04f 0800 	mov.w	r8, #0
 8011bfa:	6933      	ldr	r3, [r6, #16]
 8011bfc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8011c00:	6918      	ldr	r0, [r3, #16]
 8011c02:	f000 fe8b 	bl	801291c <__hi0bits>
 8011c06:	f1c0 0020 	rsb	r0, r0, #32
 8011c0a:	9b05      	ldr	r3, [sp, #20]
 8011c0c:	4418      	add	r0, r3
 8011c0e:	f010 001f 	ands.w	r0, r0, #31
 8011c12:	f000 8092 	beq.w	8011d3a <_dtoa_r+0x90a>
 8011c16:	f1c0 0320 	rsb	r3, r0, #32
 8011c1a:	2b04      	cmp	r3, #4
 8011c1c:	f340 808a 	ble.w	8011d34 <_dtoa_r+0x904>
 8011c20:	f1c0 001c 	rsb	r0, r0, #28
 8011c24:	9b04      	ldr	r3, [sp, #16]
 8011c26:	4403      	add	r3, r0
 8011c28:	9304      	str	r3, [sp, #16]
 8011c2a:	9b05      	ldr	r3, [sp, #20]
 8011c2c:	4403      	add	r3, r0
 8011c2e:	4405      	add	r5, r0
 8011c30:	9305      	str	r3, [sp, #20]
 8011c32:	9b04      	ldr	r3, [sp, #16]
 8011c34:	2b00      	cmp	r3, #0
 8011c36:	dd07      	ble.n	8011c48 <_dtoa_r+0x818>
 8011c38:	ee18 1a10 	vmov	r1, s16
 8011c3c:	461a      	mov	r2, r3
 8011c3e:	4620      	mov	r0, r4
 8011c40:	f000 ffd6 	bl	8012bf0 <__lshift>
 8011c44:	ee08 0a10 	vmov	s16, r0
 8011c48:	9b05      	ldr	r3, [sp, #20]
 8011c4a:	2b00      	cmp	r3, #0
 8011c4c:	dd05      	ble.n	8011c5a <_dtoa_r+0x82a>
 8011c4e:	4631      	mov	r1, r6
 8011c50:	461a      	mov	r2, r3
 8011c52:	4620      	mov	r0, r4
 8011c54:	f000 ffcc 	bl	8012bf0 <__lshift>
 8011c58:	4606      	mov	r6, r0
 8011c5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011c5c:	2b00      	cmp	r3, #0
 8011c5e:	d06e      	beq.n	8011d3e <_dtoa_r+0x90e>
 8011c60:	ee18 0a10 	vmov	r0, s16
 8011c64:	4631      	mov	r1, r6
 8011c66:	f001 f833 	bl	8012cd0 <__mcmp>
 8011c6a:	2800      	cmp	r0, #0
 8011c6c:	da67      	bge.n	8011d3e <_dtoa_r+0x90e>
 8011c6e:	9b00      	ldr	r3, [sp, #0]
 8011c70:	3b01      	subs	r3, #1
 8011c72:	ee18 1a10 	vmov	r1, s16
 8011c76:	9300      	str	r3, [sp, #0]
 8011c78:	220a      	movs	r2, #10
 8011c7a:	2300      	movs	r3, #0
 8011c7c:	4620      	mov	r0, r4
 8011c7e:	f000 fdbd 	bl	80127fc <__multadd>
 8011c82:	9b08      	ldr	r3, [sp, #32]
 8011c84:	ee08 0a10 	vmov	s16, r0
 8011c88:	2b00      	cmp	r3, #0
 8011c8a:	f000 81b1 	beq.w	8011ff0 <_dtoa_r+0xbc0>
 8011c8e:	2300      	movs	r3, #0
 8011c90:	4639      	mov	r1, r7
 8011c92:	220a      	movs	r2, #10
 8011c94:	4620      	mov	r0, r4
 8011c96:	f000 fdb1 	bl	80127fc <__multadd>
 8011c9a:	9b02      	ldr	r3, [sp, #8]
 8011c9c:	2b00      	cmp	r3, #0
 8011c9e:	4607      	mov	r7, r0
 8011ca0:	f300 808e 	bgt.w	8011dc0 <_dtoa_r+0x990>
 8011ca4:	9b06      	ldr	r3, [sp, #24]
 8011ca6:	2b02      	cmp	r3, #2
 8011ca8:	dc51      	bgt.n	8011d4e <_dtoa_r+0x91e>
 8011caa:	e089      	b.n	8011dc0 <_dtoa_r+0x990>
 8011cac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011cae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8011cb2:	e74b      	b.n	8011b4c <_dtoa_r+0x71c>
 8011cb4:	9b03      	ldr	r3, [sp, #12]
 8011cb6:	1e5e      	subs	r6, r3, #1
 8011cb8:	9b07      	ldr	r3, [sp, #28]
 8011cba:	42b3      	cmp	r3, r6
 8011cbc:	bfbf      	itttt	lt
 8011cbe:	9b07      	ldrlt	r3, [sp, #28]
 8011cc0:	9607      	strlt	r6, [sp, #28]
 8011cc2:	1af2      	sublt	r2, r6, r3
 8011cc4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8011cc6:	bfb6      	itet	lt
 8011cc8:	189b      	addlt	r3, r3, r2
 8011cca:	1b9e      	subge	r6, r3, r6
 8011ccc:	930a      	strlt	r3, [sp, #40]	; 0x28
 8011cce:	9b03      	ldr	r3, [sp, #12]
 8011cd0:	bfb8      	it	lt
 8011cd2:	2600      	movlt	r6, #0
 8011cd4:	2b00      	cmp	r3, #0
 8011cd6:	bfb7      	itett	lt
 8011cd8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8011cdc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8011ce0:	1a9d      	sublt	r5, r3, r2
 8011ce2:	2300      	movlt	r3, #0
 8011ce4:	e734      	b.n	8011b50 <_dtoa_r+0x720>
 8011ce6:	9e07      	ldr	r6, [sp, #28]
 8011ce8:	9d04      	ldr	r5, [sp, #16]
 8011cea:	9f08      	ldr	r7, [sp, #32]
 8011cec:	e73b      	b.n	8011b66 <_dtoa_r+0x736>
 8011cee:	9a07      	ldr	r2, [sp, #28]
 8011cf0:	e767      	b.n	8011bc2 <_dtoa_r+0x792>
 8011cf2:	9b06      	ldr	r3, [sp, #24]
 8011cf4:	2b01      	cmp	r3, #1
 8011cf6:	dc18      	bgt.n	8011d2a <_dtoa_r+0x8fa>
 8011cf8:	f1ba 0f00 	cmp.w	sl, #0
 8011cfc:	d115      	bne.n	8011d2a <_dtoa_r+0x8fa>
 8011cfe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011d02:	b993      	cbnz	r3, 8011d2a <_dtoa_r+0x8fa>
 8011d04:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011d08:	0d1b      	lsrs	r3, r3, #20
 8011d0a:	051b      	lsls	r3, r3, #20
 8011d0c:	b183      	cbz	r3, 8011d30 <_dtoa_r+0x900>
 8011d0e:	9b04      	ldr	r3, [sp, #16]
 8011d10:	3301      	adds	r3, #1
 8011d12:	9304      	str	r3, [sp, #16]
 8011d14:	9b05      	ldr	r3, [sp, #20]
 8011d16:	3301      	adds	r3, #1
 8011d18:	9305      	str	r3, [sp, #20]
 8011d1a:	f04f 0801 	mov.w	r8, #1
 8011d1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011d20:	2b00      	cmp	r3, #0
 8011d22:	f47f af6a 	bne.w	8011bfa <_dtoa_r+0x7ca>
 8011d26:	2001      	movs	r0, #1
 8011d28:	e76f      	b.n	8011c0a <_dtoa_r+0x7da>
 8011d2a:	f04f 0800 	mov.w	r8, #0
 8011d2e:	e7f6      	b.n	8011d1e <_dtoa_r+0x8ee>
 8011d30:	4698      	mov	r8, r3
 8011d32:	e7f4      	b.n	8011d1e <_dtoa_r+0x8ee>
 8011d34:	f43f af7d 	beq.w	8011c32 <_dtoa_r+0x802>
 8011d38:	4618      	mov	r0, r3
 8011d3a:	301c      	adds	r0, #28
 8011d3c:	e772      	b.n	8011c24 <_dtoa_r+0x7f4>
 8011d3e:	9b03      	ldr	r3, [sp, #12]
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	dc37      	bgt.n	8011db4 <_dtoa_r+0x984>
 8011d44:	9b06      	ldr	r3, [sp, #24]
 8011d46:	2b02      	cmp	r3, #2
 8011d48:	dd34      	ble.n	8011db4 <_dtoa_r+0x984>
 8011d4a:	9b03      	ldr	r3, [sp, #12]
 8011d4c:	9302      	str	r3, [sp, #8]
 8011d4e:	9b02      	ldr	r3, [sp, #8]
 8011d50:	b96b      	cbnz	r3, 8011d6e <_dtoa_r+0x93e>
 8011d52:	4631      	mov	r1, r6
 8011d54:	2205      	movs	r2, #5
 8011d56:	4620      	mov	r0, r4
 8011d58:	f000 fd50 	bl	80127fc <__multadd>
 8011d5c:	4601      	mov	r1, r0
 8011d5e:	4606      	mov	r6, r0
 8011d60:	ee18 0a10 	vmov	r0, s16
 8011d64:	f000 ffb4 	bl	8012cd0 <__mcmp>
 8011d68:	2800      	cmp	r0, #0
 8011d6a:	f73f adbb 	bgt.w	80118e4 <_dtoa_r+0x4b4>
 8011d6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011d70:	9d01      	ldr	r5, [sp, #4]
 8011d72:	43db      	mvns	r3, r3
 8011d74:	9300      	str	r3, [sp, #0]
 8011d76:	f04f 0800 	mov.w	r8, #0
 8011d7a:	4631      	mov	r1, r6
 8011d7c:	4620      	mov	r0, r4
 8011d7e:	f000 fd1b 	bl	80127b8 <_Bfree>
 8011d82:	2f00      	cmp	r7, #0
 8011d84:	f43f aea4 	beq.w	8011ad0 <_dtoa_r+0x6a0>
 8011d88:	f1b8 0f00 	cmp.w	r8, #0
 8011d8c:	d005      	beq.n	8011d9a <_dtoa_r+0x96a>
 8011d8e:	45b8      	cmp	r8, r7
 8011d90:	d003      	beq.n	8011d9a <_dtoa_r+0x96a>
 8011d92:	4641      	mov	r1, r8
 8011d94:	4620      	mov	r0, r4
 8011d96:	f000 fd0f 	bl	80127b8 <_Bfree>
 8011d9a:	4639      	mov	r1, r7
 8011d9c:	4620      	mov	r0, r4
 8011d9e:	f000 fd0b 	bl	80127b8 <_Bfree>
 8011da2:	e695      	b.n	8011ad0 <_dtoa_r+0x6a0>
 8011da4:	2600      	movs	r6, #0
 8011da6:	4637      	mov	r7, r6
 8011da8:	e7e1      	b.n	8011d6e <_dtoa_r+0x93e>
 8011daa:	9700      	str	r7, [sp, #0]
 8011dac:	4637      	mov	r7, r6
 8011dae:	e599      	b.n	80118e4 <_dtoa_r+0x4b4>
 8011db0:	40240000 	.word	0x40240000
 8011db4:	9b08      	ldr	r3, [sp, #32]
 8011db6:	2b00      	cmp	r3, #0
 8011db8:	f000 80ca 	beq.w	8011f50 <_dtoa_r+0xb20>
 8011dbc:	9b03      	ldr	r3, [sp, #12]
 8011dbe:	9302      	str	r3, [sp, #8]
 8011dc0:	2d00      	cmp	r5, #0
 8011dc2:	dd05      	ble.n	8011dd0 <_dtoa_r+0x9a0>
 8011dc4:	4639      	mov	r1, r7
 8011dc6:	462a      	mov	r2, r5
 8011dc8:	4620      	mov	r0, r4
 8011dca:	f000 ff11 	bl	8012bf0 <__lshift>
 8011dce:	4607      	mov	r7, r0
 8011dd0:	f1b8 0f00 	cmp.w	r8, #0
 8011dd4:	d05b      	beq.n	8011e8e <_dtoa_r+0xa5e>
 8011dd6:	6879      	ldr	r1, [r7, #4]
 8011dd8:	4620      	mov	r0, r4
 8011dda:	f000 fcad 	bl	8012738 <_Balloc>
 8011dde:	4605      	mov	r5, r0
 8011de0:	b928      	cbnz	r0, 8011dee <_dtoa_r+0x9be>
 8011de2:	4b87      	ldr	r3, [pc, #540]	; (8012000 <_dtoa_r+0xbd0>)
 8011de4:	4602      	mov	r2, r0
 8011de6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8011dea:	f7ff bb3b 	b.w	8011464 <_dtoa_r+0x34>
 8011dee:	693a      	ldr	r2, [r7, #16]
 8011df0:	3202      	adds	r2, #2
 8011df2:	0092      	lsls	r2, r2, #2
 8011df4:	f107 010c 	add.w	r1, r7, #12
 8011df8:	300c      	adds	r0, #12
 8011dfa:	f7fd fdbb 	bl	800f974 <memcpy>
 8011dfe:	2201      	movs	r2, #1
 8011e00:	4629      	mov	r1, r5
 8011e02:	4620      	mov	r0, r4
 8011e04:	f000 fef4 	bl	8012bf0 <__lshift>
 8011e08:	9b01      	ldr	r3, [sp, #4]
 8011e0a:	f103 0901 	add.w	r9, r3, #1
 8011e0e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8011e12:	4413      	add	r3, r2
 8011e14:	9305      	str	r3, [sp, #20]
 8011e16:	f00a 0301 	and.w	r3, sl, #1
 8011e1a:	46b8      	mov	r8, r7
 8011e1c:	9304      	str	r3, [sp, #16]
 8011e1e:	4607      	mov	r7, r0
 8011e20:	4631      	mov	r1, r6
 8011e22:	ee18 0a10 	vmov	r0, s16
 8011e26:	f7ff fa77 	bl	8011318 <quorem>
 8011e2a:	4641      	mov	r1, r8
 8011e2c:	9002      	str	r0, [sp, #8]
 8011e2e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8011e32:	ee18 0a10 	vmov	r0, s16
 8011e36:	f000 ff4b 	bl	8012cd0 <__mcmp>
 8011e3a:	463a      	mov	r2, r7
 8011e3c:	9003      	str	r0, [sp, #12]
 8011e3e:	4631      	mov	r1, r6
 8011e40:	4620      	mov	r0, r4
 8011e42:	f000 ff61 	bl	8012d08 <__mdiff>
 8011e46:	68c2      	ldr	r2, [r0, #12]
 8011e48:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8011e4c:	4605      	mov	r5, r0
 8011e4e:	bb02      	cbnz	r2, 8011e92 <_dtoa_r+0xa62>
 8011e50:	4601      	mov	r1, r0
 8011e52:	ee18 0a10 	vmov	r0, s16
 8011e56:	f000 ff3b 	bl	8012cd0 <__mcmp>
 8011e5a:	4602      	mov	r2, r0
 8011e5c:	4629      	mov	r1, r5
 8011e5e:	4620      	mov	r0, r4
 8011e60:	9207      	str	r2, [sp, #28]
 8011e62:	f000 fca9 	bl	80127b8 <_Bfree>
 8011e66:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8011e6a:	ea43 0102 	orr.w	r1, r3, r2
 8011e6e:	9b04      	ldr	r3, [sp, #16]
 8011e70:	430b      	orrs	r3, r1
 8011e72:	464d      	mov	r5, r9
 8011e74:	d10f      	bne.n	8011e96 <_dtoa_r+0xa66>
 8011e76:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011e7a:	d02a      	beq.n	8011ed2 <_dtoa_r+0xaa2>
 8011e7c:	9b03      	ldr	r3, [sp, #12]
 8011e7e:	2b00      	cmp	r3, #0
 8011e80:	dd02      	ble.n	8011e88 <_dtoa_r+0xa58>
 8011e82:	9b02      	ldr	r3, [sp, #8]
 8011e84:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8011e88:	f88b a000 	strb.w	sl, [fp]
 8011e8c:	e775      	b.n	8011d7a <_dtoa_r+0x94a>
 8011e8e:	4638      	mov	r0, r7
 8011e90:	e7ba      	b.n	8011e08 <_dtoa_r+0x9d8>
 8011e92:	2201      	movs	r2, #1
 8011e94:	e7e2      	b.n	8011e5c <_dtoa_r+0xa2c>
 8011e96:	9b03      	ldr	r3, [sp, #12]
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	db04      	blt.n	8011ea6 <_dtoa_r+0xa76>
 8011e9c:	9906      	ldr	r1, [sp, #24]
 8011e9e:	430b      	orrs	r3, r1
 8011ea0:	9904      	ldr	r1, [sp, #16]
 8011ea2:	430b      	orrs	r3, r1
 8011ea4:	d122      	bne.n	8011eec <_dtoa_r+0xabc>
 8011ea6:	2a00      	cmp	r2, #0
 8011ea8:	ddee      	ble.n	8011e88 <_dtoa_r+0xa58>
 8011eaa:	ee18 1a10 	vmov	r1, s16
 8011eae:	2201      	movs	r2, #1
 8011eb0:	4620      	mov	r0, r4
 8011eb2:	f000 fe9d 	bl	8012bf0 <__lshift>
 8011eb6:	4631      	mov	r1, r6
 8011eb8:	ee08 0a10 	vmov	s16, r0
 8011ebc:	f000 ff08 	bl	8012cd0 <__mcmp>
 8011ec0:	2800      	cmp	r0, #0
 8011ec2:	dc03      	bgt.n	8011ecc <_dtoa_r+0xa9c>
 8011ec4:	d1e0      	bne.n	8011e88 <_dtoa_r+0xa58>
 8011ec6:	f01a 0f01 	tst.w	sl, #1
 8011eca:	d0dd      	beq.n	8011e88 <_dtoa_r+0xa58>
 8011ecc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011ed0:	d1d7      	bne.n	8011e82 <_dtoa_r+0xa52>
 8011ed2:	2339      	movs	r3, #57	; 0x39
 8011ed4:	f88b 3000 	strb.w	r3, [fp]
 8011ed8:	462b      	mov	r3, r5
 8011eda:	461d      	mov	r5, r3
 8011edc:	3b01      	subs	r3, #1
 8011ede:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8011ee2:	2a39      	cmp	r2, #57	; 0x39
 8011ee4:	d071      	beq.n	8011fca <_dtoa_r+0xb9a>
 8011ee6:	3201      	adds	r2, #1
 8011ee8:	701a      	strb	r2, [r3, #0]
 8011eea:	e746      	b.n	8011d7a <_dtoa_r+0x94a>
 8011eec:	2a00      	cmp	r2, #0
 8011eee:	dd07      	ble.n	8011f00 <_dtoa_r+0xad0>
 8011ef0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011ef4:	d0ed      	beq.n	8011ed2 <_dtoa_r+0xaa2>
 8011ef6:	f10a 0301 	add.w	r3, sl, #1
 8011efa:	f88b 3000 	strb.w	r3, [fp]
 8011efe:	e73c      	b.n	8011d7a <_dtoa_r+0x94a>
 8011f00:	9b05      	ldr	r3, [sp, #20]
 8011f02:	f809 ac01 	strb.w	sl, [r9, #-1]
 8011f06:	4599      	cmp	r9, r3
 8011f08:	d047      	beq.n	8011f9a <_dtoa_r+0xb6a>
 8011f0a:	ee18 1a10 	vmov	r1, s16
 8011f0e:	2300      	movs	r3, #0
 8011f10:	220a      	movs	r2, #10
 8011f12:	4620      	mov	r0, r4
 8011f14:	f000 fc72 	bl	80127fc <__multadd>
 8011f18:	45b8      	cmp	r8, r7
 8011f1a:	ee08 0a10 	vmov	s16, r0
 8011f1e:	f04f 0300 	mov.w	r3, #0
 8011f22:	f04f 020a 	mov.w	r2, #10
 8011f26:	4641      	mov	r1, r8
 8011f28:	4620      	mov	r0, r4
 8011f2a:	d106      	bne.n	8011f3a <_dtoa_r+0xb0a>
 8011f2c:	f000 fc66 	bl	80127fc <__multadd>
 8011f30:	4680      	mov	r8, r0
 8011f32:	4607      	mov	r7, r0
 8011f34:	f109 0901 	add.w	r9, r9, #1
 8011f38:	e772      	b.n	8011e20 <_dtoa_r+0x9f0>
 8011f3a:	f000 fc5f 	bl	80127fc <__multadd>
 8011f3e:	4639      	mov	r1, r7
 8011f40:	4680      	mov	r8, r0
 8011f42:	2300      	movs	r3, #0
 8011f44:	220a      	movs	r2, #10
 8011f46:	4620      	mov	r0, r4
 8011f48:	f000 fc58 	bl	80127fc <__multadd>
 8011f4c:	4607      	mov	r7, r0
 8011f4e:	e7f1      	b.n	8011f34 <_dtoa_r+0xb04>
 8011f50:	9b03      	ldr	r3, [sp, #12]
 8011f52:	9302      	str	r3, [sp, #8]
 8011f54:	9d01      	ldr	r5, [sp, #4]
 8011f56:	ee18 0a10 	vmov	r0, s16
 8011f5a:	4631      	mov	r1, r6
 8011f5c:	f7ff f9dc 	bl	8011318 <quorem>
 8011f60:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8011f64:	9b01      	ldr	r3, [sp, #4]
 8011f66:	f805 ab01 	strb.w	sl, [r5], #1
 8011f6a:	1aea      	subs	r2, r5, r3
 8011f6c:	9b02      	ldr	r3, [sp, #8]
 8011f6e:	4293      	cmp	r3, r2
 8011f70:	dd09      	ble.n	8011f86 <_dtoa_r+0xb56>
 8011f72:	ee18 1a10 	vmov	r1, s16
 8011f76:	2300      	movs	r3, #0
 8011f78:	220a      	movs	r2, #10
 8011f7a:	4620      	mov	r0, r4
 8011f7c:	f000 fc3e 	bl	80127fc <__multadd>
 8011f80:	ee08 0a10 	vmov	s16, r0
 8011f84:	e7e7      	b.n	8011f56 <_dtoa_r+0xb26>
 8011f86:	9b02      	ldr	r3, [sp, #8]
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	bfc8      	it	gt
 8011f8c:	461d      	movgt	r5, r3
 8011f8e:	9b01      	ldr	r3, [sp, #4]
 8011f90:	bfd8      	it	le
 8011f92:	2501      	movle	r5, #1
 8011f94:	441d      	add	r5, r3
 8011f96:	f04f 0800 	mov.w	r8, #0
 8011f9a:	ee18 1a10 	vmov	r1, s16
 8011f9e:	2201      	movs	r2, #1
 8011fa0:	4620      	mov	r0, r4
 8011fa2:	f000 fe25 	bl	8012bf0 <__lshift>
 8011fa6:	4631      	mov	r1, r6
 8011fa8:	ee08 0a10 	vmov	s16, r0
 8011fac:	f000 fe90 	bl	8012cd0 <__mcmp>
 8011fb0:	2800      	cmp	r0, #0
 8011fb2:	dc91      	bgt.n	8011ed8 <_dtoa_r+0xaa8>
 8011fb4:	d102      	bne.n	8011fbc <_dtoa_r+0xb8c>
 8011fb6:	f01a 0f01 	tst.w	sl, #1
 8011fba:	d18d      	bne.n	8011ed8 <_dtoa_r+0xaa8>
 8011fbc:	462b      	mov	r3, r5
 8011fbe:	461d      	mov	r5, r3
 8011fc0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011fc4:	2a30      	cmp	r2, #48	; 0x30
 8011fc6:	d0fa      	beq.n	8011fbe <_dtoa_r+0xb8e>
 8011fc8:	e6d7      	b.n	8011d7a <_dtoa_r+0x94a>
 8011fca:	9a01      	ldr	r2, [sp, #4]
 8011fcc:	429a      	cmp	r2, r3
 8011fce:	d184      	bne.n	8011eda <_dtoa_r+0xaaa>
 8011fd0:	9b00      	ldr	r3, [sp, #0]
 8011fd2:	3301      	adds	r3, #1
 8011fd4:	9300      	str	r3, [sp, #0]
 8011fd6:	2331      	movs	r3, #49	; 0x31
 8011fd8:	7013      	strb	r3, [r2, #0]
 8011fda:	e6ce      	b.n	8011d7a <_dtoa_r+0x94a>
 8011fdc:	4b09      	ldr	r3, [pc, #36]	; (8012004 <_dtoa_r+0xbd4>)
 8011fde:	f7ff ba95 	b.w	801150c <_dtoa_r+0xdc>
 8011fe2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011fe4:	2b00      	cmp	r3, #0
 8011fe6:	f47f aa6e 	bne.w	80114c6 <_dtoa_r+0x96>
 8011fea:	4b07      	ldr	r3, [pc, #28]	; (8012008 <_dtoa_r+0xbd8>)
 8011fec:	f7ff ba8e 	b.w	801150c <_dtoa_r+0xdc>
 8011ff0:	9b02      	ldr	r3, [sp, #8]
 8011ff2:	2b00      	cmp	r3, #0
 8011ff4:	dcae      	bgt.n	8011f54 <_dtoa_r+0xb24>
 8011ff6:	9b06      	ldr	r3, [sp, #24]
 8011ff8:	2b02      	cmp	r3, #2
 8011ffa:	f73f aea8 	bgt.w	8011d4e <_dtoa_r+0x91e>
 8011ffe:	e7a9      	b.n	8011f54 <_dtoa_r+0xb24>
 8012000:	080159ef 	.word	0x080159ef
 8012004:	080158fc 	.word	0x080158fc
 8012008:	08015970 	.word	0x08015970

0801200c <rshift>:
 801200c:	6903      	ldr	r3, [r0, #16]
 801200e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8012012:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012016:	ea4f 1261 	mov.w	r2, r1, asr #5
 801201a:	f100 0414 	add.w	r4, r0, #20
 801201e:	dd45      	ble.n	80120ac <rshift+0xa0>
 8012020:	f011 011f 	ands.w	r1, r1, #31
 8012024:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8012028:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801202c:	d10c      	bne.n	8012048 <rshift+0x3c>
 801202e:	f100 0710 	add.w	r7, r0, #16
 8012032:	4629      	mov	r1, r5
 8012034:	42b1      	cmp	r1, r6
 8012036:	d334      	bcc.n	80120a2 <rshift+0x96>
 8012038:	1a9b      	subs	r3, r3, r2
 801203a:	009b      	lsls	r3, r3, #2
 801203c:	1eea      	subs	r2, r5, #3
 801203e:	4296      	cmp	r6, r2
 8012040:	bf38      	it	cc
 8012042:	2300      	movcc	r3, #0
 8012044:	4423      	add	r3, r4
 8012046:	e015      	b.n	8012074 <rshift+0x68>
 8012048:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801204c:	f1c1 0820 	rsb	r8, r1, #32
 8012050:	40cf      	lsrs	r7, r1
 8012052:	f105 0e04 	add.w	lr, r5, #4
 8012056:	46a1      	mov	r9, r4
 8012058:	4576      	cmp	r6, lr
 801205a:	46f4      	mov	ip, lr
 801205c:	d815      	bhi.n	801208a <rshift+0x7e>
 801205e:	1a9a      	subs	r2, r3, r2
 8012060:	0092      	lsls	r2, r2, #2
 8012062:	3a04      	subs	r2, #4
 8012064:	3501      	adds	r5, #1
 8012066:	42ae      	cmp	r6, r5
 8012068:	bf38      	it	cc
 801206a:	2200      	movcc	r2, #0
 801206c:	18a3      	adds	r3, r4, r2
 801206e:	50a7      	str	r7, [r4, r2]
 8012070:	b107      	cbz	r7, 8012074 <rshift+0x68>
 8012072:	3304      	adds	r3, #4
 8012074:	1b1a      	subs	r2, r3, r4
 8012076:	42a3      	cmp	r3, r4
 8012078:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801207c:	bf08      	it	eq
 801207e:	2300      	moveq	r3, #0
 8012080:	6102      	str	r2, [r0, #16]
 8012082:	bf08      	it	eq
 8012084:	6143      	streq	r3, [r0, #20]
 8012086:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801208a:	f8dc c000 	ldr.w	ip, [ip]
 801208e:	fa0c fc08 	lsl.w	ip, ip, r8
 8012092:	ea4c 0707 	orr.w	r7, ip, r7
 8012096:	f849 7b04 	str.w	r7, [r9], #4
 801209a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801209e:	40cf      	lsrs	r7, r1
 80120a0:	e7da      	b.n	8012058 <rshift+0x4c>
 80120a2:	f851 cb04 	ldr.w	ip, [r1], #4
 80120a6:	f847 cf04 	str.w	ip, [r7, #4]!
 80120aa:	e7c3      	b.n	8012034 <rshift+0x28>
 80120ac:	4623      	mov	r3, r4
 80120ae:	e7e1      	b.n	8012074 <rshift+0x68>

080120b0 <__hexdig_fun>:
 80120b0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80120b4:	2b09      	cmp	r3, #9
 80120b6:	d802      	bhi.n	80120be <__hexdig_fun+0xe>
 80120b8:	3820      	subs	r0, #32
 80120ba:	b2c0      	uxtb	r0, r0
 80120bc:	4770      	bx	lr
 80120be:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80120c2:	2b05      	cmp	r3, #5
 80120c4:	d801      	bhi.n	80120ca <__hexdig_fun+0x1a>
 80120c6:	3847      	subs	r0, #71	; 0x47
 80120c8:	e7f7      	b.n	80120ba <__hexdig_fun+0xa>
 80120ca:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80120ce:	2b05      	cmp	r3, #5
 80120d0:	d801      	bhi.n	80120d6 <__hexdig_fun+0x26>
 80120d2:	3827      	subs	r0, #39	; 0x27
 80120d4:	e7f1      	b.n	80120ba <__hexdig_fun+0xa>
 80120d6:	2000      	movs	r0, #0
 80120d8:	4770      	bx	lr
	...

080120dc <__gethex>:
 80120dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120e0:	ed2d 8b02 	vpush	{d8}
 80120e4:	b089      	sub	sp, #36	; 0x24
 80120e6:	ee08 0a10 	vmov	s16, r0
 80120ea:	9304      	str	r3, [sp, #16]
 80120ec:	4bb4      	ldr	r3, [pc, #720]	; (80123c0 <__gethex+0x2e4>)
 80120ee:	681b      	ldr	r3, [r3, #0]
 80120f0:	9301      	str	r3, [sp, #4]
 80120f2:	4618      	mov	r0, r3
 80120f4:	468b      	mov	fp, r1
 80120f6:	4690      	mov	r8, r2
 80120f8:	f7ee f86a 	bl	80001d0 <strlen>
 80120fc:	9b01      	ldr	r3, [sp, #4]
 80120fe:	f8db 2000 	ldr.w	r2, [fp]
 8012102:	4403      	add	r3, r0
 8012104:	4682      	mov	sl, r0
 8012106:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801210a:	9305      	str	r3, [sp, #20]
 801210c:	1c93      	adds	r3, r2, #2
 801210e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8012112:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8012116:	32fe      	adds	r2, #254	; 0xfe
 8012118:	18d1      	adds	r1, r2, r3
 801211a:	461f      	mov	r7, r3
 801211c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8012120:	9100      	str	r1, [sp, #0]
 8012122:	2830      	cmp	r0, #48	; 0x30
 8012124:	d0f8      	beq.n	8012118 <__gethex+0x3c>
 8012126:	f7ff ffc3 	bl	80120b0 <__hexdig_fun>
 801212a:	4604      	mov	r4, r0
 801212c:	2800      	cmp	r0, #0
 801212e:	d13a      	bne.n	80121a6 <__gethex+0xca>
 8012130:	9901      	ldr	r1, [sp, #4]
 8012132:	4652      	mov	r2, sl
 8012134:	4638      	mov	r0, r7
 8012136:	f7fe f9d0 	bl	80104da <strncmp>
 801213a:	4605      	mov	r5, r0
 801213c:	2800      	cmp	r0, #0
 801213e:	d168      	bne.n	8012212 <__gethex+0x136>
 8012140:	f817 000a 	ldrb.w	r0, [r7, sl]
 8012144:	eb07 060a 	add.w	r6, r7, sl
 8012148:	f7ff ffb2 	bl	80120b0 <__hexdig_fun>
 801214c:	2800      	cmp	r0, #0
 801214e:	d062      	beq.n	8012216 <__gethex+0x13a>
 8012150:	4633      	mov	r3, r6
 8012152:	7818      	ldrb	r0, [r3, #0]
 8012154:	2830      	cmp	r0, #48	; 0x30
 8012156:	461f      	mov	r7, r3
 8012158:	f103 0301 	add.w	r3, r3, #1
 801215c:	d0f9      	beq.n	8012152 <__gethex+0x76>
 801215e:	f7ff ffa7 	bl	80120b0 <__hexdig_fun>
 8012162:	2301      	movs	r3, #1
 8012164:	fab0 f480 	clz	r4, r0
 8012168:	0964      	lsrs	r4, r4, #5
 801216a:	4635      	mov	r5, r6
 801216c:	9300      	str	r3, [sp, #0]
 801216e:	463a      	mov	r2, r7
 8012170:	4616      	mov	r6, r2
 8012172:	3201      	adds	r2, #1
 8012174:	7830      	ldrb	r0, [r6, #0]
 8012176:	f7ff ff9b 	bl	80120b0 <__hexdig_fun>
 801217a:	2800      	cmp	r0, #0
 801217c:	d1f8      	bne.n	8012170 <__gethex+0x94>
 801217e:	9901      	ldr	r1, [sp, #4]
 8012180:	4652      	mov	r2, sl
 8012182:	4630      	mov	r0, r6
 8012184:	f7fe f9a9 	bl	80104da <strncmp>
 8012188:	b980      	cbnz	r0, 80121ac <__gethex+0xd0>
 801218a:	b94d      	cbnz	r5, 80121a0 <__gethex+0xc4>
 801218c:	eb06 050a 	add.w	r5, r6, sl
 8012190:	462a      	mov	r2, r5
 8012192:	4616      	mov	r6, r2
 8012194:	3201      	adds	r2, #1
 8012196:	7830      	ldrb	r0, [r6, #0]
 8012198:	f7ff ff8a 	bl	80120b0 <__hexdig_fun>
 801219c:	2800      	cmp	r0, #0
 801219e:	d1f8      	bne.n	8012192 <__gethex+0xb6>
 80121a0:	1bad      	subs	r5, r5, r6
 80121a2:	00ad      	lsls	r5, r5, #2
 80121a4:	e004      	b.n	80121b0 <__gethex+0xd4>
 80121a6:	2400      	movs	r4, #0
 80121a8:	4625      	mov	r5, r4
 80121aa:	e7e0      	b.n	801216e <__gethex+0x92>
 80121ac:	2d00      	cmp	r5, #0
 80121ae:	d1f7      	bne.n	80121a0 <__gethex+0xc4>
 80121b0:	7833      	ldrb	r3, [r6, #0]
 80121b2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80121b6:	2b50      	cmp	r3, #80	; 0x50
 80121b8:	d13b      	bne.n	8012232 <__gethex+0x156>
 80121ba:	7873      	ldrb	r3, [r6, #1]
 80121bc:	2b2b      	cmp	r3, #43	; 0x2b
 80121be:	d02c      	beq.n	801221a <__gethex+0x13e>
 80121c0:	2b2d      	cmp	r3, #45	; 0x2d
 80121c2:	d02e      	beq.n	8012222 <__gethex+0x146>
 80121c4:	1c71      	adds	r1, r6, #1
 80121c6:	f04f 0900 	mov.w	r9, #0
 80121ca:	7808      	ldrb	r0, [r1, #0]
 80121cc:	f7ff ff70 	bl	80120b0 <__hexdig_fun>
 80121d0:	1e43      	subs	r3, r0, #1
 80121d2:	b2db      	uxtb	r3, r3
 80121d4:	2b18      	cmp	r3, #24
 80121d6:	d82c      	bhi.n	8012232 <__gethex+0x156>
 80121d8:	f1a0 0210 	sub.w	r2, r0, #16
 80121dc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80121e0:	f7ff ff66 	bl	80120b0 <__hexdig_fun>
 80121e4:	1e43      	subs	r3, r0, #1
 80121e6:	b2db      	uxtb	r3, r3
 80121e8:	2b18      	cmp	r3, #24
 80121ea:	d91d      	bls.n	8012228 <__gethex+0x14c>
 80121ec:	f1b9 0f00 	cmp.w	r9, #0
 80121f0:	d000      	beq.n	80121f4 <__gethex+0x118>
 80121f2:	4252      	negs	r2, r2
 80121f4:	4415      	add	r5, r2
 80121f6:	f8cb 1000 	str.w	r1, [fp]
 80121fa:	b1e4      	cbz	r4, 8012236 <__gethex+0x15a>
 80121fc:	9b00      	ldr	r3, [sp, #0]
 80121fe:	2b00      	cmp	r3, #0
 8012200:	bf14      	ite	ne
 8012202:	2700      	movne	r7, #0
 8012204:	2706      	moveq	r7, #6
 8012206:	4638      	mov	r0, r7
 8012208:	b009      	add	sp, #36	; 0x24
 801220a:	ecbd 8b02 	vpop	{d8}
 801220e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012212:	463e      	mov	r6, r7
 8012214:	4625      	mov	r5, r4
 8012216:	2401      	movs	r4, #1
 8012218:	e7ca      	b.n	80121b0 <__gethex+0xd4>
 801221a:	f04f 0900 	mov.w	r9, #0
 801221e:	1cb1      	adds	r1, r6, #2
 8012220:	e7d3      	b.n	80121ca <__gethex+0xee>
 8012222:	f04f 0901 	mov.w	r9, #1
 8012226:	e7fa      	b.n	801221e <__gethex+0x142>
 8012228:	230a      	movs	r3, #10
 801222a:	fb03 0202 	mla	r2, r3, r2, r0
 801222e:	3a10      	subs	r2, #16
 8012230:	e7d4      	b.n	80121dc <__gethex+0x100>
 8012232:	4631      	mov	r1, r6
 8012234:	e7df      	b.n	80121f6 <__gethex+0x11a>
 8012236:	1bf3      	subs	r3, r6, r7
 8012238:	3b01      	subs	r3, #1
 801223a:	4621      	mov	r1, r4
 801223c:	2b07      	cmp	r3, #7
 801223e:	dc0b      	bgt.n	8012258 <__gethex+0x17c>
 8012240:	ee18 0a10 	vmov	r0, s16
 8012244:	f000 fa78 	bl	8012738 <_Balloc>
 8012248:	4604      	mov	r4, r0
 801224a:	b940      	cbnz	r0, 801225e <__gethex+0x182>
 801224c:	4b5d      	ldr	r3, [pc, #372]	; (80123c4 <__gethex+0x2e8>)
 801224e:	4602      	mov	r2, r0
 8012250:	21de      	movs	r1, #222	; 0xde
 8012252:	485d      	ldr	r0, [pc, #372]	; (80123c8 <__gethex+0x2ec>)
 8012254:	f001 f8f6 	bl	8013444 <__assert_func>
 8012258:	3101      	adds	r1, #1
 801225a:	105b      	asrs	r3, r3, #1
 801225c:	e7ee      	b.n	801223c <__gethex+0x160>
 801225e:	f100 0914 	add.w	r9, r0, #20
 8012262:	f04f 0b00 	mov.w	fp, #0
 8012266:	f1ca 0301 	rsb	r3, sl, #1
 801226a:	f8cd 9008 	str.w	r9, [sp, #8]
 801226e:	f8cd b000 	str.w	fp, [sp]
 8012272:	9306      	str	r3, [sp, #24]
 8012274:	42b7      	cmp	r7, r6
 8012276:	d340      	bcc.n	80122fa <__gethex+0x21e>
 8012278:	9802      	ldr	r0, [sp, #8]
 801227a:	9b00      	ldr	r3, [sp, #0]
 801227c:	f840 3b04 	str.w	r3, [r0], #4
 8012280:	eba0 0009 	sub.w	r0, r0, r9
 8012284:	1080      	asrs	r0, r0, #2
 8012286:	0146      	lsls	r6, r0, #5
 8012288:	6120      	str	r0, [r4, #16]
 801228a:	4618      	mov	r0, r3
 801228c:	f000 fb46 	bl	801291c <__hi0bits>
 8012290:	1a30      	subs	r0, r6, r0
 8012292:	f8d8 6000 	ldr.w	r6, [r8]
 8012296:	42b0      	cmp	r0, r6
 8012298:	dd63      	ble.n	8012362 <__gethex+0x286>
 801229a:	1b87      	subs	r7, r0, r6
 801229c:	4639      	mov	r1, r7
 801229e:	4620      	mov	r0, r4
 80122a0:	f000 feea 	bl	8013078 <__any_on>
 80122a4:	4682      	mov	sl, r0
 80122a6:	b1a8      	cbz	r0, 80122d4 <__gethex+0x1f8>
 80122a8:	1e7b      	subs	r3, r7, #1
 80122aa:	1159      	asrs	r1, r3, #5
 80122ac:	f003 021f 	and.w	r2, r3, #31
 80122b0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80122b4:	f04f 0a01 	mov.w	sl, #1
 80122b8:	fa0a f202 	lsl.w	r2, sl, r2
 80122bc:	420a      	tst	r2, r1
 80122be:	d009      	beq.n	80122d4 <__gethex+0x1f8>
 80122c0:	4553      	cmp	r3, sl
 80122c2:	dd05      	ble.n	80122d0 <__gethex+0x1f4>
 80122c4:	1eb9      	subs	r1, r7, #2
 80122c6:	4620      	mov	r0, r4
 80122c8:	f000 fed6 	bl	8013078 <__any_on>
 80122cc:	2800      	cmp	r0, #0
 80122ce:	d145      	bne.n	801235c <__gethex+0x280>
 80122d0:	f04f 0a02 	mov.w	sl, #2
 80122d4:	4639      	mov	r1, r7
 80122d6:	4620      	mov	r0, r4
 80122d8:	f7ff fe98 	bl	801200c <rshift>
 80122dc:	443d      	add	r5, r7
 80122de:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80122e2:	42ab      	cmp	r3, r5
 80122e4:	da4c      	bge.n	8012380 <__gethex+0x2a4>
 80122e6:	ee18 0a10 	vmov	r0, s16
 80122ea:	4621      	mov	r1, r4
 80122ec:	f000 fa64 	bl	80127b8 <_Bfree>
 80122f0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80122f2:	2300      	movs	r3, #0
 80122f4:	6013      	str	r3, [r2, #0]
 80122f6:	27a3      	movs	r7, #163	; 0xa3
 80122f8:	e785      	b.n	8012206 <__gethex+0x12a>
 80122fa:	1e73      	subs	r3, r6, #1
 80122fc:	9a05      	ldr	r2, [sp, #20]
 80122fe:	9303      	str	r3, [sp, #12]
 8012300:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8012304:	4293      	cmp	r3, r2
 8012306:	d019      	beq.n	801233c <__gethex+0x260>
 8012308:	f1bb 0f20 	cmp.w	fp, #32
 801230c:	d107      	bne.n	801231e <__gethex+0x242>
 801230e:	9b02      	ldr	r3, [sp, #8]
 8012310:	9a00      	ldr	r2, [sp, #0]
 8012312:	f843 2b04 	str.w	r2, [r3], #4
 8012316:	9302      	str	r3, [sp, #8]
 8012318:	2300      	movs	r3, #0
 801231a:	9300      	str	r3, [sp, #0]
 801231c:	469b      	mov	fp, r3
 801231e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8012322:	f7ff fec5 	bl	80120b0 <__hexdig_fun>
 8012326:	9b00      	ldr	r3, [sp, #0]
 8012328:	f000 000f 	and.w	r0, r0, #15
 801232c:	fa00 f00b 	lsl.w	r0, r0, fp
 8012330:	4303      	orrs	r3, r0
 8012332:	9300      	str	r3, [sp, #0]
 8012334:	f10b 0b04 	add.w	fp, fp, #4
 8012338:	9b03      	ldr	r3, [sp, #12]
 801233a:	e00d      	b.n	8012358 <__gethex+0x27c>
 801233c:	9b03      	ldr	r3, [sp, #12]
 801233e:	9a06      	ldr	r2, [sp, #24]
 8012340:	4413      	add	r3, r2
 8012342:	42bb      	cmp	r3, r7
 8012344:	d3e0      	bcc.n	8012308 <__gethex+0x22c>
 8012346:	4618      	mov	r0, r3
 8012348:	9901      	ldr	r1, [sp, #4]
 801234a:	9307      	str	r3, [sp, #28]
 801234c:	4652      	mov	r2, sl
 801234e:	f7fe f8c4 	bl	80104da <strncmp>
 8012352:	9b07      	ldr	r3, [sp, #28]
 8012354:	2800      	cmp	r0, #0
 8012356:	d1d7      	bne.n	8012308 <__gethex+0x22c>
 8012358:	461e      	mov	r6, r3
 801235a:	e78b      	b.n	8012274 <__gethex+0x198>
 801235c:	f04f 0a03 	mov.w	sl, #3
 8012360:	e7b8      	b.n	80122d4 <__gethex+0x1f8>
 8012362:	da0a      	bge.n	801237a <__gethex+0x29e>
 8012364:	1a37      	subs	r7, r6, r0
 8012366:	4621      	mov	r1, r4
 8012368:	ee18 0a10 	vmov	r0, s16
 801236c:	463a      	mov	r2, r7
 801236e:	f000 fc3f 	bl	8012bf0 <__lshift>
 8012372:	1bed      	subs	r5, r5, r7
 8012374:	4604      	mov	r4, r0
 8012376:	f100 0914 	add.w	r9, r0, #20
 801237a:	f04f 0a00 	mov.w	sl, #0
 801237e:	e7ae      	b.n	80122de <__gethex+0x202>
 8012380:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8012384:	42a8      	cmp	r0, r5
 8012386:	dd72      	ble.n	801246e <__gethex+0x392>
 8012388:	1b45      	subs	r5, r0, r5
 801238a:	42ae      	cmp	r6, r5
 801238c:	dc36      	bgt.n	80123fc <__gethex+0x320>
 801238e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012392:	2b02      	cmp	r3, #2
 8012394:	d02a      	beq.n	80123ec <__gethex+0x310>
 8012396:	2b03      	cmp	r3, #3
 8012398:	d02c      	beq.n	80123f4 <__gethex+0x318>
 801239a:	2b01      	cmp	r3, #1
 801239c:	d11c      	bne.n	80123d8 <__gethex+0x2fc>
 801239e:	42ae      	cmp	r6, r5
 80123a0:	d11a      	bne.n	80123d8 <__gethex+0x2fc>
 80123a2:	2e01      	cmp	r6, #1
 80123a4:	d112      	bne.n	80123cc <__gethex+0x2f0>
 80123a6:	9a04      	ldr	r2, [sp, #16]
 80123a8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80123ac:	6013      	str	r3, [r2, #0]
 80123ae:	2301      	movs	r3, #1
 80123b0:	6123      	str	r3, [r4, #16]
 80123b2:	f8c9 3000 	str.w	r3, [r9]
 80123b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80123b8:	2762      	movs	r7, #98	; 0x62
 80123ba:	601c      	str	r4, [r3, #0]
 80123bc:	e723      	b.n	8012206 <__gethex+0x12a>
 80123be:	bf00      	nop
 80123c0:	08015a68 	.word	0x08015a68
 80123c4:	080159ef 	.word	0x080159ef
 80123c8:	08015a00 	.word	0x08015a00
 80123cc:	1e71      	subs	r1, r6, #1
 80123ce:	4620      	mov	r0, r4
 80123d0:	f000 fe52 	bl	8013078 <__any_on>
 80123d4:	2800      	cmp	r0, #0
 80123d6:	d1e6      	bne.n	80123a6 <__gethex+0x2ca>
 80123d8:	ee18 0a10 	vmov	r0, s16
 80123dc:	4621      	mov	r1, r4
 80123de:	f000 f9eb 	bl	80127b8 <_Bfree>
 80123e2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80123e4:	2300      	movs	r3, #0
 80123e6:	6013      	str	r3, [r2, #0]
 80123e8:	2750      	movs	r7, #80	; 0x50
 80123ea:	e70c      	b.n	8012206 <__gethex+0x12a>
 80123ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80123ee:	2b00      	cmp	r3, #0
 80123f0:	d1f2      	bne.n	80123d8 <__gethex+0x2fc>
 80123f2:	e7d8      	b.n	80123a6 <__gethex+0x2ca>
 80123f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80123f6:	2b00      	cmp	r3, #0
 80123f8:	d1d5      	bne.n	80123a6 <__gethex+0x2ca>
 80123fa:	e7ed      	b.n	80123d8 <__gethex+0x2fc>
 80123fc:	1e6f      	subs	r7, r5, #1
 80123fe:	f1ba 0f00 	cmp.w	sl, #0
 8012402:	d131      	bne.n	8012468 <__gethex+0x38c>
 8012404:	b127      	cbz	r7, 8012410 <__gethex+0x334>
 8012406:	4639      	mov	r1, r7
 8012408:	4620      	mov	r0, r4
 801240a:	f000 fe35 	bl	8013078 <__any_on>
 801240e:	4682      	mov	sl, r0
 8012410:	117b      	asrs	r3, r7, #5
 8012412:	2101      	movs	r1, #1
 8012414:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8012418:	f007 071f 	and.w	r7, r7, #31
 801241c:	fa01 f707 	lsl.w	r7, r1, r7
 8012420:	421f      	tst	r7, r3
 8012422:	4629      	mov	r1, r5
 8012424:	4620      	mov	r0, r4
 8012426:	bf18      	it	ne
 8012428:	f04a 0a02 	orrne.w	sl, sl, #2
 801242c:	1b76      	subs	r6, r6, r5
 801242e:	f7ff fded 	bl	801200c <rshift>
 8012432:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8012436:	2702      	movs	r7, #2
 8012438:	f1ba 0f00 	cmp.w	sl, #0
 801243c:	d048      	beq.n	80124d0 <__gethex+0x3f4>
 801243e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012442:	2b02      	cmp	r3, #2
 8012444:	d015      	beq.n	8012472 <__gethex+0x396>
 8012446:	2b03      	cmp	r3, #3
 8012448:	d017      	beq.n	801247a <__gethex+0x39e>
 801244a:	2b01      	cmp	r3, #1
 801244c:	d109      	bne.n	8012462 <__gethex+0x386>
 801244e:	f01a 0f02 	tst.w	sl, #2
 8012452:	d006      	beq.n	8012462 <__gethex+0x386>
 8012454:	f8d9 0000 	ldr.w	r0, [r9]
 8012458:	ea4a 0a00 	orr.w	sl, sl, r0
 801245c:	f01a 0f01 	tst.w	sl, #1
 8012460:	d10e      	bne.n	8012480 <__gethex+0x3a4>
 8012462:	f047 0710 	orr.w	r7, r7, #16
 8012466:	e033      	b.n	80124d0 <__gethex+0x3f4>
 8012468:	f04f 0a01 	mov.w	sl, #1
 801246c:	e7d0      	b.n	8012410 <__gethex+0x334>
 801246e:	2701      	movs	r7, #1
 8012470:	e7e2      	b.n	8012438 <__gethex+0x35c>
 8012472:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012474:	f1c3 0301 	rsb	r3, r3, #1
 8012478:	9315      	str	r3, [sp, #84]	; 0x54
 801247a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801247c:	2b00      	cmp	r3, #0
 801247e:	d0f0      	beq.n	8012462 <__gethex+0x386>
 8012480:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8012484:	f104 0314 	add.w	r3, r4, #20
 8012488:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801248c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8012490:	f04f 0c00 	mov.w	ip, #0
 8012494:	4618      	mov	r0, r3
 8012496:	f853 2b04 	ldr.w	r2, [r3], #4
 801249a:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 801249e:	d01c      	beq.n	80124da <__gethex+0x3fe>
 80124a0:	3201      	adds	r2, #1
 80124a2:	6002      	str	r2, [r0, #0]
 80124a4:	2f02      	cmp	r7, #2
 80124a6:	f104 0314 	add.w	r3, r4, #20
 80124aa:	d13f      	bne.n	801252c <__gethex+0x450>
 80124ac:	f8d8 2000 	ldr.w	r2, [r8]
 80124b0:	3a01      	subs	r2, #1
 80124b2:	42b2      	cmp	r2, r6
 80124b4:	d10a      	bne.n	80124cc <__gethex+0x3f0>
 80124b6:	1171      	asrs	r1, r6, #5
 80124b8:	2201      	movs	r2, #1
 80124ba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80124be:	f006 061f 	and.w	r6, r6, #31
 80124c2:	fa02 f606 	lsl.w	r6, r2, r6
 80124c6:	421e      	tst	r6, r3
 80124c8:	bf18      	it	ne
 80124ca:	4617      	movne	r7, r2
 80124cc:	f047 0720 	orr.w	r7, r7, #32
 80124d0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80124d2:	601c      	str	r4, [r3, #0]
 80124d4:	9b04      	ldr	r3, [sp, #16]
 80124d6:	601d      	str	r5, [r3, #0]
 80124d8:	e695      	b.n	8012206 <__gethex+0x12a>
 80124da:	4299      	cmp	r1, r3
 80124dc:	f843 cc04 	str.w	ip, [r3, #-4]
 80124e0:	d8d8      	bhi.n	8012494 <__gethex+0x3b8>
 80124e2:	68a3      	ldr	r3, [r4, #8]
 80124e4:	459b      	cmp	fp, r3
 80124e6:	db19      	blt.n	801251c <__gethex+0x440>
 80124e8:	6861      	ldr	r1, [r4, #4]
 80124ea:	ee18 0a10 	vmov	r0, s16
 80124ee:	3101      	adds	r1, #1
 80124f0:	f000 f922 	bl	8012738 <_Balloc>
 80124f4:	4681      	mov	r9, r0
 80124f6:	b918      	cbnz	r0, 8012500 <__gethex+0x424>
 80124f8:	4b1a      	ldr	r3, [pc, #104]	; (8012564 <__gethex+0x488>)
 80124fa:	4602      	mov	r2, r0
 80124fc:	2184      	movs	r1, #132	; 0x84
 80124fe:	e6a8      	b.n	8012252 <__gethex+0x176>
 8012500:	6922      	ldr	r2, [r4, #16]
 8012502:	3202      	adds	r2, #2
 8012504:	f104 010c 	add.w	r1, r4, #12
 8012508:	0092      	lsls	r2, r2, #2
 801250a:	300c      	adds	r0, #12
 801250c:	f7fd fa32 	bl	800f974 <memcpy>
 8012510:	4621      	mov	r1, r4
 8012512:	ee18 0a10 	vmov	r0, s16
 8012516:	f000 f94f 	bl	80127b8 <_Bfree>
 801251a:	464c      	mov	r4, r9
 801251c:	6923      	ldr	r3, [r4, #16]
 801251e:	1c5a      	adds	r2, r3, #1
 8012520:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8012524:	6122      	str	r2, [r4, #16]
 8012526:	2201      	movs	r2, #1
 8012528:	615a      	str	r2, [r3, #20]
 801252a:	e7bb      	b.n	80124a4 <__gethex+0x3c8>
 801252c:	6922      	ldr	r2, [r4, #16]
 801252e:	455a      	cmp	r2, fp
 8012530:	dd0b      	ble.n	801254a <__gethex+0x46e>
 8012532:	2101      	movs	r1, #1
 8012534:	4620      	mov	r0, r4
 8012536:	f7ff fd69 	bl	801200c <rshift>
 801253a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801253e:	3501      	adds	r5, #1
 8012540:	42ab      	cmp	r3, r5
 8012542:	f6ff aed0 	blt.w	80122e6 <__gethex+0x20a>
 8012546:	2701      	movs	r7, #1
 8012548:	e7c0      	b.n	80124cc <__gethex+0x3f0>
 801254a:	f016 061f 	ands.w	r6, r6, #31
 801254e:	d0fa      	beq.n	8012546 <__gethex+0x46a>
 8012550:	4453      	add	r3, sl
 8012552:	f1c6 0620 	rsb	r6, r6, #32
 8012556:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801255a:	f000 f9df 	bl	801291c <__hi0bits>
 801255e:	42b0      	cmp	r0, r6
 8012560:	dbe7      	blt.n	8012532 <__gethex+0x456>
 8012562:	e7f0      	b.n	8012546 <__gethex+0x46a>
 8012564:	080159ef 	.word	0x080159ef

08012568 <L_shift>:
 8012568:	f1c2 0208 	rsb	r2, r2, #8
 801256c:	0092      	lsls	r2, r2, #2
 801256e:	b570      	push	{r4, r5, r6, lr}
 8012570:	f1c2 0620 	rsb	r6, r2, #32
 8012574:	6843      	ldr	r3, [r0, #4]
 8012576:	6804      	ldr	r4, [r0, #0]
 8012578:	fa03 f506 	lsl.w	r5, r3, r6
 801257c:	432c      	orrs	r4, r5
 801257e:	40d3      	lsrs	r3, r2
 8012580:	6004      	str	r4, [r0, #0]
 8012582:	f840 3f04 	str.w	r3, [r0, #4]!
 8012586:	4288      	cmp	r0, r1
 8012588:	d3f4      	bcc.n	8012574 <L_shift+0xc>
 801258a:	bd70      	pop	{r4, r5, r6, pc}

0801258c <__match>:
 801258c:	b530      	push	{r4, r5, lr}
 801258e:	6803      	ldr	r3, [r0, #0]
 8012590:	3301      	adds	r3, #1
 8012592:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012596:	b914      	cbnz	r4, 801259e <__match+0x12>
 8012598:	6003      	str	r3, [r0, #0]
 801259a:	2001      	movs	r0, #1
 801259c:	bd30      	pop	{r4, r5, pc}
 801259e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80125a2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80125a6:	2d19      	cmp	r5, #25
 80125a8:	bf98      	it	ls
 80125aa:	3220      	addls	r2, #32
 80125ac:	42a2      	cmp	r2, r4
 80125ae:	d0f0      	beq.n	8012592 <__match+0x6>
 80125b0:	2000      	movs	r0, #0
 80125b2:	e7f3      	b.n	801259c <__match+0x10>

080125b4 <__hexnan>:
 80125b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125b8:	680b      	ldr	r3, [r1, #0]
 80125ba:	115e      	asrs	r6, r3, #5
 80125bc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80125c0:	f013 031f 	ands.w	r3, r3, #31
 80125c4:	b087      	sub	sp, #28
 80125c6:	bf18      	it	ne
 80125c8:	3604      	addne	r6, #4
 80125ca:	2500      	movs	r5, #0
 80125cc:	1f37      	subs	r7, r6, #4
 80125ce:	4690      	mov	r8, r2
 80125d0:	6802      	ldr	r2, [r0, #0]
 80125d2:	9301      	str	r3, [sp, #4]
 80125d4:	4682      	mov	sl, r0
 80125d6:	f846 5c04 	str.w	r5, [r6, #-4]
 80125da:	46b9      	mov	r9, r7
 80125dc:	463c      	mov	r4, r7
 80125de:	9502      	str	r5, [sp, #8]
 80125e0:	46ab      	mov	fp, r5
 80125e2:	7851      	ldrb	r1, [r2, #1]
 80125e4:	1c53      	adds	r3, r2, #1
 80125e6:	9303      	str	r3, [sp, #12]
 80125e8:	b341      	cbz	r1, 801263c <__hexnan+0x88>
 80125ea:	4608      	mov	r0, r1
 80125ec:	9205      	str	r2, [sp, #20]
 80125ee:	9104      	str	r1, [sp, #16]
 80125f0:	f7ff fd5e 	bl	80120b0 <__hexdig_fun>
 80125f4:	2800      	cmp	r0, #0
 80125f6:	d14f      	bne.n	8012698 <__hexnan+0xe4>
 80125f8:	9904      	ldr	r1, [sp, #16]
 80125fa:	9a05      	ldr	r2, [sp, #20]
 80125fc:	2920      	cmp	r1, #32
 80125fe:	d818      	bhi.n	8012632 <__hexnan+0x7e>
 8012600:	9b02      	ldr	r3, [sp, #8]
 8012602:	459b      	cmp	fp, r3
 8012604:	dd13      	ble.n	801262e <__hexnan+0x7a>
 8012606:	454c      	cmp	r4, r9
 8012608:	d206      	bcs.n	8012618 <__hexnan+0x64>
 801260a:	2d07      	cmp	r5, #7
 801260c:	dc04      	bgt.n	8012618 <__hexnan+0x64>
 801260e:	462a      	mov	r2, r5
 8012610:	4649      	mov	r1, r9
 8012612:	4620      	mov	r0, r4
 8012614:	f7ff ffa8 	bl	8012568 <L_shift>
 8012618:	4544      	cmp	r4, r8
 801261a:	d950      	bls.n	80126be <__hexnan+0x10a>
 801261c:	2300      	movs	r3, #0
 801261e:	f1a4 0904 	sub.w	r9, r4, #4
 8012622:	f844 3c04 	str.w	r3, [r4, #-4]
 8012626:	f8cd b008 	str.w	fp, [sp, #8]
 801262a:	464c      	mov	r4, r9
 801262c:	461d      	mov	r5, r3
 801262e:	9a03      	ldr	r2, [sp, #12]
 8012630:	e7d7      	b.n	80125e2 <__hexnan+0x2e>
 8012632:	2929      	cmp	r1, #41	; 0x29
 8012634:	d156      	bne.n	80126e4 <__hexnan+0x130>
 8012636:	3202      	adds	r2, #2
 8012638:	f8ca 2000 	str.w	r2, [sl]
 801263c:	f1bb 0f00 	cmp.w	fp, #0
 8012640:	d050      	beq.n	80126e4 <__hexnan+0x130>
 8012642:	454c      	cmp	r4, r9
 8012644:	d206      	bcs.n	8012654 <__hexnan+0xa0>
 8012646:	2d07      	cmp	r5, #7
 8012648:	dc04      	bgt.n	8012654 <__hexnan+0xa0>
 801264a:	462a      	mov	r2, r5
 801264c:	4649      	mov	r1, r9
 801264e:	4620      	mov	r0, r4
 8012650:	f7ff ff8a 	bl	8012568 <L_shift>
 8012654:	4544      	cmp	r4, r8
 8012656:	d934      	bls.n	80126c2 <__hexnan+0x10e>
 8012658:	f1a8 0204 	sub.w	r2, r8, #4
 801265c:	4623      	mov	r3, r4
 801265e:	f853 1b04 	ldr.w	r1, [r3], #4
 8012662:	f842 1f04 	str.w	r1, [r2, #4]!
 8012666:	429f      	cmp	r7, r3
 8012668:	d2f9      	bcs.n	801265e <__hexnan+0xaa>
 801266a:	1b3b      	subs	r3, r7, r4
 801266c:	f023 0303 	bic.w	r3, r3, #3
 8012670:	3304      	adds	r3, #4
 8012672:	3401      	adds	r4, #1
 8012674:	3e03      	subs	r6, #3
 8012676:	42b4      	cmp	r4, r6
 8012678:	bf88      	it	hi
 801267a:	2304      	movhi	r3, #4
 801267c:	4443      	add	r3, r8
 801267e:	2200      	movs	r2, #0
 8012680:	f843 2b04 	str.w	r2, [r3], #4
 8012684:	429f      	cmp	r7, r3
 8012686:	d2fb      	bcs.n	8012680 <__hexnan+0xcc>
 8012688:	683b      	ldr	r3, [r7, #0]
 801268a:	b91b      	cbnz	r3, 8012694 <__hexnan+0xe0>
 801268c:	4547      	cmp	r7, r8
 801268e:	d127      	bne.n	80126e0 <__hexnan+0x12c>
 8012690:	2301      	movs	r3, #1
 8012692:	603b      	str	r3, [r7, #0]
 8012694:	2005      	movs	r0, #5
 8012696:	e026      	b.n	80126e6 <__hexnan+0x132>
 8012698:	3501      	adds	r5, #1
 801269a:	2d08      	cmp	r5, #8
 801269c:	f10b 0b01 	add.w	fp, fp, #1
 80126a0:	dd06      	ble.n	80126b0 <__hexnan+0xfc>
 80126a2:	4544      	cmp	r4, r8
 80126a4:	d9c3      	bls.n	801262e <__hexnan+0x7a>
 80126a6:	2300      	movs	r3, #0
 80126a8:	f844 3c04 	str.w	r3, [r4, #-4]
 80126ac:	2501      	movs	r5, #1
 80126ae:	3c04      	subs	r4, #4
 80126b0:	6822      	ldr	r2, [r4, #0]
 80126b2:	f000 000f 	and.w	r0, r0, #15
 80126b6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80126ba:	6022      	str	r2, [r4, #0]
 80126bc:	e7b7      	b.n	801262e <__hexnan+0x7a>
 80126be:	2508      	movs	r5, #8
 80126c0:	e7b5      	b.n	801262e <__hexnan+0x7a>
 80126c2:	9b01      	ldr	r3, [sp, #4]
 80126c4:	2b00      	cmp	r3, #0
 80126c6:	d0df      	beq.n	8012688 <__hexnan+0xd4>
 80126c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80126cc:	f1c3 0320 	rsb	r3, r3, #32
 80126d0:	fa22 f303 	lsr.w	r3, r2, r3
 80126d4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80126d8:	401a      	ands	r2, r3
 80126da:	f846 2c04 	str.w	r2, [r6, #-4]
 80126de:	e7d3      	b.n	8012688 <__hexnan+0xd4>
 80126e0:	3f04      	subs	r7, #4
 80126e2:	e7d1      	b.n	8012688 <__hexnan+0xd4>
 80126e4:	2004      	movs	r0, #4
 80126e6:	b007      	add	sp, #28
 80126e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080126ec <_localeconv_r>:
 80126ec:	4800      	ldr	r0, [pc, #0]	; (80126f0 <_localeconv_r+0x4>)
 80126ee:	4770      	bx	lr
 80126f0:	200003b8 	.word	0x200003b8

080126f4 <__retarget_lock_init_recursive>:
 80126f4:	4770      	bx	lr

080126f6 <__retarget_lock_acquire_recursive>:
 80126f6:	4770      	bx	lr

080126f8 <__retarget_lock_release_recursive>:
 80126f8:	4770      	bx	lr

080126fa <__ascii_mbtowc>:
 80126fa:	b082      	sub	sp, #8
 80126fc:	b901      	cbnz	r1, 8012700 <__ascii_mbtowc+0x6>
 80126fe:	a901      	add	r1, sp, #4
 8012700:	b142      	cbz	r2, 8012714 <__ascii_mbtowc+0x1a>
 8012702:	b14b      	cbz	r3, 8012718 <__ascii_mbtowc+0x1e>
 8012704:	7813      	ldrb	r3, [r2, #0]
 8012706:	600b      	str	r3, [r1, #0]
 8012708:	7812      	ldrb	r2, [r2, #0]
 801270a:	1e10      	subs	r0, r2, #0
 801270c:	bf18      	it	ne
 801270e:	2001      	movne	r0, #1
 8012710:	b002      	add	sp, #8
 8012712:	4770      	bx	lr
 8012714:	4610      	mov	r0, r2
 8012716:	e7fb      	b.n	8012710 <__ascii_mbtowc+0x16>
 8012718:	f06f 0001 	mvn.w	r0, #1
 801271c:	e7f8      	b.n	8012710 <__ascii_mbtowc+0x16>
	...

08012720 <__malloc_lock>:
 8012720:	4801      	ldr	r0, [pc, #4]	; (8012728 <__malloc_lock+0x8>)
 8012722:	f7ff bfe8 	b.w	80126f6 <__retarget_lock_acquire_recursive>
 8012726:	bf00      	nop
 8012728:	200038e8 	.word	0x200038e8

0801272c <__malloc_unlock>:
 801272c:	4801      	ldr	r0, [pc, #4]	; (8012734 <__malloc_unlock+0x8>)
 801272e:	f7ff bfe3 	b.w	80126f8 <__retarget_lock_release_recursive>
 8012732:	bf00      	nop
 8012734:	200038e8 	.word	0x200038e8

08012738 <_Balloc>:
 8012738:	b570      	push	{r4, r5, r6, lr}
 801273a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801273c:	4604      	mov	r4, r0
 801273e:	460d      	mov	r5, r1
 8012740:	b976      	cbnz	r6, 8012760 <_Balloc+0x28>
 8012742:	2010      	movs	r0, #16
 8012744:	f7fd f906 	bl	800f954 <malloc>
 8012748:	4602      	mov	r2, r0
 801274a:	6260      	str	r0, [r4, #36]	; 0x24
 801274c:	b920      	cbnz	r0, 8012758 <_Balloc+0x20>
 801274e:	4b18      	ldr	r3, [pc, #96]	; (80127b0 <_Balloc+0x78>)
 8012750:	4818      	ldr	r0, [pc, #96]	; (80127b4 <_Balloc+0x7c>)
 8012752:	2166      	movs	r1, #102	; 0x66
 8012754:	f000 fe76 	bl	8013444 <__assert_func>
 8012758:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801275c:	6006      	str	r6, [r0, #0]
 801275e:	60c6      	str	r6, [r0, #12]
 8012760:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8012762:	68f3      	ldr	r3, [r6, #12]
 8012764:	b183      	cbz	r3, 8012788 <_Balloc+0x50>
 8012766:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012768:	68db      	ldr	r3, [r3, #12]
 801276a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801276e:	b9b8      	cbnz	r0, 80127a0 <_Balloc+0x68>
 8012770:	2101      	movs	r1, #1
 8012772:	fa01 f605 	lsl.w	r6, r1, r5
 8012776:	1d72      	adds	r2, r6, #5
 8012778:	0092      	lsls	r2, r2, #2
 801277a:	4620      	mov	r0, r4
 801277c:	f7fd f910 	bl	800f9a0 <_calloc_r>
 8012780:	b160      	cbz	r0, 801279c <_Balloc+0x64>
 8012782:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012786:	e00e      	b.n	80127a6 <_Balloc+0x6e>
 8012788:	2221      	movs	r2, #33	; 0x21
 801278a:	2104      	movs	r1, #4
 801278c:	4620      	mov	r0, r4
 801278e:	f7fd f907 	bl	800f9a0 <_calloc_r>
 8012792:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012794:	60f0      	str	r0, [r6, #12]
 8012796:	68db      	ldr	r3, [r3, #12]
 8012798:	2b00      	cmp	r3, #0
 801279a:	d1e4      	bne.n	8012766 <_Balloc+0x2e>
 801279c:	2000      	movs	r0, #0
 801279e:	bd70      	pop	{r4, r5, r6, pc}
 80127a0:	6802      	ldr	r2, [r0, #0]
 80127a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80127a6:	2300      	movs	r3, #0
 80127a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80127ac:	e7f7      	b.n	801279e <_Balloc+0x66>
 80127ae:	bf00      	nop
 80127b0:	0801597d 	.word	0x0801597d
 80127b4:	08015a7c 	.word	0x08015a7c

080127b8 <_Bfree>:
 80127b8:	b570      	push	{r4, r5, r6, lr}
 80127ba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80127bc:	4605      	mov	r5, r0
 80127be:	460c      	mov	r4, r1
 80127c0:	b976      	cbnz	r6, 80127e0 <_Bfree+0x28>
 80127c2:	2010      	movs	r0, #16
 80127c4:	f7fd f8c6 	bl	800f954 <malloc>
 80127c8:	4602      	mov	r2, r0
 80127ca:	6268      	str	r0, [r5, #36]	; 0x24
 80127cc:	b920      	cbnz	r0, 80127d8 <_Bfree+0x20>
 80127ce:	4b09      	ldr	r3, [pc, #36]	; (80127f4 <_Bfree+0x3c>)
 80127d0:	4809      	ldr	r0, [pc, #36]	; (80127f8 <_Bfree+0x40>)
 80127d2:	218a      	movs	r1, #138	; 0x8a
 80127d4:	f000 fe36 	bl	8013444 <__assert_func>
 80127d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80127dc:	6006      	str	r6, [r0, #0]
 80127de:	60c6      	str	r6, [r0, #12]
 80127e0:	b13c      	cbz	r4, 80127f2 <_Bfree+0x3a>
 80127e2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80127e4:	6862      	ldr	r2, [r4, #4]
 80127e6:	68db      	ldr	r3, [r3, #12]
 80127e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80127ec:	6021      	str	r1, [r4, #0]
 80127ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80127f2:	bd70      	pop	{r4, r5, r6, pc}
 80127f4:	0801597d 	.word	0x0801597d
 80127f8:	08015a7c 	.word	0x08015a7c

080127fc <__multadd>:
 80127fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012800:	690d      	ldr	r5, [r1, #16]
 8012802:	4607      	mov	r7, r0
 8012804:	460c      	mov	r4, r1
 8012806:	461e      	mov	r6, r3
 8012808:	f101 0c14 	add.w	ip, r1, #20
 801280c:	2000      	movs	r0, #0
 801280e:	f8dc 3000 	ldr.w	r3, [ip]
 8012812:	b299      	uxth	r1, r3
 8012814:	fb02 6101 	mla	r1, r2, r1, r6
 8012818:	0c1e      	lsrs	r6, r3, #16
 801281a:	0c0b      	lsrs	r3, r1, #16
 801281c:	fb02 3306 	mla	r3, r2, r6, r3
 8012820:	b289      	uxth	r1, r1
 8012822:	3001      	adds	r0, #1
 8012824:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012828:	4285      	cmp	r5, r0
 801282a:	f84c 1b04 	str.w	r1, [ip], #4
 801282e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8012832:	dcec      	bgt.n	801280e <__multadd+0x12>
 8012834:	b30e      	cbz	r6, 801287a <__multadd+0x7e>
 8012836:	68a3      	ldr	r3, [r4, #8]
 8012838:	42ab      	cmp	r3, r5
 801283a:	dc19      	bgt.n	8012870 <__multadd+0x74>
 801283c:	6861      	ldr	r1, [r4, #4]
 801283e:	4638      	mov	r0, r7
 8012840:	3101      	adds	r1, #1
 8012842:	f7ff ff79 	bl	8012738 <_Balloc>
 8012846:	4680      	mov	r8, r0
 8012848:	b928      	cbnz	r0, 8012856 <__multadd+0x5a>
 801284a:	4602      	mov	r2, r0
 801284c:	4b0c      	ldr	r3, [pc, #48]	; (8012880 <__multadd+0x84>)
 801284e:	480d      	ldr	r0, [pc, #52]	; (8012884 <__multadd+0x88>)
 8012850:	21b5      	movs	r1, #181	; 0xb5
 8012852:	f000 fdf7 	bl	8013444 <__assert_func>
 8012856:	6922      	ldr	r2, [r4, #16]
 8012858:	3202      	adds	r2, #2
 801285a:	f104 010c 	add.w	r1, r4, #12
 801285e:	0092      	lsls	r2, r2, #2
 8012860:	300c      	adds	r0, #12
 8012862:	f7fd f887 	bl	800f974 <memcpy>
 8012866:	4621      	mov	r1, r4
 8012868:	4638      	mov	r0, r7
 801286a:	f7ff ffa5 	bl	80127b8 <_Bfree>
 801286e:	4644      	mov	r4, r8
 8012870:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012874:	3501      	adds	r5, #1
 8012876:	615e      	str	r6, [r3, #20]
 8012878:	6125      	str	r5, [r4, #16]
 801287a:	4620      	mov	r0, r4
 801287c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012880:	080159ef 	.word	0x080159ef
 8012884:	08015a7c 	.word	0x08015a7c

08012888 <__s2b>:
 8012888:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801288c:	460c      	mov	r4, r1
 801288e:	4615      	mov	r5, r2
 8012890:	461f      	mov	r7, r3
 8012892:	2209      	movs	r2, #9
 8012894:	3308      	adds	r3, #8
 8012896:	4606      	mov	r6, r0
 8012898:	fb93 f3f2 	sdiv	r3, r3, r2
 801289c:	2100      	movs	r1, #0
 801289e:	2201      	movs	r2, #1
 80128a0:	429a      	cmp	r2, r3
 80128a2:	db09      	blt.n	80128b8 <__s2b+0x30>
 80128a4:	4630      	mov	r0, r6
 80128a6:	f7ff ff47 	bl	8012738 <_Balloc>
 80128aa:	b940      	cbnz	r0, 80128be <__s2b+0x36>
 80128ac:	4602      	mov	r2, r0
 80128ae:	4b19      	ldr	r3, [pc, #100]	; (8012914 <__s2b+0x8c>)
 80128b0:	4819      	ldr	r0, [pc, #100]	; (8012918 <__s2b+0x90>)
 80128b2:	21ce      	movs	r1, #206	; 0xce
 80128b4:	f000 fdc6 	bl	8013444 <__assert_func>
 80128b8:	0052      	lsls	r2, r2, #1
 80128ba:	3101      	adds	r1, #1
 80128bc:	e7f0      	b.n	80128a0 <__s2b+0x18>
 80128be:	9b08      	ldr	r3, [sp, #32]
 80128c0:	6143      	str	r3, [r0, #20]
 80128c2:	2d09      	cmp	r5, #9
 80128c4:	f04f 0301 	mov.w	r3, #1
 80128c8:	6103      	str	r3, [r0, #16]
 80128ca:	dd16      	ble.n	80128fa <__s2b+0x72>
 80128cc:	f104 0909 	add.w	r9, r4, #9
 80128d0:	46c8      	mov	r8, r9
 80128d2:	442c      	add	r4, r5
 80128d4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80128d8:	4601      	mov	r1, r0
 80128da:	3b30      	subs	r3, #48	; 0x30
 80128dc:	220a      	movs	r2, #10
 80128de:	4630      	mov	r0, r6
 80128e0:	f7ff ff8c 	bl	80127fc <__multadd>
 80128e4:	45a0      	cmp	r8, r4
 80128e6:	d1f5      	bne.n	80128d4 <__s2b+0x4c>
 80128e8:	f1a5 0408 	sub.w	r4, r5, #8
 80128ec:	444c      	add	r4, r9
 80128ee:	1b2d      	subs	r5, r5, r4
 80128f0:	1963      	adds	r3, r4, r5
 80128f2:	42bb      	cmp	r3, r7
 80128f4:	db04      	blt.n	8012900 <__s2b+0x78>
 80128f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80128fa:	340a      	adds	r4, #10
 80128fc:	2509      	movs	r5, #9
 80128fe:	e7f6      	b.n	80128ee <__s2b+0x66>
 8012900:	f814 3b01 	ldrb.w	r3, [r4], #1
 8012904:	4601      	mov	r1, r0
 8012906:	3b30      	subs	r3, #48	; 0x30
 8012908:	220a      	movs	r2, #10
 801290a:	4630      	mov	r0, r6
 801290c:	f7ff ff76 	bl	80127fc <__multadd>
 8012910:	e7ee      	b.n	80128f0 <__s2b+0x68>
 8012912:	bf00      	nop
 8012914:	080159ef 	.word	0x080159ef
 8012918:	08015a7c 	.word	0x08015a7c

0801291c <__hi0bits>:
 801291c:	0c03      	lsrs	r3, r0, #16
 801291e:	041b      	lsls	r3, r3, #16
 8012920:	b9d3      	cbnz	r3, 8012958 <__hi0bits+0x3c>
 8012922:	0400      	lsls	r0, r0, #16
 8012924:	2310      	movs	r3, #16
 8012926:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801292a:	bf04      	itt	eq
 801292c:	0200      	lsleq	r0, r0, #8
 801292e:	3308      	addeq	r3, #8
 8012930:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012934:	bf04      	itt	eq
 8012936:	0100      	lsleq	r0, r0, #4
 8012938:	3304      	addeq	r3, #4
 801293a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801293e:	bf04      	itt	eq
 8012940:	0080      	lsleq	r0, r0, #2
 8012942:	3302      	addeq	r3, #2
 8012944:	2800      	cmp	r0, #0
 8012946:	db05      	blt.n	8012954 <__hi0bits+0x38>
 8012948:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801294c:	f103 0301 	add.w	r3, r3, #1
 8012950:	bf08      	it	eq
 8012952:	2320      	moveq	r3, #32
 8012954:	4618      	mov	r0, r3
 8012956:	4770      	bx	lr
 8012958:	2300      	movs	r3, #0
 801295a:	e7e4      	b.n	8012926 <__hi0bits+0xa>

0801295c <__lo0bits>:
 801295c:	6803      	ldr	r3, [r0, #0]
 801295e:	f013 0207 	ands.w	r2, r3, #7
 8012962:	4601      	mov	r1, r0
 8012964:	d00b      	beq.n	801297e <__lo0bits+0x22>
 8012966:	07da      	lsls	r2, r3, #31
 8012968:	d423      	bmi.n	80129b2 <__lo0bits+0x56>
 801296a:	0798      	lsls	r0, r3, #30
 801296c:	bf49      	itett	mi
 801296e:	085b      	lsrmi	r3, r3, #1
 8012970:	089b      	lsrpl	r3, r3, #2
 8012972:	2001      	movmi	r0, #1
 8012974:	600b      	strmi	r3, [r1, #0]
 8012976:	bf5c      	itt	pl
 8012978:	600b      	strpl	r3, [r1, #0]
 801297a:	2002      	movpl	r0, #2
 801297c:	4770      	bx	lr
 801297e:	b298      	uxth	r0, r3
 8012980:	b9a8      	cbnz	r0, 80129ae <__lo0bits+0x52>
 8012982:	0c1b      	lsrs	r3, r3, #16
 8012984:	2010      	movs	r0, #16
 8012986:	b2da      	uxtb	r2, r3
 8012988:	b90a      	cbnz	r2, 801298e <__lo0bits+0x32>
 801298a:	3008      	adds	r0, #8
 801298c:	0a1b      	lsrs	r3, r3, #8
 801298e:	071a      	lsls	r2, r3, #28
 8012990:	bf04      	itt	eq
 8012992:	091b      	lsreq	r3, r3, #4
 8012994:	3004      	addeq	r0, #4
 8012996:	079a      	lsls	r2, r3, #30
 8012998:	bf04      	itt	eq
 801299a:	089b      	lsreq	r3, r3, #2
 801299c:	3002      	addeq	r0, #2
 801299e:	07da      	lsls	r2, r3, #31
 80129a0:	d403      	bmi.n	80129aa <__lo0bits+0x4e>
 80129a2:	085b      	lsrs	r3, r3, #1
 80129a4:	f100 0001 	add.w	r0, r0, #1
 80129a8:	d005      	beq.n	80129b6 <__lo0bits+0x5a>
 80129aa:	600b      	str	r3, [r1, #0]
 80129ac:	4770      	bx	lr
 80129ae:	4610      	mov	r0, r2
 80129b0:	e7e9      	b.n	8012986 <__lo0bits+0x2a>
 80129b2:	2000      	movs	r0, #0
 80129b4:	4770      	bx	lr
 80129b6:	2020      	movs	r0, #32
 80129b8:	4770      	bx	lr
	...

080129bc <__i2b>:
 80129bc:	b510      	push	{r4, lr}
 80129be:	460c      	mov	r4, r1
 80129c0:	2101      	movs	r1, #1
 80129c2:	f7ff feb9 	bl	8012738 <_Balloc>
 80129c6:	4602      	mov	r2, r0
 80129c8:	b928      	cbnz	r0, 80129d6 <__i2b+0x1a>
 80129ca:	4b05      	ldr	r3, [pc, #20]	; (80129e0 <__i2b+0x24>)
 80129cc:	4805      	ldr	r0, [pc, #20]	; (80129e4 <__i2b+0x28>)
 80129ce:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80129d2:	f000 fd37 	bl	8013444 <__assert_func>
 80129d6:	2301      	movs	r3, #1
 80129d8:	6144      	str	r4, [r0, #20]
 80129da:	6103      	str	r3, [r0, #16]
 80129dc:	bd10      	pop	{r4, pc}
 80129de:	bf00      	nop
 80129e0:	080159ef 	.word	0x080159ef
 80129e4:	08015a7c 	.word	0x08015a7c

080129e8 <__multiply>:
 80129e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129ec:	4691      	mov	r9, r2
 80129ee:	690a      	ldr	r2, [r1, #16]
 80129f0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80129f4:	429a      	cmp	r2, r3
 80129f6:	bfb8      	it	lt
 80129f8:	460b      	movlt	r3, r1
 80129fa:	460c      	mov	r4, r1
 80129fc:	bfbc      	itt	lt
 80129fe:	464c      	movlt	r4, r9
 8012a00:	4699      	movlt	r9, r3
 8012a02:	6927      	ldr	r7, [r4, #16]
 8012a04:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8012a08:	68a3      	ldr	r3, [r4, #8]
 8012a0a:	6861      	ldr	r1, [r4, #4]
 8012a0c:	eb07 060a 	add.w	r6, r7, sl
 8012a10:	42b3      	cmp	r3, r6
 8012a12:	b085      	sub	sp, #20
 8012a14:	bfb8      	it	lt
 8012a16:	3101      	addlt	r1, #1
 8012a18:	f7ff fe8e 	bl	8012738 <_Balloc>
 8012a1c:	b930      	cbnz	r0, 8012a2c <__multiply+0x44>
 8012a1e:	4602      	mov	r2, r0
 8012a20:	4b44      	ldr	r3, [pc, #272]	; (8012b34 <__multiply+0x14c>)
 8012a22:	4845      	ldr	r0, [pc, #276]	; (8012b38 <__multiply+0x150>)
 8012a24:	f240 115d 	movw	r1, #349	; 0x15d
 8012a28:	f000 fd0c 	bl	8013444 <__assert_func>
 8012a2c:	f100 0514 	add.w	r5, r0, #20
 8012a30:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012a34:	462b      	mov	r3, r5
 8012a36:	2200      	movs	r2, #0
 8012a38:	4543      	cmp	r3, r8
 8012a3a:	d321      	bcc.n	8012a80 <__multiply+0x98>
 8012a3c:	f104 0314 	add.w	r3, r4, #20
 8012a40:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8012a44:	f109 0314 	add.w	r3, r9, #20
 8012a48:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8012a4c:	9202      	str	r2, [sp, #8]
 8012a4e:	1b3a      	subs	r2, r7, r4
 8012a50:	3a15      	subs	r2, #21
 8012a52:	f022 0203 	bic.w	r2, r2, #3
 8012a56:	3204      	adds	r2, #4
 8012a58:	f104 0115 	add.w	r1, r4, #21
 8012a5c:	428f      	cmp	r7, r1
 8012a5e:	bf38      	it	cc
 8012a60:	2204      	movcc	r2, #4
 8012a62:	9201      	str	r2, [sp, #4]
 8012a64:	9a02      	ldr	r2, [sp, #8]
 8012a66:	9303      	str	r3, [sp, #12]
 8012a68:	429a      	cmp	r2, r3
 8012a6a:	d80c      	bhi.n	8012a86 <__multiply+0x9e>
 8012a6c:	2e00      	cmp	r6, #0
 8012a6e:	dd03      	ble.n	8012a78 <__multiply+0x90>
 8012a70:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012a74:	2b00      	cmp	r3, #0
 8012a76:	d05a      	beq.n	8012b2e <__multiply+0x146>
 8012a78:	6106      	str	r6, [r0, #16]
 8012a7a:	b005      	add	sp, #20
 8012a7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a80:	f843 2b04 	str.w	r2, [r3], #4
 8012a84:	e7d8      	b.n	8012a38 <__multiply+0x50>
 8012a86:	f8b3 a000 	ldrh.w	sl, [r3]
 8012a8a:	f1ba 0f00 	cmp.w	sl, #0
 8012a8e:	d024      	beq.n	8012ada <__multiply+0xf2>
 8012a90:	f104 0e14 	add.w	lr, r4, #20
 8012a94:	46a9      	mov	r9, r5
 8012a96:	f04f 0c00 	mov.w	ip, #0
 8012a9a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8012a9e:	f8d9 1000 	ldr.w	r1, [r9]
 8012aa2:	fa1f fb82 	uxth.w	fp, r2
 8012aa6:	b289      	uxth	r1, r1
 8012aa8:	fb0a 110b 	mla	r1, sl, fp, r1
 8012aac:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8012ab0:	f8d9 2000 	ldr.w	r2, [r9]
 8012ab4:	4461      	add	r1, ip
 8012ab6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012aba:	fb0a c20b 	mla	r2, sl, fp, ip
 8012abe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8012ac2:	b289      	uxth	r1, r1
 8012ac4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8012ac8:	4577      	cmp	r7, lr
 8012aca:	f849 1b04 	str.w	r1, [r9], #4
 8012ace:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012ad2:	d8e2      	bhi.n	8012a9a <__multiply+0xb2>
 8012ad4:	9a01      	ldr	r2, [sp, #4]
 8012ad6:	f845 c002 	str.w	ip, [r5, r2]
 8012ada:	9a03      	ldr	r2, [sp, #12]
 8012adc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8012ae0:	3304      	adds	r3, #4
 8012ae2:	f1b9 0f00 	cmp.w	r9, #0
 8012ae6:	d020      	beq.n	8012b2a <__multiply+0x142>
 8012ae8:	6829      	ldr	r1, [r5, #0]
 8012aea:	f104 0c14 	add.w	ip, r4, #20
 8012aee:	46ae      	mov	lr, r5
 8012af0:	f04f 0a00 	mov.w	sl, #0
 8012af4:	f8bc b000 	ldrh.w	fp, [ip]
 8012af8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8012afc:	fb09 220b 	mla	r2, r9, fp, r2
 8012b00:	4492      	add	sl, r2
 8012b02:	b289      	uxth	r1, r1
 8012b04:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8012b08:	f84e 1b04 	str.w	r1, [lr], #4
 8012b0c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8012b10:	f8be 1000 	ldrh.w	r1, [lr]
 8012b14:	0c12      	lsrs	r2, r2, #16
 8012b16:	fb09 1102 	mla	r1, r9, r2, r1
 8012b1a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8012b1e:	4567      	cmp	r7, ip
 8012b20:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8012b24:	d8e6      	bhi.n	8012af4 <__multiply+0x10c>
 8012b26:	9a01      	ldr	r2, [sp, #4]
 8012b28:	50a9      	str	r1, [r5, r2]
 8012b2a:	3504      	adds	r5, #4
 8012b2c:	e79a      	b.n	8012a64 <__multiply+0x7c>
 8012b2e:	3e01      	subs	r6, #1
 8012b30:	e79c      	b.n	8012a6c <__multiply+0x84>
 8012b32:	bf00      	nop
 8012b34:	080159ef 	.word	0x080159ef
 8012b38:	08015a7c 	.word	0x08015a7c

08012b3c <__pow5mult>:
 8012b3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012b40:	4615      	mov	r5, r2
 8012b42:	f012 0203 	ands.w	r2, r2, #3
 8012b46:	4606      	mov	r6, r0
 8012b48:	460f      	mov	r7, r1
 8012b4a:	d007      	beq.n	8012b5c <__pow5mult+0x20>
 8012b4c:	4c25      	ldr	r4, [pc, #148]	; (8012be4 <__pow5mult+0xa8>)
 8012b4e:	3a01      	subs	r2, #1
 8012b50:	2300      	movs	r3, #0
 8012b52:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012b56:	f7ff fe51 	bl	80127fc <__multadd>
 8012b5a:	4607      	mov	r7, r0
 8012b5c:	10ad      	asrs	r5, r5, #2
 8012b5e:	d03d      	beq.n	8012bdc <__pow5mult+0xa0>
 8012b60:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8012b62:	b97c      	cbnz	r4, 8012b84 <__pow5mult+0x48>
 8012b64:	2010      	movs	r0, #16
 8012b66:	f7fc fef5 	bl	800f954 <malloc>
 8012b6a:	4602      	mov	r2, r0
 8012b6c:	6270      	str	r0, [r6, #36]	; 0x24
 8012b6e:	b928      	cbnz	r0, 8012b7c <__pow5mult+0x40>
 8012b70:	4b1d      	ldr	r3, [pc, #116]	; (8012be8 <__pow5mult+0xac>)
 8012b72:	481e      	ldr	r0, [pc, #120]	; (8012bec <__pow5mult+0xb0>)
 8012b74:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8012b78:	f000 fc64 	bl	8013444 <__assert_func>
 8012b7c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012b80:	6004      	str	r4, [r0, #0]
 8012b82:	60c4      	str	r4, [r0, #12]
 8012b84:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8012b88:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012b8c:	b94c      	cbnz	r4, 8012ba2 <__pow5mult+0x66>
 8012b8e:	f240 2171 	movw	r1, #625	; 0x271
 8012b92:	4630      	mov	r0, r6
 8012b94:	f7ff ff12 	bl	80129bc <__i2b>
 8012b98:	2300      	movs	r3, #0
 8012b9a:	f8c8 0008 	str.w	r0, [r8, #8]
 8012b9e:	4604      	mov	r4, r0
 8012ba0:	6003      	str	r3, [r0, #0]
 8012ba2:	f04f 0900 	mov.w	r9, #0
 8012ba6:	07eb      	lsls	r3, r5, #31
 8012ba8:	d50a      	bpl.n	8012bc0 <__pow5mult+0x84>
 8012baa:	4639      	mov	r1, r7
 8012bac:	4622      	mov	r2, r4
 8012bae:	4630      	mov	r0, r6
 8012bb0:	f7ff ff1a 	bl	80129e8 <__multiply>
 8012bb4:	4639      	mov	r1, r7
 8012bb6:	4680      	mov	r8, r0
 8012bb8:	4630      	mov	r0, r6
 8012bba:	f7ff fdfd 	bl	80127b8 <_Bfree>
 8012bbe:	4647      	mov	r7, r8
 8012bc0:	106d      	asrs	r5, r5, #1
 8012bc2:	d00b      	beq.n	8012bdc <__pow5mult+0xa0>
 8012bc4:	6820      	ldr	r0, [r4, #0]
 8012bc6:	b938      	cbnz	r0, 8012bd8 <__pow5mult+0x9c>
 8012bc8:	4622      	mov	r2, r4
 8012bca:	4621      	mov	r1, r4
 8012bcc:	4630      	mov	r0, r6
 8012bce:	f7ff ff0b 	bl	80129e8 <__multiply>
 8012bd2:	6020      	str	r0, [r4, #0]
 8012bd4:	f8c0 9000 	str.w	r9, [r0]
 8012bd8:	4604      	mov	r4, r0
 8012bda:	e7e4      	b.n	8012ba6 <__pow5mult+0x6a>
 8012bdc:	4638      	mov	r0, r7
 8012bde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012be2:	bf00      	nop
 8012be4:	08015bc8 	.word	0x08015bc8
 8012be8:	0801597d 	.word	0x0801597d
 8012bec:	08015a7c 	.word	0x08015a7c

08012bf0 <__lshift>:
 8012bf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012bf4:	460c      	mov	r4, r1
 8012bf6:	6849      	ldr	r1, [r1, #4]
 8012bf8:	6923      	ldr	r3, [r4, #16]
 8012bfa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012bfe:	68a3      	ldr	r3, [r4, #8]
 8012c00:	4607      	mov	r7, r0
 8012c02:	4691      	mov	r9, r2
 8012c04:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012c08:	f108 0601 	add.w	r6, r8, #1
 8012c0c:	42b3      	cmp	r3, r6
 8012c0e:	db0b      	blt.n	8012c28 <__lshift+0x38>
 8012c10:	4638      	mov	r0, r7
 8012c12:	f7ff fd91 	bl	8012738 <_Balloc>
 8012c16:	4605      	mov	r5, r0
 8012c18:	b948      	cbnz	r0, 8012c2e <__lshift+0x3e>
 8012c1a:	4602      	mov	r2, r0
 8012c1c:	4b2a      	ldr	r3, [pc, #168]	; (8012cc8 <__lshift+0xd8>)
 8012c1e:	482b      	ldr	r0, [pc, #172]	; (8012ccc <__lshift+0xdc>)
 8012c20:	f240 11d9 	movw	r1, #473	; 0x1d9
 8012c24:	f000 fc0e 	bl	8013444 <__assert_func>
 8012c28:	3101      	adds	r1, #1
 8012c2a:	005b      	lsls	r3, r3, #1
 8012c2c:	e7ee      	b.n	8012c0c <__lshift+0x1c>
 8012c2e:	2300      	movs	r3, #0
 8012c30:	f100 0114 	add.w	r1, r0, #20
 8012c34:	f100 0210 	add.w	r2, r0, #16
 8012c38:	4618      	mov	r0, r3
 8012c3a:	4553      	cmp	r3, sl
 8012c3c:	db37      	blt.n	8012cae <__lshift+0xbe>
 8012c3e:	6920      	ldr	r0, [r4, #16]
 8012c40:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012c44:	f104 0314 	add.w	r3, r4, #20
 8012c48:	f019 091f 	ands.w	r9, r9, #31
 8012c4c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012c50:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8012c54:	d02f      	beq.n	8012cb6 <__lshift+0xc6>
 8012c56:	f1c9 0e20 	rsb	lr, r9, #32
 8012c5a:	468a      	mov	sl, r1
 8012c5c:	f04f 0c00 	mov.w	ip, #0
 8012c60:	681a      	ldr	r2, [r3, #0]
 8012c62:	fa02 f209 	lsl.w	r2, r2, r9
 8012c66:	ea42 020c 	orr.w	r2, r2, ip
 8012c6a:	f84a 2b04 	str.w	r2, [sl], #4
 8012c6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8012c72:	4298      	cmp	r0, r3
 8012c74:	fa22 fc0e 	lsr.w	ip, r2, lr
 8012c78:	d8f2      	bhi.n	8012c60 <__lshift+0x70>
 8012c7a:	1b03      	subs	r3, r0, r4
 8012c7c:	3b15      	subs	r3, #21
 8012c7e:	f023 0303 	bic.w	r3, r3, #3
 8012c82:	3304      	adds	r3, #4
 8012c84:	f104 0215 	add.w	r2, r4, #21
 8012c88:	4290      	cmp	r0, r2
 8012c8a:	bf38      	it	cc
 8012c8c:	2304      	movcc	r3, #4
 8012c8e:	f841 c003 	str.w	ip, [r1, r3]
 8012c92:	f1bc 0f00 	cmp.w	ip, #0
 8012c96:	d001      	beq.n	8012c9c <__lshift+0xac>
 8012c98:	f108 0602 	add.w	r6, r8, #2
 8012c9c:	3e01      	subs	r6, #1
 8012c9e:	4638      	mov	r0, r7
 8012ca0:	612e      	str	r6, [r5, #16]
 8012ca2:	4621      	mov	r1, r4
 8012ca4:	f7ff fd88 	bl	80127b8 <_Bfree>
 8012ca8:	4628      	mov	r0, r5
 8012caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012cae:	f842 0f04 	str.w	r0, [r2, #4]!
 8012cb2:	3301      	adds	r3, #1
 8012cb4:	e7c1      	b.n	8012c3a <__lshift+0x4a>
 8012cb6:	3904      	subs	r1, #4
 8012cb8:	f853 2b04 	ldr.w	r2, [r3], #4
 8012cbc:	f841 2f04 	str.w	r2, [r1, #4]!
 8012cc0:	4298      	cmp	r0, r3
 8012cc2:	d8f9      	bhi.n	8012cb8 <__lshift+0xc8>
 8012cc4:	e7ea      	b.n	8012c9c <__lshift+0xac>
 8012cc6:	bf00      	nop
 8012cc8:	080159ef 	.word	0x080159ef
 8012ccc:	08015a7c 	.word	0x08015a7c

08012cd0 <__mcmp>:
 8012cd0:	b530      	push	{r4, r5, lr}
 8012cd2:	6902      	ldr	r2, [r0, #16]
 8012cd4:	690c      	ldr	r4, [r1, #16]
 8012cd6:	1b12      	subs	r2, r2, r4
 8012cd8:	d10e      	bne.n	8012cf8 <__mcmp+0x28>
 8012cda:	f100 0314 	add.w	r3, r0, #20
 8012cde:	3114      	adds	r1, #20
 8012ce0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8012ce4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8012ce8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8012cec:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8012cf0:	42a5      	cmp	r5, r4
 8012cf2:	d003      	beq.n	8012cfc <__mcmp+0x2c>
 8012cf4:	d305      	bcc.n	8012d02 <__mcmp+0x32>
 8012cf6:	2201      	movs	r2, #1
 8012cf8:	4610      	mov	r0, r2
 8012cfa:	bd30      	pop	{r4, r5, pc}
 8012cfc:	4283      	cmp	r3, r0
 8012cfe:	d3f3      	bcc.n	8012ce8 <__mcmp+0x18>
 8012d00:	e7fa      	b.n	8012cf8 <__mcmp+0x28>
 8012d02:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012d06:	e7f7      	b.n	8012cf8 <__mcmp+0x28>

08012d08 <__mdiff>:
 8012d08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d0c:	460c      	mov	r4, r1
 8012d0e:	4606      	mov	r6, r0
 8012d10:	4611      	mov	r1, r2
 8012d12:	4620      	mov	r0, r4
 8012d14:	4690      	mov	r8, r2
 8012d16:	f7ff ffdb 	bl	8012cd0 <__mcmp>
 8012d1a:	1e05      	subs	r5, r0, #0
 8012d1c:	d110      	bne.n	8012d40 <__mdiff+0x38>
 8012d1e:	4629      	mov	r1, r5
 8012d20:	4630      	mov	r0, r6
 8012d22:	f7ff fd09 	bl	8012738 <_Balloc>
 8012d26:	b930      	cbnz	r0, 8012d36 <__mdiff+0x2e>
 8012d28:	4b3a      	ldr	r3, [pc, #232]	; (8012e14 <__mdiff+0x10c>)
 8012d2a:	4602      	mov	r2, r0
 8012d2c:	f240 2132 	movw	r1, #562	; 0x232
 8012d30:	4839      	ldr	r0, [pc, #228]	; (8012e18 <__mdiff+0x110>)
 8012d32:	f000 fb87 	bl	8013444 <__assert_func>
 8012d36:	2301      	movs	r3, #1
 8012d38:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012d3c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d40:	bfa4      	itt	ge
 8012d42:	4643      	movge	r3, r8
 8012d44:	46a0      	movge	r8, r4
 8012d46:	4630      	mov	r0, r6
 8012d48:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8012d4c:	bfa6      	itte	ge
 8012d4e:	461c      	movge	r4, r3
 8012d50:	2500      	movge	r5, #0
 8012d52:	2501      	movlt	r5, #1
 8012d54:	f7ff fcf0 	bl	8012738 <_Balloc>
 8012d58:	b920      	cbnz	r0, 8012d64 <__mdiff+0x5c>
 8012d5a:	4b2e      	ldr	r3, [pc, #184]	; (8012e14 <__mdiff+0x10c>)
 8012d5c:	4602      	mov	r2, r0
 8012d5e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8012d62:	e7e5      	b.n	8012d30 <__mdiff+0x28>
 8012d64:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8012d68:	6926      	ldr	r6, [r4, #16]
 8012d6a:	60c5      	str	r5, [r0, #12]
 8012d6c:	f104 0914 	add.w	r9, r4, #20
 8012d70:	f108 0514 	add.w	r5, r8, #20
 8012d74:	f100 0e14 	add.w	lr, r0, #20
 8012d78:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8012d7c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8012d80:	f108 0210 	add.w	r2, r8, #16
 8012d84:	46f2      	mov	sl, lr
 8012d86:	2100      	movs	r1, #0
 8012d88:	f859 3b04 	ldr.w	r3, [r9], #4
 8012d8c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8012d90:	fa1f f883 	uxth.w	r8, r3
 8012d94:	fa11 f18b 	uxtah	r1, r1, fp
 8012d98:	0c1b      	lsrs	r3, r3, #16
 8012d9a:	eba1 0808 	sub.w	r8, r1, r8
 8012d9e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8012da2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8012da6:	fa1f f888 	uxth.w	r8, r8
 8012daa:	1419      	asrs	r1, r3, #16
 8012dac:	454e      	cmp	r6, r9
 8012dae:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8012db2:	f84a 3b04 	str.w	r3, [sl], #4
 8012db6:	d8e7      	bhi.n	8012d88 <__mdiff+0x80>
 8012db8:	1b33      	subs	r3, r6, r4
 8012dba:	3b15      	subs	r3, #21
 8012dbc:	f023 0303 	bic.w	r3, r3, #3
 8012dc0:	3304      	adds	r3, #4
 8012dc2:	3415      	adds	r4, #21
 8012dc4:	42a6      	cmp	r6, r4
 8012dc6:	bf38      	it	cc
 8012dc8:	2304      	movcc	r3, #4
 8012dca:	441d      	add	r5, r3
 8012dcc:	4473      	add	r3, lr
 8012dce:	469e      	mov	lr, r3
 8012dd0:	462e      	mov	r6, r5
 8012dd2:	4566      	cmp	r6, ip
 8012dd4:	d30e      	bcc.n	8012df4 <__mdiff+0xec>
 8012dd6:	f10c 0203 	add.w	r2, ip, #3
 8012dda:	1b52      	subs	r2, r2, r5
 8012ddc:	f022 0203 	bic.w	r2, r2, #3
 8012de0:	3d03      	subs	r5, #3
 8012de2:	45ac      	cmp	ip, r5
 8012de4:	bf38      	it	cc
 8012de6:	2200      	movcc	r2, #0
 8012de8:	441a      	add	r2, r3
 8012dea:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8012dee:	b17b      	cbz	r3, 8012e10 <__mdiff+0x108>
 8012df0:	6107      	str	r7, [r0, #16]
 8012df2:	e7a3      	b.n	8012d3c <__mdiff+0x34>
 8012df4:	f856 8b04 	ldr.w	r8, [r6], #4
 8012df8:	fa11 f288 	uxtah	r2, r1, r8
 8012dfc:	1414      	asrs	r4, r2, #16
 8012dfe:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8012e02:	b292      	uxth	r2, r2
 8012e04:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8012e08:	f84e 2b04 	str.w	r2, [lr], #4
 8012e0c:	1421      	asrs	r1, r4, #16
 8012e0e:	e7e0      	b.n	8012dd2 <__mdiff+0xca>
 8012e10:	3f01      	subs	r7, #1
 8012e12:	e7ea      	b.n	8012dea <__mdiff+0xe2>
 8012e14:	080159ef 	.word	0x080159ef
 8012e18:	08015a7c 	.word	0x08015a7c

08012e1c <__ulp>:
 8012e1c:	b082      	sub	sp, #8
 8012e1e:	ed8d 0b00 	vstr	d0, [sp]
 8012e22:	9b01      	ldr	r3, [sp, #4]
 8012e24:	4912      	ldr	r1, [pc, #72]	; (8012e70 <__ulp+0x54>)
 8012e26:	4019      	ands	r1, r3
 8012e28:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8012e2c:	2900      	cmp	r1, #0
 8012e2e:	dd05      	ble.n	8012e3c <__ulp+0x20>
 8012e30:	2200      	movs	r2, #0
 8012e32:	460b      	mov	r3, r1
 8012e34:	ec43 2b10 	vmov	d0, r2, r3
 8012e38:	b002      	add	sp, #8
 8012e3a:	4770      	bx	lr
 8012e3c:	4249      	negs	r1, r1
 8012e3e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8012e42:	ea4f 5021 	mov.w	r0, r1, asr #20
 8012e46:	f04f 0200 	mov.w	r2, #0
 8012e4a:	f04f 0300 	mov.w	r3, #0
 8012e4e:	da04      	bge.n	8012e5a <__ulp+0x3e>
 8012e50:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8012e54:	fa41 f300 	asr.w	r3, r1, r0
 8012e58:	e7ec      	b.n	8012e34 <__ulp+0x18>
 8012e5a:	f1a0 0114 	sub.w	r1, r0, #20
 8012e5e:	291e      	cmp	r1, #30
 8012e60:	bfda      	itte	le
 8012e62:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8012e66:	fa20 f101 	lsrle.w	r1, r0, r1
 8012e6a:	2101      	movgt	r1, #1
 8012e6c:	460a      	mov	r2, r1
 8012e6e:	e7e1      	b.n	8012e34 <__ulp+0x18>
 8012e70:	7ff00000 	.word	0x7ff00000

08012e74 <__b2d>:
 8012e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e76:	6905      	ldr	r5, [r0, #16]
 8012e78:	f100 0714 	add.w	r7, r0, #20
 8012e7c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8012e80:	1f2e      	subs	r6, r5, #4
 8012e82:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8012e86:	4620      	mov	r0, r4
 8012e88:	f7ff fd48 	bl	801291c <__hi0bits>
 8012e8c:	f1c0 0320 	rsb	r3, r0, #32
 8012e90:	280a      	cmp	r0, #10
 8012e92:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8012f10 <__b2d+0x9c>
 8012e96:	600b      	str	r3, [r1, #0]
 8012e98:	dc14      	bgt.n	8012ec4 <__b2d+0x50>
 8012e9a:	f1c0 0e0b 	rsb	lr, r0, #11
 8012e9e:	fa24 f10e 	lsr.w	r1, r4, lr
 8012ea2:	42b7      	cmp	r7, r6
 8012ea4:	ea41 030c 	orr.w	r3, r1, ip
 8012ea8:	bf34      	ite	cc
 8012eaa:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8012eae:	2100      	movcs	r1, #0
 8012eb0:	3015      	adds	r0, #21
 8012eb2:	fa04 f000 	lsl.w	r0, r4, r0
 8012eb6:	fa21 f10e 	lsr.w	r1, r1, lr
 8012eba:	ea40 0201 	orr.w	r2, r0, r1
 8012ebe:	ec43 2b10 	vmov	d0, r2, r3
 8012ec2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012ec4:	42b7      	cmp	r7, r6
 8012ec6:	bf3a      	itte	cc
 8012ec8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8012ecc:	f1a5 0608 	subcc.w	r6, r5, #8
 8012ed0:	2100      	movcs	r1, #0
 8012ed2:	380b      	subs	r0, #11
 8012ed4:	d017      	beq.n	8012f06 <__b2d+0x92>
 8012ed6:	f1c0 0c20 	rsb	ip, r0, #32
 8012eda:	fa04 f500 	lsl.w	r5, r4, r0
 8012ede:	42be      	cmp	r6, r7
 8012ee0:	fa21 f40c 	lsr.w	r4, r1, ip
 8012ee4:	ea45 0504 	orr.w	r5, r5, r4
 8012ee8:	bf8c      	ite	hi
 8012eea:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8012eee:	2400      	movls	r4, #0
 8012ef0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8012ef4:	fa01 f000 	lsl.w	r0, r1, r0
 8012ef8:	fa24 f40c 	lsr.w	r4, r4, ip
 8012efc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8012f00:	ea40 0204 	orr.w	r2, r0, r4
 8012f04:	e7db      	b.n	8012ebe <__b2d+0x4a>
 8012f06:	ea44 030c 	orr.w	r3, r4, ip
 8012f0a:	460a      	mov	r2, r1
 8012f0c:	e7d7      	b.n	8012ebe <__b2d+0x4a>
 8012f0e:	bf00      	nop
 8012f10:	3ff00000 	.word	0x3ff00000

08012f14 <__d2b>:
 8012f14:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012f18:	4689      	mov	r9, r1
 8012f1a:	2101      	movs	r1, #1
 8012f1c:	ec57 6b10 	vmov	r6, r7, d0
 8012f20:	4690      	mov	r8, r2
 8012f22:	f7ff fc09 	bl	8012738 <_Balloc>
 8012f26:	4604      	mov	r4, r0
 8012f28:	b930      	cbnz	r0, 8012f38 <__d2b+0x24>
 8012f2a:	4602      	mov	r2, r0
 8012f2c:	4b25      	ldr	r3, [pc, #148]	; (8012fc4 <__d2b+0xb0>)
 8012f2e:	4826      	ldr	r0, [pc, #152]	; (8012fc8 <__d2b+0xb4>)
 8012f30:	f240 310a 	movw	r1, #778	; 0x30a
 8012f34:	f000 fa86 	bl	8013444 <__assert_func>
 8012f38:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8012f3c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012f40:	bb35      	cbnz	r5, 8012f90 <__d2b+0x7c>
 8012f42:	2e00      	cmp	r6, #0
 8012f44:	9301      	str	r3, [sp, #4]
 8012f46:	d028      	beq.n	8012f9a <__d2b+0x86>
 8012f48:	4668      	mov	r0, sp
 8012f4a:	9600      	str	r6, [sp, #0]
 8012f4c:	f7ff fd06 	bl	801295c <__lo0bits>
 8012f50:	9900      	ldr	r1, [sp, #0]
 8012f52:	b300      	cbz	r0, 8012f96 <__d2b+0x82>
 8012f54:	9a01      	ldr	r2, [sp, #4]
 8012f56:	f1c0 0320 	rsb	r3, r0, #32
 8012f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8012f5e:	430b      	orrs	r3, r1
 8012f60:	40c2      	lsrs	r2, r0
 8012f62:	6163      	str	r3, [r4, #20]
 8012f64:	9201      	str	r2, [sp, #4]
 8012f66:	9b01      	ldr	r3, [sp, #4]
 8012f68:	61a3      	str	r3, [r4, #24]
 8012f6a:	2b00      	cmp	r3, #0
 8012f6c:	bf14      	ite	ne
 8012f6e:	2202      	movne	r2, #2
 8012f70:	2201      	moveq	r2, #1
 8012f72:	6122      	str	r2, [r4, #16]
 8012f74:	b1d5      	cbz	r5, 8012fac <__d2b+0x98>
 8012f76:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8012f7a:	4405      	add	r5, r0
 8012f7c:	f8c9 5000 	str.w	r5, [r9]
 8012f80:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012f84:	f8c8 0000 	str.w	r0, [r8]
 8012f88:	4620      	mov	r0, r4
 8012f8a:	b003      	add	sp, #12
 8012f8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012f90:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012f94:	e7d5      	b.n	8012f42 <__d2b+0x2e>
 8012f96:	6161      	str	r1, [r4, #20]
 8012f98:	e7e5      	b.n	8012f66 <__d2b+0x52>
 8012f9a:	a801      	add	r0, sp, #4
 8012f9c:	f7ff fcde 	bl	801295c <__lo0bits>
 8012fa0:	9b01      	ldr	r3, [sp, #4]
 8012fa2:	6163      	str	r3, [r4, #20]
 8012fa4:	2201      	movs	r2, #1
 8012fa6:	6122      	str	r2, [r4, #16]
 8012fa8:	3020      	adds	r0, #32
 8012faa:	e7e3      	b.n	8012f74 <__d2b+0x60>
 8012fac:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012fb0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8012fb4:	f8c9 0000 	str.w	r0, [r9]
 8012fb8:	6918      	ldr	r0, [r3, #16]
 8012fba:	f7ff fcaf 	bl	801291c <__hi0bits>
 8012fbe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012fc2:	e7df      	b.n	8012f84 <__d2b+0x70>
 8012fc4:	080159ef 	.word	0x080159ef
 8012fc8:	08015a7c 	.word	0x08015a7c

08012fcc <__ratio>:
 8012fcc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012fd0:	4688      	mov	r8, r1
 8012fd2:	4669      	mov	r1, sp
 8012fd4:	4681      	mov	r9, r0
 8012fd6:	f7ff ff4d 	bl	8012e74 <__b2d>
 8012fda:	a901      	add	r1, sp, #4
 8012fdc:	4640      	mov	r0, r8
 8012fde:	ec55 4b10 	vmov	r4, r5, d0
 8012fe2:	f7ff ff47 	bl	8012e74 <__b2d>
 8012fe6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012fea:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8012fee:	eba3 0c02 	sub.w	ip, r3, r2
 8012ff2:	e9dd 3200 	ldrd	r3, r2, [sp]
 8012ff6:	1a9b      	subs	r3, r3, r2
 8012ff8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8012ffc:	ec51 0b10 	vmov	r0, r1, d0
 8013000:	2b00      	cmp	r3, #0
 8013002:	bfd6      	itet	le
 8013004:	460a      	movle	r2, r1
 8013006:	462a      	movgt	r2, r5
 8013008:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801300c:	468b      	mov	fp, r1
 801300e:	462f      	mov	r7, r5
 8013010:	bfd4      	ite	le
 8013012:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8013016:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801301a:	4620      	mov	r0, r4
 801301c:	ee10 2a10 	vmov	r2, s0
 8013020:	465b      	mov	r3, fp
 8013022:	4639      	mov	r1, r7
 8013024:	f7ed fc12 	bl	800084c <__aeabi_ddiv>
 8013028:	ec41 0b10 	vmov	d0, r0, r1
 801302c:	b003      	add	sp, #12
 801302e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013032 <__copybits>:
 8013032:	3901      	subs	r1, #1
 8013034:	b570      	push	{r4, r5, r6, lr}
 8013036:	1149      	asrs	r1, r1, #5
 8013038:	6914      	ldr	r4, [r2, #16]
 801303a:	3101      	adds	r1, #1
 801303c:	f102 0314 	add.w	r3, r2, #20
 8013040:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8013044:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8013048:	1f05      	subs	r5, r0, #4
 801304a:	42a3      	cmp	r3, r4
 801304c:	d30c      	bcc.n	8013068 <__copybits+0x36>
 801304e:	1aa3      	subs	r3, r4, r2
 8013050:	3b11      	subs	r3, #17
 8013052:	f023 0303 	bic.w	r3, r3, #3
 8013056:	3211      	adds	r2, #17
 8013058:	42a2      	cmp	r2, r4
 801305a:	bf88      	it	hi
 801305c:	2300      	movhi	r3, #0
 801305e:	4418      	add	r0, r3
 8013060:	2300      	movs	r3, #0
 8013062:	4288      	cmp	r0, r1
 8013064:	d305      	bcc.n	8013072 <__copybits+0x40>
 8013066:	bd70      	pop	{r4, r5, r6, pc}
 8013068:	f853 6b04 	ldr.w	r6, [r3], #4
 801306c:	f845 6f04 	str.w	r6, [r5, #4]!
 8013070:	e7eb      	b.n	801304a <__copybits+0x18>
 8013072:	f840 3b04 	str.w	r3, [r0], #4
 8013076:	e7f4      	b.n	8013062 <__copybits+0x30>

08013078 <__any_on>:
 8013078:	f100 0214 	add.w	r2, r0, #20
 801307c:	6900      	ldr	r0, [r0, #16]
 801307e:	114b      	asrs	r3, r1, #5
 8013080:	4298      	cmp	r0, r3
 8013082:	b510      	push	{r4, lr}
 8013084:	db11      	blt.n	80130aa <__any_on+0x32>
 8013086:	dd0a      	ble.n	801309e <__any_on+0x26>
 8013088:	f011 011f 	ands.w	r1, r1, #31
 801308c:	d007      	beq.n	801309e <__any_on+0x26>
 801308e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8013092:	fa24 f001 	lsr.w	r0, r4, r1
 8013096:	fa00 f101 	lsl.w	r1, r0, r1
 801309a:	428c      	cmp	r4, r1
 801309c:	d10b      	bne.n	80130b6 <__any_on+0x3e>
 801309e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80130a2:	4293      	cmp	r3, r2
 80130a4:	d803      	bhi.n	80130ae <__any_on+0x36>
 80130a6:	2000      	movs	r0, #0
 80130a8:	bd10      	pop	{r4, pc}
 80130aa:	4603      	mov	r3, r0
 80130ac:	e7f7      	b.n	801309e <__any_on+0x26>
 80130ae:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80130b2:	2900      	cmp	r1, #0
 80130b4:	d0f5      	beq.n	80130a2 <__any_on+0x2a>
 80130b6:	2001      	movs	r0, #1
 80130b8:	e7f6      	b.n	80130a8 <__any_on+0x30>

080130ba <__ssputs_r>:
 80130ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80130be:	688e      	ldr	r6, [r1, #8]
 80130c0:	429e      	cmp	r6, r3
 80130c2:	4682      	mov	sl, r0
 80130c4:	460c      	mov	r4, r1
 80130c6:	4690      	mov	r8, r2
 80130c8:	461f      	mov	r7, r3
 80130ca:	d838      	bhi.n	801313e <__ssputs_r+0x84>
 80130cc:	898a      	ldrh	r2, [r1, #12]
 80130ce:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80130d2:	d032      	beq.n	801313a <__ssputs_r+0x80>
 80130d4:	6825      	ldr	r5, [r4, #0]
 80130d6:	6909      	ldr	r1, [r1, #16]
 80130d8:	eba5 0901 	sub.w	r9, r5, r1
 80130dc:	6965      	ldr	r5, [r4, #20]
 80130de:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80130e2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80130e6:	3301      	adds	r3, #1
 80130e8:	444b      	add	r3, r9
 80130ea:	106d      	asrs	r5, r5, #1
 80130ec:	429d      	cmp	r5, r3
 80130ee:	bf38      	it	cc
 80130f0:	461d      	movcc	r5, r3
 80130f2:	0553      	lsls	r3, r2, #21
 80130f4:	d531      	bpl.n	801315a <__ssputs_r+0xa0>
 80130f6:	4629      	mov	r1, r5
 80130f8:	f7fc fcd4 	bl	800faa4 <_malloc_r>
 80130fc:	4606      	mov	r6, r0
 80130fe:	b950      	cbnz	r0, 8013116 <__ssputs_r+0x5c>
 8013100:	230c      	movs	r3, #12
 8013102:	f8ca 3000 	str.w	r3, [sl]
 8013106:	89a3      	ldrh	r3, [r4, #12]
 8013108:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801310c:	81a3      	strh	r3, [r4, #12]
 801310e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013112:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013116:	6921      	ldr	r1, [r4, #16]
 8013118:	464a      	mov	r2, r9
 801311a:	f7fc fc2b 	bl	800f974 <memcpy>
 801311e:	89a3      	ldrh	r3, [r4, #12]
 8013120:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013124:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013128:	81a3      	strh	r3, [r4, #12]
 801312a:	6126      	str	r6, [r4, #16]
 801312c:	6165      	str	r5, [r4, #20]
 801312e:	444e      	add	r6, r9
 8013130:	eba5 0509 	sub.w	r5, r5, r9
 8013134:	6026      	str	r6, [r4, #0]
 8013136:	60a5      	str	r5, [r4, #8]
 8013138:	463e      	mov	r6, r7
 801313a:	42be      	cmp	r6, r7
 801313c:	d900      	bls.n	8013140 <__ssputs_r+0x86>
 801313e:	463e      	mov	r6, r7
 8013140:	6820      	ldr	r0, [r4, #0]
 8013142:	4632      	mov	r2, r6
 8013144:	4641      	mov	r1, r8
 8013146:	f000 f9cf 	bl	80134e8 <memmove>
 801314a:	68a3      	ldr	r3, [r4, #8]
 801314c:	1b9b      	subs	r3, r3, r6
 801314e:	60a3      	str	r3, [r4, #8]
 8013150:	6823      	ldr	r3, [r4, #0]
 8013152:	4433      	add	r3, r6
 8013154:	6023      	str	r3, [r4, #0]
 8013156:	2000      	movs	r0, #0
 8013158:	e7db      	b.n	8013112 <__ssputs_r+0x58>
 801315a:	462a      	mov	r2, r5
 801315c:	f000 f9de 	bl	801351c <_realloc_r>
 8013160:	4606      	mov	r6, r0
 8013162:	2800      	cmp	r0, #0
 8013164:	d1e1      	bne.n	801312a <__ssputs_r+0x70>
 8013166:	6921      	ldr	r1, [r4, #16]
 8013168:	4650      	mov	r0, sl
 801316a:	f7fc fc2f 	bl	800f9cc <_free_r>
 801316e:	e7c7      	b.n	8013100 <__ssputs_r+0x46>

08013170 <_svfiprintf_r>:
 8013170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013174:	4698      	mov	r8, r3
 8013176:	898b      	ldrh	r3, [r1, #12]
 8013178:	061b      	lsls	r3, r3, #24
 801317a:	b09d      	sub	sp, #116	; 0x74
 801317c:	4607      	mov	r7, r0
 801317e:	460d      	mov	r5, r1
 8013180:	4614      	mov	r4, r2
 8013182:	d50e      	bpl.n	80131a2 <_svfiprintf_r+0x32>
 8013184:	690b      	ldr	r3, [r1, #16]
 8013186:	b963      	cbnz	r3, 80131a2 <_svfiprintf_r+0x32>
 8013188:	2140      	movs	r1, #64	; 0x40
 801318a:	f7fc fc8b 	bl	800faa4 <_malloc_r>
 801318e:	6028      	str	r0, [r5, #0]
 8013190:	6128      	str	r0, [r5, #16]
 8013192:	b920      	cbnz	r0, 801319e <_svfiprintf_r+0x2e>
 8013194:	230c      	movs	r3, #12
 8013196:	603b      	str	r3, [r7, #0]
 8013198:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801319c:	e0d1      	b.n	8013342 <_svfiprintf_r+0x1d2>
 801319e:	2340      	movs	r3, #64	; 0x40
 80131a0:	616b      	str	r3, [r5, #20]
 80131a2:	2300      	movs	r3, #0
 80131a4:	9309      	str	r3, [sp, #36]	; 0x24
 80131a6:	2320      	movs	r3, #32
 80131a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80131ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80131b0:	2330      	movs	r3, #48	; 0x30
 80131b2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801335c <_svfiprintf_r+0x1ec>
 80131b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80131ba:	f04f 0901 	mov.w	r9, #1
 80131be:	4623      	mov	r3, r4
 80131c0:	469a      	mov	sl, r3
 80131c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80131c6:	b10a      	cbz	r2, 80131cc <_svfiprintf_r+0x5c>
 80131c8:	2a25      	cmp	r2, #37	; 0x25
 80131ca:	d1f9      	bne.n	80131c0 <_svfiprintf_r+0x50>
 80131cc:	ebba 0b04 	subs.w	fp, sl, r4
 80131d0:	d00b      	beq.n	80131ea <_svfiprintf_r+0x7a>
 80131d2:	465b      	mov	r3, fp
 80131d4:	4622      	mov	r2, r4
 80131d6:	4629      	mov	r1, r5
 80131d8:	4638      	mov	r0, r7
 80131da:	f7ff ff6e 	bl	80130ba <__ssputs_r>
 80131de:	3001      	adds	r0, #1
 80131e0:	f000 80aa 	beq.w	8013338 <_svfiprintf_r+0x1c8>
 80131e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80131e6:	445a      	add	r2, fp
 80131e8:	9209      	str	r2, [sp, #36]	; 0x24
 80131ea:	f89a 3000 	ldrb.w	r3, [sl]
 80131ee:	2b00      	cmp	r3, #0
 80131f0:	f000 80a2 	beq.w	8013338 <_svfiprintf_r+0x1c8>
 80131f4:	2300      	movs	r3, #0
 80131f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80131fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80131fe:	f10a 0a01 	add.w	sl, sl, #1
 8013202:	9304      	str	r3, [sp, #16]
 8013204:	9307      	str	r3, [sp, #28]
 8013206:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801320a:	931a      	str	r3, [sp, #104]	; 0x68
 801320c:	4654      	mov	r4, sl
 801320e:	2205      	movs	r2, #5
 8013210:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013214:	4851      	ldr	r0, [pc, #324]	; (801335c <_svfiprintf_r+0x1ec>)
 8013216:	f7ec ffe3 	bl	80001e0 <memchr>
 801321a:	9a04      	ldr	r2, [sp, #16]
 801321c:	b9d8      	cbnz	r0, 8013256 <_svfiprintf_r+0xe6>
 801321e:	06d0      	lsls	r0, r2, #27
 8013220:	bf44      	itt	mi
 8013222:	2320      	movmi	r3, #32
 8013224:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013228:	0711      	lsls	r1, r2, #28
 801322a:	bf44      	itt	mi
 801322c:	232b      	movmi	r3, #43	; 0x2b
 801322e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013232:	f89a 3000 	ldrb.w	r3, [sl]
 8013236:	2b2a      	cmp	r3, #42	; 0x2a
 8013238:	d015      	beq.n	8013266 <_svfiprintf_r+0xf6>
 801323a:	9a07      	ldr	r2, [sp, #28]
 801323c:	4654      	mov	r4, sl
 801323e:	2000      	movs	r0, #0
 8013240:	f04f 0c0a 	mov.w	ip, #10
 8013244:	4621      	mov	r1, r4
 8013246:	f811 3b01 	ldrb.w	r3, [r1], #1
 801324a:	3b30      	subs	r3, #48	; 0x30
 801324c:	2b09      	cmp	r3, #9
 801324e:	d94e      	bls.n	80132ee <_svfiprintf_r+0x17e>
 8013250:	b1b0      	cbz	r0, 8013280 <_svfiprintf_r+0x110>
 8013252:	9207      	str	r2, [sp, #28]
 8013254:	e014      	b.n	8013280 <_svfiprintf_r+0x110>
 8013256:	eba0 0308 	sub.w	r3, r0, r8
 801325a:	fa09 f303 	lsl.w	r3, r9, r3
 801325e:	4313      	orrs	r3, r2
 8013260:	9304      	str	r3, [sp, #16]
 8013262:	46a2      	mov	sl, r4
 8013264:	e7d2      	b.n	801320c <_svfiprintf_r+0x9c>
 8013266:	9b03      	ldr	r3, [sp, #12]
 8013268:	1d19      	adds	r1, r3, #4
 801326a:	681b      	ldr	r3, [r3, #0]
 801326c:	9103      	str	r1, [sp, #12]
 801326e:	2b00      	cmp	r3, #0
 8013270:	bfbb      	ittet	lt
 8013272:	425b      	neglt	r3, r3
 8013274:	f042 0202 	orrlt.w	r2, r2, #2
 8013278:	9307      	strge	r3, [sp, #28]
 801327a:	9307      	strlt	r3, [sp, #28]
 801327c:	bfb8      	it	lt
 801327e:	9204      	strlt	r2, [sp, #16]
 8013280:	7823      	ldrb	r3, [r4, #0]
 8013282:	2b2e      	cmp	r3, #46	; 0x2e
 8013284:	d10c      	bne.n	80132a0 <_svfiprintf_r+0x130>
 8013286:	7863      	ldrb	r3, [r4, #1]
 8013288:	2b2a      	cmp	r3, #42	; 0x2a
 801328a:	d135      	bne.n	80132f8 <_svfiprintf_r+0x188>
 801328c:	9b03      	ldr	r3, [sp, #12]
 801328e:	1d1a      	adds	r2, r3, #4
 8013290:	681b      	ldr	r3, [r3, #0]
 8013292:	9203      	str	r2, [sp, #12]
 8013294:	2b00      	cmp	r3, #0
 8013296:	bfb8      	it	lt
 8013298:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801329c:	3402      	adds	r4, #2
 801329e:	9305      	str	r3, [sp, #20]
 80132a0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801336c <_svfiprintf_r+0x1fc>
 80132a4:	7821      	ldrb	r1, [r4, #0]
 80132a6:	2203      	movs	r2, #3
 80132a8:	4650      	mov	r0, sl
 80132aa:	f7ec ff99 	bl	80001e0 <memchr>
 80132ae:	b140      	cbz	r0, 80132c2 <_svfiprintf_r+0x152>
 80132b0:	2340      	movs	r3, #64	; 0x40
 80132b2:	eba0 000a 	sub.w	r0, r0, sl
 80132b6:	fa03 f000 	lsl.w	r0, r3, r0
 80132ba:	9b04      	ldr	r3, [sp, #16]
 80132bc:	4303      	orrs	r3, r0
 80132be:	3401      	adds	r4, #1
 80132c0:	9304      	str	r3, [sp, #16]
 80132c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80132c6:	4826      	ldr	r0, [pc, #152]	; (8013360 <_svfiprintf_r+0x1f0>)
 80132c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80132cc:	2206      	movs	r2, #6
 80132ce:	f7ec ff87 	bl	80001e0 <memchr>
 80132d2:	2800      	cmp	r0, #0
 80132d4:	d038      	beq.n	8013348 <_svfiprintf_r+0x1d8>
 80132d6:	4b23      	ldr	r3, [pc, #140]	; (8013364 <_svfiprintf_r+0x1f4>)
 80132d8:	bb1b      	cbnz	r3, 8013322 <_svfiprintf_r+0x1b2>
 80132da:	9b03      	ldr	r3, [sp, #12]
 80132dc:	3307      	adds	r3, #7
 80132de:	f023 0307 	bic.w	r3, r3, #7
 80132e2:	3308      	adds	r3, #8
 80132e4:	9303      	str	r3, [sp, #12]
 80132e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80132e8:	4433      	add	r3, r6
 80132ea:	9309      	str	r3, [sp, #36]	; 0x24
 80132ec:	e767      	b.n	80131be <_svfiprintf_r+0x4e>
 80132ee:	fb0c 3202 	mla	r2, ip, r2, r3
 80132f2:	460c      	mov	r4, r1
 80132f4:	2001      	movs	r0, #1
 80132f6:	e7a5      	b.n	8013244 <_svfiprintf_r+0xd4>
 80132f8:	2300      	movs	r3, #0
 80132fa:	3401      	adds	r4, #1
 80132fc:	9305      	str	r3, [sp, #20]
 80132fe:	4619      	mov	r1, r3
 8013300:	f04f 0c0a 	mov.w	ip, #10
 8013304:	4620      	mov	r0, r4
 8013306:	f810 2b01 	ldrb.w	r2, [r0], #1
 801330a:	3a30      	subs	r2, #48	; 0x30
 801330c:	2a09      	cmp	r2, #9
 801330e:	d903      	bls.n	8013318 <_svfiprintf_r+0x1a8>
 8013310:	2b00      	cmp	r3, #0
 8013312:	d0c5      	beq.n	80132a0 <_svfiprintf_r+0x130>
 8013314:	9105      	str	r1, [sp, #20]
 8013316:	e7c3      	b.n	80132a0 <_svfiprintf_r+0x130>
 8013318:	fb0c 2101 	mla	r1, ip, r1, r2
 801331c:	4604      	mov	r4, r0
 801331e:	2301      	movs	r3, #1
 8013320:	e7f0      	b.n	8013304 <_svfiprintf_r+0x194>
 8013322:	ab03      	add	r3, sp, #12
 8013324:	9300      	str	r3, [sp, #0]
 8013326:	462a      	mov	r2, r5
 8013328:	4b0f      	ldr	r3, [pc, #60]	; (8013368 <_svfiprintf_r+0x1f8>)
 801332a:	a904      	add	r1, sp, #16
 801332c:	4638      	mov	r0, r7
 801332e:	f7fc fccd 	bl	800fccc <_printf_float>
 8013332:	1c42      	adds	r2, r0, #1
 8013334:	4606      	mov	r6, r0
 8013336:	d1d6      	bne.n	80132e6 <_svfiprintf_r+0x176>
 8013338:	89ab      	ldrh	r3, [r5, #12]
 801333a:	065b      	lsls	r3, r3, #25
 801333c:	f53f af2c 	bmi.w	8013198 <_svfiprintf_r+0x28>
 8013340:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013342:	b01d      	add	sp, #116	; 0x74
 8013344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013348:	ab03      	add	r3, sp, #12
 801334a:	9300      	str	r3, [sp, #0]
 801334c:	462a      	mov	r2, r5
 801334e:	4b06      	ldr	r3, [pc, #24]	; (8013368 <_svfiprintf_r+0x1f8>)
 8013350:	a904      	add	r1, sp, #16
 8013352:	4638      	mov	r0, r7
 8013354:	f7fc ff5e 	bl	8010214 <_printf_i>
 8013358:	e7eb      	b.n	8013332 <_svfiprintf_r+0x1c2>
 801335a:	bf00      	nop
 801335c:	08015bd4 	.word	0x08015bd4
 8013360:	08015bde 	.word	0x08015bde
 8013364:	0800fccd 	.word	0x0800fccd
 8013368:	080130bb 	.word	0x080130bb
 801336c:	08015bda 	.word	0x08015bda

08013370 <nan>:
 8013370:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8013378 <nan+0x8>
 8013374:	4770      	bx	lr
 8013376:	bf00      	nop
 8013378:	00000000 	.word	0x00000000
 801337c:	7ff80000 	.word	0x7ff80000

08013380 <__sread>:
 8013380:	b510      	push	{r4, lr}
 8013382:	460c      	mov	r4, r1
 8013384:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013388:	f000 fa50 	bl	801382c <_read_r>
 801338c:	2800      	cmp	r0, #0
 801338e:	bfab      	itete	ge
 8013390:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013392:	89a3      	ldrhlt	r3, [r4, #12]
 8013394:	181b      	addge	r3, r3, r0
 8013396:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801339a:	bfac      	ite	ge
 801339c:	6563      	strge	r3, [r4, #84]	; 0x54
 801339e:	81a3      	strhlt	r3, [r4, #12]
 80133a0:	bd10      	pop	{r4, pc}

080133a2 <__swrite>:
 80133a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80133a6:	461f      	mov	r7, r3
 80133a8:	898b      	ldrh	r3, [r1, #12]
 80133aa:	05db      	lsls	r3, r3, #23
 80133ac:	4605      	mov	r5, r0
 80133ae:	460c      	mov	r4, r1
 80133b0:	4616      	mov	r6, r2
 80133b2:	d505      	bpl.n	80133c0 <__swrite+0x1e>
 80133b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80133b8:	2302      	movs	r3, #2
 80133ba:	2200      	movs	r2, #0
 80133bc:	f000 f882 	bl	80134c4 <_lseek_r>
 80133c0:	89a3      	ldrh	r3, [r4, #12]
 80133c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80133c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80133ca:	81a3      	strh	r3, [r4, #12]
 80133cc:	4632      	mov	r2, r6
 80133ce:	463b      	mov	r3, r7
 80133d0:	4628      	mov	r0, r5
 80133d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80133d6:	f000 b823 	b.w	8013420 <_write_r>

080133da <__sseek>:
 80133da:	b510      	push	{r4, lr}
 80133dc:	460c      	mov	r4, r1
 80133de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80133e2:	f000 f86f 	bl	80134c4 <_lseek_r>
 80133e6:	1c43      	adds	r3, r0, #1
 80133e8:	89a3      	ldrh	r3, [r4, #12]
 80133ea:	bf15      	itete	ne
 80133ec:	6560      	strne	r0, [r4, #84]	; 0x54
 80133ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80133f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80133f6:	81a3      	strheq	r3, [r4, #12]
 80133f8:	bf18      	it	ne
 80133fa:	81a3      	strhne	r3, [r4, #12]
 80133fc:	bd10      	pop	{r4, pc}

080133fe <__sclose>:
 80133fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013402:	f000 b83d 	b.w	8013480 <_close_r>

08013406 <__ascii_wctomb>:
 8013406:	b149      	cbz	r1, 801341c <__ascii_wctomb+0x16>
 8013408:	2aff      	cmp	r2, #255	; 0xff
 801340a:	bf85      	ittet	hi
 801340c:	238a      	movhi	r3, #138	; 0x8a
 801340e:	6003      	strhi	r3, [r0, #0]
 8013410:	700a      	strbls	r2, [r1, #0]
 8013412:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8013416:	bf98      	it	ls
 8013418:	2001      	movls	r0, #1
 801341a:	4770      	bx	lr
 801341c:	4608      	mov	r0, r1
 801341e:	4770      	bx	lr

08013420 <_write_r>:
 8013420:	b538      	push	{r3, r4, r5, lr}
 8013422:	4d07      	ldr	r5, [pc, #28]	; (8013440 <_write_r+0x20>)
 8013424:	4604      	mov	r4, r0
 8013426:	4608      	mov	r0, r1
 8013428:	4611      	mov	r1, r2
 801342a:	2200      	movs	r2, #0
 801342c:	602a      	str	r2, [r5, #0]
 801342e:	461a      	mov	r2, r3
 8013430:	f7f3 fbeb 	bl	8006c0a <_write>
 8013434:	1c43      	adds	r3, r0, #1
 8013436:	d102      	bne.n	801343e <_write_r+0x1e>
 8013438:	682b      	ldr	r3, [r5, #0]
 801343a:	b103      	cbz	r3, 801343e <_write_r+0x1e>
 801343c:	6023      	str	r3, [r4, #0]
 801343e:	bd38      	pop	{r3, r4, r5, pc}
 8013440:	200038ec 	.word	0x200038ec

08013444 <__assert_func>:
 8013444:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013446:	4614      	mov	r4, r2
 8013448:	461a      	mov	r2, r3
 801344a:	4b09      	ldr	r3, [pc, #36]	; (8013470 <__assert_func+0x2c>)
 801344c:	681b      	ldr	r3, [r3, #0]
 801344e:	4605      	mov	r5, r0
 8013450:	68d8      	ldr	r0, [r3, #12]
 8013452:	b14c      	cbz	r4, 8013468 <__assert_func+0x24>
 8013454:	4b07      	ldr	r3, [pc, #28]	; (8013474 <__assert_func+0x30>)
 8013456:	9100      	str	r1, [sp, #0]
 8013458:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801345c:	4906      	ldr	r1, [pc, #24]	; (8013478 <__assert_func+0x34>)
 801345e:	462b      	mov	r3, r5
 8013460:	f000 f81e 	bl	80134a0 <fiprintf>
 8013464:	f000 fab4 	bl	80139d0 <abort>
 8013468:	4b04      	ldr	r3, [pc, #16]	; (801347c <__assert_func+0x38>)
 801346a:	461c      	mov	r4, r3
 801346c:	e7f3      	b.n	8013456 <__assert_func+0x12>
 801346e:	bf00      	nop
 8013470:	20000260 	.word	0x20000260
 8013474:	08015be5 	.word	0x08015be5
 8013478:	08015bf2 	.word	0x08015bf2
 801347c:	08015c20 	.word	0x08015c20

08013480 <_close_r>:
 8013480:	b538      	push	{r3, r4, r5, lr}
 8013482:	4d06      	ldr	r5, [pc, #24]	; (801349c <_close_r+0x1c>)
 8013484:	2300      	movs	r3, #0
 8013486:	4604      	mov	r4, r0
 8013488:	4608      	mov	r0, r1
 801348a:	602b      	str	r3, [r5, #0]
 801348c:	f7f3 fbd9 	bl	8006c42 <_close>
 8013490:	1c43      	adds	r3, r0, #1
 8013492:	d102      	bne.n	801349a <_close_r+0x1a>
 8013494:	682b      	ldr	r3, [r5, #0]
 8013496:	b103      	cbz	r3, 801349a <_close_r+0x1a>
 8013498:	6023      	str	r3, [r4, #0]
 801349a:	bd38      	pop	{r3, r4, r5, pc}
 801349c:	200038ec 	.word	0x200038ec

080134a0 <fiprintf>:
 80134a0:	b40e      	push	{r1, r2, r3}
 80134a2:	b503      	push	{r0, r1, lr}
 80134a4:	4601      	mov	r1, r0
 80134a6:	ab03      	add	r3, sp, #12
 80134a8:	4805      	ldr	r0, [pc, #20]	; (80134c0 <fiprintf+0x20>)
 80134aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80134ae:	6800      	ldr	r0, [r0, #0]
 80134b0:	9301      	str	r3, [sp, #4]
 80134b2:	f000 f88b 	bl	80135cc <_vfiprintf_r>
 80134b6:	b002      	add	sp, #8
 80134b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80134bc:	b003      	add	sp, #12
 80134be:	4770      	bx	lr
 80134c0:	20000260 	.word	0x20000260

080134c4 <_lseek_r>:
 80134c4:	b538      	push	{r3, r4, r5, lr}
 80134c6:	4d07      	ldr	r5, [pc, #28]	; (80134e4 <_lseek_r+0x20>)
 80134c8:	4604      	mov	r4, r0
 80134ca:	4608      	mov	r0, r1
 80134cc:	4611      	mov	r1, r2
 80134ce:	2200      	movs	r2, #0
 80134d0:	602a      	str	r2, [r5, #0]
 80134d2:	461a      	mov	r2, r3
 80134d4:	f7f3 fbdc 	bl	8006c90 <_lseek>
 80134d8:	1c43      	adds	r3, r0, #1
 80134da:	d102      	bne.n	80134e2 <_lseek_r+0x1e>
 80134dc:	682b      	ldr	r3, [r5, #0]
 80134de:	b103      	cbz	r3, 80134e2 <_lseek_r+0x1e>
 80134e0:	6023      	str	r3, [r4, #0]
 80134e2:	bd38      	pop	{r3, r4, r5, pc}
 80134e4:	200038ec 	.word	0x200038ec

080134e8 <memmove>:
 80134e8:	4288      	cmp	r0, r1
 80134ea:	b510      	push	{r4, lr}
 80134ec:	eb01 0402 	add.w	r4, r1, r2
 80134f0:	d902      	bls.n	80134f8 <memmove+0x10>
 80134f2:	4284      	cmp	r4, r0
 80134f4:	4623      	mov	r3, r4
 80134f6:	d807      	bhi.n	8013508 <memmove+0x20>
 80134f8:	1e43      	subs	r3, r0, #1
 80134fa:	42a1      	cmp	r1, r4
 80134fc:	d008      	beq.n	8013510 <memmove+0x28>
 80134fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013502:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013506:	e7f8      	b.n	80134fa <memmove+0x12>
 8013508:	4402      	add	r2, r0
 801350a:	4601      	mov	r1, r0
 801350c:	428a      	cmp	r2, r1
 801350e:	d100      	bne.n	8013512 <memmove+0x2a>
 8013510:	bd10      	pop	{r4, pc}
 8013512:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013516:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801351a:	e7f7      	b.n	801350c <memmove+0x24>

0801351c <_realloc_r>:
 801351c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013520:	4680      	mov	r8, r0
 8013522:	4614      	mov	r4, r2
 8013524:	460e      	mov	r6, r1
 8013526:	b921      	cbnz	r1, 8013532 <_realloc_r+0x16>
 8013528:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801352c:	4611      	mov	r1, r2
 801352e:	f7fc bab9 	b.w	800faa4 <_malloc_r>
 8013532:	b92a      	cbnz	r2, 8013540 <_realloc_r+0x24>
 8013534:	f7fc fa4a 	bl	800f9cc <_free_r>
 8013538:	4625      	mov	r5, r4
 801353a:	4628      	mov	r0, r5
 801353c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013540:	f000 fc6a 	bl	8013e18 <_malloc_usable_size_r>
 8013544:	4284      	cmp	r4, r0
 8013546:	4607      	mov	r7, r0
 8013548:	d802      	bhi.n	8013550 <_realloc_r+0x34>
 801354a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801354e:	d812      	bhi.n	8013576 <_realloc_r+0x5a>
 8013550:	4621      	mov	r1, r4
 8013552:	4640      	mov	r0, r8
 8013554:	f7fc faa6 	bl	800faa4 <_malloc_r>
 8013558:	4605      	mov	r5, r0
 801355a:	2800      	cmp	r0, #0
 801355c:	d0ed      	beq.n	801353a <_realloc_r+0x1e>
 801355e:	42bc      	cmp	r4, r7
 8013560:	4622      	mov	r2, r4
 8013562:	4631      	mov	r1, r6
 8013564:	bf28      	it	cs
 8013566:	463a      	movcs	r2, r7
 8013568:	f7fc fa04 	bl	800f974 <memcpy>
 801356c:	4631      	mov	r1, r6
 801356e:	4640      	mov	r0, r8
 8013570:	f7fc fa2c 	bl	800f9cc <_free_r>
 8013574:	e7e1      	b.n	801353a <_realloc_r+0x1e>
 8013576:	4635      	mov	r5, r6
 8013578:	e7df      	b.n	801353a <_realloc_r+0x1e>

0801357a <__sfputc_r>:
 801357a:	6893      	ldr	r3, [r2, #8]
 801357c:	3b01      	subs	r3, #1
 801357e:	2b00      	cmp	r3, #0
 8013580:	b410      	push	{r4}
 8013582:	6093      	str	r3, [r2, #8]
 8013584:	da08      	bge.n	8013598 <__sfputc_r+0x1e>
 8013586:	6994      	ldr	r4, [r2, #24]
 8013588:	42a3      	cmp	r3, r4
 801358a:	db01      	blt.n	8013590 <__sfputc_r+0x16>
 801358c:	290a      	cmp	r1, #10
 801358e:	d103      	bne.n	8013598 <__sfputc_r+0x1e>
 8013590:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013594:	f000 b95c 	b.w	8013850 <__swbuf_r>
 8013598:	6813      	ldr	r3, [r2, #0]
 801359a:	1c58      	adds	r0, r3, #1
 801359c:	6010      	str	r0, [r2, #0]
 801359e:	7019      	strb	r1, [r3, #0]
 80135a0:	4608      	mov	r0, r1
 80135a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80135a6:	4770      	bx	lr

080135a8 <__sfputs_r>:
 80135a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80135aa:	4606      	mov	r6, r0
 80135ac:	460f      	mov	r7, r1
 80135ae:	4614      	mov	r4, r2
 80135b0:	18d5      	adds	r5, r2, r3
 80135b2:	42ac      	cmp	r4, r5
 80135b4:	d101      	bne.n	80135ba <__sfputs_r+0x12>
 80135b6:	2000      	movs	r0, #0
 80135b8:	e007      	b.n	80135ca <__sfputs_r+0x22>
 80135ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80135be:	463a      	mov	r2, r7
 80135c0:	4630      	mov	r0, r6
 80135c2:	f7ff ffda 	bl	801357a <__sfputc_r>
 80135c6:	1c43      	adds	r3, r0, #1
 80135c8:	d1f3      	bne.n	80135b2 <__sfputs_r+0xa>
 80135ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080135cc <_vfiprintf_r>:
 80135cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135d0:	460d      	mov	r5, r1
 80135d2:	b09d      	sub	sp, #116	; 0x74
 80135d4:	4614      	mov	r4, r2
 80135d6:	4698      	mov	r8, r3
 80135d8:	4606      	mov	r6, r0
 80135da:	b118      	cbz	r0, 80135e4 <_vfiprintf_r+0x18>
 80135dc:	6983      	ldr	r3, [r0, #24]
 80135de:	b90b      	cbnz	r3, 80135e4 <_vfiprintf_r+0x18>
 80135e0:	f000 fb18 	bl	8013c14 <__sinit>
 80135e4:	4b89      	ldr	r3, [pc, #548]	; (801380c <_vfiprintf_r+0x240>)
 80135e6:	429d      	cmp	r5, r3
 80135e8:	d11b      	bne.n	8013622 <_vfiprintf_r+0x56>
 80135ea:	6875      	ldr	r5, [r6, #4]
 80135ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80135ee:	07d9      	lsls	r1, r3, #31
 80135f0:	d405      	bmi.n	80135fe <_vfiprintf_r+0x32>
 80135f2:	89ab      	ldrh	r3, [r5, #12]
 80135f4:	059a      	lsls	r2, r3, #22
 80135f6:	d402      	bmi.n	80135fe <_vfiprintf_r+0x32>
 80135f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80135fa:	f7ff f87c 	bl	80126f6 <__retarget_lock_acquire_recursive>
 80135fe:	89ab      	ldrh	r3, [r5, #12]
 8013600:	071b      	lsls	r3, r3, #28
 8013602:	d501      	bpl.n	8013608 <_vfiprintf_r+0x3c>
 8013604:	692b      	ldr	r3, [r5, #16]
 8013606:	b9eb      	cbnz	r3, 8013644 <_vfiprintf_r+0x78>
 8013608:	4629      	mov	r1, r5
 801360a:	4630      	mov	r0, r6
 801360c:	f000 f972 	bl	80138f4 <__swsetup_r>
 8013610:	b1c0      	cbz	r0, 8013644 <_vfiprintf_r+0x78>
 8013612:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013614:	07dc      	lsls	r4, r3, #31
 8013616:	d50e      	bpl.n	8013636 <_vfiprintf_r+0x6a>
 8013618:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801361c:	b01d      	add	sp, #116	; 0x74
 801361e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013622:	4b7b      	ldr	r3, [pc, #492]	; (8013810 <_vfiprintf_r+0x244>)
 8013624:	429d      	cmp	r5, r3
 8013626:	d101      	bne.n	801362c <_vfiprintf_r+0x60>
 8013628:	68b5      	ldr	r5, [r6, #8]
 801362a:	e7df      	b.n	80135ec <_vfiprintf_r+0x20>
 801362c:	4b79      	ldr	r3, [pc, #484]	; (8013814 <_vfiprintf_r+0x248>)
 801362e:	429d      	cmp	r5, r3
 8013630:	bf08      	it	eq
 8013632:	68f5      	ldreq	r5, [r6, #12]
 8013634:	e7da      	b.n	80135ec <_vfiprintf_r+0x20>
 8013636:	89ab      	ldrh	r3, [r5, #12]
 8013638:	0598      	lsls	r0, r3, #22
 801363a:	d4ed      	bmi.n	8013618 <_vfiprintf_r+0x4c>
 801363c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801363e:	f7ff f85b 	bl	80126f8 <__retarget_lock_release_recursive>
 8013642:	e7e9      	b.n	8013618 <_vfiprintf_r+0x4c>
 8013644:	2300      	movs	r3, #0
 8013646:	9309      	str	r3, [sp, #36]	; 0x24
 8013648:	2320      	movs	r3, #32
 801364a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801364e:	f8cd 800c 	str.w	r8, [sp, #12]
 8013652:	2330      	movs	r3, #48	; 0x30
 8013654:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8013818 <_vfiprintf_r+0x24c>
 8013658:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801365c:	f04f 0901 	mov.w	r9, #1
 8013660:	4623      	mov	r3, r4
 8013662:	469a      	mov	sl, r3
 8013664:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013668:	b10a      	cbz	r2, 801366e <_vfiprintf_r+0xa2>
 801366a:	2a25      	cmp	r2, #37	; 0x25
 801366c:	d1f9      	bne.n	8013662 <_vfiprintf_r+0x96>
 801366e:	ebba 0b04 	subs.w	fp, sl, r4
 8013672:	d00b      	beq.n	801368c <_vfiprintf_r+0xc0>
 8013674:	465b      	mov	r3, fp
 8013676:	4622      	mov	r2, r4
 8013678:	4629      	mov	r1, r5
 801367a:	4630      	mov	r0, r6
 801367c:	f7ff ff94 	bl	80135a8 <__sfputs_r>
 8013680:	3001      	adds	r0, #1
 8013682:	f000 80aa 	beq.w	80137da <_vfiprintf_r+0x20e>
 8013686:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013688:	445a      	add	r2, fp
 801368a:	9209      	str	r2, [sp, #36]	; 0x24
 801368c:	f89a 3000 	ldrb.w	r3, [sl]
 8013690:	2b00      	cmp	r3, #0
 8013692:	f000 80a2 	beq.w	80137da <_vfiprintf_r+0x20e>
 8013696:	2300      	movs	r3, #0
 8013698:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801369c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80136a0:	f10a 0a01 	add.w	sl, sl, #1
 80136a4:	9304      	str	r3, [sp, #16]
 80136a6:	9307      	str	r3, [sp, #28]
 80136a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80136ac:	931a      	str	r3, [sp, #104]	; 0x68
 80136ae:	4654      	mov	r4, sl
 80136b0:	2205      	movs	r2, #5
 80136b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80136b6:	4858      	ldr	r0, [pc, #352]	; (8013818 <_vfiprintf_r+0x24c>)
 80136b8:	f7ec fd92 	bl	80001e0 <memchr>
 80136bc:	9a04      	ldr	r2, [sp, #16]
 80136be:	b9d8      	cbnz	r0, 80136f8 <_vfiprintf_r+0x12c>
 80136c0:	06d1      	lsls	r1, r2, #27
 80136c2:	bf44      	itt	mi
 80136c4:	2320      	movmi	r3, #32
 80136c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80136ca:	0713      	lsls	r3, r2, #28
 80136cc:	bf44      	itt	mi
 80136ce:	232b      	movmi	r3, #43	; 0x2b
 80136d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80136d4:	f89a 3000 	ldrb.w	r3, [sl]
 80136d8:	2b2a      	cmp	r3, #42	; 0x2a
 80136da:	d015      	beq.n	8013708 <_vfiprintf_r+0x13c>
 80136dc:	9a07      	ldr	r2, [sp, #28]
 80136de:	4654      	mov	r4, sl
 80136e0:	2000      	movs	r0, #0
 80136e2:	f04f 0c0a 	mov.w	ip, #10
 80136e6:	4621      	mov	r1, r4
 80136e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80136ec:	3b30      	subs	r3, #48	; 0x30
 80136ee:	2b09      	cmp	r3, #9
 80136f0:	d94e      	bls.n	8013790 <_vfiprintf_r+0x1c4>
 80136f2:	b1b0      	cbz	r0, 8013722 <_vfiprintf_r+0x156>
 80136f4:	9207      	str	r2, [sp, #28]
 80136f6:	e014      	b.n	8013722 <_vfiprintf_r+0x156>
 80136f8:	eba0 0308 	sub.w	r3, r0, r8
 80136fc:	fa09 f303 	lsl.w	r3, r9, r3
 8013700:	4313      	orrs	r3, r2
 8013702:	9304      	str	r3, [sp, #16]
 8013704:	46a2      	mov	sl, r4
 8013706:	e7d2      	b.n	80136ae <_vfiprintf_r+0xe2>
 8013708:	9b03      	ldr	r3, [sp, #12]
 801370a:	1d19      	adds	r1, r3, #4
 801370c:	681b      	ldr	r3, [r3, #0]
 801370e:	9103      	str	r1, [sp, #12]
 8013710:	2b00      	cmp	r3, #0
 8013712:	bfbb      	ittet	lt
 8013714:	425b      	neglt	r3, r3
 8013716:	f042 0202 	orrlt.w	r2, r2, #2
 801371a:	9307      	strge	r3, [sp, #28]
 801371c:	9307      	strlt	r3, [sp, #28]
 801371e:	bfb8      	it	lt
 8013720:	9204      	strlt	r2, [sp, #16]
 8013722:	7823      	ldrb	r3, [r4, #0]
 8013724:	2b2e      	cmp	r3, #46	; 0x2e
 8013726:	d10c      	bne.n	8013742 <_vfiprintf_r+0x176>
 8013728:	7863      	ldrb	r3, [r4, #1]
 801372a:	2b2a      	cmp	r3, #42	; 0x2a
 801372c:	d135      	bne.n	801379a <_vfiprintf_r+0x1ce>
 801372e:	9b03      	ldr	r3, [sp, #12]
 8013730:	1d1a      	adds	r2, r3, #4
 8013732:	681b      	ldr	r3, [r3, #0]
 8013734:	9203      	str	r2, [sp, #12]
 8013736:	2b00      	cmp	r3, #0
 8013738:	bfb8      	it	lt
 801373a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801373e:	3402      	adds	r4, #2
 8013740:	9305      	str	r3, [sp, #20]
 8013742:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8013828 <_vfiprintf_r+0x25c>
 8013746:	7821      	ldrb	r1, [r4, #0]
 8013748:	2203      	movs	r2, #3
 801374a:	4650      	mov	r0, sl
 801374c:	f7ec fd48 	bl	80001e0 <memchr>
 8013750:	b140      	cbz	r0, 8013764 <_vfiprintf_r+0x198>
 8013752:	2340      	movs	r3, #64	; 0x40
 8013754:	eba0 000a 	sub.w	r0, r0, sl
 8013758:	fa03 f000 	lsl.w	r0, r3, r0
 801375c:	9b04      	ldr	r3, [sp, #16]
 801375e:	4303      	orrs	r3, r0
 8013760:	3401      	adds	r4, #1
 8013762:	9304      	str	r3, [sp, #16]
 8013764:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013768:	482c      	ldr	r0, [pc, #176]	; (801381c <_vfiprintf_r+0x250>)
 801376a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801376e:	2206      	movs	r2, #6
 8013770:	f7ec fd36 	bl	80001e0 <memchr>
 8013774:	2800      	cmp	r0, #0
 8013776:	d03f      	beq.n	80137f8 <_vfiprintf_r+0x22c>
 8013778:	4b29      	ldr	r3, [pc, #164]	; (8013820 <_vfiprintf_r+0x254>)
 801377a:	bb1b      	cbnz	r3, 80137c4 <_vfiprintf_r+0x1f8>
 801377c:	9b03      	ldr	r3, [sp, #12]
 801377e:	3307      	adds	r3, #7
 8013780:	f023 0307 	bic.w	r3, r3, #7
 8013784:	3308      	adds	r3, #8
 8013786:	9303      	str	r3, [sp, #12]
 8013788:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801378a:	443b      	add	r3, r7
 801378c:	9309      	str	r3, [sp, #36]	; 0x24
 801378e:	e767      	b.n	8013660 <_vfiprintf_r+0x94>
 8013790:	fb0c 3202 	mla	r2, ip, r2, r3
 8013794:	460c      	mov	r4, r1
 8013796:	2001      	movs	r0, #1
 8013798:	e7a5      	b.n	80136e6 <_vfiprintf_r+0x11a>
 801379a:	2300      	movs	r3, #0
 801379c:	3401      	adds	r4, #1
 801379e:	9305      	str	r3, [sp, #20]
 80137a0:	4619      	mov	r1, r3
 80137a2:	f04f 0c0a 	mov.w	ip, #10
 80137a6:	4620      	mov	r0, r4
 80137a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80137ac:	3a30      	subs	r2, #48	; 0x30
 80137ae:	2a09      	cmp	r2, #9
 80137b0:	d903      	bls.n	80137ba <_vfiprintf_r+0x1ee>
 80137b2:	2b00      	cmp	r3, #0
 80137b4:	d0c5      	beq.n	8013742 <_vfiprintf_r+0x176>
 80137b6:	9105      	str	r1, [sp, #20]
 80137b8:	e7c3      	b.n	8013742 <_vfiprintf_r+0x176>
 80137ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80137be:	4604      	mov	r4, r0
 80137c0:	2301      	movs	r3, #1
 80137c2:	e7f0      	b.n	80137a6 <_vfiprintf_r+0x1da>
 80137c4:	ab03      	add	r3, sp, #12
 80137c6:	9300      	str	r3, [sp, #0]
 80137c8:	462a      	mov	r2, r5
 80137ca:	4b16      	ldr	r3, [pc, #88]	; (8013824 <_vfiprintf_r+0x258>)
 80137cc:	a904      	add	r1, sp, #16
 80137ce:	4630      	mov	r0, r6
 80137d0:	f7fc fa7c 	bl	800fccc <_printf_float>
 80137d4:	4607      	mov	r7, r0
 80137d6:	1c78      	adds	r0, r7, #1
 80137d8:	d1d6      	bne.n	8013788 <_vfiprintf_r+0x1bc>
 80137da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80137dc:	07d9      	lsls	r1, r3, #31
 80137de:	d405      	bmi.n	80137ec <_vfiprintf_r+0x220>
 80137e0:	89ab      	ldrh	r3, [r5, #12]
 80137e2:	059a      	lsls	r2, r3, #22
 80137e4:	d402      	bmi.n	80137ec <_vfiprintf_r+0x220>
 80137e6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80137e8:	f7fe ff86 	bl	80126f8 <__retarget_lock_release_recursive>
 80137ec:	89ab      	ldrh	r3, [r5, #12]
 80137ee:	065b      	lsls	r3, r3, #25
 80137f0:	f53f af12 	bmi.w	8013618 <_vfiprintf_r+0x4c>
 80137f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80137f6:	e711      	b.n	801361c <_vfiprintf_r+0x50>
 80137f8:	ab03      	add	r3, sp, #12
 80137fa:	9300      	str	r3, [sp, #0]
 80137fc:	462a      	mov	r2, r5
 80137fe:	4b09      	ldr	r3, [pc, #36]	; (8013824 <_vfiprintf_r+0x258>)
 8013800:	a904      	add	r1, sp, #16
 8013802:	4630      	mov	r0, r6
 8013804:	f7fc fd06 	bl	8010214 <_printf_i>
 8013808:	e7e4      	b.n	80137d4 <_vfiprintf_r+0x208>
 801380a:	bf00      	nop
 801380c:	08015c44 	.word	0x08015c44
 8013810:	08015c64 	.word	0x08015c64
 8013814:	08015c24 	.word	0x08015c24
 8013818:	08015bd4 	.word	0x08015bd4
 801381c:	08015bde 	.word	0x08015bde
 8013820:	0800fccd 	.word	0x0800fccd
 8013824:	080135a9 	.word	0x080135a9
 8013828:	08015bda 	.word	0x08015bda

0801382c <_read_r>:
 801382c:	b538      	push	{r3, r4, r5, lr}
 801382e:	4d07      	ldr	r5, [pc, #28]	; (801384c <_read_r+0x20>)
 8013830:	4604      	mov	r4, r0
 8013832:	4608      	mov	r0, r1
 8013834:	4611      	mov	r1, r2
 8013836:	2200      	movs	r2, #0
 8013838:	602a      	str	r2, [r5, #0]
 801383a:	461a      	mov	r2, r3
 801383c:	f7f3 f9c8 	bl	8006bd0 <_read>
 8013840:	1c43      	adds	r3, r0, #1
 8013842:	d102      	bne.n	801384a <_read_r+0x1e>
 8013844:	682b      	ldr	r3, [r5, #0]
 8013846:	b103      	cbz	r3, 801384a <_read_r+0x1e>
 8013848:	6023      	str	r3, [r4, #0]
 801384a:	bd38      	pop	{r3, r4, r5, pc}
 801384c:	200038ec 	.word	0x200038ec

08013850 <__swbuf_r>:
 8013850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013852:	460e      	mov	r6, r1
 8013854:	4614      	mov	r4, r2
 8013856:	4605      	mov	r5, r0
 8013858:	b118      	cbz	r0, 8013862 <__swbuf_r+0x12>
 801385a:	6983      	ldr	r3, [r0, #24]
 801385c:	b90b      	cbnz	r3, 8013862 <__swbuf_r+0x12>
 801385e:	f000 f9d9 	bl	8013c14 <__sinit>
 8013862:	4b21      	ldr	r3, [pc, #132]	; (80138e8 <__swbuf_r+0x98>)
 8013864:	429c      	cmp	r4, r3
 8013866:	d12b      	bne.n	80138c0 <__swbuf_r+0x70>
 8013868:	686c      	ldr	r4, [r5, #4]
 801386a:	69a3      	ldr	r3, [r4, #24]
 801386c:	60a3      	str	r3, [r4, #8]
 801386e:	89a3      	ldrh	r3, [r4, #12]
 8013870:	071a      	lsls	r2, r3, #28
 8013872:	d52f      	bpl.n	80138d4 <__swbuf_r+0x84>
 8013874:	6923      	ldr	r3, [r4, #16]
 8013876:	b36b      	cbz	r3, 80138d4 <__swbuf_r+0x84>
 8013878:	6923      	ldr	r3, [r4, #16]
 801387a:	6820      	ldr	r0, [r4, #0]
 801387c:	1ac0      	subs	r0, r0, r3
 801387e:	6963      	ldr	r3, [r4, #20]
 8013880:	b2f6      	uxtb	r6, r6
 8013882:	4283      	cmp	r3, r0
 8013884:	4637      	mov	r7, r6
 8013886:	dc04      	bgt.n	8013892 <__swbuf_r+0x42>
 8013888:	4621      	mov	r1, r4
 801388a:	4628      	mov	r0, r5
 801388c:	f000 f92e 	bl	8013aec <_fflush_r>
 8013890:	bb30      	cbnz	r0, 80138e0 <__swbuf_r+0x90>
 8013892:	68a3      	ldr	r3, [r4, #8]
 8013894:	3b01      	subs	r3, #1
 8013896:	60a3      	str	r3, [r4, #8]
 8013898:	6823      	ldr	r3, [r4, #0]
 801389a:	1c5a      	adds	r2, r3, #1
 801389c:	6022      	str	r2, [r4, #0]
 801389e:	701e      	strb	r6, [r3, #0]
 80138a0:	6963      	ldr	r3, [r4, #20]
 80138a2:	3001      	adds	r0, #1
 80138a4:	4283      	cmp	r3, r0
 80138a6:	d004      	beq.n	80138b2 <__swbuf_r+0x62>
 80138a8:	89a3      	ldrh	r3, [r4, #12]
 80138aa:	07db      	lsls	r3, r3, #31
 80138ac:	d506      	bpl.n	80138bc <__swbuf_r+0x6c>
 80138ae:	2e0a      	cmp	r6, #10
 80138b0:	d104      	bne.n	80138bc <__swbuf_r+0x6c>
 80138b2:	4621      	mov	r1, r4
 80138b4:	4628      	mov	r0, r5
 80138b6:	f000 f919 	bl	8013aec <_fflush_r>
 80138ba:	b988      	cbnz	r0, 80138e0 <__swbuf_r+0x90>
 80138bc:	4638      	mov	r0, r7
 80138be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80138c0:	4b0a      	ldr	r3, [pc, #40]	; (80138ec <__swbuf_r+0x9c>)
 80138c2:	429c      	cmp	r4, r3
 80138c4:	d101      	bne.n	80138ca <__swbuf_r+0x7a>
 80138c6:	68ac      	ldr	r4, [r5, #8]
 80138c8:	e7cf      	b.n	801386a <__swbuf_r+0x1a>
 80138ca:	4b09      	ldr	r3, [pc, #36]	; (80138f0 <__swbuf_r+0xa0>)
 80138cc:	429c      	cmp	r4, r3
 80138ce:	bf08      	it	eq
 80138d0:	68ec      	ldreq	r4, [r5, #12]
 80138d2:	e7ca      	b.n	801386a <__swbuf_r+0x1a>
 80138d4:	4621      	mov	r1, r4
 80138d6:	4628      	mov	r0, r5
 80138d8:	f000 f80c 	bl	80138f4 <__swsetup_r>
 80138dc:	2800      	cmp	r0, #0
 80138de:	d0cb      	beq.n	8013878 <__swbuf_r+0x28>
 80138e0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80138e4:	e7ea      	b.n	80138bc <__swbuf_r+0x6c>
 80138e6:	bf00      	nop
 80138e8:	08015c44 	.word	0x08015c44
 80138ec:	08015c64 	.word	0x08015c64
 80138f0:	08015c24 	.word	0x08015c24

080138f4 <__swsetup_r>:
 80138f4:	4b32      	ldr	r3, [pc, #200]	; (80139c0 <__swsetup_r+0xcc>)
 80138f6:	b570      	push	{r4, r5, r6, lr}
 80138f8:	681d      	ldr	r5, [r3, #0]
 80138fa:	4606      	mov	r6, r0
 80138fc:	460c      	mov	r4, r1
 80138fe:	b125      	cbz	r5, 801390a <__swsetup_r+0x16>
 8013900:	69ab      	ldr	r3, [r5, #24]
 8013902:	b913      	cbnz	r3, 801390a <__swsetup_r+0x16>
 8013904:	4628      	mov	r0, r5
 8013906:	f000 f985 	bl	8013c14 <__sinit>
 801390a:	4b2e      	ldr	r3, [pc, #184]	; (80139c4 <__swsetup_r+0xd0>)
 801390c:	429c      	cmp	r4, r3
 801390e:	d10f      	bne.n	8013930 <__swsetup_r+0x3c>
 8013910:	686c      	ldr	r4, [r5, #4]
 8013912:	89a3      	ldrh	r3, [r4, #12]
 8013914:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013918:	0719      	lsls	r1, r3, #28
 801391a:	d42c      	bmi.n	8013976 <__swsetup_r+0x82>
 801391c:	06dd      	lsls	r5, r3, #27
 801391e:	d411      	bmi.n	8013944 <__swsetup_r+0x50>
 8013920:	2309      	movs	r3, #9
 8013922:	6033      	str	r3, [r6, #0]
 8013924:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013928:	81a3      	strh	r3, [r4, #12]
 801392a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801392e:	e03e      	b.n	80139ae <__swsetup_r+0xba>
 8013930:	4b25      	ldr	r3, [pc, #148]	; (80139c8 <__swsetup_r+0xd4>)
 8013932:	429c      	cmp	r4, r3
 8013934:	d101      	bne.n	801393a <__swsetup_r+0x46>
 8013936:	68ac      	ldr	r4, [r5, #8]
 8013938:	e7eb      	b.n	8013912 <__swsetup_r+0x1e>
 801393a:	4b24      	ldr	r3, [pc, #144]	; (80139cc <__swsetup_r+0xd8>)
 801393c:	429c      	cmp	r4, r3
 801393e:	bf08      	it	eq
 8013940:	68ec      	ldreq	r4, [r5, #12]
 8013942:	e7e6      	b.n	8013912 <__swsetup_r+0x1e>
 8013944:	0758      	lsls	r0, r3, #29
 8013946:	d512      	bpl.n	801396e <__swsetup_r+0x7a>
 8013948:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801394a:	b141      	cbz	r1, 801395e <__swsetup_r+0x6a>
 801394c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013950:	4299      	cmp	r1, r3
 8013952:	d002      	beq.n	801395a <__swsetup_r+0x66>
 8013954:	4630      	mov	r0, r6
 8013956:	f7fc f839 	bl	800f9cc <_free_r>
 801395a:	2300      	movs	r3, #0
 801395c:	6363      	str	r3, [r4, #52]	; 0x34
 801395e:	89a3      	ldrh	r3, [r4, #12]
 8013960:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013964:	81a3      	strh	r3, [r4, #12]
 8013966:	2300      	movs	r3, #0
 8013968:	6063      	str	r3, [r4, #4]
 801396a:	6923      	ldr	r3, [r4, #16]
 801396c:	6023      	str	r3, [r4, #0]
 801396e:	89a3      	ldrh	r3, [r4, #12]
 8013970:	f043 0308 	orr.w	r3, r3, #8
 8013974:	81a3      	strh	r3, [r4, #12]
 8013976:	6923      	ldr	r3, [r4, #16]
 8013978:	b94b      	cbnz	r3, 801398e <__swsetup_r+0x9a>
 801397a:	89a3      	ldrh	r3, [r4, #12]
 801397c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013980:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013984:	d003      	beq.n	801398e <__swsetup_r+0x9a>
 8013986:	4621      	mov	r1, r4
 8013988:	4630      	mov	r0, r6
 801398a:	f000 fa05 	bl	8013d98 <__smakebuf_r>
 801398e:	89a0      	ldrh	r0, [r4, #12]
 8013990:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013994:	f010 0301 	ands.w	r3, r0, #1
 8013998:	d00a      	beq.n	80139b0 <__swsetup_r+0xbc>
 801399a:	2300      	movs	r3, #0
 801399c:	60a3      	str	r3, [r4, #8]
 801399e:	6963      	ldr	r3, [r4, #20]
 80139a0:	425b      	negs	r3, r3
 80139a2:	61a3      	str	r3, [r4, #24]
 80139a4:	6923      	ldr	r3, [r4, #16]
 80139a6:	b943      	cbnz	r3, 80139ba <__swsetup_r+0xc6>
 80139a8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80139ac:	d1ba      	bne.n	8013924 <__swsetup_r+0x30>
 80139ae:	bd70      	pop	{r4, r5, r6, pc}
 80139b0:	0781      	lsls	r1, r0, #30
 80139b2:	bf58      	it	pl
 80139b4:	6963      	ldrpl	r3, [r4, #20]
 80139b6:	60a3      	str	r3, [r4, #8]
 80139b8:	e7f4      	b.n	80139a4 <__swsetup_r+0xb0>
 80139ba:	2000      	movs	r0, #0
 80139bc:	e7f7      	b.n	80139ae <__swsetup_r+0xba>
 80139be:	bf00      	nop
 80139c0:	20000260 	.word	0x20000260
 80139c4:	08015c44 	.word	0x08015c44
 80139c8:	08015c64 	.word	0x08015c64
 80139cc:	08015c24 	.word	0x08015c24

080139d0 <abort>:
 80139d0:	b508      	push	{r3, lr}
 80139d2:	2006      	movs	r0, #6
 80139d4:	f000 fa50 	bl	8013e78 <raise>
 80139d8:	2001      	movs	r0, #1
 80139da:	f7f3 f8ef 	bl	8006bbc <_exit>
	...

080139e0 <__sflush_r>:
 80139e0:	898a      	ldrh	r2, [r1, #12]
 80139e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80139e6:	4605      	mov	r5, r0
 80139e8:	0710      	lsls	r0, r2, #28
 80139ea:	460c      	mov	r4, r1
 80139ec:	d458      	bmi.n	8013aa0 <__sflush_r+0xc0>
 80139ee:	684b      	ldr	r3, [r1, #4]
 80139f0:	2b00      	cmp	r3, #0
 80139f2:	dc05      	bgt.n	8013a00 <__sflush_r+0x20>
 80139f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80139f6:	2b00      	cmp	r3, #0
 80139f8:	dc02      	bgt.n	8013a00 <__sflush_r+0x20>
 80139fa:	2000      	movs	r0, #0
 80139fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013a02:	2e00      	cmp	r6, #0
 8013a04:	d0f9      	beq.n	80139fa <__sflush_r+0x1a>
 8013a06:	2300      	movs	r3, #0
 8013a08:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013a0c:	682f      	ldr	r7, [r5, #0]
 8013a0e:	602b      	str	r3, [r5, #0]
 8013a10:	d032      	beq.n	8013a78 <__sflush_r+0x98>
 8013a12:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013a14:	89a3      	ldrh	r3, [r4, #12]
 8013a16:	075a      	lsls	r2, r3, #29
 8013a18:	d505      	bpl.n	8013a26 <__sflush_r+0x46>
 8013a1a:	6863      	ldr	r3, [r4, #4]
 8013a1c:	1ac0      	subs	r0, r0, r3
 8013a1e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013a20:	b10b      	cbz	r3, 8013a26 <__sflush_r+0x46>
 8013a22:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013a24:	1ac0      	subs	r0, r0, r3
 8013a26:	2300      	movs	r3, #0
 8013a28:	4602      	mov	r2, r0
 8013a2a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013a2c:	6a21      	ldr	r1, [r4, #32]
 8013a2e:	4628      	mov	r0, r5
 8013a30:	47b0      	blx	r6
 8013a32:	1c43      	adds	r3, r0, #1
 8013a34:	89a3      	ldrh	r3, [r4, #12]
 8013a36:	d106      	bne.n	8013a46 <__sflush_r+0x66>
 8013a38:	6829      	ldr	r1, [r5, #0]
 8013a3a:	291d      	cmp	r1, #29
 8013a3c:	d82c      	bhi.n	8013a98 <__sflush_r+0xb8>
 8013a3e:	4a2a      	ldr	r2, [pc, #168]	; (8013ae8 <__sflush_r+0x108>)
 8013a40:	40ca      	lsrs	r2, r1
 8013a42:	07d6      	lsls	r6, r2, #31
 8013a44:	d528      	bpl.n	8013a98 <__sflush_r+0xb8>
 8013a46:	2200      	movs	r2, #0
 8013a48:	6062      	str	r2, [r4, #4]
 8013a4a:	04d9      	lsls	r1, r3, #19
 8013a4c:	6922      	ldr	r2, [r4, #16]
 8013a4e:	6022      	str	r2, [r4, #0]
 8013a50:	d504      	bpl.n	8013a5c <__sflush_r+0x7c>
 8013a52:	1c42      	adds	r2, r0, #1
 8013a54:	d101      	bne.n	8013a5a <__sflush_r+0x7a>
 8013a56:	682b      	ldr	r3, [r5, #0]
 8013a58:	b903      	cbnz	r3, 8013a5c <__sflush_r+0x7c>
 8013a5a:	6560      	str	r0, [r4, #84]	; 0x54
 8013a5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013a5e:	602f      	str	r7, [r5, #0]
 8013a60:	2900      	cmp	r1, #0
 8013a62:	d0ca      	beq.n	80139fa <__sflush_r+0x1a>
 8013a64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013a68:	4299      	cmp	r1, r3
 8013a6a:	d002      	beq.n	8013a72 <__sflush_r+0x92>
 8013a6c:	4628      	mov	r0, r5
 8013a6e:	f7fb ffad 	bl	800f9cc <_free_r>
 8013a72:	2000      	movs	r0, #0
 8013a74:	6360      	str	r0, [r4, #52]	; 0x34
 8013a76:	e7c1      	b.n	80139fc <__sflush_r+0x1c>
 8013a78:	6a21      	ldr	r1, [r4, #32]
 8013a7a:	2301      	movs	r3, #1
 8013a7c:	4628      	mov	r0, r5
 8013a7e:	47b0      	blx	r6
 8013a80:	1c41      	adds	r1, r0, #1
 8013a82:	d1c7      	bne.n	8013a14 <__sflush_r+0x34>
 8013a84:	682b      	ldr	r3, [r5, #0]
 8013a86:	2b00      	cmp	r3, #0
 8013a88:	d0c4      	beq.n	8013a14 <__sflush_r+0x34>
 8013a8a:	2b1d      	cmp	r3, #29
 8013a8c:	d001      	beq.n	8013a92 <__sflush_r+0xb2>
 8013a8e:	2b16      	cmp	r3, #22
 8013a90:	d101      	bne.n	8013a96 <__sflush_r+0xb6>
 8013a92:	602f      	str	r7, [r5, #0]
 8013a94:	e7b1      	b.n	80139fa <__sflush_r+0x1a>
 8013a96:	89a3      	ldrh	r3, [r4, #12]
 8013a98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013a9c:	81a3      	strh	r3, [r4, #12]
 8013a9e:	e7ad      	b.n	80139fc <__sflush_r+0x1c>
 8013aa0:	690f      	ldr	r7, [r1, #16]
 8013aa2:	2f00      	cmp	r7, #0
 8013aa4:	d0a9      	beq.n	80139fa <__sflush_r+0x1a>
 8013aa6:	0793      	lsls	r3, r2, #30
 8013aa8:	680e      	ldr	r6, [r1, #0]
 8013aaa:	bf08      	it	eq
 8013aac:	694b      	ldreq	r3, [r1, #20]
 8013aae:	600f      	str	r7, [r1, #0]
 8013ab0:	bf18      	it	ne
 8013ab2:	2300      	movne	r3, #0
 8013ab4:	eba6 0807 	sub.w	r8, r6, r7
 8013ab8:	608b      	str	r3, [r1, #8]
 8013aba:	f1b8 0f00 	cmp.w	r8, #0
 8013abe:	dd9c      	ble.n	80139fa <__sflush_r+0x1a>
 8013ac0:	6a21      	ldr	r1, [r4, #32]
 8013ac2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013ac4:	4643      	mov	r3, r8
 8013ac6:	463a      	mov	r2, r7
 8013ac8:	4628      	mov	r0, r5
 8013aca:	47b0      	blx	r6
 8013acc:	2800      	cmp	r0, #0
 8013ace:	dc06      	bgt.n	8013ade <__sflush_r+0xfe>
 8013ad0:	89a3      	ldrh	r3, [r4, #12]
 8013ad2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013ad6:	81a3      	strh	r3, [r4, #12]
 8013ad8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013adc:	e78e      	b.n	80139fc <__sflush_r+0x1c>
 8013ade:	4407      	add	r7, r0
 8013ae0:	eba8 0800 	sub.w	r8, r8, r0
 8013ae4:	e7e9      	b.n	8013aba <__sflush_r+0xda>
 8013ae6:	bf00      	nop
 8013ae8:	20400001 	.word	0x20400001

08013aec <_fflush_r>:
 8013aec:	b538      	push	{r3, r4, r5, lr}
 8013aee:	690b      	ldr	r3, [r1, #16]
 8013af0:	4605      	mov	r5, r0
 8013af2:	460c      	mov	r4, r1
 8013af4:	b913      	cbnz	r3, 8013afc <_fflush_r+0x10>
 8013af6:	2500      	movs	r5, #0
 8013af8:	4628      	mov	r0, r5
 8013afa:	bd38      	pop	{r3, r4, r5, pc}
 8013afc:	b118      	cbz	r0, 8013b06 <_fflush_r+0x1a>
 8013afe:	6983      	ldr	r3, [r0, #24]
 8013b00:	b90b      	cbnz	r3, 8013b06 <_fflush_r+0x1a>
 8013b02:	f000 f887 	bl	8013c14 <__sinit>
 8013b06:	4b14      	ldr	r3, [pc, #80]	; (8013b58 <_fflush_r+0x6c>)
 8013b08:	429c      	cmp	r4, r3
 8013b0a:	d11b      	bne.n	8013b44 <_fflush_r+0x58>
 8013b0c:	686c      	ldr	r4, [r5, #4]
 8013b0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013b12:	2b00      	cmp	r3, #0
 8013b14:	d0ef      	beq.n	8013af6 <_fflush_r+0xa>
 8013b16:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013b18:	07d0      	lsls	r0, r2, #31
 8013b1a:	d404      	bmi.n	8013b26 <_fflush_r+0x3a>
 8013b1c:	0599      	lsls	r1, r3, #22
 8013b1e:	d402      	bmi.n	8013b26 <_fflush_r+0x3a>
 8013b20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013b22:	f7fe fde8 	bl	80126f6 <__retarget_lock_acquire_recursive>
 8013b26:	4628      	mov	r0, r5
 8013b28:	4621      	mov	r1, r4
 8013b2a:	f7ff ff59 	bl	80139e0 <__sflush_r>
 8013b2e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013b30:	07da      	lsls	r2, r3, #31
 8013b32:	4605      	mov	r5, r0
 8013b34:	d4e0      	bmi.n	8013af8 <_fflush_r+0xc>
 8013b36:	89a3      	ldrh	r3, [r4, #12]
 8013b38:	059b      	lsls	r3, r3, #22
 8013b3a:	d4dd      	bmi.n	8013af8 <_fflush_r+0xc>
 8013b3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013b3e:	f7fe fddb 	bl	80126f8 <__retarget_lock_release_recursive>
 8013b42:	e7d9      	b.n	8013af8 <_fflush_r+0xc>
 8013b44:	4b05      	ldr	r3, [pc, #20]	; (8013b5c <_fflush_r+0x70>)
 8013b46:	429c      	cmp	r4, r3
 8013b48:	d101      	bne.n	8013b4e <_fflush_r+0x62>
 8013b4a:	68ac      	ldr	r4, [r5, #8]
 8013b4c:	e7df      	b.n	8013b0e <_fflush_r+0x22>
 8013b4e:	4b04      	ldr	r3, [pc, #16]	; (8013b60 <_fflush_r+0x74>)
 8013b50:	429c      	cmp	r4, r3
 8013b52:	bf08      	it	eq
 8013b54:	68ec      	ldreq	r4, [r5, #12]
 8013b56:	e7da      	b.n	8013b0e <_fflush_r+0x22>
 8013b58:	08015c44 	.word	0x08015c44
 8013b5c:	08015c64 	.word	0x08015c64
 8013b60:	08015c24 	.word	0x08015c24

08013b64 <std>:
 8013b64:	2300      	movs	r3, #0
 8013b66:	b510      	push	{r4, lr}
 8013b68:	4604      	mov	r4, r0
 8013b6a:	e9c0 3300 	strd	r3, r3, [r0]
 8013b6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013b72:	6083      	str	r3, [r0, #8]
 8013b74:	8181      	strh	r1, [r0, #12]
 8013b76:	6643      	str	r3, [r0, #100]	; 0x64
 8013b78:	81c2      	strh	r2, [r0, #14]
 8013b7a:	6183      	str	r3, [r0, #24]
 8013b7c:	4619      	mov	r1, r3
 8013b7e:	2208      	movs	r2, #8
 8013b80:	305c      	adds	r0, #92	; 0x5c
 8013b82:	f7fb ff05 	bl	800f990 <memset>
 8013b86:	4b05      	ldr	r3, [pc, #20]	; (8013b9c <std+0x38>)
 8013b88:	6263      	str	r3, [r4, #36]	; 0x24
 8013b8a:	4b05      	ldr	r3, [pc, #20]	; (8013ba0 <std+0x3c>)
 8013b8c:	62a3      	str	r3, [r4, #40]	; 0x28
 8013b8e:	4b05      	ldr	r3, [pc, #20]	; (8013ba4 <std+0x40>)
 8013b90:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013b92:	4b05      	ldr	r3, [pc, #20]	; (8013ba8 <std+0x44>)
 8013b94:	6224      	str	r4, [r4, #32]
 8013b96:	6323      	str	r3, [r4, #48]	; 0x30
 8013b98:	bd10      	pop	{r4, pc}
 8013b9a:	bf00      	nop
 8013b9c:	08013381 	.word	0x08013381
 8013ba0:	080133a3 	.word	0x080133a3
 8013ba4:	080133db 	.word	0x080133db
 8013ba8:	080133ff 	.word	0x080133ff

08013bac <_cleanup_r>:
 8013bac:	4901      	ldr	r1, [pc, #4]	; (8013bb4 <_cleanup_r+0x8>)
 8013bae:	f000 b8af 	b.w	8013d10 <_fwalk_reent>
 8013bb2:	bf00      	nop
 8013bb4:	08013aed 	.word	0x08013aed

08013bb8 <__sfmoreglue>:
 8013bb8:	b570      	push	{r4, r5, r6, lr}
 8013bba:	2268      	movs	r2, #104	; 0x68
 8013bbc:	1e4d      	subs	r5, r1, #1
 8013bbe:	4355      	muls	r5, r2
 8013bc0:	460e      	mov	r6, r1
 8013bc2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013bc6:	f7fb ff6d 	bl	800faa4 <_malloc_r>
 8013bca:	4604      	mov	r4, r0
 8013bcc:	b140      	cbz	r0, 8013be0 <__sfmoreglue+0x28>
 8013bce:	2100      	movs	r1, #0
 8013bd0:	e9c0 1600 	strd	r1, r6, [r0]
 8013bd4:	300c      	adds	r0, #12
 8013bd6:	60a0      	str	r0, [r4, #8]
 8013bd8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013bdc:	f7fb fed8 	bl	800f990 <memset>
 8013be0:	4620      	mov	r0, r4
 8013be2:	bd70      	pop	{r4, r5, r6, pc}

08013be4 <__sfp_lock_acquire>:
 8013be4:	4801      	ldr	r0, [pc, #4]	; (8013bec <__sfp_lock_acquire+0x8>)
 8013be6:	f7fe bd86 	b.w	80126f6 <__retarget_lock_acquire_recursive>
 8013bea:	bf00      	nop
 8013bec:	200038e9 	.word	0x200038e9

08013bf0 <__sfp_lock_release>:
 8013bf0:	4801      	ldr	r0, [pc, #4]	; (8013bf8 <__sfp_lock_release+0x8>)
 8013bf2:	f7fe bd81 	b.w	80126f8 <__retarget_lock_release_recursive>
 8013bf6:	bf00      	nop
 8013bf8:	200038e9 	.word	0x200038e9

08013bfc <__sinit_lock_acquire>:
 8013bfc:	4801      	ldr	r0, [pc, #4]	; (8013c04 <__sinit_lock_acquire+0x8>)
 8013bfe:	f7fe bd7a 	b.w	80126f6 <__retarget_lock_acquire_recursive>
 8013c02:	bf00      	nop
 8013c04:	200038ea 	.word	0x200038ea

08013c08 <__sinit_lock_release>:
 8013c08:	4801      	ldr	r0, [pc, #4]	; (8013c10 <__sinit_lock_release+0x8>)
 8013c0a:	f7fe bd75 	b.w	80126f8 <__retarget_lock_release_recursive>
 8013c0e:	bf00      	nop
 8013c10:	200038ea 	.word	0x200038ea

08013c14 <__sinit>:
 8013c14:	b510      	push	{r4, lr}
 8013c16:	4604      	mov	r4, r0
 8013c18:	f7ff fff0 	bl	8013bfc <__sinit_lock_acquire>
 8013c1c:	69a3      	ldr	r3, [r4, #24]
 8013c1e:	b11b      	cbz	r3, 8013c28 <__sinit+0x14>
 8013c20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013c24:	f7ff bff0 	b.w	8013c08 <__sinit_lock_release>
 8013c28:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8013c2c:	6523      	str	r3, [r4, #80]	; 0x50
 8013c2e:	4b13      	ldr	r3, [pc, #76]	; (8013c7c <__sinit+0x68>)
 8013c30:	4a13      	ldr	r2, [pc, #76]	; (8013c80 <__sinit+0x6c>)
 8013c32:	681b      	ldr	r3, [r3, #0]
 8013c34:	62a2      	str	r2, [r4, #40]	; 0x28
 8013c36:	42a3      	cmp	r3, r4
 8013c38:	bf04      	itt	eq
 8013c3a:	2301      	moveq	r3, #1
 8013c3c:	61a3      	streq	r3, [r4, #24]
 8013c3e:	4620      	mov	r0, r4
 8013c40:	f000 f820 	bl	8013c84 <__sfp>
 8013c44:	6060      	str	r0, [r4, #4]
 8013c46:	4620      	mov	r0, r4
 8013c48:	f000 f81c 	bl	8013c84 <__sfp>
 8013c4c:	60a0      	str	r0, [r4, #8]
 8013c4e:	4620      	mov	r0, r4
 8013c50:	f000 f818 	bl	8013c84 <__sfp>
 8013c54:	2200      	movs	r2, #0
 8013c56:	60e0      	str	r0, [r4, #12]
 8013c58:	2104      	movs	r1, #4
 8013c5a:	6860      	ldr	r0, [r4, #4]
 8013c5c:	f7ff ff82 	bl	8013b64 <std>
 8013c60:	68a0      	ldr	r0, [r4, #8]
 8013c62:	2201      	movs	r2, #1
 8013c64:	2109      	movs	r1, #9
 8013c66:	f7ff ff7d 	bl	8013b64 <std>
 8013c6a:	68e0      	ldr	r0, [r4, #12]
 8013c6c:	2202      	movs	r2, #2
 8013c6e:	2112      	movs	r1, #18
 8013c70:	f7ff ff78 	bl	8013b64 <std>
 8013c74:	2301      	movs	r3, #1
 8013c76:	61a3      	str	r3, [r4, #24]
 8013c78:	e7d2      	b.n	8013c20 <__sinit+0xc>
 8013c7a:	bf00      	nop
 8013c7c:	080158e8 	.word	0x080158e8
 8013c80:	08013bad 	.word	0x08013bad

08013c84 <__sfp>:
 8013c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013c86:	4607      	mov	r7, r0
 8013c88:	f7ff ffac 	bl	8013be4 <__sfp_lock_acquire>
 8013c8c:	4b1e      	ldr	r3, [pc, #120]	; (8013d08 <__sfp+0x84>)
 8013c8e:	681e      	ldr	r6, [r3, #0]
 8013c90:	69b3      	ldr	r3, [r6, #24]
 8013c92:	b913      	cbnz	r3, 8013c9a <__sfp+0x16>
 8013c94:	4630      	mov	r0, r6
 8013c96:	f7ff ffbd 	bl	8013c14 <__sinit>
 8013c9a:	3648      	adds	r6, #72	; 0x48
 8013c9c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013ca0:	3b01      	subs	r3, #1
 8013ca2:	d503      	bpl.n	8013cac <__sfp+0x28>
 8013ca4:	6833      	ldr	r3, [r6, #0]
 8013ca6:	b30b      	cbz	r3, 8013cec <__sfp+0x68>
 8013ca8:	6836      	ldr	r6, [r6, #0]
 8013caa:	e7f7      	b.n	8013c9c <__sfp+0x18>
 8013cac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013cb0:	b9d5      	cbnz	r5, 8013ce8 <__sfp+0x64>
 8013cb2:	4b16      	ldr	r3, [pc, #88]	; (8013d0c <__sfp+0x88>)
 8013cb4:	60e3      	str	r3, [r4, #12]
 8013cb6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8013cba:	6665      	str	r5, [r4, #100]	; 0x64
 8013cbc:	f7fe fd1a 	bl	80126f4 <__retarget_lock_init_recursive>
 8013cc0:	f7ff ff96 	bl	8013bf0 <__sfp_lock_release>
 8013cc4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8013cc8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8013ccc:	6025      	str	r5, [r4, #0]
 8013cce:	61a5      	str	r5, [r4, #24]
 8013cd0:	2208      	movs	r2, #8
 8013cd2:	4629      	mov	r1, r5
 8013cd4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013cd8:	f7fb fe5a 	bl	800f990 <memset>
 8013cdc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013ce0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013ce4:	4620      	mov	r0, r4
 8013ce6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013ce8:	3468      	adds	r4, #104	; 0x68
 8013cea:	e7d9      	b.n	8013ca0 <__sfp+0x1c>
 8013cec:	2104      	movs	r1, #4
 8013cee:	4638      	mov	r0, r7
 8013cf0:	f7ff ff62 	bl	8013bb8 <__sfmoreglue>
 8013cf4:	4604      	mov	r4, r0
 8013cf6:	6030      	str	r0, [r6, #0]
 8013cf8:	2800      	cmp	r0, #0
 8013cfa:	d1d5      	bne.n	8013ca8 <__sfp+0x24>
 8013cfc:	f7ff ff78 	bl	8013bf0 <__sfp_lock_release>
 8013d00:	230c      	movs	r3, #12
 8013d02:	603b      	str	r3, [r7, #0]
 8013d04:	e7ee      	b.n	8013ce4 <__sfp+0x60>
 8013d06:	bf00      	nop
 8013d08:	080158e8 	.word	0x080158e8
 8013d0c:	ffff0001 	.word	0xffff0001

08013d10 <_fwalk_reent>:
 8013d10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013d14:	4606      	mov	r6, r0
 8013d16:	4688      	mov	r8, r1
 8013d18:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013d1c:	2700      	movs	r7, #0
 8013d1e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013d22:	f1b9 0901 	subs.w	r9, r9, #1
 8013d26:	d505      	bpl.n	8013d34 <_fwalk_reent+0x24>
 8013d28:	6824      	ldr	r4, [r4, #0]
 8013d2a:	2c00      	cmp	r4, #0
 8013d2c:	d1f7      	bne.n	8013d1e <_fwalk_reent+0xe>
 8013d2e:	4638      	mov	r0, r7
 8013d30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013d34:	89ab      	ldrh	r3, [r5, #12]
 8013d36:	2b01      	cmp	r3, #1
 8013d38:	d907      	bls.n	8013d4a <_fwalk_reent+0x3a>
 8013d3a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013d3e:	3301      	adds	r3, #1
 8013d40:	d003      	beq.n	8013d4a <_fwalk_reent+0x3a>
 8013d42:	4629      	mov	r1, r5
 8013d44:	4630      	mov	r0, r6
 8013d46:	47c0      	blx	r8
 8013d48:	4307      	orrs	r7, r0
 8013d4a:	3568      	adds	r5, #104	; 0x68
 8013d4c:	e7e9      	b.n	8013d22 <_fwalk_reent+0x12>

08013d4e <__swhatbuf_r>:
 8013d4e:	b570      	push	{r4, r5, r6, lr}
 8013d50:	460e      	mov	r6, r1
 8013d52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013d56:	2900      	cmp	r1, #0
 8013d58:	b096      	sub	sp, #88	; 0x58
 8013d5a:	4614      	mov	r4, r2
 8013d5c:	461d      	mov	r5, r3
 8013d5e:	da08      	bge.n	8013d72 <__swhatbuf_r+0x24>
 8013d60:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8013d64:	2200      	movs	r2, #0
 8013d66:	602a      	str	r2, [r5, #0]
 8013d68:	061a      	lsls	r2, r3, #24
 8013d6a:	d410      	bmi.n	8013d8e <__swhatbuf_r+0x40>
 8013d6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013d70:	e00e      	b.n	8013d90 <__swhatbuf_r+0x42>
 8013d72:	466a      	mov	r2, sp
 8013d74:	f000 f89c 	bl	8013eb0 <_fstat_r>
 8013d78:	2800      	cmp	r0, #0
 8013d7a:	dbf1      	blt.n	8013d60 <__swhatbuf_r+0x12>
 8013d7c:	9a01      	ldr	r2, [sp, #4]
 8013d7e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013d82:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013d86:	425a      	negs	r2, r3
 8013d88:	415a      	adcs	r2, r3
 8013d8a:	602a      	str	r2, [r5, #0]
 8013d8c:	e7ee      	b.n	8013d6c <__swhatbuf_r+0x1e>
 8013d8e:	2340      	movs	r3, #64	; 0x40
 8013d90:	2000      	movs	r0, #0
 8013d92:	6023      	str	r3, [r4, #0]
 8013d94:	b016      	add	sp, #88	; 0x58
 8013d96:	bd70      	pop	{r4, r5, r6, pc}

08013d98 <__smakebuf_r>:
 8013d98:	898b      	ldrh	r3, [r1, #12]
 8013d9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013d9c:	079d      	lsls	r5, r3, #30
 8013d9e:	4606      	mov	r6, r0
 8013da0:	460c      	mov	r4, r1
 8013da2:	d507      	bpl.n	8013db4 <__smakebuf_r+0x1c>
 8013da4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013da8:	6023      	str	r3, [r4, #0]
 8013daa:	6123      	str	r3, [r4, #16]
 8013dac:	2301      	movs	r3, #1
 8013dae:	6163      	str	r3, [r4, #20]
 8013db0:	b002      	add	sp, #8
 8013db2:	bd70      	pop	{r4, r5, r6, pc}
 8013db4:	ab01      	add	r3, sp, #4
 8013db6:	466a      	mov	r2, sp
 8013db8:	f7ff ffc9 	bl	8013d4e <__swhatbuf_r>
 8013dbc:	9900      	ldr	r1, [sp, #0]
 8013dbe:	4605      	mov	r5, r0
 8013dc0:	4630      	mov	r0, r6
 8013dc2:	f7fb fe6f 	bl	800faa4 <_malloc_r>
 8013dc6:	b948      	cbnz	r0, 8013ddc <__smakebuf_r+0x44>
 8013dc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013dcc:	059a      	lsls	r2, r3, #22
 8013dce:	d4ef      	bmi.n	8013db0 <__smakebuf_r+0x18>
 8013dd0:	f023 0303 	bic.w	r3, r3, #3
 8013dd4:	f043 0302 	orr.w	r3, r3, #2
 8013dd8:	81a3      	strh	r3, [r4, #12]
 8013dda:	e7e3      	b.n	8013da4 <__smakebuf_r+0xc>
 8013ddc:	4b0d      	ldr	r3, [pc, #52]	; (8013e14 <__smakebuf_r+0x7c>)
 8013dde:	62b3      	str	r3, [r6, #40]	; 0x28
 8013de0:	89a3      	ldrh	r3, [r4, #12]
 8013de2:	6020      	str	r0, [r4, #0]
 8013de4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013de8:	81a3      	strh	r3, [r4, #12]
 8013dea:	9b00      	ldr	r3, [sp, #0]
 8013dec:	6163      	str	r3, [r4, #20]
 8013dee:	9b01      	ldr	r3, [sp, #4]
 8013df0:	6120      	str	r0, [r4, #16]
 8013df2:	b15b      	cbz	r3, 8013e0c <__smakebuf_r+0x74>
 8013df4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013df8:	4630      	mov	r0, r6
 8013dfa:	f000 f86b 	bl	8013ed4 <_isatty_r>
 8013dfe:	b128      	cbz	r0, 8013e0c <__smakebuf_r+0x74>
 8013e00:	89a3      	ldrh	r3, [r4, #12]
 8013e02:	f023 0303 	bic.w	r3, r3, #3
 8013e06:	f043 0301 	orr.w	r3, r3, #1
 8013e0a:	81a3      	strh	r3, [r4, #12]
 8013e0c:	89a0      	ldrh	r0, [r4, #12]
 8013e0e:	4305      	orrs	r5, r0
 8013e10:	81a5      	strh	r5, [r4, #12]
 8013e12:	e7cd      	b.n	8013db0 <__smakebuf_r+0x18>
 8013e14:	08013bad 	.word	0x08013bad

08013e18 <_malloc_usable_size_r>:
 8013e18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013e1c:	1f18      	subs	r0, r3, #4
 8013e1e:	2b00      	cmp	r3, #0
 8013e20:	bfbc      	itt	lt
 8013e22:	580b      	ldrlt	r3, [r1, r0]
 8013e24:	18c0      	addlt	r0, r0, r3
 8013e26:	4770      	bx	lr

08013e28 <_raise_r>:
 8013e28:	291f      	cmp	r1, #31
 8013e2a:	b538      	push	{r3, r4, r5, lr}
 8013e2c:	4604      	mov	r4, r0
 8013e2e:	460d      	mov	r5, r1
 8013e30:	d904      	bls.n	8013e3c <_raise_r+0x14>
 8013e32:	2316      	movs	r3, #22
 8013e34:	6003      	str	r3, [r0, #0]
 8013e36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013e3a:	bd38      	pop	{r3, r4, r5, pc}
 8013e3c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8013e3e:	b112      	cbz	r2, 8013e46 <_raise_r+0x1e>
 8013e40:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013e44:	b94b      	cbnz	r3, 8013e5a <_raise_r+0x32>
 8013e46:	4620      	mov	r0, r4
 8013e48:	f000 f830 	bl	8013eac <_getpid_r>
 8013e4c:	462a      	mov	r2, r5
 8013e4e:	4601      	mov	r1, r0
 8013e50:	4620      	mov	r0, r4
 8013e52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013e56:	f000 b817 	b.w	8013e88 <_kill_r>
 8013e5a:	2b01      	cmp	r3, #1
 8013e5c:	d00a      	beq.n	8013e74 <_raise_r+0x4c>
 8013e5e:	1c59      	adds	r1, r3, #1
 8013e60:	d103      	bne.n	8013e6a <_raise_r+0x42>
 8013e62:	2316      	movs	r3, #22
 8013e64:	6003      	str	r3, [r0, #0]
 8013e66:	2001      	movs	r0, #1
 8013e68:	e7e7      	b.n	8013e3a <_raise_r+0x12>
 8013e6a:	2400      	movs	r4, #0
 8013e6c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013e70:	4628      	mov	r0, r5
 8013e72:	4798      	blx	r3
 8013e74:	2000      	movs	r0, #0
 8013e76:	e7e0      	b.n	8013e3a <_raise_r+0x12>

08013e78 <raise>:
 8013e78:	4b02      	ldr	r3, [pc, #8]	; (8013e84 <raise+0xc>)
 8013e7a:	4601      	mov	r1, r0
 8013e7c:	6818      	ldr	r0, [r3, #0]
 8013e7e:	f7ff bfd3 	b.w	8013e28 <_raise_r>
 8013e82:	bf00      	nop
 8013e84:	20000260 	.word	0x20000260

08013e88 <_kill_r>:
 8013e88:	b538      	push	{r3, r4, r5, lr}
 8013e8a:	4d07      	ldr	r5, [pc, #28]	; (8013ea8 <_kill_r+0x20>)
 8013e8c:	2300      	movs	r3, #0
 8013e8e:	4604      	mov	r4, r0
 8013e90:	4608      	mov	r0, r1
 8013e92:	4611      	mov	r1, r2
 8013e94:	602b      	str	r3, [r5, #0]
 8013e96:	f7f2 fe81 	bl	8006b9c <_kill>
 8013e9a:	1c43      	adds	r3, r0, #1
 8013e9c:	d102      	bne.n	8013ea4 <_kill_r+0x1c>
 8013e9e:	682b      	ldr	r3, [r5, #0]
 8013ea0:	b103      	cbz	r3, 8013ea4 <_kill_r+0x1c>
 8013ea2:	6023      	str	r3, [r4, #0]
 8013ea4:	bd38      	pop	{r3, r4, r5, pc}
 8013ea6:	bf00      	nop
 8013ea8:	200038ec 	.word	0x200038ec

08013eac <_getpid_r>:
 8013eac:	f7f2 be6e 	b.w	8006b8c <_getpid>

08013eb0 <_fstat_r>:
 8013eb0:	b538      	push	{r3, r4, r5, lr}
 8013eb2:	4d07      	ldr	r5, [pc, #28]	; (8013ed0 <_fstat_r+0x20>)
 8013eb4:	2300      	movs	r3, #0
 8013eb6:	4604      	mov	r4, r0
 8013eb8:	4608      	mov	r0, r1
 8013eba:	4611      	mov	r1, r2
 8013ebc:	602b      	str	r3, [r5, #0]
 8013ebe:	f7f2 fecc 	bl	8006c5a <_fstat>
 8013ec2:	1c43      	adds	r3, r0, #1
 8013ec4:	d102      	bne.n	8013ecc <_fstat_r+0x1c>
 8013ec6:	682b      	ldr	r3, [r5, #0]
 8013ec8:	b103      	cbz	r3, 8013ecc <_fstat_r+0x1c>
 8013eca:	6023      	str	r3, [r4, #0]
 8013ecc:	bd38      	pop	{r3, r4, r5, pc}
 8013ece:	bf00      	nop
 8013ed0:	200038ec 	.word	0x200038ec

08013ed4 <_isatty_r>:
 8013ed4:	b538      	push	{r3, r4, r5, lr}
 8013ed6:	4d06      	ldr	r5, [pc, #24]	; (8013ef0 <_isatty_r+0x1c>)
 8013ed8:	2300      	movs	r3, #0
 8013eda:	4604      	mov	r4, r0
 8013edc:	4608      	mov	r0, r1
 8013ede:	602b      	str	r3, [r5, #0]
 8013ee0:	f7f2 fecb 	bl	8006c7a <_isatty>
 8013ee4:	1c43      	adds	r3, r0, #1
 8013ee6:	d102      	bne.n	8013eee <_isatty_r+0x1a>
 8013ee8:	682b      	ldr	r3, [r5, #0]
 8013eea:	b103      	cbz	r3, 8013eee <_isatty_r+0x1a>
 8013eec:	6023      	str	r3, [r4, #0]
 8013eee:	bd38      	pop	{r3, r4, r5, pc}
 8013ef0:	200038ec 	.word	0x200038ec

08013ef4 <_init>:
 8013ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013ef6:	bf00      	nop
 8013ef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013efa:	bc08      	pop	{r3}
 8013efc:	469e      	mov	lr, r3
 8013efe:	4770      	bx	lr

08013f00 <_fini>:
 8013f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013f02:	bf00      	nop
 8013f04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013f06:	bc08      	pop	{r3}
 8013f08:	469e      	mov	lr, r3
 8013f0a:	4770      	bx	lr
