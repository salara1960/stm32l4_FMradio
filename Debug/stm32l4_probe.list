
stm32l4_probe.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013e9c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d74  08014030  08014030  00024030  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015da4  08015da4  00030434  2**0
                  CONTENTS
  4 .ARM          00000008  08015da4  08015da4  00025da4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015dac  08015dac  00030434  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015dac  08015dac  00025dac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015db0  08015db0  00025db0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000434  20000000  08015db4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000034b8  20000438  080161e8  00030438  2**3
                  ALLOC
 10 ._user_heap_stack 00001000  200038f0  080161e8  000338f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030434  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020811  00000000  00000000  00030464  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e32  00000000  00000000  00050c75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bb0  00000000  00000000  00054aa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001aa0  00000000  00000000  00056658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002bae2  00000000  00000000  000580f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021522  00000000  00000000  00083bda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00102b15  00000000  00000000  000a50fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001a7c11  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008c48  00000000  00000000  001a7c64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000438 	.word	0x20000438
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08014014 	.word	0x08014014

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000043c 	.word	0x2000043c
 80001cc:	08014014 	.word	0x08014014

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_ldivmod>:
 8000c88:	b97b      	cbnz	r3, 8000caa <__aeabi_ldivmod+0x22>
 8000c8a:	b972      	cbnz	r2, 8000caa <__aeabi_ldivmod+0x22>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bfbe      	ittt	lt
 8000c90:	2000      	movlt	r0, #0
 8000c92:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c96:	e006      	blt.n	8000ca6 <__aeabi_ldivmod+0x1e>
 8000c98:	bf08      	it	eq
 8000c9a:	2800      	cmpeq	r0, #0
 8000c9c:	bf1c      	itt	ne
 8000c9e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ca2:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ca6:	f000 b9f5 	b.w	8001094 <__aeabi_idiv0>
 8000caa:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cae:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb2:	2900      	cmp	r1, #0
 8000cb4:	db09      	blt.n	8000cca <__aeabi_ldivmod+0x42>
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	db1a      	blt.n	8000cf0 <__aeabi_ldivmod+0x68>
 8000cba:	f000 f883 	bl	8000dc4 <__udivmoddi4>
 8000cbe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc6:	b004      	add	sp, #16
 8000cc8:	4770      	bx	lr
 8000cca:	4240      	negs	r0, r0
 8000ccc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	db1b      	blt.n	8000d0c <__aeabi_ldivmod+0x84>
 8000cd4:	f000 f876 	bl	8000dc4 <__udivmoddi4>
 8000cd8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce0:	b004      	add	sp, #16
 8000ce2:	4240      	negs	r0, r0
 8000ce4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce8:	4252      	negs	r2, r2
 8000cea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cee:	4770      	bx	lr
 8000cf0:	4252      	negs	r2, r2
 8000cf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf6:	f000 f865 	bl	8000dc4 <__udivmoddi4>
 8000cfa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d02:	b004      	add	sp, #16
 8000d04:	4240      	negs	r0, r0
 8000d06:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0a:	4770      	bx	lr
 8000d0c:	4252      	negs	r2, r2
 8000d0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d12:	f000 f857 	bl	8000dc4 <__udivmoddi4>
 8000d16:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d1e:	b004      	add	sp, #16
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	4770      	bx	lr

08000d28 <__aeabi_uldivmod>:
 8000d28:	b953      	cbnz	r3, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2a:	b94a      	cbnz	r2, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2c:	2900      	cmp	r1, #0
 8000d2e:	bf08      	it	eq
 8000d30:	2800      	cmpeq	r0, #0
 8000d32:	bf1c      	itt	ne
 8000d34:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000d38:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000d3c:	f000 b9aa 	b.w	8001094 <__aeabi_idiv0>
 8000d40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d48:	f000 f83c 	bl	8000dc4 <__udivmoddi4>
 8000d4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d54:	b004      	add	sp, #16
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_d2lz>:
 8000d58:	b538      	push	{r3, r4, r5, lr}
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	4604      	mov	r4, r0
 8000d60:	460d      	mov	r5, r1
 8000d62:	f7ff febb 	bl	8000adc <__aeabi_dcmplt>
 8000d66:	b928      	cbnz	r0, 8000d74 <__aeabi_d2lz+0x1c>
 8000d68:	4620      	mov	r0, r4
 8000d6a:	4629      	mov	r1, r5
 8000d6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d70:	f000 b80a 	b.w	8000d88 <__aeabi_d2ulz>
 8000d74:	4620      	mov	r0, r4
 8000d76:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d7a:	f000 f805 	bl	8000d88 <__aeabi_d2ulz>
 8000d7e:	4240      	negs	r0, r0
 8000d80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d84:	bd38      	pop	{r3, r4, r5, pc}
 8000d86:	bf00      	nop

08000d88 <__aeabi_d2ulz>:
 8000d88:	b5d0      	push	{r4, r6, r7, lr}
 8000d8a:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <__aeabi_d2ulz+0x34>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	4606      	mov	r6, r0
 8000d90:	460f      	mov	r7, r1
 8000d92:	f7ff fc31 	bl	80005f8 <__aeabi_dmul>
 8000d96:	f7ff ff07 	bl	8000ba8 <__aeabi_d2uiz>
 8000d9a:	4604      	mov	r4, r0
 8000d9c:	f7ff fbb2 	bl	8000504 <__aeabi_ui2d>
 8000da0:	4b07      	ldr	r3, [pc, #28]	; (8000dc0 <__aeabi_d2ulz+0x38>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	f7ff fc28 	bl	80005f8 <__aeabi_dmul>
 8000da8:	4602      	mov	r2, r0
 8000daa:	460b      	mov	r3, r1
 8000dac:	4630      	mov	r0, r6
 8000dae:	4639      	mov	r1, r7
 8000db0:	f7ff fa6a 	bl	8000288 <__aeabi_dsub>
 8000db4:	f7ff fef8 	bl	8000ba8 <__aeabi_d2uiz>
 8000db8:	4621      	mov	r1, r4
 8000dba:	bdd0      	pop	{r4, r6, r7, pc}
 8000dbc:	3df00000 	.word	0x3df00000
 8000dc0:	41f00000 	.word	0x41f00000

08000dc4 <__udivmoddi4>:
 8000dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dc8:	9d08      	ldr	r5, [sp, #32]
 8000dca:	4604      	mov	r4, r0
 8000dcc:	468e      	mov	lr, r1
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d14d      	bne.n	8000e6e <__udivmoddi4+0xaa>
 8000dd2:	428a      	cmp	r2, r1
 8000dd4:	4694      	mov	ip, r2
 8000dd6:	d969      	bls.n	8000eac <__udivmoddi4+0xe8>
 8000dd8:	fab2 f282 	clz	r2, r2
 8000ddc:	b152      	cbz	r2, 8000df4 <__udivmoddi4+0x30>
 8000dde:	fa01 f302 	lsl.w	r3, r1, r2
 8000de2:	f1c2 0120 	rsb	r1, r2, #32
 8000de6:	fa20 f101 	lsr.w	r1, r0, r1
 8000dea:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dee:	ea41 0e03 	orr.w	lr, r1, r3
 8000df2:	4094      	lsls	r4, r2
 8000df4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df8:	0c21      	lsrs	r1, r4, #16
 8000dfa:	fbbe f6f8 	udiv	r6, lr, r8
 8000dfe:	fa1f f78c 	uxth.w	r7, ip
 8000e02:	fb08 e316 	mls	r3, r8, r6, lr
 8000e06:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e0a:	fb06 f107 	mul.w	r1, r6, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d90a      	bls.n	8000e28 <__udivmoddi4+0x64>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000e1a:	f080 811f 	bcs.w	800105c <__udivmoddi4+0x298>
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	f240 811c 	bls.w	800105c <__udivmoddi4+0x298>
 8000e24:	3e02      	subs	r6, #2
 8000e26:	4463      	add	r3, ip
 8000e28:	1a5b      	subs	r3, r3, r1
 8000e2a:	b2a4      	uxth	r4, r4
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3310 	mls	r3, r8, r0, r3
 8000e34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e38:	fb00 f707 	mul.w	r7, r0, r7
 8000e3c:	42a7      	cmp	r7, r4
 8000e3e:	d90a      	bls.n	8000e56 <__udivmoddi4+0x92>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e48:	f080 810a 	bcs.w	8001060 <__udivmoddi4+0x29c>
 8000e4c:	42a7      	cmp	r7, r4
 8000e4e:	f240 8107 	bls.w	8001060 <__udivmoddi4+0x29c>
 8000e52:	4464      	add	r4, ip
 8000e54:	3802      	subs	r0, #2
 8000e56:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e5a:	1be4      	subs	r4, r4, r7
 8000e5c:	2600      	movs	r6, #0
 8000e5e:	b11d      	cbz	r5, 8000e68 <__udivmoddi4+0xa4>
 8000e60:	40d4      	lsrs	r4, r2
 8000e62:	2300      	movs	r3, #0
 8000e64:	e9c5 4300 	strd	r4, r3, [r5]
 8000e68:	4631      	mov	r1, r6
 8000e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6e:	428b      	cmp	r3, r1
 8000e70:	d909      	bls.n	8000e86 <__udivmoddi4+0xc2>
 8000e72:	2d00      	cmp	r5, #0
 8000e74:	f000 80ef 	beq.w	8001056 <__udivmoddi4+0x292>
 8000e78:	2600      	movs	r6, #0
 8000e7a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e7e:	4630      	mov	r0, r6
 8000e80:	4631      	mov	r1, r6
 8000e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e86:	fab3 f683 	clz	r6, r3
 8000e8a:	2e00      	cmp	r6, #0
 8000e8c:	d14a      	bne.n	8000f24 <__udivmoddi4+0x160>
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	d302      	bcc.n	8000e98 <__udivmoddi4+0xd4>
 8000e92:	4282      	cmp	r2, r0
 8000e94:	f200 80f9 	bhi.w	800108a <__udivmoddi4+0x2c6>
 8000e98:	1a84      	subs	r4, r0, r2
 8000e9a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e9e:	2001      	movs	r0, #1
 8000ea0:	469e      	mov	lr, r3
 8000ea2:	2d00      	cmp	r5, #0
 8000ea4:	d0e0      	beq.n	8000e68 <__udivmoddi4+0xa4>
 8000ea6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000eaa:	e7dd      	b.n	8000e68 <__udivmoddi4+0xa4>
 8000eac:	b902      	cbnz	r2, 8000eb0 <__udivmoddi4+0xec>
 8000eae:	deff      	udf	#255	; 0xff
 8000eb0:	fab2 f282 	clz	r2, r2
 8000eb4:	2a00      	cmp	r2, #0
 8000eb6:	f040 8092 	bne.w	8000fde <__udivmoddi4+0x21a>
 8000eba:	eba1 010c 	sub.w	r1, r1, ip
 8000ebe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ec2:	fa1f fe8c 	uxth.w	lr, ip
 8000ec6:	2601      	movs	r6, #1
 8000ec8:	0c20      	lsrs	r0, r4, #16
 8000eca:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ece:	fb07 1113 	mls	r1, r7, r3, r1
 8000ed2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed6:	fb0e f003 	mul.w	r0, lr, r3
 8000eda:	4288      	cmp	r0, r1
 8000edc:	d908      	bls.n	8000ef0 <__udivmoddi4+0x12c>
 8000ede:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee2:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000ee6:	d202      	bcs.n	8000eee <__udivmoddi4+0x12a>
 8000ee8:	4288      	cmp	r0, r1
 8000eea:	f200 80cb 	bhi.w	8001084 <__udivmoddi4+0x2c0>
 8000eee:	4643      	mov	r3, r8
 8000ef0:	1a09      	subs	r1, r1, r0
 8000ef2:	b2a4      	uxth	r4, r4
 8000ef4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ef8:	fb07 1110 	mls	r1, r7, r0, r1
 8000efc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f00:	fb0e fe00 	mul.w	lr, lr, r0
 8000f04:	45a6      	cmp	lr, r4
 8000f06:	d908      	bls.n	8000f1a <__udivmoddi4+0x156>
 8000f08:	eb1c 0404 	adds.w	r4, ip, r4
 8000f0c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000f10:	d202      	bcs.n	8000f18 <__udivmoddi4+0x154>
 8000f12:	45a6      	cmp	lr, r4
 8000f14:	f200 80bb 	bhi.w	800108e <__udivmoddi4+0x2ca>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	eba4 040e 	sub.w	r4, r4, lr
 8000f1e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f22:	e79c      	b.n	8000e5e <__udivmoddi4+0x9a>
 8000f24:	f1c6 0720 	rsb	r7, r6, #32
 8000f28:	40b3      	lsls	r3, r6
 8000f2a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f2e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f32:	fa20 f407 	lsr.w	r4, r0, r7
 8000f36:	fa01 f306 	lsl.w	r3, r1, r6
 8000f3a:	431c      	orrs	r4, r3
 8000f3c:	40f9      	lsrs	r1, r7
 8000f3e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f42:	fa00 f306 	lsl.w	r3, r0, r6
 8000f46:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f4a:	0c20      	lsrs	r0, r4, #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fb09 1118 	mls	r1, r9, r8, r1
 8000f54:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f58:	fb08 f00e 	mul.w	r0, r8, lr
 8000f5c:	4288      	cmp	r0, r1
 8000f5e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f62:	d90b      	bls.n	8000f7c <__udivmoddi4+0x1b8>
 8000f64:	eb1c 0101 	adds.w	r1, ip, r1
 8000f68:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000f6c:	f080 8088 	bcs.w	8001080 <__udivmoddi4+0x2bc>
 8000f70:	4288      	cmp	r0, r1
 8000f72:	f240 8085 	bls.w	8001080 <__udivmoddi4+0x2bc>
 8000f76:	f1a8 0802 	sub.w	r8, r8, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1a09      	subs	r1, r1, r0
 8000f7e:	b2a4      	uxth	r4, r4
 8000f80:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f84:	fb09 1110 	mls	r1, r9, r0, r1
 8000f88:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f8c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f90:	458e      	cmp	lr, r1
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x1e2>
 8000f94:	eb1c 0101 	adds.w	r1, ip, r1
 8000f98:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000f9c:	d26c      	bcs.n	8001078 <__udivmoddi4+0x2b4>
 8000f9e:	458e      	cmp	lr, r1
 8000fa0:	d96a      	bls.n	8001078 <__udivmoddi4+0x2b4>
 8000fa2:	3802      	subs	r0, #2
 8000fa4:	4461      	add	r1, ip
 8000fa6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000faa:	fba0 9402 	umull	r9, r4, r0, r2
 8000fae:	eba1 010e 	sub.w	r1, r1, lr
 8000fb2:	42a1      	cmp	r1, r4
 8000fb4:	46c8      	mov	r8, r9
 8000fb6:	46a6      	mov	lr, r4
 8000fb8:	d356      	bcc.n	8001068 <__udivmoddi4+0x2a4>
 8000fba:	d053      	beq.n	8001064 <__udivmoddi4+0x2a0>
 8000fbc:	b15d      	cbz	r5, 8000fd6 <__udivmoddi4+0x212>
 8000fbe:	ebb3 0208 	subs.w	r2, r3, r8
 8000fc2:	eb61 010e 	sbc.w	r1, r1, lr
 8000fc6:	fa01 f707 	lsl.w	r7, r1, r7
 8000fca:	fa22 f306 	lsr.w	r3, r2, r6
 8000fce:	40f1      	lsrs	r1, r6
 8000fd0:	431f      	orrs	r7, r3
 8000fd2:	e9c5 7100 	strd	r7, r1, [r5]
 8000fd6:	2600      	movs	r6, #0
 8000fd8:	4631      	mov	r1, r6
 8000fda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fde:	f1c2 0320 	rsb	r3, r2, #32
 8000fe2:	40d8      	lsrs	r0, r3
 8000fe4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fe8:	fa21 f303 	lsr.w	r3, r1, r3
 8000fec:	4091      	lsls	r1, r2
 8000fee:	4301      	orrs	r1, r0
 8000ff0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ff4:	fa1f fe8c 	uxth.w	lr, ip
 8000ff8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ffc:	fb07 3610 	mls	r6, r7, r0, r3
 8001000:	0c0b      	lsrs	r3, r1, #16
 8001002:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001006:	fb00 f60e 	mul.w	r6, r0, lr
 800100a:	429e      	cmp	r6, r3
 800100c:	fa04 f402 	lsl.w	r4, r4, r2
 8001010:	d908      	bls.n	8001024 <__udivmoddi4+0x260>
 8001012:	eb1c 0303 	adds.w	r3, ip, r3
 8001016:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800101a:	d22f      	bcs.n	800107c <__udivmoddi4+0x2b8>
 800101c:	429e      	cmp	r6, r3
 800101e:	d92d      	bls.n	800107c <__udivmoddi4+0x2b8>
 8001020:	3802      	subs	r0, #2
 8001022:	4463      	add	r3, ip
 8001024:	1b9b      	subs	r3, r3, r6
 8001026:	b289      	uxth	r1, r1
 8001028:	fbb3 f6f7 	udiv	r6, r3, r7
 800102c:	fb07 3316 	mls	r3, r7, r6, r3
 8001030:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001034:	fb06 f30e 	mul.w	r3, r6, lr
 8001038:	428b      	cmp	r3, r1
 800103a:	d908      	bls.n	800104e <__udivmoddi4+0x28a>
 800103c:	eb1c 0101 	adds.w	r1, ip, r1
 8001040:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8001044:	d216      	bcs.n	8001074 <__udivmoddi4+0x2b0>
 8001046:	428b      	cmp	r3, r1
 8001048:	d914      	bls.n	8001074 <__udivmoddi4+0x2b0>
 800104a:	3e02      	subs	r6, #2
 800104c:	4461      	add	r1, ip
 800104e:	1ac9      	subs	r1, r1, r3
 8001050:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001054:	e738      	b.n	8000ec8 <__udivmoddi4+0x104>
 8001056:	462e      	mov	r6, r5
 8001058:	4628      	mov	r0, r5
 800105a:	e705      	b.n	8000e68 <__udivmoddi4+0xa4>
 800105c:	4606      	mov	r6, r0
 800105e:	e6e3      	b.n	8000e28 <__udivmoddi4+0x64>
 8001060:	4618      	mov	r0, r3
 8001062:	e6f8      	b.n	8000e56 <__udivmoddi4+0x92>
 8001064:	454b      	cmp	r3, r9
 8001066:	d2a9      	bcs.n	8000fbc <__udivmoddi4+0x1f8>
 8001068:	ebb9 0802 	subs.w	r8, r9, r2
 800106c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001070:	3801      	subs	r0, #1
 8001072:	e7a3      	b.n	8000fbc <__udivmoddi4+0x1f8>
 8001074:	4646      	mov	r6, r8
 8001076:	e7ea      	b.n	800104e <__udivmoddi4+0x28a>
 8001078:	4620      	mov	r0, r4
 800107a:	e794      	b.n	8000fa6 <__udivmoddi4+0x1e2>
 800107c:	4640      	mov	r0, r8
 800107e:	e7d1      	b.n	8001024 <__udivmoddi4+0x260>
 8001080:	46d0      	mov	r8, sl
 8001082:	e77b      	b.n	8000f7c <__udivmoddi4+0x1b8>
 8001084:	3b02      	subs	r3, #2
 8001086:	4461      	add	r1, ip
 8001088:	e732      	b.n	8000ef0 <__udivmoddi4+0x12c>
 800108a:	4630      	mov	r0, r6
 800108c:	e709      	b.n	8000ea2 <__udivmoddi4+0xde>
 800108e:	4464      	add	r4, ip
 8001090:	3802      	subs	r0, #2
 8001092:	e742      	b.n	8000f1a <__udivmoddi4+0x156>

08001094 <__aeabi_idiv0>:
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop

08001098 <decodeIRED>:
volatile irparams_t irparams;
decode_results results;

//-----------------------------------------------------------------------------
int16_t decodeIRED(decode_results *results)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
	if (irparams.rcvstate != STATE_STOP) return 0;
 80010a0:	4b16      	ldr	r3, [pc, #88]	; (80010fc <decodeIRED+0x64>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	2b05      	cmp	r3, #5
 80010a8:	d001      	beq.n	80010ae <decodeIRED+0x16>
 80010aa:	2300      	movs	r3, #0
 80010ac:	e021      	b.n	80010f2 <decodeIRED+0x5a>

	results->rawbuf = irparams.rawbuf;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a13      	ldr	r2, [pc, #76]	; (8001100 <decodeIRED+0x68>)
 80010b2:	609a      	str	r2, [r3, #8]
	results->rawlen = irparams.rawlen;
 80010b4:	4b11      	ldr	r3, [pc, #68]	; (80010fc <decodeIRED+0x64>)
 80010b6:	785b      	ldrb	r3, [r3, #1]
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	b21a      	sxth	r2, r3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	819a      	strh	r2, [r3, #12]
	results->overflow = irparams.overflow;
 80010c0:	4b0e      	ldr	r3, [pc, #56]	; (80010fc <decodeIRED+0x64>)
 80010c2:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	b21a      	sxth	r2, r3
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	81da      	strh	r2, [r3, #14]

	if(irparams.rcvstate != STATE_STOP) return false;
 80010ce:	4b0b      	ldr	r3, [pc, #44]	; (80010fc <decodeIRED+0x64>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	2b05      	cmp	r3, #5
 80010d6:	d001      	beq.n	80010dc <decodeIRED+0x44>
 80010d8:	2300      	movs	r3, #0
 80010da:	e00a      	b.n	80010f2 <decodeIRED+0x5a>

	if (decodeHashIRED(results)) return 1;
 80010dc:	6878      	ldr	r0, [r7, #4]
 80010de:	f000 f883 	bl	80011e8 <decodeHashIRED>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <decodeIRED+0x54>
 80010e8:	2301      	movs	r3, #1
 80010ea:	e002      	b.n	80010f2 <decodeIRED+0x5a>

	enIntIRED();
 80010ec:	f000 f80a 	bl	8001104 <enIntIRED>

	return 0;
 80010f0:	2300      	movs	r3, #0
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	20000454 	.word	0x20000454
 8001100:	20000458 	.word	0x20000458

08001104 <enIntIRED>:
//-----------------------------------------------------------------------------
void enIntIRED()
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
	irparams.rcvstate = STATE_IDLE;
 8001108:	4b08      	ldr	r3, [pc, #32]	; (800112c <enIntIRED+0x28>)
 800110a:	2202      	movs	r2, #2
 800110c:	701a      	strb	r2, [r3, #0]
	irparams.rawlen = 0;
 800110e:	4b07      	ldr	r3, [pc, #28]	; (800112c <enIntIRED+0x28>)
 8001110:	2200      	movs	r2, #0
 8001112:	705a      	strb	r2, [r3, #1]

	__HAL_TIM_SET_COUNTER(portIRED, 0x0000);
 8001114:	4b06      	ldr	r3, [pc, #24]	; (8001130 <enIntIRED+0x2c>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	2200      	movs	r2, #0
 800111c:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_TIM_Base_Start_IT(portIRED);
 800111e:	4b04      	ldr	r3, [pc, #16]	; (8001130 <enIntIRED+0x2c>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4618      	mov	r0, r3
 8001124:	f00c fa60 	bl	800d5e8 <HAL_TIM_Base_Start_IT>
}
 8001128:	bf00      	nop
 800112a:	bd80      	pop	{r7, pc}
 800112c:	20000454 	.word	0x20000454
 8001130:	20000220 	.word	0x20000220

08001134 <resumeIRED>:
//-----------------------------------------------------------------------------
void resumeIRED() // Restart the ISR state machine
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
	irparams.rcvstate = STATE_IDLE;
 8001138:	4b05      	ldr	r3, [pc, #20]	; (8001150 <resumeIRED+0x1c>)
 800113a:	2202      	movs	r2, #2
 800113c:	701a      	strb	r2, [r3, #0]
	irparams.rawlen = 0;
 800113e:	4b04      	ldr	r3, [pc, #16]	; (8001150 <resumeIRED+0x1c>)
 8001140:	2200      	movs	r2, #0
 8001142:	705a      	strb	r2, [r3, #1]
}
 8001144:	bf00      	nop
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	20000454 	.word	0x20000454
 8001154:	00000000 	.word	0x00000000

08001158 <compareIRED>:
//-----------------------------------------------------------------------------
int16_t compareIRED(uint16_t oldval, uint16_t newval)
{
 8001158:	b5b0      	push	{r4, r5, r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	460a      	mov	r2, r1
 8001162:	80fb      	strh	r3, [r7, #6]
 8001164:	4613      	mov	r3, r2
 8001166:	80bb      	strh	r3, [r7, #4]
	     if (newval < oldval * .8) return 0;
 8001168:	88bb      	ldrh	r3, [r7, #4]
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff f9da 	bl	8000524 <__aeabi_i2d>
 8001170:	4604      	mov	r4, r0
 8001172:	460d      	mov	r5, r1
 8001174:	88fb      	ldrh	r3, [r7, #6]
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff f9d4 	bl	8000524 <__aeabi_i2d>
 800117c:	a318      	add	r3, pc, #96	; (adr r3, 80011e0 <compareIRED+0x88>)
 800117e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001182:	f7ff fa39 	bl	80005f8 <__aeabi_dmul>
 8001186:	4602      	mov	r2, r0
 8001188:	460b      	mov	r3, r1
 800118a:	4620      	mov	r0, r4
 800118c:	4629      	mov	r1, r5
 800118e:	f7ff fca5 	bl	8000adc <__aeabi_dcmplt>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <compareIRED+0x44>
 8001198:	2300      	movs	r3, #0
 800119a:	e01a      	b.n	80011d2 <compareIRED+0x7a>
	else if (oldval < newval * .8) return 2;
 800119c:	88fb      	ldrh	r3, [r7, #6]
 800119e:	4618      	mov	r0, r3
 80011a0:	f7ff f9c0 	bl	8000524 <__aeabi_i2d>
 80011a4:	4604      	mov	r4, r0
 80011a6:	460d      	mov	r5, r1
 80011a8:	88bb      	ldrh	r3, [r7, #4]
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff f9ba 	bl	8000524 <__aeabi_i2d>
 80011b0:	a30b      	add	r3, pc, #44	; (adr r3, 80011e0 <compareIRED+0x88>)
 80011b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011b6:	f7ff fa1f 	bl	80005f8 <__aeabi_dmul>
 80011ba:	4602      	mov	r2, r0
 80011bc:	460b      	mov	r3, r1
 80011be:	4620      	mov	r0, r4
 80011c0:	4629      	mov	r1, r5
 80011c2:	f7ff fc8b 	bl	8000adc <__aeabi_dcmplt>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <compareIRED+0x78>
 80011cc:	2302      	movs	r3, #2
 80011ce:	e000      	b.n	80011d2 <compareIRED+0x7a>
	else return 1;
 80011d0:	2301      	movs	r3, #1
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bdb0      	pop	{r4, r5, r7, pc}
 80011da:	bf00      	nop
 80011dc:	f3af 8000 	nop.w
 80011e0:	9999999a 	.word	0x9999999a
 80011e4:	3fe99999 	.word	0x3fe99999

080011e8 <decodeHashIRED>:
//-----------------------------------------------------------------------------
int32_t decodeHashIRED(decode_results *results)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
	int32_t hash = FNV_BASIS_32;
 80011f0:	4b21      	ldr	r3, [pc, #132]	; (8001278 <decodeHashIRED+0x90>)
 80011f2:	60fb      	str	r3, [r7, #12]

	if (results->rawlen < 6) return 0;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80011fa:	2b05      	cmp	r3, #5
 80011fc:	dc01      	bgt.n	8001202 <decodeHashIRED+0x1a>
 80011fe:	2300      	movs	r3, #0
 8001200:	e035      	b.n	800126e <decodeHashIRED+0x86>

	for (int16_t i = 1; (i + 2) < results->rawlen; i++) {
 8001202:	2301      	movs	r3, #1
 8001204:	817b      	strh	r3, [r7, #10]
 8001206:	e023      	b.n	8001250 <decodeHashIRED+0x68>
		int16_t value = compareIRED(results->rawbuf[i], results->rawbuf[i + 2]);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	689a      	ldr	r2, [r3, #8]
 800120c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	4413      	add	r3, r2
 8001214:	881b      	ldrh	r3, [r3, #0]
 8001216:	b298      	uxth	r0, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	689a      	ldr	r2, [r3, #8]
 800121c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001220:	3302      	adds	r3, #2
 8001222:	005b      	lsls	r3, r3, #1
 8001224:	4413      	add	r3, r2
 8001226:	881b      	ldrh	r3, [r3, #0]
 8001228:	b29b      	uxth	r3, r3
 800122a:	4619      	mov	r1, r3
 800122c:	f7ff ff94 	bl	8001158 <compareIRED>
 8001230:	4603      	mov	r3, r0
 8001232:	813b      	strh	r3, [r7, #8]
		hash = (hash * FNV_PRIME_32) ^ value;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	4a11      	ldr	r2, [pc, #68]	; (800127c <decodeHashIRED+0x94>)
 8001238:	fb03 f202 	mul.w	r2, r3, r2
 800123c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001240:	4053      	eors	r3, r2
 8001242:	60fb      	str	r3, [r7, #12]
	for (int16_t i = 1; (i + 2) < results->rawlen; i++) {
 8001244:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001248:	b29b      	uxth	r3, r3
 800124a:	3301      	adds	r3, #1
 800124c:	b29b      	uxth	r3, r3
 800124e:	817b      	strh	r3, [r7, #10]
 8001250:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001254:	3302      	adds	r3, #2
 8001256:	687a      	ldr	r2, [r7, #4]
 8001258:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 800125c:	4293      	cmp	r3, r2
 800125e:	dbd3      	blt.n	8001208 <decodeHashIRED+0x20>
	}

	results->value = hash;
 8001260:	68fa      	ldr	r2, [r7, #12]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	601a      	str	r2, [r3, #0]
	results->bits = 32;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2220      	movs	r2, #32
 800126a:	809a      	strh	r2, [r3, #4]

	return 1;
 800126c:	2301      	movs	r3, #1
}
 800126e:	4618      	mov	r0, r3
 8001270:	3710      	adds	r7, #16
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	811c9dc5 	.word	0x811c9dc5
 800127c:	01000193 	.word	0x01000193

08001280 <ST7565_Select>:
uint8_t lcdRdy = 1;

//------------------------------------------------------------------------------

inline static void ST7565_Select()
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
#ifdef CS_PORT
	//-- если захотим переделать под HAL ------------------
	#ifdef ST7565_SPI_HAL
		//HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
		CS_GPIO_Port->BSRR = ( CS_Pin << 16 );
 8001284:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001288:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800128c:	619a      	str	r2, [r3, #24]
	#ifdef ST7565_SPI_CMSIS
		CS_GPIO_Port->BSRR = ( CS_Pin << 16 );
	#endif
	//-----------------------------------------------------
#endif
}
 800128e:	bf00      	nop
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr

08001298 <ST7565_Unselect>:

//------------------------------------------------------------------------------

inline static void ST7565_Unselect()
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
#ifdef CS_PORT
	//-- если захотим переделать под HAL ------------------
	#ifdef ST7565_SPI_HAL
		//HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
		CS_GPIO_Port->BSRR = CS_Pin;
 800129c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80012a0:	2210      	movs	r2, #16
 80012a2:	619a      	str	r2, [r3, #24]
	#ifdef ST7565_SPI_CMSIS
		CS_GPIO_Port->BSRR = CS_Pin;
	#endif
	//-----------------------------------------------------
#endif
}
 80012a4:	bf00      	nop
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
	...

080012b0 <ST7565_Reset>:
	* @brief	 ( описание ):  аппарвтный сброс дисплея
	* @param	( параметры ):	
	* @return  ( возвращает ):	
*******************************************************************************/
void ST7565_Reset()
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
	RES_GPIO_Port->BSRR = (RES_Pin << 16);//HAL_GPIO_WritePin(RES_GPIO_Port, RES_Pin, GPIO_PIN_RESET );
 80012b4:	4b07      	ldr	r3, [pc, #28]	; (80012d4 <ST7565_Reset+0x24>)
 80012b6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80012ba:	619a      	str	r2, [r3, #24]
	HAL_Delay(1);
 80012bc:	2001      	movs	r0, #1
 80012be:	f006 fbc9 	bl	8007a54 <HAL_Delay>
	
	RES_GPIO_Port->BSRR = RES_Pin;//HAL_GPIO_WritePin(RES_GPIO_Port, RES_Pin, GPIO_PIN_SET );
 80012c2:	4b04      	ldr	r3, [pc, #16]	; (80012d4 <ST7565_Reset+0x24>)
 80012c4:	2204      	movs	r2, #4
 80012c6:	619a      	str	r2, [r3, #24]
	HAL_Delay(1);
 80012c8:	2001      	movs	r0, #1
 80012ca:	f006 fbc3 	bl	8007a54 <HAL_Delay>
}
 80012ce:	bf00      	nop
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	48000c00 	.word	0x48000c00

080012d8 <ST7565_w_dats>:
//--------------------------------------------------------------------------------
#ifdef SET_NEW_PROC
inline static void ST7565_w_dats(uint8_t *Data, uint16_t len)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	460b      	mov	r3, r1
 80012e2:	807b      	strh	r3, [r7, #2]
	DC_GPIO_Port->BSRR = DC_Pin;//HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 80012e4:	4b1d      	ldr	r3, [pc, #116]	; (800135c <ST7565_w_dats+0x84>)
 80012e6:	2220      	movs	r2, #32
 80012e8:	619a      	str	r2, [r3, #24]

	if (with_dma) {
 80012ea:	4b1d      	ldr	r3, [pc, #116]	; (8001360 <ST7565_w_dats+0x88>)
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d018      	beq.n	8001324 <ST7565_w_dats+0x4c>
		lcdRdy = 0;
 80012f2:	4b1c      	ldr	r3, [pc, #112]	; (8001364 <ST7565_w_dats+0x8c>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	701a      	strb	r2, [r3, #0]
		if (HAL_SPI_Transmit_DMA(&ST7565_SPI_HAL, Data, len) != HAL_OK) devError |= devLCD;
 80012f8:	887b      	ldrh	r3, [r7, #2]
 80012fa:	461a      	mov	r2, r3
 80012fc:	6879      	ldr	r1, [r7, #4]
 80012fe:	481a      	ldr	r0, [pc, #104]	; (8001368 <ST7565_w_dats+0x90>)
 8001300:	f00b fa64 	bl	800c7cc <HAL_SPI_Transmit_DMA>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d006      	beq.n	8001318 <ST7565_w_dats+0x40>
 800130a:	4b18      	ldr	r3, [pc, #96]	; (800136c <ST7565_w_dats+0x94>)
 800130c:	881b      	ldrh	r3, [r3, #0]
 800130e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001312:	b29a      	uxth	r2, r3
 8001314:	4b15      	ldr	r3, [pc, #84]	; (800136c <ST7565_w_dats+0x94>)
 8001316:	801a      	strh	r2, [r3, #0]
		while (!lcdRdy) {};
 8001318:	bf00      	nop
 800131a:	4b12      	ldr	r3, [pc, #72]	; (8001364 <ST7565_w_dats+0x8c>)
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d0fb      	beq.n	800131a <ST7565_w_dats+0x42>
	} else {
		if (HAL_SPI_Transmit(&ST7565_SPI_HAL, Data, len, HAL_MAX_DELAY) != HAL_OK) devError |= devLCD;
		while (HAL_SPI_GetState(&ST7565_SPI_HAL) != HAL_SPI_STATE_READY) {};
	}
}
 8001322:	e017      	b.n	8001354 <ST7565_w_dats+0x7c>
		if (HAL_SPI_Transmit(&ST7565_SPI_HAL, Data, len, HAL_MAX_DELAY) != HAL_OK) devError |= devLCD;
 8001324:	887a      	ldrh	r2, [r7, #2]
 8001326:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800132a:	6879      	ldr	r1, [r7, #4]
 800132c:	480e      	ldr	r0, [pc, #56]	; (8001368 <ST7565_w_dats+0x90>)
 800132e:	f00a fd9c 	bl	800be6a <HAL_SPI_Transmit>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d006      	beq.n	8001346 <ST7565_w_dats+0x6e>
 8001338:	4b0c      	ldr	r3, [pc, #48]	; (800136c <ST7565_w_dats+0x94>)
 800133a:	881b      	ldrh	r3, [r3, #0]
 800133c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001340:	b29a      	uxth	r2, r3
 8001342:	4b0a      	ldr	r3, [pc, #40]	; (800136c <ST7565_w_dats+0x94>)
 8001344:	801a      	strh	r2, [r3, #0]
		while (HAL_SPI_GetState(&ST7565_SPI_HAL) != HAL_SPI_STATE_READY) {};
 8001346:	bf00      	nop
 8001348:	4807      	ldr	r0, [pc, #28]	; (8001368 <ST7565_w_dats+0x90>)
 800134a:	f00b fddd 	bl	800cf08 <HAL_SPI_GetState>
 800134e:	4603      	mov	r3, r0
 8001350:	2b01      	cmp	r3, #1
 8001352:	d1f9      	bne.n	8001348 <ST7565_w_dats+0x70>
}
 8001354:	bf00      	nop
 8001356:	3708      	adds	r7, #8
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	48000400 	.word	0x48000400
 8001360:	20000a6c 	.word	0x20000a6c
 8001364:	20000000 	.word	0x20000000
 8001368:	20000b78 	.word	0x20000b78
 800136c:	20001bc8 	.word	0x20001bc8

08001370 <ST7565_w_cmds>:
//
inline static void ST7565_w_cmds(uint8_t *Command, uint16_t len)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	460b      	mov	r3, r1
 800137a:	807b      	strh	r3, [r7, #2]
	DC_GPIO_Port->BSRR = (DC_Pin << 16);//HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
 800137c:	4b1e      	ldr	r3, [pc, #120]	; (80013f8 <ST7565_w_cmds+0x88>)
 800137e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001382:	619a      	str	r2, [r3, #24]

	if (with_dma) {
 8001384:	4b1d      	ldr	r3, [pc, #116]	; (80013fc <ST7565_w_cmds+0x8c>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d018      	beq.n	80013be <ST7565_w_cmds+0x4e>
		lcdRdy = 0;
 800138c:	4b1c      	ldr	r3, [pc, #112]	; (8001400 <ST7565_w_cmds+0x90>)
 800138e:	2200      	movs	r2, #0
 8001390:	701a      	strb	r2, [r3, #0]
		if (HAL_SPI_Transmit_DMA(&ST7565_SPI_HAL, Command, len) != HAL_OK) devError |= devLCD;
 8001392:	887b      	ldrh	r3, [r7, #2]
 8001394:	461a      	mov	r2, r3
 8001396:	6879      	ldr	r1, [r7, #4]
 8001398:	481a      	ldr	r0, [pc, #104]	; (8001404 <ST7565_w_cmds+0x94>)
 800139a:	f00b fa17 	bl	800c7cc <HAL_SPI_Transmit_DMA>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d006      	beq.n	80013b2 <ST7565_w_cmds+0x42>
 80013a4:	4b18      	ldr	r3, [pc, #96]	; (8001408 <ST7565_w_cmds+0x98>)
 80013a6:	881b      	ldrh	r3, [r3, #0]
 80013a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013ac:	b29a      	uxth	r2, r3
 80013ae:	4b16      	ldr	r3, [pc, #88]	; (8001408 <ST7565_w_cmds+0x98>)
 80013b0:	801a      	strh	r2, [r3, #0]
		while (!lcdRdy) {};
 80013b2:	bf00      	nop
 80013b4:	4b12      	ldr	r3, [pc, #72]	; (8001400 <ST7565_w_cmds+0x90>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d0fb      	beq.n	80013b4 <ST7565_w_cmds+0x44>
	} else {
		if (HAL_SPI_Transmit(&ST7565_SPI_HAL, Command, len, HAL_MAX_DELAY) != HAL_OK) devError |= devLCD;
		while (HAL_SPI_GetState(&ST7565_SPI_HAL) != HAL_SPI_STATE_READY) {};
	}
}
 80013bc:	e017      	b.n	80013ee <ST7565_w_cmds+0x7e>
		if (HAL_SPI_Transmit(&ST7565_SPI_HAL, Command, len, HAL_MAX_DELAY) != HAL_OK) devError |= devLCD;
 80013be:	887a      	ldrh	r2, [r7, #2]
 80013c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013c4:	6879      	ldr	r1, [r7, #4]
 80013c6:	480f      	ldr	r0, [pc, #60]	; (8001404 <ST7565_w_cmds+0x94>)
 80013c8:	f00a fd4f 	bl	800be6a <HAL_SPI_Transmit>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d006      	beq.n	80013e0 <ST7565_w_cmds+0x70>
 80013d2:	4b0d      	ldr	r3, [pc, #52]	; (8001408 <ST7565_w_cmds+0x98>)
 80013d4:	881b      	ldrh	r3, [r3, #0]
 80013d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013da:	b29a      	uxth	r2, r3
 80013dc:	4b0a      	ldr	r3, [pc, #40]	; (8001408 <ST7565_w_cmds+0x98>)
 80013de:	801a      	strh	r2, [r3, #0]
		while (HAL_SPI_GetState(&ST7565_SPI_HAL) != HAL_SPI_STATE_READY) {};
 80013e0:	bf00      	nop
 80013e2:	4808      	ldr	r0, [pc, #32]	; (8001404 <ST7565_w_cmds+0x94>)
 80013e4:	f00b fd90 	bl	800cf08 <HAL_SPI_GetState>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d1f9      	bne.n	80013e2 <ST7565_w_cmds+0x72>
}
 80013ee:	bf00      	nop
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	48000400 	.word	0x48000400
 80013fc:	20000a6c 	.word	0x20000a6c
 8001400:	20000000 	.word	0x20000000
 8001404:	20000b78 	.word	0x20000b78
 8001408:	20001bc8 	.word	0x20001bc8

0800140c <ST7565_SetX>:
inline static void ST7565_SetX(uint8_t x)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
 8001412:	4603      	mov	r3, r0
 8001414:	71fb      	strb	r3, [r7, #7]
	uint8_t bytes[] = { ((x & 0xf0) >> 4) | 0x10, x & 0x0f };
 8001416:	79fb      	ldrb	r3, [r7, #7]
 8001418:	091b      	lsrs	r3, r3, #4
 800141a:	b2db      	uxtb	r3, r3
 800141c:	f043 0310 	orr.w	r3, r3, #16
 8001420:	b2db      	uxtb	r3, r3
 8001422:	733b      	strb	r3, [r7, #12]
 8001424:	79fb      	ldrb	r3, [r7, #7]
 8001426:	f003 030f 	and.w	r3, r3, #15
 800142a:	b2db      	uxtb	r3, r3
 800142c:	737b      	strb	r3, [r7, #13]
	ST7565_w_cmds(bytes, 2);
 800142e:	f107 030c 	add.w	r3, r7, #12
 8001432:	2102      	movs	r1, #2
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff ff9b 	bl	8001370 <ST7565_w_cmds>
}
 800143a:	bf00      	nop
 800143c:	3710      	adds	r7, #16
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}

08001442 <ST7565_SetY>:
//
inline static void ST7565_SetY(uint8_t y)
{
 8001442:	b580      	push	{r7, lr}
 8001444:	b084      	sub	sp, #16
 8001446:	af00      	add	r7, sp, #0
 8001448:	4603      	mov	r3, r0
 800144a:	71fb      	strb	r3, [r7, #7]
	uint8_t byte = (y & 0x07) | 0xB0;
 800144c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001450:	f003 0307 	and.w	r3, r3, #7
 8001454:	b25b      	sxtb	r3, r3
 8001456:	f063 034f 	orn	r3, r3, #79	; 0x4f
 800145a:	b25b      	sxtb	r3, r3
 800145c:	b2db      	uxtb	r3, r3
 800145e:	73fb      	strb	r3, [r7, #15]
	ST7565_w_cmds(&byte, 1);
 8001460:	f107 030f 	add.w	r3, r7, #15
 8001464:	2101      	movs	r1, #1
 8001466:	4618      	mov	r0, r3
 8001468:	f7ff ff82 	bl	8001370 <ST7565_w_cmds>
}
 800146c:	bf00      	nop
 800146e:	3710      	adds	r7, #16
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}

08001474 <ST7565_Display_fill>:
								( данные отправляются сразу на дисплей и записываются в буфер кадра )
								Функцию ST7565_Update() вызывать не нужно
	* @return  ( возвращает ):	
*******************************************************************************/
void ST7565_Display_fill(uint8_t fill)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	4603      	mov	r3, r0
 800147c:	71fb      	strb	r3, [r7, #7]
uint8_t page;//, column;
	
	memset(ST7565_buffer, fill, (SCREEN_WIDTH * SCREEN_HEIGHT / 8));	// отчистка памяти заполняем массив значением 0x00
 800147e:	79fb      	ldrb	r3, [r7, #7]
 8001480:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001484:	4619      	mov	r1, r3
 8001486:	4814      	ldr	r0, [pc, #80]	; (80014d8 <ST7565_Display_fill+0x64>)
 8001488:	f00e fafe 	bl	800fa88 <memset>
	
	ST7565_Select();
 800148c:	f7ff fef8 	bl	8001280 <ST7565_Select>
#ifdef SET_NEW_PROC
	uint8_t dta[] = {0, 0x10, 0};
 8001490:	4a12      	ldr	r2, [pc, #72]	; (80014dc <ST7565_Display_fill+0x68>)
 8001492:	f107 030c 	add.w	r3, r7, #12
 8001496:	6812      	ldr	r2, [r2, #0]
 8001498:	4611      	mov	r1, r2
 800149a:	8019      	strh	r1, [r3, #0]
 800149c:	3302      	adds	r3, #2
 800149e:	0c12      	lsrs	r2, r2, #16
 80014a0:	701a      	strb	r2, [r3, #0]
#endif
	for (page = 0xB7; page >= 0xB0; page-- ) {
 80014a2:	23b7      	movs	r3, #183	; 0xb7
 80014a4:	73fb      	strb	r3, [r7, #15]
 80014a6:	e00e      	b.n	80014c6 <ST7565_Display_fill+0x52>
		ST7565_w_cmd(page);  //set page address
		ST7565_w_cmd(0x10);  //set Column address MSB   
		ST7565_w_cmd(0x00);  //set column address LSB
		for (column = 0; column < 131; column++) ST7565_w_dat(fill);
#else
		dta[0] = page;
 80014a8:	7bfb      	ldrb	r3, [r7, #15]
 80014aa:	733b      	strb	r3, [r7, #12]
		ST7565_w_cmds(dta, sizeof(dta));
 80014ac:	f107 030c 	add.w	r3, r7, #12
 80014b0:	2103      	movs	r1, #3
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7ff ff5c 	bl	8001370 <ST7565_w_cmds>
		ST7565_w_dats(ST7565_buffer, 131);
 80014b8:	2183      	movs	r1, #131	; 0x83
 80014ba:	4807      	ldr	r0, [pc, #28]	; (80014d8 <ST7565_Display_fill+0x64>)
 80014bc:	f7ff ff0c 	bl	80012d8 <ST7565_w_dats>
	for (page = 0xB7; page >= 0xB0; page-- ) {
 80014c0:	7bfb      	ldrb	r3, [r7, #15]
 80014c2:	3b01      	subs	r3, #1
 80014c4:	73fb      	strb	r3, [r7, #15]
 80014c6:	7bfb      	ldrb	r3, [r7, #15]
 80014c8:	2baf      	cmp	r3, #175	; 0xaf
 80014ca:	d8ed      	bhi.n	80014a8 <ST7565_Display_fill+0x34>
#endif
    }
		
	ST7565_Unselect();
 80014cc:	f7ff fee4 	bl	8001298 <ST7565_Unselect>
}
 80014d0:	bf00      	nop
 80014d2:	3710      	adds	r7, #16
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	2000066c 	.word	0x2000066c
 80014dc:	08014030 	.word	0x08014030

080014e0 <ST7565_Init>:
	* @brief	 ( описание ):  инициализация дисплея ( при другой инициализации можно поменять параметры внутри функции )
	* @param	( параметры ):	
	* @return  ( возвращает ):	
*******************************************************************************/
void ST7565_Init()
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
	ST7565_Select();
 80014e6:	f7ff fecb 	bl	8001280 <ST7565_Select>
	ST7565_w_cmd(CMD_DISPLAY_ON);    		//Display on
	// Инвертирование экрана CMD_SET_DISP_NORMAL - OFF    CMD_SET_DISP_REVERSE - ON
	ST7565_w_cmd(CMD_SET_DISP_NORMAL);
	//HAL_Delay(1);//1
#else
	uint8_t dta[] = {
 80014ea:	4a09      	ldr	r2, [pc, #36]	; (8001510 <ST7565_Init+0x30>)
 80014ec:	1d3b      	adds	r3, r7, #4
 80014ee:	ca07      	ldmia	r2, {r0, r1, r2}
 80014f0:	c303      	stmia	r3!, {r0, r1}
 80014f2:	801a      	strh	r2, [r3, #0]
	};
	#if defined (SCREEN_ORIENTATION_180)
		dta[1] = CMD_SET_ADC_REVERSE;    	//ADC selection(SEG0->SEG128)  CMD_SET_ADC_NORMAL горизонтально «нормальная» (не перевернутая)
		dta[2] = CMD_SET_COM_NORMAL;    		//SHL selection(COM0->COM64)   CMD_SET_COM_REVERSE вертикально «перевернутая» (дополняет команду выше)
	#endif
	ST7565_w_cmds(dta, sizeof(dta));
 80014f4:	1d3b      	adds	r3, r7, #4
 80014f6:	210a      	movs	r1, #10
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff ff39 	bl	8001370 <ST7565_w_cmds>
#endif
	
	ST7565_Display_fill(0);
 80014fe:	2000      	movs	r0, #0
 8001500:	f7ff ffb8 	bl	8001474 <ST7565_Display_fill>
	
	ST7565_Unselect();
 8001504:	f7ff fec8 	bl	8001298 <ST7565_Unselect>
   
}
 8001508:	bf00      	nop
 800150a:	3710      	adds	r7, #16
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	08014034 	.word	0x08014034

08001514 <ST7565_CMD_DISPLAY>:
//--------------------------------------------------------------------------------
void ST7565_CMD_DISPLAY(uint8_t byte)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	4603      	mov	r3, r0
 800151c:	71fb      	strb	r3, [r7, #7]
#ifdef SET_NEW_PROC
	ST7565_w_cmds(&byte, 1);
 800151e:	1dfb      	adds	r3, r7, #7
 8001520:	2101      	movs	r1, #1
 8001522:	4618      	mov	r0, r3
 8001524:	f7ff ff24 	bl	8001370 <ST7565_w_cmds>

	if (byte == CMD_DISPLAY_OFF) OFF_DISPLAY();
 8001528:	79fb      	ldrb	r3, [r7, #7]
 800152a:	2bae      	cmp	r3, #174	; 0xae
 800152c:	d103      	bne.n	8001536 <ST7565_CMD_DISPLAY+0x22>
 800152e:	4b06      	ldr	r3, [pc, #24]	; (8001548 <ST7565_CMD_DISPLAY+0x34>)
 8001530:	2201      	movs	r2, #1
 8001532:	619a      	str	r2, [r3, #24]
							else ON_DISPLAY();
#else
	ST7565_w_cmd(byte);
#endif
}
 8001534:	e003      	b.n	800153e <ST7565_CMD_DISPLAY+0x2a>
							else ON_DISPLAY();
 8001536:	4b04      	ldr	r3, [pc, #16]	; (8001548 <ST7565_CMD_DISPLAY+0x34>)
 8001538:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800153c:	619a      	str	r2, [r3, #24]
}
 800153e:	bf00      	nop
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	48000800 	.word	0x48000800

0800154c <ST7565_Draw_pixel>:
	* @param	( параметры ):	координата X(0 - 127) и координата Y(0 - 63)  color 1 or 0
	* @return  ( возвращает ):	
*******************************************************************************/
// X(0 - 127)  Y(0 - 63)
void ST7565_Draw_pixel(int16_t x, int16_t y, uint8_t color)
{
 800154c:	b480      	push	{r7}
 800154e:	b085      	sub	sp, #20
 8001550:	af00      	add	r7, sp, #0
 8001552:	4603      	mov	r3, r0
 8001554:	80fb      	strh	r3, [r7, #6]
 8001556:	460b      	mov	r3, r1
 8001558:	80bb      	strh	r3, [r7, #4]
 800155a:	4613      	mov	r3, r2
 800155c:	70fb      	strb	r3, [r7, #3]
    if (x >= SCREEN_WIDTH || x < 0 || y >= SCREEN_HEIGHT || y < 0) return;
 800155e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001562:	2b7f      	cmp	r3, #127	; 0x7f
 8001564:	dc4c      	bgt.n	8001600 <ST7565_Draw_pixel+0xb4>
 8001566:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800156a:	2b00      	cmp	r3, #0
 800156c:	db48      	blt.n	8001600 <ST7565_Draw_pixel+0xb4>
 800156e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001572:	2b3f      	cmp	r3, #63	; 0x3f
 8001574:	dc44      	bgt.n	8001600 <ST7565_Draw_pixel+0xb4>
 8001576:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800157a:	2b00      	cmp	r3, #0
 800157c:	db40      	blt.n	8001600 <ST7565_Draw_pixel+0xb4>

    uint16_t array_pos = x + ((y >> 3) * SCREEN_WIDTH );
 800157e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001582:	10db      	asrs	r3, r3, #3
 8001584:	b21b      	sxth	r3, r3
 8001586:	b29b      	uxth	r3, r3
 8001588:	01db      	lsls	r3, r3, #7
 800158a:	b29a      	uxth	r2, r3
 800158c:	88fb      	ldrh	r3, [r7, #6]
 800158e:	4413      	add	r3, r2
 8001590:	81fb      	strh	r3, [r7, #14]

    if (color) {
 8001592:	78fb      	ldrb	r3, [r7, #3]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d018      	beq.n	80015ca <ST7565_Draw_pixel+0x7e>
        ST7565_buffer[array_pos] |= 1 << (y % 8);
 8001598:	89fb      	ldrh	r3, [r7, #14]
 800159a:	4a1c      	ldr	r2, [pc, #112]	; (800160c <ST7565_Draw_pixel+0xc0>)
 800159c:	5cd3      	ldrb	r3, [r2, r3]
 800159e:	b25a      	sxtb	r2, r3
 80015a0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80015a4:	4259      	negs	r1, r3
 80015a6:	f003 0307 	and.w	r3, r3, #7
 80015aa:	f001 0107 	and.w	r1, r1, #7
 80015ae:	bf58      	it	pl
 80015b0:	424b      	negpl	r3, r1
 80015b2:	b21b      	sxth	r3, r3
 80015b4:	4619      	mov	r1, r3
 80015b6:	2301      	movs	r3, #1
 80015b8:	408b      	lsls	r3, r1
 80015ba:	b25b      	sxtb	r3, r3
 80015bc:	4313      	orrs	r3, r2
 80015be:	b25a      	sxtb	r2, r3
 80015c0:	89fb      	ldrh	r3, [r7, #14]
 80015c2:	b2d1      	uxtb	r1, r2
 80015c4:	4a11      	ldr	r2, [pc, #68]	; (800160c <ST7565_Draw_pixel+0xc0>)
 80015c6:	54d1      	strb	r1, [r2, r3]
 80015c8:	e01b      	b.n	8001602 <ST7565_Draw_pixel+0xb6>
    } else {
        ST7565_buffer[array_pos] &= 0xFF ^ 1 << (y % 8);
 80015ca:	89fb      	ldrh	r3, [r7, #14]
 80015cc:	4a0f      	ldr	r2, [pc, #60]	; (800160c <ST7565_Draw_pixel+0xc0>)
 80015ce:	5cd3      	ldrb	r3, [r2, r3]
 80015d0:	b25a      	sxtb	r2, r3
 80015d2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80015d6:	4259      	negs	r1, r3
 80015d8:	f003 0307 	and.w	r3, r3, #7
 80015dc:	f001 0107 	and.w	r1, r1, #7
 80015e0:	bf58      	it	pl
 80015e2:	424b      	negpl	r3, r1
 80015e4:	b21b      	sxth	r3, r3
 80015e6:	4619      	mov	r1, r3
 80015e8:	2301      	movs	r3, #1
 80015ea:	408b      	lsls	r3, r1
 80015ec:	b25b      	sxtb	r3, r3
 80015ee:	43db      	mvns	r3, r3
 80015f0:	b25b      	sxtb	r3, r3
 80015f2:	4013      	ands	r3, r2
 80015f4:	b25a      	sxtb	r2, r3
 80015f6:	89fb      	ldrh	r3, [r7, #14]
 80015f8:	b2d1      	uxtb	r1, r2
 80015fa:	4a04      	ldr	r2, [pc, #16]	; (800160c <ST7565_Draw_pixel+0xc0>)
 80015fc:	54d1      	strb	r1, [r2, r3]
 80015fe:	e000      	b.n	8001602 <ST7565_Draw_pixel+0xb6>
    if (x >= SCREEN_WIDTH || x < 0 || y >= SCREEN_HEIGHT || y < 0) return;
 8001600:	bf00      	nop
    }
}
 8001602:	3714      	adds	r7, #20
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr
 800160c:	2000066c 	.word	0x2000066c

08001610 <ST7565_Update>:
	* @brief	 ( описание ):  вывод буффера кадра на дисплей
	* @param	( параметры ):	
	* @return  ( возвращает ):	
*******************************************************************************/
void ST7565_Update()
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
uint8_t x, y;
		
	ST7565_Select();
 8001616:	f7ff fe33 	bl	8001280 <ST7565_Select>

  	for (y = 0; y < 8; y++) {
 800161a:	2300      	movs	r3, #0
 800161c:	71bb      	strb	r3, [r7, #6]
 800161e:	e01d      	b.n	800165c <ST7565_Update+0x4c>
		ST7565_SetX(0);	
 8001620:	2000      	movs	r0, #0
 8001622:	f7ff fef3 	bl	800140c <ST7565_SetX>
		ST7565_SetY(y);
 8001626:	79bb      	ldrb	r3, [r7, #6]
 8001628:	4618      	mov	r0, r3
 800162a:	f7ff ff0a 	bl	8001442 <ST7565_SetY>
		for (x = 0; x < 128; x++) {
 800162e:	2300      	movs	r3, #0
 8001630:	71fb      	strb	r3, [r7, #7]
 8001632:	e00c      	b.n	800164e <ST7565_Update+0x3e>
			ST7565_w_dats(&ST7565_buffer[x + 128 * y], 1);
 8001634:	79fa      	ldrb	r2, [r7, #7]
 8001636:	79bb      	ldrb	r3, [r7, #6]
 8001638:	01db      	lsls	r3, r3, #7
 800163a:	4413      	add	r3, r2
 800163c:	4a0d      	ldr	r2, [pc, #52]	; (8001674 <ST7565_Update+0x64>)
 800163e:	4413      	add	r3, r2
 8001640:	2101      	movs	r1, #1
 8001642:	4618      	mov	r0, r3
 8001644:	f7ff fe48 	bl	80012d8 <ST7565_w_dats>
		for (x = 0; x < 128; x++) {
 8001648:	79fb      	ldrb	r3, [r7, #7]
 800164a:	3301      	adds	r3, #1
 800164c:	71fb      	strb	r3, [r7, #7]
 800164e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001652:	2b00      	cmp	r3, #0
 8001654:	daee      	bge.n	8001634 <ST7565_Update+0x24>
  	for (y = 0; y < 8; y++) {
 8001656:	79bb      	ldrb	r3, [r7, #6]
 8001658:	3301      	adds	r3, #1
 800165a:	71bb      	strb	r3, [r7, #6]
 800165c:	79bb      	ldrb	r3, [r7, #6]
 800165e:	2b07      	cmp	r3, #7
 8001660:	d9de      	bls.n	8001620 <ST7565_Update+0x10>
		}
	}
	
	ST7565_Unselect();
 8001662:	f7ff fe19 	bl	8001298 <ST7565_Unselect>
	HAL_Delay(50);//(100);
 8001666:	2032      	movs	r0, #50	; 0x32
 8001668:	f006 f9f4 	bl	8007a54 <HAL_Delay>
}
 800166c:	bf00      	nop
 800166e:	3708      	adds	r7, #8
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	2000066c 	.word	0x2000066c

08001678 <ST7565_DrawChar>:
	* @brief	 ( описание ):  функция записывает 1 символ в буфер кадра
	* @param	( параметры ):	координаты X(0 - 127)  Y(0 - 63), символ, шрифт, множитель, цвет 1 или 0
	* @return  ( возвращает ):	
*******************************************************************************/
void ST7565_DrawChar(int16_t x, int16_t y, unsigned char ch, FontDef_t* Font, uint8_t multiplier, uint8_t color)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b088      	sub	sp, #32
 800167c:	af00      	add	r7, sp, #0
 800167e:	607b      	str	r3, [r7, #4]
 8001680:	4603      	mov	r3, r0
 8001682:	81fb      	strh	r3, [r7, #14]
 8001684:	460b      	mov	r3, r1
 8001686:	81bb      	strh	r3, [r7, #12]
 8001688:	4613      	mov	r3, r2
 800168a:	72fb      	strb	r3, [r7, #11]
uint16_t i, j;
uint16_t b;
int16_t X = x, Y = y;
 800168c:	89fb      	ldrh	r3, [r7, #14]
 800168e:	833b      	strh	r3, [r7, #24]
 8001690:	89bb      	ldrh	r3, [r7, #12]
 8001692:	82fb      	strh	r3, [r7, #22]
int16_t xx, yy;
	
	if (multiplier < 1) multiplier = 1;
 8001694:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001698:	2b00      	cmp	r3, #0
 800169a:	d102      	bne.n	80016a2 <ST7565_DrawChar+0x2a>
 800169c:	2301      	movs	r3, #1
 800169e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	
	// Check available space in LCD
	if (SCREEN_WIDTH >= ( x + Font->FontWidth) || SCREEN_HEIGHT >= ( y + Font->FontHeight)) {
 80016a2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80016a6:	687a      	ldr	r2, [r7, #4]
 80016a8:	7812      	ldrb	r2, [r2, #0]
 80016aa:	4413      	add	r3, r2
 80016ac:	2b80      	cmp	r3, #128	; 0x80
 80016ae:	dd07      	ble.n	80016c0 <ST7565_DrawChar+0x48>
 80016b0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	7852      	ldrb	r2, [r2, #1]
 80016b8:	4413      	add	r3, r2
 80016ba:	2b40      	cmp	r3, #64	; 0x40
 80016bc:	f300 8154 	bgt.w	8001968 <ST7565_DrawChar+0x2f0>
		// Go through font
		for (i = 0; i < Font->FontHeight; i++) {
 80016c0:	2300      	movs	r3, #0
 80016c2:	83fb      	strh	r3, [r7, #30]
 80016c4:	e149      	b.n	800195a <ST7565_DrawChar+0x2e2>
			if (ch < 127) {
 80016c6:	7afb      	ldrb	r3, [r7, #11]
 80016c8:	2b7e      	cmp	r3, #126	; 0x7e
 80016ca:	d80f      	bhi.n	80016ec <ST7565_DrawChar+0x74>
				b = Font->data[(ch - 32) * Font->FontHeight + i];
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	f8d3 2002 	ldr.w	r2, [r3, #2]
 80016d2:	7afb      	ldrb	r3, [r7, #11]
 80016d4:	3b20      	subs	r3, #32
 80016d6:	6879      	ldr	r1, [r7, #4]
 80016d8:	7849      	ldrb	r1, [r1, #1]
 80016da:	fb03 f101 	mul.w	r1, r3, r1
 80016de:	8bfb      	ldrh	r3, [r7, #30]
 80016e0:	440b      	add	r3, r1
 80016e2:	005b      	lsls	r3, r3, #1
 80016e4:	4413      	add	r3, r2
 80016e6:	881b      	ldrh	r3, [r3, #0]
 80016e8:	837b      	strh	r3, [r7, #26]
 80016ea:	e0af      	b.n	800184c <ST7565_DrawChar+0x1d4>
			} else if (ch > 191) {
 80016ec:	7afb      	ldrb	r3, [r7, #11]
 80016ee:	2bbf      	cmp	r3, #191	; 0xbf
 80016f0:	d90f      	bls.n	8001712 <ST7565_DrawChar+0x9a>
				// +96 это так как латинские символы и знаки в шрифтах занимают 96 позиций
				// и если в шрифте который содержит сперва латиницу и спец символы и потом 
				// только кирилицу то нужно добавлять 95 если шрифт 
				// содержит только кирилицу то +96 не нужно
				b = Font->data[((ch - 192) + 96) * Font->FontHeight + i];
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	f8d3 2002 	ldr.w	r2, [r3, #2]
 80016f8:	7afb      	ldrb	r3, [r7, #11]
 80016fa:	3b60      	subs	r3, #96	; 0x60
 80016fc:	6879      	ldr	r1, [r7, #4]
 80016fe:	7849      	ldrb	r1, [r1, #1]
 8001700:	fb03 f101 	mul.w	r1, r3, r1
 8001704:	8bfb      	ldrh	r3, [r7, #30]
 8001706:	440b      	add	r3, r1
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	4413      	add	r3, r2
 800170c:	881b      	ldrh	r3, [r3, #0]
 800170e:	837b      	strh	r3, [r7, #26]
 8001710:	e09c      	b.n	800184c <ST7565_DrawChar+0x1d4>
			} else if (ch == 168) {	// 168 символ по ASCII - Ё
 8001712:	7afb      	ldrb	r3, [r7, #11]
 8001714:	2ba8      	cmp	r3, #168	; 0xa8
 8001716:	d111      	bne.n	800173c <ST7565_DrawChar+0xc4>
				// 160 эллемент ( символ Ё ) 
				b = Font->data[160 * Font->FontHeight + i];
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	f8d3 2002 	ldr.w	r2, [r3, #2]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	785b      	ldrb	r3, [r3, #1]
 8001722:	4619      	mov	r1, r3
 8001724:	460b      	mov	r3, r1
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	440b      	add	r3, r1
 800172a:	015b      	lsls	r3, r3, #5
 800172c:	4619      	mov	r1, r3
 800172e:	8bfb      	ldrh	r3, [r7, #30]
 8001730:	440b      	add	r3, r1
 8001732:	005b      	lsls	r3, r3, #1
 8001734:	4413      	add	r3, r2
 8001736:	881b      	ldrh	r3, [r3, #0]
 8001738:	837b      	strh	r3, [r7, #26]
 800173a:	e087      	b.n	800184c <ST7565_DrawChar+0x1d4>
			} else if (ch == 184) {	// 184 символ по ASCII - ё
 800173c:	7afb      	ldrb	r3, [r7, #11]
 800173e:	2bb8      	cmp	r3, #184	; 0xb8
 8001740:	d111      	bne.n	8001766 <ST7565_DrawChar+0xee>
				// 161 эллемент  ( символ ё ) 
				b = Font->data[161 * Font->FontHeight + i];
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	f8d3 1002 	ldr.w	r1, [r3, #2]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	785b      	ldrb	r3, [r3, #1]
 800174c:	461a      	mov	r2, r3
 800174e:	4613      	mov	r3, r2
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	4413      	add	r3, r2
 8001754:	015b      	lsls	r3, r3, #5
 8001756:	441a      	add	r2, r3
 8001758:	8bfb      	ldrh	r3, [r7, #30]
 800175a:	4413      	add	r3, r2
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	440b      	add	r3, r1
 8001760:	881b      	ldrh	r3, [r3, #0]
 8001762:	837b      	strh	r3, [r7, #26]
 8001764:	e072      	b.n	800184c <ST7565_DrawChar+0x1d4>
			} else if (ch == 170) {	// 168 символ по ASCII - Є
 8001766:	7afb      	ldrb	r3, [r7, #11]
 8001768:	2baa      	cmp	r3, #170	; 0xaa
 800176a:	d10f      	bne.n	800178c <ST7565_DrawChar+0x114>
				// 162 эллемент ( символ Є )
				b = Font->data[162 * Font->FontHeight + i];
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f8d3 2002 	ldr.w	r2, [r3, #2]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	785b      	ldrb	r3, [r3, #1]
 8001776:	4619      	mov	r1, r3
 8001778:	23a2      	movs	r3, #162	; 0xa2
 800177a:	fb03 f101 	mul.w	r1, r3, r1
 800177e:	8bfb      	ldrh	r3, [r7, #30]
 8001780:	440b      	add	r3, r1
 8001782:	005b      	lsls	r3, r3, #1
 8001784:	4413      	add	r3, r2
 8001786:	881b      	ldrh	r3, [r3, #0]
 8001788:	837b      	strh	r3, [r7, #26]
 800178a:	e05f      	b.n	800184c <ST7565_DrawChar+0x1d4>
			} else if (ch == 175) {	// 184 символ по ASCII - Ї
 800178c:	7afb      	ldrb	r3, [r7, #11]
 800178e:	2baf      	cmp	r3, #175	; 0xaf
 8001790:	d10f      	bne.n	80017b2 <ST7565_DrawChar+0x13a>
				// 163 эллемент  ( символ Ї )
				b = Font->data[163 * Font->FontHeight + i];
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	f8d3 2002 	ldr.w	r2, [r3, #2]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	785b      	ldrb	r3, [r3, #1]
 800179c:	4619      	mov	r1, r3
 800179e:	23a3      	movs	r3, #163	; 0xa3
 80017a0:	fb03 f101 	mul.w	r1, r3, r1
 80017a4:	8bfb      	ldrh	r3, [r7, #30]
 80017a6:	440b      	add	r3, r1
 80017a8:	005b      	lsls	r3, r3, #1
 80017aa:	4413      	add	r3, r2
 80017ac:	881b      	ldrh	r3, [r3, #0]
 80017ae:	837b      	strh	r3, [r7, #26]
 80017b0:	e04c      	b.n	800184c <ST7565_DrawChar+0x1d4>
			} else if (ch == 178) {	// 168 символ по ASCII - І
 80017b2:	7afb      	ldrb	r3, [r7, #11]
 80017b4:	2bb2      	cmp	r3, #178	; 0xb2
 80017b6:	d10f      	bne.n	80017d8 <ST7565_DrawChar+0x160>
				// 164 эллемент ( символ І )
				b = Font->data[164 * Font->FontHeight + i];
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	f8d3 2002 	ldr.w	r2, [r3, #2]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	785b      	ldrb	r3, [r3, #1]
 80017c2:	4619      	mov	r1, r3
 80017c4:	23a4      	movs	r3, #164	; 0xa4
 80017c6:	fb03 f101 	mul.w	r1, r3, r1
 80017ca:	8bfb      	ldrh	r3, [r7, #30]
 80017cc:	440b      	add	r3, r1
 80017ce:	005b      	lsls	r3, r3, #1
 80017d0:	4413      	add	r3, r2
 80017d2:	881b      	ldrh	r3, [r3, #0]
 80017d4:	837b      	strh	r3, [r7, #26]
 80017d6:	e039      	b.n	800184c <ST7565_DrawChar+0x1d4>
			}
			else if (ch == 179) {	// 184 символ по ASCII - і
 80017d8:	7afb      	ldrb	r3, [r7, #11]
 80017da:	2bb3      	cmp	r3, #179	; 0xb3
 80017dc:	d111      	bne.n	8001802 <ST7565_DrawChar+0x18a>
				// 165 эллемент  ( символ і )
				b = Font->data[165 * Font->FontHeight + i];
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	f8d3 2002 	ldr.w	r2, [r3, #2]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	785b      	ldrb	r3, [r3, #1]
 80017e8:	4619      	mov	r1, r3
 80017ea:	460b      	mov	r3, r1
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	440b      	add	r3, r1
 80017f0:	0159      	lsls	r1, r3, #5
 80017f2:	4419      	add	r1, r3
 80017f4:	8bfb      	ldrh	r3, [r7, #30]
 80017f6:	440b      	add	r3, r1
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	4413      	add	r3, r2
 80017fc:	881b      	ldrh	r3, [r3, #0]
 80017fe:	837b      	strh	r3, [r7, #26]
 8001800:	e024      	b.n	800184c <ST7565_DrawChar+0x1d4>
			} else if (ch == 186) {	// 184 символ по ASCII - є
 8001802:	7afb      	ldrb	r3, [r7, #11]
 8001804:	2bba      	cmp	r3, #186	; 0xba
 8001806:	d10f      	bne.n	8001828 <ST7565_DrawChar+0x1b0>
				// 166 эллемент  ( символ є )
				b = Font->data[166 * Font->FontHeight + i];
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	f8d3 2002 	ldr.w	r2, [r3, #2]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	785b      	ldrb	r3, [r3, #1]
 8001812:	4619      	mov	r1, r3
 8001814:	23a6      	movs	r3, #166	; 0xa6
 8001816:	fb03 f101 	mul.w	r1, r3, r1
 800181a:	8bfb      	ldrh	r3, [r7, #30]
 800181c:	440b      	add	r3, r1
 800181e:	005b      	lsls	r3, r3, #1
 8001820:	4413      	add	r3, r2
 8001822:	881b      	ldrh	r3, [r3, #0]
 8001824:	837b      	strh	r3, [r7, #26]
 8001826:	e011      	b.n	800184c <ST7565_DrawChar+0x1d4>
			} else if (ch == 191) {	// 168 символ по ASCII - ї
 8001828:	7afb      	ldrb	r3, [r7, #11]
 800182a:	2bbf      	cmp	r3, #191	; 0xbf
 800182c:	d10e      	bne.n	800184c <ST7565_DrawChar+0x1d4>
				// 167 эллемент ( символ ї )
				b = Font->data[167 * Font->FontHeight + i];
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	f8d3 2002 	ldr.w	r2, [r3, #2]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	785b      	ldrb	r3, [r3, #1]
 8001838:	4619      	mov	r1, r3
 800183a:	23a7      	movs	r3, #167	; 0xa7
 800183c:	fb03 f101 	mul.w	r1, r3, r1
 8001840:	8bfb      	ldrh	r3, [r7, #30]
 8001842:	440b      	add	r3, r1
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	4413      	add	r3, r2
 8001848:	881b      	ldrh	r3, [r3, #0]
 800184a:	837b      	strh	r3, [r7, #26]
			}
			//-----------------------------------------------------------------------------
			
			for (j = 0; j < Font->FontWidth; j++) {
 800184c:	2300      	movs	r3, #0
 800184e:	83bb      	strh	r3, [r7, #28]
 8001850:	e071      	b.n	8001936 <ST7565_DrawChar+0x2be>
				if ((b << j) & 0x8000) {
 8001852:	8b7a      	ldrh	r2, [r7, #26]
 8001854:	8bbb      	ldrh	r3, [r7, #28]
 8001856:	fa02 f303 	lsl.w	r3, r2, r3
 800185a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d02d      	beq.n	80018be <ST7565_DrawChar+0x246>
					for (yy = 0; yy < multiplier; yy++){
 8001862:	2300      	movs	r3, #0
 8001864:	827b      	strh	r3, [r7, #18]
 8001866:	e023      	b.n	80018b0 <ST7565_DrawChar+0x238>
						for (xx = 0; xx < multiplier; xx++){
 8001868:	2300      	movs	r3, #0
 800186a:	82bb      	strh	r3, [r7, #20]
 800186c:	e014      	b.n	8001898 <ST7565_DrawChar+0x220>
							ST7565_Draw_pixel(X + xx, Y + yy, color);
 800186e:	8b3a      	ldrh	r2, [r7, #24]
 8001870:	8abb      	ldrh	r3, [r7, #20]
 8001872:	4413      	add	r3, r2
 8001874:	b29b      	uxth	r3, r3
 8001876:	b218      	sxth	r0, r3
 8001878:	8afa      	ldrh	r2, [r7, #22]
 800187a:	8a7b      	ldrh	r3, [r7, #18]
 800187c:	4413      	add	r3, r2
 800187e:	b29b      	uxth	r3, r3
 8001880:	b21b      	sxth	r3, r3
 8001882:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8001886:	4619      	mov	r1, r3
 8001888:	f7ff fe60 	bl	800154c <ST7565_Draw_pixel>
						for (xx = 0; xx < multiplier; xx++){
 800188c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001890:	b29b      	uxth	r3, r3
 8001892:	3301      	adds	r3, #1
 8001894:	b29b      	uxth	r3, r3
 8001896:	82bb      	strh	r3, [r7, #20]
 8001898:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800189c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80018a0:	429a      	cmp	r2, r3
 80018a2:	dbe4      	blt.n	800186e <ST7565_DrawChar+0x1f6>
					for (yy = 0; yy < multiplier; yy++){
 80018a4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80018a8:	b29b      	uxth	r3, r3
 80018aa:	3301      	adds	r3, #1
 80018ac:	b29b      	uxth	r3, r3
 80018ae:	827b      	strh	r3, [r7, #18]
 80018b0:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80018b4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80018b8:	429a      	cmp	r2, r3
 80018ba:	dbd5      	blt.n	8001868 <ST7565_DrawChar+0x1f0>
 80018bc:	e031      	b.n	8001922 <ST7565_DrawChar+0x2aa>
						}
					}
				} else {// если фон очищать то оставляем если чтоб фон оставался старый то коментируем эту часть -------------
					for (yy = 0; yy < multiplier; yy++){
 80018be:	2300      	movs	r3, #0
 80018c0:	827b      	strh	r3, [r7, #18]
 80018c2:	e028      	b.n	8001916 <ST7565_DrawChar+0x29e>
						for (xx = 0; xx < multiplier; xx++){
 80018c4:	2300      	movs	r3, #0
 80018c6:	82bb      	strh	r3, [r7, #20]
 80018c8:	e019      	b.n	80018fe <ST7565_DrawChar+0x286>
							ST7565_Draw_pixel(X + xx, Y + yy, !color);
 80018ca:	8b3a      	ldrh	r2, [r7, #24]
 80018cc:	8abb      	ldrh	r3, [r7, #20]
 80018ce:	4413      	add	r3, r2
 80018d0:	b29b      	uxth	r3, r3
 80018d2:	b218      	sxth	r0, r3
 80018d4:	8afa      	ldrh	r2, [r7, #22]
 80018d6:	8a7b      	ldrh	r3, [r7, #18]
 80018d8:	4413      	add	r3, r2
 80018da:	b29b      	uxth	r3, r3
 80018dc:	b219      	sxth	r1, r3
 80018de:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	bf0c      	ite	eq
 80018e6:	2301      	moveq	r3, #1
 80018e8:	2300      	movne	r3, #0
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	461a      	mov	r2, r3
 80018ee:	f7ff fe2d 	bl	800154c <ST7565_Draw_pixel>
						for (xx = 0; xx < multiplier; xx++){
 80018f2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80018f6:	b29b      	uxth	r3, r3
 80018f8:	3301      	adds	r3, #1
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	82bb      	strh	r3, [r7, #20]
 80018fe:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001902:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001906:	429a      	cmp	r2, r3
 8001908:	dbdf      	blt.n	80018ca <ST7565_DrawChar+0x252>
					for (yy = 0; yy < multiplier; yy++){
 800190a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800190e:	b29b      	uxth	r3, r3
 8001910:	3301      	adds	r3, #1
 8001912:	b29b      	uxth	r3, r3
 8001914:	827b      	strh	r3, [r7, #18]
 8001916:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800191a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800191e:	429a      	cmp	r2, r3
 8001920:	dbd0      	blt.n	80018c4 <ST7565_DrawChar+0x24c>
						}
					}
				}
				//----------------------------------------------------------------------------------------------------
				X += multiplier;
 8001922:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001926:	b29a      	uxth	r2, r3
 8001928:	8b3b      	ldrh	r3, [r7, #24]
 800192a:	4413      	add	r3, r2
 800192c:	b29b      	uxth	r3, r3
 800192e:	833b      	strh	r3, [r7, #24]
			for (j = 0; j < Font->FontWidth; j++) {
 8001930:	8bbb      	ldrh	r3, [r7, #28]
 8001932:	3301      	adds	r3, #1
 8001934:	83bb      	strh	r3, [r7, #28]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	b29b      	uxth	r3, r3
 800193c:	8bba      	ldrh	r2, [r7, #28]
 800193e:	429a      	cmp	r2, r3
 8001940:	d387      	bcc.n	8001852 <ST7565_DrawChar+0x1da>
			}
			X = x;
 8001942:	89fb      	ldrh	r3, [r7, #14]
 8001944:	833b      	strh	r3, [r7, #24]
			Y += multiplier;
 8001946:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800194a:	b29a      	uxth	r2, r3
 800194c:	8afb      	ldrh	r3, [r7, #22]
 800194e:	4413      	add	r3, r2
 8001950:	b29b      	uxth	r3, r3
 8001952:	82fb      	strh	r3, [r7, #22]
		for (i = 0; i < Font->FontHeight; i++) {
 8001954:	8bfb      	ldrh	r3, [r7, #30]
 8001956:	3301      	adds	r3, #1
 8001958:	83fb      	strh	r3, [r7, #30]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	785b      	ldrb	r3, [r3, #1]
 800195e:	b29b      	uxth	r3, r3
 8001960:	8bfa      	ldrh	r2, [r7, #30]
 8001962:	429a      	cmp	r2, r3
 8001964:	f4ff aeaf 	bcc.w	80016c6 <ST7565_DrawChar+0x4e>
		}
		
	}
}
 8001968:	bf00      	nop
 800196a:	3720      	adds	r7, #32
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}

08001970 <ST7565_Print>:
 * @brief	 ( описание ):  функция записывает строку в буфер кадра ( поддерживает кириллицу ( в том числе и Укр. язык) и латиницу
 * @param	( параметры ):	координаты X(0 - 127)  Y(0 - 63), символ, шрифт, множитель, цвет 1 или 0
 * @return  ( возвращает ):
*******************************************************************************/
void ST7565_Print(int16_t x, int16_t y, char *str, FontDef_t *Font, uint8_t multiplier, uint8_t color)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b088      	sub	sp, #32
 8001974:	af02      	add	r7, sp, #8
 8001976:	60ba      	str	r2, [r7, #8]
 8001978:	607b      	str	r3, [r7, #4]
 800197a:	4603      	mov	r3, r0
 800197c:	81fb      	strh	r3, [r7, #14]
 800197e:	460b      	mov	r3, r1
 8001980:	81bb      	strh	r3, [r7, #12]
unsigned char buff_char;
uint16_t len = strlen(str);
 8001982:	68b8      	ldr	r0, [r7, #8]
 8001984:	f7fe fc24 	bl	80001d0 <strlen>
 8001988:	4603      	mov	r3, r0
 800198a:	82bb      	strh	r3, [r7, #20]

	if (multiplier < 1) multiplier = 1;
 800198c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001990:	2b00      	cmp	r3, #0
 8001992:	f040 809c 	bne.w	8001ace <ST7565_Print+0x15e>
 8001996:	2301      	movs	r3, #1
 8001998:	f887 3020 	strb.w	r3, [r7, #32]
	
	while (len--) {
 800199c:	e097      	b.n	8001ace <ST7565_Print+0x15e>
		//---------------------------------------------------------------------
		// проверка на кириллицу UTF-8, если латиница то пропускаем if
		// Расширенные символы ASCII Win-1251 кириллица (код символа 128-255)
		// проверяем первый байт из двух ( так как UTF-8 ето два байта )
		// если он больше либо равен 0xC0 ( первый байт в кириллеце будет равен 0xD0 либо 0xD1 именно в алфавите )
		if ( (uint8_t)*str >= 0xC0 ) {	// код 0xC0 соответствует символу кириллица 'A' по ASCII Win-1251
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	2bbf      	cmp	r3, #191	; 0xbf
 80019a4:	d974      	bls.n	8001a90 <ST7565_Print+0x120>
			// проверяем какой именно байт первый 0xD0 либо 0xD1
			switch ((uint8_t)*str) {
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	2bd0      	cmp	r3, #208	; 0xd0
 80019ac:	d002      	beq.n	80019b4 <ST7565_Print+0x44>
 80019ae:	2bd1      	cmp	r3, #209	; 0xd1
 80019b0:	d02c      	beq.n	8001a0c <ST7565_Print+0x9c>
 80019b2:	e05b      	b.n	8001a6c <ST7565_Print+0xfc>
				case 0xD0:
				//{
					// увеличиваем массив так как нам нужен второй байт
					str++;
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	3301      	adds	r3, #1
 80019b8:	60bb      	str	r3, [r7, #8]
					// проверяем второй байт там сам символ
					if ((uint8_t)*str == 0x81) { buff_char = 0xA8; break; }		// байт символа Ё ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	2b81      	cmp	r3, #129	; 0x81
 80019c0:	d102      	bne.n	80019c8 <ST7565_Print+0x58>
 80019c2:	23a8      	movs	r3, #168	; 0xa8
 80019c4:	75fb      	strb	r3, [r7, #23]
 80019c6:	e051      	b.n	8001a6c <ST7565_Print+0xfc>
					else if ((uint8_t)*str >= 0x90 && (uint8_t)*str <= 0xBF) { buff_char = (*str) + 0x30; }	// байт символов А...Я а...п  делаем здвиг на +48
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	2b8f      	cmp	r3, #143	; 0x8f
 80019ce:	d908      	bls.n	80019e2 <ST7565_Print+0x72>
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	2bbf      	cmp	r3, #191	; 0xbf
 80019d6:	d804      	bhi.n	80019e2 <ST7565_Print+0x72>
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	3330      	adds	r3, #48	; 0x30
 80019de:	75fb      	strb	r3, [r7, #23]
					else if ((uint8_t)*str == 0x84) { buff_char = 0xAA; break; }		// байт символа Є ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					else if ((uint8_t)*str == 0x86) { buff_char = 0xB2; break; }		// байт символа І ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					else if ((uint8_t)*str == 0x87) { buff_char = 0xAF; break; }		// байт символа Ї ( если нужнф еще символы добавляем тут и в функции DrawChar() )
				break;
 80019e0:	e041      	b.n	8001a66 <ST7565_Print+0xf6>
					else if ((uint8_t)*str == 0x84) { buff_char = 0xAA; break; }		// байт символа Є ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	2b84      	cmp	r3, #132	; 0x84
 80019e8:	d102      	bne.n	80019f0 <ST7565_Print+0x80>
 80019ea:	23aa      	movs	r3, #170	; 0xaa
 80019ec:	75fb      	strb	r3, [r7, #23]
 80019ee:	e03d      	b.n	8001a6c <ST7565_Print+0xfc>
					else if ((uint8_t)*str == 0x86) { buff_char = 0xB2; break; }		// байт символа І ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	2b86      	cmp	r3, #134	; 0x86
 80019f6:	d102      	bne.n	80019fe <ST7565_Print+0x8e>
 80019f8:	23b2      	movs	r3, #178	; 0xb2
 80019fa:	75fb      	strb	r3, [r7, #23]
 80019fc:	e036      	b.n	8001a6c <ST7565_Print+0xfc>
					else if ((uint8_t)*str == 0x87) { buff_char = 0xAF; break; }		// байт символа Ї ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	2b87      	cmp	r3, #135	; 0x87
 8001a04:	d12f      	bne.n	8001a66 <ST7565_Print+0xf6>
 8001a06:	23af      	movs	r3, #175	; 0xaf
 8001a08:	75fb      	strb	r3, [r7, #23]
 8001a0a:	e02f      	b.n	8001a6c <ST7565_Print+0xfc>
				//}
				case 0xD1:
				//{
					// увеличиваем массив так как нам нужен второй байт
					str++;
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	3301      	adds	r3, #1
 8001a10:	60bb      	str	r3, [r7, #8]
					// проверяем второй байт там сам символ
					if ((uint8_t)*str == 0x91) { buff_char = 0xB8; break; }		// байт символа ё ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	2b91      	cmp	r3, #145	; 0x91
 8001a18:	d102      	bne.n	8001a20 <ST7565_Print+0xb0>
 8001a1a:	23b8      	movs	r3, #184	; 0xb8
 8001a1c:	75fb      	strb	r3, [r7, #23]
 8001a1e:	e025      	b.n	8001a6c <ST7565_Print+0xfc>
					else if ((uint8_t)*str >= 0x80 && (uint8_t)*str <= 0x8F) { buff_char = (*str) + 0x70; }	// байт символов п...я	елаем здвиг на +112
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	b25b      	sxtb	r3, r3
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	da08      	bge.n	8001a3c <ST7565_Print+0xcc>
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	2b8f      	cmp	r3, #143	; 0x8f
 8001a30:	d804      	bhi.n	8001a3c <ST7565_Print+0xcc>
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	3370      	adds	r3, #112	; 0x70
 8001a38:	75fb      	strb	r3, [r7, #23]
					else if ((uint8_t)*str == 0x94) { buff_char = 0xBA; break; }		// байт символа є ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					else if ((uint8_t)*str == 0x96) { buff_char = 0xB3; break; }		// байт символа і ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					else if ((uint8_t)*str == 0x97) { buff_char = 0xBF; break; }		// байт символа ї ( если нужнф еще символы добавляем тут и в функции DrawChar() )
				break;
 8001a3a:	e016      	b.n	8001a6a <ST7565_Print+0xfa>
					else if ((uint8_t)*str == 0x94) { buff_char = 0xBA; break; }		// байт символа є ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	2b94      	cmp	r3, #148	; 0x94
 8001a42:	d102      	bne.n	8001a4a <ST7565_Print+0xda>
 8001a44:	23ba      	movs	r3, #186	; 0xba
 8001a46:	75fb      	strb	r3, [r7, #23]
 8001a48:	e010      	b.n	8001a6c <ST7565_Print+0xfc>
					else if ((uint8_t)*str == 0x96) { buff_char = 0xB3; break; }		// байт символа і ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	2b96      	cmp	r3, #150	; 0x96
 8001a50:	d102      	bne.n	8001a58 <ST7565_Print+0xe8>
 8001a52:	23b3      	movs	r3, #179	; 0xb3
 8001a54:	75fb      	strb	r3, [r7, #23]
 8001a56:	e009      	b.n	8001a6c <ST7565_Print+0xfc>
					else if ((uint8_t)*str == 0x97) { buff_char = 0xBF; break; }		// байт символа ї ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	2b97      	cmp	r3, #151	; 0x97
 8001a5e:	d104      	bne.n	8001a6a <ST7565_Print+0xfa>
 8001a60:	23bf      	movs	r3, #191	; 0xbf
 8001a62:	75fb      	strb	r3, [r7, #23]
 8001a64:	e002      	b.n	8001a6c <ST7565_Print+0xfc>
				break;
 8001a66:	bf00      	nop
 8001a68:	e000      	b.n	8001a6c <ST7565_Print+0xfc>
				break;
 8001a6a:	bf00      	nop
				//}
			}
			// уменьшаем еще переменную так как израсходывали 2 байта для кириллицы
			len--;
 8001a6c:	8abb      	ldrh	r3, [r7, #20]
 8001a6e:	3b01      	subs	r3, #1
 8001a70:	82bb      	strh	r3, [r7, #20]
			ST7565_DrawChar(x, y, buff_char, Font, multiplier, color);
 8001a72:	7dfa      	ldrb	r2, [r7, #23]
 8001a74:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8001a78:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8001a7c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001a80:	9301      	str	r3, [sp, #4]
 8001a82:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a86:	9300      	str	r3, [sp, #0]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	f7ff fdf5 	bl	8001678 <ST7565_DrawChar>
 8001a8e:	e00e      	b.n	8001aae <ST7565_Print+0x13e>
		} else {
			ST7565_DrawChar(x, y, *str, Font, multiplier, color);
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	781a      	ldrb	r2, [r3, #0]
 8001a94:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8001a98:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8001a9c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001aa0:	9301      	str	r3, [sp, #4]
 8001aa2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001aa6:	9300      	str	r3, [sp, #0]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f7ff fde5 	bl	8001678 <ST7565_DrawChar>
		}
		
		x += (Font->FontWidth * multiplier);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	b29a      	uxth	r2, r3
 8001ab4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001ab8:	b29b      	uxth	r3, r3
 8001aba:	fb12 f303 	smulbb	r3, r2, r3
 8001abe:	b29a      	uxth	r2, r3
 8001ac0:	89fb      	ldrh	r3, [r7, #14]
 8001ac2:	4413      	add	r3, r2
 8001ac4:	b29b      	uxth	r3, r3
 8001ac6:	81fb      	strh	r3, [r7, #14]
		str++;
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	3301      	adds	r3, #1
 8001acc:	60bb      	str	r3, [r7, #8]
	while (len--) {
 8001ace:	8abb      	ldrh	r3, [r7, #20]
 8001ad0:	1e5a      	subs	r2, r3, #1
 8001ad2:	82ba      	strh	r2, [r7, #20]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	f47f af62 	bne.w	800199e <ST7565_Print+0x2e>
	}
}
 8001ada:	bf00      	nop
 8001adc:	bf00      	nop
 8001ade:	3718      	adds	r7, #24
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}

08001ae4 <ST7565_DrawLine>:
	* @param	( параметры ):	координаты начальной точки и конечной и цвет 0 или 1
								X(0 - 127)  Y(0 - 63)
	* @return  ( возвращает ):	
*******************************************************************************/
void ST7565_DrawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint8_t c)
{
 8001ae4:	b590      	push	{r4, r7, lr}
 8001ae6:	b087      	sub	sp, #28
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	4604      	mov	r4, r0
 8001aec:	4608      	mov	r0, r1
 8001aee:	4611      	mov	r1, r2
 8001af0:	461a      	mov	r2, r3
 8001af2:	4623      	mov	r3, r4
 8001af4:	80fb      	strh	r3, [r7, #6]
 8001af6:	4603      	mov	r3, r0
 8001af8:	80bb      	strh	r3, [r7, #4]
 8001afa:	460b      	mov	r3, r1
 8001afc:	807b      	strh	r3, [r7, #2]
 8001afe:	4613      	mov	r3, r2
 8001b00:	803b      	strh	r3, [r7, #0]
int16_t dx, dy, sx, sy, err, e2, i, tmp;
	
	/* Check for overflow */
	if (x0 >= SCREEN_WIDTH)  x0 = SCREEN_WIDTH  - 1;
 8001b02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b06:	2b7f      	cmp	r3, #127	; 0x7f
 8001b08:	dd01      	ble.n	8001b0e <ST7565_DrawLine+0x2a>
 8001b0a:	237f      	movs	r3, #127	; 0x7f
 8001b0c:	80fb      	strh	r3, [r7, #6]
	if (x1 >= SCREEN_WIDTH)  x1 = SCREEN_WIDTH  - 1;
 8001b0e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001b12:	2b7f      	cmp	r3, #127	; 0x7f
 8001b14:	dd01      	ble.n	8001b1a <ST7565_DrawLine+0x36>
 8001b16:	237f      	movs	r3, #127	; 0x7f
 8001b18:	807b      	strh	r3, [r7, #2]
	if (y0 >= SCREEN_HEIGHT) y0 = SCREEN_HEIGHT - 1;
 8001b1a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001b1e:	2b3f      	cmp	r3, #63	; 0x3f
 8001b20:	dd01      	ble.n	8001b26 <ST7565_DrawLine+0x42>
 8001b22:	233f      	movs	r3, #63	; 0x3f
 8001b24:	80bb      	strh	r3, [r7, #4]
	if (y1 >= SCREEN_HEIGHT) y1 = SCREEN_HEIGHT - 1;
 8001b26:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001b2a:	2b3f      	cmp	r3, #63	; 0x3f
 8001b2c:	dd01      	ble.n	8001b32 <ST7565_DrawLine+0x4e>
 8001b2e:	233f      	movs	r3, #63	; 0x3f
 8001b30:	803b      	strh	r3, [r7, #0]
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 8001b32:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001b36:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	da05      	bge.n	8001b4a <ST7565_DrawLine+0x66>
 8001b3e:	887a      	ldrh	r2, [r7, #2]
 8001b40:	88fb      	ldrh	r3, [r7, #6]
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	b29b      	uxth	r3, r3
 8001b46:	b21b      	sxth	r3, r3
 8001b48:	e004      	b.n	8001b54 <ST7565_DrawLine+0x70>
 8001b4a:	88fa      	ldrh	r2, [r7, #6]
 8001b4c:	887b      	ldrh	r3, [r7, #2]
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	b29b      	uxth	r3, r3
 8001b52:	b21b      	sxth	r3, r3
 8001b54:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 8001b56:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001b5a:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	da05      	bge.n	8001b6e <ST7565_DrawLine+0x8a>
 8001b62:	883a      	ldrh	r2, [r7, #0]
 8001b64:	88bb      	ldrh	r3, [r7, #4]
 8001b66:	1ad3      	subs	r3, r2, r3
 8001b68:	b29b      	uxth	r3, r3
 8001b6a:	b21b      	sxth	r3, r3
 8001b6c:	e004      	b.n	8001b78 <ST7565_DrawLine+0x94>
 8001b6e:	88ba      	ldrh	r2, [r7, #4]
 8001b70:	883b      	ldrh	r3, [r7, #0]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	b21b      	sxth	r3, r3
 8001b78:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1; 
 8001b7a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001b7e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001b82:	429a      	cmp	r2, r3
 8001b84:	da01      	bge.n	8001b8a <ST7565_DrawLine+0xa6>
 8001b86:	2301      	movs	r3, #1
 8001b88:	e001      	b.n	8001b8e <ST7565_DrawLine+0xaa>
 8001b8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b8e:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1; 
 8001b90:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001b94:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	da01      	bge.n	8001ba0 <ST7565_DrawLine+0xbc>
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e001      	b.n	8001ba4 <ST7565_DrawLine+0xc0>
 8001ba0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ba4:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2; 
 8001ba6:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001baa:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	dd06      	ble.n	8001bc0 <ST7565_DrawLine+0xdc>
 8001bb2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001bb6:	0fda      	lsrs	r2, r3, #31
 8001bb8:	4413      	add	r3, r2
 8001bba:	105b      	asrs	r3, r3, #1
 8001bbc:	b21b      	sxth	r3, r3
 8001bbe:	e006      	b.n	8001bce <ST7565_DrawLine+0xea>
 8001bc0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001bc4:	0fda      	lsrs	r2, r3, #31
 8001bc6:	4413      	add	r3, r2
 8001bc8:	105b      	asrs	r3, r3, #1
 8001bca:	425b      	negs	r3, r3
 8001bcc:	b21b      	sxth	r3, r3
 8001bce:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 8001bd0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d130      	bne.n	8001c3a <ST7565_DrawLine+0x156>
		if (y1 < y0) {
 8001bd8:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001bdc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	da05      	bge.n	8001bf0 <ST7565_DrawLine+0x10c>
			tmp = y1;
 8001be4:	883b      	ldrh	r3, [r7, #0]
 8001be6:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8001be8:	88bb      	ldrh	r3, [r7, #4]
 8001bea:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8001bec:	893b      	ldrh	r3, [r7, #8]
 8001bee:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 8001bf0:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001bf4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	da05      	bge.n	8001c08 <ST7565_DrawLine+0x124>
			tmp = x1;
 8001bfc:	887b      	ldrh	r3, [r7, #2]
 8001bfe:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8001c00:	88fb      	ldrh	r3, [r7, #6]
 8001c02:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8001c04:	893b      	ldrh	r3, [r7, #8]
 8001c06:	80fb      	strh	r3, [r7, #6]
		}
		
		// Vertical line
		for (i = y0; i <= y1; i++) ST7565_Draw_pixel(x0, i, c);
 8001c08:	88bb      	ldrh	r3, [r7, #4]
 8001c0a:	82bb      	strh	r3, [r7, #20]
 8001c0c:	e00e      	b.n	8001c2c <ST7565_DrawLine+0x148>
 8001c0e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001c12:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 8001c16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7ff fc96 	bl	800154c <ST7565_Draw_pixel>
 8001c20:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001c24:	b29b      	uxth	r3, r3
 8001c26:	3301      	adds	r3, #1
 8001c28:	b29b      	uxth	r3, r3
 8001c2a:	82bb      	strh	r3, [r7, #20]
 8001c2c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001c30:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001c34:	429a      	cmp	r2, r3
 8001c36:	ddea      	ble.n	8001c0e <ST7565_DrawLine+0x12a>
		
		return;
 8001c38:	e06e      	b.n	8001d18 <ST7565_DrawLine+0x234>
	}
	
	if (dy == 0) {
 8001c3a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d130      	bne.n	8001ca4 <ST7565_DrawLine+0x1c0>
		if (y1 < y0) {
 8001c42:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001c46:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	da05      	bge.n	8001c5a <ST7565_DrawLine+0x176>
			tmp = y1;
 8001c4e:	883b      	ldrh	r3, [r7, #0]
 8001c50:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8001c52:	88bb      	ldrh	r3, [r7, #4]
 8001c54:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8001c56:	893b      	ldrh	r3, [r7, #8]
 8001c58:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 8001c5a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001c5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c62:	429a      	cmp	r2, r3
 8001c64:	da05      	bge.n	8001c72 <ST7565_DrawLine+0x18e>
			tmp = x1;
 8001c66:	887b      	ldrh	r3, [r7, #2]
 8001c68:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8001c6a:	88fb      	ldrh	r3, [r7, #6]
 8001c6c:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8001c6e:	893b      	ldrh	r3, [r7, #8]
 8001c70:	80fb      	strh	r3, [r7, #6]
		}
		
		// Horizontal line
		for (i = x0; i <= x1; i++) ST7565_Draw_pixel(i, y0, c);
 8001c72:	88fb      	ldrh	r3, [r7, #6]
 8001c74:	82bb      	strh	r3, [r7, #20]
 8001c76:	e00e      	b.n	8001c96 <ST7565_DrawLine+0x1b2>
 8001c78:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001c7c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001c80:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7ff fc61 	bl	800154c <ST7565_Draw_pixel>
 8001c8a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001c8e:	b29b      	uxth	r3, r3
 8001c90:	3301      	adds	r3, #1
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	82bb      	strh	r3, [r7, #20]
 8001c96:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001c9a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	ddea      	ble.n	8001c78 <ST7565_DrawLine+0x194>
		
		return;
 8001ca2:	e039      	b.n	8001d18 <ST7565_DrawLine+0x234>
	}
	
	while (1) {
		ST7565_Draw_pixel(x0, y0, c);
 8001ca4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001ca8:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001cac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7ff fc4b 	bl	800154c <ST7565_Draw_pixel>
		if (x0 == x1 && y0 == y1) break;
 8001cb6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001cba:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d105      	bne.n	8001cce <ST7565_DrawLine+0x1ea>
 8001cc2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001cc6:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d023      	beq.n	8001d16 <ST7565_DrawLine+0x232>

		e2 = err; 
 8001cce:	8afb      	ldrh	r3, [r7, #22]
 8001cd0:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 8001cd2:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001cd6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001cda:	425b      	negs	r3, r3
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	dd09      	ble.n	8001cf4 <ST7565_DrawLine+0x210>
			err -= dy;
 8001ce0:	8afa      	ldrh	r2, [r7, #22]
 8001ce2:	8a3b      	ldrh	r3, [r7, #16]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 8001cea:	88fa      	ldrh	r2, [r7, #6]
 8001cec:	89fb      	ldrh	r3, [r7, #14]
 8001cee:	4413      	add	r3, r2
 8001cf0:	b29b      	uxth	r3, r3
 8001cf2:	80fb      	strh	r3, [r7, #6]
		} 
		if (e2 < dy) {
 8001cf4:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001cf8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	dad1      	bge.n	8001ca4 <ST7565_DrawLine+0x1c0>
			err += dx;
 8001d00:	8afa      	ldrh	r2, [r7, #22]
 8001d02:	8a7b      	ldrh	r3, [r7, #18]
 8001d04:	4413      	add	r3, r2
 8001d06:	b29b      	uxth	r3, r3
 8001d08:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 8001d0a:	88ba      	ldrh	r2, [r7, #4]
 8001d0c:	89bb      	ldrh	r3, [r7, #12]
 8001d0e:	4413      	add	r3, r2
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	80bb      	strh	r3, [r7, #4]
		ST7565_Draw_pixel(x0, y0, c);
 8001d14:	e7c6      	b.n	8001ca4 <ST7565_DrawLine+0x1c0>
		if (x0 == x1 && y0 == y1) break;
 8001d16:	bf00      	nop
		} 
	}
}
 8001d18:	371c      	adds	r7, #28
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd90      	pop	{r4, r7, pc}

08001d1e <ST7565_DrawRectangle>:
	* @param	( параметры ):	координаты верхнего левого и ширина и высота и цвет
								X(0 - 127)  Y(0 - 63)
	* @return  ( возвращает ):	
*******************************************************************************/
void ST7565_DrawRectangle(int16_t x, int16_t y, int16_t w, int16_t h, uint8_t c)
{
 8001d1e:	b590      	push	{r4, r7, lr}
 8001d20:	b085      	sub	sp, #20
 8001d22:	af02      	add	r7, sp, #8
 8001d24:	4604      	mov	r4, r0
 8001d26:	4608      	mov	r0, r1
 8001d28:	4611      	mov	r1, r2
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	4623      	mov	r3, r4
 8001d2e:	80fb      	strh	r3, [r7, #6]
 8001d30:	4603      	mov	r3, r0
 8001d32:	80bb      	strh	r3, [r7, #4]
 8001d34:	460b      	mov	r3, r1
 8001d36:	807b      	strh	r3, [r7, #2]
 8001d38:	4613      	mov	r3, r2
 8001d3a:	803b      	strh	r3, [r7, #0]
	// Check input parameters
	if (x >= SCREEN_WIDTH || y >= SCREEN_HEIGHT) return;
 8001d3c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d40:	2b7f      	cmp	r3, #127	; 0x7f
 8001d42:	dc6a      	bgt.n	8001e1a <ST7565_DrawRectangle+0xfc>
 8001d44:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001d48:	2b3f      	cmp	r3, #63	; 0x3f
 8001d4a:	dc66      	bgt.n	8001e1a <ST7565_DrawRectangle+0xfc>
	
	// Check width and height
	if ((x + w) >= SCREEN_WIDTH)  w = SCREEN_WIDTH  - x;
 8001d4c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001d50:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001d54:	4413      	add	r3, r2
 8001d56:	2b7f      	cmp	r3, #127	; 0x7f
 8001d58:	dd04      	ble.n	8001d64 <ST7565_DrawRectangle+0x46>
 8001d5a:	88fb      	ldrh	r3, [r7, #6]
 8001d5c:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	807b      	strh	r3, [r7, #2]
	if ((y + h) >= SCREEN_HEIGHT) h = SCREEN_HEIGHT - y;
 8001d64:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001d68:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001d6c:	4413      	add	r3, r2
 8001d6e:	2b3f      	cmp	r3, #63	; 0x3f
 8001d70:	dd04      	ble.n	8001d7c <ST7565_DrawRectangle+0x5e>
 8001d72:	88bb      	ldrh	r3, [r7, #4]
 8001d74:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	803b      	strh	r3, [r7, #0]
	
	// Draw 4 lines
	ST7565_DrawLine(x, y, x + w, y, c);         // Top line
 8001d7c:	88fa      	ldrh	r2, [r7, #6]
 8001d7e:	887b      	ldrh	r3, [r7, #2]
 8001d80:	4413      	add	r3, r2
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	b21a      	sxth	r2, r3
 8001d86:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8001d8a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001d8e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001d92:	7e3b      	ldrb	r3, [r7, #24]
 8001d94:	9300      	str	r3, [sp, #0]
 8001d96:	4623      	mov	r3, r4
 8001d98:	f7ff fea4 	bl	8001ae4 <ST7565_DrawLine>
	ST7565_DrawLine(x, y + h, x + w, y + h, c); // Bottom line
 8001d9c:	88ba      	ldrh	r2, [r7, #4]
 8001d9e:	883b      	ldrh	r3, [r7, #0]
 8001da0:	4413      	add	r3, r2
 8001da2:	b29b      	uxth	r3, r3
 8001da4:	b219      	sxth	r1, r3
 8001da6:	88fa      	ldrh	r2, [r7, #6]
 8001da8:	887b      	ldrh	r3, [r7, #2]
 8001daa:	4413      	add	r3, r2
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	b21c      	sxth	r4, r3
 8001db0:	88ba      	ldrh	r2, [r7, #4]
 8001db2:	883b      	ldrh	r3, [r7, #0]
 8001db4:	4413      	add	r3, r2
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	b21a      	sxth	r2, r3
 8001dba:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001dbe:	7e3b      	ldrb	r3, [r7, #24]
 8001dc0:	9300      	str	r3, [sp, #0]
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	4622      	mov	r2, r4
 8001dc6:	f7ff fe8d 	bl	8001ae4 <ST7565_DrawLine>
	ST7565_DrawLine(x, y, x, y + h, c);         // Left line
 8001dca:	88ba      	ldrh	r2, [r7, #4]
 8001dcc:	883b      	ldrh	r3, [r7, #0]
 8001dce:	4413      	add	r3, r2
 8001dd0:	b29b      	uxth	r3, r3
 8001dd2:	b21c      	sxth	r4, r3
 8001dd4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001dd8:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001ddc:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001de0:	7e3b      	ldrb	r3, [r7, #24]
 8001de2:	9300      	str	r3, [sp, #0]
 8001de4:	4623      	mov	r3, r4
 8001de6:	f7ff fe7d 	bl	8001ae4 <ST7565_DrawLine>
	ST7565_DrawLine(x + w, y, x + w, y + h, c); // Right line
 8001dea:	88fa      	ldrh	r2, [r7, #6]
 8001dec:	887b      	ldrh	r3, [r7, #2]
 8001dee:	4413      	add	r3, r2
 8001df0:	b29b      	uxth	r3, r3
 8001df2:	b218      	sxth	r0, r3
 8001df4:	88fa      	ldrh	r2, [r7, #6]
 8001df6:	887b      	ldrh	r3, [r7, #2]
 8001df8:	4413      	add	r3, r2
 8001dfa:	b29b      	uxth	r3, r3
 8001dfc:	b21c      	sxth	r4, r3
 8001dfe:	88ba      	ldrh	r2, [r7, #4]
 8001e00:	883b      	ldrh	r3, [r7, #0]
 8001e02:	4413      	add	r3, r2
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	b21a      	sxth	r2, r3
 8001e08:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001e0c:	7e3b      	ldrb	r3, [r7, #24]
 8001e0e:	9300      	str	r3, [sp, #0]
 8001e10:	4613      	mov	r3, r2
 8001e12:	4622      	mov	r2, r4
 8001e14:	f7ff fe66 	bl	8001ae4 <ST7565_DrawLine>
 8001e18:	e000      	b.n	8001e1c <ST7565_DrawRectangle+0xfe>
	if (x >= SCREEN_WIDTH || y >= SCREEN_HEIGHT) return;
 8001e1a:	bf00      	nop
}
 8001e1c:	370c      	adds	r7, #12
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd90      	pop	{r4, r7, pc}

08001e22 <ST7565_DrawFilledRectangle>:
	* @param	( параметры ):	координаты верхнего левого и ширина и высота и цвет
								X(0 - 127)  Y(0 - 63)
	* @return  ( возвращает ):	
*******************************************************************************/
void ST7565_DrawFilledRectangle(int16_t x, int16_t y, int16_t w, int16_t h, uint8_t c)
{
 8001e22:	b590      	push	{r4, r7, lr}
 8001e24:	b087      	sub	sp, #28
 8001e26:	af02      	add	r7, sp, #8
 8001e28:	4604      	mov	r4, r0
 8001e2a:	4608      	mov	r0, r1
 8001e2c:	4611      	mov	r1, r2
 8001e2e:	461a      	mov	r2, r3
 8001e30:	4623      	mov	r3, r4
 8001e32:	80fb      	strh	r3, [r7, #6]
 8001e34:	4603      	mov	r3, r0
 8001e36:	80bb      	strh	r3, [r7, #4]
 8001e38:	460b      	mov	r3, r1
 8001e3a:	807b      	strh	r3, [r7, #2]
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	803b      	strh	r3, [r7, #0]
uint8_t i;
	
	// Check input parameters
	if (x >= SCREEN_WIDTH || y >= SCREEN_HEIGHT) return;
 8001e40:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e44:	2b7f      	cmp	r3, #127	; 0x7f
 8001e46:	dc41      	bgt.n	8001ecc <ST7565_DrawFilledRectangle+0xaa>
 8001e48:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001e4c:	2b3f      	cmp	r3, #63	; 0x3f
 8001e4e:	dc3d      	bgt.n	8001ecc <ST7565_DrawFilledRectangle+0xaa>
	
	// Check width and height
	if ((x + w) >= SCREEN_WIDTH)  w = SCREEN_WIDTH  - x;
 8001e50:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001e54:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001e58:	4413      	add	r3, r2
 8001e5a:	2b7f      	cmp	r3, #127	; 0x7f
 8001e5c:	dd04      	ble.n	8001e68 <ST7565_DrawFilledRectangle+0x46>
 8001e5e:	88fb      	ldrh	r3, [r7, #6]
 8001e60:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001e64:	b29b      	uxth	r3, r3
 8001e66:	807b      	strh	r3, [r7, #2]
	if ((y + h) >= SCREEN_HEIGHT) h = SCREEN_HEIGHT - y;
 8001e68:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001e6c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001e70:	4413      	add	r3, r2
 8001e72:	2b3f      	cmp	r3, #63	; 0x3f
 8001e74:	dd04      	ble.n	8001e80 <ST7565_DrawFilledRectangle+0x5e>
 8001e76:	88bb      	ldrh	r3, [r7, #4]
 8001e78:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8001e7c:	b29b      	uxth	r3, r3
 8001e7e:	803b      	strh	r3, [r7, #0]
	
	for (i = 0; i <= h; i++) ST7565_DrawLine(x, y + i, x + w, y + i, c);
 8001e80:	2300      	movs	r3, #0
 8001e82:	73fb      	strb	r3, [r7, #15]
 8001e84:	e01c      	b.n	8001ec0 <ST7565_DrawFilledRectangle+0x9e>
 8001e86:	7bfb      	ldrb	r3, [r7, #15]
 8001e88:	b29a      	uxth	r2, r3
 8001e8a:	88bb      	ldrh	r3, [r7, #4]
 8001e8c:	4413      	add	r3, r2
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	b219      	sxth	r1, r3
 8001e92:	88fa      	ldrh	r2, [r7, #6]
 8001e94:	887b      	ldrh	r3, [r7, #2]
 8001e96:	4413      	add	r3, r2
 8001e98:	b29b      	uxth	r3, r3
 8001e9a:	b21c      	sxth	r4, r3
 8001e9c:	7bfb      	ldrb	r3, [r7, #15]
 8001e9e:	b29a      	uxth	r2, r3
 8001ea0:	88bb      	ldrh	r3, [r7, #4]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	b21a      	sxth	r2, r3
 8001ea8:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001eac:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001eb0:	9300      	str	r3, [sp, #0]
 8001eb2:	4613      	mov	r3, r2
 8001eb4:	4622      	mov	r2, r4
 8001eb6:	f7ff fe15 	bl	8001ae4 <ST7565_DrawLine>
 8001eba:	7bfb      	ldrb	r3, [r7, #15]
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	73fb      	strb	r3, [r7, #15]
 8001ec0:	7bfa      	ldrb	r2, [r7, #15]
 8001ec2:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	dddd      	ble.n	8001e86 <ST7565_DrawFilledRectangle+0x64>
 8001eca:	e000      	b.n	8001ece <ST7565_DrawFilledRectangle+0xac>
	if (x >= SCREEN_WIDTH || y >= SCREEN_HEIGHT) return;
 8001ecc:	bf00      	nop
}
 8001ece:	3714      	adds	r7, #20
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd90      	pop	{r4, r7, pc}

08001ed4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001ed8:	f3bf 8f4f 	dsb	sy
}
 8001edc:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001ede:	4b06      	ldr	r3, [pc, #24]	; (8001ef8 <__NVIC_SystemReset+0x24>)
 8001ee0:	68db      	ldr	r3, [r3, #12]
 8001ee2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001ee6:	4904      	ldr	r1, [pc, #16]	; (8001ef8 <__NVIC_SystemReset+0x24>)
 8001ee8:	4b04      	ldr	r3, [pc, #16]	; (8001efc <__NVIC_SystemReset+0x28>)
 8001eea:	4313      	orrs	r3, r2
 8001eec:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001eee:	f3bf 8f4f 	dsb	sy
}
 8001ef2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001ef4:	bf00      	nop
 8001ef6:	e7fd      	b.n	8001ef4 <__NVIC_SystemReset+0x20>
 8001ef8:	e000ed00 	.word	0xe000ed00
 8001efc:	05fa0004 	.word	0x05fa0004

08001f00 <showCfg>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//------------------------------------------------------------------------------------------
void showCfg()
{
 8001f00:	b5b0      	push	{r4, r5, r7, lr}
 8001f02:	b086      	sub	sp, #24
 8001f04:	af04      	add	r7, sp, #16
	*strf = '\0';
 8001f06:	4b20      	ldr	r3, [pc, #128]	; (8001f88 <showCfg+0x88>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < MAX_LIST; i++) {
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	607b      	str	r3, [r7, #4]
 8001f10:	e02d      	b.n	8001f6e <showCfg+0x6e>
		sprintf(strf+strlen(strf), "%u:%.1f:%s\r\n", list[i].band, list[i].freq, list[i].name);
 8001f12:	481d      	ldr	r0, [pc, #116]	; (8001f88 <showCfg+0x88>)
 8001f14:	f7fe f95c 	bl	80001d0 <strlen>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	4a1b      	ldr	r2, [pc, #108]	; (8001f88 <showCfg+0x88>)
 8001f1c:	189c      	adds	r4, r3, r2
 8001f1e:	491b      	ldr	r1, [pc, #108]	; (8001f8c <showCfg+0x8c>)
 8001f20:	687a      	ldr	r2, [r7, #4]
 8001f22:	4613      	mov	r3, r2
 8001f24:	00db      	lsls	r3, r3, #3
 8001f26:	4413      	add	r3, r2
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	440b      	add	r3, r1
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	461d      	mov	r5, r3
 8001f30:	4916      	ldr	r1, [pc, #88]	; (8001f8c <showCfg+0x8c>)
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	4613      	mov	r3, r2
 8001f36:	00db      	lsls	r3, r3, #3
 8001f38:	4413      	add	r3, r2
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	440b      	add	r3, r1
 8001f3e:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7fe fb00 	bl	8000548 <__aeabi_f2d>
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	00db      	lsls	r3, r3, #3
 8001f4e:	4413      	add	r3, r2
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	4a0e      	ldr	r2, [pc, #56]	; (8001f8c <showCfg+0x8c>)
 8001f54:	4413      	add	r3, r2
 8001f56:	3305      	adds	r3, #5
 8001f58:	9302      	str	r3, [sp, #8]
 8001f5a:	e9cd 0100 	strd	r0, r1, [sp]
 8001f5e:	462a      	mov	r2, r5
 8001f60:	490b      	ldr	r1, [pc, #44]	; (8001f90 <showCfg+0x90>)
 8001f62:	4620      	mov	r0, r4
 8001f64:	f00e fb08 	bl	8010578 <siprintf>
	for (int i = 0; i < MAX_LIST; i++) {
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	607b      	str	r3, [r7, #4]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2b18      	cmp	r3, #24
 8001f72:	ddce      	ble.n	8001f12 <showCfg+0x12>
	}
	Report(0, "%s", strf);
 8001f74:	4a04      	ldr	r2, [pc, #16]	; (8001f88 <showCfg+0x88>)
 8001f76:	4907      	ldr	r1, [pc, #28]	; (8001f94 <showCfg+0x94>)
 8001f78:	2000      	movs	r0, #0
 8001f7a:	f002 ffb1 	bl	8004ee0 <Report>
}
 8001f7e:	bf00      	nop
 8001f80:	3708      	adds	r7, #8
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bdb0      	pop	{r4, r5, r7, pc}
 8001f86:	bf00      	nop
 8001f88:	200017c8 	.word	0x200017c8
 8001f8c:	20003034 	.word	0x20003034
 8001f90:	08014248 	.word	0x08014248
 8001f94:	08014258 	.word	0x08014258

08001f98 <bleWrite>:
//-------------------------------------------------------------------------------------------
#endif

#if defined(SET_BLE) || defined(SET_AUDIO)
void bleWrite(const char *str, bool prn)
{
 8001f98:	b590      	push	{r4, r7, lr}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	460b      	mov	r3, r1
 8001fa2:	70fb      	strb	r3, [r7, #3]
	if (sleep_mode) return;
 8001fa4:	4b27      	ldr	r3, [pc, #156]	; (8002044 <bleWrite+0xac>)
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d147      	bne.n	800203c <bleWrite+0xa4>

	if (ble_withDMA) {
 8001fac:	4b26      	ldr	r3, [pc, #152]	; (8002048 <bleWrite+0xb0>)
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d023      	beq.n	8001ffc <bleWrite+0x64>
		while (!bleRdy) {};
 8001fb4:	bf00      	nop
 8001fb6:	4b25      	ldr	r3, [pc, #148]	; (800204c <bleWrite+0xb4>)
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d0fb      	beq.n	8001fb6 <bleWrite+0x1e>
		bleRdy = 0;
 8001fbe:	4b23      	ldr	r3, [pc, #140]	; (800204c <bleWrite+0xb4>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	701a      	strb	r2, [r3, #0]
		if (HAL_UART_Transmit_DMA(blePort, (uint8_t *)str, strlen(str)) != HAL_OK) devError |= devBLE;
 8001fc4:	4b22      	ldr	r3, [pc, #136]	; (8002050 <bleWrite+0xb8>)
 8001fc6:	681c      	ldr	r4, [r3, #0]
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f7fe f901 	bl	80001d0 <strlen>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	6879      	ldr	r1, [r7, #4]
 8001fd6:	4620      	mov	r0, r4
 8001fd8:	f00c f8c8 	bl	800e16c <HAL_UART_Transmit_DMA>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d006      	beq.n	8001ff0 <bleWrite+0x58>
 8001fe2:	4b1c      	ldr	r3, [pc, #112]	; (8002054 <bleWrite+0xbc>)
 8001fe4:	881b      	ldrh	r3, [r3, #0]
 8001fe6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fea:	b29a      	uxth	r2, r3
 8001fec:	4b19      	ldr	r3, [pc, #100]	; (8002054 <bleWrite+0xbc>)
 8001fee:	801a      	strh	r2, [r3, #0]
		while (!bleRdy) {};
 8001ff0:	bf00      	nop
 8001ff2:	4b16      	ldr	r3, [pc, #88]	; (800204c <bleWrite+0xb4>)
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d0fb      	beq.n	8001ff2 <bleWrite+0x5a>
 8001ffa:	e016      	b.n	800202a <bleWrite+0x92>
		/*while (HAL_UART_GetState(blePort) != HAL_UART_STATE_READY) {
			if (HAL_UART_GetState(blePort) == HAL_UART_STATE_BUSY_RX) break;
			//HAL_Delay(1);
		}*/
	} else {
		if (HAL_UART_Transmit(blePort, (uint8_t *)str, strlen(str), 1000) != HAL_OK) devError |= devBLE;
 8001ffc:	4b14      	ldr	r3, [pc, #80]	; (8002050 <bleWrite+0xb8>)
 8001ffe:	681c      	ldr	r4, [r3, #0]
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f7fe f8e5 	bl	80001d0 <strlen>
 8002006:	4603      	mov	r3, r0
 8002008:	b29a      	uxth	r2, r3
 800200a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800200e:	6879      	ldr	r1, [r7, #4]
 8002010:	4620      	mov	r0, r4
 8002012:	f00b ffc1 	bl	800df98 <HAL_UART_Transmit>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d006      	beq.n	800202a <bleWrite+0x92>
 800201c:	4b0d      	ldr	r3, [pc, #52]	; (8002054 <bleWrite+0xbc>)
 800201e:	881b      	ldrh	r3, [r3, #0]
 8002020:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002024:	b29a      	uxth	r2, r3
 8002026:	4b0b      	ldr	r3, [pc, #44]	; (8002054 <bleWrite+0xbc>)
 8002028:	801a      	strh	r2, [r3, #0]
	}

	if (prn) Report(1, "[BLE_tx] %s", str);
 800202a:	78fb      	ldrb	r3, [r7, #3]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d006      	beq.n	800203e <bleWrite+0xa6>
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	4909      	ldr	r1, [pc, #36]	; (8002058 <bleWrite+0xc0>)
 8002034:	2001      	movs	r0, #1
 8002036:	f002 ff53 	bl	8004ee0 <Report>
 800203a:	e000      	b.n	800203e <bleWrite+0xa6>
	if (sleep_mode) return;
 800203c:	bf00      	nop

}
 800203e:	370c      	adds	r7, #12
 8002040:	46bd      	mov	sp, r7
 8002042:	bd90      	pop	{r4, r7, pc}
 8002044:	20003769 	.word	0x20003769
 8002048:	2000021d 	.word	0x2000021d
 800204c:	2000021c 	.word	0x2000021c
 8002050:	20000218 	.word	0x20000218
 8002054:	20001bc8 	.word	0x20001bc8
 8002058:	0801425c 	.word	0x0801425c

0800205c <initRECQ>:
//------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------
bool initRECQ(s_recq_t *q)
{
 800205c:	b480      	push	{r7}
 800205e:	b085      	sub	sp, #20
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
	q->put = q->get = 0;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2200      	movs	r2, #0
 8002068:	709a      	strb	r2, [r3, #2]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	789a      	ldrb	r2, [r3, #2]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	705a      	strb	r2, [r3, #1]
	q->lock = 0;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2200      	movs	r2, #0
 8002076:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < MAX_QREC; i++) {
 8002078:	2300      	movs	r3, #0
 800207a:	73fb      	strb	r3, [r7, #15]
 800207c:	e01b      	b.n	80020b6 <initRECQ+0x5a>
		q->rec[i].id = i;
 800207e:	7bfa      	ldrb	r2, [r7, #15]
 8002080:	f997 000f 	ldrsb.w	r0, [r7, #15]
 8002084:	6879      	ldr	r1, [r7, #4]
 8002086:	4613      	mov	r3, r2
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	4413      	add	r3, r2
 800208c:	440b      	add	r3, r1
 800208e:	3303      	adds	r3, #3
 8002090:	4602      	mov	r2, r0
 8002092:	701a      	strb	r2, [r3, #0]
		q->rec[i].adr = NULL;
 8002094:	7bfa      	ldrb	r2, [r7, #15]
 8002096:	6879      	ldr	r1, [r7, #4]
 8002098:	4613      	mov	r3, r2
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	4413      	add	r3, r2
 800209e:	440b      	add	r3, r1
 80020a0:	2200      	movs	r2, #0
 80020a2:	711a      	strb	r2, [r3, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	715a      	strb	r2, [r3, #5]
 80020a8:	2200      	movs	r2, #0
 80020aa:	719a      	strb	r2, [r3, #6]
 80020ac:	2200      	movs	r2, #0
 80020ae:	71da      	strb	r2, [r3, #7]
	for (uint8_t i = 0; i < MAX_QREC; i++) {
 80020b0:	7bfb      	ldrb	r3, [r7, #15]
 80020b2:	3301      	adds	r3, #1
 80020b4:	73fb      	strb	r3, [r7, #15]
 80020b6:	7bfb      	ldrb	r3, [r7, #15]
 80020b8:	2b0f      	cmp	r3, #15
 80020ba:	d9e0      	bls.n	800207e <initRECQ+0x22>
	}

	return true;
 80020bc:	2301      	movs	r3, #1
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3714      	adds	r7, #20
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
	...

080020cc <putRECQ>:
//-------------------------------------------------------------------------------------------
int8_t putRECQ(char *adr, s_recq_t *q)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b085      	sub	sp, #20
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	6039      	str	r1, [r7, #0]
int8_t ret = -1;
 80020d6:	23ff      	movs	r3, #255	; 0xff
 80020d8:	73fb      	strb	r3, [r7, #15]
uint8_t wc = 255;
 80020da:	23ff      	movs	r3, #255	; 0xff
 80020dc:	73bb      	strb	r3, [r7, #14]

	while (q->lock && --wc) {}
 80020de:	bf00      	nop
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d005      	beq.n	80020f6 <putRECQ+0x2a>
 80020ea:	7bbb      	ldrb	r3, [r7, #14]
 80020ec:	3b01      	subs	r3, #1
 80020ee:	73bb      	strb	r3, [r7, #14]
 80020f0:	7bbb      	ldrb	r3, [r7, #14]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d1f4      	bne.n	80020e0 <putRECQ+0x14>
	if (!wc) {
 80020f6:	7bbb      	ldrb	r3, [r7, #14]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d109      	bne.n	8002110 <putRECQ+0x44>
		devError |= devQUE;
 80020fc:	4b22      	ldr	r3, [pc, #136]	; (8002188 <putRECQ+0xbc>)
 80020fe:	881b      	ldrh	r3, [r3, #0]
 8002100:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002104:	b29a      	uxth	r2, r3
 8002106:	4b20      	ldr	r3, [pc, #128]	; (8002188 <putRECQ+0xbc>)
 8002108:	801a      	strh	r2, [r3, #0]
		return ret;
 800210a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800210e:	e034      	b.n	800217a <putRECQ+0xae>
	}
	q->lock = 1;
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	2201      	movs	r2, #1
 8002114:	701a      	strb	r2, [r3, #0]

	if (q->rec[q->put].adr == NULL) {
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	785b      	ldrb	r3, [r3, #1]
 800211a:	4619      	mov	r1, r3
 800211c:	683a      	ldr	r2, [r7, #0]
 800211e:	460b      	mov	r3, r1
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	440b      	add	r3, r1
 8002124:	4413      	add	r3, r2
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d121      	bne.n	8002170 <putRECQ+0xa4>
		q->rec[q->put].adr = adr;
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	785b      	ldrb	r3, [r3, #1]
 8002130:	4619      	mov	r1, r3
 8002132:	683a      	ldr	r2, [r7, #0]
 8002134:	460b      	mov	r3, r1
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	440b      	add	r3, r1
 800213a:	4413      	add	r3, r2
 800213c:	687a      	ldr	r2, [r7, #4]
 800213e:	605a      	str	r2, [r3, #4]
		ret = q->rec[q->put].id;
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	785b      	ldrb	r3, [r3, #1]
 8002144:	4619      	mov	r1, r3
 8002146:	683a      	ldr	r2, [r7, #0]
 8002148:	460b      	mov	r3, r1
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	440b      	add	r3, r1
 800214e:	4413      	add	r3, r2
 8002150:	3303      	adds	r3, #3
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	73fb      	strb	r3, [r7, #15]
		q->put++;
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	785b      	ldrb	r3, [r3, #1]
 800215a:	3301      	adds	r3, #1
 800215c:	b2da      	uxtb	r2, r3
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	705a      	strb	r2, [r3, #1]
		q->put &= MAX_QREC - 1;
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	785b      	ldrb	r3, [r3, #1]
 8002166:	f003 030f 	and.w	r3, r3, #15
 800216a:	b2da      	uxtb	r2, r3
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	705a      	strb	r2, [r3, #1]
		//if (q->put >= MAX_QREC) q->put = 0;
	}

	q->lock = 0;
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	2200      	movs	r2, #0
 8002174:	701a      	strb	r2, [r3, #0]

	return ret;
 8002176:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800217a:	4618      	mov	r0, r3
 800217c:	3714      	adds	r7, #20
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	20001bc8 	.word	0x20001bc8

0800218c <getRECQ>:
//-------------------------------------------------------------------------------------------
int8_t getRECQ(char *dat, s_recq_t *q)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b086      	sub	sp, #24
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
int8_t ret = -1;
 8002196:	23ff      	movs	r3, #255	; 0xff
 8002198:	75fb      	strb	r3, [r7, #23]
int len = 0;
 800219a:	2300      	movs	r3, #0
 800219c:	613b      	str	r3, [r7, #16]
uint8_t wc = 255;
 800219e:	23ff      	movs	r3, #255	; 0xff
 80021a0:	73fb      	strb	r3, [r7, #15]

	while (q->lock && --wc) {
 80021a2:	bf00      	nop
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d005      	beq.n	80021ba <getRECQ+0x2e>
 80021ae:	7bfb      	ldrb	r3, [r7, #15]
 80021b0:	3b01      	subs	r3, #1
 80021b2:	73fb      	strb	r3, [r7, #15]
 80021b4:	7bfb      	ldrb	r3, [r7, #15]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d1f4      	bne.n	80021a4 <getRECQ+0x18>
		//HAL_Delay(1);
	}
	if (!wc) {
 80021ba:	7bfb      	ldrb	r3, [r7, #15]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d109      	bne.n	80021d4 <getRECQ+0x48>
		devError |= devQUE;
 80021c0:	4b3f      	ldr	r3, [pc, #252]	; (80022c0 <getRECQ+0x134>)
 80021c2:	881b      	ldrh	r3, [r3, #0]
 80021c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80021c8:	b29a      	uxth	r2, r3
 80021ca:	4b3d      	ldr	r3, [pc, #244]	; (80022c0 <getRECQ+0x134>)
 80021cc:	801a      	strh	r2, [r3, #0]
		return ret;
 80021ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80021d2:	e071      	b.n	80022b8 <getRECQ+0x12c>
	}
	q->lock = 1;
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	2201      	movs	r2, #1
 80021d8:	701a      	strb	r2, [r3, #0]

	if (q->rec[q->get].adr != NULL) {
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	789b      	ldrb	r3, [r3, #2]
 80021de:	4619      	mov	r1, r3
 80021e0:	683a      	ldr	r2, [r7, #0]
 80021e2:	460b      	mov	r3, r1
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	440b      	add	r3, r1
 80021e8:	4413      	add	r3, r2
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d045      	beq.n	800227c <getRECQ+0xf0>
		len = strlen(q->rec[q->get].adr);
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	789b      	ldrb	r3, [r3, #2]
 80021f4:	4619      	mov	r1, r3
 80021f6:	683a      	ldr	r2, [r7, #0]
 80021f8:	460b      	mov	r3, r1
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	440b      	add	r3, r1
 80021fe:	4413      	add	r3, r2
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	4618      	mov	r0, r3
 8002204:	f7fd ffe4 	bl	80001d0 <strlen>
 8002208:	4603      	mov	r3, r0
 800220a:	613b      	str	r3, [r7, #16]
		ret = q->rec[q->get].id;
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	789b      	ldrb	r3, [r3, #2]
 8002210:	4619      	mov	r1, r3
 8002212:	683a      	ldr	r2, [r7, #0]
 8002214:	460b      	mov	r3, r1
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	440b      	add	r3, r1
 800221a:	4413      	add	r3, r2
 800221c:	3303      	adds	r3, #3
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	75fb      	strb	r3, [r7, #23]
		if (dat) memcpy(dat, q->rec[q->get].adr, len);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d00d      	beq.n	8002244 <getRECQ+0xb8>
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	789b      	ldrb	r3, [r3, #2]
 800222c:	4619      	mov	r1, r3
 800222e:	683a      	ldr	r2, [r7, #0]
 8002230:	460b      	mov	r3, r1
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	440b      	add	r3, r1
 8002236:	4413      	add	r3, r2
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	693a      	ldr	r2, [r7, #16]
 800223c:	4619      	mov	r1, r3
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f00d fc14 	bl	800fa6c <memcpy>
		free(q->rec[q->get].adr);
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	789b      	ldrb	r3, [r3, #2]
 8002248:	4619      	mov	r1, r3
 800224a:	683a      	ldr	r2, [r7, #0]
 800224c:	460b      	mov	r3, r1
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	440b      	add	r3, r1
 8002252:	4413      	add	r3, r2
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	4618      	mov	r0, r3
 8002258:	f00d fc00 	bl	800fa5c <free>
		q->rec[q->get].adr = NULL;
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	789b      	ldrb	r3, [r3, #2]
 8002260:	4619      	mov	r1, r3
 8002262:	683a      	ldr	r2, [r7, #0]
 8002264:	460b      	mov	r3, r1
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	440b      	add	r3, r1
 800226a:	4413      	add	r3, r2
 800226c:	2200      	movs	r2, #0
 800226e:	711a      	strb	r2, [r3, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	715a      	strb	r2, [r3, #5]
 8002274:	2200      	movs	r2, #0
 8002276:	719a      	strb	r2, [r3, #6]
 8002278:	2200      	movs	r2, #0
 800227a:	71da      	strb	r2, [r3, #7]
	}

	if (ret >= 0) {
 800227c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002280:	2b00      	cmp	r3, #0
 8002282:	db14      	blt.n	80022ae <getRECQ+0x122>
		if (dat) *(dat + len) = '\0';
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d004      	beq.n	8002294 <getRECQ+0x108>
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	4413      	add	r3, r2
 8002290:	2200      	movs	r2, #0
 8002292:	701a      	strb	r2, [r3, #0]
		q->get++;
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	789b      	ldrb	r3, [r3, #2]
 8002298:	3301      	adds	r3, #1
 800229a:	b2da      	uxtb	r2, r3
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	709a      	strb	r2, [r3, #2]
		q->get &= MAX_QREC - 1;
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	789b      	ldrb	r3, [r3, #2]
 80022a4:	f003 030f 	and.w	r3, r3, #15
 80022a8:	b2da      	uxtb	r2, r3
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	709a      	strb	r2, [r3, #2]
		//if (q->get >= MAX_QREC) q->get = 0;
	}

	q->lock = 0;
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	2200      	movs	r2, #0
 80022b2:	701a      	strb	r2, [r3, #0]

	return ret;
 80022b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3718      	adds	r7, #24
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	20001bc8 	.word	0x20001bc8

080022c4 <errName>:

#endif

//-------------------------------------------------------------------------------------------
static char *errName(uint16_t err)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	4603      	mov	r3, r0
 80022cc:	80fb      	strh	r3, [r7, #6]

	switch (err) {
 80022ce:	88fb      	ldrh	r3, [r7, #6]
 80022d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80022d4:	d07b      	beq.n	80023ce <errName+0x10a>
 80022d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80022da:	dc7a      	bgt.n	80023d2 <errName+0x10e>
 80022dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022e0:	d073      	beq.n	80023ca <errName+0x106>
 80022e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022e6:	dc74      	bgt.n	80023d2 <errName+0x10e>
 80022e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022ec:	d06b      	beq.n	80023c6 <errName+0x102>
 80022ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022f2:	dc6e      	bgt.n	80023d2 <errName+0x10e>
 80022f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022f8:	d063      	beq.n	80023c2 <errName+0xfe>
 80022fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022fe:	dc68      	bgt.n	80023d2 <errName+0x10e>
 8002300:	2b80      	cmp	r3, #128	; 0x80
 8002302:	d05c      	beq.n	80023be <errName+0xfa>
 8002304:	2b80      	cmp	r3, #128	; 0x80
 8002306:	dc64      	bgt.n	80023d2 <errName+0x10e>
 8002308:	2b20      	cmp	r3, #32
 800230a:	dc47      	bgt.n	800239c <errName+0xd8>
 800230c:	2b00      	cmp	r3, #0
 800230e:	dd60      	ble.n	80023d2 <errName+0x10e>
 8002310:	3b01      	subs	r3, #1
 8002312:	2b1f      	cmp	r3, #31
 8002314:	d85d      	bhi.n	80023d2 <errName+0x10e>
 8002316:	a201      	add	r2, pc, #4	; (adr r2, 800231c <errName+0x58>)
 8002318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800231c:	080023a3 	.word	0x080023a3
 8002320:	080023a7 	.word	0x080023a7
 8002324:	080023d3 	.word	0x080023d3
 8002328:	080023ab 	.word	0x080023ab
 800232c:	080023d3 	.word	0x080023d3
 8002330:	080023d3 	.word	0x080023d3
 8002334:	080023d3 	.word	0x080023d3
 8002338:	080023af 	.word	0x080023af
 800233c:	080023d3 	.word	0x080023d3
 8002340:	080023d3 	.word	0x080023d3
 8002344:	080023d3 	.word	0x080023d3
 8002348:	080023d3 	.word	0x080023d3
 800234c:	080023d3 	.word	0x080023d3
 8002350:	080023d3 	.word	0x080023d3
 8002354:	080023d3 	.word	0x080023d3
 8002358:	080023b3 	.word	0x080023b3
 800235c:	080023d3 	.word	0x080023d3
 8002360:	080023d3 	.word	0x080023d3
 8002364:	080023d3 	.word	0x080023d3
 8002368:	080023d3 	.word	0x080023d3
 800236c:	080023d3 	.word	0x080023d3
 8002370:	080023d3 	.word	0x080023d3
 8002374:	080023d3 	.word	0x080023d3
 8002378:	080023d3 	.word	0x080023d3
 800237c:	080023d3 	.word	0x080023d3
 8002380:	080023d3 	.word	0x080023d3
 8002384:	080023d3 	.word	0x080023d3
 8002388:	080023d3 	.word	0x080023d3
 800238c:	080023d3 	.word	0x080023d3
 8002390:	080023d3 	.word	0x080023d3
 8002394:	080023d3 	.word	0x080023d3
 8002398:	080023b7 	.word	0x080023b7
 800239c:	2b40      	cmp	r3, #64	; 0x40
 800239e:	d00c      	beq.n	80023ba <errName+0xf6>
 80023a0:	e017      	b.n	80023d2 <errName+0x10e>
		case devTIK:// = 1,
			return "devTIK";
 80023a2:	4b0f      	ldr	r3, [pc, #60]	; (80023e0 <errName+0x11c>)
 80023a4:	e016      	b.n	80023d4 <errName+0x110>
		case devUART:// = 2,
			return "devUART";
 80023a6:	4b0f      	ldr	r3, [pc, #60]	; (80023e4 <errName+0x120>)
 80023a8:	e014      	b.n	80023d4 <errName+0x110>
		case devMEM://= 4,
			return "devMEM";
 80023aa:	4b0f      	ldr	r3, [pc, #60]	; (80023e8 <errName+0x124>)
 80023ac:	e012      	b.n	80023d4 <errName+0x110>
		case devRTC:// = 8,
			return "devRTC";
 80023ae:	4b0f      	ldr	r3, [pc, #60]	; (80023ec <errName+0x128>)
 80023b0:	e010      	b.n	80023d4 <errName+0x110>
		case devFIFO:// = 0x10,
			return "devFIFO";
 80023b2:	4b0f      	ldr	r3, [pc, #60]	; (80023f0 <errName+0x12c>)
 80023b4:	e00e      	b.n	80023d4 <errName+0x110>
		case devSYS:// = 0x20,
			return "devSYS";
 80023b6:	4b0f      	ldr	r3, [pc, #60]	; (80023f4 <errName+0x130>)
 80023b8:	e00c      	b.n	80023d4 <errName+0x110>
		case devSPI:// = 0x40,
			return "devSPI";
 80023ba:	4b0f      	ldr	r3, [pc, #60]	; (80023f8 <errName+0x134>)
 80023bc:	e00a      	b.n	80023d4 <errName+0x110>
		case devLCD:// = 0x80,
			return "devLCD";
 80023be:	4b0f      	ldr	r3, [pc, #60]	; (80023fc <errName+0x138>)
 80023c0:	e008      	b.n	80023d4 <errName+0x110>
		case devRDA:// = 0x100,
			return "devRDA";
 80023c2:	4b0f      	ldr	r3, [pc, #60]	; (8002400 <errName+0x13c>)
 80023c4:	e006      	b.n	80023d4 <errName+0x110>
		case devFS:// = 0x200
			return "devFS";
 80023c6:	4b0f      	ldr	r3, [pc, #60]	; (8002404 <errName+0x140>)
 80023c8:	e004      	b.n	80023d4 <errName+0x110>
#if defined(SET_BLE) || defined(SET_AUDIO)
		case devBLE:// = 0x400,
			return "devBLE";
 80023ca:	4b0f      	ldr	r3, [pc, #60]	; (8002408 <errName+0x144>)
 80023cc:	e002      	b.n	80023d4 <errName+0x110>
		case devQUE:// = 0x800
			return "devQUE";
 80023ce:	4b0f      	ldr	r3, [pc, #60]	; (800240c <errName+0x148>)
 80023d0:	e000      	b.n	80023d4 <errName+0x110>
#endif
	}

	return "???";
 80023d2:	4b0f      	ldr	r3, [pc, #60]	; (8002410 <errName+0x14c>)
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	370c      	adds	r7, #12
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr
 80023e0:	08014268 	.word	0x08014268
 80023e4:	08014270 	.word	0x08014270
 80023e8:	08014278 	.word	0x08014278
 80023ec:	08014280 	.word	0x08014280
 80023f0:	08014288 	.word	0x08014288
 80023f4:	08014290 	.word	0x08014290
 80023f8:	08014298 	.word	0x08014298
 80023fc:	080142a0 	.word	0x080142a0
 8002400:	080142a8 	.word	0x080142a8
 8002404:	080142b0 	.word	0x080142b0
 8002408:	080142b8 	.word	0x080142b8
 800240c:	080142c0 	.word	0x080142c0
 8002410:	080141f8 	.word	0x080141f8

08002414 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002414:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002418:	b0cf      	sub	sp, #316	; 0x13c
 800241a:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800241c:	f005 faa5 	bl	800796a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002420:	f001 fd22 	bl	8003e68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002424:	f001 ffc8 	bl	80043b8 <MX_GPIO_Init>
  MX_TIM4_Init();
 8002428:	f001 fe88 	bl	800413c <MX_TIM4_Init>
  MX_DMA_Init();
 800242c:	f001 ff6a 	bl	8004304 <MX_DMA_Init>
  MX_RTC_Init();
 8002430:	f001 fdac 	bl	8003f8c <MX_RTC_Init>
  MX_USART2_UART_Init();
 8002434:	f001 ff06 	bl	8004244 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8002438:	f001 fe42 	bl	80040c0 <MX_SPI2_Init>
  MX_SPI1_Init();
 800243c:	f001 fe02 	bl	8004044 <MX_SPI1_Init>
  MX_I2C1_Init();
 8002440:	f001 fd64 	bl	8003f0c <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8002444:	f001 ff2e 	bl	80042a4 <MX_USART3_UART_Init>
  MX_TIM6_Init();
 8002448:	f001 fec6 	bl	80041d8 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */


    if (HAL_TIM_Base_Start_IT(tikPort) != HAL_OK) devError |= devTIK;
 800244c:	4b64      	ldr	r3, [pc, #400]	; (80025e0 <main+0x1cc>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4618      	mov	r0, r3
 8002452:	f00b f8c9 	bl	800d5e8 <HAL_TIM_Base_Start_IT>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d006      	beq.n	800246a <main+0x56>
 800245c:	4b61      	ldr	r3, [pc, #388]	; (80025e4 <main+0x1d0>)
 800245e:	881b      	ldrh	r3, [r3, #0]
 8002460:	f043 0301 	orr.w	r3, r3, #1
 8002464:	b29a      	uxth	r2, r3
 8002466:	4b5f      	ldr	r3, [pc, #380]	; (80025e4 <main+0x1d0>)
 8002468:	801a      	strh	r2, [r3, #0]

    for (int8_t i = 0; i < 4; i++) {
 800246a:	2300      	movs	r3, #0
 800246c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 8002470:	e012      	b.n	8002498 <main+0x84>
    	errLedOn(true);
 8002472:	2001      	movs	r0, #1
 8002474:	f002 fb90 	bl	8004b98 <errLedOn>
    	HAL_Delay(100);
 8002478:	2064      	movs	r0, #100	; 0x64
 800247a:	f005 faeb 	bl	8007a54 <HAL_Delay>
    	errLedOn(false);
 800247e:	2000      	movs	r0, #0
 8002480:	f002 fb8a 	bl	8004b98 <errLedOn>
    	HAL_Delay(100);
 8002484:	2064      	movs	r0, #100	; 0x64
 8002486:	f005 fae5 	bl	8007a54 <HAL_Delay>
    for (int8_t i = 0; i < 4; i++) {
 800248a:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 800248e:	b2db      	uxtb	r3, r3
 8002490:	3301      	adds	r3, #1
 8002492:	b2db      	uxtb	r3, r3
 8002494:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 8002498:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 800249c:	2b03      	cmp	r3, #3
 800249e:	dde8      	ble.n	8002472 <main+0x5e>
    }

    if (HAL_UART_Receive_IT(cmdPort, &rxByte, 1) != HAL_OK) devError |= devUART;
 80024a0:	4b51      	ldr	r3, [pc, #324]	; (80025e8 <main+0x1d4>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2201      	movs	r2, #1
 80024a6:	4951      	ldr	r1, [pc, #324]	; (80025ec <main+0x1d8>)
 80024a8:	4618      	mov	r0, r3
 80024aa:	f00b fe09 	bl	800e0c0 <HAL_UART_Receive_IT>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d006      	beq.n	80024c2 <main+0xae>
 80024b4:	4b4b      	ldr	r3, [pc, #300]	; (80025e4 <main+0x1d0>)
 80024b6:	881b      	ldrh	r3, [r3, #0]
 80024b8:	f043 0302 	orr.w	r3, r3, #2
 80024bc:	b29a      	uxth	r2, r3
 80024be:	4b49      	ldr	r3, [pc, #292]	; (80025e4 <main+0x1d0>)
 80024c0:	801a      	strh	r2, [r3, #0]
#if defined(SET_BLE) || defined(SET_AUDIO)
    if (HAL_UART_Receive_IT(blePort, &rxbByte, 1) != HAL_OK) devError |= devBLE;
 80024c2:	4b4b      	ldr	r3, [pc, #300]	; (80025f0 <main+0x1dc>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	2201      	movs	r2, #1
 80024c8:	494a      	ldr	r1, [pc, #296]	; (80025f4 <main+0x1e0>)
 80024ca:	4618      	mov	r0, r3
 80024cc:	f00b fdf8 	bl	800e0c0 <HAL_UART_Receive_IT>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d006      	beq.n	80024e4 <main+0xd0>
 80024d6:	4b43      	ldr	r3, [pc, #268]	; (80025e4 <main+0x1d0>)
 80024d8:	881b      	ldrh	r3, [r3, #0]
 80024da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024de:	b29a      	uxth	r2, r3
 80024e0:	4b40      	ldr	r3, [pc, #256]	; (80025e4 <main+0x1d0>)
 80024e2:	801a      	strh	r2, [r3, #0]
#endif

    set_Date(epoch);
 80024e4:	4b44      	ldr	r3, [pc, #272]	; (80025f8 <main+0x1e4>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4618      	mov	r0, r3
 80024ea:	f002 fbff 	bl	8004cec <set_Date>

    HAL_Delay(100);
 80024ee:	2064      	movs	r0, #100	; 0x64
 80024f0:	f005 fab0 	bl	8007a54 <HAL_Delay>

    Report(1, "[que:%u] Start application ver.%s\r\n", cntEvt, ver);
 80024f4:	4b41      	ldr	r3, [pc, #260]	; (80025fc <main+0x1e8>)
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	461a      	mov	r2, r3
 80024fc:	4b40      	ldr	r3, [pc, #256]	; (8002600 <main+0x1ec>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4940      	ldr	r1, [pc, #256]	; (8002604 <main+0x1f0>)
 8002502:	2001      	movs	r0, #1
 8002504:	f002 fcec 	bl	8004ee0 <Report>

#ifdef SET_W25FLASH
    chipPresent = W25qxx_Init();
 8002508:	f004 fdb6 	bl	8007078 <W25qxx_Init>
 800250c:	4603      	mov	r3, r0
 800250e:	461a      	mov	r2, r3
 8002510:	4b3d      	ldr	r3, [pc, #244]	; (8002608 <main+0x1f4>)
 8002512:	701a      	strb	r2, [r3, #0]
    uint32_t cid = W25qxx_getChipID();
 8002514:	f004 fe6a 	bl	80071ec <W25qxx_getChipID>
 8002518:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
    if ( chipPresent && ((cid >= W25Q10) && (cid <= W25Q128)) ) validChipID = true;
 800251c:	4b3a      	ldr	r3, [pc, #232]	; (8002608 <main+0x1f4>)
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d00a      	beq.n	800253a <main+0x126>
 8002524:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d006      	beq.n	800253a <main+0x126>
 800252c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002530:	2b08      	cmp	r3, #8
 8002532:	d802      	bhi.n	800253a <main+0x126>
 8002534:	4b35      	ldr	r3, [pc, #212]	; (800260c <main+0x1f8>)
 8002536:	2201      	movs	r2, #1
 8002538:	701a      	strb	r2, [r3, #0]
    list_sector = W25qxx_getPageSize() << 1;
 800253a:	f004 fe7b 	bl	8007234 <W25qxx_getPageSize>
 800253e:	4603      	mov	r3, r0
 8002540:	005b      	lsls	r3, r3, #1
 8002542:	461a      	mov	r2, r3
 8002544:	4b32      	ldr	r3, [pc, #200]	; (8002610 <main+0x1fc>)
 8002546:	601a      	str	r2, [r3, #0]
    //
    listSize = sizeof(rec_t) * MAX_LIST;
 8002548:	4b32      	ldr	r3, [pc, #200]	; (8002614 <main+0x200>)
 800254a:	f44f 7261 	mov.w	r2, #900	; 0x384
 800254e:	801a      	strh	r2, [r3, #0]
    memset((uint8_t *)&list[0].band, 0, listSize);
 8002550:	4b30      	ldr	r3, [pc, #192]	; (8002614 <main+0x200>)
 8002552:	881b      	ldrh	r3, [r3, #0]
 8002554:	461a      	mov	r2, r3
 8002556:	2100      	movs	r1, #0
 8002558:	482f      	ldr	r0, [pc, #188]	; (8002618 <main+0x204>)
 800255a:	f00d fa95 	bl	800fa88 <memset>
    //
    cfgSector = W25qxx_getSectorCount() - 1;
 800255e:	f004 fe51 	bl	8007204 <W25qxx_getSectorCount>
 8002562:	4603      	mov	r3, r0
 8002564:	3b01      	subs	r3, #1
 8002566:	4a2d      	ldr	r2, [pc, #180]	; (800261c <main+0x208>)
 8002568:	6013      	str	r3, [r2, #0]
    if (W25qxx_IsEmptySector(cfgSector, 0, listSize)) {//sector is empty -> need write data to sector
 800256a:	4b2c      	ldr	r3, [pc, #176]	; (800261c <main+0x208>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a29      	ldr	r2, [pc, #164]	; (8002614 <main+0x200>)
 8002570:	8812      	ldrh	r2, [r2, #0]
 8002572:	2100      	movs	r1, #0
 8002574:	4618      	mov	r0, r3
 8002576:	f004 fec7 	bl	8007308 <W25qxx_IsEmptySector>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d017      	beq.n	80025b0 <main+0x19c>
    	if (!(devError & devSPI)) {
 8002580:	4b18      	ldr	r3, [pc, #96]	; (80025e4 <main+0x1d0>)
 8002582:	881b      	ldrh	r3, [r3, #0]
 8002584:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002588:	2b00      	cmp	r3, #0
 800258a:	d156      	bne.n	800263a <main+0x226>
    		W25qxx_WriteSector((uint8_t *)&def_list[0].band, cfgSector, 0, listSize);
 800258c:	4b23      	ldr	r3, [pc, #140]	; (800261c <main+0x208>)
 800258e:	6819      	ldr	r1, [r3, #0]
 8002590:	4b20      	ldr	r3, [pc, #128]	; (8002614 <main+0x200>)
 8002592:	881b      	ldrh	r3, [r3, #0]
 8002594:	2200      	movs	r2, #0
 8002596:	4822      	ldr	r0, [pc, #136]	; (8002620 <main+0x20c>)
 8002598:	f005 f82a 	bl	80075f0 <W25qxx_WriteSector>
    		Report(1, "Writen cfg_stations_data (%lu bytes) to cfgSector #%lu\r\n", listSize, cfgSector);
 800259c:	4b1d      	ldr	r3, [pc, #116]	; (8002614 <main+0x200>)
 800259e:	881b      	ldrh	r3, [r3, #0]
 80025a0:	461a      	mov	r2, r3
 80025a2:	4b1e      	ldr	r3, [pc, #120]	; (800261c <main+0x208>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	491f      	ldr	r1, [pc, #124]	; (8002624 <main+0x210>)
 80025a8:	2001      	movs	r0, #1
 80025aa:	f002 fc99 	bl	8004ee0 <Report>
 80025ae:	e044      	b.n	800263a <main+0x226>
      	}
    } else {//in sector	present any data
    	if (!(devError & devSPI)) {
 80025b0:	4b0c      	ldr	r3, [pc, #48]	; (80025e4 <main+0x1d0>)
 80025b2:	881b      	ldrh	r3, [r3, #0]
 80025b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d137      	bne.n	800262c <main+0x218>
    		W25qxx_ReadSector((uint8_t *)&list[0].band, cfgSector, 0, listSize);
 80025bc:	4b17      	ldr	r3, [pc, #92]	; (800261c <main+0x208>)
 80025be:	6819      	ldr	r1, [r3, #0]
 80025c0:	4b14      	ldr	r3, [pc, #80]	; (8002614 <main+0x200>)
 80025c2:	881b      	ldrh	r3, [r3, #0]
 80025c4:	2200      	movs	r2, #0
 80025c6:	4814      	ldr	r0, [pc, #80]	; (8002618 <main+0x204>)
 80025c8:	f005 f93a 	bl	8007840 <W25qxx_ReadSector>
    		Report(1, "Readed cfg_stations_data (%lu bytes) from cfgSector #%lu\r\n", listSize, cfgSector);
 80025cc:	4b11      	ldr	r3, [pc, #68]	; (8002614 <main+0x200>)
 80025ce:	881b      	ldrh	r3, [r3, #0]
 80025d0:	461a      	mov	r2, r3
 80025d2:	4b12      	ldr	r3, [pc, #72]	; (800261c <main+0x208>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4914      	ldr	r1, [pc, #80]	; (8002628 <main+0x214>)
 80025d8:	2001      	movs	r0, #1
 80025da:	f002 fc81 	bl	8004ee0 <Report>
 80025de:	e02c      	b.n	800263a <main+0x226>
 80025e0:	20000008 	.word	0x20000008
 80025e4:	20001bc8 	.word	0x20001bc8
 80025e8:	20000010 	.word	0x20000010
 80025ec:	20001bd8 	.word	0x20001bd8
 80025f0:	20000218 	.word	0x20000218
 80025f4:	200033ba 	.word	0x200033ba
 80025f8:	20000018 	.word	0x20000018
 80025fc:	20001fe4 	.word	0x20001fe4
 8002600:	20000004 	.word	0x20000004
 8002604:	080142c8 	.word	0x080142c8
 8002608:	20002ffc 	.word	0x20002ffc
 800260c:	20002ffd 	.word	0x20002ffd
 8002610:	20001ff0 	.word	0x20001ff0
 8002614:	200033b8 	.word	0x200033b8
 8002618:	20003034 	.word	0x20003034
 800261c:	20003008 	.word	0x20003008
 8002620:	08015404 	.word	0x08015404
 8002624:	080142ec 	.word	0x080142ec
 8002628:	08014328 	.word	0x08014328
      	} else {
      		memcpy((uint8_t *)&list[0].band, (uint8_t *)&def_list[0].band, listSize);
 800262c:	4ba7      	ldr	r3, [pc, #668]	; (80028cc <main+0x4b8>)
 800262e:	881b      	ldrh	r3, [r3, #0]
 8002630:	461a      	mov	r2, r3
 8002632:	49a7      	ldr	r1, [pc, #668]	; (80028d0 <main+0x4bc>)
 8002634:	48a7      	ldr	r0, [pc, #668]	; (80028d4 <main+0x4c0>)
 8002636:	f00d fa19 	bl	800fa6c <memcpy>
#endif


#ifdef SET_RDA_CHIP

    rdaID = rda5807_init(&Freq);
 800263a:	48a7      	ldr	r0, [pc, #668]	; (80028d8 <main+0x4c4>)
 800263c:	f003 fa3a 	bl	8005ab4 <rda5807_init>
 8002640:	4603      	mov	r3, r0
 8002642:	461a      	mov	r2, r3
 8002644:	4ba5      	ldr	r3, [pc, #660]	; (80028dc <main+0x4c8>)
 8002646:	701a      	strb	r2, [r3, #0]
    RSSI = rda5807_rssi();
 8002648:	f003 faa2 	bl	8005b90 <rda5807_rssi>
 800264c:	4603      	mov	r3, r0
 800264e:	461a      	mov	r2, r3
 8002650:	4ba3      	ldr	r3, [pc, #652]	; (80028e0 <main+0x4cc>)
 8002652:	801a      	strh	r2, [r3, #0]
    rda5807_SetVolume(Volume);
 8002654:	4ba3      	ldr	r3, [pc, #652]	; (80028e4 <main+0x4d0>)
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	4618      	mov	r0, r3
 800265a:	f003 fc77 	bl	8005f4c <rda5807_SetVolume>
    rda5807_SetBassBoost(BassBoost);
 800265e:	4ba2      	ldr	r3, [pc, #648]	; (80028e8 <main+0x4d4>)
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	4618      	mov	r0, r3
 8002664:	f003 fcba 	bl	8005fdc <rda5807_SetBassBoost>
    stereo = rda5807_Get_StereoMonoFlag();
 8002668:	f003 fdce 	bl	8006208 <rda5807_Get_StereoMonoFlag>
 800266c:	4603      	mov	r3, r0
 800266e:	461a      	mov	r2, r3
 8002670:	4b9e      	ldr	r3, [pc, #632]	; (80028ec <main+0x4d8>)
 8002672:	701a      	strb	r2, [r3, #0]
    Chan = rda5807_Get_Channel();
 8002674:	f003 fde0 	bl	8006238 <rda5807_Get_Channel>
 8002678:	4603      	mov	r3, r0
 800267a:	461a      	mov	r2, r3
 800267c:	4b9c      	ldr	r3, [pc, #624]	; (80028f0 <main+0x4dc>)
 800267e:	801a      	strh	r2, [r3, #0]
#endif

#ifdef SET_DISPLAY

	#ifdef FONT_6x8
  		FontDef_t Font_6x8 = { 6, 8, Font6x8 };
 8002680:	4a9c      	ldr	r2, [pc, #624]	; (80028f4 <main+0x4e0>)
 8002682:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002686:	e892 0003 	ldmia.w	r2, {r0, r1}
 800268a:	6018      	str	r0, [r3, #0]
 800268c:	3304      	adds	r3, #4
 800268e:	8019      	strh	r1, [r3, #0]
  		lfnt = &Font_6x8;
 8002690:	4a99      	ldr	r2, [pc, #612]	; (80028f8 <main+0x4e4>)
 8002692:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002696:	6013      	str	r3, [r2, #0]
	#endif

  	uint16_t lin1 = 1;
 8002698:	2301      	movs	r3, #1
 800269a:	f8a7 30de 	strh.w	r3, [r7, #222]	; 0xde
  	uint16_t lin2 = lin1 + Font_6x8.FontHeight;//chipID...
 800269e:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 80026a2:	b29a      	uxth	r2, r3
 80026a4:	f8b7 30de 	ldrh.w	r3, [r7, #222]	; 0xde
 80026a8:	4413      	add	r3, r2
 80026aa:	f8a7 30dc 	strh.w	r3, [r7, #220]	; 0xdc
  	uint16_t lin3 = lin2 + Font_6x8.FontHeight + 1;//Band...
 80026ae:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 80026b2:	b29a      	uxth	r2, r3
 80026b4:	f8b7 30dc 	ldrh.w	r3, [r7, #220]	; 0xdc
 80026b8:	4413      	add	r3, r2
 80026ba:	b29b      	uxth	r3, r3
 80026bc:	3301      	adds	r3, #1
 80026be:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
  	uint16_t lin4 = lin3 + Font_6x8.FontHeight + 1;//Volume...//Freq...
 80026c2:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 80026c6:	b29a      	uxth	r2, r3
 80026c8:	f8b7 30da 	ldrh.w	r3, [r7, #218]	; 0xda
 80026cc:	4413      	add	r3, r2
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	3301      	adds	r3, #1
 80026d2:	f8a7 30d8 	strh.w	r3, [r7, #216]	; 0xd8
  	uint16_t lin5 = lin4 + Font_6x8.FontHeight + 1;//Freq...//Volume...
 80026d6:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 80026da:	b29a      	uxth	r2, r3
 80026dc:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
 80026e0:	4413      	add	r3, r2
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	3301      	adds	r3, #1
 80026e6:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
  	uint16_t lin6 = lin5 + Font_6x8.FontHeight + 1;//Station
 80026ea:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 80026ee:	b29a      	uxth	r2, r3
 80026f0:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 80026f4:	4413      	add	r3, r2
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	3301      	adds	r3, #1
 80026fa:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
  	char st[64];
  	char sta[32];
  	char stb[32];

  	ST7565_Reset();
 80026fe:	f7fe fdd7 	bl	80012b0 <ST7565_Reset>
  	ST7565_Init();
 8002702:	f7fe feed 	bl	80014e0 <ST7565_Init>

    int dl = sprintf(tmp, "Ver.%s", ver);
 8002706:	4b7d      	ldr	r3, [pc, #500]	; (80028fc <main+0x4e8>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	461a      	mov	r2, r3
 800270c:	497c      	ldr	r1, [pc, #496]	; (8002900 <main+0x4ec>)
 800270e:	487d      	ldr	r0, [pc, #500]	; (8002904 <main+0x4f0>)
 8002710:	f00d ff32 	bl	8010578 <siprintf>
 8002714:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
    uint16_t x = ((SCREEN_WIDTH - (Font_6x8.FontWidth * dl)) >> 1) & 0x7f;
 8002718:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 800271c:	461a      	mov	r2, r3
 800271e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002722:	fb02 f303 	mul.w	r3, r2, r3
 8002726:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800272a:	105b      	asrs	r3, r3, #1
 800272c:	b29b      	uxth	r3, r3
 800272e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002732:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
    ST7565_Print(x, SCREEN_HEIGHT - Font_6x8.FontHeight, tmp, &Font_6x8, 1, PIX_ON);//печатаем надпись с указаным шрифтом и цветом(PIX_ON-белый, PIX_OFF-черный)
 8002736:	f9b7 00d2 	ldrsh.w	r0, [r7, #210]	; 0xd2
 800273a:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 800273e:	b29b      	uxth	r3, r3
 8002740:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8002744:	b29b      	uxth	r3, r3
 8002746:	b219      	sxth	r1, r3
 8002748:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800274c:	2201      	movs	r2, #1
 800274e:	9201      	str	r2, [sp, #4]
 8002750:	2201      	movs	r2, #1
 8002752:	9200      	str	r2, [sp, #0]
 8002754:	4a6b      	ldr	r2, [pc, #428]	; (8002904 <main+0x4f0>)
 8002756:	f7ff f90b 	bl	8001970 <ST7565_Print>

	#ifdef SET_RDA_CHIP
    	int il = sprintf(st, "RDA5807 chipID:0x%x", rdaID);
 800275a:	4b60      	ldr	r3, [pc, #384]	; (80028dc <main+0x4c8>)
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	461a      	mov	r2, r3
 8002760:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002764:	4968      	ldr	r1, [pc, #416]	; (8002908 <main+0x4f4>)
 8002766:	4618      	mov	r0, r3
 8002768:	f00d ff06 	bl	8010578 <siprintf>
 800276c:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
    	uint16_t xf = ((SCREEN_WIDTH - (Font_6x8.FontWidth * il)) >> 1) & 0x7f;
 8002770:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 8002774:	461a      	mov	r2, r3
 8002776:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800277a:	fb02 f303 	mul.w	r3, r2, r3
 800277e:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002782:	105b      	asrs	r3, r3, #1
 8002784:	b29b      	uxth	r3, r3
 8002786:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800278a:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
    	if (!xf) xf = 1;
 800278e:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8002792:	2b00      	cmp	r3, #0
 8002794:	d102      	bne.n	800279c <main+0x388>
 8002796:	2301      	movs	r3, #1
 8002798:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
    	ST7565_Print(xf, lin2, st, &Font_6x8, 1, PIX_ON);
 800279c:	f9b7 010a 	ldrsh.w	r0, [r7, #266]	; 0x10a
 80027a0:	f9b7 10dc 	ldrsh.w	r1, [r7, #220]	; 0xdc
 80027a4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80027a8:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80027ac:	2601      	movs	r6, #1
 80027ae:	9601      	str	r6, [sp, #4]
 80027b0:	2601      	movs	r6, #1
 80027b2:	9600      	str	r6, [sp, #0]
 80027b4:	f7ff f8dc 	bl	8001970 <ST7565_Print>

    	int it = sprintf(stb, "FM Band:%s", allBands[Band]);//(uint16_t)lBand, (uint16_t)rBand);
 80027b8:	4b54      	ldr	r3, [pc, #336]	; (800290c <main+0x4f8>)
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	461a      	mov	r2, r3
 80027be:	4b54      	ldr	r3, [pc, #336]	; (8002910 <main+0x4fc>)
 80027c0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80027c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027c8:	4952      	ldr	r1, [pc, #328]	; (8002914 <main+0x500>)
 80027ca:	4618      	mov	r0, r3
 80027cc:	f00d fed4 	bl	8010578 <siprintf>
 80027d0:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    	int lit = it;
 80027d4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80027d8:	62bb      	str	r3, [r7, #40]	; 0x28
    	xf = ((SCREEN_WIDTH - (Font_6x8.FontWidth * it)) >> 1) & 0x7f;
 80027da:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 80027de:	461a      	mov	r2, r3
 80027e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80027e4:	fb02 f303 	mul.w	r3, r2, r3
 80027e8:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80027ec:	105b      	asrs	r3, r3, #1
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80027f4:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
    	if ((!xf) || (xf > (SCREEN_WIDTH - 3))) xf = 1;
 80027f8:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d003      	beq.n	8002808 <main+0x3f4>
 8002800:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8002804:	2b7d      	cmp	r3, #125	; 0x7d
 8002806:	d902      	bls.n	800280e <main+0x3fa>
 8002808:	2301      	movs	r3, #1
 800280a:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
    	ST7565_Print(xf, lin3, stb, &Font_6x8, 1, PIX_ON);
 800280e:	f9b7 010a 	ldrsh.w	r0, [r7, #266]	; 0x10a
 8002812:	f9b7 10da 	ldrsh.w	r1, [r7, #218]	; 0xda
 8002816:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800281a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800281e:	2601      	movs	r6, #1
 8002820:	9601      	str	r6, [sp, #4]
 8002822:	2601      	movs	r6, #1
 8002824:	9600      	str	r6, [sp, #0]
 8002826:	f7ff f8a3 	bl	8001970 <ST7565_Print>

    	int im = sprintf(st, "Bass:%u Vol:%u", BassBoost, Volume);
 800282a:	4b2f      	ldr	r3, [pc, #188]	; (80028e8 <main+0x4d4>)
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	461a      	mov	r2, r3
 8002830:	4b2c      	ldr	r3, [pc, #176]	; (80028e4 <main+0x4d0>)
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8002838:	4937      	ldr	r1, [pc, #220]	; (8002918 <main+0x504>)
 800283a:	f00d fe9d 	bl	8010578 <siprintf>
 800283e:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    	int lim = im;
 8002842:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002846:	627b      	str	r3, [r7, #36]	; 0x24
    	xf = ((SCREEN_WIDTH - (Font_6x8.FontWidth * im)) >> 1) & 0x7f;
 8002848:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 800284c:	461a      	mov	r2, r3
 800284e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002852:	fb02 f303 	mul.w	r3, r2, r3
 8002856:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800285a:	105b      	asrs	r3, r3, #1
 800285c:	b29b      	uxth	r3, r3
 800285e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002862:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
    	if ((!xf) || (xf > (SCREEN_WIDTH - 3))) xf = 1;
 8002866:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 800286a:	2b00      	cmp	r3, #0
 800286c:	d003      	beq.n	8002876 <main+0x462>
 800286e:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8002872:	2b7d      	cmp	r3, #125	; 0x7d
 8002874:	d902      	bls.n	800287c <main+0x468>
 8002876:	2301      	movs	r3, #1
 8002878:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
    	ST7565_Print(xf, lin4, st, &Font_6x8, 1, PIX_ON);
 800287c:	f9b7 010a 	ldrsh.w	r0, [r7, #266]	; 0x10a
 8002880:	f9b7 10d8 	ldrsh.w	r1, [r7, #216]	; 0xd8
 8002884:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002888:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800288c:	2601      	movs	r6, #1
 800288e:	9601      	str	r6, [sp, #4]
 8002890:	2601      	movs	r6, #1
 8002892:	9600      	str	r6, [sp, #0]
 8002894:	f7ff f86c 	bl	8001970 <ST7565_Print>

    	if (stereo)
 8002898:	4b14      	ldr	r3, [pc, #80]	; (80028ec <main+0x4d8>)
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d03f      	beq.n	8002920 <main+0x50c>
    		il = sprintf(st, "Rssi:%u Freq:%.1f S", RSSI, Freq);
 80028a0:	4b0f      	ldr	r3, [pc, #60]	; (80028e0 <main+0x4cc>)
 80028a2:	881b      	ldrh	r3, [r3, #0]
 80028a4:	461e      	mov	r6, r3
 80028a6:	4b0c      	ldr	r3, [pc, #48]	; (80028d8 <main+0x4c4>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4618      	mov	r0, r3
 80028ac:	f7fd fe4c 	bl	8000548 <__aeabi_f2d>
 80028b0:	4602      	mov	r2, r0
 80028b2:	460b      	mov	r3, r1
 80028b4:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 80028b8:	e9cd 2300 	strd	r2, r3, [sp]
 80028bc:	4632      	mov	r2, r6
 80028be:	4917      	ldr	r1, [pc, #92]	; (800291c <main+0x508>)
 80028c0:	f00d fe5a 	bl	8010578 <siprintf>
 80028c4:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 80028c8:	e03e      	b.n	8002948 <main+0x534>
 80028ca:	bf00      	nop
 80028cc:	200033b8 	.word	0x200033b8
 80028d0:	08015404 	.word	0x08015404
 80028d4:	20003034 	.word	0x20003034
 80028d8:	200001f4 	.word	0x200001f4
 80028dc:	20003020 	.word	0x20003020
 80028e0:	2000301e 	.word	0x2000301e
 80028e4:	200001ff 	.word	0x200001ff
 80028e8:	20003022 	.word	0x20003022
 80028ec:	20003024 	.word	0x20003024
 80028f0:	2000301c 	.word	0x2000301c
 80028f4:	0801479c 	.word	0x0801479c
 80028f8:	20003010 	.word	0x20003010
 80028fc:	20000004 	.word	0x20000004
 8002900:	08014364 	.word	0x08014364
 8002904:	20001348 	.word	0x20001348
 8002908:	0801436c 	.word	0x0801436c
 800290c:	200001fc 	.word	0x200001fc
 8002910:	20000208 	.word	0x20000208
 8002914:	08014380 	.word	0x08014380
 8002918:	0801438c 	.word	0x0801438c
 800291c:	0801439c 	.word	0x0801439c
    	else
    		il = sprintf(st, "Rssi:%u Freq:%.1f", RSSI, Freq);
 8002920:	4bc9      	ldr	r3, [pc, #804]	; (8002c48 <main+0x834>)
 8002922:	881b      	ldrh	r3, [r3, #0]
 8002924:	461e      	mov	r6, r3
 8002926:	4bc9      	ldr	r3, [pc, #804]	; (8002c4c <main+0x838>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4618      	mov	r0, r3
 800292c:	f7fd fe0c 	bl	8000548 <__aeabi_f2d>
 8002930:	4602      	mov	r2, r0
 8002932:	460b      	mov	r3, r1
 8002934:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8002938:	e9cd 2300 	strd	r2, r3, [sp]
 800293c:	4632      	mov	r2, r6
 800293e:	49c4      	ldr	r1, [pc, #784]	; (8002c50 <main+0x83c>)
 8002940:	f00d fe1a 	bl	8010578 <siprintf>
 8002944:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
    	int lil = il;
 8002948:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800294c:	623b      	str	r3, [r7, #32]
    	xf = ((SCREEN_WIDTH - (Font_6x8.FontWidth * il)) >> 1) & 0x7f;
 800294e:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 8002952:	461a      	mov	r2, r3
 8002954:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002958:	fb02 f303 	mul.w	r3, r2, r3
 800295c:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002960:	105b      	asrs	r3, r3, #1
 8002962:	b29b      	uxth	r3, r3
 8002964:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002968:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
    	if ((!xf) || (xf > (SCREEN_WIDTH - 3))) xf = 1;
 800296c:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8002970:	2b00      	cmp	r3, #0
 8002972:	d003      	beq.n	800297c <main+0x568>
 8002974:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8002978:	2b7d      	cmp	r3, #125	; 0x7d
 800297a:	d902      	bls.n	8002982 <main+0x56e>
 800297c:	2301      	movs	r3, #1
 800297e:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
    	ST7565_Print(xf, lin5, st, &Font_6x8, 1, PIX_ON);
 8002982:	f9b7 010a 	ldrsh.w	r0, [r7, #266]	; 0x10a
 8002986:	f9b7 10d6 	ldrsh.w	r1, [r7, #214]	; 0xd6
 800298a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800298e:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8002992:	2601      	movs	r6, #1
 8002994:	9601      	str	r6, [sp, #4]
 8002996:	2601      	movs	r6, #1
 8002998:	9600      	str	r6, [sp, #0]
 800299a:	f7fe ffe9 	bl	8001970 <ST7565_Print>

    	int ia = sprintf(sta, "%s", nameStation(Freq));
 800299e:	4bab      	ldr	r3, [pc, #684]	; (8002c4c <main+0x838>)
 80029a0:	edd3 7a00 	vldr	s15, [r3]
 80029a4:	eeb0 0a67 	vmov.f32	s0, s15
 80029a8:	f001 ff5e 	bl	8004868 <nameStation>
 80029ac:	4602      	mov	r2, r0
 80029ae:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80029b2:	49a8      	ldr	r1, [pc, #672]	; (8002c54 <main+0x840>)
 80029b4:	4618      	mov	r0, r3
 80029b6:	f00d fddf 	bl	8010578 <siprintf>
 80029ba:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
    	int lia = ia;
 80029be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80029c2:	61fb      	str	r3, [r7, #28]
    	xf = ((SCREEN_WIDTH - (Font_6x8.FontWidth * ia)) >> 1) & 0x7f;
 80029c4:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 80029c8:	461a      	mov	r2, r3
 80029ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80029ce:	fb02 f303 	mul.w	r3, r2, r3
 80029d2:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80029d6:	105b      	asrs	r3, r3, #1
 80029d8:	b29b      	uxth	r3, r3
 80029da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80029de:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
    	if ((!xf) || (xf > (SCREEN_WIDTH - 3))) xf = 1;
 80029e2:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d003      	beq.n	80029f2 <main+0x5de>
 80029ea:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 80029ee:	2b7d      	cmp	r3, #125	; 0x7d
 80029f0:	d902      	bls.n	80029f8 <main+0x5e4>
 80029f2:	2301      	movs	r3, #1
 80029f4:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
    	ST7565_Print(xf, lin6, sta, &Font_6x8, 1, PIX_ON);
 80029f8:	f9b7 010a 	ldrsh.w	r0, [r7, #266]	; 0x10a
 80029fc:	f9b7 10d4 	ldrsh.w	r1, [r7, #212]	; 0xd4
 8002a00:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002a04:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8002a08:	2601      	movs	r6, #1
 8002a0a:	9601      	str	r6, [sp, #4]
 8002a0c:	2601      	movs	r6, #1
 8002a0e:	9600      	str	r6, [sp, #0]
 8002a10:	f7fe ffae 	bl	8001970 <ST7565_Print>

    	Report(1, "ChipID:0x%x Chan:%u Freq:%.2f %s RSSI:%u Band:%s Vol:%u BassEn:%u\r\n",
 8002a14:	4b90      	ldr	r3, [pc, #576]	; (8002c58 <main+0x844>)
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	4698      	mov	r8, r3
 8002a1a:	4b90      	ldr	r3, [pc, #576]	; (8002c5c <main+0x848>)
 8002a1c:	881b      	ldrh	r3, [r3, #0]
 8002a1e:	4699      	mov	r9, r3
 8002a20:	4b8a      	ldr	r3, [pc, #552]	; (8002c4c <main+0x838>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7fd fd8f 	bl	8000548 <__aeabi_f2d>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	460b      	mov	r3, r1
 8002a2e:	4986      	ldr	r1, [pc, #536]	; (8002c48 <main+0x834>)
 8002a30:	8809      	ldrh	r1, [r1, #0]
 8002a32:	460e      	mov	r6, r1
 8002a34:	498a      	ldr	r1, [pc, #552]	; (8002c60 <main+0x84c>)
 8002a36:	7809      	ldrb	r1, [r1, #0]
 8002a38:	4608      	mov	r0, r1
 8002a3a:	498a      	ldr	r1, [pc, #552]	; (8002c64 <main+0x850>)
 8002a3c:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8002a40:	4889      	ldr	r0, [pc, #548]	; (8002c68 <main+0x854>)
 8002a42:	7800      	ldrb	r0, [r0, #0]
 8002a44:	6078      	str	r0, [r7, #4]
 8002a46:	4889      	ldr	r0, [pc, #548]	; (8002c6c <main+0x858>)
 8002a48:	7800      	ldrb	r0, [r0, #0]
 8002a4a:	9006      	str	r0, [sp, #24]
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	9005      	str	r0, [sp, #20]
 8002a50:	9104      	str	r1, [sp, #16]
 8002a52:	9603      	str	r6, [sp, #12]
 8002a54:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8002a58:	9102      	str	r1, [sp, #8]
 8002a5a:	e9cd 2300 	strd	r2, r3, [sp]
 8002a5e:	464b      	mov	r3, r9
 8002a60:	4642      	mov	r2, r8
 8002a62:	4983      	ldr	r1, [pc, #524]	; (8002c70 <main+0x85c>)
 8002a64:	2001      	movs	r0, #1
 8002a66:	f002 fa3b 	bl	8004ee0 <Report>
    			rdaID, Chan, Freq, sta, RSSI, allBands[Band], Volume, BassBoost);
	#endif

    ST7565_DrawRectangle(0, Font_6x8.FontHeight, SCREEN_WIDTH - 1, SCREEN_HEIGHT - (Font_6x8.FontHeight << 1) - 2, PIX_ON);
 8002a6a:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 8002a6e:	b219      	sxth	r1, r3
 8002a70:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 8002a74:	b29b      	uxth	r3, r3
 8002a76:	005b      	lsls	r3, r3, #1
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	f1c3 033e 	rsb	r3, r3, #62	; 0x3e
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	b21b      	sxth	r3, r3
 8002a82:	2201      	movs	r2, #1
 8002a84:	9200      	str	r2, [sp, #0]
 8002a86:	227f      	movs	r2, #127	; 0x7f
 8002a88:	2000      	movs	r0, #0
 8002a8a:	f7ff f948 	bl	8001d1e <ST7565_DrawRectangle>
    ST7565_DrawFilledRectangle(0, 0, SCREEN_WIDTH - 1, Font_6x8.FontHeight, PIX_ON);
 8002a8e:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 8002a92:	b21b      	sxth	r3, r3
 8002a94:	2201      	movs	r2, #1
 8002a96:	9200      	str	r2, [sp, #0]
 8002a98:	227f      	movs	r2, #127	; 0x7f
 8002a9a:	2100      	movs	r1, #0
 8002a9c:	2000      	movs	r0, #0
 8002a9e:	f7ff f9c0 	bl	8001e22 <ST7565_DrawFilledRectangle>
    ST7565_Update();
 8002aa2:	f7fe fdb5 	bl	8001610 <ST7565_Update>

    startSec = true;
 8002aa6:	4b73      	ldr	r3, [pc, #460]	; (8002c74 <main+0x860>)
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	701a      	strb	r2, [r3, #0]
#if defined(SET_BLE) || defined(SET_AUDIO)
	#ifdef SET_BLE
    	bleWakeUp();
	#endif

    bleQueAckFlag   = initRECQ(&bleQueAck);
 8002aac:	4872      	ldr	r0, [pc, #456]	; (8002c78 <main+0x864>)
 8002aae:	f7ff fad5 	bl	800205c <initRECQ>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	4b71      	ldr	r3, [pc, #452]	; (8002c7c <main+0x868>)
 8002ab8:	701a      	strb	r2, [r3, #0]
    bleQueCmdFlag   = initRECQ(&bleQueCmd);
 8002aba:	4871      	ldr	r0, [pc, #452]	; (8002c80 <main+0x86c>)
 8002abc:	f7ff face 	bl	800205c <initRECQ>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	4b6f      	ldr	r3, [pc, #444]	; (8002c84 <main+0x870>)
 8002ac6:	701a      	strb	r2, [r3, #0]
	#endif
#endif


#ifdef SET_IRED
    bool ep_start = false;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	f887 3109 	strb.w	r3, [r7, #265]	; 0x109
    char ep_str[16] = {0};
 8002ace:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002ad2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	601a      	str	r2, [r3, #0]
 8002ada:	3304      	adds	r3, #4
 8002adc:	2200      	movs	r2, #0
 8002ade:	601a      	str	r2, [r3, #0]
 8002ae0:	605a      	str	r2, [r3, #4]
 8002ae2:	609a      	str	r2, [r3, #8]
    uint32_t ep_tmr = 0;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	uint32_t tmr_ired = 0;
 8002aea:	2300      	movs	r3, #0
 8002aec:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
	//uint32_t clr_tmr = 0;
	enIntIRED();
 8002af0:	f7fe fb08 	bl	8001104 <enIntIRED>
#endif


    uint16_t lastErr = devOK;
 8002af4:	2300      	movs	r3, #0
 8002af6:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe

    putEvt(evt_Freq);
 8002afa:	200c      	movs	r0, #12
 8002afc:	f001 fdea 	bl	80046d4 <putEvt>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


    while (!restart) {
 8002b00:	f001 b95c 	b.w	8003dbc <main+0x19a8>

/**/
#ifdef SET_IRED
  		if (!tmr_ired) {
 8002b04:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	f040 81c4 	bne.w	8002e96 <main+0xa82>
			if (decodeIRED(&results)) {
 8002b0e:	485e      	ldr	r0, [pc, #376]	; (8002c88 <main+0x874>)
 8002b10:	f7fe fac2 	bl	8001098 <decodeIRED>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	f000 81bd 	beq.w	8002e96 <main+0xa82>

				tmr_ired = get_mstmr(_250ms);
 8002b1c:	f04f 0019 	mov.w	r0, #25
 8002b20:	f04f 0100 	mov.w	r1, #0
 8002b24:	f002 f88a 	bl	8004c3c <get_mstmr>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	460b      	mov	r3, r1
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
				HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 8002b32:	2200      	movs	r2, #0
 8002b34:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002b38:	4854      	ldr	r0, [pc, #336]	; (8002c8c <main+0x878>)
 8002b3a:	f005 fd59 	bl	80085f0 <HAL_GPIO_WritePin>
				int8_t kid = -1;
 8002b3e:	23ff      	movs	r3, #255	; 0xff
 8002b40:	f887 30fd 	strb.w	r3, [r7, #253]	; 0xfd
				for (int8_t i = 0; i < MAX_IRED_KEY; i++) {
 8002b44:	2300      	movs	r3, #0
 8002b46:	f887 30fc 	strb.w	r3, [r7, #252]	; 0xfc
 8002b4a:	e019      	b.n	8002b80 <main+0x76c>
					if (results.value == keyAll[i].code) {
 8002b4c:	4b4e      	ldr	r3, [pc, #312]	; (8002c88 <main+0x874>)
 8002b4e:	6819      	ldr	r1, [r3, #0]
 8002b50:	f997 20fc 	ldrsb.w	r2, [r7, #252]	; 0xfc
 8002b54:	484e      	ldr	r0, [pc, #312]	; (8002c90 <main+0x87c>)
 8002b56:	4613      	mov	r3, r2
 8002b58:	005b      	lsls	r3, r3, #1
 8002b5a:	4413      	add	r3, r2
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	4403      	add	r3, r0
 8002b60:	3308      	adds	r3, #8
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4299      	cmp	r1, r3
 8002b66:	d104      	bne.n	8002b72 <main+0x75e>
						kid = i;
 8002b68:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 8002b6c:	f887 30fd 	strb.w	r3, [r7, #253]	; 0xfd
						break;
 8002b70:	e00a      	b.n	8002b88 <main+0x774>
				for (int8_t i = 0; i < MAX_IRED_KEY; i++) {
 8002b72:	f997 30fc 	ldrsb.w	r3, [r7, #252]	; 0xfc
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	3301      	adds	r3, #1
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	f887 30fc 	strb.w	r3, [r7, #252]	; 0xfc
 8002b80:	f997 30fc 	ldrsb.w	r3, [r7, #252]	; 0xfc
 8002b84:	2b14      	cmp	r3, #20
 8002b86:	dde1      	ble.n	8002b4c <main+0x738>
					}
				}
				//
				if (kid == -1) sprintf(stline, "CODE:%08lX", results.value);
 8002b88:	f997 30fd 	ldrsb.w	r3, [r7, #253]	; 0xfd
 8002b8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b90:	d107      	bne.n	8002ba2 <main+0x78e>
 8002b92:	4b3d      	ldr	r3, [pc, #244]	; (8002c88 <main+0x874>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	461a      	mov	r2, r3
 8002b98:	493e      	ldr	r1, [pc, #248]	; (8002c94 <main+0x880>)
 8002b9a:	483f      	ldr	r0, [pc, #252]	; (8002c98 <main+0x884>)
 8002b9c:	f00d fcec 	bl	8010578 <siprintf>
 8002ba0:	e00c      	b.n	8002bbc <main+0x7a8>
						  else sprintf(stline, "irKEY: %s", keyAll[kid].name);
 8002ba2:	f997 20fd 	ldrsb.w	r2, [r7, #253]	; 0xfd
 8002ba6:	4613      	mov	r3, r2
 8002ba8:	005b      	lsls	r3, r3, #1
 8002baa:	4413      	add	r3, r2
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	4a38      	ldr	r2, [pc, #224]	; (8002c90 <main+0x87c>)
 8002bb0:	4413      	add	r3, r2
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	4939      	ldr	r1, [pc, #228]	; (8002c9c <main+0x888>)
 8002bb6:	4838      	ldr	r0, [pc, #224]	; (8002c98 <main+0x884>)
 8002bb8:	f00d fcde 	bl	8010578 <siprintf>
				Report(1, "[que:%u] %s\r\n", cntEvt, stline);
 8002bbc:	4b38      	ldr	r3, [pc, #224]	; (8002ca0 <main+0x88c>)
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	4b34      	ldr	r3, [pc, #208]	; (8002c98 <main+0x884>)
 8002bc6:	4937      	ldr	r1, [pc, #220]	; (8002ca4 <main+0x890>)
 8002bc8:	2001      	movs	r0, #1
 8002bca:	f002 f989 	bl	8004ee0 <Report>
				//
				if (kid != -1) {
 8002bce:	f997 30fd 	ldrsb.w	r3, [r7, #253]	; 0xfd
 8002bd2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002bd6:	f000 815e 	beq.w	8002e96 <main+0xa82>
					switch (kid) {
 8002bda:	f997 30fd 	ldrsb.w	r3, [r7, #253]	; 0xfd
 8002bde:	2b14      	cmp	r3, #20
 8002be0:	f200 817b 	bhi.w	8002eda <main+0xac6>
 8002be4:	a201      	add	r2, pc, #4	; (adr r2, 8002bec <main+0x7d8>)
 8002be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bea:	bf00      	nop
 8002bec:	08002cb7 	.word	0x08002cb7
 8002bf0:	08002c41 	.word	0x08002c41
 8002bf4:	08002ca9 	.word	0x08002ca9
 8002bf8:	08002d01 	.word	0x08002d01
 8002bfc:	08002d0f 	.word	0x08002d0f
 8002c00:	08002d25 	.word	0x08002d25
 8002c04:	08002cc5 	.word	0x08002cc5
 8002c08:	08002ce3 	.word	0x08002ce3
 8002c0c:	08002d1d 	.word	0x08002d1d
 8002c10:	08002dc7 	.word	0x08002dc7
 8002c14:	08002de3 	.word	0x08002de3
 8002c18:	08002dff 	.word	0x08002dff
 8002c1c:	08002dff 	.word	0x08002dff
 8002c20:	08002dff 	.word	0x08002dff
 8002c24:	08002dff 	.word	0x08002dff
 8002c28:	08002dff 	.word	0x08002dff
 8002c2c:	08002dff 	.word	0x08002dff
 8002c30:	08002dff 	.word	0x08002dff
 8002c34:	08002dff 	.word	0x08002dff
 8002c38:	08002dff 	.word	0x08002dff
 8002c3c:	08002dff 	.word	0x08002dff
						case key_ch:
							putEvt(evt_Restart);
 8002c40:	2001      	movs	r0, #1
 8002c42:	f001 fd47 	bl	80046d4 <putEvt>
						break;
 8002c46:	e148      	b.n	8002eda <main+0xac6>
 8002c48:	2000301e 	.word	0x2000301e
 8002c4c:	200001f4 	.word	0x200001f4
 8002c50:	080143b0 	.word	0x080143b0
 8002c54:	08014258 	.word	0x08014258
 8002c58:	20003020 	.word	0x20003020
 8002c5c:	2000301c 	.word	0x2000301c
 8002c60:	200001fc 	.word	0x200001fc
 8002c64:	20000208 	.word	0x20000208
 8002c68:	200001ff 	.word	0x200001ff
 8002c6c:	20003022 	.word	0x20003022
 8002c70:	080143c4 	.word	0x080143c4
 8002c74:	2000300c 	.word	0x2000300c
 8002c78:	200036c0 	.word	0x200036c0
 8002c7c:	20003767 	.word	0x20003767
 8002c80:	20003714 	.word	0x20003714
 8002c84:	20003768 	.word	0x20003768
 8002c88:	2000065c 	.word	0x2000065c
 8002c8c:	48000800 	.word	0x48000800
 8002c90:	08015788 	.word	0x08015788
 8002c94:	08014408 	.word	0x08014408
 8002c98:	2000376c 	.word	0x2000376c
 8002c9c:	08014414 	.word	0x08014414
 8002ca0:	20001fe4 	.word	0x20001fe4
 8002ca4:	08014420 	.word	0x08014420
						case key_ch_plus:
							seek_up = 1;
 8002ca8:	4b80      	ldr	r3, [pc, #512]	; (8002eac <main+0xa98>)
 8002caa:	2201      	movs	r2, #1
 8002cac:	701a      	strb	r2, [r3, #0]
							putEvt(evt_Scan);
 8002cae:	200b      	movs	r0, #11
 8002cb0:	f001 fd10 	bl	80046d4 <putEvt>
						break;
 8002cb4:	e111      	b.n	8002eda <main+0xac6>
						case key_ch_minus:
							seek_up = 0;
 8002cb6:	4b7d      	ldr	r3, [pc, #500]	; (8002eac <main+0xa98>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	701a      	strb	r2, [r3, #0]
							putEvt(evt_Scan);
 8002cbc:	200b      	movs	r0, #11
 8002cbe:	f001 fd09 	bl	80046d4 <putEvt>
						break;
 8002cc2:	e10a      	b.n	8002eda <main+0xac6>
						case key_minus:
							if (Volume) {
 8002cc4:	4b7a      	ldr	r3, [pc, #488]	; (8002eb0 <main+0xa9c>)
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	f000 80e6 	beq.w	8002e9a <main+0xa86>
								newVolume = Volume - 1;
 8002cce:	4b78      	ldr	r3, [pc, #480]	; (8002eb0 <main+0xa9c>)
 8002cd0:	781b      	ldrb	r3, [r3, #0]
 8002cd2:	3b01      	subs	r3, #1
 8002cd4:	b2da      	uxtb	r2, r3
 8002cd6:	4b77      	ldr	r3, [pc, #476]	; (8002eb4 <main+0xaa0>)
 8002cd8:	701a      	strb	r2, [r3, #0]
								putEvt(evt_Vol);
 8002cda:	200d      	movs	r0, #13
 8002cdc:	f001 fcfa 	bl	80046d4 <putEvt>
							}
						break;
 8002ce0:	e0db      	b.n	8002e9a <main+0xa86>
						case key_plus:
							if (Volume < 15) {
 8002ce2:	4b73      	ldr	r3, [pc, #460]	; (8002eb0 <main+0xa9c>)
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	2b0e      	cmp	r3, #14
 8002ce8:	f200 80d9 	bhi.w	8002e9e <main+0xa8a>
								newVolume = Volume + 1;
 8002cec:	4b70      	ldr	r3, [pc, #448]	; (8002eb0 <main+0xa9c>)
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	b2da      	uxtb	r2, r3
 8002cf4:	4b6f      	ldr	r3, [pc, #444]	; (8002eb4 <main+0xaa0>)
 8002cf6:	701a      	strb	r2, [r3, #0]
								putEvt(evt_Vol);
 8002cf8:	200d      	movs	r0, #13
 8002cfa:	f001 fceb 	bl	80046d4 <putEvt>
							}
						break;
 8002cfe:	e0ce      	b.n	8002e9e <main+0xa8a>
						case key_left:
							seek_up = 0;
 8002d00:	4b6a      	ldr	r3, [pc, #424]	; (8002eac <main+0xa98>)
 8002d02:	2200      	movs	r2, #0
 8002d04:	701a      	strb	r2, [r3, #0]
							putEvt(evt_List);
 8002d06:	2010      	movs	r0, #16
 8002d08:	f001 fce4 	bl	80046d4 <putEvt>
						break;
 8002d0c:	e0e5      	b.n	8002eda <main+0xac6>
						case key_right:
							seek_up = 1;
 8002d0e:	4b67      	ldr	r3, [pc, #412]	; (8002eac <main+0xa98>)
 8002d10:	2201      	movs	r2, #1
 8002d12:	701a      	strb	r2, [r3, #0]
							putEvt(evt_List);
 8002d14:	2010      	movs	r0, #16
 8002d16:	f001 fcdd 	bl	80046d4 <putEvt>
						break;
 8002d1a:	e0de      	b.n	8002eda <main+0xac6>
						case key_eq:// enable/disable print via uart
							putEvt(evt_Mute);//evt_Sleep);
 8002d1c:	200e      	movs	r0, #14
 8002d1e:	f001 fcd9 	bl	80046d4 <putEvt>
						break;
 8002d22:	e0da      	b.n	8002eda <main+0xac6>
						case key_sp:
							if (!ep_start) {
 8002d24:	f897 3109 	ldrb.w	r3, [r7, #265]	; 0x109
 8002d28:	f083 0301 	eor.w	r3, r3, #1
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d036      	beq.n	8002da0 <main+0x98c>
								ep_start = true;
 8002d32:	2301      	movs	r3, #1
 8002d34:	f887 3109 	strb.w	r3, [r7, #265]	; 0x109
								memset(ep_str, 0, sizeof(ep_str));
 8002d38:	f107 030c 	add.w	r3, r7, #12
 8002d3c:	2210      	movs	r2, #16
 8002d3e:	2100      	movs	r1, #0
 8002d40:	4618      	mov	r0, r3
 8002d42:	f00c fea1 	bl	800fa88 <memset>
								ST7565_DrawFilledRectangle(0, SCREEN_HEIGHT - Font_6x8.FontHeight, SCREEN_WIDTH - 1, Font_6x8.FontHeight, PIX_OFF);
 8002d46:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	b219      	sxth	r1, r3
 8002d54:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 8002d58:	b21b      	sxth	r3, r3
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	9200      	str	r2, [sp, #0]
 8002d5e:	227f      	movs	r2, #127	; 0x7f
 8002d60:	2000      	movs	r0, #0
 8002d62:	f7ff f85e 	bl	8001e22 <ST7565_DrawFilledRectangle>
								sprintf(tmp, "Time:");
 8002d66:	4954      	ldr	r1, [pc, #336]	; (8002eb8 <main+0xaa4>)
 8002d68:	4854      	ldr	r0, [pc, #336]	; (8002ebc <main+0xaa8>)
 8002d6a:	f00d fc05 	bl	8010578 <siprintf>
								ST7565_Print(0, SCREEN_HEIGHT - Font_6x8.FontHeight, tmp, &Font_6x8, 1, PIX_ON);//печатаем надпись с указаным шрифтом и цветом(PIX_ON-белый, PIX_OFF-черный)
 8002d6e:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 8002d72:	b29b      	uxth	r3, r3
 8002d74:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	b219      	sxth	r1, r3
 8002d7c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002d80:	2201      	movs	r2, #1
 8002d82:	9201      	str	r2, [sp, #4]
 8002d84:	2201      	movs	r2, #1
 8002d86:	9200      	str	r2, [sp, #0]
 8002d88:	4a4c      	ldr	r2, [pc, #304]	; (8002ebc <main+0xaa8>)
 8002d8a:	2000      	movs	r0, #0
 8002d8c:	f7fe fdf0 	bl	8001970 <ST7565_Print>
								ST7565_Update();
 8002d90:	f7fe fc3e 	bl	8001610 <ST7565_Update>
								ep_tmr = get_tmr(20);
 8002d94:	2014      	movs	r0, #20
 8002d96:	f001 ff33 	bl	8004c00 <get_tmr>
 8002d9a:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
								ep_start = false;
								ep_tmr = 0;
								epoch = atoi(ep_str);
								putEvt(evt_Epoch);
							}
						break;
 8002d9e:	e09c      	b.n	8002eda <main+0xac6>
								ep_start = false;
 8002da0:	2300      	movs	r3, #0
 8002da2:	f887 3109 	strb.w	r3, [r7, #265]	; 0x109
								ep_tmr = 0;
 8002da6:	2300      	movs	r3, #0
 8002da8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
								epoch = atoi(ep_str);
 8002dac:	f107 030c 	add.w	r3, r7, #12
 8002db0:	4618      	mov	r0, r3
 8002db2:	f00c fd64 	bl	800f87e <atoi>
 8002db6:	4603      	mov	r3, r0
 8002db8:	461a      	mov	r2, r3
 8002dba:	4b41      	ldr	r3, [pc, #260]	; (8002ec0 <main+0xaac>)
 8002dbc:	601a      	str	r2, [r3, #0]
								putEvt(evt_Epoch);
 8002dbe:	2002      	movs	r0, #2
 8002dc0:	f001 fc88 	bl	80046d4 <putEvt>
						break;
 8002dc4:	e089      	b.n	8002eda <main+0xac6>
						case key_100://bandUp();
							if (Band < MAX_BAND) {
 8002dc6:	4b3f      	ldr	r3, [pc, #252]	; (8002ec4 <main+0xab0>)
 8002dc8:	781b      	ldrb	r3, [r3, #0]
 8002dca:	2b03      	cmp	r3, #3
 8002dcc:	d869      	bhi.n	8002ea2 <main+0xa8e>
								newBand = Band + 1;
 8002dce:	4b3d      	ldr	r3, [pc, #244]	; (8002ec4 <main+0xab0>)
 8002dd0:	781b      	ldrb	r3, [r3, #0]
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	b2da      	uxtb	r2, r3
 8002dd6:	4b3c      	ldr	r3, [pc, #240]	; (8002ec8 <main+0xab4>)
 8002dd8:	701a      	strb	r2, [r3, #0]
								putEvt(evt_Band);
 8002dda:	2011      	movs	r0, #17
 8002ddc:	f001 fc7a 	bl	80046d4 <putEvt>
							}
						break;
 8002de0:	e05f      	b.n	8002ea2 <main+0xa8e>
						case key_200://bandDown();
							if (Band) {
 8002de2:	4b38      	ldr	r3, [pc, #224]	; (8002ec4 <main+0xab0>)
 8002de4:	781b      	ldrb	r3, [r3, #0]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d05d      	beq.n	8002ea6 <main+0xa92>
								newBand = Band - 1;
 8002dea:	4b36      	ldr	r3, [pc, #216]	; (8002ec4 <main+0xab0>)
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	3b01      	subs	r3, #1
 8002df0:	b2da      	uxtb	r2, r3
 8002df2:	4b35      	ldr	r3, [pc, #212]	; (8002ec8 <main+0xab4>)
 8002df4:	701a      	strb	r2, [r3, #0]
								putEvt(evt_Band);
 8002df6:	2011      	movs	r0, #17
 8002df8:	f001 fc6c 	bl	80046d4 <putEvt>
							}
						break;
 8002dfc:	e053      	b.n	8002ea6 <main+0xa92>
						case key_5:
						case key_6:
						case key_7:
						case key_8:
						case key_9:
							if (ep_start) {
 8002dfe:	f897 3109 	ldrb.w	r3, [r7, #265]	; 0x109
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d035      	beq.n	8002e72 <main+0xa5e>
								if (strlen(ep_str) < 10) {
 8002e06:	f107 030c 	add.w	r3, r7, #12
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f7fd f9e0 	bl	80001d0 <strlen>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b09      	cmp	r3, #9
 8002e14:	d860      	bhi.n	8002ed8 <main+0xac4>
									char ch = (kid - key_0) + 0x30;
 8002e16:	f897 30fd 	ldrb.w	r3, [r7, #253]	; 0xfd
 8002e1a:	3325      	adds	r3, #37	; 0x25
 8002e1c:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
									sprintf(ep_str+strlen(ep_str), "%c", ch);
 8002e20:	f107 030c 	add.w	r3, r7, #12
 8002e24:	4618      	mov	r0, r3
 8002e26:	f7fd f9d3 	bl	80001d0 <strlen>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	f107 030c 	add.w	r3, r7, #12
 8002e30:	4413      	add	r3, r2
 8002e32:	f897 20c3 	ldrb.w	r2, [r7, #195]	; 0xc3
 8002e36:	4925      	ldr	r1, [pc, #148]	; (8002ecc <main+0xab8>)
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f00d fb9d 	bl	8010578 <siprintf>
									ST7565_Print(32, SCREEN_HEIGHT - Font_6x8.FontHeight, ep_str, &Font_6x8, 1, PIX_ON);//печатаем надпись с указаным шрифтом и цветом(PIX_ON-белый, PIX_OFF-черный)
 8002e3e:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 8002e42:	b29b      	uxth	r3, r3
 8002e44:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	b219      	sxth	r1, r3
 8002e4c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002e50:	f107 020c 	add.w	r2, r7, #12
 8002e54:	2001      	movs	r0, #1
 8002e56:	9001      	str	r0, [sp, #4]
 8002e58:	2001      	movs	r0, #1
 8002e5a:	9000      	str	r0, [sp, #0]
 8002e5c:	2020      	movs	r0, #32
 8002e5e:	f7fe fd87 	bl	8001970 <ST7565_Print>
									ST7565_Update();
 8002e62:	f7fe fbd5 	bl	8001610 <ST7565_Update>
									ep_tmr = get_tmr(20);
 8002e66:	2014      	movs	r0, #20
 8002e68:	f001 feca 	bl	8004c00 <get_tmr>
 8002e6c:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
								}
							} else {
									newFreq = list[kid - key_0 + 2].freq;//for band=2 only !!!
									putEvt(evt_Freq);
							}
						break;
 8002e70:	e032      	b.n	8002ed8 <main+0xac4>
									newFreq = list[kid - key_0 + 2].freq;//for band=2 only !!!
 8002e72:	f997 30fd 	ldrsb.w	r3, [r7, #253]	; 0xfd
 8002e76:	f1a3 0209 	sub.w	r2, r3, #9
 8002e7a:	4915      	ldr	r1, [pc, #84]	; (8002ed0 <main+0xabc>)
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	00db      	lsls	r3, r3, #3
 8002e80:	4413      	add	r3, r2
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	440b      	add	r3, r1
 8002e86:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8002e8a:	4a12      	ldr	r2, [pc, #72]	; (8002ed4 <main+0xac0>)
 8002e8c:	6013      	str	r3, [r2, #0]
									putEvt(evt_Freq);
 8002e8e:	200c      	movs	r0, #12
 8002e90:	f001 fc20 	bl	80046d4 <putEvt>
						break;
 8002e94:	e020      	b.n	8002ed8 <main+0xac4>
					}//switch (kid)
				}//if (kid != -1)
 8002e96:	bf00      	nop
 8002e98:	e01f      	b.n	8002eda <main+0xac6>
						break;
 8002e9a:	bf00      	nop
 8002e9c:	e01d      	b.n	8002eda <main+0xac6>
						break;
 8002e9e:	bf00      	nop
 8002ea0:	e01b      	b.n	8002eda <main+0xac6>
						break;
 8002ea2:	bf00      	nop
 8002ea4:	e019      	b.n	8002eda <main+0xac6>
						break;
 8002ea6:	bf00      	nop
 8002ea8:	e017      	b.n	8002eda <main+0xac6>
 8002eaa:	bf00      	nop
 8002eac:	200001fe 	.word	0x200001fe
 8002eb0:	200001ff 	.word	0x200001ff
 8002eb4:	20000200 	.word	0x20000200
 8002eb8:	08014430 	.word	0x08014430
 8002ebc:	20001348 	.word	0x20001348
 8002ec0:	20000018 	.word	0x20000018
 8002ec4:	200001fc 	.word	0x200001fc
 8002ec8:	200001fd 	.word	0x200001fd
 8002ecc:	08014438 	.word	0x08014438
 8002ed0:	20003034 	.word	0x20003034
 8002ed4:	200001f8 	.word	0x200001f8
						break;
 8002ed8:	bf00      	nop
			}//if (decodeIRED(&results))
		}
  		if (ep_tmr) {
 8002eda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d00c      	beq.n	8002efc <main+0xae8>
  			if (check_tmr(ep_tmr)) {
 8002ee2:	f8d7 0104 	ldr.w	r0, [r7, #260]	; 0x104
 8002ee6:	f001 fe98 	bl	8004c1a <check_tmr>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d005      	beq.n	8002efc <main+0xae8>
  				ep_tmr = 0;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  				ep_start = false;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	f887 3109 	strb.w	r3, [r7, #265]	; 0x109
  			}
  		}
		if (tmr_ired) {
 8002efc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d016      	beq.n	8002f32 <main+0xb1e>
			if (check_mstmr(tmr_ired)) {
 8002f04:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8002f08:	2200      	movs	r2, #0
 8002f0a:	461c      	mov	r4, r3
 8002f0c:	4615      	mov	r5, r2
 8002f0e:	4620      	mov	r0, r4
 8002f10:	4629      	mov	r1, r5
 8002f12:	f001 fea6 	bl	8004c62 <check_mstmr>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d00a      	beq.n	8002f32 <main+0xb1e>
				tmr_ired = 0;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
				resumeIRED();
 8002f22:	f7fe f907 	bl	8001134 <resumeIRED>
				HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);
 8002f26:	2201      	movs	r2, #1
 8002f28:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002f2c:	48bc      	ldr	r0, [pc, #752]	; (8003220 <main+0xe0c>)
 8002f2e:	f005 fb5f 	bl	80085f0 <HAL_GPIO_WritePin>
		}
#endif
/**/

#ifdef SET_FIFO_MODE
    	evt = getEvt();
 8002f32:	f001 fc4d 	bl	80047d0 <getEvt>
 8002f36:	4603      	mov	r3, r0
 8002f38:	4aba      	ldr	r2, [pc, #744]	; (8003224 <main+0xe10>)
 8002f3a:	6013      	str	r3, [r2, #0]
    	if (evt != evt_None) {
 8002f3c:	4bb9      	ldr	r3, [pc, #740]	; (8003224 <main+0xe10>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f44:	f000 8678 	beq.w	8003c38 <main+0x1824>
    		cntEvt = getEvtCount();
 8002f48:	f001 fbb8 	bl	80046bc <getEvtCount>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	461a      	mov	r2, r3
 8002f50:	4bb5      	ldr	r3, [pc, #724]	; (8003228 <main+0xe14>)
 8002f52:	701a      	strb	r2, [r3, #0]
    		if (evt != evt_Sec) {
 8002f54:	4bb3      	ldr	r3, [pc, #716]	; (8003224 <main+0xe10>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2b08      	cmp	r3, #8
 8002f5a:	d050      	beq.n	8002ffe <main+0xbea>
    			Report(1, "[que:%u] get event '%s'\r\n", cntEvt, str_cmds[evt]);
 8002f5c:	4bb2      	ldr	r3, [pc, #712]	; (8003228 <main+0xe14>)
 8002f5e:	781b      	ldrb	r3, [r3, #0]
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	4619      	mov	r1, r3
 8002f64:	4baf      	ldr	r3, [pc, #700]	; (8003224 <main+0xe10>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4ab0      	ldr	r2, [pc, #704]	; (800322c <main+0xe18>)
 8002f6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f6e:	460a      	mov	r2, r1
 8002f70:	49af      	ldr	r1, [pc, #700]	; (8003230 <main+0xe1c>)
 8002f72:	2001      	movs	r0, #1
 8002f74:	f001 ffb4 	bl	8004ee0 <Report>
	#ifdef SET_DISPLAY
    			ST7565_DrawFilledRectangle(0, SCREEN_HEIGHT - Font_6x8.FontHeight, SCREEN_WIDTH - 1, Font_6x8.FontHeight, PIX_OFF);
 8002f78:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	b219      	sxth	r1, r3
 8002f86:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 8002f8a:	b21b      	sxth	r3, r3
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	9200      	str	r2, [sp, #0]
 8002f90:	227f      	movs	r2, #127	; 0x7f
 8002f92:	2000      	movs	r0, #0
 8002f94:	f7fe ff45 	bl	8001e22 <ST7565_DrawFilledRectangle>
    			dl = sprintf(tmp, "evt(%u) : %s", cntEvt, str_cmds[evt]);
 8002f98:	4ba3      	ldr	r3, [pc, #652]	; (8003228 <main+0xe14>)
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	4ba0      	ldr	r3, [pc, #640]	; (8003224 <main+0xe10>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4aa1      	ldr	r2, [pc, #644]	; (800322c <main+0xe18>)
 8002fa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002faa:	460a      	mov	r2, r1
 8002fac:	49a1      	ldr	r1, [pc, #644]	; (8003234 <main+0xe20>)
 8002fae:	48a2      	ldr	r0, [pc, #648]	; (8003238 <main+0xe24>)
 8002fb0:	f00d fae2 	bl	8010578 <siprintf>
 8002fb4:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
    			x = ((SCREEN_WIDTH - (Font_6x8.FontWidth * dl)) >> 1) & 0x7f;
 8002fb8:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002fc2:	fb02 f303 	mul.w	r3, r2, r3
 8002fc6:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002fca:	105b      	asrs	r3, r3, #1
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002fd2:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
    			ST7565_Print(x, SCREEN_HEIGHT - Font_6x8.FontHeight, tmp, &Font_6x8, 1, PIX_ON);//печатаем надпись с указаным шрифтом и цветом(PIX_ON-белый, PIX_OFF-черный)
 8002fd6:	f9b7 00d2 	ldrsh.w	r0, [r7, #210]	; 0xd2
 8002fda:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	b219      	sxth	r1, r3
 8002fe8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002fec:	2201      	movs	r2, #1
 8002fee:	9201      	str	r2, [sp, #4]
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	9200      	str	r2, [sp, #0]
 8002ff4:	4a90      	ldr	r2, [pc, #576]	; (8003238 <main+0xe24>)
 8002ff6:	f7fe fcbb 	bl	8001970 <ST7565_Print>
    			ST7565_Update();
 8002ffa:	f7fe fb09 	bl	8001610 <ST7565_Update>
	#endif
    		}
    		switch (evt) {
 8002ffe:	4b89      	ldr	r3, [pc, #548]	; (8003224 <main+0xe10>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	2b17      	cmp	r3, #23
 8003004:	f200 8608 	bhi.w	8003c18 <main+0x1804>
 8003008:	a201      	add	r2, pc, #4	; (adr r2, 8003010 <main+0xbfc>)
 800300a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800300e:	bf00      	nop
 8003010:	08003921 	.word	0x08003921
 8003014:	0800396f 	.word	0x0800396f
 8003018:	08003987 	.word	0x08003987
 800301c:	080039a7 	.word	0x080039a7
 8003020:	080039b9 	.word	0x080039b9
 8003024:	08003bc9 	.word	0x08003bc9
 8003028:	080039b9 	.word	0x080039b9
 800302c:	08003adb 	.word	0x08003adb
 8003030:	08003681 	.word	0x08003681
 8003034:	08003671 	.word	0x08003671
 8003038:	08003909 	.word	0x08003909
 800303c:	08003651 	.word	0x08003651
 8003040:	080034ad 	.word	0x080034ad
 8003044:	080033a9 	.word	0x080033a9
 8003048:	08003423 	.word	0x08003423
 800304c:	0800332d 	.word	0x0800332d
 8003050:	08003289 	.word	0x08003289
 8003054:	0800314b 	.word	0x0800314b
 8003058:	08003217 	.word	0x08003217
 800305c:	08003c19 	.word	0x08003c19
 8003060:	0800312d 	.word	0x0800312d
 8003064:	08003103 	.word	0x08003103
 8003068:	080030e5 	.word	0x080030e5
 800306c:	08003071 	.word	0x08003071
    			case evt_Rds:
    				memset(dataRDS, 0, sizeof(dataRDS));
 8003070:	2208      	movs	r2, #8
 8003072:	2100      	movs	r1, #0
 8003074:	4871      	ldr	r0, [pc, #452]	; (800323c <main+0xe28>)
 8003076:	f00c fd07 	bl	800fa88 <memset>
    				readyRds = rda5807_Get_RDSData(dataRDS, &syncRds);
 800307a:	4971      	ldr	r1, [pc, #452]	; (8003240 <main+0xe2c>)
 800307c:	486f      	ldr	r0, [pc, #444]	; (800323c <main+0xe28>)
 800307e:	f003 f977 	bl	8006370 <rda5807_Get_RDSData>
 8003082:	4603      	mov	r3, r0
 8003084:	461a      	mov	r2, r3
 8003086:	4b6f      	ldr	r3, [pc, #444]	; (8003244 <main+0xe30>)
 8003088:	701a      	strb	r2, [r3, #0]
    				sprintf(tmp, "[RDS] ready=%d sync=%d :", readyRds, syncRds);
 800308a:	4b6e      	ldr	r3, [pc, #440]	; (8003244 <main+0xe30>)
 800308c:	781b      	ldrb	r3, [r3, #0]
 800308e:	461a      	mov	r2, r3
 8003090:	4b6b      	ldr	r3, [pc, #428]	; (8003240 <main+0xe2c>)
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	496c      	ldr	r1, [pc, #432]	; (8003248 <main+0xe34>)
 8003096:	4868      	ldr	r0, [pc, #416]	; (8003238 <main+0xe24>)
 8003098:	f00d fa6e 	bl	8010578 <siprintf>
    				for (int8_t i = 0; i < sizeof(dataRDS); i++)
 800309c:	2300      	movs	r3, #0
 800309e:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
 80030a2:	e014      	b.n	80030ce <main+0xcba>
    					sprintf(tmp+strlen(tmp), " %02X", dataRDS[i]);
 80030a4:	4864      	ldr	r0, [pc, #400]	; (8003238 <main+0xe24>)
 80030a6:	f7fd f893 	bl	80001d0 <strlen>
 80030aa:	4603      	mov	r3, r0
 80030ac:	4a62      	ldr	r2, [pc, #392]	; (8003238 <main+0xe24>)
 80030ae:	1898      	adds	r0, r3, r2
 80030b0:	f997 30fb 	ldrsb.w	r3, [r7, #251]	; 0xfb
 80030b4:	4a61      	ldr	r2, [pc, #388]	; (800323c <main+0xe28>)
 80030b6:	5cd3      	ldrb	r3, [r2, r3]
 80030b8:	461a      	mov	r2, r3
 80030ba:	4964      	ldr	r1, [pc, #400]	; (800324c <main+0xe38>)
 80030bc:	f00d fa5c 	bl	8010578 <siprintf>
    				for (int8_t i = 0; i < sizeof(dataRDS); i++)
 80030c0:	f997 30fb 	ldrsb.w	r3, [r7, #251]	; 0xfb
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	3301      	adds	r3, #1
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
 80030ce:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 80030d2:	2b07      	cmp	r3, #7
 80030d4:	d9e6      	bls.n	80030a4 <main+0xc90>
    				Report(1, "%s\r\n", tmp);
 80030d6:	4a58      	ldr	r2, [pc, #352]	; (8003238 <main+0xe24>)
 80030d8:	495d      	ldr	r1, [pc, #372]	; (8003250 <main+0xe3c>)
 80030da:	2001      	movs	r0, #1
 80030dc:	f001 ff00 	bl	8004ee0 <Report>
    			break;
 80030e0:	f000 bd9a 	b.w	8003c18 <main+0x1804>
    			case evt_SleepCont:
    				sleep_mode = true;
 80030e4:	4b5b      	ldr	r3, [pc, #364]	; (8003254 <main+0xe40>)
 80030e6:	2201      	movs	r2, #1
 80030e8:	701a      	strb	r2, [r3, #0]
    				//
    				HAL_SuspendTick();
 80030ea:	f004 fcd7 	bl	8007a9c <HAL_SuspendTick>
    				HAL_PWR_EnableSleepOnExit();
 80030ee:	f006 ff77 	bl	8009fe0 <HAL_PWR_EnableSleepOnExit>
    				HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80030f2:	2101      	movs	r1, #1
 80030f4:	2000      	movs	r0, #0
 80030f6:	f006 ff3f 	bl	8009f78 <HAL_PWR_EnterSLEEPMode>
    				HAL_ResumeTick();
 80030fa:	f004 fcdf 	bl	8007abc <HAL_ResumeTick>
    			break;
 80030fe:	f000 bd8b 	b.w	8003c18 <main+0x1804>
    			case evt_Sleep:
    				Report(1, "Going into SLEEP MODE...\r\n");// in 1 second\r\n");
 8003102:	4955      	ldr	r1, [pc, #340]	; (8003258 <main+0xe44>)
 8003104:	2001      	movs	r0, #1
 8003106:	f001 feeb 	bl	8004ee0 <Report>
	#ifdef SET_BLE
    				bleWrite("AT+SLEEP1\r\n", 1);
	#endif
	#ifdef SET_DISPLAY
    				ST7565_CMD_DISPLAY(CMD_DISPLAY_OFF);
 800310a:	20ae      	movs	r0, #174	; 0xae
 800310c:	f7fe fa02 	bl	8001514 <ST7565_CMD_DISPLAY>
	#endif
    				HAL_Delay(250);
 8003110:	20fa      	movs	r0, #250	; 0xfa
 8003112:	f004 fc9f 	bl	8007a54 <HAL_Delay>
    				HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 8003116:	2200      	movs	r2, #0
 8003118:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800311c:	4840      	ldr	r0, [pc, #256]	; (8003220 <main+0xe0c>)
 800311e:	f005 fa67 	bl	80085f0 <HAL_GPIO_WritePin>

    				putEvt(evt_SleepCont);
 8003122:	2016      	movs	r0, #22
 8003124:	f001 fad6 	bl	80046d4 <putEvt>
    			break;
 8003128:	f000 bd76 	b.w	8003c18 <main+0x1804>
    			case evt_ExitSleep:
    				HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);
 800312c:	2201      	movs	r2, #1
 800312e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003132:	483b      	ldr	r0, [pc, #236]	; (8003220 <main+0xe0c>)
 8003134:	f005 fa5c 	bl	80085f0 <HAL_GPIO_WritePin>
	#ifdef SET_DISPLAY
    				ST7565_CMD_DISPLAY(CMD_DISPLAY_ON);
 8003138:	20af      	movs	r0, #175	; 0xaf
 800313a:	f7fe f9eb 	bl	8001514 <ST7565_CMD_DISPLAY>
	#endif
	#ifdef SET_BLE
    				bleWakeUp();//putEvt(evt_WakeUp);
	#endif
    				Report(1, "Exit from SLEEP MODE\r\n");
 800313e:	4947      	ldr	r1, [pc, #284]	; (800325c <main+0xe48>)
 8003140:	2001      	movs	r0, #1
 8003142:	f001 fecd 	bl	8004ee0 <Report>
    			break;
 8003146:	f000 bd67 	b.w	8003c18 <main+0x1804>
	#ifdef SET_BLE
    				bleWakeUp();
	#endif
    			break;
    			case evt_Band:
    				Band = newBand;
 800314a:	4b45      	ldr	r3, [pc, #276]	; (8003260 <main+0xe4c>)
 800314c:	781a      	ldrb	r2, [r3, #0]
 800314e:	4b45      	ldr	r3, [pc, #276]	; (8003264 <main+0xe50>)
 8003150:	701a      	strb	r2, [r3, #0]
    				if (!rda5807_Set_Band(Band)) {
 8003152:	4b44      	ldr	r3, [pc, #272]	; (8003264 <main+0xe50>)
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	4618      	mov	r0, r3
 8003158:	f003 f880 	bl	800625c <rda5807_Set_Band>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	f040 8551 	bne.w	8003c06 <main+0x17f2>
    					sprintf(stb, "FM Band:%s", allBands[Band]);//(uint16_t)lBand, (uint16_t)rBand);
 8003164:	4b3f      	ldr	r3, [pc, #252]	; (8003264 <main+0xe50>)
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	461a      	mov	r2, r3
 800316a:	4b3f      	ldr	r3, [pc, #252]	; (8003268 <main+0xe54>)
 800316c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003170:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003174:	493d      	ldr	r1, [pc, #244]	; (800326c <main+0xe58>)
 8003176:	4618      	mov	r0, r3
 8003178:	f00d f9fe 	bl	8010578 <siprintf>
    					showLine(stb, lin3, &lit, true);
 800317c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003180:	f8b7 10da 	ldrh.w	r1, [r7, #218]	; 0xda
 8003184:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8003188:	2301      	movs	r3, #1
 800318a:	f001 fc97 	bl	8004abc <showLine>
    					Report(1, "[que:%u] set new band=%u '%s'\r\n", cntEvt, Band, allBands[Band]);
 800318e:	4b26      	ldr	r3, [pc, #152]	; (8003228 <main+0xe14>)
 8003190:	781b      	ldrb	r3, [r3, #0]
 8003192:	b2db      	uxtb	r3, r3
 8003194:	4619      	mov	r1, r3
 8003196:	4b33      	ldr	r3, [pc, #204]	; (8003264 <main+0xe50>)
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	4618      	mov	r0, r3
 800319c:	4b31      	ldr	r3, [pc, #196]	; (8003264 <main+0xe50>)
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	461a      	mov	r2, r3
 80031a2:	4b31      	ldr	r3, [pc, #196]	; (8003268 <main+0xe54>)
 80031a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031a8:	9300      	str	r3, [sp, #0]
 80031aa:	4603      	mov	r3, r0
 80031ac:	460a      	mov	r2, r1
 80031ae:	4930      	ldr	r1, [pc, #192]	; (8003270 <main+0xe5c>)
 80031b0:	2001      	movs	r0, #1
 80031b2:	f001 fe95 	bl	8004ee0 <Report>
    					if (next_evt == evt) {
 80031b6:	4b2f      	ldr	r3, [pc, #188]	; (8003274 <main+0xe60>)
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	4b1a      	ldr	r3, [pc, #104]	; (8003224 <main+0xe10>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	429a      	cmp	r2, r3
 80031c0:	d120      	bne.n	8003204 <main+0xdf0>
    						if ((Freq < lBand) || (Freq > rBand)) {
 80031c2:	4b2d      	ldr	r3, [pc, #180]	; (8003278 <main+0xe64>)
 80031c4:	ed93 7a00 	vldr	s14, [r3]
 80031c8:	4b2c      	ldr	r3, [pc, #176]	; (800327c <main+0xe68>)
 80031ca:	edd3 7a00 	vldr	s15, [r3]
 80031ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80031d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031d6:	d40c      	bmi.n	80031f2 <main+0xdde>
 80031d8:	4b27      	ldr	r3, [pc, #156]	; (8003278 <main+0xe64>)
 80031da:	ed93 7a00 	vldr	s14, [r3]
 80031de:	4b28      	ldr	r3, [pc, #160]	; (8003280 <main+0xe6c>)
 80031e0:	edd3 7a00 	vldr	s15, [r3]
 80031e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80031e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031ec:	dc01      	bgt.n	80031f2 <main+0xdde>
    					} else {
    						next_evt = evt;
    						putEvt(evt_Freq);
    					}
    				}
    			break;
 80031ee:	f000 bd0a 	b.w	8003c06 <main+0x17f2>
    							newFreq = lBand;
 80031f2:	4b22      	ldr	r3, [pc, #136]	; (800327c <main+0xe68>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a23      	ldr	r2, [pc, #140]	; (8003284 <main+0xe70>)
 80031f8:	6013      	str	r3, [r2, #0]
    							putEvt(evt_Freq);
 80031fa:	200c      	movs	r0, #12
 80031fc:	f001 fa6a 	bl	80046d4 <putEvt>
    			break;
 8003200:	f000 bd01 	b.w	8003c06 <main+0x17f2>
    						next_evt = evt;
 8003204:	4b07      	ldr	r3, [pc, #28]	; (8003224 <main+0xe10>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a1a      	ldr	r2, [pc, #104]	; (8003274 <main+0xe60>)
 800320a:	6013      	str	r3, [r2, #0]
    						putEvt(evt_Freq);
 800320c:	200c      	movs	r0, #12
 800320e:	f001 fa61 	bl	80046d4 <putEvt>
    			break;
 8003212:	f000 bcf8 	b.w	8003c06 <main+0x17f2>
    			case evt_Cfg:
    				showCfg();
 8003216:	f7fe fe73 	bl	8001f00 <showCfg>
    			break;
 800321a:	f000 bcfd 	b.w	8003c18 <main+0x1804>
 800321e:	bf00      	nop
 8003220:	48000800 	.word	0x48000800
 8003224:	200001dc 	.word	0x200001dc
 8003228:	20001fe4 	.word	0x20001fe4
 800322c:	2000007c 	.word	0x2000007c
 8003230:	0801443c 	.word	0x0801443c
 8003234:	08014458 	.word	0x08014458
 8003238:	20001348 	.word	0x20001348
 800323c:	20003028 	.word	0x20003028
 8003240:	20003030 	.word	0x20003030
 8003244:	20003031 	.word	0x20003031
 8003248:	08014468 	.word	0x08014468
 800324c:	08014484 	.word	0x08014484
 8003250:	0801448c 	.word	0x0801448c
 8003254:	20003769 	.word	0x20003769
 8003258:	08014494 	.word	0x08014494
 800325c:	080144b0 	.word	0x080144b0
 8003260:	200001fd 	.word	0x200001fd
 8003264:	200001fc 	.word	0x200001fc
 8003268:	20000208 	.word	0x20000208
 800326c:	08014380 	.word	0x08014380
 8003270:	080144c8 	.word	0x080144c8
 8003274:	200001e0 	.word	0x200001e0
 8003278:	200001f4 	.word	0x200001f4
 800327c:	20003014 	.word	0x20003014
 8003280:	20003018 	.word	0x20003018
 8003284:	200001f8 	.word	0x200001f8
    			case evt_List:
    				next_evt = evt_Freq;
 8003288:	4b94      	ldr	r3, [pc, #592]	; (80034dc <main+0x10c8>)
 800328a:	220c      	movs	r2, #12
 800328c:	601a      	str	r2, [r3, #0]
    				newFreq = getNextList(Freq, seek_up, &newBand);
 800328e:	4b94      	ldr	r3, [pc, #592]	; (80034e0 <main+0x10cc>)
 8003290:	edd3 7a00 	vldr	s15, [r3]
 8003294:	4b93      	ldr	r3, [pc, #588]	; (80034e4 <main+0x10d0>)
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	b2db      	uxtb	r3, r3
 800329a:	4993      	ldr	r1, [pc, #588]	; (80034e8 <main+0x10d4>)
 800329c:	4618      	mov	r0, r3
 800329e:	eeb0 0a67 	vmov.f32	s0, s15
 80032a2:	f001 fb27 	bl	80048f4 <getNextList>
 80032a6:	eef0 7a40 	vmov.f32	s15, s0
 80032aa:	4b90      	ldr	r3, [pc, #576]	; (80034ec <main+0x10d8>)
 80032ac:	edc3 7a00 	vstr	s15, [r3]
					if (newBand == Band) {
 80032b0:	4b8d      	ldr	r3, [pc, #564]	; (80034e8 <main+0x10d4>)
 80032b2:	781a      	ldrb	r2, [r3, #0]
 80032b4:	4b8e      	ldr	r3, [pc, #568]	; (80034f0 <main+0x10dc>)
 80032b6:	781b      	ldrb	r3, [r3, #0]
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d119      	bne.n	80032f0 <main+0xedc>
						Report(1, "Band = newBand = %u -> goto set newFreq to %.1f (up = %u)\r\n", newBand, newFreq, seek_up);
 80032bc:	4b8a      	ldr	r3, [pc, #552]	; (80034e8 <main+0x10d4>)
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	461e      	mov	r6, r3
 80032c2:	4b8a      	ldr	r3, [pc, #552]	; (80034ec <main+0x10d8>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4618      	mov	r0, r3
 80032c8:	f7fd f93e 	bl	8000548 <__aeabi_f2d>
 80032cc:	4602      	mov	r2, r0
 80032ce:	460b      	mov	r3, r1
 80032d0:	4984      	ldr	r1, [pc, #528]	; (80034e4 <main+0x10d0>)
 80032d2:	7809      	ldrb	r1, [r1, #0]
 80032d4:	b2c9      	uxtb	r1, r1
 80032d6:	9102      	str	r1, [sp, #8]
 80032d8:	e9cd 2300 	strd	r2, r3, [sp]
 80032dc:	4632      	mov	r2, r6
 80032de:	4985      	ldr	r1, [pc, #532]	; (80034f4 <main+0x10e0>)
 80032e0:	2001      	movs	r0, #1
 80032e2:	f001 fdfd 	bl	8004ee0 <Report>
    					putEvt(evt_Freq);
 80032e6:	200c      	movs	r0, #12
 80032e8:	f001 f9f4 	bl	80046d4 <putEvt>
					} else {
						Report(1, "Band = %u -> goto set newBand to %u (newFreq to %.1f up = %u)\r\n", Band, newBand, newFreq, seek_up);
    					putEvt(evt_Band);
					}
    			break;
 80032ec:	f000 bc94 	b.w	8003c18 <main+0x1804>
						Report(1, "Band = %u -> goto set newBand to %u (newFreq to %.1f up = %u)\r\n", Band, newBand, newFreq, seek_up);
 80032f0:	4b7f      	ldr	r3, [pc, #508]	; (80034f0 <main+0x10dc>)
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	461e      	mov	r6, r3
 80032f6:	4b7c      	ldr	r3, [pc, #496]	; (80034e8 <main+0x10d4>)
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	4698      	mov	r8, r3
 80032fc:	4b7b      	ldr	r3, [pc, #492]	; (80034ec <main+0x10d8>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4618      	mov	r0, r3
 8003302:	f7fd f921 	bl	8000548 <__aeabi_f2d>
 8003306:	4602      	mov	r2, r0
 8003308:	460b      	mov	r3, r1
 800330a:	4976      	ldr	r1, [pc, #472]	; (80034e4 <main+0x10d0>)
 800330c:	7809      	ldrb	r1, [r1, #0]
 800330e:	b2c9      	uxtb	r1, r1
 8003310:	9102      	str	r1, [sp, #8]
 8003312:	e9cd 2300 	strd	r2, r3, [sp]
 8003316:	4643      	mov	r3, r8
 8003318:	4632      	mov	r2, r6
 800331a:	4977      	ldr	r1, [pc, #476]	; (80034f8 <main+0x10e4>)
 800331c:	2001      	movs	r0, #1
 800331e:	f001 fddf 	bl	8004ee0 <Report>
    					putEvt(evt_Band);
 8003322:	2011      	movs	r0, #17
 8003324:	f001 f9d6 	bl	80046d4 <putEvt>
    			break;
 8003328:	f000 bc76 	b.w	8003c18 <main+0x1804>
    			case evt_Bass:
    				if (newBassBoost != BassBoost) {
 800332c:	4b73      	ldr	r3, [pc, #460]	; (80034fc <main+0x10e8>)
 800332e:	781a      	ldrb	r2, [r3, #0]
 8003330:	4b73      	ldr	r3, [pc, #460]	; (8003500 <main+0x10ec>)
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	429a      	cmp	r2, r3
 8003336:	f000 8468 	beq.w	8003c0a <main+0x17f6>
    					BassBoost = newBassBoost;
 800333a:	4b70      	ldr	r3, [pc, #448]	; (80034fc <main+0x10e8>)
 800333c:	781a      	ldrb	r2, [r3, #0]
 800333e:	4b70      	ldr	r3, [pc, #448]	; (8003500 <main+0x10ec>)
 8003340:	701a      	strb	r2, [r3, #0]
    					rda5807_SetBassBoost(BassBoost);
 8003342:	4b6f      	ldr	r3, [pc, #444]	; (8003500 <main+0x10ec>)
 8003344:	781b      	ldrb	r3, [r3, #0]
 8003346:	4618      	mov	r0, r3
 8003348:	f002 fe48 	bl	8005fdc <rda5807_SetBassBoost>
    					//
    					if (noMute)
 800334c:	4b6d      	ldr	r3, [pc, #436]	; (8003504 <main+0x10f0>)
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d00a      	beq.n	800336a <main+0xf56>
    						sprintf(st, "Bass:%u Vol:%u", BassBoost, Volume);
 8003354:	4b6a      	ldr	r3, [pc, #424]	; (8003500 <main+0x10ec>)
 8003356:	781b      	ldrb	r3, [r3, #0]
 8003358:	461a      	mov	r2, r3
 800335a:	4b6b      	ldr	r3, [pc, #428]	; (8003508 <main+0x10f4>)
 800335c:	781b      	ldrb	r3, [r3, #0]
 800335e:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8003362:	496a      	ldr	r1, [pc, #424]	; (800350c <main+0x10f8>)
 8003364:	f00d f908 	bl	8010578 <siprintf>
 8003368:	e009      	b.n	800337e <main+0xf6a>
    					else
    						sprintf(st, "Bass:%u Vol:%u M", BassBoost, Volume);
 800336a:	4b65      	ldr	r3, [pc, #404]	; (8003500 <main+0x10ec>)
 800336c:	781b      	ldrb	r3, [r3, #0]
 800336e:	461a      	mov	r2, r3
 8003370:	4b65      	ldr	r3, [pc, #404]	; (8003508 <main+0x10f4>)
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8003378:	4965      	ldr	r1, [pc, #404]	; (8003510 <main+0x10fc>)
 800337a:	f00d f8fd 	bl	8010578 <siprintf>
    					showLine(st, lin4, &lim, true);
 800337e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8003382:	f8b7 10d8 	ldrh.w	r1, [r7, #216]	; 0xd8
 8003386:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 800338a:	2301      	movs	r3, #1
 800338c:	f001 fb96 	bl	8004abc <showLine>
    					Report(1, "[que:%u] set new BassBoost to %u\r\n", cntEvt, BassBoost);
 8003390:	4b60      	ldr	r3, [pc, #384]	; (8003514 <main+0x1100>)
 8003392:	781b      	ldrb	r3, [r3, #0]
 8003394:	b2db      	uxtb	r3, r3
 8003396:	461a      	mov	r2, r3
 8003398:	4b59      	ldr	r3, [pc, #356]	; (8003500 <main+0x10ec>)
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	495e      	ldr	r1, [pc, #376]	; (8003518 <main+0x1104>)
 800339e:	2001      	movs	r0, #1
 80033a0:	f001 fd9e 	bl	8004ee0 <Report>
    				}
    			break;
 80033a4:	f000 bc31 	b.w	8003c0a <main+0x17f6>
    			case evt_Vol:
    				if (newVolume != Volume) {
 80033a8:	4b5c      	ldr	r3, [pc, #368]	; (800351c <main+0x1108>)
 80033aa:	781a      	ldrb	r2, [r3, #0]
 80033ac:	4b56      	ldr	r3, [pc, #344]	; (8003508 <main+0x10f4>)
 80033ae:	781b      	ldrb	r3, [r3, #0]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	f000 842c 	beq.w	8003c0e <main+0x17fa>
    					Volume = newVolume;
 80033b6:	4b59      	ldr	r3, [pc, #356]	; (800351c <main+0x1108>)
 80033b8:	781a      	ldrb	r2, [r3, #0]
 80033ba:	4b53      	ldr	r3, [pc, #332]	; (8003508 <main+0x10f4>)
 80033bc:	701a      	strb	r2, [r3, #0]
    					rda5807_SetVolume(Volume);
 80033be:	4b52      	ldr	r3, [pc, #328]	; (8003508 <main+0x10f4>)
 80033c0:	781b      	ldrb	r3, [r3, #0]
 80033c2:	4618      	mov	r0, r3
 80033c4:	f002 fdc2 	bl	8005f4c <rda5807_SetVolume>
    					//
    					if (noMute)
 80033c8:	4b4e      	ldr	r3, [pc, #312]	; (8003504 <main+0x10f0>)
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d00a      	beq.n	80033e6 <main+0xfd2>
    						sprintf(st, "Bass:%u Vol:%u", BassBoost, Volume);
 80033d0:	4b4b      	ldr	r3, [pc, #300]	; (8003500 <main+0x10ec>)
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	461a      	mov	r2, r3
 80033d6:	4b4c      	ldr	r3, [pc, #304]	; (8003508 <main+0x10f4>)
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 80033de:	494b      	ldr	r1, [pc, #300]	; (800350c <main+0x10f8>)
 80033e0:	f00d f8ca 	bl	8010578 <siprintf>
 80033e4:	e009      	b.n	80033fa <main+0xfe6>
    					else
    						sprintf(st, "Bass:%u Vol:%u M", BassBoost, Volume);
 80033e6:	4b46      	ldr	r3, [pc, #280]	; (8003500 <main+0x10ec>)
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	461a      	mov	r2, r3
 80033ec:	4b46      	ldr	r3, [pc, #280]	; (8003508 <main+0x10f4>)
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 80033f4:	4946      	ldr	r1, [pc, #280]	; (8003510 <main+0x10fc>)
 80033f6:	f00d f8bf 	bl	8010578 <siprintf>
    					showLine(st, lin4, &lim, true);
 80033fa:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80033fe:	f8b7 10d8 	ldrh.w	r1, [r7, #216]	; 0xd8
 8003402:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8003406:	2301      	movs	r3, #1
 8003408:	f001 fb58 	bl	8004abc <showLine>
    					Report(1, "[que:%u] set new Volume to %u\r\n", cntEvt, Volume);
 800340c:	4b41      	ldr	r3, [pc, #260]	; (8003514 <main+0x1100>)
 800340e:	781b      	ldrb	r3, [r3, #0]
 8003410:	b2db      	uxtb	r3, r3
 8003412:	461a      	mov	r2, r3
 8003414:	4b3c      	ldr	r3, [pc, #240]	; (8003508 <main+0x10f4>)
 8003416:	781b      	ldrb	r3, [r3, #0]
 8003418:	4941      	ldr	r1, [pc, #260]	; (8003520 <main+0x110c>)
 800341a:	2001      	movs	r0, #1
 800341c:	f001 fd60 	bl	8004ee0 <Report>
    				}
    			break;
 8003420:	e3f5      	b.n	8003c0e <main+0x17fa>
    			case evt_Mute:
    				noMute = (~noMute) & 1;
 8003422:	4b38      	ldr	r3, [pc, #224]	; (8003504 <main+0x10f0>)
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	f003 0301 	and.w	r3, r3, #1
 800342a:	2b00      	cmp	r3, #0
 800342c:	bf0c      	ite	eq
 800342e:	2301      	moveq	r3, #1
 8003430:	2300      	movne	r3, #0
 8003432:	b2db      	uxtb	r3, r3
 8003434:	461a      	mov	r2, r3
 8003436:	4b33      	ldr	r3, [pc, #204]	; (8003504 <main+0x10f0>)
 8003438:	701a      	strb	r2, [r3, #0]
    				rda5807_Set_Mute(noMute);
 800343a:	4b32      	ldr	r3, [pc, #200]	; (8003504 <main+0x10f0>)
 800343c:	781b      	ldrb	r3, [r3, #0]
 800343e:	4618      	mov	r0, r3
 8003440:	f002 ff78 	bl	8006334 <rda5807_Set_Mute>
    				//
    				if (noMute)
 8003444:	4b2f      	ldr	r3, [pc, #188]	; (8003504 <main+0x10f0>)
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d00a      	beq.n	8003462 <main+0x104e>
    					sprintf(st, "Bass:%u Vol:%u", BassBoost, Volume);
 800344c:	4b2c      	ldr	r3, [pc, #176]	; (8003500 <main+0x10ec>)
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	461a      	mov	r2, r3
 8003452:	4b2d      	ldr	r3, [pc, #180]	; (8003508 <main+0x10f4>)
 8003454:	781b      	ldrb	r3, [r3, #0]
 8003456:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 800345a:	492c      	ldr	r1, [pc, #176]	; (800350c <main+0x10f8>)
 800345c:	f00d f88c 	bl	8010578 <siprintf>
 8003460:	e009      	b.n	8003476 <main+0x1062>
    				else
    					sprintf(st, "Bass:%u Vol:%u M", BassBoost, Volume);
 8003462:	4b27      	ldr	r3, [pc, #156]	; (8003500 <main+0x10ec>)
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	461a      	mov	r2, r3
 8003468:	4b27      	ldr	r3, [pc, #156]	; (8003508 <main+0x10f4>)
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8003470:	4927      	ldr	r1, [pc, #156]	; (8003510 <main+0x10fc>)
 8003472:	f00d f881 	bl	8010578 <siprintf>
    				showLine(st, lin4, &lim, true);
 8003476:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800347a:	f8b7 10d8 	ldrh.w	r1, [r7, #216]	; 0xd8
 800347e:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8003482:	2301      	movs	r3, #1
 8003484:	f001 fb1a 	bl	8004abc <showLine>
    				Report(1, "[que:%u] set Mute to %u\r\n", cntEvt, (~noMute) & 1);
 8003488:	4b22      	ldr	r3, [pc, #136]	; (8003514 <main+0x1100>)
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	b2db      	uxtb	r3, r3
 800348e:	461a      	mov	r2, r3
 8003490:	4b1c      	ldr	r3, [pc, #112]	; (8003504 <main+0x10f0>)
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	f003 0301 	and.w	r3, r3, #1
 8003498:	2b00      	cmp	r3, #0
 800349a:	bf0c      	ite	eq
 800349c:	2301      	moveq	r3, #1
 800349e:	2300      	movne	r3, #0
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	4920      	ldr	r1, [pc, #128]	; (8003524 <main+0x1110>)
 80034a4:	2001      	movs	r0, #1
 80034a6:	f001 fd1b 	bl	8004ee0 <Report>
    			break;
 80034aa:	e3b5      	b.n	8003c18 <main+0x1804>
    			case evt_Freq:
    				if ((newFreq >= lBand) && (newFreq <= rBand)) {
 80034ac:	4b0f      	ldr	r3, [pc, #60]	; (80034ec <main+0x10d8>)
 80034ae:	ed93 7a00 	vldr	s14, [r3]
 80034b2:	4b1d      	ldr	r3, [pc, #116]	; (8003528 <main+0x1114>)
 80034b4:	edd3 7a00 	vldr	s15, [r3]
 80034b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80034bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034c0:	da00      	bge.n	80034c4 <main+0x10b0>
    						sprintf(sta, "%s", nameStation(Freq));
    						showLine(sta, lin6, &lia, true);
    						Report(1, "[que:%u] set new Freq to %.1f %s (Chan:%u)\r\n", cntEvt, Freq, sta, Chan);
    					}
    				}
				break;
 80034c2:	e3a6      	b.n	8003c12 <main+0x17fe>
    				if ((newFreq >= lBand) && (newFreq <= rBand)) {
 80034c4:	4b09      	ldr	r3, [pc, #36]	; (80034ec <main+0x10d8>)
 80034c6:	ed93 7a00 	vldr	s14, [r3]
 80034ca:	4b18      	ldr	r3, [pc, #96]	; (800352c <main+0x1118>)
 80034cc:	edd3 7a00 	vldr	s15, [r3]
 80034d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80034d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034d8:	d92a      	bls.n	8003530 <main+0x111c>
				break;
 80034da:	e39a      	b.n	8003c12 <main+0x17fe>
 80034dc:	200001e0 	.word	0x200001e0
 80034e0:	200001f4 	.word	0x200001f4
 80034e4:	200001fe 	.word	0x200001fe
 80034e8:	200001fd 	.word	0x200001fd
 80034ec:	200001f8 	.word	0x200001f8
 80034f0:	200001fc 	.word	0x200001fc
 80034f4:	080144e8 	.word	0x080144e8
 80034f8:	08014524 	.word	0x08014524
 80034fc:	20003023 	.word	0x20003023
 8003500:	20003022 	.word	0x20003022
 8003504:	20000201 	.word	0x20000201
 8003508:	200001ff 	.word	0x200001ff
 800350c:	0801438c 	.word	0x0801438c
 8003510:	08014564 	.word	0x08014564
 8003514:	20001fe4 	.word	0x20001fe4
 8003518:	08014578 	.word	0x08014578
 800351c:	20000200 	.word	0x20000200
 8003520:	0801459c 	.word	0x0801459c
 8003524:	080145bc 	.word	0x080145bc
 8003528:	20003014 	.word	0x20003014
 800352c:	20003018 	.word	0x20003018
    					if (newFreq != Freq) {
 8003530:	4bbd      	ldr	r3, [pc, #756]	; (8003828 <main+0x1414>)
 8003532:	ed93 7a00 	vldr	s14, [r3]
 8003536:	4bbd      	ldr	r3, [pc, #756]	; (800382c <main+0x1418>)
 8003538:	edd3 7a00 	vldr	s15, [r3]
 800353c:	eeb4 7a67 	vcmp.f32	s14, s15
 8003540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003544:	f000 8365 	beq.w	8003c12 <main+0x17fe>
    						Freq = newFreq;
 8003548:	4bb7      	ldr	r3, [pc, #732]	; (8003828 <main+0x1414>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4ab7      	ldr	r2, [pc, #732]	; (800382c <main+0x1418>)
 800354e:	6013      	str	r3, [r2, #0]
    						uint16_t fr = (uint16_t)(Freq * 10);
 8003550:	4bb6      	ldr	r3, [pc, #728]	; (800382c <main+0x1418>)
 8003552:	edd3 7a00 	vldr	s15, [r3]
 8003556:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800355a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800355e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003562:	ee17 3a90 	vmov	r3, s15
 8003566:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0
    						rda5807_SetFreq_In100Khz(fr);
 800356a:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 800356e:	4618      	mov	r0, r3
 8003570:	f002 fd54 	bl	800601c <rda5807_SetFreq_In100Khz>
    						stereo = rda5807_Get_StereoMonoFlag();
 8003574:	f002 fe48 	bl	8006208 <rda5807_Get_StereoMonoFlag>
 8003578:	4603      	mov	r3, r0
 800357a:	461a      	mov	r2, r3
 800357c:	4bac      	ldr	r3, [pc, #688]	; (8003830 <main+0x141c>)
 800357e:	701a      	strb	r2, [r3, #0]
    						Chan = rda5807_Get_Channel();
 8003580:	f002 fe5a 	bl	8006238 <rda5807_Get_Channel>
 8003584:	4603      	mov	r3, r0
 8003586:	461a      	mov	r2, r3
 8003588:	4baa      	ldr	r3, [pc, #680]	; (8003834 <main+0x1420>)
 800358a:	801a      	strh	r2, [r3, #0]
    						if (stereo)
 800358c:	4ba8      	ldr	r3, [pc, #672]	; (8003830 <main+0x141c>)
 800358e:	781b      	ldrb	r3, [r3, #0]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d012      	beq.n	80035ba <main+0x11a6>
    							sprintf(st, "Rssi:%u Freq:%.1f S", RSSI, Freq);
 8003594:	4ba8      	ldr	r3, [pc, #672]	; (8003838 <main+0x1424>)
 8003596:	881b      	ldrh	r3, [r3, #0]
 8003598:	461e      	mov	r6, r3
 800359a:	4ba4      	ldr	r3, [pc, #656]	; (800382c <main+0x1418>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4618      	mov	r0, r3
 80035a0:	f7fc ffd2 	bl	8000548 <__aeabi_f2d>
 80035a4:	4602      	mov	r2, r0
 80035a6:	460b      	mov	r3, r1
 80035a8:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 80035ac:	e9cd 2300 	strd	r2, r3, [sp]
 80035b0:	4632      	mov	r2, r6
 80035b2:	49a2      	ldr	r1, [pc, #648]	; (800383c <main+0x1428>)
 80035b4:	f00c ffe0 	bl	8010578 <siprintf>
 80035b8:	e011      	b.n	80035de <main+0x11ca>
    							sprintf(st, "Rssi:%u Freq:%.1f", RSSI, Freq);
 80035ba:	4b9f      	ldr	r3, [pc, #636]	; (8003838 <main+0x1424>)
 80035bc:	881b      	ldrh	r3, [r3, #0]
 80035be:	461e      	mov	r6, r3
 80035c0:	4b9a      	ldr	r3, [pc, #616]	; (800382c <main+0x1418>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4618      	mov	r0, r3
 80035c6:	f7fc ffbf 	bl	8000548 <__aeabi_f2d>
 80035ca:	4602      	mov	r2, r0
 80035cc:	460b      	mov	r3, r1
 80035ce:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 80035d2:	e9cd 2300 	strd	r2, r3, [sp]
 80035d6:	4632      	mov	r2, r6
 80035d8:	4999      	ldr	r1, [pc, #612]	; (8003840 <main+0x142c>)
 80035da:	f00c ffcd 	bl	8010578 <siprintf>
    						showLine(st, lin5, &lil, false);
 80035de:	f107 0220 	add.w	r2, r7, #32
 80035e2:	f8b7 10d6 	ldrh.w	r1, [r7, #214]	; 0xd6
 80035e6:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 80035ea:	2300      	movs	r3, #0
 80035ec:	f001 fa66 	bl	8004abc <showLine>
    						sprintf(sta, "%s", nameStation(Freq));
 80035f0:	4b8e      	ldr	r3, [pc, #568]	; (800382c <main+0x1418>)
 80035f2:	edd3 7a00 	vldr	s15, [r3]
 80035f6:	eeb0 0a67 	vmov.f32	s0, s15
 80035fa:	f001 f935 	bl	8004868 <nameStation>
 80035fe:	4602      	mov	r2, r0
 8003600:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003604:	498f      	ldr	r1, [pc, #572]	; (8003844 <main+0x1430>)
 8003606:	4618      	mov	r0, r3
 8003608:	f00c ffb6 	bl	8010578 <siprintf>
    						showLine(sta, lin6, &lia, true);
 800360c:	f107 021c 	add.w	r2, r7, #28
 8003610:	f8b7 10d4 	ldrh.w	r1, [r7, #212]	; 0xd4
 8003614:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8003618:	2301      	movs	r3, #1
 800361a:	f001 fa4f 	bl	8004abc <showLine>
    						Report(1, "[que:%u] set new Freq to %.1f %s (Chan:%u)\r\n", cntEvt, Freq, sta, Chan);
 800361e:	4b8a      	ldr	r3, [pc, #552]	; (8003848 <main+0x1434>)
 8003620:	781b      	ldrb	r3, [r3, #0]
 8003622:	b2db      	uxtb	r3, r3
 8003624:	461e      	mov	r6, r3
 8003626:	4b81      	ldr	r3, [pc, #516]	; (800382c <main+0x1418>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4618      	mov	r0, r3
 800362c:	f7fc ff8c 	bl	8000548 <__aeabi_f2d>
 8003630:	4602      	mov	r2, r0
 8003632:	460b      	mov	r3, r1
 8003634:	497f      	ldr	r1, [pc, #508]	; (8003834 <main+0x1420>)
 8003636:	8809      	ldrh	r1, [r1, #0]
 8003638:	9103      	str	r1, [sp, #12]
 800363a:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 800363e:	9102      	str	r1, [sp, #8]
 8003640:	e9cd 2300 	strd	r2, r3, [sp]
 8003644:	4632      	mov	r2, r6
 8003646:	4981      	ldr	r1, [pc, #516]	; (800384c <main+0x1438>)
 8003648:	2001      	movs	r0, #1
 800364a:	f001 fc49 	bl	8004ee0 <Report>
				break;
 800364e:	e2e0      	b.n	8003c12 <main+0x17fe>
    			case evt_Scan:
    				if (!scan) {
 8003650:	4b7f      	ldr	r3, [pc, #508]	; (8003850 <main+0x143c>)
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	b2db      	uxtb	r3, r3
 8003656:	2b00      	cmp	r3, #0
 8003658:	f040 82dd 	bne.w	8003c16 <main+0x1802>
    					scan = 1;
 800365c:	4b7c      	ldr	r3, [pc, #496]	; (8003850 <main+0x143c>)
 800365e:	2201      	movs	r2, #1
 8003660:	701a      	strb	r2, [r3, #0]
    					rda5807_StartSeek(seek_up);
 8003662:	4b7c      	ldr	r3, [pc, #496]	; (8003854 <main+0x1440>)
 8003664:	781b      	ldrb	r3, [r3, #0]
 8003666:	b2db      	uxtb	r3, r3
 8003668:	4618      	mov	r0, r3
 800366a:	f002 fd91 	bl	8006190 <rda5807_StartSeek>
    				}
    			break;
 800366e:	e2d2      	b.n	8003c16 <main+0x1802>
    			case evt_Ver:
    				Report(1, "Ver.%s\r\n", ver);
 8003670:	4b79      	ldr	r3, [pc, #484]	; (8003858 <main+0x1444>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	461a      	mov	r2, r3
 8003676:	4979      	ldr	r1, [pc, #484]	; (800385c <main+0x1448>)
 8003678:	2001      	movs	r0, #1
 800367a:	f001 fc31 	bl	8004ee0 <Report>
    			break;
 800367e:	e2cb      	b.n	8003c18 <main+0x1804>
    			case evt_Sec:
    			{
	#ifdef SET_DISPLAY
    				dl = sec2str(st);
 8003680:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003684:	4618      	mov	r0, r3
 8003686:	f001 fb91 	bl	8004dac <sec2str>
 800368a:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
    				x = ((SCREEN_WIDTH - (Font_6x8.FontWidth * dl)) >> 1) & 0x7f;
 800368e:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 8003692:	461a      	mov	r2, r3
 8003694:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003698:	fb02 f303 	mul.w	r3, r2, r3
 800369c:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80036a0:	105b      	asrs	r3, r3, #1
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036a8:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
    				ST7565_Print(x, lin1, st, &Font_6x8, 0, PIX_OFF);
 80036ac:	f9b7 00d2 	ldrsh.w	r0, [r7, #210]	; 0xd2
 80036b0:	f9b7 10de 	ldrsh.w	r1, [r7, #222]	; 0xde
 80036b4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80036b8:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80036bc:	2600      	movs	r6, #0
 80036be:	9601      	str	r6, [sp, #4]
 80036c0:	2600      	movs	r6, #0
 80036c2:	9600      	str	r6, [sp, #0]
 80036c4:	f7fe f954 	bl	8001970 <ST7565_Print>
	#endif
    				//
    				if (scan) {
 80036c8:	4b61      	ldr	r3, [pc, #388]	; (8003850 <main+0x143c>)
 80036ca:	781b      	ldrb	r3, [r3, #0]
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d050      	beq.n	8003774 <main+0x1360>
    					if (rda5807_Get_SeekTuneReadyFlag()) {
 80036d2:	f002 fd87 	bl	80061e4 <rda5807_Get_SeekTuneReadyFlag>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d04b      	beq.n	8003774 <main+0x1360>
    						Freq = (float)rda5807_GetFreq_In100Khz();
 80036dc:	f002 fd18 	bl	8006110 <rda5807_GetFreq_In100Khz>
 80036e0:	4603      	mov	r3, r0
 80036e2:	ee07 3a90 	vmov	s15, r3
 80036e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036ea:	4b50      	ldr	r3, [pc, #320]	; (800382c <main+0x1418>)
 80036ec:	edc3 7a00 	vstr	s15, [r3]
    						Freq /= 10;
 80036f0:	4b4e      	ldr	r3, [pc, #312]	; (800382c <main+0x1418>)
 80036f2:	ed93 7a00 	vldr	s14, [r3]
 80036f6:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80036fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80036fe:	4b4b      	ldr	r3, [pc, #300]	; (800382c <main+0x1418>)
 8003700:	edc3 7a00 	vstr	s15, [r3]
    						scan = 0;
 8003704:	4b52      	ldr	r3, [pc, #328]	; (8003850 <main+0x143c>)
 8003706:	2200      	movs	r2, #0
 8003708:	701a      	strb	r2, [r3, #0]
    						Chan = rda5807_Get_Channel();
 800370a:	f002 fd95 	bl	8006238 <rda5807_Get_Channel>
 800370e:	4603      	mov	r3, r0
 8003710:	461a      	mov	r2, r3
 8003712:	4b48      	ldr	r3, [pc, #288]	; (8003834 <main+0x1420>)
 8003714:	801a      	strh	r2, [r3, #0]
    						sprintf(sta, "%s", nameStation(Freq));
 8003716:	4b45      	ldr	r3, [pc, #276]	; (800382c <main+0x1418>)
 8003718:	edd3 7a00 	vldr	s15, [r3]
 800371c:	eeb0 0a67 	vmov.f32	s0, s15
 8003720:	f001 f8a2 	bl	8004868 <nameStation>
 8003724:	4602      	mov	r2, r0
 8003726:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800372a:	4946      	ldr	r1, [pc, #280]	; (8003844 <main+0x1430>)
 800372c:	4618      	mov	r0, r3
 800372e:	f00c ff23 	bl	8010578 <siprintf>
    						showLine(sta, lin6, &lia, true);
 8003732:	f107 021c 	add.w	r2, r7, #28
 8003736:	f8b7 10d4 	ldrh.w	r1, [r7, #212]	; 0xd4
 800373a:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 800373e:	2301      	movs	r3, #1
 8003740:	f001 f9bc 	bl	8004abc <showLine>
    						Report(1, "[que:%u] set new Freq to %.1f %s (Chan:%u)\r\n", cntEvt, Freq, sta, Chan);
 8003744:	4b40      	ldr	r3, [pc, #256]	; (8003848 <main+0x1434>)
 8003746:	781b      	ldrb	r3, [r3, #0]
 8003748:	b2db      	uxtb	r3, r3
 800374a:	461e      	mov	r6, r3
 800374c:	4b37      	ldr	r3, [pc, #220]	; (800382c <main+0x1418>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4618      	mov	r0, r3
 8003752:	f7fc fef9 	bl	8000548 <__aeabi_f2d>
 8003756:	4602      	mov	r2, r0
 8003758:	460b      	mov	r3, r1
 800375a:	4936      	ldr	r1, [pc, #216]	; (8003834 <main+0x1420>)
 800375c:	8809      	ldrh	r1, [r1, #0]
 800375e:	9103      	str	r1, [sp, #12]
 8003760:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8003764:	9102      	str	r1, [sp, #8]
 8003766:	e9cd 2300 	strd	r2, r3, [sp]
 800376a:	4632      	mov	r2, r6
 800376c:	4937      	ldr	r1, [pc, #220]	; (800384c <main+0x1438>)
 800376e:	2001      	movs	r0, #1
 8003770:	f001 fbb6 	bl	8004ee0 <Report>
    					}
    				}
    				//
    				uint16_t rssi = rda5807_rssi();
 8003774:	f002 fa0c 	bl	8005b90 <rda5807_rssi>
 8003778:	4603      	mov	r3, r0
 800377a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
    				if (rssi != RSSI) {
 800377e:	4b2e      	ldr	r3, [pc, #184]	; (8003838 <main+0x1424>)
 8003780:	881b      	ldrh	r3, [r3, #0]
 8003782:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003786:	429a      	cmp	r2, r3
 8003788:	d03b      	beq.n	8003802 <main+0x13ee>
    					RSSI = rssi;
 800378a:	4a2b      	ldr	r2, [pc, #172]	; (8003838 <main+0x1424>)
 800378c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003790:	8013      	strh	r3, [r2, #0]
    					stereo = rda5807_Get_StereoMonoFlag();
 8003792:	f002 fd39 	bl	8006208 <rda5807_Get_StereoMonoFlag>
 8003796:	4603      	mov	r3, r0
 8003798:	461a      	mov	r2, r3
 800379a:	4b25      	ldr	r3, [pc, #148]	; (8003830 <main+0x141c>)
 800379c:	701a      	strb	r2, [r3, #0]
	#ifdef SET_DISPLAY
    					if (stereo)
 800379e:	4b24      	ldr	r3, [pc, #144]	; (8003830 <main+0x141c>)
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d012      	beq.n	80037cc <main+0x13b8>
    						sprintf(st, "Rssi:%u Freq:%.1f S", RSSI, Freq);
 80037a6:	4b24      	ldr	r3, [pc, #144]	; (8003838 <main+0x1424>)
 80037a8:	881b      	ldrh	r3, [r3, #0]
 80037aa:	461e      	mov	r6, r3
 80037ac:	4b1f      	ldr	r3, [pc, #124]	; (800382c <main+0x1418>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4618      	mov	r0, r3
 80037b2:	f7fc fec9 	bl	8000548 <__aeabi_f2d>
 80037b6:	4602      	mov	r2, r0
 80037b8:	460b      	mov	r3, r1
 80037ba:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 80037be:	e9cd 2300 	strd	r2, r3, [sp]
 80037c2:	4632      	mov	r2, r6
 80037c4:	491d      	ldr	r1, [pc, #116]	; (800383c <main+0x1428>)
 80037c6:	f00c fed7 	bl	8010578 <siprintf>
 80037ca:	e011      	b.n	80037f0 <main+0x13dc>
    					else
    						sprintf(st, "Rssi:%u Freq:%.1f", RSSI, Freq);
 80037cc:	4b1a      	ldr	r3, [pc, #104]	; (8003838 <main+0x1424>)
 80037ce:	881b      	ldrh	r3, [r3, #0]
 80037d0:	461e      	mov	r6, r3
 80037d2:	4b16      	ldr	r3, [pc, #88]	; (800382c <main+0x1418>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4618      	mov	r0, r3
 80037d8:	f7fc feb6 	bl	8000548 <__aeabi_f2d>
 80037dc:	4602      	mov	r2, r0
 80037de:	460b      	mov	r3, r1
 80037e0:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 80037e4:	e9cd 2300 	strd	r2, r3, [sp]
 80037e8:	4632      	mov	r2, r6
 80037ea:	4915      	ldr	r1, [pc, #84]	; (8003840 <main+0x142c>)
 80037ec:	f00c fec4 	bl	8010578 <siprintf>
    					showLine(st, lin5, &lil, false);
 80037f0:	f107 0220 	add.w	r2, r7, #32
 80037f4:	f8b7 10d6 	ldrh.w	r1, [r7, #214]	; 0xd6
 80037f8:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 80037fc:	2300      	movs	r3, #0
 80037fe:	f001 f95d 	bl	8004abc <showLine>
    					//showLine(sta, lin6, &lia, true);
    					////Report(1, "ChipID:0x%x Chan:%u Freq:%.2f RSSI:%u\r\n", rdaID, Chan, Freq, RSSI);
	#endif
    				}
    				//
    				if (devError) {
 8003802:	4b17      	ldr	r3, [pc, #92]	; (8003860 <main+0x144c>)
 8003804:	881b      	ldrh	r3, [r3, #0]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d030      	beq.n	800386c <main+0x1458>
    					dl = sprintf(tmp, "devError : 0x%04X", devError);
 800380a:	4b15      	ldr	r3, [pc, #84]	; (8003860 <main+0x144c>)
 800380c:	881b      	ldrh	r3, [r3, #0]
 800380e:	461a      	mov	r2, r3
 8003810:	4914      	ldr	r1, [pc, #80]	; (8003864 <main+0x1450>)
 8003812:	4815      	ldr	r0, [pc, #84]	; (8003868 <main+0x1454>)
 8003814:	f00c feb0 	bl	8010578 <siprintf>
 8003818:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
    					lastErr = devError;
 800381c:	4b10      	ldr	r3, [pc, #64]	; (8003860 <main+0x144c>)
 800381e:	881b      	ldrh	r3, [r3, #0]
 8003820:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
 8003824:	e036      	b.n	8003894 <main+0x1480>
 8003826:	bf00      	nop
 8003828:	200001f8 	.word	0x200001f8
 800382c:	200001f4 	.word	0x200001f4
 8003830:	20003024 	.word	0x20003024
 8003834:	2000301c 	.word	0x2000301c
 8003838:	2000301e 	.word	0x2000301e
 800383c:	0801439c 	.word	0x0801439c
 8003840:	080143b0 	.word	0x080143b0
 8003844:	08014258 	.word	0x08014258
 8003848:	20001fe4 	.word	0x20001fe4
 800384c:	080145d8 	.word	0x080145d8
 8003850:	20003021 	.word	0x20003021
 8003854:	200001fe 	.word	0x200001fe
 8003858:	20000004 	.word	0x20000004
 800385c:	08014608 	.word	0x08014608
 8003860:	20001bc8 	.word	0x20001bc8
 8003864:	08014614 	.word	0x08014614
 8003868:	20001348 	.word	0x20001348
    				} else {
    					if (lastErr) {
 800386c:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 8003870:	2b00      	cmp	r3, #0
 8003872:	d00c      	beq.n	800388e <main+0x147a>
    						dl = sprintf(tmp, "Ver.%s", ver);
 8003874:	4bb9      	ldr	r3, [pc, #740]	; (8003b5c <main+0x1748>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	461a      	mov	r2, r3
 800387a:	49b9      	ldr	r1, [pc, #740]	; (8003b60 <main+0x174c>)
 800387c:	48b9      	ldr	r0, [pc, #740]	; (8003b64 <main+0x1750>)
 800387e:	f00c fe7b 	bl	8010578 <siprintf>
 8003882:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
    						lastErr = devOK;
 8003886:	2300      	movs	r3, #0
 8003888:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
 800388c:	e002      	b.n	8003894 <main+0x1480>
    					} else dl = 0;
 800388e:	2300      	movs	r3, #0
 8003890:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    				}
	#ifdef SET_DISPLAY
    				if (dl) {
 8003894:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003898:	2b00      	cmp	r3, #0
 800389a:	d032      	beq.n	8003902 <main+0x14ee>
    					ST7565_DrawFilledRectangle(0, SCREEN_HEIGHT - Font_6x8.FontHeight, SCREEN_WIDTH - 1, Font_6x8.FontHeight, PIX_OFF);
 800389c:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 80038a0:	b29b      	uxth	r3, r3
 80038a2:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	b219      	sxth	r1, r3
 80038aa:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 80038ae:	b21b      	sxth	r3, r3
 80038b0:	2200      	movs	r2, #0
 80038b2:	9200      	str	r2, [sp, #0]
 80038b4:	227f      	movs	r2, #127	; 0x7f
 80038b6:	2000      	movs	r0, #0
 80038b8:	f7fe fab3 	bl	8001e22 <ST7565_DrawFilledRectangle>
    					x = ((SCREEN_WIDTH - (Font_6x8.FontWidth * dl)) >> 1) & 0x7f;
 80038bc:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 80038c0:	461a      	mov	r2, r3
 80038c2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80038c6:	fb02 f303 	mul.w	r3, r2, r3
 80038ca:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80038ce:	105b      	asrs	r3, r3, #1
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038d6:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
    					ST7565_Print(x, SCREEN_HEIGHT - Font_6x8.FontHeight, tmp, &Font_6x8, 1, PIX_ON);
 80038da:	f9b7 00d2 	ldrsh.w	r0, [r7, #210]	; 0xd2
 80038de:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	b219      	sxth	r1, r3
 80038ec:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80038f0:	2201      	movs	r2, #1
 80038f2:	9201      	str	r2, [sp, #4]
 80038f4:	2201      	movs	r2, #1
 80038f6:	9200      	str	r2, [sp, #0]
 80038f8:	4a9a      	ldr	r2, [pc, #616]	; (8003b64 <main+0x1750>)
 80038fa:	f7fe f839 	bl	8001970 <ST7565_Print>
    					ST7565_Update();
 80038fe:	f7fd fe87 	bl	8001610 <ST7565_Update>
    				}
    				//
    				ST7565_Update();
 8003902:	f7fd fe85 	bl	8001610 <ST7565_Update>
	#endif
    			}
    			break;
 8003906:	e187      	b.n	8003c18 <main+0x1804>
    			case evt_Clr:
    				devError = devOK;
 8003908:	4b97      	ldr	r3, [pc, #604]	; (8003b68 <main+0x1754>)
 800390a:	2200      	movs	r2, #0
 800390c:	801a      	strh	r2, [r3, #0]
    				Report(1, "[que:%u] Clear all Errors...\r\n", cntEvt);
 800390e:	4b97      	ldr	r3, [pc, #604]	; (8003b6c <main+0x1758>)
 8003910:	781b      	ldrb	r3, [r3, #0]
 8003912:	b2db      	uxtb	r3, r3
 8003914:	461a      	mov	r2, r3
 8003916:	4996      	ldr	r1, [pc, #600]	; (8003b70 <main+0x175c>)
 8003918:	2001      	movs	r0, #1
 800391a:	f001 fae1 	bl	8004ee0 <Report>
    			break;
 800391e:	e17b      	b.n	8003c18 <main+0x1804>
    			case evt_Help:
    				stx[0] = '\0';
 8003920:	4b94      	ldr	r3, [pc, #592]	; (8003b74 <main+0x1760>)
 8003922:	2200      	movs	r2, #0
 8003924:	701a      	strb	r2, [r3, #0]
    				for (int8_t i = 0; i < MAX_CMDS; i++) sprintf(stx+strlen(stx), "\t%s\r\n", s_cmds[i]);
 8003926:	2300      	movs	r3, #0
 8003928:	f887 30fa 	strb.w	r3, [r7, #250]	; 0xfa
 800392c:	e015      	b.n	800395a <main+0x1546>
 800392e:	4891      	ldr	r0, [pc, #580]	; (8003b74 <main+0x1760>)
 8003930:	f7fc fc4e 	bl	80001d0 <strlen>
 8003934:	4603      	mov	r3, r0
 8003936:	4a8f      	ldr	r2, [pc, #572]	; (8003b74 <main+0x1760>)
 8003938:	1898      	adds	r0, r3, r2
 800393a:	f997 30fa 	ldrsb.w	r3, [r7, #250]	; 0xfa
 800393e:	4a8e      	ldr	r2, [pc, #568]	; (8003b78 <main+0x1764>)
 8003940:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003944:	461a      	mov	r2, r3
 8003946:	498d      	ldr	r1, [pc, #564]	; (8003b7c <main+0x1768>)
 8003948:	f00c fe16 	bl	8010578 <siprintf>
 800394c:	f997 30fa 	ldrsb.w	r3, [r7, #250]	; 0xfa
 8003950:	b2db      	uxtb	r3, r3
 8003952:	3301      	adds	r3, #1
 8003954:	b2db      	uxtb	r3, r3
 8003956:	f887 30fa 	strb.w	r3, [r7, #250]	; 0xfa
 800395a:	f997 30fa 	ldrsb.w	r3, [r7, #250]	; 0xfa
 800395e:	2b17      	cmp	r3, #23
 8003960:	dde5      	ble.n	800392e <main+0x151a>
    				Report(0, "%s", stx);
 8003962:	4a84      	ldr	r2, [pc, #528]	; (8003b74 <main+0x1760>)
 8003964:	4986      	ldr	r1, [pc, #536]	; (8003b80 <main+0x176c>)
 8003966:	2000      	movs	r0, #0
 8003968:	f001 faba 	bl	8004ee0 <Report>
    			break;
 800396c:	e154      	b.n	8003c18 <main+0x1804>
    			case evt_Restart:
    				restart = 1;
 800396e:	4b85      	ldr	r3, [pc, #532]	; (8003b84 <main+0x1770>)
 8003970:	2201      	movs	r2, #1
 8003972:	701a      	strb	r2, [r3, #0]
    				Report(1, "[que:%u] Restart system...\r\n", cntEvt);
 8003974:	4b7d      	ldr	r3, [pc, #500]	; (8003b6c <main+0x1758>)
 8003976:	781b      	ldrb	r3, [r3, #0]
 8003978:	b2db      	uxtb	r3, r3
 800397a:	461a      	mov	r2, r3
 800397c:	4982      	ldr	r1, [pc, #520]	; (8003b88 <main+0x1774>)
 800397e:	2001      	movs	r0, #1
 8003980:	f001 faae 	bl	8004ee0 <Report>
    			break;
 8003984:	e148      	b.n	8003c18 <main+0x1804>
    			case evt_Epoch:
    				set_Date(epoch);
 8003986:	4b81      	ldr	r3, [pc, #516]	; (8003b8c <main+0x1778>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4618      	mov	r0, r3
 800398c:	f001 f9ae 	bl	8004cec <set_Date>
    				Report(1, "[que:%u] Set Unix TimeStamp to %lu\r\n", cntEvt, epoch);
 8003990:	4b76      	ldr	r3, [pc, #472]	; (8003b6c <main+0x1758>)
 8003992:	781b      	ldrb	r3, [r3, #0]
 8003994:	b2db      	uxtb	r3, r3
 8003996:	461a      	mov	r2, r3
 8003998:	4b7c      	ldr	r3, [pc, #496]	; (8003b8c <main+0x1778>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	497c      	ldr	r1, [pc, #496]	; (8003b90 <main+0x177c>)
 800399e:	2001      	movs	r0, #1
 80039a0:	f001 fa9e 	bl	8004ee0 <Report>
    			break;
 80039a4:	e138      	b.n	8003c18 <main+0x1804>
    			case evt_Err:
    				Report(1, "[que:%u] Error input from uart\r\n", cntEvt);
 80039a6:	4b71      	ldr	r3, [pc, #452]	; (8003b6c <main+0x1758>)
 80039a8:	781b      	ldrb	r3, [r3, #0]
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	461a      	mov	r2, r3
 80039ae:	4979      	ldr	r1, [pc, #484]	; (8003b94 <main+0x1780>)
 80039b0:	2001      	movs	r0, #1
 80039b2:	f001 fa95 	bl	8004ee0 <Report>
    			break;
 80039b6:	e12f      	b.n	8003c18 <main+0x1804>
	#ifdef SET_W25FLASH
    			case evt_sRead:
    			case evt_sNext:
    			{
    				uint32_t w25_adr = (adr_sector * W25qxx_getSectorSize()) + offset_sector;
 80039b8:	f003 fc30 	bl	800721c <W25qxx_getSectorSize>
 80039bc:	4603      	mov	r3, r0
 80039be:	4a76      	ldr	r2, [pc, #472]	; (8003b98 <main+0x1784>)
 80039c0:	6812      	ldr	r2, [r2, #0]
 80039c2:	fb02 f303 	mul.w	r3, r2, r3
 80039c6:	4a75      	ldr	r2, [pc, #468]	; (8003b9c <main+0x1788>)
 80039c8:	6812      	ldr	r2, [r2, #0]
 80039ca:	4413      	add	r3, r2
 80039cc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    				uint32_t dlin = list_sector;
 80039d0:	4b73      	ldr	r3, [pc, #460]	; (8003ba0 <main+0x178c>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    				int step = 32;
 80039d8:	2320      	movs	r3, #32
 80039da:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    				uint32_t ind = 0;
 80039de:	2300      	movs	r3, #0
 80039e0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    				W25qxx_ReadSector(fs_work, adr_sector, offset_sector, dlin);
 80039e4:	4b6c      	ldr	r3, [pc, #432]	; (8003b98 <main+0x1784>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4619      	mov	r1, r3
 80039ea:	4b6c      	ldr	r3, [pc, #432]	; (8003b9c <main+0x1788>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	461a      	mov	r2, r3
 80039f0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80039f4:	486b      	ldr	r0, [pc, #428]	; (8003ba4 <main+0x1790>)
 80039f6:	f003 ff23 	bl	8007840 <W25qxx_ReadSector>
    				Report(0, "Read sector:%d offset:%d len:%u\r\n", adr_sector, offset_sector, dlin);
 80039fa:	4b67      	ldr	r3, [pc, #412]	; (8003b98 <main+0x1784>)
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	4b67      	ldr	r3, [pc, #412]	; (8003b9c <main+0x1788>)
 8003a00:	6819      	ldr	r1, [r3, #0]
 8003a02:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003a06:	9300      	str	r3, [sp, #0]
 8003a08:	460b      	mov	r3, r1
 8003a0a:	4967      	ldr	r1, [pc, #412]	; (8003ba8 <main+0x1794>)
 8003a0c:	2000      	movs	r0, #0
 8003a0e:	f001 fa67 	bl	8004ee0 <Report>
    				while (ind < dlin) {
 8003a12:	e05b      	b.n	8003acc <main+0x16b8>
    					strf[0] = '\0';
 8003a14:	4b65      	ldr	r3, [pc, #404]	; (8003bac <main+0x1798>)
 8003a16:	2200      	movs	r2, #0
 8003a18:	701a      	strb	r2, [r3, #0]
    					while (1) {
    						sprintf(strf+strlen(strf), "%06X ", (unsigned int)w25_adr);
 8003a1a:	4864      	ldr	r0, [pc, #400]	; (8003bac <main+0x1798>)
 8003a1c:	f7fc fbd8 	bl	80001d0 <strlen>
 8003a20:	4603      	mov	r3, r0
 8003a22:	4a62      	ldr	r2, [pc, #392]	; (8003bac <main+0x1798>)
 8003a24:	4413      	add	r3, r2
 8003a26:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8003a2a:	4961      	ldr	r1, [pc, #388]	; (8003bb0 <main+0x179c>)
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f00c fda3 	bl	8010578 <siprintf>
    						for (int i = 0; i < step; i++) sprintf(strf+strlen(strf), " %02X", fs_work[i + ind]);
 8003a32:	2300      	movs	r3, #0
 8003a34:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003a38:	e015      	b.n	8003a66 <main+0x1652>
 8003a3a:	485c      	ldr	r0, [pc, #368]	; (8003bac <main+0x1798>)
 8003a3c:	f7fc fbc8 	bl	80001d0 <strlen>
 8003a40:	4603      	mov	r3, r0
 8003a42:	4a5a      	ldr	r2, [pc, #360]	; (8003bac <main+0x1798>)
 8003a44:	1898      	adds	r0, r3, r2
 8003a46:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003a4a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003a4e:	4413      	add	r3, r2
 8003a50:	4a54      	ldr	r2, [pc, #336]	; (8003ba4 <main+0x1790>)
 8003a52:	5cd3      	ldrb	r3, [r2, r3]
 8003a54:	461a      	mov	r2, r3
 8003a56:	4957      	ldr	r1, [pc, #348]	; (8003bb4 <main+0x17a0>)
 8003a58:	f00c fd8e 	bl	8010578 <siprintf>
 8003a5c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003a60:	3301      	adds	r3, #1
 8003a62:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003a66:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003a6a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	dbe3      	blt.n	8003a3a <main+0x1626>
    						strcat(strf, "\r\n");
 8003a72:	484e      	ldr	r0, [pc, #312]	; (8003bac <main+0x1798>)
 8003a74:	f7fc fbac 	bl	80001d0 <strlen>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	461a      	mov	r2, r3
 8003a7c:	4b4b      	ldr	r3, [pc, #300]	; (8003bac <main+0x1798>)
 8003a7e:	4413      	add	r3, r2
 8003a80:	4a4d      	ldr	r2, [pc, #308]	; (8003bb8 <main+0x17a4>)
 8003a82:	8811      	ldrh	r1, [r2, #0]
 8003a84:	7892      	ldrb	r2, [r2, #2]
 8003a86:	8019      	strh	r1, [r3, #0]
 8003a88:	709a      	strb	r2, [r3, #2]
    						w25_adr += step;
 8003a8a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003a8e:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8003a92:	4413      	add	r3, r2
 8003a94:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    						ind += step;
 8003a98:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003a9c:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8003aa0:	4413      	add	r3, r2
 8003aa2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    						if (!(ind % W25qxx_getPageSize())) break;
 8003aa6:	f003 fbc5 	bl	8007234 <W25qxx_getPageSize>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003ab0:	fbb3 f1f2 	udiv	r1, r3, r2
 8003ab4:	fb01 f202 	mul.w	r2, r1, r2
 8003ab8:	1a9b      	subs	r3, r3, r2
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d000      	beq.n	8003ac0 <main+0x16ac>
    						sprintf(strf+strlen(strf), "%06X ", (unsigned int)w25_adr);
 8003abe:	e7ac      	b.n	8003a1a <main+0x1606>
    						if (!(ind % W25qxx_getPageSize())) break;
 8003ac0:	bf00      	nop
    					}
    					Report(0, "%s", strf);
 8003ac2:	4a3a      	ldr	r2, [pc, #232]	; (8003bac <main+0x1798>)
 8003ac4:	492e      	ldr	r1, [pc, #184]	; (8003b80 <main+0x176c>)
 8003ac6:	2000      	movs	r0, #0
 8003ac8:	f001 fa0a 	bl	8004ee0 <Report>
    				while (ind < dlin) {
 8003acc:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8003ad0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d39d      	bcc.n	8003a14 <main+0x1600>
    				}
    			}
    			break;
 8003ad8:	e09e      	b.n	8003c18 <main+0x1804>
    			case evt_sWrite:
    			{
    				uint32_t ss = W25qxx_getSectorSize();
 8003ada:	f003 fb9f 	bl	800721c <W25qxx_getSectorSize>
 8003ade:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
    				if (!W25qxx_IsEmptySector(adr_sector, 0, ss)) W25qxx_EraseSector(adr_sector);
 8003ae2:	4b2d      	ldr	r3, [pc, #180]	; (8003b98 <main+0x1784>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8003aea:	2100      	movs	r1, #0
 8003aec:	4618      	mov	r0, r3
 8003aee:	f003 fc0b 	bl	8007308 <W25qxx_IsEmptySector>
 8003af2:	4603      	mov	r3, r0
 8003af4:	f083 0301 	eor.w	r3, r3, #1
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d004      	beq.n	8003b08 <main+0x16f4>
 8003afe:	4b26      	ldr	r3, [pc, #152]	; (8003b98 <main+0x1784>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4618      	mov	r0, r3
 8003b04:	f003 fba4 	bl	8007250 <W25qxx_EraseSector>
    				memset(fs_work, byte_write, ss);
 8003b08:	4b2c      	ldr	r3, [pc, #176]	; (8003bbc <main+0x17a8>)
 8003b0a:	781b      	ldrb	r3, [r3, #0]
 8003b0c:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8003b10:	4619      	mov	r1, r3
 8003b12:	4824      	ldr	r0, [pc, #144]	; (8003ba4 <main+0x1790>)
 8003b14:	f00b ffb8 	bl	800fa88 <memset>
    				if (len_write != -1) ss = len_write;
 8003b18:	4b29      	ldr	r3, [pc, #164]	; (8003bc0 <main+0x17ac>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b20:	d003      	beq.n	8003b2a <main+0x1716>
 8003b22:	4b27      	ldr	r3, [pc, #156]	; (8003bc0 <main+0x17ac>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    				W25qxx_WriteSector(fs_work, adr_sector, offset_sector, ss);
 8003b2a:	4b1b      	ldr	r3, [pc, #108]	; (8003b98 <main+0x1784>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4619      	mov	r1, r3
 8003b30:	4b1a      	ldr	r3, [pc, #104]	; (8003b9c <main+0x1788>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	461a      	mov	r2, r3
 8003b36:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003b3a:	481a      	ldr	r0, [pc, #104]	; (8003ba4 <main+0x1790>)
 8003b3c:	f003 fd58 	bl	80075f0 <W25qxx_WriteSector>
    				Report(0, "Fill sector:%d byte:%02X len:%d done\r\n", adr_sector, byte_write, ss);
 8003b40:	4b15      	ldr	r3, [pc, #84]	; (8003b98 <main+0x1784>)
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	4b1d      	ldr	r3, [pc, #116]	; (8003bbc <main+0x17a8>)
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	4619      	mov	r1, r3
 8003b4a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003b4e:	9300      	str	r3, [sp, #0]
 8003b50:	460b      	mov	r3, r1
 8003b52:	491c      	ldr	r1, [pc, #112]	; (8003bc4 <main+0x17b0>)
 8003b54:	2000      	movs	r0, #0
 8003b56:	f001 f9c3 	bl	8004ee0 <Report>
    			}
    			break;
 8003b5a:	e05d      	b.n	8003c18 <main+0x1804>
 8003b5c:	20000004 	.word	0x20000004
 8003b60:	08014364 	.word	0x08014364
 8003b64:	20001348 	.word	0x20001348
 8003b68:	20001bc8 	.word	0x20001bc8
 8003b6c:	20001fe4 	.word	0x20001fe4
 8003b70:	08014628 	.word	0x08014628
 8003b74:	20000f48 	.word	0x20000f48
 8003b78:	2000001c 	.word	0x2000001c
 8003b7c:	08014648 	.word	0x08014648
 8003b80:	08014258 	.word	0x08014258
 8003b84:	20001fdc 	.word	0x20001fdc
 8003b88:	08014650 	.word	0x08014650
 8003b8c:	20000018 	.word	0x20000018
 8003b90:	08014670 	.word	0x08014670
 8003b94:	08014698 	.word	0x08014698
 8003b98:	20001fe8 	.word	0x20001fe8
 8003b9c:	20001fec 	.word	0x20001fec
 8003ba0:	20001ff0 	.word	0x20001ff0
 8003ba4:	20001ffc 	.word	0x20001ffc
 8003ba8:	080146bc 	.word	0x080146bc
 8003bac:	200017c8 	.word	0x200017c8
 8003bb0:	080146e0 	.word	0x080146e0
 8003bb4:	08014484 	.word	0x08014484
 8003bb8:	080146e8 	.word	0x080146e8
 8003bbc:	200001f0 	.word	0x200001f0
 8003bc0:	20001ff4 	.word	0x20001ff4
 8003bc4:	080146ec 	.word	0x080146ec
    			case evt_sErase:
    				if (adr_sector == -1) {
 8003bc8:	4b88      	ldr	r3, [pc, #544]	; (8003dec <main+0x19d8>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003bd0:	d10c      	bne.n	8003bec <main+0x17d8>
    					Report(1, "Erase flash");
 8003bd2:	4987      	ldr	r1, [pc, #540]	; (8003df0 <main+0x19dc>)
 8003bd4:	2001      	movs	r0, #1
 8003bd6:	f001 f983 	bl	8004ee0 <Report>
    					flag_sector = true;
 8003bda:	4b86      	ldr	r3, [pc, #536]	; (8003df4 <main+0x19e0>)
 8003bdc:	2201      	movs	r2, #1
 8003bde:	701a      	strb	r2, [r3, #0]
    					btime = HAL_GetTick();
 8003be0:	f003 ff2c 	bl	8007a3c <HAL_GetTick>
 8003be4:	4603      	mov	r3, r0
 8003be6:	4a84      	ldr	r2, [pc, #528]	; (8003df8 <main+0x19e4>)
 8003be8:	6013      	str	r3, [r2, #0]
    				} else {
    					W25qxx_EraseSector(adr_sector);
    					Report(1, "Erase sector:%d done\r\n", adr_sector);
    				}
    			break;
 8003bea:	e015      	b.n	8003c18 <main+0x1804>
    					W25qxx_EraseSector(adr_sector);
 8003bec:	4b7f      	ldr	r3, [pc, #508]	; (8003dec <main+0x19d8>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f003 fb2d 	bl	8007250 <W25qxx_EraseSector>
    					Report(1, "Erase sector:%d done\r\n", adr_sector);
 8003bf6:	4b7d      	ldr	r3, [pc, #500]	; (8003dec <main+0x19d8>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	497f      	ldr	r1, [pc, #508]	; (8003dfc <main+0x19e8>)
 8003bfe:	2001      	movs	r0, #1
 8003c00:	f001 f96e 	bl	8004ee0 <Report>
    			break;
 8003c04:	e008      	b.n	8003c18 <main+0x1804>
    			break;
 8003c06:	bf00      	nop
 8003c08:	e006      	b.n	8003c18 <main+0x1804>
    			break;
 8003c0a:	bf00      	nop
 8003c0c:	e004      	b.n	8003c18 <main+0x1804>
    			break;
 8003c0e:	bf00      	nop
 8003c10:	e002      	b.n	8003c18 <main+0x1804>
				break;
 8003c12:	bf00      	nop
 8003c14:	e000      	b.n	8003c18 <main+0x1804>
    			break;
 8003c16:	bf00      	nop
	#endif
    		}
    		if ((evt >= evt_sRead) && (evt <= evt_sWrite)) {
 8003c18:	4b79      	ldr	r3, [pc, #484]	; (8003e00 <main+0x19ec>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2b03      	cmp	r3, #3
 8003c1e:	dd0b      	ble.n	8003c38 <main+0x1824>
 8003c20:	4b77      	ldr	r3, [pc, #476]	; (8003e00 <main+0x19ec>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	2b07      	cmp	r3, #7
 8003c26:	dc07      	bgt.n	8003c38 <main+0x1824>
    			last_cmd_sector =  evt;//cmd_sector;
 8003c28:	4b75      	ldr	r3, [pc, #468]	; (8003e00 <main+0x19ec>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a75      	ldr	r2, [pc, #468]	; (8003e04 <main+0x19f0>)
 8003c2e:	6013      	str	r3, [r2, #0]
    			cmd_sector = sNone;
 8003c30:	4b75      	ldr	r3, [pc, #468]	; (8003e08 <main+0x19f4>)
 8003c32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003c36:	601a      	str	r2, [r3, #0]
    		}
    	}
#endif

#ifdef SET_W25FLASH
    	if (flag_sector) {
 8003c38:	4b6e      	ldr	r3, [pc, #440]	; (8003df4 <main+0x19e0>)
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d031      	beq.n	8003ca4 <main+0x1890>
    		adr_sector++;
 8003c40:	4b6a      	ldr	r3, [pc, #424]	; (8003dec <main+0x19d8>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	3301      	adds	r3, #1
 8003c46:	4a69      	ldr	r2, [pc, #420]	; (8003dec <main+0x19d8>)
 8003c48:	6013      	str	r3, [r2, #0]
    		if (adr_sector >= W25qxx_getSectorCount()) {
 8003c4a:	f003 fadb 	bl	8007204 <W25qxx_getSectorCount>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	4a66      	ldr	r2, [pc, #408]	; (8003dec <main+0x19d8>)
 8003c52:	6812      	ldr	r2, [r2, #0]
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d816      	bhi.n	8003c86 <main+0x1872>
    			flag_sector = false;
 8003c58:	4b66      	ldr	r3, [pc, #408]	; (8003df4 <main+0x19e0>)
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	701a      	strb	r2, [r3, #0]
    			etime = HAL_GetTick();
 8003c5e:	f003 feed 	bl	8007a3c <HAL_GetTick>
 8003c62:	4603      	mov	r3, r0
 8003c64:	4a69      	ldr	r2, [pc, #420]	; (8003e0c <main+0x19f8>)
 8003c66:	6013      	str	r3, [r2, #0]
    			Report(0, " done (%lu sec)\r\n", (etime - btime) / 1000);
 8003c68:	4b68      	ldr	r3, [pc, #416]	; (8003e0c <main+0x19f8>)
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	4b62      	ldr	r3, [pc, #392]	; (8003df8 <main+0x19e4>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	4a67      	ldr	r2, [pc, #412]	; (8003e10 <main+0x19fc>)
 8003c74:	fba2 2303 	umull	r2, r3, r2, r3
 8003c78:	099b      	lsrs	r3, r3, #6
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	4965      	ldr	r1, [pc, #404]	; (8003e14 <main+0x1a00>)
 8003c7e:	2000      	movs	r0, #0
 8003c80:	f001 f92e 	bl	8004ee0 <Report>
 8003c84:	e00e      	b.n	8003ca4 <main+0x1890>
    		} else {
    			//putEvt(evt_sErase);
    			W25qxx_EraseSector(adr_sector);
 8003c86:	4b59      	ldr	r3, [pc, #356]	; (8003dec <main+0x19d8>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f003 fae0 	bl	8007250 <W25qxx_EraseSector>
    			if (!(adr_sector % 8)) Report(0, ".");
 8003c90:	4b56      	ldr	r3, [pc, #344]	; (8003dec <main+0x19d8>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 0307 	and.w	r3, r3, #7
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d103      	bne.n	8003ca4 <main+0x1890>
 8003c9c:	495e      	ldr	r1, [pc, #376]	; (8003e18 <main+0x1a04>)
 8003c9e:	2000      	movs	r0, #0
 8003ca0:	f001 f91e 	bl	8004ee0 <Report>
    	}
#endif


#if defined(SET_BLE) || defined(SET_AUDIO)
    	if (bleQueAckFlag) {
 8003ca4:	4b5d      	ldr	r3, [pc, #372]	; (8003e1c <main+0x1a08>)
 8003ca6:	781b      	ldrb	r3, [r3, #0]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d00b      	beq.n	8003cc4 <main+0x18b0>
    		if (getRECQ(bleRxBuf, &bleQueAck) >= 0) {
 8003cac:	495c      	ldr	r1, [pc, #368]	; (8003e20 <main+0x1a0c>)
 8003cae:	485d      	ldr	r0, [pc, #372]	; (8003e24 <main+0x1a10>)
 8003cb0:	f7fe fa6c 	bl	800218c <getRECQ>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	db04      	blt.n	8003cc4 <main+0x18b0>
    			Report(1, "[BLE_rx] %s\r\n", bleRxBuf);
 8003cba:	4a5a      	ldr	r2, [pc, #360]	; (8003e24 <main+0x1a10>)
 8003cbc:	495a      	ldr	r1, [pc, #360]	; (8003e28 <main+0x1a14>)
 8003cbe:	2001      	movs	r0, #1
 8003cc0:	f001 f90e 	bl	8004ee0 <Report>
    		}
    	}
    	//
    	if (bleQueCmdFlag) {//command to GSM module queue is ready
 8003cc4:	4b59      	ldr	r3, [pc, #356]	; (8003e2c <main+0x1a18>)
 8003cc6:	781b      	ldrb	r3, [r3, #0]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d016      	beq.n	8003cfa <main+0x18e6>
    		if (getRECQ(bleBuf, &bleQueCmd) >= 0) {
 8003ccc:	4958      	ldr	r1, [pc, #352]	; (8003e30 <main+0x1a1c>)
 8003cce:	4859      	ldr	r0, [pc, #356]	; (8003e34 <main+0x1a20>)
 8003cd0:	f7fe fa5c 	bl	800218c <getRECQ>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	db0f      	blt.n	8003cfa <main+0x18e6>
    			strcat(bleBuf, "\r\n");
 8003cda:	4856      	ldr	r0, [pc, #344]	; (8003e34 <main+0x1a20>)
 8003cdc:	f7fc fa78 	bl	80001d0 <strlen>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	4b53      	ldr	r3, [pc, #332]	; (8003e34 <main+0x1a20>)
 8003ce6:	4413      	add	r3, r2
 8003ce8:	4a53      	ldr	r2, [pc, #332]	; (8003e38 <main+0x1a24>)
 8003cea:	8811      	ldrh	r1, [r2, #0]
 8003cec:	7892      	ldrb	r2, [r2, #2]
 8003cee:	8019      	strh	r1, [r3, #0]
 8003cf0:	709a      	strb	r2, [r3, #2]
    			bleWrite(bleBuf, 1);
 8003cf2:	2101      	movs	r1, #1
 8003cf4:	484f      	ldr	r0, [pc, #316]	; (8003e34 <main+0x1a20>)
 8003cf6:	f7fe f94f 	bl	8001f98 <bleWrite>
    		}
    	}
#endif


    	if (devError) {
 8003cfa:	4b50      	ldr	r3, [pc, #320]	; (8003e3c <main+0x1a28>)
 8003cfc:	881b      	ldrh	r3, [r3, #0]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d04f      	beq.n	8003da2 <main+0x198e>
    		if (last_devError != devError) {
 8003d02:	4b4f      	ldr	r3, [pc, #316]	; (8003e40 <main+0x1a2c>)
 8003d04:	881a      	ldrh	r2, [r3, #0]
 8003d06:	4b4d      	ldr	r3, [pc, #308]	; (8003e3c <main+0x1a28>)
 8003d08:	881b      	ldrh	r3, [r3, #0]
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d03f      	beq.n	8003d8e <main+0x197a>
    			last_devError = devError;
 8003d0e:	4b4b      	ldr	r3, [pc, #300]	; (8003e3c <main+0x1a28>)
 8003d10:	881a      	ldrh	r2, [r3, #0]
 8003d12:	4b4b      	ldr	r3, [pc, #300]	; (8003e40 <main+0x1a2c>)
 8003d14:	801a      	strh	r2, [r3, #0]
    			tmp[0] = '\0';
 8003d16:	4b4b      	ldr	r3, [pc, #300]	; (8003e44 <main+0x1a30>)
 8003d18:	2200      	movs	r2, #0
 8003d1a:	701a      	strb	r2, [r3, #0]
    			uint16_t er = 0;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
    			for (int8_t i = 0; i < MAX_ERR_CODE; i++) {
 8003d22:	2300      	movs	r3, #0
 8003d24:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
 8003d28:	e025      	b.n	8003d76 <main+0x1962>
    				er = devError & all_devErr[i];
 8003d2a:	f997 30e7 	ldrsb.w	r3, [r7, #231]	; 0xe7
 8003d2e:	4a46      	ldr	r2, [pc, #280]	; (8003e48 <main+0x1a34>)
 8003d30:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8003d34:	4b41      	ldr	r3, [pc, #260]	; (8003e3c <main+0x1a28>)
 8003d36:	881b      	ldrh	r3, [r3, #0]
 8003d38:	4013      	ands	r3, r2
 8003d3a:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
    				if (er) sprintf(tmp+strlen(tmp), " '%s'", errName(er));
 8003d3e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d010      	beq.n	8003d68 <main+0x1954>
 8003d46:	483f      	ldr	r0, [pc, #252]	; (8003e44 <main+0x1a30>)
 8003d48:	f7fc fa42 	bl	80001d0 <strlen>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	4a3d      	ldr	r2, [pc, #244]	; (8003e44 <main+0x1a30>)
 8003d50:	189e      	adds	r6, r3, r2
 8003d52:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8003d56:	4618      	mov	r0, r3
 8003d58:	f7fe fab4 	bl	80022c4 <errName>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	461a      	mov	r2, r3
 8003d60:	493a      	ldr	r1, [pc, #232]	; (8003e4c <main+0x1a38>)
 8003d62:	4630      	mov	r0, r6
 8003d64:	f00c fc08 	bl	8010578 <siprintf>
    			for (int8_t i = 0; i < MAX_ERR_CODE; i++) {
 8003d68:	f997 30e7 	ldrsb.w	r3, [r7, #231]	; 0xe7
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	3301      	adds	r3, #1
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
 8003d76:	f997 30e7 	ldrsb.w	r3, [r7, #231]	; 0xe7
 8003d7a:	2b0b      	cmp	r3, #11
 8003d7c:	ddd5      	ble.n	8003d2a <main+0x1916>
    			}
    			Report(1, "Error 0x%04X %s\r\n", devError, tmp);
 8003d7e:	4b2f      	ldr	r3, [pc, #188]	; (8003e3c <main+0x1a28>)
 8003d80:	881b      	ldrh	r3, [r3, #0]
 8003d82:	461a      	mov	r2, r3
 8003d84:	4b2f      	ldr	r3, [pc, #188]	; (8003e44 <main+0x1a30>)
 8003d86:	4932      	ldr	r1, [pc, #200]	; (8003e50 <main+0x1a3c>)
 8003d88:	2001      	movs	r0, #1
 8003d8a:	f001 f8a9 	bl	8004ee0 <Report>
    		}
    		errLedOn(true);
 8003d8e:	2001      	movs	r0, #1
 8003d90:	f000 ff02 	bl	8004b98 <errLedOn>
    		HAL_Delay(50);
 8003d94:	2032      	movs	r0, #50	; 0x32
 8003d96:	f003 fe5d 	bl	8007a54 <HAL_Delay>
    		errLedOn(false);
 8003d9a:	2000      	movs	r0, #0
 8003d9c:	f000 fefc 	bl	8004b98 <errLedOn>
 8003da0:	e009      	b.n	8003db6 <main+0x19a2>
    	} else {
    		if (HAL_GPIO_ReadPin(ERR_LED_GPIO_Port, ERR_LED_Pin)) errLedOn(false);
 8003da2:	2108      	movs	r1, #8
 8003da4:	482b      	ldr	r0, [pc, #172]	; (8003e54 <main+0x1a40>)
 8003da6:	f004 fc0b 	bl	80085c0 <HAL_GPIO_ReadPin>
 8003daa:	4603      	mov	r3, r0
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d002      	beq.n	8003db6 <main+0x19a2>
 8003db0:	2000      	movs	r0, #0
 8003db2:	f000 fef1 	bl	8004b98 <errLedOn>
    	}

    	HAL_Delay(2);
 8003db6:	2002      	movs	r0, #2
 8003db8:	f003 fe4c 	bl	8007a54 <HAL_Delay>
    while (!restart) {
 8003dbc:	4b26      	ldr	r3, [pc, #152]	; (8003e58 <main+0x1a44>)
 8003dbe:	781b      	ldrb	r3, [r3, #0]
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	f43e ae9e 	beq.w	8002b04 <main+0x6f0>

    /* USER CODE BEGIN 3 */

    }//while (!restart)

    HAL_TIM_Base_Stop_IT(tikPort);
 8003dc8:	4b24      	ldr	r3, [pc, #144]	; (8003e5c <main+0x1a48>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f009 fc7b 	bl	800d6c8 <HAL_TIM_Base_Stop_IT>
    ST7565_Reset();
    ST7565_CMD_DISPLAY(CMD_DISPLAY_OFF);
#endif*/


    Report(1, "[que:%u] Stop application...\r\n", cntEvt);
 8003dd2:	4b23      	ldr	r3, [pc, #140]	; (8003e60 <main+0x1a4c>)
 8003dd4:	781b      	ldrb	r3, [r3, #0]
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	461a      	mov	r2, r3
 8003dda:	4922      	ldr	r1, [pc, #136]	; (8003e64 <main+0x1a50>)
 8003ddc:	2001      	movs	r0, #1
 8003dde:	f001 f87f 	bl	8004ee0 <Report>

    HAL_Delay(250);
 8003de2:	20fa      	movs	r0, #250	; 0xfa
 8003de4:	f003 fe36 	bl	8007a54 <HAL_Delay>

    NVIC_SystemReset();
 8003de8:	f7fe f874 	bl	8001ed4 <__NVIC_SystemReset>
 8003dec:	20001fe8 	.word	0x20001fe8
 8003df0:	08014714 	.word	0x08014714
 8003df4:	20001ff8 	.word	0x20001ff8
 8003df8:	20003000 	.word	0x20003000
 8003dfc:	08014720 	.word	0x08014720
 8003e00:	200001dc 	.word	0x200001dc
 8003e04:	200001ec 	.word	0x200001ec
 8003e08:	200001e8 	.word	0x200001e8
 8003e0c:	20003004 	.word	0x20003004
 8003e10:	10624dd3 	.word	0x10624dd3
 8003e14:	08014738 	.word	0x08014738
 8003e18:	0801474c 	.word	0x0801474c
 8003e1c:	20003767 	.word	0x20003767
 8003e20:	200036c0 	.word	0x200036c0
 8003e24:	200035c0 	.word	0x200035c0
 8003e28:	08014750 	.word	0x08014750
 8003e2c:	20003768 	.word	0x20003768
 8003e30:	20003714 	.word	0x20003714
 8003e34:	200034c0 	.word	0x200034c0
 8003e38:	080146e8 	.word	0x080146e8
 8003e3c:	20001bc8 	.word	0x20001bc8
 8003e40:	20001bca 	.word	0x20001bca
 8003e44:	20001348 	.word	0x20001348
 8003e48:	080153ec 	.word	0x080153ec
 8003e4c:	08014760 	.word	0x08014760
 8003e50:	08014768 	.word	0x08014768
 8003e54:	48000800 	.word	0x48000800
 8003e58:	20001fdc 	.word	0x20001fdc
 8003e5c:	20000008 	.word	0x20000008
 8003e60:	20001fe4 	.word	0x20001fe4
 8003e64:	0801477c 	.word	0x0801477c

08003e68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b096      	sub	sp, #88	; 0x58
 8003e6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003e6e:	f107 0314 	add.w	r3, r7, #20
 8003e72:	2244      	movs	r2, #68	; 0x44
 8003e74:	2100      	movs	r1, #0
 8003e76:	4618      	mov	r0, r3
 8003e78:	f00b fe06 	bl	800fa88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003e7c:	463b      	mov	r3, r7
 8003e7e:	2200      	movs	r2, #0
 8003e80:	601a      	str	r2, [r3, #0]
 8003e82:	605a      	str	r2, [r3, #4]
 8003e84:	609a      	str	r2, [r3, #8]
 8003e86:	60da      	str	r2, [r3, #12]
 8003e88:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8003e8a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003e8e:	f006 f8d5 	bl	800a03c <HAL_PWREx_ControlVoltageScaling>
 8003e92:	4603      	mov	r3, r0
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d001      	beq.n	8003e9c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8003e98:	f001 fdfa 	bl	8005a90 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8003e9c:	2309      	movs	r3, #9
 8003e9e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003ea0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ea4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003eaa:	2302      	movs	r3, #2
 8003eac:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 8003eb6:	2314      	movs	r3, #20
 8003eb8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8003eba:	2307      	movs	r3, #7
 8003ebc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003ebe:	2302      	movs	r3, #2
 8003ec0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003ec2:	2302      	movs	r3, #2
 8003ec4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003ec6:	f107 0314 	add.w	r3, r7, #20
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f006 f954 	bl	800a178 <HAL_RCC_OscConfig>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d001      	beq.n	8003eda <SystemClock_Config+0x72>
  {
    Error_Handler();
 8003ed6:	f001 fddb 	bl	8005a90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003eda:	230f      	movs	r3, #15
 8003edc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003eea:	2300      	movs	r3, #0
 8003eec:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003eee:	463b      	mov	r3, r7
 8003ef0:	2104      	movs	r1, #4
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f006 fd1c 	bl	800a930 <HAL_RCC_ClockConfig>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d001      	beq.n	8003f02 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8003efe:	f001 fdc7 	bl	8005a90 <Error_Handler>
  }
}
 8003f02:	bf00      	nop
 8003f04:	3758      	adds	r7, #88	; 0x58
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
	...

08003f0c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003f10:	4b1b      	ldr	r3, [pc, #108]	; (8003f80 <MX_I2C1_Init+0x74>)
 8003f12:	4a1c      	ldr	r2, [pc, #112]	; (8003f84 <MX_I2C1_Init+0x78>)
 8003f14:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702D95;
 8003f16:	4b1a      	ldr	r3, [pc, #104]	; (8003f80 <MX_I2C1_Init+0x74>)
 8003f18:	4a1b      	ldr	r2, [pc, #108]	; (8003f88 <MX_I2C1_Init+0x7c>)
 8003f1a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003f1c:	4b18      	ldr	r3, [pc, #96]	; (8003f80 <MX_I2C1_Init+0x74>)
 8003f1e:	2200      	movs	r2, #0
 8003f20:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003f22:	4b17      	ldr	r3, [pc, #92]	; (8003f80 <MX_I2C1_Init+0x74>)
 8003f24:	2201      	movs	r2, #1
 8003f26:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003f28:	4b15      	ldr	r3, [pc, #84]	; (8003f80 <MX_I2C1_Init+0x74>)
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003f2e:	4b14      	ldr	r3, [pc, #80]	; (8003f80 <MX_I2C1_Init+0x74>)
 8003f30:	2200      	movs	r2, #0
 8003f32:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003f34:	4b12      	ldr	r3, [pc, #72]	; (8003f80 <MX_I2C1_Init+0x74>)
 8003f36:	2200      	movs	r2, #0
 8003f38:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003f3a:	4b11      	ldr	r3, [pc, #68]	; (8003f80 <MX_I2C1_Init+0x74>)
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003f40:	4b0f      	ldr	r3, [pc, #60]	; (8003f80 <MX_I2C1_Init+0x74>)
 8003f42:	2200      	movs	r2, #0
 8003f44:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003f46:	480e      	ldr	r0, [pc, #56]	; (8003f80 <MX_I2C1_Init+0x74>)
 8003f48:	f004 fb9c 	bl	8008684 <HAL_I2C_Init>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d001      	beq.n	8003f56 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003f52:	f001 fd9d 	bl	8005a90 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 8003f56:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003f5a:	4809      	ldr	r0, [pc, #36]	; (8003f80 <MX_I2C1_Init+0x74>)
 8003f5c:	f005 ff54 	bl	8009e08 <HAL_I2CEx_ConfigAnalogFilter>
 8003f60:	4603      	mov	r3, r0
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d001      	beq.n	8003f6a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8003f66:	f001 fd93 	bl	8005a90 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003f6a:	2100      	movs	r1, #0
 8003f6c:	4804      	ldr	r0, [pc, #16]	; (8003f80 <MX_I2C1_Init+0x74>)
 8003f6e:	f005 ff96 	bl	8009e9e <HAL_I2CEx_ConfigDigitalFilter>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d001      	beq.n	8003f7c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8003f78:	f001 fd8a 	bl	8005a90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003f7c:	bf00      	nop
 8003f7e:	bd80      	pop	{r7, pc}
 8003f80:	20000a70 	.word	0x20000a70
 8003f84:	40005400 	.word	0x40005400
 8003f88:	00702d95 	.word	0x00702d95

08003f8c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b086      	sub	sp, #24
 8003f90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8003f92:	1d3b      	adds	r3, r7, #4
 8003f94:	2200      	movs	r2, #0
 8003f96:	601a      	str	r2, [r3, #0]
 8003f98:	605a      	str	r2, [r3, #4]
 8003f9a:	609a      	str	r2, [r3, #8]
 8003f9c:	60da      	str	r2, [r3, #12]
 8003f9e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003fa4:	4b25      	ldr	r3, [pc, #148]	; (800403c <MX_RTC_Init+0xb0>)
 8003fa6:	4a26      	ldr	r2, [pc, #152]	; (8004040 <MX_RTC_Init+0xb4>)
 8003fa8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003faa:	4b24      	ldr	r3, [pc, #144]	; (800403c <MX_RTC_Init+0xb0>)
 8003fac:	2200      	movs	r2, #0
 8003fae:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003fb0:	4b22      	ldr	r3, [pc, #136]	; (800403c <MX_RTC_Init+0xb0>)
 8003fb2:	227f      	movs	r2, #127	; 0x7f
 8003fb4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8003fb6:	4b21      	ldr	r3, [pc, #132]	; (800403c <MX_RTC_Init+0xb0>)
 8003fb8:	22ff      	movs	r2, #255	; 0xff
 8003fba:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003fbc:	4b1f      	ldr	r3, [pc, #124]	; (800403c <MX_RTC_Init+0xb0>)
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003fc2:	4b1e      	ldr	r3, [pc, #120]	; (800403c <MX_RTC_Init+0xb0>)
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003fc8:	4b1c      	ldr	r3, [pc, #112]	; (800403c <MX_RTC_Init+0xb0>)
 8003fca:	2200      	movs	r2, #0
 8003fcc:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003fce:	4b1b      	ldr	r3, [pc, #108]	; (800403c <MX_RTC_Init+0xb0>)
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003fd4:	4819      	ldr	r0, [pc, #100]	; (800403c <MX_RTC_Init+0xb0>)
 8003fd6:	f007 fb8b 	bl	800b6f0 <HAL_RTC_Init>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d001      	beq.n	8003fe4 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8003fe0:	f001 fd56 	bl	8005a90 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8003fec:	2300      	movs	r3, #0
 8003fee:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8003ff8:	1d3b      	adds	r3, r7, #4
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	4619      	mov	r1, r3
 8003ffe:	480f      	ldr	r0, [pc, #60]	; (800403c <MX_RTC_Init+0xb0>)
 8004000:	f007 fbf1 	bl	800b7e6 <HAL_RTC_SetTime>
 8004004:	4603      	mov	r3, r0
 8004006:	2b00      	cmp	r3, #0
 8004008:	d001      	beq.n	800400e <MX_RTC_Init+0x82>
  {
    Error_Handler();
 800400a:	f001 fd41 	bl	8005a90 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 800400e:	2303      	movs	r3, #3
 8004010:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JULY;
 8004012:	2307      	movs	r3, #7
 8004014:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x6;
 8004016:	2306      	movs	r3, #6
 8004018:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x22;
 800401a:	2322      	movs	r3, #34	; 0x22
 800401c:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800401e:	463b      	mov	r3, r7
 8004020:	2201      	movs	r2, #1
 8004022:	4619      	mov	r1, r3
 8004024:	4805      	ldr	r0, [pc, #20]	; (800403c <MX_RTC_Init+0xb0>)
 8004026:	f007 fcd7 	bl	800b9d8 <HAL_RTC_SetDate>
 800402a:	4603      	mov	r3, r0
 800402c:	2b00      	cmp	r3, #0
 800402e:	d001      	beq.n	8004034 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8004030:	f001 fd2e 	bl	8005a90 <Error_Handler>

  //set_Date(epoch);

  /* USER CODE END RTC_Init 2 */

}
 8004034:	bf00      	nop
 8004036:	3718      	adds	r7, #24
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}
 800403c:	20000b54 	.word	0x20000b54
 8004040:	40002800 	.word	0x40002800

08004044 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004048:	4b1b      	ldr	r3, [pc, #108]	; (80040b8 <MX_SPI1_Init+0x74>)
 800404a:	4a1c      	ldr	r2, [pc, #112]	; (80040bc <MX_SPI1_Init+0x78>)
 800404c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800404e:	4b1a      	ldr	r3, [pc, #104]	; (80040b8 <MX_SPI1_Init+0x74>)
 8004050:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004054:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004056:	4b18      	ldr	r3, [pc, #96]	; (80040b8 <MX_SPI1_Init+0x74>)
 8004058:	2200      	movs	r2, #0
 800405a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800405c:	4b16      	ldr	r3, [pc, #88]	; (80040b8 <MX_SPI1_Init+0x74>)
 800405e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004062:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004064:	4b14      	ldr	r3, [pc, #80]	; (80040b8 <MX_SPI1_Init+0x74>)
 8004066:	2200      	movs	r2, #0
 8004068:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800406a:	4b13      	ldr	r3, [pc, #76]	; (80040b8 <MX_SPI1_Init+0x74>)
 800406c:	2200      	movs	r2, #0
 800406e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004070:	4b11      	ldr	r3, [pc, #68]	; (80040b8 <MX_SPI1_Init+0x74>)
 8004072:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004076:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8004078:	4b0f      	ldr	r3, [pc, #60]	; (80040b8 <MX_SPI1_Init+0x74>)
 800407a:	2208      	movs	r2, #8
 800407c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800407e:	4b0e      	ldr	r3, [pc, #56]	; (80040b8 <MX_SPI1_Init+0x74>)
 8004080:	2200      	movs	r2, #0
 8004082:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004084:	4b0c      	ldr	r3, [pc, #48]	; (80040b8 <MX_SPI1_Init+0x74>)
 8004086:	2200      	movs	r2, #0
 8004088:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800408a:	4b0b      	ldr	r3, [pc, #44]	; (80040b8 <MX_SPI1_Init+0x74>)
 800408c:	2200      	movs	r2, #0
 800408e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8004090:	4b09      	ldr	r3, [pc, #36]	; (80040b8 <MX_SPI1_Init+0x74>)
 8004092:	2207      	movs	r2, #7
 8004094:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004096:	4b08      	ldr	r3, [pc, #32]	; (80040b8 <MX_SPI1_Init+0x74>)
 8004098:	2200      	movs	r2, #0
 800409a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800409c:	4b06      	ldr	r3, [pc, #24]	; (80040b8 <MX_SPI1_Init+0x74>)
 800409e:	2200      	movs	r2, #0
 80040a0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80040a2:	4805      	ldr	r0, [pc, #20]	; (80040b8 <MX_SPI1_Init+0x74>)
 80040a4:	f007 fe3e 	bl	800bd24 <HAL_SPI_Init>
 80040a8:	4603      	mov	r3, r0
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d001      	beq.n	80040b2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80040ae:	f001 fcef 	bl	8005a90 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80040b2:	bf00      	nop
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop
 80040b8:	20000b78 	.word	0x20000b78
 80040bc:	40013000 	.word	0x40013000

080040c0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80040c4:	4b1b      	ldr	r3, [pc, #108]	; (8004134 <MX_SPI2_Init+0x74>)
 80040c6:	4a1c      	ldr	r2, [pc, #112]	; (8004138 <MX_SPI2_Init+0x78>)
 80040c8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80040ca:	4b1a      	ldr	r3, [pc, #104]	; (8004134 <MX_SPI2_Init+0x74>)
 80040cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80040d0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80040d2:	4b18      	ldr	r3, [pc, #96]	; (8004134 <MX_SPI2_Init+0x74>)
 80040d4:	2200      	movs	r2, #0
 80040d6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80040d8:	4b16      	ldr	r3, [pc, #88]	; (8004134 <MX_SPI2_Init+0x74>)
 80040da:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80040de:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80040e0:	4b14      	ldr	r3, [pc, #80]	; (8004134 <MX_SPI2_Init+0x74>)
 80040e2:	2200      	movs	r2, #0
 80040e4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80040e6:	4b13      	ldr	r3, [pc, #76]	; (8004134 <MX_SPI2_Init+0x74>)
 80040e8:	2200      	movs	r2, #0
 80040ea:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80040ec:	4b11      	ldr	r3, [pc, #68]	; (8004134 <MX_SPI2_Init+0x74>)
 80040ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040f2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80040f4:	4b0f      	ldr	r3, [pc, #60]	; (8004134 <MX_SPI2_Init+0x74>)
 80040f6:	2200      	movs	r2, #0
 80040f8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80040fa:	4b0e      	ldr	r3, [pc, #56]	; (8004134 <MX_SPI2_Init+0x74>)
 80040fc:	2200      	movs	r2, #0
 80040fe:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004100:	4b0c      	ldr	r3, [pc, #48]	; (8004134 <MX_SPI2_Init+0x74>)
 8004102:	2200      	movs	r2, #0
 8004104:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004106:	4b0b      	ldr	r3, [pc, #44]	; (8004134 <MX_SPI2_Init+0x74>)
 8004108:	2200      	movs	r2, #0
 800410a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800410c:	4b09      	ldr	r3, [pc, #36]	; (8004134 <MX_SPI2_Init+0x74>)
 800410e:	2207      	movs	r2, #7
 8004110:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004112:	4b08      	ldr	r3, [pc, #32]	; (8004134 <MX_SPI2_Init+0x74>)
 8004114:	2200      	movs	r2, #0
 8004116:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8004118:	4b06      	ldr	r3, [pc, #24]	; (8004134 <MX_SPI2_Init+0x74>)
 800411a:	2200      	movs	r2, #0
 800411c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800411e:	4805      	ldr	r0, [pc, #20]	; (8004134 <MX_SPI2_Init+0x74>)
 8004120:	f007 fe00 	bl	800bd24 <HAL_SPI_Init>
 8004124:	4603      	mov	r3, r0
 8004126:	2b00      	cmp	r3, #0
 8004128:	d001      	beq.n	800412e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800412a:	f001 fcb1 	bl	8005a90 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800412e:	bf00      	nop
 8004130:	bd80      	pop	{r7, pc}
 8004132:	bf00      	nop
 8004134:	20000bdc 	.word	0x20000bdc
 8004138:	40003800 	.word	0x40003800

0800413c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b088      	sub	sp, #32
 8004140:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004142:	f107 0310 	add.w	r3, r7, #16
 8004146:	2200      	movs	r2, #0
 8004148:	601a      	str	r2, [r3, #0]
 800414a:	605a      	str	r2, [r3, #4]
 800414c:	609a      	str	r2, [r3, #8]
 800414e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004150:	1d3b      	adds	r3, r7, #4
 8004152:	2200      	movs	r2, #0
 8004154:	601a      	str	r2, [r3, #0]
 8004156:	605a      	str	r2, [r3, #4]
 8004158:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN TIM4_Init 1 */

  // interupt every 10 ms

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800415a:	4b1d      	ldr	r3, [pc, #116]	; (80041d0 <MX_TIM4_Init+0x94>)
 800415c:	4a1d      	ldr	r2, [pc, #116]	; (80041d4 <MX_TIM4_Init+0x98>)
 800415e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7999;
 8004160:	4b1b      	ldr	r3, [pc, #108]	; (80041d0 <MX_TIM4_Init+0x94>)
 8004162:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8004166:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004168:	4b19      	ldr	r3, [pc, #100]	; (80041d0 <MX_TIM4_Init+0x94>)
 800416a:	2200      	movs	r2, #0
 800416c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 800416e:	4b18      	ldr	r3, [pc, #96]	; (80041d0 <MX_TIM4_Init+0x94>)
 8004170:	2263      	movs	r2, #99	; 0x63
 8004172:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004174:	4b16      	ldr	r3, [pc, #88]	; (80041d0 <MX_TIM4_Init+0x94>)
 8004176:	2200      	movs	r2, #0
 8004178:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800417a:	4b15      	ldr	r3, [pc, #84]	; (80041d0 <MX_TIM4_Init+0x94>)
 800417c:	2280      	movs	r2, #128	; 0x80
 800417e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8004180:	4813      	ldr	r0, [pc, #76]	; (80041d0 <MX_TIM4_Init+0x94>)
 8004182:	f009 f9d9 	bl	800d538 <HAL_TIM_Base_Init>
 8004186:	4603      	mov	r3, r0
 8004188:	2b00      	cmp	r3, #0
 800418a:	d001      	beq.n	8004190 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 800418c:	f001 fc80 	bl	8005a90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004190:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004194:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8004196:	f107 0310 	add.w	r3, r7, #16
 800419a:	4619      	mov	r1, r3
 800419c:	480c      	ldr	r0, [pc, #48]	; (80041d0 <MX_TIM4_Init+0x94>)
 800419e:	f009 fbe1 	bl	800d964 <HAL_TIM_ConfigClockSource>
 80041a2:	4603      	mov	r3, r0
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d001      	beq.n	80041ac <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80041a8:	f001 fc72 	bl	8005a90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80041ac:	2300      	movs	r3, #0
 80041ae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80041b0:	2300      	movs	r3, #0
 80041b2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80041b4:	1d3b      	adds	r3, r7, #4
 80041b6:	4619      	mov	r1, r3
 80041b8:	4805      	ldr	r0, [pc, #20]	; (80041d0 <MX_TIM4_Init+0x94>)
 80041ba:	f009 fdf9 	bl	800ddb0 <HAL_TIMEx_MasterConfigSynchronization>
 80041be:	4603      	mov	r3, r0
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d001      	beq.n	80041c8 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80041c4:	f001 fc64 	bl	8005a90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80041c8:	bf00      	nop
 80041ca:	3720      	adds	r7, #32
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}
 80041d0:	20000d18 	.word	0x20000d18
 80041d4:	40000800 	.word	0x40000800

080041d8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b084      	sub	sp, #16
 80041dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80041de:	1d3b      	adds	r3, r7, #4
 80041e0:	2200      	movs	r2, #0
 80041e2:	601a      	str	r2, [r3, #0]
 80041e4:	605a      	str	r2, [r3, #4]
 80041e6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80041e8:	4b14      	ldr	r3, [pc, #80]	; (800423c <MX_TIM6_Init+0x64>)
 80041ea:	4a15      	ldr	r2, [pc, #84]	; (8004240 <MX_TIM6_Init+0x68>)
 80041ec:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 399;
 80041ee:	4b13      	ldr	r3, [pc, #76]	; (800423c <MX_TIM6_Init+0x64>)
 80041f0:	f240 128f 	movw	r2, #399	; 0x18f
 80041f4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041f6:	4b11      	ldr	r3, [pc, #68]	; (800423c <MX_TIM6_Init+0x64>)
 80041f8:	2200      	movs	r2, #0
 80041fa:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 4;
 80041fc:	4b0f      	ldr	r3, [pc, #60]	; (800423c <MX_TIM6_Init+0x64>)
 80041fe:	2204      	movs	r2, #4
 8004200:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004202:	4b0e      	ldr	r3, [pc, #56]	; (800423c <MX_TIM6_Init+0x64>)
 8004204:	2280      	movs	r2, #128	; 0x80
 8004206:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004208:	480c      	ldr	r0, [pc, #48]	; (800423c <MX_TIM6_Init+0x64>)
 800420a:	f009 f995 	bl	800d538 <HAL_TIM_Base_Init>
 800420e:	4603      	mov	r3, r0
 8004210:	2b00      	cmp	r3, #0
 8004212:	d001      	beq.n	8004218 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8004214:	f001 fc3c 	bl	8005a90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004218:	2300      	movs	r3, #0
 800421a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800421c:	2300      	movs	r3, #0
 800421e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004220:	1d3b      	adds	r3, r7, #4
 8004222:	4619      	mov	r1, r3
 8004224:	4805      	ldr	r0, [pc, #20]	; (800423c <MX_TIM6_Init+0x64>)
 8004226:	f009 fdc3 	bl	800ddb0 <HAL_TIMEx_MasterConfigSynchronization>
 800422a:	4603      	mov	r3, r0
 800422c:	2b00      	cmp	r3, #0
 800422e:	d001      	beq.n	8004234 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8004230:	f001 fc2e 	bl	8005a90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8004234:	bf00      	nop
 8004236:	3710      	adds	r7, #16
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}
 800423c:	20000d64 	.word	0x20000d64
 8004240:	40001000 	.word	0x40001000

08004244 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004248:	4b14      	ldr	r3, [pc, #80]	; (800429c <MX_USART2_UART_Init+0x58>)
 800424a:	4a15      	ldr	r2, [pc, #84]	; (80042a0 <MX_USART2_UART_Init+0x5c>)
 800424c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 230400;
 800424e:	4b13      	ldr	r3, [pc, #76]	; (800429c <MX_USART2_UART_Init+0x58>)
 8004250:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8004254:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004256:	4b11      	ldr	r3, [pc, #68]	; (800429c <MX_USART2_UART_Init+0x58>)
 8004258:	2200      	movs	r2, #0
 800425a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800425c:	4b0f      	ldr	r3, [pc, #60]	; (800429c <MX_USART2_UART_Init+0x58>)
 800425e:	2200      	movs	r2, #0
 8004260:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004262:	4b0e      	ldr	r3, [pc, #56]	; (800429c <MX_USART2_UART_Init+0x58>)
 8004264:	2200      	movs	r2, #0
 8004266:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004268:	4b0c      	ldr	r3, [pc, #48]	; (800429c <MX_USART2_UART_Init+0x58>)
 800426a:	220c      	movs	r2, #12
 800426c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800426e:	4b0b      	ldr	r3, [pc, #44]	; (800429c <MX_USART2_UART_Init+0x58>)
 8004270:	2200      	movs	r2, #0
 8004272:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004274:	4b09      	ldr	r3, [pc, #36]	; (800429c <MX_USART2_UART_Init+0x58>)
 8004276:	2200      	movs	r2, #0
 8004278:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800427a:	4b08      	ldr	r3, [pc, #32]	; (800429c <MX_USART2_UART_Init+0x58>)
 800427c:	2200      	movs	r2, #0
 800427e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004280:	4b06      	ldr	r3, [pc, #24]	; (800429c <MX_USART2_UART_Init+0x58>)
 8004282:	2200      	movs	r2, #0
 8004284:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004286:	4805      	ldr	r0, [pc, #20]	; (800429c <MX_USART2_UART_Init+0x58>)
 8004288:	f009 fe38 	bl	800defc <HAL_UART_Init>
 800428c:	4603      	mov	r3, r0
 800428e:	2b00      	cmp	r3, #0
 8004290:	d001      	beq.n	8004296 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8004292:	f001 fbfd 	bl	8005a90 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004296:	bf00      	nop
 8004298:	bd80      	pop	{r7, pc}
 800429a:	bf00      	nop
 800429c:	20000db0 	.word	0x20000db0
 80042a0:	40004400 	.word	0x40004400

080042a4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80042a8:	4b14      	ldr	r3, [pc, #80]	; (80042fc <MX_USART3_UART_Init+0x58>)
 80042aa:	4a15      	ldr	r2, [pc, #84]	; (8004300 <MX_USART3_UART_Init+0x5c>)
 80042ac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80042ae:	4b13      	ldr	r3, [pc, #76]	; (80042fc <MX_USART3_UART_Init+0x58>)
 80042b0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80042b4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80042b6:	4b11      	ldr	r3, [pc, #68]	; (80042fc <MX_USART3_UART_Init+0x58>)
 80042b8:	2200      	movs	r2, #0
 80042ba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80042bc:	4b0f      	ldr	r3, [pc, #60]	; (80042fc <MX_USART3_UART_Init+0x58>)
 80042be:	2200      	movs	r2, #0
 80042c0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80042c2:	4b0e      	ldr	r3, [pc, #56]	; (80042fc <MX_USART3_UART_Init+0x58>)
 80042c4:	2200      	movs	r2, #0
 80042c6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80042c8:	4b0c      	ldr	r3, [pc, #48]	; (80042fc <MX_USART3_UART_Init+0x58>)
 80042ca:	220c      	movs	r2, #12
 80042cc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80042ce:	4b0b      	ldr	r3, [pc, #44]	; (80042fc <MX_USART3_UART_Init+0x58>)
 80042d0:	2200      	movs	r2, #0
 80042d2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80042d4:	4b09      	ldr	r3, [pc, #36]	; (80042fc <MX_USART3_UART_Init+0x58>)
 80042d6:	2200      	movs	r2, #0
 80042d8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80042da:	4b08      	ldr	r3, [pc, #32]	; (80042fc <MX_USART3_UART_Init+0x58>)
 80042dc:	2200      	movs	r2, #0
 80042de:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80042e0:	4b06      	ldr	r3, [pc, #24]	; (80042fc <MX_USART3_UART_Init+0x58>)
 80042e2:	2200      	movs	r2, #0
 80042e4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80042e6:	4805      	ldr	r0, [pc, #20]	; (80042fc <MX_USART3_UART_Init+0x58>)
 80042e8:	f009 fe08 	bl	800defc <HAL_UART_Init>
 80042ec:	4603      	mov	r3, r0
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d001      	beq.n	80042f6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80042f2:	f001 fbcd 	bl	8005a90 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80042f6:	bf00      	nop
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	bf00      	nop
 80042fc:	20000e34 	.word	0x20000e34
 8004300:	40004800 	.word	0x40004800

08004304 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b082      	sub	sp, #8
 8004308:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800430a:	4b2a      	ldr	r3, [pc, #168]	; (80043b4 <MX_DMA_Init+0xb0>)
 800430c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800430e:	4a29      	ldr	r2, [pc, #164]	; (80043b4 <MX_DMA_Init+0xb0>)
 8004310:	f043 0301 	orr.w	r3, r3, #1
 8004314:	6493      	str	r3, [r2, #72]	; 0x48
 8004316:	4b27      	ldr	r3, [pc, #156]	; (80043b4 <MX_DMA_Init+0xb0>)
 8004318:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800431a:	f003 0301 	and.w	r3, r3, #1
 800431e:	607b      	str	r3, [r7, #4]
 8004320:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004322:	4b24      	ldr	r3, [pc, #144]	; (80043b4 <MX_DMA_Init+0xb0>)
 8004324:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004326:	4a23      	ldr	r2, [pc, #140]	; (80043b4 <MX_DMA_Init+0xb0>)
 8004328:	f043 0302 	orr.w	r3, r3, #2
 800432c:	6493      	str	r3, [r2, #72]	; 0x48
 800432e:	4b21      	ldr	r3, [pc, #132]	; (80043b4 <MX_DMA_Init+0xb0>)
 8004330:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004332:	f003 0302 	and.w	r3, r3, #2
 8004336:	603b      	str	r3, [r7, #0]
 8004338:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800433a:	2200      	movs	r2, #0
 800433c:	2100      	movs	r1, #0
 800433e:	200c      	movs	r0, #12
 8004340:	f003 fccb 	bl	8007cda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8004344:	200c      	movs	r0, #12
 8004346:	f003 fce4 	bl	8007d12 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800434a:	2200      	movs	r2, #0
 800434c:	2100      	movs	r1, #0
 800434e:	200e      	movs	r0, #14
 8004350:	f003 fcc3 	bl	8007cda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8004354:	200e      	movs	r0, #14
 8004356:	f003 fcdc 	bl	8007d12 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800435a:	2200      	movs	r2, #0
 800435c:	2100      	movs	r1, #0
 800435e:	200f      	movs	r0, #15
 8004360:	f003 fcbb 	bl	8007cda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8004364:	200f      	movs	r0, #15
 8004366:	f003 fcd4 	bl	8007d12 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800436a:	2200      	movs	r2, #0
 800436c:	2100      	movs	r1, #0
 800436e:	2010      	movs	r0, #16
 8004370:	f003 fcb3 	bl	8007cda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8004374:	2010      	movs	r0, #16
 8004376:	f003 fccc 	bl	8007d12 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 3, 0);
 800437a:	2200      	movs	r2, #0
 800437c:	2103      	movs	r1, #3
 800437e:	2011      	movs	r0, #17
 8004380:	f003 fcab 	bl	8007cda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8004384:	2011      	movs	r0, #17
 8004386:	f003 fcc4 	bl	8007d12 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 0, 0);
 800438a:	2200      	movs	r2, #0
 800438c:	2100      	movs	r1, #0
 800438e:	203b      	movs	r0, #59	; 0x3b
 8004390:	f003 fca3 	bl	8007cda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8004394:	203b      	movs	r0, #59	; 0x3b
 8004396:	f003 fcbc 	bl	8007d12 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel6_IRQn, 0, 0);
 800439a:	2200      	movs	r2, #0
 800439c:	2100      	movs	r1, #0
 800439e:	2044      	movs	r0, #68	; 0x44
 80043a0:	f003 fc9b 	bl	8007cda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel6_IRQn);
 80043a4:	2044      	movs	r0, #68	; 0x44
 80043a6:	f003 fcb4 	bl	8007d12 <HAL_NVIC_EnableIRQ>

}
 80043aa:	bf00      	nop
 80043ac:	3708      	adds	r7, #8
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}
 80043b2:	bf00      	nop
 80043b4:	40021000 	.word	0x40021000

080043b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b08a      	sub	sp, #40	; 0x28
 80043bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043be:	f107 0314 	add.w	r3, r7, #20
 80043c2:	2200      	movs	r2, #0
 80043c4:	601a      	str	r2, [r3, #0]
 80043c6:	605a      	str	r2, [r3, #4]
 80043c8:	609a      	str	r2, [r3, #8]
 80043ca:	60da      	str	r2, [r3, #12]
 80043cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80043ce:	4b80      	ldr	r3, [pc, #512]	; (80045d0 <MX_GPIO_Init+0x218>)
 80043d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043d2:	4a7f      	ldr	r2, [pc, #508]	; (80045d0 <MX_GPIO_Init+0x218>)
 80043d4:	f043 0304 	orr.w	r3, r3, #4
 80043d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80043da:	4b7d      	ldr	r3, [pc, #500]	; (80045d0 <MX_GPIO_Init+0x218>)
 80043dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043de:	f003 0304 	and.w	r3, r3, #4
 80043e2:	613b      	str	r3, [r7, #16]
 80043e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80043e6:	4b7a      	ldr	r3, [pc, #488]	; (80045d0 <MX_GPIO_Init+0x218>)
 80043e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043ea:	4a79      	ldr	r2, [pc, #484]	; (80045d0 <MX_GPIO_Init+0x218>)
 80043ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80043f2:	4b77      	ldr	r3, [pc, #476]	; (80045d0 <MX_GPIO_Init+0x218>)
 80043f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043fa:	60fb      	str	r3, [r7, #12]
 80043fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80043fe:	4b74      	ldr	r3, [pc, #464]	; (80045d0 <MX_GPIO_Init+0x218>)
 8004400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004402:	4a73      	ldr	r2, [pc, #460]	; (80045d0 <MX_GPIO_Init+0x218>)
 8004404:	f043 0301 	orr.w	r3, r3, #1
 8004408:	64d3      	str	r3, [r2, #76]	; 0x4c
 800440a:	4b71      	ldr	r3, [pc, #452]	; (80045d0 <MX_GPIO_Init+0x218>)
 800440c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800440e:	f003 0301 	and.w	r3, r3, #1
 8004412:	60bb      	str	r3, [r7, #8]
 8004414:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004416:	4b6e      	ldr	r3, [pc, #440]	; (80045d0 <MX_GPIO_Init+0x218>)
 8004418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800441a:	4a6d      	ldr	r2, [pc, #436]	; (80045d0 <MX_GPIO_Init+0x218>)
 800441c:	f043 0302 	orr.w	r3, r3, #2
 8004420:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004422:	4b6b      	ldr	r3, [pc, #428]	; (80045d0 <MX_GPIO_Init+0x218>)
 8004424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004426:	f003 0302 	and.w	r3, r3, #2
 800442a:	607b      	str	r3, [r7, #4]
 800442c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800442e:	4b68      	ldr	r3, [pc, #416]	; (80045d0 <MX_GPIO_Init+0x218>)
 8004430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004432:	4a67      	ldr	r2, [pc, #412]	; (80045d0 <MX_GPIO_Init+0x218>)
 8004434:	f043 0308 	orr.w	r3, r3, #8
 8004438:	64d3      	str	r3, [r2, #76]	; 0x4c
 800443a:	4b65      	ldr	r3, [pc, #404]	; (80045d0 <MX_GPIO_Init+0x218>)
 800443c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800443e:	f003 0308 	and.w	r3, r3, #8
 8004442:	603b      	str	r3, [r7, #0]
 8004444:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DISPLAY_ON_Pin|ERR_LED_Pin, GPIO_PIN_RESET);
 8004446:	2200      	movs	r2, #0
 8004448:	2109      	movs	r1, #9
 800444a:	4862      	ldr	r0, [pc, #392]	; (80045d4 <MX_GPIO_Init+0x21c>)
 800444c:	f004 f8d0 	bl	80085f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TIK_LED_GPIO_Port, TIK_LED_Pin, GPIO_PIN_RESET);
 8004450:	2200      	movs	r2, #0
 8004452:	2102      	movs	r1, #2
 8004454:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004458:	f004 f8ca 	bl	80085f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 800445c:	2201      	movs	r2, #1
 800445e:	2110      	movs	r1, #16
 8004460:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004464:	f004 f8c4 	bl	80085f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin|SPI1_DC_Pin, GPIO_PIN_SET);
 8004468:	2201      	movs	r2, #1
 800446a:	f44f 5181 	mov.w	r1, #4128	; 0x1020
 800446e:	485a      	ldr	r0, [pc, #360]	; (80045d8 <MX_GPIO_Init+0x220>)
 8004470:	f004 f8be 	bl	80085f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);
 8004474:	2201      	movs	r2, #1
 8004476:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800447a:	4856      	ldr	r0, [pc, #344]	; (80045d4 <MX_GPIO_Init+0x21c>)
 800447c:	f004 f8b8 	bl	80085f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_RST_GPIO_Port, SPI1_RST_Pin, GPIO_PIN_SET);
 8004480:	2201      	movs	r2, #1
 8004482:	2104      	movs	r1, #4
 8004484:	4855      	ldr	r0, [pc, #340]	; (80045dc <MX_GPIO_Init+0x224>)
 8004486:	f004 f8b3 	bl	80085f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DISPLAY_ON_Pin */
  GPIO_InitStruct.Pin = DISPLAY_ON_Pin;
 800448a:	2301      	movs	r3, #1
 800448c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800448e:	2301      	movs	r3, #1
 8004490:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004492:	2302      	movs	r3, #2
 8004494:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004496:	2300      	movs	r3, #0
 8004498:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DISPLAY_ON_GPIO_Port, &GPIO_InitStruct);
 800449a:	f107 0314 	add.w	r3, r7, #20
 800449e:	4619      	mov	r1, r3
 80044a0:	484c      	ldr	r0, [pc, #304]	; (80045d4 <MX_GPIO_Init+0x21c>)
 80044a2:	f003 fee3 	bl	800826c <HAL_GPIO_Init>

  /*Configure GPIO pins : KEY0_Pin KEY1_Pin */
  GPIO_InitStruct.Pin = KEY0_Pin|KEY1_Pin;
 80044a6:	2306      	movs	r3, #6
 80044a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80044aa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80044ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80044b0:	2301      	movs	r3, #1
 80044b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80044b4:	f107 0314 	add.w	r3, r7, #20
 80044b8:	4619      	mov	r1, r3
 80044ba:	4846      	ldr	r0, [pc, #280]	; (80045d4 <MX_GPIO_Init+0x21c>)
 80044bc:	f003 fed6 	bl	800826c <HAL_GPIO_Init>

  /*Configure GPIO pin : ERR_LED_Pin */
  GPIO_InitStruct.Pin = ERR_LED_Pin;
 80044c0:	2308      	movs	r3, #8
 80044c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80044c4:	2301      	movs	r3, #1
 80044c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044c8:	2300      	movs	r3, #0
 80044ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80044cc:	2301      	movs	r3, #1
 80044ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ERR_LED_GPIO_Port, &GPIO_InitStruct);
 80044d0:	f107 0314 	add.w	r3, r7, #20
 80044d4:	4619      	mov	r1, r3
 80044d6:	483f      	ldr	r0, [pc, #252]	; (80045d4 <MX_GPIO_Init+0x21c>)
 80044d8:	f003 fec8 	bl	800826c <HAL_GPIO_Init>

  /*Configure GPIO pin : TIK_LED_Pin */
  GPIO_InitStruct.Pin = TIK_LED_Pin;
 80044dc:	2302      	movs	r3, #2
 80044de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80044e0:	2301      	movs	r3, #1
 80044e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044e4:	2300      	movs	r3, #0
 80044e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044e8:	2300      	movs	r3, #0
 80044ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TIK_LED_GPIO_Port, &GPIO_InitStruct);
 80044ec:	f107 0314 	add.w	r3, r7, #20
 80044f0:	4619      	mov	r1, r3
 80044f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80044f6:	f003 feb9 	bl	800826c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80044fa:	2310      	movs	r3, #16
 80044fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80044fe:	2301      	movs	r3, #1
 8004500:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004502:	2300      	movs	r3, #0
 8004504:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004506:	2302      	movs	r3, #2
 8004508:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 800450a:	f107 0314 	add.w	r3, r7, #20
 800450e:	4619      	mov	r1, r3
 8004510:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004514:	f003 feaa 	bl	800826c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8004518:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800451c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800451e:	2301      	movs	r3, #1
 8004520:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004522:	2301      	movs	r3, #1
 8004524:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004526:	2302      	movs	r3, #2
 8004528:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 800452a:	f107 0314 	add.w	r3, r7, #20
 800452e:	4619      	mov	r1, r3
 8004530:	4829      	ldr	r0, [pc, #164]	; (80045d8 <MX_GPIO_Init+0x220>)
 8004532:	f003 fe9b 	bl	800826c <HAL_GPIO_Init>

  /*Configure GPIO pin : IRED_Pin */
  GPIO_InitStruct.Pin = IRED_Pin;
 8004536:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800453a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800453c:	2300      	movs	r3, #0
 800453e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004540:	2301      	movs	r3, #1
 8004542:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IRED_GPIO_Port, &GPIO_InitStruct);
 8004544:	f107 0314 	add.w	r3, r7, #20
 8004548:	4619      	mov	r1, r3
 800454a:	4822      	ldr	r0, [pc, #136]	; (80045d4 <MX_GPIO_Init+0x21c>)
 800454c:	f003 fe8e 	bl	800826c <HAL_GPIO_Init>

  /*Configure GPIO pin : GREEN_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin;
 8004550:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004554:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004556:	2301      	movs	r3, #1
 8004558:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800455a:	2301      	movs	r3, #1
 800455c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800455e:	2301      	movs	r3, #1
 8004560:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GREEN_LED_GPIO_Port, &GPIO_InitStruct);
 8004562:	f107 0314 	add.w	r3, r7, #20
 8004566:	4619      	mov	r1, r3
 8004568:	481a      	ldr	r0, [pc, #104]	; (80045d4 <MX_GPIO_Init+0x21c>)
 800456a:	f003 fe7f 	bl	800826c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_RST_Pin */
  GPIO_InitStruct.Pin = SPI1_RST_Pin;
 800456e:	2304      	movs	r3, #4
 8004570:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004572:	2301      	movs	r3, #1
 8004574:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004576:	2301      	movs	r3, #1
 8004578:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800457a:	2302      	movs	r3, #2
 800457c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_RST_GPIO_Port, &GPIO_InitStruct);
 800457e:	f107 0314 	add.w	r3, r7, #20
 8004582:	4619      	mov	r1, r3
 8004584:	4815      	ldr	r0, [pc, #84]	; (80045dc <MX_GPIO_Init+0x224>)
 8004586:	f003 fe71 	bl	800826c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_DC_Pin */
  GPIO_InitStruct.Pin = SPI1_DC_Pin;
 800458a:	2320      	movs	r3, #32
 800458c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800458e:	2301      	movs	r3, #1
 8004590:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004592:	2300      	movs	r3, #0
 8004594:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004596:	2302      	movs	r3, #2
 8004598:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_DC_GPIO_Port, &GPIO_InitStruct);
 800459a:	f107 0314 	add.w	r3, r7, #20
 800459e:	4619      	mov	r1, r3
 80045a0:	480d      	ldr	r0, [pc, #52]	; (80045d8 <MX_GPIO_Init+0x220>)
 80045a2:	f003 fe63 	bl	800826c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80045a6:	2200      	movs	r2, #0
 80045a8:	2100      	movs	r1, #0
 80045aa:	2007      	movs	r0, #7
 80045ac:	f003 fb95 	bl	8007cda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80045b0:	2007      	movs	r0, #7
 80045b2:	f003 fbae 	bl	8007d12 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80045b6:	2200      	movs	r2, #0
 80045b8:	2100      	movs	r1, #0
 80045ba:	2008      	movs	r0, #8
 80045bc:	f003 fb8d 	bl	8007cda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80045c0:	2008      	movs	r0, #8
 80045c2:	f003 fba6 	bl	8007d12 <HAL_NVIC_EnableIRQ>

}
 80045c6:	bf00      	nop
 80045c8:	3728      	adds	r7, #40	; 0x28
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}
 80045ce:	bf00      	nop
 80045d0:	40021000 	.word	0x40021000
 80045d4:	48000800 	.word	0x48000800
 80045d8:	48000400 	.word	0x48000400
 80045dc:	48000c00 	.word	0x48000c00

080045e0 <hexToBin>:

//-------------------------------------------------------------------------------------------
//      Преобразует два символа строки из hex-формата в двоичный
//
uint8_t hexToBin(char *sc)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b085      	sub	sp, #20
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
char st = 0, ml = 0;
 80045e8:	2300      	movs	r3, #0
 80045ea:	73fb      	strb	r3, [r7, #15]
 80045ec:	2300      	movs	r3, #0
 80045ee:	73bb      	strb	r3, [r7, #14]

	if ((sc[0] >= '0') && (sc[0] <= '9')) st = (sc[0] - 0x30);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	781b      	ldrb	r3, [r3, #0]
 80045f4:	2b2f      	cmp	r3, #47	; 0x2f
 80045f6:	d908      	bls.n	800460a <hexToBin+0x2a>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	2b39      	cmp	r3, #57	; 0x39
 80045fe:	d804      	bhi.n	800460a <hexToBin+0x2a>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	781b      	ldrb	r3, [r3, #0]
 8004604:	3b30      	subs	r3, #48	; 0x30
 8004606:	73fb      	strb	r3, [r7, #15]
 8004608:	e018      	b.n	800463c <hexToBin+0x5c>
	else
	if ((sc[0] >= 'A') && (sc[0] <= 'F')) st = (sc[0] - 0x37);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	781b      	ldrb	r3, [r3, #0]
 800460e:	2b40      	cmp	r3, #64	; 0x40
 8004610:	d908      	bls.n	8004624 <hexToBin+0x44>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	781b      	ldrb	r3, [r3, #0]
 8004616:	2b46      	cmp	r3, #70	; 0x46
 8004618:	d804      	bhi.n	8004624 <hexToBin+0x44>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	781b      	ldrb	r3, [r3, #0]
 800461e:	3b37      	subs	r3, #55	; 0x37
 8004620:	73fb      	strb	r3, [r7, #15]
 8004622:	e00b      	b.n	800463c <hexToBin+0x5c>
	else
	if ((sc[0] >= 'a') && (sc[0] <= 'f')) st = (sc[0] - 0x57);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	781b      	ldrb	r3, [r3, #0]
 8004628:	2b60      	cmp	r3, #96	; 0x60
 800462a:	d907      	bls.n	800463c <hexToBin+0x5c>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	781b      	ldrb	r3, [r3, #0]
 8004630:	2b66      	cmp	r3, #102	; 0x66
 8004632:	d803      	bhi.n	800463c <hexToBin+0x5c>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	3b57      	subs	r3, #87	; 0x57
 800463a:	73fb      	strb	r3, [r7, #15]

	if ((sc[1] >= '0') && (sc[1] <= '9')) ml = (sc[1] - 0x30);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	3301      	adds	r3, #1
 8004640:	781b      	ldrb	r3, [r3, #0]
 8004642:	2b2f      	cmp	r3, #47	; 0x2f
 8004644:	d90a      	bls.n	800465c <hexToBin+0x7c>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	3301      	adds	r3, #1
 800464a:	781b      	ldrb	r3, [r3, #0]
 800464c:	2b39      	cmp	r3, #57	; 0x39
 800464e:	d805      	bhi.n	800465c <hexToBin+0x7c>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	3301      	adds	r3, #1
 8004654:	781b      	ldrb	r3, [r3, #0]
 8004656:	3b30      	subs	r3, #48	; 0x30
 8004658:	73bb      	strb	r3, [r7, #14]
 800465a:	e01e      	b.n	800469a <hexToBin+0xba>
	else
	if ((sc[1] >= 'A') && (sc[1] <= 'F')) ml = (sc[1] - 0x37);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	3301      	adds	r3, #1
 8004660:	781b      	ldrb	r3, [r3, #0]
 8004662:	2b40      	cmp	r3, #64	; 0x40
 8004664:	d90a      	bls.n	800467c <hexToBin+0x9c>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	3301      	adds	r3, #1
 800466a:	781b      	ldrb	r3, [r3, #0]
 800466c:	2b46      	cmp	r3, #70	; 0x46
 800466e:	d805      	bhi.n	800467c <hexToBin+0x9c>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	3301      	adds	r3, #1
 8004674:	781b      	ldrb	r3, [r3, #0]
 8004676:	3b37      	subs	r3, #55	; 0x37
 8004678:	73bb      	strb	r3, [r7, #14]
 800467a:	e00e      	b.n	800469a <hexToBin+0xba>
	else
	if ((sc[1] >= 'a') && (sc[1] <= 'f')) ml = (sc[1] - 0x57);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	3301      	adds	r3, #1
 8004680:	781b      	ldrb	r3, [r3, #0]
 8004682:	2b60      	cmp	r3, #96	; 0x60
 8004684:	d909      	bls.n	800469a <hexToBin+0xba>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	3301      	adds	r3, #1
 800468a:	781b      	ldrb	r3, [r3, #0]
 800468c:	2b66      	cmp	r3, #102	; 0x66
 800468e:	d804      	bhi.n	800469a <hexToBin+0xba>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	3301      	adds	r3, #1
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	3b57      	subs	r3, #87	; 0x57
 8004698:	73bb      	strb	r3, [r7, #14]

	return ((st << 4) | (ml & 0x0f));
 800469a:	7bfb      	ldrb	r3, [r7, #15]
 800469c:	011b      	lsls	r3, r3, #4
 800469e:	b25a      	sxtb	r2, r3
 80046a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80046a4:	f003 030f 	and.w	r3, r3, #15
 80046a8:	b25b      	sxtb	r3, r3
 80046aa:	4313      	orrs	r3, r2
 80046ac:	b25b      	sxtb	r3, r3
 80046ae:	b2db      	uxtb	r3, r3

}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3714      	adds	r7, #20
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr

080046bc <getEvtCount>:


#ifdef SET_FIFO_MODE
//-------------------------------------------------------------------------------------------
uint8_t getEvtCount()
{
 80046bc:	b480      	push	{r7}
 80046be:	af00      	add	r7, sp, #0
	return cnt_evt;
 80046c0:	4b03      	ldr	r3, [pc, #12]	; (80046d0 <getEvtCount+0x14>)
 80046c2:	781b      	ldrb	r3, [r3, #0]
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr
 80046ce:	bf00      	nop
 80046d0:	20001fe2 	.word	0x20001fe2

080046d4 <putEvt>:
//-------------------------------------------------------------------------------------------
void putEvt(int evt)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b082      	sub	sp, #8
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]

	//while (lock_fifo);
	//lock_fifo = true;

	if (cnt_evt > (MAX_FIFO_SIZE - 3)) {
 80046dc:	4b36      	ldr	r3, [pc, #216]	; (80047b8 <putEvt+0xe4>)
 80046de:	781b      	ldrb	r3, [r3, #0]
 80046e0:	2b3d      	cmp	r3, #61	; 0x3d
 80046e2:	d907      	bls.n	80046f4 <putEvt+0x20>
		devError |= devFIFO;
 80046e4:	4b35      	ldr	r3, [pc, #212]	; (80047bc <putEvt+0xe8>)
 80046e6:	881b      	ldrh	r3, [r3, #0]
 80046e8:	f043 0310 	orr.w	r3, r3, #16
 80046ec:	b29a      	uxth	r2, r3
 80046ee:	4b33      	ldr	r3, [pc, #204]	; (80047bc <putEvt+0xe8>)
 80046f0:	801a      	strh	r2, [r3, #0]
		//lock_fifo = false;
		return;
 80046f2:	e05d      	b.n	80047b0 <putEvt+0xdc>
	}

	HAL_NVIC_DisableIRQ(USART2_IRQn);
 80046f4:	2026      	movs	r0, #38	; 0x26
 80046f6:	f003 fb1a 	bl	8007d2e <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(TIM4_IRQn);
 80046fa:	201e      	movs	r0, #30
 80046fc:	f003 fb17 	bl	8007d2e <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 8004700:	2007      	movs	r0, #7
 8004702:	f003 fb14 	bl	8007d2e <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI2_IRQn);
 8004706:	2008      	movs	r0, #8
 8004708:	f003 fb11 	bl	8007d2e <HAL_NVIC_DisableIRQ>

	if (cnt_evt >= MAX_FIFO_SIZE) {
 800470c:	4b2a      	ldr	r3, [pc, #168]	; (80047b8 <putEvt+0xe4>)
 800470e:	781b      	ldrb	r3, [r3, #0]
 8004710:	2b3f      	cmp	r3, #63	; 0x3f
 8004712:	d906      	bls.n	8004722 <putEvt+0x4e>
			wr_evt_err++;
 8004714:	4b2a      	ldr	r3, [pc, #168]	; (80047c0 <putEvt+0xec>)
 8004716:	781b      	ldrb	r3, [r3, #0]
 8004718:	3301      	adds	r3, #1
 800471a:	b2da      	uxtb	r2, r3
 800471c:	4b28      	ldr	r3, [pc, #160]	; (80047c0 <putEvt+0xec>)
 800471e:	701a      	strb	r2, [r3, #0]
 8004720:	e027      	b.n	8004772 <putEvt+0x9e>
		} else {
			evt_fifo[wr_evt_adr] = evt;
 8004722:	4b28      	ldr	r3, [pc, #160]	; (80047c4 <putEvt+0xf0>)
 8004724:	781b      	ldrb	r3, [r3, #0]
 8004726:	4619      	mov	r1, r3
 8004728:	4a27      	ldr	r2, [pc, #156]	; (80047c8 <putEvt+0xf4>)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			cnt_evt++;
 8004730:	4b21      	ldr	r3, [pc, #132]	; (80047b8 <putEvt+0xe4>)
 8004732:	781b      	ldrb	r3, [r3, #0]
 8004734:	3301      	adds	r3, #1
 8004736:	b2da      	uxtb	r2, r3
 8004738:	4b1f      	ldr	r3, [pc, #124]	; (80047b8 <putEvt+0xe4>)
 800473a:	701a      	strb	r2, [r3, #0]
			if (wr_evt_adr < (MAX_FIFO_SIZE - 1) ) {
 800473c:	4b21      	ldr	r3, [pc, #132]	; (80047c4 <putEvt+0xf0>)
 800473e:	781b      	ldrb	r3, [r3, #0]
 8004740:	2b3e      	cmp	r3, #62	; 0x3e
 8004742:	d806      	bhi.n	8004752 <putEvt+0x7e>
				wr_evt_adr++;
 8004744:	4b1f      	ldr	r3, [pc, #124]	; (80047c4 <putEvt+0xf0>)
 8004746:	781b      	ldrb	r3, [r3, #0]
 8004748:	3301      	adds	r3, #1
 800474a:	b2da      	uxtb	r2, r3
 800474c:	4b1d      	ldr	r3, [pc, #116]	; (80047c4 <putEvt+0xf0>)
 800474e:	701a      	strb	r2, [r3, #0]
 8004750:	e002      	b.n	8004758 <putEvt+0x84>
			} else  {
				wr_evt_adr = 0;
 8004752:	4b1c      	ldr	r3, [pc, #112]	; (80047c4 <putEvt+0xf0>)
 8004754:	2200      	movs	r2, #0
 8004756:	701a      	strb	r2, [r3, #0]
			}
			wr_evt_err = 0;
 8004758:	4b19      	ldr	r3, [pc, #100]	; (80047c0 <putEvt+0xec>)
 800475a:	2200      	movs	r2, #0
 800475c:	701a      	strb	r2, [r3, #0]
			if (cnt_evt > max_evt) max_evt = cnt_evt;
 800475e:	4b16      	ldr	r3, [pc, #88]	; (80047b8 <putEvt+0xe4>)
 8004760:	781a      	ldrb	r2, [r3, #0]
 8004762:	4b1a      	ldr	r3, [pc, #104]	; (80047cc <putEvt+0xf8>)
 8004764:	781b      	ldrb	r3, [r3, #0]
 8004766:	429a      	cmp	r2, r3
 8004768:	d903      	bls.n	8004772 <putEvt+0x9e>
 800476a:	4b13      	ldr	r3, [pc, #76]	; (80047b8 <putEvt+0xe4>)
 800476c:	781a      	ldrb	r2, [r3, #0]
 800476e:	4b17      	ldr	r3, [pc, #92]	; (80047cc <putEvt+0xf8>)
 8004770:	701a      	strb	r2, [r3, #0]
		}

		if (wr_evt_err) devError |= devFIFO;
 8004772:	4b13      	ldr	r3, [pc, #76]	; (80047c0 <putEvt+0xec>)
 8004774:	781b      	ldrb	r3, [r3, #0]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d007      	beq.n	800478a <putEvt+0xb6>
 800477a:	4b10      	ldr	r3, [pc, #64]	; (80047bc <putEvt+0xe8>)
 800477c:	881b      	ldrh	r3, [r3, #0]
 800477e:	f043 0310 	orr.w	r3, r3, #16
 8004782:	b29a      	uxth	r2, r3
 8004784:	4b0d      	ldr	r3, [pc, #52]	; (80047bc <putEvt+0xe8>)
 8004786:	801a      	strh	r2, [r3, #0]
 8004788:	e006      	b.n	8004798 <putEvt+0xc4>
				   else devError &= ~devFIFO;
 800478a:	4b0c      	ldr	r3, [pc, #48]	; (80047bc <putEvt+0xe8>)
 800478c:	881b      	ldrh	r3, [r3, #0]
 800478e:	f023 0310 	bic.w	r3, r3, #16
 8004792:	b29a      	uxth	r2, r3
 8004794:	4b09      	ldr	r3, [pc, #36]	; (80047bc <putEvt+0xe8>)
 8004796:	801a      	strh	r2, [r3, #0]

		HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8004798:	2008      	movs	r0, #8
 800479a:	f003 faba 	bl	8007d12 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800479e:	2007      	movs	r0, #7
 80047a0:	f003 fab7 	bl	8007d12 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80047a4:	201e      	movs	r0, #30
 80047a6:	f003 fab4 	bl	8007d12 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(USART2_IRQn);
 80047aa:	2026      	movs	r0, #38	; 0x26
 80047ac:	f003 fab1 	bl	8007d12 <HAL_NVIC_EnableIRQ>

		//lock_fifo = false;
}
 80047b0:	3708      	adds	r7, #8
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
 80047b6:	bf00      	nop
 80047b8:	20001fe2 	.word	0x20001fe2
 80047bc:	20001bc8 	.word	0x20001bc8
 80047c0:	20001fe1 	.word	0x20001fe1
 80047c4:	20001fe0 	.word	0x20001fe0
 80047c8:	200000dc 	.word	0x200000dc
 80047cc:	20001fe3 	.word	0x20001fe3

080047d0 <getEvt>:
//-------------------------------------------------------------------------------------------
int getEvt()
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b082      	sub	sp, #8
 80047d4:	af00      	add	r7, sp, #0
int ret = evt_None;
 80047d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80047da:	607b      	str	r3, [r7, #4]

	//while (lock_fifo);
	//lock_fifo = true;

	HAL_NVIC_DisableIRQ(USART2_IRQn);
 80047dc:	2026      	movs	r0, #38	; 0x26
 80047de:	f003 faa6 	bl	8007d2e <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(TIM4_IRQn);
 80047e2:	201e      	movs	r0, #30
 80047e4:	f003 faa3 	bl	8007d2e <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 80047e8:	2007      	movs	r0, #7
 80047ea:	f003 faa0 	bl	8007d2e <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI2_IRQn);
 80047ee:	2008      	movs	r0, #8
 80047f0:	f003 fa9d 	bl	8007d2e <HAL_NVIC_DisableIRQ>

	if (cnt_evt) {
 80047f4:	4b19      	ldr	r3, [pc, #100]	; (800485c <getEvt+0x8c>)
 80047f6:	781b      	ldrb	r3, [r3, #0]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d01e      	beq.n	800483a <getEvt+0x6a>
		ret = evt_fifo[rd_evt_adr];
 80047fc:	4b18      	ldr	r3, [pc, #96]	; (8004860 <getEvt+0x90>)
 80047fe:	781b      	ldrb	r3, [r3, #0]
 8004800:	461a      	mov	r2, r3
 8004802:	4b18      	ldr	r3, [pc, #96]	; (8004864 <getEvt+0x94>)
 8004804:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004808:	607b      	str	r3, [r7, #4]
		if (cnt_evt) cnt_evt--;
 800480a:	4b14      	ldr	r3, [pc, #80]	; (800485c <getEvt+0x8c>)
 800480c:	781b      	ldrb	r3, [r3, #0]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d005      	beq.n	800481e <getEvt+0x4e>
 8004812:	4b12      	ldr	r3, [pc, #72]	; (800485c <getEvt+0x8c>)
 8004814:	781b      	ldrb	r3, [r3, #0]
 8004816:	3b01      	subs	r3, #1
 8004818:	b2da      	uxtb	r2, r3
 800481a:	4b10      	ldr	r3, [pc, #64]	; (800485c <getEvt+0x8c>)
 800481c:	701a      	strb	r2, [r3, #0]
		if (rd_evt_adr < (MAX_FIFO_SIZE - 1) ) {
 800481e:	4b10      	ldr	r3, [pc, #64]	; (8004860 <getEvt+0x90>)
 8004820:	781b      	ldrb	r3, [r3, #0]
 8004822:	2b3e      	cmp	r3, #62	; 0x3e
 8004824:	d806      	bhi.n	8004834 <getEvt+0x64>
			rd_evt_adr++;
 8004826:	4b0e      	ldr	r3, [pc, #56]	; (8004860 <getEvt+0x90>)
 8004828:	781b      	ldrb	r3, [r3, #0]
 800482a:	3301      	adds	r3, #1
 800482c:	b2da      	uxtb	r2, r3
 800482e:	4b0c      	ldr	r3, [pc, #48]	; (8004860 <getEvt+0x90>)
 8004830:	701a      	strb	r2, [r3, #0]
 8004832:	e002      	b.n	800483a <getEvt+0x6a>
		} else {
			rd_evt_adr = 0;
 8004834:	4b0a      	ldr	r3, [pc, #40]	; (8004860 <getEvt+0x90>)
 8004836:	2200      	movs	r2, #0
 8004838:	701a      	strb	r2, [r3, #0]
		}
	}

	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800483a:	2008      	movs	r0, #8
 800483c:	f003 fa69 	bl	8007d12 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8004840:	2007      	movs	r0, #7
 8004842:	f003 fa66 	bl	8007d12 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004846:	201e      	movs	r0, #30
 8004848:	f003 fa63 	bl	8007d12 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 800484c:	2026      	movs	r0, #38	; 0x26
 800484e:	f003 fa60 	bl	8007d12 <HAL_NVIC_EnableIRQ>

	//lock_fifo = false;

	return ret;
 8004852:	687b      	ldr	r3, [r7, #4]
}
 8004854:	4618      	mov	r0, r3
 8004856:	3708      	adds	r7, #8
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}
 800485c:	20001fe2 	.word	0x20001fe2
 8004860:	20001fdf 	.word	0x20001fdf
 8004864:	200000dc 	.word	0x200000dc

08004868 <nameStation>:
//-------------------------------------------------------------------------------------------
#ifdef SET_DISPLAY

//-------------------------------------------------------------------------------------------
const char *nameStation(float fr)
{
 8004868:	b480      	push	{r7}
 800486a:	b085      	sub	sp, #20
 800486c:	af00      	add	r7, sp, #0
 800486e:	ed87 0a01 	vstr	s0, [r7, #4]
int8_t ik = -1;
 8004872:	23ff      	movs	r3, #255	; 0xff
 8004874:	73fb      	strb	r3, [r7, #15]

	for (int8_t i = 0; i < MAX_LIST; i++) {
 8004876:	2300      	movs	r3, #0
 8004878:	73bb      	strb	r3, [r7, #14]
 800487a:	e01b      	b.n	80048b4 <nameStation+0x4c>
		if (list[i].freq == fr) {
 800487c:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8004880:	491a      	ldr	r1, [pc, #104]	; (80048ec <nameStation+0x84>)
 8004882:	4613      	mov	r3, r2
 8004884:	00db      	lsls	r3, r3, #3
 8004886:	4413      	add	r3, r2
 8004888:	009b      	lsls	r3, r3, #2
 800488a:	440b      	add	r3, r1
 800488c:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8004890:	edd7 7a01 	vldr	s15, [r7, #4]
 8004894:	ee07 3a10 	vmov	s14, r3
 8004898:	eef4 7a47 	vcmp.f32	s15, s14
 800489c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048a0:	d102      	bne.n	80048a8 <nameStation+0x40>
			ik = i;
 80048a2:	7bbb      	ldrb	r3, [r7, #14]
 80048a4:	73fb      	strb	r3, [r7, #15]
			break;
 80048a6:	e009      	b.n	80048bc <nameStation+0x54>
	for (int8_t i = 0; i < MAX_LIST; i++) {
 80048a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	3301      	adds	r3, #1
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	73bb      	strb	r3, [r7, #14]
 80048b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80048b8:	2b18      	cmp	r3, #24
 80048ba:	dddf      	ble.n	800487c <nameStation+0x14>
		}
	}

	if (ik != -1) return list[ik].name;
 80048bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048c4:	d009      	beq.n	80048da <nameStation+0x72>
 80048c6:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80048ca:	4613      	mov	r3, r2
 80048cc:	00db      	lsls	r3, r3, #3
 80048ce:	4413      	add	r3, r2
 80048d0:	009b      	lsls	r3, r3, #2
 80048d2:	4a06      	ldr	r2, [pc, #24]	; (80048ec <nameStation+0x84>)
 80048d4:	4413      	add	r3, r2
 80048d6:	3305      	adds	r3, #5
 80048d8:	e001      	b.n	80048de <nameStation+0x76>
			 else return noneStation;
 80048da:	4b05      	ldr	r3, [pc, #20]	; (80048f0 <nameStation+0x88>)
 80048dc:	681b      	ldr	r3, [r3, #0]
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3714      	adds	r7, #20
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr
 80048ea:	bf00      	nop
 80048ec:	20003034 	.word	0x20003034
 80048f0:	20000204 	.word	0x20000204

080048f4 <getNextList>:
//-------------------------------------------------------------------------------------------
float getNextList(float fr, uint8_t up, uint8_t *band)
{
 80048f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048f8:	b08e      	sub	sp, #56	; 0x38
 80048fa:	af08      	add	r7, sp, #32
 80048fc:	ed87 0a03 	vstr	s0, [r7, #12]
 8004900:	4603      	mov	r3, r0
 8004902:	6079      	str	r1, [r7, #4]
 8004904:	72fb      	strb	r3, [r7, #11]
float ret = fr;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	613b      	str	r3, [r7, #16]
int8_t ik = -1;
 800490a:	23ff      	movs	r3, #255	; 0xff
 800490c:	75fb      	strb	r3, [r7, #23]

	for (int8_t i = 0; i < MAX_LIST; i++) {
 800490e:	2300      	movs	r3, #0
 8004910:	75bb      	strb	r3, [r7, #22]
 8004912:	e01b      	b.n	800494c <getNextList+0x58>
		if (list[i].freq == fr) {
 8004914:	f997 2016 	ldrsb.w	r2, [r7, #22]
 8004918:	4965      	ldr	r1, [pc, #404]	; (8004ab0 <getNextList+0x1bc>)
 800491a:	4613      	mov	r3, r2
 800491c:	00db      	lsls	r3, r3, #3
 800491e:	4413      	add	r3, r2
 8004920:	009b      	lsls	r3, r3, #2
 8004922:	440b      	add	r3, r1
 8004924:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8004928:	edd7 7a03 	vldr	s15, [r7, #12]
 800492c:	ee07 3a10 	vmov	s14, r3
 8004930:	eef4 7a47 	vcmp.f32	s15, s14
 8004934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004938:	d102      	bne.n	8004940 <getNextList+0x4c>
			ik = i;
 800493a:	7dbb      	ldrb	r3, [r7, #22]
 800493c:	75fb      	strb	r3, [r7, #23]
			break;
 800493e:	e009      	b.n	8004954 <getNextList+0x60>
	for (int8_t i = 0; i < MAX_LIST; i++) {
 8004940:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8004944:	b2db      	uxtb	r3, r3
 8004946:	3301      	adds	r3, #1
 8004948:	b2db      	uxtb	r3, r3
 800494a:	75bb      	strb	r3, [r7, #22]
 800494c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8004950:	2b18      	cmp	r3, #24
 8004952:	dddf      	ble.n	8004914 <getNextList+0x20>
		}
	}
	if (ik != -1) {
 8004954:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004958:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800495c:	d01b      	beq.n	8004996 <getNextList+0xa2>
		if (up) {
 800495e:	7afb      	ldrb	r3, [r7, #11]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d00a      	beq.n	800497a <getNextList+0x86>
			if (++ik == MAX_LIST) ik = 0;
 8004964:	7dfb      	ldrb	r3, [r7, #23]
 8004966:	3301      	adds	r3, #1
 8004968:	b2db      	uxtb	r3, r3
 800496a:	75fb      	strb	r3, [r7, #23]
 800496c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004970:	2b19      	cmp	r3, #25
 8004972:	d161      	bne.n	8004a38 <getNextList+0x144>
 8004974:	2300      	movs	r3, #0
 8004976:	75fb      	strb	r3, [r7, #23]
 8004978:	e05e      	b.n	8004a38 <getNextList+0x144>
		} else {
			if (ik != 0) ik--; else ik = MAX_LIST - 1;
 800497a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d006      	beq.n	8004990 <getNextList+0x9c>
 8004982:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004986:	b2db      	uxtb	r3, r3
 8004988:	3b01      	subs	r3, #1
 800498a:	b2db      	uxtb	r3, r3
 800498c:	75fb      	strb	r3, [r7, #23]
 800498e:	e053      	b.n	8004a38 <getNextList+0x144>
 8004990:	2318      	movs	r3, #24
 8004992:	75fb      	strb	r3, [r7, #23]
 8004994:	e050      	b.n	8004a38 <getNextList+0x144>
		}
	} else {
		if (up) {// seek_up
 8004996:	7afb      	ldrb	r3, [r7, #11]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d023      	beq.n	80049e4 <getNextList+0xf0>
			for (int8_t i = ik; i < MAX_LIST; i++) {
 800499c:	7dfb      	ldrb	r3, [r7, #23]
 800499e:	757b      	strb	r3, [r7, #21]
 80049a0:	e01b      	b.n	80049da <getNextList+0xe6>
				if (list[i].freq > fr) {
 80049a2:	f997 2015 	ldrsb.w	r2, [r7, #21]
 80049a6:	4942      	ldr	r1, [pc, #264]	; (8004ab0 <getNextList+0x1bc>)
 80049a8:	4613      	mov	r3, r2
 80049aa:	00db      	lsls	r3, r3, #3
 80049ac:	4413      	add	r3, r2
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	440b      	add	r3, r1
 80049b2:	f8d3 3001 	ldr.w	r3, [r3, #1]
 80049b6:	edd7 7a03 	vldr	s15, [r7, #12]
 80049ba:	ee07 3a10 	vmov	s14, r3
 80049be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049c6:	d502      	bpl.n	80049ce <getNextList+0xda>
					ik = i;
 80049c8:	7d7b      	ldrb	r3, [r7, #21]
 80049ca:	75fb      	strb	r3, [r7, #23]
					break;
 80049cc:	e02d      	b.n	8004a2a <getNextList+0x136>
			for (int8_t i = ik; i < MAX_LIST; i++) {
 80049ce:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80049d2:	b2db      	uxtb	r3, r3
 80049d4:	3301      	adds	r3, #1
 80049d6:	b2db      	uxtb	r3, r3
 80049d8:	757b      	strb	r3, [r7, #21]
 80049da:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80049de:	2b18      	cmp	r3, #24
 80049e0:	dddf      	ble.n	80049a2 <getNextList+0xae>
 80049e2:	e022      	b.n	8004a2a <getNextList+0x136>
				}
			}
		} else {// seek_down
			for (int8_t i = ik; i <= 0; i--) {
 80049e4:	7dfb      	ldrb	r3, [r7, #23]
 80049e6:	753b      	strb	r3, [r7, #20]
 80049e8:	e01b      	b.n	8004a22 <getNextList+0x12e>
				if (list[i].freq < fr) {
 80049ea:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80049ee:	4930      	ldr	r1, [pc, #192]	; (8004ab0 <getNextList+0x1bc>)
 80049f0:	4613      	mov	r3, r2
 80049f2:	00db      	lsls	r3, r3, #3
 80049f4:	4413      	add	r3, r2
 80049f6:	009b      	lsls	r3, r3, #2
 80049f8:	440b      	add	r3, r1
 80049fa:	f8d3 3001 	ldr.w	r3, [r3, #1]
 80049fe:	edd7 7a03 	vldr	s15, [r7, #12]
 8004a02:	ee07 3a10 	vmov	s14, r3
 8004a06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a0e:	dd02      	ble.n	8004a16 <getNextList+0x122>
					ik = i;
 8004a10:	7d3b      	ldrb	r3, [r7, #20]
 8004a12:	75fb      	strb	r3, [r7, #23]
					break;
 8004a14:	e009      	b.n	8004a2a <getNextList+0x136>
			for (int8_t i = ik; i <= 0; i--) {
 8004a16:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8004a1a:	b2db      	uxtb	r3, r3
 8004a1c:	3b01      	subs	r3, #1
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	753b      	strb	r3, [r7, #20]
 8004a22:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	dddf      	ble.n	80049ea <getNextList+0xf6>
				}
			}
		}
		if (ik == -1) ik = 0;
 8004a2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004a2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a32:	d101      	bne.n	8004a38 <getNextList+0x144>
 8004a34:	2300      	movs	r3, #0
 8004a36:	75fb      	strb	r3, [r7, #23]
	}
	ret = list[ik].freq;
 8004a38:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8004a3c:	491c      	ldr	r1, [pc, #112]	; (8004ab0 <getNextList+0x1bc>)
 8004a3e:	4613      	mov	r3, r2
 8004a40:	00db      	lsls	r3, r3, #3
 8004a42:	4413      	add	r3, r2
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	440b      	add	r3, r1
 8004a48:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8004a4c:	613b      	str	r3, [r7, #16]
	*band = list[ik].band;
 8004a4e:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8004a52:	4917      	ldr	r1, [pc, #92]	; (8004ab0 <getNextList+0x1bc>)
 8004a54:	4613      	mov	r3, r2
 8004a56:	00db      	lsls	r3, r3, #3
 8004a58:	4413      	add	r3, r2
 8004a5a:	009b      	lsls	r3, r3, #2
 8004a5c:	440b      	add	r3, r1
 8004a5e:	781a      	ldrb	r2, [r3, #0]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	701a      	strb	r2, [r3, #0]
	Report(1, "[%s] up=%u ik=%d, fr=%.1f ret=%.1f band=%u\r\n", __func__, up, ik, fr, ret, *band);
 8004a64:	f897 800b 	ldrb.w	r8, [r7, #11]
 8004a68:	f997 6017 	ldrsb.w	r6, [r7, #23]
 8004a6c:	68f8      	ldr	r0, [r7, #12]
 8004a6e:	f7fb fd6b 	bl	8000548 <__aeabi_f2d>
 8004a72:	4604      	mov	r4, r0
 8004a74:	460d      	mov	r5, r1
 8004a76:	6938      	ldr	r0, [r7, #16]
 8004a78:	f7fb fd66 	bl	8000548 <__aeabi_f2d>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	460b      	mov	r3, r1
 8004a80:	6879      	ldr	r1, [r7, #4]
 8004a82:	7809      	ldrb	r1, [r1, #0]
 8004a84:	9106      	str	r1, [sp, #24]
 8004a86:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004a8a:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8004a8e:	9600      	str	r6, [sp, #0]
 8004a90:	4643      	mov	r3, r8
 8004a92:	4a08      	ldr	r2, [pc, #32]	; (8004ab4 <getNextList+0x1c0>)
 8004a94:	4908      	ldr	r1, [pc, #32]	; (8004ab8 <getNextList+0x1c4>)
 8004a96:	2001      	movs	r0, #1
 8004a98:	f000 fa22 	bl	8004ee0 <Report>

	return ret;
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	ee07 3a90 	vmov	s15, r3
}
 8004aa2:	eeb0 0a67 	vmov.f32	s0, s15
 8004aa6:	3718      	adds	r7, #24
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004aae:	bf00      	nop
 8004ab0:	20003034 	.word	0x20003034
 8004ab4:	08015884 	.word	0x08015884
 8004ab8:	080147a4 	.word	0x080147a4

08004abc <showLine>:
//-------------------------------------------------------------------------------------------
void showLine(char *msg, uint16_t lin, int *last_len, bool update)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b08a      	sub	sp, #40	; 0x28
 8004ac0:	af02      	add	r7, sp, #8
 8004ac2:	60f8      	str	r0, [r7, #12]
 8004ac4:	607a      	str	r2, [r7, #4]
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	460b      	mov	r3, r1
 8004aca:	817b      	strh	r3, [r7, #10]
 8004acc:	4613      	mov	r3, r2
 8004ace:	727b      	strb	r3, [r7, #9]
int il = strlen(msg);
 8004ad0:	68f8      	ldr	r0, [r7, #12]
 8004ad2:	f7fb fb7d 	bl	80001d0 <strlen>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	617b      	str	r3, [r7, #20]
int xf = ( (SCREEN_WIDTH - (lfnt->FontWidth * il) ) >> 1);// & 0x7f;
 8004ada:	4b2e      	ldr	r3, [pc, #184]	; (8004b94 <showLine+0xd8>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	781b      	ldrb	r3, [r3, #0]
 8004ae0:	461a      	mov	r2, r3
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	fb02 f303 	mul.w	r3, r2, r3
 8004ae8:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8004aec:	105b      	asrs	r3, r3, #1
 8004aee:	61fb      	str	r3, [r7, #28]
bool yes = false;
 8004af0:	2300      	movs	r3, #0
 8004af2:	76fb      	strb	r3, [r7, #27]

	if (*last_len > il) {
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	697a      	ldr	r2, [r7, #20]
 8004afa:	429a      	cmp	r2, r3
 8004afc:	da0d      	bge.n	8004b1a <showLine+0x5e>
		ST7565_DrawFilledRectangle(2, lin, SCREEN_WIDTH - 4, lfnt->FontHeight, PIX_OFF);
 8004afe:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8004b02:	4b24      	ldr	r3, [pc, #144]	; (8004b94 <showLine+0xd8>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	785b      	ldrb	r3, [r3, #1]
 8004b08:	b21b      	sxth	r3, r3
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	9200      	str	r2, [sp, #0]
 8004b0e:	227c      	movs	r2, #124	; 0x7c
 8004b10:	2002      	movs	r0, #2
 8004b12:	f7fd f986 	bl	8001e22 <ST7565_DrawFilledRectangle>
		yes = true;
 8004b16:	2301      	movs	r3, #1
 8004b18:	76fb      	strb	r3, [r7, #27]
	}
	*last_len = il;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	697a      	ldr	r2, [r7, #20]
 8004b1e:	601a      	str	r2, [r3, #0]
	if (*msg > 0x7f) {
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	b25b      	sxtb	r3, r3
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	da03      	bge.n	8004b32 <showLine+0x76>
		xf += il;
 8004b2a:	69fa      	ldr	r2, [r7, #28]
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	4413      	add	r3, r2
 8004b30:	61fb      	str	r3, [r7, #28]
	}
	if (!yes) ST7565_DrawFilledRectangle(2, lin, SCREEN_WIDTH - 4, lfnt->FontHeight, PIX_OFF);
 8004b32:	7efb      	ldrb	r3, [r7, #27]
 8004b34:	f083 0301 	eor.w	r3, r3, #1
 8004b38:	b2db      	uxtb	r3, r3
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d00b      	beq.n	8004b56 <showLine+0x9a>
 8004b3e:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8004b42:	4b14      	ldr	r3, [pc, #80]	; (8004b94 <showLine+0xd8>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	785b      	ldrb	r3, [r3, #1]
 8004b48:	b21b      	sxth	r3, r3
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	9200      	str	r2, [sp, #0]
 8004b4e:	227c      	movs	r2, #124	; 0x7c
 8004b50:	2002      	movs	r0, #2
 8004b52:	f7fd f966 	bl	8001e22 <ST7565_DrawFilledRectangle>

	if ((!xf) || (xf > (SCREEN_WIDTH - 4))) xf = 1;
 8004b56:	69fb      	ldr	r3, [r7, #28]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d002      	beq.n	8004b62 <showLine+0xa6>
 8004b5c:	69fb      	ldr	r3, [r7, #28]
 8004b5e:	2b7c      	cmp	r3, #124	; 0x7c
 8004b60:	dd01      	ble.n	8004b66 <showLine+0xaa>
 8004b62:	2301      	movs	r3, #1
 8004b64:	61fb      	str	r3, [r7, #28]
	ST7565_Print(xf, lin, msg, lfnt, 1, PIX_ON);
 8004b66:	69fb      	ldr	r3, [r7, #28]
 8004b68:	b218      	sxth	r0, r3
 8004b6a:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8004b6e:	4b09      	ldr	r3, [pc, #36]	; (8004b94 <showLine+0xd8>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	2201      	movs	r2, #1
 8004b74:	9201      	str	r2, [sp, #4]
 8004b76:	2201      	movs	r2, #1
 8004b78:	9200      	str	r2, [sp, #0]
 8004b7a:	68fa      	ldr	r2, [r7, #12]
 8004b7c:	f7fc fef8 	bl	8001970 <ST7565_Print>
	if (update) ST7565_Update();
 8004b80:	7a7b      	ldrb	r3, [r7, #9]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d001      	beq.n	8004b8a <showLine+0xce>
 8004b86:	f7fc fd43 	bl	8001610 <ST7565_Update>
}
 8004b8a:	bf00      	nop
 8004b8c:	3720      	adds	r7, #32
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}
 8004b92:	bf00      	nop
 8004b94:	20003010 	.word	0x20003010

08004b98 <errLedOn>:
#endif
//-------------------------------------------------------------------------------------------
void errLedOn(bool on)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b082      	sub	sp, #8
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	71fb      	strb	r3, [r7, #7]
	if (on)
 8004ba2:	79fb      	ldrb	r3, [r7, #7]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d005      	beq.n	8004bb4 <errLedOn+0x1c>
		HAL_GPIO_WritePin(ERR_LED_GPIO_Port, ERR_LED_Pin, GPIO_PIN_SET);//LED ON
 8004ba8:	2201      	movs	r2, #1
 8004baa:	2108      	movs	r1, #8
 8004bac:	4806      	ldr	r0, [pc, #24]	; (8004bc8 <errLedOn+0x30>)
 8004bae:	f003 fd1f 	bl	80085f0 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(ERR_LED_GPIO_Port, ERR_LED_Pin, GPIO_PIN_RESET);//LED OFF
}
 8004bb2:	e004      	b.n	8004bbe <errLedOn+0x26>
		HAL_GPIO_WritePin(ERR_LED_GPIO_Port, ERR_LED_Pin, GPIO_PIN_RESET);//LED OFF
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	2108      	movs	r1, #8
 8004bb8:	4803      	ldr	r0, [pc, #12]	; (8004bc8 <errLedOn+0x30>)
 8004bba:	f003 fd19 	bl	80085f0 <HAL_GPIO_WritePin>
}
 8004bbe:	bf00      	nop
 8004bc0:	3708      	adds	r7, #8
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	bf00      	nop
 8004bc8:	48000800 	.word	0x48000800

08004bcc <get_secCounter>:
//------------------------------------------------------------------------------------
uint32_t get_secCounter()
{
 8004bcc:	b480      	push	{r7}
 8004bce:	af00      	add	r7, sp, #0
	return secCounter;
 8004bd0:	4b03      	ldr	r3, [pc, #12]	; (8004be0 <get_secCounter+0x14>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bdc:	4770      	bx	lr
 8004bde:	bf00      	nop
 8004be0:	20001bcc 	.word	0x20001bcc

08004be4 <get_msCounter>:
{
	secCounter++;
}
//-----------------------------------------------------------------------------
uint64_t get_msCounter()
{
 8004be4:	b480      	push	{r7}
 8004be6:	af00      	add	r7, sp, #0
	return msCounter;
 8004be8:	4b04      	ldr	r3, [pc, #16]	; (8004bfc <get_msCounter+0x18>)
 8004bea:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 8004bee:	4610      	mov	r0, r2
 8004bf0:	4619      	mov	r1, r3
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr
 8004bfa:	bf00      	nop
 8004bfc:	20001bd0 	.word	0x20001bd0

08004c00 <get_tmr>:
{
	msCounter++;
}
//------------------------------------------------------------------------------------------
uint32_t get_tmr(uint32_t sec)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b082      	sub	sp, #8
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
	return (get_secCounter() + sec);
 8004c08:	f7ff ffe0 	bl	8004bcc <get_secCounter>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	4413      	add	r3, r2
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3708      	adds	r7, #8
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}

08004c1a <check_tmr>:
//------------------------------------------------------------------------------------------
bool check_tmr(uint32_t sec)
{
 8004c1a:	b580      	push	{r7, lr}
 8004c1c:	b082      	sub	sp, #8
 8004c1e:	af00      	add	r7, sp, #0
 8004c20:	6078      	str	r0, [r7, #4]
	return (get_secCounter() >= sec ? true : false);
 8004c22:	f7ff ffd3 	bl	8004bcc <get_secCounter>
 8004c26:	4602      	mov	r2, r0
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	bf94      	ite	ls
 8004c2e:	2301      	movls	r3, #1
 8004c30:	2300      	movhi	r3, #0
 8004c32:	b2db      	uxtb	r3, r3
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3708      	adds	r7, #8
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}

08004c3c <get_mstmr>:
//------------------------------------------------------------------------------------------
uint64_t get_mstmr(uint64_t hs)
{
 8004c3c:	b5b0      	push	{r4, r5, r7, lr}
 8004c3e:	b082      	sub	sp, #8
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	e9c7 0100 	strd	r0, r1, [r7]
	return (get_msCounter() + hs);
 8004c46:	f7ff ffcd 	bl	8004be4 <get_msCounter>
 8004c4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c4e:	1884      	adds	r4, r0, r2
 8004c50:	eb41 0503 	adc.w	r5, r1, r3
 8004c54:	4622      	mov	r2, r4
 8004c56:	462b      	mov	r3, r5
}
 8004c58:	4610      	mov	r0, r2
 8004c5a:	4619      	mov	r1, r3
 8004c5c:	3708      	adds	r7, #8
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bdb0      	pop	{r4, r5, r7, pc}

08004c62 <check_mstmr>:
//------------------------------------------------------------------------------------------
bool check_mstmr(uint64_t hs)
{
 8004c62:	b580      	push	{r7, lr}
 8004c64:	b082      	sub	sp, #8
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	e9c7 0100 	strd	r0, r1, [r7]
	return (get_msCounter() >= hs ? true : false);
 8004c6c:	f7ff ffba 	bl	8004be4 <get_msCounter>
 8004c70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c74:	4290      	cmp	r0, r2
 8004c76:	eb71 0303 	sbcs.w	r3, r1, r3
 8004c7a:	bf2c      	ite	cs
 8004c7c:	2301      	movcs	r3, #1
 8004c7e:	2300      	movcc	r3, #0
 8004c80:	b2db      	uxtb	r3, r3
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3708      	adds	r7, #8
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}
	...

08004c8c <toUppers>:
//------------------------------------------------------------------------------------------
void toUppers(char *st)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b084      	sub	sp, #16
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
int i;

    for (i = 0; i < strlen(st); i++) *(st + i) = toupper(*(st + i));
 8004c94:	2300      	movs	r3, #0
 8004c96:	60fb      	str	r3, [r7, #12]
 8004c98:	e019      	b.n	8004cce <toUppers+0x42>
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	687a      	ldr	r2, [r7, #4]
 8004c9e:	4413      	add	r3, r2
 8004ca0:	781b      	ldrb	r3, [r3, #0]
 8004ca2:	72fb      	strb	r3, [r7, #11]
 8004ca4:	7afb      	ldrb	r3, [r7, #11]
 8004ca6:	3301      	adds	r3, #1
 8004ca8:	4a0f      	ldr	r2, [pc, #60]	; (8004ce8 <toUppers+0x5c>)
 8004caa:	4413      	add	r3, r2
 8004cac:	781b      	ldrb	r3, [r3, #0]
 8004cae:	f003 0303 	and.w	r3, r3, #3
 8004cb2:	2b02      	cmp	r3, #2
 8004cb4:	d102      	bne.n	8004cbc <toUppers+0x30>
 8004cb6:	7afb      	ldrb	r3, [r7, #11]
 8004cb8:	3b20      	subs	r3, #32
 8004cba:	e000      	b.n	8004cbe <toUppers+0x32>
 8004cbc:	7afb      	ldrb	r3, [r7, #11]
 8004cbe:	68fa      	ldr	r2, [r7, #12]
 8004cc0:	6879      	ldr	r1, [r7, #4]
 8004cc2:	440a      	add	r2, r1
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	7013      	strb	r3, [r2, #0]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	3301      	adds	r3, #1
 8004ccc:	60fb      	str	r3, [r7, #12]
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f7fb fa7e 	bl	80001d0 <strlen>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d8de      	bhi.n	8004c9a <toUppers+0xe>
}
 8004cdc:	bf00      	nop
 8004cde:	bf00      	nop
 8004ce0:	3710      	adds	r7, #16
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
 8004ce6:	bf00      	nop
 8004ce8:	08015904 	.word	0x08015904

08004cec <set_Date>:
//------------------------------------------------------------------------------------------
void set_Date(uint32_t usec)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b094      	sub	sp, #80	; 0x50
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
struct tm ts;
time_t ep = (time_t)usec;
 8004cf4:	6879      	ldr	r1, [r7, #4]
 8004cf6:	2000      	movs	r0, #0
 8004cf8:	460a      	mov	r2, r1
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	e9c7 2308 	strd	r2, r3, [r7, #32]

	gmtime_r(&ep, &ts);
 8004d00:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8004d04:	f107 0320 	add.w	r3, r7, #32
 8004d08:	4611      	mov	r1, r2
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f00a fdce 	bl	800f8ac <gmtime_r>

	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;
	sDate.WeekDay = ts.tm_wday;
 8004d10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d12:	b2db      	uxtb	r3, r3
 8004d14:	723b      	strb	r3, [r7, #8]
	sDate.Month   = ts.tm_mon + 1;
 8004d16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d18:	b2db      	uxtb	r3, r3
 8004d1a:	3301      	adds	r3, #1
 8004d1c:	b2db      	uxtb	r3, r3
 8004d1e:	727b      	strb	r3, [r7, #9]
	sDate.Date    = ts.tm_mday;
 8004d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d22:	b2db      	uxtb	r3, r3
 8004d24:	72bb      	strb	r3, [r7, #10]
	sDate.Year    = ts.tm_year;
 8004d26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	72fb      	strb	r3, [r7, #11]
	sTime.Hours   = ts.tm_hour + tZone;
 8004d2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d2e:	b2da      	uxtb	r2, r3
 8004d30:	4b1a      	ldr	r3, [pc, #104]	; (8004d9c <set_Date+0xb0>)
 8004d32:	781b      	ldrb	r3, [r3, #0]
 8004d34:	4413      	add	r3, r2
 8004d36:	b2db      	uxtb	r3, r3
 8004d38:	733b      	strb	r3, [r7, #12]
	sTime.Minutes = ts.tm_min;
 8004d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	737b      	strb	r3, [r7, #13]
	sTime.Seconds = ts.tm_sec;
 8004d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	73bb      	strb	r3, [r7, #14]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) devError |= devRTC;
 8004d46:	f107 030c 	add.w	r3, r7, #12
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	4619      	mov	r1, r3
 8004d4e:	4814      	ldr	r0, [pc, #80]	; (8004da0 <set_Date+0xb4>)
 8004d50:	f006 fd49 	bl	800b7e6 <HAL_RTC_SetTime>
 8004d54:	4603      	mov	r3, r0
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d007      	beq.n	8004d6a <set_Date+0x7e>
 8004d5a:	4b12      	ldr	r3, [pc, #72]	; (8004da4 <set_Date+0xb8>)
 8004d5c:	881b      	ldrh	r3, [r3, #0]
 8004d5e:	f043 0308 	orr.w	r3, r3, #8
 8004d62:	b29a      	uxth	r2, r3
 8004d64:	4b0f      	ldr	r3, [pc, #60]	; (8004da4 <set_Date+0xb8>)
 8004d66:	801a      	strh	r2, [r3, #0]
		if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) devError |= devRTC;
		else {
			setDate = true;
		}
	}
}
 8004d68:	e014      	b.n	8004d94 <set_Date+0xa8>
		if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) devError |= devRTC;
 8004d6a:	f107 0308 	add.w	r3, r7, #8
 8004d6e:	2200      	movs	r2, #0
 8004d70:	4619      	mov	r1, r3
 8004d72:	480b      	ldr	r0, [pc, #44]	; (8004da0 <set_Date+0xb4>)
 8004d74:	f006 fe30 	bl	800b9d8 <HAL_RTC_SetDate>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d007      	beq.n	8004d8e <set_Date+0xa2>
 8004d7e:	4b09      	ldr	r3, [pc, #36]	; (8004da4 <set_Date+0xb8>)
 8004d80:	881b      	ldrh	r3, [r3, #0]
 8004d82:	f043 0308 	orr.w	r3, r3, #8
 8004d86:	b29a      	uxth	r2, r3
 8004d88:	4b06      	ldr	r3, [pc, #24]	; (8004da4 <set_Date+0xb8>)
 8004d8a:	801a      	strh	r2, [r3, #0]
}
 8004d8c:	e002      	b.n	8004d94 <set_Date+0xa8>
			setDate = true;
 8004d8e:	4b06      	ldr	r3, [pc, #24]	; (8004da8 <set_Date+0xbc>)
 8004d90:	2201      	movs	r2, #1
 8004d92:	701a      	strb	r2, [r3, #0]
}
 8004d94:	bf00      	nop
 8004d96:	3750      	adds	r7, #80	; 0x50
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}
 8004d9c:	20001fde 	.word	0x20001fde
 8004da0:	20000b54 	.word	0x20000b54
 8004da4:	20001bc8 	.word	0x20001bc8
 8004da8:	20001fdd 	.word	0x20001fdd

08004dac <sec2str>:

	return ep;
}
//------------------------------------------------------------------------------------------
int sec2str(char *st)
{
 8004dac:	b590      	push	{r4, r7, lr}
 8004dae:	b093      	sub	sp, #76	; 0x4c
 8004db0:	af04      	add	r7, sp, #16
 8004db2:	6078      	str	r0, [r7, #4]
int ret = 0;
 8004db4:	2300      	movs	r3, #0
 8004db6:	637b      	str	r3, [r7, #52]	; 0x34

	if (!setDate) {
 8004db8:	4b40      	ldr	r3, [pc, #256]	; (8004ebc <sec2str+0x110>)
 8004dba:	781b      	ldrb	r3, [r3, #0]
 8004dbc:	f083 0301 	eor.w	r3, r3, #1
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d040      	beq.n	8004e48 <sec2str+0x9c>
		uint32_t sec = get_secCounter();
 8004dc6:	f7ff ff01 	bl	8004bcc <get_secCounter>
 8004dca:	6338      	str	r0, [r7, #48]	; 0x30

		uint32_t day = sec / (60 * 60 * 24);
 8004dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dce:	4a3c      	ldr	r2, [pc, #240]	; (8004ec0 <sec2str+0x114>)
 8004dd0:	fba2 2303 	umull	r2, r3, r2, r3
 8004dd4:	0c1b      	lsrs	r3, r3, #16
 8004dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
		sec %= (60 * 60 * 24);
 8004dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dda:	4a39      	ldr	r2, [pc, #228]	; (8004ec0 <sec2str+0x114>)
 8004ddc:	fba2 1203 	umull	r1, r2, r2, r3
 8004de0:	0c12      	lsrs	r2, r2, #16
 8004de2:	4938      	ldr	r1, [pc, #224]	; (8004ec4 <sec2str+0x118>)
 8004de4:	fb01 f202 	mul.w	r2, r1, r2
 8004de8:	1a9b      	subs	r3, r3, r2
 8004dea:	633b      	str	r3, [r7, #48]	; 0x30
		uint32_t hour = sec / (60 * 60);
 8004dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dee:	4a36      	ldr	r2, [pc, #216]	; (8004ec8 <sec2str+0x11c>)
 8004df0:	fba2 2303 	umull	r2, r3, r2, r3
 8004df4:	0adb      	lsrs	r3, r3, #11
 8004df6:	62bb      	str	r3, [r7, #40]	; 0x28
		sec %= (60 * 60);
 8004df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dfa:	4a33      	ldr	r2, [pc, #204]	; (8004ec8 <sec2str+0x11c>)
 8004dfc:	fba2 1203 	umull	r1, r2, r2, r3
 8004e00:	0ad2      	lsrs	r2, r2, #11
 8004e02:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8004e06:	fb01 f202 	mul.w	r2, r1, r2
 8004e0a:	1a9b      	subs	r3, r3, r2
 8004e0c:	633b      	str	r3, [r7, #48]	; 0x30
		uint32_t min = sec / (60);
 8004e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e10:	4a2e      	ldr	r2, [pc, #184]	; (8004ecc <sec2str+0x120>)
 8004e12:	fba2 2303 	umull	r2, r3, r2, r3
 8004e16:	095b      	lsrs	r3, r3, #5
 8004e18:	627b      	str	r3, [r7, #36]	; 0x24
		sec %= 60;
 8004e1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e1c:	4b2b      	ldr	r3, [pc, #172]	; (8004ecc <sec2str+0x120>)
 8004e1e:	fba3 1302 	umull	r1, r3, r3, r2
 8004e22:	0959      	lsrs	r1, r3, #5
 8004e24:	460b      	mov	r3, r1
 8004e26:	011b      	lsls	r3, r3, #4
 8004e28:	1a5b      	subs	r3, r3, r1
 8004e2a:	009b      	lsls	r3, r3, #2
 8004e2c:	1ad3      	subs	r3, r2, r3
 8004e2e:	633b      	str	r3, [r7, #48]	; 0x30

		ret = sprintf(st, "%lu.%02lu:%02lu:%02lu", day, hour, min, sec);
 8004e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e32:	9301      	str	r3, [sp, #4]
 8004e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e36:	9300      	str	r3, [sp, #0]
 8004e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e3c:	4924      	ldr	r1, [pc, #144]	; (8004ed0 <sec2str+0x124>)
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f00b fb9a 	bl	8010578 <siprintf>
 8004e44:	6378      	str	r0, [r7, #52]	; 0x34
 8004e46:	e034      	b.n	8004eb2 <sec2str+0x106>
	} else {
		RTC_TimeTypeDef sTime;
		RTC_DateTypeDef sDate;
		if (HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN)) devError |= devRTC;
 8004e48:	f107 030c 	add.w	r3, r7, #12
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	4619      	mov	r1, r3
 8004e50:	4820      	ldr	r0, [pc, #128]	; (8004ed4 <sec2str+0x128>)
 8004e52:	f006 fe48 	bl	800bae6 <HAL_RTC_GetDate>
 8004e56:	4603      	mov	r3, r0
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d007      	beq.n	8004e6c <sec2str+0xc0>
 8004e5c:	4b1e      	ldr	r3, [pc, #120]	; (8004ed8 <sec2str+0x12c>)
 8004e5e:	881b      	ldrh	r3, [r3, #0]
 8004e60:	f043 0308 	orr.w	r3, r3, #8
 8004e64:	b29a      	uxth	r2, r3
 8004e66:	4b1c      	ldr	r3, [pc, #112]	; (8004ed8 <sec2str+0x12c>)
 8004e68:	801a      	strh	r2, [r3, #0]
 8004e6a:	e022      	b.n	8004eb2 <sec2str+0x106>
		else {
			if (HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN)) devError |= devRTC;
 8004e6c:	f107 0310 	add.w	r3, r7, #16
 8004e70:	2200      	movs	r2, #0
 8004e72:	4619      	mov	r1, r3
 8004e74:	4817      	ldr	r0, [pc, #92]	; (8004ed4 <sec2str+0x128>)
 8004e76:	f006 fd53 	bl	800b920 <HAL_RTC_GetTime>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d007      	beq.n	8004e90 <sec2str+0xe4>
 8004e80:	4b15      	ldr	r3, [pc, #84]	; (8004ed8 <sec2str+0x12c>)
 8004e82:	881b      	ldrh	r3, [r3, #0]
 8004e84:	f043 0308 	orr.w	r3, r3, #8
 8004e88:	b29a      	uxth	r2, r3
 8004e8a:	4b13      	ldr	r3, [pc, #76]	; (8004ed8 <sec2str+0x12c>)
 8004e8c:	801a      	strh	r2, [r3, #0]
 8004e8e:	e010      	b.n	8004eb2 <sec2str+0x106>
			else {
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
								sDate.Date, sDate.Month,
 8004e90:	7bbb      	ldrb	r3, [r7, #14]
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
 8004e92:	4618      	mov	r0, r3
								sDate.Date, sDate.Month,
 8004e94:	7b7b      	ldrb	r3, [r7, #13]
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
 8004e96:	461c      	mov	r4, r3
								sTime.Hours, sTime.Minutes, sTime.Seconds);
 8004e98:	7c3b      	ldrb	r3, [r7, #16]
 8004e9a:	7c7a      	ldrb	r2, [r7, #17]
 8004e9c:	7cb9      	ldrb	r1, [r7, #18]
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
 8004e9e:	9102      	str	r1, [sp, #8]
 8004ea0:	9201      	str	r2, [sp, #4]
 8004ea2:	9300      	str	r3, [sp, #0]
 8004ea4:	4623      	mov	r3, r4
 8004ea6:	4602      	mov	r2, r0
 8004ea8:	490c      	ldr	r1, [pc, #48]	; (8004edc <sec2str+0x130>)
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f00b fb64 	bl	8010578 <siprintf>
 8004eb0:	6378      	str	r0, [r7, #52]	; 0x34
			}
		}
	}

	return ret;
 8004eb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	373c      	adds	r7, #60	; 0x3c
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd90      	pop	{r4, r7, pc}
 8004ebc:	20001fdd 	.word	0x20001fdd
 8004ec0:	c22e4507 	.word	0xc22e4507
 8004ec4:	00015180 	.word	0x00015180
 8004ec8:	91a2b3c5 	.word	0x91a2b3c5
 8004ecc:	88888889 	.word	0x88888889
 8004ed0:	080147d4 	.word	0x080147d4
 8004ed4:	20000b54 	.word	0x20000b54
 8004ed8:	20001bc8 	.word	0x20001bc8
 8004edc:	080147ec 	.word	0x080147ec

08004ee0 <Report>:
//--------------------------------------------------------------------------------------------
void Report(const uint8_t addTime, const char *fmt, ...)
{
 8004ee0:	b40e      	push	{r1, r2, r3}
 8004ee2:	b590      	push	{r4, r7, lr}
 8004ee4:	b08a      	sub	sp, #40	; 0x28
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	4603      	mov	r3, r0
 8004eea:	71fb      	strb	r3, [r7, #7]
#ifdef SET_BLE
	if(sleep_mode) return;
#endif

	size_t len = MAX_UART_BUF;
 8004eec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ef0:	61bb      	str	r3, [r7, #24]
	char *buf = &cmdBuf[0];
 8004ef2:	4b37      	ldr	r3, [pc, #220]	; (8004fd0 <Report+0xf0>)
 8004ef4:	617b      	str	r3, [r7, #20]

	uint8_t cnt = 32;
 8004ef6:	2320      	movs	r3, #32
 8004ef8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t stim = HAL_GetTick();
 8004efc:	f002 fd9e 	bl	8007a3c <HAL_GetTick>
 8004f00:	6238      	str	r0, [r7, #32]
	uint32_t etim = stim;
 8004f02:	6a3b      	ldr	r3, [r7, #32]
 8004f04:	613b      	str	r3, [r7, #16]
	while (!uartRdy && cnt) {
 8004f06:	e00e      	b.n	8004f26 <Report+0x46>
		etim = HAL_GetTick();
 8004f08:	f002 fd98 	bl	8007a3c <HAL_GetTick>
 8004f0c:	6138      	str	r0, [r7, #16]
		if (etim - stim) {
 8004f0e:	693a      	ldr	r2, [r7, #16]
 8004f10:	6a3b      	ldr	r3, [r7, #32]
 8004f12:	429a      	cmp	r2, r3
 8004f14:	d007      	beq.n	8004f26 <Report+0x46>
			stim = HAL_GetTick();
 8004f16:	f002 fd91 	bl	8007a3c <HAL_GetTick>
 8004f1a:	6238      	str	r0, [r7, #32]
			cnt--;
 8004f1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f20:	3b01      	subs	r3, #1
 8004f22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (!uartRdy && cnt) {
 8004f26:	4b2b      	ldr	r3, [pc, #172]	; (8004fd4 <Report+0xf4>)
 8004f28:	781b      	ldrb	r3, [r3, #0]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d103      	bne.n	8004f36 <Report+0x56>
 8004f2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d1e8      	bne.n	8004f08 <Report+0x28>
		}
	}

	//if (buf) {
		*buf = '\0';
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	701a      	strb	r2, [r3, #0]
		int dl = 0;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	61fb      	str	r3, [r7, #28]
		if (addTime) {
 8004f40:	79fb      	ldrb	r3, [r7, #7]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d010      	beq.n	8004f68 <Report+0x88>
			dl = sec2str(buf);
 8004f46:	6978      	ldr	r0, [r7, #20]
 8004f48:	f7ff ff30 	bl	8004dac <sec2str>
 8004f4c:	61f8      	str	r0, [r7, #28]
			strcat(buf, " | ");
 8004f4e:	6978      	ldr	r0, [r7, #20]
 8004f50:	f7fb f93e 	bl	80001d0 <strlen>
 8004f54:	4603      	mov	r3, r0
 8004f56:	461a      	mov	r2, r3
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	4413      	add	r3, r2
 8004f5c:	4a1e      	ldr	r2, [pc, #120]	; (8004fd8 <Report+0xf8>)
 8004f5e:	6810      	ldr	r0, [r2, #0]
 8004f60:	6018      	str	r0, [r3, #0]
			dl += 3;
 8004f62:	69fb      	ldr	r3, [r7, #28]
 8004f64:	3303      	adds	r3, #3
 8004f66:	61fb      	str	r3, [r7, #28]
		}

		va_list args;
		va_start(args, fmt);
 8004f68:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004f6c:	60fb      	str	r3, [r7, #12]
		vsnprintf(buf + dl, len - dl, fmt, args);
 8004f6e:	69fb      	ldr	r3, [r7, #28]
 8004f70:	697a      	ldr	r2, [r7, #20]
 8004f72:	18d0      	adds	r0, r2, r3
 8004f74:	69fb      	ldr	r3, [r7, #28]
 8004f76:	69ba      	ldr	r2, [r7, #24]
 8004f78:	1ad1      	subs	r1, r2, r3
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f7e:	f00c fa4d 	bl	801141c <vsniprintf>

		uartRdy = false;
 8004f82:	4b14      	ldr	r3, [pc, #80]	; (8004fd4 <Report+0xf4>)
 8004f84:	2200      	movs	r2, #0
 8004f86:	701a      	strb	r2, [r3, #0]
		if (HAL_UART_Transmit_DMA(cmdPort, (uint8_t *)buf, strlen(buf)) != HAL_OK) devError |= devUART;
 8004f88:	4b14      	ldr	r3, [pc, #80]	; (8004fdc <Report+0xfc>)
 8004f8a:	681c      	ldr	r4, [r3, #0]
 8004f8c:	6978      	ldr	r0, [r7, #20]
 8004f8e:	f7fb f91f 	bl	80001d0 <strlen>
 8004f92:	4603      	mov	r3, r0
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	461a      	mov	r2, r3
 8004f98:	6979      	ldr	r1, [r7, #20]
 8004f9a:	4620      	mov	r0, r4
 8004f9c:	f009 f8e6 	bl	800e16c <HAL_UART_Transmit_DMA>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d006      	beq.n	8004fb4 <Report+0xd4>
 8004fa6:	4b0e      	ldr	r3, [pc, #56]	; (8004fe0 <Report+0x100>)
 8004fa8:	881b      	ldrh	r3, [r3, #0]
 8004faa:	f043 0302 	orr.w	r3, r3, #2
 8004fae:	b29a      	uxth	r2, r3
 8004fb0:	4b0b      	ldr	r3, [pc, #44]	; (8004fe0 <Report+0x100>)
 8004fb2:	801a      	strh	r2, [r3, #0]
		while (!uartRdy) {} //HAL_Delay(1)
 8004fb4:	bf00      	nop
 8004fb6:	4b07      	ldr	r3, [pc, #28]	; (8004fd4 <Report+0xf4>)
 8004fb8:	781b      	ldrb	r3, [r3, #0]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d0fb      	beq.n	8004fb6 <Report+0xd6>
	//	free(buf);
	//} else {
	//	devError |= devMEM;
	//}

}
 8004fbe:	bf00      	nop
 8004fc0:	bf00      	nop
 8004fc2:	3728      	adds	r7, #40	; 0x28
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8004fca:	b003      	add	sp, #12
 8004fcc:	4770      	bx	lr
 8004fce:	bf00      	nop
 8004fd0:	200013c8 	.word	0x200013c8
 8004fd4:	20000014 	.word	0x20000014
 8004fd8:	08014808 	.word	0x08014808
 8004fdc:	20000010 	.word	0x20000010
 8004fe0:	20001bc8 	.word	0x20001bc8

08004fe4 <HAL_TIM_PeriodElapsedCallback>:



//------------------------------------------------------------------------------------------
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004fe4:	b5b0      	push	{r4, r5, r7, lr}
 8004fe6:	b084      	sub	sp, #16
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM4) {
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a6c      	ldr	r2, [pc, #432]	; (80051a4 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d128      	bne.n	8005048 <HAL_TIM_PeriodElapsedCallback+0x64>
		msCounter++;//inc_msCounter();
 8004ff6:	4b6c      	ldr	r3, [pc, #432]	; (80051a8 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8004ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ffc:	1c54      	adds	r4, r2, #1
 8004ffe:	f143 0500 	adc.w	r5, r3, #0
 8005002:	4b69      	ldr	r3, [pc, #420]	; (80051a8 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8005004:	e9c3 4500 	strd	r4, r5, [r3]
		if (!(msCounter % _1s)) {// 1 seconda
 8005008:	4b67      	ldr	r3, [pc, #412]	; (80051a8 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 800500a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800500e:	f04f 0264 	mov.w	r2, #100	; 0x64
 8005012:	f04f 0300 	mov.w	r3, #0
 8005016:	f7fb fe87 	bl	8000d28 <__aeabi_uldivmod>
 800501a:	4313      	orrs	r3, r2
 800501c:	f040 80bd 	bne.w	800519a <HAL_TIM_PeriodElapsedCallback+0x1b6>
			secCounter++;
 8005020:	4b62      	ldr	r3, [pc, #392]	; (80051ac <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	3301      	adds	r3, #1
 8005026:	4a61      	ldr	r2, [pc, #388]	; (80051ac <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8005028:	6013      	str	r3, [r2, #0]
		  	HAL_GPIO_TogglePin(TIK_LED_GPIO_Port, TIK_LED_Pin);
 800502a:	2102      	movs	r1, #2
 800502c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005030:	f003 faf6 	bl	8008620 <HAL_GPIO_TogglePin>
#ifdef SET_DISPLAY
		  	if (startSec) putEvt(evt_Sec);
 8005034:	4b5e      	ldr	r3, [pc, #376]	; (80051b0 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8005036:	781b      	ldrb	r3, [r3, #0]
 8005038:	b2db      	uxtb	r3, r3
 800503a:	2b00      	cmp	r3, #0
 800503c:	f000 80ad 	beq.w	800519a <HAL_TIM_PeriodElapsedCallback+0x1b6>
 8005040:	2008      	movs	r0, #8
 8005042:	f7ff fb47 	bl	80046d4 <putEvt>
			break;
		}
		//
	}
#endif
}
 8005046:	e0a8      	b.n	800519a <HAL_TIM_PeriodElapsedCallback+0x1b6>
	if (htim->Instance == TIM6) {
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a59      	ldr	r2, [pc, #356]	; (80051b4 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 800504e:	4293      	cmp	r3, r2
 8005050:	f040 809a 	bne.w	8005188 <HAL_TIM_PeriodElapsedCallback+0x1a4>
		uint8_t irdata = RECIV_PIN; // пин для приёма
 8005054:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005058:	4857      	ldr	r0, [pc, #348]	; (80051b8 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 800505a:	f003 fab1 	bl	80085c0 <HAL_GPIO_ReadPin>
 800505e:	4603      	mov	r3, r0
 8005060:	73fb      	strb	r3, [r7, #15]
		irparams.timer++;  // One more 50uS tick
 8005062:	4b56      	ldr	r3, [pc, #344]	; (80051bc <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8005064:	885b      	ldrh	r3, [r3, #2]
 8005066:	b29b      	uxth	r3, r3
 8005068:	3301      	adds	r3, #1
 800506a:	b29a      	uxth	r2, r3
 800506c:	4b53      	ldr	r3, [pc, #332]	; (80051bc <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 800506e:	805a      	strh	r2, [r3, #2]
		if (irparams.rawlen >= RAWBUF) irparams.rcvstate = STATE_OVERFLOW;  // Buffer overflow
 8005070:	4b52      	ldr	r3, [pc, #328]	; (80051bc <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8005072:	785b      	ldrb	r3, [r3, #1]
		switch (irparams.rcvstate) {
 8005074:	4b51      	ldr	r3, [pc, #324]	; (80051bc <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8005076:	781b      	ldrb	r3, [r3, #0]
 8005078:	b2db      	uxtb	r3, r3
 800507a:	3b02      	subs	r3, #2
 800507c:	2b04      	cmp	r3, #4
 800507e:	f200 808c 	bhi.w	800519a <HAL_TIM_PeriodElapsedCallback+0x1b6>
 8005082:	a201      	add	r2, pc, #4	; (adr r2, 8005088 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8005084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005088:	0800509d 	.word	0x0800509d
 800508c:	080050f1 	.word	0x080050f1
 8005090:	08005125 	.word	0x08005125
 8005094:	0800516b 	.word	0x0800516b
 8005098:	08005179 	.word	0x08005179
				if (irdata == MARK) {
 800509c:	7bfb      	ldrb	r3, [r7, #15]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d174      	bne.n	800518c <HAL_TIM_PeriodElapsedCallback+0x1a8>
					if (irparams.timer < GAP_TICKS) { // Not big enough to be a gap.
 80050a2:	4b46      	ldr	r3, [pc, #280]	; (80051bc <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80050a4:	885b      	ldrh	r3, [r3, #2]
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	2b63      	cmp	r3, #99	; 0x63
 80050aa:	d803      	bhi.n	80050b4 <HAL_TIM_PeriodElapsedCallback+0xd0>
						irparams.timer = 0;
 80050ac:	4b43      	ldr	r3, [pc, #268]	; (80051bc <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80050ae:	2200      	movs	r2, #0
 80050b0:	805a      	strh	r2, [r3, #2]
			break;
 80050b2:	e06b      	b.n	800518c <HAL_TIM_PeriodElapsedCallback+0x1a8>
						irparams.overflow = 0;
 80050b4:	4b41      	ldr	r3, [pc, #260]	; (80051bc <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80050b6:	2200      	movs	r2, #0
 80050b8:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
						irparams.rawlen  = 0;
 80050bc:	4b3f      	ldr	r3, [pc, #252]	; (80051bc <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80050be:	2200      	movs	r2, #0
 80050c0:	705a      	strb	r2, [r3, #1]
						irparams.rawbuf[irparams.rawlen++] = irparams.timer;
 80050c2:	4b3e      	ldr	r3, [pc, #248]	; (80051bc <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80050c4:	785b      	ldrb	r3, [r3, #1]
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	1c5a      	adds	r2, r3, #1
 80050ca:	b2d1      	uxtb	r1, r2
 80050cc:	4a3b      	ldr	r2, [pc, #236]	; (80051bc <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80050ce:	7051      	strb	r1, [r2, #1]
 80050d0:	4618      	mov	r0, r3
 80050d2:	4b3a      	ldr	r3, [pc, #232]	; (80051bc <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80050d4:	885b      	ldrh	r3, [r3, #2]
 80050d6:	b299      	uxth	r1, r3
 80050d8:	4a38      	ldr	r2, [pc, #224]	; (80051bc <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80050da:	0043      	lsls	r3, r0, #1
 80050dc:	4413      	add	r3, r2
 80050de:	460a      	mov	r2, r1
 80050e0:	809a      	strh	r2, [r3, #4]
						irparams.timer = 0;
 80050e2:	4b36      	ldr	r3, [pc, #216]	; (80051bc <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80050e4:	2200      	movs	r2, #0
 80050e6:	805a      	strh	r2, [r3, #2]
						irparams.rcvstate = STATE_MARK;
 80050e8:	4b34      	ldr	r3, [pc, #208]	; (80051bc <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80050ea:	2203      	movs	r2, #3
 80050ec:	701a      	strb	r2, [r3, #0]
			break;
 80050ee:	e04d      	b.n	800518c <HAL_TIM_PeriodElapsedCallback+0x1a8>
				if (irdata == SPACE) {// Mark ended; Record time
 80050f0:	7bfb      	ldrb	r3, [r7, #15]
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d14c      	bne.n	8005190 <HAL_TIM_PeriodElapsedCallback+0x1ac>
					irparams.rawbuf[irparams.rawlen++] = irparams.timer;
 80050f6:	4b31      	ldr	r3, [pc, #196]	; (80051bc <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80050f8:	785b      	ldrb	r3, [r3, #1]
 80050fa:	b2db      	uxtb	r3, r3
 80050fc:	1c5a      	adds	r2, r3, #1
 80050fe:	b2d1      	uxtb	r1, r2
 8005100:	4a2e      	ldr	r2, [pc, #184]	; (80051bc <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8005102:	7051      	strb	r1, [r2, #1]
 8005104:	4618      	mov	r0, r3
 8005106:	4b2d      	ldr	r3, [pc, #180]	; (80051bc <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8005108:	885b      	ldrh	r3, [r3, #2]
 800510a:	b299      	uxth	r1, r3
 800510c:	4a2b      	ldr	r2, [pc, #172]	; (80051bc <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 800510e:	0043      	lsls	r3, r0, #1
 8005110:	4413      	add	r3, r2
 8005112:	460a      	mov	r2, r1
 8005114:	809a      	strh	r2, [r3, #4]
					irparams.timer = 0;
 8005116:	4b29      	ldr	r3, [pc, #164]	; (80051bc <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8005118:	2200      	movs	r2, #0
 800511a:	805a      	strh	r2, [r3, #2]
					irparams.rcvstate = STATE_SPACE;
 800511c:	4b27      	ldr	r3, [pc, #156]	; (80051bc <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 800511e:	2204      	movs	r2, #4
 8005120:	701a      	strb	r2, [r3, #0]
			break;
 8005122:	e035      	b.n	8005190 <HAL_TIM_PeriodElapsedCallback+0x1ac>
				if (irdata == MARK) {// Space just ended; Record time
 8005124:	7bfb      	ldrb	r3, [r7, #15]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d116      	bne.n	8005158 <HAL_TIM_PeriodElapsedCallback+0x174>
					irparams.rawbuf[irparams.rawlen++] = irparams.timer;
 800512a:	4b24      	ldr	r3, [pc, #144]	; (80051bc <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 800512c:	785b      	ldrb	r3, [r3, #1]
 800512e:	b2db      	uxtb	r3, r3
 8005130:	1c5a      	adds	r2, r3, #1
 8005132:	b2d1      	uxtb	r1, r2
 8005134:	4a21      	ldr	r2, [pc, #132]	; (80051bc <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8005136:	7051      	strb	r1, [r2, #1]
 8005138:	4618      	mov	r0, r3
 800513a:	4b20      	ldr	r3, [pc, #128]	; (80051bc <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 800513c:	885b      	ldrh	r3, [r3, #2]
 800513e:	b299      	uxth	r1, r3
 8005140:	4a1e      	ldr	r2, [pc, #120]	; (80051bc <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8005142:	0043      	lsls	r3, r0, #1
 8005144:	4413      	add	r3, r2
 8005146:	460a      	mov	r2, r1
 8005148:	809a      	strh	r2, [r3, #4]
					irparams.timer = 0;
 800514a:	4b1c      	ldr	r3, [pc, #112]	; (80051bc <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 800514c:	2200      	movs	r2, #0
 800514e:	805a      	strh	r2, [r3, #2]
					irparams.rcvstate = STATE_MARK;
 8005150:	4b1a      	ldr	r3, [pc, #104]	; (80051bc <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8005152:	2203      	movs	r2, #3
 8005154:	701a      	strb	r2, [r3, #0]
			break;
 8005156:	e01d      	b.n	8005194 <HAL_TIM_PeriodElapsedCallback+0x1b0>
				} else if (irparams.timer > GAP_TICKS) {// Space
 8005158:	4b18      	ldr	r3, [pc, #96]	; (80051bc <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 800515a:	885b      	ldrh	r3, [r3, #2]
 800515c:	b29b      	uxth	r3, r3
 800515e:	2b64      	cmp	r3, #100	; 0x64
 8005160:	d918      	bls.n	8005194 <HAL_TIM_PeriodElapsedCallback+0x1b0>
					irparams.rcvstate = STATE_STOP;
 8005162:	4b16      	ldr	r3, [pc, #88]	; (80051bc <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8005164:	2205      	movs	r2, #5
 8005166:	701a      	strb	r2, [r3, #0]
			break;
 8005168:	e014      	b.n	8005194 <HAL_TIM_PeriodElapsedCallback+0x1b0>
			 	if (irdata == MARK) irparams.timer = 0;  // Reset gap timer
 800516a:	7bfb      	ldrb	r3, [r7, #15]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d113      	bne.n	8005198 <HAL_TIM_PeriodElapsedCallback+0x1b4>
 8005170:	4b12      	ldr	r3, [pc, #72]	; (80051bc <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8005172:	2200      	movs	r2, #0
 8005174:	805a      	strh	r2, [r3, #2]
			break;
 8005176:	e00f      	b.n	8005198 <HAL_TIM_PeriodElapsedCallback+0x1b4>
				irparams.overflow = 1;
 8005178:	4b10      	ldr	r3, [pc, #64]	; (80051bc <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 800517a:	2201      	movs	r2, #1
 800517c:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				irparams.rcvstate = STATE_STOP;
 8005180:	4b0e      	ldr	r3, [pc, #56]	; (80051bc <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8005182:	2205      	movs	r2, #5
 8005184:	701a      	strb	r2, [r3, #0]
			break;
 8005186:	e008      	b.n	800519a <HAL_TIM_PeriodElapsedCallback+0x1b6>
	}
 8005188:	bf00      	nop
 800518a:	e006      	b.n	800519a <HAL_TIM_PeriodElapsedCallback+0x1b6>
			break;
 800518c:	bf00      	nop
 800518e:	e004      	b.n	800519a <HAL_TIM_PeriodElapsedCallback+0x1b6>
			break;
 8005190:	bf00      	nop
 8005192:	e002      	b.n	800519a <HAL_TIM_PeriodElapsedCallback+0x1b6>
			break;
 8005194:	bf00      	nop
 8005196:	e000      	b.n	800519a <HAL_TIM_PeriodElapsedCallback+0x1b6>
			break;
 8005198:	bf00      	nop
}
 800519a:	bf00      	nop
 800519c:	3710      	adds	r7, #16
 800519e:	46bd      	mov	sp, r7
 80051a0:	bdb0      	pop	{r4, r5, r7, pc}
 80051a2:	bf00      	nop
 80051a4:	40000800 	.word	0x40000800
 80051a8:	20001bd0 	.word	0x20001bd0
 80051ac:	20001bcc 	.word	0x20001bcc
 80051b0:	2000300c 	.word	0x2000300c
 80051b4:	40001000 	.word	0x40001000
 80051b8:	48000800 	.word	0x48000800
 80051bc:	20000454 	.word	0x20000454

080051c0 <HAL_UART_TxCpltCallback>:
//--------------------------------------------------------------------------------------------

//-------------------------------------------------------------------------------------------
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b083      	sub	sp, #12
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a0a      	ldr	r2, [pc, #40]	; (80051f8 <HAL_UART_TxCpltCallback+0x38>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d103      	bne.n	80051da <HAL_UART_TxCpltCallback+0x1a>
		uartRdy = 1;
 80051d2:	4b0a      	ldr	r3, [pc, #40]	; (80051fc <HAL_UART_TxCpltCallback+0x3c>)
 80051d4:	2201      	movs	r2, #1
 80051d6:	701a      	strb	r2, [r3, #0]
	else
	if (huart->Instance == USART3) {
		bleRdy = 1;
	}
#endif
}
 80051d8:	e007      	b.n	80051ea <HAL_UART_TxCpltCallback+0x2a>
	if (huart->Instance == USART3) {
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a08      	ldr	r2, [pc, #32]	; (8005200 <HAL_UART_TxCpltCallback+0x40>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d102      	bne.n	80051ea <HAL_UART_TxCpltCallback+0x2a>
		bleRdy = 1;
 80051e4:	4b07      	ldr	r3, [pc, #28]	; (8005204 <HAL_UART_TxCpltCallback+0x44>)
 80051e6:	2201      	movs	r2, #1
 80051e8:	701a      	strb	r2, [r3, #0]
}
 80051ea:	bf00      	nop
 80051ec:	370c      	adds	r7, #12
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr
 80051f6:	bf00      	nop
 80051f8:	40004400 	.word	0x40004400
 80051fc:	20000014 	.word	0x20000014
 8005200:	40004800 	.word	0x40004800
 8005204:	2000021c 	.word	0x2000021c

08005208 <HAL_UART_ErrorCallback>:
//-------------------------------------------------------------------------------------------
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005208:	b480      	push	{r7}
 800520a:	b083      	sub	sp, #12
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a0e      	ldr	r2, [pc, #56]	; (8005250 <HAL_UART_ErrorCallback+0x48>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d107      	bne.n	800522a <HAL_UART_ErrorCallback+0x22>
		devError |= devUART;
 800521a:	4b0e      	ldr	r3, [pc, #56]	; (8005254 <HAL_UART_ErrorCallback+0x4c>)
 800521c:	881b      	ldrh	r3, [r3, #0]
 800521e:	f043 0302 	orr.w	r3, r3, #2
 8005222:	b29a      	uxth	r2, r3
 8005224:	4b0b      	ldr	r3, [pc, #44]	; (8005254 <HAL_UART_ErrorCallback+0x4c>)
 8005226:	801a      	strh	r2, [r3, #0]
	else
	if (huart->Instance == USART3) {
		devError |= devBLE;
	}
#endif
}
 8005228:	e00b      	b.n	8005242 <HAL_UART_ErrorCallback+0x3a>
	if (huart->Instance == USART3) {
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a0a      	ldr	r2, [pc, #40]	; (8005258 <HAL_UART_ErrorCallback+0x50>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d106      	bne.n	8005242 <HAL_UART_ErrorCallback+0x3a>
		devError |= devBLE;
 8005234:	4b07      	ldr	r3, [pc, #28]	; (8005254 <HAL_UART_ErrorCallback+0x4c>)
 8005236:	881b      	ldrh	r3, [r3, #0]
 8005238:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800523c:	b29a      	uxth	r2, r3
 800523e:	4b05      	ldr	r3, [pc, #20]	; (8005254 <HAL_UART_ErrorCallback+0x4c>)
 8005240:	801a      	strh	r2, [r3, #0]
}
 8005242:	bf00      	nop
 8005244:	370c      	adds	r7, #12
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr
 800524e:	bf00      	nop
 8005250:	40004400 	.word	0x40004400
 8005254:	20001bc8 	.word	0x20001bc8
 8005258:	40004800 	.word	0x40004800

0800525c <HAL_UART_RxCpltCallback>:
//-------------------------------------------------------------------------------------------
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800525c:	b590      	push	{r4, r7, lr}
 800525e:	b091      	sub	sp, #68	; 0x44
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
#if defined(SET_BLE) || defined(SET_AUDIO)
	if (huart->Instance == USART3) {
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a80      	ldr	r2, [pc, #512]	; (800546c <HAL_UART_RxCpltCallback+0x210>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d178      	bne.n	8005360 <HAL_UART_RxCpltCallback+0x104>
		/*if ((rxbByte > 0x0D) && (rxbByte < 0x80)) {
			if (rxbByte >= 0x20) adone = 1;
			if (adone) rxbBuf[rxbInd++] = (char)rxbByte;
		}*/
		//if (adone) {
			rxbBuf[rxbInd++] = (char)rxbByte;
 800526e:	4b80      	ldr	r3, [pc, #512]	; (8005470 <HAL_UART_RxCpltCallback+0x214>)
 8005270:	881b      	ldrh	r3, [r3, #0]
 8005272:	1c5a      	adds	r2, r3, #1
 8005274:	b291      	uxth	r1, r2
 8005276:	4a7e      	ldr	r2, [pc, #504]	; (8005470 <HAL_UART_RxCpltCallback+0x214>)
 8005278:	8011      	strh	r1, [r2, #0]
 800527a:	461a      	mov	r2, r3
 800527c:	4b7d      	ldr	r3, [pc, #500]	; (8005474 <HAL_UART_RxCpltCallback+0x218>)
 800527e:	7819      	ldrb	r1, [r3, #0]
 8005280:	4b7d      	ldr	r3, [pc, #500]	; (8005478 <HAL_UART_RxCpltCallback+0x21c>)
 8005282:	5499      	strb	r1, [r3, r2]
			if (rxbByte == 0x0a) {// '\n'
 8005284:	4b7b      	ldr	r3, [pc, #492]	; (8005474 <HAL_UART_RxCpltCallback+0x218>)
 8005286:	781b      	ldrb	r3, [r3, #0]
 8005288:	2b0a      	cmp	r3, #10
 800528a:	d158      	bne.n	800533e <HAL_UART_RxCpltCallback+0xe2>
				rxbBuf[--rxbInd] = '\0';
 800528c:	4b78      	ldr	r3, [pc, #480]	; (8005470 <HAL_UART_RxCpltCallback+0x214>)
 800528e:	881b      	ldrh	r3, [r3, #0]
 8005290:	3b01      	subs	r3, #1
 8005292:	b29a      	uxth	r2, r3
 8005294:	4b76      	ldr	r3, [pc, #472]	; (8005470 <HAL_UART_RxCpltCallback+0x214>)
 8005296:	801a      	strh	r2, [r3, #0]
 8005298:	4b75      	ldr	r3, [pc, #468]	; (8005470 <HAL_UART_RxCpltCallback+0x214>)
 800529a:	881b      	ldrh	r3, [r3, #0]
 800529c:	461a      	mov	r2, r3
 800529e:	4b76      	ldr	r3, [pc, #472]	; (8005478 <HAL_UART_RxCpltCallback+0x21c>)
 80052a0:	2100      	movs	r1, #0
 80052a2:	5499      	strb	r1, [r3, r2]
				if (bleQueAckFlag) {
 80052a4:	4b75      	ldr	r3, [pc, #468]	; (800547c <HAL_UART_RxCpltCallback+0x220>)
 80052a6:	781b      	ldrb	r3, [r3, #0]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d03f      	beq.n	800532c <HAL_UART_RxCpltCallback+0xd0>
					int len = strlen(rxbBuf);
 80052ac:	4872      	ldr	r0, [pc, #456]	; (8005478 <HAL_UART_RxCpltCallback+0x21c>)
 80052ae:	f7fa ff8f 	bl	80001d0 <strlen>
 80052b2:	4603      	mov	r3, r0
 80052b4:	60fb      	str	r3, [r7, #12]
					// Блок помещает в очередь ответов на команду очередное сообщение от модуля BLE
					if (len > 1) {
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	dd37      	ble.n	800532c <HAL_UART_RxCpltCallback+0xd0>
						char *from = (char *)calloc(1, len + 1);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	3301      	adds	r3, #1
 80052c0:	4619      	mov	r1, r3
 80052c2:	2001      	movs	r0, #1
 80052c4:	f00a fae4 	bl	800f890 <calloc>
 80052c8:	4603      	mov	r3, r0
 80052ca:	60bb      	str	r3, [r7, #8]
						if (from) {
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d025      	beq.n	800531e <HAL_UART_RxCpltCallback+0xc2>
							strncpy(from, rxbBuf, len);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	461a      	mov	r2, r3
 80052d6:	4968      	ldr	r1, [pc, #416]	; (8005478 <HAL_UART_RxCpltCallback+0x21c>)
 80052d8:	68b8      	ldr	r0, [r7, #8]
 80052da:	f00b f98e 	bl	80105fa <strncpy>
							if (putRECQ(from, &bleQueAck) < 0) {
 80052de:	4968      	ldr	r1, [pc, #416]	; (8005480 <HAL_UART_RxCpltCallback+0x224>)
 80052e0:	68b8      	ldr	r0, [r7, #8]
 80052e2:	f7fc fef3 	bl	80020cc <putRECQ>
 80052e6:	4603      	mov	r3, r0
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	da0a      	bge.n	8005302 <HAL_UART_RxCpltCallback+0xa6>
								devError |= devQUE;
 80052ec:	4b65      	ldr	r3, [pc, #404]	; (8005484 <HAL_UART_RxCpltCallback+0x228>)
 80052ee:	881b      	ldrh	r3, [r3, #0]
 80052f0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80052f4:	b29a      	uxth	r2, r3
 80052f6:	4b63      	ldr	r3, [pc, #396]	; (8005484 <HAL_UART_RxCpltCallback+0x228>)
 80052f8:	801a      	strh	r2, [r3, #0]
								free(from);
 80052fa:	68b8      	ldr	r0, [r7, #8]
 80052fc:	f00a fbae 	bl	800fa5c <free>
 8005300:	e014      	b.n	800532c <HAL_UART_RxCpltCallback+0xd0>
							} else {
								if (devError & devQUE) devError &= ~devQUE;
 8005302:	4b60      	ldr	r3, [pc, #384]	; (8005484 <HAL_UART_RxCpltCallback+0x228>)
 8005304:	881b      	ldrh	r3, [r3, #0]
 8005306:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800530a:	2b00      	cmp	r3, #0
 800530c:	d00e      	beq.n	800532c <HAL_UART_RxCpltCallback+0xd0>
 800530e:	4b5d      	ldr	r3, [pc, #372]	; (8005484 <HAL_UART_RxCpltCallback+0x228>)
 8005310:	881b      	ldrh	r3, [r3, #0]
 8005312:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005316:	b29a      	uxth	r2, r3
 8005318:	4b5a      	ldr	r3, [pc, #360]	; (8005484 <HAL_UART_RxCpltCallback+0x228>)
 800531a:	801a      	strh	r2, [r3, #0]
 800531c:	e006      	b.n	800532c <HAL_UART_RxCpltCallback+0xd0>
							}
						} else {
							devError |= devMEM;
 800531e:	4b59      	ldr	r3, [pc, #356]	; (8005484 <HAL_UART_RxCpltCallback+0x228>)
 8005320:	881b      	ldrh	r3, [r3, #0]
 8005322:	f043 0304 	orr.w	r3, r3, #4
 8005326:	b29a      	uxth	r2, r3
 8005328:	4b56      	ldr	r3, [pc, #344]	; (8005484 <HAL_UART_RxCpltCallback+0x228>)
 800532a:	801a      	strh	r2, [r3, #0]
						}
					}
					//-----------------------------------------------------------------------------
				}
				rxbInd = 0;
 800532c:	4b50      	ldr	r3, [pc, #320]	; (8005470 <HAL_UART_RxCpltCallback+0x214>)
 800532e:	2200      	movs	r2, #0
 8005330:	801a      	strh	r2, [r3, #0]
				//adone = 0;
				memset(rxbBuf, 0, sizeof(rxbBuf));
 8005332:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005336:	2100      	movs	r1, #0
 8005338:	484f      	ldr	r0, [pc, #316]	; (8005478 <HAL_UART_RxCpltCallback+0x21c>)
 800533a:	f00a fba5 	bl	800fa88 <memset>
			}
		//}
		//
		if (HAL_UART_Receive_IT(huart, &rxbByte, 1) != HAL_OK) devError |= devBLE;
 800533e:	2201      	movs	r2, #1
 8005340:	494c      	ldr	r1, [pc, #304]	; (8005474 <HAL_UART_RxCpltCallback+0x218>)
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f008 febc 	bl	800e0c0 <HAL_UART_Receive_IT>
 8005348:	4603      	mov	r3, r0
 800534a:	2b00      	cmp	r3, #0
 800534c:	f000 82d2 	beq.w	80058f4 <HAL_UART_RxCpltCallback+0x698>
 8005350:	4b4c      	ldr	r3, [pc, #304]	; (8005484 <HAL_UART_RxCpltCallback+0x228>)
 8005352:	881b      	ldrh	r3, [r3, #0]
 8005354:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005358:	b29a      	uxth	r2, r3
 800535a:	4b4a      	ldr	r3, [pc, #296]	; (8005484 <HAL_UART_RxCpltCallback+0x228>)
 800535c:	801a      	strh	r2, [r3, #0]
			*rxBuf = '\0';
		}

		if (HAL_UART_Receive_IT(huart, &rxByte, 1) != HAL_OK) devError |= devUART;
	}
}
 800535e:	e2c9      	b.n	80058f4 <HAL_UART_RxCpltCallback+0x698>
	if (huart->Instance == USART2) {
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a48      	ldr	r2, [pc, #288]	; (8005488 <HAL_UART_RxCpltCallback+0x22c>)
 8005366:	4293      	cmp	r3, r2
 8005368:	f040 82c4 	bne.w	80058f4 <HAL_UART_RxCpltCallback+0x698>
		rxBuf[rxInd++] = (char)rxByte;
 800536c:	4b47      	ldr	r3, [pc, #284]	; (800548c <HAL_UART_RxCpltCallback+0x230>)
 800536e:	881b      	ldrh	r3, [r3, #0]
 8005370:	1c5a      	adds	r2, r3, #1
 8005372:	b291      	uxth	r1, r2
 8005374:	4a45      	ldr	r2, [pc, #276]	; (800548c <HAL_UART_RxCpltCallback+0x230>)
 8005376:	8011      	strh	r1, [r2, #0]
 8005378:	461a      	mov	r2, r3
 800537a:	4b45      	ldr	r3, [pc, #276]	; (8005490 <HAL_UART_RxCpltCallback+0x234>)
 800537c:	7819      	ldrb	r1, [r3, #0]
 800537e:	4b45      	ldr	r3, [pc, #276]	; (8005494 <HAL_UART_RxCpltCallback+0x238>)
 8005380:	5499      	strb	r1, [r3, r2]
		if (rxByte == 0x0a) {//end of line
 8005382:	4b43      	ldr	r3, [pc, #268]	; (8005490 <HAL_UART_RxCpltCallback+0x234>)
 8005384:	781b      	ldrb	r3, [r3, #0]
 8005386:	2b0a      	cmp	r3, #10
 8005388:	f040 82a5 	bne.w	80058d6 <HAL_UART_RxCpltCallback+0x67a>
			rxBuf[--rxInd] = '\0';
 800538c:	4b3f      	ldr	r3, [pc, #252]	; (800548c <HAL_UART_RxCpltCallback+0x230>)
 800538e:	881b      	ldrh	r3, [r3, #0]
 8005390:	3b01      	subs	r3, #1
 8005392:	b29a      	uxth	r2, r3
 8005394:	4b3d      	ldr	r3, [pc, #244]	; (800548c <HAL_UART_RxCpltCallback+0x230>)
 8005396:	801a      	strh	r2, [r3, #0]
 8005398:	4b3c      	ldr	r3, [pc, #240]	; (800548c <HAL_UART_RxCpltCallback+0x230>)
 800539a:	881b      	ldrh	r3, [r3, #0]
 800539c:	461a      	mov	r2, r3
 800539e:	4b3d      	ldr	r3, [pc, #244]	; (8005494 <HAL_UART_RxCpltCallback+0x238>)
 80053a0:	2100      	movs	r1, #0
 80053a2:	5499      	strb	r1, [r3, r2]
			int i, ev = -1;
 80053a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80053a8:	63bb      	str	r3, [r7, #56]	; 0x38
			if (strlen(rxBuf) >= 2) {
 80053aa:	483a      	ldr	r0, [pc, #232]	; (8005494 <HAL_UART_RxCpltCallback+0x238>)
 80053ac:	f7fa ff10 	bl	80001d0 <strlen>
 80053b0:	4603      	mov	r3, r0
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	f240 8289 	bls.w	80058ca <HAL_UART_RxCpltCallback+0x66e>
				if ( (strstr(rxBuf, "at")) || (strstr(rxBuf, "AT")) ) {
 80053b8:	4937      	ldr	r1, [pc, #220]	; (8005498 <HAL_UART_RxCpltCallback+0x23c>)
 80053ba:	4836      	ldr	r0, [pc, #216]	; (8005494 <HAL_UART_RxCpltCallback+0x238>)
 80053bc:	f00b f930 	bl	8010620 <strstr>
 80053c0:	4603      	mov	r3, r0
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d106      	bne.n	80053d4 <HAL_UART_RxCpltCallback+0x178>
 80053c6:	4935      	ldr	r1, [pc, #212]	; (800549c <HAL_UART_RxCpltCallback+0x240>)
 80053c8:	4832      	ldr	r0, [pc, #200]	; (8005494 <HAL_UART_RxCpltCallback+0x238>)
 80053ca:	f00b f929 	bl	8010620 <strstr>
 80053ce:	4603      	mov	r3, r0
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d047      	beq.n	8005464 <HAL_UART_RxCpltCallback+0x208>
					if (bleQueCmdFlag) {
 80053d4:	4b32      	ldr	r3, [pc, #200]	; (80054a0 <HAL_UART_RxCpltCallback+0x244>)
 80053d6:	781b      	ldrb	r3, [r3, #0]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d03f      	beq.n	800545c <HAL_UART_RxCpltCallback+0x200>
						int len = strlen(rxBuf);
 80053dc:	482d      	ldr	r0, [pc, #180]	; (8005494 <HAL_UART_RxCpltCallback+0x238>)
 80053de:	f7fa fef7 	bl	80001d0 <strlen>
 80053e2:	4603      	mov	r3, r0
 80053e4:	617b      	str	r3, [r7, #20]
						char *to = (char *)calloc(1, len + 3);
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	3303      	adds	r3, #3
 80053ea:	4619      	mov	r1, r3
 80053ec:	2001      	movs	r0, #1
 80053ee:	f00a fa4f 	bl	800f890 <calloc>
 80053f2:	4603      	mov	r3, r0
 80053f4:	613b      	str	r3, [r7, #16]
						if (to) {
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d028      	beq.n	800544e <HAL_UART_RxCpltCallback+0x1f2>
							memcpy(to, rxBuf, len);
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	461a      	mov	r2, r3
 8005400:	4924      	ldr	r1, [pc, #144]	; (8005494 <HAL_UART_RxCpltCallback+0x238>)
 8005402:	6938      	ldr	r0, [r7, #16]
 8005404:	f00a fb32 	bl	800fa6c <memcpy>
							toUppers(to);
 8005408:	6938      	ldr	r0, [r7, #16]
 800540a:	f7ff fc3f 	bl	8004c8c <toUppers>
							if (putRECQ(to, &bleQueCmd) < 0) {
 800540e:	4925      	ldr	r1, [pc, #148]	; (80054a4 <HAL_UART_RxCpltCallback+0x248>)
 8005410:	6938      	ldr	r0, [r7, #16]
 8005412:	f7fc fe5b 	bl	80020cc <putRECQ>
 8005416:	4603      	mov	r3, r0
 8005418:	2b00      	cmp	r3, #0
 800541a:	da0a      	bge.n	8005432 <HAL_UART_RxCpltCallback+0x1d6>
								devError |= devQUE;
 800541c:	4b19      	ldr	r3, [pc, #100]	; (8005484 <HAL_UART_RxCpltCallback+0x228>)
 800541e:	881b      	ldrh	r3, [r3, #0]
 8005420:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005424:	b29a      	uxth	r2, r3
 8005426:	4b17      	ldr	r3, [pc, #92]	; (8005484 <HAL_UART_RxCpltCallback+0x228>)
 8005428:	801a      	strh	r2, [r3, #0]
								free(to);
 800542a:	6938      	ldr	r0, [r7, #16]
 800542c:	f00a fb16 	bl	800fa5c <free>
 8005430:	e014      	b.n	800545c <HAL_UART_RxCpltCallback+0x200>
								if (devError & devQUE) devError &= ~devQUE;
 8005432:	4b14      	ldr	r3, [pc, #80]	; (8005484 <HAL_UART_RxCpltCallback+0x228>)
 8005434:	881b      	ldrh	r3, [r3, #0]
 8005436:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800543a:	2b00      	cmp	r3, #0
 800543c:	d00e      	beq.n	800545c <HAL_UART_RxCpltCallback+0x200>
 800543e:	4b11      	ldr	r3, [pc, #68]	; (8005484 <HAL_UART_RxCpltCallback+0x228>)
 8005440:	881b      	ldrh	r3, [r3, #0]
 8005442:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005446:	b29a      	uxth	r2, r3
 8005448:	4b0e      	ldr	r3, [pc, #56]	; (8005484 <HAL_UART_RxCpltCallback+0x228>)
 800544a:	801a      	strh	r2, [r3, #0]
 800544c:	e006      	b.n	800545c <HAL_UART_RxCpltCallback+0x200>
							devError |= devMEM;
 800544e:	4b0d      	ldr	r3, [pc, #52]	; (8005484 <HAL_UART_RxCpltCallback+0x228>)
 8005450:	881b      	ldrh	r3, [r3, #0]
 8005452:	f043 0304 	orr.w	r3, r3, #4
 8005456:	b29a      	uxth	r2, r3
 8005458:	4b0a      	ldr	r3, [pc, #40]	; (8005484 <HAL_UART_RxCpltCallback+0x228>)
 800545a:	801a      	strh	r2, [r3, #0]
					ev = -2;
 800545c:	f06f 0301 	mvn.w	r3, #1
 8005460:	63bb      	str	r3, [r7, #56]	; 0x38
 8005462:	e225      	b.n	80058b0 <HAL_UART_RxCpltCallback+0x654>
					for (i = 0; i < MAX_CMDS; i++) {
 8005464:	2300      	movs	r3, #0
 8005466:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005468:	e21c      	b.n	80058a4 <HAL_UART_RxCpltCallback+0x648>
 800546a:	bf00      	nop
 800546c:	40004800 	.word	0x40004800
 8005470:	200033bc 	.word	0x200033bc
 8005474:	200033ba 	.word	0x200033ba
 8005478:	200033c0 	.word	0x200033c0
 800547c:	20003767 	.word	0x20003767
 8005480:	200036c0 	.word	0x200036c0
 8005484:	20001bc8 	.word	0x20001bc8
 8005488:	40004400 	.word	0x40004400
 800548c:	20001bda 	.word	0x20001bda
 8005490:	20001bd8 	.word	0x20001bd8
 8005494:	20001bdc 	.word	0x20001bdc
 8005498:	0801480c 	.word	0x0801480c
 800549c:	08014810 	.word	0x08014810
 80054a0:	20003768 	.word	0x20003768
 80054a4:	20003714 	.word	0x20003714
						if (!strncmp(rxBuf, s_cmds[i], strlen(s_cmds[i]))) {
 80054a8:	4aad      	ldr	r2, [pc, #692]	; (8005760 <HAL_UART_RxCpltCallback+0x504>)
 80054aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054ac:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80054b0:	4aab      	ldr	r2, [pc, #684]	; (8005760 <HAL_UART_RxCpltCallback+0x504>)
 80054b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054b8:	4618      	mov	r0, r3
 80054ba:	f7fa fe89 	bl	80001d0 <strlen>
 80054be:	4603      	mov	r3, r0
 80054c0:	461a      	mov	r2, r3
 80054c2:	4621      	mov	r1, r4
 80054c4:	48a7      	ldr	r0, [pc, #668]	; (8005764 <HAL_UART_RxCpltCallback+0x508>)
 80054c6:	f00b f884 	bl	80105d2 <strncmp>
 80054ca:	4603      	mov	r3, r0
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	f040 81e6 	bne.w	800589e <HAL_UART_RxCpltCallback+0x642>
							char *uk = rxBuf + strlen(s_cmds[i]);
 80054d2:	4aa3      	ldr	r2, [pc, #652]	; (8005760 <HAL_UART_RxCpltCallback+0x504>)
 80054d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054da:	4618      	mov	r0, r3
 80054dc:	f7fa fe78 	bl	80001d0 <strlen>
 80054e0:	4603      	mov	r3, r0
 80054e2:	4aa0      	ldr	r2, [pc, #640]	; (8005764 <HAL_UART_RxCpltCallback+0x508>)
 80054e4:	4413      	add	r3, r2
 80054e6:	633b      	str	r3, [r7, #48]	; 0x30
							ev = -1;
 80054e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80054ec:	63bb      	str	r3, [r7, #56]	; 0x38
							switch (i) {
 80054ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054f0:	2b17      	cmp	r3, #23
 80054f2:	f200 81dc 	bhi.w	80058ae <HAL_UART_RxCpltCallback+0x652>
 80054f6:	a201      	add	r2, pc, #4	; (adr r2, 80054fc <HAL_UART_RxCpltCallback+0x2a0>)
 80054f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054fc:	08005697 	.word	0x08005697
 8005500:	08005697 	.word	0x08005697
 8005504:	0800569d 	.word	0x0800569d
 8005508:	080058af 	.word	0x080058af
 800550c:	080056ef 	.word	0x080056ef
 8005510:	080056ef 	.word	0x080056ef
 8005514:	08005841 	.word	0x08005841
 8005518:	080057a5 	.word	0x080057a5
 800551c:	080058af 	.word	0x080058af
 8005520:	08005697 	.word	0x08005697
 8005524:	08005697 	.word	0x08005697
 8005528:	08005655 	.word	0x08005655
 800552c:	08005611 	.word	0x08005611
 8005530:	08005589 	.word	0x08005589
 8005534:	08005697 	.word	0x08005697
 8005538:	080055f3 	.word	0x080055f3
 800553c:	08005655 	.word	0x08005655
 8005540:	0800555d 	.word	0x0800555d
 8005544:	08005697 	.word	0x08005697
 8005548:	08005697 	.word	0x08005697
 800554c:	080058af 	.word	0x080058af
 8005550:	08005697 	.word	0x08005697
 8005554:	080058af 	.word	0x080058af
 8005558:	08005697 	.word	0x08005697
									if (strlen(uk) >= 1) {
 800555c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	2b00      	cmp	r3, #0
 8005562:	f000 818a 	beq.w	800587a <HAL_UART_RxCpltCallback+0x61e>
										newBand = atol(uk);
 8005566:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005568:	f00a f98d 	bl	800f886 <atol>
 800556c:	4603      	mov	r3, r0
 800556e:	b2da      	uxtb	r2, r3
 8005570:	4b7d      	ldr	r3, [pc, #500]	; (8005768 <HAL_UART_RxCpltCallback+0x50c>)
 8005572:	701a      	strb	r2, [r3, #0]
										if (newBand != Band) {
 8005574:	4b7c      	ldr	r3, [pc, #496]	; (8005768 <HAL_UART_RxCpltCallback+0x50c>)
 8005576:	781a      	ldrb	r2, [r3, #0]
 8005578:	4b7c      	ldr	r3, [pc, #496]	; (800576c <HAL_UART_RxCpltCallback+0x510>)
 800557a:	781b      	ldrb	r3, [r3, #0]
 800557c:	429a      	cmp	r2, r3
 800557e:	f000 817c 	beq.w	800587a <HAL_UART_RxCpltCallback+0x61e>
											ev = i;
 8005582:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005584:	63bb      	str	r3, [r7, #56]	; 0x38
								break;
 8005586:	e178      	b.n	800587a <HAL_UART_RxCpltCallback+0x61e>
									if (strlen(uk) >= 1) {
 8005588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800558a:	781b      	ldrb	r3, [r3, #0]
 800558c:	2b00      	cmp	r3, #0
 800558e:	f000 8176 	beq.w	800587e <HAL_UART_RxCpltCallback+0x622>
										uint8_t nv = Volume;
 8005592:	4b77      	ldr	r3, [pc, #476]	; (8005770 <HAL_UART_RxCpltCallback+0x514>)
 8005594:	781b      	ldrb	r3, [r3, #0]
 8005596:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
										if (strstr(uk, "up")) {
 800559a:	4976      	ldr	r1, [pc, #472]	; (8005774 <HAL_UART_RxCpltCallback+0x518>)
 800559c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800559e:	f00b f83f 	bl	8010620 <strstr>
 80055a2:	4603      	mov	r3, r0
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d005      	beq.n	80055b4 <HAL_UART_RxCpltCallback+0x358>
											nv++;
 80055a8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80055ac:	3301      	adds	r3, #1
 80055ae:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80055b2:	e012      	b.n	80055da <HAL_UART_RxCpltCallback+0x37e>
										} else if (strstr(uk, "down")) {
 80055b4:	4970      	ldr	r1, [pc, #448]	; (8005778 <HAL_UART_RxCpltCallback+0x51c>)
 80055b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80055b8:	f00b f832 	bl	8010620 <strstr>
 80055bc:	4603      	mov	r3, r0
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d005      	beq.n	80055ce <HAL_UART_RxCpltCallback+0x372>
											nv--;
 80055c2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80055c6:	3b01      	subs	r3, #1
 80055c8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80055cc:	e005      	b.n	80055da <HAL_UART_RxCpltCallback+0x37e>
											nv = (uint8_t)atol(uk);
 80055ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80055d0:	f00a f959 	bl	800f886 <atol>
 80055d4:	4603      	mov	r3, r0
 80055d6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
										if ((nv >= 0) && (nv <= 15)) {
 80055da:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80055de:	2b0f      	cmp	r3, #15
 80055e0:	f200 814d 	bhi.w	800587e <HAL_UART_RxCpltCallback+0x622>
											newVolume = nv;
 80055e4:	4a65      	ldr	r2, [pc, #404]	; (800577c <HAL_UART_RxCpltCallback+0x520>)
 80055e6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80055ea:	7013      	strb	r3, [r2, #0]
											ev = i;
 80055ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055ee:	63bb      	str	r3, [r7, #56]	; 0x38
								break;
 80055f0:	e145      	b.n	800587e <HAL_UART_RxCpltCallback+0x622>
									if (strlen(uk) >= 1) {
 80055f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f4:	781b      	ldrb	r3, [r3, #0]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	f000 8143 	beq.w	8005882 <HAL_UART_RxCpltCallback+0x626>
										newBassBoost = (uint8_t)atol(uk);
 80055fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80055fe:	f00a f942 	bl	800f886 <atol>
 8005602:	4603      	mov	r3, r0
 8005604:	b2da      	uxtb	r2, r3
 8005606:	4b5e      	ldr	r3, [pc, #376]	; (8005780 <HAL_UART_RxCpltCallback+0x524>)
 8005608:	701a      	strb	r2, [r3, #0]
										ev = i;
 800560a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800560c:	63bb      	str	r3, [r7, #56]	; 0x38
								break;
 800560e:	e138      	b.n	8005882 <HAL_UART_RxCpltCallback+0x626>
									if (strlen(uk) >= 2) {
 8005610:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005612:	f7fa fddd 	bl	80001d0 <strlen>
 8005616:	4603      	mov	r3, r0
 8005618:	2b01      	cmp	r3, #1
 800561a:	f240 8134 	bls.w	8005886 <HAL_UART_RxCpltCallback+0x62a>
										newFreq = (float)atof(uk);
 800561e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005620:	f00a f92a 	bl	800f878 <atof>
 8005624:	ec53 2b10 	vmov	r2, r3, d0
 8005628:	4610      	mov	r0, r2
 800562a:	4619      	mov	r1, r3
 800562c:	f7fb fadc 	bl	8000be8 <__aeabi_d2f>
 8005630:	4603      	mov	r3, r0
 8005632:	4a54      	ldr	r2, [pc, #336]	; (8005784 <HAL_UART_RxCpltCallback+0x528>)
 8005634:	6013      	str	r3, [r2, #0]
										if (newFreq != Freq) {
 8005636:	4b53      	ldr	r3, [pc, #332]	; (8005784 <HAL_UART_RxCpltCallback+0x528>)
 8005638:	ed93 7a00 	vldr	s14, [r3]
 800563c:	4b52      	ldr	r3, [pc, #328]	; (8005788 <HAL_UART_RxCpltCallback+0x52c>)
 800563e:	edd3 7a00 	vldr	s15, [r3]
 8005642:	eeb4 7a67 	vcmp.f32	s14, s15
 8005646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800564a:	f000 811c 	beq.w	8005886 <HAL_UART_RxCpltCallback+0x62a>
											ev = i;
 800564e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005650:	63bb      	str	r3, [r7, #56]	; 0x38
								break;
 8005652:	e118      	b.n	8005886 <HAL_UART_RxCpltCallback+0x62a>
									seek_up = 1;
 8005654:	4b4d      	ldr	r3, [pc, #308]	; (800578c <HAL_UART_RxCpltCallback+0x530>)
 8005656:	2201      	movs	r2, #1
 8005658:	701a      	strb	r2, [r3, #0]
									ev = i;
 800565a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800565c:	63bb      	str	r3, [r7, #56]	; 0x38
									char *uki = strchr(uk, ':');
 800565e:	213a      	movs	r1, #58	; 0x3a
 8005660:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005662:	f00a ffa9 	bl	80105b8 <strchr>
 8005666:	62f8      	str	r0, [r7, #44]	; 0x2c
									if (uki) {
 8005668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800566a:	2b00      	cmp	r3, #0
 800566c:	f000 810d 	beq.w	800588a <HAL_UART_RxCpltCallback+0x62e>
										if ((*(char *)(uki + 1) == '0') || strstr(uki + 1, "down")) seek_up = 0;
 8005670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005672:	3301      	adds	r3, #1
 8005674:	781b      	ldrb	r3, [r3, #0]
 8005676:	2b30      	cmp	r3, #48	; 0x30
 8005678:	d009      	beq.n	800568e <HAL_UART_RxCpltCallback+0x432>
 800567a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800567c:	3301      	adds	r3, #1
 800567e:	493e      	ldr	r1, [pc, #248]	; (8005778 <HAL_UART_RxCpltCallback+0x51c>)
 8005680:	4618      	mov	r0, r3
 8005682:	f00a ffcd 	bl	8010620 <strstr>
 8005686:	4603      	mov	r3, r0
 8005688:	2b00      	cmp	r3, #0
 800568a:	f000 80fe 	beq.w	800588a <HAL_UART_RxCpltCallback+0x62e>
 800568e:	4b3f      	ldr	r3, [pc, #252]	; (800578c <HAL_UART_RxCpltCallback+0x530>)
 8005690:	2200      	movs	r2, #0
 8005692:	701a      	strb	r2, [r3, #0]
								break;
 8005694:	e0f9      	b.n	800588a <HAL_UART_RxCpltCallback+0x62e>
									ev = i;
 8005696:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005698:	63bb      	str	r3, [r7, #56]	; 0x38
								break;
 800569a:	e0ff      	b.n	800589c <HAL_UART_RxCpltCallback+0x640>
									if (strlen(uk) >= 10) {
 800569c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800569e:	f7fa fd97 	bl	80001d0 <strlen>
 80056a2:	4603      	mov	r3, r0
 80056a4:	2b09      	cmp	r3, #9
 80056a6:	f240 80f2 	bls.w	800588e <HAL_UART_RxCpltCallback+0x632>
										char *uki = strchr(uk, ':');
 80056aa:	213a      	movs	r1, #58	; 0x3a
 80056ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80056ae:	f00a ff83 	bl	80105b8 <strchr>
 80056b2:	61b8      	str	r0, [r7, #24]
										if (uki) {
 80056b4:	69bb      	ldr	r3, [r7, #24]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d00c      	beq.n	80056d4 <HAL_UART_RxCpltCallback+0x478>
											tZone = (uint8_t)atol(uki + 1);
 80056ba:	69bb      	ldr	r3, [r7, #24]
 80056bc:	3301      	adds	r3, #1
 80056be:	4618      	mov	r0, r3
 80056c0:	f00a f8e1 	bl	800f886 <atol>
 80056c4:	4603      	mov	r3, r0
 80056c6:	b2da      	uxtb	r2, r3
 80056c8:	4b31      	ldr	r3, [pc, #196]	; (8005790 <HAL_UART_RxCpltCallback+0x534>)
 80056ca:	701a      	strb	r2, [r3, #0]
											*uki = '\0';
 80056cc:	69bb      	ldr	r3, [r7, #24]
 80056ce:	2200      	movs	r2, #0
 80056d0:	701a      	strb	r2, [r3, #0]
 80056d2:	e002      	b.n	80056da <HAL_UART_RxCpltCallback+0x47e>
											tZone = 0;
 80056d4:	4b2e      	ldr	r3, [pc, #184]	; (8005790 <HAL_UART_RxCpltCallback+0x534>)
 80056d6:	2200      	movs	r2, #0
 80056d8:	701a      	strb	r2, [r3, #0]
										epoch = (uint32_t)atol(uk);
 80056da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80056dc:	f00a f8d3 	bl	800f886 <atol>
 80056e0:	4603      	mov	r3, r0
 80056e2:	461a      	mov	r2, r3
 80056e4:	4b2b      	ldr	r3, [pc, #172]	; (8005794 <HAL_UART_RxCpltCallback+0x538>)
 80056e6:	601a      	str	r2, [r3, #0]
										ev = i;
 80056e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056ea:	63bb      	str	r3, [r7, #56]	; 0x38
								break;
 80056ec:	e0cf      	b.n	800588e <HAL_UART_RxCpltCallback+0x632>
									if (i == cmdsRead) cmd_sector = cmdsRead;
 80056ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056f0:	2b04      	cmp	r3, #4
 80056f2:	d103      	bne.n	80056fc <HAL_UART_RxCpltCallback+0x4a0>
 80056f4:	4b28      	ldr	r3, [pc, #160]	; (8005798 <HAL_UART_RxCpltCallback+0x53c>)
 80056f6:	2204      	movs	r2, #4
 80056f8:	601a      	str	r2, [r3, #0]
 80056fa:	e002      	b.n	8005702 <HAL_UART_RxCpltCallback+0x4a6>
												  else cmd_sector = cmdsErase;
 80056fc:	4b26      	ldr	r3, [pc, #152]	; (8005798 <HAL_UART_RxCpltCallback+0x53c>)
 80056fe:	2205      	movs	r2, #5
 8005700:	601a      	str	r2, [r3, #0]
									if (*uk == ':') {
 8005702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005704:	781b      	ldrb	r3, [r3, #0]
 8005706:	2b3a      	cmp	r3, #58	; 0x3a
 8005708:	f040 80c3 	bne.w	8005892 <HAL_UART_RxCpltCallback+0x636>
										int sek = atoi(++uk);
 800570c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800570e:	3301      	adds	r3, #1
 8005710:	633b      	str	r3, [r7, #48]	; 0x30
 8005712:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005714:	f00a f8b3 	bl	800f87e <atoi>
 8005718:	61f8      	str	r0, [r7, #28]
										if ( ((sek >= 0) && (sek < W25qxx_getSectorCount())) || (sek == -1) ) {
 800571a:	69fb      	ldr	r3, [r7, #28]
 800571c:	2b00      	cmp	r3, #0
 800571e:	db05      	blt.n	800572c <HAL_UART_RxCpltCallback+0x4d0>
 8005720:	f001 fd70 	bl	8007204 <W25qxx_getSectorCount>
 8005724:	4602      	mov	r2, r0
 8005726:	69fb      	ldr	r3, [r7, #28]
 8005728:	429a      	cmp	r2, r3
 800572a:	d804      	bhi.n	8005736 <HAL_UART_RxCpltCallback+0x4da>
 800572c:	69fb      	ldr	r3, [r7, #28]
 800572e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005732:	f040 80ae 	bne.w	8005892 <HAL_UART_RxCpltCallback+0x636>
											adr_sector = sek;
 8005736:	4a19      	ldr	r2, [pc, #100]	; (800579c <HAL_UART_RxCpltCallback+0x540>)
 8005738:	69fb      	ldr	r3, [r7, #28]
 800573a:	6013      	str	r3, [r2, #0]
											offset_sector = 0;
 800573c:	4b18      	ldr	r3, [pc, #96]	; (80057a0 <HAL_UART_RxCpltCallback+0x544>)
 800573e:	2200      	movs	r2, #0
 8005740:	601a      	str	r2, [r3, #0]
											if (sek == -1) {
 8005742:	69fb      	ldr	r3, [r7, #28]
 8005744:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005748:	d107      	bne.n	800575a <HAL_UART_RxCpltCallback+0x4fe>
												if (cmd_sector == cmdsErase) ev = i;
 800574a:	4b13      	ldr	r3, [pc, #76]	; (8005798 <HAL_UART_RxCpltCallback+0x53c>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	2b05      	cmp	r3, #5
 8005750:	f040 809f 	bne.w	8005892 <HAL_UART_RxCpltCallback+0x636>
 8005754:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005756:	63bb      	str	r3, [r7, #56]	; 0x38
								break;
 8005758:	e09b      	b.n	8005892 <HAL_UART_RxCpltCallback+0x636>
												ev = i;
 800575a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800575c:	63bb      	str	r3, [r7, #56]	; 0x38
								break;
 800575e:	e098      	b.n	8005892 <HAL_UART_RxCpltCallback+0x636>
 8005760:	2000001c 	.word	0x2000001c
 8005764:	20001bdc 	.word	0x20001bdc
 8005768:	200001fd 	.word	0x200001fd
 800576c:	200001fc 	.word	0x200001fc
 8005770:	200001ff 	.word	0x200001ff
 8005774:	08014814 	.word	0x08014814
 8005778:	08014818 	.word	0x08014818
 800577c:	20000200 	.word	0x20000200
 8005780:	20003023 	.word	0x20003023
 8005784:	200001f8 	.word	0x200001f8
 8005788:	200001f4 	.word	0x200001f4
 800578c:	200001fe 	.word	0x200001fe
 8005790:	20001fde 	.word	0x20001fde
 8005794:	20000018 	.word	0x20000018
 8005798:	200001e8 	.word	0x200001e8
 800579c:	20001fe8 	.word	0x20001fe8
 80057a0:	20001fec 	.word	0x20001fec
									if (*uk == ':') {
 80057a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057a6:	781b      	ldrb	r3, [r3, #0]
 80057a8:	2b3a      	cmp	r3, #58	; 0x3a
 80057aa:	d174      	bne.n	8005896 <HAL_UART_RxCpltCallback+0x63a>
										uk++;
 80057ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ae:	3301      	adds	r3, #1
 80057b0:	633b      	str	r3, [r7, #48]	; 0x30
										int sek = atoi(uk);
 80057b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80057b4:	f00a f863 	bl	800f87e <atoi>
 80057b8:	62b8      	str	r0, [r7, #40]	; 0x28
										if ((sek >= 0) && (sek < W25qxx_getSectorCount())) {
 80057ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057bc:	2b00      	cmp	r3, #0
 80057be:	db6a      	blt.n	8005896 <HAL_UART_RxCpltCallback+0x63a>
 80057c0:	f001 fd20 	bl	8007204 <W25qxx_getSectorCount>
 80057c4:	4602      	mov	r2, r0
 80057c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057c8:	429a      	cmp	r2, r3
 80057ca:	d964      	bls.n	8005896 <HAL_UART_RxCpltCallback+0x63a>
											char *ukn = strchr(uk, ':');
 80057cc:	213a      	movs	r1, #58	; 0x3a
 80057ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80057d0:	f00a fef2 	bl	80105b8 <strchr>
 80057d4:	6278      	str	r0, [r7, #36]	; 0x24
											if (ukn) {
 80057d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d05c      	beq.n	8005896 <HAL_UART_RxCpltCallback+0x63a>
												len_write = -1;
 80057dc:	4b47      	ldr	r3, [pc, #284]	; (80058fc <HAL_UART_RxCpltCallback+0x6a0>)
 80057de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80057e2:	601a      	str	r2, [r3, #0]
												ukn++;
 80057e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e6:	3301      	adds	r3, #1
 80057e8:	627b      	str	r3, [r7, #36]	; 0x24
												byte_write = hexToBin(ukn);
 80057ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80057ec:	f7fe fef8 	bl	80045e0 <hexToBin>
 80057f0:	4603      	mov	r3, r0
 80057f2:	461a      	mov	r2, r3
 80057f4:	4b42      	ldr	r3, [pc, #264]	; (8005900 <HAL_UART_RxCpltCallback+0x6a4>)
 80057f6:	701a      	strb	r2, [r3, #0]
												uk = strchr(ukn, ':');
 80057f8:	213a      	movs	r1, #58	; 0x3a
 80057fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80057fc:	f00a fedc 	bl	80105b8 <strchr>
 8005800:	6338      	str	r0, [r7, #48]	; 0x30
												if (uk) {
 8005802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005804:	2b00      	cmp	r3, #0
 8005806:	d012      	beq.n	800582e <HAL_UART_RxCpltCallback+0x5d2>
													int l = atoi(++uk);
 8005808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800580a:	3301      	adds	r3, #1
 800580c:	633b      	str	r3, [r7, #48]	; 0x30
 800580e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005810:	f00a f835 	bl	800f87e <atoi>
 8005814:	6238      	str	r0, [r7, #32]
													if ((l > 0) && (l < W25qxx_getSectorSize())) len_write = l;
 8005816:	6a3b      	ldr	r3, [r7, #32]
 8005818:	2b00      	cmp	r3, #0
 800581a:	dd08      	ble.n	800582e <HAL_UART_RxCpltCallback+0x5d2>
 800581c:	f001 fcfe 	bl	800721c <W25qxx_getSectorSize>
 8005820:	4602      	mov	r2, r0
 8005822:	6a3b      	ldr	r3, [r7, #32]
 8005824:	429a      	cmp	r2, r3
 8005826:	d902      	bls.n	800582e <HAL_UART_RxCpltCallback+0x5d2>
 8005828:	4a34      	ldr	r2, [pc, #208]	; (80058fc <HAL_UART_RxCpltCallback+0x6a0>)
 800582a:	6a3b      	ldr	r3, [r7, #32]
 800582c:	6013      	str	r3, [r2, #0]
												adr_sector = sek;
 800582e:	4a35      	ldr	r2, [pc, #212]	; (8005904 <HAL_UART_RxCpltCallback+0x6a8>)
 8005830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005832:	6013      	str	r3, [r2, #0]
												offset_sector = 0;
 8005834:	4b34      	ldr	r3, [pc, #208]	; (8005908 <HAL_UART_RxCpltCallback+0x6ac>)
 8005836:	2200      	movs	r2, #0
 8005838:	601a      	str	r2, [r3, #0]
												ev = i;//flag_sector = true;
 800583a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800583c:	63bb      	str	r3, [r7, #56]	; 0x38
								break;
 800583e:	e02a      	b.n	8005896 <HAL_UART_RxCpltCallback+0x63a>
									if ((last_cmd_sector == cmdsRead) || (last_cmd_sector == cmdsNext)) {
 8005840:	4b32      	ldr	r3, [pc, #200]	; (800590c <HAL_UART_RxCpltCallback+0x6b0>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	2b04      	cmp	r3, #4
 8005846:	d003      	beq.n	8005850 <HAL_UART_RxCpltCallback+0x5f4>
 8005848:	4b30      	ldr	r3, [pc, #192]	; (800590c <HAL_UART_RxCpltCallback+0x6b0>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	2b06      	cmp	r3, #6
 800584e:	d124      	bne.n	800589a <HAL_UART_RxCpltCallback+0x63e>
										if ((offset_sector + list_sector) < W25qxx_getSectorSize()) {
 8005850:	4b2d      	ldr	r3, [pc, #180]	; (8005908 <HAL_UART_RxCpltCallback+0x6ac>)
 8005852:	681a      	ldr	r2, [r3, #0]
 8005854:	4b2e      	ldr	r3, [pc, #184]	; (8005910 <HAL_UART_RxCpltCallback+0x6b4>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4413      	add	r3, r2
 800585a:	461c      	mov	r4, r3
 800585c:	f001 fcde 	bl	800721c <W25qxx_getSectorSize>
 8005860:	4603      	mov	r3, r0
 8005862:	429c      	cmp	r4, r3
 8005864:	d219      	bcs.n	800589a <HAL_UART_RxCpltCallback+0x63e>
											offset_sector += list_sector;
 8005866:	4b28      	ldr	r3, [pc, #160]	; (8005908 <HAL_UART_RxCpltCallback+0x6ac>)
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	4b29      	ldr	r3, [pc, #164]	; (8005910 <HAL_UART_RxCpltCallback+0x6b4>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4413      	add	r3, r2
 8005870:	4a25      	ldr	r2, [pc, #148]	; (8005908 <HAL_UART_RxCpltCallback+0x6ac>)
 8005872:	6013      	str	r3, [r2, #0]
											ev = i;//flag_sector = true;
 8005874:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005876:	63bb      	str	r3, [r7, #56]	; 0x38
								break;
 8005878:	e00f      	b.n	800589a <HAL_UART_RxCpltCallback+0x63e>
								break;
 800587a:	bf00      	nop
 800587c:	e017      	b.n	80058ae <HAL_UART_RxCpltCallback+0x652>
								break;
 800587e:	bf00      	nop
 8005880:	e015      	b.n	80058ae <HAL_UART_RxCpltCallback+0x652>
								break;
 8005882:	bf00      	nop
 8005884:	e013      	b.n	80058ae <HAL_UART_RxCpltCallback+0x652>
								break;
 8005886:	bf00      	nop
 8005888:	e011      	b.n	80058ae <HAL_UART_RxCpltCallback+0x652>
								break;
 800588a:	bf00      	nop
 800588c:	e00f      	b.n	80058ae <HAL_UART_RxCpltCallback+0x652>
								break;
 800588e:	bf00      	nop
 8005890:	e00d      	b.n	80058ae <HAL_UART_RxCpltCallback+0x652>
								break;
 8005892:	bf00      	nop
 8005894:	e00b      	b.n	80058ae <HAL_UART_RxCpltCallback+0x652>
								break;
 8005896:	bf00      	nop
 8005898:	e009      	b.n	80058ae <HAL_UART_RxCpltCallback+0x652>
								break;
 800589a:	bf00      	nop
							break;
 800589c:	e007      	b.n	80058ae <HAL_UART_RxCpltCallback+0x652>
					for (i = 0; i < MAX_CMDS; i++) {
 800589e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058a0:	3301      	adds	r3, #1
 80058a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058a6:	2b17      	cmp	r3, #23
 80058a8:	f77f adfe 	ble.w	80054a8 <HAL_UART_RxCpltCallback+0x24c>
 80058ac:	e000      	b.n	80058b0 <HAL_UART_RxCpltCallback+0x654>
							break;
 80058ae:	bf00      	nop
				if (ev != -2) {
 80058b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058b2:	f113 0f02 	cmn.w	r3, #2
 80058b6:	d008      	beq.n	80058ca <HAL_UART_RxCpltCallback+0x66e>
					if (ev == -1) ev = cmdErr;
 80058b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80058be:	d101      	bne.n	80058c4 <HAL_UART_RxCpltCallback+0x668>
 80058c0:	2303      	movs	r3, #3
 80058c2:	63bb      	str	r3, [r7, #56]	; 0x38
					putEvt(ev);
 80058c4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80058c6:	f7fe ff05 	bl	80046d4 <putEvt>
			rxInd = 0;
 80058ca:	4b12      	ldr	r3, [pc, #72]	; (8005914 <HAL_UART_RxCpltCallback+0x6b8>)
 80058cc:	2200      	movs	r2, #0
 80058ce:	801a      	strh	r2, [r3, #0]
			*rxBuf = '\0';
 80058d0:	4b11      	ldr	r3, [pc, #68]	; (8005918 <HAL_UART_RxCpltCallback+0x6bc>)
 80058d2:	2200      	movs	r2, #0
 80058d4:	701a      	strb	r2, [r3, #0]
		if (HAL_UART_Receive_IT(huart, &rxByte, 1) != HAL_OK) devError |= devUART;
 80058d6:	2201      	movs	r2, #1
 80058d8:	4910      	ldr	r1, [pc, #64]	; (800591c <HAL_UART_RxCpltCallback+0x6c0>)
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f008 fbf0 	bl	800e0c0 <HAL_UART_Receive_IT>
 80058e0:	4603      	mov	r3, r0
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d006      	beq.n	80058f4 <HAL_UART_RxCpltCallback+0x698>
 80058e6:	4b0e      	ldr	r3, [pc, #56]	; (8005920 <HAL_UART_RxCpltCallback+0x6c4>)
 80058e8:	881b      	ldrh	r3, [r3, #0]
 80058ea:	f043 0302 	orr.w	r3, r3, #2
 80058ee:	b29a      	uxth	r2, r3
 80058f0:	4b0b      	ldr	r3, [pc, #44]	; (8005920 <HAL_UART_RxCpltCallback+0x6c4>)
 80058f2:	801a      	strh	r2, [r3, #0]
}
 80058f4:	bf00      	nop
 80058f6:	3744      	adds	r7, #68	; 0x44
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd90      	pop	{r4, r7, pc}
 80058fc:	20001ff4 	.word	0x20001ff4
 8005900:	200001f0 	.word	0x200001f0
 8005904:	20001fe8 	.word	0x20001fe8
 8005908:	20001fec 	.word	0x20001fec
 800590c:	200001ec 	.word	0x200001ec
 8005910:	20001ff0 	.word	0x20001ff0
 8005914:	20001bda 	.word	0x20001bda
 8005918:	20001bdc 	.word	0x20001bdc
 800591c:	20001bd8 	.word	0x20001bd8
 8005920:	20001bc8 	.word	0x20001bc8

08005924 <spiDone>:
//-------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------
//    Функция устанавливает в начальное состояние 'готов' служебные параметры порта SPI1:
//
void spiDone(SPI_HandleTypeDef *hspi)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b082      	sub	sp, #8
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
#ifdef SET_W25FLASH
	if (hspi->Instance == SPI2) {
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a0a      	ldr	r2, [pc, #40]	; (800595c <spiDone+0x38>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d105      	bne.n	8005942 <spiDone+0x1e>
		W25_UNSELECT();
 8005936:	f001 fa89 	bl	8006e4c <W25_UNSELECT>
		spiRdy = 1;
 800593a:	4b09      	ldr	r3, [pc, #36]	; (8005960 <spiDone+0x3c>)
 800593c:	2201      	movs	r2, #1
 800593e:	701a      	strb	r2, [r3, #0]
	else
	if (hspi->Instance == SPI1) {
		lcdRdy = 1;
	}
#endif
}
 8005940:	e007      	b.n	8005952 <spiDone+0x2e>
	if (hspi->Instance == SPI1) {
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a07      	ldr	r2, [pc, #28]	; (8005964 <spiDone+0x40>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d102      	bne.n	8005952 <spiDone+0x2e>
		lcdRdy = 1;
 800594c:	4b06      	ldr	r3, [pc, #24]	; (8005968 <spiDone+0x44>)
 800594e:	2201      	movs	r2, #1
 8005950:	701a      	strb	r2, [r3, #0]
}
 8005952:	bf00      	nop
 8005954:	3708      	adds	r7, #8
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}
 800595a:	bf00      	nop
 800595c:	40003800 	.word	0x40003800
 8005960:	200001e4 	.word	0x200001e4
 8005964:	40013000 	.word	0x40013000
 8005968:	20000000 	.word	0x20000000

0800596c <HAL_SPI_RxCpltCallback>:
//-------------------------------------------------------------------------------------------
//    CallBack функция, вызывается по завершении приема данных от порта SPI
//
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b082      	sub	sp, #8
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
	spiDone(hspi);
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	f7ff ffd5 	bl	8005924 <spiDone>
}
 800597a:	bf00      	nop
 800597c:	3708      	adds	r7, #8
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}

08005982 <HAL_SPI_TxCpltCallback>:
//-------------------------------------------------------------------------------------------
//    CallBack функция, вызывается по завершении передачи данных в порт SPI
//
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005982:	b580      	push	{r7, lr}
 8005984:	b082      	sub	sp, #8
 8005986:	af00      	add	r7, sp, #0
 8005988:	6078      	str	r0, [r7, #4]
	spiDone(hspi);
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f7ff ffca 	bl	8005924 <spiDone>
}
 8005990:	bf00      	nop
 8005992:	3708      	adds	r7, #8
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}

08005998 <HAL_SPI_TxRxCpltCallback>:
//-------------------------------------------------------------------------------------------
//    CallBack функция, вызывается по завершении приема/передачи данных порта SPI
//
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b082      	sub	sp, #8
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
	spiDone(hspi);
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f7ff ffbf 	bl	8005924 <spiDone>
}
 80059a6:	bf00      	nop
 80059a8:	3708      	adds	r7, #8
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}
	...

080059b0 <HAL_SPI_ErrorCallback>:
//--------------------------------------------------------------------------------------------
//    CallBack функция, вызывается при возникновении ошибки у модуля SPI
//
void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b082      	sub	sp, #8
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
	spiDone(hspi);
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f7ff ffb3 	bl	8005924 <spiDone>
	devError |= devSPI;
 80059be:	4b05      	ldr	r3, [pc, #20]	; (80059d4 <HAL_SPI_ErrorCallback+0x24>)
 80059c0:	881b      	ldrh	r3, [r3, #0]
 80059c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059c6:	b29a      	uxth	r2, r3
 80059c8:	4b02      	ldr	r3, [pc, #8]	; (80059d4 <HAL_SPI_ErrorCallback+0x24>)
 80059ca:	801a      	strh	r2, [r3, #0]
}
 80059cc:	bf00      	nop
 80059ce:	3708      	adds	r7, #8
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}
 80059d4:	20001bc8 	.word	0x20001bc8

080059d8 <HAL_I2C_ErrorCallback>:
	}
#endif
}
//--------------------------------------------------------------------------------------------
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80059d8:	b480      	push	{r7}
 80059da:	b083      	sub	sp, #12
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
#ifdef SET_RDA_CHIP
	if (hi2c->Instance == I2C1) {
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a07      	ldr	r2, [pc, #28]	; (8005a04 <HAL_I2C_ErrorCallback+0x2c>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d106      	bne.n	80059f8 <HAL_I2C_ErrorCallback+0x20>
		devError |= devRDA;
 80059ea:	4b07      	ldr	r3, [pc, #28]	; (8005a08 <HAL_I2C_ErrorCallback+0x30>)
 80059ec:	881b      	ldrh	r3, [r3, #0]
 80059ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059f2:	b29a      	uxth	r2, r3
 80059f4:	4b04      	ldr	r3, [pc, #16]	; (8005a08 <HAL_I2C_ErrorCallback+0x30>)
 80059f6:	801a      	strh	r2, [r3, #0]
	}
#endif
}
 80059f8:	bf00      	nop
 80059fa:	370c      	adds	r7, #12
 80059fc:	46bd      	mov	sp, r7
 80059fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a02:	4770      	bx	lr
 8005a04:	40005400 	.word	0x40005400
 8005a08:	20001bc8 	.word	0x20001bc8

08005a0c <HAL_GPIO_EXTI_Callback>:
//--------------------------------------------------------------------------------------------
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b082      	sub	sp, #8
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	4603      	mov	r3, r0
 8005a14:	80fb      	strh	r3, [r7, #6]
#ifdef SET_SLEEP
	if (sleep_mode) {
 8005a16:	4b1b      	ldr	r3, [pc, #108]	; (8005a84 <HAL_GPIO_EXTI_Callback+0x78>)
 8005a18:	781b      	ldrb	r3, [r3, #0]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d016      	beq.n	8005a4c <HAL_GPIO_EXTI_Callback+0x40>
		if ((HAL_GPIO_ReadPin(KEY0_GPIO_Port, KEY0_Pin) == GPIO_PIN_SET) ||
 8005a1e:	2102      	movs	r1, #2
 8005a20:	4819      	ldr	r0, [pc, #100]	; (8005a88 <HAL_GPIO_EXTI_Callback+0x7c>)
 8005a22:	f002 fdcd 	bl	80085c0 <HAL_GPIO_ReadPin>
 8005a26:	4603      	mov	r3, r0
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	d006      	beq.n	8005a3a <HAL_GPIO_EXTI_Callback+0x2e>
				(HAL_GPIO_ReadPin(KEY1_GPIO_Port, KEY1_Pin) == GPIO_PIN_SET)) {
 8005a2c:	2104      	movs	r1, #4
 8005a2e:	4816      	ldr	r0, [pc, #88]	; (8005a88 <HAL_GPIO_EXTI_Callback+0x7c>)
 8005a30:	f002 fdc6 	bl	80085c0 <HAL_GPIO_ReadPin>
 8005a34:	4603      	mov	r3, r0
		if ((HAL_GPIO_ReadPin(KEY0_GPIO_Port, KEY0_Pin) == GPIO_PIN_SET) ||
 8005a36:	2b01      	cmp	r3, #1
 8005a38:	d11f      	bne.n	8005a7a <HAL_GPIO_EXTI_Callback+0x6e>
			sleep_mode = false;
 8005a3a:	4b12      	ldr	r3, [pc, #72]	; (8005a84 <HAL_GPIO_EXTI_Callback+0x78>)
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	701a      	strb	r2, [r3, #0]
			HAL_PWR_DisableSleepOnExit();
 8005a40:	f004 fade 	bl	800a000 <HAL_PWR_DisableSleepOnExit>
			putEvt(cmdExitSleep);
 8005a44:	2014      	movs	r0, #20
 8005a46:	f7fe fe45 	bl	80046d4 <putEvt>
		}
		return;
 8005a4a:	e016      	b.n	8005a7a <HAL_GPIO_EXTI_Callback+0x6e>
	}
#endif
	if ((GPIO_Pin == KEY0_Pin) || (GPIO_Pin == KEY1_Pin)) {
 8005a4c:	88fb      	ldrh	r3, [r7, #6]
 8005a4e:	2b02      	cmp	r3, #2
 8005a50:	d002      	beq.n	8005a58 <HAL_GPIO_EXTI_Callback+0x4c>
 8005a52:	88fb      	ldrh	r3, [r7, #6]
 8005a54:	2b04      	cmp	r3, #4
 8005a56:	d111      	bne.n	8005a7c <HAL_GPIO_EXTI_Callback+0x70>
		if (GPIO_Pin == KEY0_Pin) seek_up = 1;
 8005a58:	88fb      	ldrh	r3, [r7, #6]
 8005a5a:	2b02      	cmp	r3, #2
 8005a5c:	d103      	bne.n	8005a66 <HAL_GPIO_EXTI_Callback+0x5a>
 8005a5e:	4b0b      	ldr	r3, [pc, #44]	; (8005a8c <HAL_GPIO_EXTI_Callback+0x80>)
 8005a60:	2201      	movs	r2, #1
 8005a62:	701a      	strb	r2, [r3, #0]
 8005a64:	e005      	b.n	8005a72 <HAL_GPIO_EXTI_Callback+0x66>
		else
		if (GPIO_Pin == KEY1_Pin) seek_up = 0;
 8005a66:	88fb      	ldrh	r3, [r7, #6]
 8005a68:	2b04      	cmp	r3, #4
 8005a6a:	d102      	bne.n	8005a72 <HAL_GPIO_EXTI_Callback+0x66>
 8005a6c:	4b07      	ldr	r3, [pc, #28]	; (8005a8c <HAL_GPIO_EXTI_Callback+0x80>)
 8005a6e:	2200      	movs	r2, #0
 8005a70:	701a      	strb	r2, [r3, #0]
		putEvt(cmdScan);
 8005a72:	200b      	movs	r0, #11
 8005a74:	f7fe fe2e 	bl	80046d4 <putEvt>
 8005a78:	e000      	b.n	8005a7c <HAL_GPIO_EXTI_Callback+0x70>
		return;
 8005a7a:	bf00      	nop
	}
}
 8005a7c:	3708      	adds	r7, #8
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}
 8005a82:	bf00      	nop
 8005a84:	20003769 	.word	0x20003769
 8005a88:	48000800 	.word	0x48000800
 8005a8c:	200001fe 	.word	0x200001fe

08005a90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8005a94:	b672      	cpsid	i
}
 8005a96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  devError |= devSYS;
 8005a98:	4b05      	ldr	r3, [pc, #20]	; (8005ab0 <Error_Handler+0x20>)
 8005a9a:	881b      	ldrh	r3, [r3, #0]
 8005a9c:	f043 0320 	orr.w	r3, r3, #32
 8005aa0:	b29a      	uxth	r2, r3
 8005aa2:	4b03      	ldr	r3, [pc, #12]	; (8005ab0 <Error_Handler+0x20>)
 8005aa4:	801a      	strh	r2, [r3, #0]
	  errLedOn(true);
 8005aa6:	2001      	movs	r0, #1
 8005aa8:	f7ff f876 	bl	8004b98 <errLedOn>
	  devError |= devSYS;
 8005aac:	e7f4      	b.n	8005a98 <Error_Handler+0x8>
 8005aae:	bf00      	nop
 8005ab0:	20001bc8 	.word	0x20001bc8

08005ab4 <rda5807_init>:

//==============================================================================
// Инициализация rda5807
//==============================================================================
uint8_t rda5807_init(float *freq)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b088      	sub	sp, #32
 8005ab8:	af04      	add	r7, sp, #16
 8005aba:	6078      	str	r0, [r7, #4]
uint8_t buf[2] = {0, 0};
 8005abc:	2300      	movs	r3, #0
 8005abe:	813b      	strh	r3, [r7, #8]
uint8_t *id = &buf[0];
 8005ac0:	f107 0308 	add.w	r3, r7, #8
 8005ac4:	60fb      	str	r3, [r7, #12]

    if (HAL_I2C_Mem_Read(i2cRDA, RDA5807_RandAccess_Addr, 0, I2C_MEMADD_SIZE_8BIT, buf, 2, RDA5807_TO) != HAL_OK) {
 8005ac6:	4b30      	ldr	r3, [pc, #192]	; (8005b88 <rda5807_init+0xd4>)
 8005ac8:	6818      	ldr	r0, [r3, #0]
 8005aca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005ace:	9302      	str	r3, [sp, #8]
 8005ad0:	2302      	movs	r3, #2
 8005ad2:	9301      	str	r3, [sp, #4]
 8005ad4:	f107 0308 	add.w	r3, r7, #8
 8005ad8:	9300      	str	r3, [sp, #0]
 8005ada:	2301      	movs	r3, #1
 8005adc:	2200      	movs	r2, #0
 8005ade:	2122      	movs	r1, #34	; 0x22
 8005ae0:	f003 f868 	bl	8008bb4 <HAL_I2C_Mem_Read>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d13c      	bne.n	8005b64 <rda5807_init+0xb0>
    stx[0] = '\0';
    for (int i = 0; i < 64; i++) sprintf(stx+strlen(stx)," %02x", buf11[i]);
    Report(1, "[%s] %s\r\n", __func__, stx);
#endif

    rda5807_SoftReset();
 8005aea:	f000 f927 	bl	8005d3c <rda5807_SoftReset>
    if (devError & devRDA) goto err_out;
 8005aee:	4b27      	ldr	r3, [pc, #156]	; (8005b8c <rda5807_init+0xd8>)
 8005af0:	881b      	ldrh	r3, [r3, #0]
 8005af2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d136      	bne.n	8005b68 <rda5807_init+0xb4>

    rda5807_SetupDefault();
 8005afa:	f000 f949 	bl	8005d90 <rda5807_SetupDefault>
    if (devError & devRDA) goto err_out;
 8005afe:	4b23      	ldr	r3, [pc, #140]	; (8005b8c <rda5807_init+0xd8>)
 8005b00:	881b      	ldrh	r3, [r3, #0]
 8005b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d130      	bne.n	8005b6c <rda5807_init+0xb8>

    uint16_t fr = (uint16_t)(*freq * 10);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	edd3 7a00 	vldr	s15, [r3]
 8005b10:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005b14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005b18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b1c:	ee17 3a90 	vmov	r3, s15
 8005b20:	817b      	strh	r3, [r7, #10]
    rda5807_SetFreq_In100Khz(fr);
 8005b22:	897b      	ldrh	r3, [r7, #10]
 8005b24:	4618      	mov	r0, r3
 8005b26:	f000 fa79 	bl	800601c <rda5807_SetFreq_In100Khz>
    //
    HAL_Delay(200);
 8005b2a:	20c8      	movs	r0, #200	; 0xc8
 8005b2c:	f001 ff92 	bl	8007a54 <HAL_Delay>
    //
    *freq = (float)rda5807_GetFreq_In100Khz();
 8005b30:	f000 faee 	bl	8006110 <rda5807_GetFreq_In100Khz>
 8005b34:	4603      	mov	r3, r0
 8005b36:	ee07 3a90 	vmov	s15, r3
 8005b3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	edc3 7a00 	vstr	s15, [r3]
    *freq /= 10;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	ed93 7a00 	vldr	s14, [r3]
 8005b4a:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8005b4e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	edc3 7a00 	vstr	s15, [r3]
#ifdef SET_RDA_DEBUG
    Report(1, "[%s] Freq: %.2f\r\n", __func__, *freq);//rda5807_GetFreq_In100Khz());
#endif

    HAL_Delay(100);
 8005b58:	2064      	movs	r0, #100	; 0x64
 8005b5a:	f001 ff7b 	bl	8007a54 <HAL_Delay>

    return *id;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	781b      	ldrb	r3, [r3, #0]
 8005b62:	e00d      	b.n	8005b80 <rda5807_init+0xcc>
    	goto err_out;
 8005b64:	bf00      	nop
 8005b66:	e002      	b.n	8005b6e <rda5807_init+0xba>
    if (devError & devRDA) goto err_out;
 8005b68:	bf00      	nop
 8005b6a:	e000      	b.n	8005b6e <rda5807_init+0xba>
    if (devError & devRDA) goto err_out;
 8005b6c:	bf00      	nop

err_out:
	devError |= devRDA;
 8005b6e:	4b07      	ldr	r3, [pc, #28]	; (8005b8c <rda5807_init+0xd8>)
 8005b70:	881b      	ldrh	r3, [r3, #0]
 8005b72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b76:	b29a      	uxth	r2, r3
 8005b78:	4b04      	ldr	r3, [pc, #16]	; (8005b8c <rda5807_init+0xd8>)
 8005b7a:	801a      	strh	r2, [r3, #0]
    return *id;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	781b      	ldrb	r3, [r3, #0]
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3710      	adds	r7, #16
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}
 8005b88:	20000224 	.word	0x20000224
 8005b8c:	20001bc8 	.word	0x20001bc8

08005b90 <rda5807_rssi>:
//==============================================================================
uint16_t rda5807_rssi()
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b082      	sub	sp, #8
 8005b94:	af00      	add	r7, sp, #0
uint16_t word = 0;
 8005b96:	2300      	movs	r3, #0
 8005b98:	80fb      	strh	r3, [r7, #6]

    rda5807_read(0x0B, &word, 1);
 8005b9a:	1dbb      	adds	r3, r7, #6
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	4619      	mov	r1, r3
 8005ba0:	200b      	movs	r0, #11
 8005ba2:	f000 f85d 	bl	8005c60 <rda5807_read>

    return (word >> 9);
 8005ba6:	88fb      	ldrh	r3, [r7, #6]
 8005ba8:	0a5b      	lsrs	r3, r3, #9
 8005baa:	b29b      	uxth	r3, r3
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3708      	adds	r7, #8
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}

08005bb4 <rda5807_bytes_change>:

//==============================================================================
// Процедура меняет местами байты попарно в буфере pBuff 
//==============================================================================
void rda5807_bytes_change(uint8_t *pBuff, uint8_t count)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b085      	sub	sp, #20
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
 8005bbc:	460b      	mov	r3, r1
 8005bbe:	70fb      	strb	r3, [r7, #3]
    while (count > 1) {    // Если осталась хотя бы пара байт
 8005bc0:	e010      	b.n	8005be4 <rda5807_bytes_change+0x30>
        uint8_t Temp = *(pBuff + 1);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	785b      	ldrb	r3, [r3, #1]
 8005bc6:	73fb      	strb	r3, [r7, #15]
        *(pBuff + 1) = *pBuff;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	3301      	adds	r3, #1
 8005bcc:	687a      	ldr	r2, [r7, #4]
 8005bce:	7812      	ldrb	r2, [r2, #0]
 8005bd0:	701a      	strb	r2, [r3, #0]
        *pBuff = Temp;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	7bfa      	ldrb	r2, [r7, #15]
 8005bd6:	701a      	strb	r2, [r3, #0]
        pBuff += 2;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	3302      	adds	r3, #2
 8005bdc:	607b      	str	r3, [r7, #4]
        count -= 2;
 8005bde:	78fb      	ldrb	r3, [r7, #3]
 8005be0:	3b02      	subs	r3, #2
 8005be2:	70fb      	strb	r3, [r7, #3]
    while (count > 1) {    // Если осталась хотя бы пара байт
 8005be4:	78fb      	ldrb	r3, [r7, #3]
 8005be6:	2b01      	cmp	r3, #1
 8005be8:	d8eb      	bhi.n	8005bc2 <rda5807_bytes_change+0xe>
    }
}
 8005bea:	bf00      	nop
 8005bec:	bf00      	nop
 8005bee:	3714      	adds	r7, #20
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr

08005bf8 <rda5807_write_regfile>:
//==============================================================================
// Процедура пишет в rda5807 группу регистров (кол-во RegNum) начиная с 0x02
// Используется I2C-адрес RDA5807_SeqAccess_Addr
//==============================================================================
void rda5807_write_regfile(uint16_t *pBuff, uint8_t RegNum)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b084      	sub	sp, #16
 8005bfc:	af02      	add	r7, sp, #8
 8005bfe:	6078      	str	r0, [r7, #4]
 8005c00:	460b      	mov	r3, r1
 8005c02:	70fb      	strb	r3, [r7, #3]
    err = i2cm_Start(I2Cx, RDA5807_SeqAccess_Addr, 0, RDA5807_TO);
    if (err) {
        Error_Handler();
    } //*/

    rda5807_bytes_change((uint8_t *)pBuff, RegNum << 1);
 8005c04:	78fb      	ldrb	r3, [r7, #3]
 8005c06:	005b      	lsls	r3, r3, #1
 8005c08:	b2db      	uxtb	r3, r3
 8005c0a:	4619      	mov	r1, r3
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f7ff ffd1 	bl	8005bb4 <rda5807_bytes_change>

//    err = i2cm_WriteBuff(I2Cx, (uint8_t *) pBuff, RegNum << 1, RDA5807_TO);
//    i2cm_Stop(I2Cx, RDA5807_TO);

    if (HAL_I2C_Master_Transmit(i2cRDA, (uint16_t)RDA5807_SeqAccess_Addr, (uint8_t *)pBuff, RegNum << 1, RDA5807_TO) != HAL_OK) {
 8005c12:	4b11      	ldr	r3, [pc, #68]	; (8005c58 <rda5807_write_regfile+0x60>)
 8005c14:	6818      	ldr	r0, [r3, #0]
 8005c16:	78fb      	ldrb	r3, [r7, #3]
 8005c18:	b29b      	uxth	r3, r3
 8005c1a:	005b      	lsls	r3, r3, #1
 8005c1c:	b29b      	uxth	r3, r3
 8005c1e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005c22:	9200      	str	r2, [sp, #0]
 8005c24:	687a      	ldr	r2, [r7, #4]
 8005c26:	2120      	movs	r1, #32
 8005c28:	f002 fdbc 	bl	80087a4 <HAL_I2C_Master_Transmit>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d006      	beq.n	8005c40 <rda5807_write_regfile+0x48>
    	devError |= devRDA;
 8005c32:	4b0a      	ldr	r3, [pc, #40]	; (8005c5c <rda5807_write_regfile+0x64>)
 8005c34:	881b      	ldrh	r3, [r3, #0]
 8005c36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c3a:	b29a      	uxth	r2, r3
 8005c3c:	4b07      	ldr	r3, [pc, #28]	; (8005c5c <rda5807_write_regfile+0x64>)
 8005c3e:	801a      	strh	r2, [r3, #0]
    }

    rda5807_bytes_change((uint8_t *)pBuff, RegNum << 1);
 8005c40:	78fb      	ldrb	r3, [r7, #3]
 8005c42:	005b      	lsls	r3, r3, #1
 8005c44:	b2db      	uxtb	r3, r3
 8005c46:	4619      	mov	r1, r3
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f7ff ffb3 	bl	8005bb4 <rda5807_bytes_change>
}
 8005c4e:	bf00      	nop
 8005c50:	3708      	adds	r7, #8
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}
 8005c56:	bf00      	nop
 8005c58:	20000224 	.word	0x20000224
 8005c5c:	20001bc8 	.word	0x20001bc8

08005c60 <rda5807_read>:
//==============================================================================
// Процедура читает из rda5807 группу регистров (кол-во RegNum) начиная с RegAddr
// Используется I2C-адрес RDA5807_RandAccess_Addr (для режима совместимости с rda5800)
//==============================================================================
void rda5807_read(uint8_t RegAddr, uint16_t *pBuff, uint8_t RegNum)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b086      	sub	sp, #24
 8005c64:	af04      	add	r7, sp, #16
 8005c66:	4603      	mov	r3, r0
 8005c68:	6039      	str	r1, [r7, #0]
 8005c6a:	71fb      	strb	r3, [r7, #7]
 8005c6c:	4613      	mov	r3, r2
 8005c6e:	71bb      	strb	r3, [r7, #6]
        Error_Handler();
    }
    // Читаем
    i2cm_ReadBuffAndStop(I2Cx, (uint8_t *) pBuff, RegNum << 1, RDA5807_TO); //*/

    if (HAL_I2C_Mem_Read(i2cRDA, RDA5807_RandAccess_Addr,
 8005c70:	4b13      	ldr	r3, [pc, #76]	; (8005cc0 <rda5807_read+0x60>)
 8005c72:	6818      	ldr	r0, [r3, #0]
 8005c74:	79fb      	ldrb	r3, [r7, #7]
 8005c76:	b29a      	uxth	r2, r3
 8005c78:	79bb      	ldrb	r3, [r7, #6]
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	005b      	lsls	r3, r3, #1
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005c84:	9102      	str	r1, [sp, #8]
 8005c86:	9301      	str	r3, [sp, #4]
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	9300      	str	r3, [sp, #0]
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	2122      	movs	r1, #34	; 0x22
 8005c90:	f002 ff90 	bl	8008bb4 <HAL_I2C_Mem_Read>
 8005c94:	4603      	mov	r3, r0
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d006      	beq.n	8005ca8 <rda5807_read+0x48>
    				     RegAddr, I2C_MEMADD_SIZE_8BIT,
						 (uint8_t *)pBuff, RegNum << 1,
						 RDA5807_TO) != HAL_OK) {
    	devError |= devRDA;
 8005c9a:	4b0a      	ldr	r3, [pc, #40]	; (8005cc4 <rda5807_read+0x64>)
 8005c9c:	881b      	ldrh	r3, [r3, #0]
 8005c9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ca2:	b29a      	uxth	r2, r3
 8005ca4:	4b07      	ldr	r3, [pc, #28]	; (8005cc4 <rda5807_read+0x64>)
 8005ca6:	801a      	strh	r2, [r3, #0]
    }

    rda5807_bytes_change((uint8_t *)pBuff, RegNum << 1);
 8005ca8:	79bb      	ldrb	r3, [r7, #6]
 8005caa:	005b      	lsls	r3, r3, #1
 8005cac:	b2db      	uxtb	r3, r3
 8005cae:	4619      	mov	r1, r3
 8005cb0:	6838      	ldr	r0, [r7, #0]
 8005cb2:	f7ff ff7f 	bl	8005bb4 <rda5807_bytes_change>
}
 8005cb6:	bf00      	nop
 8005cb8:	3708      	adds	r7, #8
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}
 8005cbe:	bf00      	nop
 8005cc0:	20000224 	.word	0x20000224
 8005cc4:	20001bc8 	.word	0x20001bc8

08005cc8 <rda5807_write>:
//==============================================================================
// Процедура пишет в rda5807 группу регистров (кол-во RegNum) начиная с RegAddr
// Используется I2C-адрес RDA5807_RandAccess_Addr (для режима совместимости с rda5800)
//==============================================================================
void rda5807_write(uint8_t RegAddr, uint16_t *pBuff, uint8_t RegNum)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b086      	sub	sp, #24
 8005ccc:	af04      	add	r7, sp, #16
 8005cce:	4603      	mov	r3, r0
 8005cd0:	6039      	str	r1, [r7, #0]
 8005cd2:	71fb      	strb	r3, [r7, #7]
 8005cd4:	4613      	mov	r3, r2
 8005cd6:	71bb      	strb	r3, [r7, #6]

    if (i2cm_WriteBuff(I2Cx, &RegAddr, 1, RDA5807_TO)) {
        Error_Handler();
    } //*/

    rda5807_bytes_change((uint8_t *)pBuff, RegNum << 1);
 8005cd8:	79bb      	ldrb	r3, [r7, #6]
 8005cda:	005b      	lsls	r3, r3, #1
 8005cdc:	b2db      	uxtb	r3, r3
 8005cde:	4619      	mov	r1, r3
 8005ce0:	6838      	ldr	r0, [r7, #0]
 8005ce2:	f7ff ff67 	bl	8005bb4 <rda5807_bytes_change>

    //err = i2cm_WriteBuff(I2Cx, (uint8_t *) pBuff, RegNum << 1, RDA5807_TO);
    //i2cm_Stop(I2Cx, RDA5807_TO);

    if (HAL_I2C_Mem_Write(i2cRDA,
 8005ce6:	4b13      	ldr	r3, [pc, #76]	; (8005d34 <rda5807_write+0x6c>)
 8005ce8:	6818      	ldr	r0, [r3, #0]
 8005cea:	79fb      	ldrb	r3, [r7, #7]
 8005cec:	b29a      	uxth	r2, r3
 8005cee:	79bb      	ldrb	r3, [r7, #6]
 8005cf0:	b29b      	uxth	r3, r3
 8005cf2:	005b      	lsls	r3, r3, #1
 8005cf4:	b29b      	uxth	r3, r3
 8005cf6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005cfa:	9102      	str	r1, [sp, #8]
 8005cfc:	9301      	str	r3, [sp, #4]
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	9300      	str	r3, [sp, #0]
 8005d02:	2301      	movs	r3, #1
 8005d04:	2122      	movs	r1, #34	; 0x22
 8005d06:	f002 fe41 	bl	800898c <HAL_I2C_Mem_Write>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d006      	beq.n	8005d1e <rda5807_write+0x56>
    					  RDA5807_RandAccess_Addr,
						  RegAddr, I2C_MEMADD_SIZE_8BIT,
						  (uint8_t *)pBuff, RegNum << 1,
						  RDA5807_TO) != HAL_OK) {
    	devError |= devRDA;
 8005d10:	4b09      	ldr	r3, [pc, #36]	; (8005d38 <rda5807_write+0x70>)
 8005d12:	881b      	ldrh	r3, [r3, #0]
 8005d14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d18:	b29a      	uxth	r2, r3
 8005d1a:	4b07      	ldr	r3, [pc, #28]	; (8005d38 <rda5807_write+0x70>)
 8005d1c:	801a      	strh	r2, [r3, #0]
    }

    rda5807_bytes_change((uint8_t *)pBuff, RegNum << 1);
 8005d1e:	79bb      	ldrb	r3, [r7, #6]
 8005d20:	005b      	lsls	r3, r3, #1
 8005d22:	b2db      	uxtb	r3, r3
 8005d24:	4619      	mov	r1, r3
 8005d26:	6838      	ldr	r0, [r7, #0]
 8005d28:	f7ff ff44 	bl	8005bb4 <rda5807_bytes_change>
}
 8005d2c:	bf00      	nop
 8005d2e:	3708      	adds	r7, #8
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}
 8005d34:	20000224 	.word	0x20000224
 8005d38:	20001bc8 	.word	0x20001bc8

08005d3c <rda5807_SoftReset>:

//==============================================================================
// Процедура делает программный сброс rda5807
//==============================================================================
void rda5807_SoftReset()
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b082      	sub	sp, #8
 8005d40:	af00      	add	r7, sp, #0
tReg02h reg02;

    rda5807_read(2, (uint16_t *)&reg02, 1);
 8005d42:	1d3b      	adds	r3, r7, #4
 8005d44:	2201      	movs	r2, #1
 8005d46:	4619      	mov	r1, r3
 8005d48:	2002      	movs	r0, #2
 8005d4a:	f7ff ff89 	bl	8005c60 <rda5807_read>

	reg02.bENABLE = 1;
 8005d4e:	793b      	ldrb	r3, [r7, #4]
 8005d50:	f043 0301 	orr.w	r3, r3, #1
 8005d54:	713b      	strb	r3, [r7, #4]
	reg02.bSOFT_RESET = 1;
 8005d56:	793b      	ldrb	r3, [r7, #4]
 8005d58:	f043 0302 	orr.w	r3, r3, #2
 8005d5c:	713b      	strb	r3, [r7, #4]
    rda5807_write(2, (uint16_t *)&reg02, 1);
 8005d5e:	1d3b      	adds	r3, r7, #4
 8005d60:	2201      	movs	r2, #1
 8005d62:	4619      	mov	r1, r3
 8005d64:	2002      	movs	r0, #2
 8005d66:	f7ff ffaf 	bl	8005cc8 <rda5807_write>

    reg02.bENABLE = 1;
 8005d6a:	793b      	ldrb	r3, [r7, #4]
 8005d6c:	f043 0301 	orr.w	r3, r3, #1
 8005d70:	713b      	strb	r3, [r7, #4]
    reg02.bSOFT_RESET = 0;
 8005d72:	793b      	ldrb	r3, [r7, #4]
 8005d74:	f36f 0341 	bfc	r3, #1, #1
 8005d78:	713b      	strb	r3, [r7, #4]
    rda5807_write(2, (uint16_t *)&reg02, 1);
 8005d7a:	1d3b      	adds	r3, r7, #4
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	4619      	mov	r1, r3
 8005d80:	2002      	movs	r0, #2
 8005d82:	f7ff ffa1 	bl	8005cc8 <rda5807_write>
}
 8005d86:	bf00      	nop
 8005d88:	3708      	adds	r7, #8
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}
	...

08005d90 <rda5807_SetupDefault>:

//==============================================================================
// Процедура производит начальную настройку rda5807
//==============================================================================
void rda5807_SetupDefault()
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	af00      	add	r7, sp, #0
	tReg06h Reg06;
	tReg07h Reg07;
} Buffs;*/

    // Регистр 0x02
    Buffs.Reg02.bENABLE = 1;
 8005d94:	4a6b      	ldr	r2, [pc, #428]	; (8005f44 <rda5807_SetupDefault+0x1b4>)
 8005d96:	7813      	ldrb	r3, [r2, #0]
 8005d98:	f043 0301 	orr.w	r3, r3, #1
 8005d9c:	7013      	strb	r3, [r2, #0]
    Buffs.Reg02.bSOFT_RESET = 0;
 8005d9e:	4a69      	ldr	r2, [pc, #420]	; (8005f44 <rda5807_SetupDefault+0x1b4>)
 8005da0:	7813      	ldrb	r3, [r2, #0]
 8005da2:	f36f 0341 	bfc	r3, #1, #1
 8005da6:	7013      	strb	r3, [r2, #0]
    Buffs.Reg02.bNEW_METHOD = 1;
 8005da8:	4a66      	ldr	r2, [pc, #408]	; (8005f44 <rda5807_SetupDefault+0x1b4>)
 8005daa:	7813      	ldrb	r3, [r2, #0]
 8005dac:	f043 0304 	orr.w	r3, r3, #4
 8005db0:	7013      	strb	r3, [r2, #0]
    Buffs.Reg02.bRDS_EN = 1;
 8005db2:	4a64      	ldr	r2, [pc, #400]	; (8005f44 <rda5807_SetupDefault+0x1b4>)
 8005db4:	7813      	ldrb	r3, [r2, #0]
 8005db6:	f043 0308 	orr.w	r3, r3, #8
 8005dba:	7013      	strb	r3, [r2, #0]
    Buffs.Reg02.bCLK_MODE = 0;        // 32.768
 8005dbc:	4a61      	ldr	r2, [pc, #388]	; (8005f44 <rda5807_SetupDefault+0x1b4>)
 8005dbe:	7813      	ldrb	r3, [r2, #0]
 8005dc0:	f36f 1306 	bfc	r3, #4, #3
 8005dc4:	7013      	strb	r3, [r2, #0]
    Buffs.Reg02.bSKMODE = 0;
 8005dc6:	4a5f      	ldr	r2, [pc, #380]	; (8005f44 <rda5807_SetupDefault+0x1b4>)
 8005dc8:	7813      	ldrb	r3, [r2, #0]
 8005dca:	f36f 13c7 	bfc	r3, #7, #1
 8005dce:	7013      	strb	r3, [r2, #0]
    Buffs.Reg02.bSEEK = 0;
 8005dd0:	4a5c      	ldr	r2, [pc, #368]	; (8005f44 <rda5807_SetupDefault+0x1b4>)
 8005dd2:	7853      	ldrb	r3, [r2, #1]
 8005dd4:	f36f 0300 	bfc	r3, #0, #1
 8005dd8:	7053      	strb	r3, [r2, #1]
    Buffs.Reg02.bSEEKUP = 1;
 8005dda:	4a5a      	ldr	r2, [pc, #360]	; (8005f44 <rda5807_SetupDefault+0x1b4>)
 8005ddc:	7853      	ldrb	r3, [r2, #1]
 8005dde:	f043 0302 	orr.w	r3, r3, #2
 8005de2:	7053      	strb	r3, [r2, #1]
    Buffs.Reg02.bRCLK_DirectInput = 0;
 8005de4:	4a57      	ldr	r2, [pc, #348]	; (8005f44 <rda5807_SetupDefault+0x1b4>)
 8005de6:	7853      	ldrb	r3, [r2, #1]
 8005de8:	f36f 0382 	bfc	r3, #2, #1
 8005dec:	7053      	strb	r3, [r2, #1]
    Buffs.Reg02.bRCLK_NonCalibMode = 0;
 8005dee:	4a55      	ldr	r2, [pc, #340]	; (8005f44 <rda5807_SetupDefault+0x1b4>)
 8005df0:	7853      	ldrb	r3, [r2, #1]
 8005df2:	f36f 03c3 	bfc	r3, #3, #1
 8005df6:	7053      	strb	r3, [r2, #1]
    Buffs.Reg02.bBASS = 0;
 8005df8:	4a52      	ldr	r2, [pc, #328]	; (8005f44 <rda5807_SetupDefault+0x1b4>)
 8005dfa:	7853      	ldrb	r3, [r2, #1]
 8005dfc:	f36f 1304 	bfc	r3, #4, #1
 8005e00:	7053      	strb	r3, [r2, #1]
    Buffs.Reg02.bMONO = 0;
 8005e02:	4a50      	ldr	r2, [pc, #320]	; (8005f44 <rda5807_SetupDefault+0x1b4>)
 8005e04:	7853      	ldrb	r3, [r2, #1]
 8005e06:	f36f 1345 	bfc	r3, #5, #1
 8005e0a:	7053      	strb	r3, [r2, #1]
    Buffs.Reg02.bDMUTE = 1;
 8005e0c:	4a4d      	ldr	r2, [pc, #308]	; (8005f44 <rda5807_SetupDefault+0x1b4>)
 8005e0e:	7853      	ldrb	r3, [r2, #1]
 8005e10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e14:	7053      	strb	r3, [r2, #1]
    Buffs.Reg02.bDHIZ = 1;
 8005e16:	4a4b      	ldr	r2, [pc, #300]	; (8005f44 <rda5807_SetupDefault+0x1b4>)
 8005e18:	7853      	ldrb	r3, [r2, #1]
 8005e1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e1e:	7053      	strb	r3, [r2, #1]
    // Регистр 0x03
    Buffs.Reg03.bSPACE = 0;//Step;//0;   // Шаг настройки - 0 = 100 КГц
 8005e20:	4a48      	ldr	r2, [pc, #288]	; (8005f44 <rda5807_SetupDefault+0x1b4>)
 8005e22:	7893      	ldrb	r3, [r2, #2]
 8005e24:	f36f 0301 	bfc	r3, #0, #2
 8005e28:	7093      	strb	r3, [r2, #2]
    Buffs.Reg03.bBAND = Band;//2;//0;    // Диапазон 2 - 76–108 MHz
 8005e2a:	4b47      	ldr	r3, [pc, #284]	; (8005f48 <rda5807_SetupDefault+0x1b8>)
 8005e2c:	781b      	ldrb	r3, [r3, #0]
 8005e2e:	f003 0303 	and.w	r3, r3, #3
 8005e32:	b2d9      	uxtb	r1, r3
 8005e34:	4a43      	ldr	r2, [pc, #268]	; (8005f44 <rda5807_SetupDefault+0x1b4>)
 8005e36:	7893      	ldrb	r3, [r2, #2]
 8005e38:	f361 0383 	bfi	r3, r1, #2, #2
 8005e3c:	7093      	strb	r3, [r2, #2]
    Buffs.Reg03.bTUNE = 1;
 8005e3e:	4a41      	ldr	r2, [pc, #260]	; (8005f44 <rda5807_SetupDefault+0x1b4>)
 8005e40:	7893      	ldrb	r3, [r2, #2]
 8005e42:	f043 0310 	orr.w	r3, r3, #16
 8005e46:	7093      	strb	r3, [r2, #2]
    Buffs.Reg03.bDIRECT_MODE = 0;
 8005e48:	4a3e      	ldr	r2, [pc, #248]	; (8005f44 <rda5807_SetupDefault+0x1b4>)
 8005e4a:	7893      	ldrb	r3, [r2, #2]
 8005e4c:	f36f 1345 	bfc	r3, #5, #1
 8005e50:	7093      	strb	r3, [r2, #2]
    Buffs.Reg03.bCHAN = 0;
 8005e52:	4a3c      	ldr	r2, [pc, #240]	; (8005f44 <rda5807_SetupDefault+0x1b4>)
 8005e54:	8853      	ldrh	r3, [r2, #2]
 8005e56:	f36f 138f 	bfc	r3, #6, #10
 8005e5a:	8053      	strh	r3, [r2, #2]
    // Регистр 0x04
    Buffs.Reg04.bRSVD1 = 0;
 8005e5c:	4b39      	ldr	r3, [pc, #228]	; (8005f44 <rda5807_SetupDefault+0x1b4>)
 8005e5e:	2200      	movs	r2, #0
 8005e60:	711a      	strb	r2, [r3, #4]
    Buffs.Reg04.bAFCD = 0;
 8005e62:	4a38      	ldr	r2, [pc, #224]	; (8005f44 <rda5807_SetupDefault+0x1b4>)
 8005e64:	7953      	ldrb	r3, [r2, #5]
 8005e66:	f36f 0300 	bfc	r3, #0, #1
 8005e6a:	7153      	strb	r3, [r2, #5]
    Buffs.Reg04.bSOFTMUTE_EN = 1;
 8005e6c:	4a35      	ldr	r2, [pc, #212]	; (8005f44 <rda5807_SetupDefault+0x1b4>)
 8005e6e:	7953      	ldrb	r3, [r2, #5]
 8005e70:	f043 0302 	orr.w	r3, r3, #2
 8005e74:	7153      	strb	r3, [r2, #5]
    Buffs.Reg04.bRSVD2 = 0;
 8005e76:	4a33      	ldr	r2, [pc, #204]	; (8005f44 <rda5807_SetupDefault+0x1b4>)
 8005e78:	7953      	ldrb	r3, [r2, #5]
 8005e7a:	f36f 0382 	bfc	r3, #2, #1
 8005e7e:	7153      	strb	r3, [r2, #5]
    Buffs.Reg04.bDE = 0;
 8005e80:	4a30      	ldr	r2, [pc, #192]	; (8005f44 <rda5807_SetupDefault+0x1b4>)
 8005e82:	7953      	ldrb	r3, [r2, #5]
 8005e84:	f36f 03c3 	bfc	r3, #3, #1
 8005e88:	7153      	strb	r3, [r2, #5]
    Buffs.Reg04.bRSVD3 = 0;
 8005e8a:	4a2e      	ldr	r2, [pc, #184]	; (8005f44 <rda5807_SetupDefault+0x1b4>)
 8005e8c:	7953      	ldrb	r3, [r2, #5]
 8005e8e:	f36f 1307 	bfc	r3, #4, #4
 8005e92:	7153      	strb	r3, [r2, #5]
    // Регистр 0x05
    Buffs.Reg05.bVOLUME = 0;
 8005e94:	4a2b      	ldr	r2, [pc, #172]	; (8005f44 <rda5807_SetupDefault+0x1b4>)
 8005e96:	7993      	ldrb	r3, [r2, #6]
 8005e98:	f36f 0303 	bfc	r3, #0, #4
 8005e9c:	7193      	strb	r3, [r2, #6]
    Buffs.Reg05.bANT_GAIN = 0;
 8005e9e:	4a29      	ldr	r2, [pc, #164]	; (8005f44 <rda5807_SetupDefault+0x1b4>)
 8005ea0:	7993      	ldrb	r3, [r2, #6]
 8005ea2:	f36f 1305 	bfc	r3, #4, #2
 8005ea6:	7193      	strb	r3, [r2, #6]
    Buffs.Reg05.bANT_TYPE = ANT_TYPE_Both;//ANT_TYPE_External;//ANT_TYPE_Headphones;//ANT_TYPE_Both;
 8005ea8:	4a26      	ldr	r2, [pc, #152]	; (8005f44 <rda5807_SetupDefault+0x1b4>)
 8005eaa:	7993      	ldrb	r3, [r2, #6]
 8005eac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005eb0:	7193      	strb	r3, [r2, #6]
    Buffs.Reg05.bSEEKTH = 8;
 8005eb2:	4a24      	ldr	r2, [pc, #144]	; (8005f44 <rda5807_SetupDefault+0x1b4>)
 8005eb4:	79d3      	ldrb	r3, [r2, #7]
 8005eb6:	2108      	movs	r1, #8
 8005eb8:	f361 0303 	bfi	r3, r1, #0, #4
 8005ebc:	71d3      	strb	r3, [r2, #7]
    Buffs.Reg05.bRSVD3 = 0;
 8005ebe:	4a21      	ldr	r2, [pc, #132]	; (8005f44 <rda5807_SetupDefault+0x1b4>)
 8005ec0:	79d3      	ldrb	r3, [r2, #7]
 8005ec2:	f36f 1306 	bfc	r3, #4, #3
 8005ec6:	71d3      	strb	r3, [r2, #7]
    Buffs.Reg05.bINT_MODE = 1;
 8005ec8:	4a1e      	ldr	r2, [pc, #120]	; (8005f44 <rda5807_SetupDefault+0x1b4>)
 8005eca:	79d3      	ldrb	r3, [r2, #7]
 8005ecc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ed0:	71d3      	strb	r3, [r2, #7]
    // Регистр 0x06
    Buffs.Reg06.bRSVD1 = 0;
 8005ed2:	4a1c      	ldr	r2, [pc, #112]	; (8005f44 <rda5807_SetupDefault+0x1b4>)
 8005ed4:	8913      	ldrh	r3, [r2, #8]
 8005ed6:	f36f 030c 	bfc	r3, #0, #13
 8005eda:	8113      	strh	r3, [r2, #8]
    Buffs.Reg06.bOPEN_MODE = 0;
 8005edc:	4a19      	ldr	r2, [pc, #100]	; (8005f44 <rda5807_SetupDefault+0x1b4>)
 8005ede:	7a53      	ldrb	r3, [r2, #9]
 8005ee0:	f36f 1346 	bfc	r3, #5, #2
 8005ee4:	7253      	strb	r3, [r2, #9]
    Buffs.Reg06.bRSVD2 = 0;
 8005ee6:	4a17      	ldr	r2, [pc, #92]	; (8005f44 <rda5807_SetupDefault+0x1b4>)
 8005ee8:	7a53      	ldrb	r3, [r2, #9]
 8005eea:	f36f 13c7 	bfc	r3, #7, #1
 8005eee:	7253      	strb	r3, [r2, #9]
    // Регистр 0x07
    Buffs.Reg07.bFREQ_MODE = 0;
 8005ef0:	4a14      	ldr	r2, [pc, #80]	; (8005f44 <rda5807_SetupDefault+0x1b4>)
 8005ef2:	7a93      	ldrb	r3, [r2, #10]
 8005ef4:	f36f 0300 	bfc	r3, #0, #1
 8005ef8:	7293      	strb	r3, [r2, #10]
    Buffs.Reg07.bSOFTBLEND_EN = 1;
 8005efa:	4a12      	ldr	r2, [pc, #72]	; (8005f44 <rda5807_SetupDefault+0x1b4>)
 8005efc:	7a93      	ldrb	r3, [r2, #10]
 8005efe:	f043 0302 	orr.w	r3, r3, #2
 8005f02:	7293      	strb	r3, [r2, #10]
    Buffs.Reg07.bSEEK_TH_OLD = 0;
 8005f04:	4a0f      	ldr	r2, [pc, #60]	; (8005f44 <rda5807_SetupDefault+0x1b4>)
 8005f06:	7a93      	ldrb	r3, [r2, #10]
 8005f08:	f36f 0387 	bfc	r3, #2, #6
 8005f0c:	7293      	strb	r3, [r2, #10]
    Buffs.Reg07.bRSVD1 = 0;
 8005f0e:	4a0d      	ldr	r2, [pc, #52]	; (8005f44 <rda5807_SetupDefault+0x1b4>)
 8005f10:	7ad3      	ldrb	r3, [r2, #11]
 8005f12:	f36f 0300 	bfc	r3, #0, #1
 8005f16:	72d3      	strb	r3, [r2, #11]
    Buffs.Reg07.b65M_50M_MODE = 1;
 8005f18:	4a0a      	ldr	r2, [pc, #40]	; (8005f44 <rda5807_SetupDefault+0x1b4>)
 8005f1a:	7ad3      	ldrb	r3, [r2, #11]
 8005f1c:	f043 0302 	orr.w	r3, r3, #2
 8005f20:	72d3      	strb	r3, [r2, #11]
    Buffs.Reg07.bTH_SOFRBLEND = 16;
 8005f22:	4a08      	ldr	r2, [pc, #32]	; (8005f44 <rda5807_SetupDefault+0x1b4>)
 8005f24:	7ad3      	ldrb	r3, [r2, #11]
 8005f26:	2110      	movs	r1, #16
 8005f28:	f361 0386 	bfi	r3, r1, #2, #5
 8005f2c:	72d3      	strb	r3, [r2, #11]
    Buffs.Reg07.bRSVD2 = 0;
 8005f2e:	4a05      	ldr	r2, [pc, #20]	; (8005f44 <rda5807_SetupDefault+0x1b4>)
 8005f30:	7ad3      	ldrb	r3, [r2, #11]
 8005f32:	f36f 13c7 	bfc	r3, #7, #1
 8005f36:	72d3      	strb	r3, [r2, #11]

    // Пишем регистры функцией записи регистрового файла
    rda5807_write_regfile((uint16_t *)&(Buffs.Reg02), 6);
 8005f38:	2106      	movs	r1, #6
 8005f3a:	4802      	ldr	r0, [pc, #8]	; (8005f44 <rda5807_SetupDefault+0x1b4>)
 8005f3c:	f7ff fe5c 	bl	8005bf8 <rda5807_write_regfile>
}
 8005f40:	bf00      	nop
 8005f42:	bd80      	pop	{r7, pc}
 8005f44:	20003794 	.word	0x20003794
 8005f48:	200001fc 	.word	0x200001fc

08005f4c <rda5807_SetVolume>:

//==============================================================================
// Процедура устанавливает уровень громкости (0..16) выхода rda5807. При Value=0 включает MUTE
//==============================================================================
void rda5807_SetVolume(uint8_t Value)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b084      	sub	sp, #16
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	4603      	mov	r3, r0
 8005f54:	71fb      	strb	r3, [r7, #7]
//tReg02h Reg02;
//tReg05h Reg05;
uint8_t Mute = Value ? 0 : 1;
 8005f56:	79fb      	ldrb	r3, [r7, #7]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	bf0c      	ite	eq
 8005f5c:	2301      	moveq	r3, #1
 8005f5e:	2300      	movne	r3, #0
 8005f60:	b2db      	uxtb	r3, r3
 8005f62:	73fb      	strb	r3, [r7, #15]

    if (Value > 16) Value = 16;
 8005f64:	79fb      	ldrb	r3, [r7, #7]
 8005f66:	2b10      	cmp	r3, #16
 8005f68:	d901      	bls.n	8005f6e <rda5807_SetVolume+0x22>
 8005f6a:	2310      	movs	r3, #16
 8005f6c:	71fb      	strb	r3, [r7, #7]

    Value--;    // Значение для поля Volume на 1 меньше, чем входной параметр функции
 8005f6e:	79fb      	ldrb	r3, [r7, #7]
 8005f70:	3b01      	subs	r3, #1
 8005f72:	71fb      	strb	r3, [r7, #7]

    if (!Mute) {
 8005f74:	7bfb      	ldrb	r3, [r7, #15]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d112      	bne.n	8005fa0 <rda5807_SetVolume+0x54>
        // Читаем регистр 0x05
        rda5807_read(5, (uint16_t *)&Buffs.Reg05, 1);
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	4915      	ldr	r1, [pc, #84]	; (8005fd4 <rda5807_SetVolume+0x88>)
 8005f7e:	2005      	movs	r0, #5
 8005f80:	f7ff fe6e 	bl	8005c60 <rda5807_read>
        // Меняем значение поля VOLUME
        Buffs.Reg05.bVOLUME = Value;
 8005f84:	79fb      	ldrb	r3, [r7, #7]
 8005f86:	f003 030f 	and.w	r3, r3, #15
 8005f8a:	b2d9      	uxtb	r1, r3
 8005f8c:	4a12      	ldr	r2, [pc, #72]	; (8005fd8 <rda5807_SetVolume+0x8c>)
 8005f8e:	7993      	ldrb	r3, [r2, #6]
 8005f90:	f361 0303 	bfi	r3, r1, #0, #4
 8005f94:	7193      	strb	r3, [r2, #6]
        // Пишем регистр 0x05
        rda5807_write(5, (uint16_t *)&Buffs.Reg05, 1);
 8005f96:	2201      	movs	r2, #1
 8005f98:	490e      	ldr	r1, [pc, #56]	; (8005fd4 <rda5807_SetVolume+0x88>)
 8005f9a:	2005      	movs	r0, #5
 8005f9c:	f7ff fe94 	bl	8005cc8 <rda5807_write>
    }

    // Читаем регистр 0x02
    rda5807_read(2, (uint16_t *)&Buffs.Reg02, 1);
 8005fa0:	2201      	movs	r2, #1
 8005fa2:	490d      	ldr	r1, [pc, #52]	; (8005fd8 <rda5807_SetVolume+0x8c>)
 8005fa4:	2002      	movs	r0, #2
 8005fa6:	f7ff fe5b 	bl	8005c60 <rda5807_read>
    // Меняем значение поля VOLUME
    Buffs.Reg02.bDMUTE = Mute ? 0 : 1;
 8005faa:	7bfb      	ldrb	r3, [r7, #15]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	bf0c      	ite	eq
 8005fb0:	2301      	moveq	r3, #1
 8005fb2:	2300      	movne	r3, #0
 8005fb4:	b2d9      	uxtb	r1, r3
 8005fb6:	4a08      	ldr	r2, [pc, #32]	; (8005fd8 <rda5807_SetVolume+0x8c>)
 8005fb8:	7853      	ldrb	r3, [r2, #1]
 8005fba:	f361 1386 	bfi	r3, r1, #6, #1
 8005fbe:	7053      	strb	r3, [r2, #1]
    // Пишем регистр 0x02
    rda5807_write(2, (uint16_t *)&Buffs.Reg02, 1);
 8005fc0:	2201      	movs	r2, #1
 8005fc2:	4905      	ldr	r1, [pc, #20]	; (8005fd8 <rda5807_SetVolume+0x8c>)
 8005fc4:	2002      	movs	r0, #2
 8005fc6:	f7ff fe7f 	bl	8005cc8 <rda5807_write>
}
 8005fca:	bf00      	nop
 8005fcc:	3710      	adds	r7, #16
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}
 8005fd2:	bf00      	nop
 8005fd4:	2000379a 	.word	0x2000379a
 8005fd8:	20003794 	.word	0x20003794

08005fdc <rda5807_SetBassBoost>:

//==============================================================================
// Процедура включает/выключает BassBoost
//==============================================================================
void rda5807_SetBassBoost(uint8_t Value)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b082      	sub	sp, #8
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	71fb      	strb	r3, [r7, #7]
//tReg02h Reg02;

    // Читаем регистр 0x02
    rda5807_read(2, (uint16_t *)&Buffs.Reg02, 1);
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	490b      	ldr	r1, [pc, #44]	; (8006018 <rda5807_SetBassBoost+0x3c>)
 8005fea:	2002      	movs	r0, #2
 8005fec:	f7ff fe38 	bl	8005c60 <rda5807_read>
    // Меняем значение поля BASS
    Buffs.Reg02.bBASS = (Value) ? 1 : 0;
 8005ff0:	79fb      	ldrb	r3, [r7, #7]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	bf14      	ite	ne
 8005ff6:	2301      	movne	r3, #1
 8005ff8:	2300      	moveq	r3, #0
 8005ffa:	b2d9      	uxtb	r1, r3
 8005ffc:	4a06      	ldr	r2, [pc, #24]	; (8006018 <rda5807_SetBassBoost+0x3c>)
 8005ffe:	7853      	ldrb	r3, [r2, #1]
 8006000:	f361 1304 	bfi	r3, r1, #4, #1
 8006004:	7053      	strb	r3, [r2, #1]
    // Пишем регистр 0x02
    rda5807_write(2, (uint16_t *)&Buffs.Reg02, 1);
 8006006:	2201      	movs	r2, #1
 8006008:	4903      	ldr	r1, [pc, #12]	; (8006018 <rda5807_SetBassBoost+0x3c>)
 800600a:	2002      	movs	r0, #2
 800600c:	f7ff fe5c 	bl	8005cc8 <rda5807_write>
}
 8006010:	bf00      	nop
 8006012:	3708      	adds	r7, #8
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}
 8006018:	20003794 	.word	0x20003794

0800601c <rda5807_SetFreq_In100Khz>:
//==============================================================================
// Процедура устанавливает текущую частоту Freq100kHz и стартует перенастройку rda5807 на эту частоту.
// Окончание процесса можно установки можно проконтроллировать по обнулению бита STR в регистре 0x0A (функцией rda5807_Get_SeekTuneReadyFlag)
//==============================================================================
void rda5807_SetFreq_In100Khz(uint16_t Freq100kHz)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b084      	sub	sp, #16
 8006020:	af00      	add	r7, sp, #0
 8006022:	4603      	mov	r3, r0
 8006024:	80fb      	strh	r3, [r7, #6]
//tReg03h Reg03;
uint16_t l = 870, r = 1080;
 8006026:	f240 3366 	movw	r3, #870	; 0x366
 800602a:	81fb      	strh	r3, [r7, #14]
 800602c:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8006030:	81bb      	strh	r3, [r7, #12]

    // Проверка входного параметра для диапазона Buffs.Reg03.bBAND
	switch (Buffs.Reg03.bBAND) {    // Диапазон 87–108 MHz
 8006032:	4b33      	ldr	r3, [pc, #204]	; (8006100 <rda5807_SetFreq_In100Khz+0xe4>)
 8006034:	789b      	ldrb	r3, [r3, #2]
 8006036:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800603a:	b2db      	uxtb	r3, r3
 800603c:	2b03      	cmp	r3, #3
 800603e:	d011      	beq.n	8006064 <rda5807_SetFreq_In100Khz+0x48>
 8006040:	2b03      	cmp	r3, #3
 8006042:	dc16      	bgt.n	8006072 <rda5807_SetFreq_In100Khz+0x56>
 8006044:	2b01      	cmp	r3, #1
 8006046:	d002      	beq.n	800604e <rda5807_SetFreq_In100Khz+0x32>
 8006048:	2b02      	cmp	r3, #2
 800604a:	d007      	beq.n	800605c <rda5807_SetFreq_In100Khz+0x40>
 800604c:	e011      	b.n	8006072 <rda5807_SetFreq_In100Khz+0x56>
		//case 0:// 00 = 87–108 MHz (US/Europe)
		//break;
		case 1:// 01 = 76–91 MHz (Japan)
			l = 760;
 800604e:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 8006052:	81fb      	strh	r3, [r7, #14]
			r = 910;
 8006054:	f240 338e 	movw	r3, #910	; 0x38e
 8006058:	81bb      	strh	r3, [r7, #12]
		break;
 800605a:	e00a      	b.n	8006072 <rda5807_SetFreq_In100Khz+0x56>
		case 2:// 10 = 76–108 MHz (world wide)
			l = 760;
 800605c:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 8006060:	81fb      	strh	r3, [r7, #14]
		break;
 8006062:	e006      	b.n	8006072 <rda5807_SetFreq_In100Khz+0x56>
		case 3:// 11 = 65 –76 MHz (East Europe) or 50-65MHz
			l = 650;
 8006064:	f240 238a 	movw	r3, #650	; 0x28a
 8006068:	81fb      	strh	r3, [r7, #14]
			r = 760;
 800606a:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 800606e:	81bb      	strh	r3, [r7, #12]
		break;
 8006070:	bf00      	nop
	}
	lBand = ((float)l) / 10;
 8006072:	89fb      	ldrh	r3, [r7, #14]
 8006074:	ee07 3a90 	vmov	s15, r3
 8006078:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800607c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8006080:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006084:	4b1f      	ldr	r3, [pc, #124]	; (8006104 <rda5807_SetFreq_In100Khz+0xe8>)
 8006086:	edc3 7a00 	vstr	s15, [r3]
	rBand = ((float)r) / 10;
 800608a:	89bb      	ldrh	r3, [r7, #12]
 800608c:	ee07 3a90 	vmov	s15, r3
 8006090:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006094:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8006098:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800609c:	4b1a      	ldr	r3, [pc, #104]	; (8006108 <rda5807_SetFreq_In100Khz+0xec>)
 800609e:	edc3 7a00 	vstr	s15, [r3]

    if (Freq100kHz < l)  Freq100kHz = l;
 80060a2:	88fa      	ldrh	r2, [r7, #6]
 80060a4:	89fb      	ldrh	r3, [r7, #14]
 80060a6:	429a      	cmp	r2, r3
 80060a8:	d201      	bcs.n	80060ae <rda5807_SetFreq_In100Khz+0x92>
 80060aa:	89fb      	ldrh	r3, [r7, #14]
 80060ac:	80fb      	strh	r3, [r7, #6]
    if (Freq100kHz > r) Freq100kHz = r;
 80060ae:	88fa      	ldrh	r2, [r7, #6]
 80060b0:	89bb      	ldrh	r3, [r7, #12]
 80060b2:	429a      	cmp	r2, r3
 80060b4:	d901      	bls.n	80060ba <rda5807_SetFreq_In100Khz+0x9e>
 80060b6:	89bb      	ldrh	r3, [r7, #12]
 80060b8:	80fb      	strh	r3, [r7, #6]

    // Вычитаем начало диапазона (left)
    Freq100kHz -= l;
 80060ba:	88fa      	ldrh	r2, [r7, #6]
 80060bc:	89fb      	ldrh	r3, [r7, #14]
 80060be:	1ad3      	subs	r3, r2, r3
 80060c0:	80fb      	strh	r3, [r7, #6]

    // Читаем регистр 0x03
    rda5807_read(3, (uint16_t *)&Buffs.Reg03, 1);
 80060c2:	2201      	movs	r2, #1
 80060c4:	4911      	ldr	r1, [pc, #68]	; (800610c <rda5807_SetFreq_In100Khz+0xf0>)
 80060c6:	2003      	movs	r0, #3
 80060c8:	f7ff fdca 	bl	8005c60 <rda5807_read>
    // Меняем значение поля CHAN
    Buffs.Reg03.bCHAN = Freq100kHz;
 80060cc:	88fb      	ldrh	r3, [r7, #6]
 80060ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80060d2:	b299      	uxth	r1, r3
 80060d4:	4a0a      	ldr	r2, [pc, #40]	; (8006100 <rda5807_SetFreq_In100Khz+0xe4>)
 80060d6:	8853      	ldrh	r3, [r2, #2]
 80060d8:	f361 138f 	bfi	r3, r1, #6, #10
 80060dc:	8053      	strh	r3, [r2, #2]
    // Выставляем флаг начала перенастройки на канал
    Buffs.Reg03.bTUNE = 1;
 80060de:	4a08      	ldr	r2, [pc, #32]	; (8006100 <rda5807_SetFreq_In100Khz+0xe4>)
 80060e0:	7893      	ldrb	r3, [r2, #2]
 80060e2:	f043 0310 	orr.w	r3, r3, #16
 80060e6:	7093      	strb	r3, [r2, #2]
    // Пишем регистр 0x03
    rda5807_write(3, (uint16_t *)&Buffs.Reg03, 1);
 80060e8:	2201      	movs	r2, #1
 80060ea:	4908      	ldr	r1, [pc, #32]	; (800610c <rda5807_SetFreq_In100Khz+0xf0>)
 80060ec:	2003      	movs	r0, #3
 80060ee:	f7ff fdeb 	bl	8005cc8 <rda5807_write>

    HAL_Delay(50);
 80060f2:	2032      	movs	r0, #50	; 0x32
 80060f4:	f001 fcae 	bl	8007a54 <HAL_Delay>
}
 80060f8:	bf00      	nop
 80060fa:	3710      	adds	r7, #16
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bd80      	pop	{r7, pc}
 8006100:	20003794 	.word	0x20003794
 8006104:	20003014 	.word	0x20003014
 8006108:	20003018 	.word	0x20003018
 800610c:	20003796 	.word	0x20003796

08006110 <rda5807_GetFreq_In100Khz>:

//==============================================================================
// Функция читает текущую частоту, на которую настроен rda5807
//==============================================================================
uint16_t rda5807_GetFreq_In100Khz()
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b082      	sub	sp, #8
 8006114:	af00      	add	r7, sp, #0
//tReg0Ah reg0A;

    // Читаем регистр 0x0A
    rda5807_read(0x0A, (uint16_t *)&Buffs.Reg0A, 1);
 8006116:	2201      	movs	r2, #1
 8006118:	491b      	ldr	r1, [pc, #108]	; (8006188 <rda5807_GetFreq_In100Khz+0x78>)
 800611a:	200a      	movs	r0, #10
 800611c:	f7ff fda0 	bl	8005c60 <rda5807_read>

    uint16_t Freq100kHz = Buffs.Reg0A.bREADCHAN;
 8006120:	4b1a      	ldr	r3, [pc, #104]	; (800618c <rda5807_GetFreq_In100Khz+0x7c>)
 8006122:	8a1b      	ldrh	r3, [r3, #16]
 8006124:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006128:	b29b      	uxth	r3, r3
 800612a:	80bb      	strh	r3, [r7, #4]

    if (Freq100kHz == 319) return 0;
 800612c:	88bb      	ldrh	r3, [r7, #4]
 800612e:	f240 123f 	movw	r2, #319	; 0x13f
 8006132:	4293      	cmp	r3, r2
 8006134:	d101      	bne.n	800613a <rda5807_GetFreq_In100Khz+0x2a>
 8006136:	2300      	movs	r3, #0
 8006138:	e021      	b.n	800617e <rda5807_GetFreq_In100Khz+0x6e>

    // Прибавляем начало диапазона (87 МГц)
    uint16_t left = 870;
 800613a:	f240 3366 	movw	r3, #870	; 0x366
 800613e:	80fb      	strh	r3, [r7, #6]
    switch (Buffs.Reg03.bBAND) {    // Диапазон 87–108 MHz
 8006140:	4b12      	ldr	r3, [pc, #72]	; (800618c <rda5807_GetFreq_In100Khz+0x7c>)
 8006142:	789b      	ldrb	r3, [r3, #2]
 8006144:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8006148:	b2db      	uxtb	r3, r3
 800614a:	2b03      	cmp	r3, #3
 800614c:	d00e      	beq.n	800616c <rda5807_GetFreq_In100Khz+0x5c>
 800614e:	2b03      	cmp	r3, #3
 8006150:	dc10      	bgt.n	8006174 <rda5807_GetFreq_In100Khz+0x64>
 8006152:	2b01      	cmp	r3, #1
 8006154:	d002      	beq.n	800615c <rda5807_GetFreq_In100Khz+0x4c>
 8006156:	2b02      	cmp	r3, #2
 8006158:	d004      	beq.n	8006164 <rda5807_GetFreq_In100Khz+0x54>
 800615a:	e00b      	b.n	8006174 <rda5807_GetFreq_In100Khz+0x64>
    	//case 0:// 00 = 87–108 MHz (US/Europe)
    	//break;
    	case 1:// 01 = 76–91 MHz (Japan)
    		left = 760;
 800615c:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 8006160:	80fb      	strh	r3, [r7, #6]
    	break;
 8006162:	e007      	b.n	8006174 <rda5807_GetFreq_In100Khz+0x64>
    	case 2:// 10 = 76–108 MHz (world wide)
    		left = 760;
 8006164:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 8006168:	80fb      	strh	r3, [r7, #6]
    	break;
 800616a:	e003      	b.n	8006174 <rda5807_GetFreq_In100Khz+0x64>
    	case 3:// 11 = 65 –76 MHz (East Europe) or 50-65MHz
    		left = 650;
 800616c:	f240 238a 	movw	r3, #650	; 0x28a
 8006170:	80fb      	strh	r3, [r7, #6]
    	break;
 8006172:	bf00      	nop
    }
    Freq100kHz += left;
 8006174:	88ba      	ldrh	r2, [r7, #4]
 8006176:	88fb      	ldrh	r3, [r7, #6]
 8006178:	4413      	add	r3, r2
 800617a:	80bb      	strh	r3, [r7, #4]

    return Freq100kHz;
 800617c:	88bb      	ldrh	r3, [r7, #4]
}
 800617e:	4618      	mov	r0, r3
 8006180:	3708      	adds	r7, #8
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}
 8006186:	bf00      	nop
 8006188:	200037a4 	.word	0x200037a4
 800618c:	20003794 	.word	0x20003794

08006190 <rda5807_StartSeek>:

//==============================================================================
// Процедура стартует поиск радиостанции вверх/вниз
//==============================================================================
void rda5807_StartSeek(uint8_t Up)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b082      	sub	sp, #8
 8006194:	af00      	add	r7, sp, #0
 8006196:	4603      	mov	r3, r0
 8006198:	71fb      	strb	r3, [r7, #7]
//tReg02h Reg02;

    // Читаем регистр 0x02
    rda5807_read(2, (uint16_t *)&Buffs.Reg02, 1);
 800619a:	2201      	movs	r2, #1
 800619c:	4910      	ldr	r1, [pc, #64]	; (80061e0 <rda5807_StartSeek+0x50>)
 800619e:	2002      	movs	r0, #2
 80061a0:	f7ff fd5e 	bl	8005c60 <rda5807_read>

    Buffs.Reg02.bSKMODE = 1;          // 07 Seek Mode (0 = wrap at the upper or lower band limit and continue seeking; 1 = stop seeking at the upper or lower band limit)
 80061a4:	4a0e      	ldr	r2, [pc, #56]	; (80061e0 <rda5807_StartSeek+0x50>)
 80061a6:	7813      	ldrb	r3, [r2, #0]
 80061a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061ac:	7013      	strb	r3, [r2, #0]
    Buffs.Reg02.bSEEK = 1;            // 08 Seek (0 = Disable stop seek; 1 = Enable)
 80061ae:	4a0c      	ldr	r2, [pc, #48]	; (80061e0 <rda5807_StartSeek+0x50>)
 80061b0:	7853      	ldrb	r3, [r2, #1]
 80061b2:	f043 0301 	orr.w	r3, r3, #1
 80061b6:	7053      	strb	r3, [r2, #1]
    Buffs.Reg02.bSEEKUP = Up ? 1 : 0; // 09 Seek Up (0 = Seek down; 1 = Seek up)
 80061b8:	79fb      	ldrb	r3, [r7, #7]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	bf14      	ite	ne
 80061be:	2301      	movne	r3, #1
 80061c0:	2300      	moveq	r3, #0
 80061c2:	b2d9      	uxtb	r1, r3
 80061c4:	4a06      	ldr	r2, [pc, #24]	; (80061e0 <rda5807_StartSeek+0x50>)
 80061c6:	7853      	ldrb	r3, [r2, #1]
 80061c8:	f361 0341 	bfi	r3, r1, #1, #1
 80061cc:	7053      	strb	r3, [r2, #1]

    // Пишем регистр 0x02
    rda5807_write(2, (uint16_t *)&Buffs.Reg02, 1);
 80061ce:	2201      	movs	r2, #1
 80061d0:	4903      	ldr	r1, [pc, #12]	; (80061e0 <rda5807_StartSeek+0x50>)
 80061d2:	2002      	movs	r0, #2
 80061d4:	f7ff fd78 	bl	8005cc8 <rda5807_write>
}
 80061d8:	bf00      	nop
 80061da:	3708      	adds	r7, #8
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}
 80061e0:	20003794 	.word	0x20003794

080061e4 <rda5807_Get_SeekTuneReadyFlag>:
//==============================================================================
// Функция возвращает состояние бита STR (SeekTuneReadyFlag)
// SeekTuneReadyFlag=1 пока идёт процесс настройки на частоту или поиск радиостанции.
//==============================================================================
uint8_t rda5807_Get_SeekTuneReadyFlag()
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	af00      	add	r7, sp, #0
//tReg0Ah reg0A;

    // Читаем регистр 0x0A
    rda5807_read(0x0A, (uint16_t *)&Buffs.Reg0A, 1);
 80061e8:	2201      	movs	r2, #1
 80061ea:	4905      	ldr	r1, [pc, #20]	; (8006200 <rda5807_Get_SeekTuneReadyFlag+0x1c>)
 80061ec:	200a      	movs	r0, #10
 80061ee:	f7ff fd37 	bl	8005c60 <rda5807_read>

    return Buffs.Reg0A.bSTC;
 80061f2:	4b04      	ldr	r3, [pc, #16]	; (8006204 <rda5807_Get_SeekTuneReadyFlag+0x20>)
 80061f4:	7c5b      	ldrb	r3, [r3, #17]
 80061f6:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80061fa:	b2db      	uxtb	r3, r3
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	bd80      	pop	{r7, pc}
 8006200:	200037a4 	.word	0x200037a4
 8006204:	20003794 	.word	0x20003794

08006208 <rda5807_Get_StereoMonoFlag>:
//==============================================================================
//==============================================================================
bool rda5807_Get_StereoMonoFlag()
{
 8006208:	b580      	push	{r7, lr}
 800620a:	af00      	add	r7, sp, #0
//tReg0Ah reg0A;

    // Читаем регистр 0x0A
    rda5807_read(0x0A, (uint16_t *)&Buffs.Reg0A, 1);
 800620c:	2201      	movs	r2, #1
 800620e:	4908      	ldr	r1, [pc, #32]	; (8006230 <rda5807_Get_StereoMonoFlag+0x28>)
 8006210:	200a      	movs	r0, #10
 8006212:	f7ff fd25 	bl	8005c60 <rda5807_read>

    return Buffs.Reg0A.bST;     // Stereo Indicator (0 = Mono; 1 = Stereo)
 8006216:	4b07      	ldr	r3, [pc, #28]	; (8006234 <rda5807_Get_StereoMonoFlag+0x2c>)
 8006218:	7c5b      	ldrb	r3, [r3, #17]
 800621a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800621e:	b2db      	uxtb	r3, r3
 8006220:	2b00      	cmp	r3, #0
 8006222:	bf14      	ite	ne
 8006224:	2301      	movne	r3, #1
 8006226:	2300      	moveq	r3, #0
 8006228:	b2db      	uxtb	r3, r3
}
 800622a:	4618      	mov	r0, r3
 800622c:	bd80      	pop	{r7, pc}
 800622e:	bf00      	nop
 8006230:	200037a4 	.word	0x200037a4
 8006234:	20003794 	.word	0x20003794

08006238 <rda5807_Get_Channel>:
//==============================================================================
uint16_t rda5807_Get_Channel()
{
 8006238:	b580      	push	{r7, lr}
 800623a:	af00      	add	r7, sp, #0
//tReg0Ah reg0A;

    // Читаем регистр 0x0A
    rda5807_read(0x0A, (uint16_t *)&Buffs.Reg0A, 1);
 800623c:	2201      	movs	r2, #1
 800623e:	4905      	ldr	r1, [pc, #20]	; (8006254 <rda5807_Get_Channel+0x1c>)
 8006240:	200a      	movs	r0, #10
 8006242:	f7ff fd0d 	bl	8005c60 <rda5807_read>

    return Buffs.Reg0A.bREADCHAN;    // 0-9 Read Channel.
 8006246:	4b04      	ldr	r3, [pc, #16]	; (8006258 <rda5807_Get_Channel+0x20>)
 8006248:	8a1b      	ldrh	r3, [r3, #16]
 800624a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800624e:	b29b      	uxth	r3, r3
}
 8006250:	4618      	mov	r0, r3
 8006252:	bd80      	pop	{r7, pc}
 8006254:	200037a4 	.word	0x200037a4
 8006258:	20003794 	.word	0x20003794

0800625c <rda5807_Set_Band>:
//==============================================================================
uint8_t rda5807_Set_Band(uint8_t band)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b084      	sub	sp, #16
 8006260:	af00      	add	r7, sp, #0
 8006262:	4603      	mov	r3, r0
 8006264:	71fb      	strb	r3, [r7, #7]
	if (band > 3) return 1;
 8006266:	79fb      	ldrb	r3, [r7, #7]
 8006268:	2b03      	cmp	r3, #3
 800626a:	d901      	bls.n	8006270 <rda5807_Set_Band+0x14>
 800626c:	2301      	movs	r3, #1
 800626e:	e054      	b.n	800631a <rda5807_Set_Band+0xbe>

    // Читаем регистр 3
    rda5807_read(3, (uint16_t *)&Buffs.Reg03, 1);
 8006270:	2201      	movs	r2, #1
 8006272:	492c      	ldr	r1, [pc, #176]	; (8006324 <rda5807_Set_Band+0xc8>)
 8006274:	2003      	movs	r0, #3
 8006276:	f7ff fcf3 	bl	8005c60 <rda5807_read>

    Buffs.Reg03.bBAND = band;
 800627a:	79fb      	ldrb	r3, [r7, #7]
 800627c:	f003 0303 	and.w	r3, r3, #3
 8006280:	b2d9      	uxtb	r1, r3
 8006282:	4a29      	ldr	r2, [pc, #164]	; (8006328 <rda5807_Set_Band+0xcc>)
 8006284:	7893      	ldrb	r3, [r2, #2]
 8006286:	f361 0383 	bfi	r3, r1, #2, #2
 800628a:	7093      	strb	r3, [r2, #2]

    rda5807_write(3, (uint16_t *)&Buffs.Reg03, 1);
 800628c:	2201      	movs	r2, #1
 800628e:	4925      	ldr	r1, [pc, #148]	; (8006324 <rda5807_Set_Band+0xc8>)
 8006290:	2003      	movs	r0, #3
 8006292:	f7ff fd19 	bl	8005cc8 <rda5807_write>

    uint16_t l = 870, r = 1080;
 8006296:	f240 3366 	movw	r3, #870	; 0x366
 800629a:	81fb      	strh	r3, [r7, #14]
 800629c:	f44f 6387 	mov.w	r3, #1080	; 0x438
 80062a0:	81bb      	strh	r3, [r7, #12]

    switch (Buffs.Reg03.bBAND) {    // Диапазон 87–108 MHz
 80062a2:	4b21      	ldr	r3, [pc, #132]	; (8006328 <rda5807_Set_Band+0xcc>)
 80062a4:	789b      	ldrb	r3, [r3, #2]
 80062a6:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80062aa:	b2db      	uxtb	r3, r3
 80062ac:	2b03      	cmp	r3, #3
 80062ae:	d011      	beq.n	80062d4 <rda5807_Set_Band+0x78>
 80062b0:	2b03      	cmp	r3, #3
 80062b2:	dc16      	bgt.n	80062e2 <rda5807_Set_Band+0x86>
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	d002      	beq.n	80062be <rda5807_Set_Band+0x62>
 80062b8:	2b02      	cmp	r3, #2
 80062ba:	d007      	beq.n	80062cc <rda5807_Set_Band+0x70>
 80062bc:	e011      	b.n	80062e2 <rda5807_Set_Band+0x86>
    	//case 0:// 00 = 87–108 MHz (US/Europe)
    	//break;
    	case 1:// 01 = 76–91 MHz (Japan)
    		l = 760;
 80062be:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 80062c2:	81fb      	strh	r3, [r7, #14]
    		r = 910;
 80062c4:	f240 338e 	movw	r3, #910	; 0x38e
 80062c8:	81bb      	strh	r3, [r7, #12]
    	break;
 80062ca:	e00a      	b.n	80062e2 <rda5807_Set_Band+0x86>
    	case 2:// 10 = 76–108 MHz (world wide)
    		l = 760;
 80062cc:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 80062d0:	81fb      	strh	r3, [r7, #14]
    	break;
 80062d2:	e006      	b.n	80062e2 <rda5807_Set_Band+0x86>
    	case 3:// 11 = 65 –76 MHz (East Europe) or 50-65MHz
    		l = 650;
 80062d4:	f240 238a 	movw	r3, #650	; 0x28a
 80062d8:	81fb      	strh	r3, [r7, #14]
    		r = 760;
 80062da:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 80062de:	81bb      	strh	r3, [r7, #12]
    	break;
 80062e0:	bf00      	nop
    }
    lBand = ((float)l) / 10;
 80062e2:	89fb      	ldrh	r3, [r7, #14]
 80062e4:	ee07 3a90 	vmov	s15, r3
 80062e8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80062ec:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80062f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80062f4:	4b0d      	ldr	r3, [pc, #52]	; (800632c <rda5807_Set_Band+0xd0>)
 80062f6:	edc3 7a00 	vstr	s15, [r3]
    rBand = ((float)r) / 10;
 80062fa:	89bb      	ldrh	r3, [r7, #12]
 80062fc:	ee07 3a90 	vmov	s15, r3
 8006300:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006304:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8006308:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800630c:	4b08      	ldr	r3, [pc, #32]	; (8006330 <rda5807_Set_Band+0xd4>)
 800630e:	edc3 7a00 	vstr	s15, [r3]

    HAL_Delay(50);
 8006312:	2032      	movs	r0, #50	; 0x32
 8006314:	f001 fb9e 	bl	8007a54 <HAL_Delay>

    return 0;
 8006318:	2300      	movs	r3, #0
}
 800631a:	4618      	mov	r0, r3
 800631c:	3710      	adds	r7, #16
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}
 8006322:	bf00      	nop
 8006324:	20003796 	.word	0x20003796
 8006328:	20003794 	.word	0x20003794
 800632c:	20003014 	.word	0x20003014
 8006330:	20003018 	.word	0x20003018

08006334 <rda5807_Set_Mute>:
//==============================================================================
void rda5807_Set_Mute(uint8_t mute)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b082      	sub	sp, #8
 8006338:	af00      	add	r7, sp, #0
 800633a:	4603      	mov	r3, r0
 800633c:	71fb      	strb	r3, [r7, #7]
	// Читаем регистр 2
	rda5807_read(2, (uint16_t *)&Buffs.Reg02, 1);
 800633e:	2201      	movs	r2, #1
 8006340:	490a      	ldr	r1, [pc, #40]	; (800636c <rda5807_Set_Mute+0x38>)
 8006342:	2002      	movs	r0, #2
 8006344:	f7ff fc8c 	bl	8005c60 <rda5807_read>

	Buffs.Reg02.bDMUTE = mute & 1;
 8006348:	79fb      	ldrb	r3, [r7, #7]
 800634a:	f003 0301 	and.w	r3, r3, #1
 800634e:	b2d9      	uxtb	r1, r3
 8006350:	4a06      	ldr	r2, [pc, #24]	; (800636c <rda5807_Set_Mute+0x38>)
 8006352:	7853      	ldrb	r3, [r2, #1]
 8006354:	f361 1386 	bfi	r3, r1, #6, #1
 8006358:	7053      	strb	r3, [r2, #1]

	rda5807_write(2, (uint16_t *)&Buffs.Reg02, 1);
 800635a:	2201      	movs	r2, #1
 800635c:	4903      	ldr	r1, [pc, #12]	; (800636c <rda5807_Set_Mute+0x38>)
 800635e:	2002      	movs	r0, #2
 8006360:	f7ff fcb2 	bl	8005cc8 <rda5807_write>
}
 8006364:	bf00      	nop
 8006366:	3708      	adds	r7, #8
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}
 800636c:	20003794 	.word	0x20003794

08006370 <rda5807_Get_RDSData>:
	return Buffs.Reg0A.bRDSR;
}
*/
//==============================================================================
bool rda5807_Get_RDSData(uint8_t *data, bool *sync)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b082      	sub	sp, #8
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
 8006378:	6039      	str	r1, [r7, #0]
	rda5807_read(0x0A, (uint16_t *)&Buffs.Reg0A, 1);
 800637a:	2201      	movs	r2, #1
 800637c:	4914      	ldr	r1, [pc, #80]	; (80063d0 <rda5807_Get_RDSData+0x60>)
 800637e:	200a      	movs	r0, #10
 8006380:	f7ff fc6e 	bl	8005c60 <rda5807_read>

	*sync = Buffs.Reg0A.bRDSS;
 8006384:	4b13      	ldr	r3, [pc, #76]	; (80063d4 <rda5807_Get_RDSData+0x64>)
 8006386:	7c5b      	ldrb	r3, [r3, #17]
 8006388:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800638c:	b2db      	uxtb	r3, r3
 800638e:	2b00      	cmp	r3, #0
 8006390:	bf14      	ite	ne
 8006392:	2301      	movne	r3, #1
 8006394:	2300      	moveq	r3, #0
 8006396:	b2da      	uxtb	r2, r3
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	701a      	strb	r2, [r3, #0]

	if (Buffs.Reg0A.bRDSR) rda5807_read(0x0C, (uint16_t *)data, 4);
 800639c:	4b0d      	ldr	r3, [pc, #52]	; (80063d4 <rda5807_Get_RDSData+0x64>)
 800639e:	7c5b      	ldrb	r3, [r3, #17]
 80063a0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80063a4:	b2db      	uxtb	r3, r3
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d004      	beq.n	80063b4 <rda5807_Get_RDSData+0x44>
 80063aa:	2204      	movs	r2, #4
 80063ac:	6879      	ldr	r1, [r7, #4]
 80063ae:	200c      	movs	r0, #12
 80063b0:	f7ff fc56 	bl	8005c60 <rda5807_read>

	return Buffs.Reg0A.bRDSR;
 80063b4:	4b07      	ldr	r3, [pc, #28]	; (80063d4 <rda5807_Get_RDSData+0x64>)
 80063b6:	7c5b      	ldrb	r3, [r3, #17]
 80063b8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80063bc:	b2db      	uxtb	r3, r3
 80063be:	2b00      	cmp	r3, #0
 80063c0:	bf14      	ite	ne
 80063c2:	2301      	movne	r3, #1
 80063c4:	2300      	moveq	r3, #0
 80063c6:	b2db      	uxtb	r3, r3
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3708      	adds	r7, #8
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}
 80063d0:	200037a4 	.word	0x200037a4
 80063d4:	20003794 	.word	0x20003794

080063d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80063d8:	b480      	push	{r7}
 80063da:	b083      	sub	sp, #12
 80063dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80063de:	4b0f      	ldr	r3, [pc, #60]	; (800641c <HAL_MspInit+0x44>)
 80063e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063e2:	4a0e      	ldr	r2, [pc, #56]	; (800641c <HAL_MspInit+0x44>)
 80063e4:	f043 0301 	orr.w	r3, r3, #1
 80063e8:	6613      	str	r3, [r2, #96]	; 0x60
 80063ea:	4b0c      	ldr	r3, [pc, #48]	; (800641c <HAL_MspInit+0x44>)
 80063ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063ee:	f003 0301 	and.w	r3, r3, #1
 80063f2:	607b      	str	r3, [r7, #4]
 80063f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80063f6:	4b09      	ldr	r3, [pc, #36]	; (800641c <HAL_MspInit+0x44>)
 80063f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063fa:	4a08      	ldr	r2, [pc, #32]	; (800641c <HAL_MspInit+0x44>)
 80063fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006400:	6593      	str	r3, [r2, #88]	; 0x58
 8006402:	4b06      	ldr	r3, [pc, #24]	; (800641c <HAL_MspInit+0x44>)
 8006404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006406:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800640a:	603b      	str	r3, [r7, #0]
 800640c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800640e:	bf00      	nop
 8006410:	370c      	adds	r7, #12
 8006412:	46bd      	mov	sp, r7
 8006414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006418:	4770      	bx	lr
 800641a:	bf00      	nop
 800641c:	40021000 	.word	0x40021000

08006420 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b0ac      	sub	sp, #176	; 0xb0
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006428:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800642c:	2200      	movs	r2, #0
 800642e:	601a      	str	r2, [r3, #0]
 8006430:	605a      	str	r2, [r3, #4]
 8006432:	609a      	str	r2, [r3, #8]
 8006434:	60da      	str	r2, [r3, #12]
 8006436:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006438:	f107 0314 	add.w	r3, r7, #20
 800643c:	2288      	movs	r2, #136	; 0x88
 800643e:	2100      	movs	r1, #0
 8006440:	4618      	mov	r0, r3
 8006442:	f009 fb21 	bl	800fa88 <memset>
  if(hi2c->Instance==I2C1)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a57      	ldr	r2, [pc, #348]	; (80065a8 <HAL_I2C_MspInit+0x188>)
 800644c:	4293      	cmp	r3, r2
 800644e:	f040 80a7 	bne.w	80065a0 <HAL_I2C_MspInit+0x180>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8006452:	2340      	movs	r3, #64	; 0x40
 8006454:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8006456:	2300      	movs	r3, #0
 8006458:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800645a:	f107 0314 	add.w	r3, r7, #20
 800645e:	4618      	mov	r0, r3
 8006460:	f004 fc8a 	bl	800ad78 <HAL_RCCEx_PeriphCLKConfig>
 8006464:	4603      	mov	r3, r0
 8006466:	2b00      	cmp	r3, #0
 8006468:	d001      	beq.n	800646e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800646a:	f7ff fb11 	bl	8005a90 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800646e:	4b4f      	ldr	r3, [pc, #316]	; (80065ac <HAL_I2C_MspInit+0x18c>)
 8006470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006472:	4a4e      	ldr	r2, [pc, #312]	; (80065ac <HAL_I2C_MspInit+0x18c>)
 8006474:	f043 0302 	orr.w	r3, r3, #2
 8006478:	64d3      	str	r3, [r2, #76]	; 0x4c
 800647a:	4b4c      	ldr	r3, [pc, #304]	; (80065ac <HAL_I2C_MspInit+0x18c>)
 800647c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800647e:	f003 0302 	and.w	r3, r3, #2
 8006482:	613b      	str	r3, [r7, #16]
 8006484:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006486:	23c0      	movs	r3, #192	; 0xc0
 8006488:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800648c:	2312      	movs	r3, #18
 800648e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006492:	2300      	movs	r3, #0
 8006494:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006498:	2302      	movs	r3, #2
 800649a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800649e:	2304      	movs	r3, #4
 80064a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80064a4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80064a8:	4619      	mov	r1, r3
 80064aa:	4841      	ldr	r0, [pc, #260]	; (80065b0 <HAL_I2C_MspInit+0x190>)
 80064ac:	f001 fede 	bl	800826c <HAL_GPIO_Init>

    HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_PB6);
 80064b0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80064b4:	f003 fd40 	bl	8009f38 <HAL_I2CEx_EnableFastModePlus>

    HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_PB7);
 80064b8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80064bc:	f003 fd3c 	bl	8009f38 <HAL_I2CEx_EnableFastModePlus>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80064c0:	4b3a      	ldr	r3, [pc, #232]	; (80065ac <HAL_I2C_MspInit+0x18c>)
 80064c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064c4:	4a39      	ldr	r2, [pc, #228]	; (80065ac <HAL_I2C_MspInit+0x18c>)
 80064c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80064ca:	6593      	str	r3, [r2, #88]	; 0x58
 80064cc:	4b37      	ldr	r3, [pc, #220]	; (80065ac <HAL_I2C_MspInit+0x18c>)
 80064ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80064d4:	60fb      	str	r3, [r7, #12]
 80064d6:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA2_Channel6;
 80064d8:	4b36      	ldr	r3, [pc, #216]	; (80065b4 <HAL_I2C_MspInit+0x194>)
 80064da:	4a37      	ldr	r2, [pc, #220]	; (80065b8 <HAL_I2C_MspInit+0x198>)
 80064dc:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_5;
 80064de:	4b35      	ldr	r3, [pc, #212]	; (80065b4 <HAL_I2C_MspInit+0x194>)
 80064e0:	2205      	movs	r2, #5
 80064e2:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80064e4:	4b33      	ldr	r3, [pc, #204]	; (80065b4 <HAL_I2C_MspInit+0x194>)
 80064e6:	2200      	movs	r2, #0
 80064e8:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80064ea:	4b32      	ldr	r3, [pc, #200]	; (80065b4 <HAL_I2C_MspInit+0x194>)
 80064ec:	2200      	movs	r2, #0
 80064ee:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80064f0:	4b30      	ldr	r3, [pc, #192]	; (80065b4 <HAL_I2C_MspInit+0x194>)
 80064f2:	2280      	movs	r2, #128	; 0x80
 80064f4:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80064f6:	4b2f      	ldr	r3, [pc, #188]	; (80065b4 <HAL_I2C_MspInit+0x194>)
 80064f8:	2200      	movs	r2, #0
 80064fa:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80064fc:	4b2d      	ldr	r3, [pc, #180]	; (80065b4 <HAL_I2C_MspInit+0x194>)
 80064fe:	2200      	movs	r2, #0
 8006500:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8006502:	4b2c      	ldr	r3, [pc, #176]	; (80065b4 <HAL_I2C_MspInit+0x194>)
 8006504:	2200      	movs	r2, #0
 8006506:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006508:	4b2a      	ldr	r3, [pc, #168]	; (80065b4 <HAL_I2C_MspInit+0x194>)
 800650a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800650e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8006510:	4828      	ldr	r0, [pc, #160]	; (80065b4 <HAL_I2C_MspInit+0x194>)
 8006512:	f001 fc27 	bl	8007d64 <HAL_DMA_Init>
 8006516:	4603      	mov	r3, r0
 8006518:	2b00      	cmp	r3, #0
 800651a:	d001      	beq.n	8006520 <HAL_I2C_MspInit+0x100>
    {
      Error_Handler();
 800651c:	f7ff fab8 	bl	8005a90 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	4a24      	ldr	r2, [pc, #144]	; (80065b4 <HAL_I2C_MspInit+0x194>)
 8006524:	63da      	str	r2, [r3, #60]	; 0x3c
 8006526:	4a23      	ldr	r2, [pc, #140]	; (80065b4 <HAL_I2C_MspInit+0x194>)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 800652c:	4b23      	ldr	r3, [pc, #140]	; (80065bc <HAL_I2C_MspInit+0x19c>)
 800652e:	4a24      	ldr	r2, [pc, #144]	; (80065c0 <HAL_I2C_MspInit+0x1a0>)
 8006530:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_3;
 8006532:	4b22      	ldr	r3, [pc, #136]	; (80065bc <HAL_I2C_MspInit+0x19c>)
 8006534:	2203      	movs	r2, #3
 8006536:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006538:	4b20      	ldr	r3, [pc, #128]	; (80065bc <HAL_I2C_MspInit+0x19c>)
 800653a:	2210      	movs	r2, #16
 800653c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800653e:	4b1f      	ldr	r3, [pc, #124]	; (80065bc <HAL_I2C_MspInit+0x19c>)
 8006540:	2200      	movs	r2, #0
 8006542:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006544:	4b1d      	ldr	r3, [pc, #116]	; (80065bc <HAL_I2C_MspInit+0x19c>)
 8006546:	2280      	movs	r2, #128	; 0x80
 8006548:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800654a:	4b1c      	ldr	r3, [pc, #112]	; (80065bc <HAL_I2C_MspInit+0x19c>)
 800654c:	2200      	movs	r2, #0
 800654e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006550:	4b1a      	ldr	r3, [pc, #104]	; (80065bc <HAL_I2C_MspInit+0x19c>)
 8006552:	2200      	movs	r2, #0
 8006554:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8006556:	4b19      	ldr	r3, [pc, #100]	; (80065bc <HAL_I2C_MspInit+0x19c>)
 8006558:	2200      	movs	r2, #0
 800655a:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800655c:	4b17      	ldr	r3, [pc, #92]	; (80065bc <HAL_I2C_MspInit+0x19c>)
 800655e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006562:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8006564:	4815      	ldr	r0, [pc, #84]	; (80065bc <HAL_I2C_MspInit+0x19c>)
 8006566:	f001 fbfd 	bl	8007d64 <HAL_DMA_Init>
 800656a:	4603      	mov	r3, r0
 800656c:	2b00      	cmp	r3, #0
 800656e:	d001      	beq.n	8006574 <HAL_I2C_MspInit+0x154>
    {
      Error_Handler();
 8006570:	f7ff fa8e 	bl	8005a90 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	4a11      	ldr	r2, [pc, #68]	; (80065bc <HAL_I2C_MspInit+0x19c>)
 8006578:	639a      	str	r2, [r3, #56]	; 0x38
 800657a:	4a10      	ldr	r2, [pc, #64]	; (80065bc <HAL_I2C_MspInit+0x19c>)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8006580:	2200      	movs	r2, #0
 8006582:	2100      	movs	r1, #0
 8006584:	201f      	movs	r0, #31
 8006586:	f001 fba8 	bl	8007cda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800658a:	201f      	movs	r0, #31
 800658c:	f001 fbc1 	bl	8007d12 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8006590:	2200      	movs	r2, #0
 8006592:	2100      	movs	r1, #0
 8006594:	2020      	movs	r0, #32
 8006596:	f001 fba0 	bl	8007cda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800659a:	2020      	movs	r0, #32
 800659c:	f001 fbb9 	bl	8007d12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80065a0:	bf00      	nop
 80065a2:	37b0      	adds	r7, #176	; 0xb0
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}
 80065a8:	40005400 	.word	0x40005400
 80065ac:	40021000 	.word	0x40021000
 80065b0:	48000400 	.word	0x48000400
 80065b4:	20000ac4 	.word	0x20000ac4
 80065b8:	4002046c 	.word	0x4002046c
 80065bc:	20000b0c 	.word	0x20000b0c
 80065c0:	4002006c 	.word	0x4002006c

080065c4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b0a4      	sub	sp, #144	; 0x90
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80065cc:	f107 0308 	add.w	r3, r7, #8
 80065d0:	2288      	movs	r2, #136	; 0x88
 80065d2:	2100      	movs	r1, #0
 80065d4:	4618      	mov	r0, r3
 80065d6:	f009 fa57 	bl	800fa88 <memset>
  if(hrtc->Instance==RTC)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a10      	ldr	r2, [pc, #64]	; (8006620 <HAL_RTC_MspInit+0x5c>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d118      	bne.n	8006616 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80065e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80065e8:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80065ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80065ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80065f2:	f107 0308 	add.w	r3, r7, #8
 80065f6:	4618      	mov	r0, r3
 80065f8:	f004 fbbe 	bl	800ad78 <HAL_RCCEx_PeriphCLKConfig>
 80065fc:	4603      	mov	r3, r0
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d001      	beq.n	8006606 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8006602:	f7ff fa45 	bl	8005a90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8006606:	4b07      	ldr	r3, [pc, #28]	; (8006624 <HAL_RTC_MspInit+0x60>)
 8006608:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800660c:	4a05      	ldr	r2, [pc, #20]	; (8006624 <HAL_RTC_MspInit+0x60>)
 800660e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006612:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8006616:	bf00      	nop
 8006618:	3790      	adds	r7, #144	; 0x90
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}
 800661e:	bf00      	nop
 8006620:	40002800 	.word	0x40002800
 8006624:	40021000 	.word	0x40021000

08006628 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b08c      	sub	sp, #48	; 0x30
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006630:	f107 031c 	add.w	r3, r7, #28
 8006634:	2200      	movs	r2, #0
 8006636:	601a      	str	r2, [r3, #0]
 8006638:	605a      	str	r2, [r3, #4]
 800663a:	609a      	str	r2, [r3, #8]
 800663c:	60da      	str	r2, [r3, #12]
 800663e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a76      	ldr	r2, [pc, #472]	; (8006820 <HAL_SPI_MspInit+0x1f8>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d15b      	bne.n	8006702 <HAL_SPI_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800664a:	4b76      	ldr	r3, [pc, #472]	; (8006824 <HAL_SPI_MspInit+0x1fc>)
 800664c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800664e:	4a75      	ldr	r2, [pc, #468]	; (8006824 <HAL_SPI_MspInit+0x1fc>)
 8006650:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006654:	6613      	str	r3, [r2, #96]	; 0x60
 8006656:	4b73      	ldr	r3, [pc, #460]	; (8006824 <HAL_SPI_MspInit+0x1fc>)
 8006658:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800665a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800665e:	61bb      	str	r3, [r7, #24]
 8006660:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006662:	4b70      	ldr	r3, [pc, #448]	; (8006824 <HAL_SPI_MspInit+0x1fc>)
 8006664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006666:	4a6f      	ldr	r2, [pc, #444]	; (8006824 <HAL_SPI_MspInit+0x1fc>)
 8006668:	f043 0301 	orr.w	r3, r3, #1
 800666c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800666e:	4b6d      	ldr	r3, [pc, #436]	; (8006824 <HAL_SPI_MspInit+0x1fc>)
 8006670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006672:	f003 0301 	and.w	r3, r3, #1
 8006676:	617b      	str	r3, [r7, #20]
 8006678:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800667a:	23a0      	movs	r3, #160	; 0xa0
 800667c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800667e:	2302      	movs	r3, #2
 8006680:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006682:	2300      	movs	r3, #0
 8006684:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006686:	2303      	movs	r3, #3
 8006688:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800668a:	2305      	movs	r3, #5
 800668c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800668e:	f107 031c 	add.w	r3, r7, #28
 8006692:	4619      	mov	r1, r3
 8006694:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006698:	f001 fde8 	bl	800826c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Channel4;
 800669c:	4b62      	ldr	r3, [pc, #392]	; (8006828 <HAL_SPI_MspInit+0x200>)
 800669e:	4a63      	ldr	r2, [pc, #396]	; (800682c <HAL_SPI_MspInit+0x204>)
 80066a0:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_4;
 80066a2:	4b61      	ldr	r3, [pc, #388]	; (8006828 <HAL_SPI_MspInit+0x200>)
 80066a4:	2204      	movs	r2, #4
 80066a6:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80066a8:	4b5f      	ldr	r3, [pc, #380]	; (8006828 <HAL_SPI_MspInit+0x200>)
 80066aa:	2210      	movs	r2, #16
 80066ac:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80066ae:	4b5e      	ldr	r3, [pc, #376]	; (8006828 <HAL_SPI_MspInit+0x200>)
 80066b0:	2200      	movs	r2, #0
 80066b2:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80066b4:	4b5c      	ldr	r3, [pc, #368]	; (8006828 <HAL_SPI_MspInit+0x200>)
 80066b6:	2280      	movs	r2, #128	; 0x80
 80066b8:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80066ba:	4b5b      	ldr	r3, [pc, #364]	; (8006828 <HAL_SPI_MspInit+0x200>)
 80066bc:	2200      	movs	r2, #0
 80066be:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80066c0:	4b59      	ldr	r3, [pc, #356]	; (8006828 <HAL_SPI_MspInit+0x200>)
 80066c2:	2200      	movs	r2, #0
 80066c4:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80066c6:	4b58      	ldr	r3, [pc, #352]	; (8006828 <HAL_SPI_MspInit+0x200>)
 80066c8:	2200      	movs	r2, #0
 80066ca:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80066cc:	4b56      	ldr	r3, [pc, #344]	; (8006828 <HAL_SPI_MspInit+0x200>)
 80066ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80066d2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80066d4:	4854      	ldr	r0, [pc, #336]	; (8006828 <HAL_SPI_MspInit+0x200>)
 80066d6:	f001 fb45 	bl	8007d64 <HAL_DMA_Init>
 80066da:	4603      	mov	r3, r0
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d001      	beq.n	80066e4 <HAL_SPI_MspInit+0xbc>
    {
      Error_Handler();
 80066e0:	f7ff f9d6 	bl	8005a90 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	4a50      	ldr	r2, [pc, #320]	; (8006828 <HAL_SPI_MspInit+0x200>)
 80066e8:	655a      	str	r2, [r3, #84]	; 0x54
 80066ea:	4a4f      	ldr	r2, [pc, #316]	; (8006828 <HAL_SPI_MspInit+0x200>)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80066f0:	2200      	movs	r2, #0
 80066f2:	2100      	movs	r1, #0
 80066f4:	2023      	movs	r0, #35	; 0x23
 80066f6:	f001 faf0 	bl	8007cda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80066fa:	2023      	movs	r0, #35	; 0x23
 80066fc:	f001 fb09 	bl	8007d12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8006700:	e08a      	b.n	8006818 <HAL_SPI_MspInit+0x1f0>
  else if(hspi->Instance==SPI2)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4a4a      	ldr	r2, [pc, #296]	; (8006830 <HAL_SPI_MspInit+0x208>)
 8006708:	4293      	cmp	r3, r2
 800670a:	f040 8085 	bne.w	8006818 <HAL_SPI_MspInit+0x1f0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800670e:	4b45      	ldr	r3, [pc, #276]	; (8006824 <HAL_SPI_MspInit+0x1fc>)
 8006710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006712:	4a44      	ldr	r2, [pc, #272]	; (8006824 <HAL_SPI_MspInit+0x1fc>)
 8006714:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006718:	6593      	str	r3, [r2, #88]	; 0x58
 800671a:	4b42      	ldr	r3, [pc, #264]	; (8006824 <HAL_SPI_MspInit+0x1fc>)
 800671c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800671e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006722:	613b      	str	r3, [r7, #16]
 8006724:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006726:	4b3f      	ldr	r3, [pc, #252]	; (8006824 <HAL_SPI_MspInit+0x1fc>)
 8006728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800672a:	4a3e      	ldr	r2, [pc, #248]	; (8006824 <HAL_SPI_MspInit+0x1fc>)
 800672c:	f043 0302 	orr.w	r3, r3, #2
 8006730:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006732:	4b3c      	ldr	r3, [pc, #240]	; (8006824 <HAL_SPI_MspInit+0x1fc>)
 8006734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006736:	f003 0302 	and.w	r3, r3, #2
 800673a:	60fb      	str	r3, [r7, #12]
 800673c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800673e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8006742:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006744:	2302      	movs	r3, #2
 8006746:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006748:	2300      	movs	r3, #0
 800674a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800674c:	2303      	movs	r3, #3
 800674e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8006750:	2305      	movs	r3, #5
 8006752:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006754:	f107 031c 	add.w	r3, r7, #28
 8006758:	4619      	mov	r1, r3
 800675a:	4836      	ldr	r0, [pc, #216]	; (8006834 <HAL_SPI_MspInit+0x20c>)
 800675c:	f001 fd86 	bl	800826c <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Channel4;
 8006760:	4b35      	ldr	r3, [pc, #212]	; (8006838 <HAL_SPI_MspInit+0x210>)
 8006762:	4a36      	ldr	r2, [pc, #216]	; (800683c <HAL_SPI_MspInit+0x214>)
 8006764:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_1;
 8006766:	4b34      	ldr	r3, [pc, #208]	; (8006838 <HAL_SPI_MspInit+0x210>)
 8006768:	2201      	movs	r2, #1
 800676a:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800676c:	4b32      	ldr	r3, [pc, #200]	; (8006838 <HAL_SPI_MspInit+0x210>)
 800676e:	2200      	movs	r2, #0
 8006770:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006772:	4b31      	ldr	r3, [pc, #196]	; (8006838 <HAL_SPI_MspInit+0x210>)
 8006774:	2200      	movs	r2, #0
 8006776:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006778:	4b2f      	ldr	r3, [pc, #188]	; (8006838 <HAL_SPI_MspInit+0x210>)
 800677a:	2280      	movs	r2, #128	; 0x80
 800677c:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800677e:	4b2e      	ldr	r3, [pc, #184]	; (8006838 <HAL_SPI_MspInit+0x210>)
 8006780:	2200      	movs	r2, #0
 8006782:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006784:	4b2c      	ldr	r3, [pc, #176]	; (8006838 <HAL_SPI_MspInit+0x210>)
 8006786:	2200      	movs	r2, #0
 8006788:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 800678a:	4b2b      	ldr	r3, [pc, #172]	; (8006838 <HAL_SPI_MspInit+0x210>)
 800678c:	2200      	movs	r2, #0
 800678e:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8006790:	4b29      	ldr	r3, [pc, #164]	; (8006838 <HAL_SPI_MspInit+0x210>)
 8006792:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006796:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8006798:	4827      	ldr	r0, [pc, #156]	; (8006838 <HAL_SPI_MspInit+0x210>)
 800679a:	f001 fae3 	bl	8007d64 <HAL_DMA_Init>
 800679e:	4603      	mov	r3, r0
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d001      	beq.n	80067a8 <HAL_SPI_MspInit+0x180>
      Error_Handler();
 80067a4:	f7ff f974 	bl	8005a90 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	4a23      	ldr	r2, [pc, #140]	; (8006838 <HAL_SPI_MspInit+0x210>)
 80067ac:	659a      	str	r2, [r3, #88]	; 0x58
 80067ae:	4a22      	ldr	r2, [pc, #136]	; (8006838 <HAL_SPI_MspInit+0x210>)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_spi2_tx.Instance = DMA1_Channel5;
 80067b4:	4b22      	ldr	r3, [pc, #136]	; (8006840 <HAL_SPI_MspInit+0x218>)
 80067b6:	4a23      	ldr	r2, [pc, #140]	; (8006844 <HAL_SPI_MspInit+0x21c>)
 80067b8:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_1;
 80067ba:	4b21      	ldr	r3, [pc, #132]	; (8006840 <HAL_SPI_MspInit+0x218>)
 80067bc:	2201      	movs	r2, #1
 80067be:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80067c0:	4b1f      	ldr	r3, [pc, #124]	; (8006840 <HAL_SPI_MspInit+0x218>)
 80067c2:	2210      	movs	r2, #16
 80067c4:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80067c6:	4b1e      	ldr	r3, [pc, #120]	; (8006840 <HAL_SPI_MspInit+0x218>)
 80067c8:	2200      	movs	r2, #0
 80067ca:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80067cc:	4b1c      	ldr	r3, [pc, #112]	; (8006840 <HAL_SPI_MspInit+0x218>)
 80067ce:	2280      	movs	r2, #128	; 0x80
 80067d0:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80067d2:	4b1b      	ldr	r3, [pc, #108]	; (8006840 <HAL_SPI_MspInit+0x218>)
 80067d4:	2200      	movs	r2, #0
 80067d6:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80067d8:	4b19      	ldr	r3, [pc, #100]	; (8006840 <HAL_SPI_MspInit+0x218>)
 80067da:	2200      	movs	r2, #0
 80067dc:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80067de:	4b18      	ldr	r3, [pc, #96]	; (8006840 <HAL_SPI_MspInit+0x218>)
 80067e0:	2200      	movs	r2, #0
 80067e2:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80067e4:	4b16      	ldr	r3, [pc, #88]	; (8006840 <HAL_SPI_MspInit+0x218>)
 80067e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80067ea:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80067ec:	4814      	ldr	r0, [pc, #80]	; (8006840 <HAL_SPI_MspInit+0x218>)
 80067ee:	f001 fab9 	bl	8007d64 <HAL_DMA_Init>
 80067f2:	4603      	mov	r3, r0
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d001      	beq.n	80067fc <HAL_SPI_MspInit+0x1d4>
      Error_Handler();
 80067f8:	f7ff f94a 	bl	8005a90 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	4a10      	ldr	r2, [pc, #64]	; (8006840 <HAL_SPI_MspInit+0x218>)
 8006800:	655a      	str	r2, [r3, #84]	; 0x54
 8006802:	4a0f      	ldr	r2, [pc, #60]	; (8006840 <HAL_SPI_MspInit+0x218>)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8006808:	2200      	movs	r2, #0
 800680a:	2100      	movs	r1, #0
 800680c:	2024      	movs	r0, #36	; 0x24
 800680e:	f001 fa64 	bl	8007cda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8006812:	2024      	movs	r0, #36	; 0x24
 8006814:	f001 fa7d 	bl	8007d12 <HAL_NVIC_EnableIRQ>
}
 8006818:	bf00      	nop
 800681a:	3730      	adds	r7, #48	; 0x30
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}
 8006820:	40013000 	.word	0x40013000
 8006824:	40021000 	.word	0x40021000
 8006828:	20000c40 	.word	0x20000c40
 800682c:	40020444 	.word	0x40020444
 8006830:	40003800 	.word	0x40003800
 8006834:	48000400 	.word	0x48000400
 8006838:	20000c88 	.word	0x20000c88
 800683c:	40020044 	.word	0x40020044
 8006840:	20000cd0 	.word	0x20000cd0
 8006844:	40020058 	.word	0x40020058

08006848 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b084      	sub	sp, #16
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a1a      	ldr	r2, [pc, #104]	; (80068c0 <HAL_TIM_Base_MspInit+0x78>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d114      	bne.n	8006884 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800685a:	4b1a      	ldr	r3, [pc, #104]	; (80068c4 <HAL_TIM_Base_MspInit+0x7c>)
 800685c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800685e:	4a19      	ldr	r2, [pc, #100]	; (80068c4 <HAL_TIM_Base_MspInit+0x7c>)
 8006860:	f043 0304 	orr.w	r3, r3, #4
 8006864:	6593      	str	r3, [r2, #88]	; 0x58
 8006866:	4b17      	ldr	r3, [pc, #92]	; (80068c4 <HAL_TIM_Base_MspInit+0x7c>)
 8006868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800686a:	f003 0304 	and.w	r3, r3, #4
 800686e:	60fb      	str	r3, [r7, #12]
 8006870:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 4, 0);
 8006872:	2200      	movs	r2, #0
 8006874:	2104      	movs	r1, #4
 8006876:	201e      	movs	r0, #30
 8006878:	f001 fa2f 	bl	8007cda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800687c:	201e      	movs	r0, #30
 800687e:	f001 fa48 	bl	8007d12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8006882:	e018      	b.n	80068b6 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM6)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a0f      	ldr	r2, [pc, #60]	; (80068c8 <HAL_TIM_Base_MspInit+0x80>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d113      	bne.n	80068b6 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800688e:	4b0d      	ldr	r3, [pc, #52]	; (80068c4 <HAL_TIM_Base_MspInit+0x7c>)
 8006890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006892:	4a0c      	ldr	r2, [pc, #48]	; (80068c4 <HAL_TIM_Base_MspInit+0x7c>)
 8006894:	f043 0310 	orr.w	r3, r3, #16
 8006898:	6593      	str	r3, [r2, #88]	; 0x58
 800689a:	4b0a      	ldr	r3, [pc, #40]	; (80068c4 <HAL_TIM_Base_MspInit+0x7c>)
 800689c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800689e:	f003 0310 	and.w	r3, r3, #16
 80068a2:	60bb      	str	r3, [r7, #8]
 80068a4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 2, 0);
 80068a6:	2200      	movs	r2, #0
 80068a8:	2102      	movs	r1, #2
 80068aa:	2036      	movs	r0, #54	; 0x36
 80068ac:	f001 fa15 	bl	8007cda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80068b0:	2036      	movs	r0, #54	; 0x36
 80068b2:	f001 fa2e 	bl	8007d12 <HAL_NVIC_EnableIRQ>
}
 80068b6:	bf00      	nop
 80068b8:	3710      	adds	r7, #16
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}
 80068be:	bf00      	nop
 80068c0:	40000800 	.word	0x40000800
 80068c4:	40021000 	.word	0x40021000
 80068c8:	40001000 	.word	0x40001000

080068cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b0ae      	sub	sp, #184	; 0xb8
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80068d4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80068d8:	2200      	movs	r2, #0
 80068da:	601a      	str	r2, [r3, #0]
 80068dc:	605a      	str	r2, [r3, #4]
 80068de:	609a      	str	r2, [r3, #8]
 80068e0:	60da      	str	r2, [r3, #12]
 80068e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80068e4:	f107 031c 	add.w	r3, r7, #28
 80068e8:	2288      	movs	r2, #136	; 0x88
 80068ea:	2100      	movs	r1, #0
 80068ec:	4618      	mov	r0, r3
 80068ee:	f009 f8cb 	bl	800fa88 <memset>
  if(huart->Instance==USART2)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a74      	ldr	r2, [pc, #464]	; (8006ac8 <HAL_UART_MspInit+0x1fc>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d16e      	bne.n	80069da <HAL_UART_MspInit+0x10e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80068fc:	2302      	movs	r3, #2
 80068fe:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8006900:	2300      	movs	r3, #0
 8006902:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006904:	f107 031c 	add.w	r3, r7, #28
 8006908:	4618      	mov	r0, r3
 800690a:	f004 fa35 	bl	800ad78 <HAL_RCCEx_PeriphCLKConfig>
 800690e:	4603      	mov	r3, r0
 8006910:	2b00      	cmp	r3, #0
 8006912:	d001      	beq.n	8006918 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8006914:	f7ff f8bc 	bl	8005a90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8006918:	4b6c      	ldr	r3, [pc, #432]	; (8006acc <HAL_UART_MspInit+0x200>)
 800691a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800691c:	4a6b      	ldr	r2, [pc, #428]	; (8006acc <HAL_UART_MspInit+0x200>)
 800691e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006922:	6593      	str	r3, [r2, #88]	; 0x58
 8006924:	4b69      	ldr	r3, [pc, #420]	; (8006acc <HAL_UART_MspInit+0x200>)
 8006926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006928:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800692c:	61bb      	str	r3, [r7, #24]
 800692e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006930:	4b66      	ldr	r3, [pc, #408]	; (8006acc <HAL_UART_MspInit+0x200>)
 8006932:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006934:	4a65      	ldr	r2, [pc, #404]	; (8006acc <HAL_UART_MspInit+0x200>)
 8006936:	f043 0301 	orr.w	r3, r3, #1
 800693a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800693c:	4b63      	ldr	r3, [pc, #396]	; (8006acc <HAL_UART_MspInit+0x200>)
 800693e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006940:	f003 0301 	and.w	r3, r3, #1
 8006944:	617b      	str	r3, [r7, #20]
 8006946:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = LOG_TX_Pin|LOG_RX_Pin;
 8006948:	230c      	movs	r3, #12
 800694a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800694e:	2302      	movs	r3, #2
 8006950:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006954:	2300      	movs	r3, #0
 8006956:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800695a:	2303      	movs	r3, #3
 800695c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006960:	2307      	movs	r3, #7
 8006962:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006966:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800696a:	4619      	mov	r1, r3
 800696c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006970:	f001 fc7c 	bl	800826c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8006974:	4b56      	ldr	r3, [pc, #344]	; (8006ad0 <HAL_UART_MspInit+0x204>)
 8006976:	4a57      	ldr	r2, [pc, #348]	; (8006ad4 <HAL_UART_MspInit+0x208>)
 8006978:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 800697a:	4b55      	ldr	r3, [pc, #340]	; (8006ad0 <HAL_UART_MspInit+0x204>)
 800697c:	2202      	movs	r2, #2
 800697e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006980:	4b53      	ldr	r3, [pc, #332]	; (8006ad0 <HAL_UART_MspInit+0x204>)
 8006982:	2210      	movs	r2, #16
 8006984:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006986:	4b52      	ldr	r3, [pc, #328]	; (8006ad0 <HAL_UART_MspInit+0x204>)
 8006988:	2200      	movs	r2, #0
 800698a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800698c:	4b50      	ldr	r3, [pc, #320]	; (8006ad0 <HAL_UART_MspInit+0x204>)
 800698e:	2280      	movs	r2, #128	; 0x80
 8006990:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006992:	4b4f      	ldr	r3, [pc, #316]	; (8006ad0 <HAL_UART_MspInit+0x204>)
 8006994:	2200      	movs	r2, #0
 8006996:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006998:	4b4d      	ldr	r3, [pc, #308]	; (8006ad0 <HAL_UART_MspInit+0x204>)
 800699a:	2200      	movs	r2, #0
 800699c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800699e:	4b4c      	ldr	r3, [pc, #304]	; (8006ad0 <HAL_UART_MspInit+0x204>)
 80069a0:	2200      	movs	r2, #0
 80069a2:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80069a4:	4b4a      	ldr	r3, [pc, #296]	; (8006ad0 <HAL_UART_MspInit+0x204>)
 80069a6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80069aa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80069ac:	4848      	ldr	r0, [pc, #288]	; (8006ad0 <HAL_UART_MspInit+0x204>)
 80069ae:	f001 f9d9 	bl	8007d64 <HAL_DMA_Init>
 80069b2:	4603      	mov	r3, r0
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d001      	beq.n	80069bc <HAL_UART_MspInit+0xf0>
    {
      Error_Handler();
 80069b8:	f7ff f86a 	bl	8005a90 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	4a44      	ldr	r2, [pc, #272]	; (8006ad0 <HAL_UART_MspInit+0x204>)
 80069c0:	66da      	str	r2, [r3, #108]	; 0x6c
 80069c2:	4a43      	ldr	r2, [pc, #268]	; (8006ad0 <HAL_UART_MspInit+0x204>)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 80069c8:	2200      	movs	r2, #0
 80069ca:	2101      	movs	r1, #1
 80069cc:	2026      	movs	r0, #38	; 0x26
 80069ce:	f001 f984 	bl	8007cda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80069d2:	2026      	movs	r0, #38	; 0x26
 80069d4:	f001 f99d 	bl	8007d12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80069d8:	e071      	b.n	8006abe <HAL_UART_MspInit+0x1f2>
  else if(huart->Instance==USART3)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4a3e      	ldr	r2, [pc, #248]	; (8006ad8 <HAL_UART_MspInit+0x20c>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d16c      	bne.n	8006abe <HAL_UART_MspInit+0x1f2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80069e4:	2304      	movs	r3, #4
 80069e6:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80069e8:	2300      	movs	r3, #0
 80069ea:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80069ec:	f107 031c 	add.w	r3, r7, #28
 80069f0:	4618      	mov	r0, r3
 80069f2:	f004 f9c1 	bl	800ad78 <HAL_RCCEx_PeriphCLKConfig>
 80069f6:	4603      	mov	r3, r0
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d001      	beq.n	8006a00 <HAL_UART_MspInit+0x134>
      Error_Handler();
 80069fc:	f7ff f848 	bl	8005a90 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8006a00:	4b32      	ldr	r3, [pc, #200]	; (8006acc <HAL_UART_MspInit+0x200>)
 8006a02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a04:	4a31      	ldr	r2, [pc, #196]	; (8006acc <HAL_UART_MspInit+0x200>)
 8006a06:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006a0a:	6593      	str	r3, [r2, #88]	; 0x58
 8006a0c:	4b2f      	ldr	r3, [pc, #188]	; (8006acc <HAL_UART_MspInit+0x200>)
 8006a0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006a14:	613b      	str	r3, [r7, #16]
 8006a16:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006a18:	4b2c      	ldr	r3, [pc, #176]	; (8006acc <HAL_UART_MspInit+0x200>)
 8006a1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a1c:	4a2b      	ldr	r2, [pc, #172]	; (8006acc <HAL_UART_MspInit+0x200>)
 8006a1e:	f043 0304 	orr.w	r3, r3, #4
 8006a22:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006a24:	4b29      	ldr	r3, [pc, #164]	; (8006acc <HAL_UART_MspInit+0x200>)
 8006a26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a28:	f003 0304 	and.w	r3, r3, #4
 8006a2c:	60fb      	str	r3, [r7, #12]
 8006a2e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8006a30:	2330      	movs	r3, #48	; 0x30
 8006a32:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a36:	2302      	movs	r3, #2
 8006a38:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006a42:	2303      	movs	r3, #3
 8006a44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006a48:	2307      	movs	r3, #7
 8006a4a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006a4e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006a52:	4619      	mov	r1, r3
 8006a54:	4821      	ldr	r0, [pc, #132]	; (8006adc <HAL_UART_MspInit+0x210>)
 8006a56:	f001 fc09 	bl	800826c <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8006a5a:	4b21      	ldr	r3, [pc, #132]	; (8006ae0 <HAL_UART_MspInit+0x214>)
 8006a5c:	4a21      	ldr	r2, [pc, #132]	; (8006ae4 <HAL_UART_MspInit+0x218>)
 8006a5e:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_2;
 8006a60:	4b1f      	ldr	r3, [pc, #124]	; (8006ae0 <HAL_UART_MspInit+0x214>)
 8006a62:	2202      	movs	r2, #2
 8006a64:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006a66:	4b1e      	ldr	r3, [pc, #120]	; (8006ae0 <HAL_UART_MspInit+0x214>)
 8006a68:	2210      	movs	r2, #16
 8006a6a:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006a6c:	4b1c      	ldr	r3, [pc, #112]	; (8006ae0 <HAL_UART_MspInit+0x214>)
 8006a6e:	2200      	movs	r2, #0
 8006a70:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006a72:	4b1b      	ldr	r3, [pc, #108]	; (8006ae0 <HAL_UART_MspInit+0x214>)
 8006a74:	2280      	movs	r2, #128	; 0x80
 8006a76:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006a78:	4b19      	ldr	r3, [pc, #100]	; (8006ae0 <HAL_UART_MspInit+0x214>)
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006a7e:	4b18      	ldr	r3, [pc, #96]	; (8006ae0 <HAL_UART_MspInit+0x214>)
 8006a80:	2200      	movs	r2, #0
 8006a82:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8006a84:	4b16      	ldr	r3, [pc, #88]	; (8006ae0 <HAL_UART_MspInit+0x214>)
 8006a86:	2200      	movs	r2, #0
 8006a88:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006a8a:	4b15      	ldr	r3, [pc, #84]	; (8006ae0 <HAL_UART_MspInit+0x214>)
 8006a8c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006a90:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8006a92:	4813      	ldr	r0, [pc, #76]	; (8006ae0 <HAL_UART_MspInit+0x214>)
 8006a94:	f001 f966 	bl	8007d64 <HAL_DMA_Init>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d001      	beq.n	8006aa2 <HAL_UART_MspInit+0x1d6>
      Error_Handler();
 8006a9e:	f7fe fff7 	bl	8005a90 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	4a0e      	ldr	r2, [pc, #56]	; (8006ae0 <HAL_UART_MspInit+0x214>)
 8006aa6:	66da      	str	r2, [r3, #108]	; 0x6c
 8006aa8:	4a0d      	ldr	r2, [pc, #52]	; (8006ae0 <HAL_UART_MspInit+0x214>)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8006aae:	2200      	movs	r2, #0
 8006ab0:	2100      	movs	r1, #0
 8006ab2:	2027      	movs	r0, #39	; 0x27
 8006ab4:	f001 f911 	bl	8007cda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8006ab8:	2027      	movs	r0, #39	; 0x27
 8006aba:	f001 f92a 	bl	8007d12 <HAL_NVIC_EnableIRQ>
}
 8006abe:	bf00      	nop
 8006ac0:	37b8      	adds	r7, #184	; 0xb8
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}
 8006ac6:	bf00      	nop
 8006ac8:	40004400 	.word	0x40004400
 8006acc:	40021000 	.word	0x40021000
 8006ad0:	20000eb8 	.word	0x20000eb8
 8006ad4:	40020080 	.word	0x40020080
 8006ad8:	40004800 	.word	0x40004800
 8006adc:	48000800 	.word	0x48000800
 8006ae0:	20000f00 	.word	0x20000f00
 8006ae4:	4002001c 	.word	0x4002001c

08006ae8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006aec:	e7fe      	b.n	8006aec <NMI_Handler+0x4>

08006aee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006aee:	b480      	push	{r7}
 8006af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006af2:	e7fe      	b.n	8006af2 <HardFault_Handler+0x4>

08006af4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006af4:	b480      	push	{r7}
 8006af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006af8:	e7fe      	b.n	8006af8 <MemManage_Handler+0x4>

08006afa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006afa:	b480      	push	{r7}
 8006afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006afe:	e7fe      	b.n	8006afe <BusFault_Handler+0x4>

08006b00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006b00:	b480      	push	{r7}
 8006b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006b04:	e7fe      	b.n	8006b04 <UsageFault_Handler+0x4>

08006b06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006b06:	b480      	push	{r7}
 8006b08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006b0a:	bf00      	nop
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b12:	4770      	bx	lr

08006b14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006b14:	b480      	push	{r7}
 8006b16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006b18:	bf00      	nop
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b20:	4770      	bx	lr

08006b22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006b22:	b480      	push	{r7}
 8006b24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006b26:	bf00      	nop
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2e:	4770      	bx	lr

08006b30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006b34:	f000 ff6e 	bl	8007a14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006b38:	bf00      	nop
 8006b3a:	bd80      	pop	{r7, pc}

08006b3c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY0_Pin);
 8006b40:	2002      	movs	r0, #2
 8006b42:	f001 fd87 	bl	8008654 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8006b46:	bf00      	nop
 8006b48:	bd80      	pop	{r7, pc}

08006b4a <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8006b4a:	b580      	push	{r7, lr}
 8006b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY1_Pin);
 8006b4e:	2004      	movs	r0, #4
 8006b50:	f001 fd80 	bl	8008654 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8006b54:	bf00      	nop
 8006b56:	bd80      	pop	{r7, pc}

08006b58 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8006b5c:	4802      	ldr	r0, [pc, #8]	; (8006b68 <DMA1_Channel2_IRQHandler+0x10>)
 8006b5e:	f001 fa98 	bl	8008092 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8006b62:	bf00      	nop
 8006b64:	bd80      	pop	{r7, pc}
 8006b66:	bf00      	nop
 8006b68:	20000f00 	.word	0x20000f00

08006b6c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8006b70:	4802      	ldr	r0, [pc, #8]	; (8006b7c <DMA1_Channel4_IRQHandler+0x10>)
 8006b72:	f001 fa8e 	bl	8008092 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8006b76:	bf00      	nop
 8006b78:	bd80      	pop	{r7, pc}
 8006b7a:	bf00      	nop
 8006b7c:	20000c88 	.word	0x20000c88

08006b80 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8006b84:	4802      	ldr	r0, [pc, #8]	; (8006b90 <DMA1_Channel5_IRQHandler+0x10>)
 8006b86:	f001 fa84 	bl	8008092 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8006b8a:	bf00      	nop
 8006b8c:	bd80      	pop	{r7, pc}
 8006b8e:	bf00      	nop
 8006b90:	20000cd0 	.word	0x20000cd0

08006b94 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8006b98:	4802      	ldr	r0, [pc, #8]	; (8006ba4 <DMA1_Channel6_IRQHandler+0x10>)
 8006b9a:	f001 fa7a 	bl	8008092 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8006b9e:	bf00      	nop
 8006ba0:	bd80      	pop	{r7, pc}
 8006ba2:	bf00      	nop
 8006ba4:	20000b0c 	.word	0x20000b0c

08006ba8 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8006bac:	4802      	ldr	r0, [pc, #8]	; (8006bb8 <DMA1_Channel7_IRQHandler+0x10>)
 8006bae:	f001 fa70 	bl	8008092 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8006bb2:	bf00      	nop
 8006bb4:	bd80      	pop	{r7, pc}
 8006bb6:	bf00      	nop
 8006bb8:	20000eb8 	.word	0x20000eb8

08006bbc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8006bc0:	4802      	ldr	r0, [pc, #8]	; (8006bcc <TIM4_IRQHandler+0x10>)
 8006bc2:	f006 fdb0 	bl	800d726 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8006bc6:	bf00      	nop
 8006bc8:	bd80      	pop	{r7, pc}
 8006bca:	bf00      	nop
 8006bcc:	20000d18 	.word	0x20000d18

08006bd0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8006bd4:	4802      	ldr	r0, [pc, #8]	; (8006be0 <I2C1_EV_IRQHandler+0x10>)
 8006bd6:	f002 f907 	bl	8008de8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8006bda:	bf00      	nop
 8006bdc:	bd80      	pop	{r7, pc}
 8006bde:	bf00      	nop
 8006be0:	20000a70 	.word	0x20000a70

08006be4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8006be8:	4802      	ldr	r0, [pc, #8]	; (8006bf4 <I2C1_ER_IRQHandler+0x10>)
 8006bea:	f002 f917 	bl	8008e1c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8006bee:	bf00      	nop
 8006bf0:	bd80      	pop	{r7, pc}
 8006bf2:	bf00      	nop
 8006bf4:	20000a70 	.word	0x20000a70

08006bf8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8006bfc:	4802      	ldr	r0, [pc, #8]	; (8006c08 <SPI1_IRQHandler+0x10>)
 8006bfe:	f006 f865 	bl	800cccc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8006c02:	bf00      	nop
 8006c04:	bd80      	pop	{r7, pc}
 8006c06:	bf00      	nop
 8006c08:	20000b78 	.word	0x20000b78

08006c0c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8006c10:	4802      	ldr	r0, [pc, #8]	; (8006c1c <SPI2_IRQHandler+0x10>)
 8006c12:	f006 f85b 	bl	800cccc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8006c16:	bf00      	nop
 8006c18:	bd80      	pop	{r7, pc}
 8006c1a:	bf00      	nop
 8006c1c:	20000bdc 	.word	0x20000bdc

08006c20 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8006c24:	4802      	ldr	r0, [pc, #8]	; (8006c30 <USART2_IRQHandler+0x10>)
 8006c26:	f007 fb31 	bl	800e28c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8006c2a:	bf00      	nop
 8006c2c:	bd80      	pop	{r7, pc}
 8006c2e:	bf00      	nop
 8006c30:	20000db0 	.word	0x20000db0

08006c34 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8006c38:	4802      	ldr	r0, [pc, #8]	; (8006c44 <USART3_IRQHandler+0x10>)
 8006c3a:	f007 fb27 	bl	800e28c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8006c3e:	bf00      	nop
 8006c40:	bd80      	pop	{r7, pc}
 8006c42:	bf00      	nop
 8006c44:	20000e34 	.word	0x20000e34

08006c48 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8006c4c:	4802      	ldr	r0, [pc, #8]	; (8006c58 <TIM6_DAC_IRQHandler+0x10>)
 8006c4e:	f006 fd6a 	bl	800d726 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8006c52:	bf00      	nop
 8006c54:	bd80      	pop	{r7, pc}
 8006c56:	bf00      	nop
 8006c58:	20000d64 	.word	0x20000d64

08006c5c <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8006c60:	4802      	ldr	r0, [pc, #8]	; (8006c6c <DMA2_Channel4_IRQHandler+0x10>)
 8006c62:	f001 fa16 	bl	8008092 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 8006c66:	bf00      	nop
 8006c68:	bd80      	pop	{r7, pc}
 8006c6a:	bf00      	nop
 8006c6c:	20000c40 	.word	0x20000c40

08006c70 <DMA2_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA2 channel6 global interrupt.
  */
void DMA2_Channel6_IRQHandler(void)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel6_IRQn 0 */

  /* USER CODE END DMA2_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8006c74:	4802      	ldr	r0, [pc, #8]	; (8006c80 <DMA2_Channel6_IRQHandler+0x10>)
 8006c76:	f001 fa0c 	bl	8008092 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel6_IRQn 1 */

  /* USER CODE END DMA2_Channel6_IRQn 1 */
}
 8006c7a:	bf00      	nop
 8006c7c:	bd80      	pop	{r7, pc}
 8006c7e:	bf00      	nop
 8006c80:	20000ac4 	.word	0x20000ac4

08006c84 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006c84:	b480      	push	{r7}
 8006c86:	af00      	add	r7, sp, #0
	return 1;
 8006c88:	2301      	movs	r3, #1
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c92:	4770      	bx	lr

08006c94 <_kill>:

int _kill(int pid, int sig)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b082      	sub	sp, #8
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
 8006c9c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8006c9e:	f008 fdff 	bl	800f8a0 <__errno>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	2216      	movs	r2, #22
 8006ca6:	601a      	str	r2, [r3, #0]
	return -1;
 8006ca8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8006cac:	4618      	mov	r0, r3
 8006cae:	3708      	adds	r7, #8
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd80      	pop	{r7, pc}

08006cb4 <_exit>:

void _exit (int status)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b082      	sub	sp, #8
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8006cbc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f7ff ffe7 	bl	8006c94 <_kill>
	while (1) {}		/* Make sure we hang here */
 8006cc6:	e7fe      	b.n	8006cc6 <_exit+0x12>

08006cc8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b086      	sub	sp, #24
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	60f8      	str	r0, [r7, #12]
 8006cd0:	60b9      	str	r1, [r7, #8]
 8006cd2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	617b      	str	r3, [r7, #20]
 8006cd8:	e00a      	b.n	8006cf0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8006cda:	f3af 8000 	nop.w
 8006cde:	4601      	mov	r1, r0
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	1c5a      	adds	r2, r3, #1
 8006ce4:	60ba      	str	r2, [r7, #8]
 8006ce6:	b2ca      	uxtb	r2, r1
 8006ce8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006cea:	697b      	ldr	r3, [r7, #20]
 8006cec:	3301      	adds	r3, #1
 8006cee:	617b      	str	r3, [r7, #20]
 8006cf0:	697a      	ldr	r2, [r7, #20]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	429a      	cmp	r2, r3
 8006cf6:	dbf0      	blt.n	8006cda <_read+0x12>
	}

return len;
 8006cf8:	687b      	ldr	r3, [r7, #4]
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3718      	adds	r7, #24
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}

08006d02 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006d02:	b580      	push	{r7, lr}
 8006d04:	b086      	sub	sp, #24
 8006d06:	af00      	add	r7, sp, #0
 8006d08:	60f8      	str	r0, [r7, #12]
 8006d0a:	60b9      	str	r1, [r7, #8]
 8006d0c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006d0e:	2300      	movs	r3, #0
 8006d10:	617b      	str	r3, [r7, #20]
 8006d12:	e009      	b.n	8006d28 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	1c5a      	adds	r2, r3, #1
 8006d18:	60ba      	str	r2, [r7, #8]
 8006d1a:	781b      	ldrb	r3, [r3, #0]
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	3301      	adds	r3, #1
 8006d26:	617b      	str	r3, [r7, #20]
 8006d28:	697a      	ldr	r2, [r7, #20]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	429a      	cmp	r2, r3
 8006d2e:	dbf1      	blt.n	8006d14 <_write+0x12>
	}
	return len;
 8006d30:	687b      	ldr	r3, [r7, #4]
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	3718      	adds	r7, #24
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}

08006d3a <_close>:

int _close(int file)
{
 8006d3a:	b480      	push	{r7}
 8006d3c:	b083      	sub	sp, #12
 8006d3e:	af00      	add	r7, sp, #0
 8006d40:	6078      	str	r0, [r7, #4]
	return -1;
 8006d42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	370c      	adds	r7, #12
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d50:	4770      	bx	lr

08006d52 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006d52:	b480      	push	{r7}
 8006d54:	b083      	sub	sp, #12
 8006d56:	af00      	add	r7, sp, #0
 8006d58:	6078      	str	r0, [r7, #4]
 8006d5a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006d62:	605a      	str	r2, [r3, #4]
	return 0;
 8006d64:	2300      	movs	r3, #0
}
 8006d66:	4618      	mov	r0, r3
 8006d68:	370c      	adds	r7, #12
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d70:	4770      	bx	lr

08006d72 <_isatty>:

int _isatty(int file)
{
 8006d72:	b480      	push	{r7}
 8006d74:	b083      	sub	sp, #12
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	6078      	str	r0, [r7, #4]
	return 1;
 8006d7a:	2301      	movs	r3, #1
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	370c      	adds	r7, #12
 8006d80:	46bd      	mov	sp, r7
 8006d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d86:	4770      	bx	lr

08006d88 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b085      	sub	sp, #20
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	60f8      	str	r0, [r7, #12]
 8006d90:	60b9      	str	r1, [r7, #8]
 8006d92:	607a      	str	r2, [r7, #4]
	return 0;
 8006d94:	2300      	movs	r3, #0
}
 8006d96:	4618      	mov	r0, r3
 8006d98:	3714      	adds	r7, #20
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da0:	4770      	bx	lr
	...

08006da4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b086      	sub	sp, #24
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006dac:	4a14      	ldr	r2, [pc, #80]	; (8006e00 <_sbrk+0x5c>)
 8006dae:	4b15      	ldr	r3, [pc, #84]	; (8006e04 <_sbrk+0x60>)
 8006db0:	1ad3      	subs	r3, r2, r3
 8006db2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006db4:	697b      	ldr	r3, [r7, #20]
 8006db6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006db8:	4b13      	ldr	r3, [pc, #76]	; (8006e08 <_sbrk+0x64>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d102      	bne.n	8006dc6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006dc0:	4b11      	ldr	r3, [pc, #68]	; (8006e08 <_sbrk+0x64>)
 8006dc2:	4a12      	ldr	r2, [pc, #72]	; (8006e0c <_sbrk+0x68>)
 8006dc4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006dc6:	4b10      	ldr	r3, [pc, #64]	; (8006e08 <_sbrk+0x64>)
 8006dc8:	681a      	ldr	r2, [r3, #0]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	4413      	add	r3, r2
 8006dce:	693a      	ldr	r2, [r7, #16]
 8006dd0:	429a      	cmp	r2, r3
 8006dd2:	d207      	bcs.n	8006de4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006dd4:	f008 fd64 	bl	800f8a0 <__errno>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	220c      	movs	r2, #12
 8006ddc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006dde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006de2:	e009      	b.n	8006df8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006de4:	4b08      	ldr	r3, [pc, #32]	; (8006e08 <_sbrk+0x64>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006dea:	4b07      	ldr	r3, [pc, #28]	; (8006e08 <_sbrk+0x64>)
 8006dec:	681a      	ldr	r2, [r3, #0]
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	4413      	add	r3, r2
 8006df2:	4a05      	ldr	r2, [pc, #20]	; (8006e08 <_sbrk+0x64>)
 8006df4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006df6:	68fb      	ldr	r3, [r7, #12]
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3718      	adds	r7, #24
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}
 8006e00:	20018000 	.word	0x20018000
 8006e04:	00000c00 	.word	0x00000c00
 8006e08:	200037a8 	.word	0x200037a8
 8006e0c:	200038f0 	.word	0x200038f0

08006e10 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8006e10:	b480      	push	{r7}
 8006e12:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8006e14:	4b06      	ldr	r3, [pc, #24]	; (8006e30 <SystemInit+0x20>)
 8006e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e1a:	4a05      	ldr	r2, [pc, #20]	; (8006e30 <SystemInit+0x20>)
 8006e1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006e20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8006e24:	bf00      	nop
 8006e26:	46bd      	mov	sp, r7
 8006e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2c:	4770      	bx	lr
 8006e2e:	bf00      	nop
 8006e30:	e000ed00 	.word	0xe000ed00

08006e34 <W25_SELECT>:

extern void Report(const uint8_t addTime, const char *fmt, ...);

//------------------------------------------------------------------------------------------

void W25_SELECT()   { W25_SEL(); } //HAL_GPIO_WritePin(W25_CS_GPIO_Port, W25_CS_Pin, GPIO_PIN_RESET);//set to 0
 8006e34:	b580      	push	{r7, lr}
 8006e36:	af00      	add	r7, sp, #0
 8006e38:	2200      	movs	r2, #0
 8006e3a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006e3e:	4802      	ldr	r0, [pc, #8]	; (8006e48 <W25_SELECT+0x14>)
 8006e40:	f001 fbd6 	bl	80085f0 <HAL_GPIO_WritePin>
 8006e44:	bf00      	nop
 8006e46:	bd80      	pop	{r7, pc}
 8006e48:	48000400 	.word	0x48000400

08006e4c <W25_UNSELECT>:
void W25_UNSELECT() { W25_UNSEL(); } //HAL_GPIO_WritePin(W25_CS_GPIO_Port, W25_CS_Pin, GPIO_PIN_SET);//set to 1
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	af00      	add	r7, sp, #0
 8006e50:	2201      	movs	r2, #1
 8006e52:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006e56:	4802      	ldr	r0, [pc, #8]	; (8006e60 <W25_UNSELECT+0x14>)
 8006e58:	f001 fbca 	bl	80085f0 <HAL_GPIO_WritePin>
 8006e5c:	bf00      	nop
 8006e5e:	bd80      	pop	{r7, pc}
 8006e60:	48000400 	.word	0x48000400

08006e64 <W25qxx_Spi>:
//void W25_SELECT()   { HAL_GPIO_WritePin(W25_CS_GPIO_Port, W25_CS_Pin, GPIO_PIN_RESET); }//set to 0
//void W25_UNSELECT() { HAL_GPIO_WritePin(W25_CS_GPIO_Port, W25_CS_Pin, GPIO_PIN_SET); }//set to 1

//------------------------------------------------------------------------------------------
uint8_t W25qxx_Spi(uint8_t Data)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b086      	sub	sp, #24
 8006e68:	af02      	add	r7, sp, #8
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	71fb      	strb	r3, [r7, #7]
uint8_t ret;

    if (HAL_SPI_TransmitReceive(portFLASH, &Data, &ret, 1, min_wait_ms) != HAL_OK) devError |= devSPI;
 8006e6e:	4b0c      	ldr	r3, [pc, #48]	; (8006ea0 <W25qxx_Spi+0x3c>)
 8006e70:	6818      	ldr	r0, [r3, #0]
 8006e72:	23fa      	movs	r3, #250	; 0xfa
 8006e74:	f107 020f 	add.w	r2, r7, #15
 8006e78:	1df9      	adds	r1, r7, #7
 8006e7a:	9300      	str	r3, [sp, #0]
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	f005 fa92 	bl	800c3a6 <HAL_SPI_TransmitReceive>
 8006e82:	4603      	mov	r3, r0
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d006      	beq.n	8006e96 <W25qxx_Spi+0x32>
 8006e88:	4b06      	ldr	r3, [pc, #24]	; (8006ea4 <W25qxx_Spi+0x40>)
 8006e8a:	881b      	ldrh	r3, [r3, #0]
 8006e8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e90:	b29a      	uxth	r2, r3
 8006e92:	4b04      	ldr	r3, [pc, #16]	; (8006ea4 <W25qxx_Spi+0x40>)
 8006e94:	801a      	strh	r2, [r3, #0]

    return ret;
 8006e96:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	3710      	adds	r7, #16
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bd80      	pop	{r7, pc}
 8006ea0:	2000000c 	.word	0x2000000c
 8006ea4:	20001bc8 	.word	0x20001bc8

08006ea8 <W25qxx_Reset>:
//------------------------------------------------------------------------------------------
void W25qxx_Reset(void)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	af00      	add	r7, sp, #0
	W25qxx_Delay(100);
 8006eac:	2064      	movs	r0, #100	; 0x64
 8006eae:	f000 fdd1 	bl	8007a54 <HAL_Delay>

	W25_SELECT();
 8006eb2:	f7ff ffbf 	bl	8006e34 <W25_SELECT>
		W25qxx_Spi(EN_RESET);
 8006eb6:	2066      	movs	r0, #102	; 0x66
 8006eb8:	f7ff ffd4 	bl	8006e64 <W25qxx_Spi>
		W25qxx_Spi(CHIP_RESET);
 8006ebc:	2099      	movs	r0, #153	; 0x99
 8006ebe:	f7ff ffd1 	bl	8006e64 <W25qxx_Spi>
	W25_UNSELECT();
 8006ec2:	f7ff ffc3 	bl	8006e4c <W25_UNSELECT>

	W25qxx_Delay(100);
 8006ec6:	2064      	movs	r0, #100	; 0x64
 8006ec8:	f000 fdc4 	bl	8007a54 <HAL_Delay>
}
 8006ecc:	bf00      	nop
 8006ece:	bd80      	pop	{r7, pc}

08006ed0 <W25qxx_ReadID>:
//------------------------------------------------------------------------------------------
uint32_t W25qxx_ReadID(void)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b084      	sub	sp, #16
 8006ed4:	af00      	add	r7, sp, #0
uint32_t Temp[3] = {0};
 8006ed6:	1d3b      	adds	r3, r7, #4
 8006ed8:	2200      	movs	r2, #0
 8006eda:	601a      	str	r2, [r3, #0]
 8006edc:	605a      	str	r2, [r3, #4]
 8006ede:	609a      	str	r2, [r3, #8]

    W25_SELECT();//set to 0
 8006ee0:	f7ff ffa8 	bl	8006e34 <W25_SELECT>

    W25qxx_Spi(JEDEC_ID);
 8006ee4:	209f      	movs	r0, #159	; 0x9f
 8006ee6:	f7ff ffbd 	bl	8006e64 <W25qxx_Spi>
    Temp[0] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8006eea:	20a5      	movs	r0, #165	; 0xa5
 8006eec:	f7ff ffba 	bl	8006e64 <W25qxx_Spi>
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	607b      	str	r3, [r7, #4]
    Temp[1] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8006ef4:	20a5      	movs	r0, #165	; 0xa5
 8006ef6:	f7ff ffb5 	bl	8006e64 <W25qxx_Spi>
 8006efa:	4603      	mov	r3, r0
 8006efc:	60bb      	str	r3, [r7, #8]
    Temp[2] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8006efe:	20a5      	movs	r0, #165	; 0xa5
 8006f00:	f7ff ffb0 	bl	8006e64 <W25qxx_Spi>
 8006f04:	4603      	mov	r3, r0
 8006f06:	60fb      	str	r3, [r7, #12]

    W25_UNSELECT();//set to 1
 8006f08:	f7ff ffa0 	bl	8006e4c <W25_UNSELECT>

    return ((Temp[0] << 16) | (Temp[1] << 8) | Temp[2]);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	041a      	lsls	r2, r3, #16
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	021b      	lsls	r3, r3, #8
 8006f14:	431a      	orrs	r2, r3
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	4313      	orrs	r3, r2
}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	3710      	adds	r7, #16
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bd80      	pop	{r7, pc}
	...

08006f24 <W25qxx_ReadUniqID>:
//------------------------------------------------------------------------------------------
void W25qxx_ReadUniqID(void)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b082      	sub	sp, #8
 8006f28:	af00      	add	r7, sp, #0
	uint8_t dat[] = {READ_UID, W25QXX_DUMMY_BYTE, W25QXX_DUMMY_BYTE, W25QXX_DUMMY_BYTE, W25QXX_DUMMY_BYTE};
 8006f2a:	4a18      	ldr	r2, [pc, #96]	; (8006f8c <W25qxx_ReadUniqID+0x68>)
 8006f2c:	463b      	mov	r3, r7
 8006f2e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006f32:	6018      	str	r0, [r3, #0]
 8006f34:	3304      	adds	r3, #4
 8006f36:	7019      	strb	r1, [r3, #0]
    W25_SELECT();
 8006f38:	f7ff ff7c 	bl	8006e34 <W25_SELECT>

    //W25qxx_Spi(READ_UID);
    //for (uint8_t i = 0; i < 4; i++) W25qxx_Spi(W25QXX_DUMMY_BYTE);
    //for (uint8_t i = 0; i < 8; i++) w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
    if (HAL_SPI_Transmit(portFLASH, dat, sizeof(dat), min_wait_ms) != HAL_OK) devError |= devSPI;
 8006f3c:	4b14      	ldr	r3, [pc, #80]	; (8006f90 <W25qxx_ReadUniqID+0x6c>)
 8006f3e:	6818      	ldr	r0, [r3, #0]
 8006f40:	23fa      	movs	r3, #250	; 0xfa
 8006f42:	4639      	mov	r1, r7
 8006f44:	2205      	movs	r2, #5
 8006f46:	f004 ff90 	bl	800be6a <HAL_SPI_Transmit>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d006      	beq.n	8006f5e <W25qxx_ReadUniqID+0x3a>
 8006f50:	4b10      	ldr	r3, [pc, #64]	; (8006f94 <W25qxx_ReadUniqID+0x70>)
 8006f52:	881b      	ldrh	r3, [r3, #0]
 8006f54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f58:	b29a      	uxth	r2, r3
 8006f5a:	4b0e      	ldr	r3, [pc, #56]	; (8006f94 <W25qxx_ReadUniqID+0x70>)
 8006f5c:	801a      	strh	r2, [r3, #0]
    if (HAL_SPI_Receive(portFLASH, w25qxx.UniqID, 8, min_wait_ms) != HAL_OK) devError |= devSPI;
 8006f5e:	4b0c      	ldr	r3, [pc, #48]	; (8006f90 <W25qxx_ReadUniqID+0x6c>)
 8006f60:	6818      	ldr	r0, [r3, #0]
 8006f62:	23fa      	movs	r3, #250	; 0xfa
 8006f64:	2208      	movs	r2, #8
 8006f66:	490c      	ldr	r1, [pc, #48]	; (8006f98 <W25qxx_ReadUniqID+0x74>)
 8006f68:	f005 f8ed 	bl	800c146 <HAL_SPI_Receive>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d006      	beq.n	8006f80 <W25qxx_ReadUniqID+0x5c>
 8006f72:	4b08      	ldr	r3, [pc, #32]	; (8006f94 <W25qxx_ReadUniqID+0x70>)
 8006f74:	881b      	ldrh	r3, [r3, #0]
 8006f76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f7a:	b29a      	uxth	r2, r3
 8006f7c:	4b05      	ldr	r3, [pc, #20]	; (8006f94 <W25qxx_ReadUniqID+0x70>)
 8006f7e:	801a      	strh	r2, [r3, #0]

    W25_UNSELECT();
 8006f80:	f7ff ff64 	bl	8006e4c <W25_UNSELECT>
}
 8006f84:	bf00      	nop
 8006f86:	3708      	adds	r7, #8
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}
 8006f8c:	08014874 	.word	0x08014874
 8006f90:	2000000c 	.word	0x2000000c
 8006f94:	20001bc8 	.word	0x20001bc8
 8006f98:	200037ad 	.word	0x200037ad

08006f9c <W25qxx_WriteEnable>:
//------------------------------------------------------------------------------------------
void W25qxx_WriteEnable(void)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	af00      	add	r7, sp, #0
    W25_SELECT();
 8006fa0:	f7ff ff48 	bl	8006e34 <W25_SELECT>

    W25qxx_Spi(WRITE_ENABLE);
 8006fa4:	2006      	movs	r0, #6
 8006fa6:	f7ff ff5d 	bl	8006e64 <W25qxx_Spi>

    W25_UNSELECT();
 8006faa:	f7ff ff4f 	bl	8006e4c <W25_UNSELECT>

    W25qxx_Delay(1);
 8006fae:	2001      	movs	r0, #1
 8006fb0:	f000 fd50 	bl	8007a54 <HAL_Delay>
}
 8006fb4:	bf00      	nop
 8006fb6:	bd80      	pop	{r7, pc}

08006fb8 <W25qxx_ReadStatusRegister>:

    W25qxx_Delay(1);
}
//------------------------------------------------------------------------------------------
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusReg)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b084      	sub	sp, #16
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	71fb      	strb	r3, [r7, #7]
uint8_t status = 0;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	73fb      	strb	r3, [r7, #15]

    W25_SELECT();
 8006fc6:	f7ff ff35 	bl	8006e34 <W25_SELECT>

    switch (SelectStatusReg) {
 8006fca:	79fb      	ldrb	r3, [r7, #7]
 8006fcc:	2b01      	cmp	r3, #1
 8006fce:	d002      	beq.n	8006fd6 <W25qxx_ReadStatusRegister+0x1e>
 8006fd0:	2b02      	cmp	r3, #2
 8006fd2:	d00d      	beq.n	8006ff0 <W25qxx_ReadStatusRegister+0x38>
 8006fd4:	e019      	b.n	800700a <W25qxx_ReadStatusRegister+0x52>
        case 1:
            W25qxx_Spi(READ_STAT_REG1);
 8006fd6:	2005      	movs	r0, #5
 8006fd8:	f7ff ff44 	bl	8006e64 <W25qxx_Spi>
            status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8006fdc:	20a5      	movs	r0, #165	; 0xa5
 8006fde:	f7ff ff41 	bl	8006e64 <W25qxx_Spi>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	73fb      	strb	r3, [r7, #15]
            w25qxx.StatusRegister1 = status;
 8006fe6:	4a12      	ldr	r2, [pc, #72]	; (8007030 <W25qxx_ReadStatusRegister+0x78>)
 8006fe8:	7bfb      	ldrb	r3, [r7, #15]
 8006fea:	f882 3023 	strb.w	r3, [r2, #35]	; 0x23
        break;
 8006fee:	e018      	b.n	8007022 <W25qxx_ReadStatusRegister+0x6a>
        case 2:
            W25qxx_Spi(READ_STAT_REG2);
 8006ff0:	2035      	movs	r0, #53	; 0x35
 8006ff2:	f7ff ff37 	bl	8006e64 <W25qxx_Spi>
            status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8006ff6:	20a5      	movs	r0, #165	; 0xa5
 8006ff8:	f7ff ff34 	bl	8006e64 <W25qxx_Spi>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	73fb      	strb	r3, [r7, #15]
            w25qxx.StatusRegister2 = status;
 8007000:	4a0b      	ldr	r2, [pc, #44]	; (8007030 <W25qxx_ReadStatusRegister+0x78>)
 8007002:	7bfb      	ldrb	r3, [r7, #15]
 8007004:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
        break;
 8007008:	e00b      	b.n	8007022 <W25qxx_ReadStatusRegister+0x6a>
        default : {
            W25qxx_Spi(READ_STAT_REG3);
 800700a:	2015      	movs	r0, #21
 800700c:	f7ff ff2a 	bl	8006e64 <W25qxx_Spi>
            status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8007010:	20a5      	movs	r0, #165	; 0xa5
 8007012:	f7ff ff27 	bl	8006e64 <W25qxx_Spi>
 8007016:	4603      	mov	r3, r0
 8007018:	73fb      	strb	r3, [r7, #15]
            w25qxx.StatusRegister3 = status;
 800701a:	4a05      	ldr	r2, [pc, #20]	; (8007030 <W25qxx_ReadStatusRegister+0x78>)
 800701c:	7bfb      	ldrb	r3, [r7, #15]
 800701e:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
        }
    }

    W25_UNSELECT();
 8007022:	f7ff ff13 	bl	8006e4c <W25_UNSELECT>

    return status;
 8007026:	7bfb      	ldrb	r3, [r7, #15]
}
 8007028:	4618      	mov	r0, r3
 800702a:	3710      	adds	r7, #16
 800702c:	46bd      	mov	sp, r7
 800702e:	bd80      	pop	{r7, pc}
 8007030:	200037ac 	.word	0x200037ac

08007034 <W25qxx_WaitForWriteEnd>:

    W25_UNSELECT();
}
//------------------------------------------------------------------------------------------
void W25qxx_WaitForWriteEnd(void)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	af00      	add	r7, sp, #0
    W25qxx_Delay(1);
 8007038:	2001      	movs	r0, #1
 800703a:	f000 fd0b 	bl	8007a54 <HAL_Delay>

    W25_SELECT();
 800703e:	f7ff fef9 	bl	8006e34 <W25_SELECT>

    W25qxx_Spi(READ_STAT_REG1);
 8007042:	2005      	movs	r0, #5
 8007044:	f7ff ff0e 	bl	8006e64 <W25qxx_Spi>
    do
    {
        w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8007048:	20a5      	movs	r0, #165	; 0xa5
 800704a:	f7ff ff0b 	bl	8006e64 <W25qxx_Spi>
 800704e:	4603      	mov	r3, r0
 8007050:	461a      	mov	r2, r3
 8007052:	4b08      	ldr	r3, [pc, #32]	; (8007074 <W25qxx_WaitForWriteEnd+0x40>)
 8007054:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
        W25qxx_Delay(1);
 8007058:	2001      	movs	r0, #1
 800705a:	f000 fcfb 	bl	8007a54 <HAL_Delay>
    } while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 800705e:	4b05      	ldr	r3, [pc, #20]	; (8007074 <W25qxx_WaitForWriteEnd+0x40>)
 8007060:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8007064:	f003 0301 	and.w	r3, r3, #1
 8007068:	2b00      	cmp	r3, #0
 800706a:	d1ed      	bne.n	8007048 <W25qxx_WaitForWriteEnd+0x14>

    W25_UNSELECT();
 800706c:	f7ff feee 	bl	8006e4c <W25_UNSELECT>
}
 8007070:	bf00      	nop
 8007072:	bd80      	pop	{r7, pc}
 8007074:	200037ac 	.word	0x200037ac

08007078 <W25qxx_Init>:
//------------------------------------------------------------------------------------------
bool W25qxx_Init(void)
{
 8007078:	b5f0      	push	{r4, r5, r6, r7, lr}
 800707a:	b089      	sub	sp, #36	; 0x24
 800707c:	af06      	add	r7, sp, #24

	W25qxx_Reset();
 800707e:	f7ff ff13 	bl	8006ea8 <W25qxx_Reset>


    w25qxx.Lock = 1;
 8007082:	4b54      	ldr	r3, [pc, #336]	; (80071d4 <W25qxx_Init+0x15c>)
 8007084:	2201      	movs	r2, #1
 8007086:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    bool ret = false;
 800708a:	2300      	movs	r3, #0
 800708c:	71fb      	strb	r3, [r7, #7]

    W25_UNSELECT();
 800708e:	f7ff fedd 	bl	8006e4c <W25_UNSELECT>

    uint32_t id = W25qxx_ReadID() & 0xffff;
 8007092:	f7ff ff1d 	bl	8006ed0 <W25qxx_ReadID>
 8007096:	4603      	mov	r3, r0
 8007098:	b29b      	uxth	r3, r3
 800709a:	603b      	str	r3, [r7, #0]
//#ifdef W25QXX_DEBUG
    Report(1, "w25qxx Init Begin... Chip ID:0x%X\r\n", id);
 800709c:	683a      	ldr	r2, [r7, #0]
 800709e:	494e      	ldr	r1, [pc, #312]	; (80071d8 <W25qxx_Init+0x160>)
 80070a0:	2001      	movs	r0, #1
 80070a2:	f7fd ff1d 	bl	8004ee0 <Report>
//#endif
    id &= 0xff;
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	b2db      	uxtb	r3, r3
 80070aa:	603b      	str	r3, [r7, #0]
    id -= 0x10;//0x4010;
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	3b10      	subs	r3, #16
 80070b0:	603b      	str	r3, [r7, #0]
    if (id > 0x0a) id = 0;
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	2b0a      	cmp	r3, #10
 80070b6:	d901      	bls.n	80070bc <W25qxx_Init+0x44>
 80070b8:	2300      	movs	r3, #0
 80070ba:	603b      	str	r3, [r7, #0]
    w25qxx.ID         = id;              //W25Q10..W25Q512
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	b2da      	uxtb	r2, r3
 80070c0:	4b44      	ldr	r3, [pc, #272]	; (80071d4 <W25qxx_Init+0x15c>)
 80070c2:	701a      	strb	r2, [r3, #0]
    w25qxx.BlockCount = all_chipBLK[id]; //0..1024;
 80070c4:	4a45      	ldr	r2, [pc, #276]	; (80071dc <W25qxx_Init+0x164>)
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070cc:	4a41      	ldr	r2, [pc, #260]	; (80071d4 <W25qxx_Init+0x15c>)
 80070ce:	f8c2 301b 	str.w	r3, [r2, #27]
//#ifdef W25QXX_DEBUG
    Report(1, "Chip %s\r\n", all_chipID[id]);
 80070d2:	4a43      	ldr	r2, [pc, #268]	; (80071e0 <W25qxx_Init+0x168>)
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070da:	461a      	mov	r2, r3
 80070dc:	4941      	ldr	r1, [pc, #260]	; (80071e4 <W25qxx_Init+0x16c>)
 80070de:	2001      	movs	r0, #1
 80070e0:	f7fd fefe 	bl	8004ee0 <Report>
//#endif

    if (id) {
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d06b      	beq.n	80071c2 <W25qxx_Init+0x14a>
    	w25qxx.PageSize = 256;
 80070ea:	4b3a      	ldr	r3, [pc, #232]	; (80071d4 <W25qxx_Init+0x15c>)
 80070ec:	2200      	movs	r2, #0
 80070ee:	725a      	strb	r2, [r3, #9]
 80070f0:	2200      	movs	r2, #0
 80070f2:	f042 0201 	orr.w	r2, r2, #1
 80070f6:	729a      	strb	r2, [r3, #10]
    	w25qxx.SectorSize = 0x1000;
 80070f8:	4b36      	ldr	r3, [pc, #216]	; (80071d4 <W25qxx_Init+0x15c>)
 80070fa:	2200      	movs	r2, #0
 80070fc:	73da      	strb	r2, [r3, #15]
 80070fe:	2200      	movs	r2, #0
 8007100:	f042 0210 	orr.w	r2, r2, #16
 8007104:	741a      	strb	r2, [r3, #16]
 8007106:	2200      	movs	r2, #0
 8007108:	745a      	strb	r2, [r3, #17]
 800710a:	2200      	movs	r2, #0
 800710c:	749a      	strb	r2, [r3, #18]
    	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 800710e:	4b31      	ldr	r3, [pc, #196]	; (80071d4 <W25qxx_Init+0x15c>)
 8007110:	f8d3 301b 	ldr.w	r3, [r3, #27]
 8007114:	011b      	lsls	r3, r3, #4
 8007116:	4a2f      	ldr	r2, [pc, #188]	; (80071d4 <W25qxx_Init+0x15c>)
 8007118:	f8c2 3013 	str.w	r3, [r2, #19]
    	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 800711c:	4b2d      	ldr	r3, [pc, #180]	; (80071d4 <W25qxx_Init+0x15c>)
 800711e:	f8d3 3013 	ldr.w	r3, [r3, #19]
 8007122:	4a2c      	ldr	r2, [pc, #176]	; (80071d4 <W25qxx_Init+0x15c>)
 8007124:	f8d2 200f 	ldr.w	r2, [r2, #15]
 8007128:	fb02 f303 	mul.w	r3, r2, r3
 800712c:	4a29      	ldr	r2, [pc, #164]	; (80071d4 <W25qxx_Init+0x15c>)
 800712e:	f8b2 2009 	ldrh.w	r2, [r2, #9]
 8007132:	b292      	uxth	r2, r2
 8007134:	fbb3 f3f2 	udiv	r3, r3, r2
 8007138:	4a26      	ldr	r2, [pc, #152]	; (80071d4 <W25qxx_Init+0x15c>)
 800713a:	f8c2 300b 	str.w	r3, [r2, #11]
    	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 800713e:	4b25      	ldr	r3, [pc, #148]	; (80071d4 <W25qxx_Init+0x15c>)
 8007140:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8007144:	011b      	lsls	r3, r3, #4
 8007146:	4a23      	ldr	r2, [pc, #140]	; (80071d4 <W25qxx_Init+0x15c>)
 8007148:	f8c2 3017 	str.w	r3, [r2, #23]
    	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 800714c:	4b21      	ldr	r3, [pc, #132]	; (80071d4 <W25qxx_Init+0x15c>)
 800714e:	f8d3 3013 	ldr.w	r3, [r3, #19]
 8007152:	4a20      	ldr	r2, [pc, #128]	; (80071d4 <W25qxx_Init+0x15c>)
 8007154:	f8d2 200f 	ldr.w	r2, [r2, #15]
 8007158:	fb02 f303 	mul.w	r3, r2, r3
 800715c:	0a9b      	lsrs	r3, r3, #10
 800715e:	4a1d      	ldr	r2, [pc, #116]	; (80071d4 <W25qxx_Init+0x15c>)
 8007160:	f8c2 301f 	str.w	r3, [r2, #31]
    	W25qxx_ReadUniqID();
 8007164:	f7ff fede 	bl	8006f24 <W25qxx_ReadUniqID>
    	W25qxx_ReadStatusRegister(1);
 8007168:	2001      	movs	r0, #1
 800716a:	f7ff ff25 	bl	8006fb8 <W25qxx_ReadStatusRegister>
    	W25qxx_ReadStatusRegister(2);
 800716e:	2002      	movs	r0, #2
 8007170:	f7ff ff22 	bl	8006fb8 <W25qxx_ReadStatusRegister>
    	W25qxx_ReadStatusRegister(3);
 8007174:	2003      	movs	r0, #3
 8007176:	f7ff ff1f 	bl	8006fb8 <W25qxx_ReadStatusRegister>
    	ret = true;
 800717a:	2301      	movs	r3, #1
 800717c:	71fb      	strb	r3, [r7, #7]
                 "\tSector Size:\t%u bytes\r\n"
                 "\tSector Count:\t%u\r\n"
                 "\tBlock Size:\t%u bytes\r\n"
                 "\tBlock Count:\t%u\r\n"
                 "\tCapacity:\t%u KBytes\r\n",
                 w25qxx.PageSize,
 800717e:	4b15      	ldr	r3, [pc, #84]	; (80071d4 <W25qxx_Init+0x15c>)
 8007180:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8007184:	b29b      	uxth	r3, r3
    	Report(0,"\tPage Size:\t%u bytes\r\n"
 8007186:	461e      	mov	r6, r3
 8007188:	4b12      	ldr	r3, [pc, #72]	; (80071d4 <W25qxx_Init+0x15c>)
 800718a:	f8d3 500b 	ldr.w	r5, [r3, #11]
 800718e:	4b11      	ldr	r3, [pc, #68]	; (80071d4 <W25qxx_Init+0x15c>)
 8007190:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8007194:	4a0f      	ldr	r2, [pc, #60]	; (80071d4 <W25qxx_Init+0x15c>)
 8007196:	f8d2 2013 	ldr.w	r2, [r2, #19]
 800719a:	490e      	ldr	r1, [pc, #56]	; (80071d4 <W25qxx_Init+0x15c>)
 800719c:	f8d1 1017 	ldr.w	r1, [r1, #23]
 80071a0:	480c      	ldr	r0, [pc, #48]	; (80071d4 <W25qxx_Init+0x15c>)
 80071a2:	f8d0 001b 	ldr.w	r0, [r0, #27]
 80071a6:	4c0b      	ldr	r4, [pc, #44]	; (80071d4 <W25qxx_Init+0x15c>)
 80071a8:	f8d4 401f 	ldr.w	r4, [r4, #31]
 80071ac:	9404      	str	r4, [sp, #16]
 80071ae:	9003      	str	r0, [sp, #12]
 80071b0:	9102      	str	r1, [sp, #8]
 80071b2:	9201      	str	r2, [sp, #4]
 80071b4:	9300      	str	r3, [sp, #0]
 80071b6:	462b      	mov	r3, r5
 80071b8:	4632      	mov	r2, r6
 80071ba:	490b      	ldr	r1, [pc, #44]	; (80071e8 <W25qxx_Init+0x170>)
 80071bc:	2000      	movs	r0, #0
 80071be:	f7fd fe8f 	bl	8004ee0 <Report>
                 w25qxx.BlockCount,
                 w25qxx.CapacityInKiloByte);
//#endif
    }

    w25qxx.Lock = 0;
 80071c2:	4b04      	ldr	r3, [pc, #16]	; (80071d4 <W25qxx_Init+0x15c>)
 80071c4:	2200      	movs	r2, #0
 80071c6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

    return ret;
 80071ca:	79fb      	ldrb	r3, [r7, #7]
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	370c      	adds	r7, #12
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071d4:	200037ac 	.word	0x200037ac
 80071d8:	0801487c 	.word	0x0801487c
 80071dc:	080158d8 	.word	0x080158d8
 80071e0:	2000022c 	.word	0x2000022c
 80071e4:	080148a0 	.word	0x080148a0
 80071e8:	080148ac 	.word	0x080148ac

080071ec <W25qxx_getChipID>:
//------------------------------------------------------------------------------------------
uint32_t W25qxx_getChipID()
{
 80071ec:	b480      	push	{r7}
 80071ee:	af00      	add	r7, sp, #0
	return (uint32_t)w25qxx.ID;
 80071f0:	4b03      	ldr	r3, [pc, #12]	; (8007200 <W25qxx_getChipID+0x14>)
 80071f2:	781b      	ldrb	r3, [r3, #0]
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	46bd      	mov	sp, r7
 80071f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fc:	4770      	bx	lr
 80071fe:	bf00      	nop
 8007200:	200037ac 	.word	0x200037ac

08007204 <W25qxx_getSectorCount>:
uint32_t W25qxx_getSectorCount()
{
 8007204:	b480      	push	{r7}
 8007206:	af00      	add	r7, sp, #0
	return w25qxx.SectorCount;
 8007208:	4b03      	ldr	r3, [pc, #12]	; (8007218 <W25qxx_getSectorCount+0x14>)
 800720a:	f8d3 3013 	ldr.w	r3, [r3, #19]
}
 800720e:	4618      	mov	r0, r3
 8007210:	46bd      	mov	sp, r7
 8007212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007216:	4770      	bx	lr
 8007218:	200037ac 	.word	0x200037ac

0800721c <W25qxx_getSectorSize>:
uint32_t W25qxx_getSectorSize()
{
 800721c:	b480      	push	{r7}
 800721e:	af00      	add	r7, sp, #0
	return w25qxx.SectorSize;
 8007220:	4b03      	ldr	r3, [pc, #12]	; (8007230 <W25qxx_getSectorSize+0x14>)
 8007222:	f8d3 300f 	ldr.w	r3, [r3, #15]
}
 8007226:	4618      	mov	r0, r3
 8007228:	46bd      	mov	sp, r7
 800722a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722e:	4770      	bx	lr
 8007230:	200037ac 	.word	0x200037ac

08007234 <W25qxx_getPageSize>:
uint32_t W25qxx_getPageCount()
{
	return w25qxx.PageCount;
}
uint32_t W25qxx_getPageSize()
{
 8007234:	b480      	push	{r7}
 8007236:	af00      	add	r7, sp, #0
	return w25qxx.PageSize;
 8007238:	4b04      	ldr	r3, [pc, #16]	; (800724c <W25qxx_getPageSize+0x18>)
 800723a:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 800723e:	b29b      	uxth	r3, r3
}
 8007240:	4618      	mov	r0, r3
 8007242:	46bd      	mov	sp, r7
 8007244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007248:	4770      	bx	lr
 800724a:	bf00      	nop
 800724c:	200037ac 	.word	0x200037ac

08007250 <W25qxx_EraseSector>:

    w25qxx.Lock = 0;
}
//------------------------------------------------------------------------------------------
void W25qxx_EraseSector(uint32_t SectorAddr)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b082      	sub	sp, #8
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
    while (w25qxx.Lock) W25qxx_Delay(1);
 8007258:	e002      	b.n	8007260 <W25qxx_EraseSector+0x10>
 800725a:	2001      	movs	r0, #1
 800725c:	f000 fbfa 	bl	8007a54 <HAL_Delay>
 8007260:	4b1c      	ldr	r3, [pc, #112]	; (80072d4 <W25qxx_EraseSector+0x84>)
 8007262:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8007266:	2b00      	cmp	r3, #0
 8007268:	d1f7      	bne.n	800725a <W25qxx_EraseSector+0xa>

    w25qxx.Lock = 1;
 800726a:	4b1a      	ldr	r3, [pc, #104]	; (80072d4 <W25qxx_EraseSector+0x84>)
 800726c:	2201      	movs	r2, #1
 800726e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
#ifdef W25QXX_DEBUG
    uint32_t StartTime = HAL_GetTick();
    Report(1, "%u Begin...", SectorAddr);
#endif

    W25qxx_WaitForWriteEnd();
 8007272:	f7ff fedf 	bl	8007034 <W25qxx_WaitForWriteEnd>
    SectorAddr = SectorAddr * w25qxx.SectorSize;
 8007276:	4b17      	ldr	r3, [pc, #92]	; (80072d4 <W25qxx_EraseSector+0x84>)
 8007278:	f8d3 200f 	ldr.w	r2, [r3, #15]
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	fb02 f303 	mul.w	r3, r2, r3
 8007282:	607b      	str	r3, [r7, #4]
    W25qxx_WriteEnable();
 8007284:	f7ff fe8a 	bl	8006f9c <W25qxx_WriteEnable>

    W25_SELECT();
 8007288:	f7ff fdd4 	bl	8006e34 <W25_SELECT>
    W25qxx_Spi(SECTOR_ERASE);
 800728c:	2020      	movs	r0, #32
 800728e:	f7ff fde9 	bl	8006e64 <W25qxx_Spi>
    //if (w25qxx.ID >= W25Q256) W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
    W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	0c1b      	lsrs	r3, r3, #16
 8007296:	b2db      	uxtb	r3, r3
 8007298:	4618      	mov	r0, r3
 800729a:	f7ff fde3 	bl	8006e64 <W25qxx_Spi>
    W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	0a1b      	lsrs	r3, r3, #8
 80072a2:	b2db      	uxtb	r3, r3
 80072a4:	4618      	mov	r0, r3
 80072a6:	f7ff fddd 	bl	8006e64 <W25qxx_Spi>
    W25qxx_Spi(SectorAddr & 0xFF);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	b2db      	uxtb	r3, r3
 80072ae:	4618      	mov	r0, r3
 80072b0:	f7ff fdd8 	bl	8006e64 <W25qxx_Spi>
    W25_UNSELECT();
 80072b4:	f7ff fdca 	bl	8006e4c <W25_UNSELECT>

    W25qxx_WaitForWriteEnd();
 80072b8:	f7ff febc 	bl	8007034 <W25qxx_WaitForWriteEnd>

#ifdef W25QXX_DEBUG
    uint32_t dur = HAL_GetTick() - StartTime;
    Report(0, " done after %u ms (%u sec)!\r\n", dur, dur / 1000);
#endif
    W25qxx_Delay(1);
 80072bc:	2001      	movs	r0, #1
 80072be:	f000 fbc9 	bl	8007a54 <HAL_Delay>

    w25qxx.Lock = 0;
 80072c2:	4b04      	ldr	r3, [pc, #16]	; (80072d4 <W25qxx_EraseSector+0x84>)
 80072c4:	2200      	movs	r2, #0
 80072c6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 80072ca:	bf00      	nop
 80072cc:	3708      	adds	r7, #8
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}
 80072d2:	bf00      	nop
 80072d4:	200037ac 	.word	0x200037ac

080072d8 <W25qxx_SectorToPage>:
{
    return ((SectorAddress * w25qxx.SectorSize) / w25qxx.BlockSize);
}
//------------------------------------------------------------------------------------------
uint32_t W25qxx_SectorToPage(uint32_t SectorAddress)
{
 80072d8:	b480      	push	{r7}
 80072da:	b083      	sub	sp, #12
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
    return (SectorAddress * w25qxx.SectorSize) / w25qxx.PageSize;
 80072e0:	4b08      	ldr	r3, [pc, #32]	; (8007304 <W25qxx_SectorToPage+0x2c>)
 80072e2:	f8d3 300f 	ldr.w	r3, [r3, #15]
 80072e6:	687a      	ldr	r2, [r7, #4]
 80072e8:	fb02 f303 	mul.w	r3, r2, r3
 80072ec:	4a05      	ldr	r2, [pc, #20]	; (8007304 <W25qxx_SectorToPage+0x2c>)
 80072ee:	f8b2 2009 	ldrh.w	r2, [r2, #9]
 80072f2:	b292      	uxth	r2, r2
 80072f4:	fbb3 f3f2 	udiv	r3, r3, r2
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	370c      	adds	r7, #12
 80072fc:	46bd      	mov	sp, r7
 80072fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007302:	4770      	bx	lr
 8007304:	200037ac 	.word	0x200037ac

08007308 <W25qxx_IsEmptySector>:

    return false;
}
//------------------------------------------------------------------------------------------
bool W25qxx_IsEmptySector(uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToCheck_up_to_SectorSize)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b090      	sub	sp, #64	; 0x40
 800730c:	af00      	add	r7, sp, #0
 800730e:	60f8      	str	r0, [r7, #12]
 8007310:	60b9      	str	r1, [r7, #8]
 8007312:	607a      	str	r2, [r7, #4]
    while (w25qxx.Lock) W25qxx_Delay(1);
 8007314:	e002      	b.n	800731c <W25qxx_IsEmptySector+0x14>
 8007316:	2001      	movs	r0, #1
 8007318:	f000 fb9c 	bl	8007a54 <HAL_Delay>
 800731c:	4b59      	ldr	r3, [pc, #356]	; (8007484 <W25qxx_IsEmptySector+0x17c>)
 800731e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8007322:	2b00      	cmp	r3, #0
 8007324:	d1f7      	bne.n	8007316 <W25qxx_IsEmptySector+0xe>

    w25qxx.Lock = 1;
 8007326:	4b57      	ldr	r3, [pc, #348]	; (8007484 <W25qxx_IsEmptySector+0x17c>)
 8007328:	2201      	movs	r2, #1
 800732a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

    if ( (NumByteToCheck_up_to_SectorSize > w25qxx.SectorSize) || (!NumByteToCheck_up_to_SectorSize) )
 800732e:	4b55      	ldr	r3, [pc, #340]	; (8007484 <W25qxx_IsEmptySector+0x17c>)
 8007330:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8007334:	687a      	ldr	r2, [r7, #4]
 8007336:	429a      	cmp	r2, r3
 8007338:	d802      	bhi.n	8007340 <W25qxx_IsEmptySector+0x38>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d103      	bne.n	8007348 <W25qxx_IsEmptySector+0x40>
                NumByteToCheck_up_to_SectorSize = w25qxx.SectorSize;
 8007340:	4b50      	ldr	r3, [pc, #320]	; (8007484 <W25qxx_IsEmptySector+0x17c>)
 8007342:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8007346:	607b      	str	r3, [r7, #4]
    uint32_t StartTime = HAL_GetTick();
#endif

    uint8_t pBuffer[32];
    uint32_t i, WorkAddress;
    for ( i = OffsetInByte; i < w25qxx.SectorSize; i += sizeof(pBuffer)) {
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800734c:	e040      	b.n	80073d0 <W25qxx_IsEmptySector+0xc8>

    	W25_SELECT();
 800734e:	f7ff fd71 	bl	8006e34 <W25_SELECT>
        WorkAddress = (i + Sector_Address * w25qxx.SectorSize);
 8007352:	4b4c      	ldr	r3, [pc, #304]	; (8007484 <W25qxx_IsEmptySector+0x17c>)
 8007354:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8007358:	68fa      	ldr	r2, [r7, #12]
 800735a:	fb02 f303 	mul.w	r3, r2, r3
 800735e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007360:	4413      	add	r3, r2
 8007362:	637b      	str	r3, [r7, #52]	; 0x34
        W25qxx_Spi(DATA_READ);//FAST_READ);
 8007364:	2003      	movs	r0, #3
 8007366:	f7ff fd7d 	bl	8006e64 <W25qxx_Spi>
        //if (w25qxx.ID >= W25Q256) W25qxx_Spi((WorkAddress & 0xFF000000) >> 24);
        W25qxx_Spi((WorkAddress & 0xFF0000) >> 16);
 800736a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800736c:	0c1b      	lsrs	r3, r3, #16
 800736e:	b2db      	uxtb	r3, r3
 8007370:	4618      	mov	r0, r3
 8007372:	f7ff fd77 	bl	8006e64 <W25qxx_Spi>
        W25qxx_Spi((WorkAddress & 0xFF00) >> 8);
 8007376:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007378:	0a1b      	lsrs	r3, r3, #8
 800737a:	b2db      	uxtb	r3, r3
 800737c:	4618      	mov	r0, r3
 800737e:	f7ff fd71 	bl	8006e64 <W25qxx_Spi>
        W25qxx_Spi(WorkAddress & 0xFF);
 8007382:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007384:	b2db      	uxtb	r3, r3
 8007386:	4618      	mov	r0, r3
 8007388:	f7ff fd6c 	bl	8006e64 <W25qxx_Spi>
        //W25qxx_Spi(0);
        HAL_SPI_Receive(portFLASH, pBuffer, sizeof(pBuffer), min_wait_ms);
 800738c:	4b3e      	ldr	r3, [pc, #248]	; (8007488 <W25qxx_IsEmptySector+0x180>)
 800738e:	6818      	ldr	r0, [r3, #0]
 8007390:	23fa      	movs	r3, #250	; 0xfa
 8007392:	f107 0114 	add.w	r1, r7, #20
 8007396:	2220      	movs	r2, #32
 8007398:	f004 fed5 	bl	800c146 <HAL_SPI_Receive>
        W25_UNSELECT();
 800739c:	f7ff fd56 	bl	8006e4c <W25_UNSELECT>

        for (uint8_t x = 0; x < sizeof(pBuffer); x++) {
 80073a0:	2300      	movs	r3, #0
 80073a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80073a6:	e00c      	b.n	80073c2 <W25qxx_IsEmptySector+0xba>
            if (pBuffer[x] != 0xFF) goto NOT_EMPTY;
 80073a8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80073ac:	3340      	adds	r3, #64	; 0x40
 80073ae:	443b      	add	r3, r7
 80073b0:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 80073b4:	2bff      	cmp	r3, #255	; 0xff
 80073b6:	d159      	bne.n	800746c <W25qxx_IsEmptySector+0x164>
        for (uint8_t x = 0; x < sizeof(pBuffer); x++) {
 80073b8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80073bc:	3301      	adds	r3, #1
 80073be:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80073c2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80073c6:	2b1f      	cmp	r3, #31
 80073c8:	d9ee      	bls.n	80073a8 <W25qxx_IsEmptySector+0xa0>
    for ( i = OffsetInByte; i < w25qxx.SectorSize; i += sizeof(pBuffer)) {
 80073ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073cc:	3320      	adds	r3, #32
 80073ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80073d0:	4b2c      	ldr	r3, [pc, #176]	; (8007484 <W25qxx_IsEmptySector+0x17c>)
 80073d2:	f8d3 300f 	ldr.w	r3, [r3, #15]
 80073d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80073d8:	429a      	cmp	r2, r3
 80073da:	d3b8      	bcc.n	800734e <W25qxx_IsEmptySector+0x46>
        }
    }
    if ((w25qxx.SectorSize + OffsetInByte) % sizeof(pBuffer) != 0) {
 80073dc:	4b29      	ldr	r3, [pc, #164]	; (8007484 <W25qxx_IsEmptySector+0x17c>)
 80073de:	f8d3 200f 	ldr.w	r2, [r3, #15]
 80073e2:	68bb      	ldr	r3, [r7, #8]
 80073e4:	4413      	add	r3, r2
 80073e6:	f003 031f 	and.w	r3, r3, #31
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d038      	beq.n	8007460 <W25qxx_IsEmptySector+0x158>
        i -= sizeof(pBuffer);
 80073ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073f0:	3b20      	subs	r3, #32
 80073f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        for( ; i < w25qxx.SectorSize; i++) {
 80073f4:	e02e      	b.n	8007454 <W25qxx_IsEmptySector+0x14c>

            W25_SELECT();
 80073f6:	f7ff fd1d 	bl	8006e34 <W25_SELECT>
            WorkAddress = (i + Sector_Address * w25qxx.SectorSize);
 80073fa:	4b22      	ldr	r3, [pc, #136]	; (8007484 <W25qxx_IsEmptySector+0x17c>)
 80073fc:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8007400:	68fa      	ldr	r2, [r7, #12]
 8007402:	fb02 f303 	mul.w	r3, r2, r3
 8007406:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007408:	4413      	add	r3, r2
 800740a:	637b      	str	r3, [r7, #52]	; 0x34
            W25qxx_Spi(DATA_READ);//FAST_READ);
 800740c:	2003      	movs	r0, #3
 800740e:	f7ff fd29 	bl	8006e64 <W25qxx_Spi>
            //if (w25qxx.ID >= W25Q256) W25qxx_Spi((WorkAddress & 0xFF000000) >> 24);
            W25qxx_Spi((WorkAddress & 0xFF0000) >> 16);
 8007412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007414:	0c1b      	lsrs	r3, r3, #16
 8007416:	b2db      	uxtb	r3, r3
 8007418:	4618      	mov	r0, r3
 800741a:	f7ff fd23 	bl	8006e64 <W25qxx_Spi>
            W25qxx_Spi((WorkAddress & 0xFF00) >> 8);
 800741e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007420:	0a1b      	lsrs	r3, r3, #8
 8007422:	b2db      	uxtb	r3, r3
 8007424:	4618      	mov	r0, r3
 8007426:	f7ff fd1d 	bl	8006e64 <W25qxx_Spi>
            W25qxx_Spi(WorkAddress & 0xFF);
 800742a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800742c:	b2db      	uxtb	r3, r3
 800742e:	4618      	mov	r0, r3
 8007430:	f7ff fd18 	bl	8006e64 <W25qxx_Spi>
            //W25qxx_Spi(0);
            HAL_SPI_Receive(portFLASH, pBuffer, 1, min_wait_ms);
 8007434:	4b14      	ldr	r3, [pc, #80]	; (8007488 <W25qxx_IsEmptySector+0x180>)
 8007436:	6818      	ldr	r0, [r3, #0]
 8007438:	23fa      	movs	r3, #250	; 0xfa
 800743a:	f107 0114 	add.w	r1, r7, #20
 800743e:	2201      	movs	r2, #1
 8007440:	f004 fe81 	bl	800c146 <HAL_SPI_Receive>
            W25_UNSELECT();
 8007444:	f7ff fd02 	bl	8006e4c <W25_UNSELECT>

            if (pBuffer[0] != 0xFF) goto NOT_EMPTY;
 8007448:	7d3b      	ldrb	r3, [r7, #20]
 800744a:	2bff      	cmp	r3, #255	; 0xff
 800744c:	d110      	bne.n	8007470 <W25qxx_IsEmptySector+0x168>
        for( ; i < w25qxx.SectorSize; i++) {
 800744e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007450:	3301      	adds	r3, #1
 8007452:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007454:	4b0b      	ldr	r3, [pc, #44]	; (8007484 <W25qxx_IsEmptySector+0x17c>)
 8007456:	f8d3 300f 	ldr.w	r3, [r3, #15]
 800745a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800745c:	429a      	cmp	r2, r3
 800745e:	d3ca      	bcc.n	80073f6 <W25qxx_IsEmptySector+0xee>
#ifdef W25QXX_DEBUG
    Report(1, "w25qxx CheckSector is Empty in %u ms\r\n", HAL_GetTick() - StartTime);
    //W25qxx_Delay(100);
#endif

    w25qxx.Lock = 0;
 8007460:	4b08      	ldr	r3, [pc, #32]	; (8007484 <W25qxx_IsEmptySector+0x17c>)
 8007462:	2200      	movs	r2, #0
 8007464:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

    return true;
 8007468:	2301      	movs	r3, #1
 800746a:	e007      	b.n	800747c <W25qxx_IsEmptySector+0x174>
            if (pBuffer[x] != 0xFF) goto NOT_EMPTY;
 800746c:	bf00      	nop
 800746e:	e000      	b.n	8007472 <W25qxx_IsEmptySector+0x16a>
            if (pBuffer[0] != 0xFF) goto NOT_EMPTY;
 8007470:	bf00      	nop
#ifdef W25QXX_DEBUG
    Report(1, "w25qxx CheckSector is Not Empty in %u ms\r\n", HAL_GetTick() - StartTime);
    //W25qxx_Delay(100);
#endif

    w25qxx.Lock = 0;
 8007472:	4b04      	ldr	r3, [pc, #16]	; (8007484 <W25qxx_IsEmptySector+0x17c>)
 8007474:	2200      	movs	r2, #0
 8007476:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

    return false;
 800747a:	2300      	movs	r3, #0
}
 800747c:	4618      	mov	r0, r3
 800747e:	3740      	adds	r7, #64	; 0x40
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}
 8007484:	200037ac 	.word	0x200037ac
 8007488:	2000000c 	.word	0x2000000c

0800748c <W25qxx_WritePage>:

    w25qxx.Lock = 0;
}
//------------------------------------------------------------------------------------------
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b086      	sub	sp, #24
 8007490:	af00      	add	r7, sp, #0
 8007492:	60f8      	str	r0, [r7, #12]
 8007494:	60b9      	str	r1, [r7, #8]
 8007496:	607a      	str	r2, [r7, #4]
 8007498:	603b      	str	r3, [r7, #0]
    while (w25qxx.Lock) W25qxx_Delay(1);
 800749a:	e002      	b.n	80074a2 <W25qxx_WritePage+0x16>
 800749c:	2001      	movs	r0, #1
 800749e:	f000 fad9 	bl	8007a54 <HAL_Delay>
 80074a2:	4b4d      	ldr	r3, [pc, #308]	; (80075d8 <W25qxx_WritePage+0x14c>)
 80074a4:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d1f7      	bne.n	800749c <W25qxx_WritePage+0x10>

    w25qxx.Lock = 1;
 80074ac:	4b4a      	ldr	r3, [pc, #296]	; (80075d8 <W25qxx_WritePage+0x14c>)
 80074ae:	2201      	movs	r2, #1
 80074b0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

    if ( ((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || !NumByteToWrite_up_to_PageSize )
 80074b4:	683a      	ldr	r2, [r7, #0]
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	4413      	add	r3, r2
 80074ba:	4a47      	ldr	r2, [pc, #284]	; (80075d8 <W25qxx_WritePage+0x14c>)
 80074bc:	f8b2 2009 	ldrh.w	r2, [r2, #9]
 80074c0:	b292      	uxth	r2, r2
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d802      	bhi.n	80074cc <W25qxx_WritePage+0x40>
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d107      	bne.n	80074dc <W25qxx_WritePage+0x50>
                NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 80074cc:	4b42      	ldr	r3, [pc, #264]	; (80075d8 <W25qxx_WritePage+0x14c>)
 80074ce:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 80074d2:	b29b      	uxth	r3, r3
 80074d4:	461a      	mov	r2, r3
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	1ad3      	subs	r3, r2, r3
 80074da:	603b      	str	r3, [r7, #0]
    if ( (OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize )
 80074dc:	687a      	ldr	r2, [r7, #4]
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	4413      	add	r3, r2
 80074e2:	4a3d      	ldr	r2, [pc, #244]	; (80075d8 <W25qxx_WritePage+0x14c>)
 80074e4:	f8b2 2009 	ldrh.w	r2, [r2, #9]
 80074e8:	b292      	uxth	r2, r2
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d907      	bls.n	80074fe <W25qxx_WritePage+0x72>
                NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 80074ee:	4b3a      	ldr	r3, [pc, #232]	; (80075d8 <W25qxx_WritePage+0x14c>)
 80074f0:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 80074f4:	b29b      	uxth	r3, r3
 80074f6:	461a      	mov	r2, r3
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	1ad3      	subs	r3, r2, r3
 80074fc:	603b      	str	r3, [r7, #0]
    Report(1, "%s WritePage:0x%X(%u), Offset:%u ,Writes %u Bytes, begin...\r\n",
                 __func__, Page_Address, Page_Address, OffsetInByte, NumByteToWrite_up_to_PageSize);
    uint32_t StartTime = HAL_GetTick();
#endif

    W25qxx_WaitForWriteEnd();
 80074fe:	f7ff fd99 	bl	8007034 <W25qxx_WaitForWriteEnd>
    W25qxx_WriteEnable();
 8007502:	f7ff fd4b 	bl	8006f9c <W25qxx_WriteEnable>

    Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 8007506:	4b34      	ldr	r3, [pc, #208]	; (80075d8 <W25qxx_WritePage+0x14c>)
 8007508:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 800750c:	b29b      	uxth	r3, r3
 800750e:	461a      	mov	r2, r3
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	fb02 f303 	mul.w	r3, r2, r3
 8007516:	687a      	ldr	r2, [r7, #4]
 8007518:	4413      	add	r3, r2
 800751a:	60bb      	str	r3, [r7, #8]
    W25qxx_Spi((Page_Address & 0xFF00) >> 8);
    W25qxx_Spi(Page_Address&0xFF);
    HAL_SPI_Transmit(portFLASH, pBuffer, NumByteToWrite_up_to_PageSize, min_wait_ms);
    W25_UNSELECT();*/

    uint16_t lens = NumByteToWrite_up_to_PageSize + PAGE_HDR_BYTES;
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	b29b      	uxth	r3, r3
 8007520:	3304      	adds	r3, #4
 8007522:	82fb      	strh	r3, [r7, #22]
    int idx = 0;
 8007524:	2300      	movs	r3, #0
 8007526:	613b      	str	r3, [r7, #16]
    pageTmp[idx++] = PAGE_PROG;
 8007528:	693b      	ldr	r3, [r7, #16]
 800752a:	1c5a      	adds	r2, r3, #1
 800752c:	613a      	str	r2, [r7, #16]
 800752e:	4a2b      	ldr	r2, [pc, #172]	; (80075dc <W25qxx_WritePage+0x150>)
 8007530:	2102      	movs	r1, #2
 8007532:	54d1      	strb	r1, [r2, r3]
    //if (w25qxx.ID >= W25Q256) pageTmp[idx++] = (Page_Address & 0xFF000000) >> 24;
    pageTmp[idx++] = (Page_Address & 0xFF0000) >> 16;
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	0c19      	lsrs	r1, r3, #16
 8007538:	693b      	ldr	r3, [r7, #16]
 800753a:	1c5a      	adds	r2, r3, #1
 800753c:	613a      	str	r2, [r7, #16]
 800753e:	b2c9      	uxtb	r1, r1
 8007540:	4a26      	ldr	r2, [pc, #152]	; (80075dc <W25qxx_WritePage+0x150>)
 8007542:	54d1      	strb	r1, [r2, r3]
    pageTmp[idx++] = (Page_Address& 0xFF00) >> 8;
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	0a19      	lsrs	r1, r3, #8
 8007548:	693b      	ldr	r3, [r7, #16]
 800754a:	1c5a      	adds	r2, r3, #1
 800754c:	613a      	str	r2, [r7, #16]
 800754e:	b2c9      	uxtb	r1, r1
 8007550:	4a22      	ldr	r2, [pc, #136]	; (80075dc <W25qxx_WritePage+0x150>)
 8007552:	54d1      	strb	r1, [r2, r3]
    pageTmp[idx++] = Page_Address & 0xFF;
 8007554:	693b      	ldr	r3, [r7, #16]
 8007556:	1c5a      	adds	r2, r3, #1
 8007558:	613a      	str	r2, [r7, #16]
 800755a:	68ba      	ldr	r2, [r7, #8]
 800755c:	b2d1      	uxtb	r1, r2
 800755e:	4a1f      	ldr	r2, [pc, #124]	; (80075dc <W25qxx_WritePage+0x150>)
 8007560:	54d1      	strb	r1, [r2, r3]
    memcpy(&pageTmp[PAGE_HDR_BYTES], pBuffer, NumByteToWrite_up_to_PageSize);//w25qxx.PageSize);
 8007562:	683a      	ldr	r2, [r7, #0]
 8007564:	68f9      	ldr	r1, [r7, #12]
 8007566:	481e      	ldr	r0, [pc, #120]	; (80075e0 <W25qxx_WritePage+0x154>)
 8007568:	f008 fa80 	bl	800fa6c <memcpy>

    spiRdy = 0;
 800756c:	4b1d      	ldr	r3, [pc, #116]	; (80075e4 <W25qxx_WritePage+0x158>)
 800756e:	2200      	movs	r2, #0
 8007570:	701a      	strb	r2, [r3, #0]

w25_withDMA = 1;
 8007572:	4b1d      	ldr	r3, [pc, #116]	; (80075e8 <W25qxx_WritePage+0x15c>)
 8007574:	2201      	movs	r2, #1
 8007576:	701a      	strb	r2, [r3, #0]
    W25_SELECT();
 8007578:	f7ff fc5c 	bl	8006e34 <W25_SELECT>
    if (w25_withDMA) {
 800757c:	4b1a      	ldr	r3, [pc, #104]	; (80075e8 <W25qxx_WritePage+0x15c>)
 800757e:	781b      	ldrb	r3, [r3, #0]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d012      	beq.n	80075aa <W25qxx_WritePage+0x11e>
    	HAL_SPI_Transmit_DMA(portFLASH, pageTmp, lens);
 8007584:	4b19      	ldr	r3, [pc, #100]	; (80075ec <W25qxx_WritePage+0x160>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	8afa      	ldrh	r2, [r7, #22]
 800758a:	4914      	ldr	r1, [pc, #80]	; (80075dc <W25qxx_WritePage+0x150>)
 800758c:	4618      	mov	r0, r3
 800758e:	f005 f91d 	bl	800c7cc <HAL_SPI_Transmit_DMA>
    	while (!spiRdy) {
 8007592:	e002      	b.n	800759a <W25qxx_WritePage+0x10e>
    		W25qxx_Delay(1);
 8007594:	2001      	movs	r0, #1
 8007596:	f000 fa5d 	bl	8007a54 <HAL_Delay>
    	while (!spiRdy) {
 800759a:	4b12      	ldr	r3, [pc, #72]	; (80075e4 <W25qxx_WritePage+0x158>)
 800759c:	781b      	ldrb	r3, [r3, #0]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d0f8      	beq.n	8007594 <W25qxx_WritePage+0x108>
    	}
w25_withDMA = 0;
 80075a2:	4b11      	ldr	r3, [pc, #68]	; (80075e8 <W25qxx_WritePage+0x15c>)
 80075a4:	2200      	movs	r2, #0
 80075a6:	701a      	strb	r2, [r3, #0]
 80075a8:	e00d      	b.n	80075c6 <W25qxx_WritePage+0x13a>
    } else {
    	HAL_SPI_Transmit(portFLASH, pageTmp, lens, min_wait_ms);
 80075aa:	4b10      	ldr	r3, [pc, #64]	; (80075ec <W25qxx_WritePage+0x160>)
 80075ac:	6818      	ldr	r0, [r3, #0]
 80075ae:	23fa      	movs	r3, #250	; 0xfa
 80075b0:	8afa      	ldrh	r2, [r7, #22]
 80075b2:	490a      	ldr	r1, [pc, #40]	; (80075dc <W25qxx_WritePage+0x150>)
 80075b4:	f004 fc59 	bl	800be6a <HAL_SPI_Transmit>

    	W25_UNSELECT();
 80075b8:	f7ff fc48 	bl	8006e4c <W25_UNSELECT>

    	W25qxx_WaitForWriteEnd();
 80075bc:	f7ff fd3a 	bl	8007034 <W25qxx_WaitForWriteEnd>

    	spiRdy = 1;
 80075c0:	4b08      	ldr	r3, [pc, #32]	; (80075e4 <W25qxx_WritePage+0x158>)
 80075c2:	2201      	movs	r2, #1
 80075c4:	701a      	strb	r2, [r3, #0]
    	Report(0, "\r\n");
    	Report(1, "%s done after %u ms\r\n", __func__, StartTime);
#endif
    }

    w25qxx.Lock = 0;
 80075c6:	4b04      	ldr	r3, [pc, #16]	; (80075d8 <W25qxx_WritePage+0x14c>)
 80075c8:	2200      	movs	r2, #0
 80075ca:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 80075ce:	bf00      	nop
 80075d0:	3718      	adds	r7, #24
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}
 80075d6:	bf00      	nop
 80075d8:	200037ac 	.word	0x200037ac
 80075dc:	200037d4 	.word	0x200037d4
 80075e0:	200037d8 	.word	0x200037d8
 80075e4:	200001e4 	.word	0x200001e4
 80075e8:	200038d9 	.word	0x200038d9
 80075ec:	2000000c 	.word	0x2000000c

080075f0 <W25qxx_WriteSector>:
//------------------------------------------------------------------------------------------
void W25qxx_WriteSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_SectorSize)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b088      	sub	sp, #32
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	60f8      	str	r0, [r7, #12]
 80075f8:	60b9      	str	r1, [r7, #8]
 80075fa:	607a      	str	r2, [r7, #4]
 80075fc:	603b      	str	r3, [r7, #0]
    if ((NumByteToWrite_up_to_SectorSize > w25qxx.SectorSize) || !NumByteToWrite_up_to_SectorSize)
 80075fe:	4b31      	ldr	r3, [pc, #196]	; (80076c4 <W25qxx_WriteSector+0xd4>)
 8007600:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8007604:	683a      	ldr	r2, [r7, #0]
 8007606:	429a      	cmp	r2, r3
 8007608:	d802      	bhi.n	8007610 <W25qxx_WriteSector+0x20>
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d103      	bne.n	8007618 <W25qxx_WriteSector+0x28>
                NumByteToWrite_up_to_SectorSize = w25qxx.SectorSize;
 8007610:	4b2c      	ldr	r3, [pc, #176]	; (80076c4 <W25qxx_WriteSector+0xd4>)
 8007612:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8007616:	603b      	str	r3, [r7, #0]
    Report(1, "%s WriteSector:0x%X(%u), Offset:%u ,Write %u Bytes, begin...\r\n",
                 __func__, Sector_Address, Sector_Address, OffsetInByte, NumByteToWrite_up_to_SectorSize);
    //W25qxx_Delay(100);
#endif

    if (OffsetInByte >= w25qxx.SectorSize) {
 8007618:	4b2a      	ldr	r3, [pc, #168]	; (80076c4 <W25qxx_WriteSector+0xd4>)
 800761a:	f8d3 300f 	ldr.w	r3, [r3, #15]
 800761e:	687a      	ldr	r2, [r7, #4]
 8007620:	429a      	cmp	r2, r3
 8007622:	d24b      	bcs.n	80076bc <W25qxx_WriteSector+0xcc>
        return;
    }

    int32_t BytesToWrite;
    uint32_t LocalOffset, StartPage;
    if ((OffsetInByte + NumByteToWrite_up_to_SectorSize) > w25qxx.SectorSize)
 8007624:	687a      	ldr	r2, [r7, #4]
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	441a      	add	r2, r3
 800762a:	4b26      	ldr	r3, [pc, #152]	; (80076c4 <W25qxx_WriteSector+0xd4>)
 800762c:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8007630:	429a      	cmp	r2, r3
 8007632:	d906      	bls.n	8007642 <W25qxx_WriteSector+0x52>
        BytesToWrite = w25qxx.SectorSize - OffsetInByte;
 8007634:	4b23      	ldr	r3, [pc, #140]	; (80076c4 <W25qxx_WriteSector+0xd4>)
 8007636:	f8d3 200f 	ldr.w	r2, [r3, #15]
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	1ad3      	subs	r3, r2, r3
 800763e:	61fb      	str	r3, [r7, #28]
 8007640:	e001      	b.n	8007646 <W25qxx_WriteSector+0x56>
    else
        BytesToWrite = NumByteToWrite_up_to_SectorSize;
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	61fb      	str	r3, [r7, #28]
    StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8007646:	68b8      	ldr	r0, [r7, #8]
 8007648:	f7ff fe46 	bl	80072d8 <W25qxx_SectorToPage>
 800764c:	4602      	mov	r2, r0
 800764e:	4b1d      	ldr	r3, [pc, #116]	; (80076c4 <W25qxx_WriteSector+0xd4>)
 8007650:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8007654:	b29b      	uxth	r3, r3
 8007656:	4619      	mov	r1, r3
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	fbb3 f3f1 	udiv	r3, r3, r1
 800765e:	4413      	add	r3, r2
 8007660:	617b      	str	r3, [r7, #20]
    LocalOffset = OffsetInByte % w25qxx.PageSize;
 8007662:	4b18      	ldr	r3, [pc, #96]	; (80076c4 <W25qxx_WriteSector+0xd4>)
 8007664:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8007668:	b29b      	uxth	r3, r3
 800766a:	461a      	mov	r2, r3
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	fbb3 f1f2 	udiv	r1, r3, r2
 8007672:	fb01 f202 	mul.w	r2, r1, r2
 8007676:	1a9b      	subs	r3, r3, r2
 8007678:	61bb      	str	r3, [r7, #24]

    do
    {
        W25qxx_WritePage(pBuffer, StartPage, LocalOffset, BytesToWrite);
 800767a:	69fb      	ldr	r3, [r7, #28]
 800767c:	69ba      	ldr	r2, [r7, #24]
 800767e:	6979      	ldr	r1, [r7, #20]
 8007680:	68f8      	ldr	r0, [r7, #12]
 8007682:	f7ff ff03 	bl	800748c <W25qxx_WritePage>
        StartPage++;
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	3301      	adds	r3, #1
 800768a:	617b      	str	r3, [r7, #20]
        BytesToWrite -= w25qxx.PageSize - LocalOffset;
 800768c:	4b0d      	ldr	r3, [pc, #52]	; (80076c4 <W25qxx_WriteSector+0xd4>)
 800768e:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8007692:	b29b      	uxth	r3, r3
 8007694:	461a      	mov	r2, r3
 8007696:	69bb      	ldr	r3, [r7, #24]
 8007698:	1a9a      	subs	r2, r3, r2
 800769a:	69fb      	ldr	r3, [r7, #28]
 800769c:	4413      	add	r3, r2
 800769e:	61fb      	str	r3, [r7, #28]
        pBuffer += w25qxx.PageSize;
 80076a0:	4b08      	ldr	r3, [pc, #32]	; (80076c4 <W25qxx_WriteSector+0xd4>)
 80076a2:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 80076a6:	b29b      	uxth	r3, r3
 80076a8:	461a      	mov	r2, r3
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	4413      	add	r3, r2
 80076ae:	60fb      	str	r3, [r7, #12]
        LocalOffset = 0;
 80076b0:	2300      	movs	r3, #0
 80076b2:	61bb      	str	r3, [r7, #24]
    } while(BytesToWrite > 0);
 80076b4:	69fb      	ldr	r3, [r7, #28]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	dcdf      	bgt.n	800767a <W25qxx_WriteSector+0x8a>
 80076ba:	e000      	b.n	80076be <W25qxx_WriteSector+0xce>
        return;
 80076bc:	bf00      	nop
#ifdef W25QXX_DEBUG
    Report(1, "%s Done\r\n", __func__);
    //W25qxx_Delay(100);
#endif

}
 80076be:	3720      	adds	r7, #32
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}
 80076c4:	200037ac 	.word	0x200037ac

080076c8 <W25qxx_ReadPage>:

    w25qxx.Lock = 0;
}
//------------------------------------------------------------------------------------------
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b088      	sub	sp, #32
 80076cc:	af02      	add	r7, sp, #8
 80076ce:	60f8      	str	r0, [r7, #12]
 80076d0:	60b9      	str	r1, [r7, #8]
 80076d2:	607a      	str	r2, [r7, #4]
 80076d4:	603b      	str	r3, [r7, #0]
    while (w25qxx.Lock) W25qxx_Delay(1);
 80076d6:	e002      	b.n	80076de <W25qxx_ReadPage+0x16>
 80076d8:	2001      	movs	r0, #1
 80076da:	f000 f9bb 	bl	8007a54 <HAL_Delay>
 80076de:	4b51      	ldr	r3, [pc, #324]	; (8007824 <W25qxx_ReadPage+0x15c>)
 80076e0:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d1f7      	bne.n	80076d8 <W25qxx_ReadPage+0x10>

    w25qxx.Lock = 1;
 80076e8:	4b4e      	ldr	r3, [pc, #312]	; (8007824 <W25qxx_ReadPage+0x15c>)
 80076ea:	2201      	movs	r2, #1
 80076ec:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

    if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || !NumByteToRead_up_to_PageSize)
 80076f0:	4b4c      	ldr	r3, [pc, #304]	; (8007824 <W25qxx_ReadPage+0x15c>)
 80076f2:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 80076f6:	b29b      	uxth	r3, r3
 80076f8:	461a      	mov	r2, r3
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d802      	bhi.n	8007706 <W25qxx_ReadPage+0x3e>
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d104      	bne.n	8007710 <W25qxx_ReadPage+0x48>
        NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 8007706:	4b47      	ldr	r3, [pc, #284]	; (8007824 <W25qxx_ReadPage+0x15c>)
 8007708:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 800770c:	b29b      	uxth	r3, r3
 800770e:	603b      	str	r3, [r7, #0]
    if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 8007710:	687a      	ldr	r2, [r7, #4]
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	4413      	add	r3, r2
 8007716:	4a43      	ldr	r2, [pc, #268]	; (8007824 <W25qxx_ReadPage+0x15c>)
 8007718:	f8b2 2009 	ldrh.w	r2, [r2, #9]
 800771c:	b292      	uxth	r2, r2
 800771e:	4293      	cmp	r3, r2
 8007720:	d907      	bls.n	8007732 <W25qxx_ReadPage+0x6a>
        NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8007722:	4b40      	ldr	r3, [pc, #256]	; (8007824 <W25qxx_ReadPage+0x15c>)
 8007724:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8007728:	b29b      	uxth	r3, r3
 800772a:	461a      	mov	r2, r3
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	1ad3      	subs	r3, r2, r3
 8007730:	603b      	str	r3, [r7, #0]
                 __func__, Page_Address, Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
    //W25qxx_Delay(100);
    uint32_t StartTime = HAL_GetTick();
#endif

    Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 8007732:	4b3c      	ldr	r3, [pc, #240]	; (8007824 <W25qxx_ReadPage+0x15c>)
 8007734:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8007738:	b29b      	uxth	r3, r3
 800773a:	461a      	mov	r2, r3
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	fb02 f303 	mul.w	r3, r2, r3
 8007742:	687a      	ldr	r2, [r7, #4]
 8007744:	4413      	add	r3, r2
 8007746:	60bb      	str	r3, [r7, #8]
    W25qxx_Spi(Page_Address & 0xFF);
    //W25qxx_Spi(0);
    HAL_SPI_Receive(portFLASH, pBuffer, NumByteToRead_up_to_PageSize, min_wait_ms);
    W25_UNSELECT();
    */
    memset(pageTmp, 0, sizeof(pageTmp));
 8007748:	f240 1205 	movw	r2, #261	; 0x105
 800774c:	2100      	movs	r1, #0
 800774e:	4836      	ldr	r0, [pc, #216]	; (8007828 <W25qxx_ReadPage+0x160>)
 8007750:	f008 f99a 	bl	800fa88 <memset>
    uint16_t lens = NumByteToRead_up_to_PageSize + PAGE_HDR_BYTES;// + 1;
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	b29b      	uxth	r3, r3
 8007758:	3304      	adds	r3, #4
 800775a:	82fb      	strh	r3, [r7, #22]
    int idx = 0;
 800775c:	2300      	movs	r3, #0
 800775e:	613b      	str	r3, [r7, #16]
    pageTmp[idx++] = DATA_READ;//FAST_READ;
 8007760:	693b      	ldr	r3, [r7, #16]
 8007762:	1c5a      	adds	r2, r3, #1
 8007764:	613a      	str	r2, [r7, #16]
 8007766:	4a30      	ldr	r2, [pc, #192]	; (8007828 <W25qxx_ReadPage+0x160>)
 8007768:	2103      	movs	r1, #3
 800776a:	54d1      	strb	r1, [r2, r3]
    //if (w25qxx.ID >= W25Q256) pageTmp[idx++] = (Page_Address & 0xFF000000) >> 24;
    pageTmp[idx++] = (Page_Address & 0xFF0000) >> 16;
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	0c19      	lsrs	r1, r3, #16
 8007770:	693b      	ldr	r3, [r7, #16]
 8007772:	1c5a      	adds	r2, r3, #1
 8007774:	613a      	str	r2, [r7, #16]
 8007776:	b2c9      	uxtb	r1, r1
 8007778:	4a2b      	ldr	r2, [pc, #172]	; (8007828 <W25qxx_ReadPage+0x160>)
 800777a:	54d1      	strb	r1, [r2, r3]
    pageTmp[idx++] = (Page_Address& 0xFF00) >> 8;
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	0a19      	lsrs	r1, r3, #8
 8007780:	693b      	ldr	r3, [r7, #16]
 8007782:	1c5a      	adds	r2, r3, #1
 8007784:	613a      	str	r2, [r7, #16]
 8007786:	b2c9      	uxtb	r1, r1
 8007788:	4a27      	ldr	r2, [pc, #156]	; (8007828 <W25qxx_ReadPage+0x160>)
 800778a:	54d1      	strb	r1, [r2, r3]
    pageTmp[idx++] = Page_Address & 0xFF;
 800778c:	693b      	ldr	r3, [r7, #16]
 800778e:	1c5a      	adds	r2, r3, #1
 8007790:	613a      	str	r2, [r7, #16]
 8007792:	68ba      	ldr	r2, [r7, #8]
 8007794:	b2d1      	uxtb	r1, r2
 8007796:	4a24      	ldr	r2, [pc, #144]	; (8007828 <W25qxx_ReadPage+0x160>)
 8007798:	54d1      	strb	r1, [r2, r3]
    //pageTmp[idx++] = 0;
    spiRdy = 0;
 800779a:	4b24      	ldr	r3, [pc, #144]	; (800782c <W25qxx_ReadPage+0x164>)
 800779c:	2200      	movs	r2, #0
 800779e:	701a      	strb	r2, [r3, #0]

w25_withDMA = 1;
 80077a0:	4b23      	ldr	r3, [pc, #140]	; (8007830 <W25qxx_ReadPage+0x168>)
 80077a2:	2201      	movs	r2, #1
 80077a4:	701a      	strb	r2, [r3, #0]
    W25_SELECT();
 80077a6:	f7ff fb45 	bl	8006e34 <W25_SELECT>
    if (w25_withDMA) {
 80077aa:	4b21      	ldr	r3, [pc, #132]	; (8007830 <W25qxx_ReadPage+0x168>)
 80077ac:	781b      	ldrb	r3, [r3, #0]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d012      	beq.n	80077d8 <W25qxx_ReadPage+0x110>
    	HAL_SPI_TransmitReceive_DMA(portFLASH, pageTmp, pageTmp, lens);
 80077b2:	4b20      	ldr	r3, [pc, #128]	; (8007834 <W25qxx_ReadPage+0x16c>)
 80077b4:	6818      	ldr	r0, [r3, #0]
 80077b6:	8afb      	ldrh	r3, [r7, #22]
 80077b8:	4a1b      	ldr	r2, [pc, #108]	; (8007828 <W25qxx_ReadPage+0x160>)
 80077ba:	491b      	ldr	r1, [pc, #108]	; (8007828 <W25qxx_ReadPage+0x160>)
 80077bc:	f005 f8fa 	bl	800c9b4 <HAL_SPI_TransmitReceive_DMA>
    	while (!spiRdy) {
 80077c0:	e002      	b.n	80077c8 <W25qxx_ReadPage+0x100>
    		W25qxx_Delay(1);
 80077c2:	2001      	movs	r0, #1
 80077c4:	f000 f946 	bl	8007a54 <HAL_Delay>
    	while (!spiRdy) {
 80077c8:	4b18      	ldr	r3, [pc, #96]	; (800782c <W25qxx_ReadPage+0x164>)
 80077ca:	781b      	ldrb	r3, [r3, #0]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d0f8      	beq.n	80077c2 <W25qxx_ReadPage+0xfa>
    	}
w25_withDMA = 0;
 80077d0:	4b17      	ldr	r3, [pc, #92]	; (8007830 <W25qxx_ReadPage+0x168>)
 80077d2:	2200      	movs	r2, #0
 80077d4:	701a      	strb	r2, [r3, #0]
 80077d6:	e017      	b.n	8007808 <W25qxx_ReadPage+0x140>
    } else {
    	if (HAL_SPI_TransmitReceive(portFLASH, pageTmp, pageTmp, lens, min_wait_ms) != HAL_OK) devError |= devSPI;
 80077d8:	4b16      	ldr	r3, [pc, #88]	; (8007834 <W25qxx_ReadPage+0x16c>)
 80077da:	6818      	ldr	r0, [r3, #0]
 80077dc:	22fa      	movs	r2, #250	; 0xfa
 80077de:	8afb      	ldrh	r3, [r7, #22]
 80077e0:	9200      	str	r2, [sp, #0]
 80077e2:	4a11      	ldr	r2, [pc, #68]	; (8007828 <W25qxx_ReadPage+0x160>)
 80077e4:	4910      	ldr	r1, [pc, #64]	; (8007828 <W25qxx_ReadPage+0x160>)
 80077e6:	f004 fdde 	bl	800c3a6 <HAL_SPI_TransmitReceive>
 80077ea:	4603      	mov	r3, r0
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d006      	beq.n	80077fe <W25qxx_ReadPage+0x136>
 80077f0:	4b11      	ldr	r3, [pc, #68]	; (8007838 <W25qxx_ReadPage+0x170>)
 80077f2:	881b      	ldrh	r3, [r3, #0]
 80077f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077f8:	b29a      	uxth	r2, r3
 80077fa:	4b0f      	ldr	r3, [pc, #60]	; (8007838 <W25qxx_ReadPage+0x170>)
 80077fc:	801a      	strh	r2, [r3, #0]
    	W25_UNSELECT();
 80077fe:	f7ff fb25 	bl	8006e4c <W25_UNSELECT>

    	spiRdy = 1;
 8007802:	4b0a      	ldr	r3, [pc, #40]	; (800782c <W25qxx_ReadPage+0x164>)
 8007804:	2201      	movs	r2, #1
 8007806:	701a      	strb	r2, [r3, #0]
    }
	memcpy(pBuffer, &pageTmp[PAGE_HDR_BYTES], NumByteToRead_up_to_PageSize);//w25qxx.PageSize);
 8007808:	683a      	ldr	r2, [r7, #0]
 800780a:	490c      	ldr	r1, [pc, #48]	; (800783c <W25qxx_ReadPage+0x174>)
 800780c:	68f8      	ldr	r0, [r7, #12]
 800780e:	f008 f92d 	bl	800fa6c <memcpy>
    	Report(0, "\r\n");
    	Report(1, "%s done after %u ms\r\n", __func__, StartTime);
#endif


    w25qxx.Lock = 0;
 8007812:	4b04      	ldr	r3, [pc, #16]	; (8007824 <W25qxx_ReadPage+0x15c>)
 8007814:	2200      	movs	r2, #0
 8007816:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 800781a:	bf00      	nop
 800781c:	3718      	adds	r7, #24
 800781e:	46bd      	mov	sp, r7
 8007820:	bd80      	pop	{r7, pc}
 8007822:	bf00      	nop
 8007824:	200037ac 	.word	0x200037ac
 8007828:	200037d4 	.word	0x200037d4
 800782c:	200001e4 	.word	0x200001e4
 8007830:	200038d9 	.word	0x200038d9
 8007834:	2000000c 	.word	0x2000000c
 8007838:	20001bc8 	.word	0x20001bc8
 800783c:	200037d8 	.word	0x200037d8

08007840 <W25qxx_ReadSector>:
//------------------------------------------------------------------------------------------
void W25qxx_ReadSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_SectorSize)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b088      	sub	sp, #32
 8007844:	af00      	add	r7, sp, #0
 8007846:	60f8      	str	r0, [r7, #12]
 8007848:	60b9      	str	r1, [r7, #8]
 800784a:	607a      	str	r2, [r7, #4]
 800784c:	603b      	str	r3, [r7, #0]
    if ((NumByteToRead_up_to_SectorSize > w25qxx.SectorSize) || !NumByteToRead_up_to_SectorSize)
 800784e:	4b31      	ldr	r3, [pc, #196]	; (8007914 <W25qxx_ReadSector+0xd4>)
 8007850:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8007854:	683a      	ldr	r2, [r7, #0]
 8007856:	429a      	cmp	r2, r3
 8007858:	d802      	bhi.n	8007860 <W25qxx_ReadSector+0x20>
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d103      	bne.n	8007868 <W25qxx_ReadSector+0x28>
                NumByteToRead_up_to_SectorSize = w25qxx.SectorSize;
 8007860:	4b2c      	ldr	r3, [pc, #176]	; (8007914 <W25qxx_ReadSector+0xd4>)
 8007862:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8007866:	603b      	str	r3, [r7, #0]
    Report(1, "%s:0x%X(%u), Offset:%u ,Read %u Bytes, begin...\r\n",
                 __func__, Sector_Address, Sector_Address, OffsetInByte, NumByteToRead_up_to_SectorSize);
    //W25qxx_Delay(100);
#endif

    if (OffsetInByte >= w25qxx.SectorSize) {
 8007868:	4b2a      	ldr	r3, [pc, #168]	; (8007914 <W25qxx_ReadSector+0xd4>)
 800786a:	f8d3 300f 	ldr.w	r3, [r3, #15]
 800786e:	687a      	ldr	r2, [r7, #4]
 8007870:	429a      	cmp	r2, r3
 8007872:	d24b      	bcs.n	800790c <W25qxx_ReadSector+0xcc>
        return;
    }

    int32_t BytesToRead;
    uint32_t LocalOffset, StartPage;
    if ((OffsetInByte + NumByteToRead_up_to_SectorSize) > w25qxx.SectorSize)
 8007874:	687a      	ldr	r2, [r7, #4]
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	441a      	add	r2, r3
 800787a:	4b26      	ldr	r3, [pc, #152]	; (8007914 <W25qxx_ReadSector+0xd4>)
 800787c:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8007880:	429a      	cmp	r2, r3
 8007882:	d906      	bls.n	8007892 <W25qxx_ReadSector+0x52>
        BytesToRead = w25qxx.SectorSize - OffsetInByte;
 8007884:	4b23      	ldr	r3, [pc, #140]	; (8007914 <W25qxx_ReadSector+0xd4>)
 8007886:	f8d3 200f 	ldr.w	r2, [r3, #15]
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	1ad3      	subs	r3, r2, r3
 800788e:	61fb      	str	r3, [r7, #28]
 8007890:	e001      	b.n	8007896 <W25qxx_ReadSector+0x56>
    else
        BytesToRead = NumByteToRead_up_to_SectorSize;
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	61fb      	str	r3, [r7, #28]
    StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8007896:	68b8      	ldr	r0, [r7, #8]
 8007898:	f7ff fd1e 	bl	80072d8 <W25qxx_SectorToPage>
 800789c:	4602      	mov	r2, r0
 800789e:	4b1d      	ldr	r3, [pc, #116]	; (8007914 <W25qxx_ReadSector+0xd4>)
 80078a0:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 80078a4:	b29b      	uxth	r3, r3
 80078a6:	4619      	mov	r1, r3
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80078ae:	4413      	add	r3, r2
 80078b0:	617b      	str	r3, [r7, #20]
    LocalOffset = OffsetInByte % w25qxx.PageSize;
 80078b2:	4b18      	ldr	r3, [pc, #96]	; (8007914 <W25qxx_ReadSector+0xd4>)
 80078b4:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 80078b8:	b29b      	uxth	r3, r3
 80078ba:	461a      	mov	r2, r3
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	fbb3 f1f2 	udiv	r1, r3, r2
 80078c2:	fb01 f202 	mul.w	r2, r1, r2
 80078c6:	1a9b      	subs	r3, r3, r2
 80078c8:	61bb      	str	r3, [r7, #24]
    do {
        W25qxx_ReadPage(pBuffer, StartPage, LocalOffset, BytesToRead);
 80078ca:	69fb      	ldr	r3, [r7, #28]
 80078cc:	69ba      	ldr	r2, [r7, #24]
 80078ce:	6979      	ldr	r1, [r7, #20]
 80078d0:	68f8      	ldr	r0, [r7, #12]
 80078d2:	f7ff fef9 	bl	80076c8 <W25qxx_ReadPage>
        StartPage++;
 80078d6:	697b      	ldr	r3, [r7, #20]
 80078d8:	3301      	adds	r3, #1
 80078da:	617b      	str	r3, [r7, #20]
        BytesToRead -= w25qxx.PageSize - LocalOffset;
 80078dc:	4b0d      	ldr	r3, [pc, #52]	; (8007914 <W25qxx_ReadSector+0xd4>)
 80078de:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 80078e2:	b29b      	uxth	r3, r3
 80078e4:	461a      	mov	r2, r3
 80078e6:	69bb      	ldr	r3, [r7, #24]
 80078e8:	1a9a      	subs	r2, r3, r2
 80078ea:	69fb      	ldr	r3, [r7, #28]
 80078ec:	4413      	add	r3, r2
 80078ee:	61fb      	str	r3, [r7, #28]
        pBuffer += w25qxx.PageSize;
 80078f0:	4b08      	ldr	r3, [pc, #32]	; (8007914 <W25qxx_ReadSector+0xd4>)
 80078f2:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 80078f6:	b29b      	uxth	r3, r3
 80078f8:	461a      	mov	r2, r3
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	4413      	add	r3, r2
 80078fe:	60fb      	str	r3, [r7, #12]
        LocalOffset = 0;
 8007900:	2300      	movs	r3, #0
 8007902:	61bb      	str	r3, [r7, #24]
    } while(BytesToRead > 0);
 8007904:	69fb      	ldr	r3, [r7, #28]
 8007906:	2b00      	cmp	r3, #0
 8007908:	dcdf      	bgt.n	80078ca <W25qxx_ReadSector+0x8a>
 800790a:	e000      	b.n	800790e <W25qxx_ReadSector+0xce>
        return;
 800790c:	bf00      	nop
#ifdef W25QXX_DEBUG
    Report(1, "%s done\r\n", __func__);
    //W25qxx_Delay(100);
#endif

}
 800790e:	3720      	adds	r7, #32
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}
 8007914:	200037ac 	.word	0x200037ac

08007918 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8007918:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007950 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800791c:	f7ff fa78 	bl	8006e10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007920:	480c      	ldr	r0, [pc, #48]	; (8007954 <LoopForever+0x6>)
  ldr r1, =_edata
 8007922:	490d      	ldr	r1, [pc, #52]	; (8007958 <LoopForever+0xa>)
  ldr r2, =_sidata
 8007924:	4a0d      	ldr	r2, [pc, #52]	; (800795c <LoopForever+0xe>)
  movs r3, #0
 8007926:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007928:	e002      	b.n	8007930 <LoopCopyDataInit>

0800792a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800792a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800792c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800792e:	3304      	adds	r3, #4

08007930 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007930:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007932:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007934:	d3f9      	bcc.n	800792a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007936:	4a0a      	ldr	r2, [pc, #40]	; (8007960 <LoopForever+0x12>)
  ldr r4, =_ebss
 8007938:	4c0a      	ldr	r4, [pc, #40]	; (8007964 <LoopForever+0x16>)
  movs r3, #0
 800793a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800793c:	e001      	b.n	8007942 <LoopFillZerobss>

0800793e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800793e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007940:	3204      	adds	r2, #4

08007942 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007942:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007944:	d3fb      	bcc.n	800793e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8007946:	f008 f85d 	bl	800fa04 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800794a:	f7fa fd63 	bl	8002414 <main>

0800794e <LoopForever>:

LoopForever:
    b LoopForever
 800794e:	e7fe      	b.n	800794e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8007950:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8007954:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007958:	20000434 	.word	0x20000434
  ldr r2, =_sidata
 800795c:	08015db4 	.word	0x08015db4
  ldr r2, =_sbss
 8007960:	20000438 	.word	0x20000438
  ldr r4, =_ebss
 8007964:	200038f0 	.word	0x200038f0

08007968 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8007968:	e7fe      	b.n	8007968 <ADC1_2_IRQHandler>

0800796a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800796a:	b580      	push	{r7, lr}
 800796c:	b082      	sub	sp, #8
 800796e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8007970:	2300      	movs	r3, #0
 8007972:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007974:	2003      	movs	r0, #3
 8007976:	f000 f9a5 	bl	8007cc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800797a:	200f      	movs	r0, #15
 800797c:	f000 f80e 	bl	800799c <HAL_InitTick>
 8007980:	4603      	mov	r3, r0
 8007982:	2b00      	cmp	r3, #0
 8007984:	d002      	beq.n	800798c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8007986:	2301      	movs	r3, #1
 8007988:	71fb      	strb	r3, [r7, #7]
 800798a:	e001      	b.n	8007990 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800798c:	f7fe fd24 	bl	80063d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8007990:	79fb      	ldrb	r3, [r7, #7]
}
 8007992:	4618      	mov	r0, r3
 8007994:	3708      	adds	r7, #8
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}
	...

0800799c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b084      	sub	sp, #16
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80079a4:	2300      	movs	r3, #0
 80079a6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80079a8:	4b17      	ldr	r3, [pc, #92]	; (8007a08 <HAL_InitTick+0x6c>)
 80079aa:	781b      	ldrb	r3, [r3, #0]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d023      	beq.n	80079f8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80079b0:	4b16      	ldr	r3, [pc, #88]	; (8007a0c <HAL_InitTick+0x70>)
 80079b2:	681a      	ldr	r2, [r3, #0]
 80079b4:	4b14      	ldr	r3, [pc, #80]	; (8007a08 <HAL_InitTick+0x6c>)
 80079b6:	781b      	ldrb	r3, [r3, #0]
 80079b8:	4619      	mov	r1, r3
 80079ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80079be:	fbb3 f3f1 	udiv	r3, r3, r1
 80079c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80079c6:	4618      	mov	r0, r3
 80079c8:	f000 f9bf 	bl	8007d4a <HAL_SYSTICK_Config>
 80079cc:	4603      	mov	r3, r0
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d10f      	bne.n	80079f2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2b0f      	cmp	r3, #15
 80079d6:	d809      	bhi.n	80079ec <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80079d8:	2200      	movs	r2, #0
 80079da:	6879      	ldr	r1, [r7, #4]
 80079dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80079e0:	f000 f97b 	bl	8007cda <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80079e4:	4a0a      	ldr	r2, [pc, #40]	; (8007a10 <HAL_InitTick+0x74>)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6013      	str	r3, [r2, #0]
 80079ea:	e007      	b.n	80079fc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80079ec:	2301      	movs	r3, #1
 80079ee:	73fb      	strb	r3, [r7, #15]
 80079f0:	e004      	b.n	80079fc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80079f2:	2301      	movs	r3, #1
 80079f4:	73fb      	strb	r3, [r7, #15]
 80079f6:	e001      	b.n	80079fc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80079f8:	2301      	movs	r3, #1
 80079fa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80079fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	3710      	adds	r7, #16
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}
 8007a06:	bf00      	nop
 8007a08:	2000025c 	.word	0x2000025c
 8007a0c:	20000228 	.word	0x20000228
 8007a10:	20000258 	.word	0x20000258

08007a14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007a14:	b480      	push	{r7}
 8007a16:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8007a18:	4b06      	ldr	r3, [pc, #24]	; (8007a34 <HAL_IncTick+0x20>)
 8007a1a:	781b      	ldrb	r3, [r3, #0]
 8007a1c:	461a      	mov	r2, r3
 8007a1e:	4b06      	ldr	r3, [pc, #24]	; (8007a38 <HAL_IncTick+0x24>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	4413      	add	r3, r2
 8007a24:	4a04      	ldr	r2, [pc, #16]	; (8007a38 <HAL_IncTick+0x24>)
 8007a26:	6013      	str	r3, [r2, #0]
}
 8007a28:	bf00      	nop
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a30:	4770      	bx	lr
 8007a32:	bf00      	nop
 8007a34:	2000025c 	.word	0x2000025c
 8007a38:	200038dc 	.word	0x200038dc

08007a3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	af00      	add	r7, sp, #0
  return uwTick;
 8007a40:	4b03      	ldr	r3, [pc, #12]	; (8007a50 <HAL_GetTick+0x14>)
 8007a42:	681b      	ldr	r3, [r3, #0]
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	46bd      	mov	sp, r7
 8007a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4c:	4770      	bx	lr
 8007a4e:	bf00      	nop
 8007a50:	200038dc 	.word	0x200038dc

08007a54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b084      	sub	sp, #16
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007a5c:	f7ff ffee 	bl	8007a3c <HAL_GetTick>
 8007a60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a6c:	d005      	beq.n	8007a7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8007a6e:	4b0a      	ldr	r3, [pc, #40]	; (8007a98 <HAL_Delay+0x44>)
 8007a70:	781b      	ldrb	r3, [r3, #0]
 8007a72:	461a      	mov	r2, r3
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	4413      	add	r3, r2
 8007a78:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007a7a:	bf00      	nop
 8007a7c:	f7ff ffde 	bl	8007a3c <HAL_GetTick>
 8007a80:	4602      	mov	r2, r0
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	1ad3      	subs	r3, r2, r3
 8007a86:	68fa      	ldr	r2, [r7, #12]
 8007a88:	429a      	cmp	r2, r3
 8007a8a:	d8f7      	bhi.n	8007a7c <HAL_Delay+0x28>
  {
  }
}
 8007a8c:	bf00      	nop
 8007a8e:	bf00      	nop
 8007a90:	3710      	adds	r7, #16
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}
 8007a96:	bf00      	nop
 8007a98:	2000025c 	.word	0x2000025c

08007a9c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8007aa0:	4b05      	ldr	r3, [pc, #20]	; (8007ab8 <HAL_SuspendTick+0x1c>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	4a04      	ldr	r2, [pc, #16]	; (8007ab8 <HAL_SuspendTick+0x1c>)
 8007aa6:	f023 0302 	bic.w	r3, r3, #2
 8007aaa:	6013      	str	r3, [r2, #0]
}
 8007aac:	bf00      	nop
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab4:	4770      	bx	lr
 8007ab6:	bf00      	nop
 8007ab8:	e000e010 	.word	0xe000e010

08007abc <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8007abc:	b480      	push	{r7}
 8007abe:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8007ac0:	4b05      	ldr	r3, [pc, #20]	; (8007ad8 <HAL_ResumeTick+0x1c>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	4a04      	ldr	r2, [pc, #16]	; (8007ad8 <HAL_ResumeTick+0x1c>)
 8007ac6:	f043 0302 	orr.w	r3, r3, #2
 8007aca:	6013      	str	r3, [r2, #0]
}
 8007acc:	bf00      	nop
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad4:	4770      	bx	lr
 8007ad6:	bf00      	nop
 8007ad8:	e000e010 	.word	0xe000e010

08007adc <__NVIC_SetPriorityGrouping>:
{
 8007adc:	b480      	push	{r7}
 8007ade:	b085      	sub	sp, #20
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f003 0307 	and.w	r3, r3, #7
 8007aea:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007aec:	4b0c      	ldr	r3, [pc, #48]	; (8007b20 <__NVIC_SetPriorityGrouping+0x44>)
 8007aee:	68db      	ldr	r3, [r3, #12]
 8007af0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007af2:	68ba      	ldr	r2, [r7, #8]
 8007af4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007af8:	4013      	ands	r3, r2
 8007afa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007b04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007b08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007b0e:	4a04      	ldr	r2, [pc, #16]	; (8007b20 <__NVIC_SetPriorityGrouping+0x44>)
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	60d3      	str	r3, [r2, #12]
}
 8007b14:	bf00      	nop
 8007b16:	3714      	adds	r7, #20
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1e:	4770      	bx	lr
 8007b20:	e000ed00 	.word	0xe000ed00

08007b24 <__NVIC_GetPriorityGrouping>:
{
 8007b24:	b480      	push	{r7}
 8007b26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007b28:	4b04      	ldr	r3, [pc, #16]	; (8007b3c <__NVIC_GetPriorityGrouping+0x18>)
 8007b2a:	68db      	ldr	r3, [r3, #12]
 8007b2c:	0a1b      	lsrs	r3, r3, #8
 8007b2e:	f003 0307 	and.w	r3, r3, #7
}
 8007b32:	4618      	mov	r0, r3
 8007b34:	46bd      	mov	sp, r7
 8007b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3a:	4770      	bx	lr
 8007b3c:	e000ed00 	.word	0xe000ed00

08007b40 <__NVIC_EnableIRQ>:
{
 8007b40:	b480      	push	{r7}
 8007b42:	b083      	sub	sp, #12
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	4603      	mov	r3, r0
 8007b48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	db0b      	blt.n	8007b6a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007b52:	79fb      	ldrb	r3, [r7, #7]
 8007b54:	f003 021f 	and.w	r2, r3, #31
 8007b58:	4907      	ldr	r1, [pc, #28]	; (8007b78 <__NVIC_EnableIRQ+0x38>)
 8007b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b5e:	095b      	lsrs	r3, r3, #5
 8007b60:	2001      	movs	r0, #1
 8007b62:	fa00 f202 	lsl.w	r2, r0, r2
 8007b66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007b6a:	bf00      	nop
 8007b6c:	370c      	adds	r7, #12
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b74:	4770      	bx	lr
 8007b76:	bf00      	nop
 8007b78:	e000e100 	.word	0xe000e100

08007b7c <__NVIC_DisableIRQ>:
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b083      	sub	sp, #12
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	4603      	mov	r3, r0
 8007b84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	db12      	blt.n	8007bb4 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007b8e:	79fb      	ldrb	r3, [r7, #7]
 8007b90:	f003 021f 	and.w	r2, r3, #31
 8007b94:	490a      	ldr	r1, [pc, #40]	; (8007bc0 <__NVIC_DisableIRQ+0x44>)
 8007b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b9a:	095b      	lsrs	r3, r3, #5
 8007b9c:	2001      	movs	r0, #1
 8007b9e:	fa00 f202 	lsl.w	r2, r0, r2
 8007ba2:	3320      	adds	r3, #32
 8007ba4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8007ba8:	f3bf 8f4f 	dsb	sy
}
 8007bac:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007bae:	f3bf 8f6f 	isb	sy
}
 8007bb2:	bf00      	nop
}
 8007bb4:	bf00      	nop
 8007bb6:	370c      	adds	r7, #12
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbe:	4770      	bx	lr
 8007bc0:	e000e100 	.word	0xe000e100

08007bc4 <__NVIC_SetPriority>:
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b083      	sub	sp, #12
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	4603      	mov	r3, r0
 8007bcc:	6039      	str	r1, [r7, #0]
 8007bce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007bd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	db0a      	blt.n	8007bee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	b2da      	uxtb	r2, r3
 8007bdc:	490c      	ldr	r1, [pc, #48]	; (8007c10 <__NVIC_SetPriority+0x4c>)
 8007bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007be2:	0112      	lsls	r2, r2, #4
 8007be4:	b2d2      	uxtb	r2, r2
 8007be6:	440b      	add	r3, r1
 8007be8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007bec:	e00a      	b.n	8007c04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	b2da      	uxtb	r2, r3
 8007bf2:	4908      	ldr	r1, [pc, #32]	; (8007c14 <__NVIC_SetPriority+0x50>)
 8007bf4:	79fb      	ldrb	r3, [r7, #7]
 8007bf6:	f003 030f 	and.w	r3, r3, #15
 8007bfa:	3b04      	subs	r3, #4
 8007bfc:	0112      	lsls	r2, r2, #4
 8007bfe:	b2d2      	uxtb	r2, r2
 8007c00:	440b      	add	r3, r1
 8007c02:	761a      	strb	r2, [r3, #24]
}
 8007c04:	bf00      	nop
 8007c06:	370c      	adds	r7, #12
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0e:	4770      	bx	lr
 8007c10:	e000e100 	.word	0xe000e100
 8007c14:	e000ed00 	.word	0xe000ed00

08007c18 <NVIC_EncodePriority>:
{
 8007c18:	b480      	push	{r7}
 8007c1a:	b089      	sub	sp, #36	; 0x24
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	60f8      	str	r0, [r7, #12]
 8007c20:	60b9      	str	r1, [r7, #8]
 8007c22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	f003 0307 	and.w	r3, r3, #7
 8007c2a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007c2c:	69fb      	ldr	r3, [r7, #28]
 8007c2e:	f1c3 0307 	rsb	r3, r3, #7
 8007c32:	2b04      	cmp	r3, #4
 8007c34:	bf28      	it	cs
 8007c36:	2304      	movcs	r3, #4
 8007c38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007c3a:	69fb      	ldr	r3, [r7, #28]
 8007c3c:	3304      	adds	r3, #4
 8007c3e:	2b06      	cmp	r3, #6
 8007c40:	d902      	bls.n	8007c48 <NVIC_EncodePriority+0x30>
 8007c42:	69fb      	ldr	r3, [r7, #28]
 8007c44:	3b03      	subs	r3, #3
 8007c46:	e000      	b.n	8007c4a <NVIC_EncodePriority+0x32>
 8007c48:	2300      	movs	r3, #0
 8007c4a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007c4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007c50:	69bb      	ldr	r3, [r7, #24]
 8007c52:	fa02 f303 	lsl.w	r3, r2, r3
 8007c56:	43da      	mvns	r2, r3
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	401a      	ands	r2, r3
 8007c5c:	697b      	ldr	r3, [r7, #20]
 8007c5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007c60:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007c64:	697b      	ldr	r3, [r7, #20]
 8007c66:	fa01 f303 	lsl.w	r3, r1, r3
 8007c6a:	43d9      	mvns	r1, r3
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007c70:	4313      	orrs	r3, r2
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	3724      	adds	r7, #36	; 0x24
 8007c76:	46bd      	mov	sp, r7
 8007c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7c:	4770      	bx	lr
	...

08007c80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b082      	sub	sp, #8
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	3b01      	subs	r3, #1
 8007c8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007c90:	d301      	bcc.n	8007c96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007c92:	2301      	movs	r3, #1
 8007c94:	e00f      	b.n	8007cb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007c96:	4a0a      	ldr	r2, [pc, #40]	; (8007cc0 <SysTick_Config+0x40>)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	3b01      	subs	r3, #1
 8007c9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007c9e:	210f      	movs	r1, #15
 8007ca0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007ca4:	f7ff ff8e 	bl	8007bc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007ca8:	4b05      	ldr	r3, [pc, #20]	; (8007cc0 <SysTick_Config+0x40>)
 8007caa:	2200      	movs	r2, #0
 8007cac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007cae:	4b04      	ldr	r3, [pc, #16]	; (8007cc0 <SysTick_Config+0x40>)
 8007cb0:	2207      	movs	r2, #7
 8007cb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007cb4:	2300      	movs	r3, #0
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	3708      	adds	r7, #8
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}
 8007cbe:	bf00      	nop
 8007cc0:	e000e010 	.word	0xe000e010

08007cc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b082      	sub	sp, #8
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f7ff ff05 	bl	8007adc <__NVIC_SetPriorityGrouping>
}
 8007cd2:	bf00      	nop
 8007cd4:	3708      	adds	r7, #8
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}

08007cda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007cda:	b580      	push	{r7, lr}
 8007cdc:	b086      	sub	sp, #24
 8007cde:	af00      	add	r7, sp, #0
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	60b9      	str	r1, [r7, #8]
 8007ce4:	607a      	str	r2, [r7, #4]
 8007ce6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8007ce8:	2300      	movs	r3, #0
 8007cea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007cec:	f7ff ff1a 	bl	8007b24 <__NVIC_GetPriorityGrouping>
 8007cf0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007cf2:	687a      	ldr	r2, [r7, #4]
 8007cf4:	68b9      	ldr	r1, [r7, #8]
 8007cf6:	6978      	ldr	r0, [r7, #20]
 8007cf8:	f7ff ff8e 	bl	8007c18 <NVIC_EncodePriority>
 8007cfc:	4602      	mov	r2, r0
 8007cfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d02:	4611      	mov	r1, r2
 8007d04:	4618      	mov	r0, r3
 8007d06:	f7ff ff5d 	bl	8007bc4 <__NVIC_SetPriority>
}
 8007d0a:	bf00      	nop
 8007d0c:	3718      	adds	r7, #24
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd80      	pop	{r7, pc}

08007d12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007d12:	b580      	push	{r7, lr}
 8007d14:	b082      	sub	sp, #8
 8007d16:	af00      	add	r7, sp, #0
 8007d18:	4603      	mov	r3, r0
 8007d1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007d1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d20:	4618      	mov	r0, r3
 8007d22:	f7ff ff0d 	bl	8007b40 <__NVIC_EnableIRQ>
}
 8007d26:	bf00      	nop
 8007d28:	3708      	adds	r7, #8
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}

08007d2e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007d2e:	b580      	push	{r7, lr}
 8007d30:	b082      	sub	sp, #8
 8007d32:	af00      	add	r7, sp, #0
 8007d34:	4603      	mov	r3, r0
 8007d36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8007d38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	f7ff ff1d 	bl	8007b7c <__NVIC_DisableIRQ>
}
 8007d42:	bf00      	nop
 8007d44:	3708      	adds	r7, #8
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bd80      	pop	{r7, pc}

08007d4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007d4a:	b580      	push	{r7, lr}
 8007d4c:	b082      	sub	sp, #8
 8007d4e:	af00      	add	r7, sp, #0
 8007d50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f7ff ff94 	bl	8007c80 <SysTick_Config>
 8007d58:	4603      	mov	r3, r0
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	3708      	adds	r7, #8
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}
	...

08007d64 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007d64:	b480      	push	{r7}
 8007d66:	b085      	sub	sp, #20
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d101      	bne.n	8007d76 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8007d72:	2301      	movs	r3, #1
 8007d74:	e098      	b.n	8007ea8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	461a      	mov	r2, r3
 8007d7c:	4b4d      	ldr	r3, [pc, #308]	; (8007eb4 <HAL_DMA_Init+0x150>)
 8007d7e:	429a      	cmp	r2, r3
 8007d80:	d80f      	bhi.n	8007da2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	461a      	mov	r2, r3
 8007d88:	4b4b      	ldr	r3, [pc, #300]	; (8007eb8 <HAL_DMA_Init+0x154>)
 8007d8a:	4413      	add	r3, r2
 8007d8c:	4a4b      	ldr	r2, [pc, #300]	; (8007ebc <HAL_DMA_Init+0x158>)
 8007d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8007d92:	091b      	lsrs	r3, r3, #4
 8007d94:	009a      	lsls	r2, r3, #2
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	4a48      	ldr	r2, [pc, #288]	; (8007ec0 <HAL_DMA_Init+0x15c>)
 8007d9e:	641a      	str	r2, [r3, #64]	; 0x40
 8007da0:	e00e      	b.n	8007dc0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	461a      	mov	r2, r3
 8007da8:	4b46      	ldr	r3, [pc, #280]	; (8007ec4 <HAL_DMA_Init+0x160>)
 8007daa:	4413      	add	r3, r2
 8007dac:	4a43      	ldr	r2, [pc, #268]	; (8007ebc <HAL_DMA_Init+0x158>)
 8007dae:	fba2 2303 	umull	r2, r3, r2, r3
 8007db2:	091b      	lsrs	r3, r3, #4
 8007db4:	009a      	lsls	r2, r3, #2
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	4a42      	ldr	r2, [pc, #264]	; (8007ec8 <HAL_DMA_Init+0x164>)
 8007dbe:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2202      	movs	r2, #2
 8007dc4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007dd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dda:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8007de4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	691b      	ldr	r3, [r3, #16]
 8007dea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007df0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	699b      	ldr	r3, [r3, #24]
 8007df6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007dfc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6a1b      	ldr	r3, [r3, #32]
 8007e02:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007e04:	68fa      	ldr	r2, [r7, #12]
 8007e06:	4313      	orrs	r3, r2
 8007e08:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	68fa      	ldr	r2, [r7, #12]
 8007e10:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	689b      	ldr	r3, [r3, #8]
 8007e16:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e1a:	d039      	beq.n	8007e90 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e20:	4a27      	ldr	r2, [pc, #156]	; (8007ec0 <HAL_DMA_Init+0x15c>)
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d11a      	bne.n	8007e5c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8007e26:	4b29      	ldr	r3, [pc, #164]	; (8007ecc <HAL_DMA_Init+0x168>)
 8007e28:	681a      	ldr	r2, [r3, #0]
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e2e:	f003 031c 	and.w	r3, r3, #28
 8007e32:	210f      	movs	r1, #15
 8007e34:	fa01 f303 	lsl.w	r3, r1, r3
 8007e38:	43db      	mvns	r3, r3
 8007e3a:	4924      	ldr	r1, [pc, #144]	; (8007ecc <HAL_DMA_Init+0x168>)
 8007e3c:	4013      	ands	r3, r2
 8007e3e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8007e40:	4b22      	ldr	r3, [pc, #136]	; (8007ecc <HAL_DMA_Init+0x168>)
 8007e42:	681a      	ldr	r2, [r3, #0]
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6859      	ldr	r1, [r3, #4]
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e4c:	f003 031c 	and.w	r3, r3, #28
 8007e50:	fa01 f303 	lsl.w	r3, r1, r3
 8007e54:	491d      	ldr	r1, [pc, #116]	; (8007ecc <HAL_DMA_Init+0x168>)
 8007e56:	4313      	orrs	r3, r2
 8007e58:	600b      	str	r3, [r1, #0]
 8007e5a:	e019      	b.n	8007e90 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8007e5c:	4b1c      	ldr	r3, [pc, #112]	; (8007ed0 <HAL_DMA_Init+0x16c>)
 8007e5e:	681a      	ldr	r2, [r3, #0]
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e64:	f003 031c 	and.w	r3, r3, #28
 8007e68:	210f      	movs	r1, #15
 8007e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8007e6e:	43db      	mvns	r3, r3
 8007e70:	4917      	ldr	r1, [pc, #92]	; (8007ed0 <HAL_DMA_Init+0x16c>)
 8007e72:	4013      	ands	r3, r2
 8007e74:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8007e76:	4b16      	ldr	r3, [pc, #88]	; (8007ed0 <HAL_DMA_Init+0x16c>)
 8007e78:	681a      	ldr	r2, [r3, #0]
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6859      	ldr	r1, [r3, #4]
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e82:	f003 031c 	and.w	r3, r3, #28
 8007e86:	fa01 f303 	lsl.w	r3, r1, r3
 8007e8a:	4911      	ldr	r1, [pc, #68]	; (8007ed0 <HAL_DMA_Init+0x16c>)
 8007e8c:	4313      	orrs	r3, r2
 8007e8e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2200      	movs	r2, #0
 8007e94:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2201      	movs	r2, #1
 8007e9a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007ea6:	2300      	movs	r3, #0
}
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	3714      	adds	r7, #20
 8007eac:	46bd      	mov	sp, r7
 8007eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb2:	4770      	bx	lr
 8007eb4:	40020407 	.word	0x40020407
 8007eb8:	bffdfff8 	.word	0xbffdfff8
 8007ebc:	cccccccd 	.word	0xcccccccd
 8007ec0:	40020000 	.word	0x40020000
 8007ec4:	bffdfbf8 	.word	0xbffdfbf8
 8007ec8:	40020400 	.word	0x40020400
 8007ecc:	400200a8 	.word	0x400200a8
 8007ed0:	400204a8 	.word	0x400204a8

08007ed4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b086      	sub	sp, #24
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	60f8      	str	r0, [r7, #12]
 8007edc:	60b9      	str	r1, [r7, #8]
 8007ede:	607a      	str	r2, [r7, #4]
 8007ee0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007eec:	2b01      	cmp	r3, #1
 8007eee:	d101      	bne.n	8007ef4 <HAL_DMA_Start_IT+0x20>
 8007ef0:	2302      	movs	r3, #2
 8007ef2:	e04b      	b.n	8007f8c <HAL_DMA_Start_IT+0xb8>
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	2201      	movs	r2, #1
 8007ef8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007f02:	b2db      	uxtb	r3, r3
 8007f04:	2b01      	cmp	r3, #1
 8007f06:	d13a      	bne.n	8007f7e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	2202      	movs	r2, #2
 8007f0c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	2200      	movs	r2, #0
 8007f14:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	681a      	ldr	r2, [r3, #0]
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f022 0201 	bic.w	r2, r2, #1
 8007f24:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	687a      	ldr	r2, [r7, #4]
 8007f2a:	68b9      	ldr	r1, [r7, #8]
 8007f2c:	68f8      	ldr	r0, [r7, #12]
 8007f2e:	f000 f96d 	bl	800820c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d008      	beq.n	8007f4c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	681a      	ldr	r2, [r3, #0]
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f042 020e 	orr.w	r2, r2, #14
 8007f48:	601a      	str	r2, [r3, #0]
 8007f4a:	e00f      	b.n	8007f6c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	681a      	ldr	r2, [r3, #0]
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f022 0204 	bic.w	r2, r2, #4
 8007f5a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	681a      	ldr	r2, [r3, #0]
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f042 020a 	orr.w	r2, r2, #10
 8007f6a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	681a      	ldr	r2, [r3, #0]
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f042 0201 	orr.w	r2, r2, #1
 8007f7a:	601a      	str	r2, [r3, #0]
 8007f7c:	e005      	b.n	8007f8a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	2200      	movs	r2, #0
 8007f82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8007f86:	2302      	movs	r3, #2
 8007f88:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8007f8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	3718      	adds	r7, #24
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}

08007f94 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007f94:	b480      	push	{r7}
 8007f96:	b085      	sub	sp, #20
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007fa6:	b2db      	uxtb	r3, r3
 8007fa8:	2b02      	cmp	r3, #2
 8007faa:	d008      	beq.n	8007fbe <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2204      	movs	r2, #4
 8007fb0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007fba:	2301      	movs	r3, #1
 8007fbc:	e022      	b.n	8008004 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	681a      	ldr	r2, [r3, #0]
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f022 020e 	bic.w	r2, r2, #14
 8007fcc:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	681a      	ldr	r2, [r3, #0]
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f022 0201 	bic.w	r2, r2, #1
 8007fdc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fe2:	f003 021c 	and.w	r2, r3, #28
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fea:	2101      	movs	r1, #1
 8007fec:	fa01 f202 	lsl.w	r2, r1, r2
 8007ff0:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2201      	movs	r2, #1
 8007ff6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8008002:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8008004:	4618      	mov	r0, r3
 8008006:	3714      	adds	r7, #20
 8008008:	46bd      	mov	sp, r7
 800800a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800e:	4770      	bx	lr

08008010 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b084      	sub	sp, #16
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008018:	2300      	movs	r3, #0
 800801a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8008022:	b2db      	uxtb	r3, r3
 8008024:	2b02      	cmp	r3, #2
 8008026:	d005      	beq.n	8008034 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2204      	movs	r2, #4
 800802c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800802e:	2301      	movs	r3, #1
 8008030:	73fb      	strb	r3, [r7, #15]
 8008032:	e029      	b.n	8008088 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	681a      	ldr	r2, [r3, #0]
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f022 020e 	bic.w	r2, r2, #14
 8008042:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	681a      	ldr	r2, [r3, #0]
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f022 0201 	bic.w	r2, r2, #1
 8008052:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008058:	f003 021c 	and.w	r2, r3, #28
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008060:	2101      	movs	r1, #1
 8008062:	fa01 f202 	lsl.w	r2, r1, r2
 8008066:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2201      	movs	r2, #1
 800806c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2200      	movs	r2, #0
 8008074:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800807c:	2b00      	cmp	r3, #0
 800807e:	d003      	beq.n	8008088 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	4798      	blx	r3
    }
  }
  return status;
 8008088:	7bfb      	ldrb	r3, [r7, #15]
}
 800808a:	4618      	mov	r0, r3
 800808c:	3710      	adds	r7, #16
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}

08008092 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008092:	b580      	push	{r7, lr}
 8008094:	b084      	sub	sp, #16
 8008096:	af00      	add	r7, sp, #0
 8008098:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080ae:	f003 031c 	and.w	r3, r3, #28
 80080b2:	2204      	movs	r2, #4
 80080b4:	409a      	lsls	r2, r3
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	4013      	ands	r3, r2
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d026      	beq.n	800810c <HAL_DMA_IRQHandler+0x7a>
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	f003 0304 	and.w	r3, r3, #4
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d021      	beq.n	800810c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f003 0320 	and.w	r3, r3, #32
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d107      	bne.n	80080e6 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	681a      	ldr	r2, [r3, #0]
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f022 0204 	bic.w	r2, r2, #4
 80080e4:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080ea:	f003 021c 	and.w	r2, r3, #28
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080f2:	2104      	movs	r1, #4
 80080f4:	fa01 f202 	lsl.w	r2, r1, r2
 80080f8:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d071      	beq.n	80081e6 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800810a:	e06c      	b.n	80081e6 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008110:	f003 031c 	and.w	r3, r3, #28
 8008114:	2202      	movs	r2, #2
 8008116:	409a      	lsls	r2, r3
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	4013      	ands	r3, r2
 800811c:	2b00      	cmp	r3, #0
 800811e:	d02e      	beq.n	800817e <HAL_DMA_IRQHandler+0xec>
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	f003 0302 	and.w	r3, r3, #2
 8008126:	2b00      	cmp	r3, #0
 8008128:	d029      	beq.n	800817e <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f003 0320 	and.w	r3, r3, #32
 8008134:	2b00      	cmp	r3, #0
 8008136:	d10b      	bne.n	8008150 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	681a      	ldr	r2, [r3, #0]
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f022 020a 	bic.w	r2, r2, #10
 8008146:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2201      	movs	r2, #1
 800814c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008154:	f003 021c 	and.w	r2, r3, #28
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800815c:	2102      	movs	r1, #2
 800815e:	fa01 f202 	lsl.w	r2, r1, r2
 8008162:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2200      	movs	r2, #0
 8008168:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008170:	2b00      	cmp	r3, #0
 8008172:	d038      	beq.n	80081e6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008178:	6878      	ldr	r0, [r7, #4]
 800817a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800817c:	e033      	b.n	80081e6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008182:	f003 031c 	and.w	r3, r3, #28
 8008186:	2208      	movs	r2, #8
 8008188:	409a      	lsls	r2, r3
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	4013      	ands	r3, r2
 800818e:	2b00      	cmp	r3, #0
 8008190:	d02a      	beq.n	80081e8 <HAL_DMA_IRQHandler+0x156>
 8008192:	68bb      	ldr	r3, [r7, #8]
 8008194:	f003 0308 	and.w	r3, r3, #8
 8008198:	2b00      	cmp	r3, #0
 800819a:	d025      	beq.n	80081e8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	681a      	ldr	r2, [r3, #0]
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f022 020e 	bic.w	r2, r2, #14
 80081aa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081b0:	f003 021c 	and.w	r2, r3, #28
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081b8:	2101      	movs	r1, #1
 80081ba:	fa01 f202 	lsl.w	r2, r1, r2
 80081be:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2201      	movs	r2, #1
 80081c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2201      	movs	r2, #1
 80081ca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2200      	movs	r2, #0
 80081d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d004      	beq.n	80081e8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80081e6:	bf00      	nop
 80081e8:	bf00      	nop
}
 80081ea:	3710      	adds	r7, #16
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}

080081f0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80081f0:	b480      	push	{r7}
 80081f2:	b083      	sub	sp, #12
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80081fe:	b2db      	uxtb	r3, r3
}
 8008200:	4618      	mov	r0, r3
 8008202:	370c      	adds	r7, #12
 8008204:	46bd      	mov	sp, r7
 8008206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820a:	4770      	bx	lr

0800820c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800820c:	b480      	push	{r7}
 800820e:	b085      	sub	sp, #20
 8008210:	af00      	add	r7, sp, #0
 8008212:	60f8      	str	r0, [r7, #12]
 8008214:	60b9      	str	r1, [r7, #8]
 8008216:	607a      	str	r2, [r7, #4]
 8008218:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800821e:	f003 021c 	and.w	r2, r3, #28
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008226:	2101      	movs	r1, #1
 8008228:	fa01 f202 	lsl.w	r2, r1, r2
 800822c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	683a      	ldr	r2, [r7, #0]
 8008234:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	689b      	ldr	r3, [r3, #8]
 800823a:	2b10      	cmp	r3, #16
 800823c:	d108      	bne.n	8008250 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	687a      	ldr	r2, [r7, #4]
 8008244:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	68ba      	ldr	r2, [r7, #8]
 800824c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800824e:	e007      	b.n	8008260 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	68ba      	ldr	r2, [r7, #8]
 8008256:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	687a      	ldr	r2, [r7, #4]
 800825e:	60da      	str	r2, [r3, #12]
}
 8008260:	bf00      	nop
 8008262:	3714      	adds	r7, #20
 8008264:	46bd      	mov	sp, r7
 8008266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826a:	4770      	bx	lr

0800826c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800826c:	b480      	push	{r7}
 800826e:	b087      	sub	sp, #28
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
 8008274:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008276:	2300      	movs	r3, #0
 8008278:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800827a:	e17f      	b.n	800857c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	681a      	ldr	r2, [r3, #0]
 8008280:	2101      	movs	r1, #1
 8008282:	697b      	ldr	r3, [r7, #20]
 8008284:	fa01 f303 	lsl.w	r3, r1, r3
 8008288:	4013      	ands	r3, r2
 800828a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	2b00      	cmp	r3, #0
 8008290:	f000 8171 	beq.w	8008576 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	685b      	ldr	r3, [r3, #4]
 8008298:	f003 0303 	and.w	r3, r3, #3
 800829c:	2b01      	cmp	r3, #1
 800829e:	d005      	beq.n	80082ac <HAL_GPIO_Init+0x40>
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	685b      	ldr	r3, [r3, #4]
 80082a4:	f003 0303 	and.w	r3, r3, #3
 80082a8:	2b02      	cmp	r3, #2
 80082aa:	d130      	bne.n	800830e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	689b      	ldr	r3, [r3, #8]
 80082b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80082b2:	697b      	ldr	r3, [r7, #20]
 80082b4:	005b      	lsls	r3, r3, #1
 80082b6:	2203      	movs	r2, #3
 80082b8:	fa02 f303 	lsl.w	r3, r2, r3
 80082bc:	43db      	mvns	r3, r3
 80082be:	693a      	ldr	r2, [r7, #16]
 80082c0:	4013      	ands	r3, r2
 80082c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	68da      	ldr	r2, [r3, #12]
 80082c8:	697b      	ldr	r3, [r7, #20]
 80082ca:	005b      	lsls	r3, r3, #1
 80082cc:	fa02 f303 	lsl.w	r3, r2, r3
 80082d0:	693a      	ldr	r2, [r7, #16]
 80082d2:	4313      	orrs	r3, r2
 80082d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	693a      	ldr	r2, [r7, #16]
 80082da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	685b      	ldr	r3, [r3, #4]
 80082e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80082e2:	2201      	movs	r2, #1
 80082e4:	697b      	ldr	r3, [r7, #20]
 80082e6:	fa02 f303 	lsl.w	r3, r2, r3
 80082ea:	43db      	mvns	r3, r3
 80082ec:	693a      	ldr	r2, [r7, #16]
 80082ee:	4013      	ands	r3, r2
 80082f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	685b      	ldr	r3, [r3, #4]
 80082f6:	091b      	lsrs	r3, r3, #4
 80082f8:	f003 0201 	and.w	r2, r3, #1
 80082fc:	697b      	ldr	r3, [r7, #20]
 80082fe:	fa02 f303 	lsl.w	r3, r2, r3
 8008302:	693a      	ldr	r2, [r7, #16]
 8008304:	4313      	orrs	r3, r2
 8008306:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	693a      	ldr	r2, [r7, #16]
 800830c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	685b      	ldr	r3, [r3, #4]
 8008312:	f003 0303 	and.w	r3, r3, #3
 8008316:	2b03      	cmp	r3, #3
 8008318:	d118      	bne.n	800834c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800831e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8008320:	2201      	movs	r2, #1
 8008322:	697b      	ldr	r3, [r7, #20]
 8008324:	fa02 f303 	lsl.w	r3, r2, r3
 8008328:	43db      	mvns	r3, r3
 800832a:	693a      	ldr	r2, [r7, #16]
 800832c:	4013      	ands	r3, r2
 800832e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	685b      	ldr	r3, [r3, #4]
 8008334:	08db      	lsrs	r3, r3, #3
 8008336:	f003 0201 	and.w	r2, r3, #1
 800833a:	697b      	ldr	r3, [r7, #20]
 800833c:	fa02 f303 	lsl.w	r3, r2, r3
 8008340:	693a      	ldr	r2, [r7, #16]
 8008342:	4313      	orrs	r3, r2
 8008344:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	693a      	ldr	r2, [r7, #16]
 800834a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	685b      	ldr	r3, [r3, #4]
 8008350:	f003 0303 	and.w	r3, r3, #3
 8008354:	2b03      	cmp	r3, #3
 8008356:	d017      	beq.n	8008388 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	68db      	ldr	r3, [r3, #12]
 800835c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800835e:	697b      	ldr	r3, [r7, #20]
 8008360:	005b      	lsls	r3, r3, #1
 8008362:	2203      	movs	r2, #3
 8008364:	fa02 f303 	lsl.w	r3, r2, r3
 8008368:	43db      	mvns	r3, r3
 800836a:	693a      	ldr	r2, [r7, #16]
 800836c:	4013      	ands	r3, r2
 800836e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	689a      	ldr	r2, [r3, #8]
 8008374:	697b      	ldr	r3, [r7, #20]
 8008376:	005b      	lsls	r3, r3, #1
 8008378:	fa02 f303 	lsl.w	r3, r2, r3
 800837c:	693a      	ldr	r2, [r7, #16]
 800837e:	4313      	orrs	r3, r2
 8008380:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	693a      	ldr	r2, [r7, #16]
 8008386:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	685b      	ldr	r3, [r3, #4]
 800838c:	f003 0303 	and.w	r3, r3, #3
 8008390:	2b02      	cmp	r3, #2
 8008392:	d123      	bne.n	80083dc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8008394:	697b      	ldr	r3, [r7, #20]
 8008396:	08da      	lsrs	r2, r3, #3
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	3208      	adds	r2, #8
 800839c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80083a2:	697b      	ldr	r3, [r7, #20]
 80083a4:	f003 0307 	and.w	r3, r3, #7
 80083a8:	009b      	lsls	r3, r3, #2
 80083aa:	220f      	movs	r2, #15
 80083ac:	fa02 f303 	lsl.w	r3, r2, r3
 80083b0:	43db      	mvns	r3, r3
 80083b2:	693a      	ldr	r2, [r7, #16]
 80083b4:	4013      	ands	r3, r2
 80083b6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	691a      	ldr	r2, [r3, #16]
 80083bc:	697b      	ldr	r3, [r7, #20]
 80083be:	f003 0307 	and.w	r3, r3, #7
 80083c2:	009b      	lsls	r3, r3, #2
 80083c4:	fa02 f303 	lsl.w	r3, r2, r3
 80083c8:	693a      	ldr	r2, [r7, #16]
 80083ca:	4313      	orrs	r3, r2
 80083cc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80083ce:	697b      	ldr	r3, [r7, #20]
 80083d0:	08da      	lsrs	r2, r3, #3
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	3208      	adds	r2, #8
 80083d6:	6939      	ldr	r1, [r7, #16]
 80083d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80083e2:	697b      	ldr	r3, [r7, #20]
 80083e4:	005b      	lsls	r3, r3, #1
 80083e6:	2203      	movs	r2, #3
 80083e8:	fa02 f303 	lsl.w	r3, r2, r3
 80083ec:	43db      	mvns	r3, r3
 80083ee:	693a      	ldr	r2, [r7, #16]
 80083f0:	4013      	ands	r3, r2
 80083f2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	685b      	ldr	r3, [r3, #4]
 80083f8:	f003 0203 	and.w	r2, r3, #3
 80083fc:	697b      	ldr	r3, [r7, #20]
 80083fe:	005b      	lsls	r3, r3, #1
 8008400:	fa02 f303 	lsl.w	r3, r2, r3
 8008404:	693a      	ldr	r2, [r7, #16]
 8008406:	4313      	orrs	r3, r2
 8008408:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	693a      	ldr	r2, [r7, #16]
 800840e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	685b      	ldr	r3, [r3, #4]
 8008414:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008418:	2b00      	cmp	r3, #0
 800841a:	f000 80ac 	beq.w	8008576 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800841e:	4b5f      	ldr	r3, [pc, #380]	; (800859c <HAL_GPIO_Init+0x330>)
 8008420:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008422:	4a5e      	ldr	r2, [pc, #376]	; (800859c <HAL_GPIO_Init+0x330>)
 8008424:	f043 0301 	orr.w	r3, r3, #1
 8008428:	6613      	str	r3, [r2, #96]	; 0x60
 800842a:	4b5c      	ldr	r3, [pc, #368]	; (800859c <HAL_GPIO_Init+0x330>)
 800842c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800842e:	f003 0301 	and.w	r3, r3, #1
 8008432:	60bb      	str	r3, [r7, #8]
 8008434:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8008436:	4a5a      	ldr	r2, [pc, #360]	; (80085a0 <HAL_GPIO_Init+0x334>)
 8008438:	697b      	ldr	r3, [r7, #20]
 800843a:	089b      	lsrs	r3, r3, #2
 800843c:	3302      	adds	r3, #2
 800843e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008442:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	f003 0303 	and.w	r3, r3, #3
 800844a:	009b      	lsls	r3, r3, #2
 800844c:	220f      	movs	r2, #15
 800844e:	fa02 f303 	lsl.w	r3, r2, r3
 8008452:	43db      	mvns	r3, r3
 8008454:	693a      	ldr	r2, [r7, #16]
 8008456:	4013      	ands	r3, r2
 8008458:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8008460:	d025      	beq.n	80084ae <HAL_GPIO_Init+0x242>
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	4a4f      	ldr	r2, [pc, #316]	; (80085a4 <HAL_GPIO_Init+0x338>)
 8008466:	4293      	cmp	r3, r2
 8008468:	d01f      	beq.n	80084aa <HAL_GPIO_Init+0x23e>
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	4a4e      	ldr	r2, [pc, #312]	; (80085a8 <HAL_GPIO_Init+0x33c>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d019      	beq.n	80084a6 <HAL_GPIO_Init+0x23a>
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	4a4d      	ldr	r2, [pc, #308]	; (80085ac <HAL_GPIO_Init+0x340>)
 8008476:	4293      	cmp	r3, r2
 8008478:	d013      	beq.n	80084a2 <HAL_GPIO_Init+0x236>
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	4a4c      	ldr	r2, [pc, #304]	; (80085b0 <HAL_GPIO_Init+0x344>)
 800847e:	4293      	cmp	r3, r2
 8008480:	d00d      	beq.n	800849e <HAL_GPIO_Init+0x232>
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	4a4b      	ldr	r2, [pc, #300]	; (80085b4 <HAL_GPIO_Init+0x348>)
 8008486:	4293      	cmp	r3, r2
 8008488:	d007      	beq.n	800849a <HAL_GPIO_Init+0x22e>
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	4a4a      	ldr	r2, [pc, #296]	; (80085b8 <HAL_GPIO_Init+0x34c>)
 800848e:	4293      	cmp	r3, r2
 8008490:	d101      	bne.n	8008496 <HAL_GPIO_Init+0x22a>
 8008492:	2306      	movs	r3, #6
 8008494:	e00c      	b.n	80084b0 <HAL_GPIO_Init+0x244>
 8008496:	2307      	movs	r3, #7
 8008498:	e00a      	b.n	80084b0 <HAL_GPIO_Init+0x244>
 800849a:	2305      	movs	r3, #5
 800849c:	e008      	b.n	80084b0 <HAL_GPIO_Init+0x244>
 800849e:	2304      	movs	r3, #4
 80084a0:	e006      	b.n	80084b0 <HAL_GPIO_Init+0x244>
 80084a2:	2303      	movs	r3, #3
 80084a4:	e004      	b.n	80084b0 <HAL_GPIO_Init+0x244>
 80084a6:	2302      	movs	r3, #2
 80084a8:	e002      	b.n	80084b0 <HAL_GPIO_Init+0x244>
 80084aa:	2301      	movs	r3, #1
 80084ac:	e000      	b.n	80084b0 <HAL_GPIO_Init+0x244>
 80084ae:	2300      	movs	r3, #0
 80084b0:	697a      	ldr	r2, [r7, #20]
 80084b2:	f002 0203 	and.w	r2, r2, #3
 80084b6:	0092      	lsls	r2, r2, #2
 80084b8:	4093      	lsls	r3, r2
 80084ba:	693a      	ldr	r2, [r7, #16]
 80084bc:	4313      	orrs	r3, r2
 80084be:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80084c0:	4937      	ldr	r1, [pc, #220]	; (80085a0 <HAL_GPIO_Init+0x334>)
 80084c2:	697b      	ldr	r3, [r7, #20]
 80084c4:	089b      	lsrs	r3, r3, #2
 80084c6:	3302      	adds	r3, #2
 80084c8:	693a      	ldr	r2, [r7, #16]
 80084ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80084ce:	4b3b      	ldr	r3, [pc, #236]	; (80085bc <HAL_GPIO_Init+0x350>)
 80084d0:	689b      	ldr	r3, [r3, #8]
 80084d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	43db      	mvns	r3, r3
 80084d8:	693a      	ldr	r2, [r7, #16]
 80084da:	4013      	ands	r3, r2
 80084dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	685b      	ldr	r3, [r3, #4]
 80084e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d003      	beq.n	80084f2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80084ea:	693a      	ldr	r2, [r7, #16]
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	4313      	orrs	r3, r2
 80084f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80084f2:	4a32      	ldr	r2, [pc, #200]	; (80085bc <HAL_GPIO_Init+0x350>)
 80084f4:	693b      	ldr	r3, [r7, #16]
 80084f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80084f8:	4b30      	ldr	r3, [pc, #192]	; (80085bc <HAL_GPIO_Init+0x350>)
 80084fa:	68db      	ldr	r3, [r3, #12]
 80084fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	43db      	mvns	r3, r3
 8008502:	693a      	ldr	r2, [r7, #16]
 8008504:	4013      	ands	r3, r2
 8008506:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	685b      	ldr	r3, [r3, #4]
 800850c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008510:	2b00      	cmp	r3, #0
 8008512:	d003      	beq.n	800851c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8008514:	693a      	ldr	r2, [r7, #16]
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	4313      	orrs	r3, r2
 800851a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800851c:	4a27      	ldr	r2, [pc, #156]	; (80085bc <HAL_GPIO_Init+0x350>)
 800851e:	693b      	ldr	r3, [r7, #16]
 8008520:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8008522:	4b26      	ldr	r3, [pc, #152]	; (80085bc <HAL_GPIO_Init+0x350>)
 8008524:	685b      	ldr	r3, [r3, #4]
 8008526:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	43db      	mvns	r3, r3
 800852c:	693a      	ldr	r2, [r7, #16]
 800852e:	4013      	ands	r3, r2
 8008530:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	685b      	ldr	r3, [r3, #4]
 8008536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800853a:	2b00      	cmp	r3, #0
 800853c:	d003      	beq.n	8008546 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800853e:	693a      	ldr	r2, [r7, #16]
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	4313      	orrs	r3, r2
 8008544:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008546:	4a1d      	ldr	r2, [pc, #116]	; (80085bc <HAL_GPIO_Init+0x350>)
 8008548:	693b      	ldr	r3, [r7, #16]
 800854a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800854c:	4b1b      	ldr	r3, [pc, #108]	; (80085bc <HAL_GPIO_Init+0x350>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	43db      	mvns	r3, r3
 8008556:	693a      	ldr	r2, [r7, #16]
 8008558:	4013      	ands	r3, r2
 800855a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	685b      	ldr	r3, [r3, #4]
 8008560:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008564:	2b00      	cmp	r3, #0
 8008566:	d003      	beq.n	8008570 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8008568:	693a      	ldr	r2, [r7, #16]
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	4313      	orrs	r3, r2
 800856e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8008570:	4a12      	ldr	r2, [pc, #72]	; (80085bc <HAL_GPIO_Init+0x350>)
 8008572:	693b      	ldr	r3, [r7, #16]
 8008574:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8008576:	697b      	ldr	r3, [r7, #20]
 8008578:	3301      	adds	r3, #1
 800857a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	681a      	ldr	r2, [r3, #0]
 8008580:	697b      	ldr	r3, [r7, #20]
 8008582:	fa22 f303 	lsr.w	r3, r2, r3
 8008586:	2b00      	cmp	r3, #0
 8008588:	f47f ae78 	bne.w	800827c <HAL_GPIO_Init+0x10>
  }
}
 800858c:	bf00      	nop
 800858e:	bf00      	nop
 8008590:	371c      	adds	r7, #28
 8008592:	46bd      	mov	sp, r7
 8008594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008598:	4770      	bx	lr
 800859a:	bf00      	nop
 800859c:	40021000 	.word	0x40021000
 80085a0:	40010000 	.word	0x40010000
 80085a4:	48000400 	.word	0x48000400
 80085a8:	48000800 	.word	0x48000800
 80085ac:	48000c00 	.word	0x48000c00
 80085b0:	48001000 	.word	0x48001000
 80085b4:	48001400 	.word	0x48001400
 80085b8:	48001800 	.word	0x48001800
 80085bc:	40010400 	.word	0x40010400

080085c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80085c0:	b480      	push	{r7}
 80085c2:	b085      	sub	sp, #20
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
 80085c8:	460b      	mov	r3, r1
 80085ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	691a      	ldr	r2, [r3, #16]
 80085d0:	887b      	ldrh	r3, [r7, #2]
 80085d2:	4013      	ands	r3, r2
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d002      	beq.n	80085de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80085d8:	2301      	movs	r3, #1
 80085da:	73fb      	strb	r3, [r7, #15]
 80085dc:	e001      	b.n	80085e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80085de:	2300      	movs	r3, #0
 80085e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80085e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	3714      	adds	r7, #20
 80085e8:	46bd      	mov	sp, r7
 80085ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ee:	4770      	bx	lr

080085f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80085f0:	b480      	push	{r7}
 80085f2:	b083      	sub	sp, #12
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
 80085f8:	460b      	mov	r3, r1
 80085fa:	807b      	strh	r3, [r7, #2]
 80085fc:	4613      	mov	r3, r2
 80085fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008600:	787b      	ldrb	r3, [r7, #1]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d003      	beq.n	800860e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008606:	887a      	ldrh	r2, [r7, #2]
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800860c:	e002      	b.n	8008614 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800860e:	887a      	ldrh	r2, [r7, #2]
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	629a      	str	r2, [r3, #40]	; 0x28
}
 8008614:	bf00      	nop
 8008616:	370c      	adds	r7, #12
 8008618:	46bd      	mov	sp, r7
 800861a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861e:	4770      	bx	lr

08008620 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008620:	b480      	push	{r7}
 8008622:	b085      	sub	sp, #20
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
 8008628:	460b      	mov	r3, r1
 800862a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	695b      	ldr	r3, [r3, #20]
 8008630:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008632:	887a      	ldrh	r2, [r7, #2]
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	4013      	ands	r3, r2
 8008638:	041a      	lsls	r2, r3, #16
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	43d9      	mvns	r1, r3
 800863e:	887b      	ldrh	r3, [r7, #2]
 8008640:	400b      	ands	r3, r1
 8008642:	431a      	orrs	r2, r3
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	619a      	str	r2, [r3, #24]
}
 8008648:	bf00      	nop
 800864a:	3714      	adds	r7, #20
 800864c:	46bd      	mov	sp, r7
 800864e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008652:	4770      	bx	lr

08008654 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b082      	sub	sp, #8
 8008658:	af00      	add	r7, sp, #0
 800865a:	4603      	mov	r3, r0
 800865c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800865e:	4b08      	ldr	r3, [pc, #32]	; (8008680 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008660:	695a      	ldr	r2, [r3, #20]
 8008662:	88fb      	ldrh	r3, [r7, #6]
 8008664:	4013      	ands	r3, r2
 8008666:	2b00      	cmp	r3, #0
 8008668:	d006      	beq.n	8008678 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800866a:	4a05      	ldr	r2, [pc, #20]	; (8008680 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800866c:	88fb      	ldrh	r3, [r7, #6]
 800866e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008670:	88fb      	ldrh	r3, [r7, #6]
 8008672:	4618      	mov	r0, r3
 8008674:	f7fd f9ca 	bl	8005a0c <HAL_GPIO_EXTI_Callback>
  }
}
 8008678:	bf00      	nop
 800867a:	3708      	adds	r7, #8
 800867c:	46bd      	mov	sp, r7
 800867e:	bd80      	pop	{r7, pc}
 8008680:	40010400 	.word	0x40010400

08008684 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b082      	sub	sp, #8
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d101      	bne.n	8008696 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008692:	2301      	movs	r3, #1
 8008694:	e081      	b.n	800879a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800869c:	b2db      	uxtb	r3, r3
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d106      	bne.n	80086b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2200      	movs	r2, #0
 80086a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	f7fd feb8 	bl	8006420 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2224      	movs	r2, #36	; 0x24
 80086b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	681a      	ldr	r2, [r3, #0]
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f022 0201 	bic.w	r2, r2, #1
 80086c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	685a      	ldr	r2, [r3, #4]
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80086d4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	689a      	ldr	r2, [r3, #8]
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80086e4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	68db      	ldr	r3, [r3, #12]
 80086ea:	2b01      	cmp	r3, #1
 80086ec:	d107      	bne.n	80086fe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	689a      	ldr	r2, [r3, #8]
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80086fa:	609a      	str	r2, [r3, #8]
 80086fc:	e006      	b.n	800870c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	689a      	ldr	r2, [r3, #8]
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800870a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	68db      	ldr	r3, [r3, #12]
 8008710:	2b02      	cmp	r3, #2
 8008712:	d104      	bne.n	800871e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800871c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	685b      	ldr	r3, [r3, #4]
 8008724:	687a      	ldr	r2, [r7, #4]
 8008726:	6812      	ldr	r2, [r2, #0]
 8008728:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800872c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008730:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	68da      	ldr	r2, [r3, #12]
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008740:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	691a      	ldr	r2, [r3, #16]
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	695b      	ldr	r3, [r3, #20]
 800874a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	699b      	ldr	r3, [r3, #24]
 8008752:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	430a      	orrs	r2, r1
 800875a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	69d9      	ldr	r1, [r3, #28]
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	6a1a      	ldr	r2, [r3, #32]
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	430a      	orrs	r2, r1
 800876a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	681a      	ldr	r2, [r3, #0]
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f042 0201 	orr.w	r2, r2, #1
 800877a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2200      	movs	r2, #0
 8008780:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2220      	movs	r2, #32
 8008786:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2200      	movs	r2, #0
 800878e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2200      	movs	r2, #0
 8008794:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008798:	2300      	movs	r3, #0
}
 800879a:	4618      	mov	r0, r3
 800879c:	3708      	adds	r7, #8
 800879e:	46bd      	mov	sp, r7
 80087a0:	bd80      	pop	{r7, pc}
	...

080087a4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b088      	sub	sp, #32
 80087a8:	af02      	add	r7, sp, #8
 80087aa:	60f8      	str	r0, [r7, #12]
 80087ac:	607a      	str	r2, [r7, #4]
 80087ae:	461a      	mov	r2, r3
 80087b0:	460b      	mov	r3, r1
 80087b2:	817b      	strh	r3, [r7, #10]
 80087b4:	4613      	mov	r3, r2
 80087b6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80087be:	b2db      	uxtb	r3, r3
 80087c0:	2b20      	cmp	r3, #32
 80087c2:	f040 80da 	bne.w	800897a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80087cc:	2b01      	cmp	r3, #1
 80087ce:	d101      	bne.n	80087d4 <HAL_I2C_Master_Transmit+0x30>
 80087d0:	2302      	movs	r3, #2
 80087d2:	e0d3      	b.n	800897c <HAL_I2C_Master_Transmit+0x1d8>
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	2201      	movs	r2, #1
 80087d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80087dc:	f7ff f92e 	bl	8007a3c <HAL_GetTick>
 80087e0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80087e2:	697b      	ldr	r3, [r7, #20]
 80087e4:	9300      	str	r3, [sp, #0]
 80087e6:	2319      	movs	r3, #25
 80087e8:	2201      	movs	r2, #1
 80087ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80087ee:	68f8      	ldr	r0, [r7, #12]
 80087f0:	f001 f8d1 	bl	8009996 <I2C_WaitOnFlagUntilTimeout>
 80087f4:	4603      	mov	r3, r0
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d001      	beq.n	80087fe <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80087fa:	2301      	movs	r3, #1
 80087fc:	e0be      	b.n	800897c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	2221      	movs	r2, #33	; 0x21
 8008802:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	2210      	movs	r2, #16
 800880a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	2200      	movs	r2, #0
 8008812:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	687a      	ldr	r2, [r7, #4]
 8008818:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	893a      	ldrh	r2, [r7, #8]
 800881e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	2200      	movs	r2, #0
 8008824:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800882a:	b29b      	uxth	r3, r3
 800882c:	2bff      	cmp	r3, #255	; 0xff
 800882e:	d90e      	bls.n	800884e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	22ff      	movs	r2, #255	; 0xff
 8008834:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800883a:	b2da      	uxtb	r2, r3
 800883c:	8979      	ldrh	r1, [r7, #10]
 800883e:	4b51      	ldr	r3, [pc, #324]	; (8008984 <HAL_I2C_Master_Transmit+0x1e0>)
 8008840:	9300      	str	r3, [sp, #0]
 8008842:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008846:	68f8      	ldr	r0, [r7, #12]
 8008848:	f001 fa4e 	bl	8009ce8 <I2C_TransferConfig>
 800884c:	e06c      	b.n	8008928 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008852:	b29a      	uxth	r2, r3
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800885c:	b2da      	uxtb	r2, r3
 800885e:	8979      	ldrh	r1, [r7, #10]
 8008860:	4b48      	ldr	r3, [pc, #288]	; (8008984 <HAL_I2C_Master_Transmit+0x1e0>)
 8008862:	9300      	str	r3, [sp, #0]
 8008864:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008868:	68f8      	ldr	r0, [r7, #12]
 800886a:	f001 fa3d 	bl	8009ce8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800886e:	e05b      	b.n	8008928 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008870:	697a      	ldr	r2, [r7, #20]
 8008872:	6a39      	ldr	r1, [r7, #32]
 8008874:	68f8      	ldr	r0, [r7, #12]
 8008876:	f001 f8ce 	bl	8009a16 <I2C_WaitOnTXISFlagUntilTimeout>
 800887a:	4603      	mov	r3, r0
 800887c:	2b00      	cmp	r3, #0
 800887e:	d001      	beq.n	8008884 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8008880:	2301      	movs	r3, #1
 8008882:	e07b      	b.n	800897c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008888:	781a      	ldrb	r2, [r3, #0]
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008894:	1c5a      	adds	r2, r3, #1
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800889e:	b29b      	uxth	r3, r3
 80088a0:	3b01      	subs	r3, #1
 80088a2:	b29a      	uxth	r2, r3
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80088ac:	3b01      	subs	r3, #1
 80088ae:	b29a      	uxth	r2, r3
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088b8:	b29b      	uxth	r3, r3
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d034      	beq.n	8008928 <HAL_I2C_Master_Transmit+0x184>
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d130      	bne.n	8008928 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80088c6:	697b      	ldr	r3, [r7, #20]
 80088c8:	9300      	str	r3, [sp, #0]
 80088ca:	6a3b      	ldr	r3, [r7, #32]
 80088cc:	2200      	movs	r2, #0
 80088ce:	2180      	movs	r1, #128	; 0x80
 80088d0:	68f8      	ldr	r0, [r7, #12]
 80088d2:	f001 f860 	bl	8009996 <I2C_WaitOnFlagUntilTimeout>
 80088d6:	4603      	mov	r3, r0
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d001      	beq.n	80088e0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80088dc:	2301      	movs	r3, #1
 80088de:	e04d      	b.n	800897c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088e4:	b29b      	uxth	r3, r3
 80088e6:	2bff      	cmp	r3, #255	; 0xff
 80088e8:	d90e      	bls.n	8008908 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	22ff      	movs	r2, #255	; 0xff
 80088ee:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80088f4:	b2da      	uxtb	r2, r3
 80088f6:	8979      	ldrh	r1, [r7, #10]
 80088f8:	2300      	movs	r3, #0
 80088fa:	9300      	str	r3, [sp, #0]
 80088fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008900:	68f8      	ldr	r0, [r7, #12]
 8008902:	f001 f9f1 	bl	8009ce8 <I2C_TransferConfig>
 8008906:	e00f      	b.n	8008928 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800890c:	b29a      	uxth	r2, r3
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008916:	b2da      	uxtb	r2, r3
 8008918:	8979      	ldrh	r1, [r7, #10]
 800891a:	2300      	movs	r3, #0
 800891c:	9300      	str	r3, [sp, #0]
 800891e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008922:	68f8      	ldr	r0, [r7, #12]
 8008924:	f001 f9e0 	bl	8009ce8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800892c:	b29b      	uxth	r3, r3
 800892e:	2b00      	cmp	r3, #0
 8008930:	d19e      	bne.n	8008870 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008932:	697a      	ldr	r2, [r7, #20]
 8008934:	6a39      	ldr	r1, [r7, #32]
 8008936:	68f8      	ldr	r0, [r7, #12]
 8008938:	f001 f8ad 	bl	8009a96 <I2C_WaitOnSTOPFlagUntilTimeout>
 800893c:	4603      	mov	r3, r0
 800893e:	2b00      	cmp	r3, #0
 8008940:	d001      	beq.n	8008946 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8008942:	2301      	movs	r3, #1
 8008944:	e01a      	b.n	800897c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	2220      	movs	r2, #32
 800894c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	6859      	ldr	r1, [r3, #4]
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	681a      	ldr	r2, [r3, #0]
 8008958:	4b0b      	ldr	r3, [pc, #44]	; (8008988 <HAL_I2C_Master_Transmit+0x1e4>)
 800895a:	400b      	ands	r3, r1
 800895c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	2220      	movs	r2, #32
 8008962:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	2200      	movs	r2, #0
 800896a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	2200      	movs	r2, #0
 8008972:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008976:	2300      	movs	r3, #0
 8008978:	e000      	b.n	800897c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800897a:	2302      	movs	r3, #2
  }
}
 800897c:	4618      	mov	r0, r3
 800897e:	3718      	adds	r7, #24
 8008980:	46bd      	mov	sp, r7
 8008982:	bd80      	pop	{r7, pc}
 8008984:	80002000 	.word	0x80002000
 8008988:	fe00e800 	.word	0xfe00e800

0800898c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b088      	sub	sp, #32
 8008990:	af02      	add	r7, sp, #8
 8008992:	60f8      	str	r0, [r7, #12]
 8008994:	4608      	mov	r0, r1
 8008996:	4611      	mov	r1, r2
 8008998:	461a      	mov	r2, r3
 800899a:	4603      	mov	r3, r0
 800899c:	817b      	strh	r3, [r7, #10]
 800899e:	460b      	mov	r3, r1
 80089a0:	813b      	strh	r3, [r7, #8]
 80089a2:	4613      	mov	r3, r2
 80089a4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80089ac:	b2db      	uxtb	r3, r3
 80089ae:	2b20      	cmp	r3, #32
 80089b0:	f040 80f9 	bne.w	8008ba6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80089b4:	6a3b      	ldr	r3, [r7, #32]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d002      	beq.n	80089c0 <HAL_I2C_Mem_Write+0x34>
 80089ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d105      	bne.n	80089cc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80089c6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80089c8:	2301      	movs	r3, #1
 80089ca:	e0ed      	b.n	8008ba8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80089d2:	2b01      	cmp	r3, #1
 80089d4:	d101      	bne.n	80089da <HAL_I2C_Mem_Write+0x4e>
 80089d6:	2302      	movs	r3, #2
 80089d8:	e0e6      	b.n	8008ba8 <HAL_I2C_Mem_Write+0x21c>
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	2201      	movs	r2, #1
 80089de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80089e2:	f7ff f82b 	bl	8007a3c <HAL_GetTick>
 80089e6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80089e8:	697b      	ldr	r3, [r7, #20]
 80089ea:	9300      	str	r3, [sp, #0]
 80089ec:	2319      	movs	r3, #25
 80089ee:	2201      	movs	r2, #1
 80089f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80089f4:	68f8      	ldr	r0, [r7, #12]
 80089f6:	f000 ffce 	bl	8009996 <I2C_WaitOnFlagUntilTimeout>
 80089fa:	4603      	mov	r3, r0
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d001      	beq.n	8008a04 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8008a00:	2301      	movs	r3, #1
 8008a02:	e0d1      	b.n	8008ba8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	2221      	movs	r2, #33	; 0x21
 8008a08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	2240      	movs	r2, #64	; 0x40
 8008a10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	2200      	movs	r2, #0
 8008a18:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	6a3a      	ldr	r2, [r7, #32]
 8008a1e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008a24:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	2200      	movs	r2, #0
 8008a2a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008a2c:	88f8      	ldrh	r0, [r7, #6]
 8008a2e:	893a      	ldrh	r2, [r7, #8]
 8008a30:	8979      	ldrh	r1, [r7, #10]
 8008a32:	697b      	ldr	r3, [r7, #20]
 8008a34:	9301      	str	r3, [sp, #4]
 8008a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a38:	9300      	str	r3, [sp, #0]
 8008a3a:	4603      	mov	r3, r0
 8008a3c:	68f8      	ldr	r0, [r7, #12]
 8008a3e:	f000 fb87 	bl	8009150 <I2C_RequestMemoryWrite>
 8008a42:	4603      	mov	r3, r0
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d005      	beq.n	8008a54 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008a50:	2301      	movs	r3, #1
 8008a52:	e0a9      	b.n	8008ba8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a58:	b29b      	uxth	r3, r3
 8008a5a:	2bff      	cmp	r3, #255	; 0xff
 8008a5c:	d90e      	bls.n	8008a7c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	22ff      	movs	r2, #255	; 0xff
 8008a62:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a68:	b2da      	uxtb	r2, r3
 8008a6a:	8979      	ldrh	r1, [r7, #10]
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	9300      	str	r3, [sp, #0]
 8008a70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008a74:	68f8      	ldr	r0, [r7, #12]
 8008a76:	f001 f937 	bl	8009ce8 <I2C_TransferConfig>
 8008a7a:	e00f      	b.n	8008a9c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a80:	b29a      	uxth	r2, r3
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a8a:	b2da      	uxtb	r2, r3
 8008a8c:	8979      	ldrh	r1, [r7, #10]
 8008a8e:	2300      	movs	r3, #0
 8008a90:	9300      	str	r3, [sp, #0]
 8008a92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008a96:	68f8      	ldr	r0, [r7, #12]
 8008a98:	f001 f926 	bl	8009ce8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008a9c:	697a      	ldr	r2, [r7, #20]
 8008a9e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008aa0:	68f8      	ldr	r0, [r7, #12]
 8008aa2:	f000 ffb8 	bl	8009a16 <I2C_WaitOnTXISFlagUntilTimeout>
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d001      	beq.n	8008ab0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8008aac:	2301      	movs	r3, #1
 8008aae:	e07b      	b.n	8008ba8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ab4:	781a      	ldrb	r2, [r3, #0]
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ac0:	1c5a      	adds	r2, r3, #1
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008aca:	b29b      	uxth	r3, r3
 8008acc:	3b01      	subs	r3, #1
 8008ace:	b29a      	uxth	r2, r3
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ad8:	3b01      	subs	r3, #1
 8008ada:	b29a      	uxth	r2, r3
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ae4:	b29b      	uxth	r3, r3
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d034      	beq.n	8008b54 <HAL_I2C_Mem_Write+0x1c8>
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d130      	bne.n	8008b54 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008af2:	697b      	ldr	r3, [r7, #20]
 8008af4:	9300      	str	r3, [sp, #0]
 8008af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008af8:	2200      	movs	r2, #0
 8008afa:	2180      	movs	r1, #128	; 0x80
 8008afc:	68f8      	ldr	r0, [r7, #12]
 8008afe:	f000 ff4a 	bl	8009996 <I2C_WaitOnFlagUntilTimeout>
 8008b02:	4603      	mov	r3, r0
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d001      	beq.n	8008b0c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8008b08:	2301      	movs	r3, #1
 8008b0a:	e04d      	b.n	8008ba8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b10:	b29b      	uxth	r3, r3
 8008b12:	2bff      	cmp	r3, #255	; 0xff
 8008b14:	d90e      	bls.n	8008b34 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	22ff      	movs	r2, #255	; 0xff
 8008b1a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b20:	b2da      	uxtb	r2, r3
 8008b22:	8979      	ldrh	r1, [r7, #10]
 8008b24:	2300      	movs	r3, #0
 8008b26:	9300      	str	r3, [sp, #0]
 8008b28:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008b2c:	68f8      	ldr	r0, [r7, #12]
 8008b2e:	f001 f8db 	bl	8009ce8 <I2C_TransferConfig>
 8008b32:	e00f      	b.n	8008b54 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b38:	b29a      	uxth	r2, r3
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b42:	b2da      	uxtb	r2, r3
 8008b44:	8979      	ldrh	r1, [r7, #10]
 8008b46:	2300      	movs	r3, #0
 8008b48:	9300      	str	r3, [sp, #0]
 8008b4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008b4e:	68f8      	ldr	r0, [r7, #12]
 8008b50:	f001 f8ca 	bl	8009ce8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b58:	b29b      	uxth	r3, r3
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d19e      	bne.n	8008a9c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008b5e:	697a      	ldr	r2, [r7, #20]
 8008b60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008b62:	68f8      	ldr	r0, [r7, #12]
 8008b64:	f000 ff97 	bl	8009a96 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d001      	beq.n	8008b72 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8008b6e:	2301      	movs	r3, #1
 8008b70:	e01a      	b.n	8008ba8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	2220      	movs	r2, #32
 8008b78:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	6859      	ldr	r1, [r3, #4]
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	681a      	ldr	r2, [r3, #0]
 8008b84:	4b0a      	ldr	r3, [pc, #40]	; (8008bb0 <HAL_I2C_Mem_Write+0x224>)
 8008b86:	400b      	ands	r3, r1
 8008b88:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	2220      	movs	r2, #32
 8008b8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	2200      	movs	r2, #0
 8008b96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	e000      	b.n	8008ba8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8008ba6:	2302      	movs	r3, #2
  }
}
 8008ba8:	4618      	mov	r0, r3
 8008baa:	3718      	adds	r7, #24
 8008bac:	46bd      	mov	sp, r7
 8008bae:	bd80      	pop	{r7, pc}
 8008bb0:	fe00e800 	.word	0xfe00e800

08008bb4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b088      	sub	sp, #32
 8008bb8:	af02      	add	r7, sp, #8
 8008bba:	60f8      	str	r0, [r7, #12]
 8008bbc:	4608      	mov	r0, r1
 8008bbe:	4611      	mov	r1, r2
 8008bc0:	461a      	mov	r2, r3
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	817b      	strh	r3, [r7, #10]
 8008bc6:	460b      	mov	r3, r1
 8008bc8:	813b      	strh	r3, [r7, #8]
 8008bca:	4613      	mov	r3, r2
 8008bcc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008bd4:	b2db      	uxtb	r3, r3
 8008bd6:	2b20      	cmp	r3, #32
 8008bd8:	f040 80fd 	bne.w	8008dd6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8008bdc:	6a3b      	ldr	r3, [r7, #32]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d002      	beq.n	8008be8 <HAL_I2C_Mem_Read+0x34>
 8008be2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d105      	bne.n	8008bf4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008bee:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008bf0:	2301      	movs	r3, #1
 8008bf2:	e0f1      	b.n	8008dd8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008bfa:	2b01      	cmp	r3, #1
 8008bfc:	d101      	bne.n	8008c02 <HAL_I2C_Mem_Read+0x4e>
 8008bfe:	2302      	movs	r3, #2
 8008c00:	e0ea      	b.n	8008dd8 <HAL_I2C_Mem_Read+0x224>
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	2201      	movs	r2, #1
 8008c06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008c0a:	f7fe ff17 	bl	8007a3c <HAL_GetTick>
 8008c0e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008c10:	697b      	ldr	r3, [r7, #20]
 8008c12:	9300      	str	r3, [sp, #0]
 8008c14:	2319      	movs	r3, #25
 8008c16:	2201      	movs	r2, #1
 8008c18:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008c1c:	68f8      	ldr	r0, [r7, #12]
 8008c1e:	f000 feba 	bl	8009996 <I2C_WaitOnFlagUntilTimeout>
 8008c22:	4603      	mov	r3, r0
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d001      	beq.n	8008c2c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8008c28:	2301      	movs	r3, #1
 8008c2a:	e0d5      	b.n	8008dd8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	2222      	movs	r2, #34	; 0x22
 8008c30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	2240      	movs	r2, #64	; 0x40
 8008c38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	2200      	movs	r2, #0
 8008c40:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	6a3a      	ldr	r2, [r7, #32]
 8008c46:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008c4c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	2200      	movs	r2, #0
 8008c52:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008c54:	88f8      	ldrh	r0, [r7, #6]
 8008c56:	893a      	ldrh	r2, [r7, #8]
 8008c58:	8979      	ldrh	r1, [r7, #10]
 8008c5a:	697b      	ldr	r3, [r7, #20]
 8008c5c:	9301      	str	r3, [sp, #4]
 8008c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c60:	9300      	str	r3, [sp, #0]
 8008c62:	4603      	mov	r3, r0
 8008c64:	68f8      	ldr	r0, [r7, #12]
 8008c66:	f000 fac7 	bl	80091f8 <I2C_RequestMemoryRead>
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d005      	beq.n	8008c7c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	2200      	movs	r2, #0
 8008c74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008c78:	2301      	movs	r3, #1
 8008c7a:	e0ad      	b.n	8008dd8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c80:	b29b      	uxth	r3, r3
 8008c82:	2bff      	cmp	r3, #255	; 0xff
 8008c84:	d90e      	bls.n	8008ca4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	22ff      	movs	r2, #255	; 0xff
 8008c8a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c90:	b2da      	uxtb	r2, r3
 8008c92:	8979      	ldrh	r1, [r7, #10]
 8008c94:	4b52      	ldr	r3, [pc, #328]	; (8008de0 <HAL_I2C_Mem_Read+0x22c>)
 8008c96:	9300      	str	r3, [sp, #0]
 8008c98:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008c9c:	68f8      	ldr	r0, [r7, #12]
 8008c9e:	f001 f823 	bl	8009ce8 <I2C_TransferConfig>
 8008ca2:	e00f      	b.n	8008cc4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ca8:	b29a      	uxth	r2, r3
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008cb2:	b2da      	uxtb	r2, r3
 8008cb4:	8979      	ldrh	r1, [r7, #10]
 8008cb6:	4b4a      	ldr	r3, [pc, #296]	; (8008de0 <HAL_I2C_Mem_Read+0x22c>)
 8008cb8:	9300      	str	r3, [sp, #0]
 8008cba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008cbe:	68f8      	ldr	r0, [r7, #12]
 8008cc0:	f001 f812 	bl	8009ce8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8008cc4:	697b      	ldr	r3, [r7, #20]
 8008cc6:	9300      	str	r3, [sp, #0]
 8008cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cca:	2200      	movs	r2, #0
 8008ccc:	2104      	movs	r1, #4
 8008cce:	68f8      	ldr	r0, [r7, #12]
 8008cd0:	f000 fe61 	bl	8009996 <I2C_WaitOnFlagUntilTimeout>
 8008cd4:	4603      	mov	r3, r0
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d001      	beq.n	8008cde <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8008cda:	2301      	movs	r3, #1
 8008cdc:	e07c      	b.n	8008dd8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ce8:	b2d2      	uxtb	r2, r2
 8008cea:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cf0:	1c5a      	adds	r2, r3, #1
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008cfa:	3b01      	subs	r3, #1
 8008cfc:	b29a      	uxth	r2, r3
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d06:	b29b      	uxth	r3, r3
 8008d08:	3b01      	subs	r3, #1
 8008d0a:	b29a      	uxth	r2, r3
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d14:	b29b      	uxth	r3, r3
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d034      	beq.n	8008d84 <HAL_I2C_Mem_Read+0x1d0>
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d130      	bne.n	8008d84 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008d22:	697b      	ldr	r3, [r7, #20]
 8008d24:	9300      	str	r3, [sp, #0]
 8008d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d28:	2200      	movs	r2, #0
 8008d2a:	2180      	movs	r1, #128	; 0x80
 8008d2c:	68f8      	ldr	r0, [r7, #12]
 8008d2e:	f000 fe32 	bl	8009996 <I2C_WaitOnFlagUntilTimeout>
 8008d32:	4603      	mov	r3, r0
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d001      	beq.n	8008d3c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8008d38:	2301      	movs	r3, #1
 8008d3a:	e04d      	b.n	8008dd8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d40:	b29b      	uxth	r3, r3
 8008d42:	2bff      	cmp	r3, #255	; 0xff
 8008d44:	d90e      	bls.n	8008d64 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	22ff      	movs	r2, #255	; 0xff
 8008d4a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d50:	b2da      	uxtb	r2, r3
 8008d52:	8979      	ldrh	r1, [r7, #10]
 8008d54:	2300      	movs	r3, #0
 8008d56:	9300      	str	r3, [sp, #0]
 8008d58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008d5c:	68f8      	ldr	r0, [r7, #12]
 8008d5e:	f000 ffc3 	bl	8009ce8 <I2C_TransferConfig>
 8008d62:	e00f      	b.n	8008d84 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d68:	b29a      	uxth	r2, r3
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d72:	b2da      	uxtb	r2, r3
 8008d74:	8979      	ldrh	r1, [r7, #10]
 8008d76:	2300      	movs	r3, #0
 8008d78:	9300      	str	r3, [sp, #0]
 8008d7a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008d7e:	68f8      	ldr	r0, [r7, #12]
 8008d80:	f000 ffb2 	bl	8009ce8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d88:	b29b      	uxth	r3, r3
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d19a      	bne.n	8008cc4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008d8e:	697a      	ldr	r2, [r7, #20]
 8008d90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008d92:	68f8      	ldr	r0, [r7, #12]
 8008d94:	f000 fe7f 	bl	8009a96 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008d98:	4603      	mov	r3, r0
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d001      	beq.n	8008da2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8008d9e:	2301      	movs	r3, #1
 8008da0:	e01a      	b.n	8008dd8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	2220      	movs	r2, #32
 8008da8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	6859      	ldr	r1, [r3, #4]
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	681a      	ldr	r2, [r3, #0]
 8008db4:	4b0b      	ldr	r3, [pc, #44]	; (8008de4 <HAL_I2C_Mem_Read+0x230>)
 8008db6:	400b      	ands	r3, r1
 8008db8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	2220      	movs	r2, #32
 8008dbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	2200      	movs	r2, #0
 8008dce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	e000      	b.n	8008dd8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8008dd6:	2302      	movs	r3, #2
  }
}
 8008dd8:	4618      	mov	r0, r3
 8008dda:	3718      	adds	r7, #24
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	bd80      	pop	{r7, pc}
 8008de0:	80002400 	.word	0x80002400
 8008de4:	fe00e800 	.word	0xfe00e800

08008de8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b084      	sub	sp, #16
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	699b      	ldr	r3, [r3, #24]
 8008df6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d005      	beq.n	8008e14 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e0c:	68ba      	ldr	r2, [r7, #8]
 8008e0e:	68f9      	ldr	r1, [r7, #12]
 8008e10:	6878      	ldr	r0, [r7, #4]
 8008e12:	4798      	blx	r3
  }
}
 8008e14:	bf00      	nop
 8008e16:	3710      	adds	r7, #16
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	bd80      	pop	{r7, pc}

08008e1c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b086      	sub	sp, #24
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	699b      	ldr	r3, [r3, #24]
 8008e2a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8008e34:	697b      	ldr	r3, [r7, #20]
 8008e36:	0a1b      	lsrs	r3, r3, #8
 8008e38:	f003 0301 	and.w	r3, r3, #1
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d010      	beq.n	8008e62 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8008e40:	693b      	ldr	r3, [r7, #16]
 8008e42:	09db      	lsrs	r3, r3, #7
 8008e44:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d00a      	beq.n	8008e62 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e50:	f043 0201 	orr.w	r2, r3, #1
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008e60:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8008e62:	697b      	ldr	r3, [r7, #20]
 8008e64:	0a9b      	lsrs	r3, r3, #10
 8008e66:	f003 0301 	and.w	r3, r3, #1
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d010      	beq.n	8008e90 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8008e6e:	693b      	ldr	r3, [r7, #16]
 8008e70:	09db      	lsrs	r3, r3, #7
 8008e72:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d00a      	beq.n	8008e90 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e7e:	f043 0208 	orr.w	r2, r3, #8
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008e8e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8008e90:	697b      	ldr	r3, [r7, #20]
 8008e92:	0a5b      	lsrs	r3, r3, #9
 8008e94:	f003 0301 	and.w	r3, r3, #1
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d010      	beq.n	8008ebe <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8008e9c:	693b      	ldr	r3, [r7, #16]
 8008e9e:	09db      	lsrs	r3, r3, #7
 8008ea0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d00a      	beq.n	8008ebe <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008eac:	f043 0202 	orr.w	r2, r3, #2
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008ebc:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ec2:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	f003 030b 	and.w	r3, r3, #11
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d003      	beq.n	8008ed6 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8008ece:	68f9      	ldr	r1, [r7, #12]
 8008ed0:	6878      	ldr	r0, [r7, #4]
 8008ed2:	f000 fc27 	bl	8009724 <I2C_ITError>
  }
}
 8008ed6:	bf00      	nop
 8008ed8:	3718      	adds	r7, #24
 8008eda:	46bd      	mov	sp, r7
 8008edc:	bd80      	pop	{r7, pc}

08008ede <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008ede:	b480      	push	{r7}
 8008ee0:	b083      	sub	sp, #12
 8008ee2:	af00      	add	r7, sp, #0
 8008ee4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8008ee6:	bf00      	nop
 8008ee8:	370c      	adds	r7, #12
 8008eea:	46bd      	mov	sp, r7
 8008eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef0:	4770      	bx	lr

08008ef2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008ef2:	b480      	push	{r7}
 8008ef4:	b083      	sub	sp, #12
 8008ef6:	af00      	add	r7, sp, #0
 8008ef8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8008efa:	bf00      	nop
 8008efc:	370c      	adds	r7, #12
 8008efe:	46bd      	mov	sp, r7
 8008f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f04:	4770      	bx	lr

08008f06 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8008f06:	b480      	push	{r7}
 8008f08:	b083      	sub	sp, #12
 8008f0a:	af00      	add	r7, sp, #0
 8008f0c:	6078      	str	r0, [r7, #4]
 8008f0e:	460b      	mov	r3, r1
 8008f10:	70fb      	strb	r3, [r7, #3]
 8008f12:	4613      	mov	r3, r2
 8008f14:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8008f16:	bf00      	nop
 8008f18:	370c      	adds	r7, #12
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f20:	4770      	bx	lr

08008f22 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008f22:	b480      	push	{r7}
 8008f24:	b083      	sub	sp, #12
 8008f26:	af00      	add	r7, sp, #0
 8008f28:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8008f2a:	bf00      	nop
 8008f2c:	370c      	adds	r7, #12
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f34:	4770      	bx	lr

08008f36 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008f36:	b480      	push	{r7}
 8008f38:	b083      	sub	sp, #12
 8008f3a:	af00      	add	r7, sp, #0
 8008f3c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8008f3e:	bf00      	nop
 8008f40:	370c      	adds	r7, #12
 8008f42:	46bd      	mov	sp, r7
 8008f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f48:	4770      	bx	lr

08008f4a <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8008f4a:	b580      	push	{r7, lr}
 8008f4c:	b086      	sub	sp, #24
 8008f4e:	af00      	add	r7, sp, #0
 8008f50:	60f8      	str	r0, [r7, #12]
 8008f52:	60b9      	str	r1, [r7, #8]
 8008f54:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f5a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8008f5c:	68bb      	ldr	r3, [r7, #8]
 8008f5e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008f66:	2b01      	cmp	r3, #1
 8008f68:	d101      	bne.n	8008f6e <I2C_Slave_ISR_IT+0x24>
 8008f6a:	2302      	movs	r3, #2
 8008f6c:	e0ec      	b.n	8009148 <I2C_Slave_ISR_IT+0x1fe>
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	2201      	movs	r2, #1
 8008f72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008f76:	693b      	ldr	r3, [r7, #16]
 8008f78:	095b      	lsrs	r3, r3, #5
 8008f7a:	f003 0301 	and.w	r3, r3, #1
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d009      	beq.n	8008f96 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	095b      	lsrs	r3, r3, #5
 8008f86:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d003      	beq.n	8008f96 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8008f8e:	6939      	ldr	r1, [r7, #16]
 8008f90:	68f8      	ldr	r0, [r7, #12]
 8008f92:	f000 fa67 	bl	8009464 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008f96:	693b      	ldr	r3, [r7, #16]
 8008f98:	091b      	lsrs	r3, r3, #4
 8008f9a:	f003 0301 	and.w	r3, r3, #1
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d04d      	beq.n	800903e <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	091b      	lsrs	r3, r3, #4
 8008fa6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d047      	beq.n	800903e <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008fb2:	b29b      	uxth	r3, r3
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d128      	bne.n	800900a <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008fbe:	b2db      	uxtb	r3, r3
 8008fc0:	2b28      	cmp	r3, #40	; 0x28
 8008fc2:	d108      	bne.n	8008fd6 <I2C_Slave_ISR_IT+0x8c>
 8008fc4:	697b      	ldr	r3, [r7, #20]
 8008fc6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008fca:	d104      	bne.n	8008fd6 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8008fcc:	6939      	ldr	r1, [r7, #16]
 8008fce:	68f8      	ldr	r0, [r7, #12]
 8008fd0:	f000 fb52 	bl	8009678 <I2C_ITListenCplt>
 8008fd4:	e032      	b.n	800903c <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008fdc:	b2db      	uxtb	r3, r3
 8008fde:	2b29      	cmp	r3, #41	; 0x29
 8008fe0:	d10e      	bne.n	8009000 <I2C_Slave_ISR_IT+0xb6>
 8008fe2:	697b      	ldr	r3, [r7, #20]
 8008fe4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008fe8:	d00a      	beq.n	8009000 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	2210      	movs	r2, #16
 8008ff0:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8008ff2:	68f8      	ldr	r0, [r7, #12]
 8008ff4:	f000 fc8d 	bl	8009912 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8008ff8:	68f8      	ldr	r0, [r7, #12]
 8008ffa:	f000 f9d5 	bl	80093a8 <I2C_ITSlaveSeqCplt>
 8008ffe:	e01d      	b.n	800903c <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	2210      	movs	r2, #16
 8009006:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8009008:	e096      	b.n	8009138 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	2210      	movs	r2, #16
 8009010:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009016:	f043 0204 	orr.w	r2, r3, #4
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800901e:	697b      	ldr	r3, [r7, #20]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d004      	beq.n	800902e <I2C_Slave_ISR_IT+0xe4>
 8009024:	697b      	ldr	r3, [r7, #20]
 8009026:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800902a:	f040 8085 	bne.w	8009138 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009032:	4619      	mov	r1, r3
 8009034:	68f8      	ldr	r0, [r7, #12]
 8009036:	f000 fb75 	bl	8009724 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800903a:	e07d      	b.n	8009138 <I2C_Slave_ISR_IT+0x1ee>
 800903c:	e07c      	b.n	8009138 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800903e:	693b      	ldr	r3, [r7, #16]
 8009040:	089b      	lsrs	r3, r3, #2
 8009042:	f003 0301 	and.w	r3, r3, #1
 8009046:	2b00      	cmp	r3, #0
 8009048:	d030      	beq.n	80090ac <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	089b      	lsrs	r3, r3, #2
 800904e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8009052:	2b00      	cmp	r3, #0
 8009054:	d02a      	beq.n	80090ac <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800905a:	b29b      	uxth	r3, r3
 800905c:	2b00      	cmp	r3, #0
 800905e:	d018      	beq.n	8009092 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800906a:	b2d2      	uxtb	r2, r2
 800906c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009072:	1c5a      	adds	r2, r3, #1
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800907c:	3b01      	subs	r3, #1
 800907e:	b29a      	uxth	r2, r3
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009088:	b29b      	uxth	r3, r3
 800908a:	3b01      	subs	r3, #1
 800908c:	b29a      	uxth	r2, r3
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009096:	b29b      	uxth	r3, r3
 8009098:	2b00      	cmp	r3, #0
 800909a:	d14f      	bne.n	800913c <I2C_Slave_ISR_IT+0x1f2>
 800909c:	697b      	ldr	r3, [r7, #20]
 800909e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80090a2:	d04b      	beq.n	800913c <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80090a4:	68f8      	ldr	r0, [r7, #12]
 80090a6:	f000 f97f 	bl	80093a8 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80090aa:	e047      	b.n	800913c <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80090ac:	693b      	ldr	r3, [r7, #16]
 80090ae:	08db      	lsrs	r3, r3, #3
 80090b0:	f003 0301 	and.w	r3, r3, #1
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d00a      	beq.n	80090ce <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	08db      	lsrs	r3, r3, #3
 80090bc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d004      	beq.n	80090ce <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80090c4:	6939      	ldr	r1, [r7, #16]
 80090c6:	68f8      	ldr	r0, [r7, #12]
 80090c8:	f000 f8ea 	bl	80092a0 <I2C_ITAddrCplt>
 80090cc:	e037      	b.n	800913e <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80090ce:	693b      	ldr	r3, [r7, #16]
 80090d0:	085b      	lsrs	r3, r3, #1
 80090d2:	f003 0301 	and.w	r3, r3, #1
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d031      	beq.n	800913e <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	085b      	lsrs	r3, r3, #1
 80090de:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d02b      	beq.n	800913e <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090ea:	b29b      	uxth	r3, r3
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d018      	beq.n	8009122 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090f4:	781a      	ldrb	r2, [r3, #0]
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009100:	1c5a      	adds	r2, r3, #1
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800910a:	b29b      	uxth	r3, r3
 800910c:	3b01      	subs	r3, #1
 800910e:	b29a      	uxth	r2, r3
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009118:	3b01      	subs	r3, #1
 800911a:	b29a      	uxth	r2, r3
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	851a      	strh	r2, [r3, #40]	; 0x28
 8009120:	e00d      	b.n	800913e <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8009122:	697b      	ldr	r3, [r7, #20]
 8009124:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009128:	d002      	beq.n	8009130 <I2C_Slave_ISR_IT+0x1e6>
 800912a:	697b      	ldr	r3, [r7, #20]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d106      	bne.n	800913e <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8009130:	68f8      	ldr	r0, [r7, #12]
 8009132:	f000 f939 	bl	80093a8 <I2C_ITSlaveSeqCplt>
 8009136:	e002      	b.n	800913e <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8009138:	bf00      	nop
 800913a:	e000      	b.n	800913e <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 800913c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	2200      	movs	r2, #0
 8009142:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009146:	2300      	movs	r3, #0
}
 8009148:	4618      	mov	r0, r3
 800914a:	3718      	adds	r7, #24
 800914c:	46bd      	mov	sp, r7
 800914e:	bd80      	pop	{r7, pc}

08009150 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b086      	sub	sp, #24
 8009154:	af02      	add	r7, sp, #8
 8009156:	60f8      	str	r0, [r7, #12]
 8009158:	4608      	mov	r0, r1
 800915a:	4611      	mov	r1, r2
 800915c:	461a      	mov	r2, r3
 800915e:	4603      	mov	r3, r0
 8009160:	817b      	strh	r3, [r7, #10]
 8009162:	460b      	mov	r3, r1
 8009164:	813b      	strh	r3, [r7, #8]
 8009166:	4613      	mov	r3, r2
 8009168:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800916a:	88fb      	ldrh	r3, [r7, #6]
 800916c:	b2da      	uxtb	r2, r3
 800916e:	8979      	ldrh	r1, [r7, #10]
 8009170:	4b20      	ldr	r3, [pc, #128]	; (80091f4 <I2C_RequestMemoryWrite+0xa4>)
 8009172:	9300      	str	r3, [sp, #0]
 8009174:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009178:	68f8      	ldr	r0, [r7, #12]
 800917a:	f000 fdb5 	bl	8009ce8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800917e:	69fa      	ldr	r2, [r7, #28]
 8009180:	69b9      	ldr	r1, [r7, #24]
 8009182:	68f8      	ldr	r0, [r7, #12]
 8009184:	f000 fc47 	bl	8009a16 <I2C_WaitOnTXISFlagUntilTimeout>
 8009188:	4603      	mov	r3, r0
 800918a:	2b00      	cmp	r3, #0
 800918c:	d001      	beq.n	8009192 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800918e:	2301      	movs	r3, #1
 8009190:	e02c      	b.n	80091ec <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009192:	88fb      	ldrh	r3, [r7, #6]
 8009194:	2b01      	cmp	r3, #1
 8009196:	d105      	bne.n	80091a4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009198:	893b      	ldrh	r3, [r7, #8]
 800919a:	b2da      	uxtb	r2, r3
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	629a      	str	r2, [r3, #40]	; 0x28
 80091a2:	e015      	b.n	80091d0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80091a4:	893b      	ldrh	r3, [r7, #8]
 80091a6:	0a1b      	lsrs	r3, r3, #8
 80091a8:	b29b      	uxth	r3, r3
 80091aa:	b2da      	uxtb	r2, r3
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80091b2:	69fa      	ldr	r2, [r7, #28]
 80091b4:	69b9      	ldr	r1, [r7, #24]
 80091b6:	68f8      	ldr	r0, [r7, #12]
 80091b8:	f000 fc2d 	bl	8009a16 <I2C_WaitOnTXISFlagUntilTimeout>
 80091bc:	4603      	mov	r3, r0
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d001      	beq.n	80091c6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80091c2:	2301      	movs	r3, #1
 80091c4:	e012      	b.n	80091ec <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80091c6:	893b      	ldrh	r3, [r7, #8]
 80091c8:	b2da      	uxtb	r2, r3
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80091d0:	69fb      	ldr	r3, [r7, #28]
 80091d2:	9300      	str	r3, [sp, #0]
 80091d4:	69bb      	ldr	r3, [r7, #24]
 80091d6:	2200      	movs	r2, #0
 80091d8:	2180      	movs	r1, #128	; 0x80
 80091da:	68f8      	ldr	r0, [r7, #12]
 80091dc:	f000 fbdb 	bl	8009996 <I2C_WaitOnFlagUntilTimeout>
 80091e0:	4603      	mov	r3, r0
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d001      	beq.n	80091ea <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80091e6:	2301      	movs	r3, #1
 80091e8:	e000      	b.n	80091ec <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80091ea:	2300      	movs	r3, #0
}
 80091ec:	4618      	mov	r0, r3
 80091ee:	3710      	adds	r7, #16
 80091f0:	46bd      	mov	sp, r7
 80091f2:	bd80      	pop	{r7, pc}
 80091f4:	80002000 	.word	0x80002000

080091f8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b086      	sub	sp, #24
 80091fc:	af02      	add	r7, sp, #8
 80091fe:	60f8      	str	r0, [r7, #12]
 8009200:	4608      	mov	r0, r1
 8009202:	4611      	mov	r1, r2
 8009204:	461a      	mov	r2, r3
 8009206:	4603      	mov	r3, r0
 8009208:	817b      	strh	r3, [r7, #10]
 800920a:	460b      	mov	r3, r1
 800920c:	813b      	strh	r3, [r7, #8]
 800920e:	4613      	mov	r3, r2
 8009210:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8009212:	88fb      	ldrh	r3, [r7, #6]
 8009214:	b2da      	uxtb	r2, r3
 8009216:	8979      	ldrh	r1, [r7, #10]
 8009218:	4b20      	ldr	r3, [pc, #128]	; (800929c <I2C_RequestMemoryRead+0xa4>)
 800921a:	9300      	str	r3, [sp, #0]
 800921c:	2300      	movs	r3, #0
 800921e:	68f8      	ldr	r0, [r7, #12]
 8009220:	f000 fd62 	bl	8009ce8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009224:	69fa      	ldr	r2, [r7, #28]
 8009226:	69b9      	ldr	r1, [r7, #24]
 8009228:	68f8      	ldr	r0, [r7, #12]
 800922a:	f000 fbf4 	bl	8009a16 <I2C_WaitOnTXISFlagUntilTimeout>
 800922e:	4603      	mov	r3, r0
 8009230:	2b00      	cmp	r3, #0
 8009232:	d001      	beq.n	8009238 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8009234:	2301      	movs	r3, #1
 8009236:	e02c      	b.n	8009292 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009238:	88fb      	ldrh	r3, [r7, #6]
 800923a:	2b01      	cmp	r3, #1
 800923c:	d105      	bne.n	800924a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800923e:	893b      	ldrh	r3, [r7, #8]
 8009240:	b2da      	uxtb	r2, r3
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	629a      	str	r2, [r3, #40]	; 0x28
 8009248:	e015      	b.n	8009276 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800924a:	893b      	ldrh	r3, [r7, #8]
 800924c:	0a1b      	lsrs	r3, r3, #8
 800924e:	b29b      	uxth	r3, r3
 8009250:	b2da      	uxtb	r2, r3
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009258:	69fa      	ldr	r2, [r7, #28]
 800925a:	69b9      	ldr	r1, [r7, #24]
 800925c:	68f8      	ldr	r0, [r7, #12]
 800925e:	f000 fbda 	bl	8009a16 <I2C_WaitOnTXISFlagUntilTimeout>
 8009262:	4603      	mov	r3, r0
 8009264:	2b00      	cmp	r3, #0
 8009266:	d001      	beq.n	800926c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8009268:	2301      	movs	r3, #1
 800926a:	e012      	b.n	8009292 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800926c:	893b      	ldrh	r3, [r7, #8]
 800926e:	b2da      	uxtb	r2, r3
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8009276:	69fb      	ldr	r3, [r7, #28]
 8009278:	9300      	str	r3, [sp, #0]
 800927a:	69bb      	ldr	r3, [r7, #24]
 800927c:	2200      	movs	r2, #0
 800927e:	2140      	movs	r1, #64	; 0x40
 8009280:	68f8      	ldr	r0, [r7, #12]
 8009282:	f000 fb88 	bl	8009996 <I2C_WaitOnFlagUntilTimeout>
 8009286:	4603      	mov	r3, r0
 8009288:	2b00      	cmp	r3, #0
 800928a:	d001      	beq.n	8009290 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800928c:	2301      	movs	r3, #1
 800928e:	e000      	b.n	8009292 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8009290:	2300      	movs	r3, #0
}
 8009292:	4618      	mov	r0, r3
 8009294:	3710      	adds	r7, #16
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}
 800929a:	bf00      	nop
 800929c:	80002000 	.word	0x80002000

080092a0 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b084      	sub	sp, #16
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
 80092a8:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80092b0:	b2db      	uxtb	r3, r3
 80092b2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80092b6:	2b28      	cmp	r3, #40	; 0x28
 80092b8:	d16a      	bne.n	8009390 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	699b      	ldr	r3, [r3, #24]
 80092c0:	0c1b      	lsrs	r3, r3, #16
 80092c2:	b2db      	uxtb	r3, r3
 80092c4:	f003 0301 	and.w	r3, r3, #1
 80092c8:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	699b      	ldr	r3, [r3, #24]
 80092d0:	0c1b      	lsrs	r3, r3, #16
 80092d2:	b29b      	uxth	r3, r3
 80092d4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80092d8:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	689b      	ldr	r3, [r3, #8]
 80092e0:	b29b      	uxth	r3, r3
 80092e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80092e6:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	68db      	ldr	r3, [r3, #12]
 80092ee:	b29b      	uxth	r3, r3
 80092f0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80092f4:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	68db      	ldr	r3, [r3, #12]
 80092fa:	2b02      	cmp	r3, #2
 80092fc:	d138      	bne.n	8009370 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80092fe:	897b      	ldrh	r3, [r7, #10]
 8009300:	09db      	lsrs	r3, r3, #7
 8009302:	b29a      	uxth	r2, r3
 8009304:	89bb      	ldrh	r3, [r7, #12]
 8009306:	4053      	eors	r3, r2
 8009308:	b29b      	uxth	r3, r3
 800930a:	f003 0306 	and.w	r3, r3, #6
 800930e:	2b00      	cmp	r3, #0
 8009310:	d11c      	bne.n	800934c <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8009312:	897b      	ldrh	r3, [r7, #10]
 8009314:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800931a:	1c5a      	adds	r2, r3, #1
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009324:	2b02      	cmp	r3, #2
 8009326:	d13b      	bne.n	80093a0 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2200      	movs	r2, #0
 800932c:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	2208      	movs	r2, #8
 8009334:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	2200      	movs	r2, #0
 800933a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800933e:	89ba      	ldrh	r2, [r7, #12]
 8009340:	7bfb      	ldrb	r3, [r7, #15]
 8009342:	4619      	mov	r1, r3
 8009344:	6878      	ldr	r0, [r7, #4]
 8009346:	f7ff fdde 	bl	8008f06 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800934a:	e029      	b.n	80093a0 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800934c:	893b      	ldrh	r3, [r7, #8]
 800934e:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8009350:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009354:	6878      	ldr	r0, [r7, #4]
 8009356:	f000 fcf9 	bl	8009d4c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	2200      	movs	r2, #0
 800935e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8009362:	89ba      	ldrh	r2, [r7, #12]
 8009364:	7bfb      	ldrb	r3, [r7, #15]
 8009366:	4619      	mov	r1, r3
 8009368:	6878      	ldr	r0, [r7, #4]
 800936a:	f7ff fdcc 	bl	8008f06 <HAL_I2C_AddrCallback>
}
 800936e:	e017      	b.n	80093a0 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8009370:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009374:	6878      	ldr	r0, [r7, #4]
 8009376:	f000 fce9 	bl	8009d4c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	2200      	movs	r2, #0
 800937e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8009382:	89ba      	ldrh	r2, [r7, #12]
 8009384:	7bfb      	ldrb	r3, [r7, #15]
 8009386:	4619      	mov	r1, r3
 8009388:	6878      	ldr	r0, [r7, #4]
 800938a:	f7ff fdbc 	bl	8008f06 <HAL_I2C_AddrCallback>
}
 800938e:	e007      	b.n	80093a0 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	2208      	movs	r2, #8
 8009396:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2200      	movs	r2, #0
 800939c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80093a0:	bf00      	nop
 80093a2:	3710      	adds	r7, #16
 80093a4:	46bd      	mov	sp, r7
 80093a6:	bd80      	pop	{r7, pc}

080093a8 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b084      	sub	sp, #16
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2200      	movs	r2, #0
 80093bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	0b9b      	lsrs	r3, r3, #14
 80093c4:	f003 0301 	and.w	r3, r3, #1
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d008      	beq.n	80093de <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	681a      	ldr	r2, [r3, #0]
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80093da:	601a      	str	r2, [r3, #0]
 80093dc:	e00d      	b.n	80093fa <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	0bdb      	lsrs	r3, r3, #15
 80093e2:	f003 0301 	and.w	r3, r3, #1
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d007      	beq.n	80093fa <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	681a      	ldr	r2, [r3, #0]
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80093f8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009400:	b2db      	uxtb	r3, r3
 8009402:	2b29      	cmp	r3, #41	; 0x29
 8009404:	d112      	bne.n	800942c <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	2228      	movs	r2, #40	; 0x28
 800940a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	2221      	movs	r2, #33	; 0x21
 8009412:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8009414:	2101      	movs	r1, #1
 8009416:	6878      	ldr	r0, [r7, #4]
 8009418:	f000 fc98 	bl	8009d4c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	2200      	movs	r2, #0
 8009420:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009424:	6878      	ldr	r0, [r7, #4]
 8009426:	f7ff fd5a 	bl	8008ede <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800942a:	e017      	b.n	800945c <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009432:	b2db      	uxtb	r3, r3
 8009434:	2b2a      	cmp	r3, #42	; 0x2a
 8009436:	d111      	bne.n	800945c <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2228      	movs	r2, #40	; 0x28
 800943c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2222      	movs	r2, #34	; 0x22
 8009444:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8009446:	2102      	movs	r1, #2
 8009448:	6878      	ldr	r0, [r7, #4]
 800944a:	f000 fc7f 	bl	8009d4c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2200      	movs	r2, #0
 8009452:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009456:	6878      	ldr	r0, [r7, #4]
 8009458:	f7ff fd4b 	bl	8008ef2 <HAL_I2C_SlaveRxCpltCallback>
}
 800945c:	bf00      	nop
 800945e:	3710      	adds	r7, #16
 8009460:	46bd      	mov	sp, r7
 8009462:	bd80      	pop	{r7, pc}

08009464 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b086      	sub	sp, #24
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
 800946c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009480:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	2220      	movs	r2, #32
 8009488:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800948a:	7bfb      	ldrb	r3, [r7, #15]
 800948c:	2b21      	cmp	r3, #33	; 0x21
 800948e:	d002      	beq.n	8009496 <I2C_ITSlaveCplt+0x32>
 8009490:	7bfb      	ldrb	r3, [r7, #15]
 8009492:	2b29      	cmp	r3, #41	; 0x29
 8009494:	d108      	bne.n	80094a8 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8009496:	f248 0101 	movw	r1, #32769	; 0x8001
 800949a:	6878      	ldr	r0, [r7, #4]
 800949c:	f000 fc56 	bl	8009d4c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2221      	movs	r2, #33	; 0x21
 80094a4:	631a      	str	r2, [r3, #48]	; 0x30
 80094a6:	e00d      	b.n	80094c4 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80094a8:	7bfb      	ldrb	r3, [r7, #15]
 80094aa:	2b22      	cmp	r3, #34	; 0x22
 80094ac:	d002      	beq.n	80094b4 <I2C_ITSlaveCplt+0x50>
 80094ae:	7bfb      	ldrb	r3, [r7, #15]
 80094b0:	2b2a      	cmp	r3, #42	; 0x2a
 80094b2:	d107      	bne.n	80094c4 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80094b4:	f248 0102 	movw	r1, #32770	; 0x8002
 80094b8:	6878      	ldr	r0, [r7, #4]
 80094ba:	f000 fc47 	bl	8009d4c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	2222      	movs	r2, #34	; 0x22
 80094c2:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	685a      	ldr	r2, [r3, #4]
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80094d2:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	6859      	ldr	r1, [r3, #4]
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681a      	ldr	r2, [r3, #0]
 80094de:	4b64      	ldr	r3, [pc, #400]	; (8009670 <I2C_ITSlaveCplt+0x20c>)
 80094e0:	400b      	ands	r3, r1
 80094e2:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80094e4:	6878      	ldr	r0, [r7, #4]
 80094e6:	f000 fa14 	bl	8009912 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80094ea:	693b      	ldr	r3, [r7, #16]
 80094ec:	0b9b      	lsrs	r3, r3, #14
 80094ee:	f003 0301 	and.w	r3, r3, #1
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d013      	beq.n	800951e <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	681a      	ldr	r2, [r3, #0]
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009504:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800950a:	2b00      	cmp	r3, #0
 800950c:	d020      	beq.n	8009550 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	685b      	ldr	r3, [r3, #4]
 8009516:	b29a      	uxth	r2, r3
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800951c:	e018      	b.n	8009550 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800951e:	693b      	ldr	r3, [r7, #16]
 8009520:	0bdb      	lsrs	r3, r3, #15
 8009522:	f003 0301 	and.w	r3, r3, #1
 8009526:	2b00      	cmp	r3, #0
 8009528:	d012      	beq.n	8009550 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	681a      	ldr	r2, [r3, #0]
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009538:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800953e:	2b00      	cmp	r3, #0
 8009540:	d006      	beq.n	8009550 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	685b      	ldr	r3, [r3, #4]
 800954a:	b29a      	uxth	r2, r3
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8009550:	697b      	ldr	r3, [r7, #20]
 8009552:	089b      	lsrs	r3, r3, #2
 8009554:	f003 0301 	and.w	r3, r3, #1
 8009558:	2b00      	cmp	r3, #0
 800955a:	d020      	beq.n	800959e <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800955c:	697b      	ldr	r3, [r7, #20]
 800955e:	f023 0304 	bic.w	r3, r3, #4
 8009562:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800956e:	b2d2      	uxtb	r2, r2
 8009570:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009576:	1c5a      	adds	r2, r3, #1
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009580:	2b00      	cmp	r3, #0
 8009582:	d00c      	beq.n	800959e <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009588:	3b01      	subs	r3, #1
 800958a:	b29a      	uxth	r2, r3
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009594:	b29b      	uxth	r3, r3
 8009596:	3b01      	subs	r3, #1
 8009598:	b29a      	uxth	r2, r3
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095a2:	b29b      	uxth	r3, r3
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d005      	beq.n	80095b4 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095ac:	f043 0204 	orr.w	r2, r3, #4
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2200      	movs	r2, #0
 80095b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	2200      	movs	r2, #0
 80095c0:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d010      	beq.n	80095ec <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095ce:	4619      	mov	r1, r3
 80095d0:	6878      	ldr	r0, [r7, #4]
 80095d2:	f000 f8a7 	bl	8009724 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80095dc:	b2db      	uxtb	r3, r3
 80095de:	2b28      	cmp	r3, #40	; 0x28
 80095e0:	d141      	bne.n	8009666 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80095e2:	6979      	ldr	r1, [r7, #20]
 80095e4:	6878      	ldr	r0, [r7, #4]
 80095e6:	f000 f847 	bl	8009678 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80095ea:	e03c      	b.n	8009666 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80095f4:	d014      	beq.n	8009620 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 80095f6:	6878      	ldr	r0, [r7, #4]
 80095f8:	f7ff fed6 	bl	80093a8 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	4a1d      	ldr	r2, [pc, #116]	; (8009674 <I2C_ITSlaveCplt+0x210>)
 8009600:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2220      	movs	r2, #32
 8009606:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	2200      	movs	r2, #0
 800960e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2200      	movs	r2, #0
 8009614:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8009618:	6878      	ldr	r0, [r7, #4]
 800961a:	f7ff fc82 	bl	8008f22 <HAL_I2C_ListenCpltCallback>
}
 800961e:	e022      	b.n	8009666 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009626:	b2db      	uxtb	r3, r3
 8009628:	2b22      	cmp	r3, #34	; 0x22
 800962a:	d10e      	bne.n	800964a <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	2220      	movs	r2, #32
 8009630:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2200      	movs	r2, #0
 8009638:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2200      	movs	r2, #0
 800963e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	f7ff fc55 	bl	8008ef2 <HAL_I2C_SlaveRxCpltCallback>
}
 8009648:	e00d      	b.n	8009666 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	2220      	movs	r2, #32
 800964e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	2200      	movs	r2, #0
 8009656:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2200      	movs	r2, #0
 800965c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009660:	6878      	ldr	r0, [r7, #4]
 8009662:	f7ff fc3c 	bl	8008ede <HAL_I2C_SlaveTxCpltCallback>
}
 8009666:	bf00      	nop
 8009668:	3718      	adds	r7, #24
 800966a:	46bd      	mov	sp, r7
 800966c:	bd80      	pop	{r7, pc}
 800966e:	bf00      	nop
 8009670:	fe00e800 	.word	0xfe00e800
 8009674:	ffff0000 	.word	0xffff0000

08009678 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b082      	sub	sp, #8
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
 8009680:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	4a26      	ldr	r2, [pc, #152]	; (8009720 <I2C_ITListenCplt+0xa8>)
 8009686:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2200      	movs	r2, #0
 800968c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	2220      	movs	r2, #32
 8009692:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2200      	movs	r2, #0
 800969a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	2200      	movs	r2, #0
 80096a2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	089b      	lsrs	r3, r3, #2
 80096a8:	f003 0301 	and.w	r3, r3, #1
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d022      	beq.n	80096f6 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096ba:	b2d2      	uxtb	r2, r2
 80096bc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096c2:	1c5a      	adds	r2, r3, #1
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d012      	beq.n	80096f6 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096d4:	3b01      	subs	r3, #1
 80096d6:	b29a      	uxth	r2, r3
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096e0:	b29b      	uxth	r3, r3
 80096e2:	3b01      	subs	r3, #1
 80096e4:	b29a      	uxth	r2, r3
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096ee:	f043 0204 	orr.w	r2, r3, #4
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80096f6:	f248 0103 	movw	r1, #32771	; 0x8003
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f000 fb26 	bl	8009d4c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	2210      	movs	r2, #16
 8009706:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2200      	movs	r2, #0
 800970c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8009710:	6878      	ldr	r0, [r7, #4]
 8009712:	f7ff fc06 	bl	8008f22 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8009716:	bf00      	nop
 8009718:	3708      	adds	r7, #8
 800971a:	46bd      	mov	sp, r7
 800971c:	bd80      	pop	{r7, pc}
 800971e:	bf00      	nop
 8009720:	ffff0000 	.word	0xffff0000

08009724 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b084      	sub	sp, #16
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
 800972c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009734:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2200      	movs	r2, #0
 800973a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	4a5d      	ldr	r2, [pc, #372]	; (80098b8 <I2C_ITError+0x194>)
 8009742:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2200      	movs	r2, #0
 8009748:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	431a      	orrs	r2, r3
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8009756:	7bfb      	ldrb	r3, [r7, #15]
 8009758:	2b28      	cmp	r3, #40	; 0x28
 800975a:	d005      	beq.n	8009768 <I2C_ITError+0x44>
 800975c:	7bfb      	ldrb	r3, [r7, #15]
 800975e:	2b29      	cmp	r3, #41	; 0x29
 8009760:	d002      	beq.n	8009768 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8009762:	7bfb      	ldrb	r3, [r7, #15]
 8009764:	2b2a      	cmp	r3, #42	; 0x2a
 8009766:	d10b      	bne.n	8009780 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009768:	2103      	movs	r1, #3
 800976a:	6878      	ldr	r0, [r7, #4]
 800976c:	f000 faee 	bl	8009d4c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2228      	movs	r2, #40	; 0x28
 8009774:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	4a50      	ldr	r2, [pc, #320]	; (80098bc <I2C_ITError+0x198>)
 800977c:	635a      	str	r2, [r3, #52]	; 0x34
 800977e:	e011      	b.n	80097a4 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009780:	f248 0103 	movw	r1, #32771	; 0x8003
 8009784:	6878      	ldr	r0, [r7, #4]
 8009786:	f000 fae1 	bl	8009d4c <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009790:	b2db      	uxtb	r3, r3
 8009792:	2b60      	cmp	r3, #96	; 0x60
 8009794:	d003      	beq.n	800979e <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	2220      	movs	r2, #32
 800979a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	2200      	movs	r2, #0
 80097a2:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097a8:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d039      	beq.n	8009826 <I2C_ITError+0x102>
 80097b2:	68bb      	ldr	r3, [r7, #8]
 80097b4:	2b11      	cmp	r3, #17
 80097b6:	d002      	beq.n	80097be <I2C_ITError+0x9a>
 80097b8:	68bb      	ldr	r3, [r7, #8]
 80097ba:	2b21      	cmp	r3, #33	; 0x21
 80097bc:	d133      	bne.n	8009826 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80097c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80097cc:	d107      	bne.n	80097de <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	681a      	ldr	r2, [r3, #0]
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80097dc:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097e2:	4618      	mov	r0, r3
 80097e4:	f7fe fd04 	bl	80081f0 <HAL_DMA_GetState>
 80097e8:	4603      	mov	r3, r0
 80097ea:	2b01      	cmp	r3, #1
 80097ec:	d017      	beq.n	800981e <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097f2:	4a33      	ldr	r2, [pc, #204]	; (80098c0 <I2C_ITError+0x19c>)
 80097f4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	2200      	movs	r2, #0
 80097fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009802:	4618      	mov	r0, r3
 8009804:	f7fe fc04 	bl	8008010 <HAL_DMA_Abort_IT>
 8009808:	4603      	mov	r3, r0
 800980a:	2b00      	cmp	r3, #0
 800980c:	d04d      	beq.n	80098aa <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009814:	687a      	ldr	r2, [r7, #4]
 8009816:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009818:	4610      	mov	r0, r2
 800981a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800981c:	e045      	b.n	80098aa <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800981e:	6878      	ldr	r0, [r7, #4]
 8009820:	f000 f850 	bl	80098c4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009824:	e041      	b.n	80098aa <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800982a:	2b00      	cmp	r3, #0
 800982c:	d039      	beq.n	80098a2 <I2C_ITError+0x17e>
 800982e:	68bb      	ldr	r3, [r7, #8]
 8009830:	2b12      	cmp	r3, #18
 8009832:	d002      	beq.n	800983a <I2C_ITError+0x116>
 8009834:	68bb      	ldr	r3, [r7, #8]
 8009836:	2b22      	cmp	r3, #34	; 0x22
 8009838:	d133      	bne.n	80098a2 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009844:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009848:	d107      	bne.n	800985a <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	681a      	ldr	r2, [r3, #0]
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009858:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800985e:	4618      	mov	r0, r3
 8009860:	f7fe fcc6 	bl	80081f0 <HAL_DMA_GetState>
 8009864:	4603      	mov	r3, r0
 8009866:	2b01      	cmp	r3, #1
 8009868:	d017      	beq.n	800989a <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800986e:	4a14      	ldr	r2, [pc, #80]	; (80098c0 <I2C_ITError+0x19c>)
 8009870:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	2200      	movs	r2, #0
 8009876:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800987e:	4618      	mov	r0, r3
 8009880:	f7fe fbc6 	bl	8008010 <HAL_DMA_Abort_IT>
 8009884:	4603      	mov	r3, r0
 8009886:	2b00      	cmp	r3, #0
 8009888:	d011      	beq.n	80098ae <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800988e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009890:	687a      	ldr	r2, [r7, #4]
 8009892:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8009894:	4610      	mov	r0, r2
 8009896:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009898:	e009      	b.n	80098ae <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800989a:	6878      	ldr	r0, [r7, #4]
 800989c:	f000 f812 	bl	80098c4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80098a0:	e005      	b.n	80098ae <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80098a2:	6878      	ldr	r0, [r7, #4]
 80098a4:	f000 f80e 	bl	80098c4 <I2C_TreatErrorCallback>
  }
}
 80098a8:	e002      	b.n	80098b0 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80098aa:	bf00      	nop
 80098ac:	e000      	b.n	80098b0 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80098ae:	bf00      	nop
}
 80098b0:	bf00      	nop
 80098b2:	3710      	adds	r7, #16
 80098b4:	46bd      	mov	sp, r7
 80098b6:	bd80      	pop	{r7, pc}
 80098b8:	ffff0000 	.word	0xffff0000
 80098bc:	08008f4b 	.word	0x08008f4b
 80098c0:	0800995b 	.word	0x0800995b

080098c4 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b082      	sub	sp, #8
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80098d2:	b2db      	uxtb	r3, r3
 80098d4:	2b60      	cmp	r3, #96	; 0x60
 80098d6:	d10e      	bne.n	80098f6 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	2220      	movs	r2, #32
 80098dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	2200      	movs	r2, #0
 80098e4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	2200      	movs	r2, #0
 80098ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80098ee:	6878      	ldr	r0, [r7, #4]
 80098f0:	f7ff fb21 	bl	8008f36 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80098f4:	e009      	b.n	800990a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	2200      	movs	r2, #0
 80098fa:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2200      	movs	r2, #0
 8009900:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8009904:	6878      	ldr	r0, [r7, #4]
 8009906:	f7fc f867 	bl	80059d8 <HAL_I2C_ErrorCallback>
}
 800990a:	bf00      	nop
 800990c:	3708      	adds	r7, #8
 800990e:	46bd      	mov	sp, r7
 8009910:	bd80      	pop	{r7, pc}

08009912 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009912:	b480      	push	{r7}
 8009914:	b083      	sub	sp, #12
 8009916:	af00      	add	r7, sp, #0
 8009918:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	699b      	ldr	r3, [r3, #24]
 8009920:	f003 0302 	and.w	r3, r3, #2
 8009924:	2b02      	cmp	r3, #2
 8009926:	d103      	bne.n	8009930 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	2200      	movs	r2, #0
 800992e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	699b      	ldr	r3, [r3, #24]
 8009936:	f003 0301 	and.w	r3, r3, #1
 800993a:	2b01      	cmp	r3, #1
 800993c:	d007      	beq.n	800994e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	699a      	ldr	r2, [r3, #24]
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	f042 0201 	orr.w	r2, r2, #1
 800994c:	619a      	str	r2, [r3, #24]
  }
}
 800994e:	bf00      	nop
 8009950:	370c      	adds	r7, #12
 8009952:	46bd      	mov	sp, r7
 8009954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009958:	4770      	bx	lr

0800995a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800995a:	b580      	push	{r7, lr}
 800995c:	b084      	sub	sp, #16
 800995e:	af00      	add	r7, sp, #0
 8009960:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009966:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800996c:	2b00      	cmp	r3, #0
 800996e:	d003      	beq.n	8009978 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009974:	2200      	movs	r2, #0
 8009976:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800997c:	2b00      	cmp	r3, #0
 800997e:	d003      	beq.n	8009988 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009984:	2200      	movs	r2, #0
 8009986:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8009988:	68f8      	ldr	r0, [r7, #12]
 800998a:	f7ff ff9b 	bl	80098c4 <I2C_TreatErrorCallback>
}
 800998e:	bf00      	nop
 8009990:	3710      	adds	r7, #16
 8009992:	46bd      	mov	sp, r7
 8009994:	bd80      	pop	{r7, pc}

08009996 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009996:	b580      	push	{r7, lr}
 8009998:	b084      	sub	sp, #16
 800999a:	af00      	add	r7, sp, #0
 800999c:	60f8      	str	r0, [r7, #12]
 800999e:	60b9      	str	r1, [r7, #8]
 80099a0:	603b      	str	r3, [r7, #0]
 80099a2:	4613      	mov	r3, r2
 80099a4:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80099a6:	e022      	b.n	80099ee <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80099ae:	d01e      	beq.n	80099ee <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80099b0:	f7fe f844 	bl	8007a3c <HAL_GetTick>
 80099b4:	4602      	mov	r2, r0
 80099b6:	69bb      	ldr	r3, [r7, #24]
 80099b8:	1ad3      	subs	r3, r2, r3
 80099ba:	683a      	ldr	r2, [r7, #0]
 80099bc:	429a      	cmp	r2, r3
 80099be:	d302      	bcc.n	80099c6 <I2C_WaitOnFlagUntilTimeout+0x30>
 80099c0:	683b      	ldr	r3, [r7, #0]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d113      	bne.n	80099ee <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099ca:	f043 0220 	orr.w	r2, r3, #32
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	2220      	movs	r2, #32
 80099d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	2200      	movs	r2, #0
 80099de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	2200      	movs	r2, #0
 80099e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80099ea:	2301      	movs	r3, #1
 80099ec:	e00f      	b.n	8009a0e <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	699a      	ldr	r2, [r3, #24]
 80099f4:	68bb      	ldr	r3, [r7, #8]
 80099f6:	4013      	ands	r3, r2
 80099f8:	68ba      	ldr	r2, [r7, #8]
 80099fa:	429a      	cmp	r2, r3
 80099fc:	bf0c      	ite	eq
 80099fe:	2301      	moveq	r3, #1
 8009a00:	2300      	movne	r3, #0
 8009a02:	b2db      	uxtb	r3, r3
 8009a04:	461a      	mov	r2, r3
 8009a06:	79fb      	ldrb	r3, [r7, #7]
 8009a08:	429a      	cmp	r2, r3
 8009a0a:	d0cd      	beq.n	80099a8 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009a0c:	2300      	movs	r3, #0
}
 8009a0e:	4618      	mov	r0, r3
 8009a10:	3710      	adds	r7, #16
 8009a12:	46bd      	mov	sp, r7
 8009a14:	bd80      	pop	{r7, pc}

08009a16 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009a16:	b580      	push	{r7, lr}
 8009a18:	b084      	sub	sp, #16
 8009a1a:	af00      	add	r7, sp, #0
 8009a1c:	60f8      	str	r0, [r7, #12]
 8009a1e:	60b9      	str	r1, [r7, #8]
 8009a20:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009a22:	e02c      	b.n	8009a7e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009a24:	687a      	ldr	r2, [r7, #4]
 8009a26:	68b9      	ldr	r1, [r7, #8]
 8009a28:	68f8      	ldr	r0, [r7, #12]
 8009a2a:	f000 f871 	bl	8009b10 <I2C_IsErrorOccurred>
 8009a2e:	4603      	mov	r3, r0
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d001      	beq.n	8009a38 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009a34:	2301      	movs	r3, #1
 8009a36:	e02a      	b.n	8009a8e <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009a38:	68bb      	ldr	r3, [r7, #8]
 8009a3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009a3e:	d01e      	beq.n	8009a7e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a40:	f7fd fffc 	bl	8007a3c <HAL_GetTick>
 8009a44:	4602      	mov	r2, r0
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	1ad3      	subs	r3, r2, r3
 8009a4a:	68ba      	ldr	r2, [r7, #8]
 8009a4c:	429a      	cmp	r2, r3
 8009a4e:	d302      	bcc.n	8009a56 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009a50:	68bb      	ldr	r3, [r7, #8]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d113      	bne.n	8009a7e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a5a:	f043 0220 	orr.w	r2, r3, #32
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	2220      	movs	r2, #32
 8009a66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	2200      	movs	r2, #0
 8009a76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8009a7a:	2301      	movs	r3, #1
 8009a7c:	e007      	b.n	8009a8e <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	699b      	ldr	r3, [r3, #24]
 8009a84:	f003 0302 	and.w	r3, r3, #2
 8009a88:	2b02      	cmp	r3, #2
 8009a8a:	d1cb      	bne.n	8009a24 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009a8c:	2300      	movs	r3, #0
}
 8009a8e:	4618      	mov	r0, r3
 8009a90:	3710      	adds	r7, #16
 8009a92:	46bd      	mov	sp, r7
 8009a94:	bd80      	pop	{r7, pc}

08009a96 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009a96:	b580      	push	{r7, lr}
 8009a98:	b084      	sub	sp, #16
 8009a9a:	af00      	add	r7, sp, #0
 8009a9c:	60f8      	str	r0, [r7, #12]
 8009a9e:	60b9      	str	r1, [r7, #8]
 8009aa0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009aa2:	e028      	b.n	8009af6 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009aa4:	687a      	ldr	r2, [r7, #4]
 8009aa6:	68b9      	ldr	r1, [r7, #8]
 8009aa8:	68f8      	ldr	r0, [r7, #12]
 8009aaa:	f000 f831 	bl	8009b10 <I2C_IsErrorOccurred>
 8009aae:	4603      	mov	r3, r0
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d001      	beq.n	8009ab8 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009ab4:	2301      	movs	r3, #1
 8009ab6:	e026      	b.n	8009b06 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009ab8:	f7fd ffc0 	bl	8007a3c <HAL_GetTick>
 8009abc:	4602      	mov	r2, r0
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	1ad3      	subs	r3, r2, r3
 8009ac2:	68ba      	ldr	r2, [r7, #8]
 8009ac4:	429a      	cmp	r2, r3
 8009ac6:	d302      	bcc.n	8009ace <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009ac8:	68bb      	ldr	r3, [r7, #8]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d113      	bne.n	8009af6 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ad2:	f043 0220 	orr.w	r2, r3, #32
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	2220      	movs	r2, #32
 8009ade:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	2200      	movs	r2, #0
 8009aee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8009af2:	2301      	movs	r3, #1
 8009af4:	e007      	b.n	8009b06 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	699b      	ldr	r3, [r3, #24]
 8009afc:	f003 0320 	and.w	r3, r3, #32
 8009b00:	2b20      	cmp	r3, #32
 8009b02:	d1cf      	bne.n	8009aa4 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8009b04:	2300      	movs	r3, #0
}
 8009b06:	4618      	mov	r0, r3
 8009b08:	3710      	adds	r7, #16
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	bd80      	pop	{r7, pc}
	...

08009b10 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b08a      	sub	sp, #40	; 0x28
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	60f8      	str	r0, [r7, #12]
 8009b18:	60b9      	str	r1, [r7, #8]
 8009b1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	699b      	ldr	r3, [r3, #24]
 8009b28:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009b32:	69bb      	ldr	r3, [r7, #24]
 8009b34:	f003 0310 	and.w	r3, r3, #16
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d075      	beq.n	8009c28 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	2210      	movs	r2, #16
 8009b42:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009b44:	e056      	b.n	8009bf4 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009b46:	68bb      	ldr	r3, [r7, #8]
 8009b48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009b4c:	d052      	beq.n	8009bf4 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009b4e:	f7fd ff75 	bl	8007a3c <HAL_GetTick>
 8009b52:	4602      	mov	r2, r0
 8009b54:	69fb      	ldr	r3, [r7, #28]
 8009b56:	1ad3      	subs	r3, r2, r3
 8009b58:	68ba      	ldr	r2, [r7, #8]
 8009b5a:	429a      	cmp	r2, r3
 8009b5c:	d302      	bcc.n	8009b64 <I2C_IsErrorOccurred+0x54>
 8009b5e:	68bb      	ldr	r3, [r7, #8]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d147      	bne.n	8009bf4 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	685b      	ldr	r3, [r3, #4]
 8009b6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009b6e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009b76:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	699b      	ldr	r3, [r3, #24]
 8009b7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009b82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009b86:	d12e      	bne.n	8009be6 <I2C_IsErrorOccurred+0xd6>
 8009b88:	697b      	ldr	r3, [r7, #20]
 8009b8a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009b8e:	d02a      	beq.n	8009be6 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8009b90:	7cfb      	ldrb	r3, [r7, #19]
 8009b92:	2b20      	cmp	r3, #32
 8009b94:	d027      	beq.n	8009be6 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	685a      	ldr	r2, [r3, #4]
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009ba4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8009ba6:	f7fd ff49 	bl	8007a3c <HAL_GetTick>
 8009baa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009bac:	e01b      	b.n	8009be6 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009bae:	f7fd ff45 	bl	8007a3c <HAL_GetTick>
 8009bb2:	4602      	mov	r2, r0
 8009bb4:	69fb      	ldr	r3, [r7, #28]
 8009bb6:	1ad3      	subs	r3, r2, r3
 8009bb8:	2b19      	cmp	r3, #25
 8009bba:	d914      	bls.n	8009be6 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bc0:	f043 0220 	orr.w	r2, r3, #32
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	2220      	movs	r2, #32
 8009bcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	2200      	movs	r2, #0
 8009bdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8009be0:	2301      	movs	r3, #1
 8009be2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	699b      	ldr	r3, [r3, #24]
 8009bec:	f003 0320 	and.w	r3, r3, #32
 8009bf0:	2b20      	cmp	r3, #32
 8009bf2:	d1dc      	bne.n	8009bae <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	699b      	ldr	r3, [r3, #24]
 8009bfa:	f003 0320 	and.w	r3, r3, #32
 8009bfe:	2b20      	cmp	r3, #32
 8009c00:	d003      	beq.n	8009c0a <I2C_IsErrorOccurred+0xfa>
 8009c02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d09d      	beq.n	8009b46 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009c0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d103      	bne.n	8009c1a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	2220      	movs	r2, #32
 8009c18:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009c1a:	6a3b      	ldr	r3, [r7, #32]
 8009c1c:	f043 0304 	orr.w	r3, r3, #4
 8009c20:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8009c22:	2301      	movs	r3, #1
 8009c24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	699b      	ldr	r3, [r3, #24]
 8009c2e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009c30:	69bb      	ldr	r3, [r7, #24]
 8009c32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d00b      	beq.n	8009c52 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009c3a:	6a3b      	ldr	r3, [r7, #32]
 8009c3c:	f043 0301 	orr.w	r3, r3, #1
 8009c40:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009c4a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009c4c:	2301      	movs	r3, #1
 8009c4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009c52:	69bb      	ldr	r3, [r7, #24]
 8009c54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d00b      	beq.n	8009c74 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009c5c:	6a3b      	ldr	r3, [r7, #32]
 8009c5e:	f043 0308 	orr.w	r3, r3, #8
 8009c62:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009c6c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009c6e:	2301      	movs	r3, #1
 8009c70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009c74:	69bb      	ldr	r3, [r7, #24]
 8009c76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d00b      	beq.n	8009c96 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009c7e:	6a3b      	ldr	r3, [r7, #32]
 8009c80:	f043 0302 	orr.w	r3, r3, #2
 8009c84:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009c8e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009c90:	2301      	movs	r3, #1
 8009c92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8009c96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d01c      	beq.n	8009cd8 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009c9e:	68f8      	ldr	r0, [r7, #12]
 8009ca0:	f7ff fe37 	bl	8009912 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	6859      	ldr	r1, [r3, #4]
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	681a      	ldr	r2, [r3, #0]
 8009cae:	4b0d      	ldr	r3, [pc, #52]	; (8009ce4 <I2C_IsErrorOccurred+0x1d4>)
 8009cb0:	400b      	ands	r3, r1
 8009cb2:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009cb8:	6a3b      	ldr	r3, [r7, #32]
 8009cba:	431a      	orrs	r2, r3
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	2220      	movs	r2, #32
 8009cc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	2200      	movs	r2, #0
 8009ccc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8009cd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009cdc:	4618      	mov	r0, r3
 8009cde:	3728      	adds	r7, #40	; 0x28
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	bd80      	pop	{r7, pc}
 8009ce4:	fe00e800 	.word	0xfe00e800

08009ce8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009ce8:	b480      	push	{r7}
 8009cea:	b087      	sub	sp, #28
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	60f8      	str	r0, [r7, #12]
 8009cf0:	607b      	str	r3, [r7, #4]
 8009cf2:	460b      	mov	r3, r1
 8009cf4:	817b      	strh	r3, [r7, #10]
 8009cf6:	4613      	mov	r3, r2
 8009cf8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009cfa:	897b      	ldrh	r3, [r7, #10]
 8009cfc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009d00:	7a7b      	ldrb	r3, [r7, #9]
 8009d02:	041b      	lsls	r3, r3, #16
 8009d04:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009d08:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009d0e:	6a3b      	ldr	r3, [r7, #32]
 8009d10:	4313      	orrs	r3, r2
 8009d12:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009d16:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	685a      	ldr	r2, [r3, #4]
 8009d1e:	6a3b      	ldr	r3, [r7, #32]
 8009d20:	0d5b      	lsrs	r3, r3, #21
 8009d22:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8009d26:	4b08      	ldr	r3, [pc, #32]	; (8009d48 <I2C_TransferConfig+0x60>)
 8009d28:	430b      	orrs	r3, r1
 8009d2a:	43db      	mvns	r3, r3
 8009d2c:	ea02 0103 	and.w	r1, r2, r3
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	697a      	ldr	r2, [r7, #20]
 8009d36:	430a      	orrs	r2, r1
 8009d38:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009d3a:	bf00      	nop
 8009d3c:	371c      	adds	r7, #28
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d44:	4770      	bx	lr
 8009d46:	bf00      	nop
 8009d48:	03ff63ff 	.word	0x03ff63ff

08009d4c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8009d4c:	b480      	push	{r7}
 8009d4e:	b085      	sub	sp, #20
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
 8009d54:	460b      	mov	r3, r1
 8009d56:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8009d58:	2300      	movs	r3, #0
 8009d5a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8009d5c:	887b      	ldrh	r3, [r7, #2]
 8009d5e:	f003 0301 	and.w	r3, r3, #1
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d00f      	beq.n	8009d86 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8009d6c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009d74:	b2db      	uxtb	r3, r3
 8009d76:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009d7a:	2b28      	cmp	r3, #40	; 0x28
 8009d7c:	d003      	beq.n	8009d86 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8009d84:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8009d86:	887b      	ldrh	r3, [r7, #2]
 8009d88:	f003 0302 	and.w	r3, r3, #2
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d00f      	beq.n	8009db0 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8009d96:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009d9e:	b2db      	uxtb	r3, r3
 8009da0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009da4:	2b28      	cmp	r3, #40	; 0x28
 8009da6:	d003      	beq.n	8009db0 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8009dae:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8009db0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	da03      	bge.n	8009dc0 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8009dbe:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8009dc0:	887b      	ldrh	r3, [r7, #2]
 8009dc2:	2b10      	cmp	r3, #16
 8009dc4:	d103      	bne.n	8009dce <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8009dcc:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8009dce:	887b      	ldrh	r3, [r7, #2]
 8009dd0:	2b20      	cmp	r3, #32
 8009dd2:	d103      	bne.n	8009ddc <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	f043 0320 	orr.w	r3, r3, #32
 8009dda:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8009ddc:	887b      	ldrh	r3, [r7, #2]
 8009dde:	2b40      	cmp	r3, #64	; 0x40
 8009de0:	d103      	bne.n	8009dea <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009de8:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	6819      	ldr	r1, [r3, #0]
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	43da      	mvns	r2, r3
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	400a      	ands	r2, r1
 8009dfa:	601a      	str	r2, [r3, #0]
}
 8009dfc:	bf00      	nop
 8009dfe:	3714      	adds	r7, #20
 8009e00:	46bd      	mov	sp, r7
 8009e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e06:	4770      	bx	lr

08009e08 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009e08:	b480      	push	{r7}
 8009e0a:	b083      	sub	sp, #12
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
 8009e10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009e18:	b2db      	uxtb	r3, r3
 8009e1a:	2b20      	cmp	r3, #32
 8009e1c:	d138      	bne.n	8009e90 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009e24:	2b01      	cmp	r3, #1
 8009e26:	d101      	bne.n	8009e2c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009e28:	2302      	movs	r3, #2
 8009e2a:	e032      	b.n	8009e92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2201      	movs	r2, #1
 8009e30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	2224      	movs	r2, #36	; 0x24
 8009e38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	681a      	ldr	r2, [r3, #0]
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	f022 0201 	bic.w	r2, r2, #1
 8009e4a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	681a      	ldr	r2, [r3, #0]
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009e5a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	6819      	ldr	r1, [r3, #0]
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	683a      	ldr	r2, [r7, #0]
 8009e68:	430a      	orrs	r2, r1
 8009e6a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	681a      	ldr	r2, [r3, #0]
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	f042 0201 	orr.w	r2, r2, #1
 8009e7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2220      	movs	r2, #32
 8009e80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2200      	movs	r2, #0
 8009e88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	e000      	b.n	8009e92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009e90:	2302      	movs	r3, #2
  }
}
 8009e92:	4618      	mov	r0, r3
 8009e94:	370c      	adds	r7, #12
 8009e96:	46bd      	mov	sp, r7
 8009e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9c:	4770      	bx	lr

08009e9e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009e9e:	b480      	push	{r7}
 8009ea0:	b085      	sub	sp, #20
 8009ea2:	af00      	add	r7, sp, #0
 8009ea4:	6078      	str	r0, [r7, #4]
 8009ea6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009eae:	b2db      	uxtb	r3, r3
 8009eb0:	2b20      	cmp	r3, #32
 8009eb2:	d139      	bne.n	8009f28 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009eba:	2b01      	cmp	r3, #1
 8009ebc:	d101      	bne.n	8009ec2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009ebe:	2302      	movs	r3, #2
 8009ec0:	e033      	b.n	8009f2a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	2201      	movs	r2, #1
 8009ec6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	2224      	movs	r2, #36	; 0x24
 8009ece:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	681a      	ldr	r2, [r3, #0]
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	f022 0201 	bic.w	r2, r2, #1
 8009ee0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009ef0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009ef2:	683b      	ldr	r3, [r7, #0]
 8009ef4:	021b      	lsls	r3, r3, #8
 8009ef6:	68fa      	ldr	r2, [r7, #12]
 8009ef8:	4313      	orrs	r3, r2
 8009efa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	68fa      	ldr	r2, [r7, #12]
 8009f02:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	681a      	ldr	r2, [r3, #0]
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	f042 0201 	orr.w	r2, r2, #1
 8009f12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2220      	movs	r2, #32
 8009f18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2200      	movs	r2, #0
 8009f20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009f24:	2300      	movs	r3, #0
 8009f26:	e000      	b.n	8009f2a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009f28:	2302      	movs	r3, #2
  }
}
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	3714      	adds	r7, #20
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f34:	4770      	bx	lr
	...

08009f38 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8009f38:	b480      	push	{r7}
 8009f3a:	b085      	sub	sp, #20
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009f40:	4b0b      	ldr	r3, [pc, #44]	; (8009f70 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8009f42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009f44:	4a0a      	ldr	r2, [pc, #40]	; (8009f70 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8009f46:	f043 0301 	orr.w	r3, r3, #1
 8009f4a:	6613      	str	r3, [r2, #96]	; 0x60
 8009f4c:	4b08      	ldr	r3, [pc, #32]	; (8009f70 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8009f4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009f50:	f003 0301 	and.w	r3, r3, #1
 8009f54:	60fb      	str	r3, [r7, #12]
 8009f56:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8009f58:	4b06      	ldr	r3, [pc, #24]	; (8009f74 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8009f5a:	685a      	ldr	r2, [r3, #4]
 8009f5c:	4905      	ldr	r1, [pc, #20]	; (8009f74 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	4313      	orrs	r3, r2
 8009f62:	604b      	str	r3, [r1, #4]
}
 8009f64:	bf00      	nop
 8009f66:	3714      	adds	r7, #20
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6e:	4770      	bx	lr
 8009f70:	40021000 	.word	0x40021000
 8009f74:	40010000 	.word	0x40010000

08009f78 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b082      	sub	sp, #8
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
 8009f80:	460b      	mov	r3, r1
 8009f82:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d10c      	bne.n	8009fa4 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8009f8a:	4b13      	ldr	r3, [pc, #76]	; (8009fd8 <HAL_PWR_EnterSLEEPMode+0x60>)
 8009f8c:	695b      	ldr	r3, [r3, #20]
 8009f8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009f92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f96:	d10e      	bne.n	8009fb6 <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8009f98:	f000 f8b6 	bl	800a108 <HAL_PWREx_DisableLowPowerRunMode>
 8009f9c:	4603      	mov	r3, r0
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d009      	beq.n	8009fb6 <HAL_PWR_EnterSLEEPMode+0x3e>
      {
        return ;
 8009fa2:	e016      	b.n	8009fd2 <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF) == RESET)
 8009fa4:	4b0c      	ldr	r3, [pc, #48]	; (8009fd8 <HAL_PWR_EnterSLEEPMode+0x60>)
 8009fa6:	695b      	ldr	r3, [r3, #20]
 8009fa8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009fac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009fb0:	d001      	beq.n	8009fb6 <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8009fb2:	f000 f899 	bl	800a0e8 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8009fb6:	4b09      	ldr	r3, [pc, #36]	; (8009fdc <HAL_PWR_EnterSLEEPMode+0x64>)
 8009fb8:	691b      	ldr	r3, [r3, #16]
 8009fba:	4a08      	ldr	r2, [pc, #32]	; (8009fdc <HAL_PWR_EnterSLEEPMode+0x64>)
 8009fbc:	f023 0304 	bic.w	r3, r3, #4
 8009fc0:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8009fc2:	78fb      	ldrb	r3, [r7, #3]
 8009fc4:	2b01      	cmp	r3, #1
 8009fc6:	d101      	bne.n	8009fcc <HAL_PWR_EnterSLEEPMode+0x54>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8009fc8:	bf30      	wfi
 8009fca:	e002      	b.n	8009fd2 <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8009fcc:	bf40      	sev
    __WFE();
 8009fce:	bf20      	wfe
    __WFE();
 8009fd0:	bf20      	wfe
  }

}
 8009fd2:	3708      	adds	r7, #8
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	bd80      	pop	{r7, pc}
 8009fd8:	40007000 	.word	0x40007000
 8009fdc:	e000ed00 	.word	0xe000ed00

08009fe0 <HAL_PWR_EnableSleepOnExit>:
  *       Setting this bit is useful when the processor is expected to run only on
  *       interruptions handling.
  * @retval None
  */
void HAL_PWR_EnableSleepOnExit(void)
{
 8009fe0:	b480      	push	{r7}
 8009fe2:	af00      	add	r7, sp, #0
  /* Set SLEEPONEXIT bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8009fe4:	4b05      	ldr	r3, [pc, #20]	; (8009ffc <HAL_PWR_EnableSleepOnExit+0x1c>)
 8009fe6:	691b      	ldr	r3, [r3, #16]
 8009fe8:	4a04      	ldr	r2, [pc, #16]	; (8009ffc <HAL_PWR_EnableSleepOnExit+0x1c>)
 8009fea:	f043 0302 	orr.w	r3, r3, #2
 8009fee:	6113      	str	r3, [r2, #16]
}
 8009ff0:	bf00      	nop
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff8:	4770      	bx	lr
 8009ffa:	bf00      	nop
 8009ffc:	e000ed00 	.word	0xe000ed00

0800a000 <HAL_PWR_DisableSleepOnExit>:
  * @note Clear SLEEPONEXIT bit of SCR register. When this bit is set, the processor
  *       re-enters SLEEP mode when an interruption handling is over.
  * @retval None
  */
void HAL_PWR_DisableSleepOnExit(void)
{
 800a000:	b480      	push	{r7}
 800a002:	af00      	add	r7, sp, #0
  /* Clear SLEEPONEXIT bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 800a004:	4b05      	ldr	r3, [pc, #20]	; (800a01c <HAL_PWR_DisableSleepOnExit+0x1c>)
 800a006:	691b      	ldr	r3, [r3, #16]
 800a008:	4a04      	ldr	r2, [pc, #16]	; (800a01c <HAL_PWR_DisableSleepOnExit+0x1c>)
 800a00a:	f023 0302 	bic.w	r3, r3, #2
 800a00e:	6113      	str	r3, [r2, #16]
}
 800a010:	bf00      	nop
 800a012:	46bd      	mov	sp, r7
 800a014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a018:	4770      	bx	lr
 800a01a:	bf00      	nop
 800a01c:	e000ed00 	.word	0xe000ed00

0800a020 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800a020:	b480      	push	{r7}
 800a022:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800a024:	4b04      	ldr	r3, [pc, #16]	; (800a038 <HAL_PWREx_GetVoltageRange+0x18>)
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800a02c:	4618      	mov	r0, r3
 800a02e:	46bd      	mov	sp, r7
 800a030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a034:	4770      	bx	lr
 800a036:	bf00      	nop
 800a038:	40007000 	.word	0x40007000

0800a03c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800a03c:	b480      	push	{r7}
 800a03e:	b085      	sub	sp, #20
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a04a:	d130      	bne.n	800a0ae <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800a04c:	4b23      	ldr	r3, [pc, #140]	; (800a0dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a054:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a058:	d038      	beq.n	800a0cc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800a05a:	4b20      	ldr	r3, [pc, #128]	; (800a0dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a062:	4a1e      	ldr	r2, [pc, #120]	; (800a0dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a064:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a068:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800a06a:	4b1d      	ldr	r3, [pc, #116]	; (800a0e0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	2232      	movs	r2, #50	; 0x32
 800a070:	fb02 f303 	mul.w	r3, r2, r3
 800a074:	4a1b      	ldr	r2, [pc, #108]	; (800a0e4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800a076:	fba2 2303 	umull	r2, r3, r2, r3
 800a07a:	0c9b      	lsrs	r3, r3, #18
 800a07c:	3301      	adds	r3, #1
 800a07e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a080:	e002      	b.n	800a088 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	3b01      	subs	r3, #1
 800a086:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a088:	4b14      	ldr	r3, [pc, #80]	; (800a0dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a08a:	695b      	ldr	r3, [r3, #20]
 800a08c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a090:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a094:	d102      	bne.n	800a09c <HAL_PWREx_ControlVoltageScaling+0x60>
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d1f2      	bne.n	800a082 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a09c:	4b0f      	ldr	r3, [pc, #60]	; (800a0dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a09e:	695b      	ldr	r3, [r3, #20]
 800a0a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a0a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a0a8:	d110      	bne.n	800a0cc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800a0aa:	2303      	movs	r3, #3
 800a0ac:	e00f      	b.n	800a0ce <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800a0ae:	4b0b      	ldr	r3, [pc, #44]	; (800a0dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a0b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a0ba:	d007      	beq.n	800a0cc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800a0bc:	4b07      	ldr	r3, [pc, #28]	; (800a0dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a0c4:	4a05      	ldr	r2, [pc, #20]	; (800a0dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a0c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a0ca:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800a0cc:	2300      	movs	r3, #0
}
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	3714      	adds	r7, #20
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d8:	4770      	bx	lr
 800a0da:	bf00      	nop
 800a0dc:	40007000 	.word	0x40007000
 800a0e0:	20000228 	.word	0x20000228
 800a0e4:	431bde83 	.word	0x431bde83

0800a0e8 <HAL_PWREx_EnableLowPowerRunMode>:
  *        Setting RUN_PD in FLASH_ACR then appropriately reducing the clock frequency must
  *        be done before calling HAL_PWREx_EnableLowPowerRunMode() API.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 800a0e8:	b480      	push	{r7}
 800a0ea:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 800a0ec:	4b05      	ldr	r3, [pc, #20]	; (800a104 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	4a04      	ldr	r2, [pc, #16]	; (800a104 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 800a0f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a0f6:	6013      	str	r3, [r2, #0]
}
 800a0f8:	bf00      	nop
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a100:	4770      	bx	lr
 800a102:	bf00      	nop
 800a104:	40007000 	.word	0x40007000

0800a108 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 800a108:	b480      	push	{r7}
 800a10a:	b083      	sub	sp, #12
 800a10c:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 800a10e:	4b17      	ldr	r3, [pc, #92]	; (800a16c <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	4a16      	ldr	r2, [pc, #88]	; (800a16c <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800a114:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a118:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800a11a:	4b15      	ldr	r3, [pc, #84]	; (800a170 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	2232      	movs	r2, #50	; 0x32
 800a120:	fb02 f303 	mul.w	r3, r2, r3
 800a124:	4a13      	ldr	r2, [pc, #76]	; (800a174 <HAL_PWREx_DisableLowPowerRunMode+0x6c>)
 800a126:	fba2 2303 	umull	r2, r3, r2, r3
 800a12a:	0c9b      	lsrs	r3, r3, #18
 800a12c:	3301      	adds	r3, #1
 800a12e:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800a130:	e002      	b.n	800a138 <HAL_PWREx_DisableLowPowerRunMode+0x30>
  {
    wait_loop_index--;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	3b01      	subs	r3, #1
 800a136:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800a138:	4b0c      	ldr	r3, [pc, #48]	; (800a16c <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800a13a:	695b      	ldr	r3, [r3, #20]
 800a13c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a140:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a144:	d102      	bne.n	800a14c <HAL_PWREx_DisableLowPowerRunMode+0x44>
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d1f2      	bne.n	800a132 <HAL_PWREx_DisableLowPowerRunMode+0x2a>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 800a14c:	4b07      	ldr	r3, [pc, #28]	; (800a16c <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800a14e:	695b      	ldr	r3, [r3, #20]
 800a150:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a154:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a158:	d101      	bne.n	800a15e <HAL_PWREx_DisableLowPowerRunMode+0x56>
  {
    return HAL_TIMEOUT;
 800a15a:	2303      	movs	r3, #3
 800a15c:	e000      	b.n	800a160 <HAL_PWREx_DisableLowPowerRunMode+0x58>
  }

  return HAL_OK;
 800a15e:	2300      	movs	r3, #0
}
 800a160:	4618      	mov	r0, r3
 800a162:	370c      	adds	r7, #12
 800a164:	46bd      	mov	sp, r7
 800a166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16a:	4770      	bx	lr
 800a16c:	40007000 	.word	0x40007000
 800a170:	20000228 	.word	0x20000228
 800a174:	431bde83 	.word	0x431bde83

0800a178 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b088      	sub	sp, #32
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d101      	bne.n	800a18a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a186:	2301      	movs	r3, #1
 800a188:	e3ca      	b.n	800a920 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a18a:	4b97      	ldr	r3, [pc, #604]	; (800a3e8 <HAL_RCC_OscConfig+0x270>)
 800a18c:	689b      	ldr	r3, [r3, #8]
 800a18e:	f003 030c 	and.w	r3, r3, #12
 800a192:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a194:	4b94      	ldr	r3, [pc, #592]	; (800a3e8 <HAL_RCC_OscConfig+0x270>)
 800a196:	68db      	ldr	r3, [r3, #12]
 800a198:	f003 0303 	and.w	r3, r3, #3
 800a19c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	f003 0310 	and.w	r3, r3, #16
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	f000 80e4 	beq.w	800a374 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800a1ac:	69bb      	ldr	r3, [r7, #24]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d007      	beq.n	800a1c2 <HAL_RCC_OscConfig+0x4a>
 800a1b2:	69bb      	ldr	r3, [r7, #24]
 800a1b4:	2b0c      	cmp	r3, #12
 800a1b6:	f040 808b 	bne.w	800a2d0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800a1ba:	697b      	ldr	r3, [r7, #20]
 800a1bc:	2b01      	cmp	r3, #1
 800a1be:	f040 8087 	bne.w	800a2d0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800a1c2:	4b89      	ldr	r3, [pc, #548]	; (800a3e8 <HAL_RCC_OscConfig+0x270>)
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	f003 0302 	and.w	r3, r3, #2
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d005      	beq.n	800a1da <HAL_RCC_OscConfig+0x62>
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	699b      	ldr	r3, [r3, #24]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d101      	bne.n	800a1da <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800a1d6:	2301      	movs	r3, #1
 800a1d8:	e3a2      	b.n	800a920 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	6a1a      	ldr	r2, [r3, #32]
 800a1de:	4b82      	ldr	r3, [pc, #520]	; (800a3e8 <HAL_RCC_OscConfig+0x270>)
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	f003 0308 	and.w	r3, r3, #8
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d004      	beq.n	800a1f4 <HAL_RCC_OscConfig+0x7c>
 800a1ea:	4b7f      	ldr	r3, [pc, #508]	; (800a3e8 <HAL_RCC_OscConfig+0x270>)
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a1f2:	e005      	b.n	800a200 <HAL_RCC_OscConfig+0x88>
 800a1f4:	4b7c      	ldr	r3, [pc, #496]	; (800a3e8 <HAL_RCC_OscConfig+0x270>)
 800a1f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a1fa:	091b      	lsrs	r3, r3, #4
 800a1fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a200:	4293      	cmp	r3, r2
 800a202:	d223      	bcs.n	800a24c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	6a1b      	ldr	r3, [r3, #32]
 800a208:	4618      	mov	r0, r3
 800a20a:	f000 fd55 	bl	800acb8 <RCC_SetFlashLatencyFromMSIRange>
 800a20e:	4603      	mov	r3, r0
 800a210:	2b00      	cmp	r3, #0
 800a212:	d001      	beq.n	800a218 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800a214:	2301      	movs	r3, #1
 800a216:	e383      	b.n	800a920 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a218:	4b73      	ldr	r3, [pc, #460]	; (800a3e8 <HAL_RCC_OscConfig+0x270>)
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	4a72      	ldr	r2, [pc, #456]	; (800a3e8 <HAL_RCC_OscConfig+0x270>)
 800a21e:	f043 0308 	orr.w	r3, r3, #8
 800a222:	6013      	str	r3, [r2, #0]
 800a224:	4b70      	ldr	r3, [pc, #448]	; (800a3e8 <HAL_RCC_OscConfig+0x270>)
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	6a1b      	ldr	r3, [r3, #32]
 800a230:	496d      	ldr	r1, [pc, #436]	; (800a3e8 <HAL_RCC_OscConfig+0x270>)
 800a232:	4313      	orrs	r3, r2
 800a234:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a236:	4b6c      	ldr	r3, [pc, #432]	; (800a3e8 <HAL_RCC_OscConfig+0x270>)
 800a238:	685b      	ldr	r3, [r3, #4]
 800a23a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	69db      	ldr	r3, [r3, #28]
 800a242:	021b      	lsls	r3, r3, #8
 800a244:	4968      	ldr	r1, [pc, #416]	; (800a3e8 <HAL_RCC_OscConfig+0x270>)
 800a246:	4313      	orrs	r3, r2
 800a248:	604b      	str	r3, [r1, #4]
 800a24a:	e025      	b.n	800a298 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a24c:	4b66      	ldr	r3, [pc, #408]	; (800a3e8 <HAL_RCC_OscConfig+0x270>)
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	4a65      	ldr	r2, [pc, #404]	; (800a3e8 <HAL_RCC_OscConfig+0x270>)
 800a252:	f043 0308 	orr.w	r3, r3, #8
 800a256:	6013      	str	r3, [r2, #0]
 800a258:	4b63      	ldr	r3, [pc, #396]	; (800a3e8 <HAL_RCC_OscConfig+0x270>)
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	6a1b      	ldr	r3, [r3, #32]
 800a264:	4960      	ldr	r1, [pc, #384]	; (800a3e8 <HAL_RCC_OscConfig+0x270>)
 800a266:	4313      	orrs	r3, r2
 800a268:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a26a:	4b5f      	ldr	r3, [pc, #380]	; (800a3e8 <HAL_RCC_OscConfig+0x270>)
 800a26c:	685b      	ldr	r3, [r3, #4]
 800a26e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	69db      	ldr	r3, [r3, #28]
 800a276:	021b      	lsls	r3, r3, #8
 800a278:	495b      	ldr	r1, [pc, #364]	; (800a3e8 <HAL_RCC_OscConfig+0x270>)
 800a27a:	4313      	orrs	r3, r2
 800a27c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800a27e:	69bb      	ldr	r3, [r7, #24]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d109      	bne.n	800a298 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	6a1b      	ldr	r3, [r3, #32]
 800a288:	4618      	mov	r0, r3
 800a28a:	f000 fd15 	bl	800acb8 <RCC_SetFlashLatencyFromMSIRange>
 800a28e:	4603      	mov	r3, r0
 800a290:	2b00      	cmp	r3, #0
 800a292:	d001      	beq.n	800a298 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800a294:	2301      	movs	r3, #1
 800a296:	e343      	b.n	800a920 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800a298:	f000 fc4a 	bl	800ab30 <HAL_RCC_GetSysClockFreq>
 800a29c:	4602      	mov	r2, r0
 800a29e:	4b52      	ldr	r3, [pc, #328]	; (800a3e8 <HAL_RCC_OscConfig+0x270>)
 800a2a0:	689b      	ldr	r3, [r3, #8]
 800a2a2:	091b      	lsrs	r3, r3, #4
 800a2a4:	f003 030f 	and.w	r3, r3, #15
 800a2a8:	4950      	ldr	r1, [pc, #320]	; (800a3ec <HAL_RCC_OscConfig+0x274>)
 800a2aa:	5ccb      	ldrb	r3, [r1, r3]
 800a2ac:	f003 031f 	and.w	r3, r3, #31
 800a2b0:	fa22 f303 	lsr.w	r3, r2, r3
 800a2b4:	4a4e      	ldr	r2, [pc, #312]	; (800a3f0 <HAL_RCC_OscConfig+0x278>)
 800a2b6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800a2b8:	4b4e      	ldr	r3, [pc, #312]	; (800a3f4 <HAL_RCC_OscConfig+0x27c>)
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	4618      	mov	r0, r3
 800a2be:	f7fd fb6d 	bl	800799c <HAL_InitTick>
 800a2c2:	4603      	mov	r3, r0
 800a2c4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800a2c6:	7bfb      	ldrb	r3, [r7, #15]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d052      	beq.n	800a372 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800a2cc:	7bfb      	ldrb	r3, [r7, #15]
 800a2ce:	e327      	b.n	800a920 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	699b      	ldr	r3, [r3, #24]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d032      	beq.n	800a33e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800a2d8:	4b43      	ldr	r3, [pc, #268]	; (800a3e8 <HAL_RCC_OscConfig+0x270>)
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	4a42      	ldr	r2, [pc, #264]	; (800a3e8 <HAL_RCC_OscConfig+0x270>)
 800a2de:	f043 0301 	orr.w	r3, r3, #1
 800a2e2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800a2e4:	f7fd fbaa 	bl	8007a3c <HAL_GetTick>
 800a2e8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800a2ea:	e008      	b.n	800a2fe <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a2ec:	f7fd fba6 	bl	8007a3c <HAL_GetTick>
 800a2f0:	4602      	mov	r2, r0
 800a2f2:	693b      	ldr	r3, [r7, #16]
 800a2f4:	1ad3      	subs	r3, r2, r3
 800a2f6:	2b02      	cmp	r3, #2
 800a2f8:	d901      	bls.n	800a2fe <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800a2fa:	2303      	movs	r3, #3
 800a2fc:	e310      	b.n	800a920 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800a2fe:	4b3a      	ldr	r3, [pc, #232]	; (800a3e8 <HAL_RCC_OscConfig+0x270>)
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	f003 0302 	and.w	r3, r3, #2
 800a306:	2b00      	cmp	r3, #0
 800a308:	d0f0      	beq.n	800a2ec <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a30a:	4b37      	ldr	r3, [pc, #220]	; (800a3e8 <HAL_RCC_OscConfig+0x270>)
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	4a36      	ldr	r2, [pc, #216]	; (800a3e8 <HAL_RCC_OscConfig+0x270>)
 800a310:	f043 0308 	orr.w	r3, r3, #8
 800a314:	6013      	str	r3, [r2, #0]
 800a316:	4b34      	ldr	r3, [pc, #208]	; (800a3e8 <HAL_RCC_OscConfig+0x270>)
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	6a1b      	ldr	r3, [r3, #32]
 800a322:	4931      	ldr	r1, [pc, #196]	; (800a3e8 <HAL_RCC_OscConfig+0x270>)
 800a324:	4313      	orrs	r3, r2
 800a326:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a328:	4b2f      	ldr	r3, [pc, #188]	; (800a3e8 <HAL_RCC_OscConfig+0x270>)
 800a32a:	685b      	ldr	r3, [r3, #4]
 800a32c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	69db      	ldr	r3, [r3, #28]
 800a334:	021b      	lsls	r3, r3, #8
 800a336:	492c      	ldr	r1, [pc, #176]	; (800a3e8 <HAL_RCC_OscConfig+0x270>)
 800a338:	4313      	orrs	r3, r2
 800a33a:	604b      	str	r3, [r1, #4]
 800a33c:	e01a      	b.n	800a374 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800a33e:	4b2a      	ldr	r3, [pc, #168]	; (800a3e8 <HAL_RCC_OscConfig+0x270>)
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	4a29      	ldr	r2, [pc, #164]	; (800a3e8 <HAL_RCC_OscConfig+0x270>)
 800a344:	f023 0301 	bic.w	r3, r3, #1
 800a348:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800a34a:	f7fd fb77 	bl	8007a3c <HAL_GetTick>
 800a34e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800a350:	e008      	b.n	800a364 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a352:	f7fd fb73 	bl	8007a3c <HAL_GetTick>
 800a356:	4602      	mov	r2, r0
 800a358:	693b      	ldr	r3, [r7, #16]
 800a35a:	1ad3      	subs	r3, r2, r3
 800a35c:	2b02      	cmp	r3, #2
 800a35e:	d901      	bls.n	800a364 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800a360:	2303      	movs	r3, #3
 800a362:	e2dd      	b.n	800a920 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800a364:	4b20      	ldr	r3, [pc, #128]	; (800a3e8 <HAL_RCC_OscConfig+0x270>)
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	f003 0302 	and.w	r3, r3, #2
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d1f0      	bne.n	800a352 <HAL_RCC_OscConfig+0x1da>
 800a370:	e000      	b.n	800a374 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800a372:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	f003 0301 	and.w	r3, r3, #1
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d074      	beq.n	800a46a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800a380:	69bb      	ldr	r3, [r7, #24]
 800a382:	2b08      	cmp	r3, #8
 800a384:	d005      	beq.n	800a392 <HAL_RCC_OscConfig+0x21a>
 800a386:	69bb      	ldr	r3, [r7, #24]
 800a388:	2b0c      	cmp	r3, #12
 800a38a:	d10e      	bne.n	800a3aa <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800a38c:	697b      	ldr	r3, [r7, #20]
 800a38e:	2b03      	cmp	r3, #3
 800a390:	d10b      	bne.n	800a3aa <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a392:	4b15      	ldr	r3, [pc, #84]	; (800a3e8 <HAL_RCC_OscConfig+0x270>)
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d064      	beq.n	800a468 <HAL_RCC_OscConfig+0x2f0>
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	685b      	ldr	r3, [r3, #4]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d160      	bne.n	800a468 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800a3a6:	2301      	movs	r3, #1
 800a3a8:	e2ba      	b.n	800a920 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	685b      	ldr	r3, [r3, #4]
 800a3ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a3b2:	d106      	bne.n	800a3c2 <HAL_RCC_OscConfig+0x24a>
 800a3b4:	4b0c      	ldr	r3, [pc, #48]	; (800a3e8 <HAL_RCC_OscConfig+0x270>)
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	4a0b      	ldr	r2, [pc, #44]	; (800a3e8 <HAL_RCC_OscConfig+0x270>)
 800a3ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a3be:	6013      	str	r3, [r2, #0]
 800a3c0:	e026      	b.n	800a410 <HAL_RCC_OscConfig+0x298>
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	685b      	ldr	r3, [r3, #4]
 800a3c6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a3ca:	d115      	bne.n	800a3f8 <HAL_RCC_OscConfig+0x280>
 800a3cc:	4b06      	ldr	r3, [pc, #24]	; (800a3e8 <HAL_RCC_OscConfig+0x270>)
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	4a05      	ldr	r2, [pc, #20]	; (800a3e8 <HAL_RCC_OscConfig+0x270>)
 800a3d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a3d6:	6013      	str	r3, [r2, #0]
 800a3d8:	4b03      	ldr	r3, [pc, #12]	; (800a3e8 <HAL_RCC_OscConfig+0x270>)
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	4a02      	ldr	r2, [pc, #8]	; (800a3e8 <HAL_RCC_OscConfig+0x270>)
 800a3de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a3e2:	6013      	str	r3, [r2, #0]
 800a3e4:	e014      	b.n	800a410 <HAL_RCC_OscConfig+0x298>
 800a3e6:	bf00      	nop
 800a3e8:	40021000 	.word	0x40021000
 800a3ec:	08015890 	.word	0x08015890
 800a3f0:	20000228 	.word	0x20000228
 800a3f4:	20000258 	.word	0x20000258
 800a3f8:	4ba0      	ldr	r3, [pc, #640]	; (800a67c <HAL_RCC_OscConfig+0x504>)
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	4a9f      	ldr	r2, [pc, #636]	; (800a67c <HAL_RCC_OscConfig+0x504>)
 800a3fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a402:	6013      	str	r3, [r2, #0]
 800a404:	4b9d      	ldr	r3, [pc, #628]	; (800a67c <HAL_RCC_OscConfig+0x504>)
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	4a9c      	ldr	r2, [pc, #624]	; (800a67c <HAL_RCC_OscConfig+0x504>)
 800a40a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a40e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	685b      	ldr	r3, [r3, #4]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d013      	beq.n	800a440 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a418:	f7fd fb10 	bl	8007a3c <HAL_GetTick>
 800a41c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a41e:	e008      	b.n	800a432 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a420:	f7fd fb0c 	bl	8007a3c <HAL_GetTick>
 800a424:	4602      	mov	r2, r0
 800a426:	693b      	ldr	r3, [r7, #16]
 800a428:	1ad3      	subs	r3, r2, r3
 800a42a:	2b64      	cmp	r3, #100	; 0x64
 800a42c:	d901      	bls.n	800a432 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800a42e:	2303      	movs	r3, #3
 800a430:	e276      	b.n	800a920 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a432:	4b92      	ldr	r3, [pc, #584]	; (800a67c <HAL_RCC_OscConfig+0x504>)
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d0f0      	beq.n	800a420 <HAL_RCC_OscConfig+0x2a8>
 800a43e:	e014      	b.n	800a46a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a440:	f7fd fafc 	bl	8007a3c <HAL_GetTick>
 800a444:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a446:	e008      	b.n	800a45a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a448:	f7fd faf8 	bl	8007a3c <HAL_GetTick>
 800a44c:	4602      	mov	r2, r0
 800a44e:	693b      	ldr	r3, [r7, #16]
 800a450:	1ad3      	subs	r3, r2, r3
 800a452:	2b64      	cmp	r3, #100	; 0x64
 800a454:	d901      	bls.n	800a45a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800a456:	2303      	movs	r3, #3
 800a458:	e262      	b.n	800a920 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a45a:	4b88      	ldr	r3, [pc, #544]	; (800a67c <HAL_RCC_OscConfig+0x504>)
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a462:	2b00      	cmp	r3, #0
 800a464:	d1f0      	bne.n	800a448 <HAL_RCC_OscConfig+0x2d0>
 800a466:	e000      	b.n	800a46a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a468:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	f003 0302 	and.w	r3, r3, #2
 800a472:	2b00      	cmp	r3, #0
 800a474:	d060      	beq.n	800a538 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800a476:	69bb      	ldr	r3, [r7, #24]
 800a478:	2b04      	cmp	r3, #4
 800a47a:	d005      	beq.n	800a488 <HAL_RCC_OscConfig+0x310>
 800a47c:	69bb      	ldr	r3, [r7, #24]
 800a47e:	2b0c      	cmp	r3, #12
 800a480:	d119      	bne.n	800a4b6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800a482:	697b      	ldr	r3, [r7, #20]
 800a484:	2b02      	cmp	r3, #2
 800a486:	d116      	bne.n	800a4b6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a488:	4b7c      	ldr	r3, [pc, #496]	; (800a67c <HAL_RCC_OscConfig+0x504>)
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a490:	2b00      	cmp	r3, #0
 800a492:	d005      	beq.n	800a4a0 <HAL_RCC_OscConfig+0x328>
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	68db      	ldr	r3, [r3, #12]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d101      	bne.n	800a4a0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800a49c:	2301      	movs	r3, #1
 800a49e:	e23f      	b.n	800a920 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a4a0:	4b76      	ldr	r3, [pc, #472]	; (800a67c <HAL_RCC_OscConfig+0x504>)
 800a4a2:	685b      	ldr	r3, [r3, #4]
 800a4a4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	691b      	ldr	r3, [r3, #16]
 800a4ac:	061b      	lsls	r3, r3, #24
 800a4ae:	4973      	ldr	r1, [pc, #460]	; (800a67c <HAL_RCC_OscConfig+0x504>)
 800a4b0:	4313      	orrs	r3, r2
 800a4b2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a4b4:	e040      	b.n	800a538 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	68db      	ldr	r3, [r3, #12]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d023      	beq.n	800a506 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a4be:	4b6f      	ldr	r3, [pc, #444]	; (800a67c <HAL_RCC_OscConfig+0x504>)
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	4a6e      	ldr	r2, [pc, #440]	; (800a67c <HAL_RCC_OscConfig+0x504>)
 800a4c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a4c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a4ca:	f7fd fab7 	bl	8007a3c <HAL_GetTick>
 800a4ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a4d0:	e008      	b.n	800a4e4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a4d2:	f7fd fab3 	bl	8007a3c <HAL_GetTick>
 800a4d6:	4602      	mov	r2, r0
 800a4d8:	693b      	ldr	r3, [r7, #16]
 800a4da:	1ad3      	subs	r3, r2, r3
 800a4dc:	2b02      	cmp	r3, #2
 800a4de:	d901      	bls.n	800a4e4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800a4e0:	2303      	movs	r3, #3
 800a4e2:	e21d      	b.n	800a920 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a4e4:	4b65      	ldr	r3, [pc, #404]	; (800a67c <HAL_RCC_OscConfig+0x504>)
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d0f0      	beq.n	800a4d2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a4f0:	4b62      	ldr	r3, [pc, #392]	; (800a67c <HAL_RCC_OscConfig+0x504>)
 800a4f2:	685b      	ldr	r3, [r3, #4]
 800a4f4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	691b      	ldr	r3, [r3, #16]
 800a4fc:	061b      	lsls	r3, r3, #24
 800a4fe:	495f      	ldr	r1, [pc, #380]	; (800a67c <HAL_RCC_OscConfig+0x504>)
 800a500:	4313      	orrs	r3, r2
 800a502:	604b      	str	r3, [r1, #4]
 800a504:	e018      	b.n	800a538 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a506:	4b5d      	ldr	r3, [pc, #372]	; (800a67c <HAL_RCC_OscConfig+0x504>)
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	4a5c      	ldr	r2, [pc, #368]	; (800a67c <HAL_RCC_OscConfig+0x504>)
 800a50c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a510:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a512:	f7fd fa93 	bl	8007a3c <HAL_GetTick>
 800a516:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a518:	e008      	b.n	800a52c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a51a:	f7fd fa8f 	bl	8007a3c <HAL_GetTick>
 800a51e:	4602      	mov	r2, r0
 800a520:	693b      	ldr	r3, [r7, #16]
 800a522:	1ad3      	subs	r3, r2, r3
 800a524:	2b02      	cmp	r3, #2
 800a526:	d901      	bls.n	800a52c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800a528:	2303      	movs	r3, #3
 800a52a:	e1f9      	b.n	800a920 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a52c:	4b53      	ldr	r3, [pc, #332]	; (800a67c <HAL_RCC_OscConfig+0x504>)
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a534:	2b00      	cmp	r3, #0
 800a536:	d1f0      	bne.n	800a51a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	f003 0308 	and.w	r3, r3, #8
 800a540:	2b00      	cmp	r3, #0
 800a542:	d03c      	beq.n	800a5be <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	695b      	ldr	r3, [r3, #20]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d01c      	beq.n	800a586 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a54c:	4b4b      	ldr	r3, [pc, #300]	; (800a67c <HAL_RCC_OscConfig+0x504>)
 800a54e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a552:	4a4a      	ldr	r2, [pc, #296]	; (800a67c <HAL_RCC_OscConfig+0x504>)
 800a554:	f043 0301 	orr.w	r3, r3, #1
 800a558:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a55c:	f7fd fa6e 	bl	8007a3c <HAL_GetTick>
 800a560:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a562:	e008      	b.n	800a576 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a564:	f7fd fa6a 	bl	8007a3c <HAL_GetTick>
 800a568:	4602      	mov	r2, r0
 800a56a:	693b      	ldr	r3, [r7, #16]
 800a56c:	1ad3      	subs	r3, r2, r3
 800a56e:	2b02      	cmp	r3, #2
 800a570:	d901      	bls.n	800a576 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800a572:	2303      	movs	r3, #3
 800a574:	e1d4      	b.n	800a920 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a576:	4b41      	ldr	r3, [pc, #260]	; (800a67c <HAL_RCC_OscConfig+0x504>)
 800a578:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a57c:	f003 0302 	and.w	r3, r3, #2
 800a580:	2b00      	cmp	r3, #0
 800a582:	d0ef      	beq.n	800a564 <HAL_RCC_OscConfig+0x3ec>
 800a584:	e01b      	b.n	800a5be <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a586:	4b3d      	ldr	r3, [pc, #244]	; (800a67c <HAL_RCC_OscConfig+0x504>)
 800a588:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a58c:	4a3b      	ldr	r2, [pc, #236]	; (800a67c <HAL_RCC_OscConfig+0x504>)
 800a58e:	f023 0301 	bic.w	r3, r3, #1
 800a592:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a596:	f7fd fa51 	bl	8007a3c <HAL_GetTick>
 800a59a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a59c:	e008      	b.n	800a5b0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a59e:	f7fd fa4d 	bl	8007a3c <HAL_GetTick>
 800a5a2:	4602      	mov	r2, r0
 800a5a4:	693b      	ldr	r3, [r7, #16]
 800a5a6:	1ad3      	subs	r3, r2, r3
 800a5a8:	2b02      	cmp	r3, #2
 800a5aa:	d901      	bls.n	800a5b0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800a5ac:	2303      	movs	r3, #3
 800a5ae:	e1b7      	b.n	800a920 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a5b0:	4b32      	ldr	r3, [pc, #200]	; (800a67c <HAL_RCC_OscConfig+0x504>)
 800a5b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a5b6:	f003 0302 	and.w	r3, r3, #2
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d1ef      	bne.n	800a59e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	f003 0304 	and.w	r3, r3, #4
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	f000 80a6 	beq.w	800a718 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800a5d0:	4b2a      	ldr	r3, [pc, #168]	; (800a67c <HAL_RCC_OscConfig+0x504>)
 800a5d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a5d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d10d      	bne.n	800a5f8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a5dc:	4b27      	ldr	r3, [pc, #156]	; (800a67c <HAL_RCC_OscConfig+0x504>)
 800a5de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a5e0:	4a26      	ldr	r2, [pc, #152]	; (800a67c <HAL_RCC_OscConfig+0x504>)
 800a5e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a5e6:	6593      	str	r3, [r2, #88]	; 0x58
 800a5e8:	4b24      	ldr	r3, [pc, #144]	; (800a67c <HAL_RCC_OscConfig+0x504>)
 800a5ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a5ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a5f0:	60bb      	str	r3, [r7, #8]
 800a5f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a5f4:	2301      	movs	r3, #1
 800a5f6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a5f8:	4b21      	ldr	r3, [pc, #132]	; (800a680 <HAL_RCC_OscConfig+0x508>)
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a600:	2b00      	cmp	r3, #0
 800a602:	d118      	bne.n	800a636 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a604:	4b1e      	ldr	r3, [pc, #120]	; (800a680 <HAL_RCC_OscConfig+0x508>)
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	4a1d      	ldr	r2, [pc, #116]	; (800a680 <HAL_RCC_OscConfig+0x508>)
 800a60a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a60e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a610:	f7fd fa14 	bl	8007a3c <HAL_GetTick>
 800a614:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a616:	e008      	b.n	800a62a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a618:	f7fd fa10 	bl	8007a3c <HAL_GetTick>
 800a61c:	4602      	mov	r2, r0
 800a61e:	693b      	ldr	r3, [r7, #16]
 800a620:	1ad3      	subs	r3, r2, r3
 800a622:	2b02      	cmp	r3, #2
 800a624:	d901      	bls.n	800a62a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800a626:	2303      	movs	r3, #3
 800a628:	e17a      	b.n	800a920 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a62a:	4b15      	ldr	r3, [pc, #84]	; (800a680 <HAL_RCC_OscConfig+0x508>)
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a632:	2b00      	cmp	r3, #0
 800a634:	d0f0      	beq.n	800a618 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	689b      	ldr	r3, [r3, #8]
 800a63a:	2b01      	cmp	r3, #1
 800a63c:	d108      	bne.n	800a650 <HAL_RCC_OscConfig+0x4d8>
 800a63e:	4b0f      	ldr	r3, [pc, #60]	; (800a67c <HAL_RCC_OscConfig+0x504>)
 800a640:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a644:	4a0d      	ldr	r2, [pc, #52]	; (800a67c <HAL_RCC_OscConfig+0x504>)
 800a646:	f043 0301 	orr.w	r3, r3, #1
 800a64a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a64e:	e029      	b.n	800a6a4 <HAL_RCC_OscConfig+0x52c>
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	689b      	ldr	r3, [r3, #8]
 800a654:	2b05      	cmp	r3, #5
 800a656:	d115      	bne.n	800a684 <HAL_RCC_OscConfig+0x50c>
 800a658:	4b08      	ldr	r3, [pc, #32]	; (800a67c <HAL_RCC_OscConfig+0x504>)
 800a65a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a65e:	4a07      	ldr	r2, [pc, #28]	; (800a67c <HAL_RCC_OscConfig+0x504>)
 800a660:	f043 0304 	orr.w	r3, r3, #4
 800a664:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a668:	4b04      	ldr	r3, [pc, #16]	; (800a67c <HAL_RCC_OscConfig+0x504>)
 800a66a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a66e:	4a03      	ldr	r2, [pc, #12]	; (800a67c <HAL_RCC_OscConfig+0x504>)
 800a670:	f043 0301 	orr.w	r3, r3, #1
 800a674:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a678:	e014      	b.n	800a6a4 <HAL_RCC_OscConfig+0x52c>
 800a67a:	bf00      	nop
 800a67c:	40021000 	.word	0x40021000
 800a680:	40007000 	.word	0x40007000
 800a684:	4b9c      	ldr	r3, [pc, #624]	; (800a8f8 <HAL_RCC_OscConfig+0x780>)
 800a686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a68a:	4a9b      	ldr	r2, [pc, #620]	; (800a8f8 <HAL_RCC_OscConfig+0x780>)
 800a68c:	f023 0301 	bic.w	r3, r3, #1
 800a690:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a694:	4b98      	ldr	r3, [pc, #608]	; (800a8f8 <HAL_RCC_OscConfig+0x780>)
 800a696:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a69a:	4a97      	ldr	r2, [pc, #604]	; (800a8f8 <HAL_RCC_OscConfig+0x780>)
 800a69c:	f023 0304 	bic.w	r3, r3, #4
 800a6a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	689b      	ldr	r3, [r3, #8]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d016      	beq.n	800a6da <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a6ac:	f7fd f9c6 	bl	8007a3c <HAL_GetTick>
 800a6b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a6b2:	e00a      	b.n	800a6ca <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a6b4:	f7fd f9c2 	bl	8007a3c <HAL_GetTick>
 800a6b8:	4602      	mov	r2, r0
 800a6ba:	693b      	ldr	r3, [r7, #16]
 800a6bc:	1ad3      	subs	r3, r2, r3
 800a6be:	f241 3288 	movw	r2, #5000	; 0x1388
 800a6c2:	4293      	cmp	r3, r2
 800a6c4:	d901      	bls.n	800a6ca <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800a6c6:	2303      	movs	r3, #3
 800a6c8:	e12a      	b.n	800a920 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a6ca:	4b8b      	ldr	r3, [pc, #556]	; (800a8f8 <HAL_RCC_OscConfig+0x780>)
 800a6cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a6d0:	f003 0302 	and.w	r3, r3, #2
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d0ed      	beq.n	800a6b4 <HAL_RCC_OscConfig+0x53c>
 800a6d8:	e015      	b.n	800a706 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a6da:	f7fd f9af 	bl	8007a3c <HAL_GetTick>
 800a6de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a6e0:	e00a      	b.n	800a6f8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a6e2:	f7fd f9ab 	bl	8007a3c <HAL_GetTick>
 800a6e6:	4602      	mov	r2, r0
 800a6e8:	693b      	ldr	r3, [r7, #16]
 800a6ea:	1ad3      	subs	r3, r2, r3
 800a6ec:	f241 3288 	movw	r2, #5000	; 0x1388
 800a6f0:	4293      	cmp	r3, r2
 800a6f2:	d901      	bls.n	800a6f8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800a6f4:	2303      	movs	r3, #3
 800a6f6:	e113      	b.n	800a920 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a6f8:	4b7f      	ldr	r3, [pc, #508]	; (800a8f8 <HAL_RCC_OscConfig+0x780>)
 800a6fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a6fe:	f003 0302 	and.w	r3, r3, #2
 800a702:	2b00      	cmp	r3, #0
 800a704:	d1ed      	bne.n	800a6e2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a706:	7ffb      	ldrb	r3, [r7, #31]
 800a708:	2b01      	cmp	r3, #1
 800a70a:	d105      	bne.n	800a718 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a70c:	4b7a      	ldr	r3, [pc, #488]	; (800a8f8 <HAL_RCC_OscConfig+0x780>)
 800a70e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a710:	4a79      	ldr	r2, [pc, #484]	; (800a8f8 <HAL_RCC_OscConfig+0x780>)
 800a712:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a716:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	f000 80fe 	beq.w	800a91e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a726:	2b02      	cmp	r3, #2
 800a728:	f040 80d0 	bne.w	800a8cc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800a72c:	4b72      	ldr	r3, [pc, #456]	; (800a8f8 <HAL_RCC_OscConfig+0x780>)
 800a72e:	68db      	ldr	r3, [r3, #12]
 800a730:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800a732:	697b      	ldr	r3, [r7, #20]
 800a734:	f003 0203 	and.w	r2, r3, #3
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a73c:	429a      	cmp	r2, r3
 800a73e:	d130      	bne.n	800a7a2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a740:	697b      	ldr	r3, [r7, #20]
 800a742:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a74a:	3b01      	subs	r3, #1
 800a74c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800a74e:	429a      	cmp	r2, r3
 800a750:	d127      	bne.n	800a7a2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a752:	697b      	ldr	r3, [r7, #20]
 800a754:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a75c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a75e:	429a      	cmp	r2, r3
 800a760:	d11f      	bne.n	800a7a2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800a762:	697b      	ldr	r3, [r7, #20]
 800a764:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a768:	687a      	ldr	r2, [r7, #4]
 800a76a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a76c:	2a07      	cmp	r2, #7
 800a76e:	bf14      	ite	ne
 800a770:	2201      	movne	r2, #1
 800a772:	2200      	moveq	r2, #0
 800a774:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a776:	4293      	cmp	r3, r2
 800a778:	d113      	bne.n	800a7a2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a77a:	697b      	ldr	r3, [r7, #20]
 800a77c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a784:	085b      	lsrs	r3, r3, #1
 800a786:	3b01      	subs	r3, #1
 800a788:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800a78a:	429a      	cmp	r2, r3
 800a78c:	d109      	bne.n	800a7a2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800a78e:	697b      	ldr	r3, [r7, #20]
 800a790:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a798:	085b      	lsrs	r3, r3, #1
 800a79a:	3b01      	subs	r3, #1
 800a79c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a79e:	429a      	cmp	r2, r3
 800a7a0:	d06e      	beq.n	800a880 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800a7a2:	69bb      	ldr	r3, [r7, #24]
 800a7a4:	2b0c      	cmp	r3, #12
 800a7a6:	d069      	beq.n	800a87c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800a7a8:	4b53      	ldr	r3, [pc, #332]	; (800a8f8 <HAL_RCC_OscConfig+0x780>)
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d105      	bne.n	800a7c0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800a7b4:	4b50      	ldr	r3, [pc, #320]	; (800a8f8 <HAL_RCC_OscConfig+0x780>)
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d001      	beq.n	800a7c4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800a7c0:	2301      	movs	r3, #1
 800a7c2:	e0ad      	b.n	800a920 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800a7c4:	4b4c      	ldr	r3, [pc, #304]	; (800a8f8 <HAL_RCC_OscConfig+0x780>)
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	4a4b      	ldr	r2, [pc, #300]	; (800a8f8 <HAL_RCC_OscConfig+0x780>)
 800a7ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a7ce:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800a7d0:	f7fd f934 	bl	8007a3c <HAL_GetTick>
 800a7d4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a7d6:	e008      	b.n	800a7ea <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a7d8:	f7fd f930 	bl	8007a3c <HAL_GetTick>
 800a7dc:	4602      	mov	r2, r0
 800a7de:	693b      	ldr	r3, [r7, #16]
 800a7e0:	1ad3      	subs	r3, r2, r3
 800a7e2:	2b02      	cmp	r3, #2
 800a7e4:	d901      	bls.n	800a7ea <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800a7e6:	2303      	movs	r3, #3
 800a7e8:	e09a      	b.n	800a920 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a7ea:	4b43      	ldr	r3, [pc, #268]	; (800a8f8 <HAL_RCC_OscConfig+0x780>)
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d1f0      	bne.n	800a7d8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a7f6:	4b40      	ldr	r3, [pc, #256]	; (800a8f8 <HAL_RCC_OscConfig+0x780>)
 800a7f8:	68da      	ldr	r2, [r3, #12]
 800a7fa:	4b40      	ldr	r3, [pc, #256]	; (800a8fc <HAL_RCC_OscConfig+0x784>)
 800a7fc:	4013      	ands	r3, r2
 800a7fe:	687a      	ldr	r2, [r7, #4]
 800a800:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800a802:	687a      	ldr	r2, [r7, #4]
 800a804:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800a806:	3a01      	subs	r2, #1
 800a808:	0112      	lsls	r2, r2, #4
 800a80a:	4311      	orrs	r1, r2
 800a80c:	687a      	ldr	r2, [r7, #4]
 800a80e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800a810:	0212      	lsls	r2, r2, #8
 800a812:	4311      	orrs	r1, r2
 800a814:	687a      	ldr	r2, [r7, #4]
 800a816:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800a818:	0852      	lsrs	r2, r2, #1
 800a81a:	3a01      	subs	r2, #1
 800a81c:	0552      	lsls	r2, r2, #21
 800a81e:	4311      	orrs	r1, r2
 800a820:	687a      	ldr	r2, [r7, #4]
 800a822:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800a824:	0852      	lsrs	r2, r2, #1
 800a826:	3a01      	subs	r2, #1
 800a828:	0652      	lsls	r2, r2, #25
 800a82a:	4311      	orrs	r1, r2
 800a82c:	687a      	ldr	r2, [r7, #4]
 800a82e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a830:	0912      	lsrs	r2, r2, #4
 800a832:	0452      	lsls	r2, r2, #17
 800a834:	430a      	orrs	r2, r1
 800a836:	4930      	ldr	r1, [pc, #192]	; (800a8f8 <HAL_RCC_OscConfig+0x780>)
 800a838:	4313      	orrs	r3, r2
 800a83a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800a83c:	4b2e      	ldr	r3, [pc, #184]	; (800a8f8 <HAL_RCC_OscConfig+0x780>)
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	4a2d      	ldr	r2, [pc, #180]	; (800a8f8 <HAL_RCC_OscConfig+0x780>)
 800a842:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a846:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800a848:	4b2b      	ldr	r3, [pc, #172]	; (800a8f8 <HAL_RCC_OscConfig+0x780>)
 800a84a:	68db      	ldr	r3, [r3, #12]
 800a84c:	4a2a      	ldr	r2, [pc, #168]	; (800a8f8 <HAL_RCC_OscConfig+0x780>)
 800a84e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a852:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800a854:	f7fd f8f2 	bl	8007a3c <HAL_GetTick>
 800a858:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a85a:	e008      	b.n	800a86e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a85c:	f7fd f8ee 	bl	8007a3c <HAL_GetTick>
 800a860:	4602      	mov	r2, r0
 800a862:	693b      	ldr	r3, [r7, #16]
 800a864:	1ad3      	subs	r3, r2, r3
 800a866:	2b02      	cmp	r3, #2
 800a868:	d901      	bls.n	800a86e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800a86a:	2303      	movs	r3, #3
 800a86c:	e058      	b.n	800a920 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a86e:	4b22      	ldr	r3, [pc, #136]	; (800a8f8 <HAL_RCC_OscConfig+0x780>)
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a876:	2b00      	cmp	r3, #0
 800a878:	d0f0      	beq.n	800a85c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800a87a:	e050      	b.n	800a91e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800a87c:	2301      	movs	r3, #1
 800a87e:	e04f      	b.n	800a920 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a880:	4b1d      	ldr	r3, [pc, #116]	; (800a8f8 <HAL_RCC_OscConfig+0x780>)
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d148      	bne.n	800a91e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800a88c:	4b1a      	ldr	r3, [pc, #104]	; (800a8f8 <HAL_RCC_OscConfig+0x780>)
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	4a19      	ldr	r2, [pc, #100]	; (800a8f8 <HAL_RCC_OscConfig+0x780>)
 800a892:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a896:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800a898:	4b17      	ldr	r3, [pc, #92]	; (800a8f8 <HAL_RCC_OscConfig+0x780>)
 800a89a:	68db      	ldr	r3, [r3, #12]
 800a89c:	4a16      	ldr	r2, [pc, #88]	; (800a8f8 <HAL_RCC_OscConfig+0x780>)
 800a89e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a8a2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a8a4:	f7fd f8ca 	bl	8007a3c <HAL_GetTick>
 800a8a8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a8aa:	e008      	b.n	800a8be <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a8ac:	f7fd f8c6 	bl	8007a3c <HAL_GetTick>
 800a8b0:	4602      	mov	r2, r0
 800a8b2:	693b      	ldr	r3, [r7, #16]
 800a8b4:	1ad3      	subs	r3, r2, r3
 800a8b6:	2b02      	cmp	r3, #2
 800a8b8:	d901      	bls.n	800a8be <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800a8ba:	2303      	movs	r3, #3
 800a8bc:	e030      	b.n	800a920 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a8be:	4b0e      	ldr	r3, [pc, #56]	; (800a8f8 <HAL_RCC_OscConfig+0x780>)
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d0f0      	beq.n	800a8ac <HAL_RCC_OscConfig+0x734>
 800a8ca:	e028      	b.n	800a91e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800a8cc:	69bb      	ldr	r3, [r7, #24]
 800a8ce:	2b0c      	cmp	r3, #12
 800a8d0:	d023      	beq.n	800a91a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a8d2:	4b09      	ldr	r3, [pc, #36]	; (800a8f8 <HAL_RCC_OscConfig+0x780>)
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	4a08      	ldr	r2, [pc, #32]	; (800a8f8 <HAL_RCC_OscConfig+0x780>)
 800a8d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a8dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a8de:	f7fd f8ad 	bl	8007a3c <HAL_GetTick>
 800a8e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a8e4:	e00c      	b.n	800a900 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a8e6:	f7fd f8a9 	bl	8007a3c <HAL_GetTick>
 800a8ea:	4602      	mov	r2, r0
 800a8ec:	693b      	ldr	r3, [r7, #16]
 800a8ee:	1ad3      	subs	r3, r2, r3
 800a8f0:	2b02      	cmp	r3, #2
 800a8f2:	d905      	bls.n	800a900 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800a8f4:	2303      	movs	r3, #3
 800a8f6:	e013      	b.n	800a920 <HAL_RCC_OscConfig+0x7a8>
 800a8f8:	40021000 	.word	0x40021000
 800a8fc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a900:	4b09      	ldr	r3, [pc, #36]	; (800a928 <HAL_RCC_OscConfig+0x7b0>)
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d1ec      	bne.n	800a8e6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800a90c:	4b06      	ldr	r3, [pc, #24]	; (800a928 <HAL_RCC_OscConfig+0x7b0>)
 800a90e:	68da      	ldr	r2, [r3, #12]
 800a910:	4905      	ldr	r1, [pc, #20]	; (800a928 <HAL_RCC_OscConfig+0x7b0>)
 800a912:	4b06      	ldr	r3, [pc, #24]	; (800a92c <HAL_RCC_OscConfig+0x7b4>)
 800a914:	4013      	ands	r3, r2
 800a916:	60cb      	str	r3, [r1, #12]
 800a918:	e001      	b.n	800a91e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800a91a:	2301      	movs	r3, #1
 800a91c:	e000      	b.n	800a920 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800a91e:	2300      	movs	r3, #0
}
 800a920:	4618      	mov	r0, r3
 800a922:	3720      	adds	r7, #32
 800a924:	46bd      	mov	sp, r7
 800a926:	bd80      	pop	{r7, pc}
 800a928:	40021000 	.word	0x40021000
 800a92c:	feeefffc 	.word	0xfeeefffc

0800a930 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a930:	b580      	push	{r7, lr}
 800a932:	b084      	sub	sp, #16
 800a934:	af00      	add	r7, sp, #0
 800a936:	6078      	str	r0, [r7, #4]
 800a938:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d101      	bne.n	800a944 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a940:	2301      	movs	r3, #1
 800a942:	e0e7      	b.n	800ab14 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a944:	4b75      	ldr	r3, [pc, #468]	; (800ab1c <HAL_RCC_ClockConfig+0x1ec>)
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	f003 0307 	and.w	r3, r3, #7
 800a94c:	683a      	ldr	r2, [r7, #0]
 800a94e:	429a      	cmp	r2, r3
 800a950:	d910      	bls.n	800a974 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a952:	4b72      	ldr	r3, [pc, #456]	; (800ab1c <HAL_RCC_ClockConfig+0x1ec>)
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	f023 0207 	bic.w	r2, r3, #7
 800a95a:	4970      	ldr	r1, [pc, #448]	; (800ab1c <HAL_RCC_ClockConfig+0x1ec>)
 800a95c:	683b      	ldr	r3, [r7, #0]
 800a95e:	4313      	orrs	r3, r2
 800a960:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a962:	4b6e      	ldr	r3, [pc, #440]	; (800ab1c <HAL_RCC_ClockConfig+0x1ec>)
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	f003 0307 	and.w	r3, r3, #7
 800a96a:	683a      	ldr	r2, [r7, #0]
 800a96c:	429a      	cmp	r2, r3
 800a96e:	d001      	beq.n	800a974 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a970:	2301      	movs	r3, #1
 800a972:	e0cf      	b.n	800ab14 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	f003 0302 	and.w	r3, r3, #2
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d010      	beq.n	800a9a2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	689a      	ldr	r2, [r3, #8]
 800a984:	4b66      	ldr	r3, [pc, #408]	; (800ab20 <HAL_RCC_ClockConfig+0x1f0>)
 800a986:	689b      	ldr	r3, [r3, #8]
 800a988:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a98c:	429a      	cmp	r2, r3
 800a98e:	d908      	bls.n	800a9a2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a990:	4b63      	ldr	r3, [pc, #396]	; (800ab20 <HAL_RCC_ClockConfig+0x1f0>)
 800a992:	689b      	ldr	r3, [r3, #8]
 800a994:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	689b      	ldr	r3, [r3, #8]
 800a99c:	4960      	ldr	r1, [pc, #384]	; (800ab20 <HAL_RCC_ClockConfig+0x1f0>)
 800a99e:	4313      	orrs	r3, r2
 800a9a0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	f003 0301 	and.w	r3, r3, #1
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d04c      	beq.n	800aa48 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	685b      	ldr	r3, [r3, #4]
 800a9b2:	2b03      	cmp	r3, #3
 800a9b4:	d107      	bne.n	800a9c6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a9b6:	4b5a      	ldr	r3, [pc, #360]	; (800ab20 <HAL_RCC_ClockConfig+0x1f0>)
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d121      	bne.n	800aa06 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800a9c2:	2301      	movs	r3, #1
 800a9c4:	e0a6      	b.n	800ab14 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	685b      	ldr	r3, [r3, #4]
 800a9ca:	2b02      	cmp	r3, #2
 800a9cc:	d107      	bne.n	800a9de <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a9ce:	4b54      	ldr	r3, [pc, #336]	; (800ab20 <HAL_RCC_ClockConfig+0x1f0>)
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d115      	bne.n	800aa06 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800a9da:	2301      	movs	r3, #1
 800a9dc:	e09a      	b.n	800ab14 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	685b      	ldr	r3, [r3, #4]
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d107      	bne.n	800a9f6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800a9e6:	4b4e      	ldr	r3, [pc, #312]	; (800ab20 <HAL_RCC_ClockConfig+0x1f0>)
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	f003 0302 	and.w	r3, r3, #2
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d109      	bne.n	800aa06 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800a9f2:	2301      	movs	r3, #1
 800a9f4:	e08e      	b.n	800ab14 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a9f6:	4b4a      	ldr	r3, [pc, #296]	; (800ab20 <HAL_RCC_ClockConfig+0x1f0>)
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d101      	bne.n	800aa06 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800aa02:	2301      	movs	r3, #1
 800aa04:	e086      	b.n	800ab14 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800aa06:	4b46      	ldr	r3, [pc, #280]	; (800ab20 <HAL_RCC_ClockConfig+0x1f0>)
 800aa08:	689b      	ldr	r3, [r3, #8]
 800aa0a:	f023 0203 	bic.w	r2, r3, #3
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	685b      	ldr	r3, [r3, #4]
 800aa12:	4943      	ldr	r1, [pc, #268]	; (800ab20 <HAL_RCC_ClockConfig+0x1f0>)
 800aa14:	4313      	orrs	r3, r2
 800aa16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aa18:	f7fd f810 	bl	8007a3c <HAL_GetTick>
 800aa1c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aa1e:	e00a      	b.n	800aa36 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800aa20:	f7fd f80c 	bl	8007a3c <HAL_GetTick>
 800aa24:	4602      	mov	r2, r0
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	1ad3      	subs	r3, r2, r3
 800aa2a:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa2e:	4293      	cmp	r3, r2
 800aa30:	d901      	bls.n	800aa36 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800aa32:	2303      	movs	r3, #3
 800aa34:	e06e      	b.n	800ab14 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aa36:	4b3a      	ldr	r3, [pc, #232]	; (800ab20 <HAL_RCC_ClockConfig+0x1f0>)
 800aa38:	689b      	ldr	r3, [r3, #8]
 800aa3a:	f003 020c 	and.w	r2, r3, #12
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	685b      	ldr	r3, [r3, #4]
 800aa42:	009b      	lsls	r3, r3, #2
 800aa44:	429a      	cmp	r2, r3
 800aa46:	d1eb      	bne.n	800aa20 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	f003 0302 	and.w	r3, r3, #2
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d010      	beq.n	800aa76 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	689a      	ldr	r2, [r3, #8]
 800aa58:	4b31      	ldr	r3, [pc, #196]	; (800ab20 <HAL_RCC_ClockConfig+0x1f0>)
 800aa5a:	689b      	ldr	r3, [r3, #8]
 800aa5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800aa60:	429a      	cmp	r2, r3
 800aa62:	d208      	bcs.n	800aa76 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800aa64:	4b2e      	ldr	r3, [pc, #184]	; (800ab20 <HAL_RCC_ClockConfig+0x1f0>)
 800aa66:	689b      	ldr	r3, [r3, #8]
 800aa68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	689b      	ldr	r3, [r3, #8]
 800aa70:	492b      	ldr	r1, [pc, #172]	; (800ab20 <HAL_RCC_ClockConfig+0x1f0>)
 800aa72:	4313      	orrs	r3, r2
 800aa74:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800aa76:	4b29      	ldr	r3, [pc, #164]	; (800ab1c <HAL_RCC_ClockConfig+0x1ec>)
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	f003 0307 	and.w	r3, r3, #7
 800aa7e:	683a      	ldr	r2, [r7, #0]
 800aa80:	429a      	cmp	r2, r3
 800aa82:	d210      	bcs.n	800aaa6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aa84:	4b25      	ldr	r3, [pc, #148]	; (800ab1c <HAL_RCC_ClockConfig+0x1ec>)
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	f023 0207 	bic.w	r2, r3, #7
 800aa8c:	4923      	ldr	r1, [pc, #140]	; (800ab1c <HAL_RCC_ClockConfig+0x1ec>)
 800aa8e:	683b      	ldr	r3, [r7, #0]
 800aa90:	4313      	orrs	r3, r2
 800aa92:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800aa94:	4b21      	ldr	r3, [pc, #132]	; (800ab1c <HAL_RCC_ClockConfig+0x1ec>)
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	f003 0307 	and.w	r3, r3, #7
 800aa9c:	683a      	ldr	r2, [r7, #0]
 800aa9e:	429a      	cmp	r2, r3
 800aaa0:	d001      	beq.n	800aaa6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800aaa2:	2301      	movs	r3, #1
 800aaa4:	e036      	b.n	800ab14 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	f003 0304 	and.w	r3, r3, #4
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d008      	beq.n	800aac4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800aab2:	4b1b      	ldr	r3, [pc, #108]	; (800ab20 <HAL_RCC_ClockConfig+0x1f0>)
 800aab4:	689b      	ldr	r3, [r3, #8]
 800aab6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	68db      	ldr	r3, [r3, #12]
 800aabe:	4918      	ldr	r1, [pc, #96]	; (800ab20 <HAL_RCC_ClockConfig+0x1f0>)
 800aac0:	4313      	orrs	r3, r2
 800aac2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	f003 0308 	and.w	r3, r3, #8
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d009      	beq.n	800aae4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800aad0:	4b13      	ldr	r3, [pc, #76]	; (800ab20 <HAL_RCC_ClockConfig+0x1f0>)
 800aad2:	689b      	ldr	r3, [r3, #8]
 800aad4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	691b      	ldr	r3, [r3, #16]
 800aadc:	00db      	lsls	r3, r3, #3
 800aade:	4910      	ldr	r1, [pc, #64]	; (800ab20 <HAL_RCC_ClockConfig+0x1f0>)
 800aae0:	4313      	orrs	r3, r2
 800aae2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800aae4:	f000 f824 	bl	800ab30 <HAL_RCC_GetSysClockFreq>
 800aae8:	4602      	mov	r2, r0
 800aaea:	4b0d      	ldr	r3, [pc, #52]	; (800ab20 <HAL_RCC_ClockConfig+0x1f0>)
 800aaec:	689b      	ldr	r3, [r3, #8]
 800aaee:	091b      	lsrs	r3, r3, #4
 800aaf0:	f003 030f 	and.w	r3, r3, #15
 800aaf4:	490b      	ldr	r1, [pc, #44]	; (800ab24 <HAL_RCC_ClockConfig+0x1f4>)
 800aaf6:	5ccb      	ldrb	r3, [r1, r3]
 800aaf8:	f003 031f 	and.w	r3, r3, #31
 800aafc:	fa22 f303 	lsr.w	r3, r2, r3
 800ab00:	4a09      	ldr	r2, [pc, #36]	; (800ab28 <HAL_RCC_ClockConfig+0x1f8>)
 800ab02:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800ab04:	4b09      	ldr	r3, [pc, #36]	; (800ab2c <HAL_RCC_ClockConfig+0x1fc>)
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	4618      	mov	r0, r3
 800ab0a:	f7fc ff47 	bl	800799c <HAL_InitTick>
 800ab0e:	4603      	mov	r3, r0
 800ab10:	72fb      	strb	r3, [r7, #11]

  return status;
 800ab12:	7afb      	ldrb	r3, [r7, #11]
}
 800ab14:	4618      	mov	r0, r3
 800ab16:	3710      	adds	r7, #16
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	bd80      	pop	{r7, pc}
 800ab1c:	40022000 	.word	0x40022000
 800ab20:	40021000 	.word	0x40021000
 800ab24:	08015890 	.word	0x08015890
 800ab28:	20000228 	.word	0x20000228
 800ab2c:	20000258 	.word	0x20000258

0800ab30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ab30:	b480      	push	{r7}
 800ab32:	b089      	sub	sp, #36	; 0x24
 800ab34:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800ab36:	2300      	movs	r3, #0
 800ab38:	61fb      	str	r3, [r7, #28]
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ab3e:	4b3e      	ldr	r3, [pc, #248]	; (800ac38 <HAL_RCC_GetSysClockFreq+0x108>)
 800ab40:	689b      	ldr	r3, [r3, #8]
 800ab42:	f003 030c 	and.w	r3, r3, #12
 800ab46:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800ab48:	4b3b      	ldr	r3, [pc, #236]	; (800ac38 <HAL_RCC_GetSysClockFreq+0x108>)
 800ab4a:	68db      	ldr	r3, [r3, #12]
 800ab4c:	f003 0303 	and.w	r3, r3, #3
 800ab50:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800ab52:	693b      	ldr	r3, [r7, #16]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d005      	beq.n	800ab64 <HAL_RCC_GetSysClockFreq+0x34>
 800ab58:	693b      	ldr	r3, [r7, #16]
 800ab5a:	2b0c      	cmp	r3, #12
 800ab5c:	d121      	bne.n	800aba2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	2b01      	cmp	r3, #1
 800ab62:	d11e      	bne.n	800aba2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800ab64:	4b34      	ldr	r3, [pc, #208]	; (800ac38 <HAL_RCC_GetSysClockFreq+0x108>)
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	f003 0308 	and.w	r3, r3, #8
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d107      	bne.n	800ab80 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800ab70:	4b31      	ldr	r3, [pc, #196]	; (800ac38 <HAL_RCC_GetSysClockFreq+0x108>)
 800ab72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ab76:	0a1b      	lsrs	r3, r3, #8
 800ab78:	f003 030f 	and.w	r3, r3, #15
 800ab7c:	61fb      	str	r3, [r7, #28]
 800ab7e:	e005      	b.n	800ab8c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800ab80:	4b2d      	ldr	r3, [pc, #180]	; (800ac38 <HAL_RCC_GetSysClockFreq+0x108>)
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	091b      	lsrs	r3, r3, #4
 800ab86:	f003 030f 	and.w	r3, r3, #15
 800ab8a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800ab8c:	4a2b      	ldr	r2, [pc, #172]	; (800ac3c <HAL_RCC_GetSysClockFreq+0x10c>)
 800ab8e:	69fb      	ldr	r3, [r7, #28]
 800ab90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ab94:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800ab96:	693b      	ldr	r3, [r7, #16]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d10d      	bne.n	800abb8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800ab9c:	69fb      	ldr	r3, [r7, #28]
 800ab9e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800aba0:	e00a      	b.n	800abb8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800aba2:	693b      	ldr	r3, [r7, #16]
 800aba4:	2b04      	cmp	r3, #4
 800aba6:	d102      	bne.n	800abae <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800aba8:	4b25      	ldr	r3, [pc, #148]	; (800ac40 <HAL_RCC_GetSysClockFreq+0x110>)
 800abaa:	61bb      	str	r3, [r7, #24]
 800abac:	e004      	b.n	800abb8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800abae:	693b      	ldr	r3, [r7, #16]
 800abb0:	2b08      	cmp	r3, #8
 800abb2:	d101      	bne.n	800abb8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800abb4:	4b23      	ldr	r3, [pc, #140]	; (800ac44 <HAL_RCC_GetSysClockFreq+0x114>)
 800abb6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800abb8:	693b      	ldr	r3, [r7, #16]
 800abba:	2b0c      	cmp	r3, #12
 800abbc:	d134      	bne.n	800ac28 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800abbe:	4b1e      	ldr	r3, [pc, #120]	; (800ac38 <HAL_RCC_GetSysClockFreq+0x108>)
 800abc0:	68db      	ldr	r3, [r3, #12]
 800abc2:	f003 0303 	and.w	r3, r3, #3
 800abc6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800abc8:	68bb      	ldr	r3, [r7, #8]
 800abca:	2b02      	cmp	r3, #2
 800abcc:	d003      	beq.n	800abd6 <HAL_RCC_GetSysClockFreq+0xa6>
 800abce:	68bb      	ldr	r3, [r7, #8]
 800abd0:	2b03      	cmp	r3, #3
 800abd2:	d003      	beq.n	800abdc <HAL_RCC_GetSysClockFreq+0xac>
 800abd4:	e005      	b.n	800abe2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800abd6:	4b1a      	ldr	r3, [pc, #104]	; (800ac40 <HAL_RCC_GetSysClockFreq+0x110>)
 800abd8:	617b      	str	r3, [r7, #20]
      break;
 800abda:	e005      	b.n	800abe8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800abdc:	4b19      	ldr	r3, [pc, #100]	; (800ac44 <HAL_RCC_GetSysClockFreq+0x114>)
 800abde:	617b      	str	r3, [r7, #20]
      break;
 800abe0:	e002      	b.n	800abe8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800abe2:	69fb      	ldr	r3, [r7, #28]
 800abe4:	617b      	str	r3, [r7, #20]
      break;
 800abe6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800abe8:	4b13      	ldr	r3, [pc, #76]	; (800ac38 <HAL_RCC_GetSysClockFreq+0x108>)
 800abea:	68db      	ldr	r3, [r3, #12]
 800abec:	091b      	lsrs	r3, r3, #4
 800abee:	f003 0307 	and.w	r3, r3, #7
 800abf2:	3301      	adds	r3, #1
 800abf4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800abf6:	4b10      	ldr	r3, [pc, #64]	; (800ac38 <HAL_RCC_GetSysClockFreq+0x108>)
 800abf8:	68db      	ldr	r3, [r3, #12]
 800abfa:	0a1b      	lsrs	r3, r3, #8
 800abfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac00:	697a      	ldr	r2, [r7, #20]
 800ac02:	fb03 f202 	mul.w	r2, r3, r2
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac0c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800ac0e:	4b0a      	ldr	r3, [pc, #40]	; (800ac38 <HAL_RCC_GetSysClockFreq+0x108>)
 800ac10:	68db      	ldr	r3, [r3, #12]
 800ac12:	0e5b      	lsrs	r3, r3, #25
 800ac14:	f003 0303 	and.w	r3, r3, #3
 800ac18:	3301      	adds	r3, #1
 800ac1a:	005b      	lsls	r3, r3, #1
 800ac1c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800ac1e:	697a      	ldr	r2, [r7, #20]
 800ac20:	683b      	ldr	r3, [r7, #0]
 800ac22:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac26:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800ac28:	69bb      	ldr	r3, [r7, #24]
}
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	3724      	adds	r7, #36	; 0x24
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac34:	4770      	bx	lr
 800ac36:	bf00      	nop
 800ac38:	40021000 	.word	0x40021000
 800ac3c:	080158a8 	.word	0x080158a8
 800ac40:	00f42400 	.word	0x00f42400
 800ac44:	007a1200 	.word	0x007a1200

0800ac48 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ac48:	b480      	push	{r7}
 800ac4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ac4c:	4b03      	ldr	r3, [pc, #12]	; (800ac5c <HAL_RCC_GetHCLKFreq+0x14>)
 800ac4e:	681b      	ldr	r3, [r3, #0]
}
 800ac50:	4618      	mov	r0, r3
 800ac52:	46bd      	mov	sp, r7
 800ac54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac58:	4770      	bx	lr
 800ac5a:	bf00      	nop
 800ac5c:	20000228 	.word	0x20000228

0800ac60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800ac64:	f7ff fff0 	bl	800ac48 <HAL_RCC_GetHCLKFreq>
 800ac68:	4602      	mov	r2, r0
 800ac6a:	4b06      	ldr	r3, [pc, #24]	; (800ac84 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ac6c:	689b      	ldr	r3, [r3, #8]
 800ac6e:	0a1b      	lsrs	r3, r3, #8
 800ac70:	f003 0307 	and.w	r3, r3, #7
 800ac74:	4904      	ldr	r1, [pc, #16]	; (800ac88 <HAL_RCC_GetPCLK1Freq+0x28>)
 800ac76:	5ccb      	ldrb	r3, [r1, r3]
 800ac78:	f003 031f 	and.w	r3, r3, #31
 800ac7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ac80:	4618      	mov	r0, r3
 800ac82:	bd80      	pop	{r7, pc}
 800ac84:	40021000 	.word	0x40021000
 800ac88:	080158a0 	.word	0x080158a0

0800ac8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800ac90:	f7ff ffda 	bl	800ac48 <HAL_RCC_GetHCLKFreq>
 800ac94:	4602      	mov	r2, r0
 800ac96:	4b06      	ldr	r3, [pc, #24]	; (800acb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ac98:	689b      	ldr	r3, [r3, #8]
 800ac9a:	0adb      	lsrs	r3, r3, #11
 800ac9c:	f003 0307 	and.w	r3, r3, #7
 800aca0:	4904      	ldr	r1, [pc, #16]	; (800acb4 <HAL_RCC_GetPCLK2Freq+0x28>)
 800aca2:	5ccb      	ldrb	r3, [r1, r3]
 800aca4:	f003 031f 	and.w	r3, r3, #31
 800aca8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800acac:	4618      	mov	r0, r3
 800acae:	bd80      	pop	{r7, pc}
 800acb0:	40021000 	.word	0x40021000
 800acb4:	080158a0 	.word	0x080158a0

0800acb8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b086      	sub	sp, #24
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800acc0:	2300      	movs	r3, #0
 800acc2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800acc4:	4b2a      	ldr	r3, [pc, #168]	; (800ad70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800acc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800acc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800accc:	2b00      	cmp	r3, #0
 800acce:	d003      	beq.n	800acd8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800acd0:	f7ff f9a6 	bl	800a020 <HAL_PWREx_GetVoltageRange>
 800acd4:	6178      	str	r0, [r7, #20]
 800acd6:	e014      	b.n	800ad02 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800acd8:	4b25      	ldr	r3, [pc, #148]	; (800ad70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800acda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800acdc:	4a24      	ldr	r2, [pc, #144]	; (800ad70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800acde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ace2:	6593      	str	r3, [r2, #88]	; 0x58
 800ace4:	4b22      	ldr	r3, [pc, #136]	; (800ad70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800ace6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ace8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800acec:	60fb      	str	r3, [r7, #12]
 800acee:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800acf0:	f7ff f996 	bl	800a020 <HAL_PWREx_GetVoltageRange>
 800acf4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800acf6:	4b1e      	ldr	r3, [pc, #120]	; (800ad70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800acf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800acfa:	4a1d      	ldr	r2, [pc, #116]	; (800ad70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800acfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ad00:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800ad02:	697b      	ldr	r3, [r7, #20]
 800ad04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ad08:	d10b      	bne.n	800ad22 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	2b80      	cmp	r3, #128	; 0x80
 800ad0e:	d919      	bls.n	800ad44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	2ba0      	cmp	r3, #160	; 0xa0
 800ad14:	d902      	bls.n	800ad1c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800ad16:	2302      	movs	r3, #2
 800ad18:	613b      	str	r3, [r7, #16]
 800ad1a:	e013      	b.n	800ad44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800ad1c:	2301      	movs	r3, #1
 800ad1e:	613b      	str	r3, [r7, #16]
 800ad20:	e010      	b.n	800ad44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	2b80      	cmp	r3, #128	; 0x80
 800ad26:	d902      	bls.n	800ad2e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800ad28:	2303      	movs	r3, #3
 800ad2a:	613b      	str	r3, [r7, #16]
 800ad2c:	e00a      	b.n	800ad44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	2b80      	cmp	r3, #128	; 0x80
 800ad32:	d102      	bne.n	800ad3a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800ad34:	2302      	movs	r3, #2
 800ad36:	613b      	str	r3, [r7, #16]
 800ad38:	e004      	b.n	800ad44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	2b70      	cmp	r3, #112	; 0x70
 800ad3e:	d101      	bne.n	800ad44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800ad40:	2301      	movs	r3, #1
 800ad42:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800ad44:	4b0b      	ldr	r3, [pc, #44]	; (800ad74 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	f023 0207 	bic.w	r2, r3, #7
 800ad4c:	4909      	ldr	r1, [pc, #36]	; (800ad74 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800ad4e:	693b      	ldr	r3, [r7, #16]
 800ad50:	4313      	orrs	r3, r2
 800ad52:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800ad54:	4b07      	ldr	r3, [pc, #28]	; (800ad74 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	f003 0307 	and.w	r3, r3, #7
 800ad5c:	693a      	ldr	r2, [r7, #16]
 800ad5e:	429a      	cmp	r2, r3
 800ad60:	d001      	beq.n	800ad66 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800ad62:	2301      	movs	r3, #1
 800ad64:	e000      	b.n	800ad68 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800ad66:	2300      	movs	r3, #0
}
 800ad68:	4618      	mov	r0, r3
 800ad6a:	3718      	adds	r7, #24
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	bd80      	pop	{r7, pc}
 800ad70:	40021000 	.word	0x40021000
 800ad74:	40022000 	.word	0x40022000

0800ad78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b086      	sub	sp, #24
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800ad80:	2300      	movs	r3, #0
 800ad82:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800ad84:	2300      	movs	r3, #0
 800ad86:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d041      	beq.n	800ae18 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ad98:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800ad9c:	d02a      	beq.n	800adf4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800ad9e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800ada2:	d824      	bhi.n	800adee <HAL_RCCEx_PeriphCLKConfig+0x76>
 800ada4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ada8:	d008      	beq.n	800adbc <HAL_RCCEx_PeriphCLKConfig+0x44>
 800adaa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800adae:	d81e      	bhi.n	800adee <HAL_RCCEx_PeriphCLKConfig+0x76>
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d00a      	beq.n	800adca <HAL_RCCEx_PeriphCLKConfig+0x52>
 800adb4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800adb8:	d010      	beq.n	800addc <HAL_RCCEx_PeriphCLKConfig+0x64>
 800adba:	e018      	b.n	800adee <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800adbc:	4b86      	ldr	r3, [pc, #536]	; (800afd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800adbe:	68db      	ldr	r3, [r3, #12]
 800adc0:	4a85      	ldr	r2, [pc, #532]	; (800afd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800adc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800adc6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800adc8:	e015      	b.n	800adf6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	3304      	adds	r3, #4
 800adce:	2100      	movs	r1, #0
 800add0:	4618      	mov	r0, r3
 800add2:	f000 fabb 	bl	800b34c <RCCEx_PLLSAI1_Config>
 800add6:	4603      	mov	r3, r0
 800add8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800adda:	e00c      	b.n	800adf6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	3320      	adds	r3, #32
 800ade0:	2100      	movs	r1, #0
 800ade2:	4618      	mov	r0, r3
 800ade4:	f000 fba6 	bl	800b534 <RCCEx_PLLSAI2_Config>
 800ade8:	4603      	mov	r3, r0
 800adea:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800adec:	e003      	b.n	800adf6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800adee:	2301      	movs	r3, #1
 800adf0:	74fb      	strb	r3, [r7, #19]
      break;
 800adf2:	e000      	b.n	800adf6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800adf4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800adf6:	7cfb      	ldrb	r3, [r7, #19]
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d10b      	bne.n	800ae14 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800adfc:	4b76      	ldr	r3, [pc, #472]	; (800afd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800adfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae02:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ae0a:	4973      	ldr	r1, [pc, #460]	; (800afd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ae0c:	4313      	orrs	r3, r2
 800ae0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800ae12:	e001      	b.n	800ae18 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae14:	7cfb      	ldrb	r3, [r7, #19]
 800ae16:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d041      	beq.n	800aea8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ae28:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ae2c:	d02a      	beq.n	800ae84 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800ae2e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ae32:	d824      	bhi.n	800ae7e <HAL_RCCEx_PeriphCLKConfig+0x106>
 800ae34:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ae38:	d008      	beq.n	800ae4c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800ae3a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ae3e:	d81e      	bhi.n	800ae7e <HAL_RCCEx_PeriphCLKConfig+0x106>
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d00a      	beq.n	800ae5a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800ae44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ae48:	d010      	beq.n	800ae6c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800ae4a:	e018      	b.n	800ae7e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800ae4c:	4b62      	ldr	r3, [pc, #392]	; (800afd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ae4e:	68db      	ldr	r3, [r3, #12]
 800ae50:	4a61      	ldr	r2, [pc, #388]	; (800afd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ae52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ae56:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800ae58:	e015      	b.n	800ae86 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	3304      	adds	r3, #4
 800ae5e:	2100      	movs	r1, #0
 800ae60:	4618      	mov	r0, r3
 800ae62:	f000 fa73 	bl	800b34c <RCCEx_PLLSAI1_Config>
 800ae66:	4603      	mov	r3, r0
 800ae68:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800ae6a:	e00c      	b.n	800ae86 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	3320      	adds	r3, #32
 800ae70:	2100      	movs	r1, #0
 800ae72:	4618      	mov	r0, r3
 800ae74:	f000 fb5e 	bl	800b534 <RCCEx_PLLSAI2_Config>
 800ae78:	4603      	mov	r3, r0
 800ae7a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800ae7c:	e003      	b.n	800ae86 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ae7e:	2301      	movs	r3, #1
 800ae80:	74fb      	strb	r3, [r7, #19]
      break;
 800ae82:	e000      	b.n	800ae86 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800ae84:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ae86:	7cfb      	ldrb	r3, [r7, #19]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d10b      	bne.n	800aea4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800ae8c:	4b52      	ldr	r3, [pc, #328]	; (800afd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ae8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae92:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ae9a:	494f      	ldr	r1, [pc, #316]	; (800afd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ae9c:	4313      	orrs	r3, r2
 800ae9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800aea2:	e001      	b.n	800aea8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aea4:	7cfb      	ldrb	r3, [r7, #19]
 800aea6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	f000 80a0 	beq.w	800aff6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800aeba:	4b47      	ldr	r3, [pc, #284]	; (800afd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800aebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aebe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d101      	bne.n	800aeca <HAL_RCCEx_PeriphCLKConfig+0x152>
 800aec6:	2301      	movs	r3, #1
 800aec8:	e000      	b.n	800aecc <HAL_RCCEx_PeriphCLKConfig+0x154>
 800aeca:	2300      	movs	r3, #0
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d00d      	beq.n	800aeec <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800aed0:	4b41      	ldr	r3, [pc, #260]	; (800afd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800aed2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aed4:	4a40      	ldr	r2, [pc, #256]	; (800afd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800aed6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aeda:	6593      	str	r3, [r2, #88]	; 0x58
 800aedc:	4b3e      	ldr	r3, [pc, #248]	; (800afd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800aede:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aee0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aee4:	60bb      	str	r3, [r7, #8]
 800aee6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800aee8:	2301      	movs	r3, #1
 800aeea:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800aeec:	4b3b      	ldr	r3, [pc, #236]	; (800afdc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	4a3a      	ldr	r2, [pc, #232]	; (800afdc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800aef2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aef6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800aef8:	f7fc fda0 	bl	8007a3c <HAL_GetTick>
 800aefc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800aefe:	e009      	b.n	800af14 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800af00:	f7fc fd9c 	bl	8007a3c <HAL_GetTick>
 800af04:	4602      	mov	r2, r0
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	1ad3      	subs	r3, r2, r3
 800af0a:	2b02      	cmp	r3, #2
 800af0c:	d902      	bls.n	800af14 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800af0e:	2303      	movs	r3, #3
 800af10:	74fb      	strb	r3, [r7, #19]
        break;
 800af12:	e005      	b.n	800af20 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800af14:	4b31      	ldr	r3, [pc, #196]	; (800afdc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d0ef      	beq.n	800af00 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800af20:	7cfb      	ldrb	r3, [r7, #19]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d15c      	bne.n	800afe0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800af26:	4b2c      	ldr	r3, [pc, #176]	; (800afd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800af28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800af30:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800af32:	697b      	ldr	r3, [r7, #20]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d01f      	beq.n	800af78 <HAL_RCCEx_PeriphCLKConfig+0x200>
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800af3e:	697a      	ldr	r2, [r7, #20]
 800af40:	429a      	cmp	r2, r3
 800af42:	d019      	beq.n	800af78 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800af44:	4b24      	ldr	r3, [pc, #144]	; (800afd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800af46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800af4e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800af50:	4b21      	ldr	r3, [pc, #132]	; (800afd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800af52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af56:	4a20      	ldr	r2, [pc, #128]	; (800afd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800af58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800af5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800af60:	4b1d      	ldr	r3, [pc, #116]	; (800afd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800af62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af66:	4a1c      	ldr	r2, [pc, #112]	; (800afd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800af68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800af6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800af70:	4a19      	ldr	r2, [pc, #100]	; (800afd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800af72:	697b      	ldr	r3, [r7, #20]
 800af74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800af78:	697b      	ldr	r3, [r7, #20]
 800af7a:	f003 0301 	and.w	r3, r3, #1
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d016      	beq.n	800afb0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800af82:	f7fc fd5b 	bl	8007a3c <HAL_GetTick>
 800af86:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800af88:	e00b      	b.n	800afa2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800af8a:	f7fc fd57 	bl	8007a3c <HAL_GetTick>
 800af8e:	4602      	mov	r2, r0
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	1ad3      	subs	r3, r2, r3
 800af94:	f241 3288 	movw	r2, #5000	; 0x1388
 800af98:	4293      	cmp	r3, r2
 800af9a:	d902      	bls.n	800afa2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800af9c:	2303      	movs	r3, #3
 800af9e:	74fb      	strb	r3, [r7, #19]
            break;
 800afa0:	e006      	b.n	800afb0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800afa2:	4b0d      	ldr	r3, [pc, #52]	; (800afd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800afa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800afa8:	f003 0302 	and.w	r3, r3, #2
 800afac:	2b00      	cmp	r3, #0
 800afae:	d0ec      	beq.n	800af8a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800afb0:	7cfb      	ldrb	r3, [r7, #19]
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d10c      	bne.n	800afd0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800afb6:	4b08      	ldr	r3, [pc, #32]	; (800afd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800afb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800afbc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800afc6:	4904      	ldr	r1, [pc, #16]	; (800afd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800afc8:	4313      	orrs	r3, r2
 800afca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800afce:	e009      	b.n	800afe4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800afd0:	7cfb      	ldrb	r3, [r7, #19]
 800afd2:	74bb      	strb	r3, [r7, #18]
 800afd4:	e006      	b.n	800afe4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800afd6:	bf00      	nop
 800afd8:	40021000 	.word	0x40021000
 800afdc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800afe0:	7cfb      	ldrb	r3, [r7, #19]
 800afe2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800afe4:	7c7b      	ldrb	r3, [r7, #17]
 800afe6:	2b01      	cmp	r3, #1
 800afe8:	d105      	bne.n	800aff6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800afea:	4b9e      	ldr	r3, [pc, #632]	; (800b264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800afec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800afee:	4a9d      	ldr	r2, [pc, #628]	; (800b264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800aff0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800aff4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	f003 0301 	and.w	r3, r3, #1
 800affe:	2b00      	cmp	r3, #0
 800b000:	d00a      	beq.n	800b018 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800b002:	4b98      	ldr	r3, [pc, #608]	; (800b264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b004:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b008:	f023 0203 	bic.w	r2, r3, #3
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b010:	4994      	ldr	r1, [pc, #592]	; (800b264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b012:	4313      	orrs	r3, r2
 800b014:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	f003 0302 	and.w	r3, r3, #2
 800b020:	2b00      	cmp	r3, #0
 800b022:	d00a      	beq.n	800b03a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800b024:	4b8f      	ldr	r3, [pc, #572]	; (800b264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b026:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b02a:	f023 020c 	bic.w	r2, r3, #12
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b032:	498c      	ldr	r1, [pc, #560]	; (800b264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b034:	4313      	orrs	r3, r2
 800b036:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	f003 0304 	and.w	r3, r3, #4
 800b042:	2b00      	cmp	r3, #0
 800b044:	d00a      	beq.n	800b05c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800b046:	4b87      	ldr	r3, [pc, #540]	; (800b264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b048:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b04c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b054:	4983      	ldr	r1, [pc, #524]	; (800b264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b056:	4313      	orrs	r3, r2
 800b058:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	f003 0308 	and.w	r3, r3, #8
 800b064:	2b00      	cmp	r3, #0
 800b066:	d00a      	beq.n	800b07e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800b068:	4b7e      	ldr	r3, [pc, #504]	; (800b264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b06a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b06e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b076:	497b      	ldr	r1, [pc, #492]	; (800b264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b078:	4313      	orrs	r3, r2
 800b07a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	f003 0310 	and.w	r3, r3, #16
 800b086:	2b00      	cmp	r3, #0
 800b088:	d00a      	beq.n	800b0a0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800b08a:	4b76      	ldr	r3, [pc, #472]	; (800b264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b08c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b090:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b098:	4972      	ldr	r1, [pc, #456]	; (800b264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b09a:	4313      	orrs	r3, r2
 800b09c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	f003 0320 	and.w	r3, r3, #32
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d00a      	beq.n	800b0c2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b0ac:	4b6d      	ldr	r3, [pc, #436]	; (800b264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b0ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0b2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b0ba:	496a      	ldr	r1, [pc, #424]	; (800b264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b0bc:	4313      	orrs	r3, r2
 800b0be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d00a      	beq.n	800b0e4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b0ce:	4b65      	ldr	r3, [pc, #404]	; (800b264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b0d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0d4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b0dc:	4961      	ldr	r1, [pc, #388]	; (800b264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b0de:	4313      	orrs	r3, r2
 800b0e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d00a      	beq.n	800b106 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b0f0:	4b5c      	ldr	r3, [pc, #368]	; (800b264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b0f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0f6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b0fe:	4959      	ldr	r1, [pc, #356]	; (800b264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b100:	4313      	orrs	r3, r2
 800b102:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d00a      	beq.n	800b128 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800b112:	4b54      	ldr	r3, [pc, #336]	; (800b264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b114:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b118:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b120:	4950      	ldr	r1, [pc, #320]	; (800b264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b122:	4313      	orrs	r3, r2
 800b124:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b130:	2b00      	cmp	r3, #0
 800b132:	d00a      	beq.n	800b14a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800b134:	4b4b      	ldr	r3, [pc, #300]	; (800b264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b136:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b13a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b142:	4948      	ldr	r1, [pc, #288]	; (800b264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b144:	4313      	orrs	r3, r2
 800b146:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b152:	2b00      	cmp	r3, #0
 800b154:	d00a      	beq.n	800b16c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800b156:	4b43      	ldr	r3, [pc, #268]	; (800b264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b158:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b15c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b164:	493f      	ldr	r1, [pc, #252]	; (800b264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b166:	4313      	orrs	r3, r2
 800b168:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b174:	2b00      	cmp	r3, #0
 800b176:	d028      	beq.n	800b1ca <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b178:	4b3a      	ldr	r3, [pc, #232]	; (800b264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b17a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b17e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b186:	4937      	ldr	r1, [pc, #220]	; (800b264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b188:	4313      	orrs	r3, r2
 800b18a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b192:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b196:	d106      	bne.n	800b1a6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b198:	4b32      	ldr	r3, [pc, #200]	; (800b264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b19a:	68db      	ldr	r3, [r3, #12]
 800b19c:	4a31      	ldr	r2, [pc, #196]	; (800b264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b19e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b1a2:	60d3      	str	r3, [r2, #12]
 800b1a4:	e011      	b.n	800b1ca <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b1aa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b1ae:	d10c      	bne.n	800b1ca <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	3304      	adds	r3, #4
 800b1b4:	2101      	movs	r1, #1
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	f000 f8c8 	bl	800b34c <RCCEx_PLLSAI1_Config>
 800b1bc:	4603      	mov	r3, r0
 800b1be:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800b1c0:	7cfb      	ldrb	r3, [r7, #19]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d001      	beq.n	800b1ca <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800b1c6:	7cfb      	ldrb	r3, [r7, #19]
 800b1c8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d028      	beq.n	800b228 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800b1d6:	4b23      	ldr	r3, [pc, #140]	; (800b264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b1d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1dc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1e4:	491f      	ldr	r1, [pc, #124]	; (800b264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b1e6:	4313      	orrs	r3, r2
 800b1e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b1f4:	d106      	bne.n	800b204 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b1f6:	4b1b      	ldr	r3, [pc, #108]	; (800b264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b1f8:	68db      	ldr	r3, [r3, #12]
 800b1fa:	4a1a      	ldr	r2, [pc, #104]	; (800b264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b1fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b200:	60d3      	str	r3, [r2, #12]
 800b202:	e011      	b.n	800b228 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b208:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b20c:	d10c      	bne.n	800b228 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	3304      	adds	r3, #4
 800b212:	2101      	movs	r1, #1
 800b214:	4618      	mov	r0, r3
 800b216:	f000 f899 	bl	800b34c <RCCEx_PLLSAI1_Config>
 800b21a:	4603      	mov	r3, r0
 800b21c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800b21e:	7cfb      	ldrb	r3, [r7, #19]
 800b220:	2b00      	cmp	r3, #0
 800b222:	d001      	beq.n	800b228 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800b224:	7cfb      	ldrb	r3, [r7, #19]
 800b226:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b230:	2b00      	cmp	r3, #0
 800b232:	d02b      	beq.n	800b28c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b234:	4b0b      	ldr	r3, [pc, #44]	; (800b264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b236:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b23a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b242:	4908      	ldr	r1, [pc, #32]	; (800b264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b244:	4313      	orrs	r3, r2
 800b246:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b24e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b252:	d109      	bne.n	800b268 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b254:	4b03      	ldr	r3, [pc, #12]	; (800b264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b256:	68db      	ldr	r3, [r3, #12]
 800b258:	4a02      	ldr	r2, [pc, #8]	; (800b264 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b25a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b25e:	60d3      	str	r3, [r2, #12]
 800b260:	e014      	b.n	800b28c <HAL_RCCEx_PeriphCLKConfig+0x514>
 800b262:	bf00      	nop
 800b264:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b26c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b270:	d10c      	bne.n	800b28c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	3304      	adds	r3, #4
 800b276:	2101      	movs	r1, #1
 800b278:	4618      	mov	r0, r3
 800b27a:	f000 f867 	bl	800b34c <RCCEx_PLLSAI1_Config>
 800b27e:	4603      	mov	r3, r0
 800b280:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800b282:	7cfb      	ldrb	r3, [r7, #19]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d001      	beq.n	800b28c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800b288:	7cfb      	ldrb	r3, [r7, #19]
 800b28a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b294:	2b00      	cmp	r3, #0
 800b296:	d02f      	beq.n	800b2f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b298:	4b2b      	ldr	r3, [pc, #172]	; (800b348 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800b29a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b29e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b2a6:	4928      	ldr	r1, [pc, #160]	; (800b348 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800b2a8:	4313      	orrs	r3, r2
 800b2aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b2b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b2b6:	d10d      	bne.n	800b2d4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	3304      	adds	r3, #4
 800b2bc:	2102      	movs	r1, #2
 800b2be:	4618      	mov	r0, r3
 800b2c0:	f000 f844 	bl	800b34c <RCCEx_PLLSAI1_Config>
 800b2c4:	4603      	mov	r3, r0
 800b2c6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800b2c8:	7cfb      	ldrb	r3, [r7, #19]
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d014      	beq.n	800b2f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800b2ce:	7cfb      	ldrb	r3, [r7, #19]
 800b2d0:	74bb      	strb	r3, [r7, #18]
 800b2d2:	e011      	b.n	800b2f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b2d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b2dc:	d10c      	bne.n	800b2f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	3320      	adds	r3, #32
 800b2e2:	2102      	movs	r1, #2
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	f000 f925 	bl	800b534 <RCCEx_PLLSAI2_Config>
 800b2ea:	4603      	mov	r3, r0
 800b2ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800b2ee:	7cfb      	ldrb	r3, [r7, #19]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d001      	beq.n	800b2f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800b2f4:	7cfb      	ldrb	r3, [r7, #19]
 800b2f6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b300:	2b00      	cmp	r3, #0
 800b302:	d00a      	beq.n	800b31a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b304:	4b10      	ldr	r3, [pc, #64]	; (800b348 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800b306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b30a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b312:	490d      	ldr	r1, [pc, #52]	; (800b348 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800b314:	4313      	orrs	r3, r2
 800b316:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b322:	2b00      	cmp	r3, #0
 800b324:	d00b      	beq.n	800b33e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b326:	4b08      	ldr	r3, [pc, #32]	; (800b348 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800b328:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b32c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b336:	4904      	ldr	r1, [pc, #16]	; (800b348 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800b338:	4313      	orrs	r3, r2
 800b33a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800b33e:	7cbb      	ldrb	r3, [r7, #18]
}
 800b340:	4618      	mov	r0, r3
 800b342:	3718      	adds	r7, #24
 800b344:	46bd      	mov	sp, r7
 800b346:	bd80      	pop	{r7, pc}
 800b348:	40021000 	.word	0x40021000

0800b34c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800b34c:	b580      	push	{r7, lr}
 800b34e:	b084      	sub	sp, #16
 800b350:	af00      	add	r7, sp, #0
 800b352:	6078      	str	r0, [r7, #4]
 800b354:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b356:	2300      	movs	r3, #0
 800b358:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800b35a:	4b75      	ldr	r3, [pc, #468]	; (800b530 <RCCEx_PLLSAI1_Config+0x1e4>)
 800b35c:	68db      	ldr	r3, [r3, #12]
 800b35e:	f003 0303 	and.w	r3, r3, #3
 800b362:	2b00      	cmp	r3, #0
 800b364:	d018      	beq.n	800b398 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800b366:	4b72      	ldr	r3, [pc, #456]	; (800b530 <RCCEx_PLLSAI1_Config+0x1e4>)
 800b368:	68db      	ldr	r3, [r3, #12]
 800b36a:	f003 0203 	and.w	r2, r3, #3
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	429a      	cmp	r2, r3
 800b374:	d10d      	bne.n	800b392 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	681b      	ldr	r3, [r3, #0]
       ||
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d009      	beq.n	800b392 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800b37e:	4b6c      	ldr	r3, [pc, #432]	; (800b530 <RCCEx_PLLSAI1_Config+0x1e4>)
 800b380:	68db      	ldr	r3, [r3, #12]
 800b382:	091b      	lsrs	r3, r3, #4
 800b384:	f003 0307 	and.w	r3, r3, #7
 800b388:	1c5a      	adds	r2, r3, #1
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	685b      	ldr	r3, [r3, #4]
       ||
 800b38e:	429a      	cmp	r2, r3
 800b390:	d047      	beq.n	800b422 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800b392:	2301      	movs	r3, #1
 800b394:	73fb      	strb	r3, [r7, #15]
 800b396:	e044      	b.n	800b422 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	2b03      	cmp	r3, #3
 800b39e:	d018      	beq.n	800b3d2 <RCCEx_PLLSAI1_Config+0x86>
 800b3a0:	2b03      	cmp	r3, #3
 800b3a2:	d825      	bhi.n	800b3f0 <RCCEx_PLLSAI1_Config+0xa4>
 800b3a4:	2b01      	cmp	r3, #1
 800b3a6:	d002      	beq.n	800b3ae <RCCEx_PLLSAI1_Config+0x62>
 800b3a8:	2b02      	cmp	r3, #2
 800b3aa:	d009      	beq.n	800b3c0 <RCCEx_PLLSAI1_Config+0x74>
 800b3ac:	e020      	b.n	800b3f0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800b3ae:	4b60      	ldr	r3, [pc, #384]	; (800b530 <RCCEx_PLLSAI1_Config+0x1e4>)
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	f003 0302 	and.w	r3, r3, #2
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d11d      	bne.n	800b3f6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800b3ba:	2301      	movs	r3, #1
 800b3bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b3be:	e01a      	b.n	800b3f6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800b3c0:	4b5b      	ldr	r3, [pc, #364]	; (800b530 <RCCEx_PLLSAI1_Config+0x1e4>)
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d116      	bne.n	800b3fa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800b3cc:	2301      	movs	r3, #1
 800b3ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b3d0:	e013      	b.n	800b3fa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800b3d2:	4b57      	ldr	r3, [pc, #348]	; (800b530 <RCCEx_PLLSAI1_Config+0x1e4>)
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d10f      	bne.n	800b3fe <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800b3de:	4b54      	ldr	r3, [pc, #336]	; (800b530 <RCCEx_PLLSAI1_Config+0x1e4>)
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d109      	bne.n	800b3fe <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800b3ea:	2301      	movs	r3, #1
 800b3ec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b3ee:	e006      	b.n	800b3fe <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800b3f0:	2301      	movs	r3, #1
 800b3f2:	73fb      	strb	r3, [r7, #15]
      break;
 800b3f4:	e004      	b.n	800b400 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800b3f6:	bf00      	nop
 800b3f8:	e002      	b.n	800b400 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800b3fa:	bf00      	nop
 800b3fc:	e000      	b.n	800b400 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800b3fe:	bf00      	nop
    }

    if(status == HAL_OK)
 800b400:	7bfb      	ldrb	r3, [r7, #15]
 800b402:	2b00      	cmp	r3, #0
 800b404:	d10d      	bne.n	800b422 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800b406:	4b4a      	ldr	r3, [pc, #296]	; (800b530 <RCCEx_PLLSAI1_Config+0x1e4>)
 800b408:	68db      	ldr	r3, [r3, #12]
 800b40a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	6819      	ldr	r1, [r3, #0]
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	685b      	ldr	r3, [r3, #4]
 800b416:	3b01      	subs	r3, #1
 800b418:	011b      	lsls	r3, r3, #4
 800b41a:	430b      	orrs	r3, r1
 800b41c:	4944      	ldr	r1, [pc, #272]	; (800b530 <RCCEx_PLLSAI1_Config+0x1e4>)
 800b41e:	4313      	orrs	r3, r2
 800b420:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800b422:	7bfb      	ldrb	r3, [r7, #15]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d17d      	bne.n	800b524 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800b428:	4b41      	ldr	r3, [pc, #260]	; (800b530 <RCCEx_PLLSAI1_Config+0x1e4>)
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	4a40      	ldr	r2, [pc, #256]	; (800b530 <RCCEx_PLLSAI1_Config+0x1e4>)
 800b42e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b432:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b434:	f7fc fb02 	bl	8007a3c <HAL_GetTick>
 800b438:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800b43a:	e009      	b.n	800b450 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800b43c:	f7fc fafe 	bl	8007a3c <HAL_GetTick>
 800b440:	4602      	mov	r2, r0
 800b442:	68bb      	ldr	r3, [r7, #8]
 800b444:	1ad3      	subs	r3, r2, r3
 800b446:	2b02      	cmp	r3, #2
 800b448:	d902      	bls.n	800b450 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800b44a:	2303      	movs	r3, #3
 800b44c:	73fb      	strb	r3, [r7, #15]
        break;
 800b44e:	e005      	b.n	800b45c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800b450:	4b37      	ldr	r3, [pc, #220]	; (800b530 <RCCEx_PLLSAI1_Config+0x1e4>)
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d1ef      	bne.n	800b43c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800b45c:	7bfb      	ldrb	r3, [r7, #15]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d160      	bne.n	800b524 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800b462:	683b      	ldr	r3, [r7, #0]
 800b464:	2b00      	cmp	r3, #0
 800b466:	d111      	bne.n	800b48c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800b468:	4b31      	ldr	r3, [pc, #196]	; (800b530 <RCCEx_PLLSAI1_Config+0x1e4>)
 800b46a:	691b      	ldr	r3, [r3, #16]
 800b46c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800b470:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b474:	687a      	ldr	r2, [r7, #4]
 800b476:	6892      	ldr	r2, [r2, #8]
 800b478:	0211      	lsls	r1, r2, #8
 800b47a:	687a      	ldr	r2, [r7, #4]
 800b47c:	68d2      	ldr	r2, [r2, #12]
 800b47e:	0912      	lsrs	r2, r2, #4
 800b480:	0452      	lsls	r2, r2, #17
 800b482:	430a      	orrs	r2, r1
 800b484:	492a      	ldr	r1, [pc, #168]	; (800b530 <RCCEx_PLLSAI1_Config+0x1e4>)
 800b486:	4313      	orrs	r3, r2
 800b488:	610b      	str	r3, [r1, #16]
 800b48a:	e027      	b.n	800b4dc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800b48c:	683b      	ldr	r3, [r7, #0]
 800b48e:	2b01      	cmp	r3, #1
 800b490:	d112      	bne.n	800b4b8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800b492:	4b27      	ldr	r3, [pc, #156]	; (800b530 <RCCEx_PLLSAI1_Config+0x1e4>)
 800b494:	691b      	ldr	r3, [r3, #16]
 800b496:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800b49a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800b49e:	687a      	ldr	r2, [r7, #4]
 800b4a0:	6892      	ldr	r2, [r2, #8]
 800b4a2:	0211      	lsls	r1, r2, #8
 800b4a4:	687a      	ldr	r2, [r7, #4]
 800b4a6:	6912      	ldr	r2, [r2, #16]
 800b4a8:	0852      	lsrs	r2, r2, #1
 800b4aa:	3a01      	subs	r2, #1
 800b4ac:	0552      	lsls	r2, r2, #21
 800b4ae:	430a      	orrs	r2, r1
 800b4b0:	491f      	ldr	r1, [pc, #124]	; (800b530 <RCCEx_PLLSAI1_Config+0x1e4>)
 800b4b2:	4313      	orrs	r3, r2
 800b4b4:	610b      	str	r3, [r1, #16]
 800b4b6:	e011      	b.n	800b4dc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800b4b8:	4b1d      	ldr	r3, [pc, #116]	; (800b530 <RCCEx_PLLSAI1_Config+0x1e4>)
 800b4ba:	691b      	ldr	r3, [r3, #16]
 800b4bc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800b4c0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800b4c4:	687a      	ldr	r2, [r7, #4]
 800b4c6:	6892      	ldr	r2, [r2, #8]
 800b4c8:	0211      	lsls	r1, r2, #8
 800b4ca:	687a      	ldr	r2, [r7, #4]
 800b4cc:	6952      	ldr	r2, [r2, #20]
 800b4ce:	0852      	lsrs	r2, r2, #1
 800b4d0:	3a01      	subs	r2, #1
 800b4d2:	0652      	lsls	r2, r2, #25
 800b4d4:	430a      	orrs	r2, r1
 800b4d6:	4916      	ldr	r1, [pc, #88]	; (800b530 <RCCEx_PLLSAI1_Config+0x1e4>)
 800b4d8:	4313      	orrs	r3, r2
 800b4da:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800b4dc:	4b14      	ldr	r3, [pc, #80]	; (800b530 <RCCEx_PLLSAI1_Config+0x1e4>)
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	4a13      	ldr	r2, [pc, #76]	; (800b530 <RCCEx_PLLSAI1_Config+0x1e4>)
 800b4e2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b4e6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b4e8:	f7fc faa8 	bl	8007a3c <HAL_GetTick>
 800b4ec:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800b4ee:	e009      	b.n	800b504 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800b4f0:	f7fc faa4 	bl	8007a3c <HAL_GetTick>
 800b4f4:	4602      	mov	r2, r0
 800b4f6:	68bb      	ldr	r3, [r7, #8]
 800b4f8:	1ad3      	subs	r3, r2, r3
 800b4fa:	2b02      	cmp	r3, #2
 800b4fc:	d902      	bls.n	800b504 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800b4fe:	2303      	movs	r3, #3
 800b500:	73fb      	strb	r3, [r7, #15]
          break;
 800b502:	e005      	b.n	800b510 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800b504:	4b0a      	ldr	r3, [pc, #40]	; (800b530 <RCCEx_PLLSAI1_Config+0x1e4>)
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d0ef      	beq.n	800b4f0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800b510:	7bfb      	ldrb	r3, [r7, #15]
 800b512:	2b00      	cmp	r3, #0
 800b514:	d106      	bne.n	800b524 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800b516:	4b06      	ldr	r3, [pc, #24]	; (800b530 <RCCEx_PLLSAI1_Config+0x1e4>)
 800b518:	691a      	ldr	r2, [r3, #16]
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	699b      	ldr	r3, [r3, #24]
 800b51e:	4904      	ldr	r1, [pc, #16]	; (800b530 <RCCEx_PLLSAI1_Config+0x1e4>)
 800b520:	4313      	orrs	r3, r2
 800b522:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800b524:	7bfb      	ldrb	r3, [r7, #15]
}
 800b526:	4618      	mov	r0, r3
 800b528:	3710      	adds	r7, #16
 800b52a:	46bd      	mov	sp, r7
 800b52c:	bd80      	pop	{r7, pc}
 800b52e:	bf00      	nop
 800b530:	40021000 	.word	0x40021000

0800b534 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800b534:	b580      	push	{r7, lr}
 800b536:	b084      	sub	sp, #16
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]
 800b53c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b53e:	2300      	movs	r3, #0
 800b540:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800b542:	4b6a      	ldr	r3, [pc, #424]	; (800b6ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800b544:	68db      	ldr	r3, [r3, #12]
 800b546:	f003 0303 	and.w	r3, r3, #3
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d018      	beq.n	800b580 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800b54e:	4b67      	ldr	r3, [pc, #412]	; (800b6ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800b550:	68db      	ldr	r3, [r3, #12]
 800b552:	f003 0203 	and.w	r2, r3, #3
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	429a      	cmp	r2, r3
 800b55c:	d10d      	bne.n	800b57a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	681b      	ldr	r3, [r3, #0]
       ||
 800b562:	2b00      	cmp	r3, #0
 800b564:	d009      	beq.n	800b57a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800b566:	4b61      	ldr	r3, [pc, #388]	; (800b6ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800b568:	68db      	ldr	r3, [r3, #12]
 800b56a:	091b      	lsrs	r3, r3, #4
 800b56c:	f003 0307 	and.w	r3, r3, #7
 800b570:	1c5a      	adds	r2, r3, #1
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	685b      	ldr	r3, [r3, #4]
       ||
 800b576:	429a      	cmp	r2, r3
 800b578:	d047      	beq.n	800b60a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800b57a:	2301      	movs	r3, #1
 800b57c:	73fb      	strb	r3, [r7, #15]
 800b57e:	e044      	b.n	800b60a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	2b03      	cmp	r3, #3
 800b586:	d018      	beq.n	800b5ba <RCCEx_PLLSAI2_Config+0x86>
 800b588:	2b03      	cmp	r3, #3
 800b58a:	d825      	bhi.n	800b5d8 <RCCEx_PLLSAI2_Config+0xa4>
 800b58c:	2b01      	cmp	r3, #1
 800b58e:	d002      	beq.n	800b596 <RCCEx_PLLSAI2_Config+0x62>
 800b590:	2b02      	cmp	r3, #2
 800b592:	d009      	beq.n	800b5a8 <RCCEx_PLLSAI2_Config+0x74>
 800b594:	e020      	b.n	800b5d8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800b596:	4b55      	ldr	r3, [pc, #340]	; (800b6ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	f003 0302 	and.w	r3, r3, #2
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d11d      	bne.n	800b5de <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800b5a2:	2301      	movs	r3, #1
 800b5a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b5a6:	e01a      	b.n	800b5de <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800b5a8:	4b50      	ldr	r3, [pc, #320]	; (800b6ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d116      	bne.n	800b5e2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800b5b4:	2301      	movs	r3, #1
 800b5b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b5b8:	e013      	b.n	800b5e2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800b5ba:	4b4c      	ldr	r3, [pc, #304]	; (800b6ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d10f      	bne.n	800b5e6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800b5c6:	4b49      	ldr	r3, [pc, #292]	; (800b6ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d109      	bne.n	800b5e6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800b5d2:	2301      	movs	r3, #1
 800b5d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b5d6:	e006      	b.n	800b5e6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800b5d8:	2301      	movs	r3, #1
 800b5da:	73fb      	strb	r3, [r7, #15]
      break;
 800b5dc:	e004      	b.n	800b5e8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800b5de:	bf00      	nop
 800b5e0:	e002      	b.n	800b5e8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800b5e2:	bf00      	nop
 800b5e4:	e000      	b.n	800b5e8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800b5e6:	bf00      	nop
    }

    if(status == HAL_OK)
 800b5e8:	7bfb      	ldrb	r3, [r7, #15]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d10d      	bne.n	800b60a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800b5ee:	4b3f      	ldr	r3, [pc, #252]	; (800b6ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800b5f0:	68db      	ldr	r3, [r3, #12]
 800b5f2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	6819      	ldr	r1, [r3, #0]
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	685b      	ldr	r3, [r3, #4]
 800b5fe:	3b01      	subs	r3, #1
 800b600:	011b      	lsls	r3, r3, #4
 800b602:	430b      	orrs	r3, r1
 800b604:	4939      	ldr	r1, [pc, #228]	; (800b6ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800b606:	4313      	orrs	r3, r2
 800b608:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800b60a:	7bfb      	ldrb	r3, [r7, #15]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d167      	bne.n	800b6e0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800b610:	4b36      	ldr	r3, [pc, #216]	; (800b6ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	4a35      	ldr	r2, [pc, #212]	; (800b6ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800b616:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b61a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b61c:	f7fc fa0e 	bl	8007a3c <HAL_GetTick>
 800b620:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800b622:	e009      	b.n	800b638 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800b624:	f7fc fa0a 	bl	8007a3c <HAL_GetTick>
 800b628:	4602      	mov	r2, r0
 800b62a:	68bb      	ldr	r3, [r7, #8]
 800b62c:	1ad3      	subs	r3, r2, r3
 800b62e:	2b02      	cmp	r3, #2
 800b630:	d902      	bls.n	800b638 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800b632:	2303      	movs	r3, #3
 800b634:	73fb      	strb	r3, [r7, #15]
        break;
 800b636:	e005      	b.n	800b644 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800b638:	4b2c      	ldr	r3, [pc, #176]	; (800b6ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b640:	2b00      	cmp	r3, #0
 800b642:	d1ef      	bne.n	800b624 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800b644:	7bfb      	ldrb	r3, [r7, #15]
 800b646:	2b00      	cmp	r3, #0
 800b648:	d14a      	bne.n	800b6e0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800b64a:	683b      	ldr	r3, [r7, #0]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d111      	bne.n	800b674 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800b650:	4b26      	ldr	r3, [pc, #152]	; (800b6ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800b652:	695b      	ldr	r3, [r3, #20]
 800b654:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800b658:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b65c:	687a      	ldr	r2, [r7, #4]
 800b65e:	6892      	ldr	r2, [r2, #8]
 800b660:	0211      	lsls	r1, r2, #8
 800b662:	687a      	ldr	r2, [r7, #4]
 800b664:	68d2      	ldr	r2, [r2, #12]
 800b666:	0912      	lsrs	r2, r2, #4
 800b668:	0452      	lsls	r2, r2, #17
 800b66a:	430a      	orrs	r2, r1
 800b66c:	491f      	ldr	r1, [pc, #124]	; (800b6ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800b66e:	4313      	orrs	r3, r2
 800b670:	614b      	str	r3, [r1, #20]
 800b672:	e011      	b.n	800b698 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800b674:	4b1d      	ldr	r3, [pc, #116]	; (800b6ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800b676:	695b      	ldr	r3, [r3, #20]
 800b678:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800b67c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800b680:	687a      	ldr	r2, [r7, #4]
 800b682:	6892      	ldr	r2, [r2, #8]
 800b684:	0211      	lsls	r1, r2, #8
 800b686:	687a      	ldr	r2, [r7, #4]
 800b688:	6912      	ldr	r2, [r2, #16]
 800b68a:	0852      	lsrs	r2, r2, #1
 800b68c:	3a01      	subs	r2, #1
 800b68e:	0652      	lsls	r2, r2, #25
 800b690:	430a      	orrs	r2, r1
 800b692:	4916      	ldr	r1, [pc, #88]	; (800b6ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800b694:	4313      	orrs	r3, r2
 800b696:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800b698:	4b14      	ldr	r3, [pc, #80]	; (800b6ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	4a13      	ldr	r2, [pc, #76]	; (800b6ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800b69e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b6a2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b6a4:	f7fc f9ca 	bl	8007a3c <HAL_GetTick>
 800b6a8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800b6aa:	e009      	b.n	800b6c0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800b6ac:	f7fc f9c6 	bl	8007a3c <HAL_GetTick>
 800b6b0:	4602      	mov	r2, r0
 800b6b2:	68bb      	ldr	r3, [r7, #8]
 800b6b4:	1ad3      	subs	r3, r2, r3
 800b6b6:	2b02      	cmp	r3, #2
 800b6b8:	d902      	bls.n	800b6c0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800b6ba:	2303      	movs	r3, #3
 800b6bc:	73fb      	strb	r3, [r7, #15]
          break;
 800b6be:	e005      	b.n	800b6cc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800b6c0:	4b0a      	ldr	r3, [pc, #40]	; (800b6ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d0ef      	beq.n	800b6ac <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800b6cc:	7bfb      	ldrb	r3, [r7, #15]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d106      	bne.n	800b6e0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800b6d2:	4b06      	ldr	r3, [pc, #24]	; (800b6ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800b6d4:	695a      	ldr	r2, [r3, #20]
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	695b      	ldr	r3, [r3, #20]
 800b6da:	4904      	ldr	r1, [pc, #16]	; (800b6ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800b6dc:	4313      	orrs	r3, r2
 800b6de:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800b6e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	3710      	adds	r7, #16
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	bd80      	pop	{r7, pc}
 800b6ea:	bf00      	nop
 800b6ec:	40021000 	.word	0x40021000

0800b6f0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b084      	sub	sp, #16
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800b6f8:	2301      	movs	r3, #1
 800b6fa:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d06c      	beq.n	800b7dc <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800b708:	b2db      	uxtb	r3, r3
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d106      	bne.n	800b71c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	2200      	movs	r2, #0
 800b712:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800b716:	6878      	ldr	r0, [r7, #4]
 800b718:	f7fa ff54 	bl	80065c4 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	2202      	movs	r2, #2
 800b720:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	22ca      	movs	r2, #202	; 0xca
 800b72a:	625a      	str	r2, [r3, #36]	; 0x24
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	2253      	movs	r2, #83	; 0x53
 800b732:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800b734:	6878      	ldr	r0, [r7, #4]
 800b736:	f000 fa49 	bl	800bbcc <RTC_EnterInitMode>
 800b73a:	4603      	mov	r3, r0
 800b73c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800b73e:	7bfb      	ldrb	r3, [r7, #15]
 800b740:	2b00      	cmp	r3, #0
 800b742:	d14b      	bne.n	800b7dc <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	689b      	ldr	r3, [r3, #8]
 800b74a:	687a      	ldr	r2, [r7, #4]
 800b74c:	6812      	ldr	r2, [r2, #0]
 800b74e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b752:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b756:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	6899      	ldr	r1, [r3, #8]
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	685a      	ldr	r2, [r3, #4]
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	691b      	ldr	r3, [r3, #16]
 800b766:	431a      	orrs	r2, r3
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	699b      	ldr	r3, [r3, #24]
 800b76c:	431a      	orrs	r2, r3
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	430a      	orrs	r2, r1
 800b774:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	687a      	ldr	r2, [r7, #4]
 800b77c:	68d2      	ldr	r2, [r2, #12]
 800b77e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	6919      	ldr	r1, [r3, #16]
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	689b      	ldr	r3, [r3, #8]
 800b78a:	041a      	lsls	r2, r3, #16
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	430a      	orrs	r2, r1
 800b792:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800b794:	6878      	ldr	r0, [r7, #4]
 800b796:	f000 fa4d 	bl	800bc34 <RTC_ExitInitMode>
 800b79a:	4603      	mov	r3, r0
 800b79c:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800b79e:	7bfb      	ldrb	r3, [r7, #15]
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d11b      	bne.n	800b7dc <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	f022 0203 	bic.w	r2, r2, #3
 800b7b2:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	69da      	ldr	r2, [r3, #28]
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	695b      	ldr	r3, [r3, #20]
 800b7c2:	431a      	orrs	r2, r3
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	430a      	orrs	r2, r1
 800b7ca:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	22ff      	movs	r2, #255	; 0xff
 800b7d2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	2201      	movs	r2, #1
 800b7d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 800b7dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7de:	4618      	mov	r0, r3
 800b7e0:	3710      	adds	r7, #16
 800b7e2:	46bd      	mov	sp, r7
 800b7e4:	bd80      	pop	{r7, pc}

0800b7e6 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800b7e6:	b590      	push	{r4, r7, lr}
 800b7e8:	b087      	sub	sp, #28
 800b7ea:	af00      	add	r7, sp, #0
 800b7ec:	60f8      	str	r0, [r7, #12]
 800b7ee:	60b9      	str	r1, [r7, #8]
 800b7f0:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b7f8:	2b01      	cmp	r3, #1
 800b7fa:	d101      	bne.n	800b800 <HAL_RTC_SetTime+0x1a>
 800b7fc:	2302      	movs	r3, #2
 800b7fe:	e08b      	b.n	800b918 <HAL_RTC_SetTime+0x132>
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	2201      	movs	r2, #1
 800b804:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	2202      	movs	r2, #2
 800b80c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	22ca      	movs	r2, #202	; 0xca
 800b816:	625a      	str	r2, [r3, #36]	; 0x24
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	2253      	movs	r2, #83	; 0x53
 800b81e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800b820:	68f8      	ldr	r0, [r7, #12]
 800b822:	f000 f9d3 	bl	800bbcc <RTC_EnterInitMode>
 800b826:	4603      	mov	r3, r0
 800b828:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800b82a:	7cfb      	ldrb	r3, [r7, #19]
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d163      	bne.n	800b8f8 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d126      	bne.n	800b884 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	689b      	ldr	r3, [r3, #8]
 800b83c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b840:	2b00      	cmp	r3, #0
 800b842:	d102      	bne.n	800b84a <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800b844:	68bb      	ldr	r3, [r7, #8]
 800b846:	2200      	movs	r2, #0
 800b848:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800b84a:	68bb      	ldr	r3, [r7, #8]
 800b84c:	781b      	ldrb	r3, [r3, #0]
 800b84e:	4618      	mov	r0, r3
 800b850:	f000 fa2e 	bl	800bcb0 <RTC_ByteToBcd2>
 800b854:	4603      	mov	r3, r0
 800b856:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b858:	68bb      	ldr	r3, [r7, #8]
 800b85a:	785b      	ldrb	r3, [r3, #1]
 800b85c:	4618      	mov	r0, r3
 800b85e:	f000 fa27 	bl	800bcb0 <RTC_ByteToBcd2>
 800b862:	4603      	mov	r3, r0
 800b864:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800b866:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800b868:	68bb      	ldr	r3, [r7, #8]
 800b86a:	789b      	ldrb	r3, [r3, #2]
 800b86c:	4618      	mov	r0, r3
 800b86e:	f000 fa1f 	bl	800bcb0 <RTC_ByteToBcd2>
 800b872:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b874:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800b878:	68bb      	ldr	r3, [r7, #8]
 800b87a:	78db      	ldrb	r3, [r3, #3]
 800b87c:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800b87e:	4313      	orrs	r3, r2
 800b880:	617b      	str	r3, [r7, #20]
 800b882:	e018      	b.n	800b8b6 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	689b      	ldr	r3, [r3, #8]
 800b88a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d102      	bne.n	800b898 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800b892:	68bb      	ldr	r3, [r7, #8]
 800b894:	2200      	movs	r2, #0
 800b896:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800b898:	68bb      	ldr	r3, [r7, #8]
 800b89a:	781b      	ldrb	r3, [r3, #0]
 800b89c:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b89e:	68bb      	ldr	r3, [r7, #8]
 800b8a0:	785b      	ldrb	r3, [r3, #1]
 800b8a2:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800b8a4:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800b8a6:	68ba      	ldr	r2, [r7, #8]
 800b8a8:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b8aa:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800b8ac:	68bb      	ldr	r3, [r7, #8]
 800b8ae:	78db      	ldrb	r3, [r3, #3]
 800b8b0:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800b8b2:	4313      	orrs	r3, r2
 800b8b4:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	681a      	ldr	r2, [r3, #0]
 800b8ba:	697b      	ldr	r3, [r7, #20]
 800b8bc:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800b8c0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800b8c4:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	689a      	ldr	r2, [r3, #8]
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b8d4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	6899      	ldr	r1, [r3, #8]
 800b8dc:	68bb      	ldr	r3, [r7, #8]
 800b8de:	68da      	ldr	r2, [r3, #12]
 800b8e0:	68bb      	ldr	r3, [r7, #8]
 800b8e2:	691b      	ldr	r3, [r3, #16]
 800b8e4:	431a      	orrs	r2, r3
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	430a      	orrs	r2, r1
 800b8ec:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800b8ee:	68f8      	ldr	r0, [r7, #12]
 800b8f0:	f000 f9a0 	bl	800bc34 <RTC_ExitInitMode>
 800b8f4:	4603      	mov	r3, r0
 800b8f6:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	22ff      	movs	r2, #255	; 0xff
 800b8fe:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800b900:	7cfb      	ldrb	r3, [r7, #19]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d103      	bne.n	800b90e <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	2201      	movs	r2, #1
 800b90a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	2200      	movs	r2, #0
 800b912:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800b916:	7cfb      	ldrb	r3, [r7, #19]
}
 800b918:	4618      	mov	r0, r3
 800b91a:	371c      	adds	r7, #28
 800b91c:	46bd      	mov	sp, r7
 800b91e:	bd90      	pop	{r4, r7, pc}

0800b920 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800b920:	b580      	push	{r7, lr}
 800b922:	b086      	sub	sp, #24
 800b924:	af00      	add	r7, sp, #0
 800b926:	60f8      	str	r0, [r7, #12]
 800b928:	60b9      	str	r1, [r7, #8]
 800b92a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b932:	68bb      	ldr	r3, [r7, #8]
 800b934:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	691b      	ldr	r3, [r3, #16]
 800b93c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800b940:	68bb      	ldr	r3, [r7, #8]
 800b942:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800b94e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800b952:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 800b954:	697b      	ldr	r3, [r7, #20]
 800b956:	0c1b      	lsrs	r3, r3, #16
 800b958:	b2db      	uxtb	r3, r3
 800b95a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b95e:	b2da      	uxtb	r2, r3
 800b960:	68bb      	ldr	r3, [r7, #8]
 800b962:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800b964:	697b      	ldr	r3, [r7, #20]
 800b966:	0a1b      	lsrs	r3, r3, #8
 800b968:	b2db      	uxtb	r3, r3
 800b96a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b96e:	b2da      	uxtb	r2, r3
 800b970:	68bb      	ldr	r3, [r7, #8]
 800b972:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 800b974:	697b      	ldr	r3, [r7, #20]
 800b976:	b2db      	uxtb	r3, r3
 800b978:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b97c:	b2da      	uxtb	r2, r3
 800b97e:	68bb      	ldr	r3, [r7, #8]
 800b980:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800b982:	697b      	ldr	r3, [r7, #20]
 800b984:	0d9b      	lsrs	r3, r3, #22
 800b986:	b2db      	uxtb	r3, r3
 800b988:	f003 0301 	and.w	r3, r3, #1
 800b98c:	b2da      	uxtb	r2, r3
 800b98e:	68bb      	ldr	r3, [r7, #8]
 800b990:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d11a      	bne.n	800b9ce <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800b998:	68bb      	ldr	r3, [r7, #8]
 800b99a:	781b      	ldrb	r3, [r3, #0]
 800b99c:	4618      	mov	r0, r3
 800b99e:	f000 f9a7 	bl	800bcf0 <RTC_Bcd2ToByte>
 800b9a2:	4603      	mov	r3, r0
 800b9a4:	461a      	mov	r2, r3
 800b9a6:	68bb      	ldr	r3, [r7, #8]
 800b9a8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800b9aa:	68bb      	ldr	r3, [r7, #8]
 800b9ac:	785b      	ldrb	r3, [r3, #1]
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	f000 f99e 	bl	800bcf0 <RTC_Bcd2ToByte>
 800b9b4:	4603      	mov	r3, r0
 800b9b6:	461a      	mov	r2, r3
 800b9b8:	68bb      	ldr	r3, [r7, #8]
 800b9ba:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800b9bc:	68bb      	ldr	r3, [r7, #8]
 800b9be:	789b      	ldrb	r3, [r3, #2]
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	f000 f995 	bl	800bcf0 <RTC_Bcd2ToByte>
 800b9c6:	4603      	mov	r3, r0
 800b9c8:	461a      	mov	r2, r3
 800b9ca:	68bb      	ldr	r3, [r7, #8]
 800b9cc:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800b9ce:	2300      	movs	r3, #0
}
 800b9d0:	4618      	mov	r0, r3
 800b9d2:	3718      	adds	r7, #24
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	bd80      	pop	{r7, pc}

0800b9d8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800b9d8:	b590      	push	{r4, r7, lr}
 800b9da:	b087      	sub	sp, #28
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	60f8      	str	r0, [r7, #12]
 800b9e0:	60b9      	str	r1, [r7, #8]
 800b9e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b9ea:	2b01      	cmp	r3, #1
 800b9ec:	d101      	bne.n	800b9f2 <HAL_RTC_SetDate+0x1a>
 800b9ee:	2302      	movs	r3, #2
 800b9f0:	e075      	b.n	800bade <HAL_RTC_SetDate+0x106>
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	2201      	movs	r2, #1
 800b9f6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	2202      	movs	r2, #2
 800b9fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d10e      	bne.n	800ba26 <HAL_RTC_SetDate+0x4e>
 800ba08:	68bb      	ldr	r3, [r7, #8]
 800ba0a:	785b      	ldrb	r3, [r3, #1]
 800ba0c:	f003 0310 	and.w	r3, r3, #16
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d008      	beq.n	800ba26 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800ba14:	68bb      	ldr	r3, [r7, #8]
 800ba16:	785b      	ldrb	r3, [r3, #1]
 800ba18:	f023 0310 	bic.w	r3, r3, #16
 800ba1c:	b2db      	uxtb	r3, r3
 800ba1e:	330a      	adds	r3, #10
 800ba20:	b2da      	uxtb	r2, r3
 800ba22:	68bb      	ldr	r3, [r7, #8]
 800ba24:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d11c      	bne.n	800ba66 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800ba2c:	68bb      	ldr	r3, [r7, #8]
 800ba2e:	78db      	ldrb	r3, [r3, #3]
 800ba30:	4618      	mov	r0, r3
 800ba32:	f000 f93d 	bl	800bcb0 <RTC_ByteToBcd2>
 800ba36:	4603      	mov	r3, r0
 800ba38:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800ba3a:	68bb      	ldr	r3, [r7, #8]
 800ba3c:	785b      	ldrb	r3, [r3, #1]
 800ba3e:	4618      	mov	r0, r3
 800ba40:	f000 f936 	bl	800bcb0 <RTC_ByteToBcd2>
 800ba44:	4603      	mov	r3, r0
 800ba46:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800ba48:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800ba4a:	68bb      	ldr	r3, [r7, #8]
 800ba4c:	789b      	ldrb	r3, [r3, #2]
 800ba4e:	4618      	mov	r0, r3
 800ba50:	f000 f92e 	bl	800bcb0 <RTC_ByteToBcd2>
 800ba54:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800ba56:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800ba5a:	68bb      	ldr	r3, [r7, #8]
 800ba5c:	781b      	ldrb	r3, [r3, #0]
 800ba5e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800ba60:	4313      	orrs	r3, r2
 800ba62:	617b      	str	r3, [r7, #20]
 800ba64:	e00e      	b.n	800ba84 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800ba66:	68bb      	ldr	r3, [r7, #8]
 800ba68:	78db      	ldrb	r3, [r3, #3]
 800ba6a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800ba6c:	68bb      	ldr	r3, [r7, #8]
 800ba6e:	785b      	ldrb	r3, [r3, #1]
 800ba70:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800ba72:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800ba74:	68ba      	ldr	r2, [r7, #8]
 800ba76:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800ba78:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800ba7a:	68bb      	ldr	r3, [r7, #8]
 800ba7c:	781b      	ldrb	r3, [r3, #0]
 800ba7e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800ba80:	4313      	orrs	r3, r2
 800ba82:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	22ca      	movs	r2, #202	; 0xca
 800ba8a:	625a      	str	r2, [r3, #36]	; 0x24
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	2253      	movs	r2, #83	; 0x53
 800ba92:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800ba94:	68f8      	ldr	r0, [r7, #12]
 800ba96:	f000 f899 	bl	800bbcc <RTC_EnterInitMode>
 800ba9a:	4603      	mov	r3, r0
 800ba9c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800ba9e:	7cfb      	ldrb	r3, [r7, #19]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d10c      	bne.n	800babe <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	681a      	ldr	r2, [r3, #0]
 800baa8:	697b      	ldr	r3, [r7, #20]
 800baaa:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800baae:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800bab2:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800bab4:	68f8      	ldr	r0, [r7, #12]
 800bab6:	f000 f8bd 	bl	800bc34 <RTC_ExitInitMode>
 800baba:	4603      	mov	r3, r0
 800babc:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	22ff      	movs	r2, #255	; 0xff
 800bac4:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800bac6:	7cfb      	ldrb	r3, [r7, #19]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d103      	bne.n	800bad4 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	2201      	movs	r2, #1
 800bad0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	2200      	movs	r2, #0
 800bad8:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800badc:	7cfb      	ldrb	r3, [r7, #19]
}
 800bade:	4618      	mov	r0, r3
 800bae0:	371c      	adds	r7, #28
 800bae2:	46bd      	mov	sp, r7
 800bae4:	bd90      	pop	{r4, r7, pc}

0800bae6 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800bae6:	b580      	push	{r7, lr}
 800bae8:	b086      	sub	sp, #24
 800baea:	af00      	add	r7, sp, #0
 800baec:	60f8      	str	r0, [r7, #12]
 800baee:	60b9      	str	r1, [r7, #8]
 800baf0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	685b      	ldr	r3, [r3, #4]
 800baf8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800bafc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800bb00:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800bb02:	697b      	ldr	r3, [r7, #20]
 800bb04:	0c1b      	lsrs	r3, r3, #16
 800bb06:	b2da      	uxtb	r2, r3
 800bb08:	68bb      	ldr	r3, [r7, #8]
 800bb0a:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800bb0c:	697b      	ldr	r3, [r7, #20]
 800bb0e:	0a1b      	lsrs	r3, r3, #8
 800bb10:	b2db      	uxtb	r3, r3
 800bb12:	f003 031f 	and.w	r3, r3, #31
 800bb16:	b2da      	uxtb	r2, r3
 800bb18:	68bb      	ldr	r3, [r7, #8]
 800bb1a:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800bb1c:	697b      	ldr	r3, [r7, #20]
 800bb1e:	b2db      	uxtb	r3, r3
 800bb20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bb24:	b2da      	uxtb	r2, r3
 800bb26:	68bb      	ldr	r3, [r7, #8]
 800bb28:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 800bb2a:	697b      	ldr	r3, [r7, #20]
 800bb2c:	0b5b      	lsrs	r3, r3, #13
 800bb2e:	b2db      	uxtb	r3, r3
 800bb30:	f003 0307 	and.w	r3, r3, #7
 800bb34:	b2da      	uxtb	r2, r3
 800bb36:	68bb      	ldr	r3, [r7, #8]
 800bb38:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d11a      	bne.n	800bb76 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800bb40:	68bb      	ldr	r3, [r7, #8]
 800bb42:	78db      	ldrb	r3, [r3, #3]
 800bb44:	4618      	mov	r0, r3
 800bb46:	f000 f8d3 	bl	800bcf0 <RTC_Bcd2ToByte>
 800bb4a:	4603      	mov	r3, r0
 800bb4c:	461a      	mov	r2, r3
 800bb4e:	68bb      	ldr	r3, [r7, #8]
 800bb50:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800bb52:	68bb      	ldr	r3, [r7, #8]
 800bb54:	785b      	ldrb	r3, [r3, #1]
 800bb56:	4618      	mov	r0, r3
 800bb58:	f000 f8ca 	bl	800bcf0 <RTC_Bcd2ToByte>
 800bb5c:	4603      	mov	r3, r0
 800bb5e:	461a      	mov	r2, r3
 800bb60:	68bb      	ldr	r3, [r7, #8]
 800bb62:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800bb64:	68bb      	ldr	r3, [r7, #8]
 800bb66:	789b      	ldrb	r3, [r3, #2]
 800bb68:	4618      	mov	r0, r3
 800bb6a:	f000 f8c1 	bl	800bcf0 <RTC_Bcd2ToByte>
 800bb6e:	4603      	mov	r3, r0
 800bb70:	461a      	mov	r2, r3
 800bb72:	68bb      	ldr	r3, [r7, #8]
 800bb74:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800bb76:	2300      	movs	r3, #0
}
 800bb78:	4618      	mov	r0, r3
 800bb7a:	3718      	adds	r7, #24
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	bd80      	pop	{r7, pc}

0800bb80 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800bb80:	b580      	push	{r7, lr}
 800bb82:	b084      	sub	sp, #16
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	68da      	ldr	r2, [r3, #12]
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800bb96:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 800bb98:	f7fb ff50 	bl	8007a3c <HAL_GetTick>
 800bb9c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800bb9e:	e009      	b.n	800bbb4 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800bba0:	f7fb ff4c 	bl	8007a3c <HAL_GetTick>
 800bba4:	4602      	mov	r2, r0
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	1ad3      	subs	r3, r2, r3
 800bbaa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bbae:	d901      	bls.n	800bbb4 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800bbb0:	2303      	movs	r3, #3
 800bbb2:	e007      	b.n	800bbc4 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	68db      	ldr	r3, [r3, #12]
 800bbba:	f003 0320 	and.w	r3, r3, #32
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d0ee      	beq.n	800bba0 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800bbc2:	2300      	movs	r3, #0
}
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	3710      	adds	r7, #16
 800bbc8:	46bd      	mov	sp, r7
 800bbca:	bd80      	pop	{r7, pc}

0800bbcc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800bbcc:	b580      	push	{r7, lr}
 800bbce:	b084      	sub	sp, #16
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	68db      	ldr	r3, [r3, #12]
 800bbde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d120      	bne.n	800bc28 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bbee:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800bbf0:	f7fb ff24 	bl	8007a3c <HAL_GetTick>
 800bbf4:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800bbf6:	e00d      	b.n	800bc14 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800bbf8:	f7fb ff20 	bl	8007a3c <HAL_GetTick>
 800bbfc:	4602      	mov	r2, r0
 800bbfe:	68bb      	ldr	r3, [r7, #8]
 800bc00:	1ad3      	subs	r3, r2, r3
 800bc02:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bc06:	d905      	bls.n	800bc14 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800bc08:	2303      	movs	r3, #3
 800bc0a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	2203      	movs	r2, #3
 800bc10:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	68db      	ldr	r3, [r3, #12]
 800bc1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d102      	bne.n	800bc28 <RTC_EnterInitMode+0x5c>
 800bc22:	7bfb      	ldrb	r3, [r7, #15]
 800bc24:	2b03      	cmp	r3, #3
 800bc26:	d1e7      	bne.n	800bbf8 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800bc28:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc2a:	4618      	mov	r0, r3
 800bc2c:	3710      	adds	r7, #16
 800bc2e:	46bd      	mov	sp, r7
 800bc30:	bd80      	pop	{r7, pc}
	...

0800bc34 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800bc34:	b580      	push	{r7, lr}
 800bc36:	b084      	sub	sp, #16
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bc3c:	2300      	movs	r3, #0
 800bc3e:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800bc40:	4b1a      	ldr	r3, [pc, #104]	; (800bcac <RTC_ExitInitMode+0x78>)
 800bc42:	68db      	ldr	r3, [r3, #12]
 800bc44:	4a19      	ldr	r2, [pc, #100]	; (800bcac <RTC_ExitInitMode+0x78>)
 800bc46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bc4a:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800bc4c:	4b17      	ldr	r3, [pc, #92]	; (800bcac <RTC_ExitInitMode+0x78>)
 800bc4e:	689b      	ldr	r3, [r3, #8]
 800bc50:	f003 0320 	and.w	r3, r3, #32
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d10c      	bne.n	800bc72 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800bc58:	6878      	ldr	r0, [r7, #4]
 800bc5a:	f7ff ff91 	bl	800bb80 <HAL_RTC_WaitForSynchro>
 800bc5e:	4603      	mov	r3, r0
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d01e      	beq.n	800bca2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	2203      	movs	r2, #3
 800bc68:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800bc6c:	2303      	movs	r3, #3
 800bc6e:	73fb      	strb	r3, [r7, #15]
 800bc70:	e017      	b.n	800bca2 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800bc72:	4b0e      	ldr	r3, [pc, #56]	; (800bcac <RTC_ExitInitMode+0x78>)
 800bc74:	689b      	ldr	r3, [r3, #8]
 800bc76:	4a0d      	ldr	r2, [pc, #52]	; (800bcac <RTC_ExitInitMode+0x78>)
 800bc78:	f023 0320 	bic.w	r3, r3, #32
 800bc7c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800bc7e:	6878      	ldr	r0, [r7, #4]
 800bc80:	f7ff ff7e 	bl	800bb80 <HAL_RTC_WaitForSynchro>
 800bc84:	4603      	mov	r3, r0
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d005      	beq.n	800bc96 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	2203      	movs	r2, #3
 800bc8e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800bc92:	2303      	movs	r3, #3
 800bc94:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800bc96:	4b05      	ldr	r3, [pc, #20]	; (800bcac <RTC_ExitInitMode+0x78>)
 800bc98:	689b      	ldr	r3, [r3, #8]
 800bc9a:	4a04      	ldr	r2, [pc, #16]	; (800bcac <RTC_ExitInitMode+0x78>)
 800bc9c:	f043 0320 	orr.w	r3, r3, #32
 800bca0:	6093      	str	r3, [r2, #8]
  }

  return status;
 800bca2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bca4:	4618      	mov	r0, r3
 800bca6:	3710      	adds	r7, #16
 800bca8:	46bd      	mov	sp, r7
 800bcaa:	bd80      	pop	{r7, pc}
 800bcac:	40002800 	.word	0x40002800

0800bcb0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800bcb0:	b480      	push	{r7}
 800bcb2:	b085      	sub	sp, #20
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	4603      	mov	r3, r0
 800bcb8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800bcba:	2300      	movs	r3, #0
 800bcbc:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 800bcbe:	79fb      	ldrb	r3, [r7, #7]
 800bcc0:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 800bcc2:	e005      	b.n	800bcd0 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	3301      	adds	r3, #1
 800bcc8:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 800bcca:	7afb      	ldrb	r3, [r7, #11]
 800bccc:	3b0a      	subs	r3, #10
 800bcce:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 800bcd0:	7afb      	ldrb	r3, [r7, #11]
 800bcd2:	2b09      	cmp	r3, #9
 800bcd4:	d8f6      	bhi.n	800bcc4 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	b2db      	uxtb	r3, r3
 800bcda:	011b      	lsls	r3, r3, #4
 800bcdc:	b2da      	uxtb	r2, r3
 800bcde:	7afb      	ldrb	r3, [r7, #11]
 800bce0:	4313      	orrs	r3, r2
 800bce2:	b2db      	uxtb	r3, r3
}
 800bce4:	4618      	mov	r0, r3
 800bce6:	3714      	adds	r7, #20
 800bce8:	46bd      	mov	sp, r7
 800bcea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcee:	4770      	bx	lr

0800bcf0 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800bcf0:	b480      	push	{r7}
 800bcf2:	b085      	sub	sp, #20
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	4603      	mov	r3, r0
 800bcf8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800bcfa:	79fb      	ldrb	r3, [r7, #7]
 800bcfc:	091b      	lsrs	r3, r3, #4
 800bcfe:	b2db      	uxtb	r3, r3
 800bd00:	461a      	mov	r2, r3
 800bd02:	0092      	lsls	r2, r2, #2
 800bd04:	4413      	add	r3, r2
 800bd06:	005b      	lsls	r3, r3, #1
 800bd08:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800bd0a:	79fb      	ldrb	r3, [r7, #7]
 800bd0c:	f003 030f 	and.w	r3, r3, #15
 800bd10:	b2da      	uxtb	r2, r3
 800bd12:	7bfb      	ldrb	r3, [r7, #15]
 800bd14:	4413      	add	r3, r2
 800bd16:	b2db      	uxtb	r3, r3
}
 800bd18:	4618      	mov	r0, r3
 800bd1a:	3714      	adds	r7, #20
 800bd1c:	46bd      	mov	sp, r7
 800bd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd22:	4770      	bx	lr

0800bd24 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800bd24:	b580      	push	{r7, lr}
 800bd26:	b084      	sub	sp, #16
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d101      	bne.n	800bd36 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800bd32:	2301      	movs	r3, #1
 800bd34:	e095      	b.n	800be62 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d108      	bne.n	800bd50 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	685b      	ldr	r3, [r3, #4]
 800bd42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bd46:	d009      	beq.n	800bd5c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	2200      	movs	r2, #0
 800bd4c:	61da      	str	r2, [r3, #28]
 800bd4e:	e005      	b.n	800bd5c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	2200      	movs	r2, #0
 800bd54:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	2200      	movs	r2, #0
 800bd5a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	2200      	movs	r2, #0
 800bd60:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800bd68:	b2db      	uxtb	r3, r3
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d106      	bne.n	800bd7c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	2200      	movs	r2, #0
 800bd72:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800bd76:	6878      	ldr	r0, [r7, #4]
 800bd78:	f7fa fc56 	bl	8006628 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	2202      	movs	r2, #2
 800bd80:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	681a      	ldr	r2, [r3, #0]
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bd92:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	68db      	ldr	r3, [r3, #12]
 800bd98:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bd9c:	d902      	bls.n	800bda4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800bd9e:	2300      	movs	r3, #0
 800bda0:	60fb      	str	r3, [r7, #12]
 800bda2:	e002      	b.n	800bdaa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800bda4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bda8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	68db      	ldr	r3, [r3, #12]
 800bdae:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800bdb2:	d007      	beq.n	800bdc4 <HAL_SPI_Init+0xa0>
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	68db      	ldr	r3, [r3, #12]
 800bdb8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bdbc:	d002      	beq.n	800bdc4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	2200      	movs	r2, #0
 800bdc2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	685b      	ldr	r3, [r3, #4]
 800bdc8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	689b      	ldr	r3, [r3, #8]
 800bdd0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800bdd4:	431a      	orrs	r2, r3
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	691b      	ldr	r3, [r3, #16]
 800bdda:	f003 0302 	and.w	r3, r3, #2
 800bdde:	431a      	orrs	r2, r3
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	695b      	ldr	r3, [r3, #20]
 800bde4:	f003 0301 	and.w	r3, r3, #1
 800bde8:	431a      	orrs	r2, r3
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	699b      	ldr	r3, [r3, #24]
 800bdee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bdf2:	431a      	orrs	r2, r3
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	69db      	ldr	r3, [r3, #28]
 800bdf8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bdfc:	431a      	orrs	r2, r3
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	6a1b      	ldr	r3, [r3, #32]
 800be02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be06:	ea42 0103 	orr.w	r1, r2, r3
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be0e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	430a      	orrs	r2, r1
 800be18:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	699b      	ldr	r3, [r3, #24]
 800be1e:	0c1b      	lsrs	r3, r3, #16
 800be20:	f003 0204 	and.w	r2, r3, #4
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be28:	f003 0310 	and.w	r3, r3, #16
 800be2c:	431a      	orrs	r2, r3
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be32:	f003 0308 	and.w	r3, r3, #8
 800be36:	431a      	orrs	r2, r3
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	68db      	ldr	r3, [r3, #12]
 800be3c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800be40:	ea42 0103 	orr.w	r1, r2, r3
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	430a      	orrs	r2, r1
 800be50:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	2200      	movs	r2, #0
 800be56:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	2201      	movs	r2, #1
 800be5c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800be60:	2300      	movs	r3, #0
}
 800be62:	4618      	mov	r0, r3
 800be64:	3710      	adds	r7, #16
 800be66:	46bd      	mov	sp, r7
 800be68:	bd80      	pop	{r7, pc}

0800be6a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800be6a:	b580      	push	{r7, lr}
 800be6c:	b088      	sub	sp, #32
 800be6e:	af00      	add	r7, sp, #0
 800be70:	60f8      	str	r0, [r7, #12]
 800be72:	60b9      	str	r1, [r7, #8]
 800be74:	603b      	str	r3, [r7, #0]
 800be76:	4613      	mov	r3, r2
 800be78:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800be7a:	2300      	movs	r3, #0
 800be7c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800be84:	2b01      	cmp	r3, #1
 800be86:	d101      	bne.n	800be8c <HAL_SPI_Transmit+0x22>
 800be88:	2302      	movs	r3, #2
 800be8a:	e158      	b.n	800c13e <HAL_SPI_Transmit+0x2d4>
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	2201      	movs	r2, #1
 800be90:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800be94:	f7fb fdd2 	bl	8007a3c <HAL_GetTick>
 800be98:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800be9a:	88fb      	ldrh	r3, [r7, #6]
 800be9c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800bea4:	b2db      	uxtb	r3, r3
 800bea6:	2b01      	cmp	r3, #1
 800bea8:	d002      	beq.n	800beb0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800beaa:	2302      	movs	r3, #2
 800beac:	77fb      	strb	r3, [r7, #31]
    goto error;
 800beae:	e13d      	b.n	800c12c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800beb0:	68bb      	ldr	r3, [r7, #8]
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d002      	beq.n	800bebc <HAL_SPI_Transmit+0x52>
 800beb6:	88fb      	ldrh	r3, [r7, #6]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d102      	bne.n	800bec2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800bebc:	2301      	movs	r3, #1
 800bebe:	77fb      	strb	r3, [r7, #31]
    goto error;
 800bec0:	e134      	b.n	800c12c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	2203      	movs	r2, #3
 800bec6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	2200      	movs	r2, #0
 800bece:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	68ba      	ldr	r2, [r7, #8]
 800bed4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	88fa      	ldrh	r2, [r7, #6]
 800beda:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	88fa      	ldrh	r2, [r7, #6]
 800bee0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	2200      	movs	r2, #0
 800bee6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	2200      	movs	r2, #0
 800beec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	2200      	movs	r2, #0
 800bef4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	2200      	movs	r2, #0
 800befc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	2200      	movs	r2, #0
 800bf02:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	689b      	ldr	r3, [r3, #8]
 800bf08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bf0c:	d10f      	bne.n	800bf2e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	681a      	ldr	r2, [r3, #0]
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bf1c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	681a      	ldr	r2, [r3, #0]
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bf2c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf38:	2b40      	cmp	r3, #64	; 0x40
 800bf3a:	d007      	beq.n	800bf4c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	681a      	ldr	r2, [r3, #0]
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bf4a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	68db      	ldr	r3, [r3, #12]
 800bf50:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bf54:	d94b      	bls.n	800bfee <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	685b      	ldr	r3, [r3, #4]
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d002      	beq.n	800bf64 <HAL_SPI_Transmit+0xfa>
 800bf5e:	8afb      	ldrh	r3, [r7, #22]
 800bf60:	2b01      	cmp	r3, #1
 800bf62:	d13e      	bne.n	800bfe2 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf68:	881a      	ldrh	r2, [r3, #0]
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf74:	1c9a      	adds	r2, r3, #2
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bf7e:	b29b      	uxth	r3, r3
 800bf80:	3b01      	subs	r3, #1
 800bf82:	b29a      	uxth	r2, r3
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800bf88:	e02b      	b.n	800bfe2 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	689b      	ldr	r3, [r3, #8]
 800bf90:	f003 0302 	and.w	r3, r3, #2
 800bf94:	2b02      	cmp	r3, #2
 800bf96:	d112      	bne.n	800bfbe <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf9c:	881a      	ldrh	r2, [r3, #0]
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfa8:	1c9a      	adds	r2, r3, #2
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bfb2:	b29b      	uxth	r3, r3
 800bfb4:	3b01      	subs	r3, #1
 800bfb6:	b29a      	uxth	r2, r3
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	87da      	strh	r2, [r3, #62]	; 0x3e
 800bfbc:	e011      	b.n	800bfe2 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bfbe:	f7fb fd3d 	bl	8007a3c <HAL_GetTick>
 800bfc2:	4602      	mov	r2, r0
 800bfc4:	69bb      	ldr	r3, [r7, #24]
 800bfc6:	1ad3      	subs	r3, r2, r3
 800bfc8:	683a      	ldr	r2, [r7, #0]
 800bfca:	429a      	cmp	r2, r3
 800bfcc:	d803      	bhi.n	800bfd6 <HAL_SPI_Transmit+0x16c>
 800bfce:	683b      	ldr	r3, [r7, #0]
 800bfd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bfd4:	d102      	bne.n	800bfdc <HAL_SPI_Transmit+0x172>
 800bfd6:	683b      	ldr	r3, [r7, #0]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d102      	bne.n	800bfe2 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800bfdc:	2303      	movs	r3, #3
 800bfde:	77fb      	strb	r3, [r7, #31]
          goto error;
 800bfe0:	e0a4      	b.n	800c12c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bfe6:	b29b      	uxth	r3, r3
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d1ce      	bne.n	800bf8a <HAL_SPI_Transmit+0x120>
 800bfec:	e07c      	b.n	800c0e8 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	685b      	ldr	r3, [r3, #4]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d002      	beq.n	800bffc <HAL_SPI_Transmit+0x192>
 800bff6:	8afb      	ldrh	r3, [r7, #22]
 800bff8:	2b01      	cmp	r3, #1
 800bffa:	d170      	bne.n	800c0de <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c000:	b29b      	uxth	r3, r3
 800c002:	2b01      	cmp	r3, #1
 800c004:	d912      	bls.n	800c02c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c00a:	881a      	ldrh	r2, [r3, #0]
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c016:	1c9a      	adds	r2, r3, #2
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c020:	b29b      	uxth	r3, r3
 800c022:	3b02      	subs	r3, #2
 800c024:	b29a      	uxth	r2, r3
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c02a:	e058      	b.n	800c0de <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	330c      	adds	r3, #12
 800c036:	7812      	ldrb	r2, [r2, #0]
 800c038:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c03e:	1c5a      	adds	r2, r3, #1
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c048:	b29b      	uxth	r3, r3
 800c04a:	3b01      	subs	r3, #1
 800c04c:	b29a      	uxth	r2, r3
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800c052:	e044      	b.n	800c0de <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	689b      	ldr	r3, [r3, #8]
 800c05a:	f003 0302 	and.w	r3, r3, #2
 800c05e:	2b02      	cmp	r3, #2
 800c060:	d12b      	bne.n	800c0ba <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c066:	b29b      	uxth	r3, r3
 800c068:	2b01      	cmp	r3, #1
 800c06a:	d912      	bls.n	800c092 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c070:	881a      	ldrh	r2, [r3, #0]
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c07c:	1c9a      	adds	r2, r3, #2
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c086:	b29b      	uxth	r3, r3
 800c088:	3b02      	subs	r3, #2
 800c08a:	b29a      	uxth	r2, r3
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c090:	e025      	b.n	800c0de <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	330c      	adds	r3, #12
 800c09c:	7812      	ldrb	r2, [r2, #0]
 800c09e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0a4:	1c5a      	adds	r2, r3, #1
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c0ae:	b29b      	uxth	r3, r3
 800c0b0:	3b01      	subs	r3, #1
 800c0b2:	b29a      	uxth	r2, r3
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c0b8:	e011      	b.n	800c0de <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c0ba:	f7fb fcbf 	bl	8007a3c <HAL_GetTick>
 800c0be:	4602      	mov	r2, r0
 800c0c0:	69bb      	ldr	r3, [r7, #24]
 800c0c2:	1ad3      	subs	r3, r2, r3
 800c0c4:	683a      	ldr	r2, [r7, #0]
 800c0c6:	429a      	cmp	r2, r3
 800c0c8:	d803      	bhi.n	800c0d2 <HAL_SPI_Transmit+0x268>
 800c0ca:	683b      	ldr	r3, [r7, #0]
 800c0cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c0d0:	d102      	bne.n	800c0d8 <HAL_SPI_Transmit+0x26e>
 800c0d2:	683b      	ldr	r3, [r7, #0]
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d102      	bne.n	800c0de <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800c0d8:	2303      	movs	r3, #3
 800c0da:	77fb      	strb	r3, [r7, #31]
          goto error;
 800c0dc:	e026      	b.n	800c12c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c0e2:	b29b      	uxth	r3, r3
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d1b5      	bne.n	800c054 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c0e8:	69ba      	ldr	r2, [r7, #24]
 800c0ea:	6839      	ldr	r1, [r7, #0]
 800c0ec:	68f8      	ldr	r0, [r7, #12]
 800c0ee:	f001 f9dd 	bl	800d4ac <SPI_EndRxTxTransaction>
 800c0f2:	4603      	mov	r3, r0
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d002      	beq.n	800c0fe <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	2220      	movs	r2, #32
 800c0fc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	689b      	ldr	r3, [r3, #8]
 800c102:	2b00      	cmp	r3, #0
 800c104:	d10a      	bne.n	800c11c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c106:	2300      	movs	r3, #0
 800c108:	613b      	str	r3, [r7, #16]
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	68db      	ldr	r3, [r3, #12]
 800c110:	613b      	str	r3, [r7, #16]
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	689b      	ldr	r3, [r3, #8]
 800c118:	613b      	str	r3, [r7, #16]
 800c11a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c120:	2b00      	cmp	r3, #0
 800c122:	d002      	beq.n	800c12a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800c124:	2301      	movs	r3, #1
 800c126:	77fb      	strb	r3, [r7, #31]
 800c128:	e000      	b.n	800c12c <HAL_SPI_Transmit+0x2c2>
  }

error:
 800c12a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	2201      	movs	r2, #1
 800c130:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	2200      	movs	r2, #0
 800c138:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800c13c:	7ffb      	ldrb	r3, [r7, #31]
}
 800c13e:	4618      	mov	r0, r3
 800c140:	3720      	adds	r7, #32
 800c142:	46bd      	mov	sp, r7
 800c144:	bd80      	pop	{r7, pc}

0800c146 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c146:	b580      	push	{r7, lr}
 800c148:	b088      	sub	sp, #32
 800c14a:	af02      	add	r7, sp, #8
 800c14c:	60f8      	str	r0, [r7, #12]
 800c14e:	60b9      	str	r1, [r7, #8]
 800c150:	603b      	str	r3, [r7, #0]
 800c152:	4613      	mov	r3, r2
 800c154:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c156:	2300      	movs	r3, #0
 800c158:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	685b      	ldr	r3, [r3, #4]
 800c15e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c162:	d112      	bne.n	800c18a <HAL_SPI_Receive+0x44>
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	689b      	ldr	r3, [r3, #8]
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d10e      	bne.n	800c18a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	2204      	movs	r2, #4
 800c170:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800c174:	88fa      	ldrh	r2, [r7, #6]
 800c176:	683b      	ldr	r3, [r7, #0]
 800c178:	9300      	str	r3, [sp, #0]
 800c17a:	4613      	mov	r3, r2
 800c17c:	68ba      	ldr	r2, [r7, #8]
 800c17e:	68b9      	ldr	r1, [r7, #8]
 800c180:	68f8      	ldr	r0, [r7, #12]
 800c182:	f000 f910 	bl	800c3a6 <HAL_SPI_TransmitReceive>
 800c186:	4603      	mov	r3, r0
 800c188:	e109      	b.n	800c39e <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800c190:	2b01      	cmp	r3, #1
 800c192:	d101      	bne.n	800c198 <HAL_SPI_Receive+0x52>
 800c194:	2302      	movs	r3, #2
 800c196:	e102      	b.n	800c39e <HAL_SPI_Receive+0x258>
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	2201      	movs	r2, #1
 800c19c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c1a0:	f7fb fc4c 	bl	8007a3c <HAL_GetTick>
 800c1a4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c1ac:	b2db      	uxtb	r3, r3
 800c1ae:	2b01      	cmp	r3, #1
 800c1b0:	d002      	beq.n	800c1b8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800c1b2:	2302      	movs	r3, #2
 800c1b4:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c1b6:	e0e9      	b.n	800c38c <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 800c1b8:	68bb      	ldr	r3, [r7, #8]
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d002      	beq.n	800c1c4 <HAL_SPI_Receive+0x7e>
 800c1be:	88fb      	ldrh	r3, [r7, #6]
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d102      	bne.n	800c1ca <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800c1c4:	2301      	movs	r3, #1
 800c1c6:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c1c8:	e0e0      	b.n	800c38c <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	2204      	movs	r2, #4
 800c1ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	2200      	movs	r2, #0
 800c1d6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	68ba      	ldr	r2, [r7, #8]
 800c1dc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	88fa      	ldrh	r2, [r7, #6]
 800c1e2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	88fa      	ldrh	r2, [r7, #6]
 800c1ea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	2200      	movs	r2, #0
 800c1f2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	2200      	movs	r2, #0
 800c1f8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	2200      	movs	r2, #0
 800c1fe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	2200      	movs	r2, #0
 800c204:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	2200      	movs	r2, #0
 800c20a:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	68db      	ldr	r3, [r3, #12]
 800c210:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c214:	d908      	bls.n	800c228 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	685a      	ldr	r2, [r3, #4]
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c224:	605a      	str	r2, [r3, #4]
 800c226:	e007      	b.n	800c238 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	685a      	ldr	r2, [r3, #4]
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c236:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	689b      	ldr	r3, [r3, #8]
 800c23c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c240:	d10f      	bne.n	800c262 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	681a      	ldr	r2, [r3, #0]
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c250:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	681a      	ldr	r2, [r3, #0]
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c260:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c26c:	2b40      	cmp	r3, #64	; 0x40
 800c26e:	d007      	beq.n	800c280 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	681a      	ldr	r2, [r3, #0]
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c27e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	68db      	ldr	r3, [r3, #12]
 800c284:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c288:	d867      	bhi.n	800c35a <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800c28a:	e030      	b.n	800c2ee <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	689b      	ldr	r3, [r3, #8]
 800c292:	f003 0301 	and.w	r3, r3, #1
 800c296:	2b01      	cmp	r3, #1
 800c298:	d117      	bne.n	800c2ca <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	f103 020c 	add.w	r2, r3, #12
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2a6:	7812      	ldrb	r2, [r2, #0]
 800c2a8:	b2d2      	uxtb	r2, r2
 800c2aa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2b0:	1c5a      	adds	r2, r3, #1
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c2bc:	b29b      	uxth	r3, r3
 800c2be:	3b01      	subs	r3, #1
 800c2c0:	b29a      	uxth	r2, r3
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800c2c8:	e011      	b.n	800c2ee <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c2ca:	f7fb fbb7 	bl	8007a3c <HAL_GetTick>
 800c2ce:	4602      	mov	r2, r0
 800c2d0:	693b      	ldr	r3, [r7, #16]
 800c2d2:	1ad3      	subs	r3, r2, r3
 800c2d4:	683a      	ldr	r2, [r7, #0]
 800c2d6:	429a      	cmp	r2, r3
 800c2d8:	d803      	bhi.n	800c2e2 <HAL_SPI_Receive+0x19c>
 800c2da:	683b      	ldr	r3, [r7, #0]
 800c2dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c2e0:	d102      	bne.n	800c2e8 <HAL_SPI_Receive+0x1a2>
 800c2e2:	683b      	ldr	r3, [r7, #0]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d102      	bne.n	800c2ee <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 800c2e8:	2303      	movs	r3, #3
 800c2ea:	75fb      	strb	r3, [r7, #23]
          goto error;
 800c2ec:	e04e      	b.n	800c38c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c2f4:	b29b      	uxth	r3, r3
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d1c8      	bne.n	800c28c <HAL_SPI_Receive+0x146>
 800c2fa:	e034      	b.n	800c366 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	689b      	ldr	r3, [r3, #8]
 800c302:	f003 0301 	and.w	r3, r3, #1
 800c306:	2b01      	cmp	r3, #1
 800c308:	d115      	bne.n	800c336 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	68da      	ldr	r2, [r3, #12]
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c314:	b292      	uxth	r2, r2
 800c316:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c31c:	1c9a      	adds	r2, r3, #2
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c328:	b29b      	uxth	r3, r3
 800c32a:	3b01      	subs	r3, #1
 800c32c:	b29a      	uxth	r2, r3
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800c334:	e011      	b.n	800c35a <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c336:	f7fb fb81 	bl	8007a3c <HAL_GetTick>
 800c33a:	4602      	mov	r2, r0
 800c33c:	693b      	ldr	r3, [r7, #16]
 800c33e:	1ad3      	subs	r3, r2, r3
 800c340:	683a      	ldr	r2, [r7, #0]
 800c342:	429a      	cmp	r2, r3
 800c344:	d803      	bhi.n	800c34e <HAL_SPI_Receive+0x208>
 800c346:	683b      	ldr	r3, [r7, #0]
 800c348:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c34c:	d102      	bne.n	800c354 <HAL_SPI_Receive+0x20e>
 800c34e:	683b      	ldr	r3, [r7, #0]
 800c350:	2b00      	cmp	r3, #0
 800c352:	d102      	bne.n	800c35a <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 800c354:	2303      	movs	r3, #3
 800c356:	75fb      	strb	r3, [r7, #23]
          goto error;
 800c358:	e018      	b.n	800c38c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c360:	b29b      	uxth	r3, r3
 800c362:	2b00      	cmp	r3, #0
 800c364:	d1ca      	bne.n	800c2fc <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c366:	693a      	ldr	r2, [r7, #16]
 800c368:	6839      	ldr	r1, [r7, #0]
 800c36a:	68f8      	ldr	r0, [r7, #12]
 800c36c:	f001 f846 	bl	800d3fc <SPI_EndRxTransaction>
 800c370:	4603      	mov	r3, r0
 800c372:	2b00      	cmp	r3, #0
 800c374:	d002      	beq.n	800c37c <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	2220      	movs	r2, #32
 800c37a:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c380:	2b00      	cmp	r3, #0
 800c382:	d002      	beq.n	800c38a <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 800c384:	2301      	movs	r3, #1
 800c386:	75fb      	strb	r3, [r7, #23]
 800c388:	e000      	b.n	800c38c <HAL_SPI_Receive+0x246>
  }

error :
 800c38a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	2201      	movs	r2, #1
 800c390:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	2200      	movs	r2, #0
 800c398:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800c39c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c39e:	4618      	mov	r0, r3
 800c3a0:	3718      	adds	r7, #24
 800c3a2:	46bd      	mov	sp, r7
 800c3a4:	bd80      	pop	{r7, pc}

0800c3a6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800c3a6:	b580      	push	{r7, lr}
 800c3a8:	b08a      	sub	sp, #40	; 0x28
 800c3aa:	af00      	add	r7, sp, #0
 800c3ac:	60f8      	str	r0, [r7, #12]
 800c3ae:	60b9      	str	r1, [r7, #8]
 800c3b0:	607a      	str	r2, [r7, #4]
 800c3b2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800c3b4:	2301      	movs	r3, #1
 800c3b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800c3b8:	2300      	movs	r3, #0
 800c3ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800c3c4:	2b01      	cmp	r3, #1
 800c3c6:	d101      	bne.n	800c3cc <HAL_SPI_TransmitReceive+0x26>
 800c3c8:	2302      	movs	r3, #2
 800c3ca:	e1fb      	b.n	800c7c4 <HAL_SPI_TransmitReceive+0x41e>
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	2201      	movs	r2, #1
 800c3d0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c3d4:	f7fb fb32 	bl	8007a3c <HAL_GetTick>
 800c3d8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c3e0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	685b      	ldr	r3, [r3, #4]
 800c3e6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800c3e8:	887b      	ldrh	r3, [r7, #2]
 800c3ea:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800c3ec:	887b      	ldrh	r3, [r7, #2]
 800c3ee:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800c3f0:	7efb      	ldrb	r3, [r7, #27]
 800c3f2:	2b01      	cmp	r3, #1
 800c3f4:	d00e      	beq.n	800c414 <HAL_SPI_TransmitReceive+0x6e>
 800c3f6:	697b      	ldr	r3, [r7, #20]
 800c3f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c3fc:	d106      	bne.n	800c40c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	689b      	ldr	r3, [r3, #8]
 800c402:	2b00      	cmp	r3, #0
 800c404:	d102      	bne.n	800c40c <HAL_SPI_TransmitReceive+0x66>
 800c406:	7efb      	ldrb	r3, [r7, #27]
 800c408:	2b04      	cmp	r3, #4
 800c40a:	d003      	beq.n	800c414 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800c40c:	2302      	movs	r3, #2
 800c40e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800c412:	e1cd      	b.n	800c7b0 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800c414:	68bb      	ldr	r3, [r7, #8]
 800c416:	2b00      	cmp	r3, #0
 800c418:	d005      	beq.n	800c426 <HAL_SPI_TransmitReceive+0x80>
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d002      	beq.n	800c426 <HAL_SPI_TransmitReceive+0x80>
 800c420:	887b      	ldrh	r3, [r7, #2]
 800c422:	2b00      	cmp	r3, #0
 800c424:	d103      	bne.n	800c42e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800c426:	2301      	movs	r3, #1
 800c428:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800c42c:	e1c0      	b.n	800c7b0 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c434:	b2db      	uxtb	r3, r3
 800c436:	2b04      	cmp	r3, #4
 800c438:	d003      	beq.n	800c442 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	2205      	movs	r2, #5
 800c43e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	2200      	movs	r2, #0
 800c446:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	687a      	ldr	r2, [r7, #4]
 800c44c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	887a      	ldrh	r2, [r7, #2]
 800c452:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	887a      	ldrh	r2, [r7, #2]
 800c45a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	68ba      	ldr	r2, [r7, #8]
 800c462:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	887a      	ldrh	r2, [r7, #2]
 800c468:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	887a      	ldrh	r2, [r7, #2]
 800c46e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	2200      	movs	r2, #0
 800c474:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	2200      	movs	r2, #0
 800c47a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	68db      	ldr	r3, [r3, #12]
 800c480:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c484:	d802      	bhi.n	800c48c <HAL_SPI_TransmitReceive+0xe6>
 800c486:	8a3b      	ldrh	r3, [r7, #16]
 800c488:	2b01      	cmp	r3, #1
 800c48a:	d908      	bls.n	800c49e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	685a      	ldr	r2, [r3, #4]
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c49a:	605a      	str	r2, [r3, #4]
 800c49c:	e007      	b.n	800c4ae <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	685a      	ldr	r2, [r3, #4]
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c4ac:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c4b8:	2b40      	cmp	r3, #64	; 0x40
 800c4ba:	d007      	beq.n	800c4cc <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	681a      	ldr	r2, [r3, #0]
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c4ca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	68db      	ldr	r3, [r3, #12]
 800c4d0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c4d4:	d97c      	bls.n	800c5d0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	685b      	ldr	r3, [r3, #4]
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d002      	beq.n	800c4e4 <HAL_SPI_TransmitReceive+0x13e>
 800c4de:	8a7b      	ldrh	r3, [r7, #18]
 800c4e0:	2b01      	cmp	r3, #1
 800c4e2:	d169      	bne.n	800c5b8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4e8:	881a      	ldrh	r2, [r3, #0]
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4f4:	1c9a      	adds	r2, r3, #2
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c4fe:	b29b      	uxth	r3, r3
 800c500:	3b01      	subs	r3, #1
 800c502:	b29a      	uxth	r2, r3
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c508:	e056      	b.n	800c5b8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	689b      	ldr	r3, [r3, #8]
 800c510:	f003 0302 	and.w	r3, r3, #2
 800c514:	2b02      	cmp	r3, #2
 800c516:	d11b      	bne.n	800c550 <HAL_SPI_TransmitReceive+0x1aa>
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c51c:	b29b      	uxth	r3, r3
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d016      	beq.n	800c550 <HAL_SPI_TransmitReceive+0x1aa>
 800c522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c524:	2b01      	cmp	r3, #1
 800c526:	d113      	bne.n	800c550 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c52c:	881a      	ldrh	r2, [r3, #0]
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c538:	1c9a      	adds	r2, r3, #2
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c542:	b29b      	uxth	r3, r3
 800c544:	3b01      	subs	r3, #1
 800c546:	b29a      	uxth	r2, r3
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c54c:	2300      	movs	r3, #0
 800c54e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	689b      	ldr	r3, [r3, #8]
 800c556:	f003 0301 	and.w	r3, r3, #1
 800c55a:	2b01      	cmp	r3, #1
 800c55c:	d11c      	bne.n	800c598 <HAL_SPI_TransmitReceive+0x1f2>
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c564:	b29b      	uxth	r3, r3
 800c566:	2b00      	cmp	r3, #0
 800c568:	d016      	beq.n	800c598 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	68da      	ldr	r2, [r3, #12]
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c574:	b292      	uxth	r2, r2
 800c576:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c57c:	1c9a      	adds	r2, r3, #2
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c588:	b29b      	uxth	r3, r3
 800c58a:	3b01      	subs	r3, #1
 800c58c:	b29a      	uxth	r2, r3
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c594:	2301      	movs	r3, #1
 800c596:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800c598:	f7fb fa50 	bl	8007a3c <HAL_GetTick>
 800c59c:	4602      	mov	r2, r0
 800c59e:	69fb      	ldr	r3, [r7, #28]
 800c5a0:	1ad3      	subs	r3, r2, r3
 800c5a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c5a4:	429a      	cmp	r2, r3
 800c5a6:	d807      	bhi.n	800c5b8 <HAL_SPI_TransmitReceive+0x212>
 800c5a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c5ae:	d003      	beq.n	800c5b8 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800c5b0:	2303      	movs	r3, #3
 800c5b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800c5b6:	e0fb      	b.n	800c7b0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c5bc:	b29b      	uxth	r3, r3
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d1a3      	bne.n	800c50a <HAL_SPI_TransmitReceive+0x164>
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c5c8:	b29b      	uxth	r3, r3
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d19d      	bne.n	800c50a <HAL_SPI_TransmitReceive+0x164>
 800c5ce:	e0df      	b.n	800c790 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	685b      	ldr	r3, [r3, #4]
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d003      	beq.n	800c5e0 <HAL_SPI_TransmitReceive+0x23a>
 800c5d8:	8a7b      	ldrh	r3, [r7, #18]
 800c5da:	2b01      	cmp	r3, #1
 800c5dc:	f040 80cb 	bne.w	800c776 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c5e4:	b29b      	uxth	r3, r3
 800c5e6:	2b01      	cmp	r3, #1
 800c5e8:	d912      	bls.n	800c610 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5ee:	881a      	ldrh	r2, [r3, #0]
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5fa:	1c9a      	adds	r2, r3, #2
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c604:	b29b      	uxth	r3, r3
 800c606:	3b02      	subs	r3, #2
 800c608:	b29a      	uxth	r2, r3
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c60e:	e0b2      	b.n	800c776 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	330c      	adds	r3, #12
 800c61a:	7812      	ldrb	r2, [r2, #0]
 800c61c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c622:	1c5a      	adds	r2, r3, #1
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c62c:	b29b      	uxth	r3, r3
 800c62e:	3b01      	subs	r3, #1
 800c630:	b29a      	uxth	r2, r3
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c636:	e09e      	b.n	800c776 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	689b      	ldr	r3, [r3, #8]
 800c63e:	f003 0302 	and.w	r3, r3, #2
 800c642:	2b02      	cmp	r3, #2
 800c644:	d134      	bne.n	800c6b0 <HAL_SPI_TransmitReceive+0x30a>
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c64a:	b29b      	uxth	r3, r3
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d02f      	beq.n	800c6b0 <HAL_SPI_TransmitReceive+0x30a>
 800c650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c652:	2b01      	cmp	r3, #1
 800c654:	d12c      	bne.n	800c6b0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c65a:	b29b      	uxth	r3, r3
 800c65c:	2b01      	cmp	r3, #1
 800c65e:	d912      	bls.n	800c686 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c664:	881a      	ldrh	r2, [r3, #0]
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c670:	1c9a      	adds	r2, r3, #2
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c67a:	b29b      	uxth	r3, r3
 800c67c:	3b02      	subs	r3, #2
 800c67e:	b29a      	uxth	r2, r3
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c684:	e012      	b.n	800c6ac <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	330c      	adds	r3, #12
 800c690:	7812      	ldrb	r2, [r2, #0]
 800c692:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c698:	1c5a      	adds	r2, r3, #1
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c6a2:	b29b      	uxth	r3, r3
 800c6a4:	3b01      	subs	r3, #1
 800c6a6:	b29a      	uxth	r2, r3
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c6ac:	2300      	movs	r3, #0
 800c6ae:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	689b      	ldr	r3, [r3, #8]
 800c6b6:	f003 0301 	and.w	r3, r3, #1
 800c6ba:	2b01      	cmp	r3, #1
 800c6bc:	d148      	bne.n	800c750 <HAL_SPI_TransmitReceive+0x3aa>
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c6c4:	b29b      	uxth	r3, r3
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d042      	beq.n	800c750 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c6d0:	b29b      	uxth	r3, r3
 800c6d2:	2b01      	cmp	r3, #1
 800c6d4:	d923      	bls.n	800c71e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	68da      	ldr	r2, [r3, #12]
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6e0:	b292      	uxth	r2, r2
 800c6e2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6e8:	1c9a      	adds	r2, r3, #2
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c6f4:	b29b      	uxth	r3, r3
 800c6f6:	3b02      	subs	r3, #2
 800c6f8:	b29a      	uxth	r2, r3
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c706:	b29b      	uxth	r3, r3
 800c708:	2b01      	cmp	r3, #1
 800c70a:	d81f      	bhi.n	800c74c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	685a      	ldr	r2, [r3, #4]
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c71a:	605a      	str	r2, [r3, #4]
 800c71c:	e016      	b.n	800c74c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	f103 020c 	add.w	r2, r3, #12
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c72a:	7812      	ldrb	r2, [r2, #0]
 800c72c:	b2d2      	uxtb	r2, r2
 800c72e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c734:	1c5a      	adds	r2, r3, #1
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c740:	b29b      	uxth	r3, r3
 800c742:	3b01      	subs	r3, #1
 800c744:	b29a      	uxth	r2, r3
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c74c:	2301      	movs	r3, #1
 800c74e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800c750:	f7fb f974 	bl	8007a3c <HAL_GetTick>
 800c754:	4602      	mov	r2, r0
 800c756:	69fb      	ldr	r3, [r7, #28]
 800c758:	1ad3      	subs	r3, r2, r3
 800c75a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c75c:	429a      	cmp	r2, r3
 800c75e:	d803      	bhi.n	800c768 <HAL_SPI_TransmitReceive+0x3c2>
 800c760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c762:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c766:	d102      	bne.n	800c76e <HAL_SPI_TransmitReceive+0x3c8>
 800c768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d103      	bne.n	800c776 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800c76e:	2303      	movs	r3, #3
 800c770:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800c774:	e01c      	b.n	800c7b0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c77a:	b29b      	uxth	r3, r3
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	f47f af5b 	bne.w	800c638 <HAL_SPI_TransmitReceive+0x292>
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c788:	b29b      	uxth	r3, r3
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	f47f af54 	bne.w	800c638 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c790:	69fa      	ldr	r2, [r7, #28]
 800c792:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c794:	68f8      	ldr	r0, [r7, #12]
 800c796:	f000 fe89 	bl	800d4ac <SPI_EndRxTxTransaction>
 800c79a:	4603      	mov	r3, r0
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d006      	beq.n	800c7ae <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800c7a0:	2301      	movs	r3, #1
 800c7a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	2220      	movs	r2, #32
 800c7aa:	661a      	str	r2, [r3, #96]	; 0x60
 800c7ac:	e000      	b.n	800c7b0 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800c7ae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	2201      	movs	r2, #1
 800c7b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	2200      	movs	r2, #0
 800c7bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800c7c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800c7c4:	4618      	mov	r0, r3
 800c7c6:	3728      	adds	r7, #40	; 0x28
 800c7c8:	46bd      	mov	sp, r7
 800c7ca:	bd80      	pop	{r7, pc}

0800c7cc <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800c7cc:	b580      	push	{r7, lr}
 800c7ce:	b086      	sub	sp, #24
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	60f8      	str	r0, [r7, #12]
 800c7d4:	60b9      	str	r1, [r7, #8]
 800c7d6:	4613      	mov	r3, r2
 800c7d8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c7da:	2300      	movs	r3, #0
 800c7dc:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800c7e4:	2b01      	cmp	r3, #1
 800c7e6:	d101      	bne.n	800c7ec <HAL_SPI_Transmit_DMA+0x20>
 800c7e8:	2302      	movs	r3, #2
 800c7ea:	e0d8      	b.n	800c99e <HAL_SPI_Transmit_DMA+0x1d2>
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	2201      	movs	r2, #1
 800c7f0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c7fa:	b2db      	uxtb	r3, r3
 800c7fc:	2b01      	cmp	r3, #1
 800c7fe:	d002      	beq.n	800c806 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800c800:	2302      	movs	r3, #2
 800c802:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c804:	e0c6      	b.n	800c994 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 800c806:	68bb      	ldr	r3, [r7, #8]
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d002      	beq.n	800c812 <HAL_SPI_Transmit_DMA+0x46>
 800c80c:	88fb      	ldrh	r3, [r7, #6]
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d102      	bne.n	800c818 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800c812:	2301      	movs	r3, #1
 800c814:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c816:	e0bd      	b.n	800c994 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	2203      	movs	r2, #3
 800c81c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	2200      	movs	r2, #0
 800c824:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	68ba      	ldr	r2, [r7, #8]
 800c82a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	88fa      	ldrh	r2, [r7, #6]
 800c830:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	88fa      	ldrh	r2, [r7, #6]
 800c836:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	2200      	movs	r2, #0
 800c83c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	2200      	movs	r2, #0
 800c842:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	2200      	movs	r2, #0
 800c848:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	2200      	movs	r2, #0
 800c84e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	2200      	movs	r2, #0
 800c856:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	689b      	ldr	r3, [r3, #8]
 800c85e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c862:	d10f      	bne.n	800c884 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	681a      	ldr	r2, [r3, #0]
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c872:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	681a      	ldr	r2, [r3, #0]
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c882:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c888:	4a47      	ldr	r2, [pc, #284]	; (800c9a8 <HAL_SPI_Transmit_DMA+0x1dc>)
 800c88a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c890:	4a46      	ldr	r2, [pc, #280]	; (800c9ac <HAL_SPI_Transmit_DMA+0x1e0>)
 800c892:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c898:	4a45      	ldr	r2, [pc, #276]	; (800c9b0 <HAL_SPI_Transmit_DMA+0x1e4>)
 800c89a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c8a0:	2200      	movs	r2, #0
 800c8a2:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	685a      	ldr	r2, [r3, #4]
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c8b2:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	68db      	ldr	r3, [r3, #12]
 800c8b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c8bc:	d82d      	bhi.n	800c91a <HAL_SPI_Transmit_DMA+0x14e>
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c8c2:	699b      	ldr	r3, [r3, #24]
 800c8c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c8c8:	d127      	bne.n	800c91a <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c8ce:	b29b      	uxth	r3, r3
 800c8d0:	f003 0301 	and.w	r3, r3, #1
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d10f      	bne.n	800c8f8 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	685a      	ldr	r2, [r3, #4]
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c8e6:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c8ec:	b29b      	uxth	r3, r3
 800c8ee:	085b      	lsrs	r3, r3, #1
 800c8f0:	b29a      	uxth	r2, r3
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c8f6:	e010      	b.n	800c91a <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	685a      	ldr	r2, [r3, #4]
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c906:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c90c:	b29b      	uxth	r3, r3
 800c90e:	085b      	lsrs	r3, r3, #1
 800c910:	b29b      	uxth	r3, r3
 800c912:	3301      	adds	r3, #1
 800c914:	b29a      	uxth	r2, r3
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c922:	4619      	mov	r1, r3
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	330c      	adds	r3, #12
 800c92a:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c930:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800c932:	f7fb facf 	bl	8007ed4 <HAL_DMA_Start_IT>
 800c936:	4603      	mov	r3, r0
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d00c      	beq.n	800c956 <HAL_SPI_Transmit_DMA+0x18a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c940:	f043 0210 	orr.w	r2, r3, #16
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800c948:	2301      	movs	r3, #1
 800c94a:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	2201      	movs	r2, #1
 800c950:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800c954:	e01e      	b.n	800c994 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c960:	2b40      	cmp	r3, #64	; 0x40
 800c962:	d007      	beq.n	800c974 <HAL_SPI_Transmit_DMA+0x1a8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	681a      	ldr	r2, [r3, #0]
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c972:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	685a      	ldr	r2, [r3, #4]
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	f042 0220 	orr.w	r2, r2, #32
 800c982:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	685a      	ldr	r2, [r3, #4]
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	f042 0202 	orr.w	r2, r2, #2
 800c992:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	2200      	movs	r2, #0
 800c998:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800c99c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c99e:	4618      	mov	r0, r3
 800c9a0:	3718      	adds	r7, #24
 800c9a2:	46bd      	mov	sp, r7
 800c9a4:	bd80      	pop	{r7, pc}
 800c9a6:	bf00      	nop
 800c9a8:	0800d103 	.word	0x0800d103
 800c9ac:	0800cf25 	.word	0x0800cf25
 800c9b0:	0800d157 	.word	0x0800d157

0800c9b4 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800c9b4:	b580      	push	{r7, lr}
 800c9b6:	b086      	sub	sp, #24
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	60f8      	str	r0, [r7, #12]
 800c9bc:	60b9      	str	r1, [r7, #8]
 800c9be:	607a      	str	r2, [r7, #4]
 800c9c0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c9c2:	2300      	movs	r3, #0
 800c9c4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800c9cc:	2b01      	cmp	r3, #1
 800c9ce:	d101      	bne.n	800c9d4 <HAL_SPI_TransmitReceive_DMA+0x20>
 800c9d0:	2302      	movs	r3, #2
 800c9d2:	e16c      	b.n	800ccae <HAL_SPI_TransmitReceive_DMA+0x2fa>
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	2201      	movs	r2, #1
 800c9d8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c9e2:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	685b      	ldr	r3, [r3, #4]
 800c9e8:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800c9ea:	7dbb      	ldrb	r3, [r7, #22]
 800c9ec:	2b01      	cmp	r3, #1
 800c9ee:	d00d      	beq.n	800ca0c <HAL_SPI_TransmitReceive_DMA+0x58>
 800c9f0:	693b      	ldr	r3, [r7, #16]
 800c9f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c9f6:	d106      	bne.n	800ca06 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	689b      	ldr	r3, [r3, #8]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d102      	bne.n	800ca06 <HAL_SPI_TransmitReceive_DMA+0x52>
 800ca00:	7dbb      	ldrb	r3, [r7, #22]
 800ca02:	2b04      	cmp	r3, #4
 800ca04:	d002      	beq.n	800ca0c <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800ca06:	2302      	movs	r3, #2
 800ca08:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ca0a:	e14b      	b.n	800cca4 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800ca0c:	68bb      	ldr	r3, [r7, #8]
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d005      	beq.n	800ca1e <HAL_SPI_TransmitReceive_DMA+0x6a>
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d002      	beq.n	800ca1e <HAL_SPI_TransmitReceive_DMA+0x6a>
 800ca18:	887b      	ldrh	r3, [r7, #2]
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d102      	bne.n	800ca24 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800ca1e:	2301      	movs	r3, #1
 800ca20:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ca22:	e13f      	b.n	800cca4 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ca2a:	b2db      	uxtb	r3, r3
 800ca2c:	2b04      	cmp	r3, #4
 800ca2e:	d003      	beq.n	800ca38 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	2205      	movs	r2, #5
 800ca34:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	2200      	movs	r2, #0
 800ca3c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	68ba      	ldr	r2, [r7, #8]
 800ca42:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	887a      	ldrh	r2, [r7, #2]
 800ca48:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	887a      	ldrh	r2, [r7, #2]
 800ca4e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	687a      	ldr	r2, [r7, #4]
 800ca54:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	887a      	ldrh	r2, [r7, #2]
 800ca5a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	887a      	ldrh	r2, [r7, #2]
 800ca62:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	2200      	movs	r2, #0
 800ca6a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	2200      	movs	r2, #0
 800ca70:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	685a      	ldr	r2, [r3, #4]
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 800ca80:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	68db      	ldr	r3, [r3, #12]
 800ca86:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ca8a:	d908      	bls.n	800ca9e <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	685a      	ldr	r2, [r3, #4]
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800ca9a:	605a      	str	r2, [r3, #4]
 800ca9c:	e06f      	b.n	800cb7e <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	685a      	ldr	r2, [r3, #4]
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800caac:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cab2:	699b      	ldr	r3, [r3, #24]
 800cab4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cab8:	d126      	bne.n	800cb08 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800cabe:	f003 0301 	and.w	r3, r3, #1
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d10f      	bne.n	800cae6 <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	685a      	ldr	r2, [r3, #4]
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800cad4:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cada:	b29b      	uxth	r3, r3
 800cadc:	085b      	lsrs	r3, r3, #1
 800cade:	b29a      	uxth	r2, r3
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	87da      	strh	r2, [r3, #62]	; 0x3e
 800cae4:	e010      	b.n	800cb08 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	685a      	ldr	r2, [r3, #4]
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800caf4:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cafa:	b29b      	uxth	r3, r3
 800cafc:	085b      	lsrs	r3, r3, #1
 800cafe:	b29b      	uxth	r3, r3
 800cb00:	3301      	adds	r3, #1
 800cb02:	b29a      	uxth	r2, r3
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cb0c:	699b      	ldr	r3, [r3, #24]
 800cb0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cb12:	d134      	bne.n	800cb7e <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	685a      	ldr	r2, [r3, #4]
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800cb22:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800cb2a:	b29b      	uxth	r3, r3
 800cb2c:	f003 0301 	and.w	r3, r3, #1
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d111      	bne.n	800cb58 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	685a      	ldr	r2, [r3, #4]
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800cb42:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800cb4a:	b29b      	uxth	r3, r3
 800cb4c:	085b      	lsrs	r3, r3, #1
 800cb4e:	b29a      	uxth	r2, r3
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800cb56:	e012      	b.n	800cb7e <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	685a      	ldr	r2, [r3, #4]
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800cb66:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800cb6e:	b29b      	uxth	r3, r3
 800cb70:	085b      	lsrs	r3, r3, #1
 800cb72:	b29b      	uxth	r3, r3
 800cb74:	3301      	adds	r3, #1
 800cb76:	b29a      	uxth	r2, r3
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800cb84:	b2db      	uxtb	r3, r3
 800cb86:	2b04      	cmp	r3, #4
 800cb88:	d108      	bne.n	800cb9c <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cb8e:	4a4a      	ldr	r2, [pc, #296]	; (800ccb8 <HAL_SPI_TransmitReceive_DMA+0x304>)
 800cb90:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cb96:	4a49      	ldr	r2, [pc, #292]	; (800ccbc <HAL_SPI_TransmitReceive_DMA+0x308>)
 800cb98:	62da      	str	r2, [r3, #44]	; 0x2c
 800cb9a:	e007      	b.n	800cbac <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cba0:	4a47      	ldr	r2, [pc, #284]	; (800ccc0 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 800cba2:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cba8:	4a46      	ldr	r2, [pc, #280]	; (800ccc4 <HAL_SPI_TransmitReceive_DMA+0x310>)
 800cbaa:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cbb0:	4a45      	ldr	r2, [pc, #276]	; (800ccc8 <HAL_SPI_TransmitReceive_DMA+0x314>)
 800cbb2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cbb8:	2200      	movs	r2, #0
 800cbba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	330c      	adds	r3, #12
 800cbc6:	4619      	mov	r1, r3
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbcc:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800cbd4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800cbd6:	f7fb f97d 	bl	8007ed4 <HAL_DMA_Start_IT>
 800cbda:	4603      	mov	r3, r0
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d00c      	beq.n	800cbfa <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cbe4:	f043 0210 	orr.w	r2, r3, #16
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800cbec:	2301      	movs	r3, #1
 800cbee:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	2201      	movs	r2, #1
 800cbf4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800cbf8:	e054      	b.n	800cca4 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	685a      	ldr	r2, [r3, #4]
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	f042 0201 	orr.w	r2, r2, #1
 800cc08:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc0e:	2200      	movs	r2, #0
 800cc10:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc16:	2200      	movs	r2, #0
 800cc18:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc1e:	2200      	movs	r2, #0
 800cc20:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc26:	2200      	movs	r2, #0
 800cc28:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc32:	4619      	mov	r1, r3
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	330c      	adds	r3, #12
 800cc3a:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cc40:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800cc42:	f7fb f947 	bl	8007ed4 <HAL_DMA_Start_IT>
 800cc46:	4603      	mov	r3, r0
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d00c      	beq.n	800cc66 <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cc50:	f043 0210 	orr.w	r2, r3, #16
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800cc58:	2301      	movs	r3, #1
 800cc5a:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	2201      	movs	r2, #1
 800cc60:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800cc64:	e01e      	b.n	800cca4 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc70:	2b40      	cmp	r3, #64	; 0x40
 800cc72:	d007      	beq.n	800cc84 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	681a      	ldr	r2, [r3, #0]
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cc82:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	685a      	ldr	r2, [r3, #4]
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	f042 0220 	orr.w	r2, r2, #32
 800cc92:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	685a      	ldr	r2, [r3, #4]
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	f042 0202 	orr.w	r2, r2, #2
 800cca2:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	2200      	movs	r2, #0
 800cca8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800ccac:	7dfb      	ldrb	r3, [r7, #23]
}
 800ccae:	4618      	mov	r0, r3
 800ccb0:	3718      	adds	r7, #24
 800ccb2:	46bd      	mov	sp, r7
 800ccb4:	bd80      	pop	{r7, pc}
 800ccb6:	bf00      	nop
 800ccb8:	0800d11f 	.word	0x0800d11f
 800ccbc:	0800cfcb 	.word	0x0800cfcb
 800ccc0:	0800d13b 	.word	0x0800d13b
 800ccc4:	0800d073 	.word	0x0800d073
 800ccc8:	0800d157 	.word	0x0800d157

0800cccc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800cccc:	b580      	push	{r7, lr}
 800ccce:	b088      	sub	sp, #32
 800ccd0:	af00      	add	r7, sp, #0
 800ccd2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	685b      	ldr	r3, [r3, #4]
 800ccda:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	689b      	ldr	r3, [r3, #8]
 800cce2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800cce4:	69bb      	ldr	r3, [r7, #24]
 800cce6:	099b      	lsrs	r3, r3, #6
 800cce8:	f003 0301 	and.w	r3, r3, #1
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d10f      	bne.n	800cd10 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800ccf0:	69bb      	ldr	r3, [r7, #24]
 800ccf2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d00a      	beq.n	800cd10 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800ccfa:	69fb      	ldr	r3, [r7, #28]
 800ccfc:	099b      	lsrs	r3, r3, #6
 800ccfe:	f003 0301 	and.w	r3, r3, #1
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d004      	beq.n	800cd10 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cd0a:	6878      	ldr	r0, [r7, #4]
 800cd0c:	4798      	blx	r3
    return;
 800cd0e:	e0d7      	b.n	800cec0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800cd10:	69bb      	ldr	r3, [r7, #24]
 800cd12:	085b      	lsrs	r3, r3, #1
 800cd14:	f003 0301 	and.w	r3, r3, #1
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d00a      	beq.n	800cd32 <HAL_SPI_IRQHandler+0x66>
 800cd1c:	69fb      	ldr	r3, [r7, #28]
 800cd1e:	09db      	lsrs	r3, r3, #7
 800cd20:	f003 0301 	and.w	r3, r3, #1
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d004      	beq.n	800cd32 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cd2c:	6878      	ldr	r0, [r7, #4]
 800cd2e:	4798      	blx	r3
    return;
 800cd30:	e0c6      	b.n	800cec0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800cd32:	69bb      	ldr	r3, [r7, #24]
 800cd34:	095b      	lsrs	r3, r3, #5
 800cd36:	f003 0301 	and.w	r3, r3, #1
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d10c      	bne.n	800cd58 <HAL_SPI_IRQHandler+0x8c>
 800cd3e:	69bb      	ldr	r3, [r7, #24]
 800cd40:	099b      	lsrs	r3, r3, #6
 800cd42:	f003 0301 	and.w	r3, r3, #1
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d106      	bne.n	800cd58 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800cd4a:	69bb      	ldr	r3, [r7, #24]
 800cd4c:	0a1b      	lsrs	r3, r3, #8
 800cd4e:	f003 0301 	and.w	r3, r3, #1
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	f000 80b4 	beq.w	800cec0 <HAL_SPI_IRQHandler+0x1f4>
 800cd58:	69fb      	ldr	r3, [r7, #28]
 800cd5a:	095b      	lsrs	r3, r3, #5
 800cd5c:	f003 0301 	and.w	r3, r3, #1
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	f000 80ad 	beq.w	800cec0 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800cd66:	69bb      	ldr	r3, [r7, #24]
 800cd68:	099b      	lsrs	r3, r3, #6
 800cd6a:	f003 0301 	and.w	r3, r3, #1
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d023      	beq.n	800cdba <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800cd78:	b2db      	uxtb	r3, r3
 800cd7a:	2b03      	cmp	r3, #3
 800cd7c:	d011      	beq.n	800cda2 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cd82:	f043 0204 	orr.w	r2, r3, #4
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800cd8a:	2300      	movs	r3, #0
 800cd8c:	617b      	str	r3, [r7, #20]
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	68db      	ldr	r3, [r3, #12]
 800cd94:	617b      	str	r3, [r7, #20]
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	689b      	ldr	r3, [r3, #8]
 800cd9c:	617b      	str	r3, [r7, #20]
 800cd9e:	697b      	ldr	r3, [r7, #20]
 800cda0:	e00b      	b.n	800cdba <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800cda2:	2300      	movs	r3, #0
 800cda4:	613b      	str	r3, [r7, #16]
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	68db      	ldr	r3, [r3, #12]
 800cdac:	613b      	str	r3, [r7, #16]
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	689b      	ldr	r3, [r3, #8]
 800cdb4:	613b      	str	r3, [r7, #16]
 800cdb6:	693b      	ldr	r3, [r7, #16]
        return;
 800cdb8:	e082      	b.n	800cec0 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800cdba:	69bb      	ldr	r3, [r7, #24]
 800cdbc:	095b      	lsrs	r3, r3, #5
 800cdbe:	f003 0301 	and.w	r3, r3, #1
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d014      	beq.n	800cdf0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cdca:	f043 0201 	orr.w	r2, r3, #1
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800cdd2:	2300      	movs	r3, #0
 800cdd4:	60fb      	str	r3, [r7, #12]
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	689b      	ldr	r3, [r3, #8]
 800cddc:	60fb      	str	r3, [r7, #12]
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	681a      	ldr	r2, [r3, #0]
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cdec:	601a      	str	r2, [r3, #0]
 800cdee:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800cdf0:	69bb      	ldr	r3, [r7, #24]
 800cdf2:	0a1b      	lsrs	r3, r3, #8
 800cdf4:	f003 0301 	and.w	r3, r3, #1
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d00c      	beq.n	800ce16 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ce00:	f043 0208 	orr.w	r2, r3, #8
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800ce08:	2300      	movs	r3, #0
 800ce0a:	60bb      	str	r3, [r7, #8]
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	689b      	ldr	r3, [r3, #8]
 800ce12:	60bb      	str	r3, [r7, #8]
 800ce14:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d04f      	beq.n	800cebe <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	685a      	ldr	r2, [r3, #4]
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ce2c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	2201      	movs	r2, #1
 800ce32:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800ce36:	69fb      	ldr	r3, [r7, #28]
 800ce38:	f003 0302 	and.w	r3, r3, #2
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d104      	bne.n	800ce4a <HAL_SPI_IRQHandler+0x17e>
 800ce40:	69fb      	ldr	r3, [r7, #28]
 800ce42:	f003 0301 	and.w	r3, r3, #1
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d034      	beq.n	800ceb4 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	685a      	ldr	r2, [r3, #4]
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	f022 0203 	bic.w	r2, r2, #3
 800ce58:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d011      	beq.n	800ce86 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ce66:	4a18      	ldr	r2, [pc, #96]	; (800cec8 <HAL_SPI_IRQHandler+0x1fc>)
 800ce68:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ce6e:	4618      	mov	r0, r3
 800ce70:	f7fb f8ce 	bl	8008010 <HAL_DMA_Abort_IT>
 800ce74:	4603      	mov	r3, r0
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d005      	beq.n	800ce86 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ce7e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d016      	beq.n	800cebc <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ce92:	4a0d      	ldr	r2, [pc, #52]	; (800cec8 <HAL_SPI_IRQHandler+0x1fc>)
 800ce94:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ce9a:	4618      	mov	r0, r3
 800ce9c:	f7fb f8b8 	bl	8008010 <HAL_DMA_Abort_IT>
 800cea0:	4603      	mov	r3, r0
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d00a      	beq.n	800cebc <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ceaa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800ceb2:	e003      	b.n	800cebc <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800ceb4:	6878      	ldr	r0, [r7, #4]
 800ceb6:	f7f8 fd7b 	bl	80059b0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800ceba:	e000      	b.n	800cebe <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800cebc:	bf00      	nop
    return;
 800cebe:	bf00      	nop
  }
}
 800cec0:	3720      	adds	r7, #32
 800cec2:	46bd      	mov	sp, r7
 800cec4:	bd80      	pop	{r7, pc}
 800cec6:	bf00      	nop
 800cec8:	0800d197 	.word	0x0800d197

0800cecc <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800cecc:	b480      	push	{r7}
 800cece:	b083      	sub	sp, #12
 800ced0:	af00      	add	r7, sp, #0
 800ced2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800ced4:	bf00      	nop
 800ced6:	370c      	adds	r7, #12
 800ced8:	46bd      	mov	sp, r7
 800ceda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cede:	4770      	bx	lr

0800cee0 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800cee0:	b480      	push	{r7}
 800cee2:	b083      	sub	sp, #12
 800cee4:	af00      	add	r7, sp, #0
 800cee6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800cee8:	bf00      	nop
 800ceea:	370c      	adds	r7, #12
 800ceec:	46bd      	mov	sp, r7
 800ceee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef2:	4770      	bx	lr

0800cef4 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800cef4:	b480      	push	{r7}
 800cef6:	b083      	sub	sp, #12
 800cef8:	af00      	add	r7, sp, #0
 800cefa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800cefc:	bf00      	nop
 800cefe:	370c      	adds	r7, #12
 800cf00:	46bd      	mov	sp, r7
 800cf02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf06:	4770      	bx	lr

0800cf08 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800cf08:	b480      	push	{r7}
 800cf0a:	b083      	sub	sp, #12
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800cf16:	b2db      	uxtb	r3, r3
}
 800cf18:	4618      	mov	r0, r3
 800cf1a:	370c      	adds	r7, #12
 800cf1c:	46bd      	mov	sp, r7
 800cf1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf22:	4770      	bx	lr

0800cf24 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800cf24:	b580      	push	{r7, lr}
 800cf26:	b086      	sub	sp, #24
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf30:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800cf32:	f7fa fd83 	bl	8007a3c <HAL_GetTick>
 800cf36:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	f003 0320 	and.w	r3, r3, #32
 800cf42:	2b20      	cmp	r3, #32
 800cf44:	d03b      	beq.n	800cfbe <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800cf46:	697b      	ldr	r3, [r7, #20]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	685a      	ldr	r2, [r3, #4]
 800cf4c:	697b      	ldr	r3, [r7, #20]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	f022 0220 	bic.w	r2, r2, #32
 800cf54:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800cf56:	697b      	ldr	r3, [r7, #20]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	685a      	ldr	r2, [r3, #4]
 800cf5c:	697b      	ldr	r3, [r7, #20]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	f022 0202 	bic.w	r2, r2, #2
 800cf64:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800cf66:	693a      	ldr	r2, [r7, #16]
 800cf68:	2164      	movs	r1, #100	; 0x64
 800cf6a:	6978      	ldr	r0, [r7, #20]
 800cf6c:	f000 fa9e 	bl	800d4ac <SPI_EndRxTxTransaction>
 800cf70:	4603      	mov	r3, r0
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d005      	beq.n	800cf82 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cf76:	697b      	ldr	r3, [r7, #20]
 800cf78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cf7a:	f043 0220 	orr.w	r2, r3, #32
 800cf7e:	697b      	ldr	r3, [r7, #20]
 800cf80:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800cf82:	697b      	ldr	r3, [r7, #20]
 800cf84:	689b      	ldr	r3, [r3, #8]
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d10a      	bne.n	800cfa0 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800cf8a:	2300      	movs	r3, #0
 800cf8c:	60fb      	str	r3, [r7, #12]
 800cf8e:	697b      	ldr	r3, [r7, #20]
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	68db      	ldr	r3, [r3, #12]
 800cf94:	60fb      	str	r3, [r7, #12]
 800cf96:	697b      	ldr	r3, [r7, #20]
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	689b      	ldr	r3, [r3, #8]
 800cf9c:	60fb      	str	r3, [r7, #12]
 800cf9e:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800cfa0:	697b      	ldr	r3, [r7, #20]
 800cfa2:	2200      	movs	r2, #0
 800cfa4:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800cfa6:	697b      	ldr	r3, [r7, #20]
 800cfa8:	2201      	movs	r2, #1
 800cfaa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cfae:	697b      	ldr	r3, [r7, #20]
 800cfb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d003      	beq.n	800cfbe <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800cfb6:	6978      	ldr	r0, [r7, #20]
 800cfb8:	f7f8 fcfa 	bl	80059b0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800cfbc:	e002      	b.n	800cfc4 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800cfbe:	6978      	ldr	r0, [r7, #20]
 800cfc0:	f7f8 fcdf 	bl	8005982 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800cfc4:	3718      	adds	r7, #24
 800cfc6:	46bd      	mov	sp, r7
 800cfc8:	bd80      	pop	{r7, pc}

0800cfca <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800cfca:	b580      	push	{r7, lr}
 800cfcc:	b084      	sub	sp, #16
 800cfce:	af00      	add	r7, sp, #0
 800cfd0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfd6:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800cfd8:	f7fa fd30 	bl	8007a3c <HAL_GetTick>
 800cfdc:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	f003 0320 	and.w	r3, r3, #32
 800cfe8:	2b20      	cmp	r3, #32
 800cfea:	d03c      	beq.n	800d066 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	685a      	ldr	r2, [r3, #4]
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	f022 0220 	bic.w	r2, r2, #32
 800cffa:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	689b      	ldr	r3, [r3, #8]
 800d000:	2b00      	cmp	r3, #0
 800d002:	d10d      	bne.n	800d020 <SPI_DMAReceiveCplt+0x56>
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	685b      	ldr	r3, [r3, #4]
 800d008:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d00c:	d108      	bne.n	800d020 <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	685a      	ldr	r2, [r3, #4]
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	f022 0203 	bic.w	r2, r2, #3
 800d01c:	605a      	str	r2, [r3, #4]
 800d01e:	e007      	b.n	800d030 <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	685a      	ldr	r2, [r3, #4]
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	f022 0201 	bic.w	r2, r2, #1
 800d02e:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800d030:	68ba      	ldr	r2, [r7, #8]
 800d032:	2164      	movs	r1, #100	; 0x64
 800d034:	68f8      	ldr	r0, [r7, #12]
 800d036:	f000 f9e1 	bl	800d3fc <SPI_EndRxTransaction>
 800d03a:	4603      	mov	r3, r0
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d002      	beq.n	800d046 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	2220      	movs	r2, #32
 800d044:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	2200      	movs	r2, #0
 800d04a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	2201      	movs	r2, #1
 800d052:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d003      	beq.n	800d066 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800d05e:	68f8      	ldr	r0, [r7, #12]
 800d060:	f7f8 fca6 	bl	80059b0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800d064:	e002      	b.n	800d06c <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800d066:	68f8      	ldr	r0, [r7, #12]
 800d068:	f7f8 fc80 	bl	800596c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d06c:	3710      	adds	r7, #16
 800d06e:	46bd      	mov	sp, r7
 800d070:	bd80      	pop	{r7, pc}

0800d072 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d072:	b580      	push	{r7, lr}
 800d074:	b084      	sub	sp, #16
 800d076:	af00      	add	r7, sp, #0
 800d078:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d07e:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d080:	f7fa fcdc 	bl	8007a3c <HAL_GetTick>
 800d084:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	f003 0320 	and.w	r3, r3, #32
 800d090:	2b20      	cmp	r3, #32
 800d092:	d030      	beq.n	800d0f6 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	685a      	ldr	r2, [r3, #4]
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	f022 0220 	bic.w	r2, r2, #32
 800d0a2:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800d0a4:	68ba      	ldr	r2, [r7, #8]
 800d0a6:	2164      	movs	r1, #100	; 0x64
 800d0a8:	68f8      	ldr	r0, [r7, #12]
 800d0aa:	f000 f9ff 	bl	800d4ac <SPI_EndRxTxTransaction>
 800d0ae:	4603      	mov	r3, r0
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d005      	beq.n	800d0c0 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d0b8:	f043 0220 	orr.w	r2, r3, #32
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	685a      	ldr	r2, [r3, #4]
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	f022 0203 	bic.w	r2, r2, #3
 800d0ce:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	2200      	movs	r2, #0
 800d0d4:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	2200      	movs	r2, #0
 800d0da:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	2201      	movs	r2, #1
 800d0e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d003      	beq.n	800d0f6 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800d0ee:	68f8      	ldr	r0, [r7, #12]
 800d0f0:	f7f8 fc5e 	bl	80059b0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800d0f4:	e002      	b.n	800d0fc <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800d0f6:	68f8      	ldr	r0, [r7, #12]
 800d0f8:	f7f8 fc4e 	bl	8005998 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d0fc:	3710      	adds	r7, #16
 800d0fe:	46bd      	mov	sp, r7
 800d100:	bd80      	pop	{r7, pc}

0800d102 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d102:	b580      	push	{r7, lr}
 800d104:	b084      	sub	sp, #16
 800d106:	af00      	add	r7, sp, #0
 800d108:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d10e:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800d110:	68f8      	ldr	r0, [r7, #12]
 800d112:	f7ff fedb 	bl	800cecc <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d116:	bf00      	nop
 800d118:	3710      	adds	r7, #16
 800d11a:	46bd      	mov	sp, r7
 800d11c:	bd80      	pop	{r7, pc}

0800d11e <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d11e:	b580      	push	{r7, lr}
 800d120:	b084      	sub	sp, #16
 800d122:	af00      	add	r7, sp, #0
 800d124:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d12a:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800d12c:	68f8      	ldr	r0, [r7, #12]
 800d12e:	f7ff fed7 	bl	800cee0 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d132:	bf00      	nop
 800d134:	3710      	adds	r7, #16
 800d136:	46bd      	mov	sp, r7
 800d138:	bd80      	pop	{r7, pc}

0800d13a <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d13a:	b580      	push	{r7, lr}
 800d13c:	b084      	sub	sp, #16
 800d13e:	af00      	add	r7, sp, #0
 800d140:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d146:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800d148:	68f8      	ldr	r0, [r7, #12]
 800d14a:	f7ff fed3 	bl	800cef4 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d14e:	bf00      	nop
 800d150:	3710      	adds	r7, #16
 800d152:	46bd      	mov	sp, r7
 800d154:	bd80      	pop	{r7, pc}

0800d156 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800d156:	b580      	push	{r7, lr}
 800d158:	b084      	sub	sp, #16
 800d15a:	af00      	add	r7, sp, #0
 800d15c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d162:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	685a      	ldr	r2, [r3, #4]
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	f022 0203 	bic.w	r2, r2, #3
 800d172:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d178:	f043 0210 	orr.w	r2, r3, #16
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	2201      	movs	r2, #1
 800d184:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800d188:	68f8      	ldr	r0, [r7, #12]
 800d18a:	f7f8 fc11 	bl	80059b0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d18e:	bf00      	nop
 800d190:	3710      	adds	r7, #16
 800d192:	46bd      	mov	sp, r7
 800d194:	bd80      	pop	{r7, pc}

0800d196 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d196:	b580      	push	{r7, lr}
 800d198:	b084      	sub	sp, #16
 800d19a:	af00      	add	r7, sp, #0
 800d19c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1a2:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	2200      	movs	r2, #0
 800d1a8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	2200      	movs	r2, #0
 800d1b0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800d1b2:	68f8      	ldr	r0, [r7, #12]
 800d1b4:	f7f8 fbfc 	bl	80059b0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d1b8:	bf00      	nop
 800d1ba:	3710      	adds	r7, #16
 800d1bc:	46bd      	mov	sp, r7
 800d1be:	bd80      	pop	{r7, pc}

0800d1c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800d1c0:	b580      	push	{r7, lr}
 800d1c2:	b088      	sub	sp, #32
 800d1c4:	af00      	add	r7, sp, #0
 800d1c6:	60f8      	str	r0, [r7, #12]
 800d1c8:	60b9      	str	r1, [r7, #8]
 800d1ca:	603b      	str	r3, [r7, #0]
 800d1cc:	4613      	mov	r3, r2
 800d1ce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800d1d0:	f7fa fc34 	bl	8007a3c <HAL_GetTick>
 800d1d4:	4602      	mov	r2, r0
 800d1d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1d8:	1a9b      	subs	r3, r3, r2
 800d1da:	683a      	ldr	r2, [r7, #0]
 800d1dc:	4413      	add	r3, r2
 800d1de:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800d1e0:	f7fa fc2c 	bl	8007a3c <HAL_GetTick>
 800d1e4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800d1e6:	4b39      	ldr	r3, [pc, #228]	; (800d2cc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	015b      	lsls	r3, r3, #5
 800d1ec:	0d1b      	lsrs	r3, r3, #20
 800d1ee:	69fa      	ldr	r2, [r7, #28]
 800d1f0:	fb02 f303 	mul.w	r3, r2, r3
 800d1f4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d1f6:	e054      	b.n	800d2a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800d1f8:	683b      	ldr	r3, [r7, #0]
 800d1fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d1fe:	d050      	beq.n	800d2a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800d200:	f7fa fc1c 	bl	8007a3c <HAL_GetTick>
 800d204:	4602      	mov	r2, r0
 800d206:	69bb      	ldr	r3, [r7, #24]
 800d208:	1ad3      	subs	r3, r2, r3
 800d20a:	69fa      	ldr	r2, [r7, #28]
 800d20c:	429a      	cmp	r2, r3
 800d20e:	d902      	bls.n	800d216 <SPI_WaitFlagStateUntilTimeout+0x56>
 800d210:	69fb      	ldr	r3, [r7, #28]
 800d212:	2b00      	cmp	r3, #0
 800d214:	d13d      	bne.n	800d292 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	685a      	ldr	r2, [r3, #4]
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800d224:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	685b      	ldr	r3, [r3, #4]
 800d22a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d22e:	d111      	bne.n	800d254 <SPI_WaitFlagStateUntilTimeout+0x94>
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	689b      	ldr	r3, [r3, #8]
 800d234:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d238:	d004      	beq.n	800d244 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	689b      	ldr	r3, [r3, #8]
 800d23e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d242:	d107      	bne.n	800d254 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	681a      	ldr	r2, [r3, #0]
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d252:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d258:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d25c:	d10f      	bne.n	800d27e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	681a      	ldr	r2, [r3, #0]
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d26c:	601a      	str	r2, [r3, #0]
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	681a      	ldr	r2, [r3, #0]
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d27c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	2201      	movs	r2, #1
 800d282:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	2200      	movs	r2, #0
 800d28a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800d28e:	2303      	movs	r3, #3
 800d290:	e017      	b.n	800d2c2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800d292:	697b      	ldr	r3, [r7, #20]
 800d294:	2b00      	cmp	r3, #0
 800d296:	d101      	bne.n	800d29c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800d298:	2300      	movs	r3, #0
 800d29a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800d29c:	697b      	ldr	r3, [r7, #20]
 800d29e:	3b01      	subs	r3, #1
 800d2a0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	689a      	ldr	r2, [r3, #8]
 800d2a8:	68bb      	ldr	r3, [r7, #8]
 800d2aa:	4013      	ands	r3, r2
 800d2ac:	68ba      	ldr	r2, [r7, #8]
 800d2ae:	429a      	cmp	r2, r3
 800d2b0:	bf0c      	ite	eq
 800d2b2:	2301      	moveq	r3, #1
 800d2b4:	2300      	movne	r3, #0
 800d2b6:	b2db      	uxtb	r3, r3
 800d2b8:	461a      	mov	r2, r3
 800d2ba:	79fb      	ldrb	r3, [r7, #7]
 800d2bc:	429a      	cmp	r2, r3
 800d2be:	d19b      	bne.n	800d1f8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800d2c0:	2300      	movs	r3, #0
}
 800d2c2:	4618      	mov	r0, r3
 800d2c4:	3720      	adds	r7, #32
 800d2c6:	46bd      	mov	sp, r7
 800d2c8:	bd80      	pop	{r7, pc}
 800d2ca:	bf00      	nop
 800d2cc:	20000228 	.word	0x20000228

0800d2d0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800d2d0:	b580      	push	{r7, lr}
 800d2d2:	b08a      	sub	sp, #40	; 0x28
 800d2d4:	af00      	add	r7, sp, #0
 800d2d6:	60f8      	str	r0, [r7, #12]
 800d2d8:	60b9      	str	r1, [r7, #8]
 800d2da:	607a      	str	r2, [r7, #4]
 800d2dc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800d2de:	2300      	movs	r3, #0
 800d2e0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800d2e2:	f7fa fbab 	bl	8007a3c <HAL_GetTick>
 800d2e6:	4602      	mov	r2, r0
 800d2e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2ea:	1a9b      	subs	r3, r3, r2
 800d2ec:	683a      	ldr	r2, [r7, #0]
 800d2ee:	4413      	add	r3, r2
 800d2f0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800d2f2:	f7fa fba3 	bl	8007a3c <HAL_GetTick>
 800d2f6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	330c      	adds	r3, #12
 800d2fe:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800d300:	4b3d      	ldr	r3, [pc, #244]	; (800d3f8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800d302:	681a      	ldr	r2, [r3, #0]
 800d304:	4613      	mov	r3, r2
 800d306:	009b      	lsls	r3, r3, #2
 800d308:	4413      	add	r3, r2
 800d30a:	00da      	lsls	r2, r3, #3
 800d30c:	1ad3      	subs	r3, r2, r3
 800d30e:	0d1b      	lsrs	r3, r3, #20
 800d310:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d312:	fb02 f303 	mul.w	r3, r2, r3
 800d316:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800d318:	e060      	b.n	800d3dc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800d31a:	68bb      	ldr	r3, [r7, #8]
 800d31c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800d320:	d107      	bne.n	800d332 <SPI_WaitFifoStateUntilTimeout+0x62>
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	2b00      	cmp	r3, #0
 800d326:	d104      	bne.n	800d332 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800d328:	69fb      	ldr	r3, [r7, #28]
 800d32a:	781b      	ldrb	r3, [r3, #0]
 800d32c:	b2db      	uxtb	r3, r3
 800d32e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800d330:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800d332:	683b      	ldr	r3, [r7, #0]
 800d334:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d338:	d050      	beq.n	800d3dc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800d33a:	f7fa fb7f 	bl	8007a3c <HAL_GetTick>
 800d33e:	4602      	mov	r2, r0
 800d340:	6a3b      	ldr	r3, [r7, #32]
 800d342:	1ad3      	subs	r3, r2, r3
 800d344:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d346:	429a      	cmp	r2, r3
 800d348:	d902      	bls.n	800d350 <SPI_WaitFifoStateUntilTimeout+0x80>
 800d34a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d13d      	bne.n	800d3cc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	685a      	ldr	r2, [r3, #4]
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800d35e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	685b      	ldr	r3, [r3, #4]
 800d364:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d368:	d111      	bne.n	800d38e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	689b      	ldr	r3, [r3, #8]
 800d36e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d372:	d004      	beq.n	800d37e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	689b      	ldr	r3, [r3, #8]
 800d378:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d37c:	d107      	bne.n	800d38e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	681a      	ldr	r2, [r3, #0]
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d38c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d392:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d396:	d10f      	bne.n	800d3b8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	681a      	ldr	r2, [r3, #0]
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d3a6:	601a      	str	r2, [r3, #0]
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	681a      	ldr	r2, [r3, #0]
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d3b6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	2201      	movs	r2, #1
 800d3bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	2200      	movs	r2, #0
 800d3c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800d3c8:	2303      	movs	r3, #3
 800d3ca:	e010      	b.n	800d3ee <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800d3cc:	69bb      	ldr	r3, [r7, #24]
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d101      	bne.n	800d3d6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800d3d2:	2300      	movs	r3, #0
 800d3d4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800d3d6:	69bb      	ldr	r3, [r7, #24]
 800d3d8:	3b01      	subs	r3, #1
 800d3da:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	689a      	ldr	r2, [r3, #8]
 800d3e2:	68bb      	ldr	r3, [r7, #8]
 800d3e4:	4013      	ands	r3, r2
 800d3e6:	687a      	ldr	r2, [r7, #4]
 800d3e8:	429a      	cmp	r2, r3
 800d3ea:	d196      	bne.n	800d31a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800d3ec:	2300      	movs	r3, #0
}
 800d3ee:	4618      	mov	r0, r3
 800d3f0:	3728      	adds	r7, #40	; 0x28
 800d3f2:	46bd      	mov	sp, r7
 800d3f4:	bd80      	pop	{r7, pc}
 800d3f6:	bf00      	nop
 800d3f8:	20000228 	.word	0x20000228

0800d3fc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800d3fc:	b580      	push	{r7, lr}
 800d3fe:	b086      	sub	sp, #24
 800d400:	af02      	add	r7, sp, #8
 800d402:	60f8      	str	r0, [r7, #12]
 800d404:	60b9      	str	r1, [r7, #8]
 800d406:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	685b      	ldr	r3, [r3, #4]
 800d40c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d410:	d111      	bne.n	800d436 <SPI_EndRxTransaction+0x3a>
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	689b      	ldr	r3, [r3, #8]
 800d416:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d41a:	d004      	beq.n	800d426 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	689b      	ldr	r3, [r3, #8]
 800d420:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d424:	d107      	bne.n	800d436 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	681a      	ldr	r2, [r3, #0]
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d434:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	9300      	str	r3, [sp, #0]
 800d43a:	68bb      	ldr	r3, [r7, #8]
 800d43c:	2200      	movs	r2, #0
 800d43e:	2180      	movs	r1, #128	; 0x80
 800d440:	68f8      	ldr	r0, [r7, #12]
 800d442:	f7ff febd 	bl	800d1c0 <SPI_WaitFlagStateUntilTimeout>
 800d446:	4603      	mov	r3, r0
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d007      	beq.n	800d45c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d450:	f043 0220 	orr.w	r2, r3, #32
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800d458:	2303      	movs	r3, #3
 800d45a:	e023      	b.n	800d4a4 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	685b      	ldr	r3, [r3, #4]
 800d460:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d464:	d11d      	bne.n	800d4a2 <SPI_EndRxTransaction+0xa6>
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	689b      	ldr	r3, [r3, #8]
 800d46a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d46e:	d004      	beq.n	800d47a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	689b      	ldr	r3, [r3, #8]
 800d474:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d478:	d113      	bne.n	800d4a2 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	9300      	str	r3, [sp, #0]
 800d47e:	68bb      	ldr	r3, [r7, #8]
 800d480:	2200      	movs	r2, #0
 800d482:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800d486:	68f8      	ldr	r0, [r7, #12]
 800d488:	f7ff ff22 	bl	800d2d0 <SPI_WaitFifoStateUntilTimeout>
 800d48c:	4603      	mov	r3, r0
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d007      	beq.n	800d4a2 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d496:	f043 0220 	orr.w	r2, r3, #32
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800d49e:	2303      	movs	r3, #3
 800d4a0:	e000      	b.n	800d4a4 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800d4a2:	2300      	movs	r3, #0
}
 800d4a4:	4618      	mov	r0, r3
 800d4a6:	3710      	adds	r7, #16
 800d4a8:	46bd      	mov	sp, r7
 800d4aa:	bd80      	pop	{r7, pc}

0800d4ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800d4ac:	b580      	push	{r7, lr}
 800d4ae:	b086      	sub	sp, #24
 800d4b0:	af02      	add	r7, sp, #8
 800d4b2:	60f8      	str	r0, [r7, #12]
 800d4b4:	60b9      	str	r1, [r7, #8]
 800d4b6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	9300      	str	r3, [sp, #0]
 800d4bc:	68bb      	ldr	r3, [r7, #8]
 800d4be:	2200      	movs	r2, #0
 800d4c0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800d4c4:	68f8      	ldr	r0, [r7, #12]
 800d4c6:	f7ff ff03 	bl	800d2d0 <SPI_WaitFifoStateUntilTimeout>
 800d4ca:	4603      	mov	r3, r0
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d007      	beq.n	800d4e0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d4d4:	f043 0220 	orr.w	r2, r3, #32
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800d4dc:	2303      	movs	r3, #3
 800d4de:	e027      	b.n	800d530 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	9300      	str	r3, [sp, #0]
 800d4e4:	68bb      	ldr	r3, [r7, #8]
 800d4e6:	2200      	movs	r2, #0
 800d4e8:	2180      	movs	r1, #128	; 0x80
 800d4ea:	68f8      	ldr	r0, [r7, #12]
 800d4ec:	f7ff fe68 	bl	800d1c0 <SPI_WaitFlagStateUntilTimeout>
 800d4f0:	4603      	mov	r3, r0
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d007      	beq.n	800d506 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d4fa:	f043 0220 	orr.w	r2, r3, #32
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800d502:	2303      	movs	r3, #3
 800d504:	e014      	b.n	800d530 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	9300      	str	r3, [sp, #0]
 800d50a:	68bb      	ldr	r3, [r7, #8]
 800d50c:	2200      	movs	r2, #0
 800d50e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800d512:	68f8      	ldr	r0, [r7, #12]
 800d514:	f7ff fedc 	bl	800d2d0 <SPI_WaitFifoStateUntilTimeout>
 800d518:	4603      	mov	r3, r0
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d007      	beq.n	800d52e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d522:	f043 0220 	orr.w	r2, r3, #32
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800d52a:	2303      	movs	r3, #3
 800d52c:	e000      	b.n	800d530 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800d52e:	2300      	movs	r3, #0
}
 800d530:	4618      	mov	r0, r3
 800d532:	3710      	adds	r7, #16
 800d534:	46bd      	mov	sp, r7
 800d536:	bd80      	pop	{r7, pc}

0800d538 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d538:	b580      	push	{r7, lr}
 800d53a:	b082      	sub	sp, #8
 800d53c:	af00      	add	r7, sp, #0
 800d53e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	2b00      	cmp	r3, #0
 800d544:	d101      	bne.n	800d54a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d546:	2301      	movs	r3, #1
 800d548:	e049      	b.n	800d5de <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d550:	b2db      	uxtb	r3, r3
 800d552:	2b00      	cmp	r3, #0
 800d554:	d106      	bne.n	800d564 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	2200      	movs	r2, #0
 800d55a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d55e:	6878      	ldr	r0, [r7, #4]
 800d560:	f7f9 f972 	bl	8006848 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	2202      	movs	r2, #2
 800d568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	681a      	ldr	r2, [r3, #0]
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	3304      	adds	r3, #4
 800d574:	4619      	mov	r1, r3
 800d576:	4610      	mov	r0, r2
 800d578:	f000 fae6 	bl	800db48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	2201      	movs	r2, #1
 800d580:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	2201      	movs	r2, #1
 800d588:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	2201      	movs	r2, #1
 800d590:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	2201      	movs	r2, #1
 800d598:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	2201      	movs	r2, #1
 800d5a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	2201      	movs	r2, #1
 800d5a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	2201      	movs	r2, #1
 800d5b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	2201      	movs	r2, #1
 800d5b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	2201      	movs	r2, #1
 800d5c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	2201      	movs	r2, #1
 800d5c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	2201      	movs	r2, #1
 800d5d0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	2201      	movs	r2, #1
 800d5d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d5dc:	2300      	movs	r3, #0
}
 800d5de:	4618      	mov	r0, r3
 800d5e0:	3708      	adds	r7, #8
 800d5e2:	46bd      	mov	sp, r7
 800d5e4:	bd80      	pop	{r7, pc}
	...

0800d5e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d5e8:	b480      	push	{r7}
 800d5ea:	b085      	sub	sp, #20
 800d5ec:	af00      	add	r7, sp, #0
 800d5ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d5f6:	b2db      	uxtb	r3, r3
 800d5f8:	2b01      	cmp	r3, #1
 800d5fa:	d001      	beq.n	800d600 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d5fc:	2301      	movs	r3, #1
 800d5fe:	e04f      	b.n	800d6a0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	2202      	movs	r2, #2
 800d604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	68da      	ldr	r2, [r3, #12]
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	f042 0201 	orr.w	r2, r2, #1
 800d616:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	4a23      	ldr	r2, [pc, #140]	; (800d6ac <HAL_TIM_Base_Start_IT+0xc4>)
 800d61e:	4293      	cmp	r3, r2
 800d620:	d01d      	beq.n	800d65e <HAL_TIM_Base_Start_IT+0x76>
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d62a:	d018      	beq.n	800d65e <HAL_TIM_Base_Start_IT+0x76>
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	4a1f      	ldr	r2, [pc, #124]	; (800d6b0 <HAL_TIM_Base_Start_IT+0xc8>)
 800d632:	4293      	cmp	r3, r2
 800d634:	d013      	beq.n	800d65e <HAL_TIM_Base_Start_IT+0x76>
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	4a1e      	ldr	r2, [pc, #120]	; (800d6b4 <HAL_TIM_Base_Start_IT+0xcc>)
 800d63c:	4293      	cmp	r3, r2
 800d63e:	d00e      	beq.n	800d65e <HAL_TIM_Base_Start_IT+0x76>
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	4a1c      	ldr	r2, [pc, #112]	; (800d6b8 <HAL_TIM_Base_Start_IT+0xd0>)
 800d646:	4293      	cmp	r3, r2
 800d648:	d009      	beq.n	800d65e <HAL_TIM_Base_Start_IT+0x76>
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	4a1b      	ldr	r2, [pc, #108]	; (800d6bc <HAL_TIM_Base_Start_IT+0xd4>)
 800d650:	4293      	cmp	r3, r2
 800d652:	d004      	beq.n	800d65e <HAL_TIM_Base_Start_IT+0x76>
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	4a19      	ldr	r2, [pc, #100]	; (800d6c0 <HAL_TIM_Base_Start_IT+0xd8>)
 800d65a:	4293      	cmp	r3, r2
 800d65c:	d115      	bne.n	800d68a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	689a      	ldr	r2, [r3, #8]
 800d664:	4b17      	ldr	r3, [pc, #92]	; (800d6c4 <HAL_TIM_Base_Start_IT+0xdc>)
 800d666:	4013      	ands	r3, r2
 800d668:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	2b06      	cmp	r3, #6
 800d66e:	d015      	beq.n	800d69c <HAL_TIM_Base_Start_IT+0xb4>
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d676:	d011      	beq.n	800d69c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	681a      	ldr	r2, [r3, #0]
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	f042 0201 	orr.w	r2, r2, #1
 800d686:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d688:	e008      	b.n	800d69c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	681a      	ldr	r2, [r3, #0]
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	f042 0201 	orr.w	r2, r2, #1
 800d698:	601a      	str	r2, [r3, #0]
 800d69a:	e000      	b.n	800d69e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d69c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d69e:	2300      	movs	r3, #0
}
 800d6a0:	4618      	mov	r0, r3
 800d6a2:	3714      	adds	r7, #20
 800d6a4:	46bd      	mov	sp, r7
 800d6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6aa:	4770      	bx	lr
 800d6ac:	40012c00 	.word	0x40012c00
 800d6b0:	40000400 	.word	0x40000400
 800d6b4:	40000800 	.word	0x40000800
 800d6b8:	40000c00 	.word	0x40000c00
 800d6bc:	40013400 	.word	0x40013400
 800d6c0:	40014000 	.word	0x40014000
 800d6c4:	00010007 	.word	0x00010007

0800d6c8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800d6c8:	b480      	push	{r7}
 800d6ca:	b083      	sub	sp, #12
 800d6cc:	af00      	add	r7, sp, #0
 800d6ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	68da      	ldr	r2, [r3, #12]
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	f022 0201 	bic.w	r2, r2, #1
 800d6de:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	6a1a      	ldr	r2, [r3, #32]
 800d6e6:	f241 1311 	movw	r3, #4369	; 0x1111
 800d6ea:	4013      	ands	r3, r2
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d10f      	bne.n	800d710 <HAL_TIM_Base_Stop_IT+0x48>
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	6a1a      	ldr	r2, [r3, #32]
 800d6f6:	f240 4344 	movw	r3, #1092	; 0x444
 800d6fa:	4013      	ands	r3, r2
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d107      	bne.n	800d710 <HAL_TIM_Base_Stop_IT+0x48>
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	681a      	ldr	r2, [r3, #0]
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	f022 0201 	bic.w	r2, r2, #1
 800d70e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	2201      	movs	r2, #1
 800d714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800d718:	2300      	movs	r3, #0
}
 800d71a:	4618      	mov	r0, r3
 800d71c:	370c      	adds	r7, #12
 800d71e:	46bd      	mov	sp, r7
 800d720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d724:	4770      	bx	lr

0800d726 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d726:	b580      	push	{r7, lr}
 800d728:	b082      	sub	sp, #8
 800d72a:	af00      	add	r7, sp, #0
 800d72c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	691b      	ldr	r3, [r3, #16]
 800d734:	f003 0302 	and.w	r3, r3, #2
 800d738:	2b02      	cmp	r3, #2
 800d73a:	d122      	bne.n	800d782 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	68db      	ldr	r3, [r3, #12]
 800d742:	f003 0302 	and.w	r3, r3, #2
 800d746:	2b02      	cmp	r3, #2
 800d748:	d11b      	bne.n	800d782 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	f06f 0202 	mvn.w	r2, #2
 800d752:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	2201      	movs	r2, #1
 800d758:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	699b      	ldr	r3, [r3, #24]
 800d760:	f003 0303 	and.w	r3, r3, #3
 800d764:	2b00      	cmp	r3, #0
 800d766:	d003      	beq.n	800d770 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d768:	6878      	ldr	r0, [r7, #4]
 800d76a:	f000 f9ce 	bl	800db0a <HAL_TIM_IC_CaptureCallback>
 800d76e:	e005      	b.n	800d77c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d770:	6878      	ldr	r0, [r7, #4]
 800d772:	f000 f9c0 	bl	800daf6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d776:	6878      	ldr	r0, [r7, #4]
 800d778:	f000 f9d1 	bl	800db1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	2200      	movs	r2, #0
 800d780:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	691b      	ldr	r3, [r3, #16]
 800d788:	f003 0304 	and.w	r3, r3, #4
 800d78c:	2b04      	cmp	r3, #4
 800d78e:	d122      	bne.n	800d7d6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	68db      	ldr	r3, [r3, #12]
 800d796:	f003 0304 	and.w	r3, r3, #4
 800d79a:	2b04      	cmp	r3, #4
 800d79c:	d11b      	bne.n	800d7d6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	f06f 0204 	mvn.w	r2, #4
 800d7a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	2202      	movs	r2, #2
 800d7ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	699b      	ldr	r3, [r3, #24]
 800d7b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d003      	beq.n	800d7c4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d7bc:	6878      	ldr	r0, [r7, #4]
 800d7be:	f000 f9a4 	bl	800db0a <HAL_TIM_IC_CaptureCallback>
 800d7c2:	e005      	b.n	800d7d0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d7c4:	6878      	ldr	r0, [r7, #4]
 800d7c6:	f000 f996 	bl	800daf6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d7ca:	6878      	ldr	r0, [r7, #4]
 800d7cc:	f000 f9a7 	bl	800db1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	2200      	movs	r2, #0
 800d7d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	691b      	ldr	r3, [r3, #16]
 800d7dc:	f003 0308 	and.w	r3, r3, #8
 800d7e0:	2b08      	cmp	r3, #8
 800d7e2:	d122      	bne.n	800d82a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	68db      	ldr	r3, [r3, #12]
 800d7ea:	f003 0308 	and.w	r3, r3, #8
 800d7ee:	2b08      	cmp	r3, #8
 800d7f0:	d11b      	bne.n	800d82a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	f06f 0208 	mvn.w	r2, #8
 800d7fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	2204      	movs	r2, #4
 800d800:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	69db      	ldr	r3, [r3, #28]
 800d808:	f003 0303 	and.w	r3, r3, #3
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d003      	beq.n	800d818 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d810:	6878      	ldr	r0, [r7, #4]
 800d812:	f000 f97a 	bl	800db0a <HAL_TIM_IC_CaptureCallback>
 800d816:	e005      	b.n	800d824 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d818:	6878      	ldr	r0, [r7, #4]
 800d81a:	f000 f96c 	bl	800daf6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d81e:	6878      	ldr	r0, [r7, #4]
 800d820:	f000 f97d 	bl	800db1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	2200      	movs	r2, #0
 800d828:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	691b      	ldr	r3, [r3, #16]
 800d830:	f003 0310 	and.w	r3, r3, #16
 800d834:	2b10      	cmp	r3, #16
 800d836:	d122      	bne.n	800d87e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	68db      	ldr	r3, [r3, #12]
 800d83e:	f003 0310 	and.w	r3, r3, #16
 800d842:	2b10      	cmp	r3, #16
 800d844:	d11b      	bne.n	800d87e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	f06f 0210 	mvn.w	r2, #16
 800d84e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	2208      	movs	r2, #8
 800d854:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	69db      	ldr	r3, [r3, #28]
 800d85c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d860:	2b00      	cmp	r3, #0
 800d862:	d003      	beq.n	800d86c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d864:	6878      	ldr	r0, [r7, #4]
 800d866:	f000 f950 	bl	800db0a <HAL_TIM_IC_CaptureCallback>
 800d86a:	e005      	b.n	800d878 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d86c:	6878      	ldr	r0, [r7, #4]
 800d86e:	f000 f942 	bl	800daf6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d872:	6878      	ldr	r0, [r7, #4]
 800d874:	f000 f953 	bl	800db1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	2200      	movs	r2, #0
 800d87c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	691b      	ldr	r3, [r3, #16]
 800d884:	f003 0301 	and.w	r3, r3, #1
 800d888:	2b01      	cmp	r3, #1
 800d88a:	d10e      	bne.n	800d8aa <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	68db      	ldr	r3, [r3, #12]
 800d892:	f003 0301 	and.w	r3, r3, #1
 800d896:	2b01      	cmp	r3, #1
 800d898:	d107      	bne.n	800d8aa <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	f06f 0201 	mvn.w	r2, #1
 800d8a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d8a4:	6878      	ldr	r0, [r7, #4]
 800d8a6:	f7f7 fb9d 	bl	8004fe4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	691b      	ldr	r3, [r3, #16]
 800d8b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d8b4:	2b80      	cmp	r3, #128	; 0x80
 800d8b6:	d10e      	bne.n	800d8d6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	68db      	ldr	r3, [r3, #12]
 800d8be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d8c2:	2b80      	cmp	r3, #128	; 0x80
 800d8c4:	d107      	bne.n	800d8d6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d8ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d8d0:	6878      	ldr	r0, [r7, #4]
 800d8d2:	f000 faff 	bl	800ded4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	691b      	ldr	r3, [r3, #16]
 800d8dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d8e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d8e4:	d10e      	bne.n	800d904 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	68db      	ldr	r3, [r3, #12]
 800d8ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d8f0:	2b80      	cmp	r3, #128	; 0x80
 800d8f2:	d107      	bne.n	800d904 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d8fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d8fe:	6878      	ldr	r0, [r7, #4]
 800d900:	f000 faf2 	bl	800dee8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	691b      	ldr	r3, [r3, #16]
 800d90a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d90e:	2b40      	cmp	r3, #64	; 0x40
 800d910:	d10e      	bne.n	800d930 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	68db      	ldr	r3, [r3, #12]
 800d918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d91c:	2b40      	cmp	r3, #64	; 0x40
 800d91e:	d107      	bne.n	800d930 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d928:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d92a:	6878      	ldr	r0, [r7, #4]
 800d92c:	f000 f901 	bl	800db32 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	691b      	ldr	r3, [r3, #16]
 800d936:	f003 0320 	and.w	r3, r3, #32
 800d93a:	2b20      	cmp	r3, #32
 800d93c:	d10e      	bne.n	800d95c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	68db      	ldr	r3, [r3, #12]
 800d944:	f003 0320 	and.w	r3, r3, #32
 800d948:	2b20      	cmp	r3, #32
 800d94a:	d107      	bne.n	800d95c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	f06f 0220 	mvn.w	r2, #32
 800d954:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d956:	6878      	ldr	r0, [r7, #4]
 800d958:	f000 fab2 	bl	800dec0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d95c:	bf00      	nop
 800d95e:	3708      	adds	r7, #8
 800d960:	46bd      	mov	sp, r7
 800d962:	bd80      	pop	{r7, pc}

0800d964 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d964:	b580      	push	{r7, lr}
 800d966:	b084      	sub	sp, #16
 800d968:	af00      	add	r7, sp, #0
 800d96a:	6078      	str	r0, [r7, #4]
 800d96c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d96e:	2300      	movs	r3, #0
 800d970:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d978:	2b01      	cmp	r3, #1
 800d97a:	d101      	bne.n	800d980 <HAL_TIM_ConfigClockSource+0x1c>
 800d97c:	2302      	movs	r3, #2
 800d97e:	e0b6      	b.n	800daee <HAL_TIM_ConfigClockSource+0x18a>
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	2201      	movs	r2, #1
 800d984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	2202      	movs	r2, #2
 800d98c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	689b      	ldr	r3, [r3, #8]
 800d996:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d998:	68bb      	ldr	r3, [r7, #8]
 800d99a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d99e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800d9a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d9a4:	68bb      	ldr	r3, [r7, #8]
 800d9a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d9aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	68ba      	ldr	r2, [r7, #8]
 800d9b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d9b4:	683b      	ldr	r3, [r7, #0]
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d9bc:	d03e      	beq.n	800da3c <HAL_TIM_ConfigClockSource+0xd8>
 800d9be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d9c2:	f200 8087 	bhi.w	800dad4 <HAL_TIM_ConfigClockSource+0x170>
 800d9c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d9ca:	f000 8086 	beq.w	800dada <HAL_TIM_ConfigClockSource+0x176>
 800d9ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d9d2:	d87f      	bhi.n	800dad4 <HAL_TIM_ConfigClockSource+0x170>
 800d9d4:	2b70      	cmp	r3, #112	; 0x70
 800d9d6:	d01a      	beq.n	800da0e <HAL_TIM_ConfigClockSource+0xaa>
 800d9d8:	2b70      	cmp	r3, #112	; 0x70
 800d9da:	d87b      	bhi.n	800dad4 <HAL_TIM_ConfigClockSource+0x170>
 800d9dc:	2b60      	cmp	r3, #96	; 0x60
 800d9de:	d050      	beq.n	800da82 <HAL_TIM_ConfigClockSource+0x11e>
 800d9e0:	2b60      	cmp	r3, #96	; 0x60
 800d9e2:	d877      	bhi.n	800dad4 <HAL_TIM_ConfigClockSource+0x170>
 800d9e4:	2b50      	cmp	r3, #80	; 0x50
 800d9e6:	d03c      	beq.n	800da62 <HAL_TIM_ConfigClockSource+0xfe>
 800d9e8:	2b50      	cmp	r3, #80	; 0x50
 800d9ea:	d873      	bhi.n	800dad4 <HAL_TIM_ConfigClockSource+0x170>
 800d9ec:	2b40      	cmp	r3, #64	; 0x40
 800d9ee:	d058      	beq.n	800daa2 <HAL_TIM_ConfigClockSource+0x13e>
 800d9f0:	2b40      	cmp	r3, #64	; 0x40
 800d9f2:	d86f      	bhi.n	800dad4 <HAL_TIM_ConfigClockSource+0x170>
 800d9f4:	2b30      	cmp	r3, #48	; 0x30
 800d9f6:	d064      	beq.n	800dac2 <HAL_TIM_ConfigClockSource+0x15e>
 800d9f8:	2b30      	cmp	r3, #48	; 0x30
 800d9fa:	d86b      	bhi.n	800dad4 <HAL_TIM_ConfigClockSource+0x170>
 800d9fc:	2b20      	cmp	r3, #32
 800d9fe:	d060      	beq.n	800dac2 <HAL_TIM_ConfigClockSource+0x15e>
 800da00:	2b20      	cmp	r3, #32
 800da02:	d867      	bhi.n	800dad4 <HAL_TIM_ConfigClockSource+0x170>
 800da04:	2b00      	cmp	r3, #0
 800da06:	d05c      	beq.n	800dac2 <HAL_TIM_ConfigClockSource+0x15e>
 800da08:	2b10      	cmp	r3, #16
 800da0a:	d05a      	beq.n	800dac2 <HAL_TIM_ConfigClockSource+0x15e>
 800da0c:	e062      	b.n	800dad4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	6818      	ldr	r0, [r3, #0]
 800da12:	683b      	ldr	r3, [r7, #0]
 800da14:	6899      	ldr	r1, [r3, #8]
 800da16:	683b      	ldr	r3, [r7, #0]
 800da18:	685a      	ldr	r2, [r3, #4]
 800da1a:	683b      	ldr	r3, [r7, #0]
 800da1c:	68db      	ldr	r3, [r3, #12]
 800da1e:	f000 f9a7 	bl	800dd70 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	689b      	ldr	r3, [r3, #8]
 800da28:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800da2a:	68bb      	ldr	r3, [r7, #8]
 800da2c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800da30:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	68ba      	ldr	r2, [r7, #8]
 800da38:	609a      	str	r2, [r3, #8]
      break;
 800da3a:	e04f      	b.n	800dadc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	6818      	ldr	r0, [r3, #0]
 800da40:	683b      	ldr	r3, [r7, #0]
 800da42:	6899      	ldr	r1, [r3, #8]
 800da44:	683b      	ldr	r3, [r7, #0]
 800da46:	685a      	ldr	r2, [r3, #4]
 800da48:	683b      	ldr	r3, [r7, #0]
 800da4a:	68db      	ldr	r3, [r3, #12]
 800da4c:	f000 f990 	bl	800dd70 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	689a      	ldr	r2, [r3, #8]
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800da5e:	609a      	str	r2, [r3, #8]
      break;
 800da60:	e03c      	b.n	800dadc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	6818      	ldr	r0, [r3, #0]
 800da66:	683b      	ldr	r3, [r7, #0]
 800da68:	6859      	ldr	r1, [r3, #4]
 800da6a:	683b      	ldr	r3, [r7, #0]
 800da6c:	68db      	ldr	r3, [r3, #12]
 800da6e:	461a      	mov	r2, r3
 800da70:	f000 f904 	bl	800dc7c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	2150      	movs	r1, #80	; 0x50
 800da7a:	4618      	mov	r0, r3
 800da7c:	f000 f95d 	bl	800dd3a <TIM_ITRx_SetConfig>
      break;
 800da80:	e02c      	b.n	800dadc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	6818      	ldr	r0, [r3, #0]
 800da86:	683b      	ldr	r3, [r7, #0]
 800da88:	6859      	ldr	r1, [r3, #4]
 800da8a:	683b      	ldr	r3, [r7, #0]
 800da8c:	68db      	ldr	r3, [r3, #12]
 800da8e:	461a      	mov	r2, r3
 800da90:	f000 f923 	bl	800dcda <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	2160      	movs	r1, #96	; 0x60
 800da9a:	4618      	mov	r0, r3
 800da9c:	f000 f94d 	bl	800dd3a <TIM_ITRx_SetConfig>
      break;
 800daa0:	e01c      	b.n	800dadc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	6818      	ldr	r0, [r3, #0]
 800daa6:	683b      	ldr	r3, [r7, #0]
 800daa8:	6859      	ldr	r1, [r3, #4]
 800daaa:	683b      	ldr	r3, [r7, #0]
 800daac:	68db      	ldr	r3, [r3, #12]
 800daae:	461a      	mov	r2, r3
 800dab0:	f000 f8e4 	bl	800dc7c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	2140      	movs	r1, #64	; 0x40
 800daba:	4618      	mov	r0, r3
 800dabc:	f000 f93d 	bl	800dd3a <TIM_ITRx_SetConfig>
      break;
 800dac0:	e00c      	b.n	800dadc <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	681a      	ldr	r2, [r3, #0]
 800dac6:	683b      	ldr	r3, [r7, #0]
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	4619      	mov	r1, r3
 800dacc:	4610      	mov	r0, r2
 800dace:	f000 f934 	bl	800dd3a <TIM_ITRx_SetConfig>
      break;
 800dad2:	e003      	b.n	800dadc <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800dad4:	2301      	movs	r3, #1
 800dad6:	73fb      	strb	r3, [r7, #15]
      break;
 800dad8:	e000      	b.n	800dadc <HAL_TIM_ConfigClockSource+0x178>
      break;
 800dada:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	2201      	movs	r2, #1
 800dae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	2200      	movs	r2, #0
 800dae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800daec:	7bfb      	ldrb	r3, [r7, #15]
}
 800daee:	4618      	mov	r0, r3
 800daf0:	3710      	adds	r7, #16
 800daf2:	46bd      	mov	sp, r7
 800daf4:	bd80      	pop	{r7, pc}

0800daf6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800daf6:	b480      	push	{r7}
 800daf8:	b083      	sub	sp, #12
 800dafa:	af00      	add	r7, sp, #0
 800dafc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800dafe:	bf00      	nop
 800db00:	370c      	adds	r7, #12
 800db02:	46bd      	mov	sp, r7
 800db04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db08:	4770      	bx	lr

0800db0a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800db0a:	b480      	push	{r7}
 800db0c:	b083      	sub	sp, #12
 800db0e:	af00      	add	r7, sp, #0
 800db10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800db12:	bf00      	nop
 800db14:	370c      	adds	r7, #12
 800db16:	46bd      	mov	sp, r7
 800db18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db1c:	4770      	bx	lr

0800db1e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800db1e:	b480      	push	{r7}
 800db20:	b083      	sub	sp, #12
 800db22:	af00      	add	r7, sp, #0
 800db24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800db26:	bf00      	nop
 800db28:	370c      	adds	r7, #12
 800db2a:	46bd      	mov	sp, r7
 800db2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db30:	4770      	bx	lr

0800db32 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800db32:	b480      	push	{r7}
 800db34:	b083      	sub	sp, #12
 800db36:	af00      	add	r7, sp, #0
 800db38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800db3a:	bf00      	nop
 800db3c:	370c      	adds	r7, #12
 800db3e:	46bd      	mov	sp, r7
 800db40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db44:	4770      	bx	lr
	...

0800db48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800db48:	b480      	push	{r7}
 800db4a:	b085      	sub	sp, #20
 800db4c:	af00      	add	r7, sp, #0
 800db4e:	6078      	str	r0, [r7, #4]
 800db50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	4a40      	ldr	r2, [pc, #256]	; (800dc5c <TIM_Base_SetConfig+0x114>)
 800db5c:	4293      	cmp	r3, r2
 800db5e:	d013      	beq.n	800db88 <TIM_Base_SetConfig+0x40>
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800db66:	d00f      	beq.n	800db88 <TIM_Base_SetConfig+0x40>
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	4a3d      	ldr	r2, [pc, #244]	; (800dc60 <TIM_Base_SetConfig+0x118>)
 800db6c:	4293      	cmp	r3, r2
 800db6e:	d00b      	beq.n	800db88 <TIM_Base_SetConfig+0x40>
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	4a3c      	ldr	r2, [pc, #240]	; (800dc64 <TIM_Base_SetConfig+0x11c>)
 800db74:	4293      	cmp	r3, r2
 800db76:	d007      	beq.n	800db88 <TIM_Base_SetConfig+0x40>
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	4a3b      	ldr	r2, [pc, #236]	; (800dc68 <TIM_Base_SetConfig+0x120>)
 800db7c:	4293      	cmp	r3, r2
 800db7e:	d003      	beq.n	800db88 <TIM_Base_SetConfig+0x40>
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	4a3a      	ldr	r2, [pc, #232]	; (800dc6c <TIM_Base_SetConfig+0x124>)
 800db84:	4293      	cmp	r3, r2
 800db86:	d108      	bne.n	800db9a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800db8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800db90:	683b      	ldr	r3, [r7, #0]
 800db92:	685b      	ldr	r3, [r3, #4]
 800db94:	68fa      	ldr	r2, [r7, #12]
 800db96:	4313      	orrs	r3, r2
 800db98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	4a2f      	ldr	r2, [pc, #188]	; (800dc5c <TIM_Base_SetConfig+0x114>)
 800db9e:	4293      	cmp	r3, r2
 800dba0:	d01f      	beq.n	800dbe2 <TIM_Base_SetConfig+0x9a>
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dba8:	d01b      	beq.n	800dbe2 <TIM_Base_SetConfig+0x9a>
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	4a2c      	ldr	r2, [pc, #176]	; (800dc60 <TIM_Base_SetConfig+0x118>)
 800dbae:	4293      	cmp	r3, r2
 800dbb0:	d017      	beq.n	800dbe2 <TIM_Base_SetConfig+0x9a>
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	4a2b      	ldr	r2, [pc, #172]	; (800dc64 <TIM_Base_SetConfig+0x11c>)
 800dbb6:	4293      	cmp	r3, r2
 800dbb8:	d013      	beq.n	800dbe2 <TIM_Base_SetConfig+0x9a>
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	4a2a      	ldr	r2, [pc, #168]	; (800dc68 <TIM_Base_SetConfig+0x120>)
 800dbbe:	4293      	cmp	r3, r2
 800dbc0:	d00f      	beq.n	800dbe2 <TIM_Base_SetConfig+0x9a>
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	4a29      	ldr	r2, [pc, #164]	; (800dc6c <TIM_Base_SetConfig+0x124>)
 800dbc6:	4293      	cmp	r3, r2
 800dbc8:	d00b      	beq.n	800dbe2 <TIM_Base_SetConfig+0x9a>
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	4a28      	ldr	r2, [pc, #160]	; (800dc70 <TIM_Base_SetConfig+0x128>)
 800dbce:	4293      	cmp	r3, r2
 800dbd0:	d007      	beq.n	800dbe2 <TIM_Base_SetConfig+0x9a>
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	4a27      	ldr	r2, [pc, #156]	; (800dc74 <TIM_Base_SetConfig+0x12c>)
 800dbd6:	4293      	cmp	r3, r2
 800dbd8:	d003      	beq.n	800dbe2 <TIM_Base_SetConfig+0x9a>
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	4a26      	ldr	r2, [pc, #152]	; (800dc78 <TIM_Base_SetConfig+0x130>)
 800dbde:	4293      	cmp	r3, r2
 800dbe0:	d108      	bne.n	800dbf4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dbe8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800dbea:	683b      	ldr	r3, [r7, #0]
 800dbec:	68db      	ldr	r3, [r3, #12]
 800dbee:	68fa      	ldr	r2, [r7, #12]
 800dbf0:	4313      	orrs	r3, r2
 800dbf2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800dbfa:	683b      	ldr	r3, [r7, #0]
 800dbfc:	695b      	ldr	r3, [r3, #20]
 800dbfe:	4313      	orrs	r3, r2
 800dc00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	68fa      	ldr	r2, [r7, #12]
 800dc06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800dc08:	683b      	ldr	r3, [r7, #0]
 800dc0a:	689a      	ldr	r2, [r3, #8]
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800dc10:	683b      	ldr	r3, [r7, #0]
 800dc12:	681a      	ldr	r2, [r3, #0]
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	4a10      	ldr	r2, [pc, #64]	; (800dc5c <TIM_Base_SetConfig+0x114>)
 800dc1c:	4293      	cmp	r3, r2
 800dc1e:	d00f      	beq.n	800dc40 <TIM_Base_SetConfig+0xf8>
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	4a12      	ldr	r2, [pc, #72]	; (800dc6c <TIM_Base_SetConfig+0x124>)
 800dc24:	4293      	cmp	r3, r2
 800dc26:	d00b      	beq.n	800dc40 <TIM_Base_SetConfig+0xf8>
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	4a11      	ldr	r2, [pc, #68]	; (800dc70 <TIM_Base_SetConfig+0x128>)
 800dc2c:	4293      	cmp	r3, r2
 800dc2e:	d007      	beq.n	800dc40 <TIM_Base_SetConfig+0xf8>
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	4a10      	ldr	r2, [pc, #64]	; (800dc74 <TIM_Base_SetConfig+0x12c>)
 800dc34:	4293      	cmp	r3, r2
 800dc36:	d003      	beq.n	800dc40 <TIM_Base_SetConfig+0xf8>
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	4a0f      	ldr	r2, [pc, #60]	; (800dc78 <TIM_Base_SetConfig+0x130>)
 800dc3c:	4293      	cmp	r3, r2
 800dc3e:	d103      	bne.n	800dc48 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800dc40:	683b      	ldr	r3, [r7, #0]
 800dc42:	691a      	ldr	r2, [r3, #16]
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	2201      	movs	r2, #1
 800dc4c:	615a      	str	r2, [r3, #20]
}
 800dc4e:	bf00      	nop
 800dc50:	3714      	adds	r7, #20
 800dc52:	46bd      	mov	sp, r7
 800dc54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc58:	4770      	bx	lr
 800dc5a:	bf00      	nop
 800dc5c:	40012c00 	.word	0x40012c00
 800dc60:	40000400 	.word	0x40000400
 800dc64:	40000800 	.word	0x40000800
 800dc68:	40000c00 	.word	0x40000c00
 800dc6c:	40013400 	.word	0x40013400
 800dc70:	40014000 	.word	0x40014000
 800dc74:	40014400 	.word	0x40014400
 800dc78:	40014800 	.word	0x40014800

0800dc7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800dc7c:	b480      	push	{r7}
 800dc7e:	b087      	sub	sp, #28
 800dc80:	af00      	add	r7, sp, #0
 800dc82:	60f8      	str	r0, [r7, #12]
 800dc84:	60b9      	str	r1, [r7, #8]
 800dc86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	6a1b      	ldr	r3, [r3, #32]
 800dc8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	6a1b      	ldr	r3, [r3, #32]
 800dc92:	f023 0201 	bic.w	r2, r3, #1
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	699b      	ldr	r3, [r3, #24]
 800dc9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800dca0:	693b      	ldr	r3, [r7, #16]
 800dca2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800dca6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	011b      	lsls	r3, r3, #4
 800dcac:	693a      	ldr	r2, [r7, #16]
 800dcae:	4313      	orrs	r3, r2
 800dcb0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800dcb2:	697b      	ldr	r3, [r7, #20]
 800dcb4:	f023 030a 	bic.w	r3, r3, #10
 800dcb8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800dcba:	697a      	ldr	r2, [r7, #20]
 800dcbc:	68bb      	ldr	r3, [r7, #8]
 800dcbe:	4313      	orrs	r3, r2
 800dcc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	693a      	ldr	r2, [r7, #16]
 800dcc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	697a      	ldr	r2, [r7, #20]
 800dccc:	621a      	str	r2, [r3, #32]
}
 800dcce:	bf00      	nop
 800dcd0:	371c      	adds	r7, #28
 800dcd2:	46bd      	mov	sp, r7
 800dcd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd8:	4770      	bx	lr

0800dcda <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800dcda:	b480      	push	{r7}
 800dcdc:	b087      	sub	sp, #28
 800dcde:	af00      	add	r7, sp, #0
 800dce0:	60f8      	str	r0, [r7, #12]
 800dce2:	60b9      	str	r1, [r7, #8]
 800dce4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	6a1b      	ldr	r3, [r3, #32]
 800dcea:	f023 0210 	bic.w	r2, r3, #16
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	699b      	ldr	r3, [r3, #24]
 800dcf6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	6a1b      	ldr	r3, [r3, #32]
 800dcfc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800dcfe:	697b      	ldr	r3, [r7, #20]
 800dd00:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800dd04:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	031b      	lsls	r3, r3, #12
 800dd0a:	697a      	ldr	r2, [r7, #20]
 800dd0c:	4313      	orrs	r3, r2
 800dd0e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800dd10:	693b      	ldr	r3, [r7, #16]
 800dd12:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800dd16:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800dd18:	68bb      	ldr	r3, [r7, #8]
 800dd1a:	011b      	lsls	r3, r3, #4
 800dd1c:	693a      	ldr	r2, [r7, #16]
 800dd1e:	4313      	orrs	r3, r2
 800dd20:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	697a      	ldr	r2, [r7, #20]
 800dd26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	693a      	ldr	r2, [r7, #16]
 800dd2c:	621a      	str	r2, [r3, #32]
}
 800dd2e:	bf00      	nop
 800dd30:	371c      	adds	r7, #28
 800dd32:	46bd      	mov	sp, r7
 800dd34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd38:	4770      	bx	lr

0800dd3a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800dd3a:	b480      	push	{r7}
 800dd3c:	b085      	sub	sp, #20
 800dd3e:	af00      	add	r7, sp, #0
 800dd40:	6078      	str	r0, [r7, #4]
 800dd42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	689b      	ldr	r3, [r3, #8]
 800dd48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dd50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800dd52:	683a      	ldr	r2, [r7, #0]
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	4313      	orrs	r3, r2
 800dd58:	f043 0307 	orr.w	r3, r3, #7
 800dd5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	68fa      	ldr	r2, [r7, #12]
 800dd62:	609a      	str	r2, [r3, #8]
}
 800dd64:	bf00      	nop
 800dd66:	3714      	adds	r7, #20
 800dd68:	46bd      	mov	sp, r7
 800dd6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd6e:	4770      	bx	lr

0800dd70 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800dd70:	b480      	push	{r7}
 800dd72:	b087      	sub	sp, #28
 800dd74:	af00      	add	r7, sp, #0
 800dd76:	60f8      	str	r0, [r7, #12]
 800dd78:	60b9      	str	r1, [r7, #8]
 800dd7a:	607a      	str	r2, [r7, #4]
 800dd7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	689b      	ldr	r3, [r3, #8]
 800dd82:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800dd84:	697b      	ldr	r3, [r7, #20]
 800dd86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800dd8a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800dd8c:	683b      	ldr	r3, [r7, #0]
 800dd8e:	021a      	lsls	r2, r3, #8
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	431a      	orrs	r2, r3
 800dd94:	68bb      	ldr	r3, [r7, #8]
 800dd96:	4313      	orrs	r3, r2
 800dd98:	697a      	ldr	r2, [r7, #20]
 800dd9a:	4313      	orrs	r3, r2
 800dd9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	697a      	ldr	r2, [r7, #20]
 800dda2:	609a      	str	r2, [r3, #8]
}
 800dda4:	bf00      	nop
 800dda6:	371c      	adds	r7, #28
 800dda8:	46bd      	mov	sp, r7
 800ddaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddae:	4770      	bx	lr

0800ddb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ddb0:	b480      	push	{r7}
 800ddb2:	b085      	sub	sp, #20
 800ddb4:	af00      	add	r7, sp, #0
 800ddb6:	6078      	str	r0, [r7, #4]
 800ddb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ddc0:	2b01      	cmp	r3, #1
 800ddc2:	d101      	bne.n	800ddc8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ddc4:	2302      	movs	r3, #2
 800ddc6:	e068      	b.n	800de9a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	2201      	movs	r2, #1
 800ddcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	2202      	movs	r2, #2
 800ddd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	685b      	ldr	r3, [r3, #4]
 800ddde:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	689b      	ldr	r3, [r3, #8]
 800dde6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	4a2e      	ldr	r2, [pc, #184]	; (800dea8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800ddee:	4293      	cmp	r3, r2
 800ddf0:	d004      	beq.n	800ddfc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	4a2d      	ldr	r2, [pc, #180]	; (800deac <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800ddf8:	4293      	cmp	r3, r2
 800ddfa:	d108      	bne.n	800de0e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800de02:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800de04:	683b      	ldr	r3, [r7, #0]
 800de06:	685b      	ldr	r3, [r3, #4]
 800de08:	68fa      	ldr	r2, [r7, #12]
 800de0a:	4313      	orrs	r3, r2
 800de0c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800de14:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800de16:	683b      	ldr	r3, [r7, #0]
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	68fa      	ldr	r2, [r7, #12]
 800de1c:	4313      	orrs	r3, r2
 800de1e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	68fa      	ldr	r2, [r7, #12]
 800de26:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	4a1e      	ldr	r2, [pc, #120]	; (800dea8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800de2e:	4293      	cmp	r3, r2
 800de30:	d01d      	beq.n	800de6e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800de3a:	d018      	beq.n	800de6e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	4a1b      	ldr	r2, [pc, #108]	; (800deb0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800de42:	4293      	cmp	r3, r2
 800de44:	d013      	beq.n	800de6e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	4a1a      	ldr	r2, [pc, #104]	; (800deb4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800de4c:	4293      	cmp	r3, r2
 800de4e:	d00e      	beq.n	800de6e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	4a18      	ldr	r2, [pc, #96]	; (800deb8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800de56:	4293      	cmp	r3, r2
 800de58:	d009      	beq.n	800de6e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	4a13      	ldr	r2, [pc, #76]	; (800deac <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800de60:	4293      	cmp	r3, r2
 800de62:	d004      	beq.n	800de6e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	4a14      	ldr	r2, [pc, #80]	; (800debc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800de6a:	4293      	cmp	r3, r2
 800de6c:	d10c      	bne.n	800de88 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800de6e:	68bb      	ldr	r3, [r7, #8]
 800de70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800de74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800de76:	683b      	ldr	r3, [r7, #0]
 800de78:	689b      	ldr	r3, [r3, #8]
 800de7a:	68ba      	ldr	r2, [r7, #8]
 800de7c:	4313      	orrs	r3, r2
 800de7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	68ba      	ldr	r2, [r7, #8]
 800de86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	2201      	movs	r2, #1
 800de8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	2200      	movs	r2, #0
 800de94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800de98:	2300      	movs	r3, #0
}
 800de9a:	4618      	mov	r0, r3
 800de9c:	3714      	adds	r7, #20
 800de9e:	46bd      	mov	sp, r7
 800dea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dea4:	4770      	bx	lr
 800dea6:	bf00      	nop
 800dea8:	40012c00 	.word	0x40012c00
 800deac:	40013400 	.word	0x40013400
 800deb0:	40000400 	.word	0x40000400
 800deb4:	40000800 	.word	0x40000800
 800deb8:	40000c00 	.word	0x40000c00
 800debc:	40014000 	.word	0x40014000

0800dec0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800dec0:	b480      	push	{r7}
 800dec2:	b083      	sub	sp, #12
 800dec4:	af00      	add	r7, sp, #0
 800dec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800dec8:	bf00      	nop
 800deca:	370c      	adds	r7, #12
 800decc:	46bd      	mov	sp, r7
 800dece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ded2:	4770      	bx	lr

0800ded4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ded4:	b480      	push	{r7}
 800ded6:	b083      	sub	sp, #12
 800ded8:	af00      	add	r7, sp, #0
 800deda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800dedc:	bf00      	nop
 800dede:	370c      	adds	r7, #12
 800dee0:	46bd      	mov	sp, r7
 800dee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dee6:	4770      	bx	lr

0800dee8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800dee8:	b480      	push	{r7}
 800deea:	b083      	sub	sp, #12
 800deec:	af00      	add	r7, sp, #0
 800deee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800def0:	bf00      	nop
 800def2:	370c      	adds	r7, #12
 800def4:	46bd      	mov	sp, r7
 800def6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800defa:	4770      	bx	lr

0800defc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800defc:	b580      	push	{r7, lr}
 800defe:	b082      	sub	sp, #8
 800df00:	af00      	add	r7, sp, #0
 800df02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	2b00      	cmp	r3, #0
 800df08:	d101      	bne.n	800df0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800df0a:	2301      	movs	r3, #1
 800df0c:	e040      	b.n	800df90 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800df12:	2b00      	cmp	r3, #0
 800df14:	d106      	bne.n	800df24 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	2200      	movs	r2, #0
 800df1a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800df1e:	6878      	ldr	r0, [r7, #4]
 800df20:	f7f8 fcd4 	bl	80068cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	2224      	movs	r2, #36	; 0x24
 800df28:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	681a      	ldr	r2, [r3, #0]
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	f022 0201 	bic.w	r2, r2, #1
 800df38:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800df3a:	6878      	ldr	r0, [r7, #4]
 800df3c:	f000 fc9e 	bl	800e87c <UART_SetConfig>
 800df40:	4603      	mov	r3, r0
 800df42:	2b01      	cmp	r3, #1
 800df44:	d101      	bne.n	800df4a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800df46:	2301      	movs	r3, #1
 800df48:	e022      	b.n	800df90 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d002      	beq.n	800df58 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800df52:	6878      	ldr	r0, [r7, #4]
 800df54:	f000 ff4a 	bl	800edec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	685a      	ldr	r2, [r3, #4]
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800df66:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	689a      	ldr	r2, [r3, #8]
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800df76:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	681a      	ldr	r2, [r3, #0]
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	f042 0201 	orr.w	r2, r2, #1
 800df86:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800df88:	6878      	ldr	r0, [r7, #4]
 800df8a:	f000 ffd1 	bl	800ef30 <UART_CheckIdleState>
 800df8e:	4603      	mov	r3, r0
}
 800df90:	4618      	mov	r0, r3
 800df92:	3708      	adds	r7, #8
 800df94:	46bd      	mov	sp, r7
 800df96:	bd80      	pop	{r7, pc}

0800df98 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800df98:	b580      	push	{r7, lr}
 800df9a:	b08a      	sub	sp, #40	; 0x28
 800df9c:	af02      	add	r7, sp, #8
 800df9e:	60f8      	str	r0, [r7, #12]
 800dfa0:	60b9      	str	r1, [r7, #8]
 800dfa2:	603b      	str	r3, [r7, #0]
 800dfa4:	4613      	mov	r3, r2
 800dfa6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dfac:	2b20      	cmp	r3, #32
 800dfae:	f040 8082 	bne.w	800e0b6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800dfb2:	68bb      	ldr	r3, [r7, #8]
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d002      	beq.n	800dfbe <HAL_UART_Transmit+0x26>
 800dfb8:	88fb      	ldrh	r3, [r7, #6]
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d101      	bne.n	800dfc2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800dfbe:	2301      	movs	r3, #1
 800dfc0:	e07a      	b.n	800e0b8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800dfc8:	2b01      	cmp	r3, #1
 800dfca:	d101      	bne.n	800dfd0 <HAL_UART_Transmit+0x38>
 800dfcc:	2302      	movs	r3, #2
 800dfce:	e073      	b.n	800e0b8 <HAL_UART_Transmit+0x120>
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	2201      	movs	r2, #1
 800dfd4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	2200      	movs	r2, #0
 800dfdc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	2221      	movs	r2, #33	; 0x21
 800dfe4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800dfe6:	f7f9 fd29 	bl	8007a3c <HAL_GetTick>
 800dfea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	88fa      	ldrh	r2, [r7, #6]
 800dff0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	88fa      	ldrh	r2, [r7, #6]
 800dff8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	689b      	ldr	r3, [r3, #8]
 800e000:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e004:	d108      	bne.n	800e018 <HAL_UART_Transmit+0x80>
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	691b      	ldr	r3, [r3, #16]
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d104      	bne.n	800e018 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800e00e:	2300      	movs	r3, #0
 800e010:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800e012:	68bb      	ldr	r3, [r7, #8]
 800e014:	61bb      	str	r3, [r7, #24]
 800e016:	e003      	b.n	800e020 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800e018:	68bb      	ldr	r3, [r7, #8]
 800e01a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e01c:	2300      	movs	r3, #0
 800e01e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	2200      	movs	r2, #0
 800e024:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800e028:	e02d      	b.n	800e086 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e02a:	683b      	ldr	r3, [r7, #0]
 800e02c:	9300      	str	r3, [sp, #0]
 800e02e:	697b      	ldr	r3, [r7, #20]
 800e030:	2200      	movs	r2, #0
 800e032:	2180      	movs	r1, #128	; 0x80
 800e034:	68f8      	ldr	r0, [r7, #12]
 800e036:	f000 ffc4 	bl	800efc2 <UART_WaitOnFlagUntilTimeout>
 800e03a:	4603      	mov	r3, r0
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d001      	beq.n	800e044 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800e040:	2303      	movs	r3, #3
 800e042:	e039      	b.n	800e0b8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800e044:	69fb      	ldr	r3, [r7, #28]
 800e046:	2b00      	cmp	r3, #0
 800e048:	d10b      	bne.n	800e062 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e04a:	69bb      	ldr	r3, [r7, #24]
 800e04c:	881a      	ldrh	r2, [r3, #0]
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e056:	b292      	uxth	r2, r2
 800e058:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800e05a:	69bb      	ldr	r3, [r7, #24]
 800e05c:	3302      	adds	r3, #2
 800e05e:	61bb      	str	r3, [r7, #24]
 800e060:	e008      	b.n	800e074 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800e062:	69fb      	ldr	r3, [r7, #28]
 800e064:	781a      	ldrb	r2, [r3, #0]
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	b292      	uxth	r2, r2
 800e06c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800e06e:	69fb      	ldr	r3, [r7, #28]
 800e070:	3301      	adds	r3, #1
 800e072:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800e07a:	b29b      	uxth	r3, r3
 800e07c:	3b01      	subs	r3, #1
 800e07e:	b29a      	uxth	r2, r3
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800e08c:	b29b      	uxth	r3, r3
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d1cb      	bne.n	800e02a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e092:	683b      	ldr	r3, [r7, #0]
 800e094:	9300      	str	r3, [sp, #0]
 800e096:	697b      	ldr	r3, [r7, #20]
 800e098:	2200      	movs	r2, #0
 800e09a:	2140      	movs	r1, #64	; 0x40
 800e09c:	68f8      	ldr	r0, [r7, #12]
 800e09e:	f000 ff90 	bl	800efc2 <UART_WaitOnFlagUntilTimeout>
 800e0a2:	4603      	mov	r3, r0
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d001      	beq.n	800e0ac <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800e0a8:	2303      	movs	r3, #3
 800e0aa:	e005      	b.n	800e0b8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	2220      	movs	r2, #32
 800e0b0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800e0b2:	2300      	movs	r3, #0
 800e0b4:	e000      	b.n	800e0b8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800e0b6:	2302      	movs	r3, #2
  }
}
 800e0b8:	4618      	mov	r0, r3
 800e0ba:	3720      	adds	r7, #32
 800e0bc:	46bd      	mov	sp, r7
 800e0be:	bd80      	pop	{r7, pc}

0800e0c0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e0c0:	b580      	push	{r7, lr}
 800e0c2:	b08a      	sub	sp, #40	; 0x28
 800e0c4:	af00      	add	r7, sp, #0
 800e0c6:	60f8      	str	r0, [r7, #12]
 800e0c8:	60b9      	str	r1, [r7, #8]
 800e0ca:	4613      	mov	r3, r2
 800e0cc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e0d2:	2b20      	cmp	r3, #32
 800e0d4:	d142      	bne.n	800e15c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800e0d6:	68bb      	ldr	r3, [r7, #8]
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d002      	beq.n	800e0e2 <HAL_UART_Receive_IT+0x22>
 800e0dc:	88fb      	ldrh	r3, [r7, #6]
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d101      	bne.n	800e0e6 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800e0e2:	2301      	movs	r3, #1
 800e0e4:	e03b      	b.n	800e15e <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800e0ec:	2b01      	cmp	r3, #1
 800e0ee:	d101      	bne.n	800e0f4 <HAL_UART_Receive_IT+0x34>
 800e0f0:	2302      	movs	r3, #2
 800e0f2:	e034      	b.n	800e15e <HAL_UART_Receive_IT+0x9e>
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	2201      	movs	r2, #1
 800e0f8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	2200      	movs	r2, #0
 800e100:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	4a18      	ldr	r2, [pc, #96]	; (800e168 <HAL_UART_Receive_IT+0xa8>)
 800e108:	4293      	cmp	r3, r2
 800e10a:	d01f      	beq.n	800e14c <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	685b      	ldr	r3, [r3, #4]
 800e112:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e116:	2b00      	cmp	r3, #0
 800e118:	d018      	beq.n	800e14c <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e120:	697b      	ldr	r3, [r7, #20]
 800e122:	e853 3f00 	ldrex	r3, [r3]
 800e126:	613b      	str	r3, [r7, #16]
   return(result);
 800e128:	693b      	ldr	r3, [r7, #16]
 800e12a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e12e:	627b      	str	r3, [r7, #36]	; 0x24
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	461a      	mov	r2, r3
 800e136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e138:	623b      	str	r3, [r7, #32]
 800e13a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e13c:	69f9      	ldr	r1, [r7, #28]
 800e13e:	6a3a      	ldr	r2, [r7, #32]
 800e140:	e841 2300 	strex	r3, r2, [r1]
 800e144:	61bb      	str	r3, [r7, #24]
   return(result);
 800e146:	69bb      	ldr	r3, [r7, #24]
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d1e6      	bne.n	800e11a <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800e14c:	88fb      	ldrh	r3, [r7, #6]
 800e14e:	461a      	mov	r2, r3
 800e150:	68b9      	ldr	r1, [r7, #8]
 800e152:	68f8      	ldr	r0, [r7, #12]
 800e154:	f000 fffa 	bl	800f14c <UART_Start_Receive_IT>
 800e158:	4603      	mov	r3, r0
 800e15a:	e000      	b.n	800e15e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800e15c:	2302      	movs	r3, #2
  }
}
 800e15e:	4618      	mov	r0, r3
 800e160:	3728      	adds	r7, #40	; 0x28
 800e162:	46bd      	mov	sp, r7
 800e164:	bd80      	pop	{r7, pc}
 800e166:	bf00      	nop
 800e168:	40008000 	.word	0x40008000

0800e16c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800e16c:	b580      	push	{r7, lr}
 800e16e:	b08a      	sub	sp, #40	; 0x28
 800e170:	af00      	add	r7, sp, #0
 800e172:	60f8      	str	r0, [r7, #12]
 800e174:	60b9      	str	r1, [r7, #8]
 800e176:	4613      	mov	r3, r2
 800e178:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e17e:	2b20      	cmp	r3, #32
 800e180:	d178      	bne.n	800e274 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800e182:	68bb      	ldr	r3, [r7, #8]
 800e184:	2b00      	cmp	r3, #0
 800e186:	d002      	beq.n	800e18e <HAL_UART_Transmit_DMA+0x22>
 800e188:	88fb      	ldrh	r3, [r7, #6]
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d101      	bne.n	800e192 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800e18e:	2301      	movs	r3, #1
 800e190:	e071      	b.n	800e276 <HAL_UART_Transmit_DMA+0x10a>
    }

    __HAL_LOCK(huart);
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800e198:	2b01      	cmp	r3, #1
 800e19a:	d101      	bne.n	800e1a0 <HAL_UART_Transmit_DMA+0x34>
 800e19c:	2302      	movs	r3, #2
 800e19e:	e06a      	b.n	800e276 <HAL_UART_Transmit_DMA+0x10a>
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	2201      	movs	r2, #1
 800e1a4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	68ba      	ldr	r2, [r7, #8]
 800e1ac:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	88fa      	ldrh	r2, [r7, #6]
 800e1b2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	88fa      	ldrh	r2, [r7, #6]
 800e1ba:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	2200      	movs	r2, #0
 800e1c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	2221      	movs	r2, #33	; 0x21
 800e1ca:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d02b      	beq.n	800e22c <HAL_UART_Transmit_DMA+0xc0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e1d8:	4a29      	ldr	r2, [pc, #164]	; (800e280 <HAL_UART_Transmit_DMA+0x114>)
 800e1da:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e1e0:	4a28      	ldr	r2, [pc, #160]	; (800e284 <HAL_UART_Transmit_DMA+0x118>)
 800e1e2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e1e8:	4a27      	ldr	r2, [pc, #156]	; (800e288 <HAL_UART_Transmit_DMA+0x11c>)
 800e1ea:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e1f0:	2200      	movs	r2, #0
 800e1f2:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e1fc:	4619      	mov	r1, r3
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	3328      	adds	r3, #40	; 0x28
 800e204:	461a      	mov	r2, r3
 800e206:	88fb      	ldrh	r3, [r7, #6]
 800e208:	f7f9 fe64 	bl	8007ed4 <HAL_DMA_Start_IT>
 800e20c:	4603      	mov	r3, r0
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d00c      	beq.n	800e22c <HAL_UART_Transmit_DMA+0xc0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	2210      	movs	r2, #16
 800e216:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	2200      	movs	r2, #0
 800e21e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	2220      	movs	r2, #32
 800e226:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 800e228:	2301      	movs	r3, #1
 800e22a:	e024      	b.n	800e276 <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	2240      	movs	r2, #64	; 0x40
 800e232:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	2200      	movs	r2, #0
 800e238:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	3308      	adds	r3, #8
 800e242:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e244:	697b      	ldr	r3, [r7, #20]
 800e246:	e853 3f00 	ldrex	r3, [r3]
 800e24a:	613b      	str	r3, [r7, #16]
   return(result);
 800e24c:	693b      	ldr	r3, [r7, #16]
 800e24e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e252:	627b      	str	r3, [r7, #36]	; 0x24
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	3308      	adds	r3, #8
 800e25a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e25c:	623a      	str	r2, [r7, #32]
 800e25e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e260:	69f9      	ldr	r1, [r7, #28]
 800e262:	6a3a      	ldr	r2, [r7, #32]
 800e264:	e841 2300 	strex	r3, r2, [r1]
 800e268:	61bb      	str	r3, [r7, #24]
   return(result);
 800e26a:	69bb      	ldr	r3, [r7, #24]
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d1e5      	bne.n	800e23c <HAL_UART_Transmit_DMA+0xd0>

    return HAL_OK;
 800e270:	2300      	movs	r3, #0
 800e272:	e000      	b.n	800e276 <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800e274:	2302      	movs	r3, #2
  }
}
 800e276:	4618      	mov	r0, r3
 800e278:	3728      	adds	r7, #40	; 0x28
 800e27a:	46bd      	mov	sp, r7
 800e27c:	bd80      	pop	{r7, pc}
 800e27e:	bf00      	nop
 800e280:	0800f3f3 	.word	0x0800f3f3
 800e284:	0800f48d 	.word	0x0800f48d
 800e288:	0800f4a9 	.word	0x0800f4a9

0800e28c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e28c:	b580      	push	{r7, lr}
 800e28e:	b0ba      	sub	sp, #232	; 0xe8
 800e290:	af00      	add	r7, sp, #0
 800e292:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	69db      	ldr	r3, [r3, #28]
 800e29a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	689b      	ldr	r3, [r3, #8]
 800e2ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800e2b2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800e2b6:	f640 030f 	movw	r3, #2063	; 0x80f
 800e2ba:	4013      	ands	r3, r2
 800e2bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800e2c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d115      	bne.n	800e2f4 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800e2c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e2cc:	f003 0320 	and.w	r3, r3, #32
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d00f      	beq.n	800e2f4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800e2d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e2d8:	f003 0320 	and.w	r3, r3, #32
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d009      	beq.n	800e2f4 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	f000 82a6 	beq.w	800e836 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e2ee:	6878      	ldr	r0, [r7, #4]
 800e2f0:	4798      	blx	r3
      }
      return;
 800e2f2:	e2a0      	b.n	800e836 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800e2f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	f000 8117 	beq.w	800e52c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800e2fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e302:	f003 0301 	and.w	r3, r3, #1
 800e306:	2b00      	cmp	r3, #0
 800e308:	d106      	bne.n	800e318 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800e30a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800e30e:	4b85      	ldr	r3, [pc, #532]	; (800e524 <HAL_UART_IRQHandler+0x298>)
 800e310:	4013      	ands	r3, r2
 800e312:	2b00      	cmp	r3, #0
 800e314:	f000 810a 	beq.w	800e52c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e318:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e31c:	f003 0301 	and.w	r3, r3, #1
 800e320:	2b00      	cmp	r3, #0
 800e322:	d011      	beq.n	800e348 <HAL_UART_IRQHandler+0xbc>
 800e324:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e328:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d00b      	beq.n	800e348 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	2201      	movs	r2, #1
 800e336:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e33e:	f043 0201 	orr.w	r2, r3, #1
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e348:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e34c:	f003 0302 	and.w	r3, r3, #2
 800e350:	2b00      	cmp	r3, #0
 800e352:	d011      	beq.n	800e378 <HAL_UART_IRQHandler+0xec>
 800e354:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e358:	f003 0301 	and.w	r3, r3, #1
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d00b      	beq.n	800e378 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	2202      	movs	r2, #2
 800e366:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e36e:	f043 0204 	orr.w	r2, r3, #4
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e378:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e37c:	f003 0304 	and.w	r3, r3, #4
 800e380:	2b00      	cmp	r3, #0
 800e382:	d011      	beq.n	800e3a8 <HAL_UART_IRQHandler+0x11c>
 800e384:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e388:	f003 0301 	and.w	r3, r3, #1
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d00b      	beq.n	800e3a8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	2204      	movs	r2, #4
 800e396:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e39e:	f043 0202 	orr.w	r2, r3, #2
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e3a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e3ac:	f003 0308 	and.w	r3, r3, #8
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d017      	beq.n	800e3e4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800e3b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e3b8:	f003 0320 	and.w	r3, r3, #32
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d105      	bne.n	800e3cc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800e3c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e3c4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d00b      	beq.n	800e3e4 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	2208      	movs	r2, #8
 800e3d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e3da:	f043 0208 	orr.w	r2, r3, #8
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e3e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e3e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d012      	beq.n	800e416 <HAL_UART_IRQHandler+0x18a>
 800e3f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e3f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d00c      	beq.n	800e416 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e404:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e40c:	f043 0220 	orr.w	r2, r3, #32
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	f000 820c 	beq.w	800e83a <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800e422:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e426:	f003 0320 	and.w	r3, r3, #32
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d00d      	beq.n	800e44a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800e42e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e432:	f003 0320 	and.w	r3, r3, #32
 800e436:	2b00      	cmp	r3, #0
 800e438:	d007      	beq.n	800e44a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d003      	beq.n	800e44a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e446:	6878      	ldr	r0, [r7, #4]
 800e448:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e450:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	689b      	ldr	r3, [r3, #8]
 800e45a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e45e:	2b40      	cmp	r3, #64	; 0x40
 800e460:	d005      	beq.n	800e46e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e462:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e466:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d04f      	beq.n	800e50e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e46e:	6878      	ldr	r0, [r7, #4]
 800e470:	f000 ff5c 	bl	800f32c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	689b      	ldr	r3, [r3, #8]
 800e47a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e47e:	2b40      	cmp	r3, #64	; 0x40
 800e480:	d141      	bne.n	800e506 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	3308      	adds	r3, #8
 800e488:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e48c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e490:	e853 3f00 	ldrex	r3, [r3]
 800e494:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800e498:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e49c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e4a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	3308      	adds	r3, #8
 800e4aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800e4ae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800e4b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800e4ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800e4be:	e841 2300 	strex	r3, r2, [r1]
 800e4c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800e4c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d1d9      	bne.n	800e482 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d013      	beq.n	800e4fe <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e4da:	4a13      	ldr	r2, [pc, #76]	; (800e528 <HAL_UART_IRQHandler+0x29c>)
 800e4dc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e4e2:	4618      	mov	r0, r3
 800e4e4:	f7f9 fd94 	bl	8008010 <HAL_DMA_Abort_IT>
 800e4e8:	4603      	mov	r3, r0
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d017      	beq.n	800e51e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e4f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4f4:	687a      	ldr	r2, [r7, #4]
 800e4f6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800e4f8:	4610      	mov	r0, r2
 800e4fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e4fc:	e00f      	b.n	800e51e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e4fe:	6878      	ldr	r0, [r7, #4]
 800e500:	f7f6 fe82 	bl	8005208 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e504:	e00b      	b.n	800e51e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e506:	6878      	ldr	r0, [r7, #4]
 800e508:	f7f6 fe7e 	bl	8005208 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e50c:	e007      	b.n	800e51e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e50e:	6878      	ldr	r0, [r7, #4]
 800e510:	f7f6 fe7a 	bl	8005208 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	2200      	movs	r2, #0
 800e518:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800e51c:	e18d      	b.n	800e83a <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e51e:	bf00      	nop
    return;
 800e520:	e18b      	b.n	800e83a <HAL_UART_IRQHandler+0x5ae>
 800e522:	bf00      	nop
 800e524:	04000120 	.word	0x04000120
 800e528:	0800f525 	.word	0x0800f525

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e530:	2b01      	cmp	r3, #1
 800e532:	f040 8146 	bne.w	800e7c2 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e536:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e53a:	f003 0310 	and.w	r3, r3, #16
 800e53e:	2b00      	cmp	r3, #0
 800e540:	f000 813f 	beq.w	800e7c2 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e544:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e548:	f003 0310 	and.w	r3, r3, #16
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	f000 8138 	beq.w	800e7c2 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	2210      	movs	r2, #16
 800e558:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	689b      	ldr	r3, [r3, #8]
 800e560:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e564:	2b40      	cmp	r3, #64	; 0x40
 800e566:	f040 80b4 	bne.w	800e6d2 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	685b      	ldr	r3, [r3, #4]
 800e572:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e576:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	f000 815f 	beq.w	800e83e <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800e586:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e58a:	429a      	cmp	r2, r3
 800e58c:	f080 8157 	bcs.w	800e83e <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e596:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	f003 0320 	and.w	r3, r3, #32
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	f040 8085 	bne.w	800e6b6 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e5b8:	e853 3f00 	ldrex	r3, [r3]
 800e5bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800e5c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e5c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e5c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	461a      	mov	r2, r3
 800e5d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e5d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e5da:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5de:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800e5e2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800e5e6:	e841 2300 	strex	r3, r2, [r1]
 800e5ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800e5ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d1da      	bne.n	800e5ac <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	3308      	adds	r3, #8
 800e5fc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e600:	e853 3f00 	ldrex	r3, [r3]
 800e604:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800e606:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e608:	f023 0301 	bic.w	r3, r3, #1
 800e60c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	3308      	adds	r3, #8
 800e616:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800e61a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e61e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e620:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800e622:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e626:	e841 2300 	strex	r3, r2, [r1]
 800e62a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800e62c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d1e1      	bne.n	800e5f6 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	3308      	adds	r3, #8
 800e638:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e63a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e63c:	e853 3f00 	ldrex	r3, [r3]
 800e640:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800e642:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e644:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e648:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	3308      	adds	r3, #8
 800e652:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800e656:	66fa      	str	r2, [r7, #108]	; 0x6c
 800e658:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e65a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e65c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e65e:	e841 2300 	strex	r3, r2, [r1]
 800e662:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800e664:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e666:	2b00      	cmp	r3, #0
 800e668:	d1e3      	bne.n	800e632 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	2220      	movs	r2, #32
 800e66e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	2200      	movs	r2, #0
 800e674:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e67c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e67e:	e853 3f00 	ldrex	r3, [r3]
 800e682:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e684:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e686:	f023 0310 	bic.w	r3, r3, #16
 800e68a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	461a      	mov	r2, r3
 800e694:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e698:	65bb      	str	r3, [r7, #88]	; 0x58
 800e69a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e69c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e69e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e6a0:	e841 2300 	strex	r3, r2, [r1]
 800e6a4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e6a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d1e4      	bne.n	800e676 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e6b0:	4618      	mov	r0, r3
 800e6b2:	f7f9 fc6f 	bl	8007f94 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800e6c2:	b29b      	uxth	r3, r3
 800e6c4:	1ad3      	subs	r3, r2, r3
 800e6c6:	b29b      	uxth	r3, r3
 800e6c8:	4619      	mov	r1, r3
 800e6ca:	6878      	ldr	r0, [r7, #4]
 800e6cc:	f000 f8ca 	bl	800e864 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e6d0:	e0b5      	b.n	800e83e <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800e6de:	b29b      	uxth	r3, r3
 800e6e0:	1ad3      	subs	r3, r2, r3
 800e6e2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800e6ec:	b29b      	uxth	r3, r3
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	f000 80a7 	beq.w	800e842 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 800e6f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	f000 80a2 	beq.w	800e842 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e706:	e853 3f00 	ldrex	r3, [r3]
 800e70a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e70c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e70e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e712:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	461a      	mov	r2, r3
 800e71c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e720:	647b      	str	r3, [r7, #68]	; 0x44
 800e722:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e724:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e726:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e728:	e841 2300 	strex	r3, r2, [r1]
 800e72c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e72e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e730:	2b00      	cmp	r3, #0
 800e732:	d1e4      	bne.n	800e6fe <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	681b      	ldr	r3, [r3, #0]
 800e738:	3308      	adds	r3, #8
 800e73a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e73c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e73e:	e853 3f00 	ldrex	r3, [r3]
 800e742:	623b      	str	r3, [r7, #32]
   return(result);
 800e744:	6a3b      	ldr	r3, [r7, #32]
 800e746:	f023 0301 	bic.w	r3, r3, #1
 800e74a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	3308      	adds	r3, #8
 800e754:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800e758:	633a      	str	r2, [r7, #48]	; 0x30
 800e75a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e75c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e75e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e760:	e841 2300 	strex	r3, r2, [r1]
 800e764:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d1e3      	bne.n	800e734 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	2220      	movs	r2, #32
 800e770:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	2200      	movs	r2, #0
 800e776:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	2200      	movs	r2, #0
 800e77c:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e784:	693b      	ldr	r3, [r7, #16]
 800e786:	e853 3f00 	ldrex	r3, [r3]
 800e78a:	60fb      	str	r3, [r7, #12]
   return(result);
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	f023 0310 	bic.w	r3, r3, #16
 800e792:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	461a      	mov	r2, r3
 800e79c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800e7a0:	61fb      	str	r3, [r7, #28]
 800e7a2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7a4:	69b9      	ldr	r1, [r7, #24]
 800e7a6:	69fa      	ldr	r2, [r7, #28]
 800e7a8:	e841 2300 	strex	r3, r2, [r1]
 800e7ac:	617b      	str	r3, [r7, #20]
   return(result);
 800e7ae:	697b      	ldr	r3, [r7, #20]
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d1e4      	bne.n	800e77e <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e7b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e7b8:	4619      	mov	r1, r3
 800e7ba:	6878      	ldr	r0, [r7, #4]
 800e7bc:	f000 f852 	bl	800e864 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e7c0:	e03f      	b.n	800e842 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800e7c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e7c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d00e      	beq.n	800e7ec <HAL_UART_IRQHandler+0x560>
 800e7ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e7d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d008      	beq.n	800e7ec <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800e7e2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800e7e4:	6878      	ldr	r0, [r7, #4]
 800e7e6:	f001 f83d 	bl	800f864 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e7ea:	e02d      	b.n	800e848 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800e7ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e7f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d00e      	beq.n	800e816 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800e7f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e7fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e800:	2b00      	cmp	r3, #0
 800e802:	d008      	beq.n	800e816 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d01c      	beq.n	800e846 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e810:	6878      	ldr	r0, [r7, #4]
 800e812:	4798      	blx	r3
    }
    return;
 800e814:	e017      	b.n	800e846 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e816:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e81a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d012      	beq.n	800e848 <HAL_UART_IRQHandler+0x5bc>
 800e822:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d00c      	beq.n	800e848 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800e82e:	6878      	ldr	r0, [r7, #4]
 800e830:	f000 fe8e 	bl	800f550 <UART_EndTransmit_IT>
    return;
 800e834:	e008      	b.n	800e848 <HAL_UART_IRQHandler+0x5bc>
      return;
 800e836:	bf00      	nop
 800e838:	e006      	b.n	800e848 <HAL_UART_IRQHandler+0x5bc>
    return;
 800e83a:	bf00      	nop
 800e83c:	e004      	b.n	800e848 <HAL_UART_IRQHandler+0x5bc>
      return;
 800e83e:	bf00      	nop
 800e840:	e002      	b.n	800e848 <HAL_UART_IRQHandler+0x5bc>
      return;
 800e842:	bf00      	nop
 800e844:	e000      	b.n	800e848 <HAL_UART_IRQHandler+0x5bc>
    return;
 800e846:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800e848:	37e8      	adds	r7, #232	; 0xe8
 800e84a:	46bd      	mov	sp, r7
 800e84c:	bd80      	pop	{r7, pc}
 800e84e:	bf00      	nop

0800e850 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800e850:	b480      	push	{r7}
 800e852:	b083      	sub	sp, #12
 800e854:	af00      	add	r7, sp, #0
 800e856:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800e858:	bf00      	nop
 800e85a:	370c      	adds	r7, #12
 800e85c:	46bd      	mov	sp, r7
 800e85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e862:	4770      	bx	lr

0800e864 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e864:	b480      	push	{r7}
 800e866:	b083      	sub	sp, #12
 800e868:	af00      	add	r7, sp, #0
 800e86a:	6078      	str	r0, [r7, #4]
 800e86c:	460b      	mov	r3, r1
 800e86e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e870:	bf00      	nop
 800e872:	370c      	adds	r7, #12
 800e874:	46bd      	mov	sp, r7
 800e876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e87a:	4770      	bx	lr

0800e87c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e87c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e880:	b08a      	sub	sp, #40	; 0x28
 800e882:	af00      	add	r7, sp, #0
 800e884:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e886:	2300      	movs	r3, #0
 800e888:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	689a      	ldr	r2, [r3, #8]
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	691b      	ldr	r3, [r3, #16]
 800e894:	431a      	orrs	r2, r3
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	695b      	ldr	r3, [r3, #20]
 800e89a:	431a      	orrs	r2, r3
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	69db      	ldr	r3, [r3, #28]
 800e8a0:	4313      	orrs	r3, r2
 800e8a2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e8a4:	68fb      	ldr	r3, [r7, #12]
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	681a      	ldr	r2, [r3, #0]
 800e8aa:	4ba4      	ldr	r3, [pc, #656]	; (800eb3c <UART_SetConfig+0x2c0>)
 800e8ac:	4013      	ands	r3, r2
 800e8ae:	68fa      	ldr	r2, [r7, #12]
 800e8b0:	6812      	ldr	r2, [r2, #0]
 800e8b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e8b4:	430b      	orrs	r3, r1
 800e8b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	685b      	ldr	r3, [r3, #4]
 800e8be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	68da      	ldr	r2, [r3, #12]
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	430a      	orrs	r2, r1
 800e8cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	699b      	ldr	r3, [r3, #24]
 800e8d2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	4a99      	ldr	r2, [pc, #612]	; (800eb40 <UART_SetConfig+0x2c4>)
 800e8da:	4293      	cmp	r3, r2
 800e8dc:	d004      	beq.n	800e8e8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	6a1b      	ldr	r3, [r3, #32]
 800e8e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e8e4:	4313      	orrs	r3, r2
 800e8e6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	689b      	ldr	r3, [r3, #8]
 800e8ee:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e8f8:	430a      	orrs	r2, r1
 800e8fa:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	4a90      	ldr	r2, [pc, #576]	; (800eb44 <UART_SetConfig+0x2c8>)
 800e902:	4293      	cmp	r3, r2
 800e904:	d126      	bne.n	800e954 <UART_SetConfig+0xd8>
 800e906:	4b90      	ldr	r3, [pc, #576]	; (800eb48 <UART_SetConfig+0x2cc>)
 800e908:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e90c:	f003 0303 	and.w	r3, r3, #3
 800e910:	2b03      	cmp	r3, #3
 800e912:	d81b      	bhi.n	800e94c <UART_SetConfig+0xd0>
 800e914:	a201      	add	r2, pc, #4	; (adr r2, 800e91c <UART_SetConfig+0xa0>)
 800e916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e91a:	bf00      	nop
 800e91c:	0800e92d 	.word	0x0800e92d
 800e920:	0800e93d 	.word	0x0800e93d
 800e924:	0800e935 	.word	0x0800e935
 800e928:	0800e945 	.word	0x0800e945
 800e92c:	2301      	movs	r3, #1
 800e92e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e932:	e116      	b.n	800eb62 <UART_SetConfig+0x2e6>
 800e934:	2302      	movs	r3, #2
 800e936:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e93a:	e112      	b.n	800eb62 <UART_SetConfig+0x2e6>
 800e93c:	2304      	movs	r3, #4
 800e93e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e942:	e10e      	b.n	800eb62 <UART_SetConfig+0x2e6>
 800e944:	2308      	movs	r3, #8
 800e946:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e94a:	e10a      	b.n	800eb62 <UART_SetConfig+0x2e6>
 800e94c:	2310      	movs	r3, #16
 800e94e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e952:	e106      	b.n	800eb62 <UART_SetConfig+0x2e6>
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	4a7c      	ldr	r2, [pc, #496]	; (800eb4c <UART_SetConfig+0x2d0>)
 800e95a:	4293      	cmp	r3, r2
 800e95c:	d138      	bne.n	800e9d0 <UART_SetConfig+0x154>
 800e95e:	4b7a      	ldr	r3, [pc, #488]	; (800eb48 <UART_SetConfig+0x2cc>)
 800e960:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e964:	f003 030c 	and.w	r3, r3, #12
 800e968:	2b0c      	cmp	r3, #12
 800e96a:	d82d      	bhi.n	800e9c8 <UART_SetConfig+0x14c>
 800e96c:	a201      	add	r2, pc, #4	; (adr r2, 800e974 <UART_SetConfig+0xf8>)
 800e96e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e972:	bf00      	nop
 800e974:	0800e9a9 	.word	0x0800e9a9
 800e978:	0800e9c9 	.word	0x0800e9c9
 800e97c:	0800e9c9 	.word	0x0800e9c9
 800e980:	0800e9c9 	.word	0x0800e9c9
 800e984:	0800e9b9 	.word	0x0800e9b9
 800e988:	0800e9c9 	.word	0x0800e9c9
 800e98c:	0800e9c9 	.word	0x0800e9c9
 800e990:	0800e9c9 	.word	0x0800e9c9
 800e994:	0800e9b1 	.word	0x0800e9b1
 800e998:	0800e9c9 	.word	0x0800e9c9
 800e99c:	0800e9c9 	.word	0x0800e9c9
 800e9a0:	0800e9c9 	.word	0x0800e9c9
 800e9a4:	0800e9c1 	.word	0x0800e9c1
 800e9a8:	2300      	movs	r3, #0
 800e9aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e9ae:	e0d8      	b.n	800eb62 <UART_SetConfig+0x2e6>
 800e9b0:	2302      	movs	r3, #2
 800e9b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e9b6:	e0d4      	b.n	800eb62 <UART_SetConfig+0x2e6>
 800e9b8:	2304      	movs	r3, #4
 800e9ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e9be:	e0d0      	b.n	800eb62 <UART_SetConfig+0x2e6>
 800e9c0:	2308      	movs	r3, #8
 800e9c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e9c6:	e0cc      	b.n	800eb62 <UART_SetConfig+0x2e6>
 800e9c8:	2310      	movs	r3, #16
 800e9ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e9ce:	e0c8      	b.n	800eb62 <UART_SetConfig+0x2e6>
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	4a5e      	ldr	r2, [pc, #376]	; (800eb50 <UART_SetConfig+0x2d4>)
 800e9d6:	4293      	cmp	r3, r2
 800e9d8:	d125      	bne.n	800ea26 <UART_SetConfig+0x1aa>
 800e9da:	4b5b      	ldr	r3, [pc, #364]	; (800eb48 <UART_SetConfig+0x2cc>)
 800e9dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e9e0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800e9e4:	2b30      	cmp	r3, #48	; 0x30
 800e9e6:	d016      	beq.n	800ea16 <UART_SetConfig+0x19a>
 800e9e8:	2b30      	cmp	r3, #48	; 0x30
 800e9ea:	d818      	bhi.n	800ea1e <UART_SetConfig+0x1a2>
 800e9ec:	2b20      	cmp	r3, #32
 800e9ee:	d00a      	beq.n	800ea06 <UART_SetConfig+0x18a>
 800e9f0:	2b20      	cmp	r3, #32
 800e9f2:	d814      	bhi.n	800ea1e <UART_SetConfig+0x1a2>
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d002      	beq.n	800e9fe <UART_SetConfig+0x182>
 800e9f8:	2b10      	cmp	r3, #16
 800e9fa:	d008      	beq.n	800ea0e <UART_SetConfig+0x192>
 800e9fc:	e00f      	b.n	800ea1e <UART_SetConfig+0x1a2>
 800e9fe:	2300      	movs	r3, #0
 800ea00:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ea04:	e0ad      	b.n	800eb62 <UART_SetConfig+0x2e6>
 800ea06:	2302      	movs	r3, #2
 800ea08:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ea0c:	e0a9      	b.n	800eb62 <UART_SetConfig+0x2e6>
 800ea0e:	2304      	movs	r3, #4
 800ea10:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ea14:	e0a5      	b.n	800eb62 <UART_SetConfig+0x2e6>
 800ea16:	2308      	movs	r3, #8
 800ea18:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ea1c:	e0a1      	b.n	800eb62 <UART_SetConfig+0x2e6>
 800ea1e:	2310      	movs	r3, #16
 800ea20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ea24:	e09d      	b.n	800eb62 <UART_SetConfig+0x2e6>
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	681b      	ldr	r3, [r3, #0]
 800ea2a:	4a4a      	ldr	r2, [pc, #296]	; (800eb54 <UART_SetConfig+0x2d8>)
 800ea2c:	4293      	cmp	r3, r2
 800ea2e:	d125      	bne.n	800ea7c <UART_SetConfig+0x200>
 800ea30:	4b45      	ldr	r3, [pc, #276]	; (800eb48 <UART_SetConfig+0x2cc>)
 800ea32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ea36:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800ea3a:	2bc0      	cmp	r3, #192	; 0xc0
 800ea3c:	d016      	beq.n	800ea6c <UART_SetConfig+0x1f0>
 800ea3e:	2bc0      	cmp	r3, #192	; 0xc0
 800ea40:	d818      	bhi.n	800ea74 <UART_SetConfig+0x1f8>
 800ea42:	2b80      	cmp	r3, #128	; 0x80
 800ea44:	d00a      	beq.n	800ea5c <UART_SetConfig+0x1e0>
 800ea46:	2b80      	cmp	r3, #128	; 0x80
 800ea48:	d814      	bhi.n	800ea74 <UART_SetConfig+0x1f8>
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d002      	beq.n	800ea54 <UART_SetConfig+0x1d8>
 800ea4e:	2b40      	cmp	r3, #64	; 0x40
 800ea50:	d008      	beq.n	800ea64 <UART_SetConfig+0x1e8>
 800ea52:	e00f      	b.n	800ea74 <UART_SetConfig+0x1f8>
 800ea54:	2300      	movs	r3, #0
 800ea56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ea5a:	e082      	b.n	800eb62 <UART_SetConfig+0x2e6>
 800ea5c:	2302      	movs	r3, #2
 800ea5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ea62:	e07e      	b.n	800eb62 <UART_SetConfig+0x2e6>
 800ea64:	2304      	movs	r3, #4
 800ea66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ea6a:	e07a      	b.n	800eb62 <UART_SetConfig+0x2e6>
 800ea6c:	2308      	movs	r3, #8
 800ea6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ea72:	e076      	b.n	800eb62 <UART_SetConfig+0x2e6>
 800ea74:	2310      	movs	r3, #16
 800ea76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ea7a:	e072      	b.n	800eb62 <UART_SetConfig+0x2e6>
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	4a35      	ldr	r2, [pc, #212]	; (800eb58 <UART_SetConfig+0x2dc>)
 800ea82:	4293      	cmp	r3, r2
 800ea84:	d12a      	bne.n	800eadc <UART_SetConfig+0x260>
 800ea86:	4b30      	ldr	r3, [pc, #192]	; (800eb48 <UART_SetConfig+0x2cc>)
 800ea88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ea8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ea90:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ea94:	d01a      	beq.n	800eacc <UART_SetConfig+0x250>
 800ea96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ea9a:	d81b      	bhi.n	800ead4 <UART_SetConfig+0x258>
 800ea9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800eaa0:	d00c      	beq.n	800eabc <UART_SetConfig+0x240>
 800eaa2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800eaa6:	d815      	bhi.n	800ead4 <UART_SetConfig+0x258>
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d003      	beq.n	800eab4 <UART_SetConfig+0x238>
 800eaac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800eab0:	d008      	beq.n	800eac4 <UART_SetConfig+0x248>
 800eab2:	e00f      	b.n	800ead4 <UART_SetConfig+0x258>
 800eab4:	2300      	movs	r3, #0
 800eab6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800eaba:	e052      	b.n	800eb62 <UART_SetConfig+0x2e6>
 800eabc:	2302      	movs	r3, #2
 800eabe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800eac2:	e04e      	b.n	800eb62 <UART_SetConfig+0x2e6>
 800eac4:	2304      	movs	r3, #4
 800eac6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800eaca:	e04a      	b.n	800eb62 <UART_SetConfig+0x2e6>
 800eacc:	2308      	movs	r3, #8
 800eace:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ead2:	e046      	b.n	800eb62 <UART_SetConfig+0x2e6>
 800ead4:	2310      	movs	r3, #16
 800ead6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800eada:	e042      	b.n	800eb62 <UART_SetConfig+0x2e6>
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	4a17      	ldr	r2, [pc, #92]	; (800eb40 <UART_SetConfig+0x2c4>)
 800eae2:	4293      	cmp	r3, r2
 800eae4:	d13a      	bne.n	800eb5c <UART_SetConfig+0x2e0>
 800eae6:	4b18      	ldr	r3, [pc, #96]	; (800eb48 <UART_SetConfig+0x2cc>)
 800eae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800eaec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800eaf0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800eaf4:	d01a      	beq.n	800eb2c <UART_SetConfig+0x2b0>
 800eaf6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800eafa:	d81b      	bhi.n	800eb34 <UART_SetConfig+0x2b8>
 800eafc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800eb00:	d00c      	beq.n	800eb1c <UART_SetConfig+0x2a0>
 800eb02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800eb06:	d815      	bhi.n	800eb34 <UART_SetConfig+0x2b8>
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d003      	beq.n	800eb14 <UART_SetConfig+0x298>
 800eb0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800eb10:	d008      	beq.n	800eb24 <UART_SetConfig+0x2a8>
 800eb12:	e00f      	b.n	800eb34 <UART_SetConfig+0x2b8>
 800eb14:	2300      	movs	r3, #0
 800eb16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800eb1a:	e022      	b.n	800eb62 <UART_SetConfig+0x2e6>
 800eb1c:	2302      	movs	r3, #2
 800eb1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800eb22:	e01e      	b.n	800eb62 <UART_SetConfig+0x2e6>
 800eb24:	2304      	movs	r3, #4
 800eb26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800eb2a:	e01a      	b.n	800eb62 <UART_SetConfig+0x2e6>
 800eb2c:	2308      	movs	r3, #8
 800eb2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800eb32:	e016      	b.n	800eb62 <UART_SetConfig+0x2e6>
 800eb34:	2310      	movs	r3, #16
 800eb36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800eb3a:	e012      	b.n	800eb62 <UART_SetConfig+0x2e6>
 800eb3c:	efff69f3 	.word	0xefff69f3
 800eb40:	40008000 	.word	0x40008000
 800eb44:	40013800 	.word	0x40013800
 800eb48:	40021000 	.word	0x40021000
 800eb4c:	40004400 	.word	0x40004400
 800eb50:	40004800 	.word	0x40004800
 800eb54:	40004c00 	.word	0x40004c00
 800eb58:	40005000 	.word	0x40005000
 800eb5c:	2310      	movs	r3, #16
 800eb5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	4a9f      	ldr	r2, [pc, #636]	; (800ede4 <UART_SetConfig+0x568>)
 800eb68:	4293      	cmp	r3, r2
 800eb6a:	d17a      	bne.n	800ec62 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800eb6c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800eb70:	2b08      	cmp	r3, #8
 800eb72:	d824      	bhi.n	800ebbe <UART_SetConfig+0x342>
 800eb74:	a201      	add	r2, pc, #4	; (adr r2, 800eb7c <UART_SetConfig+0x300>)
 800eb76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb7a:	bf00      	nop
 800eb7c:	0800eba1 	.word	0x0800eba1
 800eb80:	0800ebbf 	.word	0x0800ebbf
 800eb84:	0800eba9 	.word	0x0800eba9
 800eb88:	0800ebbf 	.word	0x0800ebbf
 800eb8c:	0800ebaf 	.word	0x0800ebaf
 800eb90:	0800ebbf 	.word	0x0800ebbf
 800eb94:	0800ebbf 	.word	0x0800ebbf
 800eb98:	0800ebbf 	.word	0x0800ebbf
 800eb9c:	0800ebb7 	.word	0x0800ebb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800eba0:	f7fc f85e 	bl	800ac60 <HAL_RCC_GetPCLK1Freq>
 800eba4:	61f8      	str	r0, [r7, #28]
        break;
 800eba6:	e010      	b.n	800ebca <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800eba8:	4b8f      	ldr	r3, [pc, #572]	; (800ede8 <UART_SetConfig+0x56c>)
 800ebaa:	61fb      	str	r3, [r7, #28]
        break;
 800ebac:	e00d      	b.n	800ebca <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ebae:	f7fb ffbf 	bl	800ab30 <HAL_RCC_GetSysClockFreq>
 800ebb2:	61f8      	str	r0, [r7, #28]
        break;
 800ebb4:	e009      	b.n	800ebca <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ebb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ebba:	61fb      	str	r3, [r7, #28]
        break;
 800ebbc:	e005      	b.n	800ebca <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800ebbe:	2300      	movs	r3, #0
 800ebc0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800ebc2:	2301      	movs	r3, #1
 800ebc4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800ebc8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ebca:	69fb      	ldr	r3, [r7, #28]
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	f000 80fb 	beq.w	800edc8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	685a      	ldr	r2, [r3, #4]
 800ebd6:	4613      	mov	r3, r2
 800ebd8:	005b      	lsls	r3, r3, #1
 800ebda:	4413      	add	r3, r2
 800ebdc:	69fa      	ldr	r2, [r7, #28]
 800ebde:	429a      	cmp	r2, r3
 800ebe0:	d305      	bcc.n	800ebee <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	685b      	ldr	r3, [r3, #4]
 800ebe6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800ebe8:	69fa      	ldr	r2, [r7, #28]
 800ebea:	429a      	cmp	r2, r3
 800ebec:	d903      	bls.n	800ebf6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800ebee:	2301      	movs	r3, #1
 800ebf0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800ebf4:	e0e8      	b.n	800edc8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800ebf6:	69fb      	ldr	r3, [r7, #28]
 800ebf8:	2200      	movs	r2, #0
 800ebfa:	461c      	mov	r4, r3
 800ebfc:	4615      	mov	r5, r2
 800ebfe:	f04f 0200 	mov.w	r2, #0
 800ec02:	f04f 0300 	mov.w	r3, #0
 800ec06:	022b      	lsls	r3, r5, #8
 800ec08:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800ec0c:	0222      	lsls	r2, r4, #8
 800ec0e:	68f9      	ldr	r1, [r7, #12]
 800ec10:	6849      	ldr	r1, [r1, #4]
 800ec12:	0849      	lsrs	r1, r1, #1
 800ec14:	2000      	movs	r0, #0
 800ec16:	4688      	mov	r8, r1
 800ec18:	4681      	mov	r9, r0
 800ec1a:	eb12 0a08 	adds.w	sl, r2, r8
 800ec1e:	eb43 0b09 	adc.w	fp, r3, r9
 800ec22:	68fb      	ldr	r3, [r7, #12]
 800ec24:	685b      	ldr	r3, [r3, #4]
 800ec26:	2200      	movs	r2, #0
 800ec28:	603b      	str	r3, [r7, #0]
 800ec2a:	607a      	str	r2, [r7, #4]
 800ec2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ec30:	4650      	mov	r0, sl
 800ec32:	4659      	mov	r1, fp
 800ec34:	f7f2 f878 	bl	8000d28 <__aeabi_uldivmod>
 800ec38:	4602      	mov	r2, r0
 800ec3a:	460b      	mov	r3, r1
 800ec3c:	4613      	mov	r3, r2
 800ec3e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ec40:	69bb      	ldr	r3, [r7, #24]
 800ec42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ec46:	d308      	bcc.n	800ec5a <UART_SetConfig+0x3de>
 800ec48:	69bb      	ldr	r3, [r7, #24]
 800ec4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ec4e:	d204      	bcs.n	800ec5a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	69ba      	ldr	r2, [r7, #24]
 800ec56:	60da      	str	r2, [r3, #12]
 800ec58:	e0b6      	b.n	800edc8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800ec5a:	2301      	movs	r3, #1
 800ec5c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800ec60:	e0b2      	b.n	800edc8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	69db      	ldr	r3, [r3, #28]
 800ec66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ec6a:	d15e      	bne.n	800ed2a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800ec6c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ec70:	2b08      	cmp	r3, #8
 800ec72:	d828      	bhi.n	800ecc6 <UART_SetConfig+0x44a>
 800ec74:	a201      	add	r2, pc, #4	; (adr r2, 800ec7c <UART_SetConfig+0x400>)
 800ec76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec7a:	bf00      	nop
 800ec7c:	0800eca1 	.word	0x0800eca1
 800ec80:	0800eca9 	.word	0x0800eca9
 800ec84:	0800ecb1 	.word	0x0800ecb1
 800ec88:	0800ecc7 	.word	0x0800ecc7
 800ec8c:	0800ecb7 	.word	0x0800ecb7
 800ec90:	0800ecc7 	.word	0x0800ecc7
 800ec94:	0800ecc7 	.word	0x0800ecc7
 800ec98:	0800ecc7 	.word	0x0800ecc7
 800ec9c:	0800ecbf 	.word	0x0800ecbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800eca0:	f7fb ffde 	bl	800ac60 <HAL_RCC_GetPCLK1Freq>
 800eca4:	61f8      	str	r0, [r7, #28]
        break;
 800eca6:	e014      	b.n	800ecd2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800eca8:	f7fb fff0 	bl	800ac8c <HAL_RCC_GetPCLK2Freq>
 800ecac:	61f8      	str	r0, [r7, #28]
        break;
 800ecae:	e010      	b.n	800ecd2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ecb0:	4b4d      	ldr	r3, [pc, #308]	; (800ede8 <UART_SetConfig+0x56c>)
 800ecb2:	61fb      	str	r3, [r7, #28]
        break;
 800ecb4:	e00d      	b.n	800ecd2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ecb6:	f7fb ff3b 	bl	800ab30 <HAL_RCC_GetSysClockFreq>
 800ecba:	61f8      	str	r0, [r7, #28]
        break;
 800ecbc:	e009      	b.n	800ecd2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ecbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ecc2:	61fb      	str	r3, [r7, #28]
        break;
 800ecc4:	e005      	b.n	800ecd2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800ecc6:	2300      	movs	r3, #0
 800ecc8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800ecca:	2301      	movs	r3, #1
 800eccc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800ecd0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ecd2:	69fb      	ldr	r3, [r7, #28]
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d077      	beq.n	800edc8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ecd8:	69fb      	ldr	r3, [r7, #28]
 800ecda:	005a      	lsls	r2, r3, #1
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	685b      	ldr	r3, [r3, #4]
 800ece0:	085b      	lsrs	r3, r3, #1
 800ece2:	441a      	add	r2, r3
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	685b      	ldr	r3, [r3, #4]
 800ece8:	fbb2 f3f3 	udiv	r3, r2, r3
 800ecec:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ecee:	69bb      	ldr	r3, [r7, #24]
 800ecf0:	2b0f      	cmp	r3, #15
 800ecf2:	d916      	bls.n	800ed22 <UART_SetConfig+0x4a6>
 800ecf4:	69bb      	ldr	r3, [r7, #24]
 800ecf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ecfa:	d212      	bcs.n	800ed22 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ecfc:	69bb      	ldr	r3, [r7, #24]
 800ecfe:	b29b      	uxth	r3, r3
 800ed00:	f023 030f 	bic.w	r3, r3, #15
 800ed04:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ed06:	69bb      	ldr	r3, [r7, #24]
 800ed08:	085b      	lsrs	r3, r3, #1
 800ed0a:	b29b      	uxth	r3, r3
 800ed0c:	f003 0307 	and.w	r3, r3, #7
 800ed10:	b29a      	uxth	r2, r3
 800ed12:	8afb      	ldrh	r3, [r7, #22]
 800ed14:	4313      	orrs	r3, r2
 800ed16:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	8afa      	ldrh	r2, [r7, #22]
 800ed1e:	60da      	str	r2, [r3, #12]
 800ed20:	e052      	b.n	800edc8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800ed22:	2301      	movs	r3, #1
 800ed24:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800ed28:	e04e      	b.n	800edc8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ed2a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ed2e:	2b08      	cmp	r3, #8
 800ed30:	d827      	bhi.n	800ed82 <UART_SetConfig+0x506>
 800ed32:	a201      	add	r2, pc, #4	; (adr r2, 800ed38 <UART_SetConfig+0x4bc>)
 800ed34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed38:	0800ed5d 	.word	0x0800ed5d
 800ed3c:	0800ed65 	.word	0x0800ed65
 800ed40:	0800ed6d 	.word	0x0800ed6d
 800ed44:	0800ed83 	.word	0x0800ed83
 800ed48:	0800ed73 	.word	0x0800ed73
 800ed4c:	0800ed83 	.word	0x0800ed83
 800ed50:	0800ed83 	.word	0x0800ed83
 800ed54:	0800ed83 	.word	0x0800ed83
 800ed58:	0800ed7b 	.word	0x0800ed7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ed5c:	f7fb ff80 	bl	800ac60 <HAL_RCC_GetPCLK1Freq>
 800ed60:	61f8      	str	r0, [r7, #28]
        break;
 800ed62:	e014      	b.n	800ed8e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ed64:	f7fb ff92 	bl	800ac8c <HAL_RCC_GetPCLK2Freq>
 800ed68:	61f8      	str	r0, [r7, #28]
        break;
 800ed6a:	e010      	b.n	800ed8e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ed6c:	4b1e      	ldr	r3, [pc, #120]	; (800ede8 <UART_SetConfig+0x56c>)
 800ed6e:	61fb      	str	r3, [r7, #28]
        break;
 800ed70:	e00d      	b.n	800ed8e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ed72:	f7fb fedd 	bl	800ab30 <HAL_RCC_GetSysClockFreq>
 800ed76:	61f8      	str	r0, [r7, #28]
        break;
 800ed78:	e009      	b.n	800ed8e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ed7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ed7e:	61fb      	str	r3, [r7, #28]
        break;
 800ed80:	e005      	b.n	800ed8e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800ed82:	2300      	movs	r3, #0
 800ed84:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800ed86:	2301      	movs	r3, #1
 800ed88:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800ed8c:	bf00      	nop
    }

    if (pclk != 0U)
 800ed8e:	69fb      	ldr	r3, [r7, #28]
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d019      	beq.n	800edc8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	685b      	ldr	r3, [r3, #4]
 800ed98:	085a      	lsrs	r2, r3, #1
 800ed9a:	69fb      	ldr	r3, [r7, #28]
 800ed9c:	441a      	add	r2, r3
 800ed9e:	68fb      	ldr	r3, [r7, #12]
 800eda0:	685b      	ldr	r3, [r3, #4]
 800eda2:	fbb2 f3f3 	udiv	r3, r2, r3
 800eda6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800eda8:	69bb      	ldr	r3, [r7, #24]
 800edaa:	2b0f      	cmp	r3, #15
 800edac:	d909      	bls.n	800edc2 <UART_SetConfig+0x546>
 800edae:	69bb      	ldr	r3, [r7, #24]
 800edb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800edb4:	d205      	bcs.n	800edc2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800edb6:	69bb      	ldr	r3, [r7, #24]
 800edb8:	b29a      	uxth	r2, r3
 800edba:	68fb      	ldr	r3, [r7, #12]
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	60da      	str	r2, [r3, #12]
 800edc0:	e002      	b.n	800edc8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800edc2:	2301      	movs	r3, #1
 800edc4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800edc8:	68fb      	ldr	r3, [r7, #12]
 800edca:	2200      	movs	r2, #0
 800edcc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	2200      	movs	r2, #0
 800edd2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800edd4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800edd8:	4618      	mov	r0, r3
 800edda:	3728      	adds	r7, #40	; 0x28
 800eddc:	46bd      	mov	sp, r7
 800edde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ede2:	bf00      	nop
 800ede4:	40008000 	.word	0x40008000
 800ede8:	00f42400 	.word	0x00f42400

0800edec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800edec:	b480      	push	{r7}
 800edee:	b083      	sub	sp, #12
 800edf0:	af00      	add	r7, sp, #0
 800edf2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edf8:	f003 0301 	and.w	r3, r3, #1
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d00a      	beq.n	800ee16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	685b      	ldr	r3, [r3, #4]
 800ee06:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	430a      	orrs	r2, r1
 800ee14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee1a:	f003 0302 	and.w	r3, r3, #2
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d00a      	beq.n	800ee38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	685b      	ldr	r3, [r3, #4]
 800ee28:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	430a      	orrs	r2, r1
 800ee36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee3c:	f003 0304 	and.w	r3, r3, #4
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d00a      	beq.n	800ee5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	685b      	ldr	r3, [r3, #4]
 800ee4a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	430a      	orrs	r2, r1
 800ee58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee5e:	f003 0308 	and.w	r3, r3, #8
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d00a      	beq.n	800ee7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	685b      	ldr	r3, [r3, #4]
 800ee6c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	681b      	ldr	r3, [r3, #0]
 800ee78:	430a      	orrs	r2, r1
 800ee7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee80:	f003 0310 	and.w	r3, r3, #16
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d00a      	beq.n	800ee9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	689b      	ldr	r3, [r3, #8]
 800ee8e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	430a      	orrs	r2, r1
 800ee9c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eea2:	f003 0320 	and.w	r3, r3, #32
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d00a      	beq.n	800eec0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	689b      	ldr	r3, [r3, #8]
 800eeb0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	430a      	orrs	r2, r1
 800eebe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d01a      	beq.n	800ef02 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	685b      	ldr	r3, [r3, #4]
 800eed2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	430a      	orrs	r2, r1
 800eee0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eee6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800eeea:	d10a      	bne.n	800ef02 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	685b      	ldr	r3, [r3, #4]
 800eef2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	681b      	ldr	r3, [r3, #0]
 800eefe:	430a      	orrs	r2, r1
 800ef00:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d00a      	beq.n	800ef24 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	681b      	ldr	r3, [r3, #0]
 800ef12:	685b      	ldr	r3, [r3, #4]
 800ef14:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	430a      	orrs	r2, r1
 800ef22:	605a      	str	r2, [r3, #4]
  }
}
 800ef24:	bf00      	nop
 800ef26:	370c      	adds	r7, #12
 800ef28:	46bd      	mov	sp, r7
 800ef2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef2e:	4770      	bx	lr

0800ef30 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ef30:	b580      	push	{r7, lr}
 800ef32:	b086      	sub	sp, #24
 800ef34:	af02      	add	r7, sp, #8
 800ef36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	2200      	movs	r2, #0
 800ef3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ef40:	f7f8 fd7c 	bl	8007a3c <HAL_GetTick>
 800ef44:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	681b      	ldr	r3, [r3, #0]
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	f003 0308 	and.w	r3, r3, #8
 800ef50:	2b08      	cmp	r3, #8
 800ef52:	d10e      	bne.n	800ef72 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ef54:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ef58:	9300      	str	r3, [sp, #0]
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	2200      	movs	r2, #0
 800ef5e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ef62:	6878      	ldr	r0, [r7, #4]
 800ef64:	f000 f82d 	bl	800efc2 <UART_WaitOnFlagUntilTimeout>
 800ef68:	4603      	mov	r3, r0
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d001      	beq.n	800ef72 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ef6e:	2303      	movs	r3, #3
 800ef70:	e023      	b.n	800efba <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	681b      	ldr	r3, [r3, #0]
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	f003 0304 	and.w	r3, r3, #4
 800ef7c:	2b04      	cmp	r3, #4
 800ef7e:	d10e      	bne.n	800ef9e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ef80:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ef84:	9300      	str	r3, [sp, #0]
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	2200      	movs	r2, #0
 800ef8a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ef8e:	6878      	ldr	r0, [r7, #4]
 800ef90:	f000 f817 	bl	800efc2 <UART_WaitOnFlagUntilTimeout>
 800ef94:	4603      	mov	r3, r0
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d001      	beq.n	800ef9e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ef9a:	2303      	movs	r3, #3
 800ef9c:	e00d      	b.n	800efba <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	2220      	movs	r2, #32
 800efa2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	2220      	movs	r2, #32
 800efa8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	2200      	movs	r2, #0
 800efae:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	2200      	movs	r2, #0
 800efb4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800efb8:	2300      	movs	r3, #0
}
 800efba:	4618      	mov	r0, r3
 800efbc:	3710      	adds	r7, #16
 800efbe:	46bd      	mov	sp, r7
 800efc0:	bd80      	pop	{r7, pc}

0800efc2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800efc2:	b580      	push	{r7, lr}
 800efc4:	b09c      	sub	sp, #112	; 0x70
 800efc6:	af00      	add	r7, sp, #0
 800efc8:	60f8      	str	r0, [r7, #12]
 800efca:	60b9      	str	r1, [r7, #8]
 800efcc:	603b      	str	r3, [r7, #0]
 800efce:	4613      	mov	r3, r2
 800efd0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800efd2:	e0a5      	b.n	800f120 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800efd4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800efd6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800efda:	f000 80a1 	beq.w	800f120 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800efde:	f7f8 fd2d 	bl	8007a3c <HAL_GetTick>
 800efe2:	4602      	mov	r2, r0
 800efe4:	683b      	ldr	r3, [r7, #0]
 800efe6:	1ad3      	subs	r3, r2, r3
 800efe8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800efea:	429a      	cmp	r2, r3
 800efec:	d302      	bcc.n	800eff4 <UART_WaitOnFlagUntilTimeout+0x32>
 800efee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d13e      	bne.n	800f072 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800eff4:	68fb      	ldr	r3, [r7, #12]
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800effa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800effc:	e853 3f00 	ldrex	r3, [r3]
 800f000:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800f002:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f004:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800f008:	667b      	str	r3, [r7, #100]	; 0x64
 800f00a:	68fb      	ldr	r3, [r7, #12]
 800f00c:	681b      	ldr	r3, [r3, #0]
 800f00e:	461a      	mov	r2, r3
 800f010:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f012:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f014:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f016:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f018:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f01a:	e841 2300 	strex	r3, r2, [r1]
 800f01e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800f020:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f022:	2b00      	cmp	r3, #0
 800f024:	d1e6      	bne.n	800eff4 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f026:	68fb      	ldr	r3, [r7, #12]
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	3308      	adds	r3, #8
 800f02c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f02e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f030:	e853 3f00 	ldrex	r3, [r3]
 800f034:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f038:	f023 0301 	bic.w	r3, r3, #1
 800f03c:	663b      	str	r3, [r7, #96]	; 0x60
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	681b      	ldr	r3, [r3, #0]
 800f042:	3308      	adds	r3, #8
 800f044:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f046:	64ba      	str	r2, [r7, #72]	; 0x48
 800f048:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f04a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f04c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f04e:	e841 2300 	strex	r3, r2, [r1]
 800f052:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800f054:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f056:	2b00      	cmp	r3, #0
 800f058:	d1e5      	bne.n	800f026 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	2220      	movs	r2, #32
 800f05e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800f060:	68fb      	ldr	r3, [r7, #12]
 800f062:	2220      	movs	r2, #32
 800f064:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800f066:	68fb      	ldr	r3, [r7, #12]
 800f068:	2200      	movs	r2, #0
 800f06a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800f06e:	2303      	movs	r3, #3
 800f070:	e067      	b.n	800f142 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	f003 0304 	and.w	r3, r3, #4
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d04f      	beq.n	800f120 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	69db      	ldr	r3, [r3, #28]
 800f086:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f08a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f08e:	d147      	bne.n	800f120 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f090:	68fb      	ldr	r3, [r7, #12]
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f098:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800f09a:	68fb      	ldr	r3, [r7, #12]
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0a2:	e853 3f00 	ldrex	r3, [r3]
 800f0a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f0a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0aa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800f0ae:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f0b0:	68fb      	ldr	r3, [r7, #12]
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	461a      	mov	r2, r3
 800f0b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f0b8:	637b      	str	r3, [r7, #52]	; 0x34
 800f0ba:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f0be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f0c0:	e841 2300 	strex	r3, r2, [r1]
 800f0c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800f0c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d1e6      	bne.n	800f09a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	3308      	adds	r3, #8
 800f0d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0d4:	697b      	ldr	r3, [r7, #20]
 800f0d6:	e853 3f00 	ldrex	r3, [r3]
 800f0da:	613b      	str	r3, [r7, #16]
   return(result);
 800f0dc:	693b      	ldr	r3, [r7, #16]
 800f0de:	f023 0301 	bic.w	r3, r3, #1
 800f0e2:	66bb      	str	r3, [r7, #104]	; 0x68
 800f0e4:	68fb      	ldr	r3, [r7, #12]
 800f0e6:	681b      	ldr	r3, [r3, #0]
 800f0e8:	3308      	adds	r3, #8
 800f0ea:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f0ec:	623a      	str	r2, [r7, #32]
 800f0ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0f0:	69f9      	ldr	r1, [r7, #28]
 800f0f2:	6a3a      	ldr	r2, [r7, #32]
 800f0f4:	e841 2300 	strex	r3, r2, [r1]
 800f0f8:	61bb      	str	r3, [r7, #24]
   return(result);
 800f0fa:	69bb      	ldr	r3, [r7, #24]
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d1e5      	bne.n	800f0cc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	2220      	movs	r2, #32
 800f104:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800f106:	68fb      	ldr	r3, [r7, #12]
 800f108:	2220      	movs	r2, #32
 800f10a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f10c:	68fb      	ldr	r3, [r7, #12]
 800f10e:	2220      	movs	r2, #32
 800f110:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	2200      	movs	r2, #0
 800f118:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800f11c:	2303      	movs	r3, #3
 800f11e:	e010      	b.n	800f142 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f120:	68fb      	ldr	r3, [r7, #12]
 800f122:	681b      	ldr	r3, [r3, #0]
 800f124:	69da      	ldr	r2, [r3, #28]
 800f126:	68bb      	ldr	r3, [r7, #8]
 800f128:	4013      	ands	r3, r2
 800f12a:	68ba      	ldr	r2, [r7, #8]
 800f12c:	429a      	cmp	r2, r3
 800f12e:	bf0c      	ite	eq
 800f130:	2301      	moveq	r3, #1
 800f132:	2300      	movne	r3, #0
 800f134:	b2db      	uxtb	r3, r3
 800f136:	461a      	mov	r2, r3
 800f138:	79fb      	ldrb	r3, [r7, #7]
 800f13a:	429a      	cmp	r2, r3
 800f13c:	f43f af4a 	beq.w	800efd4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f140:	2300      	movs	r3, #0
}
 800f142:	4618      	mov	r0, r3
 800f144:	3770      	adds	r7, #112	; 0x70
 800f146:	46bd      	mov	sp, r7
 800f148:	bd80      	pop	{r7, pc}
	...

0800f14c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f14c:	b480      	push	{r7}
 800f14e:	b097      	sub	sp, #92	; 0x5c
 800f150:	af00      	add	r7, sp, #0
 800f152:	60f8      	str	r0, [r7, #12]
 800f154:	60b9      	str	r1, [r7, #8]
 800f156:	4613      	mov	r3, r2
 800f158:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	68ba      	ldr	r2, [r7, #8]
 800f15e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	88fa      	ldrh	r2, [r7, #6]
 800f164:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800f168:	68fb      	ldr	r3, [r7, #12]
 800f16a:	88fa      	ldrh	r2, [r7, #6]
 800f16c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800f170:	68fb      	ldr	r3, [r7, #12]
 800f172:	2200      	movs	r2, #0
 800f174:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800f176:	68fb      	ldr	r3, [r7, #12]
 800f178:	689b      	ldr	r3, [r3, #8]
 800f17a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f17e:	d10e      	bne.n	800f19e <UART_Start_Receive_IT+0x52>
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	691b      	ldr	r3, [r3, #16]
 800f184:	2b00      	cmp	r3, #0
 800f186:	d105      	bne.n	800f194 <UART_Start_Receive_IT+0x48>
 800f188:	68fb      	ldr	r3, [r7, #12]
 800f18a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800f18e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800f192:	e02d      	b.n	800f1f0 <UART_Start_Receive_IT+0xa4>
 800f194:	68fb      	ldr	r3, [r7, #12]
 800f196:	22ff      	movs	r2, #255	; 0xff
 800f198:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800f19c:	e028      	b.n	800f1f0 <UART_Start_Receive_IT+0xa4>
 800f19e:	68fb      	ldr	r3, [r7, #12]
 800f1a0:	689b      	ldr	r3, [r3, #8]
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d10d      	bne.n	800f1c2 <UART_Start_Receive_IT+0x76>
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	691b      	ldr	r3, [r3, #16]
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d104      	bne.n	800f1b8 <UART_Start_Receive_IT+0x6c>
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	22ff      	movs	r2, #255	; 0xff
 800f1b2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800f1b6:	e01b      	b.n	800f1f0 <UART_Start_Receive_IT+0xa4>
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	227f      	movs	r2, #127	; 0x7f
 800f1bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800f1c0:	e016      	b.n	800f1f0 <UART_Start_Receive_IT+0xa4>
 800f1c2:	68fb      	ldr	r3, [r7, #12]
 800f1c4:	689b      	ldr	r3, [r3, #8]
 800f1c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f1ca:	d10d      	bne.n	800f1e8 <UART_Start_Receive_IT+0x9c>
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	691b      	ldr	r3, [r3, #16]
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d104      	bne.n	800f1de <UART_Start_Receive_IT+0x92>
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	227f      	movs	r2, #127	; 0x7f
 800f1d8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800f1dc:	e008      	b.n	800f1f0 <UART_Start_Receive_IT+0xa4>
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	223f      	movs	r2, #63	; 0x3f
 800f1e2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800f1e6:	e003      	b.n	800f1f0 <UART_Start_Receive_IT+0xa4>
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	2200      	movs	r2, #0
 800f1ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	2200      	movs	r2, #0
 800f1f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	2222      	movs	r2, #34	; 0x22
 800f1fc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f1fe:	68fb      	ldr	r3, [r7, #12]
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	3308      	adds	r3, #8
 800f204:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f206:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f208:	e853 3f00 	ldrex	r3, [r3]
 800f20c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f20e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f210:	f043 0301 	orr.w	r3, r3, #1
 800f214:	657b      	str	r3, [r7, #84]	; 0x54
 800f216:	68fb      	ldr	r3, [r7, #12]
 800f218:	681b      	ldr	r3, [r3, #0]
 800f21a:	3308      	adds	r3, #8
 800f21c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f21e:	64ba      	str	r2, [r7, #72]	; 0x48
 800f220:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f222:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f224:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f226:	e841 2300 	strex	r3, r2, [r1]
 800f22a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800f22c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d1e5      	bne.n	800f1fe <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	689b      	ldr	r3, [r3, #8]
 800f236:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f23a:	d107      	bne.n	800f24c <UART_Start_Receive_IT+0x100>
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	691b      	ldr	r3, [r3, #16]
 800f240:	2b00      	cmp	r3, #0
 800f242:	d103      	bne.n	800f24c <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	4a24      	ldr	r2, [pc, #144]	; (800f2d8 <UART_Start_Receive_IT+0x18c>)
 800f248:	665a      	str	r2, [r3, #100]	; 0x64
 800f24a:	e002      	b.n	800f252 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	4a23      	ldr	r2, [pc, #140]	; (800f2dc <UART_Start_Receive_IT+0x190>)
 800f250:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800f252:	68fb      	ldr	r3, [r7, #12]
 800f254:	2200      	movs	r2, #0
 800f256:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	691b      	ldr	r3, [r3, #16]
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d019      	beq.n	800f296 <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800f262:	68fb      	ldr	r3, [r7, #12]
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f26a:	e853 3f00 	ldrex	r3, [r3]
 800f26e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f272:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800f276:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f278:	68fb      	ldr	r3, [r7, #12]
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	461a      	mov	r2, r3
 800f27e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f280:	637b      	str	r3, [r7, #52]	; 0x34
 800f282:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f284:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f286:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f288:	e841 2300 	strex	r3, r2, [r1]
 800f28c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800f28e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f290:	2b00      	cmp	r3, #0
 800f292:	d1e6      	bne.n	800f262 <UART_Start_Receive_IT+0x116>
 800f294:	e018      	b.n	800f2c8 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800f296:	68fb      	ldr	r3, [r7, #12]
 800f298:	681b      	ldr	r3, [r3, #0]
 800f29a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f29c:	697b      	ldr	r3, [r7, #20]
 800f29e:	e853 3f00 	ldrex	r3, [r3]
 800f2a2:	613b      	str	r3, [r7, #16]
   return(result);
 800f2a4:	693b      	ldr	r3, [r7, #16]
 800f2a6:	f043 0320 	orr.w	r3, r3, #32
 800f2aa:	653b      	str	r3, [r7, #80]	; 0x50
 800f2ac:	68fb      	ldr	r3, [r7, #12]
 800f2ae:	681b      	ldr	r3, [r3, #0]
 800f2b0:	461a      	mov	r2, r3
 800f2b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f2b4:	623b      	str	r3, [r7, #32]
 800f2b6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f2b8:	69f9      	ldr	r1, [r7, #28]
 800f2ba:	6a3a      	ldr	r2, [r7, #32]
 800f2bc:	e841 2300 	strex	r3, r2, [r1]
 800f2c0:	61bb      	str	r3, [r7, #24]
   return(result);
 800f2c2:	69bb      	ldr	r3, [r7, #24]
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d1e6      	bne.n	800f296 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800f2c8:	2300      	movs	r3, #0
}
 800f2ca:	4618      	mov	r0, r3
 800f2cc:	375c      	adds	r7, #92	; 0x5c
 800f2ce:	46bd      	mov	sp, r7
 800f2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2d4:	4770      	bx	lr
 800f2d6:	bf00      	nop
 800f2d8:	0800f705 	.word	0x0800f705
 800f2dc:	0800f5a5 	.word	0x0800f5a5

0800f2e0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800f2e0:	b480      	push	{r7}
 800f2e2:	b089      	sub	sp, #36	; 0x24
 800f2e4:	af00      	add	r7, sp, #0
 800f2e6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	681b      	ldr	r3, [r3, #0]
 800f2ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2ee:	68fb      	ldr	r3, [r7, #12]
 800f2f0:	e853 3f00 	ldrex	r3, [r3]
 800f2f4:	60bb      	str	r3, [r7, #8]
   return(result);
 800f2f6:	68bb      	ldr	r3, [r7, #8]
 800f2f8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800f2fc:	61fb      	str	r3, [r7, #28]
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	681b      	ldr	r3, [r3, #0]
 800f302:	461a      	mov	r2, r3
 800f304:	69fb      	ldr	r3, [r7, #28]
 800f306:	61bb      	str	r3, [r7, #24]
 800f308:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f30a:	6979      	ldr	r1, [r7, #20]
 800f30c:	69ba      	ldr	r2, [r7, #24]
 800f30e:	e841 2300 	strex	r3, r2, [r1]
 800f312:	613b      	str	r3, [r7, #16]
   return(result);
 800f314:	693b      	ldr	r3, [r7, #16]
 800f316:	2b00      	cmp	r3, #0
 800f318:	d1e6      	bne.n	800f2e8 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	2220      	movs	r2, #32
 800f31e:	679a      	str	r2, [r3, #120]	; 0x78
}
 800f320:	bf00      	nop
 800f322:	3724      	adds	r7, #36	; 0x24
 800f324:	46bd      	mov	sp, r7
 800f326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f32a:	4770      	bx	lr

0800f32c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f32c:	b480      	push	{r7}
 800f32e:	b095      	sub	sp, #84	; 0x54
 800f330:	af00      	add	r7, sp, #0
 800f332:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	681b      	ldr	r3, [r3, #0]
 800f338:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f33a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f33c:	e853 3f00 	ldrex	r3, [r3]
 800f340:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f344:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f348:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	681b      	ldr	r3, [r3, #0]
 800f34e:	461a      	mov	r2, r3
 800f350:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f352:	643b      	str	r3, [r7, #64]	; 0x40
 800f354:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f356:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f358:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f35a:	e841 2300 	strex	r3, r2, [r1]
 800f35e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f362:	2b00      	cmp	r3, #0
 800f364:	d1e6      	bne.n	800f334 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	3308      	adds	r3, #8
 800f36c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f36e:	6a3b      	ldr	r3, [r7, #32]
 800f370:	e853 3f00 	ldrex	r3, [r3]
 800f374:	61fb      	str	r3, [r7, #28]
   return(result);
 800f376:	69fb      	ldr	r3, [r7, #28]
 800f378:	f023 0301 	bic.w	r3, r3, #1
 800f37c:	64bb      	str	r3, [r7, #72]	; 0x48
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	681b      	ldr	r3, [r3, #0]
 800f382:	3308      	adds	r3, #8
 800f384:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f386:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f388:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f38a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f38c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f38e:	e841 2300 	strex	r3, r2, [r1]
 800f392:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f396:	2b00      	cmp	r3, #0
 800f398:	d1e5      	bne.n	800f366 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f39e:	2b01      	cmp	r3, #1
 800f3a0:	d118      	bne.n	800f3d4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	e853 3f00 	ldrex	r3, [r3]
 800f3ae:	60bb      	str	r3, [r7, #8]
   return(result);
 800f3b0:	68bb      	ldr	r3, [r7, #8]
 800f3b2:	f023 0310 	bic.w	r3, r3, #16
 800f3b6:	647b      	str	r3, [r7, #68]	; 0x44
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	461a      	mov	r2, r3
 800f3be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f3c0:	61bb      	str	r3, [r7, #24]
 800f3c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f3c4:	6979      	ldr	r1, [r7, #20]
 800f3c6:	69ba      	ldr	r2, [r7, #24]
 800f3c8:	e841 2300 	strex	r3, r2, [r1]
 800f3cc:	613b      	str	r3, [r7, #16]
   return(result);
 800f3ce:	693b      	ldr	r3, [r7, #16]
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d1e6      	bne.n	800f3a2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	2220      	movs	r2, #32
 800f3d8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	2200      	movs	r2, #0
 800f3de:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	2200      	movs	r2, #0
 800f3e4:	665a      	str	r2, [r3, #100]	; 0x64
}
 800f3e6:	bf00      	nop
 800f3e8:	3754      	adds	r7, #84	; 0x54
 800f3ea:	46bd      	mov	sp, r7
 800f3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3f0:	4770      	bx	lr

0800f3f2 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800f3f2:	b580      	push	{r7, lr}
 800f3f4:	b090      	sub	sp, #64	; 0x40
 800f3f6:	af00      	add	r7, sp, #0
 800f3f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f3fe:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	681b      	ldr	r3, [r3, #0]
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	f003 0320 	and.w	r3, r3, #32
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d137      	bne.n	800f47e <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800f40e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f410:	2200      	movs	r2, #0
 800f412:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f416:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	3308      	adds	r3, #8
 800f41c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f41e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f420:	e853 3f00 	ldrex	r3, [r3]
 800f424:	623b      	str	r3, [r7, #32]
   return(result);
 800f426:	6a3b      	ldr	r3, [r7, #32]
 800f428:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f42c:	63bb      	str	r3, [r7, #56]	; 0x38
 800f42e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f430:	681b      	ldr	r3, [r3, #0]
 800f432:	3308      	adds	r3, #8
 800f434:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f436:	633a      	str	r2, [r7, #48]	; 0x30
 800f438:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f43a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f43c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f43e:	e841 2300 	strex	r3, r2, [r1]
 800f442:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f446:	2b00      	cmp	r3, #0
 800f448:	d1e5      	bne.n	800f416 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f44a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f44c:	681b      	ldr	r3, [r3, #0]
 800f44e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f450:	693b      	ldr	r3, [r7, #16]
 800f452:	e853 3f00 	ldrex	r3, [r3]
 800f456:	60fb      	str	r3, [r7, #12]
   return(result);
 800f458:	68fb      	ldr	r3, [r7, #12]
 800f45a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f45e:	637b      	str	r3, [r7, #52]	; 0x34
 800f460:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	461a      	mov	r2, r3
 800f466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f468:	61fb      	str	r3, [r7, #28]
 800f46a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f46c:	69b9      	ldr	r1, [r7, #24]
 800f46e:	69fa      	ldr	r2, [r7, #28]
 800f470:	e841 2300 	strex	r3, r2, [r1]
 800f474:	617b      	str	r3, [r7, #20]
   return(result);
 800f476:	697b      	ldr	r3, [r7, #20]
 800f478:	2b00      	cmp	r3, #0
 800f47a:	d1e6      	bne.n	800f44a <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f47c:	e002      	b.n	800f484 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800f47e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800f480:	f7f5 fe9e 	bl	80051c0 <HAL_UART_TxCpltCallback>
}
 800f484:	bf00      	nop
 800f486:	3740      	adds	r7, #64	; 0x40
 800f488:	46bd      	mov	sp, r7
 800f48a:	bd80      	pop	{r7, pc}

0800f48c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f48c:	b580      	push	{r7, lr}
 800f48e:	b084      	sub	sp, #16
 800f490:	af00      	add	r7, sp, #0
 800f492:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f498:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800f49a:	68f8      	ldr	r0, [r7, #12]
 800f49c:	f7ff f9d8 	bl	800e850 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f4a0:	bf00      	nop
 800f4a2:	3710      	adds	r7, #16
 800f4a4:	46bd      	mov	sp, r7
 800f4a6:	bd80      	pop	{r7, pc}

0800f4a8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800f4a8:	b580      	push	{r7, lr}
 800f4aa:	b086      	sub	sp, #24
 800f4ac:	af00      	add	r7, sp, #0
 800f4ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f4b4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800f4b6:	697b      	ldr	r3, [r7, #20]
 800f4b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f4ba:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800f4bc:	697b      	ldr	r3, [r7, #20]
 800f4be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f4c0:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800f4c2:	697b      	ldr	r3, [r7, #20]
 800f4c4:	681b      	ldr	r3, [r3, #0]
 800f4c6:	689b      	ldr	r3, [r3, #8]
 800f4c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f4cc:	2b80      	cmp	r3, #128	; 0x80
 800f4ce:	d109      	bne.n	800f4e4 <UART_DMAError+0x3c>
 800f4d0:	693b      	ldr	r3, [r7, #16]
 800f4d2:	2b21      	cmp	r3, #33	; 0x21
 800f4d4:	d106      	bne.n	800f4e4 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800f4d6:	697b      	ldr	r3, [r7, #20]
 800f4d8:	2200      	movs	r2, #0
 800f4da:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800f4de:	6978      	ldr	r0, [r7, #20]
 800f4e0:	f7ff fefe 	bl	800f2e0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800f4e4:	697b      	ldr	r3, [r7, #20]
 800f4e6:	681b      	ldr	r3, [r3, #0]
 800f4e8:	689b      	ldr	r3, [r3, #8]
 800f4ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f4ee:	2b40      	cmp	r3, #64	; 0x40
 800f4f0:	d109      	bne.n	800f506 <UART_DMAError+0x5e>
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	2b22      	cmp	r3, #34	; 0x22
 800f4f6:	d106      	bne.n	800f506 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800f4f8:	697b      	ldr	r3, [r7, #20]
 800f4fa:	2200      	movs	r2, #0
 800f4fc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800f500:	6978      	ldr	r0, [r7, #20]
 800f502:	f7ff ff13 	bl	800f32c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800f506:	697b      	ldr	r3, [r7, #20]
 800f508:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f50c:	f043 0210 	orr.w	r2, r3, #16
 800f510:	697b      	ldr	r3, [r7, #20]
 800f512:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f516:	6978      	ldr	r0, [r7, #20]
 800f518:	f7f5 fe76 	bl	8005208 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f51c:	bf00      	nop
 800f51e:	3718      	adds	r7, #24
 800f520:	46bd      	mov	sp, r7
 800f522:	bd80      	pop	{r7, pc}

0800f524 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f524:	b580      	push	{r7, lr}
 800f526:	b084      	sub	sp, #16
 800f528:	af00      	add	r7, sp, #0
 800f52a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f530:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800f532:	68fb      	ldr	r3, [r7, #12]
 800f534:	2200      	movs	r2, #0
 800f536:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800f53a:	68fb      	ldr	r3, [r7, #12]
 800f53c:	2200      	movs	r2, #0
 800f53e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f542:	68f8      	ldr	r0, [r7, #12]
 800f544:	f7f5 fe60 	bl	8005208 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f548:	bf00      	nop
 800f54a:	3710      	adds	r7, #16
 800f54c:	46bd      	mov	sp, r7
 800f54e:	bd80      	pop	{r7, pc}

0800f550 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f550:	b580      	push	{r7, lr}
 800f552:	b088      	sub	sp, #32
 800f554:	af00      	add	r7, sp, #0
 800f556:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f55e:	68fb      	ldr	r3, [r7, #12]
 800f560:	e853 3f00 	ldrex	r3, [r3]
 800f564:	60bb      	str	r3, [r7, #8]
   return(result);
 800f566:	68bb      	ldr	r3, [r7, #8]
 800f568:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f56c:	61fb      	str	r3, [r7, #28]
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	681b      	ldr	r3, [r3, #0]
 800f572:	461a      	mov	r2, r3
 800f574:	69fb      	ldr	r3, [r7, #28]
 800f576:	61bb      	str	r3, [r7, #24]
 800f578:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f57a:	6979      	ldr	r1, [r7, #20]
 800f57c:	69ba      	ldr	r2, [r7, #24]
 800f57e:	e841 2300 	strex	r3, r2, [r1]
 800f582:	613b      	str	r3, [r7, #16]
   return(result);
 800f584:	693b      	ldr	r3, [r7, #16]
 800f586:	2b00      	cmp	r3, #0
 800f588:	d1e6      	bne.n	800f558 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	2220      	movs	r2, #32
 800f58e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	2200      	movs	r2, #0
 800f594:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f596:	6878      	ldr	r0, [r7, #4]
 800f598:	f7f5 fe12 	bl	80051c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f59c:	bf00      	nop
 800f59e:	3720      	adds	r7, #32
 800f5a0:	46bd      	mov	sp, r7
 800f5a2:	bd80      	pop	{r7, pc}

0800f5a4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800f5a4:	b580      	push	{r7, lr}
 800f5a6:	b096      	sub	sp, #88	; 0x58
 800f5a8:	af00      	add	r7, sp, #0
 800f5aa:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f5b2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f5ba:	2b22      	cmp	r3, #34	; 0x22
 800f5bc:	f040 8094 	bne.w	800f6e8 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	681b      	ldr	r3, [r3, #0]
 800f5c4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f5c6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800f5ca:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800f5ce:	b2d9      	uxtb	r1, r3
 800f5d0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800f5d4:	b2da      	uxtb	r2, r3
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f5da:	400a      	ands	r2, r1
 800f5dc:	b2d2      	uxtb	r2, r2
 800f5de:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f5e4:	1c5a      	adds	r2, r3, #1
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800f5f0:	b29b      	uxth	r3, r3
 800f5f2:	3b01      	subs	r3, #1
 800f5f4:	b29a      	uxth	r2, r3
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800f602:	b29b      	uxth	r3, r3
 800f604:	2b00      	cmp	r3, #0
 800f606:	d179      	bne.n	800f6fc <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	681b      	ldr	r3, [r3, #0]
 800f60c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f60e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f610:	e853 3f00 	ldrex	r3, [r3]
 800f614:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f618:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f61c:	653b      	str	r3, [r7, #80]	; 0x50
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	681b      	ldr	r3, [r3, #0]
 800f622:	461a      	mov	r2, r3
 800f624:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f626:	647b      	str	r3, [r7, #68]	; 0x44
 800f628:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f62a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f62c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f62e:	e841 2300 	strex	r3, r2, [r1]
 800f632:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f634:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f636:	2b00      	cmp	r3, #0
 800f638:	d1e6      	bne.n	800f608 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	681b      	ldr	r3, [r3, #0]
 800f63e:	3308      	adds	r3, #8
 800f640:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f644:	e853 3f00 	ldrex	r3, [r3]
 800f648:	623b      	str	r3, [r7, #32]
   return(result);
 800f64a:	6a3b      	ldr	r3, [r7, #32]
 800f64c:	f023 0301 	bic.w	r3, r3, #1
 800f650:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	3308      	adds	r3, #8
 800f658:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f65a:	633a      	str	r2, [r7, #48]	; 0x30
 800f65c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f65e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f660:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f662:	e841 2300 	strex	r3, r2, [r1]
 800f666:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d1e5      	bne.n	800f63a <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	2220      	movs	r2, #32
 800f672:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	2200      	movs	r2, #0
 800f678:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f67e:	2b01      	cmp	r3, #1
 800f680:	d12e      	bne.n	800f6e0 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	2200      	movs	r2, #0
 800f686:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	681b      	ldr	r3, [r3, #0]
 800f68c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f68e:	693b      	ldr	r3, [r7, #16]
 800f690:	e853 3f00 	ldrex	r3, [r3]
 800f694:	60fb      	str	r3, [r7, #12]
   return(result);
 800f696:	68fb      	ldr	r3, [r7, #12]
 800f698:	f023 0310 	bic.w	r3, r3, #16
 800f69c:	64bb      	str	r3, [r7, #72]	; 0x48
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	681b      	ldr	r3, [r3, #0]
 800f6a2:	461a      	mov	r2, r3
 800f6a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f6a6:	61fb      	str	r3, [r7, #28]
 800f6a8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6aa:	69b9      	ldr	r1, [r7, #24]
 800f6ac:	69fa      	ldr	r2, [r7, #28]
 800f6ae:	e841 2300 	strex	r3, r2, [r1]
 800f6b2:	617b      	str	r3, [r7, #20]
   return(result);
 800f6b4:	697b      	ldr	r3, [r7, #20]
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d1e6      	bne.n	800f688 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	681b      	ldr	r3, [r3, #0]
 800f6be:	69db      	ldr	r3, [r3, #28]
 800f6c0:	f003 0310 	and.w	r3, r3, #16
 800f6c4:	2b10      	cmp	r3, #16
 800f6c6:	d103      	bne.n	800f6d0 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	2210      	movs	r2, #16
 800f6ce:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800f6d6:	4619      	mov	r1, r3
 800f6d8:	6878      	ldr	r0, [r7, #4]
 800f6da:	f7ff f8c3 	bl	800e864 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f6de:	e00d      	b.n	800f6fc <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800f6e0:	6878      	ldr	r0, [r7, #4]
 800f6e2:	f7f5 fdbb 	bl	800525c <HAL_UART_RxCpltCallback>
}
 800f6e6:	e009      	b.n	800f6fc <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	8b1b      	ldrh	r3, [r3, #24]
 800f6ee:	b29a      	uxth	r2, r3
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	f042 0208 	orr.w	r2, r2, #8
 800f6f8:	b292      	uxth	r2, r2
 800f6fa:	831a      	strh	r2, [r3, #24]
}
 800f6fc:	bf00      	nop
 800f6fe:	3758      	adds	r7, #88	; 0x58
 800f700:	46bd      	mov	sp, r7
 800f702:	bd80      	pop	{r7, pc}

0800f704 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800f704:	b580      	push	{r7, lr}
 800f706:	b096      	sub	sp, #88	; 0x58
 800f708:	af00      	add	r7, sp, #0
 800f70a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f712:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f71a:	2b22      	cmp	r3, #34	; 0x22
 800f71c:	f040 8094 	bne.w	800f848 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f726:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f72e:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800f730:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800f734:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800f738:	4013      	ands	r3, r2
 800f73a:	b29a      	uxth	r2, r3
 800f73c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f73e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f744:	1c9a      	adds	r2, r3, #2
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800f750:	b29b      	uxth	r3, r3
 800f752:	3b01      	subs	r3, #1
 800f754:	b29a      	uxth	r2, r3
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800f762:	b29b      	uxth	r3, r3
 800f764:	2b00      	cmp	r3, #0
 800f766:	d179      	bne.n	800f85c <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	681b      	ldr	r3, [r3, #0]
 800f76c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f76e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f770:	e853 3f00 	ldrex	r3, [r3]
 800f774:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f778:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f77c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	681b      	ldr	r3, [r3, #0]
 800f782:	461a      	mov	r2, r3
 800f784:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f786:	643b      	str	r3, [r7, #64]	; 0x40
 800f788:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f78a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f78c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f78e:	e841 2300 	strex	r3, r2, [r1]
 800f792:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f796:	2b00      	cmp	r3, #0
 800f798:	d1e6      	bne.n	800f768 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	681b      	ldr	r3, [r3, #0]
 800f79e:	3308      	adds	r3, #8
 800f7a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7a2:	6a3b      	ldr	r3, [r7, #32]
 800f7a4:	e853 3f00 	ldrex	r3, [r3]
 800f7a8:	61fb      	str	r3, [r7, #28]
   return(result);
 800f7aa:	69fb      	ldr	r3, [r7, #28]
 800f7ac:	f023 0301 	bic.w	r3, r3, #1
 800f7b0:	64bb      	str	r3, [r7, #72]	; 0x48
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	681b      	ldr	r3, [r3, #0]
 800f7b6:	3308      	adds	r3, #8
 800f7b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f7ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f7bc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f7c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f7c2:	e841 2300 	strex	r3, r2, [r1]
 800f7c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f7c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d1e5      	bne.n	800f79a <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	2220      	movs	r2, #32
 800f7d2:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	2200      	movs	r2, #0
 800f7d8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f7de:	2b01      	cmp	r3, #1
 800f7e0:	d12e      	bne.n	800f840 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	2200      	movs	r2, #0
 800f7e6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7ee:	68fb      	ldr	r3, [r7, #12]
 800f7f0:	e853 3f00 	ldrex	r3, [r3]
 800f7f4:	60bb      	str	r3, [r7, #8]
   return(result);
 800f7f6:	68bb      	ldr	r3, [r7, #8]
 800f7f8:	f023 0310 	bic.w	r3, r3, #16
 800f7fc:	647b      	str	r3, [r7, #68]	; 0x44
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	681b      	ldr	r3, [r3, #0]
 800f802:	461a      	mov	r2, r3
 800f804:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f806:	61bb      	str	r3, [r7, #24]
 800f808:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f80a:	6979      	ldr	r1, [r7, #20]
 800f80c:	69ba      	ldr	r2, [r7, #24]
 800f80e:	e841 2300 	strex	r3, r2, [r1]
 800f812:	613b      	str	r3, [r7, #16]
   return(result);
 800f814:	693b      	ldr	r3, [r7, #16]
 800f816:	2b00      	cmp	r3, #0
 800f818:	d1e6      	bne.n	800f7e8 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	681b      	ldr	r3, [r3, #0]
 800f81e:	69db      	ldr	r3, [r3, #28]
 800f820:	f003 0310 	and.w	r3, r3, #16
 800f824:	2b10      	cmp	r3, #16
 800f826:	d103      	bne.n	800f830 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	681b      	ldr	r3, [r3, #0]
 800f82c:	2210      	movs	r2, #16
 800f82e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800f836:	4619      	mov	r1, r3
 800f838:	6878      	ldr	r0, [r7, #4]
 800f83a:	f7ff f813 	bl	800e864 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f83e:	e00d      	b.n	800f85c <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800f840:	6878      	ldr	r0, [r7, #4]
 800f842:	f7f5 fd0b 	bl	800525c <HAL_UART_RxCpltCallback>
}
 800f846:	e009      	b.n	800f85c <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	681b      	ldr	r3, [r3, #0]
 800f84c:	8b1b      	ldrh	r3, [r3, #24]
 800f84e:	b29a      	uxth	r2, r3
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	f042 0208 	orr.w	r2, r2, #8
 800f858:	b292      	uxth	r2, r2
 800f85a:	831a      	strh	r2, [r3, #24]
}
 800f85c:	bf00      	nop
 800f85e:	3758      	adds	r7, #88	; 0x58
 800f860:	46bd      	mov	sp, r7
 800f862:	bd80      	pop	{r7, pc}

0800f864 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800f864:	b480      	push	{r7}
 800f866:	b083      	sub	sp, #12
 800f868:	af00      	add	r7, sp, #0
 800f86a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800f86c:	bf00      	nop
 800f86e:	370c      	adds	r7, #12
 800f870:	46bd      	mov	sp, r7
 800f872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f876:	4770      	bx	lr

0800f878 <atof>:
 800f878:	2100      	movs	r1, #0
 800f87a:	f001 bd0b 	b.w	8011294 <strtod>

0800f87e <atoi>:
 800f87e:	220a      	movs	r2, #10
 800f880:	2100      	movs	r1, #0
 800f882:	f001 bd95 	b.w	80113b0 <strtol>

0800f886 <atol>:
 800f886:	220a      	movs	r2, #10
 800f888:	2100      	movs	r1, #0
 800f88a:	f001 bd91 	b.w	80113b0 <strtol>
	...

0800f890 <calloc>:
 800f890:	4b02      	ldr	r3, [pc, #8]	; (800f89c <calloc+0xc>)
 800f892:	460a      	mov	r2, r1
 800f894:	4601      	mov	r1, r0
 800f896:	6818      	ldr	r0, [r3, #0]
 800f898:	f000 b8fe 	b.w	800fa98 <_calloc_r>
 800f89c:	20000260 	.word	0x20000260

0800f8a0 <__errno>:
 800f8a0:	4b01      	ldr	r3, [pc, #4]	; (800f8a8 <__errno+0x8>)
 800f8a2:	6818      	ldr	r0, [r3, #0]
 800f8a4:	4770      	bx	lr
 800f8a6:	bf00      	nop
 800f8a8:	20000260 	.word	0x20000260

0800f8ac <gmtime_r>:
 800f8ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8b0:	e9d0 6700 	ldrd	r6, r7, [r0]
 800f8b4:	460c      	mov	r4, r1
 800f8b6:	4a4f      	ldr	r2, [pc, #316]	; (800f9f4 <gmtime_r+0x148>)
 800f8b8:	2300      	movs	r3, #0
 800f8ba:	4630      	mov	r0, r6
 800f8bc:	4639      	mov	r1, r7
 800f8be:	f7f1 f9e3 	bl	8000c88 <__aeabi_ldivmod>
 800f8c2:	4639      	mov	r1, r7
 800f8c4:	4605      	mov	r5, r0
 800f8c6:	4a4b      	ldr	r2, [pc, #300]	; (800f9f4 <gmtime_r+0x148>)
 800f8c8:	4630      	mov	r0, r6
 800f8ca:	2300      	movs	r3, #0
 800f8cc:	f7f1 f9dc 	bl	8000c88 <__aeabi_ldivmod>
 800f8d0:	2a00      	cmp	r2, #0
 800f8d2:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 800f8d6:	bfb7      	itett	lt
 800f8d8:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 800f8dc:	f600 236c 	addwge	r3, r0, #2668	; 0xa6c
 800f8e0:	f600 236b 	addwlt	r3, r0, #2667	; 0xa6b
 800f8e4:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 800f8e8:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 800f8ec:	fbb2 f1f0 	udiv	r1, r2, r0
 800f8f0:	fb00 2211 	mls	r2, r0, r1, r2
 800f8f4:	203c      	movs	r0, #60	; 0x3c
 800f8f6:	60a1      	str	r1, [r4, #8]
 800f8f8:	fbb2 f1f0 	udiv	r1, r2, r0
 800f8fc:	fb00 2211 	mls	r2, r0, r1, r2
 800f900:	6061      	str	r1, [r4, #4]
 800f902:	6022      	str	r2, [r4, #0]
 800f904:	2107      	movs	r1, #7
 800f906:	1cda      	adds	r2, r3, #3
 800f908:	fb92 f1f1 	sdiv	r1, r2, r1
 800f90c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800f910:	1a52      	subs	r2, r2, r1
 800f912:	bf48      	it	mi
 800f914:	3207      	addmi	r2, #7
 800f916:	4d38      	ldr	r5, [pc, #224]	; (800f9f8 <gmtime_r+0x14c>)
 800f918:	4838      	ldr	r0, [pc, #224]	; (800f9fc <gmtime_r+0x150>)
 800f91a:	61a2      	str	r2, [r4, #24]
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	bfb7      	itett	lt
 800f920:	f5a3 320e 	sublt.w	r2, r3, #145408	; 0x23800
 800f924:	fb93 f5f5 	sdivge	r5, r3, r5
 800f928:	f5a2 722c 	sublt.w	r2, r2, #688	; 0x2b0
 800f92c:	fb92 f5f5 	sdivlt	r5, r2, r5
 800f930:	fb00 3005 	mla	r0, r0, r5, r3
 800f934:	f648 62ac 	movw	r2, #36524	; 0x8eac
 800f938:	fbb0 f2f2 	udiv	r2, r0, r2
 800f93c:	4402      	add	r2, r0
 800f93e:	f240 53b4 	movw	r3, #1460	; 0x5b4
 800f942:	fbb0 f1f3 	udiv	r1, r0, r3
 800f946:	1a52      	subs	r2, r2, r1
 800f948:	f240 1c6d 	movw	ip, #365	; 0x16d
 800f94c:	492c      	ldr	r1, [pc, #176]	; (800fa00 <gmtime_r+0x154>)
 800f94e:	fbb0 f1f1 	udiv	r1, r0, r1
 800f952:	2764      	movs	r7, #100	; 0x64
 800f954:	1a52      	subs	r2, r2, r1
 800f956:	fbb2 f1fc 	udiv	r1, r2, ip
 800f95a:	fbb2 f3f3 	udiv	r3, r2, r3
 800f95e:	fbb1 f6f7 	udiv	r6, r1, r7
 800f962:	1af3      	subs	r3, r6, r3
 800f964:	4403      	add	r3, r0
 800f966:	fb0c 3311 	mls	r3, ip, r1, r3
 800f96a:	2299      	movs	r2, #153	; 0x99
 800f96c:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 800f970:	f10e 0e02 	add.w	lr, lr, #2
 800f974:	f103 0c01 	add.w	ip, r3, #1
 800f978:	fbbe f0f2 	udiv	r0, lr, r2
 800f97c:	4342      	muls	r2, r0
 800f97e:	3202      	adds	r2, #2
 800f980:	f04f 0805 	mov.w	r8, #5
 800f984:	fbb2 f2f8 	udiv	r2, r2, r8
 800f988:	ebac 0c02 	sub.w	ip, ip, r2
 800f98c:	f240 52f9 	movw	r2, #1529	; 0x5f9
 800f990:	4596      	cmp	lr, r2
 800f992:	bf94      	ite	ls
 800f994:	2202      	movls	r2, #2
 800f996:	f06f 0209 	mvnhi.w	r2, #9
 800f99a:	4410      	add	r0, r2
 800f99c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800f9a0:	fb02 1505 	mla	r5, r2, r5, r1
 800f9a4:	2801      	cmp	r0, #1
 800f9a6:	bf98      	it	ls
 800f9a8:	3501      	addls	r5, #1
 800f9aa:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 800f9ae:	d30d      	bcc.n	800f9cc <gmtime_r+0x120>
 800f9b0:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800f9b4:	61e3      	str	r3, [r4, #28]
 800f9b6:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 800f9ba:	2300      	movs	r3, #0
 800f9bc:	e9c4 0504 	strd	r0, r5, [r4, #16]
 800f9c0:	f8c4 c00c 	str.w	ip, [r4, #12]
 800f9c4:	6223      	str	r3, [r4, #32]
 800f9c6:	4620      	mov	r0, r4
 800f9c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f9cc:	078a      	lsls	r2, r1, #30
 800f9ce:	d102      	bne.n	800f9d6 <gmtime_r+0x12a>
 800f9d0:	fb07 1616 	mls	r6, r7, r6, r1
 800f9d4:	b95e      	cbnz	r6, 800f9ee <gmtime_r+0x142>
 800f9d6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800f9da:	fbb1 f6f2 	udiv	r6, r1, r2
 800f9de:	fb02 1216 	mls	r2, r2, r6, r1
 800f9e2:	fab2 f282 	clz	r2, r2
 800f9e6:	0952      	lsrs	r2, r2, #5
 800f9e8:	333b      	adds	r3, #59	; 0x3b
 800f9ea:	4413      	add	r3, r2
 800f9ec:	e7e2      	b.n	800f9b4 <gmtime_r+0x108>
 800f9ee:	2201      	movs	r2, #1
 800f9f0:	e7fa      	b.n	800f9e8 <gmtime_r+0x13c>
 800f9f2:	bf00      	nop
 800f9f4:	00015180 	.word	0x00015180
 800f9f8:	00023ab1 	.word	0x00023ab1
 800f9fc:	fffdc54f 	.word	0xfffdc54f
 800fa00:	00023ab0 	.word	0x00023ab0

0800fa04 <__libc_init_array>:
 800fa04:	b570      	push	{r4, r5, r6, lr}
 800fa06:	4d0d      	ldr	r5, [pc, #52]	; (800fa3c <__libc_init_array+0x38>)
 800fa08:	4c0d      	ldr	r4, [pc, #52]	; (800fa40 <__libc_init_array+0x3c>)
 800fa0a:	1b64      	subs	r4, r4, r5
 800fa0c:	10a4      	asrs	r4, r4, #2
 800fa0e:	2600      	movs	r6, #0
 800fa10:	42a6      	cmp	r6, r4
 800fa12:	d109      	bne.n	800fa28 <__libc_init_array+0x24>
 800fa14:	4d0b      	ldr	r5, [pc, #44]	; (800fa44 <__libc_init_array+0x40>)
 800fa16:	4c0c      	ldr	r4, [pc, #48]	; (800fa48 <__libc_init_array+0x44>)
 800fa18:	f004 fafc 	bl	8014014 <_init>
 800fa1c:	1b64      	subs	r4, r4, r5
 800fa1e:	10a4      	asrs	r4, r4, #2
 800fa20:	2600      	movs	r6, #0
 800fa22:	42a6      	cmp	r6, r4
 800fa24:	d105      	bne.n	800fa32 <__libc_init_array+0x2e>
 800fa26:	bd70      	pop	{r4, r5, r6, pc}
 800fa28:	f855 3b04 	ldr.w	r3, [r5], #4
 800fa2c:	4798      	blx	r3
 800fa2e:	3601      	adds	r6, #1
 800fa30:	e7ee      	b.n	800fa10 <__libc_init_array+0xc>
 800fa32:	f855 3b04 	ldr.w	r3, [r5], #4
 800fa36:	4798      	blx	r3
 800fa38:	3601      	adds	r6, #1
 800fa3a:	e7f2      	b.n	800fa22 <__libc_init_array+0x1e>
 800fa3c:	08015dac 	.word	0x08015dac
 800fa40:	08015dac 	.word	0x08015dac
 800fa44:	08015dac 	.word	0x08015dac
 800fa48:	08015db0 	.word	0x08015db0

0800fa4c <malloc>:
 800fa4c:	4b02      	ldr	r3, [pc, #8]	; (800fa58 <malloc+0xc>)
 800fa4e:	4601      	mov	r1, r0
 800fa50:	6818      	ldr	r0, [r3, #0]
 800fa52:	f000 b8a3 	b.w	800fb9c <_malloc_r>
 800fa56:	bf00      	nop
 800fa58:	20000260 	.word	0x20000260

0800fa5c <free>:
 800fa5c:	4b02      	ldr	r3, [pc, #8]	; (800fa68 <free+0xc>)
 800fa5e:	4601      	mov	r1, r0
 800fa60:	6818      	ldr	r0, [r3, #0]
 800fa62:	f000 b82f 	b.w	800fac4 <_free_r>
 800fa66:	bf00      	nop
 800fa68:	20000260 	.word	0x20000260

0800fa6c <memcpy>:
 800fa6c:	440a      	add	r2, r1
 800fa6e:	4291      	cmp	r1, r2
 800fa70:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800fa74:	d100      	bne.n	800fa78 <memcpy+0xc>
 800fa76:	4770      	bx	lr
 800fa78:	b510      	push	{r4, lr}
 800fa7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fa7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fa82:	4291      	cmp	r1, r2
 800fa84:	d1f9      	bne.n	800fa7a <memcpy+0xe>
 800fa86:	bd10      	pop	{r4, pc}

0800fa88 <memset>:
 800fa88:	4402      	add	r2, r0
 800fa8a:	4603      	mov	r3, r0
 800fa8c:	4293      	cmp	r3, r2
 800fa8e:	d100      	bne.n	800fa92 <memset+0xa>
 800fa90:	4770      	bx	lr
 800fa92:	f803 1b01 	strb.w	r1, [r3], #1
 800fa96:	e7f9      	b.n	800fa8c <memset+0x4>

0800fa98 <_calloc_r>:
 800fa98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fa9a:	fba1 2402 	umull	r2, r4, r1, r2
 800fa9e:	b94c      	cbnz	r4, 800fab4 <_calloc_r+0x1c>
 800faa0:	4611      	mov	r1, r2
 800faa2:	9201      	str	r2, [sp, #4]
 800faa4:	f000 f87a 	bl	800fb9c <_malloc_r>
 800faa8:	9a01      	ldr	r2, [sp, #4]
 800faaa:	4605      	mov	r5, r0
 800faac:	b930      	cbnz	r0, 800fabc <_calloc_r+0x24>
 800faae:	4628      	mov	r0, r5
 800fab0:	b003      	add	sp, #12
 800fab2:	bd30      	pop	{r4, r5, pc}
 800fab4:	220c      	movs	r2, #12
 800fab6:	6002      	str	r2, [r0, #0]
 800fab8:	2500      	movs	r5, #0
 800faba:	e7f8      	b.n	800faae <_calloc_r+0x16>
 800fabc:	4621      	mov	r1, r4
 800fabe:	f7ff ffe3 	bl	800fa88 <memset>
 800fac2:	e7f4      	b.n	800faae <_calloc_r+0x16>

0800fac4 <_free_r>:
 800fac4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fac6:	2900      	cmp	r1, #0
 800fac8:	d044      	beq.n	800fb54 <_free_r+0x90>
 800faca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800face:	9001      	str	r0, [sp, #4]
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	f1a1 0404 	sub.w	r4, r1, #4
 800fad6:	bfb8      	it	lt
 800fad8:	18e4      	addlt	r4, r4, r3
 800fada:	f002 feb1 	bl	8012840 <__malloc_lock>
 800fade:	4a1e      	ldr	r2, [pc, #120]	; (800fb58 <_free_r+0x94>)
 800fae0:	9801      	ldr	r0, [sp, #4]
 800fae2:	6813      	ldr	r3, [r2, #0]
 800fae4:	b933      	cbnz	r3, 800faf4 <_free_r+0x30>
 800fae6:	6063      	str	r3, [r4, #4]
 800fae8:	6014      	str	r4, [r2, #0]
 800faea:	b003      	add	sp, #12
 800faec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800faf0:	f002 beac 	b.w	801284c <__malloc_unlock>
 800faf4:	42a3      	cmp	r3, r4
 800faf6:	d908      	bls.n	800fb0a <_free_r+0x46>
 800faf8:	6825      	ldr	r5, [r4, #0]
 800fafa:	1961      	adds	r1, r4, r5
 800fafc:	428b      	cmp	r3, r1
 800fafe:	bf01      	itttt	eq
 800fb00:	6819      	ldreq	r1, [r3, #0]
 800fb02:	685b      	ldreq	r3, [r3, #4]
 800fb04:	1949      	addeq	r1, r1, r5
 800fb06:	6021      	streq	r1, [r4, #0]
 800fb08:	e7ed      	b.n	800fae6 <_free_r+0x22>
 800fb0a:	461a      	mov	r2, r3
 800fb0c:	685b      	ldr	r3, [r3, #4]
 800fb0e:	b10b      	cbz	r3, 800fb14 <_free_r+0x50>
 800fb10:	42a3      	cmp	r3, r4
 800fb12:	d9fa      	bls.n	800fb0a <_free_r+0x46>
 800fb14:	6811      	ldr	r1, [r2, #0]
 800fb16:	1855      	adds	r5, r2, r1
 800fb18:	42a5      	cmp	r5, r4
 800fb1a:	d10b      	bne.n	800fb34 <_free_r+0x70>
 800fb1c:	6824      	ldr	r4, [r4, #0]
 800fb1e:	4421      	add	r1, r4
 800fb20:	1854      	adds	r4, r2, r1
 800fb22:	42a3      	cmp	r3, r4
 800fb24:	6011      	str	r1, [r2, #0]
 800fb26:	d1e0      	bne.n	800faea <_free_r+0x26>
 800fb28:	681c      	ldr	r4, [r3, #0]
 800fb2a:	685b      	ldr	r3, [r3, #4]
 800fb2c:	6053      	str	r3, [r2, #4]
 800fb2e:	4421      	add	r1, r4
 800fb30:	6011      	str	r1, [r2, #0]
 800fb32:	e7da      	b.n	800faea <_free_r+0x26>
 800fb34:	d902      	bls.n	800fb3c <_free_r+0x78>
 800fb36:	230c      	movs	r3, #12
 800fb38:	6003      	str	r3, [r0, #0]
 800fb3a:	e7d6      	b.n	800faea <_free_r+0x26>
 800fb3c:	6825      	ldr	r5, [r4, #0]
 800fb3e:	1961      	adds	r1, r4, r5
 800fb40:	428b      	cmp	r3, r1
 800fb42:	bf04      	itt	eq
 800fb44:	6819      	ldreq	r1, [r3, #0]
 800fb46:	685b      	ldreq	r3, [r3, #4]
 800fb48:	6063      	str	r3, [r4, #4]
 800fb4a:	bf04      	itt	eq
 800fb4c:	1949      	addeq	r1, r1, r5
 800fb4e:	6021      	streq	r1, [r4, #0]
 800fb50:	6054      	str	r4, [r2, #4]
 800fb52:	e7ca      	b.n	800faea <_free_r+0x26>
 800fb54:	b003      	add	sp, #12
 800fb56:	bd30      	pop	{r4, r5, pc}
 800fb58:	200038e0 	.word	0x200038e0

0800fb5c <sbrk_aligned>:
 800fb5c:	b570      	push	{r4, r5, r6, lr}
 800fb5e:	4e0e      	ldr	r6, [pc, #56]	; (800fb98 <sbrk_aligned+0x3c>)
 800fb60:	460c      	mov	r4, r1
 800fb62:	6831      	ldr	r1, [r6, #0]
 800fb64:	4605      	mov	r5, r0
 800fb66:	b911      	cbnz	r1, 800fb6e <sbrk_aligned+0x12>
 800fb68:	f000 fcf6 	bl	8010558 <_sbrk_r>
 800fb6c:	6030      	str	r0, [r6, #0]
 800fb6e:	4621      	mov	r1, r4
 800fb70:	4628      	mov	r0, r5
 800fb72:	f000 fcf1 	bl	8010558 <_sbrk_r>
 800fb76:	1c43      	adds	r3, r0, #1
 800fb78:	d00a      	beq.n	800fb90 <sbrk_aligned+0x34>
 800fb7a:	1cc4      	adds	r4, r0, #3
 800fb7c:	f024 0403 	bic.w	r4, r4, #3
 800fb80:	42a0      	cmp	r0, r4
 800fb82:	d007      	beq.n	800fb94 <sbrk_aligned+0x38>
 800fb84:	1a21      	subs	r1, r4, r0
 800fb86:	4628      	mov	r0, r5
 800fb88:	f000 fce6 	bl	8010558 <_sbrk_r>
 800fb8c:	3001      	adds	r0, #1
 800fb8e:	d101      	bne.n	800fb94 <sbrk_aligned+0x38>
 800fb90:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800fb94:	4620      	mov	r0, r4
 800fb96:	bd70      	pop	{r4, r5, r6, pc}
 800fb98:	200038e4 	.word	0x200038e4

0800fb9c <_malloc_r>:
 800fb9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fba0:	1ccd      	adds	r5, r1, #3
 800fba2:	f025 0503 	bic.w	r5, r5, #3
 800fba6:	3508      	adds	r5, #8
 800fba8:	2d0c      	cmp	r5, #12
 800fbaa:	bf38      	it	cc
 800fbac:	250c      	movcc	r5, #12
 800fbae:	2d00      	cmp	r5, #0
 800fbb0:	4607      	mov	r7, r0
 800fbb2:	db01      	blt.n	800fbb8 <_malloc_r+0x1c>
 800fbb4:	42a9      	cmp	r1, r5
 800fbb6:	d905      	bls.n	800fbc4 <_malloc_r+0x28>
 800fbb8:	230c      	movs	r3, #12
 800fbba:	603b      	str	r3, [r7, #0]
 800fbbc:	2600      	movs	r6, #0
 800fbbe:	4630      	mov	r0, r6
 800fbc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fbc4:	4e2e      	ldr	r6, [pc, #184]	; (800fc80 <_malloc_r+0xe4>)
 800fbc6:	f002 fe3b 	bl	8012840 <__malloc_lock>
 800fbca:	6833      	ldr	r3, [r6, #0]
 800fbcc:	461c      	mov	r4, r3
 800fbce:	bb34      	cbnz	r4, 800fc1e <_malloc_r+0x82>
 800fbd0:	4629      	mov	r1, r5
 800fbd2:	4638      	mov	r0, r7
 800fbd4:	f7ff ffc2 	bl	800fb5c <sbrk_aligned>
 800fbd8:	1c43      	adds	r3, r0, #1
 800fbda:	4604      	mov	r4, r0
 800fbdc:	d14d      	bne.n	800fc7a <_malloc_r+0xde>
 800fbde:	6834      	ldr	r4, [r6, #0]
 800fbe0:	4626      	mov	r6, r4
 800fbe2:	2e00      	cmp	r6, #0
 800fbe4:	d140      	bne.n	800fc68 <_malloc_r+0xcc>
 800fbe6:	6823      	ldr	r3, [r4, #0]
 800fbe8:	4631      	mov	r1, r6
 800fbea:	4638      	mov	r0, r7
 800fbec:	eb04 0803 	add.w	r8, r4, r3
 800fbf0:	f000 fcb2 	bl	8010558 <_sbrk_r>
 800fbf4:	4580      	cmp	r8, r0
 800fbf6:	d13a      	bne.n	800fc6e <_malloc_r+0xd2>
 800fbf8:	6821      	ldr	r1, [r4, #0]
 800fbfa:	3503      	adds	r5, #3
 800fbfc:	1a6d      	subs	r5, r5, r1
 800fbfe:	f025 0503 	bic.w	r5, r5, #3
 800fc02:	3508      	adds	r5, #8
 800fc04:	2d0c      	cmp	r5, #12
 800fc06:	bf38      	it	cc
 800fc08:	250c      	movcc	r5, #12
 800fc0a:	4629      	mov	r1, r5
 800fc0c:	4638      	mov	r0, r7
 800fc0e:	f7ff ffa5 	bl	800fb5c <sbrk_aligned>
 800fc12:	3001      	adds	r0, #1
 800fc14:	d02b      	beq.n	800fc6e <_malloc_r+0xd2>
 800fc16:	6823      	ldr	r3, [r4, #0]
 800fc18:	442b      	add	r3, r5
 800fc1a:	6023      	str	r3, [r4, #0]
 800fc1c:	e00e      	b.n	800fc3c <_malloc_r+0xa0>
 800fc1e:	6822      	ldr	r2, [r4, #0]
 800fc20:	1b52      	subs	r2, r2, r5
 800fc22:	d41e      	bmi.n	800fc62 <_malloc_r+0xc6>
 800fc24:	2a0b      	cmp	r2, #11
 800fc26:	d916      	bls.n	800fc56 <_malloc_r+0xba>
 800fc28:	1961      	adds	r1, r4, r5
 800fc2a:	42a3      	cmp	r3, r4
 800fc2c:	6025      	str	r5, [r4, #0]
 800fc2e:	bf18      	it	ne
 800fc30:	6059      	strne	r1, [r3, #4]
 800fc32:	6863      	ldr	r3, [r4, #4]
 800fc34:	bf08      	it	eq
 800fc36:	6031      	streq	r1, [r6, #0]
 800fc38:	5162      	str	r2, [r4, r5]
 800fc3a:	604b      	str	r3, [r1, #4]
 800fc3c:	4638      	mov	r0, r7
 800fc3e:	f104 060b 	add.w	r6, r4, #11
 800fc42:	f002 fe03 	bl	801284c <__malloc_unlock>
 800fc46:	f026 0607 	bic.w	r6, r6, #7
 800fc4a:	1d23      	adds	r3, r4, #4
 800fc4c:	1af2      	subs	r2, r6, r3
 800fc4e:	d0b6      	beq.n	800fbbe <_malloc_r+0x22>
 800fc50:	1b9b      	subs	r3, r3, r6
 800fc52:	50a3      	str	r3, [r4, r2]
 800fc54:	e7b3      	b.n	800fbbe <_malloc_r+0x22>
 800fc56:	6862      	ldr	r2, [r4, #4]
 800fc58:	42a3      	cmp	r3, r4
 800fc5a:	bf0c      	ite	eq
 800fc5c:	6032      	streq	r2, [r6, #0]
 800fc5e:	605a      	strne	r2, [r3, #4]
 800fc60:	e7ec      	b.n	800fc3c <_malloc_r+0xa0>
 800fc62:	4623      	mov	r3, r4
 800fc64:	6864      	ldr	r4, [r4, #4]
 800fc66:	e7b2      	b.n	800fbce <_malloc_r+0x32>
 800fc68:	4634      	mov	r4, r6
 800fc6a:	6876      	ldr	r6, [r6, #4]
 800fc6c:	e7b9      	b.n	800fbe2 <_malloc_r+0x46>
 800fc6e:	230c      	movs	r3, #12
 800fc70:	603b      	str	r3, [r7, #0]
 800fc72:	4638      	mov	r0, r7
 800fc74:	f002 fdea 	bl	801284c <__malloc_unlock>
 800fc78:	e7a1      	b.n	800fbbe <_malloc_r+0x22>
 800fc7a:	6025      	str	r5, [r4, #0]
 800fc7c:	e7de      	b.n	800fc3c <_malloc_r+0xa0>
 800fc7e:	bf00      	nop
 800fc80:	200038e0 	.word	0x200038e0

0800fc84 <__cvt>:
 800fc84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fc88:	ec55 4b10 	vmov	r4, r5, d0
 800fc8c:	2d00      	cmp	r5, #0
 800fc8e:	460e      	mov	r6, r1
 800fc90:	4619      	mov	r1, r3
 800fc92:	462b      	mov	r3, r5
 800fc94:	bfbb      	ittet	lt
 800fc96:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800fc9a:	461d      	movlt	r5, r3
 800fc9c:	2300      	movge	r3, #0
 800fc9e:	232d      	movlt	r3, #45	; 0x2d
 800fca0:	700b      	strb	r3, [r1, #0]
 800fca2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fca4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800fca8:	4691      	mov	r9, r2
 800fcaa:	f023 0820 	bic.w	r8, r3, #32
 800fcae:	bfbc      	itt	lt
 800fcb0:	4622      	movlt	r2, r4
 800fcb2:	4614      	movlt	r4, r2
 800fcb4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800fcb8:	d005      	beq.n	800fcc6 <__cvt+0x42>
 800fcba:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800fcbe:	d100      	bne.n	800fcc2 <__cvt+0x3e>
 800fcc0:	3601      	adds	r6, #1
 800fcc2:	2102      	movs	r1, #2
 800fcc4:	e000      	b.n	800fcc8 <__cvt+0x44>
 800fcc6:	2103      	movs	r1, #3
 800fcc8:	ab03      	add	r3, sp, #12
 800fcca:	9301      	str	r3, [sp, #4]
 800fccc:	ab02      	add	r3, sp, #8
 800fcce:	9300      	str	r3, [sp, #0]
 800fcd0:	ec45 4b10 	vmov	d0, r4, r5
 800fcd4:	4653      	mov	r3, sl
 800fcd6:	4632      	mov	r2, r6
 800fcd8:	f001 fc3a 	bl	8011550 <_dtoa_r>
 800fcdc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800fce0:	4607      	mov	r7, r0
 800fce2:	d102      	bne.n	800fcea <__cvt+0x66>
 800fce4:	f019 0f01 	tst.w	r9, #1
 800fce8:	d022      	beq.n	800fd30 <__cvt+0xac>
 800fcea:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800fcee:	eb07 0906 	add.w	r9, r7, r6
 800fcf2:	d110      	bne.n	800fd16 <__cvt+0x92>
 800fcf4:	783b      	ldrb	r3, [r7, #0]
 800fcf6:	2b30      	cmp	r3, #48	; 0x30
 800fcf8:	d10a      	bne.n	800fd10 <__cvt+0x8c>
 800fcfa:	2200      	movs	r2, #0
 800fcfc:	2300      	movs	r3, #0
 800fcfe:	4620      	mov	r0, r4
 800fd00:	4629      	mov	r1, r5
 800fd02:	f7f0 fee1 	bl	8000ac8 <__aeabi_dcmpeq>
 800fd06:	b918      	cbnz	r0, 800fd10 <__cvt+0x8c>
 800fd08:	f1c6 0601 	rsb	r6, r6, #1
 800fd0c:	f8ca 6000 	str.w	r6, [sl]
 800fd10:	f8da 3000 	ldr.w	r3, [sl]
 800fd14:	4499      	add	r9, r3
 800fd16:	2200      	movs	r2, #0
 800fd18:	2300      	movs	r3, #0
 800fd1a:	4620      	mov	r0, r4
 800fd1c:	4629      	mov	r1, r5
 800fd1e:	f7f0 fed3 	bl	8000ac8 <__aeabi_dcmpeq>
 800fd22:	b108      	cbz	r0, 800fd28 <__cvt+0xa4>
 800fd24:	f8cd 900c 	str.w	r9, [sp, #12]
 800fd28:	2230      	movs	r2, #48	; 0x30
 800fd2a:	9b03      	ldr	r3, [sp, #12]
 800fd2c:	454b      	cmp	r3, r9
 800fd2e:	d307      	bcc.n	800fd40 <__cvt+0xbc>
 800fd30:	9b03      	ldr	r3, [sp, #12]
 800fd32:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fd34:	1bdb      	subs	r3, r3, r7
 800fd36:	4638      	mov	r0, r7
 800fd38:	6013      	str	r3, [r2, #0]
 800fd3a:	b004      	add	sp, #16
 800fd3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd40:	1c59      	adds	r1, r3, #1
 800fd42:	9103      	str	r1, [sp, #12]
 800fd44:	701a      	strb	r2, [r3, #0]
 800fd46:	e7f0      	b.n	800fd2a <__cvt+0xa6>

0800fd48 <__exponent>:
 800fd48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fd4a:	4603      	mov	r3, r0
 800fd4c:	2900      	cmp	r1, #0
 800fd4e:	bfb8      	it	lt
 800fd50:	4249      	neglt	r1, r1
 800fd52:	f803 2b02 	strb.w	r2, [r3], #2
 800fd56:	bfb4      	ite	lt
 800fd58:	222d      	movlt	r2, #45	; 0x2d
 800fd5a:	222b      	movge	r2, #43	; 0x2b
 800fd5c:	2909      	cmp	r1, #9
 800fd5e:	7042      	strb	r2, [r0, #1]
 800fd60:	dd2a      	ble.n	800fdb8 <__exponent+0x70>
 800fd62:	f10d 0407 	add.w	r4, sp, #7
 800fd66:	46a4      	mov	ip, r4
 800fd68:	270a      	movs	r7, #10
 800fd6a:	46a6      	mov	lr, r4
 800fd6c:	460a      	mov	r2, r1
 800fd6e:	fb91 f6f7 	sdiv	r6, r1, r7
 800fd72:	fb07 1516 	mls	r5, r7, r6, r1
 800fd76:	3530      	adds	r5, #48	; 0x30
 800fd78:	2a63      	cmp	r2, #99	; 0x63
 800fd7a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800fd7e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800fd82:	4631      	mov	r1, r6
 800fd84:	dcf1      	bgt.n	800fd6a <__exponent+0x22>
 800fd86:	3130      	adds	r1, #48	; 0x30
 800fd88:	f1ae 0502 	sub.w	r5, lr, #2
 800fd8c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800fd90:	1c44      	adds	r4, r0, #1
 800fd92:	4629      	mov	r1, r5
 800fd94:	4561      	cmp	r1, ip
 800fd96:	d30a      	bcc.n	800fdae <__exponent+0x66>
 800fd98:	f10d 0209 	add.w	r2, sp, #9
 800fd9c:	eba2 020e 	sub.w	r2, r2, lr
 800fda0:	4565      	cmp	r5, ip
 800fda2:	bf88      	it	hi
 800fda4:	2200      	movhi	r2, #0
 800fda6:	4413      	add	r3, r2
 800fda8:	1a18      	subs	r0, r3, r0
 800fdaa:	b003      	add	sp, #12
 800fdac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fdae:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fdb2:	f804 2f01 	strb.w	r2, [r4, #1]!
 800fdb6:	e7ed      	b.n	800fd94 <__exponent+0x4c>
 800fdb8:	2330      	movs	r3, #48	; 0x30
 800fdba:	3130      	adds	r1, #48	; 0x30
 800fdbc:	7083      	strb	r3, [r0, #2]
 800fdbe:	70c1      	strb	r1, [r0, #3]
 800fdc0:	1d03      	adds	r3, r0, #4
 800fdc2:	e7f1      	b.n	800fda8 <__exponent+0x60>

0800fdc4 <_printf_float>:
 800fdc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdc8:	ed2d 8b02 	vpush	{d8}
 800fdcc:	b08d      	sub	sp, #52	; 0x34
 800fdce:	460c      	mov	r4, r1
 800fdd0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800fdd4:	4616      	mov	r6, r2
 800fdd6:	461f      	mov	r7, r3
 800fdd8:	4605      	mov	r5, r0
 800fdda:	f002 fd17 	bl	801280c <_localeconv_r>
 800fdde:	f8d0 a000 	ldr.w	sl, [r0]
 800fde2:	4650      	mov	r0, sl
 800fde4:	f7f0 f9f4 	bl	80001d0 <strlen>
 800fde8:	2300      	movs	r3, #0
 800fdea:	930a      	str	r3, [sp, #40]	; 0x28
 800fdec:	6823      	ldr	r3, [r4, #0]
 800fdee:	9305      	str	r3, [sp, #20]
 800fdf0:	f8d8 3000 	ldr.w	r3, [r8]
 800fdf4:	f894 b018 	ldrb.w	fp, [r4, #24]
 800fdf8:	3307      	adds	r3, #7
 800fdfa:	f023 0307 	bic.w	r3, r3, #7
 800fdfe:	f103 0208 	add.w	r2, r3, #8
 800fe02:	f8c8 2000 	str.w	r2, [r8]
 800fe06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe0a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800fe0e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800fe12:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800fe16:	9307      	str	r3, [sp, #28]
 800fe18:	f8cd 8018 	str.w	r8, [sp, #24]
 800fe1c:	ee08 0a10 	vmov	s16, r0
 800fe20:	4b9f      	ldr	r3, [pc, #636]	; (80100a0 <_printf_float+0x2dc>)
 800fe22:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fe26:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fe2a:	f7f0 fe7f 	bl	8000b2c <__aeabi_dcmpun>
 800fe2e:	bb88      	cbnz	r0, 800fe94 <_printf_float+0xd0>
 800fe30:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fe34:	4b9a      	ldr	r3, [pc, #616]	; (80100a0 <_printf_float+0x2dc>)
 800fe36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fe3a:	f7f0 fe59 	bl	8000af0 <__aeabi_dcmple>
 800fe3e:	bb48      	cbnz	r0, 800fe94 <_printf_float+0xd0>
 800fe40:	2200      	movs	r2, #0
 800fe42:	2300      	movs	r3, #0
 800fe44:	4640      	mov	r0, r8
 800fe46:	4649      	mov	r1, r9
 800fe48:	f7f0 fe48 	bl	8000adc <__aeabi_dcmplt>
 800fe4c:	b110      	cbz	r0, 800fe54 <_printf_float+0x90>
 800fe4e:	232d      	movs	r3, #45	; 0x2d
 800fe50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fe54:	4b93      	ldr	r3, [pc, #588]	; (80100a4 <_printf_float+0x2e0>)
 800fe56:	4894      	ldr	r0, [pc, #592]	; (80100a8 <_printf_float+0x2e4>)
 800fe58:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800fe5c:	bf94      	ite	ls
 800fe5e:	4698      	movls	r8, r3
 800fe60:	4680      	movhi	r8, r0
 800fe62:	2303      	movs	r3, #3
 800fe64:	6123      	str	r3, [r4, #16]
 800fe66:	9b05      	ldr	r3, [sp, #20]
 800fe68:	f023 0204 	bic.w	r2, r3, #4
 800fe6c:	6022      	str	r2, [r4, #0]
 800fe6e:	f04f 0900 	mov.w	r9, #0
 800fe72:	9700      	str	r7, [sp, #0]
 800fe74:	4633      	mov	r3, r6
 800fe76:	aa0b      	add	r2, sp, #44	; 0x2c
 800fe78:	4621      	mov	r1, r4
 800fe7a:	4628      	mov	r0, r5
 800fe7c:	f000 f9d8 	bl	8010230 <_printf_common>
 800fe80:	3001      	adds	r0, #1
 800fe82:	f040 8090 	bne.w	800ffa6 <_printf_float+0x1e2>
 800fe86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fe8a:	b00d      	add	sp, #52	; 0x34
 800fe8c:	ecbd 8b02 	vpop	{d8}
 800fe90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe94:	4642      	mov	r2, r8
 800fe96:	464b      	mov	r3, r9
 800fe98:	4640      	mov	r0, r8
 800fe9a:	4649      	mov	r1, r9
 800fe9c:	f7f0 fe46 	bl	8000b2c <__aeabi_dcmpun>
 800fea0:	b140      	cbz	r0, 800feb4 <_printf_float+0xf0>
 800fea2:	464b      	mov	r3, r9
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	bfbc      	itt	lt
 800fea8:	232d      	movlt	r3, #45	; 0x2d
 800feaa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800feae:	487f      	ldr	r0, [pc, #508]	; (80100ac <_printf_float+0x2e8>)
 800feb0:	4b7f      	ldr	r3, [pc, #508]	; (80100b0 <_printf_float+0x2ec>)
 800feb2:	e7d1      	b.n	800fe58 <_printf_float+0x94>
 800feb4:	6863      	ldr	r3, [r4, #4]
 800feb6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800feba:	9206      	str	r2, [sp, #24]
 800febc:	1c5a      	adds	r2, r3, #1
 800febe:	d13f      	bne.n	800ff40 <_printf_float+0x17c>
 800fec0:	2306      	movs	r3, #6
 800fec2:	6063      	str	r3, [r4, #4]
 800fec4:	9b05      	ldr	r3, [sp, #20]
 800fec6:	6861      	ldr	r1, [r4, #4]
 800fec8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800fecc:	2300      	movs	r3, #0
 800fece:	9303      	str	r3, [sp, #12]
 800fed0:	ab0a      	add	r3, sp, #40	; 0x28
 800fed2:	e9cd b301 	strd	fp, r3, [sp, #4]
 800fed6:	ab09      	add	r3, sp, #36	; 0x24
 800fed8:	ec49 8b10 	vmov	d0, r8, r9
 800fedc:	9300      	str	r3, [sp, #0]
 800fede:	6022      	str	r2, [r4, #0]
 800fee0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800fee4:	4628      	mov	r0, r5
 800fee6:	f7ff fecd 	bl	800fc84 <__cvt>
 800feea:	9b06      	ldr	r3, [sp, #24]
 800feec:	9909      	ldr	r1, [sp, #36]	; 0x24
 800feee:	2b47      	cmp	r3, #71	; 0x47
 800fef0:	4680      	mov	r8, r0
 800fef2:	d108      	bne.n	800ff06 <_printf_float+0x142>
 800fef4:	1cc8      	adds	r0, r1, #3
 800fef6:	db02      	blt.n	800fefe <_printf_float+0x13a>
 800fef8:	6863      	ldr	r3, [r4, #4]
 800fefa:	4299      	cmp	r1, r3
 800fefc:	dd41      	ble.n	800ff82 <_printf_float+0x1be>
 800fefe:	f1ab 0b02 	sub.w	fp, fp, #2
 800ff02:	fa5f fb8b 	uxtb.w	fp, fp
 800ff06:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ff0a:	d820      	bhi.n	800ff4e <_printf_float+0x18a>
 800ff0c:	3901      	subs	r1, #1
 800ff0e:	465a      	mov	r2, fp
 800ff10:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ff14:	9109      	str	r1, [sp, #36]	; 0x24
 800ff16:	f7ff ff17 	bl	800fd48 <__exponent>
 800ff1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ff1c:	1813      	adds	r3, r2, r0
 800ff1e:	2a01      	cmp	r2, #1
 800ff20:	4681      	mov	r9, r0
 800ff22:	6123      	str	r3, [r4, #16]
 800ff24:	dc02      	bgt.n	800ff2c <_printf_float+0x168>
 800ff26:	6822      	ldr	r2, [r4, #0]
 800ff28:	07d2      	lsls	r2, r2, #31
 800ff2a:	d501      	bpl.n	800ff30 <_printf_float+0x16c>
 800ff2c:	3301      	adds	r3, #1
 800ff2e:	6123      	str	r3, [r4, #16]
 800ff30:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	d09c      	beq.n	800fe72 <_printf_float+0xae>
 800ff38:	232d      	movs	r3, #45	; 0x2d
 800ff3a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ff3e:	e798      	b.n	800fe72 <_printf_float+0xae>
 800ff40:	9a06      	ldr	r2, [sp, #24]
 800ff42:	2a47      	cmp	r2, #71	; 0x47
 800ff44:	d1be      	bne.n	800fec4 <_printf_float+0x100>
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	d1bc      	bne.n	800fec4 <_printf_float+0x100>
 800ff4a:	2301      	movs	r3, #1
 800ff4c:	e7b9      	b.n	800fec2 <_printf_float+0xfe>
 800ff4e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ff52:	d118      	bne.n	800ff86 <_printf_float+0x1c2>
 800ff54:	2900      	cmp	r1, #0
 800ff56:	6863      	ldr	r3, [r4, #4]
 800ff58:	dd0b      	ble.n	800ff72 <_printf_float+0x1ae>
 800ff5a:	6121      	str	r1, [r4, #16]
 800ff5c:	b913      	cbnz	r3, 800ff64 <_printf_float+0x1a0>
 800ff5e:	6822      	ldr	r2, [r4, #0]
 800ff60:	07d0      	lsls	r0, r2, #31
 800ff62:	d502      	bpl.n	800ff6a <_printf_float+0x1a6>
 800ff64:	3301      	adds	r3, #1
 800ff66:	440b      	add	r3, r1
 800ff68:	6123      	str	r3, [r4, #16]
 800ff6a:	65a1      	str	r1, [r4, #88]	; 0x58
 800ff6c:	f04f 0900 	mov.w	r9, #0
 800ff70:	e7de      	b.n	800ff30 <_printf_float+0x16c>
 800ff72:	b913      	cbnz	r3, 800ff7a <_printf_float+0x1b6>
 800ff74:	6822      	ldr	r2, [r4, #0]
 800ff76:	07d2      	lsls	r2, r2, #31
 800ff78:	d501      	bpl.n	800ff7e <_printf_float+0x1ba>
 800ff7a:	3302      	adds	r3, #2
 800ff7c:	e7f4      	b.n	800ff68 <_printf_float+0x1a4>
 800ff7e:	2301      	movs	r3, #1
 800ff80:	e7f2      	b.n	800ff68 <_printf_float+0x1a4>
 800ff82:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ff86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ff88:	4299      	cmp	r1, r3
 800ff8a:	db05      	blt.n	800ff98 <_printf_float+0x1d4>
 800ff8c:	6823      	ldr	r3, [r4, #0]
 800ff8e:	6121      	str	r1, [r4, #16]
 800ff90:	07d8      	lsls	r0, r3, #31
 800ff92:	d5ea      	bpl.n	800ff6a <_printf_float+0x1a6>
 800ff94:	1c4b      	adds	r3, r1, #1
 800ff96:	e7e7      	b.n	800ff68 <_printf_float+0x1a4>
 800ff98:	2900      	cmp	r1, #0
 800ff9a:	bfd4      	ite	le
 800ff9c:	f1c1 0202 	rsble	r2, r1, #2
 800ffa0:	2201      	movgt	r2, #1
 800ffa2:	4413      	add	r3, r2
 800ffa4:	e7e0      	b.n	800ff68 <_printf_float+0x1a4>
 800ffa6:	6823      	ldr	r3, [r4, #0]
 800ffa8:	055a      	lsls	r2, r3, #21
 800ffaa:	d407      	bmi.n	800ffbc <_printf_float+0x1f8>
 800ffac:	6923      	ldr	r3, [r4, #16]
 800ffae:	4642      	mov	r2, r8
 800ffb0:	4631      	mov	r1, r6
 800ffb2:	4628      	mov	r0, r5
 800ffb4:	47b8      	blx	r7
 800ffb6:	3001      	adds	r0, #1
 800ffb8:	d12c      	bne.n	8010014 <_printf_float+0x250>
 800ffba:	e764      	b.n	800fe86 <_printf_float+0xc2>
 800ffbc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ffc0:	f240 80e0 	bls.w	8010184 <_printf_float+0x3c0>
 800ffc4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ffc8:	2200      	movs	r2, #0
 800ffca:	2300      	movs	r3, #0
 800ffcc:	f7f0 fd7c 	bl	8000ac8 <__aeabi_dcmpeq>
 800ffd0:	2800      	cmp	r0, #0
 800ffd2:	d034      	beq.n	801003e <_printf_float+0x27a>
 800ffd4:	4a37      	ldr	r2, [pc, #220]	; (80100b4 <_printf_float+0x2f0>)
 800ffd6:	2301      	movs	r3, #1
 800ffd8:	4631      	mov	r1, r6
 800ffda:	4628      	mov	r0, r5
 800ffdc:	47b8      	blx	r7
 800ffde:	3001      	adds	r0, #1
 800ffe0:	f43f af51 	beq.w	800fe86 <_printf_float+0xc2>
 800ffe4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ffe8:	429a      	cmp	r2, r3
 800ffea:	db02      	blt.n	800fff2 <_printf_float+0x22e>
 800ffec:	6823      	ldr	r3, [r4, #0]
 800ffee:	07d8      	lsls	r0, r3, #31
 800fff0:	d510      	bpl.n	8010014 <_printf_float+0x250>
 800fff2:	ee18 3a10 	vmov	r3, s16
 800fff6:	4652      	mov	r2, sl
 800fff8:	4631      	mov	r1, r6
 800fffa:	4628      	mov	r0, r5
 800fffc:	47b8      	blx	r7
 800fffe:	3001      	adds	r0, #1
 8010000:	f43f af41 	beq.w	800fe86 <_printf_float+0xc2>
 8010004:	f04f 0800 	mov.w	r8, #0
 8010008:	f104 091a 	add.w	r9, r4, #26
 801000c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801000e:	3b01      	subs	r3, #1
 8010010:	4543      	cmp	r3, r8
 8010012:	dc09      	bgt.n	8010028 <_printf_float+0x264>
 8010014:	6823      	ldr	r3, [r4, #0]
 8010016:	079b      	lsls	r3, r3, #30
 8010018:	f100 8105 	bmi.w	8010226 <_printf_float+0x462>
 801001c:	68e0      	ldr	r0, [r4, #12]
 801001e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010020:	4298      	cmp	r0, r3
 8010022:	bfb8      	it	lt
 8010024:	4618      	movlt	r0, r3
 8010026:	e730      	b.n	800fe8a <_printf_float+0xc6>
 8010028:	2301      	movs	r3, #1
 801002a:	464a      	mov	r2, r9
 801002c:	4631      	mov	r1, r6
 801002e:	4628      	mov	r0, r5
 8010030:	47b8      	blx	r7
 8010032:	3001      	adds	r0, #1
 8010034:	f43f af27 	beq.w	800fe86 <_printf_float+0xc2>
 8010038:	f108 0801 	add.w	r8, r8, #1
 801003c:	e7e6      	b.n	801000c <_printf_float+0x248>
 801003e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010040:	2b00      	cmp	r3, #0
 8010042:	dc39      	bgt.n	80100b8 <_printf_float+0x2f4>
 8010044:	4a1b      	ldr	r2, [pc, #108]	; (80100b4 <_printf_float+0x2f0>)
 8010046:	2301      	movs	r3, #1
 8010048:	4631      	mov	r1, r6
 801004a:	4628      	mov	r0, r5
 801004c:	47b8      	blx	r7
 801004e:	3001      	adds	r0, #1
 8010050:	f43f af19 	beq.w	800fe86 <_printf_float+0xc2>
 8010054:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010058:	4313      	orrs	r3, r2
 801005a:	d102      	bne.n	8010062 <_printf_float+0x29e>
 801005c:	6823      	ldr	r3, [r4, #0]
 801005e:	07d9      	lsls	r1, r3, #31
 8010060:	d5d8      	bpl.n	8010014 <_printf_float+0x250>
 8010062:	ee18 3a10 	vmov	r3, s16
 8010066:	4652      	mov	r2, sl
 8010068:	4631      	mov	r1, r6
 801006a:	4628      	mov	r0, r5
 801006c:	47b8      	blx	r7
 801006e:	3001      	adds	r0, #1
 8010070:	f43f af09 	beq.w	800fe86 <_printf_float+0xc2>
 8010074:	f04f 0900 	mov.w	r9, #0
 8010078:	f104 0a1a 	add.w	sl, r4, #26
 801007c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801007e:	425b      	negs	r3, r3
 8010080:	454b      	cmp	r3, r9
 8010082:	dc01      	bgt.n	8010088 <_printf_float+0x2c4>
 8010084:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010086:	e792      	b.n	800ffae <_printf_float+0x1ea>
 8010088:	2301      	movs	r3, #1
 801008a:	4652      	mov	r2, sl
 801008c:	4631      	mov	r1, r6
 801008e:	4628      	mov	r0, r5
 8010090:	47b8      	blx	r7
 8010092:	3001      	adds	r0, #1
 8010094:	f43f aef7 	beq.w	800fe86 <_printf_float+0xc2>
 8010098:	f109 0901 	add.w	r9, r9, #1
 801009c:	e7ee      	b.n	801007c <_printf_float+0x2b8>
 801009e:	bf00      	nop
 80100a0:	7fefffff 	.word	0x7fefffff
 80100a4:	08015a0c 	.word	0x08015a0c
 80100a8:	08015a10 	.word	0x08015a10
 80100ac:	08015a18 	.word	0x08015a18
 80100b0:	08015a14 	.word	0x08015a14
 80100b4:	08015a1c 	.word	0x08015a1c
 80100b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80100ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80100bc:	429a      	cmp	r2, r3
 80100be:	bfa8      	it	ge
 80100c0:	461a      	movge	r2, r3
 80100c2:	2a00      	cmp	r2, #0
 80100c4:	4691      	mov	r9, r2
 80100c6:	dc37      	bgt.n	8010138 <_printf_float+0x374>
 80100c8:	f04f 0b00 	mov.w	fp, #0
 80100cc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80100d0:	f104 021a 	add.w	r2, r4, #26
 80100d4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80100d6:	9305      	str	r3, [sp, #20]
 80100d8:	eba3 0309 	sub.w	r3, r3, r9
 80100dc:	455b      	cmp	r3, fp
 80100de:	dc33      	bgt.n	8010148 <_printf_float+0x384>
 80100e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80100e4:	429a      	cmp	r2, r3
 80100e6:	db3b      	blt.n	8010160 <_printf_float+0x39c>
 80100e8:	6823      	ldr	r3, [r4, #0]
 80100ea:	07da      	lsls	r2, r3, #31
 80100ec:	d438      	bmi.n	8010160 <_printf_float+0x39c>
 80100ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80100f0:	9a05      	ldr	r2, [sp, #20]
 80100f2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80100f4:	1a9a      	subs	r2, r3, r2
 80100f6:	eba3 0901 	sub.w	r9, r3, r1
 80100fa:	4591      	cmp	r9, r2
 80100fc:	bfa8      	it	ge
 80100fe:	4691      	movge	r9, r2
 8010100:	f1b9 0f00 	cmp.w	r9, #0
 8010104:	dc35      	bgt.n	8010172 <_printf_float+0x3ae>
 8010106:	f04f 0800 	mov.w	r8, #0
 801010a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801010e:	f104 0a1a 	add.w	sl, r4, #26
 8010112:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010116:	1a9b      	subs	r3, r3, r2
 8010118:	eba3 0309 	sub.w	r3, r3, r9
 801011c:	4543      	cmp	r3, r8
 801011e:	f77f af79 	ble.w	8010014 <_printf_float+0x250>
 8010122:	2301      	movs	r3, #1
 8010124:	4652      	mov	r2, sl
 8010126:	4631      	mov	r1, r6
 8010128:	4628      	mov	r0, r5
 801012a:	47b8      	blx	r7
 801012c:	3001      	adds	r0, #1
 801012e:	f43f aeaa 	beq.w	800fe86 <_printf_float+0xc2>
 8010132:	f108 0801 	add.w	r8, r8, #1
 8010136:	e7ec      	b.n	8010112 <_printf_float+0x34e>
 8010138:	4613      	mov	r3, r2
 801013a:	4631      	mov	r1, r6
 801013c:	4642      	mov	r2, r8
 801013e:	4628      	mov	r0, r5
 8010140:	47b8      	blx	r7
 8010142:	3001      	adds	r0, #1
 8010144:	d1c0      	bne.n	80100c8 <_printf_float+0x304>
 8010146:	e69e      	b.n	800fe86 <_printf_float+0xc2>
 8010148:	2301      	movs	r3, #1
 801014a:	4631      	mov	r1, r6
 801014c:	4628      	mov	r0, r5
 801014e:	9205      	str	r2, [sp, #20]
 8010150:	47b8      	blx	r7
 8010152:	3001      	adds	r0, #1
 8010154:	f43f ae97 	beq.w	800fe86 <_printf_float+0xc2>
 8010158:	9a05      	ldr	r2, [sp, #20]
 801015a:	f10b 0b01 	add.w	fp, fp, #1
 801015e:	e7b9      	b.n	80100d4 <_printf_float+0x310>
 8010160:	ee18 3a10 	vmov	r3, s16
 8010164:	4652      	mov	r2, sl
 8010166:	4631      	mov	r1, r6
 8010168:	4628      	mov	r0, r5
 801016a:	47b8      	blx	r7
 801016c:	3001      	adds	r0, #1
 801016e:	d1be      	bne.n	80100ee <_printf_float+0x32a>
 8010170:	e689      	b.n	800fe86 <_printf_float+0xc2>
 8010172:	9a05      	ldr	r2, [sp, #20]
 8010174:	464b      	mov	r3, r9
 8010176:	4442      	add	r2, r8
 8010178:	4631      	mov	r1, r6
 801017a:	4628      	mov	r0, r5
 801017c:	47b8      	blx	r7
 801017e:	3001      	adds	r0, #1
 8010180:	d1c1      	bne.n	8010106 <_printf_float+0x342>
 8010182:	e680      	b.n	800fe86 <_printf_float+0xc2>
 8010184:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010186:	2a01      	cmp	r2, #1
 8010188:	dc01      	bgt.n	801018e <_printf_float+0x3ca>
 801018a:	07db      	lsls	r3, r3, #31
 801018c:	d538      	bpl.n	8010200 <_printf_float+0x43c>
 801018e:	2301      	movs	r3, #1
 8010190:	4642      	mov	r2, r8
 8010192:	4631      	mov	r1, r6
 8010194:	4628      	mov	r0, r5
 8010196:	47b8      	blx	r7
 8010198:	3001      	adds	r0, #1
 801019a:	f43f ae74 	beq.w	800fe86 <_printf_float+0xc2>
 801019e:	ee18 3a10 	vmov	r3, s16
 80101a2:	4652      	mov	r2, sl
 80101a4:	4631      	mov	r1, r6
 80101a6:	4628      	mov	r0, r5
 80101a8:	47b8      	blx	r7
 80101aa:	3001      	adds	r0, #1
 80101ac:	f43f ae6b 	beq.w	800fe86 <_printf_float+0xc2>
 80101b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80101b4:	2200      	movs	r2, #0
 80101b6:	2300      	movs	r3, #0
 80101b8:	f7f0 fc86 	bl	8000ac8 <__aeabi_dcmpeq>
 80101bc:	b9d8      	cbnz	r0, 80101f6 <_printf_float+0x432>
 80101be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80101c0:	f108 0201 	add.w	r2, r8, #1
 80101c4:	3b01      	subs	r3, #1
 80101c6:	4631      	mov	r1, r6
 80101c8:	4628      	mov	r0, r5
 80101ca:	47b8      	blx	r7
 80101cc:	3001      	adds	r0, #1
 80101ce:	d10e      	bne.n	80101ee <_printf_float+0x42a>
 80101d0:	e659      	b.n	800fe86 <_printf_float+0xc2>
 80101d2:	2301      	movs	r3, #1
 80101d4:	4652      	mov	r2, sl
 80101d6:	4631      	mov	r1, r6
 80101d8:	4628      	mov	r0, r5
 80101da:	47b8      	blx	r7
 80101dc:	3001      	adds	r0, #1
 80101de:	f43f ae52 	beq.w	800fe86 <_printf_float+0xc2>
 80101e2:	f108 0801 	add.w	r8, r8, #1
 80101e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80101e8:	3b01      	subs	r3, #1
 80101ea:	4543      	cmp	r3, r8
 80101ec:	dcf1      	bgt.n	80101d2 <_printf_float+0x40e>
 80101ee:	464b      	mov	r3, r9
 80101f0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80101f4:	e6dc      	b.n	800ffb0 <_printf_float+0x1ec>
 80101f6:	f04f 0800 	mov.w	r8, #0
 80101fa:	f104 0a1a 	add.w	sl, r4, #26
 80101fe:	e7f2      	b.n	80101e6 <_printf_float+0x422>
 8010200:	2301      	movs	r3, #1
 8010202:	4642      	mov	r2, r8
 8010204:	e7df      	b.n	80101c6 <_printf_float+0x402>
 8010206:	2301      	movs	r3, #1
 8010208:	464a      	mov	r2, r9
 801020a:	4631      	mov	r1, r6
 801020c:	4628      	mov	r0, r5
 801020e:	47b8      	blx	r7
 8010210:	3001      	adds	r0, #1
 8010212:	f43f ae38 	beq.w	800fe86 <_printf_float+0xc2>
 8010216:	f108 0801 	add.w	r8, r8, #1
 801021a:	68e3      	ldr	r3, [r4, #12]
 801021c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801021e:	1a5b      	subs	r3, r3, r1
 8010220:	4543      	cmp	r3, r8
 8010222:	dcf0      	bgt.n	8010206 <_printf_float+0x442>
 8010224:	e6fa      	b.n	801001c <_printf_float+0x258>
 8010226:	f04f 0800 	mov.w	r8, #0
 801022a:	f104 0919 	add.w	r9, r4, #25
 801022e:	e7f4      	b.n	801021a <_printf_float+0x456>

08010230 <_printf_common>:
 8010230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010234:	4616      	mov	r6, r2
 8010236:	4699      	mov	r9, r3
 8010238:	688a      	ldr	r2, [r1, #8]
 801023a:	690b      	ldr	r3, [r1, #16]
 801023c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010240:	4293      	cmp	r3, r2
 8010242:	bfb8      	it	lt
 8010244:	4613      	movlt	r3, r2
 8010246:	6033      	str	r3, [r6, #0]
 8010248:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801024c:	4607      	mov	r7, r0
 801024e:	460c      	mov	r4, r1
 8010250:	b10a      	cbz	r2, 8010256 <_printf_common+0x26>
 8010252:	3301      	adds	r3, #1
 8010254:	6033      	str	r3, [r6, #0]
 8010256:	6823      	ldr	r3, [r4, #0]
 8010258:	0699      	lsls	r1, r3, #26
 801025a:	bf42      	ittt	mi
 801025c:	6833      	ldrmi	r3, [r6, #0]
 801025e:	3302      	addmi	r3, #2
 8010260:	6033      	strmi	r3, [r6, #0]
 8010262:	6825      	ldr	r5, [r4, #0]
 8010264:	f015 0506 	ands.w	r5, r5, #6
 8010268:	d106      	bne.n	8010278 <_printf_common+0x48>
 801026a:	f104 0a19 	add.w	sl, r4, #25
 801026e:	68e3      	ldr	r3, [r4, #12]
 8010270:	6832      	ldr	r2, [r6, #0]
 8010272:	1a9b      	subs	r3, r3, r2
 8010274:	42ab      	cmp	r3, r5
 8010276:	dc26      	bgt.n	80102c6 <_printf_common+0x96>
 8010278:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801027c:	1e13      	subs	r3, r2, #0
 801027e:	6822      	ldr	r2, [r4, #0]
 8010280:	bf18      	it	ne
 8010282:	2301      	movne	r3, #1
 8010284:	0692      	lsls	r2, r2, #26
 8010286:	d42b      	bmi.n	80102e0 <_printf_common+0xb0>
 8010288:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801028c:	4649      	mov	r1, r9
 801028e:	4638      	mov	r0, r7
 8010290:	47c0      	blx	r8
 8010292:	3001      	adds	r0, #1
 8010294:	d01e      	beq.n	80102d4 <_printf_common+0xa4>
 8010296:	6823      	ldr	r3, [r4, #0]
 8010298:	68e5      	ldr	r5, [r4, #12]
 801029a:	6832      	ldr	r2, [r6, #0]
 801029c:	f003 0306 	and.w	r3, r3, #6
 80102a0:	2b04      	cmp	r3, #4
 80102a2:	bf08      	it	eq
 80102a4:	1aad      	subeq	r5, r5, r2
 80102a6:	68a3      	ldr	r3, [r4, #8]
 80102a8:	6922      	ldr	r2, [r4, #16]
 80102aa:	bf0c      	ite	eq
 80102ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80102b0:	2500      	movne	r5, #0
 80102b2:	4293      	cmp	r3, r2
 80102b4:	bfc4      	itt	gt
 80102b6:	1a9b      	subgt	r3, r3, r2
 80102b8:	18ed      	addgt	r5, r5, r3
 80102ba:	2600      	movs	r6, #0
 80102bc:	341a      	adds	r4, #26
 80102be:	42b5      	cmp	r5, r6
 80102c0:	d11a      	bne.n	80102f8 <_printf_common+0xc8>
 80102c2:	2000      	movs	r0, #0
 80102c4:	e008      	b.n	80102d8 <_printf_common+0xa8>
 80102c6:	2301      	movs	r3, #1
 80102c8:	4652      	mov	r2, sl
 80102ca:	4649      	mov	r1, r9
 80102cc:	4638      	mov	r0, r7
 80102ce:	47c0      	blx	r8
 80102d0:	3001      	adds	r0, #1
 80102d2:	d103      	bne.n	80102dc <_printf_common+0xac>
 80102d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80102d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80102dc:	3501      	adds	r5, #1
 80102de:	e7c6      	b.n	801026e <_printf_common+0x3e>
 80102e0:	18e1      	adds	r1, r4, r3
 80102e2:	1c5a      	adds	r2, r3, #1
 80102e4:	2030      	movs	r0, #48	; 0x30
 80102e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80102ea:	4422      	add	r2, r4
 80102ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80102f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80102f4:	3302      	adds	r3, #2
 80102f6:	e7c7      	b.n	8010288 <_printf_common+0x58>
 80102f8:	2301      	movs	r3, #1
 80102fa:	4622      	mov	r2, r4
 80102fc:	4649      	mov	r1, r9
 80102fe:	4638      	mov	r0, r7
 8010300:	47c0      	blx	r8
 8010302:	3001      	adds	r0, #1
 8010304:	d0e6      	beq.n	80102d4 <_printf_common+0xa4>
 8010306:	3601      	adds	r6, #1
 8010308:	e7d9      	b.n	80102be <_printf_common+0x8e>
	...

0801030c <_printf_i>:
 801030c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010310:	7e0f      	ldrb	r7, [r1, #24]
 8010312:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010314:	2f78      	cmp	r7, #120	; 0x78
 8010316:	4691      	mov	r9, r2
 8010318:	4680      	mov	r8, r0
 801031a:	460c      	mov	r4, r1
 801031c:	469a      	mov	sl, r3
 801031e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8010322:	d807      	bhi.n	8010334 <_printf_i+0x28>
 8010324:	2f62      	cmp	r7, #98	; 0x62
 8010326:	d80a      	bhi.n	801033e <_printf_i+0x32>
 8010328:	2f00      	cmp	r7, #0
 801032a:	f000 80d8 	beq.w	80104de <_printf_i+0x1d2>
 801032e:	2f58      	cmp	r7, #88	; 0x58
 8010330:	f000 80a3 	beq.w	801047a <_printf_i+0x16e>
 8010334:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010338:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801033c:	e03a      	b.n	80103b4 <_printf_i+0xa8>
 801033e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010342:	2b15      	cmp	r3, #21
 8010344:	d8f6      	bhi.n	8010334 <_printf_i+0x28>
 8010346:	a101      	add	r1, pc, #4	; (adr r1, 801034c <_printf_i+0x40>)
 8010348:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801034c:	080103a5 	.word	0x080103a5
 8010350:	080103b9 	.word	0x080103b9
 8010354:	08010335 	.word	0x08010335
 8010358:	08010335 	.word	0x08010335
 801035c:	08010335 	.word	0x08010335
 8010360:	08010335 	.word	0x08010335
 8010364:	080103b9 	.word	0x080103b9
 8010368:	08010335 	.word	0x08010335
 801036c:	08010335 	.word	0x08010335
 8010370:	08010335 	.word	0x08010335
 8010374:	08010335 	.word	0x08010335
 8010378:	080104c5 	.word	0x080104c5
 801037c:	080103e9 	.word	0x080103e9
 8010380:	080104a7 	.word	0x080104a7
 8010384:	08010335 	.word	0x08010335
 8010388:	08010335 	.word	0x08010335
 801038c:	080104e7 	.word	0x080104e7
 8010390:	08010335 	.word	0x08010335
 8010394:	080103e9 	.word	0x080103e9
 8010398:	08010335 	.word	0x08010335
 801039c:	08010335 	.word	0x08010335
 80103a0:	080104af 	.word	0x080104af
 80103a4:	682b      	ldr	r3, [r5, #0]
 80103a6:	1d1a      	adds	r2, r3, #4
 80103a8:	681b      	ldr	r3, [r3, #0]
 80103aa:	602a      	str	r2, [r5, #0]
 80103ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80103b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80103b4:	2301      	movs	r3, #1
 80103b6:	e0a3      	b.n	8010500 <_printf_i+0x1f4>
 80103b8:	6820      	ldr	r0, [r4, #0]
 80103ba:	6829      	ldr	r1, [r5, #0]
 80103bc:	0606      	lsls	r6, r0, #24
 80103be:	f101 0304 	add.w	r3, r1, #4
 80103c2:	d50a      	bpl.n	80103da <_printf_i+0xce>
 80103c4:	680e      	ldr	r6, [r1, #0]
 80103c6:	602b      	str	r3, [r5, #0]
 80103c8:	2e00      	cmp	r6, #0
 80103ca:	da03      	bge.n	80103d4 <_printf_i+0xc8>
 80103cc:	232d      	movs	r3, #45	; 0x2d
 80103ce:	4276      	negs	r6, r6
 80103d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80103d4:	485e      	ldr	r0, [pc, #376]	; (8010550 <_printf_i+0x244>)
 80103d6:	230a      	movs	r3, #10
 80103d8:	e019      	b.n	801040e <_printf_i+0x102>
 80103da:	680e      	ldr	r6, [r1, #0]
 80103dc:	602b      	str	r3, [r5, #0]
 80103de:	f010 0f40 	tst.w	r0, #64	; 0x40
 80103e2:	bf18      	it	ne
 80103e4:	b236      	sxthne	r6, r6
 80103e6:	e7ef      	b.n	80103c8 <_printf_i+0xbc>
 80103e8:	682b      	ldr	r3, [r5, #0]
 80103ea:	6820      	ldr	r0, [r4, #0]
 80103ec:	1d19      	adds	r1, r3, #4
 80103ee:	6029      	str	r1, [r5, #0]
 80103f0:	0601      	lsls	r1, r0, #24
 80103f2:	d501      	bpl.n	80103f8 <_printf_i+0xec>
 80103f4:	681e      	ldr	r6, [r3, #0]
 80103f6:	e002      	b.n	80103fe <_printf_i+0xf2>
 80103f8:	0646      	lsls	r6, r0, #25
 80103fa:	d5fb      	bpl.n	80103f4 <_printf_i+0xe8>
 80103fc:	881e      	ldrh	r6, [r3, #0]
 80103fe:	4854      	ldr	r0, [pc, #336]	; (8010550 <_printf_i+0x244>)
 8010400:	2f6f      	cmp	r7, #111	; 0x6f
 8010402:	bf0c      	ite	eq
 8010404:	2308      	moveq	r3, #8
 8010406:	230a      	movne	r3, #10
 8010408:	2100      	movs	r1, #0
 801040a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801040e:	6865      	ldr	r5, [r4, #4]
 8010410:	60a5      	str	r5, [r4, #8]
 8010412:	2d00      	cmp	r5, #0
 8010414:	bfa2      	ittt	ge
 8010416:	6821      	ldrge	r1, [r4, #0]
 8010418:	f021 0104 	bicge.w	r1, r1, #4
 801041c:	6021      	strge	r1, [r4, #0]
 801041e:	b90e      	cbnz	r6, 8010424 <_printf_i+0x118>
 8010420:	2d00      	cmp	r5, #0
 8010422:	d04d      	beq.n	80104c0 <_printf_i+0x1b4>
 8010424:	4615      	mov	r5, r2
 8010426:	fbb6 f1f3 	udiv	r1, r6, r3
 801042a:	fb03 6711 	mls	r7, r3, r1, r6
 801042e:	5dc7      	ldrb	r7, [r0, r7]
 8010430:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010434:	4637      	mov	r7, r6
 8010436:	42bb      	cmp	r3, r7
 8010438:	460e      	mov	r6, r1
 801043a:	d9f4      	bls.n	8010426 <_printf_i+0x11a>
 801043c:	2b08      	cmp	r3, #8
 801043e:	d10b      	bne.n	8010458 <_printf_i+0x14c>
 8010440:	6823      	ldr	r3, [r4, #0]
 8010442:	07de      	lsls	r6, r3, #31
 8010444:	d508      	bpl.n	8010458 <_printf_i+0x14c>
 8010446:	6923      	ldr	r3, [r4, #16]
 8010448:	6861      	ldr	r1, [r4, #4]
 801044a:	4299      	cmp	r1, r3
 801044c:	bfde      	ittt	le
 801044e:	2330      	movle	r3, #48	; 0x30
 8010450:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010454:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8010458:	1b52      	subs	r2, r2, r5
 801045a:	6122      	str	r2, [r4, #16]
 801045c:	f8cd a000 	str.w	sl, [sp]
 8010460:	464b      	mov	r3, r9
 8010462:	aa03      	add	r2, sp, #12
 8010464:	4621      	mov	r1, r4
 8010466:	4640      	mov	r0, r8
 8010468:	f7ff fee2 	bl	8010230 <_printf_common>
 801046c:	3001      	adds	r0, #1
 801046e:	d14c      	bne.n	801050a <_printf_i+0x1fe>
 8010470:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010474:	b004      	add	sp, #16
 8010476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801047a:	4835      	ldr	r0, [pc, #212]	; (8010550 <_printf_i+0x244>)
 801047c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8010480:	6829      	ldr	r1, [r5, #0]
 8010482:	6823      	ldr	r3, [r4, #0]
 8010484:	f851 6b04 	ldr.w	r6, [r1], #4
 8010488:	6029      	str	r1, [r5, #0]
 801048a:	061d      	lsls	r5, r3, #24
 801048c:	d514      	bpl.n	80104b8 <_printf_i+0x1ac>
 801048e:	07df      	lsls	r7, r3, #31
 8010490:	bf44      	itt	mi
 8010492:	f043 0320 	orrmi.w	r3, r3, #32
 8010496:	6023      	strmi	r3, [r4, #0]
 8010498:	b91e      	cbnz	r6, 80104a2 <_printf_i+0x196>
 801049a:	6823      	ldr	r3, [r4, #0]
 801049c:	f023 0320 	bic.w	r3, r3, #32
 80104a0:	6023      	str	r3, [r4, #0]
 80104a2:	2310      	movs	r3, #16
 80104a4:	e7b0      	b.n	8010408 <_printf_i+0xfc>
 80104a6:	6823      	ldr	r3, [r4, #0]
 80104a8:	f043 0320 	orr.w	r3, r3, #32
 80104ac:	6023      	str	r3, [r4, #0]
 80104ae:	2378      	movs	r3, #120	; 0x78
 80104b0:	4828      	ldr	r0, [pc, #160]	; (8010554 <_printf_i+0x248>)
 80104b2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80104b6:	e7e3      	b.n	8010480 <_printf_i+0x174>
 80104b8:	0659      	lsls	r1, r3, #25
 80104ba:	bf48      	it	mi
 80104bc:	b2b6      	uxthmi	r6, r6
 80104be:	e7e6      	b.n	801048e <_printf_i+0x182>
 80104c0:	4615      	mov	r5, r2
 80104c2:	e7bb      	b.n	801043c <_printf_i+0x130>
 80104c4:	682b      	ldr	r3, [r5, #0]
 80104c6:	6826      	ldr	r6, [r4, #0]
 80104c8:	6961      	ldr	r1, [r4, #20]
 80104ca:	1d18      	adds	r0, r3, #4
 80104cc:	6028      	str	r0, [r5, #0]
 80104ce:	0635      	lsls	r5, r6, #24
 80104d0:	681b      	ldr	r3, [r3, #0]
 80104d2:	d501      	bpl.n	80104d8 <_printf_i+0x1cc>
 80104d4:	6019      	str	r1, [r3, #0]
 80104d6:	e002      	b.n	80104de <_printf_i+0x1d2>
 80104d8:	0670      	lsls	r0, r6, #25
 80104da:	d5fb      	bpl.n	80104d4 <_printf_i+0x1c8>
 80104dc:	8019      	strh	r1, [r3, #0]
 80104de:	2300      	movs	r3, #0
 80104e0:	6123      	str	r3, [r4, #16]
 80104e2:	4615      	mov	r5, r2
 80104e4:	e7ba      	b.n	801045c <_printf_i+0x150>
 80104e6:	682b      	ldr	r3, [r5, #0]
 80104e8:	1d1a      	adds	r2, r3, #4
 80104ea:	602a      	str	r2, [r5, #0]
 80104ec:	681d      	ldr	r5, [r3, #0]
 80104ee:	6862      	ldr	r2, [r4, #4]
 80104f0:	2100      	movs	r1, #0
 80104f2:	4628      	mov	r0, r5
 80104f4:	f7ef fe74 	bl	80001e0 <memchr>
 80104f8:	b108      	cbz	r0, 80104fe <_printf_i+0x1f2>
 80104fa:	1b40      	subs	r0, r0, r5
 80104fc:	6060      	str	r0, [r4, #4]
 80104fe:	6863      	ldr	r3, [r4, #4]
 8010500:	6123      	str	r3, [r4, #16]
 8010502:	2300      	movs	r3, #0
 8010504:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010508:	e7a8      	b.n	801045c <_printf_i+0x150>
 801050a:	6923      	ldr	r3, [r4, #16]
 801050c:	462a      	mov	r2, r5
 801050e:	4649      	mov	r1, r9
 8010510:	4640      	mov	r0, r8
 8010512:	47d0      	blx	sl
 8010514:	3001      	adds	r0, #1
 8010516:	d0ab      	beq.n	8010470 <_printf_i+0x164>
 8010518:	6823      	ldr	r3, [r4, #0]
 801051a:	079b      	lsls	r3, r3, #30
 801051c:	d413      	bmi.n	8010546 <_printf_i+0x23a>
 801051e:	68e0      	ldr	r0, [r4, #12]
 8010520:	9b03      	ldr	r3, [sp, #12]
 8010522:	4298      	cmp	r0, r3
 8010524:	bfb8      	it	lt
 8010526:	4618      	movlt	r0, r3
 8010528:	e7a4      	b.n	8010474 <_printf_i+0x168>
 801052a:	2301      	movs	r3, #1
 801052c:	4632      	mov	r2, r6
 801052e:	4649      	mov	r1, r9
 8010530:	4640      	mov	r0, r8
 8010532:	47d0      	blx	sl
 8010534:	3001      	adds	r0, #1
 8010536:	d09b      	beq.n	8010470 <_printf_i+0x164>
 8010538:	3501      	adds	r5, #1
 801053a:	68e3      	ldr	r3, [r4, #12]
 801053c:	9903      	ldr	r1, [sp, #12]
 801053e:	1a5b      	subs	r3, r3, r1
 8010540:	42ab      	cmp	r3, r5
 8010542:	dcf2      	bgt.n	801052a <_printf_i+0x21e>
 8010544:	e7eb      	b.n	801051e <_printf_i+0x212>
 8010546:	2500      	movs	r5, #0
 8010548:	f104 0619 	add.w	r6, r4, #25
 801054c:	e7f5      	b.n	801053a <_printf_i+0x22e>
 801054e:	bf00      	nop
 8010550:	08015a1e 	.word	0x08015a1e
 8010554:	08015a2f 	.word	0x08015a2f

08010558 <_sbrk_r>:
 8010558:	b538      	push	{r3, r4, r5, lr}
 801055a:	4d06      	ldr	r5, [pc, #24]	; (8010574 <_sbrk_r+0x1c>)
 801055c:	2300      	movs	r3, #0
 801055e:	4604      	mov	r4, r0
 8010560:	4608      	mov	r0, r1
 8010562:	602b      	str	r3, [r5, #0]
 8010564:	f7f6 fc1e 	bl	8006da4 <_sbrk>
 8010568:	1c43      	adds	r3, r0, #1
 801056a:	d102      	bne.n	8010572 <_sbrk_r+0x1a>
 801056c:	682b      	ldr	r3, [r5, #0]
 801056e:	b103      	cbz	r3, 8010572 <_sbrk_r+0x1a>
 8010570:	6023      	str	r3, [r4, #0]
 8010572:	bd38      	pop	{r3, r4, r5, pc}
 8010574:	200038ec 	.word	0x200038ec

08010578 <siprintf>:
 8010578:	b40e      	push	{r1, r2, r3}
 801057a:	b500      	push	{lr}
 801057c:	b09c      	sub	sp, #112	; 0x70
 801057e:	ab1d      	add	r3, sp, #116	; 0x74
 8010580:	9002      	str	r0, [sp, #8]
 8010582:	9006      	str	r0, [sp, #24]
 8010584:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010588:	4809      	ldr	r0, [pc, #36]	; (80105b0 <siprintf+0x38>)
 801058a:	9107      	str	r1, [sp, #28]
 801058c:	9104      	str	r1, [sp, #16]
 801058e:	4909      	ldr	r1, [pc, #36]	; (80105b4 <siprintf+0x3c>)
 8010590:	f853 2b04 	ldr.w	r2, [r3], #4
 8010594:	9105      	str	r1, [sp, #20]
 8010596:	6800      	ldr	r0, [r0, #0]
 8010598:	9301      	str	r3, [sp, #4]
 801059a:	a902      	add	r1, sp, #8
 801059c:	f002 fe78 	bl	8013290 <_svfiprintf_r>
 80105a0:	9b02      	ldr	r3, [sp, #8]
 80105a2:	2200      	movs	r2, #0
 80105a4:	701a      	strb	r2, [r3, #0]
 80105a6:	b01c      	add	sp, #112	; 0x70
 80105a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80105ac:	b003      	add	sp, #12
 80105ae:	4770      	bx	lr
 80105b0:	20000260 	.word	0x20000260
 80105b4:	ffff0208 	.word	0xffff0208

080105b8 <strchr>:
 80105b8:	b2c9      	uxtb	r1, r1
 80105ba:	4603      	mov	r3, r0
 80105bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80105c0:	b11a      	cbz	r2, 80105ca <strchr+0x12>
 80105c2:	428a      	cmp	r2, r1
 80105c4:	d1f9      	bne.n	80105ba <strchr+0x2>
 80105c6:	4618      	mov	r0, r3
 80105c8:	4770      	bx	lr
 80105ca:	2900      	cmp	r1, #0
 80105cc:	bf18      	it	ne
 80105ce:	2300      	movne	r3, #0
 80105d0:	e7f9      	b.n	80105c6 <strchr+0xe>

080105d2 <strncmp>:
 80105d2:	b510      	push	{r4, lr}
 80105d4:	b17a      	cbz	r2, 80105f6 <strncmp+0x24>
 80105d6:	4603      	mov	r3, r0
 80105d8:	3901      	subs	r1, #1
 80105da:	1884      	adds	r4, r0, r2
 80105dc:	f813 0b01 	ldrb.w	r0, [r3], #1
 80105e0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80105e4:	4290      	cmp	r0, r2
 80105e6:	d101      	bne.n	80105ec <strncmp+0x1a>
 80105e8:	42a3      	cmp	r3, r4
 80105ea:	d101      	bne.n	80105f0 <strncmp+0x1e>
 80105ec:	1a80      	subs	r0, r0, r2
 80105ee:	bd10      	pop	{r4, pc}
 80105f0:	2800      	cmp	r0, #0
 80105f2:	d1f3      	bne.n	80105dc <strncmp+0xa>
 80105f4:	e7fa      	b.n	80105ec <strncmp+0x1a>
 80105f6:	4610      	mov	r0, r2
 80105f8:	e7f9      	b.n	80105ee <strncmp+0x1c>

080105fa <strncpy>:
 80105fa:	b510      	push	{r4, lr}
 80105fc:	3901      	subs	r1, #1
 80105fe:	4603      	mov	r3, r0
 8010600:	b132      	cbz	r2, 8010610 <strncpy+0x16>
 8010602:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8010606:	f803 4b01 	strb.w	r4, [r3], #1
 801060a:	3a01      	subs	r2, #1
 801060c:	2c00      	cmp	r4, #0
 801060e:	d1f7      	bne.n	8010600 <strncpy+0x6>
 8010610:	441a      	add	r2, r3
 8010612:	2100      	movs	r1, #0
 8010614:	4293      	cmp	r3, r2
 8010616:	d100      	bne.n	801061a <strncpy+0x20>
 8010618:	bd10      	pop	{r4, pc}
 801061a:	f803 1b01 	strb.w	r1, [r3], #1
 801061e:	e7f9      	b.n	8010614 <strncpy+0x1a>

08010620 <strstr>:
 8010620:	780a      	ldrb	r2, [r1, #0]
 8010622:	b570      	push	{r4, r5, r6, lr}
 8010624:	b96a      	cbnz	r2, 8010642 <strstr+0x22>
 8010626:	bd70      	pop	{r4, r5, r6, pc}
 8010628:	429a      	cmp	r2, r3
 801062a:	d109      	bne.n	8010640 <strstr+0x20>
 801062c:	460c      	mov	r4, r1
 801062e:	4605      	mov	r5, r0
 8010630:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8010634:	2b00      	cmp	r3, #0
 8010636:	d0f6      	beq.n	8010626 <strstr+0x6>
 8010638:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801063c:	429e      	cmp	r6, r3
 801063e:	d0f7      	beq.n	8010630 <strstr+0x10>
 8010640:	3001      	adds	r0, #1
 8010642:	7803      	ldrb	r3, [r0, #0]
 8010644:	2b00      	cmp	r3, #0
 8010646:	d1ef      	bne.n	8010628 <strstr+0x8>
 8010648:	4618      	mov	r0, r3
 801064a:	e7ec      	b.n	8010626 <strstr+0x6>

0801064c <sulp>:
 801064c:	b570      	push	{r4, r5, r6, lr}
 801064e:	4604      	mov	r4, r0
 8010650:	460d      	mov	r5, r1
 8010652:	ec45 4b10 	vmov	d0, r4, r5
 8010656:	4616      	mov	r6, r2
 8010658:	f002 fc70 	bl	8012f3c <__ulp>
 801065c:	ec51 0b10 	vmov	r0, r1, d0
 8010660:	b17e      	cbz	r6, 8010682 <sulp+0x36>
 8010662:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8010666:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801066a:	2b00      	cmp	r3, #0
 801066c:	dd09      	ble.n	8010682 <sulp+0x36>
 801066e:	051b      	lsls	r3, r3, #20
 8010670:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8010674:	2400      	movs	r4, #0
 8010676:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801067a:	4622      	mov	r2, r4
 801067c:	462b      	mov	r3, r5
 801067e:	f7ef ffbb 	bl	80005f8 <__aeabi_dmul>
 8010682:	bd70      	pop	{r4, r5, r6, pc}
 8010684:	0000      	movs	r0, r0
	...

08010688 <_strtod_l>:
 8010688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801068c:	ed2d 8b02 	vpush	{d8}
 8010690:	b09d      	sub	sp, #116	; 0x74
 8010692:	461f      	mov	r7, r3
 8010694:	2300      	movs	r3, #0
 8010696:	9318      	str	r3, [sp, #96]	; 0x60
 8010698:	4ba2      	ldr	r3, [pc, #648]	; (8010924 <_strtod_l+0x29c>)
 801069a:	9213      	str	r2, [sp, #76]	; 0x4c
 801069c:	681b      	ldr	r3, [r3, #0]
 801069e:	9305      	str	r3, [sp, #20]
 80106a0:	4604      	mov	r4, r0
 80106a2:	4618      	mov	r0, r3
 80106a4:	4688      	mov	r8, r1
 80106a6:	f7ef fd93 	bl	80001d0 <strlen>
 80106aa:	f04f 0a00 	mov.w	sl, #0
 80106ae:	4605      	mov	r5, r0
 80106b0:	f04f 0b00 	mov.w	fp, #0
 80106b4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80106b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80106ba:	781a      	ldrb	r2, [r3, #0]
 80106bc:	2a2b      	cmp	r2, #43	; 0x2b
 80106be:	d04e      	beq.n	801075e <_strtod_l+0xd6>
 80106c0:	d83b      	bhi.n	801073a <_strtod_l+0xb2>
 80106c2:	2a0d      	cmp	r2, #13
 80106c4:	d834      	bhi.n	8010730 <_strtod_l+0xa8>
 80106c6:	2a08      	cmp	r2, #8
 80106c8:	d834      	bhi.n	8010734 <_strtod_l+0xac>
 80106ca:	2a00      	cmp	r2, #0
 80106cc:	d03e      	beq.n	801074c <_strtod_l+0xc4>
 80106ce:	2300      	movs	r3, #0
 80106d0:	930a      	str	r3, [sp, #40]	; 0x28
 80106d2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80106d4:	7833      	ldrb	r3, [r6, #0]
 80106d6:	2b30      	cmp	r3, #48	; 0x30
 80106d8:	f040 80b0 	bne.w	801083c <_strtod_l+0x1b4>
 80106dc:	7873      	ldrb	r3, [r6, #1]
 80106de:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80106e2:	2b58      	cmp	r3, #88	; 0x58
 80106e4:	d168      	bne.n	80107b8 <_strtod_l+0x130>
 80106e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80106e8:	9301      	str	r3, [sp, #4]
 80106ea:	ab18      	add	r3, sp, #96	; 0x60
 80106ec:	9702      	str	r7, [sp, #8]
 80106ee:	9300      	str	r3, [sp, #0]
 80106f0:	4a8d      	ldr	r2, [pc, #564]	; (8010928 <_strtod_l+0x2a0>)
 80106f2:	ab19      	add	r3, sp, #100	; 0x64
 80106f4:	a917      	add	r1, sp, #92	; 0x5c
 80106f6:	4620      	mov	r0, r4
 80106f8:	f001 fd80 	bl	80121fc <__gethex>
 80106fc:	f010 0707 	ands.w	r7, r0, #7
 8010700:	4605      	mov	r5, r0
 8010702:	d005      	beq.n	8010710 <_strtod_l+0x88>
 8010704:	2f06      	cmp	r7, #6
 8010706:	d12c      	bne.n	8010762 <_strtod_l+0xda>
 8010708:	3601      	adds	r6, #1
 801070a:	2300      	movs	r3, #0
 801070c:	9617      	str	r6, [sp, #92]	; 0x5c
 801070e:	930a      	str	r3, [sp, #40]	; 0x28
 8010710:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010712:	2b00      	cmp	r3, #0
 8010714:	f040 8590 	bne.w	8011238 <_strtod_l+0xbb0>
 8010718:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801071a:	b1eb      	cbz	r3, 8010758 <_strtod_l+0xd0>
 801071c:	4652      	mov	r2, sl
 801071e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8010722:	ec43 2b10 	vmov	d0, r2, r3
 8010726:	b01d      	add	sp, #116	; 0x74
 8010728:	ecbd 8b02 	vpop	{d8}
 801072c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010730:	2a20      	cmp	r2, #32
 8010732:	d1cc      	bne.n	80106ce <_strtod_l+0x46>
 8010734:	3301      	adds	r3, #1
 8010736:	9317      	str	r3, [sp, #92]	; 0x5c
 8010738:	e7be      	b.n	80106b8 <_strtod_l+0x30>
 801073a:	2a2d      	cmp	r2, #45	; 0x2d
 801073c:	d1c7      	bne.n	80106ce <_strtod_l+0x46>
 801073e:	2201      	movs	r2, #1
 8010740:	920a      	str	r2, [sp, #40]	; 0x28
 8010742:	1c5a      	adds	r2, r3, #1
 8010744:	9217      	str	r2, [sp, #92]	; 0x5c
 8010746:	785b      	ldrb	r3, [r3, #1]
 8010748:	2b00      	cmp	r3, #0
 801074a:	d1c2      	bne.n	80106d2 <_strtod_l+0x4a>
 801074c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801074e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8010752:	2b00      	cmp	r3, #0
 8010754:	f040 856e 	bne.w	8011234 <_strtod_l+0xbac>
 8010758:	4652      	mov	r2, sl
 801075a:	465b      	mov	r3, fp
 801075c:	e7e1      	b.n	8010722 <_strtod_l+0x9a>
 801075e:	2200      	movs	r2, #0
 8010760:	e7ee      	b.n	8010740 <_strtod_l+0xb8>
 8010762:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8010764:	b13a      	cbz	r2, 8010776 <_strtod_l+0xee>
 8010766:	2135      	movs	r1, #53	; 0x35
 8010768:	a81a      	add	r0, sp, #104	; 0x68
 801076a:	f002 fcf2 	bl	8013152 <__copybits>
 801076e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010770:	4620      	mov	r0, r4
 8010772:	f002 f8b1 	bl	80128d8 <_Bfree>
 8010776:	3f01      	subs	r7, #1
 8010778:	2f04      	cmp	r7, #4
 801077a:	d806      	bhi.n	801078a <_strtod_l+0x102>
 801077c:	e8df f007 	tbb	[pc, r7]
 8010780:	1714030a 	.word	0x1714030a
 8010784:	0a          	.byte	0x0a
 8010785:	00          	.byte	0x00
 8010786:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 801078a:	0728      	lsls	r0, r5, #28
 801078c:	d5c0      	bpl.n	8010710 <_strtod_l+0x88>
 801078e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8010792:	e7bd      	b.n	8010710 <_strtod_l+0x88>
 8010794:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8010798:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801079a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801079e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80107a2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80107a6:	e7f0      	b.n	801078a <_strtod_l+0x102>
 80107a8:	f8df b180 	ldr.w	fp, [pc, #384]	; 801092c <_strtod_l+0x2a4>
 80107ac:	e7ed      	b.n	801078a <_strtod_l+0x102>
 80107ae:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80107b2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80107b6:	e7e8      	b.n	801078a <_strtod_l+0x102>
 80107b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80107ba:	1c5a      	adds	r2, r3, #1
 80107bc:	9217      	str	r2, [sp, #92]	; 0x5c
 80107be:	785b      	ldrb	r3, [r3, #1]
 80107c0:	2b30      	cmp	r3, #48	; 0x30
 80107c2:	d0f9      	beq.n	80107b8 <_strtod_l+0x130>
 80107c4:	2b00      	cmp	r3, #0
 80107c6:	d0a3      	beq.n	8010710 <_strtod_l+0x88>
 80107c8:	2301      	movs	r3, #1
 80107ca:	f04f 0900 	mov.w	r9, #0
 80107ce:	9304      	str	r3, [sp, #16]
 80107d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80107d2:	9308      	str	r3, [sp, #32]
 80107d4:	f8cd 901c 	str.w	r9, [sp, #28]
 80107d8:	464f      	mov	r7, r9
 80107da:	220a      	movs	r2, #10
 80107dc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80107de:	7806      	ldrb	r6, [r0, #0]
 80107e0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80107e4:	b2d9      	uxtb	r1, r3
 80107e6:	2909      	cmp	r1, #9
 80107e8:	d92a      	bls.n	8010840 <_strtod_l+0x1b8>
 80107ea:	9905      	ldr	r1, [sp, #20]
 80107ec:	462a      	mov	r2, r5
 80107ee:	f7ff fef0 	bl	80105d2 <strncmp>
 80107f2:	b398      	cbz	r0, 801085c <_strtod_l+0x1d4>
 80107f4:	2000      	movs	r0, #0
 80107f6:	4632      	mov	r2, r6
 80107f8:	463d      	mov	r5, r7
 80107fa:	9005      	str	r0, [sp, #20]
 80107fc:	4603      	mov	r3, r0
 80107fe:	2a65      	cmp	r2, #101	; 0x65
 8010800:	d001      	beq.n	8010806 <_strtod_l+0x17e>
 8010802:	2a45      	cmp	r2, #69	; 0x45
 8010804:	d118      	bne.n	8010838 <_strtod_l+0x1b0>
 8010806:	b91d      	cbnz	r5, 8010810 <_strtod_l+0x188>
 8010808:	9a04      	ldr	r2, [sp, #16]
 801080a:	4302      	orrs	r2, r0
 801080c:	d09e      	beq.n	801074c <_strtod_l+0xc4>
 801080e:	2500      	movs	r5, #0
 8010810:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8010814:	f108 0201 	add.w	r2, r8, #1
 8010818:	9217      	str	r2, [sp, #92]	; 0x5c
 801081a:	f898 2001 	ldrb.w	r2, [r8, #1]
 801081e:	2a2b      	cmp	r2, #43	; 0x2b
 8010820:	d075      	beq.n	801090e <_strtod_l+0x286>
 8010822:	2a2d      	cmp	r2, #45	; 0x2d
 8010824:	d07b      	beq.n	801091e <_strtod_l+0x296>
 8010826:	f04f 0c00 	mov.w	ip, #0
 801082a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 801082e:	2909      	cmp	r1, #9
 8010830:	f240 8082 	bls.w	8010938 <_strtod_l+0x2b0>
 8010834:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8010838:	2600      	movs	r6, #0
 801083a:	e09d      	b.n	8010978 <_strtod_l+0x2f0>
 801083c:	2300      	movs	r3, #0
 801083e:	e7c4      	b.n	80107ca <_strtod_l+0x142>
 8010840:	2f08      	cmp	r7, #8
 8010842:	bfd8      	it	le
 8010844:	9907      	ldrle	r1, [sp, #28]
 8010846:	f100 0001 	add.w	r0, r0, #1
 801084a:	bfda      	itte	le
 801084c:	fb02 3301 	mlale	r3, r2, r1, r3
 8010850:	9307      	strle	r3, [sp, #28]
 8010852:	fb02 3909 	mlagt	r9, r2, r9, r3
 8010856:	3701      	adds	r7, #1
 8010858:	9017      	str	r0, [sp, #92]	; 0x5c
 801085a:	e7bf      	b.n	80107dc <_strtod_l+0x154>
 801085c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801085e:	195a      	adds	r2, r3, r5
 8010860:	9217      	str	r2, [sp, #92]	; 0x5c
 8010862:	5d5a      	ldrb	r2, [r3, r5]
 8010864:	2f00      	cmp	r7, #0
 8010866:	d037      	beq.n	80108d8 <_strtod_l+0x250>
 8010868:	9005      	str	r0, [sp, #20]
 801086a:	463d      	mov	r5, r7
 801086c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8010870:	2b09      	cmp	r3, #9
 8010872:	d912      	bls.n	801089a <_strtod_l+0x212>
 8010874:	2301      	movs	r3, #1
 8010876:	e7c2      	b.n	80107fe <_strtod_l+0x176>
 8010878:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801087a:	1c5a      	adds	r2, r3, #1
 801087c:	9217      	str	r2, [sp, #92]	; 0x5c
 801087e:	785a      	ldrb	r2, [r3, #1]
 8010880:	3001      	adds	r0, #1
 8010882:	2a30      	cmp	r2, #48	; 0x30
 8010884:	d0f8      	beq.n	8010878 <_strtod_l+0x1f0>
 8010886:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801088a:	2b08      	cmp	r3, #8
 801088c:	f200 84d9 	bhi.w	8011242 <_strtod_l+0xbba>
 8010890:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010892:	9005      	str	r0, [sp, #20]
 8010894:	2000      	movs	r0, #0
 8010896:	9308      	str	r3, [sp, #32]
 8010898:	4605      	mov	r5, r0
 801089a:	3a30      	subs	r2, #48	; 0x30
 801089c:	f100 0301 	add.w	r3, r0, #1
 80108a0:	d014      	beq.n	80108cc <_strtod_l+0x244>
 80108a2:	9905      	ldr	r1, [sp, #20]
 80108a4:	4419      	add	r1, r3
 80108a6:	9105      	str	r1, [sp, #20]
 80108a8:	462b      	mov	r3, r5
 80108aa:	eb00 0e05 	add.w	lr, r0, r5
 80108ae:	210a      	movs	r1, #10
 80108b0:	4573      	cmp	r3, lr
 80108b2:	d113      	bne.n	80108dc <_strtod_l+0x254>
 80108b4:	182b      	adds	r3, r5, r0
 80108b6:	2b08      	cmp	r3, #8
 80108b8:	f105 0501 	add.w	r5, r5, #1
 80108bc:	4405      	add	r5, r0
 80108be:	dc1c      	bgt.n	80108fa <_strtod_l+0x272>
 80108c0:	9907      	ldr	r1, [sp, #28]
 80108c2:	230a      	movs	r3, #10
 80108c4:	fb03 2301 	mla	r3, r3, r1, r2
 80108c8:	9307      	str	r3, [sp, #28]
 80108ca:	2300      	movs	r3, #0
 80108cc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80108ce:	1c51      	adds	r1, r2, #1
 80108d0:	9117      	str	r1, [sp, #92]	; 0x5c
 80108d2:	7852      	ldrb	r2, [r2, #1]
 80108d4:	4618      	mov	r0, r3
 80108d6:	e7c9      	b.n	801086c <_strtod_l+0x1e4>
 80108d8:	4638      	mov	r0, r7
 80108da:	e7d2      	b.n	8010882 <_strtod_l+0x1fa>
 80108dc:	2b08      	cmp	r3, #8
 80108de:	dc04      	bgt.n	80108ea <_strtod_l+0x262>
 80108e0:	9e07      	ldr	r6, [sp, #28]
 80108e2:	434e      	muls	r6, r1
 80108e4:	9607      	str	r6, [sp, #28]
 80108e6:	3301      	adds	r3, #1
 80108e8:	e7e2      	b.n	80108b0 <_strtod_l+0x228>
 80108ea:	f103 0c01 	add.w	ip, r3, #1
 80108ee:	f1bc 0f10 	cmp.w	ip, #16
 80108f2:	bfd8      	it	le
 80108f4:	fb01 f909 	mulle.w	r9, r1, r9
 80108f8:	e7f5      	b.n	80108e6 <_strtod_l+0x25e>
 80108fa:	2d10      	cmp	r5, #16
 80108fc:	bfdc      	itt	le
 80108fe:	230a      	movle	r3, #10
 8010900:	fb03 2909 	mlale	r9, r3, r9, r2
 8010904:	e7e1      	b.n	80108ca <_strtod_l+0x242>
 8010906:	2300      	movs	r3, #0
 8010908:	9305      	str	r3, [sp, #20]
 801090a:	2301      	movs	r3, #1
 801090c:	e77c      	b.n	8010808 <_strtod_l+0x180>
 801090e:	f04f 0c00 	mov.w	ip, #0
 8010912:	f108 0202 	add.w	r2, r8, #2
 8010916:	9217      	str	r2, [sp, #92]	; 0x5c
 8010918:	f898 2002 	ldrb.w	r2, [r8, #2]
 801091c:	e785      	b.n	801082a <_strtod_l+0x1a2>
 801091e:	f04f 0c01 	mov.w	ip, #1
 8010922:	e7f6      	b.n	8010912 <_strtod_l+0x28a>
 8010924:	08015b88 	.word	0x08015b88
 8010928:	08015a40 	.word	0x08015a40
 801092c:	7ff00000 	.word	0x7ff00000
 8010930:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010932:	1c51      	adds	r1, r2, #1
 8010934:	9117      	str	r1, [sp, #92]	; 0x5c
 8010936:	7852      	ldrb	r2, [r2, #1]
 8010938:	2a30      	cmp	r2, #48	; 0x30
 801093a:	d0f9      	beq.n	8010930 <_strtod_l+0x2a8>
 801093c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8010940:	2908      	cmp	r1, #8
 8010942:	f63f af79 	bhi.w	8010838 <_strtod_l+0x1b0>
 8010946:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 801094a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801094c:	9206      	str	r2, [sp, #24]
 801094e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010950:	1c51      	adds	r1, r2, #1
 8010952:	9117      	str	r1, [sp, #92]	; 0x5c
 8010954:	7852      	ldrb	r2, [r2, #1]
 8010956:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 801095a:	2e09      	cmp	r6, #9
 801095c:	d937      	bls.n	80109ce <_strtod_l+0x346>
 801095e:	9e06      	ldr	r6, [sp, #24]
 8010960:	1b89      	subs	r1, r1, r6
 8010962:	2908      	cmp	r1, #8
 8010964:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8010968:	dc02      	bgt.n	8010970 <_strtod_l+0x2e8>
 801096a:	4576      	cmp	r6, lr
 801096c:	bfa8      	it	ge
 801096e:	4676      	movge	r6, lr
 8010970:	f1bc 0f00 	cmp.w	ip, #0
 8010974:	d000      	beq.n	8010978 <_strtod_l+0x2f0>
 8010976:	4276      	negs	r6, r6
 8010978:	2d00      	cmp	r5, #0
 801097a:	d14d      	bne.n	8010a18 <_strtod_l+0x390>
 801097c:	9904      	ldr	r1, [sp, #16]
 801097e:	4301      	orrs	r1, r0
 8010980:	f47f aec6 	bne.w	8010710 <_strtod_l+0x88>
 8010984:	2b00      	cmp	r3, #0
 8010986:	f47f aee1 	bne.w	801074c <_strtod_l+0xc4>
 801098a:	2a69      	cmp	r2, #105	; 0x69
 801098c:	d027      	beq.n	80109de <_strtod_l+0x356>
 801098e:	dc24      	bgt.n	80109da <_strtod_l+0x352>
 8010990:	2a49      	cmp	r2, #73	; 0x49
 8010992:	d024      	beq.n	80109de <_strtod_l+0x356>
 8010994:	2a4e      	cmp	r2, #78	; 0x4e
 8010996:	f47f aed9 	bne.w	801074c <_strtod_l+0xc4>
 801099a:	499f      	ldr	r1, [pc, #636]	; (8010c18 <_strtod_l+0x590>)
 801099c:	a817      	add	r0, sp, #92	; 0x5c
 801099e:	f001 fe85 	bl	80126ac <__match>
 80109a2:	2800      	cmp	r0, #0
 80109a4:	f43f aed2 	beq.w	801074c <_strtod_l+0xc4>
 80109a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80109aa:	781b      	ldrb	r3, [r3, #0]
 80109ac:	2b28      	cmp	r3, #40	; 0x28
 80109ae:	d12d      	bne.n	8010a0c <_strtod_l+0x384>
 80109b0:	499a      	ldr	r1, [pc, #616]	; (8010c1c <_strtod_l+0x594>)
 80109b2:	aa1a      	add	r2, sp, #104	; 0x68
 80109b4:	a817      	add	r0, sp, #92	; 0x5c
 80109b6:	f001 fe8d 	bl	80126d4 <__hexnan>
 80109ba:	2805      	cmp	r0, #5
 80109bc:	d126      	bne.n	8010a0c <_strtod_l+0x384>
 80109be:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80109c0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80109c4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80109c8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80109cc:	e6a0      	b.n	8010710 <_strtod_l+0x88>
 80109ce:	210a      	movs	r1, #10
 80109d0:	fb01 2e0e 	mla	lr, r1, lr, r2
 80109d4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80109d8:	e7b9      	b.n	801094e <_strtod_l+0x2c6>
 80109da:	2a6e      	cmp	r2, #110	; 0x6e
 80109dc:	e7db      	b.n	8010996 <_strtod_l+0x30e>
 80109de:	4990      	ldr	r1, [pc, #576]	; (8010c20 <_strtod_l+0x598>)
 80109e0:	a817      	add	r0, sp, #92	; 0x5c
 80109e2:	f001 fe63 	bl	80126ac <__match>
 80109e6:	2800      	cmp	r0, #0
 80109e8:	f43f aeb0 	beq.w	801074c <_strtod_l+0xc4>
 80109ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80109ee:	498d      	ldr	r1, [pc, #564]	; (8010c24 <_strtod_l+0x59c>)
 80109f0:	3b01      	subs	r3, #1
 80109f2:	a817      	add	r0, sp, #92	; 0x5c
 80109f4:	9317      	str	r3, [sp, #92]	; 0x5c
 80109f6:	f001 fe59 	bl	80126ac <__match>
 80109fa:	b910      	cbnz	r0, 8010a02 <_strtod_l+0x37a>
 80109fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80109fe:	3301      	adds	r3, #1
 8010a00:	9317      	str	r3, [sp, #92]	; 0x5c
 8010a02:	f8df b230 	ldr.w	fp, [pc, #560]	; 8010c34 <_strtod_l+0x5ac>
 8010a06:	f04f 0a00 	mov.w	sl, #0
 8010a0a:	e681      	b.n	8010710 <_strtod_l+0x88>
 8010a0c:	4886      	ldr	r0, [pc, #536]	; (8010c28 <_strtod_l+0x5a0>)
 8010a0e:	f002 fd3f 	bl	8013490 <nan>
 8010a12:	ec5b ab10 	vmov	sl, fp, d0
 8010a16:	e67b      	b.n	8010710 <_strtod_l+0x88>
 8010a18:	9b05      	ldr	r3, [sp, #20]
 8010a1a:	9807      	ldr	r0, [sp, #28]
 8010a1c:	1af3      	subs	r3, r6, r3
 8010a1e:	2f00      	cmp	r7, #0
 8010a20:	bf08      	it	eq
 8010a22:	462f      	moveq	r7, r5
 8010a24:	2d10      	cmp	r5, #16
 8010a26:	9306      	str	r3, [sp, #24]
 8010a28:	46a8      	mov	r8, r5
 8010a2a:	bfa8      	it	ge
 8010a2c:	f04f 0810 	movge.w	r8, #16
 8010a30:	f7ef fd68 	bl	8000504 <__aeabi_ui2d>
 8010a34:	2d09      	cmp	r5, #9
 8010a36:	4682      	mov	sl, r0
 8010a38:	468b      	mov	fp, r1
 8010a3a:	dd13      	ble.n	8010a64 <_strtod_l+0x3dc>
 8010a3c:	4b7b      	ldr	r3, [pc, #492]	; (8010c2c <_strtod_l+0x5a4>)
 8010a3e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8010a42:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8010a46:	f7ef fdd7 	bl	80005f8 <__aeabi_dmul>
 8010a4a:	4682      	mov	sl, r0
 8010a4c:	4648      	mov	r0, r9
 8010a4e:	468b      	mov	fp, r1
 8010a50:	f7ef fd58 	bl	8000504 <__aeabi_ui2d>
 8010a54:	4602      	mov	r2, r0
 8010a56:	460b      	mov	r3, r1
 8010a58:	4650      	mov	r0, sl
 8010a5a:	4659      	mov	r1, fp
 8010a5c:	f7ef fc16 	bl	800028c <__adddf3>
 8010a60:	4682      	mov	sl, r0
 8010a62:	468b      	mov	fp, r1
 8010a64:	2d0f      	cmp	r5, #15
 8010a66:	dc38      	bgt.n	8010ada <_strtod_l+0x452>
 8010a68:	9b06      	ldr	r3, [sp, #24]
 8010a6a:	2b00      	cmp	r3, #0
 8010a6c:	f43f ae50 	beq.w	8010710 <_strtod_l+0x88>
 8010a70:	dd24      	ble.n	8010abc <_strtod_l+0x434>
 8010a72:	2b16      	cmp	r3, #22
 8010a74:	dc0b      	bgt.n	8010a8e <_strtod_l+0x406>
 8010a76:	496d      	ldr	r1, [pc, #436]	; (8010c2c <_strtod_l+0x5a4>)
 8010a78:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010a7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010a80:	4652      	mov	r2, sl
 8010a82:	465b      	mov	r3, fp
 8010a84:	f7ef fdb8 	bl	80005f8 <__aeabi_dmul>
 8010a88:	4682      	mov	sl, r0
 8010a8a:	468b      	mov	fp, r1
 8010a8c:	e640      	b.n	8010710 <_strtod_l+0x88>
 8010a8e:	9a06      	ldr	r2, [sp, #24]
 8010a90:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8010a94:	4293      	cmp	r3, r2
 8010a96:	db20      	blt.n	8010ada <_strtod_l+0x452>
 8010a98:	4c64      	ldr	r4, [pc, #400]	; (8010c2c <_strtod_l+0x5a4>)
 8010a9a:	f1c5 050f 	rsb	r5, r5, #15
 8010a9e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8010aa2:	4652      	mov	r2, sl
 8010aa4:	465b      	mov	r3, fp
 8010aa6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010aaa:	f7ef fda5 	bl	80005f8 <__aeabi_dmul>
 8010aae:	9b06      	ldr	r3, [sp, #24]
 8010ab0:	1b5d      	subs	r5, r3, r5
 8010ab2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8010ab6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8010aba:	e7e3      	b.n	8010a84 <_strtod_l+0x3fc>
 8010abc:	9b06      	ldr	r3, [sp, #24]
 8010abe:	3316      	adds	r3, #22
 8010ac0:	db0b      	blt.n	8010ada <_strtod_l+0x452>
 8010ac2:	9b05      	ldr	r3, [sp, #20]
 8010ac4:	1b9e      	subs	r6, r3, r6
 8010ac6:	4b59      	ldr	r3, [pc, #356]	; (8010c2c <_strtod_l+0x5a4>)
 8010ac8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8010acc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010ad0:	4650      	mov	r0, sl
 8010ad2:	4659      	mov	r1, fp
 8010ad4:	f7ef feba 	bl	800084c <__aeabi_ddiv>
 8010ad8:	e7d6      	b.n	8010a88 <_strtod_l+0x400>
 8010ada:	9b06      	ldr	r3, [sp, #24]
 8010adc:	eba5 0808 	sub.w	r8, r5, r8
 8010ae0:	4498      	add	r8, r3
 8010ae2:	f1b8 0f00 	cmp.w	r8, #0
 8010ae6:	dd74      	ble.n	8010bd2 <_strtod_l+0x54a>
 8010ae8:	f018 030f 	ands.w	r3, r8, #15
 8010aec:	d00a      	beq.n	8010b04 <_strtod_l+0x47c>
 8010aee:	494f      	ldr	r1, [pc, #316]	; (8010c2c <_strtod_l+0x5a4>)
 8010af0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010af4:	4652      	mov	r2, sl
 8010af6:	465b      	mov	r3, fp
 8010af8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010afc:	f7ef fd7c 	bl	80005f8 <__aeabi_dmul>
 8010b00:	4682      	mov	sl, r0
 8010b02:	468b      	mov	fp, r1
 8010b04:	f038 080f 	bics.w	r8, r8, #15
 8010b08:	d04f      	beq.n	8010baa <_strtod_l+0x522>
 8010b0a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8010b0e:	dd22      	ble.n	8010b56 <_strtod_l+0x4ce>
 8010b10:	2500      	movs	r5, #0
 8010b12:	462e      	mov	r6, r5
 8010b14:	9507      	str	r5, [sp, #28]
 8010b16:	9505      	str	r5, [sp, #20]
 8010b18:	2322      	movs	r3, #34	; 0x22
 8010b1a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8010c34 <_strtod_l+0x5ac>
 8010b1e:	6023      	str	r3, [r4, #0]
 8010b20:	f04f 0a00 	mov.w	sl, #0
 8010b24:	9b07      	ldr	r3, [sp, #28]
 8010b26:	2b00      	cmp	r3, #0
 8010b28:	f43f adf2 	beq.w	8010710 <_strtod_l+0x88>
 8010b2c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010b2e:	4620      	mov	r0, r4
 8010b30:	f001 fed2 	bl	80128d8 <_Bfree>
 8010b34:	9905      	ldr	r1, [sp, #20]
 8010b36:	4620      	mov	r0, r4
 8010b38:	f001 fece 	bl	80128d8 <_Bfree>
 8010b3c:	4631      	mov	r1, r6
 8010b3e:	4620      	mov	r0, r4
 8010b40:	f001 feca 	bl	80128d8 <_Bfree>
 8010b44:	9907      	ldr	r1, [sp, #28]
 8010b46:	4620      	mov	r0, r4
 8010b48:	f001 fec6 	bl	80128d8 <_Bfree>
 8010b4c:	4629      	mov	r1, r5
 8010b4e:	4620      	mov	r0, r4
 8010b50:	f001 fec2 	bl	80128d8 <_Bfree>
 8010b54:	e5dc      	b.n	8010710 <_strtod_l+0x88>
 8010b56:	4b36      	ldr	r3, [pc, #216]	; (8010c30 <_strtod_l+0x5a8>)
 8010b58:	9304      	str	r3, [sp, #16]
 8010b5a:	2300      	movs	r3, #0
 8010b5c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8010b60:	4650      	mov	r0, sl
 8010b62:	4659      	mov	r1, fp
 8010b64:	4699      	mov	r9, r3
 8010b66:	f1b8 0f01 	cmp.w	r8, #1
 8010b6a:	dc21      	bgt.n	8010bb0 <_strtod_l+0x528>
 8010b6c:	b10b      	cbz	r3, 8010b72 <_strtod_l+0x4ea>
 8010b6e:	4682      	mov	sl, r0
 8010b70:	468b      	mov	fp, r1
 8010b72:	4b2f      	ldr	r3, [pc, #188]	; (8010c30 <_strtod_l+0x5a8>)
 8010b74:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8010b78:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8010b7c:	4652      	mov	r2, sl
 8010b7e:	465b      	mov	r3, fp
 8010b80:	e9d9 0100 	ldrd	r0, r1, [r9]
 8010b84:	f7ef fd38 	bl	80005f8 <__aeabi_dmul>
 8010b88:	4b2a      	ldr	r3, [pc, #168]	; (8010c34 <_strtod_l+0x5ac>)
 8010b8a:	460a      	mov	r2, r1
 8010b8c:	400b      	ands	r3, r1
 8010b8e:	492a      	ldr	r1, [pc, #168]	; (8010c38 <_strtod_l+0x5b0>)
 8010b90:	428b      	cmp	r3, r1
 8010b92:	4682      	mov	sl, r0
 8010b94:	d8bc      	bhi.n	8010b10 <_strtod_l+0x488>
 8010b96:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8010b9a:	428b      	cmp	r3, r1
 8010b9c:	bf86      	itte	hi
 8010b9e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8010c3c <_strtod_l+0x5b4>
 8010ba2:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8010ba6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8010baa:	2300      	movs	r3, #0
 8010bac:	9304      	str	r3, [sp, #16]
 8010bae:	e084      	b.n	8010cba <_strtod_l+0x632>
 8010bb0:	f018 0f01 	tst.w	r8, #1
 8010bb4:	d005      	beq.n	8010bc2 <_strtod_l+0x53a>
 8010bb6:	9b04      	ldr	r3, [sp, #16]
 8010bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bbc:	f7ef fd1c 	bl	80005f8 <__aeabi_dmul>
 8010bc0:	2301      	movs	r3, #1
 8010bc2:	9a04      	ldr	r2, [sp, #16]
 8010bc4:	3208      	adds	r2, #8
 8010bc6:	f109 0901 	add.w	r9, r9, #1
 8010bca:	ea4f 0868 	mov.w	r8, r8, asr #1
 8010bce:	9204      	str	r2, [sp, #16]
 8010bd0:	e7c9      	b.n	8010b66 <_strtod_l+0x4de>
 8010bd2:	d0ea      	beq.n	8010baa <_strtod_l+0x522>
 8010bd4:	f1c8 0800 	rsb	r8, r8, #0
 8010bd8:	f018 020f 	ands.w	r2, r8, #15
 8010bdc:	d00a      	beq.n	8010bf4 <_strtod_l+0x56c>
 8010bde:	4b13      	ldr	r3, [pc, #76]	; (8010c2c <_strtod_l+0x5a4>)
 8010be0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010be4:	4650      	mov	r0, sl
 8010be6:	4659      	mov	r1, fp
 8010be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bec:	f7ef fe2e 	bl	800084c <__aeabi_ddiv>
 8010bf0:	4682      	mov	sl, r0
 8010bf2:	468b      	mov	fp, r1
 8010bf4:	ea5f 1828 	movs.w	r8, r8, asr #4
 8010bf8:	d0d7      	beq.n	8010baa <_strtod_l+0x522>
 8010bfa:	f1b8 0f1f 	cmp.w	r8, #31
 8010bfe:	dd1f      	ble.n	8010c40 <_strtod_l+0x5b8>
 8010c00:	2500      	movs	r5, #0
 8010c02:	462e      	mov	r6, r5
 8010c04:	9507      	str	r5, [sp, #28]
 8010c06:	9505      	str	r5, [sp, #20]
 8010c08:	2322      	movs	r3, #34	; 0x22
 8010c0a:	f04f 0a00 	mov.w	sl, #0
 8010c0e:	f04f 0b00 	mov.w	fp, #0
 8010c12:	6023      	str	r3, [r4, #0]
 8010c14:	e786      	b.n	8010b24 <_strtod_l+0x49c>
 8010c16:	bf00      	nop
 8010c18:	08015a19 	.word	0x08015a19
 8010c1c:	08015a54 	.word	0x08015a54
 8010c20:	08015a11 	.word	0x08015a11
 8010c24:	08015a93 	.word	0x08015a93
 8010c28:	08015d40 	.word	0x08015d40
 8010c2c:	08015c20 	.word	0x08015c20
 8010c30:	08015bf8 	.word	0x08015bf8
 8010c34:	7ff00000 	.word	0x7ff00000
 8010c38:	7ca00000 	.word	0x7ca00000
 8010c3c:	7fefffff 	.word	0x7fefffff
 8010c40:	f018 0310 	ands.w	r3, r8, #16
 8010c44:	bf18      	it	ne
 8010c46:	236a      	movne	r3, #106	; 0x6a
 8010c48:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8010ff8 <_strtod_l+0x970>
 8010c4c:	9304      	str	r3, [sp, #16]
 8010c4e:	4650      	mov	r0, sl
 8010c50:	4659      	mov	r1, fp
 8010c52:	2300      	movs	r3, #0
 8010c54:	f018 0f01 	tst.w	r8, #1
 8010c58:	d004      	beq.n	8010c64 <_strtod_l+0x5dc>
 8010c5a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8010c5e:	f7ef fccb 	bl	80005f8 <__aeabi_dmul>
 8010c62:	2301      	movs	r3, #1
 8010c64:	ea5f 0868 	movs.w	r8, r8, asr #1
 8010c68:	f109 0908 	add.w	r9, r9, #8
 8010c6c:	d1f2      	bne.n	8010c54 <_strtod_l+0x5cc>
 8010c6e:	b10b      	cbz	r3, 8010c74 <_strtod_l+0x5ec>
 8010c70:	4682      	mov	sl, r0
 8010c72:	468b      	mov	fp, r1
 8010c74:	9b04      	ldr	r3, [sp, #16]
 8010c76:	b1c3      	cbz	r3, 8010caa <_strtod_l+0x622>
 8010c78:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8010c7c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8010c80:	2b00      	cmp	r3, #0
 8010c82:	4659      	mov	r1, fp
 8010c84:	dd11      	ble.n	8010caa <_strtod_l+0x622>
 8010c86:	2b1f      	cmp	r3, #31
 8010c88:	f340 8124 	ble.w	8010ed4 <_strtod_l+0x84c>
 8010c8c:	2b34      	cmp	r3, #52	; 0x34
 8010c8e:	bfde      	ittt	le
 8010c90:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8010c94:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8010c98:	fa03 f202 	lslle.w	r2, r3, r2
 8010c9c:	f04f 0a00 	mov.w	sl, #0
 8010ca0:	bfcc      	ite	gt
 8010ca2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8010ca6:	ea02 0b01 	andle.w	fp, r2, r1
 8010caa:	2200      	movs	r2, #0
 8010cac:	2300      	movs	r3, #0
 8010cae:	4650      	mov	r0, sl
 8010cb0:	4659      	mov	r1, fp
 8010cb2:	f7ef ff09 	bl	8000ac8 <__aeabi_dcmpeq>
 8010cb6:	2800      	cmp	r0, #0
 8010cb8:	d1a2      	bne.n	8010c00 <_strtod_l+0x578>
 8010cba:	9b07      	ldr	r3, [sp, #28]
 8010cbc:	9300      	str	r3, [sp, #0]
 8010cbe:	9908      	ldr	r1, [sp, #32]
 8010cc0:	462b      	mov	r3, r5
 8010cc2:	463a      	mov	r2, r7
 8010cc4:	4620      	mov	r0, r4
 8010cc6:	f001 fe6f 	bl	80129a8 <__s2b>
 8010cca:	9007      	str	r0, [sp, #28]
 8010ccc:	2800      	cmp	r0, #0
 8010cce:	f43f af1f 	beq.w	8010b10 <_strtod_l+0x488>
 8010cd2:	9b05      	ldr	r3, [sp, #20]
 8010cd4:	1b9e      	subs	r6, r3, r6
 8010cd6:	9b06      	ldr	r3, [sp, #24]
 8010cd8:	2b00      	cmp	r3, #0
 8010cda:	bfb4      	ite	lt
 8010cdc:	4633      	movlt	r3, r6
 8010cde:	2300      	movge	r3, #0
 8010ce0:	930c      	str	r3, [sp, #48]	; 0x30
 8010ce2:	9b06      	ldr	r3, [sp, #24]
 8010ce4:	2500      	movs	r5, #0
 8010ce6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010cea:	9312      	str	r3, [sp, #72]	; 0x48
 8010cec:	462e      	mov	r6, r5
 8010cee:	9b07      	ldr	r3, [sp, #28]
 8010cf0:	4620      	mov	r0, r4
 8010cf2:	6859      	ldr	r1, [r3, #4]
 8010cf4:	f001 fdb0 	bl	8012858 <_Balloc>
 8010cf8:	9005      	str	r0, [sp, #20]
 8010cfa:	2800      	cmp	r0, #0
 8010cfc:	f43f af0c 	beq.w	8010b18 <_strtod_l+0x490>
 8010d00:	9b07      	ldr	r3, [sp, #28]
 8010d02:	691a      	ldr	r2, [r3, #16]
 8010d04:	3202      	adds	r2, #2
 8010d06:	f103 010c 	add.w	r1, r3, #12
 8010d0a:	0092      	lsls	r2, r2, #2
 8010d0c:	300c      	adds	r0, #12
 8010d0e:	f7fe fead 	bl	800fa6c <memcpy>
 8010d12:	ec4b ab10 	vmov	d0, sl, fp
 8010d16:	aa1a      	add	r2, sp, #104	; 0x68
 8010d18:	a919      	add	r1, sp, #100	; 0x64
 8010d1a:	4620      	mov	r0, r4
 8010d1c:	f002 f98a 	bl	8013034 <__d2b>
 8010d20:	ec4b ab18 	vmov	d8, sl, fp
 8010d24:	9018      	str	r0, [sp, #96]	; 0x60
 8010d26:	2800      	cmp	r0, #0
 8010d28:	f43f aef6 	beq.w	8010b18 <_strtod_l+0x490>
 8010d2c:	2101      	movs	r1, #1
 8010d2e:	4620      	mov	r0, r4
 8010d30:	f001 fed4 	bl	8012adc <__i2b>
 8010d34:	4606      	mov	r6, r0
 8010d36:	2800      	cmp	r0, #0
 8010d38:	f43f aeee 	beq.w	8010b18 <_strtod_l+0x490>
 8010d3c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8010d3e:	9904      	ldr	r1, [sp, #16]
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	bfab      	itete	ge
 8010d44:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8010d46:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8010d48:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8010d4a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8010d4e:	bfac      	ite	ge
 8010d50:	eb03 0902 	addge.w	r9, r3, r2
 8010d54:	1ad7      	sublt	r7, r2, r3
 8010d56:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8010d58:	eba3 0801 	sub.w	r8, r3, r1
 8010d5c:	4490      	add	r8, r2
 8010d5e:	4ba1      	ldr	r3, [pc, #644]	; (8010fe4 <_strtod_l+0x95c>)
 8010d60:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8010d64:	4598      	cmp	r8, r3
 8010d66:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8010d6a:	f280 80c7 	bge.w	8010efc <_strtod_l+0x874>
 8010d6e:	eba3 0308 	sub.w	r3, r3, r8
 8010d72:	2b1f      	cmp	r3, #31
 8010d74:	eba2 0203 	sub.w	r2, r2, r3
 8010d78:	f04f 0101 	mov.w	r1, #1
 8010d7c:	f300 80b1 	bgt.w	8010ee2 <_strtod_l+0x85a>
 8010d80:	fa01 f303 	lsl.w	r3, r1, r3
 8010d84:	930d      	str	r3, [sp, #52]	; 0x34
 8010d86:	2300      	movs	r3, #0
 8010d88:	9308      	str	r3, [sp, #32]
 8010d8a:	eb09 0802 	add.w	r8, r9, r2
 8010d8e:	9b04      	ldr	r3, [sp, #16]
 8010d90:	45c1      	cmp	r9, r8
 8010d92:	4417      	add	r7, r2
 8010d94:	441f      	add	r7, r3
 8010d96:	464b      	mov	r3, r9
 8010d98:	bfa8      	it	ge
 8010d9a:	4643      	movge	r3, r8
 8010d9c:	42bb      	cmp	r3, r7
 8010d9e:	bfa8      	it	ge
 8010da0:	463b      	movge	r3, r7
 8010da2:	2b00      	cmp	r3, #0
 8010da4:	bfc2      	ittt	gt
 8010da6:	eba8 0803 	subgt.w	r8, r8, r3
 8010daa:	1aff      	subgt	r7, r7, r3
 8010dac:	eba9 0903 	subgt.w	r9, r9, r3
 8010db0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	dd17      	ble.n	8010de6 <_strtod_l+0x75e>
 8010db6:	4631      	mov	r1, r6
 8010db8:	461a      	mov	r2, r3
 8010dba:	4620      	mov	r0, r4
 8010dbc:	f001 ff4e 	bl	8012c5c <__pow5mult>
 8010dc0:	4606      	mov	r6, r0
 8010dc2:	2800      	cmp	r0, #0
 8010dc4:	f43f aea8 	beq.w	8010b18 <_strtod_l+0x490>
 8010dc8:	4601      	mov	r1, r0
 8010dca:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8010dcc:	4620      	mov	r0, r4
 8010dce:	f001 fe9b 	bl	8012b08 <__multiply>
 8010dd2:	900b      	str	r0, [sp, #44]	; 0x2c
 8010dd4:	2800      	cmp	r0, #0
 8010dd6:	f43f ae9f 	beq.w	8010b18 <_strtod_l+0x490>
 8010dda:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010ddc:	4620      	mov	r0, r4
 8010dde:	f001 fd7b 	bl	80128d8 <_Bfree>
 8010de2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010de4:	9318      	str	r3, [sp, #96]	; 0x60
 8010de6:	f1b8 0f00 	cmp.w	r8, #0
 8010dea:	f300 808c 	bgt.w	8010f06 <_strtod_l+0x87e>
 8010dee:	9b06      	ldr	r3, [sp, #24]
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	dd08      	ble.n	8010e06 <_strtod_l+0x77e>
 8010df4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010df6:	9905      	ldr	r1, [sp, #20]
 8010df8:	4620      	mov	r0, r4
 8010dfa:	f001 ff2f 	bl	8012c5c <__pow5mult>
 8010dfe:	9005      	str	r0, [sp, #20]
 8010e00:	2800      	cmp	r0, #0
 8010e02:	f43f ae89 	beq.w	8010b18 <_strtod_l+0x490>
 8010e06:	2f00      	cmp	r7, #0
 8010e08:	dd08      	ble.n	8010e1c <_strtod_l+0x794>
 8010e0a:	9905      	ldr	r1, [sp, #20]
 8010e0c:	463a      	mov	r2, r7
 8010e0e:	4620      	mov	r0, r4
 8010e10:	f001 ff7e 	bl	8012d10 <__lshift>
 8010e14:	9005      	str	r0, [sp, #20]
 8010e16:	2800      	cmp	r0, #0
 8010e18:	f43f ae7e 	beq.w	8010b18 <_strtod_l+0x490>
 8010e1c:	f1b9 0f00 	cmp.w	r9, #0
 8010e20:	dd08      	ble.n	8010e34 <_strtod_l+0x7ac>
 8010e22:	4631      	mov	r1, r6
 8010e24:	464a      	mov	r2, r9
 8010e26:	4620      	mov	r0, r4
 8010e28:	f001 ff72 	bl	8012d10 <__lshift>
 8010e2c:	4606      	mov	r6, r0
 8010e2e:	2800      	cmp	r0, #0
 8010e30:	f43f ae72 	beq.w	8010b18 <_strtod_l+0x490>
 8010e34:	9a05      	ldr	r2, [sp, #20]
 8010e36:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010e38:	4620      	mov	r0, r4
 8010e3a:	f001 fff5 	bl	8012e28 <__mdiff>
 8010e3e:	4605      	mov	r5, r0
 8010e40:	2800      	cmp	r0, #0
 8010e42:	f43f ae69 	beq.w	8010b18 <_strtod_l+0x490>
 8010e46:	68c3      	ldr	r3, [r0, #12]
 8010e48:	930b      	str	r3, [sp, #44]	; 0x2c
 8010e4a:	2300      	movs	r3, #0
 8010e4c:	60c3      	str	r3, [r0, #12]
 8010e4e:	4631      	mov	r1, r6
 8010e50:	f001 ffce 	bl	8012df0 <__mcmp>
 8010e54:	2800      	cmp	r0, #0
 8010e56:	da60      	bge.n	8010f1a <_strtod_l+0x892>
 8010e58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010e5a:	ea53 030a 	orrs.w	r3, r3, sl
 8010e5e:	f040 8082 	bne.w	8010f66 <_strtod_l+0x8de>
 8010e62:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	d17d      	bne.n	8010f66 <_strtod_l+0x8de>
 8010e6a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010e6e:	0d1b      	lsrs	r3, r3, #20
 8010e70:	051b      	lsls	r3, r3, #20
 8010e72:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8010e76:	d976      	bls.n	8010f66 <_strtod_l+0x8de>
 8010e78:	696b      	ldr	r3, [r5, #20]
 8010e7a:	b913      	cbnz	r3, 8010e82 <_strtod_l+0x7fa>
 8010e7c:	692b      	ldr	r3, [r5, #16]
 8010e7e:	2b01      	cmp	r3, #1
 8010e80:	dd71      	ble.n	8010f66 <_strtod_l+0x8de>
 8010e82:	4629      	mov	r1, r5
 8010e84:	2201      	movs	r2, #1
 8010e86:	4620      	mov	r0, r4
 8010e88:	f001 ff42 	bl	8012d10 <__lshift>
 8010e8c:	4631      	mov	r1, r6
 8010e8e:	4605      	mov	r5, r0
 8010e90:	f001 ffae 	bl	8012df0 <__mcmp>
 8010e94:	2800      	cmp	r0, #0
 8010e96:	dd66      	ble.n	8010f66 <_strtod_l+0x8de>
 8010e98:	9904      	ldr	r1, [sp, #16]
 8010e9a:	4a53      	ldr	r2, [pc, #332]	; (8010fe8 <_strtod_l+0x960>)
 8010e9c:	465b      	mov	r3, fp
 8010e9e:	2900      	cmp	r1, #0
 8010ea0:	f000 8081 	beq.w	8010fa6 <_strtod_l+0x91e>
 8010ea4:	ea02 010b 	and.w	r1, r2, fp
 8010ea8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8010eac:	dc7b      	bgt.n	8010fa6 <_strtod_l+0x91e>
 8010eae:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8010eb2:	f77f aea9 	ble.w	8010c08 <_strtod_l+0x580>
 8010eb6:	4b4d      	ldr	r3, [pc, #308]	; (8010fec <_strtod_l+0x964>)
 8010eb8:	4650      	mov	r0, sl
 8010eba:	4659      	mov	r1, fp
 8010ebc:	2200      	movs	r2, #0
 8010ebe:	f7ef fb9b 	bl	80005f8 <__aeabi_dmul>
 8010ec2:	460b      	mov	r3, r1
 8010ec4:	4303      	orrs	r3, r0
 8010ec6:	bf08      	it	eq
 8010ec8:	2322      	moveq	r3, #34	; 0x22
 8010eca:	4682      	mov	sl, r0
 8010ecc:	468b      	mov	fp, r1
 8010ece:	bf08      	it	eq
 8010ed0:	6023      	streq	r3, [r4, #0]
 8010ed2:	e62b      	b.n	8010b2c <_strtod_l+0x4a4>
 8010ed4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8010edc:	ea03 0a0a 	and.w	sl, r3, sl
 8010ee0:	e6e3      	b.n	8010caa <_strtod_l+0x622>
 8010ee2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8010ee6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8010eea:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8010eee:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8010ef2:	fa01 f308 	lsl.w	r3, r1, r8
 8010ef6:	9308      	str	r3, [sp, #32]
 8010ef8:	910d      	str	r1, [sp, #52]	; 0x34
 8010efa:	e746      	b.n	8010d8a <_strtod_l+0x702>
 8010efc:	2300      	movs	r3, #0
 8010efe:	9308      	str	r3, [sp, #32]
 8010f00:	2301      	movs	r3, #1
 8010f02:	930d      	str	r3, [sp, #52]	; 0x34
 8010f04:	e741      	b.n	8010d8a <_strtod_l+0x702>
 8010f06:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010f08:	4642      	mov	r2, r8
 8010f0a:	4620      	mov	r0, r4
 8010f0c:	f001 ff00 	bl	8012d10 <__lshift>
 8010f10:	9018      	str	r0, [sp, #96]	; 0x60
 8010f12:	2800      	cmp	r0, #0
 8010f14:	f47f af6b 	bne.w	8010dee <_strtod_l+0x766>
 8010f18:	e5fe      	b.n	8010b18 <_strtod_l+0x490>
 8010f1a:	465f      	mov	r7, fp
 8010f1c:	d16e      	bne.n	8010ffc <_strtod_l+0x974>
 8010f1e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010f20:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010f24:	b342      	cbz	r2, 8010f78 <_strtod_l+0x8f0>
 8010f26:	4a32      	ldr	r2, [pc, #200]	; (8010ff0 <_strtod_l+0x968>)
 8010f28:	4293      	cmp	r3, r2
 8010f2a:	d128      	bne.n	8010f7e <_strtod_l+0x8f6>
 8010f2c:	9b04      	ldr	r3, [sp, #16]
 8010f2e:	4651      	mov	r1, sl
 8010f30:	b1eb      	cbz	r3, 8010f6e <_strtod_l+0x8e6>
 8010f32:	4b2d      	ldr	r3, [pc, #180]	; (8010fe8 <_strtod_l+0x960>)
 8010f34:	403b      	ands	r3, r7
 8010f36:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8010f3a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010f3e:	d819      	bhi.n	8010f74 <_strtod_l+0x8ec>
 8010f40:	0d1b      	lsrs	r3, r3, #20
 8010f42:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010f46:	fa02 f303 	lsl.w	r3, r2, r3
 8010f4a:	4299      	cmp	r1, r3
 8010f4c:	d117      	bne.n	8010f7e <_strtod_l+0x8f6>
 8010f4e:	4b29      	ldr	r3, [pc, #164]	; (8010ff4 <_strtod_l+0x96c>)
 8010f50:	429f      	cmp	r7, r3
 8010f52:	d102      	bne.n	8010f5a <_strtod_l+0x8d2>
 8010f54:	3101      	adds	r1, #1
 8010f56:	f43f addf 	beq.w	8010b18 <_strtod_l+0x490>
 8010f5a:	4b23      	ldr	r3, [pc, #140]	; (8010fe8 <_strtod_l+0x960>)
 8010f5c:	403b      	ands	r3, r7
 8010f5e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8010f62:	f04f 0a00 	mov.w	sl, #0
 8010f66:	9b04      	ldr	r3, [sp, #16]
 8010f68:	2b00      	cmp	r3, #0
 8010f6a:	d1a4      	bne.n	8010eb6 <_strtod_l+0x82e>
 8010f6c:	e5de      	b.n	8010b2c <_strtod_l+0x4a4>
 8010f6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010f72:	e7ea      	b.n	8010f4a <_strtod_l+0x8c2>
 8010f74:	4613      	mov	r3, r2
 8010f76:	e7e8      	b.n	8010f4a <_strtod_l+0x8c2>
 8010f78:	ea53 030a 	orrs.w	r3, r3, sl
 8010f7c:	d08c      	beq.n	8010e98 <_strtod_l+0x810>
 8010f7e:	9b08      	ldr	r3, [sp, #32]
 8010f80:	b1db      	cbz	r3, 8010fba <_strtod_l+0x932>
 8010f82:	423b      	tst	r3, r7
 8010f84:	d0ef      	beq.n	8010f66 <_strtod_l+0x8de>
 8010f86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010f88:	9a04      	ldr	r2, [sp, #16]
 8010f8a:	4650      	mov	r0, sl
 8010f8c:	4659      	mov	r1, fp
 8010f8e:	b1c3      	cbz	r3, 8010fc2 <_strtod_l+0x93a>
 8010f90:	f7ff fb5c 	bl	801064c <sulp>
 8010f94:	4602      	mov	r2, r0
 8010f96:	460b      	mov	r3, r1
 8010f98:	ec51 0b18 	vmov	r0, r1, d8
 8010f9c:	f7ef f976 	bl	800028c <__adddf3>
 8010fa0:	4682      	mov	sl, r0
 8010fa2:	468b      	mov	fp, r1
 8010fa4:	e7df      	b.n	8010f66 <_strtod_l+0x8de>
 8010fa6:	4013      	ands	r3, r2
 8010fa8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8010fac:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8010fb0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8010fb4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8010fb8:	e7d5      	b.n	8010f66 <_strtod_l+0x8de>
 8010fba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010fbc:	ea13 0f0a 	tst.w	r3, sl
 8010fc0:	e7e0      	b.n	8010f84 <_strtod_l+0x8fc>
 8010fc2:	f7ff fb43 	bl	801064c <sulp>
 8010fc6:	4602      	mov	r2, r0
 8010fc8:	460b      	mov	r3, r1
 8010fca:	ec51 0b18 	vmov	r0, r1, d8
 8010fce:	f7ef f95b 	bl	8000288 <__aeabi_dsub>
 8010fd2:	2200      	movs	r2, #0
 8010fd4:	2300      	movs	r3, #0
 8010fd6:	4682      	mov	sl, r0
 8010fd8:	468b      	mov	fp, r1
 8010fda:	f7ef fd75 	bl	8000ac8 <__aeabi_dcmpeq>
 8010fde:	2800      	cmp	r0, #0
 8010fe0:	d0c1      	beq.n	8010f66 <_strtod_l+0x8de>
 8010fe2:	e611      	b.n	8010c08 <_strtod_l+0x580>
 8010fe4:	fffffc02 	.word	0xfffffc02
 8010fe8:	7ff00000 	.word	0x7ff00000
 8010fec:	39500000 	.word	0x39500000
 8010ff0:	000fffff 	.word	0x000fffff
 8010ff4:	7fefffff 	.word	0x7fefffff
 8010ff8:	08015a68 	.word	0x08015a68
 8010ffc:	4631      	mov	r1, r6
 8010ffe:	4628      	mov	r0, r5
 8011000:	f002 f874 	bl	80130ec <__ratio>
 8011004:	ec59 8b10 	vmov	r8, r9, d0
 8011008:	ee10 0a10 	vmov	r0, s0
 801100c:	2200      	movs	r2, #0
 801100e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011012:	4649      	mov	r1, r9
 8011014:	f7ef fd6c 	bl	8000af0 <__aeabi_dcmple>
 8011018:	2800      	cmp	r0, #0
 801101a:	d07a      	beq.n	8011112 <_strtod_l+0xa8a>
 801101c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801101e:	2b00      	cmp	r3, #0
 8011020:	d04a      	beq.n	80110b8 <_strtod_l+0xa30>
 8011022:	4b95      	ldr	r3, [pc, #596]	; (8011278 <_strtod_l+0xbf0>)
 8011024:	2200      	movs	r2, #0
 8011026:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801102a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8011278 <_strtod_l+0xbf0>
 801102e:	f04f 0800 	mov.w	r8, #0
 8011032:	4b92      	ldr	r3, [pc, #584]	; (801127c <_strtod_l+0xbf4>)
 8011034:	403b      	ands	r3, r7
 8011036:	930d      	str	r3, [sp, #52]	; 0x34
 8011038:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801103a:	4b91      	ldr	r3, [pc, #580]	; (8011280 <_strtod_l+0xbf8>)
 801103c:	429a      	cmp	r2, r3
 801103e:	f040 80b0 	bne.w	80111a2 <_strtod_l+0xb1a>
 8011042:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8011046:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801104a:	ec4b ab10 	vmov	d0, sl, fp
 801104e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8011052:	f001 ff73 	bl	8012f3c <__ulp>
 8011056:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801105a:	ec53 2b10 	vmov	r2, r3, d0
 801105e:	f7ef facb 	bl	80005f8 <__aeabi_dmul>
 8011062:	4652      	mov	r2, sl
 8011064:	465b      	mov	r3, fp
 8011066:	f7ef f911 	bl	800028c <__adddf3>
 801106a:	460b      	mov	r3, r1
 801106c:	4983      	ldr	r1, [pc, #524]	; (801127c <_strtod_l+0xbf4>)
 801106e:	4a85      	ldr	r2, [pc, #532]	; (8011284 <_strtod_l+0xbfc>)
 8011070:	4019      	ands	r1, r3
 8011072:	4291      	cmp	r1, r2
 8011074:	4682      	mov	sl, r0
 8011076:	d960      	bls.n	801113a <_strtod_l+0xab2>
 8011078:	ee18 3a90 	vmov	r3, s17
 801107c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8011080:	4293      	cmp	r3, r2
 8011082:	d104      	bne.n	801108e <_strtod_l+0xa06>
 8011084:	ee18 3a10 	vmov	r3, s16
 8011088:	3301      	adds	r3, #1
 801108a:	f43f ad45 	beq.w	8010b18 <_strtod_l+0x490>
 801108e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8011290 <_strtod_l+0xc08>
 8011092:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8011096:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011098:	4620      	mov	r0, r4
 801109a:	f001 fc1d 	bl	80128d8 <_Bfree>
 801109e:	9905      	ldr	r1, [sp, #20]
 80110a0:	4620      	mov	r0, r4
 80110a2:	f001 fc19 	bl	80128d8 <_Bfree>
 80110a6:	4631      	mov	r1, r6
 80110a8:	4620      	mov	r0, r4
 80110aa:	f001 fc15 	bl	80128d8 <_Bfree>
 80110ae:	4629      	mov	r1, r5
 80110b0:	4620      	mov	r0, r4
 80110b2:	f001 fc11 	bl	80128d8 <_Bfree>
 80110b6:	e61a      	b.n	8010cee <_strtod_l+0x666>
 80110b8:	f1ba 0f00 	cmp.w	sl, #0
 80110bc:	d11b      	bne.n	80110f6 <_strtod_l+0xa6e>
 80110be:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80110c2:	b9f3      	cbnz	r3, 8011102 <_strtod_l+0xa7a>
 80110c4:	4b6c      	ldr	r3, [pc, #432]	; (8011278 <_strtod_l+0xbf0>)
 80110c6:	2200      	movs	r2, #0
 80110c8:	4640      	mov	r0, r8
 80110ca:	4649      	mov	r1, r9
 80110cc:	f7ef fd06 	bl	8000adc <__aeabi_dcmplt>
 80110d0:	b9d0      	cbnz	r0, 8011108 <_strtod_l+0xa80>
 80110d2:	4640      	mov	r0, r8
 80110d4:	4649      	mov	r1, r9
 80110d6:	4b6c      	ldr	r3, [pc, #432]	; (8011288 <_strtod_l+0xc00>)
 80110d8:	2200      	movs	r2, #0
 80110da:	f7ef fa8d 	bl	80005f8 <__aeabi_dmul>
 80110de:	4680      	mov	r8, r0
 80110e0:	4689      	mov	r9, r1
 80110e2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80110e6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80110ea:	9315      	str	r3, [sp, #84]	; 0x54
 80110ec:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80110f0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80110f4:	e79d      	b.n	8011032 <_strtod_l+0x9aa>
 80110f6:	f1ba 0f01 	cmp.w	sl, #1
 80110fa:	d102      	bne.n	8011102 <_strtod_l+0xa7a>
 80110fc:	2f00      	cmp	r7, #0
 80110fe:	f43f ad83 	beq.w	8010c08 <_strtod_l+0x580>
 8011102:	4b62      	ldr	r3, [pc, #392]	; (801128c <_strtod_l+0xc04>)
 8011104:	2200      	movs	r2, #0
 8011106:	e78e      	b.n	8011026 <_strtod_l+0x99e>
 8011108:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8011288 <_strtod_l+0xc00>
 801110c:	f04f 0800 	mov.w	r8, #0
 8011110:	e7e7      	b.n	80110e2 <_strtod_l+0xa5a>
 8011112:	4b5d      	ldr	r3, [pc, #372]	; (8011288 <_strtod_l+0xc00>)
 8011114:	4640      	mov	r0, r8
 8011116:	4649      	mov	r1, r9
 8011118:	2200      	movs	r2, #0
 801111a:	f7ef fa6d 	bl	80005f8 <__aeabi_dmul>
 801111e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011120:	4680      	mov	r8, r0
 8011122:	4689      	mov	r9, r1
 8011124:	b933      	cbnz	r3, 8011134 <_strtod_l+0xaac>
 8011126:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801112a:	900e      	str	r0, [sp, #56]	; 0x38
 801112c:	930f      	str	r3, [sp, #60]	; 0x3c
 801112e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8011132:	e7dd      	b.n	80110f0 <_strtod_l+0xa68>
 8011134:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8011138:	e7f9      	b.n	801112e <_strtod_l+0xaa6>
 801113a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801113e:	9b04      	ldr	r3, [sp, #16]
 8011140:	2b00      	cmp	r3, #0
 8011142:	d1a8      	bne.n	8011096 <_strtod_l+0xa0e>
 8011144:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011148:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801114a:	0d1b      	lsrs	r3, r3, #20
 801114c:	051b      	lsls	r3, r3, #20
 801114e:	429a      	cmp	r2, r3
 8011150:	d1a1      	bne.n	8011096 <_strtod_l+0xa0e>
 8011152:	4640      	mov	r0, r8
 8011154:	4649      	mov	r1, r9
 8011156:	f7ef fdff 	bl	8000d58 <__aeabi_d2lz>
 801115a:	f7ef fa1f 	bl	800059c <__aeabi_l2d>
 801115e:	4602      	mov	r2, r0
 8011160:	460b      	mov	r3, r1
 8011162:	4640      	mov	r0, r8
 8011164:	4649      	mov	r1, r9
 8011166:	f7ef f88f 	bl	8000288 <__aeabi_dsub>
 801116a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801116c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011170:	ea43 030a 	orr.w	r3, r3, sl
 8011174:	4313      	orrs	r3, r2
 8011176:	4680      	mov	r8, r0
 8011178:	4689      	mov	r9, r1
 801117a:	d055      	beq.n	8011228 <_strtod_l+0xba0>
 801117c:	a336      	add	r3, pc, #216	; (adr r3, 8011258 <_strtod_l+0xbd0>)
 801117e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011182:	f7ef fcab 	bl	8000adc <__aeabi_dcmplt>
 8011186:	2800      	cmp	r0, #0
 8011188:	f47f acd0 	bne.w	8010b2c <_strtod_l+0x4a4>
 801118c:	a334      	add	r3, pc, #208	; (adr r3, 8011260 <_strtod_l+0xbd8>)
 801118e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011192:	4640      	mov	r0, r8
 8011194:	4649      	mov	r1, r9
 8011196:	f7ef fcbf 	bl	8000b18 <__aeabi_dcmpgt>
 801119a:	2800      	cmp	r0, #0
 801119c:	f43f af7b 	beq.w	8011096 <_strtod_l+0xa0e>
 80111a0:	e4c4      	b.n	8010b2c <_strtod_l+0x4a4>
 80111a2:	9b04      	ldr	r3, [sp, #16]
 80111a4:	b333      	cbz	r3, 80111f4 <_strtod_l+0xb6c>
 80111a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80111a8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80111ac:	d822      	bhi.n	80111f4 <_strtod_l+0xb6c>
 80111ae:	a32e      	add	r3, pc, #184	; (adr r3, 8011268 <_strtod_l+0xbe0>)
 80111b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111b4:	4640      	mov	r0, r8
 80111b6:	4649      	mov	r1, r9
 80111b8:	f7ef fc9a 	bl	8000af0 <__aeabi_dcmple>
 80111bc:	b1a0      	cbz	r0, 80111e8 <_strtod_l+0xb60>
 80111be:	4649      	mov	r1, r9
 80111c0:	4640      	mov	r0, r8
 80111c2:	f7ef fcf1 	bl	8000ba8 <__aeabi_d2uiz>
 80111c6:	2801      	cmp	r0, #1
 80111c8:	bf38      	it	cc
 80111ca:	2001      	movcc	r0, #1
 80111cc:	f7ef f99a 	bl	8000504 <__aeabi_ui2d>
 80111d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80111d2:	4680      	mov	r8, r0
 80111d4:	4689      	mov	r9, r1
 80111d6:	bb23      	cbnz	r3, 8011222 <_strtod_l+0xb9a>
 80111d8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80111dc:	9010      	str	r0, [sp, #64]	; 0x40
 80111de:	9311      	str	r3, [sp, #68]	; 0x44
 80111e0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80111e4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80111e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80111ea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80111ec:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80111f0:	1a9b      	subs	r3, r3, r2
 80111f2:	9309      	str	r3, [sp, #36]	; 0x24
 80111f4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80111f8:	eeb0 0a48 	vmov.f32	s0, s16
 80111fc:	eef0 0a68 	vmov.f32	s1, s17
 8011200:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8011204:	f001 fe9a 	bl	8012f3c <__ulp>
 8011208:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801120c:	ec53 2b10 	vmov	r2, r3, d0
 8011210:	f7ef f9f2 	bl	80005f8 <__aeabi_dmul>
 8011214:	ec53 2b18 	vmov	r2, r3, d8
 8011218:	f7ef f838 	bl	800028c <__adddf3>
 801121c:	4682      	mov	sl, r0
 801121e:	468b      	mov	fp, r1
 8011220:	e78d      	b.n	801113e <_strtod_l+0xab6>
 8011222:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8011226:	e7db      	b.n	80111e0 <_strtod_l+0xb58>
 8011228:	a311      	add	r3, pc, #68	; (adr r3, 8011270 <_strtod_l+0xbe8>)
 801122a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801122e:	f7ef fc55 	bl	8000adc <__aeabi_dcmplt>
 8011232:	e7b2      	b.n	801119a <_strtod_l+0xb12>
 8011234:	2300      	movs	r3, #0
 8011236:	930a      	str	r3, [sp, #40]	; 0x28
 8011238:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801123a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801123c:	6013      	str	r3, [r2, #0]
 801123e:	f7ff ba6b 	b.w	8010718 <_strtod_l+0x90>
 8011242:	2a65      	cmp	r2, #101	; 0x65
 8011244:	f43f ab5f 	beq.w	8010906 <_strtod_l+0x27e>
 8011248:	2a45      	cmp	r2, #69	; 0x45
 801124a:	f43f ab5c 	beq.w	8010906 <_strtod_l+0x27e>
 801124e:	2301      	movs	r3, #1
 8011250:	f7ff bb94 	b.w	801097c <_strtod_l+0x2f4>
 8011254:	f3af 8000 	nop.w
 8011258:	94a03595 	.word	0x94a03595
 801125c:	3fdfffff 	.word	0x3fdfffff
 8011260:	35afe535 	.word	0x35afe535
 8011264:	3fe00000 	.word	0x3fe00000
 8011268:	ffc00000 	.word	0xffc00000
 801126c:	41dfffff 	.word	0x41dfffff
 8011270:	94a03595 	.word	0x94a03595
 8011274:	3fcfffff 	.word	0x3fcfffff
 8011278:	3ff00000 	.word	0x3ff00000
 801127c:	7ff00000 	.word	0x7ff00000
 8011280:	7fe00000 	.word	0x7fe00000
 8011284:	7c9fffff 	.word	0x7c9fffff
 8011288:	3fe00000 	.word	0x3fe00000
 801128c:	bff00000 	.word	0xbff00000
 8011290:	7fefffff 	.word	0x7fefffff

08011294 <strtod>:
 8011294:	460a      	mov	r2, r1
 8011296:	4601      	mov	r1, r0
 8011298:	4802      	ldr	r0, [pc, #8]	; (80112a4 <strtod+0x10>)
 801129a:	4b03      	ldr	r3, [pc, #12]	; (80112a8 <strtod+0x14>)
 801129c:	6800      	ldr	r0, [r0, #0]
 801129e:	f7ff b9f3 	b.w	8010688 <_strtod_l>
 80112a2:	bf00      	nop
 80112a4:	20000260 	.word	0x20000260
 80112a8:	200002c8 	.word	0x200002c8

080112ac <_strtol_l.constprop.0>:
 80112ac:	2b01      	cmp	r3, #1
 80112ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80112b2:	d001      	beq.n	80112b8 <_strtol_l.constprop.0+0xc>
 80112b4:	2b24      	cmp	r3, #36	; 0x24
 80112b6:	d906      	bls.n	80112c6 <_strtol_l.constprop.0+0x1a>
 80112b8:	f7fe faf2 	bl	800f8a0 <__errno>
 80112bc:	2316      	movs	r3, #22
 80112be:	6003      	str	r3, [r0, #0]
 80112c0:	2000      	movs	r0, #0
 80112c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80112c6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80113ac <_strtol_l.constprop.0+0x100>
 80112ca:	460d      	mov	r5, r1
 80112cc:	462e      	mov	r6, r5
 80112ce:	f815 4b01 	ldrb.w	r4, [r5], #1
 80112d2:	f814 700c 	ldrb.w	r7, [r4, ip]
 80112d6:	f017 0708 	ands.w	r7, r7, #8
 80112da:	d1f7      	bne.n	80112cc <_strtol_l.constprop.0+0x20>
 80112dc:	2c2d      	cmp	r4, #45	; 0x2d
 80112de:	d132      	bne.n	8011346 <_strtol_l.constprop.0+0x9a>
 80112e0:	782c      	ldrb	r4, [r5, #0]
 80112e2:	2701      	movs	r7, #1
 80112e4:	1cb5      	adds	r5, r6, #2
 80112e6:	2b00      	cmp	r3, #0
 80112e8:	d05b      	beq.n	80113a2 <_strtol_l.constprop.0+0xf6>
 80112ea:	2b10      	cmp	r3, #16
 80112ec:	d109      	bne.n	8011302 <_strtol_l.constprop.0+0x56>
 80112ee:	2c30      	cmp	r4, #48	; 0x30
 80112f0:	d107      	bne.n	8011302 <_strtol_l.constprop.0+0x56>
 80112f2:	782c      	ldrb	r4, [r5, #0]
 80112f4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80112f8:	2c58      	cmp	r4, #88	; 0x58
 80112fa:	d14d      	bne.n	8011398 <_strtol_l.constprop.0+0xec>
 80112fc:	786c      	ldrb	r4, [r5, #1]
 80112fe:	2310      	movs	r3, #16
 8011300:	3502      	adds	r5, #2
 8011302:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8011306:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 801130a:	f04f 0c00 	mov.w	ip, #0
 801130e:	fbb8 f9f3 	udiv	r9, r8, r3
 8011312:	4666      	mov	r6, ip
 8011314:	fb03 8a19 	mls	sl, r3, r9, r8
 8011318:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 801131c:	f1be 0f09 	cmp.w	lr, #9
 8011320:	d816      	bhi.n	8011350 <_strtol_l.constprop.0+0xa4>
 8011322:	4674      	mov	r4, lr
 8011324:	42a3      	cmp	r3, r4
 8011326:	dd24      	ble.n	8011372 <_strtol_l.constprop.0+0xc6>
 8011328:	f1bc 0f00 	cmp.w	ip, #0
 801132c:	db1e      	blt.n	801136c <_strtol_l.constprop.0+0xc0>
 801132e:	45b1      	cmp	r9, r6
 8011330:	d31c      	bcc.n	801136c <_strtol_l.constprop.0+0xc0>
 8011332:	d101      	bne.n	8011338 <_strtol_l.constprop.0+0x8c>
 8011334:	45a2      	cmp	sl, r4
 8011336:	db19      	blt.n	801136c <_strtol_l.constprop.0+0xc0>
 8011338:	fb06 4603 	mla	r6, r6, r3, r4
 801133c:	f04f 0c01 	mov.w	ip, #1
 8011340:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011344:	e7e8      	b.n	8011318 <_strtol_l.constprop.0+0x6c>
 8011346:	2c2b      	cmp	r4, #43	; 0x2b
 8011348:	bf04      	itt	eq
 801134a:	782c      	ldrbeq	r4, [r5, #0]
 801134c:	1cb5      	addeq	r5, r6, #2
 801134e:	e7ca      	b.n	80112e6 <_strtol_l.constprop.0+0x3a>
 8011350:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8011354:	f1be 0f19 	cmp.w	lr, #25
 8011358:	d801      	bhi.n	801135e <_strtol_l.constprop.0+0xb2>
 801135a:	3c37      	subs	r4, #55	; 0x37
 801135c:	e7e2      	b.n	8011324 <_strtol_l.constprop.0+0x78>
 801135e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8011362:	f1be 0f19 	cmp.w	lr, #25
 8011366:	d804      	bhi.n	8011372 <_strtol_l.constprop.0+0xc6>
 8011368:	3c57      	subs	r4, #87	; 0x57
 801136a:	e7db      	b.n	8011324 <_strtol_l.constprop.0+0x78>
 801136c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8011370:	e7e6      	b.n	8011340 <_strtol_l.constprop.0+0x94>
 8011372:	f1bc 0f00 	cmp.w	ip, #0
 8011376:	da05      	bge.n	8011384 <_strtol_l.constprop.0+0xd8>
 8011378:	2322      	movs	r3, #34	; 0x22
 801137a:	6003      	str	r3, [r0, #0]
 801137c:	4646      	mov	r6, r8
 801137e:	b942      	cbnz	r2, 8011392 <_strtol_l.constprop.0+0xe6>
 8011380:	4630      	mov	r0, r6
 8011382:	e79e      	b.n	80112c2 <_strtol_l.constprop.0+0x16>
 8011384:	b107      	cbz	r7, 8011388 <_strtol_l.constprop.0+0xdc>
 8011386:	4276      	negs	r6, r6
 8011388:	2a00      	cmp	r2, #0
 801138a:	d0f9      	beq.n	8011380 <_strtol_l.constprop.0+0xd4>
 801138c:	f1bc 0f00 	cmp.w	ip, #0
 8011390:	d000      	beq.n	8011394 <_strtol_l.constprop.0+0xe8>
 8011392:	1e69      	subs	r1, r5, #1
 8011394:	6011      	str	r1, [r2, #0]
 8011396:	e7f3      	b.n	8011380 <_strtol_l.constprop.0+0xd4>
 8011398:	2430      	movs	r4, #48	; 0x30
 801139a:	2b00      	cmp	r3, #0
 801139c:	d1b1      	bne.n	8011302 <_strtol_l.constprop.0+0x56>
 801139e:	2308      	movs	r3, #8
 80113a0:	e7af      	b.n	8011302 <_strtol_l.constprop.0+0x56>
 80113a2:	2c30      	cmp	r4, #48	; 0x30
 80113a4:	d0a5      	beq.n	80112f2 <_strtol_l.constprop.0+0x46>
 80113a6:	230a      	movs	r3, #10
 80113a8:	e7ab      	b.n	8011302 <_strtol_l.constprop.0+0x56>
 80113aa:	bf00      	nop
 80113ac:	08015905 	.word	0x08015905

080113b0 <strtol>:
 80113b0:	4613      	mov	r3, r2
 80113b2:	460a      	mov	r2, r1
 80113b4:	4601      	mov	r1, r0
 80113b6:	4802      	ldr	r0, [pc, #8]	; (80113c0 <strtol+0x10>)
 80113b8:	6800      	ldr	r0, [r0, #0]
 80113ba:	f7ff bf77 	b.w	80112ac <_strtol_l.constprop.0>
 80113be:	bf00      	nop
 80113c0:	20000260 	.word	0x20000260

080113c4 <_vsniprintf_r>:
 80113c4:	b530      	push	{r4, r5, lr}
 80113c6:	4614      	mov	r4, r2
 80113c8:	2c00      	cmp	r4, #0
 80113ca:	b09b      	sub	sp, #108	; 0x6c
 80113cc:	4605      	mov	r5, r0
 80113ce:	461a      	mov	r2, r3
 80113d0:	da05      	bge.n	80113de <_vsniprintf_r+0x1a>
 80113d2:	238b      	movs	r3, #139	; 0x8b
 80113d4:	6003      	str	r3, [r0, #0]
 80113d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80113da:	b01b      	add	sp, #108	; 0x6c
 80113dc:	bd30      	pop	{r4, r5, pc}
 80113de:	f44f 7302 	mov.w	r3, #520	; 0x208
 80113e2:	f8ad 300c 	strh.w	r3, [sp, #12]
 80113e6:	bf14      	ite	ne
 80113e8:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80113ec:	4623      	moveq	r3, r4
 80113ee:	9302      	str	r3, [sp, #8]
 80113f0:	9305      	str	r3, [sp, #20]
 80113f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80113f6:	9100      	str	r1, [sp, #0]
 80113f8:	9104      	str	r1, [sp, #16]
 80113fa:	f8ad 300e 	strh.w	r3, [sp, #14]
 80113fe:	4669      	mov	r1, sp
 8011400:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8011402:	f001 ff45 	bl	8013290 <_svfiprintf_r>
 8011406:	1c43      	adds	r3, r0, #1
 8011408:	bfbc      	itt	lt
 801140a:	238b      	movlt	r3, #139	; 0x8b
 801140c:	602b      	strlt	r3, [r5, #0]
 801140e:	2c00      	cmp	r4, #0
 8011410:	d0e3      	beq.n	80113da <_vsniprintf_r+0x16>
 8011412:	9b00      	ldr	r3, [sp, #0]
 8011414:	2200      	movs	r2, #0
 8011416:	701a      	strb	r2, [r3, #0]
 8011418:	e7df      	b.n	80113da <_vsniprintf_r+0x16>
	...

0801141c <vsniprintf>:
 801141c:	b507      	push	{r0, r1, r2, lr}
 801141e:	9300      	str	r3, [sp, #0]
 8011420:	4613      	mov	r3, r2
 8011422:	460a      	mov	r2, r1
 8011424:	4601      	mov	r1, r0
 8011426:	4803      	ldr	r0, [pc, #12]	; (8011434 <vsniprintf+0x18>)
 8011428:	6800      	ldr	r0, [r0, #0]
 801142a:	f7ff ffcb 	bl	80113c4 <_vsniprintf_r>
 801142e:	b003      	add	sp, #12
 8011430:	f85d fb04 	ldr.w	pc, [sp], #4
 8011434:	20000260 	.word	0x20000260

08011438 <quorem>:
 8011438:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801143c:	6903      	ldr	r3, [r0, #16]
 801143e:	690c      	ldr	r4, [r1, #16]
 8011440:	42a3      	cmp	r3, r4
 8011442:	4607      	mov	r7, r0
 8011444:	f2c0 8081 	blt.w	801154a <quorem+0x112>
 8011448:	3c01      	subs	r4, #1
 801144a:	f101 0814 	add.w	r8, r1, #20
 801144e:	f100 0514 	add.w	r5, r0, #20
 8011452:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011456:	9301      	str	r3, [sp, #4]
 8011458:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801145c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011460:	3301      	adds	r3, #1
 8011462:	429a      	cmp	r2, r3
 8011464:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8011468:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801146c:	fbb2 f6f3 	udiv	r6, r2, r3
 8011470:	d331      	bcc.n	80114d6 <quorem+0x9e>
 8011472:	f04f 0e00 	mov.w	lr, #0
 8011476:	4640      	mov	r0, r8
 8011478:	46ac      	mov	ip, r5
 801147a:	46f2      	mov	sl, lr
 801147c:	f850 2b04 	ldr.w	r2, [r0], #4
 8011480:	b293      	uxth	r3, r2
 8011482:	fb06 e303 	mla	r3, r6, r3, lr
 8011486:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801148a:	b29b      	uxth	r3, r3
 801148c:	ebaa 0303 	sub.w	r3, sl, r3
 8011490:	f8dc a000 	ldr.w	sl, [ip]
 8011494:	0c12      	lsrs	r2, r2, #16
 8011496:	fa13 f38a 	uxtah	r3, r3, sl
 801149a:	fb06 e202 	mla	r2, r6, r2, lr
 801149e:	9300      	str	r3, [sp, #0]
 80114a0:	9b00      	ldr	r3, [sp, #0]
 80114a2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80114a6:	b292      	uxth	r2, r2
 80114a8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80114ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80114b0:	f8bd 3000 	ldrh.w	r3, [sp]
 80114b4:	4581      	cmp	r9, r0
 80114b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80114ba:	f84c 3b04 	str.w	r3, [ip], #4
 80114be:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80114c2:	d2db      	bcs.n	801147c <quorem+0x44>
 80114c4:	f855 300b 	ldr.w	r3, [r5, fp]
 80114c8:	b92b      	cbnz	r3, 80114d6 <quorem+0x9e>
 80114ca:	9b01      	ldr	r3, [sp, #4]
 80114cc:	3b04      	subs	r3, #4
 80114ce:	429d      	cmp	r5, r3
 80114d0:	461a      	mov	r2, r3
 80114d2:	d32e      	bcc.n	8011532 <quorem+0xfa>
 80114d4:	613c      	str	r4, [r7, #16]
 80114d6:	4638      	mov	r0, r7
 80114d8:	f001 fc8a 	bl	8012df0 <__mcmp>
 80114dc:	2800      	cmp	r0, #0
 80114de:	db24      	blt.n	801152a <quorem+0xf2>
 80114e0:	3601      	adds	r6, #1
 80114e2:	4628      	mov	r0, r5
 80114e4:	f04f 0c00 	mov.w	ip, #0
 80114e8:	f858 2b04 	ldr.w	r2, [r8], #4
 80114ec:	f8d0 e000 	ldr.w	lr, [r0]
 80114f0:	b293      	uxth	r3, r2
 80114f2:	ebac 0303 	sub.w	r3, ip, r3
 80114f6:	0c12      	lsrs	r2, r2, #16
 80114f8:	fa13 f38e 	uxtah	r3, r3, lr
 80114fc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8011500:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011504:	b29b      	uxth	r3, r3
 8011506:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801150a:	45c1      	cmp	r9, r8
 801150c:	f840 3b04 	str.w	r3, [r0], #4
 8011510:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8011514:	d2e8      	bcs.n	80114e8 <quorem+0xb0>
 8011516:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801151a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801151e:	b922      	cbnz	r2, 801152a <quorem+0xf2>
 8011520:	3b04      	subs	r3, #4
 8011522:	429d      	cmp	r5, r3
 8011524:	461a      	mov	r2, r3
 8011526:	d30a      	bcc.n	801153e <quorem+0x106>
 8011528:	613c      	str	r4, [r7, #16]
 801152a:	4630      	mov	r0, r6
 801152c:	b003      	add	sp, #12
 801152e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011532:	6812      	ldr	r2, [r2, #0]
 8011534:	3b04      	subs	r3, #4
 8011536:	2a00      	cmp	r2, #0
 8011538:	d1cc      	bne.n	80114d4 <quorem+0x9c>
 801153a:	3c01      	subs	r4, #1
 801153c:	e7c7      	b.n	80114ce <quorem+0x96>
 801153e:	6812      	ldr	r2, [r2, #0]
 8011540:	3b04      	subs	r3, #4
 8011542:	2a00      	cmp	r2, #0
 8011544:	d1f0      	bne.n	8011528 <quorem+0xf0>
 8011546:	3c01      	subs	r4, #1
 8011548:	e7eb      	b.n	8011522 <quorem+0xea>
 801154a:	2000      	movs	r0, #0
 801154c:	e7ee      	b.n	801152c <quorem+0xf4>
	...

08011550 <_dtoa_r>:
 8011550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011554:	ed2d 8b04 	vpush	{d8-d9}
 8011558:	ec57 6b10 	vmov	r6, r7, d0
 801155c:	b093      	sub	sp, #76	; 0x4c
 801155e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8011560:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8011564:	9106      	str	r1, [sp, #24]
 8011566:	ee10 aa10 	vmov	sl, s0
 801156a:	4604      	mov	r4, r0
 801156c:	9209      	str	r2, [sp, #36]	; 0x24
 801156e:	930c      	str	r3, [sp, #48]	; 0x30
 8011570:	46bb      	mov	fp, r7
 8011572:	b975      	cbnz	r5, 8011592 <_dtoa_r+0x42>
 8011574:	2010      	movs	r0, #16
 8011576:	f7fe fa69 	bl	800fa4c <malloc>
 801157a:	4602      	mov	r2, r0
 801157c:	6260      	str	r0, [r4, #36]	; 0x24
 801157e:	b920      	cbnz	r0, 801158a <_dtoa_r+0x3a>
 8011580:	4ba7      	ldr	r3, [pc, #668]	; (8011820 <_dtoa_r+0x2d0>)
 8011582:	21ea      	movs	r1, #234	; 0xea
 8011584:	48a7      	ldr	r0, [pc, #668]	; (8011824 <_dtoa_r+0x2d4>)
 8011586:	f001 ffed 	bl	8013564 <__assert_func>
 801158a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801158e:	6005      	str	r5, [r0, #0]
 8011590:	60c5      	str	r5, [r0, #12]
 8011592:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011594:	6819      	ldr	r1, [r3, #0]
 8011596:	b151      	cbz	r1, 80115ae <_dtoa_r+0x5e>
 8011598:	685a      	ldr	r2, [r3, #4]
 801159a:	604a      	str	r2, [r1, #4]
 801159c:	2301      	movs	r3, #1
 801159e:	4093      	lsls	r3, r2
 80115a0:	608b      	str	r3, [r1, #8]
 80115a2:	4620      	mov	r0, r4
 80115a4:	f001 f998 	bl	80128d8 <_Bfree>
 80115a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80115aa:	2200      	movs	r2, #0
 80115ac:	601a      	str	r2, [r3, #0]
 80115ae:	1e3b      	subs	r3, r7, #0
 80115b0:	bfaa      	itet	ge
 80115b2:	2300      	movge	r3, #0
 80115b4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80115b8:	f8c8 3000 	strge.w	r3, [r8]
 80115bc:	4b9a      	ldr	r3, [pc, #616]	; (8011828 <_dtoa_r+0x2d8>)
 80115be:	bfbc      	itt	lt
 80115c0:	2201      	movlt	r2, #1
 80115c2:	f8c8 2000 	strlt.w	r2, [r8]
 80115c6:	ea33 030b 	bics.w	r3, r3, fp
 80115ca:	d11b      	bne.n	8011604 <_dtoa_r+0xb4>
 80115cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80115ce:	f242 730f 	movw	r3, #9999	; 0x270f
 80115d2:	6013      	str	r3, [r2, #0]
 80115d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80115d8:	4333      	orrs	r3, r6
 80115da:	f000 8592 	beq.w	8012102 <_dtoa_r+0xbb2>
 80115de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80115e0:	b963      	cbnz	r3, 80115fc <_dtoa_r+0xac>
 80115e2:	4b92      	ldr	r3, [pc, #584]	; (801182c <_dtoa_r+0x2dc>)
 80115e4:	e022      	b.n	801162c <_dtoa_r+0xdc>
 80115e6:	4b92      	ldr	r3, [pc, #584]	; (8011830 <_dtoa_r+0x2e0>)
 80115e8:	9301      	str	r3, [sp, #4]
 80115ea:	3308      	adds	r3, #8
 80115ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80115ee:	6013      	str	r3, [r2, #0]
 80115f0:	9801      	ldr	r0, [sp, #4]
 80115f2:	b013      	add	sp, #76	; 0x4c
 80115f4:	ecbd 8b04 	vpop	{d8-d9}
 80115f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115fc:	4b8b      	ldr	r3, [pc, #556]	; (801182c <_dtoa_r+0x2dc>)
 80115fe:	9301      	str	r3, [sp, #4]
 8011600:	3303      	adds	r3, #3
 8011602:	e7f3      	b.n	80115ec <_dtoa_r+0x9c>
 8011604:	2200      	movs	r2, #0
 8011606:	2300      	movs	r3, #0
 8011608:	4650      	mov	r0, sl
 801160a:	4659      	mov	r1, fp
 801160c:	f7ef fa5c 	bl	8000ac8 <__aeabi_dcmpeq>
 8011610:	ec4b ab19 	vmov	d9, sl, fp
 8011614:	4680      	mov	r8, r0
 8011616:	b158      	cbz	r0, 8011630 <_dtoa_r+0xe0>
 8011618:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801161a:	2301      	movs	r3, #1
 801161c:	6013      	str	r3, [r2, #0]
 801161e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011620:	2b00      	cmp	r3, #0
 8011622:	f000 856b 	beq.w	80120fc <_dtoa_r+0xbac>
 8011626:	4883      	ldr	r0, [pc, #524]	; (8011834 <_dtoa_r+0x2e4>)
 8011628:	6018      	str	r0, [r3, #0]
 801162a:	1e43      	subs	r3, r0, #1
 801162c:	9301      	str	r3, [sp, #4]
 801162e:	e7df      	b.n	80115f0 <_dtoa_r+0xa0>
 8011630:	ec4b ab10 	vmov	d0, sl, fp
 8011634:	aa10      	add	r2, sp, #64	; 0x40
 8011636:	a911      	add	r1, sp, #68	; 0x44
 8011638:	4620      	mov	r0, r4
 801163a:	f001 fcfb 	bl	8013034 <__d2b>
 801163e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8011642:	ee08 0a10 	vmov	s16, r0
 8011646:	2d00      	cmp	r5, #0
 8011648:	f000 8084 	beq.w	8011754 <_dtoa_r+0x204>
 801164c:	ee19 3a90 	vmov	r3, s19
 8011650:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011654:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8011658:	4656      	mov	r6, sl
 801165a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801165e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8011662:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8011666:	4b74      	ldr	r3, [pc, #464]	; (8011838 <_dtoa_r+0x2e8>)
 8011668:	2200      	movs	r2, #0
 801166a:	4630      	mov	r0, r6
 801166c:	4639      	mov	r1, r7
 801166e:	f7ee fe0b 	bl	8000288 <__aeabi_dsub>
 8011672:	a365      	add	r3, pc, #404	; (adr r3, 8011808 <_dtoa_r+0x2b8>)
 8011674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011678:	f7ee ffbe 	bl	80005f8 <__aeabi_dmul>
 801167c:	a364      	add	r3, pc, #400	; (adr r3, 8011810 <_dtoa_r+0x2c0>)
 801167e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011682:	f7ee fe03 	bl	800028c <__adddf3>
 8011686:	4606      	mov	r6, r0
 8011688:	4628      	mov	r0, r5
 801168a:	460f      	mov	r7, r1
 801168c:	f7ee ff4a 	bl	8000524 <__aeabi_i2d>
 8011690:	a361      	add	r3, pc, #388	; (adr r3, 8011818 <_dtoa_r+0x2c8>)
 8011692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011696:	f7ee ffaf 	bl	80005f8 <__aeabi_dmul>
 801169a:	4602      	mov	r2, r0
 801169c:	460b      	mov	r3, r1
 801169e:	4630      	mov	r0, r6
 80116a0:	4639      	mov	r1, r7
 80116a2:	f7ee fdf3 	bl	800028c <__adddf3>
 80116a6:	4606      	mov	r6, r0
 80116a8:	460f      	mov	r7, r1
 80116aa:	f7ef fa55 	bl	8000b58 <__aeabi_d2iz>
 80116ae:	2200      	movs	r2, #0
 80116b0:	9000      	str	r0, [sp, #0]
 80116b2:	2300      	movs	r3, #0
 80116b4:	4630      	mov	r0, r6
 80116b6:	4639      	mov	r1, r7
 80116b8:	f7ef fa10 	bl	8000adc <__aeabi_dcmplt>
 80116bc:	b150      	cbz	r0, 80116d4 <_dtoa_r+0x184>
 80116be:	9800      	ldr	r0, [sp, #0]
 80116c0:	f7ee ff30 	bl	8000524 <__aeabi_i2d>
 80116c4:	4632      	mov	r2, r6
 80116c6:	463b      	mov	r3, r7
 80116c8:	f7ef f9fe 	bl	8000ac8 <__aeabi_dcmpeq>
 80116cc:	b910      	cbnz	r0, 80116d4 <_dtoa_r+0x184>
 80116ce:	9b00      	ldr	r3, [sp, #0]
 80116d0:	3b01      	subs	r3, #1
 80116d2:	9300      	str	r3, [sp, #0]
 80116d4:	9b00      	ldr	r3, [sp, #0]
 80116d6:	2b16      	cmp	r3, #22
 80116d8:	d85a      	bhi.n	8011790 <_dtoa_r+0x240>
 80116da:	9a00      	ldr	r2, [sp, #0]
 80116dc:	4b57      	ldr	r3, [pc, #348]	; (801183c <_dtoa_r+0x2ec>)
 80116de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80116e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116e6:	ec51 0b19 	vmov	r0, r1, d9
 80116ea:	f7ef f9f7 	bl	8000adc <__aeabi_dcmplt>
 80116ee:	2800      	cmp	r0, #0
 80116f0:	d050      	beq.n	8011794 <_dtoa_r+0x244>
 80116f2:	9b00      	ldr	r3, [sp, #0]
 80116f4:	3b01      	subs	r3, #1
 80116f6:	9300      	str	r3, [sp, #0]
 80116f8:	2300      	movs	r3, #0
 80116fa:	930b      	str	r3, [sp, #44]	; 0x2c
 80116fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80116fe:	1b5d      	subs	r5, r3, r5
 8011700:	1e6b      	subs	r3, r5, #1
 8011702:	9305      	str	r3, [sp, #20]
 8011704:	bf45      	ittet	mi
 8011706:	f1c5 0301 	rsbmi	r3, r5, #1
 801170a:	9304      	strmi	r3, [sp, #16]
 801170c:	2300      	movpl	r3, #0
 801170e:	2300      	movmi	r3, #0
 8011710:	bf4c      	ite	mi
 8011712:	9305      	strmi	r3, [sp, #20]
 8011714:	9304      	strpl	r3, [sp, #16]
 8011716:	9b00      	ldr	r3, [sp, #0]
 8011718:	2b00      	cmp	r3, #0
 801171a:	db3d      	blt.n	8011798 <_dtoa_r+0x248>
 801171c:	9b05      	ldr	r3, [sp, #20]
 801171e:	9a00      	ldr	r2, [sp, #0]
 8011720:	920a      	str	r2, [sp, #40]	; 0x28
 8011722:	4413      	add	r3, r2
 8011724:	9305      	str	r3, [sp, #20]
 8011726:	2300      	movs	r3, #0
 8011728:	9307      	str	r3, [sp, #28]
 801172a:	9b06      	ldr	r3, [sp, #24]
 801172c:	2b09      	cmp	r3, #9
 801172e:	f200 8089 	bhi.w	8011844 <_dtoa_r+0x2f4>
 8011732:	2b05      	cmp	r3, #5
 8011734:	bfc4      	itt	gt
 8011736:	3b04      	subgt	r3, #4
 8011738:	9306      	strgt	r3, [sp, #24]
 801173a:	9b06      	ldr	r3, [sp, #24]
 801173c:	f1a3 0302 	sub.w	r3, r3, #2
 8011740:	bfcc      	ite	gt
 8011742:	2500      	movgt	r5, #0
 8011744:	2501      	movle	r5, #1
 8011746:	2b03      	cmp	r3, #3
 8011748:	f200 8087 	bhi.w	801185a <_dtoa_r+0x30a>
 801174c:	e8df f003 	tbb	[pc, r3]
 8011750:	59383a2d 	.word	0x59383a2d
 8011754:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8011758:	441d      	add	r5, r3
 801175a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801175e:	2b20      	cmp	r3, #32
 8011760:	bfc1      	itttt	gt
 8011762:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8011766:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801176a:	fa0b f303 	lslgt.w	r3, fp, r3
 801176e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8011772:	bfda      	itte	le
 8011774:	f1c3 0320 	rsble	r3, r3, #32
 8011778:	fa06 f003 	lslle.w	r0, r6, r3
 801177c:	4318      	orrgt	r0, r3
 801177e:	f7ee fec1 	bl	8000504 <__aeabi_ui2d>
 8011782:	2301      	movs	r3, #1
 8011784:	4606      	mov	r6, r0
 8011786:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801178a:	3d01      	subs	r5, #1
 801178c:	930e      	str	r3, [sp, #56]	; 0x38
 801178e:	e76a      	b.n	8011666 <_dtoa_r+0x116>
 8011790:	2301      	movs	r3, #1
 8011792:	e7b2      	b.n	80116fa <_dtoa_r+0x1aa>
 8011794:	900b      	str	r0, [sp, #44]	; 0x2c
 8011796:	e7b1      	b.n	80116fc <_dtoa_r+0x1ac>
 8011798:	9b04      	ldr	r3, [sp, #16]
 801179a:	9a00      	ldr	r2, [sp, #0]
 801179c:	1a9b      	subs	r3, r3, r2
 801179e:	9304      	str	r3, [sp, #16]
 80117a0:	4253      	negs	r3, r2
 80117a2:	9307      	str	r3, [sp, #28]
 80117a4:	2300      	movs	r3, #0
 80117a6:	930a      	str	r3, [sp, #40]	; 0x28
 80117a8:	e7bf      	b.n	801172a <_dtoa_r+0x1da>
 80117aa:	2300      	movs	r3, #0
 80117ac:	9308      	str	r3, [sp, #32]
 80117ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80117b0:	2b00      	cmp	r3, #0
 80117b2:	dc55      	bgt.n	8011860 <_dtoa_r+0x310>
 80117b4:	2301      	movs	r3, #1
 80117b6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80117ba:	461a      	mov	r2, r3
 80117bc:	9209      	str	r2, [sp, #36]	; 0x24
 80117be:	e00c      	b.n	80117da <_dtoa_r+0x28a>
 80117c0:	2301      	movs	r3, #1
 80117c2:	e7f3      	b.n	80117ac <_dtoa_r+0x25c>
 80117c4:	2300      	movs	r3, #0
 80117c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80117c8:	9308      	str	r3, [sp, #32]
 80117ca:	9b00      	ldr	r3, [sp, #0]
 80117cc:	4413      	add	r3, r2
 80117ce:	9302      	str	r3, [sp, #8]
 80117d0:	3301      	adds	r3, #1
 80117d2:	2b01      	cmp	r3, #1
 80117d4:	9303      	str	r3, [sp, #12]
 80117d6:	bfb8      	it	lt
 80117d8:	2301      	movlt	r3, #1
 80117da:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80117dc:	2200      	movs	r2, #0
 80117de:	6042      	str	r2, [r0, #4]
 80117e0:	2204      	movs	r2, #4
 80117e2:	f102 0614 	add.w	r6, r2, #20
 80117e6:	429e      	cmp	r6, r3
 80117e8:	6841      	ldr	r1, [r0, #4]
 80117ea:	d93d      	bls.n	8011868 <_dtoa_r+0x318>
 80117ec:	4620      	mov	r0, r4
 80117ee:	f001 f833 	bl	8012858 <_Balloc>
 80117f2:	9001      	str	r0, [sp, #4]
 80117f4:	2800      	cmp	r0, #0
 80117f6:	d13b      	bne.n	8011870 <_dtoa_r+0x320>
 80117f8:	4b11      	ldr	r3, [pc, #68]	; (8011840 <_dtoa_r+0x2f0>)
 80117fa:	4602      	mov	r2, r0
 80117fc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8011800:	e6c0      	b.n	8011584 <_dtoa_r+0x34>
 8011802:	2301      	movs	r3, #1
 8011804:	e7df      	b.n	80117c6 <_dtoa_r+0x276>
 8011806:	bf00      	nop
 8011808:	636f4361 	.word	0x636f4361
 801180c:	3fd287a7 	.word	0x3fd287a7
 8011810:	8b60c8b3 	.word	0x8b60c8b3
 8011814:	3fc68a28 	.word	0x3fc68a28
 8011818:	509f79fb 	.word	0x509f79fb
 801181c:	3fd34413 	.word	0x3fd34413
 8011820:	08015a9d 	.word	0x08015a9d
 8011824:	08015ab4 	.word	0x08015ab4
 8011828:	7ff00000 	.word	0x7ff00000
 801182c:	08015a99 	.word	0x08015a99
 8011830:	08015a90 	.word	0x08015a90
 8011834:	08015a1d 	.word	0x08015a1d
 8011838:	3ff80000 	.word	0x3ff80000
 801183c:	08015c20 	.word	0x08015c20
 8011840:	08015b0f 	.word	0x08015b0f
 8011844:	2501      	movs	r5, #1
 8011846:	2300      	movs	r3, #0
 8011848:	9306      	str	r3, [sp, #24]
 801184a:	9508      	str	r5, [sp, #32]
 801184c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011850:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8011854:	2200      	movs	r2, #0
 8011856:	2312      	movs	r3, #18
 8011858:	e7b0      	b.n	80117bc <_dtoa_r+0x26c>
 801185a:	2301      	movs	r3, #1
 801185c:	9308      	str	r3, [sp, #32]
 801185e:	e7f5      	b.n	801184c <_dtoa_r+0x2fc>
 8011860:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011862:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8011866:	e7b8      	b.n	80117da <_dtoa_r+0x28a>
 8011868:	3101      	adds	r1, #1
 801186a:	6041      	str	r1, [r0, #4]
 801186c:	0052      	lsls	r2, r2, #1
 801186e:	e7b8      	b.n	80117e2 <_dtoa_r+0x292>
 8011870:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011872:	9a01      	ldr	r2, [sp, #4]
 8011874:	601a      	str	r2, [r3, #0]
 8011876:	9b03      	ldr	r3, [sp, #12]
 8011878:	2b0e      	cmp	r3, #14
 801187a:	f200 809d 	bhi.w	80119b8 <_dtoa_r+0x468>
 801187e:	2d00      	cmp	r5, #0
 8011880:	f000 809a 	beq.w	80119b8 <_dtoa_r+0x468>
 8011884:	9b00      	ldr	r3, [sp, #0]
 8011886:	2b00      	cmp	r3, #0
 8011888:	dd32      	ble.n	80118f0 <_dtoa_r+0x3a0>
 801188a:	4ab7      	ldr	r2, [pc, #732]	; (8011b68 <_dtoa_r+0x618>)
 801188c:	f003 030f 	and.w	r3, r3, #15
 8011890:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8011894:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011898:	9b00      	ldr	r3, [sp, #0]
 801189a:	05d8      	lsls	r0, r3, #23
 801189c:	ea4f 1723 	mov.w	r7, r3, asr #4
 80118a0:	d516      	bpl.n	80118d0 <_dtoa_r+0x380>
 80118a2:	4bb2      	ldr	r3, [pc, #712]	; (8011b6c <_dtoa_r+0x61c>)
 80118a4:	ec51 0b19 	vmov	r0, r1, d9
 80118a8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80118ac:	f7ee ffce 	bl	800084c <__aeabi_ddiv>
 80118b0:	f007 070f 	and.w	r7, r7, #15
 80118b4:	4682      	mov	sl, r0
 80118b6:	468b      	mov	fp, r1
 80118b8:	2503      	movs	r5, #3
 80118ba:	4eac      	ldr	r6, [pc, #688]	; (8011b6c <_dtoa_r+0x61c>)
 80118bc:	b957      	cbnz	r7, 80118d4 <_dtoa_r+0x384>
 80118be:	4642      	mov	r2, r8
 80118c0:	464b      	mov	r3, r9
 80118c2:	4650      	mov	r0, sl
 80118c4:	4659      	mov	r1, fp
 80118c6:	f7ee ffc1 	bl	800084c <__aeabi_ddiv>
 80118ca:	4682      	mov	sl, r0
 80118cc:	468b      	mov	fp, r1
 80118ce:	e028      	b.n	8011922 <_dtoa_r+0x3d2>
 80118d0:	2502      	movs	r5, #2
 80118d2:	e7f2      	b.n	80118ba <_dtoa_r+0x36a>
 80118d4:	07f9      	lsls	r1, r7, #31
 80118d6:	d508      	bpl.n	80118ea <_dtoa_r+0x39a>
 80118d8:	4640      	mov	r0, r8
 80118da:	4649      	mov	r1, r9
 80118dc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80118e0:	f7ee fe8a 	bl	80005f8 <__aeabi_dmul>
 80118e4:	3501      	adds	r5, #1
 80118e6:	4680      	mov	r8, r0
 80118e8:	4689      	mov	r9, r1
 80118ea:	107f      	asrs	r7, r7, #1
 80118ec:	3608      	adds	r6, #8
 80118ee:	e7e5      	b.n	80118bc <_dtoa_r+0x36c>
 80118f0:	f000 809b 	beq.w	8011a2a <_dtoa_r+0x4da>
 80118f4:	9b00      	ldr	r3, [sp, #0]
 80118f6:	4f9d      	ldr	r7, [pc, #628]	; (8011b6c <_dtoa_r+0x61c>)
 80118f8:	425e      	negs	r6, r3
 80118fa:	4b9b      	ldr	r3, [pc, #620]	; (8011b68 <_dtoa_r+0x618>)
 80118fc:	f006 020f 	and.w	r2, r6, #15
 8011900:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011908:	ec51 0b19 	vmov	r0, r1, d9
 801190c:	f7ee fe74 	bl	80005f8 <__aeabi_dmul>
 8011910:	1136      	asrs	r6, r6, #4
 8011912:	4682      	mov	sl, r0
 8011914:	468b      	mov	fp, r1
 8011916:	2300      	movs	r3, #0
 8011918:	2502      	movs	r5, #2
 801191a:	2e00      	cmp	r6, #0
 801191c:	d17a      	bne.n	8011a14 <_dtoa_r+0x4c4>
 801191e:	2b00      	cmp	r3, #0
 8011920:	d1d3      	bne.n	80118ca <_dtoa_r+0x37a>
 8011922:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011924:	2b00      	cmp	r3, #0
 8011926:	f000 8082 	beq.w	8011a2e <_dtoa_r+0x4de>
 801192a:	4b91      	ldr	r3, [pc, #580]	; (8011b70 <_dtoa_r+0x620>)
 801192c:	2200      	movs	r2, #0
 801192e:	4650      	mov	r0, sl
 8011930:	4659      	mov	r1, fp
 8011932:	f7ef f8d3 	bl	8000adc <__aeabi_dcmplt>
 8011936:	2800      	cmp	r0, #0
 8011938:	d079      	beq.n	8011a2e <_dtoa_r+0x4de>
 801193a:	9b03      	ldr	r3, [sp, #12]
 801193c:	2b00      	cmp	r3, #0
 801193e:	d076      	beq.n	8011a2e <_dtoa_r+0x4de>
 8011940:	9b02      	ldr	r3, [sp, #8]
 8011942:	2b00      	cmp	r3, #0
 8011944:	dd36      	ble.n	80119b4 <_dtoa_r+0x464>
 8011946:	9b00      	ldr	r3, [sp, #0]
 8011948:	4650      	mov	r0, sl
 801194a:	4659      	mov	r1, fp
 801194c:	1e5f      	subs	r7, r3, #1
 801194e:	2200      	movs	r2, #0
 8011950:	4b88      	ldr	r3, [pc, #544]	; (8011b74 <_dtoa_r+0x624>)
 8011952:	f7ee fe51 	bl	80005f8 <__aeabi_dmul>
 8011956:	9e02      	ldr	r6, [sp, #8]
 8011958:	4682      	mov	sl, r0
 801195a:	468b      	mov	fp, r1
 801195c:	3501      	adds	r5, #1
 801195e:	4628      	mov	r0, r5
 8011960:	f7ee fde0 	bl	8000524 <__aeabi_i2d>
 8011964:	4652      	mov	r2, sl
 8011966:	465b      	mov	r3, fp
 8011968:	f7ee fe46 	bl	80005f8 <__aeabi_dmul>
 801196c:	4b82      	ldr	r3, [pc, #520]	; (8011b78 <_dtoa_r+0x628>)
 801196e:	2200      	movs	r2, #0
 8011970:	f7ee fc8c 	bl	800028c <__adddf3>
 8011974:	46d0      	mov	r8, sl
 8011976:	46d9      	mov	r9, fp
 8011978:	4682      	mov	sl, r0
 801197a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 801197e:	2e00      	cmp	r6, #0
 8011980:	d158      	bne.n	8011a34 <_dtoa_r+0x4e4>
 8011982:	4b7e      	ldr	r3, [pc, #504]	; (8011b7c <_dtoa_r+0x62c>)
 8011984:	2200      	movs	r2, #0
 8011986:	4640      	mov	r0, r8
 8011988:	4649      	mov	r1, r9
 801198a:	f7ee fc7d 	bl	8000288 <__aeabi_dsub>
 801198e:	4652      	mov	r2, sl
 8011990:	465b      	mov	r3, fp
 8011992:	4680      	mov	r8, r0
 8011994:	4689      	mov	r9, r1
 8011996:	f7ef f8bf 	bl	8000b18 <__aeabi_dcmpgt>
 801199a:	2800      	cmp	r0, #0
 801199c:	f040 8295 	bne.w	8011eca <_dtoa_r+0x97a>
 80119a0:	4652      	mov	r2, sl
 80119a2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80119a6:	4640      	mov	r0, r8
 80119a8:	4649      	mov	r1, r9
 80119aa:	f7ef f897 	bl	8000adc <__aeabi_dcmplt>
 80119ae:	2800      	cmp	r0, #0
 80119b0:	f040 8289 	bne.w	8011ec6 <_dtoa_r+0x976>
 80119b4:	ec5b ab19 	vmov	sl, fp, d9
 80119b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	f2c0 8148 	blt.w	8011c50 <_dtoa_r+0x700>
 80119c0:	9a00      	ldr	r2, [sp, #0]
 80119c2:	2a0e      	cmp	r2, #14
 80119c4:	f300 8144 	bgt.w	8011c50 <_dtoa_r+0x700>
 80119c8:	4b67      	ldr	r3, [pc, #412]	; (8011b68 <_dtoa_r+0x618>)
 80119ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80119ce:	e9d3 8900 	ldrd	r8, r9, [r3]
 80119d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80119d4:	2b00      	cmp	r3, #0
 80119d6:	f280 80d5 	bge.w	8011b84 <_dtoa_r+0x634>
 80119da:	9b03      	ldr	r3, [sp, #12]
 80119dc:	2b00      	cmp	r3, #0
 80119de:	f300 80d1 	bgt.w	8011b84 <_dtoa_r+0x634>
 80119e2:	f040 826f 	bne.w	8011ec4 <_dtoa_r+0x974>
 80119e6:	4b65      	ldr	r3, [pc, #404]	; (8011b7c <_dtoa_r+0x62c>)
 80119e8:	2200      	movs	r2, #0
 80119ea:	4640      	mov	r0, r8
 80119ec:	4649      	mov	r1, r9
 80119ee:	f7ee fe03 	bl	80005f8 <__aeabi_dmul>
 80119f2:	4652      	mov	r2, sl
 80119f4:	465b      	mov	r3, fp
 80119f6:	f7ef f885 	bl	8000b04 <__aeabi_dcmpge>
 80119fa:	9e03      	ldr	r6, [sp, #12]
 80119fc:	4637      	mov	r7, r6
 80119fe:	2800      	cmp	r0, #0
 8011a00:	f040 8245 	bne.w	8011e8e <_dtoa_r+0x93e>
 8011a04:	9d01      	ldr	r5, [sp, #4]
 8011a06:	2331      	movs	r3, #49	; 0x31
 8011a08:	f805 3b01 	strb.w	r3, [r5], #1
 8011a0c:	9b00      	ldr	r3, [sp, #0]
 8011a0e:	3301      	adds	r3, #1
 8011a10:	9300      	str	r3, [sp, #0]
 8011a12:	e240      	b.n	8011e96 <_dtoa_r+0x946>
 8011a14:	07f2      	lsls	r2, r6, #31
 8011a16:	d505      	bpl.n	8011a24 <_dtoa_r+0x4d4>
 8011a18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011a1c:	f7ee fdec 	bl	80005f8 <__aeabi_dmul>
 8011a20:	3501      	adds	r5, #1
 8011a22:	2301      	movs	r3, #1
 8011a24:	1076      	asrs	r6, r6, #1
 8011a26:	3708      	adds	r7, #8
 8011a28:	e777      	b.n	801191a <_dtoa_r+0x3ca>
 8011a2a:	2502      	movs	r5, #2
 8011a2c:	e779      	b.n	8011922 <_dtoa_r+0x3d2>
 8011a2e:	9f00      	ldr	r7, [sp, #0]
 8011a30:	9e03      	ldr	r6, [sp, #12]
 8011a32:	e794      	b.n	801195e <_dtoa_r+0x40e>
 8011a34:	9901      	ldr	r1, [sp, #4]
 8011a36:	4b4c      	ldr	r3, [pc, #304]	; (8011b68 <_dtoa_r+0x618>)
 8011a38:	4431      	add	r1, r6
 8011a3a:	910d      	str	r1, [sp, #52]	; 0x34
 8011a3c:	9908      	ldr	r1, [sp, #32]
 8011a3e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8011a42:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8011a46:	2900      	cmp	r1, #0
 8011a48:	d043      	beq.n	8011ad2 <_dtoa_r+0x582>
 8011a4a:	494d      	ldr	r1, [pc, #308]	; (8011b80 <_dtoa_r+0x630>)
 8011a4c:	2000      	movs	r0, #0
 8011a4e:	f7ee fefd 	bl	800084c <__aeabi_ddiv>
 8011a52:	4652      	mov	r2, sl
 8011a54:	465b      	mov	r3, fp
 8011a56:	f7ee fc17 	bl	8000288 <__aeabi_dsub>
 8011a5a:	9d01      	ldr	r5, [sp, #4]
 8011a5c:	4682      	mov	sl, r0
 8011a5e:	468b      	mov	fp, r1
 8011a60:	4649      	mov	r1, r9
 8011a62:	4640      	mov	r0, r8
 8011a64:	f7ef f878 	bl	8000b58 <__aeabi_d2iz>
 8011a68:	4606      	mov	r6, r0
 8011a6a:	f7ee fd5b 	bl	8000524 <__aeabi_i2d>
 8011a6e:	4602      	mov	r2, r0
 8011a70:	460b      	mov	r3, r1
 8011a72:	4640      	mov	r0, r8
 8011a74:	4649      	mov	r1, r9
 8011a76:	f7ee fc07 	bl	8000288 <__aeabi_dsub>
 8011a7a:	3630      	adds	r6, #48	; 0x30
 8011a7c:	f805 6b01 	strb.w	r6, [r5], #1
 8011a80:	4652      	mov	r2, sl
 8011a82:	465b      	mov	r3, fp
 8011a84:	4680      	mov	r8, r0
 8011a86:	4689      	mov	r9, r1
 8011a88:	f7ef f828 	bl	8000adc <__aeabi_dcmplt>
 8011a8c:	2800      	cmp	r0, #0
 8011a8e:	d163      	bne.n	8011b58 <_dtoa_r+0x608>
 8011a90:	4642      	mov	r2, r8
 8011a92:	464b      	mov	r3, r9
 8011a94:	4936      	ldr	r1, [pc, #216]	; (8011b70 <_dtoa_r+0x620>)
 8011a96:	2000      	movs	r0, #0
 8011a98:	f7ee fbf6 	bl	8000288 <__aeabi_dsub>
 8011a9c:	4652      	mov	r2, sl
 8011a9e:	465b      	mov	r3, fp
 8011aa0:	f7ef f81c 	bl	8000adc <__aeabi_dcmplt>
 8011aa4:	2800      	cmp	r0, #0
 8011aa6:	f040 80b5 	bne.w	8011c14 <_dtoa_r+0x6c4>
 8011aaa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011aac:	429d      	cmp	r5, r3
 8011aae:	d081      	beq.n	80119b4 <_dtoa_r+0x464>
 8011ab0:	4b30      	ldr	r3, [pc, #192]	; (8011b74 <_dtoa_r+0x624>)
 8011ab2:	2200      	movs	r2, #0
 8011ab4:	4650      	mov	r0, sl
 8011ab6:	4659      	mov	r1, fp
 8011ab8:	f7ee fd9e 	bl	80005f8 <__aeabi_dmul>
 8011abc:	4b2d      	ldr	r3, [pc, #180]	; (8011b74 <_dtoa_r+0x624>)
 8011abe:	4682      	mov	sl, r0
 8011ac0:	468b      	mov	fp, r1
 8011ac2:	4640      	mov	r0, r8
 8011ac4:	4649      	mov	r1, r9
 8011ac6:	2200      	movs	r2, #0
 8011ac8:	f7ee fd96 	bl	80005f8 <__aeabi_dmul>
 8011acc:	4680      	mov	r8, r0
 8011ace:	4689      	mov	r9, r1
 8011ad0:	e7c6      	b.n	8011a60 <_dtoa_r+0x510>
 8011ad2:	4650      	mov	r0, sl
 8011ad4:	4659      	mov	r1, fp
 8011ad6:	f7ee fd8f 	bl	80005f8 <__aeabi_dmul>
 8011ada:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011adc:	9d01      	ldr	r5, [sp, #4]
 8011ade:	930f      	str	r3, [sp, #60]	; 0x3c
 8011ae0:	4682      	mov	sl, r0
 8011ae2:	468b      	mov	fp, r1
 8011ae4:	4649      	mov	r1, r9
 8011ae6:	4640      	mov	r0, r8
 8011ae8:	f7ef f836 	bl	8000b58 <__aeabi_d2iz>
 8011aec:	4606      	mov	r6, r0
 8011aee:	f7ee fd19 	bl	8000524 <__aeabi_i2d>
 8011af2:	3630      	adds	r6, #48	; 0x30
 8011af4:	4602      	mov	r2, r0
 8011af6:	460b      	mov	r3, r1
 8011af8:	4640      	mov	r0, r8
 8011afa:	4649      	mov	r1, r9
 8011afc:	f7ee fbc4 	bl	8000288 <__aeabi_dsub>
 8011b00:	f805 6b01 	strb.w	r6, [r5], #1
 8011b04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011b06:	429d      	cmp	r5, r3
 8011b08:	4680      	mov	r8, r0
 8011b0a:	4689      	mov	r9, r1
 8011b0c:	f04f 0200 	mov.w	r2, #0
 8011b10:	d124      	bne.n	8011b5c <_dtoa_r+0x60c>
 8011b12:	4b1b      	ldr	r3, [pc, #108]	; (8011b80 <_dtoa_r+0x630>)
 8011b14:	4650      	mov	r0, sl
 8011b16:	4659      	mov	r1, fp
 8011b18:	f7ee fbb8 	bl	800028c <__adddf3>
 8011b1c:	4602      	mov	r2, r0
 8011b1e:	460b      	mov	r3, r1
 8011b20:	4640      	mov	r0, r8
 8011b22:	4649      	mov	r1, r9
 8011b24:	f7ee fff8 	bl	8000b18 <__aeabi_dcmpgt>
 8011b28:	2800      	cmp	r0, #0
 8011b2a:	d173      	bne.n	8011c14 <_dtoa_r+0x6c4>
 8011b2c:	4652      	mov	r2, sl
 8011b2e:	465b      	mov	r3, fp
 8011b30:	4913      	ldr	r1, [pc, #76]	; (8011b80 <_dtoa_r+0x630>)
 8011b32:	2000      	movs	r0, #0
 8011b34:	f7ee fba8 	bl	8000288 <__aeabi_dsub>
 8011b38:	4602      	mov	r2, r0
 8011b3a:	460b      	mov	r3, r1
 8011b3c:	4640      	mov	r0, r8
 8011b3e:	4649      	mov	r1, r9
 8011b40:	f7ee ffcc 	bl	8000adc <__aeabi_dcmplt>
 8011b44:	2800      	cmp	r0, #0
 8011b46:	f43f af35 	beq.w	80119b4 <_dtoa_r+0x464>
 8011b4a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8011b4c:	1e6b      	subs	r3, r5, #1
 8011b4e:	930f      	str	r3, [sp, #60]	; 0x3c
 8011b50:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011b54:	2b30      	cmp	r3, #48	; 0x30
 8011b56:	d0f8      	beq.n	8011b4a <_dtoa_r+0x5fa>
 8011b58:	9700      	str	r7, [sp, #0]
 8011b5a:	e049      	b.n	8011bf0 <_dtoa_r+0x6a0>
 8011b5c:	4b05      	ldr	r3, [pc, #20]	; (8011b74 <_dtoa_r+0x624>)
 8011b5e:	f7ee fd4b 	bl	80005f8 <__aeabi_dmul>
 8011b62:	4680      	mov	r8, r0
 8011b64:	4689      	mov	r9, r1
 8011b66:	e7bd      	b.n	8011ae4 <_dtoa_r+0x594>
 8011b68:	08015c20 	.word	0x08015c20
 8011b6c:	08015bf8 	.word	0x08015bf8
 8011b70:	3ff00000 	.word	0x3ff00000
 8011b74:	40240000 	.word	0x40240000
 8011b78:	401c0000 	.word	0x401c0000
 8011b7c:	40140000 	.word	0x40140000
 8011b80:	3fe00000 	.word	0x3fe00000
 8011b84:	9d01      	ldr	r5, [sp, #4]
 8011b86:	4656      	mov	r6, sl
 8011b88:	465f      	mov	r7, fp
 8011b8a:	4642      	mov	r2, r8
 8011b8c:	464b      	mov	r3, r9
 8011b8e:	4630      	mov	r0, r6
 8011b90:	4639      	mov	r1, r7
 8011b92:	f7ee fe5b 	bl	800084c <__aeabi_ddiv>
 8011b96:	f7ee ffdf 	bl	8000b58 <__aeabi_d2iz>
 8011b9a:	4682      	mov	sl, r0
 8011b9c:	f7ee fcc2 	bl	8000524 <__aeabi_i2d>
 8011ba0:	4642      	mov	r2, r8
 8011ba2:	464b      	mov	r3, r9
 8011ba4:	f7ee fd28 	bl	80005f8 <__aeabi_dmul>
 8011ba8:	4602      	mov	r2, r0
 8011baa:	460b      	mov	r3, r1
 8011bac:	4630      	mov	r0, r6
 8011bae:	4639      	mov	r1, r7
 8011bb0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8011bb4:	f7ee fb68 	bl	8000288 <__aeabi_dsub>
 8011bb8:	f805 6b01 	strb.w	r6, [r5], #1
 8011bbc:	9e01      	ldr	r6, [sp, #4]
 8011bbe:	9f03      	ldr	r7, [sp, #12]
 8011bc0:	1bae      	subs	r6, r5, r6
 8011bc2:	42b7      	cmp	r7, r6
 8011bc4:	4602      	mov	r2, r0
 8011bc6:	460b      	mov	r3, r1
 8011bc8:	d135      	bne.n	8011c36 <_dtoa_r+0x6e6>
 8011bca:	f7ee fb5f 	bl	800028c <__adddf3>
 8011bce:	4642      	mov	r2, r8
 8011bd0:	464b      	mov	r3, r9
 8011bd2:	4606      	mov	r6, r0
 8011bd4:	460f      	mov	r7, r1
 8011bd6:	f7ee ff9f 	bl	8000b18 <__aeabi_dcmpgt>
 8011bda:	b9d0      	cbnz	r0, 8011c12 <_dtoa_r+0x6c2>
 8011bdc:	4642      	mov	r2, r8
 8011bde:	464b      	mov	r3, r9
 8011be0:	4630      	mov	r0, r6
 8011be2:	4639      	mov	r1, r7
 8011be4:	f7ee ff70 	bl	8000ac8 <__aeabi_dcmpeq>
 8011be8:	b110      	cbz	r0, 8011bf0 <_dtoa_r+0x6a0>
 8011bea:	f01a 0f01 	tst.w	sl, #1
 8011bee:	d110      	bne.n	8011c12 <_dtoa_r+0x6c2>
 8011bf0:	4620      	mov	r0, r4
 8011bf2:	ee18 1a10 	vmov	r1, s16
 8011bf6:	f000 fe6f 	bl	80128d8 <_Bfree>
 8011bfa:	2300      	movs	r3, #0
 8011bfc:	9800      	ldr	r0, [sp, #0]
 8011bfe:	702b      	strb	r3, [r5, #0]
 8011c00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011c02:	3001      	adds	r0, #1
 8011c04:	6018      	str	r0, [r3, #0]
 8011c06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	f43f acf1 	beq.w	80115f0 <_dtoa_r+0xa0>
 8011c0e:	601d      	str	r5, [r3, #0]
 8011c10:	e4ee      	b.n	80115f0 <_dtoa_r+0xa0>
 8011c12:	9f00      	ldr	r7, [sp, #0]
 8011c14:	462b      	mov	r3, r5
 8011c16:	461d      	mov	r5, r3
 8011c18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011c1c:	2a39      	cmp	r2, #57	; 0x39
 8011c1e:	d106      	bne.n	8011c2e <_dtoa_r+0x6de>
 8011c20:	9a01      	ldr	r2, [sp, #4]
 8011c22:	429a      	cmp	r2, r3
 8011c24:	d1f7      	bne.n	8011c16 <_dtoa_r+0x6c6>
 8011c26:	9901      	ldr	r1, [sp, #4]
 8011c28:	2230      	movs	r2, #48	; 0x30
 8011c2a:	3701      	adds	r7, #1
 8011c2c:	700a      	strb	r2, [r1, #0]
 8011c2e:	781a      	ldrb	r2, [r3, #0]
 8011c30:	3201      	adds	r2, #1
 8011c32:	701a      	strb	r2, [r3, #0]
 8011c34:	e790      	b.n	8011b58 <_dtoa_r+0x608>
 8011c36:	4ba6      	ldr	r3, [pc, #664]	; (8011ed0 <_dtoa_r+0x980>)
 8011c38:	2200      	movs	r2, #0
 8011c3a:	f7ee fcdd 	bl	80005f8 <__aeabi_dmul>
 8011c3e:	2200      	movs	r2, #0
 8011c40:	2300      	movs	r3, #0
 8011c42:	4606      	mov	r6, r0
 8011c44:	460f      	mov	r7, r1
 8011c46:	f7ee ff3f 	bl	8000ac8 <__aeabi_dcmpeq>
 8011c4a:	2800      	cmp	r0, #0
 8011c4c:	d09d      	beq.n	8011b8a <_dtoa_r+0x63a>
 8011c4e:	e7cf      	b.n	8011bf0 <_dtoa_r+0x6a0>
 8011c50:	9a08      	ldr	r2, [sp, #32]
 8011c52:	2a00      	cmp	r2, #0
 8011c54:	f000 80d7 	beq.w	8011e06 <_dtoa_r+0x8b6>
 8011c58:	9a06      	ldr	r2, [sp, #24]
 8011c5a:	2a01      	cmp	r2, #1
 8011c5c:	f300 80ba 	bgt.w	8011dd4 <_dtoa_r+0x884>
 8011c60:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011c62:	2a00      	cmp	r2, #0
 8011c64:	f000 80b2 	beq.w	8011dcc <_dtoa_r+0x87c>
 8011c68:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8011c6c:	9e07      	ldr	r6, [sp, #28]
 8011c6e:	9d04      	ldr	r5, [sp, #16]
 8011c70:	9a04      	ldr	r2, [sp, #16]
 8011c72:	441a      	add	r2, r3
 8011c74:	9204      	str	r2, [sp, #16]
 8011c76:	9a05      	ldr	r2, [sp, #20]
 8011c78:	2101      	movs	r1, #1
 8011c7a:	441a      	add	r2, r3
 8011c7c:	4620      	mov	r0, r4
 8011c7e:	9205      	str	r2, [sp, #20]
 8011c80:	f000 ff2c 	bl	8012adc <__i2b>
 8011c84:	4607      	mov	r7, r0
 8011c86:	2d00      	cmp	r5, #0
 8011c88:	dd0c      	ble.n	8011ca4 <_dtoa_r+0x754>
 8011c8a:	9b05      	ldr	r3, [sp, #20]
 8011c8c:	2b00      	cmp	r3, #0
 8011c8e:	dd09      	ble.n	8011ca4 <_dtoa_r+0x754>
 8011c90:	42ab      	cmp	r3, r5
 8011c92:	9a04      	ldr	r2, [sp, #16]
 8011c94:	bfa8      	it	ge
 8011c96:	462b      	movge	r3, r5
 8011c98:	1ad2      	subs	r2, r2, r3
 8011c9a:	9204      	str	r2, [sp, #16]
 8011c9c:	9a05      	ldr	r2, [sp, #20]
 8011c9e:	1aed      	subs	r5, r5, r3
 8011ca0:	1ad3      	subs	r3, r2, r3
 8011ca2:	9305      	str	r3, [sp, #20]
 8011ca4:	9b07      	ldr	r3, [sp, #28]
 8011ca6:	b31b      	cbz	r3, 8011cf0 <_dtoa_r+0x7a0>
 8011ca8:	9b08      	ldr	r3, [sp, #32]
 8011caa:	2b00      	cmp	r3, #0
 8011cac:	f000 80af 	beq.w	8011e0e <_dtoa_r+0x8be>
 8011cb0:	2e00      	cmp	r6, #0
 8011cb2:	dd13      	ble.n	8011cdc <_dtoa_r+0x78c>
 8011cb4:	4639      	mov	r1, r7
 8011cb6:	4632      	mov	r2, r6
 8011cb8:	4620      	mov	r0, r4
 8011cba:	f000 ffcf 	bl	8012c5c <__pow5mult>
 8011cbe:	ee18 2a10 	vmov	r2, s16
 8011cc2:	4601      	mov	r1, r0
 8011cc4:	4607      	mov	r7, r0
 8011cc6:	4620      	mov	r0, r4
 8011cc8:	f000 ff1e 	bl	8012b08 <__multiply>
 8011ccc:	ee18 1a10 	vmov	r1, s16
 8011cd0:	4680      	mov	r8, r0
 8011cd2:	4620      	mov	r0, r4
 8011cd4:	f000 fe00 	bl	80128d8 <_Bfree>
 8011cd8:	ee08 8a10 	vmov	s16, r8
 8011cdc:	9b07      	ldr	r3, [sp, #28]
 8011cde:	1b9a      	subs	r2, r3, r6
 8011ce0:	d006      	beq.n	8011cf0 <_dtoa_r+0x7a0>
 8011ce2:	ee18 1a10 	vmov	r1, s16
 8011ce6:	4620      	mov	r0, r4
 8011ce8:	f000 ffb8 	bl	8012c5c <__pow5mult>
 8011cec:	ee08 0a10 	vmov	s16, r0
 8011cf0:	2101      	movs	r1, #1
 8011cf2:	4620      	mov	r0, r4
 8011cf4:	f000 fef2 	bl	8012adc <__i2b>
 8011cf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011cfa:	2b00      	cmp	r3, #0
 8011cfc:	4606      	mov	r6, r0
 8011cfe:	f340 8088 	ble.w	8011e12 <_dtoa_r+0x8c2>
 8011d02:	461a      	mov	r2, r3
 8011d04:	4601      	mov	r1, r0
 8011d06:	4620      	mov	r0, r4
 8011d08:	f000 ffa8 	bl	8012c5c <__pow5mult>
 8011d0c:	9b06      	ldr	r3, [sp, #24]
 8011d0e:	2b01      	cmp	r3, #1
 8011d10:	4606      	mov	r6, r0
 8011d12:	f340 8081 	ble.w	8011e18 <_dtoa_r+0x8c8>
 8011d16:	f04f 0800 	mov.w	r8, #0
 8011d1a:	6933      	ldr	r3, [r6, #16]
 8011d1c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8011d20:	6918      	ldr	r0, [r3, #16]
 8011d22:	f000 fe8b 	bl	8012a3c <__hi0bits>
 8011d26:	f1c0 0020 	rsb	r0, r0, #32
 8011d2a:	9b05      	ldr	r3, [sp, #20]
 8011d2c:	4418      	add	r0, r3
 8011d2e:	f010 001f 	ands.w	r0, r0, #31
 8011d32:	f000 8092 	beq.w	8011e5a <_dtoa_r+0x90a>
 8011d36:	f1c0 0320 	rsb	r3, r0, #32
 8011d3a:	2b04      	cmp	r3, #4
 8011d3c:	f340 808a 	ble.w	8011e54 <_dtoa_r+0x904>
 8011d40:	f1c0 001c 	rsb	r0, r0, #28
 8011d44:	9b04      	ldr	r3, [sp, #16]
 8011d46:	4403      	add	r3, r0
 8011d48:	9304      	str	r3, [sp, #16]
 8011d4a:	9b05      	ldr	r3, [sp, #20]
 8011d4c:	4403      	add	r3, r0
 8011d4e:	4405      	add	r5, r0
 8011d50:	9305      	str	r3, [sp, #20]
 8011d52:	9b04      	ldr	r3, [sp, #16]
 8011d54:	2b00      	cmp	r3, #0
 8011d56:	dd07      	ble.n	8011d68 <_dtoa_r+0x818>
 8011d58:	ee18 1a10 	vmov	r1, s16
 8011d5c:	461a      	mov	r2, r3
 8011d5e:	4620      	mov	r0, r4
 8011d60:	f000 ffd6 	bl	8012d10 <__lshift>
 8011d64:	ee08 0a10 	vmov	s16, r0
 8011d68:	9b05      	ldr	r3, [sp, #20]
 8011d6a:	2b00      	cmp	r3, #0
 8011d6c:	dd05      	ble.n	8011d7a <_dtoa_r+0x82a>
 8011d6e:	4631      	mov	r1, r6
 8011d70:	461a      	mov	r2, r3
 8011d72:	4620      	mov	r0, r4
 8011d74:	f000 ffcc 	bl	8012d10 <__lshift>
 8011d78:	4606      	mov	r6, r0
 8011d7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	d06e      	beq.n	8011e5e <_dtoa_r+0x90e>
 8011d80:	ee18 0a10 	vmov	r0, s16
 8011d84:	4631      	mov	r1, r6
 8011d86:	f001 f833 	bl	8012df0 <__mcmp>
 8011d8a:	2800      	cmp	r0, #0
 8011d8c:	da67      	bge.n	8011e5e <_dtoa_r+0x90e>
 8011d8e:	9b00      	ldr	r3, [sp, #0]
 8011d90:	3b01      	subs	r3, #1
 8011d92:	ee18 1a10 	vmov	r1, s16
 8011d96:	9300      	str	r3, [sp, #0]
 8011d98:	220a      	movs	r2, #10
 8011d9a:	2300      	movs	r3, #0
 8011d9c:	4620      	mov	r0, r4
 8011d9e:	f000 fdbd 	bl	801291c <__multadd>
 8011da2:	9b08      	ldr	r3, [sp, #32]
 8011da4:	ee08 0a10 	vmov	s16, r0
 8011da8:	2b00      	cmp	r3, #0
 8011daa:	f000 81b1 	beq.w	8012110 <_dtoa_r+0xbc0>
 8011dae:	2300      	movs	r3, #0
 8011db0:	4639      	mov	r1, r7
 8011db2:	220a      	movs	r2, #10
 8011db4:	4620      	mov	r0, r4
 8011db6:	f000 fdb1 	bl	801291c <__multadd>
 8011dba:	9b02      	ldr	r3, [sp, #8]
 8011dbc:	2b00      	cmp	r3, #0
 8011dbe:	4607      	mov	r7, r0
 8011dc0:	f300 808e 	bgt.w	8011ee0 <_dtoa_r+0x990>
 8011dc4:	9b06      	ldr	r3, [sp, #24]
 8011dc6:	2b02      	cmp	r3, #2
 8011dc8:	dc51      	bgt.n	8011e6e <_dtoa_r+0x91e>
 8011dca:	e089      	b.n	8011ee0 <_dtoa_r+0x990>
 8011dcc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011dce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8011dd2:	e74b      	b.n	8011c6c <_dtoa_r+0x71c>
 8011dd4:	9b03      	ldr	r3, [sp, #12]
 8011dd6:	1e5e      	subs	r6, r3, #1
 8011dd8:	9b07      	ldr	r3, [sp, #28]
 8011dda:	42b3      	cmp	r3, r6
 8011ddc:	bfbf      	itttt	lt
 8011dde:	9b07      	ldrlt	r3, [sp, #28]
 8011de0:	9607      	strlt	r6, [sp, #28]
 8011de2:	1af2      	sublt	r2, r6, r3
 8011de4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8011de6:	bfb6      	itet	lt
 8011de8:	189b      	addlt	r3, r3, r2
 8011dea:	1b9e      	subge	r6, r3, r6
 8011dec:	930a      	strlt	r3, [sp, #40]	; 0x28
 8011dee:	9b03      	ldr	r3, [sp, #12]
 8011df0:	bfb8      	it	lt
 8011df2:	2600      	movlt	r6, #0
 8011df4:	2b00      	cmp	r3, #0
 8011df6:	bfb7      	itett	lt
 8011df8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8011dfc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8011e00:	1a9d      	sublt	r5, r3, r2
 8011e02:	2300      	movlt	r3, #0
 8011e04:	e734      	b.n	8011c70 <_dtoa_r+0x720>
 8011e06:	9e07      	ldr	r6, [sp, #28]
 8011e08:	9d04      	ldr	r5, [sp, #16]
 8011e0a:	9f08      	ldr	r7, [sp, #32]
 8011e0c:	e73b      	b.n	8011c86 <_dtoa_r+0x736>
 8011e0e:	9a07      	ldr	r2, [sp, #28]
 8011e10:	e767      	b.n	8011ce2 <_dtoa_r+0x792>
 8011e12:	9b06      	ldr	r3, [sp, #24]
 8011e14:	2b01      	cmp	r3, #1
 8011e16:	dc18      	bgt.n	8011e4a <_dtoa_r+0x8fa>
 8011e18:	f1ba 0f00 	cmp.w	sl, #0
 8011e1c:	d115      	bne.n	8011e4a <_dtoa_r+0x8fa>
 8011e1e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011e22:	b993      	cbnz	r3, 8011e4a <_dtoa_r+0x8fa>
 8011e24:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011e28:	0d1b      	lsrs	r3, r3, #20
 8011e2a:	051b      	lsls	r3, r3, #20
 8011e2c:	b183      	cbz	r3, 8011e50 <_dtoa_r+0x900>
 8011e2e:	9b04      	ldr	r3, [sp, #16]
 8011e30:	3301      	adds	r3, #1
 8011e32:	9304      	str	r3, [sp, #16]
 8011e34:	9b05      	ldr	r3, [sp, #20]
 8011e36:	3301      	adds	r3, #1
 8011e38:	9305      	str	r3, [sp, #20]
 8011e3a:	f04f 0801 	mov.w	r8, #1
 8011e3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011e40:	2b00      	cmp	r3, #0
 8011e42:	f47f af6a 	bne.w	8011d1a <_dtoa_r+0x7ca>
 8011e46:	2001      	movs	r0, #1
 8011e48:	e76f      	b.n	8011d2a <_dtoa_r+0x7da>
 8011e4a:	f04f 0800 	mov.w	r8, #0
 8011e4e:	e7f6      	b.n	8011e3e <_dtoa_r+0x8ee>
 8011e50:	4698      	mov	r8, r3
 8011e52:	e7f4      	b.n	8011e3e <_dtoa_r+0x8ee>
 8011e54:	f43f af7d 	beq.w	8011d52 <_dtoa_r+0x802>
 8011e58:	4618      	mov	r0, r3
 8011e5a:	301c      	adds	r0, #28
 8011e5c:	e772      	b.n	8011d44 <_dtoa_r+0x7f4>
 8011e5e:	9b03      	ldr	r3, [sp, #12]
 8011e60:	2b00      	cmp	r3, #0
 8011e62:	dc37      	bgt.n	8011ed4 <_dtoa_r+0x984>
 8011e64:	9b06      	ldr	r3, [sp, #24]
 8011e66:	2b02      	cmp	r3, #2
 8011e68:	dd34      	ble.n	8011ed4 <_dtoa_r+0x984>
 8011e6a:	9b03      	ldr	r3, [sp, #12]
 8011e6c:	9302      	str	r3, [sp, #8]
 8011e6e:	9b02      	ldr	r3, [sp, #8]
 8011e70:	b96b      	cbnz	r3, 8011e8e <_dtoa_r+0x93e>
 8011e72:	4631      	mov	r1, r6
 8011e74:	2205      	movs	r2, #5
 8011e76:	4620      	mov	r0, r4
 8011e78:	f000 fd50 	bl	801291c <__multadd>
 8011e7c:	4601      	mov	r1, r0
 8011e7e:	4606      	mov	r6, r0
 8011e80:	ee18 0a10 	vmov	r0, s16
 8011e84:	f000 ffb4 	bl	8012df0 <__mcmp>
 8011e88:	2800      	cmp	r0, #0
 8011e8a:	f73f adbb 	bgt.w	8011a04 <_dtoa_r+0x4b4>
 8011e8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011e90:	9d01      	ldr	r5, [sp, #4]
 8011e92:	43db      	mvns	r3, r3
 8011e94:	9300      	str	r3, [sp, #0]
 8011e96:	f04f 0800 	mov.w	r8, #0
 8011e9a:	4631      	mov	r1, r6
 8011e9c:	4620      	mov	r0, r4
 8011e9e:	f000 fd1b 	bl	80128d8 <_Bfree>
 8011ea2:	2f00      	cmp	r7, #0
 8011ea4:	f43f aea4 	beq.w	8011bf0 <_dtoa_r+0x6a0>
 8011ea8:	f1b8 0f00 	cmp.w	r8, #0
 8011eac:	d005      	beq.n	8011eba <_dtoa_r+0x96a>
 8011eae:	45b8      	cmp	r8, r7
 8011eb0:	d003      	beq.n	8011eba <_dtoa_r+0x96a>
 8011eb2:	4641      	mov	r1, r8
 8011eb4:	4620      	mov	r0, r4
 8011eb6:	f000 fd0f 	bl	80128d8 <_Bfree>
 8011eba:	4639      	mov	r1, r7
 8011ebc:	4620      	mov	r0, r4
 8011ebe:	f000 fd0b 	bl	80128d8 <_Bfree>
 8011ec2:	e695      	b.n	8011bf0 <_dtoa_r+0x6a0>
 8011ec4:	2600      	movs	r6, #0
 8011ec6:	4637      	mov	r7, r6
 8011ec8:	e7e1      	b.n	8011e8e <_dtoa_r+0x93e>
 8011eca:	9700      	str	r7, [sp, #0]
 8011ecc:	4637      	mov	r7, r6
 8011ece:	e599      	b.n	8011a04 <_dtoa_r+0x4b4>
 8011ed0:	40240000 	.word	0x40240000
 8011ed4:	9b08      	ldr	r3, [sp, #32]
 8011ed6:	2b00      	cmp	r3, #0
 8011ed8:	f000 80ca 	beq.w	8012070 <_dtoa_r+0xb20>
 8011edc:	9b03      	ldr	r3, [sp, #12]
 8011ede:	9302      	str	r3, [sp, #8]
 8011ee0:	2d00      	cmp	r5, #0
 8011ee2:	dd05      	ble.n	8011ef0 <_dtoa_r+0x9a0>
 8011ee4:	4639      	mov	r1, r7
 8011ee6:	462a      	mov	r2, r5
 8011ee8:	4620      	mov	r0, r4
 8011eea:	f000 ff11 	bl	8012d10 <__lshift>
 8011eee:	4607      	mov	r7, r0
 8011ef0:	f1b8 0f00 	cmp.w	r8, #0
 8011ef4:	d05b      	beq.n	8011fae <_dtoa_r+0xa5e>
 8011ef6:	6879      	ldr	r1, [r7, #4]
 8011ef8:	4620      	mov	r0, r4
 8011efa:	f000 fcad 	bl	8012858 <_Balloc>
 8011efe:	4605      	mov	r5, r0
 8011f00:	b928      	cbnz	r0, 8011f0e <_dtoa_r+0x9be>
 8011f02:	4b87      	ldr	r3, [pc, #540]	; (8012120 <_dtoa_r+0xbd0>)
 8011f04:	4602      	mov	r2, r0
 8011f06:	f240 21ea 	movw	r1, #746	; 0x2ea
 8011f0a:	f7ff bb3b 	b.w	8011584 <_dtoa_r+0x34>
 8011f0e:	693a      	ldr	r2, [r7, #16]
 8011f10:	3202      	adds	r2, #2
 8011f12:	0092      	lsls	r2, r2, #2
 8011f14:	f107 010c 	add.w	r1, r7, #12
 8011f18:	300c      	adds	r0, #12
 8011f1a:	f7fd fda7 	bl	800fa6c <memcpy>
 8011f1e:	2201      	movs	r2, #1
 8011f20:	4629      	mov	r1, r5
 8011f22:	4620      	mov	r0, r4
 8011f24:	f000 fef4 	bl	8012d10 <__lshift>
 8011f28:	9b01      	ldr	r3, [sp, #4]
 8011f2a:	f103 0901 	add.w	r9, r3, #1
 8011f2e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8011f32:	4413      	add	r3, r2
 8011f34:	9305      	str	r3, [sp, #20]
 8011f36:	f00a 0301 	and.w	r3, sl, #1
 8011f3a:	46b8      	mov	r8, r7
 8011f3c:	9304      	str	r3, [sp, #16]
 8011f3e:	4607      	mov	r7, r0
 8011f40:	4631      	mov	r1, r6
 8011f42:	ee18 0a10 	vmov	r0, s16
 8011f46:	f7ff fa77 	bl	8011438 <quorem>
 8011f4a:	4641      	mov	r1, r8
 8011f4c:	9002      	str	r0, [sp, #8]
 8011f4e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8011f52:	ee18 0a10 	vmov	r0, s16
 8011f56:	f000 ff4b 	bl	8012df0 <__mcmp>
 8011f5a:	463a      	mov	r2, r7
 8011f5c:	9003      	str	r0, [sp, #12]
 8011f5e:	4631      	mov	r1, r6
 8011f60:	4620      	mov	r0, r4
 8011f62:	f000 ff61 	bl	8012e28 <__mdiff>
 8011f66:	68c2      	ldr	r2, [r0, #12]
 8011f68:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8011f6c:	4605      	mov	r5, r0
 8011f6e:	bb02      	cbnz	r2, 8011fb2 <_dtoa_r+0xa62>
 8011f70:	4601      	mov	r1, r0
 8011f72:	ee18 0a10 	vmov	r0, s16
 8011f76:	f000 ff3b 	bl	8012df0 <__mcmp>
 8011f7a:	4602      	mov	r2, r0
 8011f7c:	4629      	mov	r1, r5
 8011f7e:	4620      	mov	r0, r4
 8011f80:	9207      	str	r2, [sp, #28]
 8011f82:	f000 fca9 	bl	80128d8 <_Bfree>
 8011f86:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8011f8a:	ea43 0102 	orr.w	r1, r3, r2
 8011f8e:	9b04      	ldr	r3, [sp, #16]
 8011f90:	430b      	orrs	r3, r1
 8011f92:	464d      	mov	r5, r9
 8011f94:	d10f      	bne.n	8011fb6 <_dtoa_r+0xa66>
 8011f96:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011f9a:	d02a      	beq.n	8011ff2 <_dtoa_r+0xaa2>
 8011f9c:	9b03      	ldr	r3, [sp, #12]
 8011f9e:	2b00      	cmp	r3, #0
 8011fa0:	dd02      	ble.n	8011fa8 <_dtoa_r+0xa58>
 8011fa2:	9b02      	ldr	r3, [sp, #8]
 8011fa4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8011fa8:	f88b a000 	strb.w	sl, [fp]
 8011fac:	e775      	b.n	8011e9a <_dtoa_r+0x94a>
 8011fae:	4638      	mov	r0, r7
 8011fb0:	e7ba      	b.n	8011f28 <_dtoa_r+0x9d8>
 8011fb2:	2201      	movs	r2, #1
 8011fb4:	e7e2      	b.n	8011f7c <_dtoa_r+0xa2c>
 8011fb6:	9b03      	ldr	r3, [sp, #12]
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	db04      	blt.n	8011fc6 <_dtoa_r+0xa76>
 8011fbc:	9906      	ldr	r1, [sp, #24]
 8011fbe:	430b      	orrs	r3, r1
 8011fc0:	9904      	ldr	r1, [sp, #16]
 8011fc2:	430b      	orrs	r3, r1
 8011fc4:	d122      	bne.n	801200c <_dtoa_r+0xabc>
 8011fc6:	2a00      	cmp	r2, #0
 8011fc8:	ddee      	ble.n	8011fa8 <_dtoa_r+0xa58>
 8011fca:	ee18 1a10 	vmov	r1, s16
 8011fce:	2201      	movs	r2, #1
 8011fd0:	4620      	mov	r0, r4
 8011fd2:	f000 fe9d 	bl	8012d10 <__lshift>
 8011fd6:	4631      	mov	r1, r6
 8011fd8:	ee08 0a10 	vmov	s16, r0
 8011fdc:	f000 ff08 	bl	8012df0 <__mcmp>
 8011fe0:	2800      	cmp	r0, #0
 8011fe2:	dc03      	bgt.n	8011fec <_dtoa_r+0xa9c>
 8011fe4:	d1e0      	bne.n	8011fa8 <_dtoa_r+0xa58>
 8011fe6:	f01a 0f01 	tst.w	sl, #1
 8011fea:	d0dd      	beq.n	8011fa8 <_dtoa_r+0xa58>
 8011fec:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011ff0:	d1d7      	bne.n	8011fa2 <_dtoa_r+0xa52>
 8011ff2:	2339      	movs	r3, #57	; 0x39
 8011ff4:	f88b 3000 	strb.w	r3, [fp]
 8011ff8:	462b      	mov	r3, r5
 8011ffa:	461d      	mov	r5, r3
 8011ffc:	3b01      	subs	r3, #1
 8011ffe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8012002:	2a39      	cmp	r2, #57	; 0x39
 8012004:	d071      	beq.n	80120ea <_dtoa_r+0xb9a>
 8012006:	3201      	adds	r2, #1
 8012008:	701a      	strb	r2, [r3, #0]
 801200a:	e746      	b.n	8011e9a <_dtoa_r+0x94a>
 801200c:	2a00      	cmp	r2, #0
 801200e:	dd07      	ble.n	8012020 <_dtoa_r+0xad0>
 8012010:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8012014:	d0ed      	beq.n	8011ff2 <_dtoa_r+0xaa2>
 8012016:	f10a 0301 	add.w	r3, sl, #1
 801201a:	f88b 3000 	strb.w	r3, [fp]
 801201e:	e73c      	b.n	8011e9a <_dtoa_r+0x94a>
 8012020:	9b05      	ldr	r3, [sp, #20]
 8012022:	f809 ac01 	strb.w	sl, [r9, #-1]
 8012026:	4599      	cmp	r9, r3
 8012028:	d047      	beq.n	80120ba <_dtoa_r+0xb6a>
 801202a:	ee18 1a10 	vmov	r1, s16
 801202e:	2300      	movs	r3, #0
 8012030:	220a      	movs	r2, #10
 8012032:	4620      	mov	r0, r4
 8012034:	f000 fc72 	bl	801291c <__multadd>
 8012038:	45b8      	cmp	r8, r7
 801203a:	ee08 0a10 	vmov	s16, r0
 801203e:	f04f 0300 	mov.w	r3, #0
 8012042:	f04f 020a 	mov.w	r2, #10
 8012046:	4641      	mov	r1, r8
 8012048:	4620      	mov	r0, r4
 801204a:	d106      	bne.n	801205a <_dtoa_r+0xb0a>
 801204c:	f000 fc66 	bl	801291c <__multadd>
 8012050:	4680      	mov	r8, r0
 8012052:	4607      	mov	r7, r0
 8012054:	f109 0901 	add.w	r9, r9, #1
 8012058:	e772      	b.n	8011f40 <_dtoa_r+0x9f0>
 801205a:	f000 fc5f 	bl	801291c <__multadd>
 801205e:	4639      	mov	r1, r7
 8012060:	4680      	mov	r8, r0
 8012062:	2300      	movs	r3, #0
 8012064:	220a      	movs	r2, #10
 8012066:	4620      	mov	r0, r4
 8012068:	f000 fc58 	bl	801291c <__multadd>
 801206c:	4607      	mov	r7, r0
 801206e:	e7f1      	b.n	8012054 <_dtoa_r+0xb04>
 8012070:	9b03      	ldr	r3, [sp, #12]
 8012072:	9302      	str	r3, [sp, #8]
 8012074:	9d01      	ldr	r5, [sp, #4]
 8012076:	ee18 0a10 	vmov	r0, s16
 801207a:	4631      	mov	r1, r6
 801207c:	f7ff f9dc 	bl	8011438 <quorem>
 8012080:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8012084:	9b01      	ldr	r3, [sp, #4]
 8012086:	f805 ab01 	strb.w	sl, [r5], #1
 801208a:	1aea      	subs	r2, r5, r3
 801208c:	9b02      	ldr	r3, [sp, #8]
 801208e:	4293      	cmp	r3, r2
 8012090:	dd09      	ble.n	80120a6 <_dtoa_r+0xb56>
 8012092:	ee18 1a10 	vmov	r1, s16
 8012096:	2300      	movs	r3, #0
 8012098:	220a      	movs	r2, #10
 801209a:	4620      	mov	r0, r4
 801209c:	f000 fc3e 	bl	801291c <__multadd>
 80120a0:	ee08 0a10 	vmov	s16, r0
 80120a4:	e7e7      	b.n	8012076 <_dtoa_r+0xb26>
 80120a6:	9b02      	ldr	r3, [sp, #8]
 80120a8:	2b00      	cmp	r3, #0
 80120aa:	bfc8      	it	gt
 80120ac:	461d      	movgt	r5, r3
 80120ae:	9b01      	ldr	r3, [sp, #4]
 80120b0:	bfd8      	it	le
 80120b2:	2501      	movle	r5, #1
 80120b4:	441d      	add	r5, r3
 80120b6:	f04f 0800 	mov.w	r8, #0
 80120ba:	ee18 1a10 	vmov	r1, s16
 80120be:	2201      	movs	r2, #1
 80120c0:	4620      	mov	r0, r4
 80120c2:	f000 fe25 	bl	8012d10 <__lshift>
 80120c6:	4631      	mov	r1, r6
 80120c8:	ee08 0a10 	vmov	s16, r0
 80120cc:	f000 fe90 	bl	8012df0 <__mcmp>
 80120d0:	2800      	cmp	r0, #0
 80120d2:	dc91      	bgt.n	8011ff8 <_dtoa_r+0xaa8>
 80120d4:	d102      	bne.n	80120dc <_dtoa_r+0xb8c>
 80120d6:	f01a 0f01 	tst.w	sl, #1
 80120da:	d18d      	bne.n	8011ff8 <_dtoa_r+0xaa8>
 80120dc:	462b      	mov	r3, r5
 80120de:	461d      	mov	r5, r3
 80120e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80120e4:	2a30      	cmp	r2, #48	; 0x30
 80120e6:	d0fa      	beq.n	80120de <_dtoa_r+0xb8e>
 80120e8:	e6d7      	b.n	8011e9a <_dtoa_r+0x94a>
 80120ea:	9a01      	ldr	r2, [sp, #4]
 80120ec:	429a      	cmp	r2, r3
 80120ee:	d184      	bne.n	8011ffa <_dtoa_r+0xaaa>
 80120f0:	9b00      	ldr	r3, [sp, #0]
 80120f2:	3301      	adds	r3, #1
 80120f4:	9300      	str	r3, [sp, #0]
 80120f6:	2331      	movs	r3, #49	; 0x31
 80120f8:	7013      	strb	r3, [r2, #0]
 80120fa:	e6ce      	b.n	8011e9a <_dtoa_r+0x94a>
 80120fc:	4b09      	ldr	r3, [pc, #36]	; (8012124 <_dtoa_r+0xbd4>)
 80120fe:	f7ff ba95 	b.w	801162c <_dtoa_r+0xdc>
 8012102:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012104:	2b00      	cmp	r3, #0
 8012106:	f47f aa6e 	bne.w	80115e6 <_dtoa_r+0x96>
 801210a:	4b07      	ldr	r3, [pc, #28]	; (8012128 <_dtoa_r+0xbd8>)
 801210c:	f7ff ba8e 	b.w	801162c <_dtoa_r+0xdc>
 8012110:	9b02      	ldr	r3, [sp, #8]
 8012112:	2b00      	cmp	r3, #0
 8012114:	dcae      	bgt.n	8012074 <_dtoa_r+0xb24>
 8012116:	9b06      	ldr	r3, [sp, #24]
 8012118:	2b02      	cmp	r3, #2
 801211a:	f73f aea8 	bgt.w	8011e6e <_dtoa_r+0x91e>
 801211e:	e7a9      	b.n	8012074 <_dtoa_r+0xb24>
 8012120:	08015b0f 	.word	0x08015b0f
 8012124:	08015a1c 	.word	0x08015a1c
 8012128:	08015a90 	.word	0x08015a90

0801212c <rshift>:
 801212c:	6903      	ldr	r3, [r0, #16]
 801212e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8012132:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012136:	ea4f 1261 	mov.w	r2, r1, asr #5
 801213a:	f100 0414 	add.w	r4, r0, #20
 801213e:	dd45      	ble.n	80121cc <rshift+0xa0>
 8012140:	f011 011f 	ands.w	r1, r1, #31
 8012144:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8012148:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801214c:	d10c      	bne.n	8012168 <rshift+0x3c>
 801214e:	f100 0710 	add.w	r7, r0, #16
 8012152:	4629      	mov	r1, r5
 8012154:	42b1      	cmp	r1, r6
 8012156:	d334      	bcc.n	80121c2 <rshift+0x96>
 8012158:	1a9b      	subs	r3, r3, r2
 801215a:	009b      	lsls	r3, r3, #2
 801215c:	1eea      	subs	r2, r5, #3
 801215e:	4296      	cmp	r6, r2
 8012160:	bf38      	it	cc
 8012162:	2300      	movcc	r3, #0
 8012164:	4423      	add	r3, r4
 8012166:	e015      	b.n	8012194 <rshift+0x68>
 8012168:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801216c:	f1c1 0820 	rsb	r8, r1, #32
 8012170:	40cf      	lsrs	r7, r1
 8012172:	f105 0e04 	add.w	lr, r5, #4
 8012176:	46a1      	mov	r9, r4
 8012178:	4576      	cmp	r6, lr
 801217a:	46f4      	mov	ip, lr
 801217c:	d815      	bhi.n	80121aa <rshift+0x7e>
 801217e:	1a9a      	subs	r2, r3, r2
 8012180:	0092      	lsls	r2, r2, #2
 8012182:	3a04      	subs	r2, #4
 8012184:	3501      	adds	r5, #1
 8012186:	42ae      	cmp	r6, r5
 8012188:	bf38      	it	cc
 801218a:	2200      	movcc	r2, #0
 801218c:	18a3      	adds	r3, r4, r2
 801218e:	50a7      	str	r7, [r4, r2]
 8012190:	b107      	cbz	r7, 8012194 <rshift+0x68>
 8012192:	3304      	adds	r3, #4
 8012194:	1b1a      	subs	r2, r3, r4
 8012196:	42a3      	cmp	r3, r4
 8012198:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801219c:	bf08      	it	eq
 801219e:	2300      	moveq	r3, #0
 80121a0:	6102      	str	r2, [r0, #16]
 80121a2:	bf08      	it	eq
 80121a4:	6143      	streq	r3, [r0, #20]
 80121a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80121aa:	f8dc c000 	ldr.w	ip, [ip]
 80121ae:	fa0c fc08 	lsl.w	ip, ip, r8
 80121b2:	ea4c 0707 	orr.w	r7, ip, r7
 80121b6:	f849 7b04 	str.w	r7, [r9], #4
 80121ba:	f85e 7b04 	ldr.w	r7, [lr], #4
 80121be:	40cf      	lsrs	r7, r1
 80121c0:	e7da      	b.n	8012178 <rshift+0x4c>
 80121c2:	f851 cb04 	ldr.w	ip, [r1], #4
 80121c6:	f847 cf04 	str.w	ip, [r7, #4]!
 80121ca:	e7c3      	b.n	8012154 <rshift+0x28>
 80121cc:	4623      	mov	r3, r4
 80121ce:	e7e1      	b.n	8012194 <rshift+0x68>

080121d0 <__hexdig_fun>:
 80121d0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80121d4:	2b09      	cmp	r3, #9
 80121d6:	d802      	bhi.n	80121de <__hexdig_fun+0xe>
 80121d8:	3820      	subs	r0, #32
 80121da:	b2c0      	uxtb	r0, r0
 80121dc:	4770      	bx	lr
 80121de:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80121e2:	2b05      	cmp	r3, #5
 80121e4:	d801      	bhi.n	80121ea <__hexdig_fun+0x1a>
 80121e6:	3847      	subs	r0, #71	; 0x47
 80121e8:	e7f7      	b.n	80121da <__hexdig_fun+0xa>
 80121ea:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80121ee:	2b05      	cmp	r3, #5
 80121f0:	d801      	bhi.n	80121f6 <__hexdig_fun+0x26>
 80121f2:	3827      	subs	r0, #39	; 0x27
 80121f4:	e7f1      	b.n	80121da <__hexdig_fun+0xa>
 80121f6:	2000      	movs	r0, #0
 80121f8:	4770      	bx	lr
	...

080121fc <__gethex>:
 80121fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012200:	ed2d 8b02 	vpush	{d8}
 8012204:	b089      	sub	sp, #36	; 0x24
 8012206:	ee08 0a10 	vmov	s16, r0
 801220a:	9304      	str	r3, [sp, #16]
 801220c:	4bb4      	ldr	r3, [pc, #720]	; (80124e0 <__gethex+0x2e4>)
 801220e:	681b      	ldr	r3, [r3, #0]
 8012210:	9301      	str	r3, [sp, #4]
 8012212:	4618      	mov	r0, r3
 8012214:	468b      	mov	fp, r1
 8012216:	4690      	mov	r8, r2
 8012218:	f7ed ffda 	bl	80001d0 <strlen>
 801221c:	9b01      	ldr	r3, [sp, #4]
 801221e:	f8db 2000 	ldr.w	r2, [fp]
 8012222:	4403      	add	r3, r0
 8012224:	4682      	mov	sl, r0
 8012226:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801222a:	9305      	str	r3, [sp, #20]
 801222c:	1c93      	adds	r3, r2, #2
 801222e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8012232:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8012236:	32fe      	adds	r2, #254	; 0xfe
 8012238:	18d1      	adds	r1, r2, r3
 801223a:	461f      	mov	r7, r3
 801223c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8012240:	9100      	str	r1, [sp, #0]
 8012242:	2830      	cmp	r0, #48	; 0x30
 8012244:	d0f8      	beq.n	8012238 <__gethex+0x3c>
 8012246:	f7ff ffc3 	bl	80121d0 <__hexdig_fun>
 801224a:	4604      	mov	r4, r0
 801224c:	2800      	cmp	r0, #0
 801224e:	d13a      	bne.n	80122c6 <__gethex+0xca>
 8012250:	9901      	ldr	r1, [sp, #4]
 8012252:	4652      	mov	r2, sl
 8012254:	4638      	mov	r0, r7
 8012256:	f7fe f9bc 	bl	80105d2 <strncmp>
 801225a:	4605      	mov	r5, r0
 801225c:	2800      	cmp	r0, #0
 801225e:	d168      	bne.n	8012332 <__gethex+0x136>
 8012260:	f817 000a 	ldrb.w	r0, [r7, sl]
 8012264:	eb07 060a 	add.w	r6, r7, sl
 8012268:	f7ff ffb2 	bl	80121d0 <__hexdig_fun>
 801226c:	2800      	cmp	r0, #0
 801226e:	d062      	beq.n	8012336 <__gethex+0x13a>
 8012270:	4633      	mov	r3, r6
 8012272:	7818      	ldrb	r0, [r3, #0]
 8012274:	2830      	cmp	r0, #48	; 0x30
 8012276:	461f      	mov	r7, r3
 8012278:	f103 0301 	add.w	r3, r3, #1
 801227c:	d0f9      	beq.n	8012272 <__gethex+0x76>
 801227e:	f7ff ffa7 	bl	80121d0 <__hexdig_fun>
 8012282:	2301      	movs	r3, #1
 8012284:	fab0 f480 	clz	r4, r0
 8012288:	0964      	lsrs	r4, r4, #5
 801228a:	4635      	mov	r5, r6
 801228c:	9300      	str	r3, [sp, #0]
 801228e:	463a      	mov	r2, r7
 8012290:	4616      	mov	r6, r2
 8012292:	3201      	adds	r2, #1
 8012294:	7830      	ldrb	r0, [r6, #0]
 8012296:	f7ff ff9b 	bl	80121d0 <__hexdig_fun>
 801229a:	2800      	cmp	r0, #0
 801229c:	d1f8      	bne.n	8012290 <__gethex+0x94>
 801229e:	9901      	ldr	r1, [sp, #4]
 80122a0:	4652      	mov	r2, sl
 80122a2:	4630      	mov	r0, r6
 80122a4:	f7fe f995 	bl	80105d2 <strncmp>
 80122a8:	b980      	cbnz	r0, 80122cc <__gethex+0xd0>
 80122aa:	b94d      	cbnz	r5, 80122c0 <__gethex+0xc4>
 80122ac:	eb06 050a 	add.w	r5, r6, sl
 80122b0:	462a      	mov	r2, r5
 80122b2:	4616      	mov	r6, r2
 80122b4:	3201      	adds	r2, #1
 80122b6:	7830      	ldrb	r0, [r6, #0]
 80122b8:	f7ff ff8a 	bl	80121d0 <__hexdig_fun>
 80122bc:	2800      	cmp	r0, #0
 80122be:	d1f8      	bne.n	80122b2 <__gethex+0xb6>
 80122c0:	1bad      	subs	r5, r5, r6
 80122c2:	00ad      	lsls	r5, r5, #2
 80122c4:	e004      	b.n	80122d0 <__gethex+0xd4>
 80122c6:	2400      	movs	r4, #0
 80122c8:	4625      	mov	r5, r4
 80122ca:	e7e0      	b.n	801228e <__gethex+0x92>
 80122cc:	2d00      	cmp	r5, #0
 80122ce:	d1f7      	bne.n	80122c0 <__gethex+0xc4>
 80122d0:	7833      	ldrb	r3, [r6, #0]
 80122d2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80122d6:	2b50      	cmp	r3, #80	; 0x50
 80122d8:	d13b      	bne.n	8012352 <__gethex+0x156>
 80122da:	7873      	ldrb	r3, [r6, #1]
 80122dc:	2b2b      	cmp	r3, #43	; 0x2b
 80122de:	d02c      	beq.n	801233a <__gethex+0x13e>
 80122e0:	2b2d      	cmp	r3, #45	; 0x2d
 80122e2:	d02e      	beq.n	8012342 <__gethex+0x146>
 80122e4:	1c71      	adds	r1, r6, #1
 80122e6:	f04f 0900 	mov.w	r9, #0
 80122ea:	7808      	ldrb	r0, [r1, #0]
 80122ec:	f7ff ff70 	bl	80121d0 <__hexdig_fun>
 80122f0:	1e43      	subs	r3, r0, #1
 80122f2:	b2db      	uxtb	r3, r3
 80122f4:	2b18      	cmp	r3, #24
 80122f6:	d82c      	bhi.n	8012352 <__gethex+0x156>
 80122f8:	f1a0 0210 	sub.w	r2, r0, #16
 80122fc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8012300:	f7ff ff66 	bl	80121d0 <__hexdig_fun>
 8012304:	1e43      	subs	r3, r0, #1
 8012306:	b2db      	uxtb	r3, r3
 8012308:	2b18      	cmp	r3, #24
 801230a:	d91d      	bls.n	8012348 <__gethex+0x14c>
 801230c:	f1b9 0f00 	cmp.w	r9, #0
 8012310:	d000      	beq.n	8012314 <__gethex+0x118>
 8012312:	4252      	negs	r2, r2
 8012314:	4415      	add	r5, r2
 8012316:	f8cb 1000 	str.w	r1, [fp]
 801231a:	b1e4      	cbz	r4, 8012356 <__gethex+0x15a>
 801231c:	9b00      	ldr	r3, [sp, #0]
 801231e:	2b00      	cmp	r3, #0
 8012320:	bf14      	ite	ne
 8012322:	2700      	movne	r7, #0
 8012324:	2706      	moveq	r7, #6
 8012326:	4638      	mov	r0, r7
 8012328:	b009      	add	sp, #36	; 0x24
 801232a:	ecbd 8b02 	vpop	{d8}
 801232e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012332:	463e      	mov	r6, r7
 8012334:	4625      	mov	r5, r4
 8012336:	2401      	movs	r4, #1
 8012338:	e7ca      	b.n	80122d0 <__gethex+0xd4>
 801233a:	f04f 0900 	mov.w	r9, #0
 801233e:	1cb1      	adds	r1, r6, #2
 8012340:	e7d3      	b.n	80122ea <__gethex+0xee>
 8012342:	f04f 0901 	mov.w	r9, #1
 8012346:	e7fa      	b.n	801233e <__gethex+0x142>
 8012348:	230a      	movs	r3, #10
 801234a:	fb03 0202 	mla	r2, r3, r2, r0
 801234e:	3a10      	subs	r2, #16
 8012350:	e7d4      	b.n	80122fc <__gethex+0x100>
 8012352:	4631      	mov	r1, r6
 8012354:	e7df      	b.n	8012316 <__gethex+0x11a>
 8012356:	1bf3      	subs	r3, r6, r7
 8012358:	3b01      	subs	r3, #1
 801235a:	4621      	mov	r1, r4
 801235c:	2b07      	cmp	r3, #7
 801235e:	dc0b      	bgt.n	8012378 <__gethex+0x17c>
 8012360:	ee18 0a10 	vmov	r0, s16
 8012364:	f000 fa78 	bl	8012858 <_Balloc>
 8012368:	4604      	mov	r4, r0
 801236a:	b940      	cbnz	r0, 801237e <__gethex+0x182>
 801236c:	4b5d      	ldr	r3, [pc, #372]	; (80124e4 <__gethex+0x2e8>)
 801236e:	4602      	mov	r2, r0
 8012370:	21de      	movs	r1, #222	; 0xde
 8012372:	485d      	ldr	r0, [pc, #372]	; (80124e8 <__gethex+0x2ec>)
 8012374:	f001 f8f6 	bl	8013564 <__assert_func>
 8012378:	3101      	adds	r1, #1
 801237a:	105b      	asrs	r3, r3, #1
 801237c:	e7ee      	b.n	801235c <__gethex+0x160>
 801237e:	f100 0914 	add.w	r9, r0, #20
 8012382:	f04f 0b00 	mov.w	fp, #0
 8012386:	f1ca 0301 	rsb	r3, sl, #1
 801238a:	f8cd 9008 	str.w	r9, [sp, #8]
 801238e:	f8cd b000 	str.w	fp, [sp]
 8012392:	9306      	str	r3, [sp, #24]
 8012394:	42b7      	cmp	r7, r6
 8012396:	d340      	bcc.n	801241a <__gethex+0x21e>
 8012398:	9802      	ldr	r0, [sp, #8]
 801239a:	9b00      	ldr	r3, [sp, #0]
 801239c:	f840 3b04 	str.w	r3, [r0], #4
 80123a0:	eba0 0009 	sub.w	r0, r0, r9
 80123a4:	1080      	asrs	r0, r0, #2
 80123a6:	0146      	lsls	r6, r0, #5
 80123a8:	6120      	str	r0, [r4, #16]
 80123aa:	4618      	mov	r0, r3
 80123ac:	f000 fb46 	bl	8012a3c <__hi0bits>
 80123b0:	1a30      	subs	r0, r6, r0
 80123b2:	f8d8 6000 	ldr.w	r6, [r8]
 80123b6:	42b0      	cmp	r0, r6
 80123b8:	dd63      	ble.n	8012482 <__gethex+0x286>
 80123ba:	1b87      	subs	r7, r0, r6
 80123bc:	4639      	mov	r1, r7
 80123be:	4620      	mov	r0, r4
 80123c0:	f000 feea 	bl	8013198 <__any_on>
 80123c4:	4682      	mov	sl, r0
 80123c6:	b1a8      	cbz	r0, 80123f4 <__gethex+0x1f8>
 80123c8:	1e7b      	subs	r3, r7, #1
 80123ca:	1159      	asrs	r1, r3, #5
 80123cc:	f003 021f 	and.w	r2, r3, #31
 80123d0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80123d4:	f04f 0a01 	mov.w	sl, #1
 80123d8:	fa0a f202 	lsl.w	r2, sl, r2
 80123dc:	420a      	tst	r2, r1
 80123de:	d009      	beq.n	80123f4 <__gethex+0x1f8>
 80123e0:	4553      	cmp	r3, sl
 80123e2:	dd05      	ble.n	80123f0 <__gethex+0x1f4>
 80123e4:	1eb9      	subs	r1, r7, #2
 80123e6:	4620      	mov	r0, r4
 80123e8:	f000 fed6 	bl	8013198 <__any_on>
 80123ec:	2800      	cmp	r0, #0
 80123ee:	d145      	bne.n	801247c <__gethex+0x280>
 80123f0:	f04f 0a02 	mov.w	sl, #2
 80123f4:	4639      	mov	r1, r7
 80123f6:	4620      	mov	r0, r4
 80123f8:	f7ff fe98 	bl	801212c <rshift>
 80123fc:	443d      	add	r5, r7
 80123fe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012402:	42ab      	cmp	r3, r5
 8012404:	da4c      	bge.n	80124a0 <__gethex+0x2a4>
 8012406:	ee18 0a10 	vmov	r0, s16
 801240a:	4621      	mov	r1, r4
 801240c:	f000 fa64 	bl	80128d8 <_Bfree>
 8012410:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012412:	2300      	movs	r3, #0
 8012414:	6013      	str	r3, [r2, #0]
 8012416:	27a3      	movs	r7, #163	; 0xa3
 8012418:	e785      	b.n	8012326 <__gethex+0x12a>
 801241a:	1e73      	subs	r3, r6, #1
 801241c:	9a05      	ldr	r2, [sp, #20]
 801241e:	9303      	str	r3, [sp, #12]
 8012420:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8012424:	4293      	cmp	r3, r2
 8012426:	d019      	beq.n	801245c <__gethex+0x260>
 8012428:	f1bb 0f20 	cmp.w	fp, #32
 801242c:	d107      	bne.n	801243e <__gethex+0x242>
 801242e:	9b02      	ldr	r3, [sp, #8]
 8012430:	9a00      	ldr	r2, [sp, #0]
 8012432:	f843 2b04 	str.w	r2, [r3], #4
 8012436:	9302      	str	r3, [sp, #8]
 8012438:	2300      	movs	r3, #0
 801243a:	9300      	str	r3, [sp, #0]
 801243c:	469b      	mov	fp, r3
 801243e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8012442:	f7ff fec5 	bl	80121d0 <__hexdig_fun>
 8012446:	9b00      	ldr	r3, [sp, #0]
 8012448:	f000 000f 	and.w	r0, r0, #15
 801244c:	fa00 f00b 	lsl.w	r0, r0, fp
 8012450:	4303      	orrs	r3, r0
 8012452:	9300      	str	r3, [sp, #0]
 8012454:	f10b 0b04 	add.w	fp, fp, #4
 8012458:	9b03      	ldr	r3, [sp, #12]
 801245a:	e00d      	b.n	8012478 <__gethex+0x27c>
 801245c:	9b03      	ldr	r3, [sp, #12]
 801245e:	9a06      	ldr	r2, [sp, #24]
 8012460:	4413      	add	r3, r2
 8012462:	42bb      	cmp	r3, r7
 8012464:	d3e0      	bcc.n	8012428 <__gethex+0x22c>
 8012466:	4618      	mov	r0, r3
 8012468:	9901      	ldr	r1, [sp, #4]
 801246a:	9307      	str	r3, [sp, #28]
 801246c:	4652      	mov	r2, sl
 801246e:	f7fe f8b0 	bl	80105d2 <strncmp>
 8012472:	9b07      	ldr	r3, [sp, #28]
 8012474:	2800      	cmp	r0, #0
 8012476:	d1d7      	bne.n	8012428 <__gethex+0x22c>
 8012478:	461e      	mov	r6, r3
 801247a:	e78b      	b.n	8012394 <__gethex+0x198>
 801247c:	f04f 0a03 	mov.w	sl, #3
 8012480:	e7b8      	b.n	80123f4 <__gethex+0x1f8>
 8012482:	da0a      	bge.n	801249a <__gethex+0x29e>
 8012484:	1a37      	subs	r7, r6, r0
 8012486:	4621      	mov	r1, r4
 8012488:	ee18 0a10 	vmov	r0, s16
 801248c:	463a      	mov	r2, r7
 801248e:	f000 fc3f 	bl	8012d10 <__lshift>
 8012492:	1bed      	subs	r5, r5, r7
 8012494:	4604      	mov	r4, r0
 8012496:	f100 0914 	add.w	r9, r0, #20
 801249a:	f04f 0a00 	mov.w	sl, #0
 801249e:	e7ae      	b.n	80123fe <__gethex+0x202>
 80124a0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80124a4:	42a8      	cmp	r0, r5
 80124a6:	dd72      	ble.n	801258e <__gethex+0x392>
 80124a8:	1b45      	subs	r5, r0, r5
 80124aa:	42ae      	cmp	r6, r5
 80124ac:	dc36      	bgt.n	801251c <__gethex+0x320>
 80124ae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80124b2:	2b02      	cmp	r3, #2
 80124b4:	d02a      	beq.n	801250c <__gethex+0x310>
 80124b6:	2b03      	cmp	r3, #3
 80124b8:	d02c      	beq.n	8012514 <__gethex+0x318>
 80124ba:	2b01      	cmp	r3, #1
 80124bc:	d11c      	bne.n	80124f8 <__gethex+0x2fc>
 80124be:	42ae      	cmp	r6, r5
 80124c0:	d11a      	bne.n	80124f8 <__gethex+0x2fc>
 80124c2:	2e01      	cmp	r6, #1
 80124c4:	d112      	bne.n	80124ec <__gethex+0x2f0>
 80124c6:	9a04      	ldr	r2, [sp, #16]
 80124c8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80124cc:	6013      	str	r3, [r2, #0]
 80124ce:	2301      	movs	r3, #1
 80124d0:	6123      	str	r3, [r4, #16]
 80124d2:	f8c9 3000 	str.w	r3, [r9]
 80124d6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80124d8:	2762      	movs	r7, #98	; 0x62
 80124da:	601c      	str	r4, [r3, #0]
 80124dc:	e723      	b.n	8012326 <__gethex+0x12a>
 80124de:	bf00      	nop
 80124e0:	08015b88 	.word	0x08015b88
 80124e4:	08015b0f 	.word	0x08015b0f
 80124e8:	08015b20 	.word	0x08015b20
 80124ec:	1e71      	subs	r1, r6, #1
 80124ee:	4620      	mov	r0, r4
 80124f0:	f000 fe52 	bl	8013198 <__any_on>
 80124f4:	2800      	cmp	r0, #0
 80124f6:	d1e6      	bne.n	80124c6 <__gethex+0x2ca>
 80124f8:	ee18 0a10 	vmov	r0, s16
 80124fc:	4621      	mov	r1, r4
 80124fe:	f000 f9eb 	bl	80128d8 <_Bfree>
 8012502:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012504:	2300      	movs	r3, #0
 8012506:	6013      	str	r3, [r2, #0]
 8012508:	2750      	movs	r7, #80	; 0x50
 801250a:	e70c      	b.n	8012326 <__gethex+0x12a>
 801250c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801250e:	2b00      	cmp	r3, #0
 8012510:	d1f2      	bne.n	80124f8 <__gethex+0x2fc>
 8012512:	e7d8      	b.n	80124c6 <__gethex+0x2ca>
 8012514:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012516:	2b00      	cmp	r3, #0
 8012518:	d1d5      	bne.n	80124c6 <__gethex+0x2ca>
 801251a:	e7ed      	b.n	80124f8 <__gethex+0x2fc>
 801251c:	1e6f      	subs	r7, r5, #1
 801251e:	f1ba 0f00 	cmp.w	sl, #0
 8012522:	d131      	bne.n	8012588 <__gethex+0x38c>
 8012524:	b127      	cbz	r7, 8012530 <__gethex+0x334>
 8012526:	4639      	mov	r1, r7
 8012528:	4620      	mov	r0, r4
 801252a:	f000 fe35 	bl	8013198 <__any_on>
 801252e:	4682      	mov	sl, r0
 8012530:	117b      	asrs	r3, r7, #5
 8012532:	2101      	movs	r1, #1
 8012534:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8012538:	f007 071f 	and.w	r7, r7, #31
 801253c:	fa01 f707 	lsl.w	r7, r1, r7
 8012540:	421f      	tst	r7, r3
 8012542:	4629      	mov	r1, r5
 8012544:	4620      	mov	r0, r4
 8012546:	bf18      	it	ne
 8012548:	f04a 0a02 	orrne.w	sl, sl, #2
 801254c:	1b76      	subs	r6, r6, r5
 801254e:	f7ff fded 	bl	801212c <rshift>
 8012552:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8012556:	2702      	movs	r7, #2
 8012558:	f1ba 0f00 	cmp.w	sl, #0
 801255c:	d048      	beq.n	80125f0 <__gethex+0x3f4>
 801255e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012562:	2b02      	cmp	r3, #2
 8012564:	d015      	beq.n	8012592 <__gethex+0x396>
 8012566:	2b03      	cmp	r3, #3
 8012568:	d017      	beq.n	801259a <__gethex+0x39e>
 801256a:	2b01      	cmp	r3, #1
 801256c:	d109      	bne.n	8012582 <__gethex+0x386>
 801256e:	f01a 0f02 	tst.w	sl, #2
 8012572:	d006      	beq.n	8012582 <__gethex+0x386>
 8012574:	f8d9 0000 	ldr.w	r0, [r9]
 8012578:	ea4a 0a00 	orr.w	sl, sl, r0
 801257c:	f01a 0f01 	tst.w	sl, #1
 8012580:	d10e      	bne.n	80125a0 <__gethex+0x3a4>
 8012582:	f047 0710 	orr.w	r7, r7, #16
 8012586:	e033      	b.n	80125f0 <__gethex+0x3f4>
 8012588:	f04f 0a01 	mov.w	sl, #1
 801258c:	e7d0      	b.n	8012530 <__gethex+0x334>
 801258e:	2701      	movs	r7, #1
 8012590:	e7e2      	b.n	8012558 <__gethex+0x35c>
 8012592:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012594:	f1c3 0301 	rsb	r3, r3, #1
 8012598:	9315      	str	r3, [sp, #84]	; 0x54
 801259a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801259c:	2b00      	cmp	r3, #0
 801259e:	d0f0      	beq.n	8012582 <__gethex+0x386>
 80125a0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80125a4:	f104 0314 	add.w	r3, r4, #20
 80125a8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80125ac:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80125b0:	f04f 0c00 	mov.w	ip, #0
 80125b4:	4618      	mov	r0, r3
 80125b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80125ba:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 80125be:	d01c      	beq.n	80125fa <__gethex+0x3fe>
 80125c0:	3201      	adds	r2, #1
 80125c2:	6002      	str	r2, [r0, #0]
 80125c4:	2f02      	cmp	r7, #2
 80125c6:	f104 0314 	add.w	r3, r4, #20
 80125ca:	d13f      	bne.n	801264c <__gethex+0x450>
 80125cc:	f8d8 2000 	ldr.w	r2, [r8]
 80125d0:	3a01      	subs	r2, #1
 80125d2:	42b2      	cmp	r2, r6
 80125d4:	d10a      	bne.n	80125ec <__gethex+0x3f0>
 80125d6:	1171      	asrs	r1, r6, #5
 80125d8:	2201      	movs	r2, #1
 80125da:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80125de:	f006 061f 	and.w	r6, r6, #31
 80125e2:	fa02 f606 	lsl.w	r6, r2, r6
 80125e6:	421e      	tst	r6, r3
 80125e8:	bf18      	it	ne
 80125ea:	4617      	movne	r7, r2
 80125ec:	f047 0720 	orr.w	r7, r7, #32
 80125f0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80125f2:	601c      	str	r4, [r3, #0]
 80125f4:	9b04      	ldr	r3, [sp, #16]
 80125f6:	601d      	str	r5, [r3, #0]
 80125f8:	e695      	b.n	8012326 <__gethex+0x12a>
 80125fa:	4299      	cmp	r1, r3
 80125fc:	f843 cc04 	str.w	ip, [r3, #-4]
 8012600:	d8d8      	bhi.n	80125b4 <__gethex+0x3b8>
 8012602:	68a3      	ldr	r3, [r4, #8]
 8012604:	459b      	cmp	fp, r3
 8012606:	db19      	blt.n	801263c <__gethex+0x440>
 8012608:	6861      	ldr	r1, [r4, #4]
 801260a:	ee18 0a10 	vmov	r0, s16
 801260e:	3101      	adds	r1, #1
 8012610:	f000 f922 	bl	8012858 <_Balloc>
 8012614:	4681      	mov	r9, r0
 8012616:	b918      	cbnz	r0, 8012620 <__gethex+0x424>
 8012618:	4b1a      	ldr	r3, [pc, #104]	; (8012684 <__gethex+0x488>)
 801261a:	4602      	mov	r2, r0
 801261c:	2184      	movs	r1, #132	; 0x84
 801261e:	e6a8      	b.n	8012372 <__gethex+0x176>
 8012620:	6922      	ldr	r2, [r4, #16]
 8012622:	3202      	adds	r2, #2
 8012624:	f104 010c 	add.w	r1, r4, #12
 8012628:	0092      	lsls	r2, r2, #2
 801262a:	300c      	adds	r0, #12
 801262c:	f7fd fa1e 	bl	800fa6c <memcpy>
 8012630:	4621      	mov	r1, r4
 8012632:	ee18 0a10 	vmov	r0, s16
 8012636:	f000 f94f 	bl	80128d8 <_Bfree>
 801263a:	464c      	mov	r4, r9
 801263c:	6923      	ldr	r3, [r4, #16]
 801263e:	1c5a      	adds	r2, r3, #1
 8012640:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8012644:	6122      	str	r2, [r4, #16]
 8012646:	2201      	movs	r2, #1
 8012648:	615a      	str	r2, [r3, #20]
 801264a:	e7bb      	b.n	80125c4 <__gethex+0x3c8>
 801264c:	6922      	ldr	r2, [r4, #16]
 801264e:	455a      	cmp	r2, fp
 8012650:	dd0b      	ble.n	801266a <__gethex+0x46e>
 8012652:	2101      	movs	r1, #1
 8012654:	4620      	mov	r0, r4
 8012656:	f7ff fd69 	bl	801212c <rshift>
 801265a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801265e:	3501      	adds	r5, #1
 8012660:	42ab      	cmp	r3, r5
 8012662:	f6ff aed0 	blt.w	8012406 <__gethex+0x20a>
 8012666:	2701      	movs	r7, #1
 8012668:	e7c0      	b.n	80125ec <__gethex+0x3f0>
 801266a:	f016 061f 	ands.w	r6, r6, #31
 801266e:	d0fa      	beq.n	8012666 <__gethex+0x46a>
 8012670:	4453      	add	r3, sl
 8012672:	f1c6 0620 	rsb	r6, r6, #32
 8012676:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801267a:	f000 f9df 	bl	8012a3c <__hi0bits>
 801267e:	42b0      	cmp	r0, r6
 8012680:	dbe7      	blt.n	8012652 <__gethex+0x456>
 8012682:	e7f0      	b.n	8012666 <__gethex+0x46a>
 8012684:	08015b0f 	.word	0x08015b0f

08012688 <L_shift>:
 8012688:	f1c2 0208 	rsb	r2, r2, #8
 801268c:	0092      	lsls	r2, r2, #2
 801268e:	b570      	push	{r4, r5, r6, lr}
 8012690:	f1c2 0620 	rsb	r6, r2, #32
 8012694:	6843      	ldr	r3, [r0, #4]
 8012696:	6804      	ldr	r4, [r0, #0]
 8012698:	fa03 f506 	lsl.w	r5, r3, r6
 801269c:	432c      	orrs	r4, r5
 801269e:	40d3      	lsrs	r3, r2
 80126a0:	6004      	str	r4, [r0, #0]
 80126a2:	f840 3f04 	str.w	r3, [r0, #4]!
 80126a6:	4288      	cmp	r0, r1
 80126a8:	d3f4      	bcc.n	8012694 <L_shift+0xc>
 80126aa:	bd70      	pop	{r4, r5, r6, pc}

080126ac <__match>:
 80126ac:	b530      	push	{r4, r5, lr}
 80126ae:	6803      	ldr	r3, [r0, #0]
 80126b0:	3301      	adds	r3, #1
 80126b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80126b6:	b914      	cbnz	r4, 80126be <__match+0x12>
 80126b8:	6003      	str	r3, [r0, #0]
 80126ba:	2001      	movs	r0, #1
 80126bc:	bd30      	pop	{r4, r5, pc}
 80126be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80126c2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80126c6:	2d19      	cmp	r5, #25
 80126c8:	bf98      	it	ls
 80126ca:	3220      	addls	r2, #32
 80126cc:	42a2      	cmp	r2, r4
 80126ce:	d0f0      	beq.n	80126b2 <__match+0x6>
 80126d0:	2000      	movs	r0, #0
 80126d2:	e7f3      	b.n	80126bc <__match+0x10>

080126d4 <__hexnan>:
 80126d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126d8:	680b      	ldr	r3, [r1, #0]
 80126da:	115e      	asrs	r6, r3, #5
 80126dc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80126e0:	f013 031f 	ands.w	r3, r3, #31
 80126e4:	b087      	sub	sp, #28
 80126e6:	bf18      	it	ne
 80126e8:	3604      	addne	r6, #4
 80126ea:	2500      	movs	r5, #0
 80126ec:	1f37      	subs	r7, r6, #4
 80126ee:	4690      	mov	r8, r2
 80126f0:	6802      	ldr	r2, [r0, #0]
 80126f2:	9301      	str	r3, [sp, #4]
 80126f4:	4682      	mov	sl, r0
 80126f6:	f846 5c04 	str.w	r5, [r6, #-4]
 80126fa:	46b9      	mov	r9, r7
 80126fc:	463c      	mov	r4, r7
 80126fe:	9502      	str	r5, [sp, #8]
 8012700:	46ab      	mov	fp, r5
 8012702:	7851      	ldrb	r1, [r2, #1]
 8012704:	1c53      	adds	r3, r2, #1
 8012706:	9303      	str	r3, [sp, #12]
 8012708:	b341      	cbz	r1, 801275c <__hexnan+0x88>
 801270a:	4608      	mov	r0, r1
 801270c:	9205      	str	r2, [sp, #20]
 801270e:	9104      	str	r1, [sp, #16]
 8012710:	f7ff fd5e 	bl	80121d0 <__hexdig_fun>
 8012714:	2800      	cmp	r0, #0
 8012716:	d14f      	bne.n	80127b8 <__hexnan+0xe4>
 8012718:	9904      	ldr	r1, [sp, #16]
 801271a:	9a05      	ldr	r2, [sp, #20]
 801271c:	2920      	cmp	r1, #32
 801271e:	d818      	bhi.n	8012752 <__hexnan+0x7e>
 8012720:	9b02      	ldr	r3, [sp, #8]
 8012722:	459b      	cmp	fp, r3
 8012724:	dd13      	ble.n	801274e <__hexnan+0x7a>
 8012726:	454c      	cmp	r4, r9
 8012728:	d206      	bcs.n	8012738 <__hexnan+0x64>
 801272a:	2d07      	cmp	r5, #7
 801272c:	dc04      	bgt.n	8012738 <__hexnan+0x64>
 801272e:	462a      	mov	r2, r5
 8012730:	4649      	mov	r1, r9
 8012732:	4620      	mov	r0, r4
 8012734:	f7ff ffa8 	bl	8012688 <L_shift>
 8012738:	4544      	cmp	r4, r8
 801273a:	d950      	bls.n	80127de <__hexnan+0x10a>
 801273c:	2300      	movs	r3, #0
 801273e:	f1a4 0904 	sub.w	r9, r4, #4
 8012742:	f844 3c04 	str.w	r3, [r4, #-4]
 8012746:	f8cd b008 	str.w	fp, [sp, #8]
 801274a:	464c      	mov	r4, r9
 801274c:	461d      	mov	r5, r3
 801274e:	9a03      	ldr	r2, [sp, #12]
 8012750:	e7d7      	b.n	8012702 <__hexnan+0x2e>
 8012752:	2929      	cmp	r1, #41	; 0x29
 8012754:	d156      	bne.n	8012804 <__hexnan+0x130>
 8012756:	3202      	adds	r2, #2
 8012758:	f8ca 2000 	str.w	r2, [sl]
 801275c:	f1bb 0f00 	cmp.w	fp, #0
 8012760:	d050      	beq.n	8012804 <__hexnan+0x130>
 8012762:	454c      	cmp	r4, r9
 8012764:	d206      	bcs.n	8012774 <__hexnan+0xa0>
 8012766:	2d07      	cmp	r5, #7
 8012768:	dc04      	bgt.n	8012774 <__hexnan+0xa0>
 801276a:	462a      	mov	r2, r5
 801276c:	4649      	mov	r1, r9
 801276e:	4620      	mov	r0, r4
 8012770:	f7ff ff8a 	bl	8012688 <L_shift>
 8012774:	4544      	cmp	r4, r8
 8012776:	d934      	bls.n	80127e2 <__hexnan+0x10e>
 8012778:	f1a8 0204 	sub.w	r2, r8, #4
 801277c:	4623      	mov	r3, r4
 801277e:	f853 1b04 	ldr.w	r1, [r3], #4
 8012782:	f842 1f04 	str.w	r1, [r2, #4]!
 8012786:	429f      	cmp	r7, r3
 8012788:	d2f9      	bcs.n	801277e <__hexnan+0xaa>
 801278a:	1b3b      	subs	r3, r7, r4
 801278c:	f023 0303 	bic.w	r3, r3, #3
 8012790:	3304      	adds	r3, #4
 8012792:	3401      	adds	r4, #1
 8012794:	3e03      	subs	r6, #3
 8012796:	42b4      	cmp	r4, r6
 8012798:	bf88      	it	hi
 801279a:	2304      	movhi	r3, #4
 801279c:	4443      	add	r3, r8
 801279e:	2200      	movs	r2, #0
 80127a0:	f843 2b04 	str.w	r2, [r3], #4
 80127a4:	429f      	cmp	r7, r3
 80127a6:	d2fb      	bcs.n	80127a0 <__hexnan+0xcc>
 80127a8:	683b      	ldr	r3, [r7, #0]
 80127aa:	b91b      	cbnz	r3, 80127b4 <__hexnan+0xe0>
 80127ac:	4547      	cmp	r7, r8
 80127ae:	d127      	bne.n	8012800 <__hexnan+0x12c>
 80127b0:	2301      	movs	r3, #1
 80127b2:	603b      	str	r3, [r7, #0]
 80127b4:	2005      	movs	r0, #5
 80127b6:	e026      	b.n	8012806 <__hexnan+0x132>
 80127b8:	3501      	adds	r5, #1
 80127ba:	2d08      	cmp	r5, #8
 80127bc:	f10b 0b01 	add.w	fp, fp, #1
 80127c0:	dd06      	ble.n	80127d0 <__hexnan+0xfc>
 80127c2:	4544      	cmp	r4, r8
 80127c4:	d9c3      	bls.n	801274e <__hexnan+0x7a>
 80127c6:	2300      	movs	r3, #0
 80127c8:	f844 3c04 	str.w	r3, [r4, #-4]
 80127cc:	2501      	movs	r5, #1
 80127ce:	3c04      	subs	r4, #4
 80127d0:	6822      	ldr	r2, [r4, #0]
 80127d2:	f000 000f 	and.w	r0, r0, #15
 80127d6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80127da:	6022      	str	r2, [r4, #0]
 80127dc:	e7b7      	b.n	801274e <__hexnan+0x7a>
 80127de:	2508      	movs	r5, #8
 80127e0:	e7b5      	b.n	801274e <__hexnan+0x7a>
 80127e2:	9b01      	ldr	r3, [sp, #4]
 80127e4:	2b00      	cmp	r3, #0
 80127e6:	d0df      	beq.n	80127a8 <__hexnan+0xd4>
 80127e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80127ec:	f1c3 0320 	rsb	r3, r3, #32
 80127f0:	fa22 f303 	lsr.w	r3, r2, r3
 80127f4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80127f8:	401a      	ands	r2, r3
 80127fa:	f846 2c04 	str.w	r2, [r6, #-4]
 80127fe:	e7d3      	b.n	80127a8 <__hexnan+0xd4>
 8012800:	3f04      	subs	r7, #4
 8012802:	e7d1      	b.n	80127a8 <__hexnan+0xd4>
 8012804:	2004      	movs	r0, #4
 8012806:	b007      	add	sp, #28
 8012808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801280c <_localeconv_r>:
 801280c:	4800      	ldr	r0, [pc, #0]	; (8012810 <_localeconv_r+0x4>)
 801280e:	4770      	bx	lr
 8012810:	200003b8 	.word	0x200003b8

08012814 <__retarget_lock_init_recursive>:
 8012814:	4770      	bx	lr

08012816 <__retarget_lock_acquire_recursive>:
 8012816:	4770      	bx	lr

08012818 <__retarget_lock_release_recursive>:
 8012818:	4770      	bx	lr

0801281a <__ascii_mbtowc>:
 801281a:	b082      	sub	sp, #8
 801281c:	b901      	cbnz	r1, 8012820 <__ascii_mbtowc+0x6>
 801281e:	a901      	add	r1, sp, #4
 8012820:	b142      	cbz	r2, 8012834 <__ascii_mbtowc+0x1a>
 8012822:	b14b      	cbz	r3, 8012838 <__ascii_mbtowc+0x1e>
 8012824:	7813      	ldrb	r3, [r2, #0]
 8012826:	600b      	str	r3, [r1, #0]
 8012828:	7812      	ldrb	r2, [r2, #0]
 801282a:	1e10      	subs	r0, r2, #0
 801282c:	bf18      	it	ne
 801282e:	2001      	movne	r0, #1
 8012830:	b002      	add	sp, #8
 8012832:	4770      	bx	lr
 8012834:	4610      	mov	r0, r2
 8012836:	e7fb      	b.n	8012830 <__ascii_mbtowc+0x16>
 8012838:	f06f 0001 	mvn.w	r0, #1
 801283c:	e7f8      	b.n	8012830 <__ascii_mbtowc+0x16>
	...

08012840 <__malloc_lock>:
 8012840:	4801      	ldr	r0, [pc, #4]	; (8012848 <__malloc_lock+0x8>)
 8012842:	f7ff bfe8 	b.w	8012816 <__retarget_lock_acquire_recursive>
 8012846:	bf00      	nop
 8012848:	200038e8 	.word	0x200038e8

0801284c <__malloc_unlock>:
 801284c:	4801      	ldr	r0, [pc, #4]	; (8012854 <__malloc_unlock+0x8>)
 801284e:	f7ff bfe3 	b.w	8012818 <__retarget_lock_release_recursive>
 8012852:	bf00      	nop
 8012854:	200038e8 	.word	0x200038e8

08012858 <_Balloc>:
 8012858:	b570      	push	{r4, r5, r6, lr}
 801285a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801285c:	4604      	mov	r4, r0
 801285e:	460d      	mov	r5, r1
 8012860:	b976      	cbnz	r6, 8012880 <_Balloc+0x28>
 8012862:	2010      	movs	r0, #16
 8012864:	f7fd f8f2 	bl	800fa4c <malloc>
 8012868:	4602      	mov	r2, r0
 801286a:	6260      	str	r0, [r4, #36]	; 0x24
 801286c:	b920      	cbnz	r0, 8012878 <_Balloc+0x20>
 801286e:	4b18      	ldr	r3, [pc, #96]	; (80128d0 <_Balloc+0x78>)
 8012870:	4818      	ldr	r0, [pc, #96]	; (80128d4 <_Balloc+0x7c>)
 8012872:	2166      	movs	r1, #102	; 0x66
 8012874:	f000 fe76 	bl	8013564 <__assert_func>
 8012878:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801287c:	6006      	str	r6, [r0, #0]
 801287e:	60c6      	str	r6, [r0, #12]
 8012880:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8012882:	68f3      	ldr	r3, [r6, #12]
 8012884:	b183      	cbz	r3, 80128a8 <_Balloc+0x50>
 8012886:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012888:	68db      	ldr	r3, [r3, #12]
 801288a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801288e:	b9b8      	cbnz	r0, 80128c0 <_Balloc+0x68>
 8012890:	2101      	movs	r1, #1
 8012892:	fa01 f605 	lsl.w	r6, r1, r5
 8012896:	1d72      	adds	r2, r6, #5
 8012898:	0092      	lsls	r2, r2, #2
 801289a:	4620      	mov	r0, r4
 801289c:	f7fd f8fc 	bl	800fa98 <_calloc_r>
 80128a0:	b160      	cbz	r0, 80128bc <_Balloc+0x64>
 80128a2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80128a6:	e00e      	b.n	80128c6 <_Balloc+0x6e>
 80128a8:	2221      	movs	r2, #33	; 0x21
 80128aa:	2104      	movs	r1, #4
 80128ac:	4620      	mov	r0, r4
 80128ae:	f7fd f8f3 	bl	800fa98 <_calloc_r>
 80128b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80128b4:	60f0      	str	r0, [r6, #12]
 80128b6:	68db      	ldr	r3, [r3, #12]
 80128b8:	2b00      	cmp	r3, #0
 80128ba:	d1e4      	bne.n	8012886 <_Balloc+0x2e>
 80128bc:	2000      	movs	r0, #0
 80128be:	bd70      	pop	{r4, r5, r6, pc}
 80128c0:	6802      	ldr	r2, [r0, #0]
 80128c2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80128c6:	2300      	movs	r3, #0
 80128c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80128cc:	e7f7      	b.n	80128be <_Balloc+0x66>
 80128ce:	bf00      	nop
 80128d0:	08015a9d 	.word	0x08015a9d
 80128d4:	08015b9c 	.word	0x08015b9c

080128d8 <_Bfree>:
 80128d8:	b570      	push	{r4, r5, r6, lr}
 80128da:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80128dc:	4605      	mov	r5, r0
 80128de:	460c      	mov	r4, r1
 80128e0:	b976      	cbnz	r6, 8012900 <_Bfree+0x28>
 80128e2:	2010      	movs	r0, #16
 80128e4:	f7fd f8b2 	bl	800fa4c <malloc>
 80128e8:	4602      	mov	r2, r0
 80128ea:	6268      	str	r0, [r5, #36]	; 0x24
 80128ec:	b920      	cbnz	r0, 80128f8 <_Bfree+0x20>
 80128ee:	4b09      	ldr	r3, [pc, #36]	; (8012914 <_Bfree+0x3c>)
 80128f0:	4809      	ldr	r0, [pc, #36]	; (8012918 <_Bfree+0x40>)
 80128f2:	218a      	movs	r1, #138	; 0x8a
 80128f4:	f000 fe36 	bl	8013564 <__assert_func>
 80128f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80128fc:	6006      	str	r6, [r0, #0]
 80128fe:	60c6      	str	r6, [r0, #12]
 8012900:	b13c      	cbz	r4, 8012912 <_Bfree+0x3a>
 8012902:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8012904:	6862      	ldr	r2, [r4, #4]
 8012906:	68db      	ldr	r3, [r3, #12]
 8012908:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801290c:	6021      	str	r1, [r4, #0]
 801290e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012912:	bd70      	pop	{r4, r5, r6, pc}
 8012914:	08015a9d 	.word	0x08015a9d
 8012918:	08015b9c 	.word	0x08015b9c

0801291c <__multadd>:
 801291c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012920:	690d      	ldr	r5, [r1, #16]
 8012922:	4607      	mov	r7, r0
 8012924:	460c      	mov	r4, r1
 8012926:	461e      	mov	r6, r3
 8012928:	f101 0c14 	add.w	ip, r1, #20
 801292c:	2000      	movs	r0, #0
 801292e:	f8dc 3000 	ldr.w	r3, [ip]
 8012932:	b299      	uxth	r1, r3
 8012934:	fb02 6101 	mla	r1, r2, r1, r6
 8012938:	0c1e      	lsrs	r6, r3, #16
 801293a:	0c0b      	lsrs	r3, r1, #16
 801293c:	fb02 3306 	mla	r3, r2, r6, r3
 8012940:	b289      	uxth	r1, r1
 8012942:	3001      	adds	r0, #1
 8012944:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012948:	4285      	cmp	r5, r0
 801294a:	f84c 1b04 	str.w	r1, [ip], #4
 801294e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8012952:	dcec      	bgt.n	801292e <__multadd+0x12>
 8012954:	b30e      	cbz	r6, 801299a <__multadd+0x7e>
 8012956:	68a3      	ldr	r3, [r4, #8]
 8012958:	42ab      	cmp	r3, r5
 801295a:	dc19      	bgt.n	8012990 <__multadd+0x74>
 801295c:	6861      	ldr	r1, [r4, #4]
 801295e:	4638      	mov	r0, r7
 8012960:	3101      	adds	r1, #1
 8012962:	f7ff ff79 	bl	8012858 <_Balloc>
 8012966:	4680      	mov	r8, r0
 8012968:	b928      	cbnz	r0, 8012976 <__multadd+0x5a>
 801296a:	4602      	mov	r2, r0
 801296c:	4b0c      	ldr	r3, [pc, #48]	; (80129a0 <__multadd+0x84>)
 801296e:	480d      	ldr	r0, [pc, #52]	; (80129a4 <__multadd+0x88>)
 8012970:	21b5      	movs	r1, #181	; 0xb5
 8012972:	f000 fdf7 	bl	8013564 <__assert_func>
 8012976:	6922      	ldr	r2, [r4, #16]
 8012978:	3202      	adds	r2, #2
 801297a:	f104 010c 	add.w	r1, r4, #12
 801297e:	0092      	lsls	r2, r2, #2
 8012980:	300c      	adds	r0, #12
 8012982:	f7fd f873 	bl	800fa6c <memcpy>
 8012986:	4621      	mov	r1, r4
 8012988:	4638      	mov	r0, r7
 801298a:	f7ff ffa5 	bl	80128d8 <_Bfree>
 801298e:	4644      	mov	r4, r8
 8012990:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012994:	3501      	adds	r5, #1
 8012996:	615e      	str	r6, [r3, #20]
 8012998:	6125      	str	r5, [r4, #16]
 801299a:	4620      	mov	r0, r4
 801299c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80129a0:	08015b0f 	.word	0x08015b0f
 80129a4:	08015b9c 	.word	0x08015b9c

080129a8 <__s2b>:
 80129a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80129ac:	460c      	mov	r4, r1
 80129ae:	4615      	mov	r5, r2
 80129b0:	461f      	mov	r7, r3
 80129b2:	2209      	movs	r2, #9
 80129b4:	3308      	adds	r3, #8
 80129b6:	4606      	mov	r6, r0
 80129b8:	fb93 f3f2 	sdiv	r3, r3, r2
 80129bc:	2100      	movs	r1, #0
 80129be:	2201      	movs	r2, #1
 80129c0:	429a      	cmp	r2, r3
 80129c2:	db09      	blt.n	80129d8 <__s2b+0x30>
 80129c4:	4630      	mov	r0, r6
 80129c6:	f7ff ff47 	bl	8012858 <_Balloc>
 80129ca:	b940      	cbnz	r0, 80129de <__s2b+0x36>
 80129cc:	4602      	mov	r2, r0
 80129ce:	4b19      	ldr	r3, [pc, #100]	; (8012a34 <__s2b+0x8c>)
 80129d0:	4819      	ldr	r0, [pc, #100]	; (8012a38 <__s2b+0x90>)
 80129d2:	21ce      	movs	r1, #206	; 0xce
 80129d4:	f000 fdc6 	bl	8013564 <__assert_func>
 80129d8:	0052      	lsls	r2, r2, #1
 80129da:	3101      	adds	r1, #1
 80129dc:	e7f0      	b.n	80129c0 <__s2b+0x18>
 80129de:	9b08      	ldr	r3, [sp, #32]
 80129e0:	6143      	str	r3, [r0, #20]
 80129e2:	2d09      	cmp	r5, #9
 80129e4:	f04f 0301 	mov.w	r3, #1
 80129e8:	6103      	str	r3, [r0, #16]
 80129ea:	dd16      	ble.n	8012a1a <__s2b+0x72>
 80129ec:	f104 0909 	add.w	r9, r4, #9
 80129f0:	46c8      	mov	r8, r9
 80129f2:	442c      	add	r4, r5
 80129f4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80129f8:	4601      	mov	r1, r0
 80129fa:	3b30      	subs	r3, #48	; 0x30
 80129fc:	220a      	movs	r2, #10
 80129fe:	4630      	mov	r0, r6
 8012a00:	f7ff ff8c 	bl	801291c <__multadd>
 8012a04:	45a0      	cmp	r8, r4
 8012a06:	d1f5      	bne.n	80129f4 <__s2b+0x4c>
 8012a08:	f1a5 0408 	sub.w	r4, r5, #8
 8012a0c:	444c      	add	r4, r9
 8012a0e:	1b2d      	subs	r5, r5, r4
 8012a10:	1963      	adds	r3, r4, r5
 8012a12:	42bb      	cmp	r3, r7
 8012a14:	db04      	blt.n	8012a20 <__s2b+0x78>
 8012a16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012a1a:	340a      	adds	r4, #10
 8012a1c:	2509      	movs	r5, #9
 8012a1e:	e7f6      	b.n	8012a0e <__s2b+0x66>
 8012a20:	f814 3b01 	ldrb.w	r3, [r4], #1
 8012a24:	4601      	mov	r1, r0
 8012a26:	3b30      	subs	r3, #48	; 0x30
 8012a28:	220a      	movs	r2, #10
 8012a2a:	4630      	mov	r0, r6
 8012a2c:	f7ff ff76 	bl	801291c <__multadd>
 8012a30:	e7ee      	b.n	8012a10 <__s2b+0x68>
 8012a32:	bf00      	nop
 8012a34:	08015b0f 	.word	0x08015b0f
 8012a38:	08015b9c 	.word	0x08015b9c

08012a3c <__hi0bits>:
 8012a3c:	0c03      	lsrs	r3, r0, #16
 8012a3e:	041b      	lsls	r3, r3, #16
 8012a40:	b9d3      	cbnz	r3, 8012a78 <__hi0bits+0x3c>
 8012a42:	0400      	lsls	r0, r0, #16
 8012a44:	2310      	movs	r3, #16
 8012a46:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8012a4a:	bf04      	itt	eq
 8012a4c:	0200      	lsleq	r0, r0, #8
 8012a4e:	3308      	addeq	r3, #8
 8012a50:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012a54:	bf04      	itt	eq
 8012a56:	0100      	lsleq	r0, r0, #4
 8012a58:	3304      	addeq	r3, #4
 8012a5a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8012a5e:	bf04      	itt	eq
 8012a60:	0080      	lsleq	r0, r0, #2
 8012a62:	3302      	addeq	r3, #2
 8012a64:	2800      	cmp	r0, #0
 8012a66:	db05      	blt.n	8012a74 <__hi0bits+0x38>
 8012a68:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8012a6c:	f103 0301 	add.w	r3, r3, #1
 8012a70:	bf08      	it	eq
 8012a72:	2320      	moveq	r3, #32
 8012a74:	4618      	mov	r0, r3
 8012a76:	4770      	bx	lr
 8012a78:	2300      	movs	r3, #0
 8012a7a:	e7e4      	b.n	8012a46 <__hi0bits+0xa>

08012a7c <__lo0bits>:
 8012a7c:	6803      	ldr	r3, [r0, #0]
 8012a7e:	f013 0207 	ands.w	r2, r3, #7
 8012a82:	4601      	mov	r1, r0
 8012a84:	d00b      	beq.n	8012a9e <__lo0bits+0x22>
 8012a86:	07da      	lsls	r2, r3, #31
 8012a88:	d423      	bmi.n	8012ad2 <__lo0bits+0x56>
 8012a8a:	0798      	lsls	r0, r3, #30
 8012a8c:	bf49      	itett	mi
 8012a8e:	085b      	lsrmi	r3, r3, #1
 8012a90:	089b      	lsrpl	r3, r3, #2
 8012a92:	2001      	movmi	r0, #1
 8012a94:	600b      	strmi	r3, [r1, #0]
 8012a96:	bf5c      	itt	pl
 8012a98:	600b      	strpl	r3, [r1, #0]
 8012a9a:	2002      	movpl	r0, #2
 8012a9c:	4770      	bx	lr
 8012a9e:	b298      	uxth	r0, r3
 8012aa0:	b9a8      	cbnz	r0, 8012ace <__lo0bits+0x52>
 8012aa2:	0c1b      	lsrs	r3, r3, #16
 8012aa4:	2010      	movs	r0, #16
 8012aa6:	b2da      	uxtb	r2, r3
 8012aa8:	b90a      	cbnz	r2, 8012aae <__lo0bits+0x32>
 8012aaa:	3008      	adds	r0, #8
 8012aac:	0a1b      	lsrs	r3, r3, #8
 8012aae:	071a      	lsls	r2, r3, #28
 8012ab0:	bf04      	itt	eq
 8012ab2:	091b      	lsreq	r3, r3, #4
 8012ab4:	3004      	addeq	r0, #4
 8012ab6:	079a      	lsls	r2, r3, #30
 8012ab8:	bf04      	itt	eq
 8012aba:	089b      	lsreq	r3, r3, #2
 8012abc:	3002      	addeq	r0, #2
 8012abe:	07da      	lsls	r2, r3, #31
 8012ac0:	d403      	bmi.n	8012aca <__lo0bits+0x4e>
 8012ac2:	085b      	lsrs	r3, r3, #1
 8012ac4:	f100 0001 	add.w	r0, r0, #1
 8012ac8:	d005      	beq.n	8012ad6 <__lo0bits+0x5a>
 8012aca:	600b      	str	r3, [r1, #0]
 8012acc:	4770      	bx	lr
 8012ace:	4610      	mov	r0, r2
 8012ad0:	e7e9      	b.n	8012aa6 <__lo0bits+0x2a>
 8012ad2:	2000      	movs	r0, #0
 8012ad4:	4770      	bx	lr
 8012ad6:	2020      	movs	r0, #32
 8012ad8:	4770      	bx	lr
	...

08012adc <__i2b>:
 8012adc:	b510      	push	{r4, lr}
 8012ade:	460c      	mov	r4, r1
 8012ae0:	2101      	movs	r1, #1
 8012ae2:	f7ff feb9 	bl	8012858 <_Balloc>
 8012ae6:	4602      	mov	r2, r0
 8012ae8:	b928      	cbnz	r0, 8012af6 <__i2b+0x1a>
 8012aea:	4b05      	ldr	r3, [pc, #20]	; (8012b00 <__i2b+0x24>)
 8012aec:	4805      	ldr	r0, [pc, #20]	; (8012b04 <__i2b+0x28>)
 8012aee:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8012af2:	f000 fd37 	bl	8013564 <__assert_func>
 8012af6:	2301      	movs	r3, #1
 8012af8:	6144      	str	r4, [r0, #20]
 8012afa:	6103      	str	r3, [r0, #16]
 8012afc:	bd10      	pop	{r4, pc}
 8012afe:	bf00      	nop
 8012b00:	08015b0f 	.word	0x08015b0f
 8012b04:	08015b9c 	.word	0x08015b9c

08012b08 <__multiply>:
 8012b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b0c:	4691      	mov	r9, r2
 8012b0e:	690a      	ldr	r2, [r1, #16]
 8012b10:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012b14:	429a      	cmp	r2, r3
 8012b16:	bfb8      	it	lt
 8012b18:	460b      	movlt	r3, r1
 8012b1a:	460c      	mov	r4, r1
 8012b1c:	bfbc      	itt	lt
 8012b1e:	464c      	movlt	r4, r9
 8012b20:	4699      	movlt	r9, r3
 8012b22:	6927      	ldr	r7, [r4, #16]
 8012b24:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8012b28:	68a3      	ldr	r3, [r4, #8]
 8012b2a:	6861      	ldr	r1, [r4, #4]
 8012b2c:	eb07 060a 	add.w	r6, r7, sl
 8012b30:	42b3      	cmp	r3, r6
 8012b32:	b085      	sub	sp, #20
 8012b34:	bfb8      	it	lt
 8012b36:	3101      	addlt	r1, #1
 8012b38:	f7ff fe8e 	bl	8012858 <_Balloc>
 8012b3c:	b930      	cbnz	r0, 8012b4c <__multiply+0x44>
 8012b3e:	4602      	mov	r2, r0
 8012b40:	4b44      	ldr	r3, [pc, #272]	; (8012c54 <__multiply+0x14c>)
 8012b42:	4845      	ldr	r0, [pc, #276]	; (8012c58 <__multiply+0x150>)
 8012b44:	f240 115d 	movw	r1, #349	; 0x15d
 8012b48:	f000 fd0c 	bl	8013564 <__assert_func>
 8012b4c:	f100 0514 	add.w	r5, r0, #20
 8012b50:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012b54:	462b      	mov	r3, r5
 8012b56:	2200      	movs	r2, #0
 8012b58:	4543      	cmp	r3, r8
 8012b5a:	d321      	bcc.n	8012ba0 <__multiply+0x98>
 8012b5c:	f104 0314 	add.w	r3, r4, #20
 8012b60:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8012b64:	f109 0314 	add.w	r3, r9, #20
 8012b68:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8012b6c:	9202      	str	r2, [sp, #8]
 8012b6e:	1b3a      	subs	r2, r7, r4
 8012b70:	3a15      	subs	r2, #21
 8012b72:	f022 0203 	bic.w	r2, r2, #3
 8012b76:	3204      	adds	r2, #4
 8012b78:	f104 0115 	add.w	r1, r4, #21
 8012b7c:	428f      	cmp	r7, r1
 8012b7e:	bf38      	it	cc
 8012b80:	2204      	movcc	r2, #4
 8012b82:	9201      	str	r2, [sp, #4]
 8012b84:	9a02      	ldr	r2, [sp, #8]
 8012b86:	9303      	str	r3, [sp, #12]
 8012b88:	429a      	cmp	r2, r3
 8012b8a:	d80c      	bhi.n	8012ba6 <__multiply+0x9e>
 8012b8c:	2e00      	cmp	r6, #0
 8012b8e:	dd03      	ble.n	8012b98 <__multiply+0x90>
 8012b90:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012b94:	2b00      	cmp	r3, #0
 8012b96:	d05a      	beq.n	8012c4e <__multiply+0x146>
 8012b98:	6106      	str	r6, [r0, #16]
 8012b9a:	b005      	add	sp, #20
 8012b9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ba0:	f843 2b04 	str.w	r2, [r3], #4
 8012ba4:	e7d8      	b.n	8012b58 <__multiply+0x50>
 8012ba6:	f8b3 a000 	ldrh.w	sl, [r3]
 8012baa:	f1ba 0f00 	cmp.w	sl, #0
 8012bae:	d024      	beq.n	8012bfa <__multiply+0xf2>
 8012bb0:	f104 0e14 	add.w	lr, r4, #20
 8012bb4:	46a9      	mov	r9, r5
 8012bb6:	f04f 0c00 	mov.w	ip, #0
 8012bba:	f85e 2b04 	ldr.w	r2, [lr], #4
 8012bbe:	f8d9 1000 	ldr.w	r1, [r9]
 8012bc2:	fa1f fb82 	uxth.w	fp, r2
 8012bc6:	b289      	uxth	r1, r1
 8012bc8:	fb0a 110b 	mla	r1, sl, fp, r1
 8012bcc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8012bd0:	f8d9 2000 	ldr.w	r2, [r9]
 8012bd4:	4461      	add	r1, ip
 8012bd6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012bda:	fb0a c20b 	mla	r2, sl, fp, ip
 8012bde:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8012be2:	b289      	uxth	r1, r1
 8012be4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8012be8:	4577      	cmp	r7, lr
 8012bea:	f849 1b04 	str.w	r1, [r9], #4
 8012bee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012bf2:	d8e2      	bhi.n	8012bba <__multiply+0xb2>
 8012bf4:	9a01      	ldr	r2, [sp, #4]
 8012bf6:	f845 c002 	str.w	ip, [r5, r2]
 8012bfa:	9a03      	ldr	r2, [sp, #12]
 8012bfc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8012c00:	3304      	adds	r3, #4
 8012c02:	f1b9 0f00 	cmp.w	r9, #0
 8012c06:	d020      	beq.n	8012c4a <__multiply+0x142>
 8012c08:	6829      	ldr	r1, [r5, #0]
 8012c0a:	f104 0c14 	add.w	ip, r4, #20
 8012c0e:	46ae      	mov	lr, r5
 8012c10:	f04f 0a00 	mov.w	sl, #0
 8012c14:	f8bc b000 	ldrh.w	fp, [ip]
 8012c18:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8012c1c:	fb09 220b 	mla	r2, r9, fp, r2
 8012c20:	4492      	add	sl, r2
 8012c22:	b289      	uxth	r1, r1
 8012c24:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8012c28:	f84e 1b04 	str.w	r1, [lr], #4
 8012c2c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8012c30:	f8be 1000 	ldrh.w	r1, [lr]
 8012c34:	0c12      	lsrs	r2, r2, #16
 8012c36:	fb09 1102 	mla	r1, r9, r2, r1
 8012c3a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8012c3e:	4567      	cmp	r7, ip
 8012c40:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8012c44:	d8e6      	bhi.n	8012c14 <__multiply+0x10c>
 8012c46:	9a01      	ldr	r2, [sp, #4]
 8012c48:	50a9      	str	r1, [r5, r2]
 8012c4a:	3504      	adds	r5, #4
 8012c4c:	e79a      	b.n	8012b84 <__multiply+0x7c>
 8012c4e:	3e01      	subs	r6, #1
 8012c50:	e79c      	b.n	8012b8c <__multiply+0x84>
 8012c52:	bf00      	nop
 8012c54:	08015b0f 	.word	0x08015b0f
 8012c58:	08015b9c 	.word	0x08015b9c

08012c5c <__pow5mult>:
 8012c5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012c60:	4615      	mov	r5, r2
 8012c62:	f012 0203 	ands.w	r2, r2, #3
 8012c66:	4606      	mov	r6, r0
 8012c68:	460f      	mov	r7, r1
 8012c6a:	d007      	beq.n	8012c7c <__pow5mult+0x20>
 8012c6c:	4c25      	ldr	r4, [pc, #148]	; (8012d04 <__pow5mult+0xa8>)
 8012c6e:	3a01      	subs	r2, #1
 8012c70:	2300      	movs	r3, #0
 8012c72:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012c76:	f7ff fe51 	bl	801291c <__multadd>
 8012c7a:	4607      	mov	r7, r0
 8012c7c:	10ad      	asrs	r5, r5, #2
 8012c7e:	d03d      	beq.n	8012cfc <__pow5mult+0xa0>
 8012c80:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8012c82:	b97c      	cbnz	r4, 8012ca4 <__pow5mult+0x48>
 8012c84:	2010      	movs	r0, #16
 8012c86:	f7fc fee1 	bl	800fa4c <malloc>
 8012c8a:	4602      	mov	r2, r0
 8012c8c:	6270      	str	r0, [r6, #36]	; 0x24
 8012c8e:	b928      	cbnz	r0, 8012c9c <__pow5mult+0x40>
 8012c90:	4b1d      	ldr	r3, [pc, #116]	; (8012d08 <__pow5mult+0xac>)
 8012c92:	481e      	ldr	r0, [pc, #120]	; (8012d0c <__pow5mult+0xb0>)
 8012c94:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8012c98:	f000 fc64 	bl	8013564 <__assert_func>
 8012c9c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012ca0:	6004      	str	r4, [r0, #0]
 8012ca2:	60c4      	str	r4, [r0, #12]
 8012ca4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8012ca8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012cac:	b94c      	cbnz	r4, 8012cc2 <__pow5mult+0x66>
 8012cae:	f240 2171 	movw	r1, #625	; 0x271
 8012cb2:	4630      	mov	r0, r6
 8012cb4:	f7ff ff12 	bl	8012adc <__i2b>
 8012cb8:	2300      	movs	r3, #0
 8012cba:	f8c8 0008 	str.w	r0, [r8, #8]
 8012cbe:	4604      	mov	r4, r0
 8012cc0:	6003      	str	r3, [r0, #0]
 8012cc2:	f04f 0900 	mov.w	r9, #0
 8012cc6:	07eb      	lsls	r3, r5, #31
 8012cc8:	d50a      	bpl.n	8012ce0 <__pow5mult+0x84>
 8012cca:	4639      	mov	r1, r7
 8012ccc:	4622      	mov	r2, r4
 8012cce:	4630      	mov	r0, r6
 8012cd0:	f7ff ff1a 	bl	8012b08 <__multiply>
 8012cd4:	4639      	mov	r1, r7
 8012cd6:	4680      	mov	r8, r0
 8012cd8:	4630      	mov	r0, r6
 8012cda:	f7ff fdfd 	bl	80128d8 <_Bfree>
 8012cde:	4647      	mov	r7, r8
 8012ce0:	106d      	asrs	r5, r5, #1
 8012ce2:	d00b      	beq.n	8012cfc <__pow5mult+0xa0>
 8012ce4:	6820      	ldr	r0, [r4, #0]
 8012ce6:	b938      	cbnz	r0, 8012cf8 <__pow5mult+0x9c>
 8012ce8:	4622      	mov	r2, r4
 8012cea:	4621      	mov	r1, r4
 8012cec:	4630      	mov	r0, r6
 8012cee:	f7ff ff0b 	bl	8012b08 <__multiply>
 8012cf2:	6020      	str	r0, [r4, #0]
 8012cf4:	f8c0 9000 	str.w	r9, [r0]
 8012cf8:	4604      	mov	r4, r0
 8012cfa:	e7e4      	b.n	8012cc6 <__pow5mult+0x6a>
 8012cfc:	4638      	mov	r0, r7
 8012cfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012d02:	bf00      	nop
 8012d04:	08015ce8 	.word	0x08015ce8
 8012d08:	08015a9d 	.word	0x08015a9d
 8012d0c:	08015b9c 	.word	0x08015b9c

08012d10 <__lshift>:
 8012d10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012d14:	460c      	mov	r4, r1
 8012d16:	6849      	ldr	r1, [r1, #4]
 8012d18:	6923      	ldr	r3, [r4, #16]
 8012d1a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012d1e:	68a3      	ldr	r3, [r4, #8]
 8012d20:	4607      	mov	r7, r0
 8012d22:	4691      	mov	r9, r2
 8012d24:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012d28:	f108 0601 	add.w	r6, r8, #1
 8012d2c:	42b3      	cmp	r3, r6
 8012d2e:	db0b      	blt.n	8012d48 <__lshift+0x38>
 8012d30:	4638      	mov	r0, r7
 8012d32:	f7ff fd91 	bl	8012858 <_Balloc>
 8012d36:	4605      	mov	r5, r0
 8012d38:	b948      	cbnz	r0, 8012d4e <__lshift+0x3e>
 8012d3a:	4602      	mov	r2, r0
 8012d3c:	4b2a      	ldr	r3, [pc, #168]	; (8012de8 <__lshift+0xd8>)
 8012d3e:	482b      	ldr	r0, [pc, #172]	; (8012dec <__lshift+0xdc>)
 8012d40:	f240 11d9 	movw	r1, #473	; 0x1d9
 8012d44:	f000 fc0e 	bl	8013564 <__assert_func>
 8012d48:	3101      	adds	r1, #1
 8012d4a:	005b      	lsls	r3, r3, #1
 8012d4c:	e7ee      	b.n	8012d2c <__lshift+0x1c>
 8012d4e:	2300      	movs	r3, #0
 8012d50:	f100 0114 	add.w	r1, r0, #20
 8012d54:	f100 0210 	add.w	r2, r0, #16
 8012d58:	4618      	mov	r0, r3
 8012d5a:	4553      	cmp	r3, sl
 8012d5c:	db37      	blt.n	8012dce <__lshift+0xbe>
 8012d5e:	6920      	ldr	r0, [r4, #16]
 8012d60:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012d64:	f104 0314 	add.w	r3, r4, #20
 8012d68:	f019 091f 	ands.w	r9, r9, #31
 8012d6c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012d70:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8012d74:	d02f      	beq.n	8012dd6 <__lshift+0xc6>
 8012d76:	f1c9 0e20 	rsb	lr, r9, #32
 8012d7a:	468a      	mov	sl, r1
 8012d7c:	f04f 0c00 	mov.w	ip, #0
 8012d80:	681a      	ldr	r2, [r3, #0]
 8012d82:	fa02 f209 	lsl.w	r2, r2, r9
 8012d86:	ea42 020c 	orr.w	r2, r2, ip
 8012d8a:	f84a 2b04 	str.w	r2, [sl], #4
 8012d8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8012d92:	4298      	cmp	r0, r3
 8012d94:	fa22 fc0e 	lsr.w	ip, r2, lr
 8012d98:	d8f2      	bhi.n	8012d80 <__lshift+0x70>
 8012d9a:	1b03      	subs	r3, r0, r4
 8012d9c:	3b15      	subs	r3, #21
 8012d9e:	f023 0303 	bic.w	r3, r3, #3
 8012da2:	3304      	adds	r3, #4
 8012da4:	f104 0215 	add.w	r2, r4, #21
 8012da8:	4290      	cmp	r0, r2
 8012daa:	bf38      	it	cc
 8012dac:	2304      	movcc	r3, #4
 8012dae:	f841 c003 	str.w	ip, [r1, r3]
 8012db2:	f1bc 0f00 	cmp.w	ip, #0
 8012db6:	d001      	beq.n	8012dbc <__lshift+0xac>
 8012db8:	f108 0602 	add.w	r6, r8, #2
 8012dbc:	3e01      	subs	r6, #1
 8012dbe:	4638      	mov	r0, r7
 8012dc0:	612e      	str	r6, [r5, #16]
 8012dc2:	4621      	mov	r1, r4
 8012dc4:	f7ff fd88 	bl	80128d8 <_Bfree>
 8012dc8:	4628      	mov	r0, r5
 8012dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012dce:	f842 0f04 	str.w	r0, [r2, #4]!
 8012dd2:	3301      	adds	r3, #1
 8012dd4:	e7c1      	b.n	8012d5a <__lshift+0x4a>
 8012dd6:	3904      	subs	r1, #4
 8012dd8:	f853 2b04 	ldr.w	r2, [r3], #4
 8012ddc:	f841 2f04 	str.w	r2, [r1, #4]!
 8012de0:	4298      	cmp	r0, r3
 8012de2:	d8f9      	bhi.n	8012dd8 <__lshift+0xc8>
 8012de4:	e7ea      	b.n	8012dbc <__lshift+0xac>
 8012de6:	bf00      	nop
 8012de8:	08015b0f 	.word	0x08015b0f
 8012dec:	08015b9c 	.word	0x08015b9c

08012df0 <__mcmp>:
 8012df0:	b530      	push	{r4, r5, lr}
 8012df2:	6902      	ldr	r2, [r0, #16]
 8012df4:	690c      	ldr	r4, [r1, #16]
 8012df6:	1b12      	subs	r2, r2, r4
 8012df8:	d10e      	bne.n	8012e18 <__mcmp+0x28>
 8012dfa:	f100 0314 	add.w	r3, r0, #20
 8012dfe:	3114      	adds	r1, #20
 8012e00:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8012e04:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8012e08:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8012e0c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8012e10:	42a5      	cmp	r5, r4
 8012e12:	d003      	beq.n	8012e1c <__mcmp+0x2c>
 8012e14:	d305      	bcc.n	8012e22 <__mcmp+0x32>
 8012e16:	2201      	movs	r2, #1
 8012e18:	4610      	mov	r0, r2
 8012e1a:	bd30      	pop	{r4, r5, pc}
 8012e1c:	4283      	cmp	r3, r0
 8012e1e:	d3f3      	bcc.n	8012e08 <__mcmp+0x18>
 8012e20:	e7fa      	b.n	8012e18 <__mcmp+0x28>
 8012e22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012e26:	e7f7      	b.n	8012e18 <__mcmp+0x28>

08012e28 <__mdiff>:
 8012e28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e2c:	460c      	mov	r4, r1
 8012e2e:	4606      	mov	r6, r0
 8012e30:	4611      	mov	r1, r2
 8012e32:	4620      	mov	r0, r4
 8012e34:	4690      	mov	r8, r2
 8012e36:	f7ff ffdb 	bl	8012df0 <__mcmp>
 8012e3a:	1e05      	subs	r5, r0, #0
 8012e3c:	d110      	bne.n	8012e60 <__mdiff+0x38>
 8012e3e:	4629      	mov	r1, r5
 8012e40:	4630      	mov	r0, r6
 8012e42:	f7ff fd09 	bl	8012858 <_Balloc>
 8012e46:	b930      	cbnz	r0, 8012e56 <__mdiff+0x2e>
 8012e48:	4b3a      	ldr	r3, [pc, #232]	; (8012f34 <__mdiff+0x10c>)
 8012e4a:	4602      	mov	r2, r0
 8012e4c:	f240 2132 	movw	r1, #562	; 0x232
 8012e50:	4839      	ldr	r0, [pc, #228]	; (8012f38 <__mdiff+0x110>)
 8012e52:	f000 fb87 	bl	8013564 <__assert_func>
 8012e56:	2301      	movs	r3, #1
 8012e58:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012e5c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e60:	bfa4      	itt	ge
 8012e62:	4643      	movge	r3, r8
 8012e64:	46a0      	movge	r8, r4
 8012e66:	4630      	mov	r0, r6
 8012e68:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8012e6c:	bfa6      	itte	ge
 8012e6e:	461c      	movge	r4, r3
 8012e70:	2500      	movge	r5, #0
 8012e72:	2501      	movlt	r5, #1
 8012e74:	f7ff fcf0 	bl	8012858 <_Balloc>
 8012e78:	b920      	cbnz	r0, 8012e84 <__mdiff+0x5c>
 8012e7a:	4b2e      	ldr	r3, [pc, #184]	; (8012f34 <__mdiff+0x10c>)
 8012e7c:	4602      	mov	r2, r0
 8012e7e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8012e82:	e7e5      	b.n	8012e50 <__mdiff+0x28>
 8012e84:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8012e88:	6926      	ldr	r6, [r4, #16]
 8012e8a:	60c5      	str	r5, [r0, #12]
 8012e8c:	f104 0914 	add.w	r9, r4, #20
 8012e90:	f108 0514 	add.w	r5, r8, #20
 8012e94:	f100 0e14 	add.w	lr, r0, #20
 8012e98:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8012e9c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8012ea0:	f108 0210 	add.w	r2, r8, #16
 8012ea4:	46f2      	mov	sl, lr
 8012ea6:	2100      	movs	r1, #0
 8012ea8:	f859 3b04 	ldr.w	r3, [r9], #4
 8012eac:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8012eb0:	fa1f f883 	uxth.w	r8, r3
 8012eb4:	fa11 f18b 	uxtah	r1, r1, fp
 8012eb8:	0c1b      	lsrs	r3, r3, #16
 8012eba:	eba1 0808 	sub.w	r8, r1, r8
 8012ebe:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8012ec2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8012ec6:	fa1f f888 	uxth.w	r8, r8
 8012eca:	1419      	asrs	r1, r3, #16
 8012ecc:	454e      	cmp	r6, r9
 8012ece:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8012ed2:	f84a 3b04 	str.w	r3, [sl], #4
 8012ed6:	d8e7      	bhi.n	8012ea8 <__mdiff+0x80>
 8012ed8:	1b33      	subs	r3, r6, r4
 8012eda:	3b15      	subs	r3, #21
 8012edc:	f023 0303 	bic.w	r3, r3, #3
 8012ee0:	3304      	adds	r3, #4
 8012ee2:	3415      	adds	r4, #21
 8012ee4:	42a6      	cmp	r6, r4
 8012ee6:	bf38      	it	cc
 8012ee8:	2304      	movcc	r3, #4
 8012eea:	441d      	add	r5, r3
 8012eec:	4473      	add	r3, lr
 8012eee:	469e      	mov	lr, r3
 8012ef0:	462e      	mov	r6, r5
 8012ef2:	4566      	cmp	r6, ip
 8012ef4:	d30e      	bcc.n	8012f14 <__mdiff+0xec>
 8012ef6:	f10c 0203 	add.w	r2, ip, #3
 8012efa:	1b52      	subs	r2, r2, r5
 8012efc:	f022 0203 	bic.w	r2, r2, #3
 8012f00:	3d03      	subs	r5, #3
 8012f02:	45ac      	cmp	ip, r5
 8012f04:	bf38      	it	cc
 8012f06:	2200      	movcc	r2, #0
 8012f08:	441a      	add	r2, r3
 8012f0a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8012f0e:	b17b      	cbz	r3, 8012f30 <__mdiff+0x108>
 8012f10:	6107      	str	r7, [r0, #16]
 8012f12:	e7a3      	b.n	8012e5c <__mdiff+0x34>
 8012f14:	f856 8b04 	ldr.w	r8, [r6], #4
 8012f18:	fa11 f288 	uxtah	r2, r1, r8
 8012f1c:	1414      	asrs	r4, r2, #16
 8012f1e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8012f22:	b292      	uxth	r2, r2
 8012f24:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8012f28:	f84e 2b04 	str.w	r2, [lr], #4
 8012f2c:	1421      	asrs	r1, r4, #16
 8012f2e:	e7e0      	b.n	8012ef2 <__mdiff+0xca>
 8012f30:	3f01      	subs	r7, #1
 8012f32:	e7ea      	b.n	8012f0a <__mdiff+0xe2>
 8012f34:	08015b0f 	.word	0x08015b0f
 8012f38:	08015b9c 	.word	0x08015b9c

08012f3c <__ulp>:
 8012f3c:	b082      	sub	sp, #8
 8012f3e:	ed8d 0b00 	vstr	d0, [sp]
 8012f42:	9b01      	ldr	r3, [sp, #4]
 8012f44:	4912      	ldr	r1, [pc, #72]	; (8012f90 <__ulp+0x54>)
 8012f46:	4019      	ands	r1, r3
 8012f48:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8012f4c:	2900      	cmp	r1, #0
 8012f4e:	dd05      	ble.n	8012f5c <__ulp+0x20>
 8012f50:	2200      	movs	r2, #0
 8012f52:	460b      	mov	r3, r1
 8012f54:	ec43 2b10 	vmov	d0, r2, r3
 8012f58:	b002      	add	sp, #8
 8012f5a:	4770      	bx	lr
 8012f5c:	4249      	negs	r1, r1
 8012f5e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8012f62:	ea4f 5021 	mov.w	r0, r1, asr #20
 8012f66:	f04f 0200 	mov.w	r2, #0
 8012f6a:	f04f 0300 	mov.w	r3, #0
 8012f6e:	da04      	bge.n	8012f7a <__ulp+0x3e>
 8012f70:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8012f74:	fa41 f300 	asr.w	r3, r1, r0
 8012f78:	e7ec      	b.n	8012f54 <__ulp+0x18>
 8012f7a:	f1a0 0114 	sub.w	r1, r0, #20
 8012f7e:	291e      	cmp	r1, #30
 8012f80:	bfda      	itte	le
 8012f82:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8012f86:	fa20 f101 	lsrle.w	r1, r0, r1
 8012f8a:	2101      	movgt	r1, #1
 8012f8c:	460a      	mov	r2, r1
 8012f8e:	e7e1      	b.n	8012f54 <__ulp+0x18>
 8012f90:	7ff00000 	.word	0x7ff00000

08012f94 <__b2d>:
 8012f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f96:	6905      	ldr	r5, [r0, #16]
 8012f98:	f100 0714 	add.w	r7, r0, #20
 8012f9c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8012fa0:	1f2e      	subs	r6, r5, #4
 8012fa2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8012fa6:	4620      	mov	r0, r4
 8012fa8:	f7ff fd48 	bl	8012a3c <__hi0bits>
 8012fac:	f1c0 0320 	rsb	r3, r0, #32
 8012fb0:	280a      	cmp	r0, #10
 8012fb2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8013030 <__b2d+0x9c>
 8012fb6:	600b      	str	r3, [r1, #0]
 8012fb8:	dc14      	bgt.n	8012fe4 <__b2d+0x50>
 8012fba:	f1c0 0e0b 	rsb	lr, r0, #11
 8012fbe:	fa24 f10e 	lsr.w	r1, r4, lr
 8012fc2:	42b7      	cmp	r7, r6
 8012fc4:	ea41 030c 	orr.w	r3, r1, ip
 8012fc8:	bf34      	ite	cc
 8012fca:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8012fce:	2100      	movcs	r1, #0
 8012fd0:	3015      	adds	r0, #21
 8012fd2:	fa04 f000 	lsl.w	r0, r4, r0
 8012fd6:	fa21 f10e 	lsr.w	r1, r1, lr
 8012fda:	ea40 0201 	orr.w	r2, r0, r1
 8012fde:	ec43 2b10 	vmov	d0, r2, r3
 8012fe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012fe4:	42b7      	cmp	r7, r6
 8012fe6:	bf3a      	itte	cc
 8012fe8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8012fec:	f1a5 0608 	subcc.w	r6, r5, #8
 8012ff0:	2100      	movcs	r1, #0
 8012ff2:	380b      	subs	r0, #11
 8012ff4:	d017      	beq.n	8013026 <__b2d+0x92>
 8012ff6:	f1c0 0c20 	rsb	ip, r0, #32
 8012ffa:	fa04 f500 	lsl.w	r5, r4, r0
 8012ffe:	42be      	cmp	r6, r7
 8013000:	fa21 f40c 	lsr.w	r4, r1, ip
 8013004:	ea45 0504 	orr.w	r5, r5, r4
 8013008:	bf8c      	ite	hi
 801300a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801300e:	2400      	movls	r4, #0
 8013010:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8013014:	fa01 f000 	lsl.w	r0, r1, r0
 8013018:	fa24 f40c 	lsr.w	r4, r4, ip
 801301c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8013020:	ea40 0204 	orr.w	r2, r0, r4
 8013024:	e7db      	b.n	8012fde <__b2d+0x4a>
 8013026:	ea44 030c 	orr.w	r3, r4, ip
 801302a:	460a      	mov	r2, r1
 801302c:	e7d7      	b.n	8012fde <__b2d+0x4a>
 801302e:	bf00      	nop
 8013030:	3ff00000 	.word	0x3ff00000

08013034 <__d2b>:
 8013034:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013038:	4689      	mov	r9, r1
 801303a:	2101      	movs	r1, #1
 801303c:	ec57 6b10 	vmov	r6, r7, d0
 8013040:	4690      	mov	r8, r2
 8013042:	f7ff fc09 	bl	8012858 <_Balloc>
 8013046:	4604      	mov	r4, r0
 8013048:	b930      	cbnz	r0, 8013058 <__d2b+0x24>
 801304a:	4602      	mov	r2, r0
 801304c:	4b25      	ldr	r3, [pc, #148]	; (80130e4 <__d2b+0xb0>)
 801304e:	4826      	ldr	r0, [pc, #152]	; (80130e8 <__d2b+0xb4>)
 8013050:	f240 310a 	movw	r1, #778	; 0x30a
 8013054:	f000 fa86 	bl	8013564 <__assert_func>
 8013058:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801305c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8013060:	bb35      	cbnz	r5, 80130b0 <__d2b+0x7c>
 8013062:	2e00      	cmp	r6, #0
 8013064:	9301      	str	r3, [sp, #4]
 8013066:	d028      	beq.n	80130ba <__d2b+0x86>
 8013068:	4668      	mov	r0, sp
 801306a:	9600      	str	r6, [sp, #0]
 801306c:	f7ff fd06 	bl	8012a7c <__lo0bits>
 8013070:	9900      	ldr	r1, [sp, #0]
 8013072:	b300      	cbz	r0, 80130b6 <__d2b+0x82>
 8013074:	9a01      	ldr	r2, [sp, #4]
 8013076:	f1c0 0320 	rsb	r3, r0, #32
 801307a:	fa02 f303 	lsl.w	r3, r2, r3
 801307e:	430b      	orrs	r3, r1
 8013080:	40c2      	lsrs	r2, r0
 8013082:	6163      	str	r3, [r4, #20]
 8013084:	9201      	str	r2, [sp, #4]
 8013086:	9b01      	ldr	r3, [sp, #4]
 8013088:	61a3      	str	r3, [r4, #24]
 801308a:	2b00      	cmp	r3, #0
 801308c:	bf14      	ite	ne
 801308e:	2202      	movne	r2, #2
 8013090:	2201      	moveq	r2, #1
 8013092:	6122      	str	r2, [r4, #16]
 8013094:	b1d5      	cbz	r5, 80130cc <__d2b+0x98>
 8013096:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801309a:	4405      	add	r5, r0
 801309c:	f8c9 5000 	str.w	r5, [r9]
 80130a0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80130a4:	f8c8 0000 	str.w	r0, [r8]
 80130a8:	4620      	mov	r0, r4
 80130aa:	b003      	add	sp, #12
 80130ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80130b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80130b4:	e7d5      	b.n	8013062 <__d2b+0x2e>
 80130b6:	6161      	str	r1, [r4, #20]
 80130b8:	e7e5      	b.n	8013086 <__d2b+0x52>
 80130ba:	a801      	add	r0, sp, #4
 80130bc:	f7ff fcde 	bl	8012a7c <__lo0bits>
 80130c0:	9b01      	ldr	r3, [sp, #4]
 80130c2:	6163      	str	r3, [r4, #20]
 80130c4:	2201      	movs	r2, #1
 80130c6:	6122      	str	r2, [r4, #16]
 80130c8:	3020      	adds	r0, #32
 80130ca:	e7e3      	b.n	8013094 <__d2b+0x60>
 80130cc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80130d0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80130d4:	f8c9 0000 	str.w	r0, [r9]
 80130d8:	6918      	ldr	r0, [r3, #16]
 80130da:	f7ff fcaf 	bl	8012a3c <__hi0bits>
 80130de:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80130e2:	e7df      	b.n	80130a4 <__d2b+0x70>
 80130e4:	08015b0f 	.word	0x08015b0f
 80130e8:	08015b9c 	.word	0x08015b9c

080130ec <__ratio>:
 80130ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80130f0:	4688      	mov	r8, r1
 80130f2:	4669      	mov	r1, sp
 80130f4:	4681      	mov	r9, r0
 80130f6:	f7ff ff4d 	bl	8012f94 <__b2d>
 80130fa:	a901      	add	r1, sp, #4
 80130fc:	4640      	mov	r0, r8
 80130fe:	ec55 4b10 	vmov	r4, r5, d0
 8013102:	f7ff ff47 	bl	8012f94 <__b2d>
 8013106:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801310a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801310e:	eba3 0c02 	sub.w	ip, r3, r2
 8013112:	e9dd 3200 	ldrd	r3, r2, [sp]
 8013116:	1a9b      	subs	r3, r3, r2
 8013118:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801311c:	ec51 0b10 	vmov	r0, r1, d0
 8013120:	2b00      	cmp	r3, #0
 8013122:	bfd6      	itet	le
 8013124:	460a      	movle	r2, r1
 8013126:	462a      	movgt	r2, r5
 8013128:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801312c:	468b      	mov	fp, r1
 801312e:	462f      	mov	r7, r5
 8013130:	bfd4      	ite	le
 8013132:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8013136:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801313a:	4620      	mov	r0, r4
 801313c:	ee10 2a10 	vmov	r2, s0
 8013140:	465b      	mov	r3, fp
 8013142:	4639      	mov	r1, r7
 8013144:	f7ed fb82 	bl	800084c <__aeabi_ddiv>
 8013148:	ec41 0b10 	vmov	d0, r0, r1
 801314c:	b003      	add	sp, #12
 801314e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013152 <__copybits>:
 8013152:	3901      	subs	r1, #1
 8013154:	b570      	push	{r4, r5, r6, lr}
 8013156:	1149      	asrs	r1, r1, #5
 8013158:	6914      	ldr	r4, [r2, #16]
 801315a:	3101      	adds	r1, #1
 801315c:	f102 0314 	add.w	r3, r2, #20
 8013160:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8013164:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8013168:	1f05      	subs	r5, r0, #4
 801316a:	42a3      	cmp	r3, r4
 801316c:	d30c      	bcc.n	8013188 <__copybits+0x36>
 801316e:	1aa3      	subs	r3, r4, r2
 8013170:	3b11      	subs	r3, #17
 8013172:	f023 0303 	bic.w	r3, r3, #3
 8013176:	3211      	adds	r2, #17
 8013178:	42a2      	cmp	r2, r4
 801317a:	bf88      	it	hi
 801317c:	2300      	movhi	r3, #0
 801317e:	4418      	add	r0, r3
 8013180:	2300      	movs	r3, #0
 8013182:	4288      	cmp	r0, r1
 8013184:	d305      	bcc.n	8013192 <__copybits+0x40>
 8013186:	bd70      	pop	{r4, r5, r6, pc}
 8013188:	f853 6b04 	ldr.w	r6, [r3], #4
 801318c:	f845 6f04 	str.w	r6, [r5, #4]!
 8013190:	e7eb      	b.n	801316a <__copybits+0x18>
 8013192:	f840 3b04 	str.w	r3, [r0], #4
 8013196:	e7f4      	b.n	8013182 <__copybits+0x30>

08013198 <__any_on>:
 8013198:	f100 0214 	add.w	r2, r0, #20
 801319c:	6900      	ldr	r0, [r0, #16]
 801319e:	114b      	asrs	r3, r1, #5
 80131a0:	4298      	cmp	r0, r3
 80131a2:	b510      	push	{r4, lr}
 80131a4:	db11      	blt.n	80131ca <__any_on+0x32>
 80131a6:	dd0a      	ble.n	80131be <__any_on+0x26>
 80131a8:	f011 011f 	ands.w	r1, r1, #31
 80131ac:	d007      	beq.n	80131be <__any_on+0x26>
 80131ae:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80131b2:	fa24 f001 	lsr.w	r0, r4, r1
 80131b6:	fa00 f101 	lsl.w	r1, r0, r1
 80131ba:	428c      	cmp	r4, r1
 80131bc:	d10b      	bne.n	80131d6 <__any_on+0x3e>
 80131be:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80131c2:	4293      	cmp	r3, r2
 80131c4:	d803      	bhi.n	80131ce <__any_on+0x36>
 80131c6:	2000      	movs	r0, #0
 80131c8:	bd10      	pop	{r4, pc}
 80131ca:	4603      	mov	r3, r0
 80131cc:	e7f7      	b.n	80131be <__any_on+0x26>
 80131ce:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80131d2:	2900      	cmp	r1, #0
 80131d4:	d0f5      	beq.n	80131c2 <__any_on+0x2a>
 80131d6:	2001      	movs	r0, #1
 80131d8:	e7f6      	b.n	80131c8 <__any_on+0x30>

080131da <__ssputs_r>:
 80131da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80131de:	688e      	ldr	r6, [r1, #8]
 80131e0:	429e      	cmp	r6, r3
 80131e2:	4682      	mov	sl, r0
 80131e4:	460c      	mov	r4, r1
 80131e6:	4690      	mov	r8, r2
 80131e8:	461f      	mov	r7, r3
 80131ea:	d838      	bhi.n	801325e <__ssputs_r+0x84>
 80131ec:	898a      	ldrh	r2, [r1, #12]
 80131ee:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80131f2:	d032      	beq.n	801325a <__ssputs_r+0x80>
 80131f4:	6825      	ldr	r5, [r4, #0]
 80131f6:	6909      	ldr	r1, [r1, #16]
 80131f8:	eba5 0901 	sub.w	r9, r5, r1
 80131fc:	6965      	ldr	r5, [r4, #20]
 80131fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013202:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013206:	3301      	adds	r3, #1
 8013208:	444b      	add	r3, r9
 801320a:	106d      	asrs	r5, r5, #1
 801320c:	429d      	cmp	r5, r3
 801320e:	bf38      	it	cc
 8013210:	461d      	movcc	r5, r3
 8013212:	0553      	lsls	r3, r2, #21
 8013214:	d531      	bpl.n	801327a <__ssputs_r+0xa0>
 8013216:	4629      	mov	r1, r5
 8013218:	f7fc fcc0 	bl	800fb9c <_malloc_r>
 801321c:	4606      	mov	r6, r0
 801321e:	b950      	cbnz	r0, 8013236 <__ssputs_r+0x5c>
 8013220:	230c      	movs	r3, #12
 8013222:	f8ca 3000 	str.w	r3, [sl]
 8013226:	89a3      	ldrh	r3, [r4, #12]
 8013228:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801322c:	81a3      	strh	r3, [r4, #12]
 801322e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013232:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013236:	6921      	ldr	r1, [r4, #16]
 8013238:	464a      	mov	r2, r9
 801323a:	f7fc fc17 	bl	800fa6c <memcpy>
 801323e:	89a3      	ldrh	r3, [r4, #12]
 8013240:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013244:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013248:	81a3      	strh	r3, [r4, #12]
 801324a:	6126      	str	r6, [r4, #16]
 801324c:	6165      	str	r5, [r4, #20]
 801324e:	444e      	add	r6, r9
 8013250:	eba5 0509 	sub.w	r5, r5, r9
 8013254:	6026      	str	r6, [r4, #0]
 8013256:	60a5      	str	r5, [r4, #8]
 8013258:	463e      	mov	r6, r7
 801325a:	42be      	cmp	r6, r7
 801325c:	d900      	bls.n	8013260 <__ssputs_r+0x86>
 801325e:	463e      	mov	r6, r7
 8013260:	6820      	ldr	r0, [r4, #0]
 8013262:	4632      	mov	r2, r6
 8013264:	4641      	mov	r1, r8
 8013266:	f000 f9cf 	bl	8013608 <memmove>
 801326a:	68a3      	ldr	r3, [r4, #8]
 801326c:	1b9b      	subs	r3, r3, r6
 801326e:	60a3      	str	r3, [r4, #8]
 8013270:	6823      	ldr	r3, [r4, #0]
 8013272:	4433      	add	r3, r6
 8013274:	6023      	str	r3, [r4, #0]
 8013276:	2000      	movs	r0, #0
 8013278:	e7db      	b.n	8013232 <__ssputs_r+0x58>
 801327a:	462a      	mov	r2, r5
 801327c:	f000 f9de 	bl	801363c <_realloc_r>
 8013280:	4606      	mov	r6, r0
 8013282:	2800      	cmp	r0, #0
 8013284:	d1e1      	bne.n	801324a <__ssputs_r+0x70>
 8013286:	6921      	ldr	r1, [r4, #16]
 8013288:	4650      	mov	r0, sl
 801328a:	f7fc fc1b 	bl	800fac4 <_free_r>
 801328e:	e7c7      	b.n	8013220 <__ssputs_r+0x46>

08013290 <_svfiprintf_r>:
 8013290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013294:	4698      	mov	r8, r3
 8013296:	898b      	ldrh	r3, [r1, #12]
 8013298:	061b      	lsls	r3, r3, #24
 801329a:	b09d      	sub	sp, #116	; 0x74
 801329c:	4607      	mov	r7, r0
 801329e:	460d      	mov	r5, r1
 80132a0:	4614      	mov	r4, r2
 80132a2:	d50e      	bpl.n	80132c2 <_svfiprintf_r+0x32>
 80132a4:	690b      	ldr	r3, [r1, #16]
 80132a6:	b963      	cbnz	r3, 80132c2 <_svfiprintf_r+0x32>
 80132a8:	2140      	movs	r1, #64	; 0x40
 80132aa:	f7fc fc77 	bl	800fb9c <_malloc_r>
 80132ae:	6028      	str	r0, [r5, #0]
 80132b0:	6128      	str	r0, [r5, #16]
 80132b2:	b920      	cbnz	r0, 80132be <_svfiprintf_r+0x2e>
 80132b4:	230c      	movs	r3, #12
 80132b6:	603b      	str	r3, [r7, #0]
 80132b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80132bc:	e0d1      	b.n	8013462 <_svfiprintf_r+0x1d2>
 80132be:	2340      	movs	r3, #64	; 0x40
 80132c0:	616b      	str	r3, [r5, #20]
 80132c2:	2300      	movs	r3, #0
 80132c4:	9309      	str	r3, [sp, #36]	; 0x24
 80132c6:	2320      	movs	r3, #32
 80132c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80132cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80132d0:	2330      	movs	r3, #48	; 0x30
 80132d2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801347c <_svfiprintf_r+0x1ec>
 80132d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80132da:	f04f 0901 	mov.w	r9, #1
 80132de:	4623      	mov	r3, r4
 80132e0:	469a      	mov	sl, r3
 80132e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80132e6:	b10a      	cbz	r2, 80132ec <_svfiprintf_r+0x5c>
 80132e8:	2a25      	cmp	r2, #37	; 0x25
 80132ea:	d1f9      	bne.n	80132e0 <_svfiprintf_r+0x50>
 80132ec:	ebba 0b04 	subs.w	fp, sl, r4
 80132f0:	d00b      	beq.n	801330a <_svfiprintf_r+0x7a>
 80132f2:	465b      	mov	r3, fp
 80132f4:	4622      	mov	r2, r4
 80132f6:	4629      	mov	r1, r5
 80132f8:	4638      	mov	r0, r7
 80132fa:	f7ff ff6e 	bl	80131da <__ssputs_r>
 80132fe:	3001      	adds	r0, #1
 8013300:	f000 80aa 	beq.w	8013458 <_svfiprintf_r+0x1c8>
 8013304:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013306:	445a      	add	r2, fp
 8013308:	9209      	str	r2, [sp, #36]	; 0x24
 801330a:	f89a 3000 	ldrb.w	r3, [sl]
 801330e:	2b00      	cmp	r3, #0
 8013310:	f000 80a2 	beq.w	8013458 <_svfiprintf_r+0x1c8>
 8013314:	2300      	movs	r3, #0
 8013316:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801331a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801331e:	f10a 0a01 	add.w	sl, sl, #1
 8013322:	9304      	str	r3, [sp, #16]
 8013324:	9307      	str	r3, [sp, #28]
 8013326:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801332a:	931a      	str	r3, [sp, #104]	; 0x68
 801332c:	4654      	mov	r4, sl
 801332e:	2205      	movs	r2, #5
 8013330:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013334:	4851      	ldr	r0, [pc, #324]	; (801347c <_svfiprintf_r+0x1ec>)
 8013336:	f7ec ff53 	bl	80001e0 <memchr>
 801333a:	9a04      	ldr	r2, [sp, #16]
 801333c:	b9d8      	cbnz	r0, 8013376 <_svfiprintf_r+0xe6>
 801333e:	06d0      	lsls	r0, r2, #27
 8013340:	bf44      	itt	mi
 8013342:	2320      	movmi	r3, #32
 8013344:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013348:	0711      	lsls	r1, r2, #28
 801334a:	bf44      	itt	mi
 801334c:	232b      	movmi	r3, #43	; 0x2b
 801334e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013352:	f89a 3000 	ldrb.w	r3, [sl]
 8013356:	2b2a      	cmp	r3, #42	; 0x2a
 8013358:	d015      	beq.n	8013386 <_svfiprintf_r+0xf6>
 801335a:	9a07      	ldr	r2, [sp, #28]
 801335c:	4654      	mov	r4, sl
 801335e:	2000      	movs	r0, #0
 8013360:	f04f 0c0a 	mov.w	ip, #10
 8013364:	4621      	mov	r1, r4
 8013366:	f811 3b01 	ldrb.w	r3, [r1], #1
 801336a:	3b30      	subs	r3, #48	; 0x30
 801336c:	2b09      	cmp	r3, #9
 801336e:	d94e      	bls.n	801340e <_svfiprintf_r+0x17e>
 8013370:	b1b0      	cbz	r0, 80133a0 <_svfiprintf_r+0x110>
 8013372:	9207      	str	r2, [sp, #28]
 8013374:	e014      	b.n	80133a0 <_svfiprintf_r+0x110>
 8013376:	eba0 0308 	sub.w	r3, r0, r8
 801337a:	fa09 f303 	lsl.w	r3, r9, r3
 801337e:	4313      	orrs	r3, r2
 8013380:	9304      	str	r3, [sp, #16]
 8013382:	46a2      	mov	sl, r4
 8013384:	e7d2      	b.n	801332c <_svfiprintf_r+0x9c>
 8013386:	9b03      	ldr	r3, [sp, #12]
 8013388:	1d19      	adds	r1, r3, #4
 801338a:	681b      	ldr	r3, [r3, #0]
 801338c:	9103      	str	r1, [sp, #12]
 801338e:	2b00      	cmp	r3, #0
 8013390:	bfbb      	ittet	lt
 8013392:	425b      	neglt	r3, r3
 8013394:	f042 0202 	orrlt.w	r2, r2, #2
 8013398:	9307      	strge	r3, [sp, #28]
 801339a:	9307      	strlt	r3, [sp, #28]
 801339c:	bfb8      	it	lt
 801339e:	9204      	strlt	r2, [sp, #16]
 80133a0:	7823      	ldrb	r3, [r4, #0]
 80133a2:	2b2e      	cmp	r3, #46	; 0x2e
 80133a4:	d10c      	bne.n	80133c0 <_svfiprintf_r+0x130>
 80133a6:	7863      	ldrb	r3, [r4, #1]
 80133a8:	2b2a      	cmp	r3, #42	; 0x2a
 80133aa:	d135      	bne.n	8013418 <_svfiprintf_r+0x188>
 80133ac:	9b03      	ldr	r3, [sp, #12]
 80133ae:	1d1a      	adds	r2, r3, #4
 80133b0:	681b      	ldr	r3, [r3, #0]
 80133b2:	9203      	str	r2, [sp, #12]
 80133b4:	2b00      	cmp	r3, #0
 80133b6:	bfb8      	it	lt
 80133b8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80133bc:	3402      	adds	r4, #2
 80133be:	9305      	str	r3, [sp, #20]
 80133c0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801348c <_svfiprintf_r+0x1fc>
 80133c4:	7821      	ldrb	r1, [r4, #0]
 80133c6:	2203      	movs	r2, #3
 80133c8:	4650      	mov	r0, sl
 80133ca:	f7ec ff09 	bl	80001e0 <memchr>
 80133ce:	b140      	cbz	r0, 80133e2 <_svfiprintf_r+0x152>
 80133d0:	2340      	movs	r3, #64	; 0x40
 80133d2:	eba0 000a 	sub.w	r0, r0, sl
 80133d6:	fa03 f000 	lsl.w	r0, r3, r0
 80133da:	9b04      	ldr	r3, [sp, #16]
 80133dc:	4303      	orrs	r3, r0
 80133de:	3401      	adds	r4, #1
 80133e0:	9304      	str	r3, [sp, #16]
 80133e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80133e6:	4826      	ldr	r0, [pc, #152]	; (8013480 <_svfiprintf_r+0x1f0>)
 80133e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80133ec:	2206      	movs	r2, #6
 80133ee:	f7ec fef7 	bl	80001e0 <memchr>
 80133f2:	2800      	cmp	r0, #0
 80133f4:	d038      	beq.n	8013468 <_svfiprintf_r+0x1d8>
 80133f6:	4b23      	ldr	r3, [pc, #140]	; (8013484 <_svfiprintf_r+0x1f4>)
 80133f8:	bb1b      	cbnz	r3, 8013442 <_svfiprintf_r+0x1b2>
 80133fa:	9b03      	ldr	r3, [sp, #12]
 80133fc:	3307      	adds	r3, #7
 80133fe:	f023 0307 	bic.w	r3, r3, #7
 8013402:	3308      	adds	r3, #8
 8013404:	9303      	str	r3, [sp, #12]
 8013406:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013408:	4433      	add	r3, r6
 801340a:	9309      	str	r3, [sp, #36]	; 0x24
 801340c:	e767      	b.n	80132de <_svfiprintf_r+0x4e>
 801340e:	fb0c 3202 	mla	r2, ip, r2, r3
 8013412:	460c      	mov	r4, r1
 8013414:	2001      	movs	r0, #1
 8013416:	e7a5      	b.n	8013364 <_svfiprintf_r+0xd4>
 8013418:	2300      	movs	r3, #0
 801341a:	3401      	adds	r4, #1
 801341c:	9305      	str	r3, [sp, #20]
 801341e:	4619      	mov	r1, r3
 8013420:	f04f 0c0a 	mov.w	ip, #10
 8013424:	4620      	mov	r0, r4
 8013426:	f810 2b01 	ldrb.w	r2, [r0], #1
 801342a:	3a30      	subs	r2, #48	; 0x30
 801342c:	2a09      	cmp	r2, #9
 801342e:	d903      	bls.n	8013438 <_svfiprintf_r+0x1a8>
 8013430:	2b00      	cmp	r3, #0
 8013432:	d0c5      	beq.n	80133c0 <_svfiprintf_r+0x130>
 8013434:	9105      	str	r1, [sp, #20]
 8013436:	e7c3      	b.n	80133c0 <_svfiprintf_r+0x130>
 8013438:	fb0c 2101 	mla	r1, ip, r1, r2
 801343c:	4604      	mov	r4, r0
 801343e:	2301      	movs	r3, #1
 8013440:	e7f0      	b.n	8013424 <_svfiprintf_r+0x194>
 8013442:	ab03      	add	r3, sp, #12
 8013444:	9300      	str	r3, [sp, #0]
 8013446:	462a      	mov	r2, r5
 8013448:	4b0f      	ldr	r3, [pc, #60]	; (8013488 <_svfiprintf_r+0x1f8>)
 801344a:	a904      	add	r1, sp, #16
 801344c:	4638      	mov	r0, r7
 801344e:	f7fc fcb9 	bl	800fdc4 <_printf_float>
 8013452:	1c42      	adds	r2, r0, #1
 8013454:	4606      	mov	r6, r0
 8013456:	d1d6      	bne.n	8013406 <_svfiprintf_r+0x176>
 8013458:	89ab      	ldrh	r3, [r5, #12]
 801345a:	065b      	lsls	r3, r3, #25
 801345c:	f53f af2c 	bmi.w	80132b8 <_svfiprintf_r+0x28>
 8013460:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013462:	b01d      	add	sp, #116	; 0x74
 8013464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013468:	ab03      	add	r3, sp, #12
 801346a:	9300      	str	r3, [sp, #0]
 801346c:	462a      	mov	r2, r5
 801346e:	4b06      	ldr	r3, [pc, #24]	; (8013488 <_svfiprintf_r+0x1f8>)
 8013470:	a904      	add	r1, sp, #16
 8013472:	4638      	mov	r0, r7
 8013474:	f7fc ff4a 	bl	801030c <_printf_i>
 8013478:	e7eb      	b.n	8013452 <_svfiprintf_r+0x1c2>
 801347a:	bf00      	nop
 801347c:	08015cf4 	.word	0x08015cf4
 8013480:	08015cfe 	.word	0x08015cfe
 8013484:	0800fdc5 	.word	0x0800fdc5
 8013488:	080131db 	.word	0x080131db
 801348c:	08015cfa 	.word	0x08015cfa

08013490 <nan>:
 8013490:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8013498 <nan+0x8>
 8013494:	4770      	bx	lr
 8013496:	bf00      	nop
 8013498:	00000000 	.word	0x00000000
 801349c:	7ff80000 	.word	0x7ff80000

080134a0 <__sread>:
 80134a0:	b510      	push	{r4, lr}
 80134a2:	460c      	mov	r4, r1
 80134a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80134a8:	f000 fa50 	bl	801394c <_read_r>
 80134ac:	2800      	cmp	r0, #0
 80134ae:	bfab      	itete	ge
 80134b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80134b2:	89a3      	ldrhlt	r3, [r4, #12]
 80134b4:	181b      	addge	r3, r3, r0
 80134b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80134ba:	bfac      	ite	ge
 80134bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80134be:	81a3      	strhlt	r3, [r4, #12]
 80134c0:	bd10      	pop	{r4, pc}

080134c2 <__swrite>:
 80134c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80134c6:	461f      	mov	r7, r3
 80134c8:	898b      	ldrh	r3, [r1, #12]
 80134ca:	05db      	lsls	r3, r3, #23
 80134cc:	4605      	mov	r5, r0
 80134ce:	460c      	mov	r4, r1
 80134d0:	4616      	mov	r6, r2
 80134d2:	d505      	bpl.n	80134e0 <__swrite+0x1e>
 80134d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80134d8:	2302      	movs	r3, #2
 80134da:	2200      	movs	r2, #0
 80134dc:	f000 f882 	bl	80135e4 <_lseek_r>
 80134e0:	89a3      	ldrh	r3, [r4, #12]
 80134e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80134e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80134ea:	81a3      	strh	r3, [r4, #12]
 80134ec:	4632      	mov	r2, r6
 80134ee:	463b      	mov	r3, r7
 80134f0:	4628      	mov	r0, r5
 80134f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80134f6:	f000 b823 	b.w	8013540 <_write_r>

080134fa <__sseek>:
 80134fa:	b510      	push	{r4, lr}
 80134fc:	460c      	mov	r4, r1
 80134fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013502:	f000 f86f 	bl	80135e4 <_lseek_r>
 8013506:	1c43      	adds	r3, r0, #1
 8013508:	89a3      	ldrh	r3, [r4, #12]
 801350a:	bf15      	itete	ne
 801350c:	6560      	strne	r0, [r4, #84]	; 0x54
 801350e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013512:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013516:	81a3      	strheq	r3, [r4, #12]
 8013518:	bf18      	it	ne
 801351a:	81a3      	strhne	r3, [r4, #12]
 801351c:	bd10      	pop	{r4, pc}

0801351e <__sclose>:
 801351e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013522:	f000 b83d 	b.w	80135a0 <_close_r>

08013526 <__ascii_wctomb>:
 8013526:	b149      	cbz	r1, 801353c <__ascii_wctomb+0x16>
 8013528:	2aff      	cmp	r2, #255	; 0xff
 801352a:	bf85      	ittet	hi
 801352c:	238a      	movhi	r3, #138	; 0x8a
 801352e:	6003      	strhi	r3, [r0, #0]
 8013530:	700a      	strbls	r2, [r1, #0]
 8013532:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8013536:	bf98      	it	ls
 8013538:	2001      	movls	r0, #1
 801353a:	4770      	bx	lr
 801353c:	4608      	mov	r0, r1
 801353e:	4770      	bx	lr

08013540 <_write_r>:
 8013540:	b538      	push	{r3, r4, r5, lr}
 8013542:	4d07      	ldr	r5, [pc, #28]	; (8013560 <_write_r+0x20>)
 8013544:	4604      	mov	r4, r0
 8013546:	4608      	mov	r0, r1
 8013548:	4611      	mov	r1, r2
 801354a:	2200      	movs	r2, #0
 801354c:	602a      	str	r2, [r5, #0]
 801354e:	461a      	mov	r2, r3
 8013550:	f7f3 fbd7 	bl	8006d02 <_write>
 8013554:	1c43      	adds	r3, r0, #1
 8013556:	d102      	bne.n	801355e <_write_r+0x1e>
 8013558:	682b      	ldr	r3, [r5, #0]
 801355a:	b103      	cbz	r3, 801355e <_write_r+0x1e>
 801355c:	6023      	str	r3, [r4, #0]
 801355e:	bd38      	pop	{r3, r4, r5, pc}
 8013560:	200038ec 	.word	0x200038ec

08013564 <__assert_func>:
 8013564:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013566:	4614      	mov	r4, r2
 8013568:	461a      	mov	r2, r3
 801356a:	4b09      	ldr	r3, [pc, #36]	; (8013590 <__assert_func+0x2c>)
 801356c:	681b      	ldr	r3, [r3, #0]
 801356e:	4605      	mov	r5, r0
 8013570:	68d8      	ldr	r0, [r3, #12]
 8013572:	b14c      	cbz	r4, 8013588 <__assert_func+0x24>
 8013574:	4b07      	ldr	r3, [pc, #28]	; (8013594 <__assert_func+0x30>)
 8013576:	9100      	str	r1, [sp, #0]
 8013578:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801357c:	4906      	ldr	r1, [pc, #24]	; (8013598 <__assert_func+0x34>)
 801357e:	462b      	mov	r3, r5
 8013580:	f000 f81e 	bl	80135c0 <fiprintf>
 8013584:	f000 fab4 	bl	8013af0 <abort>
 8013588:	4b04      	ldr	r3, [pc, #16]	; (801359c <__assert_func+0x38>)
 801358a:	461c      	mov	r4, r3
 801358c:	e7f3      	b.n	8013576 <__assert_func+0x12>
 801358e:	bf00      	nop
 8013590:	20000260 	.word	0x20000260
 8013594:	08015d05 	.word	0x08015d05
 8013598:	08015d12 	.word	0x08015d12
 801359c:	08015d40 	.word	0x08015d40

080135a0 <_close_r>:
 80135a0:	b538      	push	{r3, r4, r5, lr}
 80135a2:	4d06      	ldr	r5, [pc, #24]	; (80135bc <_close_r+0x1c>)
 80135a4:	2300      	movs	r3, #0
 80135a6:	4604      	mov	r4, r0
 80135a8:	4608      	mov	r0, r1
 80135aa:	602b      	str	r3, [r5, #0]
 80135ac:	f7f3 fbc5 	bl	8006d3a <_close>
 80135b0:	1c43      	adds	r3, r0, #1
 80135b2:	d102      	bne.n	80135ba <_close_r+0x1a>
 80135b4:	682b      	ldr	r3, [r5, #0]
 80135b6:	b103      	cbz	r3, 80135ba <_close_r+0x1a>
 80135b8:	6023      	str	r3, [r4, #0]
 80135ba:	bd38      	pop	{r3, r4, r5, pc}
 80135bc:	200038ec 	.word	0x200038ec

080135c0 <fiprintf>:
 80135c0:	b40e      	push	{r1, r2, r3}
 80135c2:	b503      	push	{r0, r1, lr}
 80135c4:	4601      	mov	r1, r0
 80135c6:	ab03      	add	r3, sp, #12
 80135c8:	4805      	ldr	r0, [pc, #20]	; (80135e0 <fiprintf+0x20>)
 80135ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80135ce:	6800      	ldr	r0, [r0, #0]
 80135d0:	9301      	str	r3, [sp, #4]
 80135d2:	f000 f88b 	bl	80136ec <_vfiprintf_r>
 80135d6:	b002      	add	sp, #8
 80135d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80135dc:	b003      	add	sp, #12
 80135de:	4770      	bx	lr
 80135e0:	20000260 	.word	0x20000260

080135e4 <_lseek_r>:
 80135e4:	b538      	push	{r3, r4, r5, lr}
 80135e6:	4d07      	ldr	r5, [pc, #28]	; (8013604 <_lseek_r+0x20>)
 80135e8:	4604      	mov	r4, r0
 80135ea:	4608      	mov	r0, r1
 80135ec:	4611      	mov	r1, r2
 80135ee:	2200      	movs	r2, #0
 80135f0:	602a      	str	r2, [r5, #0]
 80135f2:	461a      	mov	r2, r3
 80135f4:	f7f3 fbc8 	bl	8006d88 <_lseek>
 80135f8:	1c43      	adds	r3, r0, #1
 80135fa:	d102      	bne.n	8013602 <_lseek_r+0x1e>
 80135fc:	682b      	ldr	r3, [r5, #0]
 80135fe:	b103      	cbz	r3, 8013602 <_lseek_r+0x1e>
 8013600:	6023      	str	r3, [r4, #0]
 8013602:	bd38      	pop	{r3, r4, r5, pc}
 8013604:	200038ec 	.word	0x200038ec

08013608 <memmove>:
 8013608:	4288      	cmp	r0, r1
 801360a:	b510      	push	{r4, lr}
 801360c:	eb01 0402 	add.w	r4, r1, r2
 8013610:	d902      	bls.n	8013618 <memmove+0x10>
 8013612:	4284      	cmp	r4, r0
 8013614:	4623      	mov	r3, r4
 8013616:	d807      	bhi.n	8013628 <memmove+0x20>
 8013618:	1e43      	subs	r3, r0, #1
 801361a:	42a1      	cmp	r1, r4
 801361c:	d008      	beq.n	8013630 <memmove+0x28>
 801361e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013622:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013626:	e7f8      	b.n	801361a <memmove+0x12>
 8013628:	4402      	add	r2, r0
 801362a:	4601      	mov	r1, r0
 801362c:	428a      	cmp	r2, r1
 801362e:	d100      	bne.n	8013632 <memmove+0x2a>
 8013630:	bd10      	pop	{r4, pc}
 8013632:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013636:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801363a:	e7f7      	b.n	801362c <memmove+0x24>

0801363c <_realloc_r>:
 801363c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013640:	4680      	mov	r8, r0
 8013642:	4614      	mov	r4, r2
 8013644:	460e      	mov	r6, r1
 8013646:	b921      	cbnz	r1, 8013652 <_realloc_r+0x16>
 8013648:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801364c:	4611      	mov	r1, r2
 801364e:	f7fc baa5 	b.w	800fb9c <_malloc_r>
 8013652:	b92a      	cbnz	r2, 8013660 <_realloc_r+0x24>
 8013654:	f7fc fa36 	bl	800fac4 <_free_r>
 8013658:	4625      	mov	r5, r4
 801365a:	4628      	mov	r0, r5
 801365c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013660:	f000 fc6a 	bl	8013f38 <_malloc_usable_size_r>
 8013664:	4284      	cmp	r4, r0
 8013666:	4607      	mov	r7, r0
 8013668:	d802      	bhi.n	8013670 <_realloc_r+0x34>
 801366a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801366e:	d812      	bhi.n	8013696 <_realloc_r+0x5a>
 8013670:	4621      	mov	r1, r4
 8013672:	4640      	mov	r0, r8
 8013674:	f7fc fa92 	bl	800fb9c <_malloc_r>
 8013678:	4605      	mov	r5, r0
 801367a:	2800      	cmp	r0, #0
 801367c:	d0ed      	beq.n	801365a <_realloc_r+0x1e>
 801367e:	42bc      	cmp	r4, r7
 8013680:	4622      	mov	r2, r4
 8013682:	4631      	mov	r1, r6
 8013684:	bf28      	it	cs
 8013686:	463a      	movcs	r2, r7
 8013688:	f7fc f9f0 	bl	800fa6c <memcpy>
 801368c:	4631      	mov	r1, r6
 801368e:	4640      	mov	r0, r8
 8013690:	f7fc fa18 	bl	800fac4 <_free_r>
 8013694:	e7e1      	b.n	801365a <_realloc_r+0x1e>
 8013696:	4635      	mov	r5, r6
 8013698:	e7df      	b.n	801365a <_realloc_r+0x1e>

0801369a <__sfputc_r>:
 801369a:	6893      	ldr	r3, [r2, #8]
 801369c:	3b01      	subs	r3, #1
 801369e:	2b00      	cmp	r3, #0
 80136a0:	b410      	push	{r4}
 80136a2:	6093      	str	r3, [r2, #8]
 80136a4:	da08      	bge.n	80136b8 <__sfputc_r+0x1e>
 80136a6:	6994      	ldr	r4, [r2, #24]
 80136a8:	42a3      	cmp	r3, r4
 80136aa:	db01      	blt.n	80136b0 <__sfputc_r+0x16>
 80136ac:	290a      	cmp	r1, #10
 80136ae:	d103      	bne.n	80136b8 <__sfputc_r+0x1e>
 80136b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80136b4:	f000 b95c 	b.w	8013970 <__swbuf_r>
 80136b8:	6813      	ldr	r3, [r2, #0]
 80136ba:	1c58      	adds	r0, r3, #1
 80136bc:	6010      	str	r0, [r2, #0]
 80136be:	7019      	strb	r1, [r3, #0]
 80136c0:	4608      	mov	r0, r1
 80136c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80136c6:	4770      	bx	lr

080136c8 <__sfputs_r>:
 80136c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80136ca:	4606      	mov	r6, r0
 80136cc:	460f      	mov	r7, r1
 80136ce:	4614      	mov	r4, r2
 80136d0:	18d5      	adds	r5, r2, r3
 80136d2:	42ac      	cmp	r4, r5
 80136d4:	d101      	bne.n	80136da <__sfputs_r+0x12>
 80136d6:	2000      	movs	r0, #0
 80136d8:	e007      	b.n	80136ea <__sfputs_r+0x22>
 80136da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80136de:	463a      	mov	r2, r7
 80136e0:	4630      	mov	r0, r6
 80136e2:	f7ff ffda 	bl	801369a <__sfputc_r>
 80136e6:	1c43      	adds	r3, r0, #1
 80136e8:	d1f3      	bne.n	80136d2 <__sfputs_r+0xa>
 80136ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080136ec <_vfiprintf_r>:
 80136ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80136f0:	460d      	mov	r5, r1
 80136f2:	b09d      	sub	sp, #116	; 0x74
 80136f4:	4614      	mov	r4, r2
 80136f6:	4698      	mov	r8, r3
 80136f8:	4606      	mov	r6, r0
 80136fa:	b118      	cbz	r0, 8013704 <_vfiprintf_r+0x18>
 80136fc:	6983      	ldr	r3, [r0, #24]
 80136fe:	b90b      	cbnz	r3, 8013704 <_vfiprintf_r+0x18>
 8013700:	f000 fb18 	bl	8013d34 <__sinit>
 8013704:	4b89      	ldr	r3, [pc, #548]	; (801392c <_vfiprintf_r+0x240>)
 8013706:	429d      	cmp	r5, r3
 8013708:	d11b      	bne.n	8013742 <_vfiprintf_r+0x56>
 801370a:	6875      	ldr	r5, [r6, #4]
 801370c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801370e:	07d9      	lsls	r1, r3, #31
 8013710:	d405      	bmi.n	801371e <_vfiprintf_r+0x32>
 8013712:	89ab      	ldrh	r3, [r5, #12]
 8013714:	059a      	lsls	r2, r3, #22
 8013716:	d402      	bmi.n	801371e <_vfiprintf_r+0x32>
 8013718:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801371a:	f7ff f87c 	bl	8012816 <__retarget_lock_acquire_recursive>
 801371e:	89ab      	ldrh	r3, [r5, #12]
 8013720:	071b      	lsls	r3, r3, #28
 8013722:	d501      	bpl.n	8013728 <_vfiprintf_r+0x3c>
 8013724:	692b      	ldr	r3, [r5, #16]
 8013726:	b9eb      	cbnz	r3, 8013764 <_vfiprintf_r+0x78>
 8013728:	4629      	mov	r1, r5
 801372a:	4630      	mov	r0, r6
 801372c:	f000 f972 	bl	8013a14 <__swsetup_r>
 8013730:	b1c0      	cbz	r0, 8013764 <_vfiprintf_r+0x78>
 8013732:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013734:	07dc      	lsls	r4, r3, #31
 8013736:	d50e      	bpl.n	8013756 <_vfiprintf_r+0x6a>
 8013738:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801373c:	b01d      	add	sp, #116	; 0x74
 801373e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013742:	4b7b      	ldr	r3, [pc, #492]	; (8013930 <_vfiprintf_r+0x244>)
 8013744:	429d      	cmp	r5, r3
 8013746:	d101      	bne.n	801374c <_vfiprintf_r+0x60>
 8013748:	68b5      	ldr	r5, [r6, #8]
 801374a:	e7df      	b.n	801370c <_vfiprintf_r+0x20>
 801374c:	4b79      	ldr	r3, [pc, #484]	; (8013934 <_vfiprintf_r+0x248>)
 801374e:	429d      	cmp	r5, r3
 8013750:	bf08      	it	eq
 8013752:	68f5      	ldreq	r5, [r6, #12]
 8013754:	e7da      	b.n	801370c <_vfiprintf_r+0x20>
 8013756:	89ab      	ldrh	r3, [r5, #12]
 8013758:	0598      	lsls	r0, r3, #22
 801375a:	d4ed      	bmi.n	8013738 <_vfiprintf_r+0x4c>
 801375c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801375e:	f7ff f85b 	bl	8012818 <__retarget_lock_release_recursive>
 8013762:	e7e9      	b.n	8013738 <_vfiprintf_r+0x4c>
 8013764:	2300      	movs	r3, #0
 8013766:	9309      	str	r3, [sp, #36]	; 0x24
 8013768:	2320      	movs	r3, #32
 801376a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801376e:	f8cd 800c 	str.w	r8, [sp, #12]
 8013772:	2330      	movs	r3, #48	; 0x30
 8013774:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8013938 <_vfiprintf_r+0x24c>
 8013778:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801377c:	f04f 0901 	mov.w	r9, #1
 8013780:	4623      	mov	r3, r4
 8013782:	469a      	mov	sl, r3
 8013784:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013788:	b10a      	cbz	r2, 801378e <_vfiprintf_r+0xa2>
 801378a:	2a25      	cmp	r2, #37	; 0x25
 801378c:	d1f9      	bne.n	8013782 <_vfiprintf_r+0x96>
 801378e:	ebba 0b04 	subs.w	fp, sl, r4
 8013792:	d00b      	beq.n	80137ac <_vfiprintf_r+0xc0>
 8013794:	465b      	mov	r3, fp
 8013796:	4622      	mov	r2, r4
 8013798:	4629      	mov	r1, r5
 801379a:	4630      	mov	r0, r6
 801379c:	f7ff ff94 	bl	80136c8 <__sfputs_r>
 80137a0:	3001      	adds	r0, #1
 80137a2:	f000 80aa 	beq.w	80138fa <_vfiprintf_r+0x20e>
 80137a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80137a8:	445a      	add	r2, fp
 80137aa:	9209      	str	r2, [sp, #36]	; 0x24
 80137ac:	f89a 3000 	ldrb.w	r3, [sl]
 80137b0:	2b00      	cmp	r3, #0
 80137b2:	f000 80a2 	beq.w	80138fa <_vfiprintf_r+0x20e>
 80137b6:	2300      	movs	r3, #0
 80137b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80137bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80137c0:	f10a 0a01 	add.w	sl, sl, #1
 80137c4:	9304      	str	r3, [sp, #16]
 80137c6:	9307      	str	r3, [sp, #28]
 80137c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80137cc:	931a      	str	r3, [sp, #104]	; 0x68
 80137ce:	4654      	mov	r4, sl
 80137d0:	2205      	movs	r2, #5
 80137d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80137d6:	4858      	ldr	r0, [pc, #352]	; (8013938 <_vfiprintf_r+0x24c>)
 80137d8:	f7ec fd02 	bl	80001e0 <memchr>
 80137dc:	9a04      	ldr	r2, [sp, #16]
 80137de:	b9d8      	cbnz	r0, 8013818 <_vfiprintf_r+0x12c>
 80137e0:	06d1      	lsls	r1, r2, #27
 80137e2:	bf44      	itt	mi
 80137e4:	2320      	movmi	r3, #32
 80137e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80137ea:	0713      	lsls	r3, r2, #28
 80137ec:	bf44      	itt	mi
 80137ee:	232b      	movmi	r3, #43	; 0x2b
 80137f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80137f4:	f89a 3000 	ldrb.w	r3, [sl]
 80137f8:	2b2a      	cmp	r3, #42	; 0x2a
 80137fa:	d015      	beq.n	8013828 <_vfiprintf_r+0x13c>
 80137fc:	9a07      	ldr	r2, [sp, #28]
 80137fe:	4654      	mov	r4, sl
 8013800:	2000      	movs	r0, #0
 8013802:	f04f 0c0a 	mov.w	ip, #10
 8013806:	4621      	mov	r1, r4
 8013808:	f811 3b01 	ldrb.w	r3, [r1], #1
 801380c:	3b30      	subs	r3, #48	; 0x30
 801380e:	2b09      	cmp	r3, #9
 8013810:	d94e      	bls.n	80138b0 <_vfiprintf_r+0x1c4>
 8013812:	b1b0      	cbz	r0, 8013842 <_vfiprintf_r+0x156>
 8013814:	9207      	str	r2, [sp, #28]
 8013816:	e014      	b.n	8013842 <_vfiprintf_r+0x156>
 8013818:	eba0 0308 	sub.w	r3, r0, r8
 801381c:	fa09 f303 	lsl.w	r3, r9, r3
 8013820:	4313      	orrs	r3, r2
 8013822:	9304      	str	r3, [sp, #16]
 8013824:	46a2      	mov	sl, r4
 8013826:	e7d2      	b.n	80137ce <_vfiprintf_r+0xe2>
 8013828:	9b03      	ldr	r3, [sp, #12]
 801382a:	1d19      	adds	r1, r3, #4
 801382c:	681b      	ldr	r3, [r3, #0]
 801382e:	9103      	str	r1, [sp, #12]
 8013830:	2b00      	cmp	r3, #0
 8013832:	bfbb      	ittet	lt
 8013834:	425b      	neglt	r3, r3
 8013836:	f042 0202 	orrlt.w	r2, r2, #2
 801383a:	9307      	strge	r3, [sp, #28]
 801383c:	9307      	strlt	r3, [sp, #28]
 801383e:	bfb8      	it	lt
 8013840:	9204      	strlt	r2, [sp, #16]
 8013842:	7823      	ldrb	r3, [r4, #0]
 8013844:	2b2e      	cmp	r3, #46	; 0x2e
 8013846:	d10c      	bne.n	8013862 <_vfiprintf_r+0x176>
 8013848:	7863      	ldrb	r3, [r4, #1]
 801384a:	2b2a      	cmp	r3, #42	; 0x2a
 801384c:	d135      	bne.n	80138ba <_vfiprintf_r+0x1ce>
 801384e:	9b03      	ldr	r3, [sp, #12]
 8013850:	1d1a      	adds	r2, r3, #4
 8013852:	681b      	ldr	r3, [r3, #0]
 8013854:	9203      	str	r2, [sp, #12]
 8013856:	2b00      	cmp	r3, #0
 8013858:	bfb8      	it	lt
 801385a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801385e:	3402      	adds	r4, #2
 8013860:	9305      	str	r3, [sp, #20]
 8013862:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8013948 <_vfiprintf_r+0x25c>
 8013866:	7821      	ldrb	r1, [r4, #0]
 8013868:	2203      	movs	r2, #3
 801386a:	4650      	mov	r0, sl
 801386c:	f7ec fcb8 	bl	80001e0 <memchr>
 8013870:	b140      	cbz	r0, 8013884 <_vfiprintf_r+0x198>
 8013872:	2340      	movs	r3, #64	; 0x40
 8013874:	eba0 000a 	sub.w	r0, r0, sl
 8013878:	fa03 f000 	lsl.w	r0, r3, r0
 801387c:	9b04      	ldr	r3, [sp, #16]
 801387e:	4303      	orrs	r3, r0
 8013880:	3401      	adds	r4, #1
 8013882:	9304      	str	r3, [sp, #16]
 8013884:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013888:	482c      	ldr	r0, [pc, #176]	; (801393c <_vfiprintf_r+0x250>)
 801388a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801388e:	2206      	movs	r2, #6
 8013890:	f7ec fca6 	bl	80001e0 <memchr>
 8013894:	2800      	cmp	r0, #0
 8013896:	d03f      	beq.n	8013918 <_vfiprintf_r+0x22c>
 8013898:	4b29      	ldr	r3, [pc, #164]	; (8013940 <_vfiprintf_r+0x254>)
 801389a:	bb1b      	cbnz	r3, 80138e4 <_vfiprintf_r+0x1f8>
 801389c:	9b03      	ldr	r3, [sp, #12]
 801389e:	3307      	adds	r3, #7
 80138a0:	f023 0307 	bic.w	r3, r3, #7
 80138a4:	3308      	adds	r3, #8
 80138a6:	9303      	str	r3, [sp, #12]
 80138a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80138aa:	443b      	add	r3, r7
 80138ac:	9309      	str	r3, [sp, #36]	; 0x24
 80138ae:	e767      	b.n	8013780 <_vfiprintf_r+0x94>
 80138b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80138b4:	460c      	mov	r4, r1
 80138b6:	2001      	movs	r0, #1
 80138b8:	e7a5      	b.n	8013806 <_vfiprintf_r+0x11a>
 80138ba:	2300      	movs	r3, #0
 80138bc:	3401      	adds	r4, #1
 80138be:	9305      	str	r3, [sp, #20]
 80138c0:	4619      	mov	r1, r3
 80138c2:	f04f 0c0a 	mov.w	ip, #10
 80138c6:	4620      	mov	r0, r4
 80138c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80138cc:	3a30      	subs	r2, #48	; 0x30
 80138ce:	2a09      	cmp	r2, #9
 80138d0:	d903      	bls.n	80138da <_vfiprintf_r+0x1ee>
 80138d2:	2b00      	cmp	r3, #0
 80138d4:	d0c5      	beq.n	8013862 <_vfiprintf_r+0x176>
 80138d6:	9105      	str	r1, [sp, #20]
 80138d8:	e7c3      	b.n	8013862 <_vfiprintf_r+0x176>
 80138da:	fb0c 2101 	mla	r1, ip, r1, r2
 80138de:	4604      	mov	r4, r0
 80138e0:	2301      	movs	r3, #1
 80138e2:	e7f0      	b.n	80138c6 <_vfiprintf_r+0x1da>
 80138e4:	ab03      	add	r3, sp, #12
 80138e6:	9300      	str	r3, [sp, #0]
 80138e8:	462a      	mov	r2, r5
 80138ea:	4b16      	ldr	r3, [pc, #88]	; (8013944 <_vfiprintf_r+0x258>)
 80138ec:	a904      	add	r1, sp, #16
 80138ee:	4630      	mov	r0, r6
 80138f0:	f7fc fa68 	bl	800fdc4 <_printf_float>
 80138f4:	4607      	mov	r7, r0
 80138f6:	1c78      	adds	r0, r7, #1
 80138f8:	d1d6      	bne.n	80138a8 <_vfiprintf_r+0x1bc>
 80138fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80138fc:	07d9      	lsls	r1, r3, #31
 80138fe:	d405      	bmi.n	801390c <_vfiprintf_r+0x220>
 8013900:	89ab      	ldrh	r3, [r5, #12]
 8013902:	059a      	lsls	r2, r3, #22
 8013904:	d402      	bmi.n	801390c <_vfiprintf_r+0x220>
 8013906:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013908:	f7fe ff86 	bl	8012818 <__retarget_lock_release_recursive>
 801390c:	89ab      	ldrh	r3, [r5, #12]
 801390e:	065b      	lsls	r3, r3, #25
 8013910:	f53f af12 	bmi.w	8013738 <_vfiprintf_r+0x4c>
 8013914:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013916:	e711      	b.n	801373c <_vfiprintf_r+0x50>
 8013918:	ab03      	add	r3, sp, #12
 801391a:	9300      	str	r3, [sp, #0]
 801391c:	462a      	mov	r2, r5
 801391e:	4b09      	ldr	r3, [pc, #36]	; (8013944 <_vfiprintf_r+0x258>)
 8013920:	a904      	add	r1, sp, #16
 8013922:	4630      	mov	r0, r6
 8013924:	f7fc fcf2 	bl	801030c <_printf_i>
 8013928:	e7e4      	b.n	80138f4 <_vfiprintf_r+0x208>
 801392a:	bf00      	nop
 801392c:	08015d64 	.word	0x08015d64
 8013930:	08015d84 	.word	0x08015d84
 8013934:	08015d44 	.word	0x08015d44
 8013938:	08015cf4 	.word	0x08015cf4
 801393c:	08015cfe 	.word	0x08015cfe
 8013940:	0800fdc5 	.word	0x0800fdc5
 8013944:	080136c9 	.word	0x080136c9
 8013948:	08015cfa 	.word	0x08015cfa

0801394c <_read_r>:
 801394c:	b538      	push	{r3, r4, r5, lr}
 801394e:	4d07      	ldr	r5, [pc, #28]	; (801396c <_read_r+0x20>)
 8013950:	4604      	mov	r4, r0
 8013952:	4608      	mov	r0, r1
 8013954:	4611      	mov	r1, r2
 8013956:	2200      	movs	r2, #0
 8013958:	602a      	str	r2, [r5, #0]
 801395a:	461a      	mov	r2, r3
 801395c:	f7f3 f9b4 	bl	8006cc8 <_read>
 8013960:	1c43      	adds	r3, r0, #1
 8013962:	d102      	bne.n	801396a <_read_r+0x1e>
 8013964:	682b      	ldr	r3, [r5, #0]
 8013966:	b103      	cbz	r3, 801396a <_read_r+0x1e>
 8013968:	6023      	str	r3, [r4, #0]
 801396a:	bd38      	pop	{r3, r4, r5, pc}
 801396c:	200038ec 	.word	0x200038ec

08013970 <__swbuf_r>:
 8013970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013972:	460e      	mov	r6, r1
 8013974:	4614      	mov	r4, r2
 8013976:	4605      	mov	r5, r0
 8013978:	b118      	cbz	r0, 8013982 <__swbuf_r+0x12>
 801397a:	6983      	ldr	r3, [r0, #24]
 801397c:	b90b      	cbnz	r3, 8013982 <__swbuf_r+0x12>
 801397e:	f000 f9d9 	bl	8013d34 <__sinit>
 8013982:	4b21      	ldr	r3, [pc, #132]	; (8013a08 <__swbuf_r+0x98>)
 8013984:	429c      	cmp	r4, r3
 8013986:	d12b      	bne.n	80139e0 <__swbuf_r+0x70>
 8013988:	686c      	ldr	r4, [r5, #4]
 801398a:	69a3      	ldr	r3, [r4, #24]
 801398c:	60a3      	str	r3, [r4, #8]
 801398e:	89a3      	ldrh	r3, [r4, #12]
 8013990:	071a      	lsls	r2, r3, #28
 8013992:	d52f      	bpl.n	80139f4 <__swbuf_r+0x84>
 8013994:	6923      	ldr	r3, [r4, #16]
 8013996:	b36b      	cbz	r3, 80139f4 <__swbuf_r+0x84>
 8013998:	6923      	ldr	r3, [r4, #16]
 801399a:	6820      	ldr	r0, [r4, #0]
 801399c:	1ac0      	subs	r0, r0, r3
 801399e:	6963      	ldr	r3, [r4, #20]
 80139a0:	b2f6      	uxtb	r6, r6
 80139a2:	4283      	cmp	r3, r0
 80139a4:	4637      	mov	r7, r6
 80139a6:	dc04      	bgt.n	80139b2 <__swbuf_r+0x42>
 80139a8:	4621      	mov	r1, r4
 80139aa:	4628      	mov	r0, r5
 80139ac:	f000 f92e 	bl	8013c0c <_fflush_r>
 80139b0:	bb30      	cbnz	r0, 8013a00 <__swbuf_r+0x90>
 80139b2:	68a3      	ldr	r3, [r4, #8]
 80139b4:	3b01      	subs	r3, #1
 80139b6:	60a3      	str	r3, [r4, #8]
 80139b8:	6823      	ldr	r3, [r4, #0]
 80139ba:	1c5a      	adds	r2, r3, #1
 80139bc:	6022      	str	r2, [r4, #0]
 80139be:	701e      	strb	r6, [r3, #0]
 80139c0:	6963      	ldr	r3, [r4, #20]
 80139c2:	3001      	adds	r0, #1
 80139c4:	4283      	cmp	r3, r0
 80139c6:	d004      	beq.n	80139d2 <__swbuf_r+0x62>
 80139c8:	89a3      	ldrh	r3, [r4, #12]
 80139ca:	07db      	lsls	r3, r3, #31
 80139cc:	d506      	bpl.n	80139dc <__swbuf_r+0x6c>
 80139ce:	2e0a      	cmp	r6, #10
 80139d0:	d104      	bne.n	80139dc <__swbuf_r+0x6c>
 80139d2:	4621      	mov	r1, r4
 80139d4:	4628      	mov	r0, r5
 80139d6:	f000 f919 	bl	8013c0c <_fflush_r>
 80139da:	b988      	cbnz	r0, 8013a00 <__swbuf_r+0x90>
 80139dc:	4638      	mov	r0, r7
 80139de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80139e0:	4b0a      	ldr	r3, [pc, #40]	; (8013a0c <__swbuf_r+0x9c>)
 80139e2:	429c      	cmp	r4, r3
 80139e4:	d101      	bne.n	80139ea <__swbuf_r+0x7a>
 80139e6:	68ac      	ldr	r4, [r5, #8]
 80139e8:	e7cf      	b.n	801398a <__swbuf_r+0x1a>
 80139ea:	4b09      	ldr	r3, [pc, #36]	; (8013a10 <__swbuf_r+0xa0>)
 80139ec:	429c      	cmp	r4, r3
 80139ee:	bf08      	it	eq
 80139f0:	68ec      	ldreq	r4, [r5, #12]
 80139f2:	e7ca      	b.n	801398a <__swbuf_r+0x1a>
 80139f4:	4621      	mov	r1, r4
 80139f6:	4628      	mov	r0, r5
 80139f8:	f000 f80c 	bl	8013a14 <__swsetup_r>
 80139fc:	2800      	cmp	r0, #0
 80139fe:	d0cb      	beq.n	8013998 <__swbuf_r+0x28>
 8013a00:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8013a04:	e7ea      	b.n	80139dc <__swbuf_r+0x6c>
 8013a06:	bf00      	nop
 8013a08:	08015d64 	.word	0x08015d64
 8013a0c:	08015d84 	.word	0x08015d84
 8013a10:	08015d44 	.word	0x08015d44

08013a14 <__swsetup_r>:
 8013a14:	4b32      	ldr	r3, [pc, #200]	; (8013ae0 <__swsetup_r+0xcc>)
 8013a16:	b570      	push	{r4, r5, r6, lr}
 8013a18:	681d      	ldr	r5, [r3, #0]
 8013a1a:	4606      	mov	r6, r0
 8013a1c:	460c      	mov	r4, r1
 8013a1e:	b125      	cbz	r5, 8013a2a <__swsetup_r+0x16>
 8013a20:	69ab      	ldr	r3, [r5, #24]
 8013a22:	b913      	cbnz	r3, 8013a2a <__swsetup_r+0x16>
 8013a24:	4628      	mov	r0, r5
 8013a26:	f000 f985 	bl	8013d34 <__sinit>
 8013a2a:	4b2e      	ldr	r3, [pc, #184]	; (8013ae4 <__swsetup_r+0xd0>)
 8013a2c:	429c      	cmp	r4, r3
 8013a2e:	d10f      	bne.n	8013a50 <__swsetup_r+0x3c>
 8013a30:	686c      	ldr	r4, [r5, #4]
 8013a32:	89a3      	ldrh	r3, [r4, #12]
 8013a34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013a38:	0719      	lsls	r1, r3, #28
 8013a3a:	d42c      	bmi.n	8013a96 <__swsetup_r+0x82>
 8013a3c:	06dd      	lsls	r5, r3, #27
 8013a3e:	d411      	bmi.n	8013a64 <__swsetup_r+0x50>
 8013a40:	2309      	movs	r3, #9
 8013a42:	6033      	str	r3, [r6, #0]
 8013a44:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013a48:	81a3      	strh	r3, [r4, #12]
 8013a4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013a4e:	e03e      	b.n	8013ace <__swsetup_r+0xba>
 8013a50:	4b25      	ldr	r3, [pc, #148]	; (8013ae8 <__swsetup_r+0xd4>)
 8013a52:	429c      	cmp	r4, r3
 8013a54:	d101      	bne.n	8013a5a <__swsetup_r+0x46>
 8013a56:	68ac      	ldr	r4, [r5, #8]
 8013a58:	e7eb      	b.n	8013a32 <__swsetup_r+0x1e>
 8013a5a:	4b24      	ldr	r3, [pc, #144]	; (8013aec <__swsetup_r+0xd8>)
 8013a5c:	429c      	cmp	r4, r3
 8013a5e:	bf08      	it	eq
 8013a60:	68ec      	ldreq	r4, [r5, #12]
 8013a62:	e7e6      	b.n	8013a32 <__swsetup_r+0x1e>
 8013a64:	0758      	lsls	r0, r3, #29
 8013a66:	d512      	bpl.n	8013a8e <__swsetup_r+0x7a>
 8013a68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013a6a:	b141      	cbz	r1, 8013a7e <__swsetup_r+0x6a>
 8013a6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013a70:	4299      	cmp	r1, r3
 8013a72:	d002      	beq.n	8013a7a <__swsetup_r+0x66>
 8013a74:	4630      	mov	r0, r6
 8013a76:	f7fc f825 	bl	800fac4 <_free_r>
 8013a7a:	2300      	movs	r3, #0
 8013a7c:	6363      	str	r3, [r4, #52]	; 0x34
 8013a7e:	89a3      	ldrh	r3, [r4, #12]
 8013a80:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013a84:	81a3      	strh	r3, [r4, #12]
 8013a86:	2300      	movs	r3, #0
 8013a88:	6063      	str	r3, [r4, #4]
 8013a8a:	6923      	ldr	r3, [r4, #16]
 8013a8c:	6023      	str	r3, [r4, #0]
 8013a8e:	89a3      	ldrh	r3, [r4, #12]
 8013a90:	f043 0308 	orr.w	r3, r3, #8
 8013a94:	81a3      	strh	r3, [r4, #12]
 8013a96:	6923      	ldr	r3, [r4, #16]
 8013a98:	b94b      	cbnz	r3, 8013aae <__swsetup_r+0x9a>
 8013a9a:	89a3      	ldrh	r3, [r4, #12]
 8013a9c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013aa0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013aa4:	d003      	beq.n	8013aae <__swsetup_r+0x9a>
 8013aa6:	4621      	mov	r1, r4
 8013aa8:	4630      	mov	r0, r6
 8013aaa:	f000 fa05 	bl	8013eb8 <__smakebuf_r>
 8013aae:	89a0      	ldrh	r0, [r4, #12]
 8013ab0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013ab4:	f010 0301 	ands.w	r3, r0, #1
 8013ab8:	d00a      	beq.n	8013ad0 <__swsetup_r+0xbc>
 8013aba:	2300      	movs	r3, #0
 8013abc:	60a3      	str	r3, [r4, #8]
 8013abe:	6963      	ldr	r3, [r4, #20]
 8013ac0:	425b      	negs	r3, r3
 8013ac2:	61a3      	str	r3, [r4, #24]
 8013ac4:	6923      	ldr	r3, [r4, #16]
 8013ac6:	b943      	cbnz	r3, 8013ada <__swsetup_r+0xc6>
 8013ac8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013acc:	d1ba      	bne.n	8013a44 <__swsetup_r+0x30>
 8013ace:	bd70      	pop	{r4, r5, r6, pc}
 8013ad0:	0781      	lsls	r1, r0, #30
 8013ad2:	bf58      	it	pl
 8013ad4:	6963      	ldrpl	r3, [r4, #20]
 8013ad6:	60a3      	str	r3, [r4, #8]
 8013ad8:	e7f4      	b.n	8013ac4 <__swsetup_r+0xb0>
 8013ada:	2000      	movs	r0, #0
 8013adc:	e7f7      	b.n	8013ace <__swsetup_r+0xba>
 8013ade:	bf00      	nop
 8013ae0:	20000260 	.word	0x20000260
 8013ae4:	08015d64 	.word	0x08015d64
 8013ae8:	08015d84 	.word	0x08015d84
 8013aec:	08015d44 	.word	0x08015d44

08013af0 <abort>:
 8013af0:	b508      	push	{r3, lr}
 8013af2:	2006      	movs	r0, #6
 8013af4:	f000 fa50 	bl	8013f98 <raise>
 8013af8:	2001      	movs	r0, #1
 8013afa:	f7f3 f8db 	bl	8006cb4 <_exit>
	...

08013b00 <__sflush_r>:
 8013b00:	898a      	ldrh	r2, [r1, #12]
 8013b02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b06:	4605      	mov	r5, r0
 8013b08:	0710      	lsls	r0, r2, #28
 8013b0a:	460c      	mov	r4, r1
 8013b0c:	d458      	bmi.n	8013bc0 <__sflush_r+0xc0>
 8013b0e:	684b      	ldr	r3, [r1, #4]
 8013b10:	2b00      	cmp	r3, #0
 8013b12:	dc05      	bgt.n	8013b20 <__sflush_r+0x20>
 8013b14:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013b16:	2b00      	cmp	r3, #0
 8013b18:	dc02      	bgt.n	8013b20 <__sflush_r+0x20>
 8013b1a:	2000      	movs	r0, #0
 8013b1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013b20:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013b22:	2e00      	cmp	r6, #0
 8013b24:	d0f9      	beq.n	8013b1a <__sflush_r+0x1a>
 8013b26:	2300      	movs	r3, #0
 8013b28:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013b2c:	682f      	ldr	r7, [r5, #0]
 8013b2e:	602b      	str	r3, [r5, #0]
 8013b30:	d032      	beq.n	8013b98 <__sflush_r+0x98>
 8013b32:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013b34:	89a3      	ldrh	r3, [r4, #12]
 8013b36:	075a      	lsls	r2, r3, #29
 8013b38:	d505      	bpl.n	8013b46 <__sflush_r+0x46>
 8013b3a:	6863      	ldr	r3, [r4, #4]
 8013b3c:	1ac0      	subs	r0, r0, r3
 8013b3e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013b40:	b10b      	cbz	r3, 8013b46 <__sflush_r+0x46>
 8013b42:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013b44:	1ac0      	subs	r0, r0, r3
 8013b46:	2300      	movs	r3, #0
 8013b48:	4602      	mov	r2, r0
 8013b4a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013b4c:	6a21      	ldr	r1, [r4, #32]
 8013b4e:	4628      	mov	r0, r5
 8013b50:	47b0      	blx	r6
 8013b52:	1c43      	adds	r3, r0, #1
 8013b54:	89a3      	ldrh	r3, [r4, #12]
 8013b56:	d106      	bne.n	8013b66 <__sflush_r+0x66>
 8013b58:	6829      	ldr	r1, [r5, #0]
 8013b5a:	291d      	cmp	r1, #29
 8013b5c:	d82c      	bhi.n	8013bb8 <__sflush_r+0xb8>
 8013b5e:	4a2a      	ldr	r2, [pc, #168]	; (8013c08 <__sflush_r+0x108>)
 8013b60:	40ca      	lsrs	r2, r1
 8013b62:	07d6      	lsls	r6, r2, #31
 8013b64:	d528      	bpl.n	8013bb8 <__sflush_r+0xb8>
 8013b66:	2200      	movs	r2, #0
 8013b68:	6062      	str	r2, [r4, #4]
 8013b6a:	04d9      	lsls	r1, r3, #19
 8013b6c:	6922      	ldr	r2, [r4, #16]
 8013b6e:	6022      	str	r2, [r4, #0]
 8013b70:	d504      	bpl.n	8013b7c <__sflush_r+0x7c>
 8013b72:	1c42      	adds	r2, r0, #1
 8013b74:	d101      	bne.n	8013b7a <__sflush_r+0x7a>
 8013b76:	682b      	ldr	r3, [r5, #0]
 8013b78:	b903      	cbnz	r3, 8013b7c <__sflush_r+0x7c>
 8013b7a:	6560      	str	r0, [r4, #84]	; 0x54
 8013b7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013b7e:	602f      	str	r7, [r5, #0]
 8013b80:	2900      	cmp	r1, #0
 8013b82:	d0ca      	beq.n	8013b1a <__sflush_r+0x1a>
 8013b84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013b88:	4299      	cmp	r1, r3
 8013b8a:	d002      	beq.n	8013b92 <__sflush_r+0x92>
 8013b8c:	4628      	mov	r0, r5
 8013b8e:	f7fb ff99 	bl	800fac4 <_free_r>
 8013b92:	2000      	movs	r0, #0
 8013b94:	6360      	str	r0, [r4, #52]	; 0x34
 8013b96:	e7c1      	b.n	8013b1c <__sflush_r+0x1c>
 8013b98:	6a21      	ldr	r1, [r4, #32]
 8013b9a:	2301      	movs	r3, #1
 8013b9c:	4628      	mov	r0, r5
 8013b9e:	47b0      	blx	r6
 8013ba0:	1c41      	adds	r1, r0, #1
 8013ba2:	d1c7      	bne.n	8013b34 <__sflush_r+0x34>
 8013ba4:	682b      	ldr	r3, [r5, #0]
 8013ba6:	2b00      	cmp	r3, #0
 8013ba8:	d0c4      	beq.n	8013b34 <__sflush_r+0x34>
 8013baa:	2b1d      	cmp	r3, #29
 8013bac:	d001      	beq.n	8013bb2 <__sflush_r+0xb2>
 8013bae:	2b16      	cmp	r3, #22
 8013bb0:	d101      	bne.n	8013bb6 <__sflush_r+0xb6>
 8013bb2:	602f      	str	r7, [r5, #0]
 8013bb4:	e7b1      	b.n	8013b1a <__sflush_r+0x1a>
 8013bb6:	89a3      	ldrh	r3, [r4, #12]
 8013bb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013bbc:	81a3      	strh	r3, [r4, #12]
 8013bbe:	e7ad      	b.n	8013b1c <__sflush_r+0x1c>
 8013bc0:	690f      	ldr	r7, [r1, #16]
 8013bc2:	2f00      	cmp	r7, #0
 8013bc4:	d0a9      	beq.n	8013b1a <__sflush_r+0x1a>
 8013bc6:	0793      	lsls	r3, r2, #30
 8013bc8:	680e      	ldr	r6, [r1, #0]
 8013bca:	bf08      	it	eq
 8013bcc:	694b      	ldreq	r3, [r1, #20]
 8013bce:	600f      	str	r7, [r1, #0]
 8013bd0:	bf18      	it	ne
 8013bd2:	2300      	movne	r3, #0
 8013bd4:	eba6 0807 	sub.w	r8, r6, r7
 8013bd8:	608b      	str	r3, [r1, #8]
 8013bda:	f1b8 0f00 	cmp.w	r8, #0
 8013bde:	dd9c      	ble.n	8013b1a <__sflush_r+0x1a>
 8013be0:	6a21      	ldr	r1, [r4, #32]
 8013be2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013be4:	4643      	mov	r3, r8
 8013be6:	463a      	mov	r2, r7
 8013be8:	4628      	mov	r0, r5
 8013bea:	47b0      	blx	r6
 8013bec:	2800      	cmp	r0, #0
 8013bee:	dc06      	bgt.n	8013bfe <__sflush_r+0xfe>
 8013bf0:	89a3      	ldrh	r3, [r4, #12]
 8013bf2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013bf6:	81a3      	strh	r3, [r4, #12]
 8013bf8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013bfc:	e78e      	b.n	8013b1c <__sflush_r+0x1c>
 8013bfe:	4407      	add	r7, r0
 8013c00:	eba8 0800 	sub.w	r8, r8, r0
 8013c04:	e7e9      	b.n	8013bda <__sflush_r+0xda>
 8013c06:	bf00      	nop
 8013c08:	20400001 	.word	0x20400001

08013c0c <_fflush_r>:
 8013c0c:	b538      	push	{r3, r4, r5, lr}
 8013c0e:	690b      	ldr	r3, [r1, #16]
 8013c10:	4605      	mov	r5, r0
 8013c12:	460c      	mov	r4, r1
 8013c14:	b913      	cbnz	r3, 8013c1c <_fflush_r+0x10>
 8013c16:	2500      	movs	r5, #0
 8013c18:	4628      	mov	r0, r5
 8013c1a:	bd38      	pop	{r3, r4, r5, pc}
 8013c1c:	b118      	cbz	r0, 8013c26 <_fflush_r+0x1a>
 8013c1e:	6983      	ldr	r3, [r0, #24]
 8013c20:	b90b      	cbnz	r3, 8013c26 <_fflush_r+0x1a>
 8013c22:	f000 f887 	bl	8013d34 <__sinit>
 8013c26:	4b14      	ldr	r3, [pc, #80]	; (8013c78 <_fflush_r+0x6c>)
 8013c28:	429c      	cmp	r4, r3
 8013c2a:	d11b      	bne.n	8013c64 <_fflush_r+0x58>
 8013c2c:	686c      	ldr	r4, [r5, #4]
 8013c2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013c32:	2b00      	cmp	r3, #0
 8013c34:	d0ef      	beq.n	8013c16 <_fflush_r+0xa>
 8013c36:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013c38:	07d0      	lsls	r0, r2, #31
 8013c3a:	d404      	bmi.n	8013c46 <_fflush_r+0x3a>
 8013c3c:	0599      	lsls	r1, r3, #22
 8013c3e:	d402      	bmi.n	8013c46 <_fflush_r+0x3a>
 8013c40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013c42:	f7fe fde8 	bl	8012816 <__retarget_lock_acquire_recursive>
 8013c46:	4628      	mov	r0, r5
 8013c48:	4621      	mov	r1, r4
 8013c4a:	f7ff ff59 	bl	8013b00 <__sflush_r>
 8013c4e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013c50:	07da      	lsls	r2, r3, #31
 8013c52:	4605      	mov	r5, r0
 8013c54:	d4e0      	bmi.n	8013c18 <_fflush_r+0xc>
 8013c56:	89a3      	ldrh	r3, [r4, #12]
 8013c58:	059b      	lsls	r3, r3, #22
 8013c5a:	d4dd      	bmi.n	8013c18 <_fflush_r+0xc>
 8013c5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013c5e:	f7fe fddb 	bl	8012818 <__retarget_lock_release_recursive>
 8013c62:	e7d9      	b.n	8013c18 <_fflush_r+0xc>
 8013c64:	4b05      	ldr	r3, [pc, #20]	; (8013c7c <_fflush_r+0x70>)
 8013c66:	429c      	cmp	r4, r3
 8013c68:	d101      	bne.n	8013c6e <_fflush_r+0x62>
 8013c6a:	68ac      	ldr	r4, [r5, #8]
 8013c6c:	e7df      	b.n	8013c2e <_fflush_r+0x22>
 8013c6e:	4b04      	ldr	r3, [pc, #16]	; (8013c80 <_fflush_r+0x74>)
 8013c70:	429c      	cmp	r4, r3
 8013c72:	bf08      	it	eq
 8013c74:	68ec      	ldreq	r4, [r5, #12]
 8013c76:	e7da      	b.n	8013c2e <_fflush_r+0x22>
 8013c78:	08015d64 	.word	0x08015d64
 8013c7c:	08015d84 	.word	0x08015d84
 8013c80:	08015d44 	.word	0x08015d44

08013c84 <std>:
 8013c84:	2300      	movs	r3, #0
 8013c86:	b510      	push	{r4, lr}
 8013c88:	4604      	mov	r4, r0
 8013c8a:	e9c0 3300 	strd	r3, r3, [r0]
 8013c8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013c92:	6083      	str	r3, [r0, #8]
 8013c94:	8181      	strh	r1, [r0, #12]
 8013c96:	6643      	str	r3, [r0, #100]	; 0x64
 8013c98:	81c2      	strh	r2, [r0, #14]
 8013c9a:	6183      	str	r3, [r0, #24]
 8013c9c:	4619      	mov	r1, r3
 8013c9e:	2208      	movs	r2, #8
 8013ca0:	305c      	adds	r0, #92	; 0x5c
 8013ca2:	f7fb fef1 	bl	800fa88 <memset>
 8013ca6:	4b05      	ldr	r3, [pc, #20]	; (8013cbc <std+0x38>)
 8013ca8:	6263      	str	r3, [r4, #36]	; 0x24
 8013caa:	4b05      	ldr	r3, [pc, #20]	; (8013cc0 <std+0x3c>)
 8013cac:	62a3      	str	r3, [r4, #40]	; 0x28
 8013cae:	4b05      	ldr	r3, [pc, #20]	; (8013cc4 <std+0x40>)
 8013cb0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013cb2:	4b05      	ldr	r3, [pc, #20]	; (8013cc8 <std+0x44>)
 8013cb4:	6224      	str	r4, [r4, #32]
 8013cb6:	6323      	str	r3, [r4, #48]	; 0x30
 8013cb8:	bd10      	pop	{r4, pc}
 8013cba:	bf00      	nop
 8013cbc:	080134a1 	.word	0x080134a1
 8013cc0:	080134c3 	.word	0x080134c3
 8013cc4:	080134fb 	.word	0x080134fb
 8013cc8:	0801351f 	.word	0x0801351f

08013ccc <_cleanup_r>:
 8013ccc:	4901      	ldr	r1, [pc, #4]	; (8013cd4 <_cleanup_r+0x8>)
 8013cce:	f000 b8af 	b.w	8013e30 <_fwalk_reent>
 8013cd2:	bf00      	nop
 8013cd4:	08013c0d 	.word	0x08013c0d

08013cd8 <__sfmoreglue>:
 8013cd8:	b570      	push	{r4, r5, r6, lr}
 8013cda:	2268      	movs	r2, #104	; 0x68
 8013cdc:	1e4d      	subs	r5, r1, #1
 8013cde:	4355      	muls	r5, r2
 8013ce0:	460e      	mov	r6, r1
 8013ce2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013ce6:	f7fb ff59 	bl	800fb9c <_malloc_r>
 8013cea:	4604      	mov	r4, r0
 8013cec:	b140      	cbz	r0, 8013d00 <__sfmoreglue+0x28>
 8013cee:	2100      	movs	r1, #0
 8013cf0:	e9c0 1600 	strd	r1, r6, [r0]
 8013cf4:	300c      	adds	r0, #12
 8013cf6:	60a0      	str	r0, [r4, #8]
 8013cf8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013cfc:	f7fb fec4 	bl	800fa88 <memset>
 8013d00:	4620      	mov	r0, r4
 8013d02:	bd70      	pop	{r4, r5, r6, pc}

08013d04 <__sfp_lock_acquire>:
 8013d04:	4801      	ldr	r0, [pc, #4]	; (8013d0c <__sfp_lock_acquire+0x8>)
 8013d06:	f7fe bd86 	b.w	8012816 <__retarget_lock_acquire_recursive>
 8013d0a:	bf00      	nop
 8013d0c:	200038e9 	.word	0x200038e9

08013d10 <__sfp_lock_release>:
 8013d10:	4801      	ldr	r0, [pc, #4]	; (8013d18 <__sfp_lock_release+0x8>)
 8013d12:	f7fe bd81 	b.w	8012818 <__retarget_lock_release_recursive>
 8013d16:	bf00      	nop
 8013d18:	200038e9 	.word	0x200038e9

08013d1c <__sinit_lock_acquire>:
 8013d1c:	4801      	ldr	r0, [pc, #4]	; (8013d24 <__sinit_lock_acquire+0x8>)
 8013d1e:	f7fe bd7a 	b.w	8012816 <__retarget_lock_acquire_recursive>
 8013d22:	bf00      	nop
 8013d24:	200038ea 	.word	0x200038ea

08013d28 <__sinit_lock_release>:
 8013d28:	4801      	ldr	r0, [pc, #4]	; (8013d30 <__sinit_lock_release+0x8>)
 8013d2a:	f7fe bd75 	b.w	8012818 <__retarget_lock_release_recursive>
 8013d2e:	bf00      	nop
 8013d30:	200038ea 	.word	0x200038ea

08013d34 <__sinit>:
 8013d34:	b510      	push	{r4, lr}
 8013d36:	4604      	mov	r4, r0
 8013d38:	f7ff fff0 	bl	8013d1c <__sinit_lock_acquire>
 8013d3c:	69a3      	ldr	r3, [r4, #24]
 8013d3e:	b11b      	cbz	r3, 8013d48 <__sinit+0x14>
 8013d40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013d44:	f7ff bff0 	b.w	8013d28 <__sinit_lock_release>
 8013d48:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8013d4c:	6523      	str	r3, [r4, #80]	; 0x50
 8013d4e:	4b13      	ldr	r3, [pc, #76]	; (8013d9c <__sinit+0x68>)
 8013d50:	4a13      	ldr	r2, [pc, #76]	; (8013da0 <__sinit+0x6c>)
 8013d52:	681b      	ldr	r3, [r3, #0]
 8013d54:	62a2      	str	r2, [r4, #40]	; 0x28
 8013d56:	42a3      	cmp	r3, r4
 8013d58:	bf04      	itt	eq
 8013d5a:	2301      	moveq	r3, #1
 8013d5c:	61a3      	streq	r3, [r4, #24]
 8013d5e:	4620      	mov	r0, r4
 8013d60:	f000 f820 	bl	8013da4 <__sfp>
 8013d64:	6060      	str	r0, [r4, #4]
 8013d66:	4620      	mov	r0, r4
 8013d68:	f000 f81c 	bl	8013da4 <__sfp>
 8013d6c:	60a0      	str	r0, [r4, #8]
 8013d6e:	4620      	mov	r0, r4
 8013d70:	f000 f818 	bl	8013da4 <__sfp>
 8013d74:	2200      	movs	r2, #0
 8013d76:	60e0      	str	r0, [r4, #12]
 8013d78:	2104      	movs	r1, #4
 8013d7a:	6860      	ldr	r0, [r4, #4]
 8013d7c:	f7ff ff82 	bl	8013c84 <std>
 8013d80:	68a0      	ldr	r0, [r4, #8]
 8013d82:	2201      	movs	r2, #1
 8013d84:	2109      	movs	r1, #9
 8013d86:	f7ff ff7d 	bl	8013c84 <std>
 8013d8a:	68e0      	ldr	r0, [r4, #12]
 8013d8c:	2202      	movs	r2, #2
 8013d8e:	2112      	movs	r1, #18
 8013d90:	f7ff ff78 	bl	8013c84 <std>
 8013d94:	2301      	movs	r3, #1
 8013d96:	61a3      	str	r3, [r4, #24]
 8013d98:	e7d2      	b.n	8013d40 <__sinit+0xc>
 8013d9a:	bf00      	nop
 8013d9c:	08015a08 	.word	0x08015a08
 8013da0:	08013ccd 	.word	0x08013ccd

08013da4 <__sfp>:
 8013da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013da6:	4607      	mov	r7, r0
 8013da8:	f7ff ffac 	bl	8013d04 <__sfp_lock_acquire>
 8013dac:	4b1e      	ldr	r3, [pc, #120]	; (8013e28 <__sfp+0x84>)
 8013dae:	681e      	ldr	r6, [r3, #0]
 8013db0:	69b3      	ldr	r3, [r6, #24]
 8013db2:	b913      	cbnz	r3, 8013dba <__sfp+0x16>
 8013db4:	4630      	mov	r0, r6
 8013db6:	f7ff ffbd 	bl	8013d34 <__sinit>
 8013dba:	3648      	adds	r6, #72	; 0x48
 8013dbc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013dc0:	3b01      	subs	r3, #1
 8013dc2:	d503      	bpl.n	8013dcc <__sfp+0x28>
 8013dc4:	6833      	ldr	r3, [r6, #0]
 8013dc6:	b30b      	cbz	r3, 8013e0c <__sfp+0x68>
 8013dc8:	6836      	ldr	r6, [r6, #0]
 8013dca:	e7f7      	b.n	8013dbc <__sfp+0x18>
 8013dcc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013dd0:	b9d5      	cbnz	r5, 8013e08 <__sfp+0x64>
 8013dd2:	4b16      	ldr	r3, [pc, #88]	; (8013e2c <__sfp+0x88>)
 8013dd4:	60e3      	str	r3, [r4, #12]
 8013dd6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8013dda:	6665      	str	r5, [r4, #100]	; 0x64
 8013ddc:	f7fe fd1a 	bl	8012814 <__retarget_lock_init_recursive>
 8013de0:	f7ff ff96 	bl	8013d10 <__sfp_lock_release>
 8013de4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8013de8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8013dec:	6025      	str	r5, [r4, #0]
 8013dee:	61a5      	str	r5, [r4, #24]
 8013df0:	2208      	movs	r2, #8
 8013df2:	4629      	mov	r1, r5
 8013df4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013df8:	f7fb fe46 	bl	800fa88 <memset>
 8013dfc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013e00:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013e04:	4620      	mov	r0, r4
 8013e06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013e08:	3468      	adds	r4, #104	; 0x68
 8013e0a:	e7d9      	b.n	8013dc0 <__sfp+0x1c>
 8013e0c:	2104      	movs	r1, #4
 8013e0e:	4638      	mov	r0, r7
 8013e10:	f7ff ff62 	bl	8013cd8 <__sfmoreglue>
 8013e14:	4604      	mov	r4, r0
 8013e16:	6030      	str	r0, [r6, #0]
 8013e18:	2800      	cmp	r0, #0
 8013e1a:	d1d5      	bne.n	8013dc8 <__sfp+0x24>
 8013e1c:	f7ff ff78 	bl	8013d10 <__sfp_lock_release>
 8013e20:	230c      	movs	r3, #12
 8013e22:	603b      	str	r3, [r7, #0]
 8013e24:	e7ee      	b.n	8013e04 <__sfp+0x60>
 8013e26:	bf00      	nop
 8013e28:	08015a08 	.word	0x08015a08
 8013e2c:	ffff0001 	.word	0xffff0001

08013e30 <_fwalk_reent>:
 8013e30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013e34:	4606      	mov	r6, r0
 8013e36:	4688      	mov	r8, r1
 8013e38:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013e3c:	2700      	movs	r7, #0
 8013e3e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013e42:	f1b9 0901 	subs.w	r9, r9, #1
 8013e46:	d505      	bpl.n	8013e54 <_fwalk_reent+0x24>
 8013e48:	6824      	ldr	r4, [r4, #0]
 8013e4a:	2c00      	cmp	r4, #0
 8013e4c:	d1f7      	bne.n	8013e3e <_fwalk_reent+0xe>
 8013e4e:	4638      	mov	r0, r7
 8013e50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013e54:	89ab      	ldrh	r3, [r5, #12]
 8013e56:	2b01      	cmp	r3, #1
 8013e58:	d907      	bls.n	8013e6a <_fwalk_reent+0x3a>
 8013e5a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013e5e:	3301      	adds	r3, #1
 8013e60:	d003      	beq.n	8013e6a <_fwalk_reent+0x3a>
 8013e62:	4629      	mov	r1, r5
 8013e64:	4630      	mov	r0, r6
 8013e66:	47c0      	blx	r8
 8013e68:	4307      	orrs	r7, r0
 8013e6a:	3568      	adds	r5, #104	; 0x68
 8013e6c:	e7e9      	b.n	8013e42 <_fwalk_reent+0x12>

08013e6e <__swhatbuf_r>:
 8013e6e:	b570      	push	{r4, r5, r6, lr}
 8013e70:	460e      	mov	r6, r1
 8013e72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013e76:	2900      	cmp	r1, #0
 8013e78:	b096      	sub	sp, #88	; 0x58
 8013e7a:	4614      	mov	r4, r2
 8013e7c:	461d      	mov	r5, r3
 8013e7e:	da08      	bge.n	8013e92 <__swhatbuf_r+0x24>
 8013e80:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8013e84:	2200      	movs	r2, #0
 8013e86:	602a      	str	r2, [r5, #0]
 8013e88:	061a      	lsls	r2, r3, #24
 8013e8a:	d410      	bmi.n	8013eae <__swhatbuf_r+0x40>
 8013e8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013e90:	e00e      	b.n	8013eb0 <__swhatbuf_r+0x42>
 8013e92:	466a      	mov	r2, sp
 8013e94:	f000 f89c 	bl	8013fd0 <_fstat_r>
 8013e98:	2800      	cmp	r0, #0
 8013e9a:	dbf1      	blt.n	8013e80 <__swhatbuf_r+0x12>
 8013e9c:	9a01      	ldr	r2, [sp, #4]
 8013e9e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013ea2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013ea6:	425a      	negs	r2, r3
 8013ea8:	415a      	adcs	r2, r3
 8013eaa:	602a      	str	r2, [r5, #0]
 8013eac:	e7ee      	b.n	8013e8c <__swhatbuf_r+0x1e>
 8013eae:	2340      	movs	r3, #64	; 0x40
 8013eb0:	2000      	movs	r0, #0
 8013eb2:	6023      	str	r3, [r4, #0]
 8013eb4:	b016      	add	sp, #88	; 0x58
 8013eb6:	bd70      	pop	{r4, r5, r6, pc}

08013eb8 <__smakebuf_r>:
 8013eb8:	898b      	ldrh	r3, [r1, #12]
 8013eba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013ebc:	079d      	lsls	r5, r3, #30
 8013ebe:	4606      	mov	r6, r0
 8013ec0:	460c      	mov	r4, r1
 8013ec2:	d507      	bpl.n	8013ed4 <__smakebuf_r+0x1c>
 8013ec4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013ec8:	6023      	str	r3, [r4, #0]
 8013eca:	6123      	str	r3, [r4, #16]
 8013ecc:	2301      	movs	r3, #1
 8013ece:	6163      	str	r3, [r4, #20]
 8013ed0:	b002      	add	sp, #8
 8013ed2:	bd70      	pop	{r4, r5, r6, pc}
 8013ed4:	ab01      	add	r3, sp, #4
 8013ed6:	466a      	mov	r2, sp
 8013ed8:	f7ff ffc9 	bl	8013e6e <__swhatbuf_r>
 8013edc:	9900      	ldr	r1, [sp, #0]
 8013ede:	4605      	mov	r5, r0
 8013ee0:	4630      	mov	r0, r6
 8013ee2:	f7fb fe5b 	bl	800fb9c <_malloc_r>
 8013ee6:	b948      	cbnz	r0, 8013efc <__smakebuf_r+0x44>
 8013ee8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013eec:	059a      	lsls	r2, r3, #22
 8013eee:	d4ef      	bmi.n	8013ed0 <__smakebuf_r+0x18>
 8013ef0:	f023 0303 	bic.w	r3, r3, #3
 8013ef4:	f043 0302 	orr.w	r3, r3, #2
 8013ef8:	81a3      	strh	r3, [r4, #12]
 8013efa:	e7e3      	b.n	8013ec4 <__smakebuf_r+0xc>
 8013efc:	4b0d      	ldr	r3, [pc, #52]	; (8013f34 <__smakebuf_r+0x7c>)
 8013efe:	62b3      	str	r3, [r6, #40]	; 0x28
 8013f00:	89a3      	ldrh	r3, [r4, #12]
 8013f02:	6020      	str	r0, [r4, #0]
 8013f04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013f08:	81a3      	strh	r3, [r4, #12]
 8013f0a:	9b00      	ldr	r3, [sp, #0]
 8013f0c:	6163      	str	r3, [r4, #20]
 8013f0e:	9b01      	ldr	r3, [sp, #4]
 8013f10:	6120      	str	r0, [r4, #16]
 8013f12:	b15b      	cbz	r3, 8013f2c <__smakebuf_r+0x74>
 8013f14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013f18:	4630      	mov	r0, r6
 8013f1a:	f000 f86b 	bl	8013ff4 <_isatty_r>
 8013f1e:	b128      	cbz	r0, 8013f2c <__smakebuf_r+0x74>
 8013f20:	89a3      	ldrh	r3, [r4, #12]
 8013f22:	f023 0303 	bic.w	r3, r3, #3
 8013f26:	f043 0301 	orr.w	r3, r3, #1
 8013f2a:	81a3      	strh	r3, [r4, #12]
 8013f2c:	89a0      	ldrh	r0, [r4, #12]
 8013f2e:	4305      	orrs	r5, r0
 8013f30:	81a5      	strh	r5, [r4, #12]
 8013f32:	e7cd      	b.n	8013ed0 <__smakebuf_r+0x18>
 8013f34:	08013ccd 	.word	0x08013ccd

08013f38 <_malloc_usable_size_r>:
 8013f38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013f3c:	1f18      	subs	r0, r3, #4
 8013f3e:	2b00      	cmp	r3, #0
 8013f40:	bfbc      	itt	lt
 8013f42:	580b      	ldrlt	r3, [r1, r0]
 8013f44:	18c0      	addlt	r0, r0, r3
 8013f46:	4770      	bx	lr

08013f48 <_raise_r>:
 8013f48:	291f      	cmp	r1, #31
 8013f4a:	b538      	push	{r3, r4, r5, lr}
 8013f4c:	4604      	mov	r4, r0
 8013f4e:	460d      	mov	r5, r1
 8013f50:	d904      	bls.n	8013f5c <_raise_r+0x14>
 8013f52:	2316      	movs	r3, #22
 8013f54:	6003      	str	r3, [r0, #0]
 8013f56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013f5a:	bd38      	pop	{r3, r4, r5, pc}
 8013f5c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8013f5e:	b112      	cbz	r2, 8013f66 <_raise_r+0x1e>
 8013f60:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013f64:	b94b      	cbnz	r3, 8013f7a <_raise_r+0x32>
 8013f66:	4620      	mov	r0, r4
 8013f68:	f000 f830 	bl	8013fcc <_getpid_r>
 8013f6c:	462a      	mov	r2, r5
 8013f6e:	4601      	mov	r1, r0
 8013f70:	4620      	mov	r0, r4
 8013f72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013f76:	f000 b817 	b.w	8013fa8 <_kill_r>
 8013f7a:	2b01      	cmp	r3, #1
 8013f7c:	d00a      	beq.n	8013f94 <_raise_r+0x4c>
 8013f7e:	1c59      	adds	r1, r3, #1
 8013f80:	d103      	bne.n	8013f8a <_raise_r+0x42>
 8013f82:	2316      	movs	r3, #22
 8013f84:	6003      	str	r3, [r0, #0]
 8013f86:	2001      	movs	r0, #1
 8013f88:	e7e7      	b.n	8013f5a <_raise_r+0x12>
 8013f8a:	2400      	movs	r4, #0
 8013f8c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013f90:	4628      	mov	r0, r5
 8013f92:	4798      	blx	r3
 8013f94:	2000      	movs	r0, #0
 8013f96:	e7e0      	b.n	8013f5a <_raise_r+0x12>

08013f98 <raise>:
 8013f98:	4b02      	ldr	r3, [pc, #8]	; (8013fa4 <raise+0xc>)
 8013f9a:	4601      	mov	r1, r0
 8013f9c:	6818      	ldr	r0, [r3, #0]
 8013f9e:	f7ff bfd3 	b.w	8013f48 <_raise_r>
 8013fa2:	bf00      	nop
 8013fa4:	20000260 	.word	0x20000260

08013fa8 <_kill_r>:
 8013fa8:	b538      	push	{r3, r4, r5, lr}
 8013faa:	4d07      	ldr	r5, [pc, #28]	; (8013fc8 <_kill_r+0x20>)
 8013fac:	2300      	movs	r3, #0
 8013fae:	4604      	mov	r4, r0
 8013fb0:	4608      	mov	r0, r1
 8013fb2:	4611      	mov	r1, r2
 8013fb4:	602b      	str	r3, [r5, #0]
 8013fb6:	f7f2 fe6d 	bl	8006c94 <_kill>
 8013fba:	1c43      	adds	r3, r0, #1
 8013fbc:	d102      	bne.n	8013fc4 <_kill_r+0x1c>
 8013fbe:	682b      	ldr	r3, [r5, #0]
 8013fc0:	b103      	cbz	r3, 8013fc4 <_kill_r+0x1c>
 8013fc2:	6023      	str	r3, [r4, #0]
 8013fc4:	bd38      	pop	{r3, r4, r5, pc}
 8013fc6:	bf00      	nop
 8013fc8:	200038ec 	.word	0x200038ec

08013fcc <_getpid_r>:
 8013fcc:	f7f2 be5a 	b.w	8006c84 <_getpid>

08013fd0 <_fstat_r>:
 8013fd0:	b538      	push	{r3, r4, r5, lr}
 8013fd2:	4d07      	ldr	r5, [pc, #28]	; (8013ff0 <_fstat_r+0x20>)
 8013fd4:	2300      	movs	r3, #0
 8013fd6:	4604      	mov	r4, r0
 8013fd8:	4608      	mov	r0, r1
 8013fda:	4611      	mov	r1, r2
 8013fdc:	602b      	str	r3, [r5, #0]
 8013fde:	f7f2 feb8 	bl	8006d52 <_fstat>
 8013fe2:	1c43      	adds	r3, r0, #1
 8013fe4:	d102      	bne.n	8013fec <_fstat_r+0x1c>
 8013fe6:	682b      	ldr	r3, [r5, #0]
 8013fe8:	b103      	cbz	r3, 8013fec <_fstat_r+0x1c>
 8013fea:	6023      	str	r3, [r4, #0]
 8013fec:	bd38      	pop	{r3, r4, r5, pc}
 8013fee:	bf00      	nop
 8013ff0:	200038ec 	.word	0x200038ec

08013ff4 <_isatty_r>:
 8013ff4:	b538      	push	{r3, r4, r5, lr}
 8013ff6:	4d06      	ldr	r5, [pc, #24]	; (8014010 <_isatty_r+0x1c>)
 8013ff8:	2300      	movs	r3, #0
 8013ffa:	4604      	mov	r4, r0
 8013ffc:	4608      	mov	r0, r1
 8013ffe:	602b      	str	r3, [r5, #0]
 8014000:	f7f2 feb7 	bl	8006d72 <_isatty>
 8014004:	1c43      	adds	r3, r0, #1
 8014006:	d102      	bne.n	801400e <_isatty_r+0x1a>
 8014008:	682b      	ldr	r3, [r5, #0]
 801400a:	b103      	cbz	r3, 801400e <_isatty_r+0x1a>
 801400c:	6023      	str	r3, [r4, #0]
 801400e:	bd38      	pop	{r3, r4, r5, pc}
 8014010:	200038ec 	.word	0x200038ec

08014014 <_init>:
 8014014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014016:	bf00      	nop
 8014018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801401a:	bc08      	pop	{r3}
 801401c:	469e      	mov	lr, r3
 801401e:	4770      	bx	lr

08014020 <_fini>:
 8014020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014022:	bf00      	nop
 8014024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014026:	bc08      	pop	{r3}
 8014028:	469e      	mov	lr, r3
 801402a:	4770      	bx	lr
