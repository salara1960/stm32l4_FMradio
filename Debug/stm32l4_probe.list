
stm32l4_probe.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013304  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b44  08013498  08013498  00023498  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014fdc  08014fdc  00030420  2**0
                  CONTENTS
  4 .ARM          00000008  08014fdc  08014fdc  00024fdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014fe4  08014fe4  00030420  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014fe4  08014fe4  00024fe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014fe8  08014fe8  00024fe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000420  20000000  08014fec  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000032c8  20000420  0801540c  00030420  2**3
                  ALLOC
 10 ._user_heap_stack 00001000  200036e8  0801540c  000336e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030420  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f9d9  00000000  00000000  00030450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c05  00000000  00000000  0004fe29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b68  00000000  00000000  00053a30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a68  00000000  00000000  00055598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b578  00000000  00000000  00057000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000206f6  00000000  00000000  00082578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001028ef  00000000  00000000  000a2c6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001a555d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008b30  00000000  00000000  001a55b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000420 	.word	0x20000420
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801347c 	.word	0x0801347c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000424 	.word	0x20000424
 80001cc:	0801347c 	.word	0x0801347c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_ldivmod>:
 8000c88:	b97b      	cbnz	r3, 8000caa <__aeabi_ldivmod+0x22>
 8000c8a:	b972      	cbnz	r2, 8000caa <__aeabi_ldivmod+0x22>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bfbe      	ittt	lt
 8000c90:	2000      	movlt	r0, #0
 8000c92:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c96:	e006      	blt.n	8000ca6 <__aeabi_ldivmod+0x1e>
 8000c98:	bf08      	it	eq
 8000c9a:	2800      	cmpeq	r0, #0
 8000c9c:	bf1c      	itt	ne
 8000c9e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ca2:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ca6:	f000 b9f5 	b.w	8001094 <__aeabi_idiv0>
 8000caa:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cae:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb2:	2900      	cmp	r1, #0
 8000cb4:	db09      	blt.n	8000cca <__aeabi_ldivmod+0x42>
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	db1a      	blt.n	8000cf0 <__aeabi_ldivmod+0x68>
 8000cba:	f000 f883 	bl	8000dc4 <__udivmoddi4>
 8000cbe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc6:	b004      	add	sp, #16
 8000cc8:	4770      	bx	lr
 8000cca:	4240      	negs	r0, r0
 8000ccc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	db1b      	blt.n	8000d0c <__aeabi_ldivmod+0x84>
 8000cd4:	f000 f876 	bl	8000dc4 <__udivmoddi4>
 8000cd8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce0:	b004      	add	sp, #16
 8000ce2:	4240      	negs	r0, r0
 8000ce4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce8:	4252      	negs	r2, r2
 8000cea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cee:	4770      	bx	lr
 8000cf0:	4252      	negs	r2, r2
 8000cf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf6:	f000 f865 	bl	8000dc4 <__udivmoddi4>
 8000cfa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d02:	b004      	add	sp, #16
 8000d04:	4240      	negs	r0, r0
 8000d06:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0a:	4770      	bx	lr
 8000d0c:	4252      	negs	r2, r2
 8000d0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d12:	f000 f857 	bl	8000dc4 <__udivmoddi4>
 8000d16:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d1e:	b004      	add	sp, #16
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	4770      	bx	lr

08000d28 <__aeabi_uldivmod>:
 8000d28:	b953      	cbnz	r3, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2a:	b94a      	cbnz	r2, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2c:	2900      	cmp	r1, #0
 8000d2e:	bf08      	it	eq
 8000d30:	2800      	cmpeq	r0, #0
 8000d32:	bf1c      	itt	ne
 8000d34:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000d38:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000d3c:	f000 b9aa 	b.w	8001094 <__aeabi_idiv0>
 8000d40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d48:	f000 f83c 	bl	8000dc4 <__udivmoddi4>
 8000d4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d54:	b004      	add	sp, #16
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_d2lz>:
 8000d58:	b538      	push	{r3, r4, r5, lr}
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	4604      	mov	r4, r0
 8000d60:	460d      	mov	r5, r1
 8000d62:	f7ff febb 	bl	8000adc <__aeabi_dcmplt>
 8000d66:	b928      	cbnz	r0, 8000d74 <__aeabi_d2lz+0x1c>
 8000d68:	4620      	mov	r0, r4
 8000d6a:	4629      	mov	r1, r5
 8000d6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d70:	f000 b80a 	b.w	8000d88 <__aeabi_d2ulz>
 8000d74:	4620      	mov	r0, r4
 8000d76:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d7a:	f000 f805 	bl	8000d88 <__aeabi_d2ulz>
 8000d7e:	4240      	negs	r0, r0
 8000d80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d84:	bd38      	pop	{r3, r4, r5, pc}
 8000d86:	bf00      	nop

08000d88 <__aeabi_d2ulz>:
 8000d88:	b5d0      	push	{r4, r6, r7, lr}
 8000d8a:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <__aeabi_d2ulz+0x34>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	4606      	mov	r6, r0
 8000d90:	460f      	mov	r7, r1
 8000d92:	f7ff fc31 	bl	80005f8 <__aeabi_dmul>
 8000d96:	f7ff ff07 	bl	8000ba8 <__aeabi_d2uiz>
 8000d9a:	4604      	mov	r4, r0
 8000d9c:	f7ff fbb2 	bl	8000504 <__aeabi_ui2d>
 8000da0:	4b07      	ldr	r3, [pc, #28]	; (8000dc0 <__aeabi_d2ulz+0x38>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	f7ff fc28 	bl	80005f8 <__aeabi_dmul>
 8000da8:	4602      	mov	r2, r0
 8000daa:	460b      	mov	r3, r1
 8000dac:	4630      	mov	r0, r6
 8000dae:	4639      	mov	r1, r7
 8000db0:	f7ff fa6a 	bl	8000288 <__aeabi_dsub>
 8000db4:	f7ff fef8 	bl	8000ba8 <__aeabi_d2uiz>
 8000db8:	4621      	mov	r1, r4
 8000dba:	bdd0      	pop	{r4, r6, r7, pc}
 8000dbc:	3df00000 	.word	0x3df00000
 8000dc0:	41f00000 	.word	0x41f00000

08000dc4 <__udivmoddi4>:
 8000dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dc8:	9d08      	ldr	r5, [sp, #32]
 8000dca:	4604      	mov	r4, r0
 8000dcc:	468e      	mov	lr, r1
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d14d      	bne.n	8000e6e <__udivmoddi4+0xaa>
 8000dd2:	428a      	cmp	r2, r1
 8000dd4:	4694      	mov	ip, r2
 8000dd6:	d969      	bls.n	8000eac <__udivmoddi4+0xe8>
 8000dd8:	fab2 f282 	clz	r2, r2
 8000ddc:	b152      	cbz	r2, 8000df4 <__udivmoddi4+0x30>
 8000dde:	fa01 f302 	lsl.w	r3, r1, r2
 8000de2:	f1c2 0120 	rsb	r1, r2, #32
 8000de6:	fa20 f101 	lsr.w	r1, r0, r1
 8000dea:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dee:	ea41 0e03 	orr.w	lr, r1, r3
 8000df2:	4094      	lsls	r4, r2
 8000df4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df8:	0c21      	lsrs	r1, r4, #16
 8000dfa:	fbbe f6f8 	udiv	r6, lr, r8
 8000dfe:	fa1f f78c 	uxth.w	r7, ip
 8000e02:	fb08 e316 	mls	r3, r8, r6, lr
 8000e06:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e0a:	fb06 f107 	mul.w	r1, r6, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d90a      	bls.n	8000e28 <__udivmoddi4+0x64>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000e1a:	f080 811f 	bcs.w	800105c <__udivmoddi4+0x298>
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	f240 811c 	bls.w	800105c <__udivmoddi4+0x298>
 8000e24:	3e02      	subs	r6, #2
 8000e26:	4463      	add	r3, ip
 8000e28:	1a5b      	subs	r3, r3, r1
 8000e2a:	b2a4      	uxth	r4, r4
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3310 	mls	r3, r8, r0, r3
 8000e34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e38:	fb00 f707 	mul.w	r7, r0, r7
 8000e3c:	42a7      	cmp	r7, r4
 8000e3e:	d90a      	bls.n	8000e56 <__udivmoddi4+0x92>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e48:	f080 810a 	bcs.w	8001060 <__udivmoddi4+0x29c>
 8000e4c:	42a7      	cmp	r7, r4
 8000e4e:	f240 8107 	bls.w	8001060 <__udivmoddi4+0x29c>
 8000e52:	4464      	add	r4, ip
 8000e54:	3802      	subs	r0, #2
 8000e56:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e5a:	1be4      	subs	r4, r4, r7
 8000e5c:	2600      	movs	r6, #0
 8000e5e:	b11d      	cbz	r5, 8000e68 <__udivmoddi4+0xa4>
 8000e60:	40d4      	lsrs	r4, r2
 8000e62:	2300      	movs	r3, #0
 8000e64:	e9c5 4300 	strd	r4, r3, [r5]
 8000e68:	4631      	mov	r1, r6
 8000e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6e:	428b      	cmp	r3, r1
 8000e70:	d909      	bls.n	8000e86 <__udivmoddi4+0xc2>
 8000e72:	2d00      	cmp	r5, #0
 8000e74:	f000 80ef 	beq.w	8001056 <__udivmoddi4+0x292>
 8000e78:	2600      	movs	r6, #0
 8000e7a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e7e:	4630      	mov	r0, r6
 8000e80:	4631      	mov	r1, r6
 8000e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e86:	fab3 f683 	clz	r6, r3
 8000e8a:	2e00      	cmp	r6, #0
 8000e8c:	d14a      	bne.n	8000f24 <__udivmoddi4+0x160>
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	d302      	bcc.n	8000e98 <__udivmoddi4+0xd4>
 8000e92:	4282      	cmp	r2, r0
 8000e94:	f200 80f9 	bhi.w	800108a <__udivmoddi4+0x2c6>
 8000e98:	1a84      	subs	r4, r0, r2
 8000e9a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e9e:	2001      	movs	r0, #1
 8000ea0:	469e      	mov	lr, r3
 8000ea2:	2d00      	cmp	r5, #0
 8000ea4:	d0e0      	beq.n	8000e68 <__udivmoddi4+0xa4>
 8000ea6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000eaa:	e7dd      	b.n	8000e68 <__udivmoddi4+0xa4>
 8000eac:	b902      	cbnz	r2, 8000eb0 <__udivmoddi4+0xec>
 8000eae:	deff      	udf	#255	; 0xff
 8000eb0:	fab2 f282 	clz	r2, r2
 8000eb4:	2a00      	cmp	r2, #0
 8000eb6:	f040 8092 	bne.w	8000fde <__udivmoddi4+0x21a>
 8000eba:	eba1 010c 	sub.w	r1, r1, ip
 8000ebe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ec2:	fa1f fe8c 	uxth.w	lr, ip
 8000ec6:	2601      	movs	r6, #1
 8000ec8:	0c20      	lsrs	r0, r4, #16
 8000eca:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ece:	fb07 1113 	mls	r1, r7, r3, r1
 8000ed2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed6:	fb0e f003 	mul.w	r0, lr, r3
 8000eda:	4288      	cmp	r0, r1
 8000edc:	d908      	bls.n	8000ef0 <__udivmoddi4+0x12c>
 8000ede:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee2:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000ee6:	d202      	bcs.n	8000eee <__udivmoddi4+0x12a>
 8000ee8:	4288      	cmp	r0, r1
 8000eea:	f200 80cb 	bhi.w	8001084 <__udivmoddi4+0x2c0>
 8000eee:	4643      	mov	r3, r8
 8000ef0:	1a09      	subs	r1, r1, r0
 8000ef2:	b2a4      	uxth	r4, r4
 8000ef4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ef8:	fb07 1110 	mls	r1, r7, r0, r1
 8000efc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f00:	fb0e fe00 	mul.w	lr, lr, r0
 8000f04:	45a6      	cmp	lr, r4
 8000f06:	d908      	bls.n	8000f1a <__udivmoddi4+0x156>
 8000f08:	eb1c 0404 	adds.w	r4, ip, r4
 8000f0c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000f10:	d202      	bcs.n	8000f18 <__udivmoddi4+0x154>
 8000f12:	45a6      	cmp	lr, r4
 8000f14:	f200 80bb 	bhi.w	800108e <__udivmoddi4+0x2ca>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	eba4 040e 	sub.w	r4, r4, lr
 8000f1e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f22:	e79c      	b.n	8000e5e <__udivmoddi4+0x9a>
 8000f24:	f1c6 0720 	rsb	r7, r6, #32
 8000f28:	40b3      	lsls	r3, r6
 8000f2a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f2e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f32:	fa20 f407 	lsr.w	r4, r0, r7
 8000f36:	fa01 f306 	lsl.w	r3, r1, r6
 8000f3a:	431c      	orrs	r4, r3
 8000f3c:	40f9      	lsrs	r1, r7
 8000f3e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f42:	fa00 f306 	lsl.w	r3, r0, r6
 8000f46:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f4a:	0c20      	lsrs	r0, r4, #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fb09 1118 	mls	r1, r9, r8, r1
 8000f54:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f58:	fb08 f00e 	mul.w	r0, r8, lr
 8000f5c:	4288      	cmp	r0, r1
 8000f5e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f62:	d90b      	bls.n	8000f7c <__udivmoddi4+0x1b8>
 8000f64:	eb1c 0101 	adds.w	r1, ip, r1
 8000f68:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000f6c:	f080 8088 	bcs.w	8001080 <__udivmoddi4+0x2bc>
 8000f70:	4288      	cmp	r0, r1
 8000f72:	f240 8085 	bls.w	8001080 <__udivmoddi4+0x2bc>
 8000f76:	f1a8 0802 	sub.w	r8, r8, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1a09      	subs	r1, r1, r0
 8000f7e:	b2a4      	uxth	r4, r4
 8000f80:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f84:	fb09 1110 	mls	r1, r9, r0, r1
 8000f88:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f8c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f90:	458e      	cmp	lr, r1
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x1e2>
 8000f94:	eb1c 0101 	adds.w	r1, ip, r1
 8000f98:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000f9c:	d26c      	bcs.n	8001078 <__udivmoddi4+0x2b4>
 8000f9e:	458e      	cmp	lr, r1
 8000fa0:	d96a      	bls.n	8001078 <__udivmoddi4+0x2b4>
 8000fa2:	3802      	subs	r0, #2
 8000fa4:	4461      	add	r1, ip
 8000fa6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000faa:	fba0 9402 	umull	r9, r4, r0, r2
 8000fae:	eba1 010e 	sub.w	r1, r1, lr
 8000fb2:	42a1      	cmp	r1, r4
 8000fb4:	46c8      	mov	r8, r9
 8000fb6:	46a6      	mov	lr, r4
 8000fb8:	d356      	bcc.n	8001068 <__udivmoddi4+0x2a4>
 8000fba:	d053      	beq.n	8001064 <__udivmoddi4+0x2a0>
 8000fbc:	b15d      	cbz	r5, 8000fd6 <__udivmoddi4+0x212>
 8000fbe:	ebb3 0208 	subs.w	r2, r3, r8
 8000fc2:	eb61 010e 	sbc.w	r1, r1, lr
 8000fc6:	fa01 f707 	lsl.w	r7, r1, r7
 8000fca:	fa22 f306 	lsr.w	r3, r2, r6
 8000fce:	40f1      	lsrs	r1, r6
 8000fd0:	431f      	orrs	r7, r3
 8000fd2:	e9c5 7100 	strd	r7, r1, [r5]
 8000fd6:	2600      	movs	r6, #0
 8000fd8:	4631      	mov	r1, r6
 8000fda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fde:	f1c2 0320 	rsb	r3, r2, #32
 8000fe2:	40d8      	lsrs	r0, r3
 8000fe4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fe8:	fa21 f303 	lsr.w	r3, r1, r3
 8000fec:	4091      	lsls	r1, r2
 8000fee:	4301      	orrs	r1, r0
 8000ff0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ff4:	fa1f fe8c 	uxth.w	lr, ip
 8000ff8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ffc:	fb07 3610 	mls	r6, r7, r0, r3
 8001000:	0c0b      	lsrs	r3, r1, #16
 8001002:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001006:	fb00 f60e 	mul.w	r6, r0, lr
 800100a:	429e      	cmp	r6, r3
 800100c:	fa04 f402 	lsl.w	r4, r4, r2
 8001010:	d908      	bls.n	8001024 <__udivmoddi4+0x260>
 8001012:	eb1c 0303 	adds.w	r3, ip, r3
 8001016:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800101a:	d22f      	bcs.n	800107c <__udivmoddi4+0x2b8>
 800101c:	429e      	cmp	r6, r3
 800101e:	d92d      	bls.n	800107c <__udivmoddi4+0x2b8>
 8001020:	3802      	subs	r0, #2
 8001022:	4463      	add	r3, ip
 8001024:	1b9b      	subs	r3, r3, r6
 8001026:	b289      	uxth	r1, r1
 8001028:	fbb3 f6f7 	udiv	r6, r3, r7
 800102c:	fb07 3316 	mls	r3, r7, r6, r3
 8001030:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001034:	fb06 f30e 	mul.w	r3, r6, lr
 8001038:	428b      	cmp	r3, r1
 800103a:	d908      	bls.n	800104e <__udivmoddi4+0x28a>
 800103c:	eb1c 0101 	adds.w	r1, ip, r1
 8001040:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8001044:	d216      	bcs.n	8001074 <__udivmoddi4+0x2b0>
 8001046:	428b      	cmp	r3, r1
 8001048:	d914      	bls.n	8001074 <__udivmoddi4+0x2b0>
 800104a:	3e02      	subs	r6, #2
 800104c:	4461      	add	r1, ip
 800104e:	1ac9      	subs	r1, r1, r3
 8001050:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001054:	e738      	b.n	8000ec8 <__udivmoddi4+0x104>
 8001056:	462e      	mov	r6, r5
 8001058:	4628      	mov	r0, r5
 800105a:	e705      	b.n	8000e68 <__udivmoddi4+0xa4>
 800105c:	4606      	mov	r6, r0
 800105e:	e6e3      	b.n	8000e28 <__udivmoddi4+0x64>
 8001060:	4618      	mov	r0, r3
 8001062:	e6f8      	b.n	8000e56 <__udivmoddi4+0x92>
 8001064:	454b      	cmp	r3, r9
 8001066:	d2a9      	bcs.n	8000fbc <__udivmoddi4+0x1f8>
 8001068:	ebb9 0802 	subs.w	r8, r9, r2
 800106c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001070:	3801      	subs	r0, #1
 8001072:	e7a3      	b.n	8000fbc <__udivmoddi4+0x1f8>
 8001074:	4646      	mov	r6, r8
 8001076:	e7ea      	b.n	800104e <__udivmoddi4+0x28a>
 8001078:	4620      	mov	r0, r4
 800107a:	e794      	b.n	8000fa6 <__udivmoddi4+0x1e2>
 800107c:	4640      	mov	r0, r8
 800107e:	e7d1      	b.n	8001024 <__udivmoddi4+0x260>
 8001080:	46d0      	mov	r8, sl
 8001082:	e77b      	b.n	8000f7c <__udivmoddi4+0x1b8>
 8001084:	3b02      	subs	r3, #2
 8001086:	4461      	add	r1, ip
 8001088:	e732      	b.n	8000ef0 <__udivmoddi4+0x12c>
 800108a:	4630      	mov	r0, r6
 800108c:	e709      	b.n	8000ea2 <__udivmoddi4+0xde>
 800108e:	4464      	add	r4, ip
 8001090:	3802      	subs	r0, #2
 8001092:	e742      	b.n	8000f1a <__udivmoddi4+0x156>

08001094 <__aeabi_idiv0>:
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop

08001098 <ST7565_Select>:
uint8_t lcdRdy = 1;

//------------------------------------------------------------------------------

inline static void ST7565_Select()
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
#ifdef CS_PORT
	//-- если захотим переделать под HAL ------------------
	#ifdef ST7565_SPI_HAL
		//HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
		CS_GPIO_Port->BSRR = ( CS_Pin << 16 );
 800109c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80010a0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80010a4:	619a      	str	r2, [r3, #24]
	#ifdef ST7565_SPI_CMSIS
		CS_GPIO_Port->BSRR = ( CS_Pin << 16 );
	#endif
	//-----------------------------------------------------
#endif
}
 80010a6:	bf00      	nop
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr

080010b0 <ST7565_Unselect>:

//------------------------------------------------------------------------------

inline static void ST7565_Unselect()
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
#ifdef CS_PORT
	//-- если захотим переделать под HAL ------------------
	#ifdef ST7565_SPI_HAL
		//HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
		CS_GPIO_Port->BSRR = CS_Pin;
 80010b4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80010b8:	2210      	movs	r2, #16
 80010ba:	619a      	str	r2, [r3, #24]
	#ifdef ST7565_SPI_CMSIS
		CS_GPIO_Port->BSRR = CS_Pin;
	#endif
	//-----------------------------------------------------
#endif
}
 80010bc:	bf00      	nop
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
	...

080010c8 <ST7565_Reset>:
	* @brief	 ( описание ):  аппарвтный сброс дисплея
	* @param	( параметры ):	
	* @return  ( возвращает ):	
*******************************************************************************/
void ST7565_Reset()
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
	RES_GPIO_Port->BSRR = (RES_Pin << 16);//HAL_GPIO_WritePin(RES_GPIO_Port, RES_Pin, GPIO_PIN_RESET );
 80010cc:	4b07      	ldr	r3, [pc, #28]	; (80010ec <ST7565_Reset+0x24>)
 80010ce:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80010d2:	619a      	str	r2, [r3, #24]
	HAL_Delay(1);
 80010d4:	2001      	movs	r0, #1
 80010d6:	f005 ff05 	bl	8006ee4 <HAL_Delay>
	
	RES_GPIO_Port->BSRR = RES_Pin;//HAL_GPIO_WritePin(RES_GPIO_Port, RES_Pin, GPIO_PIN_SET );
 80010da:	4b04      	ldr	r3, [pc, #16]	; (80010ec <ST7565_Reset+0x24>)
 80010dc:	2204      	movs	r2, #4
 80010de:	619a      	str	r2, [r3, #24]
	HAL_Delay(1);
 80010e0:	2001      	movs	r0, #1
 80010e2:	f005 feff 	bl	8006ee4 <HAL_Delay>
}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	48000c00 	.word	0x48000c00

080010f0 <ST7565_w_dats>:
//--------------------------------------------------------------------------------
#ifdef SET_NEW_PROC
inline static void ST7565_w_dats(uint8_t *Data, uint16_t len)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	460b      	mov	r3, r1
 80010fa:	807b      	strh	r3, [r7, #2]
	DC_GPIO_Port->BSRR = DC_Pin;//HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 80010fc:	4b1d      	ldr	r3, [pc, #116]	; (8001174 <ST7565_w_dats+0x84>)
 80010fe:	2220      	movs	r2, #32
 8001100:	619a      	str	r2, [r3, #24]

	if (with_dma) {
 8001102:	4b1d      	ldr	r3, [pc, #116]	; (8001178 <ST7565_w_dats+0x88>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d018      	beq.n	800113c <ST7565_w_dats+0x4c>
		lcdRdy = 0;
 800110a:	4b1c      	ldr	r3, [pc, #112]	; (800117c <ST7565_w_dats+0x8c>)
 800110c:	2200      	movs	r2, #0
 800110e:	701a      	strb	r2, [r3, #0]
		if (HAL_SPI_Transmit_DMA(&ST7565_SPI_HAL, Data, len) != HAL_OK) devError |= devLCD;
 8001110:	887b      	ldrh	r3, [r7, #2]
 8001112:	461a      	mov	r2, r3
 8001114:	6879      	ldr	r1, [r7, #4]
 8001116:	481a      	ldr	r0, [pc, #104]	; (8001180 <ST7565_w_dats+0x90>)
 8001118:	f00a fda0 	bl	800bc5c <HAL_SPI_Transmit_DMA>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d006      	beq.n	8001130 <ST7565_w_dats+0x40>
 8001122:	4b18      	ldr	r3, [pc, #96]	; (8001184 <ST7565_w_dats+0x94>)
 8001124:	881b      	ldrh	r3, [r3, #0]
 8001126:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800112a:	b29a      	uxth	r2, r3
 800112c:	4b15      	ldr	r3, [pc, #84]	; (8001184 <ST7565_w_dats+0x94>)
 800112e:	801a      	strh	r2, [r3, #0]
		while (!lcdRdy) {};
 8001130:	bf00      	nop
 8001132:	4b12      	ldr	r3, [pc, #72]	; (800117c <ST7565_w_dats+0x8c>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d0fb      	beq.n	8001132 <ST7565_w_dats+0x42>
	} else {
		if (HAL_SPI_Transmit(&ST7565_SPI_HAL, Data, len, HAL_MAX_DELAY) != HAL_OK) devError |= devLCD;
		while (HAL_SPI_GetState(&ST7565_SPI_HAL) != HAL_SPI_STATE_READY) {};
	}
}
 800113a:	e017      	b.n	800116c <ST7565_w_dats+0x7c>
		if (HAL_SPI_Transmit(&ST7565_SPI_HAL, Data, len, HAL_MAX_DELAY) != HAL_OK) devError |= devLCD;
 800113c:	887a      	ldrh	r2, [r7, #2]
 800113e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001142:	6879      	ldr	r1, [r7, #4]
 8001144:	480e      	ldr	r0, [pc, #56]	; (8001180 <ST7565_w_dats+0x90>)
 8001146:	f00a f8d8 	bl	800b2fa <HAL_SPI_Transmit>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d006      	beq.n	800115e <ST7565_w_dats+0x6e>
 8001150:	4b0c      	ldr	r3, [pc, #48]	; (8001184 <ST7565_w_dats+0x94>)
 8001152:	881b      	ldrh	r3, [r3, #0]
 8001154:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001158:	b29a      	uxth	r2, r3
 800115a:	4b0a      	ldr	r3, [pc, #40]	; (8001184 <ST7565_w_dats+0x94>)
 800115c:	801a      	strh	r2, [r3, #0]
		while (HAL_SPI_GetState(&ST7565_SPI_HAL) != HAL_SPI_STATE_READY) {};
 800115e:	bf00      	nop
 8001160:	4807      	ldr	r0, [pc, #28]	; (8001180 <ST7565_w_dats+0x90>)
 8001162:	f00b f919 	bl	800c398 <HAL_SPI_GetState>
 8001166:	4603      	mov	r3, r0
 8001168:	2b01      	cmp	r3, #1
 800116a:	d1f9      	bne.n	8001160 <ST7565_w_dats+0x70>
}
 800116c:	bf00      	nop
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	48000400 	.word	0x48000400
 8001178:	2000083c 	.word	0x2000083c
 800117c:	20000000 	.word	0x20000000
 8001180:	20000948 	.word	0x20000948
 8001184:	2000194c 	.word	0x2000194c

08001188 <ST7565_w_cmds>:
//
inline static void ST7565_w_cmds(uint8_t *Command, uint16_t len)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	460b      	mov	r3, r1
 8001192:	807b      	strh	r3, [r7, #2]
	DC_GPIO_Port->BSRR = (DC_Pin << 16);//HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
 8001194:	4b1e      	ldr	r3, [pc, #120]	; (8001210 <ST7565_w_cmds+0x88>)
 8001196:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800119a:	619a      	str	r2, [r3, #24]

	if (with_dma) {
 800119c:	4b1d      	ldr	r3, [pc, #116]	; (8001214 <ST7565_w_cmds+0x8c>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d018      	beq.n	80011d6 <ST7565_w_cmds+0x4e>
		lcdRdy = 0;
 80011a4:	4b1c      	ldr	r3, [pc, #112]	; (8001218 <ST7565_w_cmds+0x90>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	701a      	strb	r2, [r3, #0]
		if (HAL_SPI_Transmit_DMA(&ST7565_SPI_HAL, Command, len) != HAL_OK) devError |= devLCD;
 80011aa:	887b      	ldrh	r3, [r7, #2]
 80011ac:	461a      	mov	r2, r3
 80011ae:	6879      	ldr	r1, [r7, #4]
 80011b0:	481a      	ldr	r0, [pc, #104]	; (800121c <ST7565_w_cmds+0x94>)
 80011b2:	f00a fd53 	bl	800bc5c <HAL_SPI_Transmit_DMA>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d006      	beq.n	80011ca <ST7565_w_cmds+0x42>
 80011bc:	4b18      	ldr	r3, [pc, #96]	; (8001220 <ST7565_w_cmds+0x98>)
 80011be:	881b      	ldrh	r3, [r3, #0]
 80011c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011c4:	b29a      	uxth	r2, r3
 80011c6:	4b16      	ldr	r3, [pc, #88]	; (8001220 <ST7565_w_cmds+0x98>)
 80011c8:	801a      	strh	r2, [r3, #0]
		while (!lcdRdy) {};
 80011ca:	bf00      	nop
 80011cc:	4b12      	ldr	r3, [pc, #72]	; (8001218 <ST7565_w_cmds+0x90>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d0fb      	beq.n	80011cc <ST7565_w_cmds+0x44>
	} else {
		if (HAL_SPI_Transmit(&ST7565_SPI_HAL, Command, len, HAL_MAX_DELAY) != HAL_OK) devError |= devLCD;
		while (HAL_SPI_GetState(&ST7565_SPI_HAL) != HAL_SPI_STATE_READY) {};
	}
}
 80011d4:	e017      	b.n	8001206 <ST7565_w_cmds+0x7e>
		if (HAL_SPI_Transmit(&ST7565_SPI_HAL, Command, len, HAL_MAX_DELAY) != HAL_OK) devError |= devLCD;
 80011d6:	887a      	ldrh	r2, [r7, #2]
 80011d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011dc:	6879      	ldr	r1, [r7, #4]
 80011de:	480f      	ldr	r0, [pc, #60]	; (800121c <ST7565_w_cmds+0x94>)
 80011e0:	f00a f88b 	bl	800b2fa <HAL_SPI_Transmit>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d006      	beq.n	80011f8 <ST7565_w_cmds+0x70>
 80011ea:	4b0d      	ldr	r3, [pc, #52]	; (8001220 <ST7565_w_cmds+0x98>)
 80011ec:	881b      	ldrh	r3, [r3, #0]
 80011ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011f2:	b29a      	uxth	r2, r3
 80011f4:	4b0a      	ldr	r3, [pc, #40]	; (8001220 <ST7565_w_cmds+0x98>)
 80011f6:	801a      	strh	r2, [r3, #0]
		while (HAL_SPI_GetState(&ST7565_SPI_HAL) != HAL_SPI_STATE_READY) {};
 80011f8:	bf00      	nop
 80011fa:	4808      	ldr	r0, [pc, #32]	; (800121c <ST7565_w_cmds+0x94>)
 80011fc:	f00b f8cc 	bl	800c398 <HAL_SPI_GetState>
 8001200:	4603      	mov	r3, r0
 8001202:	2b01      	cmp	r3, #1
 8001204:	d1f9      	bne.n	80011fa <ST7565_w_cmds+0x72>
}
 8001206:	bf00      	nop
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	48000400 	.word	0x48000400
 8001214:	2000083c 	.word	0x2000083c
 8001218:	20000000 	.word	0x20000000
 800121c:	20000948 	.word	0x20000948
 8001220:	2000194c 	.word	0x2000194c

08001224 <ST7565_SetX>:
inline static void ST7565_SetX(uint8_t x)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	71fb      	strb	r3, [r7, #7]
	uint8_t bytes[] = { ((x & 0xf0) >> 4) | 0x10, x & 0x0f };
 800122e:	79fb      	ldrb	r3, [r7, #7]
 8001230:	091b      	lsrs	r3, r3, #4
 8001232:	b2db      	uxtb	r3, r3
 8001234:	f043 0310 	orr.w	r3, r3, #16
 8001238:	b2db      	uxtb	r3, r3
 800123a:	733b      	strb	r3, [r7, #12]
 800123c:	79fb      	ldrb	r3, [r7, #7]
 800123e:	f003 030f 	and.w	r3, r3, #15
 8001242:	b2db      	uxtb	r3, r3
 8001244:	737b      	strb	r3, [r7, #13]
	ST7565_w_cmds(bytes, 2);
 8001246:	f107 030c 	add.w	r3, r7, #12
 800124a:	2102      	movs	r1, #2
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff ff9b 	bl	8001188 <ST7565_w_cmds>
}
 8001252:	bf00      	nop
 8001254:	3710      	adds	r7, #16
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <ST7565_SetY>:
//
inline static void ST7565_SetY(uint8_t y)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b084      	sub	sp, #16
 800125e:	af00      	add	r7, sp, #0
 8001260:	4603      	mov	r3, r0
 8001262:	71fb      	strb	r3, [r7, #7]
	uint8_t byte = (y & 0x07) | 0xB0;
 8001264:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001268:	f003 0307 	and.w	r3, r3, #7
 800126c:	b25b      	sxtb	r3, r3
 800126e:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8001272:	b25b      	sxtb	r3, r3
 8001274:	b2db      	uxtb	r3, r3
 8001276:	73fb      	strb	r3, [r7, #15]
	ST7565_w_cmds(&byte, 1);
 8001278:	f107 030f 	add.w	r3, r7, #15
 800127c:	2101      	movs	r1, #1
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff ff82 	bl	8001188 <ST7565_w_cmds>
}
 8001284:	bf00      	nop
 8001286:	3710      	adds	r7, #16
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}

0800128c <ST7565_Display_fill>:
								( данные отправляются сразу на дисплей и записываются в буфер кадра )
								Функцию ST7565_Update() вызывать не нужно
	* @return  ( возвращает ):	
*******************************************************************************/
void ST7565_Display_fill(uint8_t fill)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
 8001292:	4603      	mov	r3, r0
 8001294:	71fb      	strb	r3, [r7, #7]
uint8_t page;//, column;
	
	memset(ST7565_buffer, fill, (SCREEN_WIDTH * SCREEN_HEIGHT / 8));	// отчистка памяти заполняем массив значением 0x00
 8001296:	79fb      	ldrb	r3, [r7, #7]
 8001298:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800129c:	4619      	mov	r1, r3
 800129e:	4814      	ldr	r0, [pc, #80]	; (80012f0 <ST7565_Display_fill+0x64>)
 80012a0:	f00d fe3a 	bl	800ef18 <memset>
	
	ST7565_Select();
 80012a4:	f7ff fef8 	bl	8001098 <ST7565_Select>
#ifdef SET_NEW_PROC
	uint8_t dta[] = {0, 0x10, 0};
 80012a8:	4a12      	ldr	r2, [pc, #72]	; (80012f4 <ST7565_Display_fill+0x68>)
 80012aa:	f107 030c 	add.w	r3, r7, #12
 80012ae:	6812      	ldr	r2, [r2, #0]
 80012b0:	4611      	mov	r1, r2
 80012b2:	8019      	strh	r1, [r3, #0]
 80012b4:	3302      	adds	r3, #2
 80012b6:	0c12      	lsrs	r2, r2, #16
 80012b8:	701a      	strb	r2, [r3, #0]
#endif
	for (page = 0xB7; page >= 0xB0; page-- ) {
 80012ba:	23b7      	movs	r3, #183	; 0xb7
 80012bc:	73fb      	strb	r3, [r7, #15]
 80012be:	e00e      	b.n	80012de <ST7565_Display_fill+0x52>
		ST7565_w_cmd(page);  //set page address
		ST7565_w_cmd(0x10);  //set Column address MSB   
		ST7565_w_cmd(0x00);  //set column address LSB
		for (column = 0; column < 131; column++) ST7565_w_dat(fill);
#else
		dta[0] = page;
 80012c0:	7bfb      	ldrb	r3, [r7, #15]
 80012c2:	733b      	strb	r3, [r7, #12]
		ST7565_w_cmds(dta, sizeof(dta));
 80012c4:	f107 030c 	add.w	r3, r7, #12
 80012c8:	2103      	movs	r1, #3
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff ff5c 	bl	8001188 <ST7565_w_cmds>
		ST7565_w_dats(ST7565_buffer, 131);
 80012d0:	2183      	movs	r1, #131	; 0x83
 80012d2:	4807      	ldr	r0, [pc, #28]	; (80012f0 <ST7565_Display_fill+0x64>)
 80012d4:	f7ff ff0c 	bl	80010f0 <ST7565_w_dats>
	for (page = 0xB7; page >= 0xB0; page-- ) {
 80012d8:	7bfb      	ldrb	r3, [r7, #15]
 80012da:	3b01      	subs	r3, #1
 80012dc:	73fb      	strb	r3, [r7, #15]
 80012de:	7bfb      	ldrb	r3, [r7, #15]
 80012e0:	2baf      	cmp	r3, #175	; 0xaf
 80012e2:	d8ed      	bhi.n	80012c0 <ST7565_Display_fill+0x34>
#endif
    }
		
	ST7565_Unselect();
 80012e4:	f7ff fee4 	bl	80010b0 <ST7565_Unselect>
}
 80012e8:	bf00      	nop
 80012ea:	3710      	adds	r7, #16
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	2000043c 	.word	0x2000043c
 80012f4:	08013498 	.word	0x08013498

080012f8 <ST7565_Init>:
	* @brief	 ( описание ):  инициализация дисплея ( при другой инициализации можно поменять параметры внутри функции )
	* @param	( параметры ):	
	* @return  ( возвращает ):	
*******************************************************************************/
void ST7565_Init()
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
	ST7565_Select();
 80012fe:	f7ff fecb 	bl	8001098 <ST7565_Select>
	ST7565_w_cmd(CMD_DISPLAY_ON);    		//Display on
	// Инвертирование экрана CMD_SET_DISP_NORMAL - OFF    CMD_SET_DISP_REVERSE - ON
	ST7565_w_cmd(CMD_SET_DISP_NORMAL);
	//HAL_Delay(1);//1
#else
	uint8_t dta[] = {
 8001302:	4a09      	ldr	r2, [pc, #36]	; (8001328 <ST7565_Init+0x30>)
 8001304:	1d3b      	adds	r3, r7, #4
 8001306:	ca07      	ldmia	r2, {r0, r1, r2}
 8001308:	c303      	stmia	r3!, {r0, r1}
 800130a:	801a      	strh	r2, [r3, #0]
	};
	#if defined (SCREEN_ORIENTATION_180)
		dta[1] = CMD_SET_ADC_REVERSE;    	//ADC selection(SEG0->SEG128)  CMD_SET_ADC_NORMAL горизонтально «нормальная» (не перевернутая)
		dta[2] = CMD_SET_COM_NORMAL;    		//SHL selection(COM0->COM64)   CMD_SET_COM_REVERSE вертикально «перевернутая» (дополняет команду выше)
	#endif
	ST7565_w_cmds(dta, sizeof(dta));
 800130c:	1d3b      	adds	r3, r7, #4
 800130e:	210a      	movs	r1, #10
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff ff39 	bl	8001188 <ST7565_w_cmds>
#endif
	
	ST7565_Display_fill(0);
 8001316:	2000      	movs	r0, #0
 8001318:	f7ff ffb8 	bl	800128c <ST7565_Display_fill>
	
	ST7565_Unselect();
 800131c:	f7ff fec8 	bl	80010b0 <ST7565_Unselect>
   
}
 8001320:	bf00      	nop
 8001322:	3710      	adds	r7, #16
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	0801349c 	.word	0x0801349c

0800132c <ST7565_CMD_DISPLAY>:
//--------------------------------------------------------------------------------
void ST7565_CMD_DISPLAY(uint8_t byte)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	4603      	mov	r3, r0
 8001334:	71fb      	strb	r3, [r7, #7]
#ifdef SET_NEW_PROC
	ST7565_w_cmds(&byte, 1);
 8001336:	1dfb      	adds	r3, r7, #7
 8001338:	2101      	movs	r1, #1
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff ff24 	bl	8001188 <ST7565_w_cmds>

	if (byte == CMD_DISPLAY_OFF) OFF_DISPLAY();
 8001340:	79fb      	ldrb	r3, [r7, #7]
 8001342:	2bae      	cmp	r3, #174	; 0xae
 8001344:	d103      	bne.n	800134e <ST7565_CMD_DISPLAY+0x22>
 8001346:	4b06      	ldr	r3, [pc, #24]	; (8001360 <ST7565_CMD_DISPLAY+0x34>)
 8001348:	2201      	movs	r2, #1
 800134a:	619a      	str	r2, [r3, #24]
							else ON_DISPLAY();
#else
	ST7565_w_cmd(byte);
#endif
}
 800134c:	e003      	b.n	8001356 <ST7565_CMD_DISPLAY+0x2a>
							else ON_DISPLAY();
 800134e:	4b04      	ldr	r3, [pc, #16]	; (8001360 <ST7565_CMD_DISPLAY+0x34>)
 8001350:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001354:	619a      	str	r2, [r3, #24]
}
 8001356:	bf00      	nop
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	48000800 	.word	0x48000800

08001364 <ST7565_Draw_pixel>:
	* @param	( параметры ):	координата X(0 - 127) и координата Y(0 - 63)  color 1 or 0
	* @return  ( возвращает ):	
*******************************************************************************/
// X(0 - 127)  Y(0 - 63)
void ST7565_Draw_pixel(int16_t x, int16_t y, uint8_t color)
{
 8001364:	b480      	push	{r7}
 8001366:	b085      	sub	sp, #20
 8001368:	af00      	add	r7, sp, #0
 800136a:	4603      	mov	r3, r0
 800136c:	80fb      	strh	r3, [r7, #6]
 800136e:	460b      	mov	r3, r1
 8001370:	80bb      	strh	r3, [r7, #4]
 8001372:	4613      	mov	r3, r2
 8001374:	70fb      	strb	r3, [r7, #3]
    if (x >= SCREEN_WIDTH || x < 0 || y >= SCREEN_HEIGHT || y < 0) return;
 8001376:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800137a:	2b7f      	cmp	r3, #127	; 0x7f
 800137c:	dc4c      	bgt.n	8001418 <ST7565_Draw_pixel+0xb4>
 800137e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001382:	2b00      	cmp	r3, #0
 8001384:	db48      	blt.n	8001418 <ST7565_Draw_pixel+0xb4>
 8001386:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800138a:	2b3f      	cmp	r3, #63	; 0x3f
 800138c:	dc44      	bgt.n	8001418 <ST7565_Draw_pixel+0xb4>
 800138e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001392:	2b00      	cmp	r3, #0
 8001394:	db40      	blt.n	8001418 <ST7565_Draw_pixel+0xb4>

    uint16_t array_pos = x + ((y >> 3) * SCREEN_WIDTH );
 8001396:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800139a:	10db      	asrs	r3, r3, #3
 800139c:	b21b      	sxth	r3, r3
 800139e:	b29b      	uxth	r3, r3
 80013a0:	01db      	lsls	r3, r3, #7
 80013a2:	b29a      	uxth	r2, r3
 80013a4:	88fb      	ldrh	r3, [r7, #6]
 80013a6:	4413      	add	r3, r2
 80013a8:	81fb      	strh	r3, [r7, #14]

    if (color) {
 80013aa:	78fb      	ldrb	r3, [r7, #3]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d018      	beq.n	80013e2 <ST7565_Draw_pixel+0x7e>
        ST7565_buffer[array_pos] |= 1 << (y % 8);
 80013b0:	89fb      	ldrh	r3, [r7, #14]
 80013b2:	4a1c      	ldr	r2, [pc, #112]	; (8001424 <ST7565_Draw_pixel+0xc0>)
 80013b4:	5cd3      	ldrb	r3, [r2, r3]
 80013b6:	b25a      	sxtb	r2, r3
 80013b8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80013bc:	4259      	negs	r1, r3
 80013be:	f003 0307 	and.w	r3, r3, #7
 80013c2:	f001 0107 	and.w	r1, r1, #7
 80013c6:	bf58      	it	pl
 80013c8:	424b      	negpl	r3, r1
 80013ca:	b21b      	sxth	r3, r3
 80013cc:	4619      	mov	r1, r3
 80013ce:	2301      	movs	r3, #1
 80013d0:	408b      	lsls	r3, r1
 80013d2:	b25b      	sxtb	r3, r3
 80013d4:	4313      	orrs	r3, r2
 80013d6:	b25a      	sxtb	r2, r3
 80013d8:	89fb      	ldrh	r3, [r7, #14]
 80013da:	b2d1      	uxtb	r1, r2
 80013dc:	4a11      	ldr	r2, [pc, #68]	; (8001424 <ST7565_Draw_pixel+0xc0>)
 80013de:	54d1      	strb	r1, [r2, r3]
 80013e0:	e01b      	b.n	800141a <ST7565_Draw_pixel+0xb6>
    } else {
        ST7565_buffer[array_pos] &= 0xFF ^ 1 << (y % 8);
 80013e2:	89fb      	ldrh	r3, [r7, #14]
 80013e4:	4a0f      	ldr	r2, [pc, #60]	; (8001424 <ST7565_Draw_pixel+0xc0>)
 80013e6:	5cd3      	ldrb	r3, [r2, r3]
 80013e8:	b25a      	sxtb	r2, r3
 80013ea:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80013ee:	4259      	negs	r1, r3
 80013f0:	f003 0307 	and.w	r3, r3, #7
 80013f4:	f001 0107 	and.w	r1, r1, #7
 80013f8:	bf58      	it	pl
 80013fa:	424b      	negpl	r3, r1
 80013fc:	b21b      	sxth	r3, r3
 80013fe:	4619      	mov	r1, r3
 8001400:	2301      	movs	r3, #1
 8001402:	408b      	lsls	r3, r1
 8001404:	b25b      	sxtb	r3, r3
 8001406:	43db      	mvns	r3, r3
 8001408:	b25b      	sxtb	r3, r3
 800140a:	4013      	ands	r3, r2
 800140c:	b25a      	sxtb	r2, r3
 800140e:	89fb      	ldrh	r3, [r7, #14]
 8001410:	b2d1      	uxtb	r1, r2
 8001412:	4a04      	ldr	r2, [pc, #16]	; (8001424 <ST7565_Draw_pixel+0xc0>)
 8001414:	54d1      	strb	r1, [r2, r3]
 8001416:	e000      	b.n	800141a <ST7565_Draw_pixel+0xb6>
    if (x >= SCREEN_WIDTH || x < 0 || y >= SCREEN_HEIGHT || y < 0) return;
 8001418:	bf00      	nop
    }
}
 800141a:	3714      	adds	r7, #20
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr
 8001424:	2000043c 	.word	0x2000043c

08001428 <ST7565_Update>:
	* @brief	 ( описание ):  вывод буффера кадра на дисплей
	* @param	( параметры ):	
	* @return  ( возвращает ):	
*******************************************************************************/
void ST7565_Update()
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
uint8_t x, y;
		
	ST7565_Select();
 800142e:	f7ff fe33 	bl	8001098 <ST7565_Select>

  	for (y = 0; y < 8; y++) {
 8001432:	2300      	movs	r3, #0
 8001434:	71bb      	strb	r3, [r7, #6]
 8001436:	e01d      	b.n	8001474 <ST7565_Update+0x4c>
		ST7565_SetX(0);	
 8001438:	2000      	movs	r0, #0
 800143a:	f7ff fef3 	bl	8001224 <ST7565_SetX>
		ST7565_SetY(y);
 800143e:	79bb      	ldrb	r3, [r7, #6]
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff ff0a 	bl	800125a <ST7565_SetY>
		for (x = 0; x < 128; x++) {
 8001446:	2300      	movs	r3, #0
 8001448:	71fb      	strb	r3, [r7, #7]
 800144a:	e00c      	b.n	8001466 <ST7565_Update+0x3e>
			ST7565_w_dats(&ST7565_buffer[x + 128 * y], 1);
 800144c:	79fa      	ldrb	r2, [r7, #7]
 800144e:	79bb      	ldrb	r3, [r7, #6]
 8001450:	01db      	lsls	r3, r3, #7
 8001452:	4413      	add	r3, r2
 8001454:	4a0d      	ldr	r2, [pc, #52]	; (800148c <ST7565_Update+0x64>)
 8001456:	4413      	add	r3, r2
 8001458:	2101      	movs	r1, #1
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff fe48 	bl	80010f0 <ST7565_w_dats>
		for (x = 0; x < 128; x++) {
 8001460:	79fb      	ldrb	r3, [r7, #7]
 8001462:	3301      	adds	r3, #1
 8001464:	71fb      	strb	r3, [r7, #7]
 8001466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146a:	2b00      	cmp	r3, #0
 800146c:	daee      	bge.n	800144c <ST7565_Update+0x24>
  	for (y = 0; y < 8; y++) {
 800146e:	79bb      	ldrb	r3, [r7, #6]
 8001470:	3301      	adds	r3, #1
 8001472:	71bb      	strb	r3, [r7, #6]
 8001474:	79bb      	ldrb	r3, [r7, #6]
 8001476:	2b07      	cmp	r3, #7
 8001478:	d9de      	bls.n	8001438 <ST7565_Update+0x10>
		}
	}
	
	ST7565_Unselect();
 800147a:	f7ff fe19 	bl	80010b0 <ST7565_Unselect>
	HAL_Delay(50);//(100);
 800147e:	2032      	movs	r0, #50	; 0x32
 8001480:	f005 fd30 	bl	8006ee4 <HAL_Delay>
}
 8001484:	bf00      	nop
 8001486:	3708      	adds	r7, #8
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	2000043c 	.word	0x2000043c

08001490 <ST7565_DrawChar>:
	* @brief	 ( описание ):  функция записывает 1 символ в буфер кадра
	* @param	( параметры ):	координаты X(0 - 127)  Y(0 - 63), символ, шрифт, множитель, цвет 1 или 0
	* @return  ( возвращает ):	
*******************************************************************************/
void ST7565_DrawChar(int16_t x, int16_t y, unsigned char ch, FontDef_t* Font, uint8_t multiplier, uint8_t color)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b088      	sub	sp, #32
 8001494:	af00      	add	r7, sp, #0
 8001496:	607b      	str	r3, [r7, #4]
 8001498:	4603      	mov	r3, r0
 800149a:	81fb      	strh	r3, [r7, #14]
 800149c:	460b      	mov	r3, r1
 800149e:	81bb      	strh	r3, [r7, #12]
 80014a0:	4613      	mov	r3, r2
 80014a2:	72fb      	strb	r3, [r7, #11]
uint16_t i, j;
uint16_t b;
int16_t X = x, Y = y;
 80014a4:	89fb      	ldrh	r3, [r7, #14]
 80014a6:	833b      	strh	r3, [r7, #24]
 80014a8:	89bb      	ldrh	r3, [r7, #12]
 80014aa:	82fb      	strh	r3, [r7, #22]
int16_t xx, yy;
	
	if (multiplier < 1) multiplier = 1;
 80014ac:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d102      	bne.n	80014ba <ST7565_DrawChar+0x2a>
 80014b4:	2301      	movs	r3, #1
 80014b6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	
	// Check available space in LCD
	if (SCREEN_WIDTH >= ( x + Font->FontWidth) || SCREEN_HEIGHT >= ( y + Font->FontHeight)) {
 80014ba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014be:	687a      	ldr	r2, [r7, #4]
 80014c0:	7812      	ldrb	r2, [r2, #0]
 80014c2:	4413      	add	r3, r2
 80014c4:	2b80      	cmp	r3, #128	; 0x80
 80014c6:	dd07      	ble.n	80014d8 <ST7565_DrawChar+0x48>
 80014c8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80014cc:	687a      	ldr	r2, [r7, #4]
 80014ce:	7852      	ldrb	r2, [r2, #1]
 80014d0:	4413      	add	r3, r2
 80014d2:	2b40      	cmp	r3, #64	; 0x40
 80014d4:	f300 8154 	bgt.w	8001780 <ST7565_DrawChar+0x2f0>
		// Go through font
		for (i = 0; i < Font->FontHeight; i++) {
 80014d8:	2300      	movs	r3, #0
 80014da:	83fb      	strh	r3, [r7, #30]
 80014dc:	e149      	b.n	8001772 <ST7565_DrawChar+0x2e2>
			if (ch < 127) {
 80014de:	7afb      	ldrb	r3, [r7, #11]
 80014e0:	2b7e      	cmp	r3, #126	; 0x7e
 80014e2:	d80f      	bhi.n	8001504 <ST7565_DrawChar+0x74>
				b = Font->data[(ch - 32) * Font->FontHeight + i];
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	f8d3 2002 	ldr.w	r2, [r3, #2]
 80014ea:	7afb      	ldrb	r3, [r7, #11]
 80014ec:	3b20      	subs	r3, #32
 80014ee:	6879      	ldr	r1, [r7, #4]
 80014f0:	7849      	ldrb	r1, [r1, #1]
 80014f2:	fb03 f101 	mul.w	r1, r3, r1
 80014f6:	8bfb      	ldrh	r3, [r7, #30]
 80014f8:	440b      	add	r3, r1
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	4413      	add	r3, r2
 80014fe:	881b      	ldrh	r3, [r3, #0]
 8001500:	837b      	strh	r3, [r7, #26]
 8001502:	e0af      	b.n	8001664 <ST7565_DrawChar+0x1d4>
			} else if (ch > 191) {
 8001504:	7afb      	ldrb	r3, [r7, #11]
 8001506:	2bbf      	cmp	r3, #191	; 0xbf
 8001508:	d90f      	bls.n	800152a <ST7565_DrawChar+0x9a>
				// +96 это так как латинские символы и знаки в шрифтах занимают 96 позиций
				// и если в шрифте который содержит сперва латиницу и спец символы и потом 
				// только кирилицу то нужно добавлять 95 если шрифт 
				// содержит только кирилицу то +96 не нужно
				b = Font->data[((ch - 192) + 96) * Font->FontHeight + i];
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	f8d3 2002 	ldr.w	r2, [r3, #2]
 8001510:	7afb      	ldrb	r3, [r7, #11]
 8001512:	3b60      	subs	r3, #96	; 0x60
 8001514:	6879      	ldr	r1, [r7, #4]
 8001516:	7849      	ldrb	r1, [r1, #1]
 8001518:	fb03 f101 	mul.w	r1, r3, r1
 800151c:	8bfb      	ldrh	r3, [r7, #30]
 800151e:	440b      	add	r3, r1
 8001520:	005b      	lsls	r3, r3, #1
 8001522:	4413      	add	r3, r2
 8001524:	881b      	ldrh	r3, [r3, #0]
 8001526:	837b      	strh	r3, [r7, #26]
 8001528:	e09c      	b.n	8001664 <ST7565_DrawChar+0x1d4>
			} else if (ch == 168) {	// 168 символ по ASCII - Ё
 800152a:	7afb      	ldrb	r3, [r7, #11]
 800152c:	2ba8      	cmp	r3, #168	; 0xa8
 800152e:	d111      	bne.n	8001554 <ST7565_DrawChar+0xc4>
				// 160 эллемент ( символ Ё ) 
				b = Font->data[160 * Font->FontHeight + i];
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	f8d3 2002 	ldr.w	r2, [r3, #2]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	785b      	ldrb	r3, [r3, #1]
 800153a:	4619      	mov	r1, r3
 800153c:	460b      	mov	r3, r1
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	440b      	add	r3, r1
 8001542:	015b      	lsls	r3, r3, #5
 8001544:	4619      	mov	r1, r3
 8001546:	8bfb      	ldrh	r3, [r7, #30]
 8001548:	440b      	add	r3, r1
 800154a:	005b      	lsls	r3, r3, #1
 800154c:	4413      	add	r3, r2
 800154e:	881b      	ldrh	r3, [r3, #0]
 8001550:	837b      	strh	r3, [r7, #26]
 8001552:	e087      	b.n	8001664 <ST7565_DrawChar+0x1d4>
			} else if (ch == 184) {	// 184 символ по ASCII - ё
 8001554:	7afb      	ldrb	r3, [r7, #11]
 8001556:	2bb8      	cmp	r3, #184	; 0xb8
 8001558:	d111      	bne.n	800157e <ST7565_DrawChar+0xee>
				// 161 эллемент  ( символ ё ) 
				b = Font->data[161 * Font->FontHeight + i];
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	f8d3 1002 	ldr.w	r1, [r3, #2]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	785b      	ldrb	r3, [r3, #1]
 8001564:	461a      	mov	r2, r3
 8001566:	4613      	mov	r3, r2
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	4413      	add	r3, r2
 800156c:	015b      	lsls	r3, r3, #5
 800156e:	441a      	add	r2, r3
 8001570:	8bfb      	ldrh	r3, [r7, #30]
 8001572:	4413      	add	r3, r2
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	440b      	add	r3, r1
 8001578:	881b      	ldrh	r3, [r3, #0]
 800157a:	837b      	strh	r3, [r7, #26]
 800157c:	e072      	b.n	8001664 <ST7565_DrawChar+0x1d4>
			} else if (ch == 170) {	// 168 символ по ASCII - Є
 800157e:	7afb      	ldrb	r3, [r7, #11]
 8001580:	2baa      	cmp	r3, #170	; 0xaa
 8001582:	d10f      	bne.n	80015a4 <ST7565_DrawChar+0x114>
				// 162 эллемент ( символ Є )
				b = Font->data[162 * Font->FontHeight + i];
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	f8d3 2002 	ldr.w	r2, [r3, #2]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	785b      	ldrb	r3, [r3, #1]
 800158e:	4619      	mov	r1, r3
 8001590:	23a2      	movs	r3, #162	; 0xa2
 8001592:	fb03 f101 	mul.w	r1, r3, r1
 8001596:	8bfb      	ldrh	r3, [r7, #30]
 8001598:	440b      	add	r3, r1
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	4413      	add	r3, r2
 800159e:	881b      	ldrh	r3, [r3, #0]
 80015a0:	837b      	strh	r3, [r7, #26]
 80015a2:	e05f      	b.n	8001664 <ST7565_DrawChar+0x1d4>
			} else if (ch == 175) {	// 184 символ по ASCII - Ї
 80015a4:	7afb      	ldrb	r3, [r7, #11]
 80015a6:	2baf      	cmp	r3, #175	; 0xaf
 80015a8:	d10f      	bne.n	80015ca <ST7565_DrawChar+0x13a>
				// 163 эллемент  ( символ Ї )
				b = Font->data[163 * Font->FontHeight + i];
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	f8d3 2002 	ldr.w	r2, [r3, #2]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	785b      	ldrb	r3, [r3, #1]
 80015b4:	4619      	mov	r1, r3
 80015b6:	23a3      	movs	r3, #163	; 0xa3
 80015b8:	fb03 f101 	mul.w	r1, r3, r1
 80015bc:	8bfb      	ldrh	r3, [r7, #30]
 80015be:	440b      	add	r3, r1
 80015c0:	005b      	lsls	r3, r3, #1
 80015c2:	4413      	add	r3, r2
 80015c4:	881b      	ldrh	r3, [r3, #0]
 80015c6:	837b      	strh	r3, [r7, #26]
 80015c8:	e04c      	b.n	8001664 <ST7565_DrawChar+0x1d4>
			} else if (ch == 178) {	// 168 символ по ASCII - І
 80015ca:	7afb      	ldrb	r3, [r7, #11]
 80015cc:	2bb2      	cmp	r3, #178	; 0xb2
 80015ce:	d10f      	bne.n	80015f0 <ST7565_DrawChar+0x160>
				// 164 эллемент ( символ І )
				b = Font->data[164 * Font->FontHeight + i];
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	f8d3 2002 	ldr.w	r2, [r3, #2]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	785b      	ldrb	r3, [r3, #1]
 80015da:	4619      	mov	r1, r3
 80015dc:	23a4      	movs	r3, #164	; 0xa4
 80015de:	fb03 f101 	mul.w	r1, r3, r1
 80015e2:	8bfb      	ldrh	r3, [r7, #30]
 80015e4:	440b      	add	r3, r1
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	4413      	add	r3, r2
 80015ea:	881b      	ldrh	r3, [r3, #0]
 80015ec:	837b      	strh	r3, [r7, #26]
 80015ee:	e039      	b.n	8001664 <ST7565_DrawChar+0x1d4>
			}
			else if (ch == 179) {	// 184 символ по ASCII - і
 80015f0:	7afb      	ldrb	r3, [r7, #11]
 80015f2:	2bb3      	cmp	r3, #179	; 0xb3
 80015f4:	d111      	bne.n	800161a <ST7565_DrawChar+0x18a>
				// 165 эллемент  ( символ і )
				b = Font->data[165 * Font->FontHeight + i];
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	f8d3 2002 	ldr.w	r2, [r3, #2]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	785b      	ldrb	r3, [r3, #1]
 8001600:	4619      	mov	r1, r3
 8001602:	460b      	mov	r3, r1
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	440b      	add	r3, r1
 8001608:	0159      	lsls	r1, r3, #5
 800160a:	4419      	add	r1, r3
 800160c:	8bfb      	ldrh	r3, [r7, #30]
 800160e:	440b      	add	r3, r1
 8001610:	005b      	lsls	r3, r3, #1
 8001612:	4413      	add	r3, r2
 8001614:	881b      	ldrh	r3, [r3, #0]
 8001616:	837b      	strh	r3, [r7, #26]
 8001618:	e024      	b.n	8001664 <ST7565_DrawChar+0x1d4>
			} else if (ch == 186) {	// 184 символ по ASCII - є
 800161a:	7afb      	ldrb	r3, [r7, #11]
 800161c:	2bba      	cmp	r3, #186	; 0xba
 800161e:	d10f      	bne.n	8001640 <ST7565_DrawChar+0x1b0>
				// 166 эллемент  ( символ є )
				b = Font->data[166 * Font->FontHeight + i];
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	f8d3 2002 	ldr.w	r2, [r3, #2]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	785b      	ldrb	r3, [r3, #1]
 800162a:	4619      	mov	r1, r3
 800162c:	23a6      	movs	r3, #166	; 0xa6
 800162e:	fb03 f101 	mul.w	r1, r3, r1
 8001632:	8bfb      	ldrh	r3, [r7, #30]
 8001634:	440b      	add	r3, r1
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	4413      	add	r3, r2
 800163a:	881b      	ldrh	r3, [r3, #0]
 800163c:	837b      	strh	r3, [r7, #26]
 800163e:	e011      	b.n	8001664 <ST7565_DrawChar+0x1d4>
			} else if (ch == 191) {	// 168 символ по ASCII - ї
 8001640:	7afb      	ldrb	r3, [r7, #11]
 8001642:	2bbf      	cmp	r3, #191	; 0xbf
 8001644:	d10e      	bne.n	8001664 <ST7565_DrawChar+0x1d4>
				// 167 эллемент ( символ ї )
				b = Font->data[167 * Font->FontHeight + i];
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	f8d3 2002 	ldr.w	r2, [r3, #2]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	785b      	ldrb	r3, [r3, #1]
 8001650:	4619      	mov	r1, r3
 8001652:	23a7      	movs	r3, #167	; 0xa7
 8001654:	fb03 f101 	mul.w	r1, r3, r1
 8001658:	8bfb      	ldrh	r3, [r7, #30]
 800165a:	440b      	add	r3, r1
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	4413      	add	r3, r2
 8001660:	881b      	ldrh	r3, [r3, #0]
 8001662:	837b      	strh	r3, [r7, #26]
			}
			//-----------------------------------------------------------------------------
			
			for (j = 0; j < Font->FontWidth; j++) {
 8001664:	2300      	movs	r3, #0
 8001666:	83bb      	strh	r3, [r7, #28]
 8001668:	e071      	b.n	800174e <ST7565_DrawChar+0x2be>
				if ((b << j) & 0x8000) {
 800166a:	8b7a      	ldrh	r2, [r7, #26]
 800166c:	8bbb      	ldrh	r3, [r7, #28]
 800166e:	fa02 f303 	lsl.w	r3, r2, r3
 8001672:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001676:	2b00      	cmp	r3, #0
 8001678:	d02d      	beq.n	80016d6 <ST7565_DrawChar+0x246>
					for (yy = 0; yy < multiplier; yy++){
 800167a:	2300      	movs	r3, #0
 800167c:	827b      	strh	r3, [r7, #18]
 800167e:	e023      	b.n	80016c8 <ST7565_DrawChar+0x238>
						for (xx = 0; xx < multiplier; xx++){
 8001680:	2300      	movs	r3, #0
 8001682:	82bb      	strh	r3, [r7, #20]
 8001684:	e014      	b.n	80016b0 <ST7565_DrawChar+0x220>
							ST7565_Draw_pixel(X + xx, Y + yy, color);
 8001686:	8b3a      	ldrh	r2, [r7, #24]
 8001688:	8abb      	ldrh	r3, [r7, #20]
 800168a:	4413      	add	r3, r2
 800168c:	b29b      	uxth	r3, r3
 800168e:	b218      	sxth	r0, r3
 8001690:	8afa      	ldrh	r2, [r7, #22]
 8001692:	8a7b      	ldrh	r3, [r7, #18]
 8001694:	4413      	add	r3, r2
 8001696:	b29b      	uxth	r3, r3
 8001698:	b21b      	sxth	r3, r3
 800169a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800169e:	4619      	mov	r1, r3
 80016a0:	f7ff fe60 	bl	8001364 <ST7565_Draw_pixel>
						for (xx = 0; xx < multiplier; xx++){
 80016a4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80016a8:	b29b      	uxth	r3, r3
 80016aa:	3301      	adds	r3, #1
 80016ac:	b29b      	uxth	r3, r3
 80016ae:	82bb      	strh	r3, [r7, #20]
 80016b0:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80016b4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80016b8:	429a      	cmp	r2, r3
 80016ba:	dbe4      	blt.n	8001686 <ST7565_DrawChar+0x1f6>
					for (yy = 0; yy < multiplier; yy++){
 80016bc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80016c0:	b29b      	uxth	r3, r3
 80016c2:	3301      	adds	r3, #1
 80016c4:	b29b      	uxth	r3, r3
 80016c6:	827b      	strh	r3, [r7, #18]
 80016c8:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80016cc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80016d0:	429a      	cmp	r2, r3
 80016d2:	dbd5      	blt.n	8001680 <ST7565_DrawChar+0x1f0>
 80016d4:	e031      	b.n	800173a <ST7565_DrawChar+0x2aa>
						}
					}
				} else {// если фон очищать то оставляем если чтоб фон оставался старый то коментируем эту часть -------------
					for (yy = 0; yy < multiplier; yy++){
 80016d6:	2300      	movs	r3, #0
 80016d8:	827b      	strh	r3, [r7, #18]
 80016da:	e028      	b.n	800172e <ST7565_DrawChar+0x29e>
						for (xx = 0; xx < multiplier; xx++){
 80016dc:	2300      	movs	r3, #0
 80016de:	82bb      	strh	r3, [r7, #20]
 80016e0:	e019      	b.n	8001716 <ST7565_DrawChar+0x286>
							ST7565_Draw_pixel(X + xx, Y + yy, !color);
 80016e2:	8b3a      	ldrh	r2, [r7, #24]
 80016e4:	8abb      	ldrh	r3, [r7, #20]
 80016e6:	4413      	add	r3, r2
 80016e8:	b29b      	uxth	r3, r3
 80016ea:	b218      	sxth	r0, r3
 80016ec:	8afa      	ldrh	r2, [r7, #22]
 80016ee:	8a7b      	ldrh	r3, [r7, #18]
 80016f0:	4413      	add	r3, r2
 80016f2:	b29b      	uxth	r3, r3
 80016f4:	b219      	sxth	r1, r3
 80016f6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	bf0c      	ite	eq
 80016fe:	2301      	moveq	r3, #1
 8001700:	2300      	movne	r3, #0
 8001702:	b2db      	uxtb	r3, r3
 8001704:	461a      	mov	r2, r3
 8001706:	f7ff fe2d 	bl	8001364 <ST7565_Draw_pixel>
						for (xx = 0; xx < multiplier; xx++){
 800170a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800170e:	b29b      	uxth	r3, r3
 8001710:	3301      	adds	r3, #1
 8001712:	b29b      	uxth	r3, r3
 8001714:	82bb      	strh	r3, [r7, #20]
 8001716:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800171a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800171e:	429a      	cmp	r2, r3
 8001720:	dbdf      	blt.n	80016e2 <ST7565_DrawChar+0x252>
					for (yy = 0; yy < multiplier; yy++){
 8001722:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001726:	b29b      	uxth	r3, r3
 8001728:	3301      	adds	r3, #1
 800172a:	b29b      	uxth	r3, r3
 800172c:	827b      	strh	r3, [r7, #18]
 800172e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001732:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001736:	429a      	cmp	r2, r3
 8001738:	dbd0      	blt.n	80016dc <ST7565_DrawChar+0x24c>
						}
					}
				}
				//----------------------------------------------------------------------------------------------------
				X += multiplier;
 800173a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800173e:	b29a      	uxth	r2, r3
 8001740:	8b3b      	ldrh	r3, [r7, #24]
 8001742:	4413      	add	r3, r2
 8001744:	b29b      	uxth	r3, r3
 8001746:	833b      	strh	r3, [r7, #24]
			for (j = 0; j < Font->FontWidth; j++) {
 8001748:	8bbb      	ldrh	r3, [r7, #28]
 800174a:	3301      	adds	r3, #1
 800174c:	83bb      	strh	r3, [r7, #28]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	b29b      	uxth	r3, r3
 8001754:	8bba      	ldrh	r2, [r7, #28]
 8001756:	429a      	cmp	r2, r3
 8001758:	d387      	bcc.n	800166a <ST7565_DrawChar+0x1da>
			}
			X = x;
 800175a:	89fb      	ldrh	r3, [r7, #14]
 800175c:	833b      	strh	r3, [r7, #24]
			Y += multiplier;
 800175e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001762:	b29a      	uxth	r2, r3
 8001764:	8afb      	ldrh	r3, [r7, #22]
 8001766:	4413      	add	r3, r2
 8001768:	b29b      	uxth	r3, r3
 800176a:	82fb      	strh	r3, [r7, #22]
		for (i = 0; i < Font->FontHeight; i++) {
 800176c:	8bfb      	ldrh	r3, [r7, #30]
 800176e:	3301      	adds	r3, #1
 8001770:	83fb      	strh	r3, [r7, #30]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	785b      	ldrb	r3, [r3, #1]
 8001776:	b29b      	uxth	r3, r3
 8001778:	8bfa      	ldrh	r2, [r7, #30]
 800177a:	429a      	cmp	r2, r3
 800177c:	f4ff aeaf 	bcc.w	80014de <ST7565_DrawChar+0x4e>
		}
		
	}
}
 8001780:	bf00      	nop
 8001782:	3720      	adds	r7, #32
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}

08001788 <ST7565_Print>:
 * @brief	 ( описание ):  функция записывает строку в буфер кадра ( поддерживает кириллицу ( в том числе и Укр. язык) и латиницу
 * @param	( параметры ):	координаты X(0 - 127)  Y(0 - 63), символ, шрифт, множитель, цвет 1 или 0
 * @return  ( возвращает ):
*******************************************************************************/
void ST7565_Print(int16_t x, int16_t y, char *str, FontDef_t *Font, uint8_t multiplier, uint8_t color)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b088      	sub	sp, #32
 800178c:	af02      	add	r7, sp, #8
 800178e:	60ba      	str	r2, [r7, #8]
 8001790:	607b      	str	r3, [r7, #4]
 8001792:	4603      	mov	r3, r0
 8001794:	81fb      	strh	r3, [r7, #14]
 8001796:	460b      	mov	r3, r1
 8001798:	81bb      	strh	r3, [r7, #12]
unsigned char buff_char;
uint16_t len = strlen(str);
 800179a:	68b8      	ldr	r0, [r7, #8]
 800179c:	f7fe fd18 	bl	80001d0 <strlen>
 80017a0:	4603      	mov	r3, r0
 80017a2:	82bb      	strh	r3, [r7, #20]

	if (multiplier < 1) multiplier = 1;
 80017a4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	f040 809c 	bne.w	80018e6 <ST7565_Print+0x15e>
 80017ae:	2301      	movs	r3, #1
 80017b0:	f887 3020 	strb.w	r3, [r7, #32]
	
	while (len--) {
 80017b4:	e097      	b.n	80018e6 <ST7565_Print+0x15e>
		//---------------------------------------------------------------------
		// проверка на кириллицу UTF-8, если латиница то пропускаем if
		// Расширенные символы ASCII Win-1251 кириллица (код символа 128-255)
		// проверяем первый байт из двух ( так как UTF-8 ето два байта )
		// если он больше либо равен 0xC0 ( первый байт в кириллеце будет равен 0xD0 либо 0xD1 именно в алфавите )
		if ( (uint8_t)*str >= 0xC0 ) {	// код 0xC0 соответствует символу кириллица 'A' по ASCII Win-1251
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	2bbf      	cmp	r3, #191	; 0xbf
 80017bc:	d974      	bls.n	80018a8 <ST7565_Print+0x120>
			// проверяем какой именно байт первый 0xD0 либо 0xD1
			switch ((uint8_t)*str) {
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	2bd0      	cmp	r3, #208	; 0xd0
 80017c4:	d002      	beq.n	80017cc <ST7565_Print+0x44>
 80017c6:	2bd1      	cmp	r3, #209	; 0xd1
 80017c8:	d02c      	beq.n	8001824 <ST7565_Print+0x9c>
 80017ca:	e05b      	b.n	8001884 <ST7565_Print+0xfc>
				case 0xD0:
				//{
					// увеличиваем массив так как нам нужен второй байт
					str++;
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	3301      	adds	r3, #1
 80017d0:	60bb      	str	r3, [r7, #8]
					// проверяем второй байт там сам символ
					if ((uint8_t)*str == 0x81) { buff_char = 0xA8; break; }		// байт символа Ё ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	2b81      	cmp	r3, #129	; 0x81
 80017d8:	d102      	bne.n	80017e0 <ST7565_Print+0x58>
 80017da:	23a8      	movs	r3, #168	; 0xa8
 80017dc:	75fb      	strb	r3, [r7, #23]
 80017de:	e051      	b.n	8001884 <ST7565_Print+0xfc>
					else if ((uint8_t)*str >= 0x90 && (uint8_t)*str <= 0xBF) { buff_char = (*str) + 0x30; }	// байт символов А...Я а...п  делаем здвиг на +48
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	2b8f      	cmp	r3, #143	; 0x8f
 80017e6:	d908      	bls.n	80017fa <ST7565_Print+0x72>
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	2bbf      	cmp	r3, #191	; 0xbf
 80017ee:	d804      	bhi.n	80017fa <ST7565_Print+0x72>
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	3330      	adds	r3, #48	; 0x30
 80017f6:	75fb      	strb	r3, [r7, #23]
					else if ((uint8_t)*str == 0x84) { buff_char = 0xAA; break; }		// байт символа Є ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					else if ((uint8_t)*str == 0x86) { buff_char = 0xB2; break; }		// байт символа І ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					else if ((uint8_t)*str == 0x87) { buff_char = 0xAF; break; }		// байт символа Ї ( если нужнф еще символы добавляем тут и в функции DrawChar() )
				break;
 80017f8:	e041      	b.n	800187e <ST7565_Print+0xf6>
					else if ((uint8_t)*str == 0x84) { buff_char = 0xAA; break; }		// байт символа Є ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	2b84      	cmp	r3, #132	; 0x84
 8001800:	d102      	bne.n	8001808 <ST7565_Print+0x80>
 8001802:	23aa      	movs	r3, #170	; 0xaa
 8001804:	75fb      	strb	r3, [r7, #23]
 8001806:	e03d      	b.n	8001884 <ST7565_Print+0xfc>
					else if ((uint8_t)*str == 0x86) { buff_char = 0xB2; break; }		// байт символа І ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	2b86      	cmp	r3, #134	; 0x86
 800180e:	d102      	bne.n	8001816 <ST7565_Print+0x8e>
 8001810:	23b2      	movs	r3, #178	; 0xb2
 8001812:	75fb      	strb	r3, [r7, #23]
 8001814:	e036      	b.n	8001884 <ST7565_Print+0xfc>
					else if ((uint8_t)*str == 0x87) { buff_char = 0xAF; break; }		// байт символа Ї ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	2b87      	cmp	r3, #135	; 0x87
 800181c:	d12f      	bne.n	800187e <ST7565_Print+0xf6>
 800181e:	23af      	movs	r3, #175	; 0xaf
 8001820:	75fb      	strb	r3, [r7, #23]
 8001822:	e02f      	b.n	8001884 <ST7565_Print+0xfc>
				//}
				case 0xD1:
				//{
					// увеличиваем массив так как нам нужен второй байт
					str++;
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	3301      	adds	r3, #1
 8001828:	60bb      	str	r3, [r7, #8]
					// проверяем второй байт там сам символ
					if ((uint8_t)*str == 0x91) { buff_char = 0xB8; break; }		// байт символа ё ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	2b91      	cmp	r3, #145	; 0x91
 8001830:	d102      	bne.n	8001838 <ST7565_Print+0xb0>
 8001832:	23b8      	movs	r3, #184	; 0xb8
 8001834:	75fb      	strb	r3, [r7, #23]
 8001836:	e025      	b.n	8001884 <ST7565_Print+0xfc>
					else if ((uint8_t)*str >= 0x80 && (uint8_t)*str <= 0x8F) { buff_char = (*str) + 0x70; }	// байт символов п...я	елаем здвиг на +112
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	b25b      	sxtb	r3, r3
 800183e:	2b00      	cmp	r3, #0
 8001840:	da08      	bge.n	8001854 <ST7565_Print+0xcc>
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	2b8f      	cmp	r3, #143	; 0x8f
 8001848:	d804      	bhi.n	8001854 <ST7565_Print+0xcc>
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	3370      	adds	r3, #112	; 0x70
 8001850:	75fb      	strb	r3, [r7, #23]
					else if ((uint8_t)*str == 0x94) { buff_char = 0xBA; break; }		// байт символа є ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					else if ((uint8_t)*str == 0x96) { buff_char = 0xB3; break; }		// байт символа і ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					else if ((uint8_t)*str == 0x97) { buff_char = 0xBF; break; }		// байт символа ї ( если нужнф еще символы добавляем тут и в функции DrawChar() )
				break;
 8001852:	e016      	b.n	8001882 <ST7565_Print+0xfa>
					else if ((uint8_t)*str == 0x94) { buff_char = 0xBA; break; }		// байт символа є ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	2b94      	cmp	r3, #148	; 0x94
 800185a:	d102      	bne.n	8001862 <ST7565_Print+0xda>
 800185c:	23ba      	movs	r3, #186	; 0xba
 800185e:	75fb      	strb	r3, [r7, #23]
 8001860:	e010      	b.n	8001884 <ST7565_Print+0xfc>
					else if ((uint8_t)*str == 0x96) { buff_char = 0xB3; break; }		// байт символа і ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	2b96      	cmp	r3, #150	; 0x96
 8001868:	d102      	bne.n	8001870 <ST7565_Print+0xe8>
 800186a:	23b3      	movs	r3, #179	; 0xb3
 800186c:	75fb      	strb	r3, [r7, #23]
 800186e:	e009      	b.n	8001884 <ST7565_Print+0xfc>
					else if ((uint8_t)*str == 0x97) { buff_char = 0xBF; break; }		// байт символа ї ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	2b97      	cmp	r3, #151	; 0x97
 8001876:	d104      	bne.n	8001882 <ST7565_Print+0xfa>
 8001878:	23bf      	movs	r3, #191	; 0xbf
 800187a:	75fb      	strb	r3, [r7, #23]
 800187c:	e002      	b.n	8001884 <ST7565_Print+0xfc>
				break;
 800187e:	bf00      	nop
 8001880:	e000      	b.n	8001884 <ST7565_Print+0xfc>
				break;
 8001882:	bf00      	nop
				//}
			}
			// уменьшаем еще переменную так как израсходывали 2 байта для кириллицы
			len--;
 8001884:	8abb      	ldrh	r3, [r7, #20]
 8001886:	3b01      	subs	r3, #1
 8001888:	82bb      	strh	r3, [r7, #20]
			ST7565_DrawChar(x, y, buff_char, Font, multiplier, color);
 800188a:	7dfa      	ldrb	r2, [r7, #23]
 800188c:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8001890:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8001894:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001898:	9301      	str	r3, [sp, #4]
 800189a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800189e:	9300      	str	r3, [sp, #0]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	f7ff fdf5 	bl	8001490 <ST7565_DrawChar>
 80018a6:	e00e      	b.n	80018c6 <ST7565_Print+0x13e>
		} else {
			ST7565_DrawChar(x, y, *str, Font, multiplier, color);
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	781a      	ldrb	r2, [r3, #0]
 80018ac:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 80018b0:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 80018b4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80018b8:	9301      	str	r3, [sp, #4]
 80018ba:	f897 3020 	ldrb.w	r3, [r7, #32]
 80018be:	9300      	str	r3, [sp, #0]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	f7ff fde5 	bl	8001490 <ST7565_DrawChar>
		}
		
		x += (Font->FontWidth * multiplier);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	b29a      	uxth	r2, r3
 80018cc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80018d0:	b29b      	uxth	r3, r3
 80018d2:	fb12 f303 	smulbb	r3, r2, r3
 80018d6:	b29a      	uxth	r2, r3
 80018d8:	89fb      	ldrh	r3, [r7, #14]
 80018da:	4413      	add	r3, r2
 80018dc:	b29b      	uxth	r3, r3
 80018de:	81fb      	strh	r3, [r7, #14]
		str++;
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	3301      	adds	r3, #1
 80018e4:	60bb      	str	r3, [r7, #8]
	while (len--) {
 80018e6:	8abb      	ldrh	r3, [r7, #20]
 80018e8:	1e5a      	subs	r2, r3, #1
 80018ea:	82ba      	strh	r2, [r7, #20]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	f47f af62 	bne.w	80017b6 <ST7565_Print+0x2e>
	}
}
 80018f2:	bf00      	nop
 80018f4:	bf00      	nop
 80018f6:	3718      	adds	r7, #24
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}

080018fc <ST7565_DrawLine>:
	* @param	( параметры ):	координаты начальной точки и конечной и цвет 0 или 1
								X(0 - 127)  Y(0 - 63)
	* @return  ( возвращает ):	
*******************************************************************************/
void ST7565_DrawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint8_t c)
{
 80018fc:	b590      	push	{r4, r7, lr}
 80018fe:	b087      	sub	sp, #28
 8001900:	af00      	add	r7, sp, #0
 8001902:	4604      	mov	r4, r0
 8001904:	4608      	mov	r0, r1
 8001906:	4611      	mov	r1, r2
 8001908:	461a      	mov	r2, r3
 800190a:	4623      	mov	r3, r4
 800190c:	80fb      	strh	r3, [r7, #6]
 800190e:	4603      	mov	r3, r0
 8001910:	80bb      	strh	r3, [r7, #4]
 8001912:	460b      	mov	r3, r1
 8001914:	807b      	strh	r3, [r7, #2]
 8001916:	4613      	mov	r3, r2
 8001918:	803b      	strh	r3, [r7, #0]
int16_t dx, dy, sx, sy, err, e2, i, tmp;
	
	/* Check for overflow */
	if (x0 >= SCREEN_WIDTH)  x0 = SCREEN_WIDTH  - 1;
 800191a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800191e:	2b7f      	cmp	r3, #127	; 0x7f
 8001920:	dd01      	ble.n	8001926 <ST7565_DrawLine+0x2a>
 8001922:	237f      	movs	r3, #127	; 0x7f
 8001924:	80fb      	strh	r3, [r7, #6]
	if (x1 >= SCREEN_WIDTH)  x1 = SCREEN_WIDTH  - 1;
 8001926:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800192a:	2b7f      	cmp	r3, #127	; 0x7f
 800192c:	dd01      	ble.n	8001932 <ST7565_DrawLine+0x36>
 800192e:	237f      	movs	r3, #127	; 0x7f
 8001930:	807b      	strh	r3, [r7, #2]
	if (y0 >= SCREEN_HEIGHT) y0 = SCREEN_HEIGHT - 1;
 8001932:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001936:	2b3f      	cmp	r3, #63	; 0x3f
 8001938:	dd01      	ble.n	800193e <ST7565_DrawLine+0x42>
 800193a:	233f      	movs	r3, #63	; 0x3f
 800193c:	80bb      	strh	r3, [r7, #4]
	if (y1 >= SCREEN_HEIGHT) y1 = SCREEN_HEIGHT - 1;
 800193e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001942:	2b3f      	cmp	r3, #63	; 0x3f
 8001944:	dd01      	ble.n	800194a <ST7565_DrawLine+0x4e>
 8001946:	233f      	movs	r3, #63	; 0x3f
 8001948:	803b      	strh	r3, [r7, #0]
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 800194a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800194e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001952:	429a      	cmp	r2, r3
 8001954:	da05      	bge.n	8001962 <ST7565_DrawLine+0x66>
 8001956:	887a      	ldrh	r2, [r7, #2]
 8001958:	88fb      	ldrh	r3, [r7, #6]
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	b29b      	uxth	r3, r3
 800195e:	b21b      	sxth	r3, r3
 8001960:	e004      	b.n	800196c <ST7565_DrawLine+0x70>
 8001962:	88fa      	ldrh	r2, [r7, #6]
 8001964:	887b      	ldrh	r3, [r7, #2]
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	b29b      	uxth	r3, r3
 800196a:	b21b      	sxth	r3, r3
 800196c:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 800196e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001972:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001976:	429a      	cmp	r2, r3
 8001978:	da05      	bge.n	8001986 <ST7565_DrawLine+0x8a>
 800197a:	883a      	ldrh	r2, [r7, #0]
 800197c:	88bb      	ldrh	r3, [r7, #4]
 800197e:	1ad3      	subs	r3, r2, r3
 8001980:	b29b      	uxth	r3, r3
 8001982:	b21b      	sxth	r3, r3
 8001984:	e004      	b.n	8001990 <ST7565_DrawLine+0x94>
 8001986:	88ba      	ldrh	r2, [r7, #4]
 8001988:	883b      	ldrh	r3, [r7, #0]
 800198a:	1ad3      	subs	r3, r2, r3
 800198c:	b29b      	uxth	r3, r3
 800198e:	b21b      	sxth	r3, r3
 8001990:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1; 
 8001992:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001996:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800199a:	429a      	cmp	r2, r3
 800199c:	da01      	bge.n	80019a2 <ST7565_DrawLine+0xa6>
 800199e:	2301      	movs	r3, #1
 80019a0:	e001      	b.n	80019a6 <ST7565_DrawLine+0xaa>
 80019a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019a6:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1; 
 80019a8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80019ac:	f9b7 3000 	ldrsh.w	r3, [r7]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	da01      	bge.n	80019b8 <ST7565_DrawLine+0xbc>
 80019b4:	2301      	movs	r3, #1
 80019b6:	e001      	b.n	80019bc <ST7565_DrawLine+0xc0>
 80019b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019bc:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2; 
 80019be:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80019c2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80019c6:	429a      	cmp	r2, r3
 80019c8:	dd06      	ble.n	80019d8 <ST7565_DrawLine+0xdc>
 80019ca:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80019ce:	0fda      	lsrs	r2, r3, #31
 80019d0:	4413      	add	r3, r2
 80019d2:	105b      	asrs	r3, r3, #1
 80019d4:	b21b      	sxth	r3, r3
 80019d6:	e006      	b.n	80019e6 <ST7565_DrawLine+0xea>
 80019d8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80019dc:	0fda      	lsrs	r2, r3, #31
 80019de:	4413      	add	r3, r2
 80019e0:	105b      	asrs	r3, r3, #1
 80019e2:	425b      	negs	r3, r3
 80019e4:	b21b      	sxth	r3, r3
 80019e6:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 80019e8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d130      	bne.n	8001a52 <ST7565_DrawLine+0x156>
		if (y1 < y0) {
 80019f0:	f9b7 2000 	ldrsh.w	r2, [r7]
 80019f4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	da05      	bge.n	8001a08 <ST7565_DrawLine+0x10c>
			tmp = y1;
 80019fc:	883b      	ldrh	r3, [r7, #0]
 80019fe:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8001a00:	88bb      	ldrh	r3, [r7, #4]
 8001a02:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8001a04:	893b      	ldrh	r3, [r7, #8]
 8001a06:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 8001a08:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001a0c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	da05      	bge.n	8001a20 <ST7565_DrawLine+0x124>
			tmp = x1;
 8001a14:	887b      	ldrh	r3, [r7, #2]
 8001a16:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8001a18:	88fb      	ldrh	r3, [r7, #6]
 8001a1a:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8001a1c:	893b      	ldrh	r3, [r7, #8]
 8001a1e:	80fb      	strh	r3, [r7, #6]
		}
		
		// Vertical line
		for (i = y0; i <= y1; i++) ST7565_Draw_pixel(x0, i, c);
 8001a20:	88bb      	ldrh	r3, [r7, #4]
 8001a22:	82bb      	strh	r3, [r7, #20]
 8001a24:	e00e      	b.n	8001a44 <ST7565_DrawLine+0x148>
 8001a26:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001a2a:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 8001a2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7ff fc96 	bl	8001364 <ST7565_Draw_pixel>
 8001a38:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001a3c:	b29b      	uxth	r3, r3
 8001a3e:	3301      	adds	r3, #1
 8001a40:	b29b      	uxth	r3, r3
 8001a42:	82bb      	strh	r3, [r7, #20]
 8001a44:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001a48:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	ddea      	ble.n	8001a26 <ST7565_DrawLine+0x12a>
		
		return;
 8001a50:	e06e      	b.n	8001b30 <ST7565_DrawLine+0x234>
	}
	
	if (dy == 0) {
 8001a52:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d130      	bne.n	8001abc <ST7565_DrawLine+0x1c0>
		if (y1 < y0) {
 8001a5a:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001a5e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001a62:	429a      	cmp	r2, r3
 8001a64:	da05      	bge.n	8001a72 <ST7565_DrawLine+0x176>
			tmp = y1;
 8001a66:	883b      	ldrh	r3, [r7, #0]
 8001a68:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8001a6a:	88bb      	ldrh	r3, [r7, #4]
 8001a6c:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8001a6e:	893b      	ldrh	r3, [r7, #8]
 8001a70:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 8001a72:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001a76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	da05      	bge.n	8001a8a <ST7565_DrawLine+0x18e>
			tmp = x1;
 8001a7e:	887b      	ldrh	r3, [r7, #2]
 8001a80:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8001a82:	88fb      	ldrh	r3, [r7, #6]
 8001a84:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8001a86:	893b      	ldrh	r3, [r7, #8]
 8001a88:	80fb      	strh	r3, [r7, #6]
		}
		
		// Horizontal line
		for (i = x0; i <= x1; i++) ST7565_Draw_pixel(i, y0, c);
 8001a8a:	88fb      	ldrh	r3, [r7, #6]
 8001a8c:	82bb      	strh	r3, [r7, #20]
 8001a8e:	e00e      	b.n	8001aae <ST7565_DrawLine+0x1b2>
 8001a90:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001a94:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001a98:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7ff fc61 	bl	8001364 <ST7565_Draw_pixel>
 8001aa2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	82bb      	strh	r3, [r7, #20]
 8001aae:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001ab2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	ddea      	ble.n	8001a90 <ST7565_DrawLine+0x194>
		
		return;
 8001aba:	e039      	b.n	8001b30 <ST7565_DrawLine+0x234>
	}
	
	while (1) {
		ST7565_Draw_pixel(x0, y0, c);
 8001abc:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001ac0:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001ac4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f7ff fc4b 	bl	8001364 <ST7565_Draw_pixel>
		if (x0 == x1 && y0 == y1) break;
 8001ace:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001ad2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d105      	bne.n	8001ae6 <ST7565_DrawLine+0x1ea>
 8001ada:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001ade:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d023      	beq.n	8001b2e <ST7565_DrawLine+0x232>

		e2 = err; 
 8001ae6:	8afb      	ldrh	r3, [r7, #22]
 8001ae8:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 8001aea:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001aee:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001af2:	425b      	negs	r3, r3
 8001af4:	429a      	cmp	r2, r3
 8001af6:	dd09      	ble.n	8001b0c <ST7565_DrawLine+0x210>
			err -= dy;
 8001af8:	8afa      	ldrh	r2, [r7, #22]
 8001afa:	8a3b      	ldrh	r3, [r7, #16]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 8001b02:	88fa      	ldrh	r2, [r7, #6]
 8001b04:	89fb      	ldrh	r3, [r7, #14]
 8001b06:	4413      	add	r3, r2
 8001b08:	b29b      	uxth	r3, r3
 8001b0a:	80fb      	strh	r3, [r7, #6]
		} 
		if (e2 < dy) {
 8001b0c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001b10:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	dad1      	bge.n	8001abc <ST7565_DrawLine+0x1c0>
			err += dx;
 8001b18:	8afa      	ldrh	r2, [r7, #22]
 8001b1a:	8a7b      	ldrh	r3, [r7, #18]
 8001b1c:	4413      	add	r3, r2
 8001b1e:	b29b      	uxth	r3, r3
 8001b20:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 8001b22:	88ba      	ldrh	r2, [r7, #4]
 8001b24:	89bb      	ldrh	r3, [r7, #12]
 8001b26:	4413      	add	r3, r2
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	80bb      	strh	r3, [r7, #4]
		ST7565_Draw_pixel(x0, y0, c);
 8001b2c:	e7c6      	b.n	8001abc <ST7565_DrawLine+0x1c0>
		if (x0 == x1 && y0 == y1) break;
 8001b2e:	bf00      	nop
		} 
	}
}
 8001b30:	371c      	adds	r7, #28
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd90      	pop	{r4, r7, pc}

08001b36 <ST7565_DrawRectangle>:
	* @param	( параметры ):	координаты верхнего левого и ширина и высота и цвет
								X(0 - 127)  Y(0 - 63)
	* @return  ( возвращает ):	
*******************************************************************************/
void ST7565_DrawRectangle(int16_t x, int16_t y, int16_t w, int16_t h, uint8_t c)
{
 8001b36:	b590      	push	{r4, r7, lr}
 8001b38:	b085      	sub	sp, #20
 8001b3a:	af02      	add	r7, sp, #8
 8001b3c:	4604      	mov	r4, r0
 8001b3e:	4608      	mov	r0, r1
 8001b40:	4611      	mov	r1, r2
 8001b42:	461a      	mov	r2, r3
 8001b44:	4623      	mov	r3, r4
 8001b46:	80fb      	strh	r3, [r7, #6]
 8001b48:	4603      	mov	r3, r0
 8001b4a:	80bb      	strh	r3, [r7, #4]
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	807b      	strh	r3, [r7, #2]
 8001b50:	4613      	mov	r3, r2
 8001b52:	803b      	strh	r3, [r7, #0]
	// Check input parameters
	if (x >= SCREEN_WIDTH || y >= SCREEN_HEIGHT) return;
 8001b54:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b58:	2b7f      	cmp	r3, #127	; 0x7f
 8001b5a:	dc6a      	bgt.n	8001c32 <ST7565_DrawRectangle+0xfc>
 8001b5c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001b60:	2b3f      	cmp	r3, #63	; 0x3f
 8001b62:	dc66      	bgt.n	8001c32 <ST7565_DrawRectangle+0xfc>
	
	// Check width and height
	if ((x + w) >= SCREEN_WIDTH)  w = SCREEN_WIDTH  - x;
 8001b64:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001b68:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	2b7f      	cmp	r3, #127	; 0x7f
 8001b70:	dd04      	ble.n	8001b7c <ST7565_DrawRectangle+0x46>
 8001b72:	88fb      	ldrh	r3, [r7, #6]
 8001b74:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001b78:	b29b      	uxth	r3, r3
 8001b7a:	807b      	strh	r3, [r7, #2]
	if ((y + h) >= SCREEN_HEIGHT) h = SCREEN_HEIGHT - y;
 8001b7c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001b80:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001b84:	4413      	add	r3, r2
 8001b86:	2b3f      	cmp	r3, #63	; 0x3f
 8001b88:	dd04      	ble.n	8001b94 <ST7565_DrawRectangle+0x5e>
 8001b8a:	88bb      	ldrh	r3, [r7, #4]
 8001b8c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8001b90:	b29b      	uxth	r3, r3
 8001b92:	803b      	strh	r3, [r7, #0]
	
	// Draw 4 lines
	ST7565_DrawLine(x, y, x + w, y, c);         // Top line
 8001b94:	88fa      	ldrh	r2, [r7, #6]
 8001b96:	887b      	ldrh	r3, [r7, #2]
 8001b98:	4413      	add	r3, r2
 8001b9a:	b29b      	uxth	r3, r3
 8001b9c:	b21a      	sxth	r2, r3
 8001b9e:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8001ba2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001ba6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001baa:	7e3b      	ldrb	r3, [r7, #24]
 8001bac:	9300      	str	r3, [sp, #0]
 8001bae:	4623      	mov	r3, r4
 8001bb0:	f7ff fea4 	bl	80018fc <ST7565_DrawLine>
	ST7565_DrawLine(x, y + h, x + w, y + h, c); // Bottom line
 8001bb4:	88ba      	ldrh	r2, [r7, #4]
 8001bb6:	883b      	ldrh	r3, [r7, #0]
 8001bb8:	4413      	add	r3, r2
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	b219      	sxth	r1, r3
 8001bbe:	88fa      	ldrh	r2, [r7, #6]
 8001bc0:	887b      	ldrh	r3, [r7, #2]
 8001bc2:	4413      	add	r3, r2
 8001bc4:	b29b      	uxth	r3, r3
 8001bc6:	b21c      	sxth	r4, r3
 8001bc8:	88ba      	ldrh	r2, [r7, #4]
 8001bca:	883b      	ldrh	r3, [r7, #0]
 8001bcc:	4413      	add	r3, r2
 8001bce:	b29b      	uxth	r3, r3
 8001bd0:	b21a      	sxth	r2, r3
 8001bd2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001bd6:	7e3b      	ldrb	r3, [r7, #24]
 8001bd8:	9300      	str	r3, [sp, #0]
 8001bda:	4613      	mov	r3, r2
 8001bdc:	4622      	mov	r2, r4
 8001bde:	f7ff fe8d 	bl	80018fc <ST7565_DrawLine>
	ST7565_DrawLine(x, y, x, y + h, c);         // Left line
 8001be2:	88ba      	ldrh	r2, [r7, #4]
 8001be4:	883b      	ldrh	r3, [r7, #0]
 8001be6:	4413      	add	r3, r2
 8001be8:	b29b      	uxth	r3, r3
 8001bea:	b21c      	sxth	r4, r3
 8001bec:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001bf0:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001bf4:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001bf8:	7e3b      	ldrb	r3, [r7, #24]
 8001bfa:	9300      	str	r3, [sp, #0]
 8001bfc:	4623      	mov	r3, r4
 8001bfe:	f7ff fe7d 	bl	80018fc <ST7565_DrawLine>
	ST7565_DrawLine(x + w, y, x + w, y + h, c); // Right line
 8001c02:	88fa      	ldrh	r2, [r7, #6]
 8001c04:	887b      	ldrh	r3, [r7, #2]
 8001c06:	4413      	add	r3, r2
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	b218      	sxth	r0, r3
 8001c0c:	88fa      	ldrh	r2, [r7, #6]
 8001c0e:	887b      	ldrh	r3, [r7, #2]
 8001c10:	4413      	add	r3, r2
 8001c12:	b29b      	uxth	r3, r3
 8001c14:	b21c      	sxth	r4, r3
 8001c16:	88ba      	ldrh	r2, [r7, #4]
 8001c18:	883b      	ldrh	r3, [r7, #0]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	b29b      	uxth	r3, r3
 8001c1e:	b21a      	sxth	r2, r3
 8001c20:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001c24:	7e3b      	ldrb	r3, [r7, #24]
 8001c26:	9300      	str	r3, [sp, #0]
 8001c28:	4613      	mov	r3, r2
 8001c2a:	4622      	mov	r2, r4
 8001c2c:	f7ff fe66 	bl	80018fc <ST7565_DrawLine>
 8001c30:	e000      	b.n	8001c34 <ST7565_DrawRectangle+0xfe>
	if (x >= SCREEN_WIDTH || y >= SCREEN_HEIGHT) return;
 8001c32:	bf00      	nop
}
 8001c34:	370c      	adds	r7, #12
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd90      	pop	{r4, r7, pc}

08001c3a <ST7565_DrawFilledRectangle>:
	* @param	( параметры ):	координаты верхнего левого и ширина и высота и цвет
								X(0 - 127)  Y(0 - 63)
	* @return  ( возвращает ):	
*******************************************************************************/
void ST7565_DrawFilledRectangle(int16_t x, int16_t y, int16_t w, int16_t h, uint8_t c)
{
 8001c3a:	b590      	push	{r4, r7, lr}
 8001c3c:	b087      	sub	sp, #28
 8001c3e:	af02      	add	r7, sp, #8
 8001c40:	4604      	mov	r4, r0
 8001c42:	4608      	mov	r0, r1
 8001c44:	4611      	mov	r1, r2
 8001c46:	461a      	mov	r2, r3
 8001c48:	4623      	mov	r3, r4
 8001c4a:	80fb      	strh	r3, [r7, #6]
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	80bb      	strh	r3, [r7, #4]
 8001c50:	460b      	mov	r3, r1
 8001c52:	807b      	strh	r3, [r7, #2]
 8001c54:	4613      	mov	r3, r2
 8001c56:	803b      	strh	r3, [r7, #0]
uint8_t i;
	
	// Check input parameters
	if (x >= SCREEN_WIDTH || y >= SCREEN_HEIGHT) return;
 8001c58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c5c:	2b7f      	cmp	r3, #127	; 0x7f
 8001c5e:	dc41      	bgt.n	8001ce4 <ST7565_DrawFilledRectangle+0xaa>
 8001c60:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001c64:	2b3f      	cmp	r3, #63	; 0x3f
 8001c66:	dc3d      	bgt.n	8001ce4 <ST7565_DrawFilledRectangle+0xaa>
	
	// Check width and height
	if ((x + w) >= SCREEN_WIDTH)  w = SCREEN_WIDTH  - x;
 8001c68:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001c6c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001c70:	4413      	add	r3, r2
 8001c72:	2b7f      	cmp	r3, #127	; 0x7f
 8001c74:	dd04      	ble.n	8001c80 <ST7565_DrawFilledRectangle+0x46>
 8001c76:	88fb      	ldrh	r3, [r7, #6]
 8001c78:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	807b      	strh	r3, [r7, #2]
	if ((y + h) >= SCREEN_HEIGHT) h = SCREEN_HEIGHT - y;
 8001c80:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001c84:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001c88:	4413      	add	r3, r2
 8001c8a:	2b3f      	cmp	r3, #63	; 0x3f
 8001c8c:	dd04      	ble.n	8001c98 <ST7565_DrawFilledRectangle+0x5e>
 8001c8e:	88bb      	ldrh	r3, [r7, #4]
 8001c90:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8001c94:	b29b      	uxth	r3, r3
 8001c96:	803b      	strh	r3, [r7, #0]
	
	for (i = 0; i <= h; i++) ST7565_DrawLine(x, y + i, x + w, y + i, c);
 8001c98:	2300      	movs	r3, #0
 8001c9a:	73fb      	strb	r3, [r7, #15]
 8001c9c:	e01c      	b.n	8001cd8 <ST7565_DrawFilledRectangle+0x9e>
 8001c9e:	7bfb      	ldrb	r3, [r7, #15]
 8001ca0:	b29a      	uxth	r2, r3
 8001ca2:	88bb      	ldrh	r3, [r7, #4]
 8001ca4:	4413      	add	r3, r2
 8001ca6:	b29b      	uxth	r3, r3
 8001ca8:	b219      	sxth	r1, r3
 8001caa:	88fa      	ldrh	r2, [r7, #6]
 8001cac:	887b      	ldrh	r3, [r7, #2]
 8001cae:	4413      	add	r3, r2
 8001cb0:	b29b      	uxth	r3, r3
 8001cb2:	b21c      	sxth	r4, r3
 8001cb4:	7bfb      	ldrb	r3, [r7, #15]
 8001cb6:	b29a      	uxth	r2, r3
 8001cb8:	88bb      	ldrh	r3, [r7, #4]
 8001cba:	4413      	add	r3, r2
 8001cbc:	b29b      	uxth	r3, r3
 8001cbe:	b21a      	sxth	r2, r3
 8001cc0:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001cc4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001cc8:	9300      	str	r3, [sp, #0]
 8001cca:	4613      	mov	r3, r2
 8001ccc:	4622      	mov	r2, r4
 8001cce:	f7ff fe15 	bl	80018fc <ST7565_DrawLine>
 8001cd2:	7bfb      	ldrb	r3, [r7, #15]
 8001cd4:	3301      	adds	r3, #1
 8001cd6:	73fb      	strb	r3, [r7, #15]
 8001cd8:	7bfa      	ldrb	r2, [r7, #15]
 8001cda:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	dddd      	ble.n	8001c9e <ST7565_DrawFilledRectangle+0x64>
 8001ce2:	e000      	b.n	8001ce6 <ST7565_DrawFilledRectangle+0xac>
	if (x >= SCREEN_WIDTH || y >= SCREEN_HEIGHT) return;
 8001ce4:	bf00      	nop
}
 8001ce6:	3714      	adds	r7, #20
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd90      	pop	{r4, r7, pc}

08001cec <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001cf0:	f3bf 8f4f 	dsb	sy
}
 8001cf4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001cf6:	4b06      	ldr	r3, [pc, #24]	; (8001d10 <__NVIC_SystemReset+0x24>)
 8001cf8:	68db      	ldr	r3, [r3, #12]
 8001cfa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001cfe:	4904      	ldr	r1, [pc, #16]	; (8001d10 <__NVIC_SystemReset+0x24>)
 8001d00:	4b04      	ldr	r3, [pc, #16]	; (8001d14 <__NVIC_SystemReset+0x28>)
 8001d02:	4313      	orrs	r3, r2
 8001d04:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001d06:	f3bf 8f4f 	dsb	sy
}
 8001d0a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001d0c:	bf00      	nop
 8001d0e:	e7fd      	b.n	8001d0c <__NVIC_SystemReset+0x20>
 8001d10:	e000ed00 	.word	0xe000ed00
 8001d14:	05fa0004 	.word	0x05fa0004

08001d18 <showCfg>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//------------------------------------------------------------------------------------------
void showCfg()
{
 8001d18:	b5b0      	push	{r4, r5, r7, lr}
 8001d1a:	b086      	sub	sp, #24
 8001d1c:	af04      	add	r7, sp, #16
	*strf = '\0';
 8001d1e:	4b20      	ldr	r3, [pc, #128]	; (8001da0 <showCfg+0x88>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < MAX_LIST; i++) {
 8001d24:	2300      	movs	r3, #0
 8001d26:	607b      	str	r3, [r7, #4]
 8001d28:	e02d      	b.n	8001d86 <showCfg+0x6e>
		sprintf(strf+strlen(strf), "%u:%.1f:%s\r\n", list[i].band, list[i].freq, list[i].name);
 8001d2a:	481d      	ldr	r0, [pc, #116]	; (8001da0 <showCfg+0x88>)
 8001d2c:	f7fe fa50 	bl	80001d0 <strlen>
 8001d30:	4603      	mov	r3, r0
 8001d32:	4a1b      	ldr	r2, [pc, #108]	; (8001da0 <showCfg+0x88>)
 8001d34:	189c      	adds	r4, r3, r2
 8001d36:	491b      	ldr	r1, [pc, #108]	; (8001da4 <showCfg+0x8c>)
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	4613      	mov	r3, r2
 8001d3c:	00db      	lsls	r3, r3, #3
 8001d3e:	4413      	add	r3, r2
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	440b      	add	r3, r1
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	461d      	mov	r5, r3
 8001d48:	4916      	ldr	r1, [pc, #88]	; (8001da4 <showCfg+0x8c>)
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	00db      	lsls	r3, r3, #3
 8001d50:	4413      	add	r3, r2
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	440b      	add	r3, r1
 8001d56:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7fe fbf4 	bl	8000548 <__aeabi_f2d>
 8001d60:	687a      	ldr	r2, [r7, #4]
 8001d62:	4613      	mov	r3, r2
 8001d64:	00db      	lsls	r3, r3, #3
 8001d66:	4413      	add	r3, r2
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	4a0e      	ldr	r2, [pc, #56]	; (8001da4 <showCfg+0x8c>)
 8001d6c:	4413      	add	r3, r2
 8001d6e:	3305      	adds	r3, #5
 8001d70:	9302      	str	r3, [sp, #8]
 8001d72:	e9cd 0100 	strd	r0, r1, [sp]
 8001d76:	462a      	mov	r2, r5
 8001d78:	490b      	ldr	r1, [pc, #44]	; (8001da8 <showCfg+0x90>)
 8001d7a:	4620      	mov	r0, r4
 8001d7c:	f00d fe44 	bl	800fa08 <siprintf>
	for (int i = 0; i < MAX_LIST; i++) {
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	3301      	adds	r3, #1
 8001d84:	607b      	str	r3, [r7, #4]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2b18      	cmp	r3, #24
 8001d8a:	ddce      	ble.n	8001d2a <showCfg+0x12>
	}
	Report(0, "%s", strf);
 8001d8c:	4a04      	ldr	r2, [pc, #16]	; (8001da0 <showCfg+0x88>)
 8001d8e:	4907      	ldr	r1, [pc, #28]	; (8001dac <showCfg+0x94>)
 8001d90:	2000      	movs	r0, #0
 8001d92:	f002 fbf3 	bl	800457c <Report>
}
 8001d96:	bf00      	nop
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bdb0      	pop	{r4, r5, r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	2000154c 	.word	0x2000154c
 8001da4:	20002db0 	.word	0x20002db0
 8001da8:	08013670 	.word	0x08013670
 8001dac:	08013680 	.word	0x08013680

08001db0 <bleWakeUp>:
//-------------------------------------------------------------------------------------------

#ifdef SET_BLE
//-------------------------------------------------------------------------------------------
void bleWakeUp()
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
	BLE_WAKEUP_DOWN();
 8001db4:	4b06      	ldr	r3, [pc, #24]	; (8001dd0 <bleWakeUp+0x20>)
 8001db6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001dba:	619a      	str	r2, [r3, #24]
	HAL_Delay(100);
 8001dbc:	2064      	movs	r0, #100	; 0x64
 8001dbe:	f005 f891 	bl	8006ee4 <HAL_Delay>
	BLE_WAKEUP_UP();
 8001dc2:	4b03      	ldr	r3, [pc, #12]	; (8001dd0 <bleWakeUp+0x20>)
 8001dc4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001dc8:	619a      	str	r2, [r3, #24]
}
 8001dca:	bf00      	nop
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	48000400 	.word	0x48000400

08001dd4 <get_bleStat>:
//-------------------------------------------------------------------------------------------
uint8_t get_bleStat()
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(BLE_STAT_GPIO_Port, BLE_STAT_Pin);
 8001dd8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ddc:	4802      	ldr	r0, [pc, #8]	; (8001de8 <get_bleStat+0x14>)
 8001dde:	f005 fe37 	bl	8007a50 <HAL_GPIO_ReadPin>
 8001de2:	4603      	mov	r3, r0
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	48000400 	.word	0x48000400

08001dec <bleWrite>:
//-------------------------------------------------------------------------------------------
void bleWrite(const char *str, bool prn)
{
 8001dec:	b590      	push	{r4, r7, lr}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	460b      	mov	r3, r1
 8001df6:	70fb      	strb	r3, [r7, #3]
	if (sleep_mode) return;
 8001df8:	4b27      	ldr	r3, [pc, #156]	; (8001e98 <bleWrite+0xac>)
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d147      	bne.n	8001e90 <bleWrite+0xa4>

	if (ble_withDMA) {
 8001e00:	4b26      	ldr	r3, [pc, #152]	; (8001e9c <bleWrite+0xb0>)
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d023      	beq.n	8001e50 <bleWrite+0x64>
		while (!bleRdy) {};
 8001e08:	bf00      	nop
 8001e0a:	4b25      	ldr	r3, [pc, #148]	; (8001ea0 <bleWrite+0xb4>)
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d0fb      	beq.n	8001e0a <bleWrite+0x1e>
		bleRdy = 0;
 8001e12:	4b23      	ldr	r3, [pc, #140]	; (8001ea0 <bleWrite+0xb4>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	701a      	strb	r2, [r3, #0]
		if (HAL_UART_Transmit_DMA(blePort, (uint8_t *)str, strlen(str)) != HAL_OK) devError |= devBLE;
 8001e18:	4b22      	ldr	r3, [pc, #136]	; (8001ea4 <bleWrite+0xb8>)
 8001e1a:	681c      	ldr	r4, [r3, #0]
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f7fe f9d7 	bl	80001d0 <strlen>
 8001e22:	4603      	mov	r3, r0
 8001e24:	b29b      	uxth	r3, r3
 8001e26:	461a      	mov	r2, r3
 8001e28:	6879      	ldr	r1, [r7, #4]
 8001e2a:	4620      	mov	r0, r4
 8001e2c:	f00b fbe6 	bl	800d5fc <HAL_UART_Transmit_DMA>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d006      	beq.n	8001e44 <bleWrite+0x58>
 8001e36:	4b1c      	ldr	r3, [pc, #112]	; (8001ea8 <bleWrite+0xbc>)
 8001e38:	881b      	ldrh	r3, [r3, #0]
 8001e3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e3e:	b29a      	uxth	r2, r3
 8001e40:	4b19      	ldr	r3, [pc, #100]	; (8001ea8 <bleWrite+0xbc>)
 8001e42:	801a      	strh	r2, [r3, #0]
		while (!bleRdy) {};
 8001e44:	bf00      	nop
 8001e46:	4b16      	ldr	r3, [pc, #88]	; (8001ea0 <bleWrite+0xb4>)
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d0fb      	beq.n	8001e46 <bleWrite+0x5a>
 8001e4e:	e016      	b.n	8001e7e <bleWrite+0x92>
		/*while (HAL_UART_GetState(blePort) != HAL_UART_STATE_READY) {
			if (HAL_UART_GetState(blePort) == HAL_UART_STATE_BUSY_RX) break;
			//HAL_Delay(1);
		}*/
	} else {
		if (HAL_UART_Transmit(blePort, (uint8_t *)str, strlen(str), 1000) != HAL_OK) devError |= devBLE;
 8001e50:	4b14      	ldr	r3, [pc, #80]	; (8001ea4 <bleWrite+0xb8>)
 8001e52:	681c      	ldr	r4, [r3, #0]
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f7fe f9bb 	bl	80001d0 <strlen>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	b29a      	uxth	r2, r3
 8001e5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e62:	6879      	ldr	r1, [r7, #4]
 8001e64:	4620      	mov	r0, r4
 8001e66:	f00b fadf 	bl	800d428 <HAL_UART_Transmit>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d006      	beq.n	8001e7e <bleWrite+0x92>
 8001e70:	4b0d      	ldr	r3, [pc, #52]	; (8001ea8 <bleWrite+0xbc>)
 8001e72:	881b      	ldrh	r3, [r3, #0]
 8001e74:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e78:	b29a      	uxth	r2, r3
 8001e7a:	4b0b      	ldr	r3, [pc, #44]	; (8001ea8 <bleWrite+0xbc>)
 8001e7c:	801a      	strh	r2, [r3, #0]
	}

	if (prn) Report(1, "[BLE] %s", str);
 8001e7e:	78fb      	ldrb	r3, [r7, #3]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d006      	beq.n	8001e92 <bleWrite+0xa6>
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	4909      	ldr	r1, [pc, #36]	; (8001eac <bleWrite+0xc0>)
 8001e88:	2001      	movs	r0, #1
 8001e8a:	f002 fb77 	bl	800457c <Report>
 8001e8e:	e000      	b.n	8001e92 <bleWrite+0xa6>
	if (sleep_mode) return;
 8001e90:	bf00      	nop

}
 8001e92:	370c      	adds	r7, #12
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd90      	pop	{r4, r7, pc}
 8001e98:	20003589 	.word	0x20003589
 8001e9c:	2000343c 	.word	0x2000343c
 8001ea0:	2000020c 	.word	0x2000020c
 8001ea4:	20000208 	.word	0x20000208
 8001ea8:	2000194c 	.word	0x2000194c
 8001eac:	08013684 	.word	0x08013684

08001eb0 <initRECQ>:
//------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------
bool initRECQ(s_recq_t *q)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b085      	sub	sp, #20
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
	q->put = q->get = 0;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	709a      	strb	r2, [r3, #2]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	789a      	ldrb	r2, [r3, #2]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	705a      	strb	r2, [r3, #1]
	q->lock = 0;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < MAX_QREC; i++) {
 8001ecc:	2300      	movs	r3, #0
 8001ece:	73fb      	strb	r3, [r7, #15]
 8001ed0:	e01b      	b.n	8001f0a <initRECQ+0x5a>
		q->rec[i].id = i;
 8001ed2:	7bfa      	ldrb	r2, [r7, #15]
 8001ed4:	f997 000f 	ldrsb.w	r0, [r7, #15]
 8001ed8:	6879      	ldr	r1, [r7, #4]
 8001eda:	4613      	mov	r3, r2
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	4413      	add	r3, r2
 8001ee0:	440b      	add	r3, r1
 8001ee2:	3303      	adds	r3, #3
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	701a      	strb	r2, [r3, #0]
		q->rec[i].adr = NULL;
 8001ee8:	7bfa      	ldrb	r2, [r7, #15]
 8001eea:	6879      	ldr	r1, [r7, #4]
 8001eec:	4613      	mov	r3, r2
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	4413      	add	r3, r2
 8001ef2:	440b      	add	r3, r1
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	711a      	strb	r2, [r3, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	715a      	strb	r2, [r3, #5]
 8001efc:	2200      	movs	r2, #0
 8001efe:	719a      	strb	r2, [r3, #6]
 8001f00:	2200      	movs	r2, #0
 8001f02:	71da      	strb	r2, [r3, #7]
	for (uint8_t i = 0; i < MAX_QREC; i++) {
 8001f04:	7bfb      	ldrb	r3, [r7, #15]
 8001f06:	3301      	adds	r3, #1
 8001f08:	73fb      	strb	r3, [r7, #15]
 8001f0a:	7bfb      	ldrb	r3, [r7, #15]
 8001f0c:	2b1f      	cmp	r3, #31
 8001f0e:	d9e0      	bls.n	8001ed2 <initRECQ+0x22>
	}

	return true;
 8001f10:	2301      	movs	r3, #1
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3714      	adds	r7, #20
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr

08001f1e <putRECQ>:

	return false;
}
//-------------------------------------------------------------------------------------------
int8_t putRECQ(char *adr, s_recq_t *q)
{
 8001f1e:	b480      	push	{r7}
 8001f20:	b085      	sub	sp, #20
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	6078      	str	r0, [r7, #4]
 8001f26:	6039      	str	r1, [r7, #0]
int8_t ret = -1;
 8001f28:	23ff      	movs	r3, #255	; 0xff
 8001f2a:	73fb      	strb	r3, [r7, #15]

	while (q->lock) {}
 8001f2c:	bf00      	nop
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d1fa      	bne.n	8001f2e <putRECQ+0x10>
	q->lock = 1;
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	701a      	strb	r2, [r3, #0]

	if (q->rec[q->put].adr == NULL) {
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	785b      	ldrb	r3, [r3, #1]
 8001f42:	4619      	mov	r1, r3
 8001f44:	683a      	ldr	r2, [r7, #0]
 8001f46:	460b      	mov	r3, r1
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	440b      	add	r3, r1
 8001f4c:	4413      	add	r3, r2
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d121      	bne.n	8001f98 <putRECQ+0x7a>
		q->rec[q->put].adr = adr;
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	785b      	ldrb	r3, [r3, #1]
 8001f58:	4619      	mov	r1, r3
 8001f5a:	683a      	ldr	r2, [r7, #0]
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	440b      	add	r3, r1
 8001f62:	4413      	add	r3, r2
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	605a      	str	r2, [r3, #4]
		ret = q->rec[q->put].id;
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	785b      	ldrb	r3, [r3, #1]
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	683a      	ldr	r2, [r7, #0]
 8001f70:	460b      	mov	r3, r1
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	440b      	add	r3, r1
 8001f76:	4413      	add	r3, r2
 8001f78:	3303      	adds	r3, #3
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	73fb      	strb	r3, [r7, #15]
		q->put++;   if (q->put >= MAX_QREC) q->put = 0;
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	785b      	ldrb	r3, [r3, #1]
 8001f82:	3301      	adds	r3, #1
 8001f84:	b2da      	uxtb	r2, r3
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	705a      	strb	r2, [r3, #1]
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	785b      	ldrb	r3, [r3, #1]
 8001f8e:	2b1f      	cmp	r3, #31
 8001f90:	d902      	bls.n	8001f98 <putRECQ+0x7a>
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	2200      	movs	r2, #0
 8001f96:	705a      	strb	r2, [r3, #1]
	}

	q->lock = 0;
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	701a      	strb	r2, [r3, #0]

	return ret;
 8001f9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3714      	adds	r7, #20
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr

08001fae <getRECQ>:
//-------------------------------------------------------------------------------------------
int8_t getRECQ(char *dat, s_recq_t *q)
{
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	b084      	sub	sp, #16
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]
 8001fb6:	6039      	str	r1, [r7, #0]
int8_t ret = -1;
 8001fb8:	23ff      	movs	r3, #255	; 0xff
 8001fba:	73fb      	strb	r3, [r7, #15]
int len = 0;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	60bb      	str	r3, [r7, #8]

	while (q->lock) {}
 8001fc0:	bf00      	nop
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d1fa      	bne.n	8001fc2 <getRECQ+0x14>
	q->lock = 1;
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	2201      	movs	r2, #1
 8001fd0:	701a      	strb	r2, [r3, #0]

	if (q->rec[q->get].adr != NULL) {
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	789b      	ldrb	r3, [r3, #2]
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	683a      	ldr	r2, [r7, #0]
 8001fda:	460b      	mov	r3, r1
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	440b      	add	r3, r1
 8001fe0:	4413      	add	r3, r2
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d045      	beq.n	8002074 <getRECQ+0xc6>
		len = strlen(q->rec[q->get].adr);
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	789b      	ldrb	r3, [r3, #2]
 8001fec:	4619      	mov	r1, r3
 8001fee:	683a      	ldr	r2, [r7, #0]
 8001ff0:	460b      	mov	r3, r1
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	440b      	add	r3, r1
 8001ff6:	4413      	add	r3, r2
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7fe f8e8 	bl	80001d0 <strlen>
 8002000:	4603      	mov	r3, r0
 8002002:	60bb      	str	r3, [r7, #8]
		ret = q->rec[q->get].id;
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	789b      	ldrb	r3, [r3, #2]
 8002008:	4619      	mov	r1, r3
 800200a:	683a      	ldr	r2, [r7, #0]
 800200c:	460b      	mov	r3, r1
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	440b      	add	r3, r1
 8002012:	4413      	add	r3, r2
 8002014:	3303      	adds	r3, #3
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	73fb      	strb	r3, [r7, #15]
		if (dat) memcpy(dat, q->rec[q->get].adr, len);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d00d      	beq.n	800203c <getRECQ+0x8e>
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	789b      	ldrb	r3, [r3, #2]
 8002024:	4619      	mov	r1, r3
 8002026:	683a      	ldr	r2, [r7, #0]
 8002028:	460b      	mov	r3, r1
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	440b      	add	r3, r1
 800202e:	4413      	add	r3, r2
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	68ba      	ldr	r2, [r7, #8]
 8002034:	4619      	mov	r1, r3
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f00c ff60 	bl	800eefc <memcpy>
		free(q->rec[q->get].adr);
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	789b      	ldrb	r3, [r3, #2]
 8002040:	4619      	mov	r1, r3
 8002042:	683a      	ldr	r2, [r7, #0]
 8002044:	460b      	mov	r3, r1
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	440b      	add	r3, r1
 800204a:	4413      	add	r3, r2
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	4618      	mov	r0, r3
 8002050:	f00c ff4c 	bl	800eeec <free>
		q->rec[q->get].adr = NULL;
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	789b      	ldrb	r3, [r3, #2]
 8002058:	4619      	mov	r1, r3
 800205a:	683a      	ldr	r2, [r7, #0]
 800205c:	460b      	mov	r3, r1
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	440b      	add	r3, r1
 8002062:	4413      	add	r3, r2
 8002064:	2200      	movs	r2, #0
 8002066:	711a      	strb	r2, [r3, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	715a      	strb	r2, [r3, #5]
 800206c:	2200      	movs	r2, #0
 800206e:	719a      	strb	r2, [r3, #6]
 8002070:	2200      	movs	r2, #0
 8002072:	71da      	strb	r2, [r3, #7]
	}

	if (ret >= 0) {
 8002074:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002078:	2b00      	cmp	r3, #0
 800207a:	db14      	blt.n	80020a6 <getRECQ+0xf8>
		if (dat) *(dat + len) = '\0';
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d004      	beq.n	800208c <getRECQ+0xde>
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	687a      	ldr	r2, [r7, #4]
 8002086:	4413      	add	r3, r2
 8002088:	2200      	movs	r2, #0
 800208a:	701a      	strb	r2, [r3, #0]
		q->get++;   if (q->get >= MAX_QREC) q->get = 0;
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	789b      	ldrb	r3, [r3, #2]
 8002090:	3301      	adds	r3, #1
 8002092:	b2da      	uxtb	r2, r3
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	709a      	strb	r2, [r3, #2]
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	789b      	ldrb	r3, [r3, #2]
 800209c:	2b1f      	cmp	r3, #31
 800209e:	d902      	bls.n	80020a6 <getRECQ+0xf8>
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	2200      	movs	r2, #0
 80020a4:	709a      	strb	r2, [r3, #2]
	}

	q->lock = 0;
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	2200      	movs	r2, #0
 80020aa:	701a      	strb	r2, [r3, #0]

	return ret;
 80020ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3710      	adds	r7, #16
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80020bc:	b0c2      	sub	sp, #264	; 0x108
 80020be:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020c0:	f004 fe9b 	bl	8006dfa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020c4:	f001 faa4 	bl	8003610 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020c8:	f001 fd14 	bl	8003af4 <MX_GPIO_Init>
  MX_TIM4_Init();
 80020cc:	f001 fc0a 	bl	80038e4 <MX_TIM4_Init>
  MX_DMA_Init();
 80020d0:	f001 fcb6 	bl	8003a40 <MX_DMA_Init>
  MX_RTC_Init();
 80020d4:	f001 fb2e 	bl	8003734 <MX_RTC_Init>
  MX_USART2_UART_Init();
 80020d8:	f001 fc52 	bl	8003980 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 80020dc:	f001 fbc4 	bl	8003868 <MX_SPI2_Init>
  MX_SPI1_Init();
 80020e0:	f001 fb84 	bl	80037ec <MX_SPI1_Init>
  MX_I2C1_Init();
 80020e4:	f001 fae6 	bl	80036b4 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 80020e8:	f001 fc7a 	bl	80039e0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */


    if (HAL_TIM_Base_Start_IT(tikPort) != HAL_OK) devError |= devTIK;
 80020ec:	4b64      	ldr	r3, [pc, #400]	; (8002280 <main+0x1c8>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4618      	mov	r0, r3
 80020f2:	f00a fcc1 	bl	800ca78 <HAL_TIM_Base_Start_IT>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d006      	beq.n	800210a <main+0x52>
 80020fc:	4b61      	ldr	r3, [pc, #388]	; (8002284 <main+0x1cc>)
 80020fe:	881b      	ldrh	r3, [r3, #0]
 8002100:	f043 0301 	orr.w	r3, r3, #1
 8002104:	b29a      	uxth	r2, r3
 8002106:	4b5f      	ldr	r3, [pc, #380]	; (8002284 <main+0x1cc>)
 8002108:	801a      	strh	r2, [r3, #0]

    for (int8_t i = 0; i < 4; i++) {
 800210a:	2300      	movs	r3, #0
 800210c:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
 8002110:	e012      	b.n	8002138 <main+0x80>
    	errLedOn(true);
 8002112:	2001      	movs	r0, #1
 8002114:	f002 f8e2 	bl	80042dc <errLedOn>
    	HAL_Delay(100);
 8002118:	2064      	movs	r0, #100	; 0x64
 800211a:	f004 fee3 	bl	8006ee4 <HAL_Delay>
    	errLedOn(false);
 800211e:	2000      	movs	r0, #0
 8002120:	f002 f8dc 	bl	80042dc <errLedOn>
    	HAL_Delay(100);
 8002124:	2064      	movs	r0, #100	; 0x64
 8002126:	f004 fedd 	bl	8006ee4 <HAL_Delay>
    for (int8_t i = 0; i < 4; i++) {
 800212a:	f997 30e7 	ldrsb.w	r3, [r7, #231]	; 0xe7
 800212e:	b2db      	uxtb	r3, r3
 8002130:	3301      	adds	r3, #1
 8002132:	b2db      	uxtb	r3, r3
 8002134:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
 8002138:	f997 30e7 	ldrsb.w	r3, [r7, #231]	; 0xe7
 800213c:	2b03      	cmp	r3, #3
 800213e:	dde8      	ble.n	8002112 <main+0x5a>
    }

    if (HAL_UART_Receive_IT(cmdPort, &rxByte, 1) != HAL_OK) devError |= devUART;
 8002140:	4b51      	ldr	r3, [pc, #324]	; (8002288 <main+0x1d0>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2201      	movs	r2, #1
 8002146:	4951      	ldr	r1, [pc, #324]	; (800228c <main+0x1d4>)
 8002148:	4618      	mov	r0, r3
 800214a:	f00b fa01 	bl	800d550 <HAL_UART_Receive_IT>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d006      	beq.n	8002162 <main+0xaa>
 8002154:	4b4b      	ldr	r3, [pc, #300]	; (8002284 <main+0x1cc>)
 8002156:	881b      	ldrh	r3, [r3, #0]
 8002158:	f043 0302 	orr.w	r3, r3, #2
 800215c:	b29a      	uxth	r2, r3
 800215e:	4b49      	ldr	r3, [pc, #292]	; (8002284 <main+0x1cc>)
 8002160:	801a      	strh	r2, [r3, #0]
#ifdef SET_BLE
    if (HAL_UART_Receive_IT(blePort, &rxbByte, 1) != HAL_OK) devError |= devBLE;
 8002162:	4b4b      	ldr	r3, [pc, #300]	; (8002290 <main+0x1d8>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	2201      	movs	r2, #1
 8002168:	494a      	ldr	r1, [pc, #296]	; (8002294 <main+0x1dc>)
 800216a:	4618      	mov	r0, r3
 800216c:	f00b f9f0 	bl	800d550 <HAL_UART_Receive_IT>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d006      	beq.n	8002184 <main+0xcc>
 8002176:	4b43      	ldr	r3, [pc, #268]	; (8002284 <main+0x1cc>)
 8002178:	881b      	ldrh	r3, [r3, #0]
 800217a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800217e:	b29a      	uxth	r2, r3
 8002180:	4b40      	ldr	r3, [pc, #256]	; (8002284 <main+0x1cc>)
 8002182:	801a      	strh	r2, [r3, #0]
#endif

    set_Date(epoch);
 8002184:	4b44      	ldr	r3, [pc, #272]	; (8002298 <main+0x1e0>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4618      	mov	r0, r3
 800218a:	f002 f8fd 	bl	8004388 <set_Date>

    HAL_Delay(100);
 800218e:	2064      	movs	r0, #100	; 0x64
 8002190:	f004 fea8 	bl	8006ee4 <HAL_Delay>

    Report(1, "[que:%u] Start application ver.%s\r\n", cntEvt, ver);
 8002194:	4b41      	ldr	r3, [pc, #260]	; (800229c <main+0x1e4>)
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	b2db      	uxtb	r3, r3
 800219a:	461a      	mov	r2, r3
 800219c:	4b40      	ldr	r3, [pc, #256]	; (80022a0 <main+0x1e8>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4940      	ldr	r1, [pc, #256]	; (80022a4 <main+0x1ec>)
 80021a2:	2001      	movs	r0, #1
 80021a4:	f002 f9ea 	bl	800457c <Report>

#ifdef SET_W25FLASH
    chipPresent = W25qxx_Init();
 80021a8:	f004 f9ae 	bl	8006508 <W25qxx_Init>
 80021ac:	4603      	mov	r3, r0
 80021ae:	461a      	mov	r2, r3
 80021b0:	4b3d      	ldr	r3, [pc, #244]	; (80022a8 <main+0x1f0>)
 80021b2:	701a      	strb	r2, [r3, #0]
    uint32_t cid = W25qxx_getChipID();
 80021b4:	f004 fa62 	bl	800667c <W25qxx_getChipID>
 80021b8:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
    if ( chipPresent && ((cid >= W25Q10) && (cid <= W25Q128)) ) validChipID = true;
 80021bc:	4b3a      	ldr	r3, [pc, #232]	; (80022a8 <main+0x1f0>)
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d00a      	beq.n	80021da <main+0x122>
 80021c4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d006      	beq.n	80021da <main+0x122>
 80021cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80021d0:	2b08      	cmp	r3, #8
 80021d2:	d802      	bhi.n	80021da <main+0x122>
 80021d4:	4b35      	ldr	r3, [pc, #212]	; (80022ac <main+0x1f4>)
 80021d6:	2201      	movs	r2, #1
 80021d8:	701a      	strb	r2, [r3, #0]
    list_sector = W25qxx_getPageSize() << 1;
 80021da:	f004 fa73 	bl	80066c4 <W25qxx_getPageSize>
 80021de:	4603      	mov	r3, r0
 80021e0:	005b      	lsls	r3, r3, #1
 80021e2:	461a      	mov	r2, r3
 80021e4:	4b32      	ldr	r3, [pc, #200]	; (80022b0 <main+0x1f8>)
 80021e6:	601a      	str	r2, [r3, #0]
    //
    listSize = sizeof(rec_t) * MAX_LIST;
 80021e8:	4b32      	ldr	r3, [pc, #200]	; (80022b4 <main+0x1fc>)
 80021ea:	f44f 7261 	mov.w	r2, #900	; 0x384
 80021ee:	801a      	strh	r2, [r3, #0]
    memset((uint8_t *)&list[0].band, 0, listSize);
 80021f0:	4b30      	ldr	r3, [pc, #192]	; (80022b4 <main+0x1fc>)
 80021f2:	881b      	ldrh	r3, [r3, #0]
 80021f4:	461a      	mov	r2, r3
 80021f6:	2100      	movs	r1, #0
 80021f8:	482f      	ldr	r0, [pc, #188]	; (80022b8 <main+0x200>)
 80021fa:	f00c fe8d 	bl	800ef18 <memset>
    //
    cfgSector = W25qxx_getSectorCount() - 1;
 80021fe:	f004 fa49 	bl	8006694 <W25qxx_getSectorCount>
 8002202:	4603      	mov	r3, r0
 8002204:	3b01      	subs	r3, #1
 8002206:	4a2d      	ldr	r2, [pc, #180]	; (80022bc <main+0x204>)
 8002208:	6013      	str	r3, [r2, #0]
    if (W25qxx_IsEmptySector(cfgSector, 0, listSize)) {//sector is empty -> need write data to sector
 800220a:	4b2c      	ldr	r3, [pc, #176]	; (80022bc <main+0x204>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a29      	ldr	r2, [pc, #164]	; (80022b4 <main+0x1fc>)
 8002210:	8812      	ldrh	r2, [r2, #0]
 8002212:	2100      	movs	r1, #0
 8002214:	4618      	mov	r0, r3
 8002216:	f004 fabf 	bl	8006798 <W25qxx_IsEmptySector>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d017      	beq.n	8002250 <main+0x198>
    	if (!(devError & devSPI)) {
 8002220:	4b18      	ldr	r3, [pc, #96]	; (8002284 <main+0x1cc>)
 8002222:	881b      	ldrh	r3, [r3, #0]
 8002224:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002228:	2b00      	cmp	r3, #0
 800222a:	d156      	bne.n	80022da <main+0x222>
    		W25qxx_WriteSector((uint8_t *)&def_list[0].band, cfgSector, 0, listSize);
 800222c:	4b23      	ldr	r3, [pc, #140]	; (80022bc <main+0x204>)
 800222e:	6819      	ldr	r1, [r3, #0]
 8002230:	4b20      	ldr	r3, [pc, #128]	; (80022b4 <main+0x1fc>)
 8002232:	881b      	ldrh	r3, [r3, #0]
 8002234:	2200      	movs	r2, #0
 8002236:	4822      	ldr	r0, [pc, #136]	; (80022c0 <main+0x208>)
 8002238:	f004 fc22 	bl	8006a80 <W25qxx_WriteSector>
    		Report(1, "Writen cfg_stations_data (%lu bytes) to cfgSector #%lu\r\n", listSize, cfgSector);
 800223c:	4b1d      	ldr	r3, [pc, #116]	; (80022b4 <main+0x1fc>)
 800223e:	881b      	ldrh	r3, [r3, #0]
 8002240:	461a      	mov	r2, r3
 8002242:	4b1e      	ldr	r3, [pc, #120]	; (80022bc <main+0x204>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	491f      	ldr	r1, [pc, #124]	; (80022c4 <main+0x20c>)
 8002248:	2001      	movs	r0, #1
 800224a:	f002 f997 	bl	800457c <Report>
 800224e:	e044      	b.n	80022da <main+0x222>
      	}
    } else {//in sector	present any data
    	if (!(devError & devSPI)) {
 8002250:	4b0c      	ldr	r3, [pc, #48]	; (8002284 <main+0x1cc>)
 8002252:	881b      	ldrh	r3, [r3, #0]
 8002254:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002258:	2b00      	cmp	r3, #0
 800225a:	d137      	bne.n	80022cc <main+0x214>
    		W25qxx_ReadSector((uint8_t *)&list[0].band, cfgSector, 0, listSize);
 800225c:	4b17      	ldr	r3, [pc, #92]	; (80022bc <main+0x204>)
 800225e:	6819      	ldr	r1, [r3, #0]
 8002260:	4b14      	ldr	r3, [pc, #80]	; (80022b4 <main+0x1fc>)
 8002262:	881b      	ldrh	r3, [r3, #0]
 8002264:	2200      	movs	r2, #0
 8002266:	4814      	ldr	r0, [pc, #80]	; (80022b8 <main+0x200>)
 8002268:	f004 fd32 	bl	8006cd0 <W25qxx_ReadSector>
    		Report(1, "Readed cfg_stations_data (%lu bytes) from cfgSector #%lu\r\n", listSize, cfgSector);
 800226c:	4b11      	ldr	r3, [pc, #68]	; (80022b4 <main+0x1fc>)
 800226e:	881b      	ldrh	r3, [r3, #0]
 8002270:	461a      	mov	r2, r3
 8002272:	4b12      	ldr	r3, [pc, #72]	; (80022bc <main+0x204>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4914      	ldr	r1, [pc, #80]	; (80022c8 <main+0x210>)
 8002278:	2001      	movs	r0, #1
 800227a:	f002 f97f 	bl	800457c <Report>
 800227e:	e02c      	b.n	80022da <main+0x222>
 8002280:	20000008 	.word	0x20000008
 8002284:	2000194c 	.word	0x2000194c
 8002288:	20000010 	.word	0x20000010
 800228c:	20001960 	.word	0x20001960
 8002290:	20000208 	.word	0x20000208
 8002294:	20003136 	.word	0x20003136
 8002298:	20000018 	.word	0x20000018
 800229c:	20001d6c 	.word	0x20001d6c
 80022a0:	20000004 	.word	0x20000004
 80022a4:	08013690 	.word	0x08013690
 80022a8:	20002d84 	.word	0x20002d84
 80022ac:	20002d85 	.word	0x20002d85
 80022b0:	20001d78 	.word	0x20001d78
 80022b4:	20003134 	.word	0x20003134
 80022b8:	20002db0 	.word	0x20002db0
 80022bc:	20002d90 	.word	0x20002d90
 80022c0:	08014734 	.word	0x08014734
 80022c4:	080136b4 	.word	0x080136b4
 80022c8:	080136f0 	.word	0x080136f0
      	} else {
      		memcpy((uint8_t *)&list[0].band, (uint8_t *)&def_list[0].band, listSize);
 80022cc:	4ba7      	ldr	r3, [pc, #668]	; (800256c <main+0x4b4>)
 80022ce:	881b      	ldrh	r3, [r3, #0]
 80022d0:	461a      	mov	r2, r3
 80022d2:	49a7      	ldr	r1, [pc, #668]	; (8002570 <main+0x4b8>)
 80022d4:	48a7      	ldr	r0, [pc, #668]	; (8002574 <main+0x4bc>)
 80022d6:	f00c fe11 	bl	800eefc <memcpy>
#endif


#ifdef SET_RDA_CHIP

    rdaID = rda5807_init(&Freq);
 80022da:	48a7      	ldr	r0, [pc, #668]	; (8002578 <main+0x4c0>)
 80022dc:	f002 fe8c 	bl	8004ff8 <rda5807_init>
 80022e0:	4603      	mov	r3, r0
 80022e2:	461a      	mov	r2, r3
 80022e4:	4ba5      	ldr	r3, [pc, #660]	; (800257c <main+0x4c4>)
 80022e6:	701a      	strb	r2, [r3, #0]
    RSSI = rda5807_rssi();
 80022e8:	f002 fef4 	bl	80050d4 <rda5807_rssi>
 80022ec:	4603      	mov	r3, r0
 80022ee:	461a      	mov	r2, r3
 80022f0:	4ba3      	ldr	r3, [pc, #652]	; (8002580 <main+0x4c8>)
 80022f2:	801a      	strh	r2, [r3, #0]
    rda5807_SetVolume(Volume);
 80022f4:	4ba3      	ldr	r3, [pc, #652]	; (8002584 <main+0x4cc>)
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	4618      	mov	r0, r3
 80022fa:	f003 f8c9 	bl	8005490 <rda5807_SetVolume>
    rda5807_SetBassBoost(BassBoost);
 80022fe:	4ba2      	ldr	r3, [pc, #648]	; (8002588 <main+0x4d0>)
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	4618      	mov	r0, r3
 8002304:	f003 f90c 	bl	8005520 <rda5807_SetBassBoost>
    stereo = rda5807_Get_StereoMonoFlag();
 8002308:	f003 fa20 	bl	800574c <rda5807_Get_StereoMonoFlag>
 800230c:	4603      	mov	r3, r0
 800230e:	461a      	mov	r2, r3
 8002310:	4b9e      	ldr	r3, [pc, #632]	; (800258c <main+0x4d4>)
 8002312:	701a      	strb	r2, [r3, #0]
    Chan = rda5807_Get_Channel();
 8002314:	f003 fa32 	bl	800577c <rda5807_Get_Channel>
 8002318:	4603      	mov	r3, r0
 800231a:	461a      	mov	r2, r3
 800231c:	4b9c      	ldr	r3, [pc, #624]	; (8002590 <main+0x4d8>)
 800231e:	801a      	strh	r2, [r3, #0]
#endif

#ifdef SET_DISPLAY

	#ifdef FONT_6x8
  		FontDef_t Font_6x8 = { 6, 8, Font6x8 };
 8002320:	4a9c      	ldr	r2, [pc, #624]	; (8002594 <main+0x4dc>)
 8002322:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002326:	e892 0003 	ldmia.w	r2, {r0, r1}
 800232a:	6018      	str	r0, [r3, #0]
 800232c:	3304      	adds	r3, #4
 800232e:	8019      	strh	r1, [r3, #0]
  		lfnt = &Font_6x8;
 8002330:	4a99      	ldr	r2, [pc, #612]	; (8002598 <main+0x4e0>)
 8002332:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002336:	6013      	str	r3, [r2, #0]
	#endif

  	uint16_t lin1 = 1;
 8002338:	2301      	movs	r3, #1
 800233a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
  	uint16_t lin2 = lin1 + Font_6x8.FontHeight;//chipID...
 800233e:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 8002342:	b29a      	uxth	r2, r3
 8002344:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002348:	4413      	add	r3, r2
 800234a:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
  	uint16_t lin3 = lin2 + Font_6x8.FontHeight + 1;//Band...
 800234e:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 8002352:	b29a      	uxth	r2, r3
 8002354:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 8002358:	4413      	add	r3, r2
 800235a:	b29b      	uxth	r3, r3
 800235c:	3301      	adds	r3, #1
 800235e:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
  	uint16_t lin4 = lin3 + Font_6x8.FontHeight + 1;//Volume...//Freq...
 8002362:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 8002366:	b29a      	uxth	r2, r3
 8002368:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 800236c:	4413      	add	r3, r2
 800236e:	b29b      	uxth	r3, r3
 8002370:	3301      	adds	r3, #1
 8002372:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8
  	uint16_t lin5 = lin4 + Font_6x8.FontHeight + 1;//Freq...//Volume...
 8002376:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 800237a:	b29a      	uxth	r2, r3
 800237c:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 8002380:	4413      	add	r3, r2
 8002382:	b29b      	uxth	r3, r3
 8002384:	3301      	adds	r3, #1
 8002386:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
  	uint16_t lin6 = lin5 + Font_6x8.FontHeight + 1;//Station
 800238a:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 800238e:	b29a      	uxth	r2, r3
 8002390:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8002394:	4413      	add	r3, r2
 8002396:	b29b      	uxth	r3, r3
 8002398:	3301      	adds	r3, #1
 800239a:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
  	char st[64];
  	char sta[32];
  	char stb[32];

  	ST7565_Reset();
 800239e:	f7fe fe93 	bl	80010c8 <ST7565_Reset>
  	ST7565_Init();
 80023a2:	f7fe ffa9 	bl	80012f8 <ST7565_Init>

    int dl = sprintf(tmp, "Ver.%s", ver);
 80023a6:	4b7d      	ldr	r3, [pc, #500]	; (800259c <main+0x4e4>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	461a      	mov	r2, r3
 80023ac:	497c      	ldr	r1, [pc, #496]	; (80025a0 <main+0x4e8>)
 80023ae:	487d      	ldr	r0, [pc, #500]	; (80025a4 <main+0x4ec>)
 80023b0:	f00d fb2a 	bl	800fa08 <siprintf>
 80023b4:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
    uint16_t x = ((SCREEN_WIDTH - (Font_6x8.FontWidth * dl)) >> 1) & 0x7f;
 80023b8:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 80023bc:	461a      	mov	r2, r3
 80023be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80023c2:	fb02 f303 	mul.w	r3, r2, r3
 80023c6:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80023ca:	105b      	asrs	r3, r3, #1
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80023d2:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
    ST7565_Print(x, SCREEN_HEIGHT - Font_6x8.FontHeight, tmp, &Font_6x8, 1, PIX_ON);//печатаем надпись с указаным шрифтом и цветом(PIX_ON-белый, PIX_OFF-черный)
 80023d6:	f9b7 00b2 	ldrsh.w	r0, [r7, #178]	; 0xb2
 80023da:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 80023de:	b29b      	uxth	r3, r3
 80023e0:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	b219      	sxth	r1, r3
 80023e8:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80023ec:	2201      	movs	r2, #1
 80023ee:	9201      	str	r2, [sp, #4]
 80023f0:	2201      	movs	r2, #1
 80023f2:	9200      	str	r2, [sp, #0]
 80023f4:	4a6b      	ldr	r2, [pc, #428]	; (80025a4 <main+0x4ec>)
 80023f6:	f7ff f9c7 	bl	8001788 <ST7565_Print>

	#ifdef SET_RDA_CHIP
    	int il = sprintf(st, "RDA5807 chipID:0x%x", rdaID);
 80023fa:	4b60      	ldr	r3, [pc, #384]	; (800257c <main+0x4c4>)
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	461a      	mov	r2, r3
 8002400:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002404:	4968      	ldr	r1, [pc, #416]	; (80025a8 <main+0x4f0>)
 8002406:	4618      	mov	r0, r3
 8002408:	f00d fafe 	bl	800fa08 <siprintf>
 800240c:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
    	uint16_t xf = ((SCREEN_WIDTH - (Font_6x8.FontWidth * il)) >> 1) & 0x7f;
 8002410:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 8002414:	461a      	mov	r2, r3
 8002416:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800241a:	fb02 f303 	mul.w	r3, r2, r3
 800241e:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002422:	105b      	asrs	r3, r3, #1
 8002424:	b29b      	uxth	r3, r3
 8002426:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800242a:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
    	if (!xf) xf = 1;
 800242e:	f8b7 30da 	ldrh.w	r3, [r7, #218]	; 0xda
 8002432:	2b00      	cmp	r3, #0
 8002434:	d102      	bne.n	800243c <main+0x384>
 8002436:	2301      	movs	r3, #1
 8002438:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
    	ST7565_Print(xf, lin2, st, &Font_6x8, 1, PIX_ON);
 800243c:	f9b7 00da 	ldrsh.w	r0, [r7, #218]	; 0xda
 8002440:	f9b7 10bc 	ldrsh.w	r1, [r7, #188]	; 0xbc
 8002444:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002448:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800244c:	2401      	movs	r4, #1
 800244e:	9401      	str	r4, [sp, #4]
 8002450:	2401      	movs	r4, #1
 8002452:	9400      	str	r4, [sp, #0]
 8002454:	f7ff f998 	bl	8001788 <ST7565_Print>

    	int it = sprintf(stb, "FM Band:%s", allBands[Band]);//(uint16_t)lBand, (uint16_t)rBand);
 8002458:	4b54      	ldr	r3, [pc, #336]	; (80025ac <main+0x4f4>)
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	461a      	mov	r2, r3
 800245e:	4b54      	ldr	r3, [pc, #336]	; (80025b0 <main+0x4f8>)
 8002460:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002464:	f107 0310 	add.w	r3, r7, #16
 8002468:	4952      	ldr	r1, [pc, #328]	; (80025b4 <main+0x4fc>)
 800246a:	4618      	mov	r0, r3
 800246c:	f00d facc 	bl	800fa08 <siprintf>
 8002470:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
    	int lit = it;
 8002474:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002478:	60fb      	str	r3, [r7, #12]
    	xf = ((SCREEN_WIDTH - (Font_6x8.FontWidth * it)) >> 1) & 0x7f;
 800247a:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 800247e:	461a      	mov	r2, r3
 8002480:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002484:	fb02 f303 	mul.w	r3, r2, r3
 8002488:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800248c:	105b      	asrs	r3, r3, #1
 800248e:	b29b      	uxth	r3, r3
 8002490:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002494:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
    	if ((!xf) || (xf > (SCREEN_WIDTH - 3))) xf = 1;
 8002498:	f8b7 30da 	ldrh.w	r3, [r7, #218]	; 0xda
 800249c:	2b00      	cmp	r3, #0
 800249e:	d003      	beq.n	80024a8 <main+0x3f0>
 80024a0:	f8b7 30da 	ldrh.w	r3, [r7, #218]	; 0xda
 80024a4:	2b7d      	cmp	r3, #125	; 0x7d
 80024a6:	d902      	bls.n	80024ae <main+0x3f6>
 80024a8:	2301      	movs	r3, #1
 80024aa:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
    	ST7565_Print(xf, lin3, stb, &Font_6x8, 1, PIX_ON);
 80024ae:	f9b7 00da 	ldrsh.w	r0, [r7, #218]	; 0xda
 80024b2:	f9b7 10ba 	ldrsh.w	r1, [r7, #186]	; 0xba
 80024b6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80024ba:	f107 0210 	add.w	r2, r7, #16
 80024be:	2401      	movs	r4, #1
 80024c0:	9401      	str	r4, [sp, #4]
 80024c2:	2401      	movs	r4, #1
 80024c4:	9400      	str	r4, [sp, #0]
 80024c6:	f7ff f95f 	bl	8001788 <ST7565_Print>

    	int im = sprintf(st, "Bass:%u Vol:%u", BassBoost, Volume);
 80024ca:	4b2f      	ldr	r3, [pc, #188]	; (8002588 <main+0x4d0>)
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	461a      	mov	r2, r3
 80024d0:	4b2c      	ldr	r3, [pc, #176]	; (8002584 <main+0x4cc>)
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	f107 0050 	add.w	r0, r7, #80	; 0x50
 80024d8:	4937      	ldr	r1, [pc, #220]	; (80025b8 <main+0x500>)
 80024da:	f00d fa95 	bl	800fa08 <siprintf>
 80024de:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
    	int lim = im;
 80024e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80024e6:	60bb      	str	r3, [r7, #8]
    	xf = ((SCREEN_WIDTH - (Font_6x8.FontWidth * im)) >> 1) & 0x7f;
 80024e8:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 80024ec:	461a      	mov	r2, r3
 80024ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80024f2:	fb02 f303 	mul.w	r3, r2, r3
 80024f6:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80024fa:	105b      	asrs	r3, r3, #1
 80024fc:	b29b      	uxth	r3, r3
 80024fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002502:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
    	if ((!xf) || (xf > (SCREEN_WIDTH - 3))) xf = 1;
 8002506:	f8b7 30da 	ldrh.w	r3, [r7, #218]	; 0xda
 800250a:	2b00      	cmp	r3, #0
 800250c:	d003      	beq.n	8002516 <main+0x45e>
 800250e:	f8b7 30da 	ldrh.w	r3, [r7, #218]	; 0xda
 8002512:	2b7d      	cmp	r3, #125	; 0x7d
 8002514:	d902      	bls.n	800251c <main+0x464>
 8002516:	2301      	movs	r3, #1
 8002518:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
    	ST7565_Print(xf, lin4, st, &Font_6x8, 1, PIX_ON);
 800251c:	f9b7 00da 	ldrsh.w	r0, [r7, #218]	; 0xda
 8002520:	f9b7 10b8 	ldrsh.w	r1, [r7, #184]	; 0xb8
 8002524:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002528:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800252c:	2401      	movs	r4, #1
 800252e:	9401      	str	r4, [sp, #4]
 8002530:	2401      	movs	r4, #1
 8002532:	9400      	str	r4, [sp, #0]
 8002534:	f7ff f928 	bl	8001788 <ST7565_Print>

    	if (stereo)
 8002538:	4b14      	ldr	r3, [pc, #80]	; (800258c <main+0x4d4>)
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d03f      	beq.n	80025c0 <main+0x508>
    		il = sprintf(st, "Rssi:%u Freq:%.1f S", RSSI, Freq);
 8002540:	4b0f      	ldr	r3, [pc, #60]	; (8002580 <main+0x4c8>)
 8002542:	881b      	ldrh	r3, [r3, #0]
 8002544:	461c      	mov	r4, r3
 8002546:	4b0c      	ldr	r3, [pc, #48]	; (8002578 <main+0x4c0>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4618      	mov	r0, r3
 800254c:	f7fd fffc 	bl	8000548 <__aeabi_f2d>
 8002550:	4602      	mov	r2, r0
 8002552:	460b      	mov	r3, r1
 8002554:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8002558:	e9cd 2300 	strd	r2, r3, [sp]
 800255c:	4622      	mov	r2, r4
 800255e:	4917      	ldr	r1, [pc, #92]	; (80025bc <main+0x504>)
 8002560:	f00d fa52 	bl	800fa08 <siprintf>
 8002564:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
 8002568:	e03e      	b.n	80025e8 <main+0x530>
 800256a:	bf00      	nop
 800256c:	20003134 	.word	0x20003134
 8002570:	08014734 	.word	0x08014734
 8002574:	20002db0 	.word	0x20002db0
 8002578:	200001e4 	.word	0x200001e4
 800257c:	20002da8 	.word	0x20002da8
 8002580:	20002da6 	.word	0x20002da6
 8002584:	200001ef 	.word	0x200001ef
 8002588:	20002daa 	.word	0x20002daa
 800258c:	20002dac 	.word	0x20002dac
 8002590:	20002da4 	.word	0x20002da4
 8002594:	08013ae4 	.word	0x08013ae4
 8002598:	20002d98 	.word	0x20002d98
 800259c:	20000004 	.word	0x20000004
 80025a0:	0801372c 	.word	0x0801372c
 80025a4:	200010cc 	.word	0x200010cc
 80025a8:	08013734 	.word	0x08013734
 80025ac:	200001ec 	.word	0x200001ec
 80025b0:	200001f8 	.word	0x200001f8
 80025b4:	08013748 	.word	0x08013748
 80025b8:	08013754 	.word	0x08013754
 80025bc:	08013764 	.word	0x08013764
    	else
    		il = sprintf(st, "Rssi:%u Freq:%.1f", RSSI, Freq);
 80025c0:	4bc5      	ldr	r3, [pc, #788]	; (80028d8 <main+0x820>)
 80025c2:	881b      	ldrh	r3, [r3, #0]
 80025c4:	461c      	mov	r4, r3
 80025c6:	4bc5      	ldr	r3, [pc, #788]	; (80028dc <main+0x824>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7fd ffbc 	bl	8000548 <__aeabi_f2d>
 80025d0:	4602      	mov	r2, r0
 80025d2:	460b      	mov	r3, r1
 80025d4:	f107 0050 	add.w	r0, r7, #80	; 0x50
 80025d8:	e9cd 2300 	strd	r2, r3, [sp]
 80025dc:	4622      	mov	r2, r4
 80025de:	49c0      	ldr	r1, [pc, #768]	; (80028e0 <main+0x828>)
 80025e0:	f00d fa12 	bl	800fa08 <siprintf>
 80025e4:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
    	int lil = il;
 80025e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80025ec:	607b      	str	r3, [r7, #4]
    	xf = ((SCREEN_WIDTH - (Font_6x8.FontWidth * il)) >> 1) & 0x7f;
 80025ee:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 80025f2:	461a      	mov	r2, r3
 80025f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80025f8:	fb02 f303 	mul.w	r3, r2, r3
 80025fc:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002600:	105b      	asrs	r3, r3, #1
 8002602:	b29b      	uxth	r3, r3
 8002604:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002608:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
    	if ((!xf) || (xf > (SCREEN_WIDTH - 3))) xf = 1;
 800260c:	f8b7 30da 	ldrh.w	r3, [r7, #218]	; 0xda
 8002610:	2b00      	cmp	r3, #0
 8002612:	d003      	beq.n	800261c <main+0x564>
 8002614:	f8b7 30da 	ldrh.w	r3, [r7, #218]	; 0xda
 8002618:	2b7d      	cmp	r3, #125	; 0x7d
 800261a:	d902      	bls.n	8002622 <main+0x56a>
 800261c:	2301      	movs	r3, #1
 800261e:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
    	ST7565_Print(xf, lin5, st, &Font_6x8, 1, PIX_ON);
 8002622:	f9b7 00da 	ldrsh.w	r0, [r7, #218]	; 0xda
 8002626:	f9b7 10b6 	ldrsh.w	r1, [r7, #182]	; 0xb6
 800262a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800262e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002632:	2401      	movs	r4, #1
 8002634:	9401      	str	r4, [sp, #4]
 8002636:	2401      	movs	r4, #1
 8002638:	9400      	str	r4, [sp, #0]
 800263a:	f7ff f8a5 	bl	8001788 <ST7565_Print>

    	int ia = sprintf(sta, "%s", nameStation(Freq));
 800263e:	4ba7      	ldr	r3, [pc, #668]	; (80028dc <main+0x824>)
 8002640:	edd3 7a00 	vldr	s15, [r3]
 8002644:	eeb0 0a67 	vmov.f32	s0, s15
 8002648:	f001 fcb0 	bl	8003fac <nameStation>
 800264c:	4602      	mov	r2, r0
 800264e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002652:	49a4      	ldr	r1, [pc, #656]	; (80028e4 <main+0x82c>)
 8002654:	4618      	mov	r0, r3
 8002656:	f00d f9d7 	bl	800fa08 <siprintf>
 800265a:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
    	int lia = ia;
 800265e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002662:	603b      	str	r3, [r7, #0]
    	xf = ((SCREEN_WIDTH - (Font_6x8.FontWidth * ia)) >> 1) & 0x7f;
 8002664:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 8002668:	461a      	mov	r2, r3
 800266a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800266e:	fb02 f303 	mul.w	r3, r2, r3
 8002672:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002676:	105b      	asrs	r3, r3, #1
 8002678:	b29b      	uxth	r3, r3
 800267a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800267e:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
    	if ((!xf) || (xf > (SCREEN_WIDTH - 3))) xf = 1;
 8002682:	f8b7 30da 	ldrh.w	r3, [r7, #218]	; 0xda
 8002686:	2b00      	cmp	r3, #0
 8002688:	d003      	beq.n	8002692 <main+0x5da>
 800268a:	f8b7 30da 	ldrh.w	r3, [r7, #218]	; 0xda
 800268e:	2b7d      	cmp	r3, #125	; 0x7d
 8002690:	d902      	bls.n	8002698 <main+0x5e0>
 8002692:	2301      	movs	r3, #1
 8002694:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
    	ST7565_Print(xf, lin6, sta, &Font_6x8, 1, PIX_ON);
 8002698:	f9b7 00da 	ldrsh.w	r0, [r7, #218]	; 0xda
 800269c:	f9b7 10b4 	ldrsh.w	r1, [r7, #180]	; 0xb4
 80026a0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80026a4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80026a8:	2401      	movs	r4, #1
 80026aa:	9401      	str	r4, [sp, #4]
 80026ac:	2401      	movs	r4, #1
 80026ae:	9400      	str	r4, [sp, #0]
 80026b0:	f7ff f86a 	bl	8001788 <ST7565_Print>

    	Report(1, "ChipID:0x%x Chan:%u Freq:%.2f %s RSSI:%u Band:%s Vol:%u BassEn:%u\r\n",
 80026b4:	4b8c      	ldr	r3, [pc, #560]	; (80028e8 <main+0x830>)
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	461e      	mov	r6, r3
 80026ba:	4b8c      	ldr	r3, [pc, #560]	; (80028ec <main+0x834>)
 80026bc:	881b      	ldrh	r3, [r3, #0]
 80026be:	4698      	mov	r8, r3
 80026c0:	4b86      	ldr	r3, [pc, #536]	; (80028dc <main+0x824>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4618      	mov	r0, r3
 80026c6:	f7fd ff3f 	bl	8000548 <__aeabi_f2d>
 80026ca:	4602      	mov	r2, r0
 80026cc:	460b      	mov	r3, r1
 80026ce:	4982      	ldr	r1, [pc, #520]	; (80028d8 <main+0x820>)
 80026d0:	8809      	ldrh	r1, [r1, #0]
 80026d2:	460c      	mov	r4, r1
 80026d4:	4986      	ldr	r1, [pc, #536]	; (80028f0 <main+0x838>)
 80026d6:	7809      	ldrb	r1, [r1, #0]
 80026d8:	4608      	mov	r0, r1
 80026da:	4986      	ldr	r1, [pc, #536]	; (80028f4 <main+0x83c>)
 80026dc:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80026e0:	4885      	ldr	r0, [pc, #532]	; (80028f8 <main+0x840>)
 80026e2:	7800      	ldrb	r0, [r0, #0]
 80026e4:	4605      	mov	r5, r0
 80026e6:	4885      	ldr	r0, [pc, #532]	; (80028fc <main+0x844>)
 80026e8:	7800      	ldrb	r0, [r0, #0]
 80026ea:	9006      	str	r0, [sp, #24]
 80026ec:	9505      	str	r5, [sp, #20]
 80026ee:	9104      	str	r1, [sp, #16]
 80026f0:	9403      	str	r4, [sp, #12]
 80026f2:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80026f6:	9102      	str	r1, [sp, #8]
 80026f8:	e9cd 2300 	strd	r2, r3, [sp]
 80026fc:	4643      	mov	r3, r8
 80026fe:	4632      	mov	r2, r6
 8002700:	497f      	ldr	r1, [pc, #508]	; (8002900 <main+0x848>)
 8002702:	2001      	movs	r0, #1
 8002704:	f001 ff3a 	bl	800457c <Report>
    			rdaID, Chan, Freq, sta, RSSI, allBands[Band], Volume, BassBoost);
	#endif

    ST7565_DrawRectangle(0, Font_6x8.FontHeight, SCREEN_WIDTH - 1, SCREEN_HEIGHT - (Font_6x8.FontHeight << 1) - 2, PIX_ON);
 8002708:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 800270c:	b219      	sxth	r1, r3
 800270e:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 8002712:	b29b      	uxth	r3, r3
 8002714:	005b      	lsls	r3, r3, #1
 8002716:	b29b      	uxth	r3, r3
 8002718:	f1c3 033e 	rsb	r3, r3, #62	; 0x3e
 800271c:	b29b      	uxth	r3, r3
 800271e:	b21b      	sxth	r3, r3
 8002720:	2201      	movs	r2, #1
 8002722:	9200      	str	r2, [sp, #0]
 8002724:	227f      	movs	r2, #127	; 0x7f
 8002726:	2000      	movs	r0, #0
 8002728:	f7ff fa05 	bl	8001b36 <ST7565_DrawRectangle>
    ST7565_DrawFilledRectangle(0, 0, SCREEN_WIDTH - 1, Font_6x8.FontHeight, PIX_ON);
 800272c:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 8002730:	b21b      	sxth	r3, r3
 8002732:	2201      	movs	r2, #1
 8002734:	9200      	str	r2, [sp, #0]
 8002736:	227f      	movs	r2, #127	; 0x7f
 8002738:	2100      	movs	r1, #0
 800273a:	2000      	movs	r0, #0
 800273c:	f7ff fa7d 	bl	8001c3a <ST7565_DrawFilledRectangle>
    ST7565_Update();
 8002740:	f7fe fe72 	bl	8001428 <ST7565_Update>

    startSec = true;
 8002744:	4b6f      	ldr	r3, [pc, #444]	; (8002904 <main+0x84c>)
 8002746:	2201      	movs	r2, #1
 8002748:	701a      	strb	r2, [r3, #0]

#endif

#ifdef SET_BLE
    bleQueAckFlag   = initRECQ(&bleQueAck);
 800274a:	486f      	ldr	r0, [pc, #444]	; (8002908 <main+0x850>)
 800274c:	f7ff fbb0 	bl	8001eb0 <initRECQ>
 8002750:	4603      	mov	r3, r0
 8002752:	461a      	mov	r2, r3
 8002754:	4b6d      	ldr	r3, [pc, #436]	; (800290c <main+0x854>)
 8002756:	701a      	strb	r2, [r3, #0]
    bleQueCmdFlag   = initRECQ(&bleQueCmd);
 8002758:	486d      	ldr	r0, [pc, #436]	; (8002910 <main+0x858>)
 800275a:	f7ff fba9 	bl	8001eb0 <initRECQ>
 800275e:	4603      	mov	r3, r0
 8002760:	461a      	mov	r2, r3
 8002762:	4b6c      	ldr	r3, [pc, #432]	; (8002914 <main+0x85c>)
 8002764:	701a      	strb	r2, [r3, #0]

    bleWakeUp();
 8002766:	f7ff fb23 	bl	8001db0 <bleWakeUp>

    bleWrite("AT+RESET\r\n", 1);
 800276a:	2101      	movs	r1, #1
 800276c:	486a      	ldr	r0, [pc, #424]	; (8002918 <main+0x860>)
 800276e:	f7ff fb3d 	bl	8001dec <bleWrite>
    ble_stat = get_bleStat();
 8002772:	f7ff fb2f 	bl	8001dd4 <get_bleStat>
 8002776:	4603      	mov	r3, r0
 8002778:	461a      	mov	r2, r3
 800277a:	4b68      	ldr	r3, [pc, #416]	; (800291c <main+0x864>)
 800277c:	701a      	strb	r2, [r3, #0]
    Report(1, "[BLE] stat = %u\r\n", ble_stat);
 800277e:	4b67      	ldr	r3, [pc, #412]	; (800291c <main+0x864>)
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	461a      	mov	r2, r3
 8002784:	4966      	ldr	r1, [pc, #408]	; (8002920 <main+0x868>)
 8002786:	2001      	movs	r0, #1
 8002788:	f001 fef8 	bl	800457c <Report>
#endif


#ifdef SET_SLEEP
    //start_sleep = 0;//get_tmr(WAIT_BEFORE_SLEEP);
    sleep_mode = false;
 800278c:	4b65      	ldr	r3, [pc, #404]	; (8002924 <main+0x86c>)
 800278e:	2200      	movs	r2, #0
 8002790:	701a      	strb	r2, [r3, #0]
#endif

    uint16_t lastErr = devOK;
 8002792:	2300      	movs	r3, #0
 8002794:	f8a7 30d8 	strh.w	r3, [r7, #216]	; 0xd8

    putEvt(evt_Freq);
 8002798:	200c      	movs	r0, #12
 800279a:	f001 fb55 	bl	8003e48 <putEvt>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


    while (!restart) {
 800279e:	f000 bef9 	b.w	8003594 <main+0x14dc>
    	}
#endif
*/

#ifdef SET_FIFO_MODE
    	evt = getEvt();
 80027a2:	f001 fbc3 	bl	8003f2c <getEvt>
 80027a6:	4603      	mov	r3, r0
 80027a8:	4a5f      	ldr	r2, [pc, #380]	; (8002928 <main+0x870>)
 80027aa:	6013      	str	r3, [r2, #0]
    	if (evt != evt_None) {
 80027ac:	4b5e      	ldr	r3, [pc, #376]	; (8002928 <main+0x870>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027b4:	f000 8646 	beq.w	8003444 <main+0x138c>
    		cntEvt = getEvtCount();
 80027b8:	f001 fb3a 	bl	8003e30 <getEvtCount>
 80027bc:	4603      	mov	r3, r0
 80027be:	461a      	mov	r2, r3
 80027c0:	4b5a      	ldr	r3, [pc, #360]	; (800292c <main+0x874>)
 80027c2:	701a      	strb	r2, [r3, #0]
    		if (evt != evt_Sec) {
 80027c4:	4b58      	ldr	r3, [pc, #352]	; (8002928 <main+0x870>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2b08      	cmp	r3, #8
 80027ca:	d050      	beq.n	800286e <main+0x7b6>
    			Report(1, "[que:%u] get event '%s'\r\n", cntEvt, str_cmds[evt]);
 80027cc:	4b57      	ldr	r3, [pc, #348]	; (800292c <main+0x874>)
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	4619      	mov	r1, r3
 80027d4:	4b54      	ldr	r3, [pc, #336]	; (8002928 <main+0x870>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a55      	ldr	r2, [pc, #340]	; (8002930 <main+0x878>)
 80027da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027de:	460a      	mov	r2, r1
 80027e0:	4954      	ldr	r1, [pc, #336]	; (8002934 <main+0x87c>)
 80027e2:	2001      	movs	r0, #1
 80027e4:	f001 feca 	bl	800457c <Report>
#ifdef SET_DISPLAY
    			ST7565_DrawFilledRectangle(0, SCREEN_HEIGHT - Font_6x8.FontHeight, SCREEN_WIDTH - 1, Font_6x8.FontHeight, PIX_OFF);
 80027e8:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	b219      	sxth	r1, r3
 80027f6:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 80027fa:	b21b      	sxth	r3, r3
 80027fc:	2200      	movs	r2, #0
 80027fe:	9200      	str	r2, [sp, #0]
 8002800:	227f      	movs	r2, #127	; 0x7f
 8002802:	2000      	movs	r0, #0
 8002804:	f7ff fa19 	bl	8001c3a <ST7565_DrawFilledRectangle>
    			dl = sprintf(tmp, "evt(%u) : %s", cntEvt, str_cmds[evt]);
 8002808:	4b48      	ldr	r3, [pc, #288]	; (800292c <main+0x874>)
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	b2db      	uxtb	r3, r3
 800280e:	4619      	mov	r1, r3
 8002810:	4b45      	ldr	r3, [pc, #276]	; (8002928 <main+0x870>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a46      	ldr	r2, [pc, #280]	; (8002930 <main+0x878>)
 8002816:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800281a:	460a      	mov	r2, r1
 800281c:	4946      	ldr	r1, [pc, #280]	; (8002938 <main+0x880>)
 800281e:	4847      	ldr	r0, [pc, #284]	; (800293c <main+0x884>)
 8002820:	f00d f8f2 	bl	800fa08 <siprintf>
 8002824:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
    			x = ((SCREEN_WIDTH - (Font_6x8.FontWidth * dl)) >> 1) & 0x7f;
 8002828:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 800282c:	461a      	mov	r2, r3
 800282e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002832:	fb02 f303 	mul.w	r3, r2, r3
 8002836:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800283a:	105b      	asrs	r3, r3, #1
 800283c:	b29b      	uxth	r3, r3
 800283e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002842:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
    			ST7565_Print(x, SCREEN_HEIGHT - Font_6x8.FontHeight, tmp, &Font_6x8, 1, PIX_ON);//печатаем надпись с указаным шрифтом и цветом(PIX_ON-белый, PIX_OFF-черный)
 8002846:	f9b7 00b2 	ldrsh.w	r0, [r7, #178]	; 0xb2
 800284a:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 800284e:	b29b      	uxth	r3, r3
 8002850:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8002854:	b29b      	uxth	r3, r3
 8002856:	b219      	sxth	r1, r3
 8002858:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800285c:	2201      	movs	r2, #1
 800285e:	9201      	str	r2, [sp, #4]
 8002860:	2201      	movs	r2, #1
 8002862:	9200      	str	r2, [sp, #0]
 8002864:	4a35      	ldr	r2, [pc, #212]	; (800293c <main+0x884>)
 8002866:	f7fe ff8f 	bl	8001788 <ST7565_Print>
    			ST7565_Update();
 800286a:	f7fe fddd 	bl	8001428 <ST7565_Update>
#endif
    		}
    		switch (evt) {
 800286e:	4b2e      	ldr	r3, [pc, #184]	; (8002928 <main+0x870>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	2b15      	cmp	r3, #21
 8002874:	f200 85d6 	bhi.w	8003424 <main+0x136c>
 8002878:	a201      	add	r2, pc, #4	; (adr r2, 8002880 <main+0x7c8>)
 800287a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800287e:	bf00      	nop
 8002880:	08003137 	.word	0x08003137
 8002884:	08003185 	.word	0x08003185
 8002888:	0800319d 	.word	0x0800319d
 800288c:	080031bd 	.word	0x080031bd
 8002890:	08003231 	.word	0x08003231
 8002894:	080033d5 	.word	0x080033d5
 8002898:	08003231 	.word	0x08003231
 800289c:	08003353 	.word	0x08003353
 80028a0:	08002ee1 	.word	0x08002ee1
 80028a4:	08002e77 	.word	0x08002e77
 80028a8:	0800311f 	.word	0x0800311f
 80028ac:	08002e57 	.word	0x08002e57
 80028b0:	08002d0b 	.word	0x08002d0b
 80028b4:	08002b99 	.word	0x08002b99
 80028b8:	08002c81 	.word	0x08002c81
 80028bc:	08002b1d 	.word	0x08002b1d
 80028c0:	08002a79 	.word	0x08002a79
 80028c4:	080029a5 	.word	0x080029a5
 80028c8:	08002a71 	.word	0x08002a71
 80028cc:	0800299d 	.word	0x0800299d
 80028d0:	08002981 	.word	0x08002981
 80028d4:	08002941 	.word	0x08002941
 80028d8:	20002da6 	.word	0x20002da6
 80028dc:	200001e4 	.word	0x200001e4
 80028e0:	08013778 	.word	0x08013778
 80028e4:	08013680 	.word	0x08013680
 80028e8:	20002da8 	.word	0x20002da8
 80028ec:	20002da4 	.word	0x20002da4
 80028f0:	200001ec 	.word	0x200001ec
 80028f4:	200001f8 	.word	0x200001f8
 80028f8:	200001ef 	.word	0x200001ef
 80028fc:	20002daa 	.word	0x20002daa
 8002900:	0801378c 	.word	0x0801378c
 8002904:	20002d94 	.word	0x20002d94
 8002908:	20003440 	.word	0x20003440
 800290c:	20003587 	.word	0x20003587
 8002910:	200034e4 	.word	0x200034e4
 8002914:	20003588 	.word	0x20003588
 8002918:	080137d0 	.word	0x080137d0
 800291c:	2000343d 	.word	0x2000343d
 8002920:	080137dc 	.word	0x080137dc
 8002924:	20003589 	.word	0x20003589
 8002928:	200001cc 	.word	0x200001cc
 800292c:	20001d6c 	.word	0x20001d6c
 8002930:	20000074 	.word	0x20000074
 8002934:	080137f0 	.word	0x080137f0
 8002938:	0801380c 	.word	0x0801380c
 800293c:	200010cc 	.word	0x200010cc
    			case evt_Sleep:
    				//Report(1, "Going into SLEEP MODE...\r\n");// in 1 second\r\n");
#ifdef SET_BLE
    				bleWrite("AT+SLEEP1\r\n", 1);
 8002940:	2101      	movs	r1, #1
 8002942:	48b4      	ldr	r0, [pc, #720]	; (8002c14 <main+0xb5c>)
 8002944:	f7ff fa52 	bl	8001dec <bleWrite>
#endif
#ifdef SET_DISPLAY
    				ST7565_CMD_DISPLAY(CMD_DISPLAY_OFF);
 8002948:	20ae      	movs	r0, #174	; 0xae
 800294a:	f7fe fcef 	bl	800132c <ST7565_CMD_DISPLAY>
#endif
    				HAL_Delay(500);
 800294e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002952:	f004 fac7 	bl	8006ee4 <HAL_Delay>
    				//
    				HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 8002956:	2200      	movs	r2, #0
 8002958:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800295c:	48ae      	ldr	r0, [pc, #696]	; (8002c18 <main+0xb60>)
 800295e:	f005 f88f 	bl	8007a80 <HAL_GPIO_WritePin>
    				sleep_mode = true;
 8002962:	4bae      	ldr	r3, [pc, #696]	; (8002c1c <main+0xb64>)
 8002964:	2201      	movs	r2, #1
 8002966:	701a      	strb	r2, [r3, #0]
    				//
    				HAL_SuspendTick();
 8002968:	f004 fae0 	bl	8006f2c <HAL_SuspendTick>
    				HAL_PWR_EnableSleepOnExit();
 800296c:	f006 fd80 	bl	8009470 <HAL_PWR_EnableSleepOnExit>
    				HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8002970:	2101      	movs	r1, #1
 8002972:	2000      	movs	r0, #0
 8002974:	f006 fd48 	bl	8009408 <HAL_PWR_EnterSLEEPMode>
    				HAL_ResumeTick();
 8002978:	f004 fae8 	bl	8006f4c <HAL_ResumeTick>
    				//
    			break;
 800297c:	f000 bd52 	b.w	8003424 <main+0x136c>
    			case evt_ExitSleep:
    				//Report(1, "Exit from SLEEP MODE\r\n");
    				HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);
 8002980:	2201      	movs	r2, #1
 8002982:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002986:	48a4      	ldr	r0, [pc, #656]	; (8002c18 <main+0xb60>)
 8002988:	f005 f87a 	bl	8007a80 <HAL_GPIO_WritePin>
#ifdef SET_DISPLAY
    				ST7565_CMD_DISPLAY(CMD_DISPLAY_ON);
 800298c:	20af      	movs	r0, #175	; 0xaf
 800298e:	f7fe fccd 	bl	800132c <ST7565_CMD_DISPLAY>
#endif
#ifdef SET_BLE
    				putEvt(evt_WakeUp);
 8002992:	2013      	movs	r0, #19
 8002994:	f001 fa58 	bl	8003e48 <putEvt>
#endif
    				//if (!start_sleep) start_sleep = get_tmr(WAIT_BEFORE_SLEEP);
    			break;
 8002998:	f000 bd44 	b.w	8003424 <main+0x136c>
    			case evt_WakeUp:
#ifdef SET_BLE
    				bleWakeUp();
 800299c:	f7ff fa08 	bl	8001db0 <bleWakeUp>
#endif
    			break;
 80029a0:	f000 bd40 	b.w	8003424 <main+0x136c>
    			case evt_Band:
    				Band = newBand;
 80029a4:	4b9e      	ldr	r3, [pc, #632]	; (8002c20 <main+0xb68>)
 80029a6:	781a      	ldrb	r2, [r3, #0]
 80029a8:	4b9e      	ldr	r3, [pc, #632]	; (8002c24 <main+0xb6c>)
 80029aa:	701a      	strb	r2, [r3, #0]
    				if (!rda5807_Set_Band(Band)) {
 80029ac:	4b9d      	ldr	r3, [pc, #628]	; (8002c24 <main+0xb6c>)
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	4618      	mov	r0, r3
 80029b2:	f002 fef5 	bl	80057a0 <rda5807_Set_Band>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	f040 852a 	bne.w	8003412 <main+0x135a>
    					sprintf(stb, "FM Band:%s", allBands[Band]);//(uint16_t)lBand, (uint16_t)rBand);
 80029be:	4b99      	ldr	r3, [pc, #612]	; (8002c24 <main+0xb6c>)
 80029c0:	781b      	ldrb	r3, [r3, #0]
 80029c2:	461a      	mov	r2, r3
 80029c4:	4b98      	ldr	r3, [pc, #608]	; (8002c28 <main+0xb70>)
 80029c6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80029ca:	f107 0310 	add.w	r3, r7, #16
 80029ce:	4997      	ldr	r1, [pc, #604]	; (8002c2c <main+0xb74>)
 80029d0:	4618      	mov	r0, r3
 80029d2:	f00d f819 	bl	800fa08 <siprintf>
    					showLine(stb, lin3, &lit, true);
 80029d6:	f107 020c 	add.w	r2, r7, #12
 80029da:	f8b7 10ba 	ldrh.w	r1, [r7, #186]	; 0xba
 80029de:	f107 0010 	add.w	r0, r7, #16
 80029e2:	2301      	movs	r3, #1
 80029e4:	f001 fc0c 	bl	8004200 <showLine>
    					Report(1, "[que:%u] set new band=%u '%s'\r\n", cntEvt, Band, allBands[Band]);
 80029e8:	4b91      	ldr	r3, [pc, #580]	; (8002c30 <main+0xb78>)
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	4619      	mov	r1, r3
 80029f0:	4b8c      	ldr	r3, [pc, #560]	; (8002c24 <main+0xb6c>)
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	4618      	mov	r0, r3
 80029f6:	4b8b      	ldr	r3, [pc, #556]	; (8002c24 <main+0xb6c>)
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	461a      	mov	r2, r3
 80029fc:	4b8a      	ldr	r3, [pc, #552]	; (8002c28 <main+0xb70>)
 80029fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a02:	9300      	str	r3, [sp, #0]
 8002a04:	4603      	mov	r3, r0
 8002a06:	460a      	mov	r2, r1
 8002a08:	498a      	ldr	r1, [pc, #552]	; (8002c34 <main+0xb7c>)
 8002a0a:	2001      	movs	r0, #1
 8002a0c:	f001 fdb6 	bl	800457c <Report>
    					if (next_evt == evt) {
 8002a10:	4b89      	ldr	r3, [pc, #548]	; (8002c38 <main+0xb80>)
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	4b89      	ldr	r3, [pc, #548]	; (8002c3c <main+0xb84>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d120      	bne.n	8002a5e <main+0x9a6>
    						if ((Freq < lBand) || (Freq > rBand)) {
 8002a1c:	4b88      	ldr	r3, [pc, #544]	; (8002c40 <main+0xb88>)
 8002a1e:	ed93 7a00 	vldr	s14, [r3]
 8002a22:	4b88      	ldr	r3, [pc, #544]	; (8002c44 <main+0xb8c>)
 8002a24:	edd3 7a00 	vldr	s15, [r3]
 8002a28:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a30:	d40c      	bmi.n	8002a4c <main+0x994>
 8002a32:	4b83      	ldr	r3, [pc, #524]	; (8002c40 <main+0xb88>)
 8002a34:	ed93 7a00 	vldr	s14, [r3]
 8002a38:	4b83      	ldr	r3, [pc, #524]	; (8002c48 <main+0xb90>)
 8002a3a:	edd3 7a00 	vldr	s15, [r3]
 8002a3e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a46:	dc01      	bgt.n	8002a4c <main+0x994>
    					} else {
    						next_evt = evt;
    						putEvt(evt_Freq);
    					}
    				}
    			break;
 8002a48:	f000 bce3 	b.w	8003412 <main+0x135a>
    							newFreq = lBand;
 8002a4c:	4b7d      	ldr	r3, [pc, #500]	; (8002c44 <main+0xb8c>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a7e      	ldr	r2, [pc, #504]	; (8002c4c <main+0xb94>)
 8002a52:	6013      	str	r3, [r2, #0]
    							putEvt(evt_Freq);
 8002a54:	200c      	movs	r0, #12
 8002a56:	f001 f9f7 	bl	8003e48 <putEvt>
    			break;
 8002a5a:	f000 bcda 	b.w	8003412 <main+0x135a>
    						next_evt = evt;
 8002a5e:	4b77      	ldr	r3, [pc, #476]	; (8002c3c <main+0xb84>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a75      	ldr	r2, [pc, #468]	; (8002c38 <main+0xb80>)
 8002a64:	6013      	str	r3, [r2, #0]
    						putEvt(evt_Freq);
 8002a66:	200c      	movs	r0, #12
 8002a68:	f001 f9ee 	bl	8003e48 <putEvt>
    			break;
 8002a6c:	f000 bcd1 	b.w	8003412 <main+0x135a>
    			case evt_Cfg:
    				showCfg();
 8002a70:	f7ff f952 	bl	8001d18 <showCfg>
    			break;
 8002a74:	f000 bcd6 	b.w	8003424 <main+0x136c>
    			case evt_List:
    				next_evt = evt_Freq;
 8002a78:	4b6f      	ldr	r3, [pc, #444]	; (8002c38 <main+0xb80>)
 8002a7a:	220c      	movs	r2, #12
 8002a7c:	601a      	str	r2, [r3, #0]
    				newFreq = getNextList(Freq, seek_up, &newBand);
 8002a7e:	4b70      	ldr	r3, [pc, #448]	; (8002c40 <main+0xb88>)
 8002a80:	edd3 7a00 	vldr	s15, [r3]
 8002a84:	4b72      	ldr	r3, [pc, #456]	; (8002c50 <main+0xb98>)
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	4965      	ldr	r1, [pc, #404]	; (8002c20 <main+0xb68>)
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	eeb0 0a67 	vmov.f32	s0, s15
 8002a92:	f001 fad1 	bl	8004038 <getNextList>
 8002a96:	eef0 7a40 	vmov.f32	s15, s0
 8002a9a:	4b6c      	ldr	r3, [pc, #432]	; (8002c4c <main+0xb94>)
 8002a9c:	edc3 7a00 	vstr	s15, [r3]
					if (newBand == Band) {
 8002aa0:	4b5f      	ldr	r3, [pc, #380]	; (8002c20 <main+0xb68>)
 8002aa2:	781a      	ldrb	r2, [r3, #0]
 8002aa4:	4b5f      	ldr	r3, [pc, #380]	; (8002c24 <main+0xb6c>)
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d119      	bne.n	8002ae0 <main+0xa28>
						Report(1, "Band = newBand = %u -> goto set newFreq to %.1f (up = %u)\r\n", newBand, newFreq, seek_up);
 8002aac:	4b5c      	ldr	r3, [pc, #368]	; (8002c20 <main+0xb68>)
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	461c      	mov	r4, r3
 8002ab2:	4b66      	ldr	r3, [pc, #408]	; (8002c4c <main+0xb94>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f7fd fd46 	bl	8000548 <__aeabi_f2d>
 8002abc:	4602      	mov	r2, r0
 8002abe:	460b      	mov	r3, r1
 8002ac0:	4963      	ldr	r1, [pc, #396]	; (8002c50 <main+0xb98>)
 8002ac2:	7809      	ldrb	r1, [r1, #0]
 8002ac4:	b2c9      	uxtb	r1, r1
 8002ac6:	9102      	str	r1, [sp, #8]
 8002ac8:	e9cd 2300 	strd	r2, r3, [sp]
 8002acc:	4622      	mov	r2, r4
 8002ace:	4961      	ldr	r1, [pc, #388]	; (8002c54 <main+0xb9c>)
 8002ad0:	2001      	movs	r0, #1
 8002ad2:	f001 fd53 	bl	800457c <Report>
    					putEvt(evt_Freq);
 8002ad6:	200c      	movs	r0, #12
 8002ad8:	f001 f9b6 	bl	8003e48 <putEvt>
					} else {
						Report(1, "Band = %u -> goto set newBand to %u (newFreq to %.1f up = %u)\r\n", Band, newBand, newFreq, seek_up);
    					putEvt(evt_Band);
					}
    			break;
 8002adc:	f000 bca2 	b.w	8003424 <main+0x136c>
						Report(1, "Band = %u -> goto set newBand to %u (newFreq to %.1f up = %u)\r\n", Band, newBand, newFreq, seek_up);
 8002ae0:	4b50      	ldr	r3, [pc, #320]	; (8002c24 <main+0xb6c>)
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	461c      	mov	r4, r3
 8002ae6:	4b4e      	ldr	r3, [pc, #312]	; (8002c20 <main+0xb68>)
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	461d      	mov	r5, r3
 8002aec:	4b57      	ldr	r3, [pc, #348]	; (8002c4c <main+0xb94>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4618      	mov	r0, r3
 8002af2:	f7fd fd29 	bl	8000548 <__aeabi_f2d>
 8002af6:	4602      	mov	r2, r0
 8002af8:	460b      	mov	r3, r1
 8002afa:	4955      	ldr	r1, [pc, #340]	; (8002c50 <main+0xb98>)
 8002afc:	7809      	ldrb	r1, [r1, #0]
 8002afe:	b2c9      	uxtb	r1, r1
 8002b00:	9102      	str	r1, [sp, #8]
 8002b02:	e9cd 2300 	strd	r2, r3, [sp]
 8002b06:	462b      	mov	r3, r5
 8002b08:	4622      	mov	r2, r4
 8002b0a:	4953      	ldr	r1, [pc, #332]	; (8002c58 <main+0xba0>)
 8002b0c:	2001      	movs	r0, #1
 8002b0e:	f001 fd35 	bl	800457c <Report>
    					putEvt(evt_Band);
 8002b12:	2011      	movs	r0, #17
 8002b14:	f001 f998 	bl	8003e48 <putEvt>
    			break;
 8002b18:	f000 bc84 	b.w	8003424 <main+0x136c>
    			case evt_Bass:
    				if (newBassBoost != BassBoost) {
 8002b1c:	4b4f      	ldr	r3, [pc, #316]	; (8002c5c <main+0xba4>)
 8002b1e:	781a      	ldrb	r2, [r3, #0]
 8002b20:	4b4f      	ldr	r3, [pc, #316]	; (8002c60 <main+0xba8>)
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	429a      	cmp	r2, r3
 8002b26:	f000 8476 	beq.w	8003416 <main+0x135e>
    					BassBoost = newBassBoost;
 8002b2a:	4b4c      	ldr	r3, [pc, #304]	; (8002c5c <main+0xba4>)
 8002b2c:	781a      	ldrb	r2, [r3, #0]
 8002b2e:	4b4c      	ldr	r3, [pc, #304]	; (8002c60 <main+0xba8>)
 8002b30:	701a      	strb	r2, [r3, #0]
    					rda5807_SetBassBoost(BassBoost);
 8002b32:	4b4b      	ldr	r3, [pc, #300]	; (8002c60 <main+0xba8>)
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	4618      	mov	r0, r3
 8002b38:	f002 fcf2 	bl	8005520 <rda5807_SetBassBoost>
    					//
    					if (noMute)
 8002b3c:	4b49      	ldr	r3, [pc, #292]	; (8002c64 <main+0xbac>)
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d00a      	beq.n	8002b5a <main+0xaa2>
    						sprintf(st, "Bass:%u Vol:%u", BassBoost, Volume);
 8002b44:	4b46      	ldr	r3, [pc, #280]	; (8002c60 <main+0xba8>)
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	461a      	mov	r2, r3
 8002b4a:	4b47      	ldr	r3, [pc, #284]	; (8002c68 <main+0xbb0>)
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8002b52:	4946      	ldr	r1, [pc, #280]	; (8002c6c <main+0xbb4>)
 8002b54:	f00c ff58 	bl	800fa08 <siprintf>
 8002b58:	e009      	b.n	8002b6e <main+0xab6>
    					else
    						sprintf(st, "Bass:%u Vol:%u M", BassBoost, Volume);
 8002b5a:	4b41      	ldr	r3, [pc, #260]	; (8002c60 <main+0xba8>)
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	461a      	mov	r2, r3
 8002b60:	4b41      	ldr	r3, [pc, #260]	; (8002c68 <main+0xbb0>)
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8002b68:	4941      	ldr	r1, [pc, #260]	; (8002c70 <main+0xbb8>)
 8002b6a:	f00c ff4d 	bl	800fa08 <siprintf>
    					showLine(st, lin4, &lim, true);
 8002b6e:	f107 0208 	add.w	r2, r7, #8
 8002b72:	f8b7 10b8 	ldrh.w	r1, [r7, #184]	; 0xb8
 8002b76:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	f001 fb40 	bl	8004200 <showLine>
    					Report(1, "[que:%u] set new BassBoost to %u\r\n", cntEvt, BassBoost);
 8002b80:	4b2b      	ldr	r3, [pc, #172]	; (8002c30 <main+0xb78>)
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	461a      	mov	r2, r3
 8002b88:	4b35      	ldr	r3, [pc, #212]	; (8002c60 <main+0xba8>)
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	4939      	ldr	r1, [pc, #228]	; (8002c74 <main+0xbbc>)
 8002b8e:	2001      	movs	r0, #1
 8002b90:	f001 fcf4 	bl	800457c <Report>
    				}
    			break;
 8002b94:	f000 bc3f 	b.w	8003416 <main+0x135e>
    			case evt_Vol:
    				if (newVolume != Volume) {
 8002b98:	4b37      	ldr	r3, [pc, #220]	; (8002c78 <main+0xbc0>)
 8002b9a:	781a      	ldrb	r2, [r3, #0]
 8002b9c:	4b32      	ldr	r3, [pc, #200]	; (8002c68 <main+0xbb0>)
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	f000 843a 	beq.w	800341a <main+0x1362>
    					Volume = newVolume;
 8002ba6:	4b34      	ldr	r3, [pc, #208]	; (8002c78 <main+0xbc0>)
 8002ba8:	781a      	ldrb	r2, [r3, #0]
 8002baa:	4b2f      	ldr	r3, [pc, #188]	; (8002c68 <main+0xbb0>)
 8002bac:	701a      	strb	r2, [r3, #0]
    					rda5807_SetVolume(Volume);
 8002bae:	4b2e      	ldr	r3, [pc, #184]	; (8002c68 <main+0xbb0>)
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f002 fc6c 	bl	8005490 <rda5807_SetVolume>
    					//
    					if (noMute)
 8002bb8:	4b2a      	ldr	r3, [pc, #168]	; (8002c64 <main+0xbac>)
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d00a      	beq.n	8002bd6 <main+0xb1e>
    						sprintf(st, "Bass:%u Vol:%u", BassBoost, Volume);
 8002bc0:	4b27      	ldr	r3, [pc, #156]	; (8002c60 <main+0xba8>)
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	4b28      	ldr	r3, [pc, #160]	; (8002c68 <main+0xbb0>)
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8002bce:	4927      	ldr	r1, [pc, #156]	; (8002c6c <main+0xbb4>)
 8002bd0:	f00c ff1a 	bl	800fa08 <siprintf>
 8002bd4:	e009      	b.n	8002bea <main+0xb32>
    					else
    						sprintf(st, "Bass:%u Vol:%u M", BassBoost, Volume);
 8002bd6:	4b22      	ldr	r3, [pc, #136]	; (8002c60 <main+0xba8>)
 8002bd8:	781b      	ldrb	r3, [r3, #0]
 8002bda:	461a      	mov	r2, r3
 8002bdc:	4b22      	ldr	r3, [pc, #136]	; (8002c68 <main+0xbb0>)
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8002be4:	4922      	ldr	r1, [pc, #136]	; (8002c70 <main+0xbb8>)
 8002be6:	f00c ff0f 	bl	800fa08 <siprintf>
    					showLine(st, lin4, &lim, true);
 8002bea:	f107 0208 	add.w	r2, r7, #8
 8002bee:	f8b7 10b8 	ldrh.w	r1, [r7, #184]	; 0xb8
 8002bf2:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	f001 fb02 	bl	8004200 <showLine>
    					Report(1, "[que:%u] set new Volume to %u\r\n", cntEvt, Volume);
 8002bfc:	4b0c      	ldr	r3, [pc, #48]	; (8002c30 <main+0xb78>)
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	461a      	mov	r2, r3
 8002c04:	4b18      	ldr	r3, [pc, #96]	; (8002c68 <main+0xbb0>)
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	491c      	ldr	r1, [pc, #112]	; (8002c7c <main+0xbc4>)
 8002c0a:	2001      	movs	r0, #1
 8002c0c:	f001 fcb6 	bl	800457c <Report>
    				}
    			break;
 8002c10:	f000 bc03 	b.w	800341a <main+0x1362>
 8002c14:	0801381c 	.word	0x0801381c
 8002c18:	48000800 	.word	0x48000800
 8002c1c:	20003589 	.word	0x20003589
 8002c20:	200001ed 	.word	0x200001ed
 8002c24:	200001ec 	.word	0x200001ec
 8002c28:	200001f8 	.word	0x200001f8
 8002c2c:	08013748 	.word	0x08013748
 8002c30:	20001d6c 	.word	0x20001d6c
 8002c34:	08013828 	.word	0x08013828
 8002c38:	200001d0 	.word	0x200001d0
 8002c3c:	200001cc 	.word	0x200001cc
 8002c40:	200001e4 	.word	0x200001e4
 8002c44:	20002d9c 	.word	0x20002d9c
 8002c48:	20002da0 	.word	0x20002da0
 8002c4c:	200001e8 	.word	0x200001e8
 8002c50:	200001ee 	.word	0x200001ee
 8002c54:	08013848 	.word	0x08013848
 8002c58:	08013884 	.word	0x08013884
 8002c5c:	20002dab 	.word	0x20002dab
 8002c60:	20002daa 	.word	0x20002daa
 8002c64:	200001f1 	.word	0x200001f1
 8002c68:	200001ef 	.word	0x200001ef
 8002c6c:	08013754 	.word	0x08013754
 8002c70:	080138c4 	.word	0x080138c4
 8002c74:	080138d8 	.word	0x080138d8
 8002c78:	200001f0 	.word	0x200001f0
 8002c7c:	080138fc 	.word	0x080138fc
    			case evt_Mute:
    				noMute = (~noMute) & 1;
 8002c80:	4b81      	ldr	r3, [pc, #516]	; (8002e88 <main+0xdd0>)
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	f003 0301 	and.w	r3, r3, #1
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	bf0c      	ite	eq
 8002c8c:	2301      	moveq	r3, #1
 8002c8e:	2300      	movne	r3, #0
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	461a      	mov	r2, r3
 8002c94:	4b7c      	ldr	r3, [pc, #496]	; (8002e88 <main+0xdd0>)
 8002c96:	701a      	strb	r2, [r3, #0]
    				rda5807_Set_Mute(noMute);
 8002c98:	4b7b      	ldr	r3, [pc, #492]	; (8002e88 <main+0xdd0>)
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f002 fdeb 	bl	8005878 <rda5807_Set_Mute>
    				//
    				if (noMute)
 8002ca2:	4b79      	ldr	r3, [pc, #484]	; (8002e88 <main+0xdd0>)
 8002ca4:	781b      	ldrb	r3, [r3, #0]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d00a      	beq.n	8002cc0 <main+0xc08>
    					sprintf(st, "Bass:%u Vol:%u", BassBoost, Volume);
 8002caa:	4b78      	ldr	r3, [pc, #480]	; (8002e8c <main+0xdd4>)
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	461a      	mov	r2, r3
 8002cb0:	4b77      	ldr	r3, [pc, #476]	; (8002e90 <main+0xdd8>)
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8002cb8:	4976      	ldr	r1, [pc, #472]	; (8002e94 <main+0xddc>)
 8002cba:	f00c fea5 	bl	800fa08 <siprintf>
 8002cbe:	e009      	b.n	8002cd4 <main+0xc1c>
    				else
    					sprintf(st, "Bass:%u Vol:%u M", BassBoost, Volume);
 8002cc0:	4b72      	ldr	r3, [pc, #456]	; (8002e8c <main+0xdd4>)
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	4b72      	ldr	r3, [pc, #456]	; (8002e90 <main+0xdd8>)
 8002cc8:	781b      	ldrb	r3, [r3, #0]
 8002cca:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8002cce:	4972      	ldr	r1, [pc, #456]	; (8002e98 <main+0xde0>)
 8002cd0:	f00c fe9a 	bl	800fa08 <siprintf>
    				showLine(st, lin4, &lim, true);
 8002cd4:	f107 0208 	add.w	r2, r7, #8
 8002cd8:	f8b7 10b8 	ldrh.w	r1, [r7, #184]	; 0xb8
 8002cdc:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	f001 fa8d 	bl	8004200 <showLine>
    				Report(1, "[que:%u] set Mute to %u\r\n", cntEvt, (~noMute) & 1);
 8002ce6:	4b6d      	ldr	r3, [pc, #436]	; (8002e9c <main+0xde4>)
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	461a      	mov	r2, r3
 8002cee:	4b66      	ldr	r3, [pc, #408]	; (8002e88 <main+0xdd0>)
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	f003 0301 	and.w	r3, r3, #1
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	bf0c      	ite	eq
 8002cfa:	2301      	moveq	r3, #1
 8002cfc:	2300      	movne	r3, #0
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	4967      	ldr	r1, [pc, #412]	; (8002ea0 <main+0xde8>)
 8002d02:	2001      	movs	r0, #1
 8002d04:	f001 fc3a 	bl	800457c <Report>
    			break;
 8002d08:	e38c      	b.n	8003424 <main+0x136c>
    			case evt_Freq:
    				if ((newFreq >= lBand) && (newFreq <= rBand)) {
 8002d0a:	4b66      	ldr	r3, [pc, #408]	; (8002ea4 <main+0xdec>)
 8002d0c:	ed93 7a00 	vldr	s14, [r3]
 8002d10:	4b65      	ldr	r3, [pc, #404]	; (8002ea8 <main+0xdf0>)
 8002d12:	edd3 7a00 	vldr	s15, [r3]
 8002d16:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d1e:	da00      	bge.n	8002d22 <main+0xc6a>
    						sprintf(sta, "%s", nameStation(Freq));
    						showLine(sta, lin6, &lia, true);
    						Report(1, "[que:%u] set new Freq to %.1f %s (Chan:%u)\r\n", cntEvt, Freq, sta, Chan);
    					}
    				}
				break;
 8002d20:	e37d      	b.n	800341e <main+0x1366>
    				if ((newFreq >= lBand) && (newFreq <= rBand)) {
 8002d22:	4b60      	ldr	r3, [pc, #384]	; (8002ea4 <main+0xdec>)
 8002d24:	ed93 7a00 	vldr	s14, [r3]
 8002d28:	4b60      	ldr	r3, [pc, #384]	; (8002eac <main+0xdf4>)
 8002d2a:	edd3 7a00 	vldr	s15, [r3]
 8002d2e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d36:	d900      	bls.n	8002d3a <main+0xc82>
				break;
 8002d38:	e371      	b.n	800341e <main+0x1366>
    					if (newFreq != Freq) {
 8002d3a:	4b5a      	ldr	r3, [pc, #360]	; (8002ea4 <main+0xdec>)
 8002d3c:	ed93 7a00 	vldr	s14, [r3]
 8002d40:	4b5b      	ldr	r3, [pc, #364]	; (8002eb0 <main+0xdf8>)
 8002d42:	edd3 7a00 	vldr	s15, [r3]
 8002d46:	eeb4 7a67 	vcmp.f32	s14, s15
 8002d4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d4e:	f000 8366 	beq.w	800341e <main+0x1366>
    						Freq = newFreq;
 8002d52:	4b54      	ldr	r3, [pc, #336]	; (8002ea4 <main+0xdec>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a56      	ldr	r2, [pc, #344]	; (8002eb0 <main+0xdf8>)
 8002d58:	6013      	str	r3, [r2, #0]
    						uint16_t fr = (uint16_t)(Freq * 10);
 8002d5a:	4b55      	ldr	r3, [pc, #340]	; (8002eb0 <main+0xdf8>)
 8002d5c:	edd3 7a00 	vldr	s15, [r3]
 8002d60:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002d64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d6c:	ee17 3a90 	vmov	r3, s15
 8002d70:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
    						rda5807_SetFreq_In100Khz(fr);
 8002d74:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f002 fbf1 	bl	8005560 <rda5807_SetFreq_In100Khz>
    						stereo = rda5807_Get_StereoMonoFlag();
 8002d7e:	f002 fce5 	bl	800574c <rda5807_Get_StereoMonoFlag>
 8002d82:	4603      	mov	r3, r0
 8002d84:	461a      	mov	r2, r3
 8002d86:	4b4b      	ldr	r3, [pc, #300]	; (8002eb4 <main+0xdfc>)
 8002d88:	701a      	strb	r2, [r3, #0]
    						Chan = rda5807_Get_Channel();
 8002d8a:	f002 fcf7 	bl	800577c <rda5807_Get_Channel>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	461a      	mov	r2, r3
 8002d92:	4b49      	ldr	r3, [pc, #292]	; (8002eb8 <main+0xe00>)
 8002d94:	801a      	strh	r2, [r3, #0]
    						if (stereo)
 8002d96:	4b47      	ldr	r3, [pc, #284]	; (8002eb4 <main+0xdfc>)
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d012      	beq.n	8002dc4 <main+0xd0c>
    							sprintf(st, "Rssi:%u Freq:%.1f S", RSSI, Freq);
 8002d9e:	4b47      	ldr	r3, [pc, #284]	; (8002ebc <main+0xe04>)
 8002da0:	881b      	ldrh	r3, [r3, #0]
 8002da2:	461c      	mov	r4, r3
 8002da4:	4b42      	ldr	r3, [pc, #264]	; (8002eb0 <main+0xdf8>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4618      	mov	r0, r3
 8002daa:	f7fd fbcd 	bl	8000548 <__aeabi_f2d>
 8002dae:	4602      	mov	r2, r0
 8002db0:	460b      	mov	r3, r1
 8002db2:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8002db6:	e9cd 2300 	strd	r2, r3, [sp]
 8002dba:	4622      	mov	r2, r4
 8002dbc:	4940      	ldr	r1, [pc, #256]	; (8002ec0 <main+0xe08>)
 8002dbe:	f00c fe23 	bl	800fa08 <siprintf>
 8002dc2:	e011      	b.n	8002de8 <main+0xd30>
    							sprintf(st, "Rssi:%u Freq:%.1f", RSSI, Freq);
 8002dc4:	4b3d      	ldr	r3, [pc, #244]	; (8002ebc <main+0xe04>)
 8002dc6:	881b      	ldrh	r3, [r3, #0]
 8002dc8:	461c      	mov	r4, r3
 8002dca:	4b39      	ldr	r3, [pc, #228]	; (8002eb0 <main+0xdf8>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f7fd fbba 	bl	8000548 <__aeabi_f2d>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	460b      	mov	r3, r1
 8002dd8:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8002ddc:	e9cd 2300 	strd	r2, r3, [sp]
 8002de0:	4622      	mov	r2, r4
 8002de2:	4938      	ldr	r1, [pc, #224]	; (8002ec4 <main+0xe0c>)
 8002de4:	f00c fe10 	bl	800fa08 <siprintf>
    						showLine(st, lin5, &lil, false);
 8002de8:	1d3a      	adds	r2, r7, #4
 8002dea:	f8b7 10b6 	ldrh.w	r1, [r7, #182]	; 0xb6
 8002dee:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8002df2:	2300      	movs	r3, #0
 8002df4:	f001 fa04 	bl	8004200 <showLine>
    						sprintf(sta, "%s", nameStation(Freq));
 8002df8:	4b2d      	ldr	r3, [pc, #180]	; (8002eb0 <main+0xdf8>)
 8002dfa:	edd3 7a00 	vldr	s15, [r3]
 8002dfe:	eeb0 0a67 	vmov.f32	s0, s15
 8002e02:	f001 f8d3 	bl	8003fac <nameStation>
 8002e06:	4602      	mov	r2, r0
 8002e08:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002e0c:	492e      	ldr	r1, [pc, #184]	; (8002ec8 <main+0xe10>)
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f00c fdfa 	bl	800fa08 <siprintf>
    						showLine(sta, lin6, &lia, true);
 8002e14:	463a      	mov	r2, r7
 8002e16:	f8b7 10b4 	ldrh.w	r1, [r7, #180]	; 0xb4
 8002e1a:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8002e1e:	2301      	movs	r3, #1
 8002e20:	f001 f9ee 	bl	8004200 <showLine>
    						Report(1, "[que:%u] set new Freq to %.1f %s (Chan:%u)\r\n", cntEvt, Freq, sta, Chan);
 8002e24:	4b1d      	ldr	r3, [pc, #116]	; (8002e9c <main+0xde4>)
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	461c      	mov	r4, r3
 8002e2c:	4b20      	ldr	r3, [pc, #128]	; (8002eb0 <main+0xdf8>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4618      	mov	r0, r3
 8002e32:	f7fd fb89 	bl	8000548 <__aeabi_f2d>
 8002e36:	4602      	mov	r2, r0
 8002e38:	460b      	mov	r3, r1
 8002e3a:	491f      	ldr	r1, [pc, #124]	; (8002eb8 <main+0xe00>)
 8002e3c:	8809      	ldrh	r1, [r1, #0]
 8002e3e:	9103      	str	r1, [sp, #12]
 8002e40:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8002e44:	9102      	str	r1, [sp, #8]
 8002e46:	e9cd 2300 	strd	r2, r3, [sp]
 8002e4a:	4622      	mov	r2, r4
 8002e4c:	491f      	ldr	r1, [pc, #124]	; (8002ecc <main+0xe14>)
 8002e4e:	2001      	movs	r0, #1
 8002e50:	f001 fb94 	bl	800457c <Report>
				break;
 8002e54:	e2e3      	b.n	800341e <main+0x1366>
    			case evt_Scan:
    				if (!scan) {
 8002e56:	4b1e      	ldr	r3, [pc, #120]	; (8002ed0 <main+0xe18>)
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	f040 82e0 	bne.w	8003422 <main+0x136a>
    					scan = 1;
 8002e62:	4b1b      	ldr	r3, [pc, #108]	; (8002ed0 <main+0xe18>)
 8002e64:	2201      	movs	r2, #1
 8002e66:	701a      	strb	r2, [r3, #0]
    					rda5807_StartSeek(seek_up);
 8002e68:	4b1a      	ldr	r3, [pc, #104]	; (8002ed4 <main+0xe1c>)
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f002 fc30 	bl	80056d4 <rda5807_StartSeek>
    				}
    			break;
 8002e74:	e2d5      	b.n	8003422 <main+0x136a>
    			case evt_Ver:
    				Report(1, "Ver.%s\r\n", ver);
 8002e76:	4b18      	ldr	r3, [pc, #96]	; (8002ed8 <main+0xe20>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	4917      	ldr	r1, [pc, #92]	; (8002edc <main+0xe24>)
 8002e7e:	2001      	movs	r0, #1
 8002e80:	f001 fb7c 	bl	800457c <Report>
    			break;
 8002e84:	e2ce      	b.n	8003424 <main+0x136c>
 8002e86:	bf00      	nop
 8002e88:	200001f1 	.word	0x200001f1
 8002e8c:	20002daa 	.word	0x20002daa
 8002e90:	200001ef 	.word	0x200001ef
 8002e94:	08013754 	.word	0x08013754
 8002e98:	080138c4 	.word	0x080138c4
 8002e9c:	20001d6c 	.word	0x20001d6c
 8002ea0:	0801391c 	.word	0x0801391c
 8002ea4:	200001e8 	.word	0x200001e8
 8002ea8:	20002d9c 	.word	0x20002d9c
 8002eac:	20002da0 	.word	0x20002da0
 8002eb0:	200001e4 	.word	0x200001e4
 8002eb4:	20002dac 	.word	0x20002dac
 8002eb8:	20002da4 	.word	0x20002da4
 8002ebc:	20002da6 	.word	0x20002da6
 8002ec0:	08013764 	.word	0x08013764
 8002ec4:	08013778 	.word	0x08013778
 8002ec8:	08013680 	.word	0x08013680
 8002ecc:	08013938 	.word	0x08013938
 8002ed0:	20002da9 	.word	0x20002da9
 8002ed4:	200001ee 	.word	0x200001ee
 8002ed8:	20000004 	.word	0x20000004
 8002edc:	08013968 	.word	0x08013968
    			case evt_Sec:
    			{
#ifdef SET_DISPLAY
    				dl = sec2str(st);
 8002ee0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f001 faaf 	bl	8004448 <sec2str>
 8002eea:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
    				x = ((SCREEN_WIDTH - (Font_6x8.FontWidth * dl)) >> 1) & 0x7f;
 8002eee:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ef8:	fb02 f303 	mul.w	r3, r2, r3
 8002efc:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002f00:	105b      	asrs	r3, r3, #1
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f08:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
    				ST7565_Print(x, lin1, st, &Font_6x8, 0, PIX_OFF);
 8002f0c:	f9b7 00b2 	ldrsh.w	r0, [r7, #178]	; 0xb2
 8002f10:	f9b7 10be 	ldrsh.w	r1, [r7, #190]	; 0xbe
 8002f14:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002f18:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002f1c:	2400      	movs	r4, #0
 8002f1e:	9401      	str	r4, [sp, #4]
 8002f20:	2400      	movs	r4, #0
 8002f22:	9400      	str	r4, [sp, #0]
 8002f24:	f7fe fc30 	bl	8001788 <ST7565_Print>
#endif
    				//
    				if (scan) {
 8002f28:	4ba9      	ldr	r3, [pc, #676]	; (80031d0 <main+0x1118>)
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d04f      	beq.n	8002fd2 <main+0xf1a>
    					if (rda5807_Get_SeekTuneReadyFlag()) {
 8002f32:	f002 fbf9 	bl	8005728 <rda5807_Get_SeekTuneReadyFlag>
 8002f36:	4603      	mov	r3, r0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d04a      	beq.n	8002fd2 <main+0xf1a>
    						Freq = (float)rda5807_GetFreq_In100Khz();
 8002f3c:	f002 fb8a 	bl	8005654 <rda5807_GetFreq_In100Khz>
 8002f40:	4603      	mov	r3, r0
 8002f42:	ee07 3a90 	vmov	s15, r3
 8002f46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f4a:	4ba2      	ldr	r3, [pc, #648]	; (80031d4 <main+0x111c>)
 8002f4c:	edc3 7a00 	vstr	s15, [r3]
    						Freq /= 10;
 8002f50:	4ba0      	ldr	r3, [pc, #640]	; (80031d4 <main+0x111c>)
 8002f52:	ed93 7a00 	vldr	s14, [r3]
 8002f56:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002f5a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002f5e:	4b9d      	ldr	r3, [pc, #628]	; (80031d4 <main+0x111c>)
 8002f60:	edc3 7a00 	vstr	s15, [r3]
    						scan = 0;
 8002f64:	4b9a      	ldr	r3, [pc, #616]	; (80031d0 <main+0x1118>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	701a      	strb	r2, [r3, #0]
    						Chan = rda5807_Get_Channel();
 8002f6a:	f002 fc07 	bl	800577c <rda5807_Get_Channel>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	461a      	mov	r2, r3
 8002f72:	4b99      	ldr	r3, [pc, #612]	; (80031d8 <main+0x1120>)
 8002f74:	801a      	strh	r2, [r3, #0]
    						sprintf(sta, "%s", nameStation(Freq));
 8002f76:	4b97      	ldr	r3, [pc, #604]	; (80031d4 <main+0x111c>)
 8002f78:	edd3 7a00 	vldr	s15, [r3]
 8002f7c:	eeb0 0a67 	vmov.f32	s0, s15
 8002f80:	f001 f814 	bl	8003fac <nameStation>
 8002f84:	4602      	mov	r2, r0
 8002f86:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002f8a:	4994      	ldr	r1, [pc, #592]	; (80031dc <main+0x1124>)
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f00c fd3b 	bl	800fa08 <siprintf>
    						showLine(sta, lin6, &lia, true);
 8002f92:	463a      	mov	r2, r7
 8002f94:	f8b7 10b4 	ldrh.w	r1, [r7, #180]	; 0xb4
 8002f98:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	f001 f92f 	bl	8004200 <showLine>
    						Report(1, "[que:%u] set new Freq to %.1f %s (Chan:%u)\r\n", cntEvt, Freq, sta, Chan);
 8002fa2:	4b8f      	ldr	r3, [pc, #572]	; (80031e0 <main+0x1128>)
 8002fa4:	781b      	ldrb	r3, [r3, #0]
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	461c      	mov	r4, r3
 8002faa:	4b8a      	ldr	r3, [pc, #552]	; (80031d4 <main+0x111c>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f7fd faca 	bl	8000548 <__aeabi_f2d>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	460b      	mov	r3, r1
 8002fb8:	4987      	ldr	r1, [pc, #540]	; (80031d8 <main+0x1120>)
 8002fba:	8809      	ldrh	r1, [r1, #0]
 8002fbc:	9103      	str	r1, [sp, #12]
 8002fbe:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8002fc2:	9102      	str	r1, [sp, #8]
 8002fc4:	e9cd 2300 	strd	r2, r3, [sp]
 8002fc8:	4622      	mov	r2, r4
 8002fca:	4986      	ldr	r1, [pc, #536]	; (80031e4 <main+0x112c>)
 8002fcc:	2001      	movs	r0, #1
 8002fce:	f001 fad5 	bl	800457c <Report>
    					}
    				}
    				//
    				uint16_t rssi = rda5807_rssi();
 8002fd2:	f002 f87f 	bl	80050d4 <rda5807_rssi>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
    				if (rssi != RSSI) {
 8002fdc:	4b82      	ldr	r3, [pc, #520]	; (80031e8 <main+0x1130>)
 8002fde:	881b      	ldrh	r3, [r3, #0]
 8002fe0:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d03a      	beq.n	800305e <main+0xfa6>
    					RSSI = rssi;
 8002fe8:	4a7f      	ldr	r2, [pc, #508]	; (80031e8 <main+0x1130>)
 8002fea:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8002fee:	8013      	strh	r3, [r2, #0]
    					stereo = rda5807_Get_StereoMonoFlag();
 8002ff0:	f002 fbac 	bl	800574c <rda5807_Get_StereoMonoFlag>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	4b7c      	ldr	r3, [pc, #496]	; (80031ec <main+0x1134>)
 8002ffa:	701a      	strb	r2, [r3, #0]
#ifdef SET_DISPLAY
    					if (stereo)
 8002ffc:	4b7b      	ldr	r3, [pc, #492]	; (80031ec <main+0x1134>)
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d012      	beq.n	800302a <main+0xf72>
    						sprintf(st, "Rssi:%u Freq:%.1f S", RSSI, Freq);
 8003004:	4b78      	ldr	r3, [pc, #480]	; (80031e8 <main+0x1130>)
 8003006:	881b      	ldrh	r3, [r3, #0]
 8003008:	461c      	mov	r4, r3
 800300a:	4b72      	ldr	r3, [pc, #456]	; (80031d4 <main+0x111c>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4618      	mov	r0, r3
 8003010:	f7fd fa9a 	bl	8000548 <__aeabi_f2d>
 8003014:	4602      	mov	r2, r0
 8003016:	460b      	mov	r3, r1
 8003018:	f107 0050 	add.w	r0, r7, #80	; 0x50
 800301c:	e9cd 2300 	strd	r2, r3, [sp]
 8003020:	4622      	mov	r2, r4
 8003022:	4973      	ldr	r1, [pc, #460]	; (80031f0 <main+0x1138>)
 8003024:	f00c fcf0 	bl	800fa08 <siprintf>
 8003028:	e011      	b.n	800304e <main+0xf96>
    					else
    						sprintf(st, "Rssi:%u Freq:%.1f", RSSI, Freq);
 800302a:	4b6f      	ldr	r3, [pc, #444]	; (80031e8 <main+0x1130>)
 800302c:	881b      	ldrh	r3, [r3, #0]
 800302e:	461c      	mov	r4, r3
 8003030:	4b68      	ldr	r3, [pc, #416]	; (80031d4 <main+0x111c>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4618      	mov	r0, r3
 8003036:	f7fd fa87 	bl	8000548 <__aeabi_f2d>
 800303a:	4602      	mov	r2, r0
 800303c:	460b      	mov	r3, r1
 800303e:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8003042:	e9cd 2300 	strd	r2, r3, [sp]
 8003046:	4622      	mov	r2, r4
 8003048:	496a      	ldr	r1, [pc, #424]	; (80031f4 <main+0x113c>)
 800304a:	f00c fcdd 	bl	800fa08 <siprintf>
    					showLine(st, lin5, &lil, false);
 800304e:	1d3a      	adds	r2, r7, #4
 8003050:	f8b7 10b6 	ldrh.w	r1, [r7, #182]	; 0xb6
 8003054:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8003058:	2300      	movs	r3, #0
 800305a:	f001 f8d1 	bl	8004200 <showLine>
    					//showLine(sta, lin6, &lia, true);
    					////Report(1, "ChipID:0x%x Chan:%u Freq:%.2f RSSI:%u\r\n", rdaID, Chan, Freq, RSSI);
#endif
    				}
    				//
    				if (devError) {
 800305e:	4b66      	ldr	r3, [pc, #408]	; (80031f8 <main+0x1140>)
 8003060:	881b      	ldrh	r3, [r3, #0]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d00d      	beq.n	8003082 <main+0xfca>
    					dl = sprintf(tmp, "devError : 0x%04X", devError);
 8003066:	4b64      	ldr	r3, [pc, #400]	; (80031f8 <main+0x1140>)
 8003068:	881b      	ldrh	r3, [r3, #0]
 800306a:	461a      	mov	r2, r3
 800306c:	4963      	ldr	r1, [pc, #396]	; (80031fc <main+0x1144>)
 800306e:	4864      	ldr	r0, [pc, #400]	; (8003200 <main+0x1148>)
 8003070:	f00c fcca 	bl	800fa08 <siprintf>
 8003074:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
    					lastErr = devError;
 8003078:	4b5f      	ldr	r3, [pc, #380]	; (80031f8 <main+0x1140>)
 800307a:	881b      	ldrh	r3, [r3, #0]
 800307c:	f8a7 30d8 	strh.w	r3, [r7, #216]	; 0xd8
 8003080:	e013      	b.n	80030aa <main+0xff2>
    				} else {
    					if (lastErr) {
 8003082:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
 8003086:	2b00      	cmp	r3, #0
 8003088:	d00c      	beq.n	80030a4 <main+0xfec>
    						dl = sprintf(tmp, "Ver.%s", ver);
 800308a:	4b5e      	ldr	r3, [pc, #376]	; (8003204 <main+0x114c>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	461a      	mov	r2, r3
 8003090:	495d      	ldr	r1, [pc, #372]	; (8003208 <main+0x1150>)
 8003092:	485b      	ldr	r0, [pc, #364]	; (8003200 <main+0x1148>)
 8003094:	f00c fcb8 	bl	800fa08 <siprintf>
 8003098:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
    						lastErr = devOK;
 800309c:	2300      	movs	r3, #0
 800309e:	f8a7 30d8 	strh.w	r3, [r7, #216]	; 0xd8
 80030a2:	e002      	b.n	80030aa <main+0xff2>
    					} else dl = 0;
 80030a4:	2300      	movs	r3, #0
 80030a6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    				}
#ifdef SET_DISPLAY
    				if (dl) {
 80030aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d032      	beq.n	8003118 <main+0x1060>
    					ST7565_DrawFilledRectangle(0, SCREEN_HEIGHT - Font_6x8.FontHeight, SCREEN_WIDTH - 1, Font_6x8.FontHeight, PIX_OFF);
 80030b2:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80030bc:	b29b      	uxth	r3, r3
 80030be:	b219      	sxth	r1, r3
 80030c0:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 80030c4:	b21b      	sxth	r3, r3
 80030c6:	2200      	movs	r2, #0
 80030c8:	9200      	str	r2, [sp, #0]
 80030ca:	227f      	movs	r2, #127	; 0x7f
 80030cc:	2000      	movs	r0, #0
 80030ce:	f7fe fdb4 	bl	8001c3a <ST7565_DrawFilledRectangle>
    					x = ((SCREEN_WIDTH - (Font_6x8.FontWidth * dl)) >> 1) & 0x7f;
 80030d2:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 80030d6:	461a      	mov	r2, r3
 80030d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030dc:	fb02 f303 	mul.w	r3, r2, r3
 80030e0:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80030e4:	105b      	asrs	r3, r3, #1
 80030e6:	b29b      	uxth	r3, r3
 80030e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80030ec:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
    					ST7565_Print(x, SCREEN_HEIGHT - Font_6x8.FontHeight, tmp, &Font_6x8, 1, PIX_ON);
 80030f0:	f9b7 00b2 	ldrsh.w	r0, [r7, #178]	; 0xb2
 80030f4:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 80030f8:	b29b      	uxth	r3, r3
 80030fa:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80030fe:	b29b      	uxth	r3, r3
 8003100:	b219      	sxth	r1, r3
 8003102:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003106:	2201      	movs	r2, #1
 8003108:	9201      	str	r2, [sp, #4]
 800310a:	2201      	movs	r2, #1
 800310c:	9200      	str	r2, [sp, #0]
 800310e:	4a3c      	ldr	r2, [pc, #240]	; (8003200 <main+0x1148>)
 8003110:	f7fe fb3a 	bl	8001788 <ST7565_Print>
    					ST7565_Update();
 8003114:	f7fe f988 	bl	8001428 <ST7565_Update>
    				}
    				//
    				ST7565_Update();
 8003118:	f7fe f986 	bl	8001428 <ST7565_Update>
#endif
    			}
    			break;
 800311c:	e182      	b.n	8003424 <main+0x136c>
    			case evt_Clr:
    				devError = devOK;
 800311e:	4b36      	ldr	r3, [pc, #216]	; (80031f8 <main+0x1140>)
 8003120:	2200      	movs	r2, #0
 8003122:	801a      	strh	r2, [r3, #0]
    				Report(1, "[que:%u] Clear all Errors...\r\n", cntEvt);
 8003124:	4b2e      	ldr	r3, [pc, #184]	; (80031e0 <main+0x1128>)
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	b2db      	uxtb	r3, r3
 800312a:	461a      	mov	r2, r3
 800312c:	4937      	ldr	r1, [pc, #220]	; (800320c <main+0x1154>)
 800312e:	2001      	movs	r0, #1
 8003130:	f001 fa24 	bl	800457c <Report>
    			break;
 8003134:	e176      	b.n	8003424 <main+0x136c>
    			case evt_Help:
    				stx[0] = '\0';
 8003136:	4b36      	ldr	r3, [pc, #216]	; (8003210 <main+0x1158>)
 8003138:	2200      	movs	r2, #0
 800313a:	701a      	strb	r2, [r3, #0]
    				for (int8_t i = 0; i < MAX_CMDS; i++) sprintf(stx+strlen(stx), "\t%s\r\n", s_cmds[i]);
 800313c:	2300      	movs	r3, #0
 800313e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003142:	e015      	b.n	8003170 <main+0x10b8>
 8003144:	4832      	ldr	r0, [pc, #200]	; (8003210 <main+0x1158>)
 8003146:	f7fd f843 	bl	80001d0 <strlen>
 800314a:	4603      	mov	r3, r0
 800314c:	4a30      	ldr	r2, [pc, #192]	; (8003210 <main+0x1158>)
 800314e:	1898      	adds	r0, r3, r2
 8003150:	f997 30d7 	ldrsb.w	r3, [r7, #215]	; 0xd7
 8003154:	4a2f      	ldr	r2, [pc, #188]	; (8003214 <main+0x115c>)
 8003156:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800315a:	461a      	mov	r2, r3
 800315c:	492e      	ldr	r1, [pc, #184]	; (8003218 <main+0x1160>)
 800315e:	f00c fc53 	bl	800fa08 <siprintf>
 8003162:	f997 30d7 	ldrsb.w	r3, [r7, #215]	; 0xd7
 8003166:	b2db      	uxtb	r3, r3
 8003168:	3301      	adds	r3, #1
 800316a:	b2db      	uxtb	r3, r3
 800316c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003170:	f997 30d7 	ldrsb.w	r3, [r7, #215]	; 0xd7
 8003174:	2b15      	cmp	r3, #21
 8003176:	dde5      	ble.n	8003144 <main+0x108c>
    				Report(0, "%s", stx);
 8003178:	4a25      	ldr	r2, [pc, #148]	; (8003210 <main+0x1158>)
 800317a:	4918      	ldr	r1, [pc, #96]	; (80031dc <main+0x1124>)
 800317c:	2000      	movs	r0, #0
 800317e:	f001 f9fd 	bl	800457c <Report>
    			break;
 8003182:	e14f      	b.n	8003424 <main+0x136c>
    			case evt_Restart:
    				restart = 1;
 8003184:	4b25      	ldr	r3, [pc, #148]	; (800321c <main+0x1164>)
 8003186:	2201      	movs	r2, #1
 8003188:	701a      	strb	r2, [r3, #0]
    				Report(1, "[que:%u] Restart system...\r\n", cntEvt);
 800318a:	4b15      	ldr	r3, [pc, #84]	; (80031e0 <main+0x1128>)
 800318c:	781b      	ldrb	r3, [r3, #0]
 800318e:	b2db      	uxtb	r3, r3
 8003190:	461a      	mov	r2, r3
 8003192:	4923      	ldr	r1, [pc, #140]	; (8003220 <main+0x1168>)
 8003194:	2001      	movs	r0, #1
 8003196:	f001 f9f1 	bl	800457c <Report>
    			break;
 800319a:	e143      	b.n	8003424 <main+0x136c>
    			case evt_Epoch:
    				set_Date(epoch);
 800319c:	4b21      	ldr	r3, [pc, #132]	; (8003224 <main+0x116c>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4618      	mov	r0, r3
 80031a2:	f001 f8f1 	bl	8004388 <set_Date>
    				Report(1, "[que:%u] Set Unix TimeStamp to %lu\r\n", cntEvt, epoch);
 80031a6:	4b0e      	ldr	r3, [pc, #56]	; (80031e0 <main+0x1128>)
 80031a8:	781b      	ldrb	r3, [r3, #0]
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	461a      	mov	r2, r3
 80031ae:	4b1d      	ldr	r3, [pc, #116]	; (8003224 <main+0x116c>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	491d      	ldr	r1, [pc, #116]	; (8003228 <main+0x1170>)
 80031b4:	2001      	movs	r0, #1
 80031b6:	f001 f9e1 	bl	800457c <Report>
    			break;
 80031ba:	e133      	b.n	8003424 <main+0x136c>
    			case evt_Err:
    				Report(1, "[que:%u] Error input from uart\r\n", cntEvt);
 80031bc:	4b08      	ldr	r3, [pc, #32]	; (80031e0 <main+0x1128>)
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	461a      	mov	r2, r3
 80031c4:	4919      	ldr	r1, [pc, #100]	; (800322c <main+0x1174>)
 80031c6:	2001      	movs	r0, #1
 80031c8:	f001 f9d8 	bl	800457c <Report>
    			break;
 80031cc:	e12a      	b.n	8003424 <main+0x136c>
 80031ce:	bf00      	nop
 80031d0:	20002da9 	.word	0x20002da9
 80031d4:	200001e4 	.word	0x200001e4
 80031d8:	20002da4 	.word	0x20002da4
 80031dc:	08013680 	.word	0x08013680
 80031e0:	20001d6c 	.word	0x20001d6c
 80031e4:	08013938 	.word	0x08013938
 80031e8:	20002da6 	.word	0x20002da6
 80031ec:	20002dac 	.word	0x20002dac
 80031f0:	08013764 	.word	0x08013764
 80031f4:	08013778 	.word	0x08013778
 80031f8:	2000194c 	.word	0x2000194c
 80031fc:	08013974 	.word	0x08013974
 8003200:	200010cc 	.word	0x200010cc
 8003204:	20000004 	.word	0x20000004
 8003208:	0801372c 	.word	0x0801372c
 800320c:	08013988 	.word	0x08013988
 8003210:	20000ccc 	.word	0x20000ccc
 8003214:	2000001c 	.word	0x2000001c
 8003218:	080139a8 	.word	0x080139a8
 800321c:	20001d64 	.word	0x20001d64
 8003220:	080139b0 	.word	0x080139b0
 8003224:	20000018 	.word	0x20000018
 8003228:	080139d0 	.word	0x080139d0
 800322c:	080139f8 	.word	0x080139f8
#ifdef SET_W25FLASH
    			case evt_sRead:
    			case evt_sNext:
    			{
    				uint32_t w25_adr = (adr_sector * W25qxx_getSectorSize()) + offset_sector;
 8003230:	f003 fa3c 	bl	80066ac <W25qxx_getSectorSize>
 8003234:	4603      	mov	r3, r0
 8003236:	4a97      	ldr	r2, [pc, #604]	; (8003494 <main+0x13dc>)
 8003238:	6812      	ldr	r2, [r2, #0]
 800323a:	fb02 f303 	mul.w	r3, r2, r3
 800323e:	4a96      	ldr	r2, [pc, #600]	; (8003498 <main+0x13e0>)
 8003240:	6812      	ldr	r2, [r2, #0]
 8003242:	4413      	add	r3, r2
 8003244:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    				uint32_t dlin = list_sector;
 8003248:	4b94      	ldr	r3, [pc, #592]	; (800349c <main+0x13e4>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    				int step = 32;
 8003250:	2320      	movs	r3, #32
 8003252:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    				uint32_t ind = 0;
 8003256:	2300      	movs	r3, #0
 8003258:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    				W25qxx_ReadSector(fs_work, adr_sector, offset_sector, dlin);
 800325c:	4b8d      	ldr	r3, [pc, #564]	; (8003494 <main+0x13dc>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4619      	mov	r1, r3
 8003262:	4b8d      	ldr	r3, [pc, #564]	; (8003498 <main+0x13e0>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	461a      	mov	r2, r3
 8003268:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800326c:	488c      	ldr	r0, [pc, #560]	; (80034a0 <main+0x13e8>)
 800326e:	f003 fd2f 	bl	8006cd0 <W25qxx_ReadSector>
    				Report(0, "Read sector:%d offset:%d len:%u\r\n", adr_sector, offset_sector, dlin);
 8003272:	4b88      	ldr	r3, [pc, #544]	; (8003494 <main+0x13dc>)
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	4b88      	ldr	r3, [pc, #544]	; (8003498 <main+0x13e0>)
 8003278:	6819      	ldr	r1, [r3, #0]
 800327a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800327e:	9300      	str	r3, [sp, #0]
 8003280:	460b      	mov	r3, r1
 8003282:	4988      	ldr	r1, [pc, #544]	; (80034a4 <main+0x13ec>)
 8003284:	2000      	movs	r0, #0
 8003286:	f001 f979 	bl	800457c <Report>
    				while (ind < dlin) {
 800328a:	e05b      	b.n	8003344 <main+0x128c>
    					strf[0] = '\0';
 800328c:	4b86      	ldr	r3, [pc, #536]	; (80034a8 <main+0x13f0>)
 800328e:	2200      	movs	r2, #0
 8003290:	701a      	strb	r2, [r3, #0]
    					while (1) {
    						sprintf(strf+strlen(strf), "%06X ", (unsigned int)w25_adr);
 8003292:	4885      	ldr	r0, [pc, #532]	; (80034a8 <main+0x13f0>)
 8003294:	f7fc ff9c 	bl	80001d0 <strlen>
 8003298:	4603      	mov	r3, r0
 800329a:	4a83      	ldr	r2, [pc, #524]	; (80034a8 <main+0x13f0>)
 800329c:	4413      	add	r3, r2
 800329e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80032a2:	4982      	ldr	r1, [pc, #520]	; (80034ac <main+0x13f4>)
 80032a4:	4618      	mov	r0, r3
 80032a6:	f00c fbaf 	bl	800fa08 <siprintf>
    						for (int i = 0; i < step; i++) sprintf(strf+strlen(strf), " %02X", fs_work[i + ind]);
 80032aa:	2300      	movs	r3, #0
 80032ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80032b0:	e015      	b.n	80032de <main+0x1226>
 80032b2:	487d      	ldr	r0, [pc, #500]	; (80034a8 <main+0x13f0>)
 80032b4:	f7fc ff8c 	bl	80001d0 <strlen>
 80032b8:	4603      	mov	r3, r0
 80032ba:	4a7b      	ldr	r2, [pc, #492]	; (80034a8 <main+0x13f0>)
 80032bc:	1898      	adds	r0, r3, r2
 80032be:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80032c2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80032c6:	4413      	add	r3, r2
 80032c8:	4a75      	ldr	r2, [pc, #468]	; (80034a0 <main+0x13e8>)
 80032ca:	5cd3      	ldrb	r3, [r2, r3]
 80032cc:	461a      	mov	r2, r3
 80032ce:	4978      	ldr	r1, [pc, #480]	; (80034b0 <main+0x13f8>)
 80032d0:	f00c fb9a 	bl	800fa08 <siprintf>
 80032d4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80032d8:	3301      	adds	r3, #1
 80032da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80032de:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80032e2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80032e6:	429a      	cmp	r2, r3
 80032e8:	dbe3      	blt.n	80032b2 <main+0x11fa>
    						strcat(strf, "\r\n");
 80032ea:	486f      	ldr	r0, [pc, #444]	; (80034a8 <main+0x13f0>)
 80032ec:	f7fc ff70 	bl	80001d0 <strlen>
 80032f0:	4603      	mov	r3, r0
 80032f2:	461a      	mov	r2, r3
 80032f4:	4b6c      	ldr	r3, [pc, #432]	; (80034a8 <main+0x13f0>)
 80032f6:	4413      	add	r3, r2
 80032f8:	4a6e      	ldr	r2, [pc, #440]	; (80034b4 <main+0x13fc>)
 80032fa:	8811      	ldrh	r1, [r2, #0]
 80032fc:	7892      	ldrb	r2, [r2, #2]
 80032fe:	8019      	strh	r1, [r3, #0]
 8003300:	709a      	strb	r2, [r3, #2]
    						w25_adr += step;
 8003302:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003306:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800330a:	4413      	add	r3, r2
 800330c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    						ind += step;
 8003310:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003314:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8003318:	4413      	add	r3, r2
 800331a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    						if (!(ind % W25qxx_getPageSize())) break;
 800331e:	f003 f9d1 	bl	80066c4 <W25qxx_getPageSize>
 8003322:	4602      	mov	r2, r0
 8003324:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003328:	fbb3 f1f2 	udiv	r1, r3, r2
 800332c:	fb01 f202 	mul.w	r2, r1, r2
 8003330:	1a9b      	subs	r3, r3, r2
 8003332:	2b00      	cmp	r3, #0
 8003334:	d000      	beq.n	8003338 <main+0x1280>
    						sprintf(strf+strlen(strf), "%06X ", (unsigned int)w25_adr);
 8003336:	e7ac      	b.n	8003292 <main+0x11da>
    						if (!(ind % W25qxx_getPageSize())) break;
 8003338:	bf00      	nop
    					}
    					Report(0, "%s", strf);
 800333a:	4a5b      	ldr	r2, [pc, #364]	; (80034a8 <main+0x13f0>)
 800333c:	495e      	ldr	r1, [pc, #376]	; (80034b8 <main+0x1400>)
 800333e:	2000      	movs	r0, #0
 8003340:	f001 f91c 	bl	800457c <Report>
    				while (ind < dlin) {
 8003344:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8003348:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800334c:	429a      	cmp	r2, r3
 800334e:	d39d      	bcc.n	800328c <main+0x11d4>
    				}
    			}
    			break;
 8003350:	e068      	b.n	8003424 <main+0x136c>
    			case evt_sWrite:
    			{
    				uint32_t ss = W25qxx_getSectorSize();
 8003352:	f003 f9ab 	bl	80066ac <W25qxx_getSectorSize>
 8003356:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
    				if (!W25qxx_IsEmptySector(adr_sector, 0, ss)) W25qxx_EraseSector(adr_sector);
 800335a:	4b4e      	ldr	r3, [pc, #312]	; (8003494 <main+0x13dc>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003362:	2100      	movs	r1, #0
 8003364:	4618      	mov	r0, r3
 8003366:	f003 fa17 	bl	8006798 <W25qxx_IsEmptySector>
 800336a:	4603      	mov	r3, r0
 800336c:	f083 0301 	eor.w	r3, r3, #1
 8003370:	b2db      	uxtb	r3, r3
 8003372:	2b00      	cmp	r3, #0
 8003374:	d004      	beq.n	8003380 <main+0x12c8>
 8003376:	4b47      	ldr	r3, [pc, #284]	; (8003494 <main+0x13dc>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4618      	mov	r0, r3
 800337c:	f003 f9b0 	bl	80066e0 <W25qxx_EraseSector>
    				memset(fs_work, byte_write, ss);
 8003380:	4b4e      	ldr	r3, [pc, #312]	; (80034bc <main+0x1404>)
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003388:	4619      	mov	r1, r3
 800338a:	4845      	ldr	r0, [pc, #276]	; (80034a0 <main+0x13e8>)
 800338c:	f00b fdc4 	bl	800ef18 <memset>
    				if (len_write != -1) ss = len_write;
 8003390:	4b4b      	ldr	r3, [pc, #300]	; (80034c0 <main+0x1408>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003398:	d003      	beq.n	80033a2 <main+0x12ea>
 800339a:	4b49      	ldr	r3, [pc, #292]	; (80034c0 <main+0x1408>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    				W25qxx_WriteSector(fs_work, adr_sector, offset_sector, ss);
 80033a2:	4b3c      	ldr	r3, [pc, #240]	; (8003494 <main+0x13dc>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4619      	mov	r1, r3
 80033a8:	4b3b      	ldr	r3, [pc, #236]	; (8003498 <main+0x13e0>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	461a      	mov	r2, r3
 80033ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80033b2:	483b      	ldr	r0, [pc, #236]	; (80034a0 <main+0x13e8>)
 80033b4:	f003 fb64 	bl	8006a80 <W25qxx_WriteSector>
    				Report(0, "Fill sector:%d byte:%02X len:%d done\r\n", adr_sector, byte_write, ss);
 80033b8:	4b36      	ldr	r3, [pc, #216]	; (8003494 <main+0x13dc>)
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	4b3f      	ldr	r3, [pc, #252]	; (80034bc <main+0x1404>)
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	4619      	mov	r1, r3
 80033c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80033c6:	9300      	str	r3, [sp, #0]
 80033c8:	460b      	mov	r3, r1
 80033ca:	493e      	ldr	r1, [pc, #248]	; (80034c4 <main+0x140c>)
 80033cc:	2000      	movs	r0, #0
 80033ce:	f001 f8d5 	bl	800457c <Report>
    			}
    			break;
 80033d2:	e027      	b.n	8003424 <main+0x136c>
    			case evt_sErase:
    				if (adr_sector == -1) {
 80033d4:	4b2f      	ldr	r3, [pc, #188]	; (8003494 <main+0x13dc>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033dc:	d10c      	bne.n	80033f8 <main+0x1340>
    					Report(1, "Erase flash");
 80033de:	493a      	ldr	r1, [pc, #232]	; (80034c8 <main+0x1410>)
 80033e0:	2001      	movs	r0, #1
 80033e2:	f001 f8cb 	bl	800457c <Report>
    					flag_sector = true;
 80033e6:	4b39      	ldr	r3, [pc, #228]	; (80034cc <main+0x1414>)
 80033e8:	2201      	movs	r2, #1
 80033ea:	701a      	strb	r2, [r3, #0]
    					btime = HAL_GetTick();
 80033ec:	f003 fd6e 	bl	8006ecc <HAL_GetTick>
 80033f0:	4603      	mov	r3, r0
 80033f2:	4a37      	ldr	r2, [pc, #220]	; (80034d0 <main+0x1418>)
 80033f4:	6013      	str	r3, [r2, #0]
    				} else {
    					W25qxx_EraseSector(adr_sector);
    					Report(1, "Erase sector:%d done\r\n", adr_sector);
    				}
    			break;
 80033f6:	e015      	b.n	8003424 <main+0x136c>
    					W25qxx_EraseSector(adr_sector);
 80033f8:	4b26      	ldr	r3, [pc, #152]	; (8003494 <main+0x13dc>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4618      	mov	r0, r3
 80033fe:	f003 f96f 	bl	80066e0 <W25qxx_EraseSector>
    					Report(1, "Erase sector:%d done\r\n", adr_sector);
 8003402:	4b24      	ldr	r3, [pc, #144]	; (8003494 <main+0x13dc>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	461a      	mov	r2, r3
 8003408:	4932      	ldr	r1, [pc, #200]	; (80034d4 <main+0x141c>)
 800340a:	2001      	movs	r0, #1
 800340c:	f001 f8b6 	bl	800457c <Report>
    			break;
 8003410:	e008      	b.n	8003424 <main+0x136c>
    			break;
 8003412:	bf00      	nop
 8003414:	e006      	b.n	8003424 <main+0x136c>
    			break;
 8003416:	bf00      	nop
 8003418:	e004      	b.n	8003424 <main+0x136c>
    			break;
 800341a:	bf00      	nop
 800341c:	e002      	b.n	8003424 <main+0x136c>
				break;
 800341e:	bf00      	nop
 8003420:	e000      	b.n	8003424 <main+0x136c>
    			break;
 8003422:	bf00      	nop
#endif
    		}
    		if ((evt >= evt_sRead) && (evt <= evt_sWrite)) {
 8003424:	4b2c      	ldr	r3, [pc, #176]	; (80034d8 <main+0x1420>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	2b03      	cmp	r3, #3
 800342a:	dd0b      	ble.n	8003444 <main+0x138c>
 800342c:	4b2a      	ldr	r3, [pc, #168]	; (80034d8 <main+0x1420>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	2b07      	cmp	r3, #7
 8003432:	dc07      	bgt.n	8003444 <main+0x138c>
    			last_cmd_sector =  evt;//cmd_sector;
 8003434:	4b28      	ldr	r3, [pc, #160]	; (80034d8 <main+0x1420>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a28      	ldr	r2, [pc, #160]	; (80034dc <main+0x1424>)
 800343a:	6013      	str	r3, [r2, #0]
    			cmd_sector = sNone;
 800343c:	4b28      	ldr	r3, [pc, #160]	; (80034e0 <main+0x1428>)
 800343e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003442:	601a      	str	r2, [r3, #0]
    		}
    	}
#endif

#ifdef SET_W25FLASH
    	if (flag_sector) {
 8003444:	4b21      	ldr	r3, [pc, #132]	; (80034cc <main+0x1414>)
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d060      	beq.n	800350e <main+0x1456>
    		adr_sector++;
 800344c:	4b11      	ldr	r3, [pc, #68]	; (8003494 <main+0x13dc>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	3301      	adds	r3, #1
 8003452:	4a10      	ldr	r2, [pc, #64]	; (8003494 <main+0x13dc>)
 8003454:	6013      	str	r3, [r2, #0]
    		if (adr_sector >= W25qxx_getSectorCount()) {
 8003456:	f003 f91d 	bl	8006694 <W25qxx_getSectorCount>
 800345a:	4603      	mov	r3, r0
 800345c:	4a0d      	ldr	r2, [pc, #52]	; (8003494 <main+0x13dc>)
 800345e:	6812      	ldr	r2, [r2, #0]
 8003460:	4293      	cmp	r3, r2
 8003462:	d845      	bhi.n	80034f0 <main+0x1438>
    			flag_sector = false;
 8003464:	4b19      	ldr	r3, [pc, #100]	; (80034cc <main+0x1414>)
 8003466:	2200      	movs	r2, #0
 8003468:	701a      	strb	r2, [r3, #0]
    			etime = HAL_GetTick();
 800346a:	f003 fd2f 	bl	8006ecc <HAL_GetTick>
 800346e:	4603      	mov	r3, r0
 8003470:	4a1c      	ldr	r2, [pc, #112]	; (80034e4 <main+0x142c>)
 8003472:	6013      	str	r3, [r2, #0]
    			Report(0, " done (%lu sec)\r\n", (etime - btime) / 1000);
 8003474:	4b1b      	ldr	r3, [pc, #108]	; (80034e4 <main+0x142c>)
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	4b15      	ldr	r3, [pc, #84]	; (80034d0 <main+0x1418>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	4a1a      	ldr	r2, [pc, #104]	; (80034e8 <main+0x1430>)
 8003480:	fba2 2303 	umull	r2, r3, r2, r3
 8003484:	099b      	lsrs	r3, r3, #6
 8003486:	461a      	mov	r2, r3
 8003488:	4918      	ldr	r1, [pc, #96]	; (80034ec <main+0x1434>)
 800348a:	2000      	movs	r0, #0
 800348c:	f001 f876 	bl	800457c <Report>
 8003490:	e03d      	b.n	800350e <main+0x1456>
 8003492:	bf00      	nop
 8003494:	20001d70 	.word	0x20001d70
 8003498:	20001d74 	.word	0x20001d74
 800349c:	20001d78 	.word	0x20001d78
 80034a0:	20001d84 	.word	0x20001d84
 80034a4:	08013a1c 	.word	0x08013a1c
 80034a8:	2000154c 	.word	0x2000154c
 80034ac:	08013a40 	.word	0x08013a40
 80034b0:	08013a48 	.word	0x08013a48
 80034b4:	08013a50 	.word	0x08013a50
 80034b8:	08013680 	.word	0x08013680
 80034bc:	200001e0 	.word	0x200001e0
 80034c0:	20001d7c 	.word	0x20001d7c
 80034c4:	08013a54 	.word	0x08013a54
 80034c8:	08013a7c 	.word	0x08013a7c
 80034cc:	20001d80 	.word	0x20001d80
 80034d0:	20002d88 	.word	0x20002d88
 80034d4:	08013a88 	.word	0x08013a88
 80034d8:	200001cc 	.word	0x200001cc
 80034dc:	200001dc 	.word	0x200001dc
 80034e0:	200001d8 	.word	0x200001d8
 80034e4:	20002d8c 	.word	0x20002d8c
 80034e8:	10624dd3 	.word	0x10624dd3
 80034ec:	08013aa0 	.word	0x08013aa0
    		} else {
    			//putEvt(evt_sErase);
    			W25qxx_EraseSector(adr_sector);
 80034f0:	4b37      	ldr	r3, [pc, #220]	; (80035d0 <main+0x1518>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4618      	mov	r0, r3
 80034f6:	f003 f8f3 	bl	80066e0 <W25qxx_EraseSector>
    			if (!(adr_sector % 8)) Report(0, ".");
 80034fa:	4b35      	ldr	r3, [pc, #212]	; (80035d0 <main+0x1518>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 0307 	and.w	r3, r3, #7
 8003502:	2b00      	cmp	r3, #0
 8003504:	d103      	bne.n	800350e <main+0x1456>
 8003506:	4933      	ldr	r1, [pc, #204]	; (80035d4 <main+0x151c>)
 8003508:	2000      	movs	r0, #0
 800350a:	f001 f837 	bl	800457c <Report>
    	}
#endif


#ifdef SET_BLE
    	if (bleQueAckFlag) {
 800350e:	4b32      	ldr	r3, [pc, #200]	; (80035d8 <main+0x1520>)
 8003510:	781b      	ldrb	r3, [r3, #0]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d00b      	beq.n	800352e <main+0x1476>
    		if (getRECQ(bleRxBuf, &bleQueAck) >= 0) {
 8003516:	4931      	ldr	r1, [pc, #196]	; (80035dc <main+0x1524>)
 8003518:	4831      	ldr	r0, [pc, #196]	; (80035e0 <main+0x1528>)
 800351a:	f7fe fd48 	bl	8001fae <getRECQ>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	db04      	blt.n	800352e <main+0x1476>
    			Report(1, "[BLE] %s\r\n", bleRxBuf);
 8003524:	4a2e      	ldr	r2, [pc, #184]	; (80035e0 <main+0x1528>)
 8003526:	492f      	ldr	r1, [pc, #188]	; (80035e4 <main+0x152c>)
 8003528:	2001      	movs	r0, #1
 800352a:	f001 f827 	bl	800457c <Report>
    		}
    	}
    	//
    	if (bleQueCmdFlag) {//command to GSM module queue is ready
 800352e:	4b2e      	ldr	r3, [pc, #184]	; (80035e8 <main+0x1530>)
 8003530:	781b      	ldrb	r3, [r3, #0]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d016      	beq.n	8003564 <main+0x14ac>
    		if (getRECQ(bleBuf, &bleQueCmd) >= 0) {
 8003536:	492d      	ldr	r1, [pc, #180]	; (80035ec <main+0x1534>)
 8003538:	482d      	ldr	r0, [pc, #180]	; (80035f0 <main+0x1538>)
 800353a:	f7fe fd38 	bl	8001fae <getRECQ>
 800353e:	4603      	mov	r3, r0
 8003540:	2b00      	cmp	r3, #0
 8003542:	db0f      	blt.n	8003564 <main+0x14ac>
    			strcat(bleBuf, "\r\n");
 8003544:	482a      	ldr	r0, [pc, #168]	; (80035f0 <main+0x1538>)
 8003546:	f7fc fe43 	bl	80001d0 <strlen>
 800354a:	4603      	mov	r3, r0
 800354c:	461a      	mov	r2, r3
 800354e:	4b28      	ldr	r3, [pc, #160]	; (80035f0 <main+0x1538>)
 8003550:	4413      	add	r3, r2
 8003552:	4a28      	ldr	r2, [pc, #160]	; (80035f4 <main+0x153c>)
 8003554:	8811      	ldrh	r1, [r2, #0]
 8003556:	7892      	ldrb	r2, [r2, #2]
 8003558:	8019      	strh	r1, [r3, #0]
 800355a:	709a      	strb	r2, [r3, #2]
    			bleWrite(bleBuf, 1);
 800355c:	2101      	movs	r1, #1
 800355e:	4824      	ldr	r0, [pc, #144]	; (80035f0 <main+0x1538>)
 8003560:	f7fe fc44 	bl	8001dec <bleWrite>
    		}
    	}
#endif


    	if (devError) {
 8003564:	4b24      	ldr	r3, [pc, #144]	; (80035f8 <main+0x1540>)
 8003566:	881b      	ldrh	r3, [r3, #0]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d009      	beq.n	8003580 <main+0x14c8>
    		errLedOn(true);
 800356c:	2001      	movs	r0, #1
 800356e:	f000 feb5 	bl	80042dc <errLedOn>
    		HAL_Delay(50);
 8003572:	2032      	movs	r0, #50	; 0x32
 8003574:	f003 fcb6 	bl	8006ee4 <HAL_Delay>
    		errLedOn(false);
 8003578:	2000      	movs	r0, #0
 800357a:	f000 feaf 	bl	80042dc <errLedOn>
 800357e:	e009      	b.n	8003594 <main+0x14dc>
    	} else {
    		if (HAL_GPIO_ReadPin(ERR_LED_GPIO_Port, ERR_LED_Pin)) errLedOn(false);
 8003580:	2108      	movs	r1, #8
 8003582:	481e      	ldr	r0, [pc, #120]	; (80035fc <main+0x1544>)
 8003584:	f004 fa64 	bl	8007a50 <HAL_GPIO_ReadPin>
 8003588:	4603      	mov	r3, r0
 800358a:	2b00      	cmp	r3, #0
 800358c:	d002      	beq.n	8003594 <main+0x14dc>
 800358e:	2000      	movs	r0, #0
 8003590:	f000 fea4 	bl	80042dc <errLedOn>
    while (!restart) {
 8003594:	4b1a      	ldr	r3, [pc, #104]	; (8003600 <main+0x1548>)
 8003596:	781b      	ldrb	r3, [r3, #0]
 8003598:	b2db      	uxtb	r3, r3
 800359a:	2b00      	cmp	r3, #0
 800359c:	f43f a901 	beq.w	80027a2 <main+0x6ea>

    /* USER CODE BEGIN 3 */

    }//while (!restart)

    HAL_TIM_Base_Stop_IT(tikPort);
 80035a0:	4b18      	ldr	r3, [pc, #96]	; (8003604 <main+0x154c>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4618      	mov	r0, r3
 80035a6:	f009 fad7 	bl	800cb58 <HAL_TIM_Base_Stop_IT>

#ifdef SET_DISPLAY
    ST7565_Reset();
 80035aa:	f7fd fd8d 	bl	80010c8 <ST7565_Reset>
    ST7565_CMD_DISPLAY(CMD_DISPLAY_OFF);
 80035ae:	20ae      	movs	r0, #174	; 0xae
 80035b0:	f7fd febc 	bl	800132c <ST7565_CMD_DISPLAY>
#endif


    Report(1, "[que:%u] Stop application...\r\n", cntEvt);
 80035b4:	4b14      	ldr	r3, [pc, #80]	; (8003608 <main+0x1550>)
 80035b6:	781b      	ldrb	r3, [r3, #0]
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	461a      	mov	r2, r3
 80035bc:	4913      	ldr	r1, [pc, #76]	; (800360c <main+0x1554>)
 80035be:	2001      	movs	r0, #1
 80035c0:	f000 ffdc 	bl	800457c <Report>

    HAL_Delay(250);
 80035c4:	20fa      	movs	r0, #250	; 0xfa
 80035c6:	f003 fc8d 	bl	8006ee4 <HAL_Delay>

    NVIC_SystemReset();
 80035ca:	f7fe fb8f 	bl	8001cec <__NVIC_SystemReset>
 80035ce:	bf00      	nop
 80035d0:	20001d70 	.word	0x20001d70
 80035d4:	08013ab4 	.word	0x08013ab4
 80035d8:	20003587 	.word	0x20003587
 80035dc:	20003440 	.word	0x20003440
 80035e0:	2000333c 	.word	0x2000333c
 80035e4:	08013ab8 	.word	0x08013ab8
 80035e8:	20003588 	.word	0x20003588
 80035ec:	200034e4 	.word	0x200034e4
 80035f0:	2000323c 	.word	0x2000323c
 80035f4:	08013a50 	.word	0x08013a50
 80035f8:	2000194c 	.word	0x2000194c
 80035fc:	48000800 	.word	0x48000800
 8003600:	20001d64 	.word	0x20001d64
 8003604:	20000008 	.word	0x20000008
 8003608:	20001d6c 	.word	0x20001d6c
 800360c:	08013ac4 	.word	0x08013ac4

08003610 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b096      	sub	sp, #88	; 0x58
 8003614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003616:	f107 0314 	add.w	r3, r7, #20
 800361a:	2244      	movs	r2, #68	; 0x44
 800361c:	2100      	movs	r1, #0
 800361e:	4618      	mov	r0, r3
 8003620:	f00b fc7a 	bl	800ef18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003624:	463b      	mov	r3, r7
 8003626:	2200      	movs	r2, #0
 8003628:	601a      	str	r2, [r3, #0]
 800362a:	605a      	str	r2, [r3, #4]
 800362c:	609a      	str	r2, [r3, #8]
 800362e:	60da      	str	r2, [r3, #12]
 8003630:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8003632:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003636:	f005 ff49 	bl	80094cc <HAL_PWREx_ControlVoltageScaling>
 800363a:	4603      	mov	r3, r0
 800363c:	2b00      	cmp	r3, #0
 800363e:	d001      	beq.n	8003644 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8003640:	f001 fcc8 	bl	8004fd4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8003644:	2309      	movs	r3, #9
 8003646:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003648:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800364c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800364e:	2301      	movs	r3, #1
 8003650:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003652:	2302      	movs	r3, #2
 8003654:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003656:	2303      	movs	r3, #3
 8003658:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800365a:	2301      	movs	r3, #1
 800365c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 800365e:	2314      	movs	r3, #20
 8003660:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8003662:	2307      	movs	r3, #7
 8003664:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003666:	2302      	movs	r3, #2
 8003668:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800366a:	2302      	movs	r3, #2
 800366c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800366e:	f107 0314 	add.w	r3, r7, #20
 8003672:	4618      	mov	r0, r3
 8003674:	f005 ffc8 	bl	8009608 <HAL_RCC_OscConfig>
 8003678:	4603      	mov	r3, r0
 800367a:	2b00      	cmp	r3, #0
 800367c:	d001      	beq.n	8003682 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800367e:	f001 fca9 	bl	8004fd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003682:	230f      	movs	r3, #15
 8003684:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003686:	2303      	movs	r3, #3
 8003688:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800368a:	2300      	movs	r3, #0
 800368c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800368e:	2300      	movs	r3, #0
 8003690:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003692:	2300      	movs	r3, #0
 8003694:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003696:	463b      	mov	r3, r7
 8003698:	2104      	movs	r1, #4
 800369a:	4618      	mov	r0, r3
 800369c:	f006 fb90 	bl	8009dc0 <HAL_RCC_ClockConfig>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d001      	beq.n	80036aa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80036a6:	f001 fc95 	bl	8004fd4 <Error_Handler>
  }
}
 80036aa:	bf00      	nop
 80036ac:	3758      	adds	r7, #88	; 0x58
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
	...

080036b4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80036b8:	4b1b      	ldr	r3, [pc, #108]	; (8003728 <MX_I2C1_Init+0x74>)
 80036ba:	4a1c      	ldr	r2, [pc, #112]	; (800372c <MX_I2C1_Init+0x78>)
 80036bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909EEE;
 80036be:	4b1a      	ldr	r3, [pc, #104]	; (8003728 <MX_I2C1_Init+0x74>)
 80036c0:	4a1b      	ldr	r2, [pc, #108]	; (8003730 <MX_I2C1_Init+0x7c>)
 80036c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80036c4:	4b18      	ldr	r3, [pc, #96]	; (8003728 <MX_I2C1_Init+0x74>)
 80036c6:	2200      	movs	r2, #0
 80036c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80036ca:	4b17      	ldr	r3, [pc, #92]	; (8003728 <MX_I2C1_Init+0x74>)
 80036cc:	2201      	movs	r2, #1
 80036ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80036d0:	4b15      	ldr	r3, [pc, #84]	; (8003728 <MX_I2C1_Init+0x74>)
 80036d2:	2200      	movs	r2, #0
 80036d4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80036d6:	4b14      	ldr	r3, [pc, #80]	; (8003728 <MX_I2C1_Init+0x74>)
 80036d8:	2200      	movs	r2, #0
 80036da:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80036dc:	4b12      	ldr	r3, [pc, #72]	; (8003728 <MX_I2C1_Init+0x74>)
 80036de:	2200      	movs	r2, #0
 80036e0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80036e2:	4b11      	ldr	r3, [pc, #68]	; (8003728 <MX_I2C1_Init+0x74>)
 80036e4:	2200      	movs	r2, #0
 80036e6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80036e8:	4b0f      	ldr	r3, [pc, #60]	; (8003728 <MX_I2C1_Init+0x74>)
 80036ea:	2200      	movs	r2, #0
 80036ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80036ee:	480e      	ldr	r0, [pc, #56]	; (8003728 <MX_I2C1_Init+0x74>)
 80036f0:	f004 fa10 	bl	8007b14 <HAL_I2C_Init>
 80036f4:	4603      	mov	r3, r0
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d001      	beq.n	80036fe <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80036fa:	f001 fc6b 	bl	8004fd4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 80036fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003702:	4809      	ldr	r0, [pc, #36]	; (8003728 <MX_I2C1_Init+0x74>)
 8003704:	f005 fdc8 	bl	8009298 <HAL_I2CEx_ConfigAnalogFilter>
 8003708:	4603      	mov	r3, r0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d001      	beq.n	8003712 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800370e:	f001 fc61 	bl	8004fd4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003712:	2100      	movs	r1, #0
 8003714:	4804      	ldr	r0, [pc, #16]	; (8003728 <MX_I2C1_Init+0x74>)
 8003716:	f005 fe0a 	bl	800932e <HAL_I2CEx_ConfigDigitalFilter>
 800371a:	4603      	mov	r3, r0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d001      	beq.n	8003724 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8003720:	f001 fc58 	bl	8004fd4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003724:	bf00      	nop
 8003726:	bd80      	pop	{r7, pc}
 8003728:	20000840 	.word	0x20000840
 800372c:	40005400 	.word	0x40005400
 8003730:	10909eee 	.word	0x10909eee

08003734 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b086      	sub	sp, #24
 8003738:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800373a:	1d3b      	adds	r3, r7, #4
 800373c:	2200      	movs	r2, #0
 800373e:	601a      	str	r2, [r3, #0]
 8003740:	605a      	str	r2, [r3, #4]
 8003742:	609a      	str	r2, [r3, #8]
 8003744:	60da      	str	r2, [r3, #12]
 8003746:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8003748:	2300      	movs	r3, #0
 800374a:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800374c:	4b25      	ldr	r3, [pc, #148]	; (80037e4 <MX_RTC_Init+0xb0>)
 800374e:	4a26      	ldr	r2, [pc, #152]	; (80037e8 <MX_RTC_Init+0xb4>)
 8003750:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003752:	4b24      	ldr	r3, [pc, #144]	; (80037e4 <MX_RTC_Init+0xb0>)
 8003754:	2200      	movs	r2, #0
 8003756:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003758:	4b22      	ldr	r3, [pc, #136]	; (80037e4 <MX_RTC_Init+0xb0>)
 800375a:	227f      	movs	r2, #127	; 0x7f
 800375c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800375e:	4b21      	ldr	r3, [pc, #132]	; (80037e4 <MX_RTC_Init+0xb0>)
 8003760:	22ff      	movs	r2, #255	; 0xff
 8003762:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003764:	4b1f      	ldr	r3, [pc, #124]	; (80037e4 <MX_RTC_Init+0xb0>)
 8003766:	2200      	movs	r2, #0
 8003768:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800376a:	4b1e      	ldr	r3, [pc, #120]	; (80037e4 <MX_RTC_Init+0xb0>)
 800376c:	2200      	movs	r2, #0
 800376e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003770:	4b1c      	ldr	r3, [pc, #112]	; (80037e4 <MX_RTC_Init+0xb0>)
 8003772:	2200      	movs	r2, #0
 8003774:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003776:	4b1b      	ldr	r3, [pc, #108]	; (80037e4 <MX_RTC_Init+0xb0>)
 8003778:	2200      	movs	r2, #0
 800377a:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800377c:	4819      	ldr	r0, [pc, #100]	; (80037e4 <MX_RTC_Init+0xb0>)
 800377e:	f007 f9ff 	bl	800ab80 <HAL_RTC_Init>
 8003782:	4603      	mov	r3, r0
 8003784:	2b00      	cmp	r3, #0
 8003786:	d001      	beq.n	800378c <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8003788:	f001 fc24 	bl	8004fd4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800378c:	2300      	movs	r3, #0
 800378e:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8003790:	2300      	movs	r3, #0
 8003792:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8003794:	2300      	movs	r3, #0
 8003796:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003798:	2300      	movs	r3, #0
 800379a:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800379c:	2300      	movs	r3, #0
 800379e:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80037a0:	1d3b      	adds	r3, r7, #4
 80037a2:	2201      	movs	r2, #1
 80037a4:	4619      	mov	r1, r3
 80037a6:	480f      	ldr	r0, [pc, #60]	; (80037e4 <MX_RTC_Init+0xb0>)
 80037a8:	f007 fa65 	bl	800ac76 <HAL_RTC_SetTime>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d001      	beq.n	80037b6 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 80037b2:	f001 fc0f 	bl	8004fd4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 80037b6:	2303      	movs	r3, #3
 80037b8:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JULY;
 80037ba:	2307      	movs	r3, #7
 80037bc:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x6;
 80037be:	2306      	movs	r3, #6
 80037c0:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x22;
 80037c2:	2322      	movs	r3, #34	; 0x22
 80037c4:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80037c6:	463b      	mov	r3, r7
 80037c8:	2201      	movs	r2, #1
 80037ca:	4619      	mov	r1, r3
 80037cc:	4805      	ldr	r0, [pc, #20]	; (80037e4 <MX_RTC_Init+0xb0>)
 80037ce:	f007 fb4b 	bl	800ae68 <HAL_RTC_SetDate>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d001      	beq.n	80037dc <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 80037d8:	f001 fbfc 	bl	8004fd4 <Error_Handler>

  //set_Date(epoch);

  /* USER CODE END RTC_Init 2 */

}
 80037dc:	bf00      	nop
 80037de:	3718      	adds	r7, #24
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	20000924 	.word	0x20000924
 80037e8:	40002800 	.word	0x40002800

080037ec <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80037f0:	4b1b      	ldr	r3, [pc, #108]	; (8003860 <MX_SPI1_Init+0x74>)
 80037f2:	4a1c      	ldr	r2, [pc, #112]	; (8003864 <MX_SPI1_Init+0x78>)
 80037f4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80037f6:	4b1a      	ldr	r3, [pc, #104]	; (8003860 <MX_SPI1_Init+0x74>)
 80037f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80037fc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80037fe:	4b18      	ldr	r3, [pc, #96]	; (8003860 <MX_SPI1_Init+0x74>)
 8003800:	2200      	movs	r2, #0
 8003802:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003804:	4b16      	ldr	r3, [pc, #88]	; (8003860 <MX_SPI1_Init+0x74>)
 8003806:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800380a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800380c:	4b14      	ldr	r3, [pc, #80]	; (8003860 <MX_SPI1_Init+0x74>)
 800380e:	2200      	movs	r2, #0
 8003810:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003812:	4b13      	ldr	r3, [pc, #76]	; (8003860 <MX_SPI1_Init+0x74>)
 8003814:	2200      	movs	r2, #0
 8003816:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003818:	4b11      	ldr	r3, [pc, #68]	; (8003860 <MX_SPI1_Init+0x74>)
 800381a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800381e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8003820:	4b0f      	ldr	r3, [pc, #60]	; (8003860 <MX_SPI1_Init+0x74>)
 8003822:	2208      	movs	r2, #8
 8003824:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003826:	4b0e      	ldr	r3, [pc, #56]	; (8003860 <MX_SPI1_Init+0x74>)
 8003828:	2200      	movs	r2, #0
 800382a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800382c:	4b0c      	ldr	r3, [pc, #48]	; (8003860 <MX_SPI1_Init+0x74>)
 800382e:	2200      	movs	r2, #0
 8003830:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003832:	4b0b      	ldr	r3, [pc, #44]	; (8003860 <MX_SPI1_Init+0x74>)
 8003834:	2200      	movs	r2, #0
 8003836:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003838:	4b09      	ldr	r3, [pc, #36]	; (8003860 <MX_SPI1_Init+0x74>)
 800383a:	2207      	movs	r2, #7
 800383c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800383e:	4b08      	ldr	r3, [pc, #32]	; (8003860 <MX_SPI1_Init+0x74>)
 8003840:	2200      	movs	r2, #0
 8003842:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003844:	4b06      	ldr	r3, [pc, #24]	; (8003860 <MX_SPI1_Init+0x74>)
 8003846:	2200      	movs	r2, #0
 8003848:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800384a:	4805      	ldr	r0, [pc, #20]	; (8003860 <MX_SPI1_Init+0x74>)
 800384c:	f007 fcb2 	bl	800b1b4 <HAL_SPI_Init>
 8003850:	4603      	mov	r3, r0
 8003852:	2b00      	cmp	r3, #0
 8003854:	d001      	beq.n	800385a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8003856:	f001 fbbd 	bl	8004fd4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800385a:	bf00      	nop
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	20000948 	.word	0x20000948
 8003864:	40013000 	.word	0x40013000

08003868 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800386c:	4b1b      	ldr	r3, [pc, #108]	; (80038dc <MX_SPI2_Init+0x74>)
 800386e:	4a1c      	ldr	r2, [pc, #112]	; (80038e0 <MX_SPI2_Init+0x78>)
 8003870:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003872:	4b1a      	ldr	r3, [pc, #104]	; (80038dc <MX_SPI2_Init+0x74>)
 8003874:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003878:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800387a:	4b18      	ldr	r3, [pc, #96]	; (80038dc <MX_SPI2_Init+0x74>)
 800387c:	2200      	movs	r2, #0
 800387e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003880:	4b16      	ldr	r3, [pc, #88]	; (80038dc <MX_SPI2_Init+0x74>)
 8003882:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003886:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003888:	4b14      	ldr	r3, [pc, #80]	; (80038dc <MX_SPI2_Init+0x74>)
 800388a:	2200      	movs	r2, #0
 800388c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800388e:	4b13      	ldr	r3, [pc, #76]	; (80038dc <MX_SPI2_Init+0x74>)
 8003890:	2200      	movs	r2, #0
 8003892:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003894:	4b11      	ldr	r3, [pc, #68]	; (80038dc <MX_SPI2_Init+0x74>)
 8003896:	f44f 7200 	mov.w	r2, #512	; 0x200
 800389a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800389c:	4b0f      	ldr	r3, [pc, #60]	; (80038dc <MX_SPI2_Init+0x74>)
 800389e:	2200      	movs	r2, #0
 80038a0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80038a2:	4b0e      	ldr	r3, [pc, #56]	; (80038dc <MX_SPI2_Init+0x74>)
 80038a4:	2200      	movs	r2, #0
 80038a6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80038a8:	4b0c      	ldr	r3, [pc, #48]	; (80038dc <MX_SPI2_Init+0x74>)
 80038aa:	2200      	movs	r2, #0
 80038ac:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038ae:	4b0b      	ldr	r3, [pc, #44]	; (80038dc <MX_SPI2_Init+0x74>)
 80038b0:	2200      	movs	r2, #0
 80038b2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80038b4:	4b09      	ldr	r3, [pc, #36]	; (80038dc <MX_SPI2_Init+0x74>)
 80038b6:	2207      	movs	r2, #7
 80038b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80038ba:	4b08      	ldr	r3, [pc, #32]	; (80038dc <MX_SPI2_Init+0x74>)
 80038bc:	2200      	movs	r2, #0
 80038be:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80038c0:	4b06      	ldr	r3, [pc, #24]	; (80038dc <MX_SPI2_Init+0x74>)
 80038c2:	2200      	movs	r2, #0
 80038c4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80038c6:	4805      	ldr	r0, [pc, #20]	; (80038dc <MX_SPI2_Init+0x74>)
 80038c8:	f007 fc74 	bl	800b1b4 <HAL_SPI_Init>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d001      	beq.n	80038d6 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80038d2:	f001 fb7f 	bl	8004fd4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80038d6:	bf00      	nop
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	bf00      	nop
 80038dc:	200009ac 	.word	0x200009ac
 80038e0:	40003800 	.word	0x40003800

080038e4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b088      	sub	sp, #32
 80038e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80038ea:	f107 0310 	add.w	r3, r7, #16
 80038ee:	2200      	movs	r2, #0
 80038f0:	601a      	str	r2, [r3, #0]
 80038f2:	605a      	str	r2, [r3, #4]
 80038f4:	609a      	str	r2, [r3, #8]
 80038f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038f8:	1d3b      	adds	r3, r7, #4
 80038fa:	2200      	movs	r2, #0
 80038fc:	601a      	str	r2, [r3, #0]
 80038fe:	605a      	str	r2, [r3, #4]
 8003900:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN TIM4_Init 1 */

  // interupt every 10 ms

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003902:	4b1d      	ldr	r3, [pc, #116]	; (8003978 <MX_TIM4_Init+0x94>)
 8003904:	4a1d      	ldr	r2, [pc, #116]	; (800397c <MX_TIM4_Init+0x98>)
 8003906:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7999;
 8003908:	4b1b      	ldr	r3, [pc, #108]	; (8003978 <MX_TIM4_Init+0x94>)
 800390a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800390e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003910:	4b19      	ldr	r3, [pc, #100]	; (8003978 <MX_TIM4_Init+0x94>)
 8003912:	2200      	movs	r2, #0
 8003914:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 8003916:	4b18      	ldr	r3, [pc, #96]	; (8003978 <MX_TIM4_Init+0x94>)
 8003918:	2263      	movs	r2, #99	; 0x63
 800391a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800391c:	4b16      	ldr	r3, [pc, #88]	; (8003978 <MX_TIM4_Init+0x94>)
 800391e:	2200      	movs	r2, #0
 8003920:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003922:	4b15      	ldr	r3, [pc, #84]	; (8003978 <MX_TIM4_Init+0x94>)
 8003924:	2280      	movs	r2, #128	; 0x80
 8003926:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003928:	4813      	ldr	r0, [pc, #76]	; (8003978 <MX_TIM4_Init+0x94>)
 800392a:	f009 f84d 	bl	800c9c8 <HAL_TIM_Base_Init>
 800392e:	4603      	mov	r3, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d001      	beq.n	8003938 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8003934:	f001 fb4e 	bl	8004fd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003938:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800393c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800393e:	f107 0310 	add.w	r3, r7, #16
 8003942:	4619      	mov	r1, r3
 8003944:	480c      	ldr	r0, [pc, #48]	; (8003978 <MX_TIM4_Init+0x94>)
 8003946:	f009 fa55 	bl	800cdf4 <HAL_TIM_ConfigClockSource>
 800394a:	4603      	mov	r3, r0
 800394c:	2b00      	cmp	r3, #0
 800394e:	d001      	beq.n	8003954 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8003950:	f001 fb40 	bl	8004fd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003954:	2300      	movs	r3, #0
 8003956:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003958:	2300      	movs	r3, #0
 800395a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800395c:	1d3b      	adds	r3, r7, #4
 800395e:	4619      	mov	r1, r3
 8003960:	4805      	ldr	r0, [pc, #20]	; (8003978 <MX_TIM4_Init+0x94>)
 8003962:	f009 fc6d 	bl	800d240 <HAL_TIMEx_MasterConfigSynchronization>
 8003966:	4603      	mov	r3, r0
 8003968:	2b00      	cmp	r3, #0
 800396a:	d001      	beq.n	8003970 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 800396c:	f001 fb32 	bl	8004fd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003970:	bf00      	nop
 8003972:	3720      	adds	r7, #32
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}
 8003978:	20000ae8 	.word	0x20000ae8
 800397c:	40000800 	.word	0x40000800

08003980 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003984:	4b14      	ldr	r3, [pc, #80]	; (80039d8 <MX_USART2_UART_Init+0x58>)
 8003986:	4a15      	ldr	r2, [pc, #84]	; (80039dc <MX_USART2_UART_Init+0x5c>)
 8003988:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 230400;
 800398a:	4b13      	ldr	r3, [pc, #76]	; (80039d8 <MX_USART2_UART_Init+0x58>)
 800398c:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8003990:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003992:	4b11      	ldr	r3, [pc, #68]	; (80039d8 <MX_USART2_UART_Init+0x58>)
 8003994:	2200      	movs	r2, #0
 8003996:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003998:	4b0f      	ldr	r3, [pc, #60]	; (80039d8 <MX_USART2_UART_Init+0x58>)
 800399a:	2200      	movs	r2, #0
 800399c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800399e:	4b0e      	ldr	r3, [pc, #56]	; (80039d8 <MX_USART2_UART_Init+0x58>)
 80039a0:	2200      	movs	r2, #0
 80039a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80039a4:	4b0c      	ldr	r3, [pc, #48]	; (80039d8 <MX_USART2_UART_Init+0x58>)
 80039a6:	220c      	movs	r2, #12
 80039a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80039aa:	4b0b      	ldr	r3, [pc, #44]	; (80039d8 <MX_USART2_UART_Init+0x58>)
 80039ac:	2200      	movs	r2, #0
 80039ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80039b0:	4b09      	ldr	r3, [pc, #36]	; (80039d8 <MX_USART2_UART_Init+0x58>)
 80039b2:	2200      	movs	r2, #0
 80039b4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80039b6:	4b08      	ldr	r3, [pc, #32]	; (80039d8 <MX_USART2_UART_Init+0x58>)
 80039b8:	2200      	movs	r2, #0
 80039ba:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80039bc:	4b06      	ldr	r3, [pc, #24]	; (80039d8 <MX_USART2_UART_Init+0x58>)
 80039be:	2200      	movs	r2, #0
 80039c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80039c2:	4805      	ldr	r0, [pc, #20]	; (80039d8 <MX_USART2_UART_Init+0x58>)
 80039c4:	f009 fce2 	bl	800d38c <HAL_UART_Init>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d001      	beq.n	80039d2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80039ce:	f001 fb01 	bl	8004fd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80039d2:	bf00      	nop
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	20000b34 	.word	0x20000b34
 80039dc:	40004400 	.word	0x40004400

080039e0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80039e4:	4b14      	ldr	r3, [pc, #80]	; (8003a38 <MX_USART3_UART_Init+0x58>)
 80039e6:	4a15      	ldr	r2, [pc, #84]	; (8003a3c <MX_USART3_UART_Init+0x5c>)
 80039e8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80039ea:	4b13      	ldr	r3, [pc, #76]	; (8003a38 <MX_USART3_UART_Init+0x58>)
 80039ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80039f0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80039f2:	4b11      	ldr	r3, [pc, #68]	; (8003a38 <MX_USART3_UART_Init+0x58>)
 80039f4:	2200      	movs	r2, #0
 80039f6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80039f8:	4b0f      	ldr	r3, [pc, #60]	; (8003a38 <MX_USART3_UART_Init+0x58>)
 80039fa:	2200      	movs	r2, #0
 80039fc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80039fe:	4b0e      	ldr	r3, [pc, #56]	; (8003a38 <MX_USART3_UART_Init+0x58>)
 8003a00:	2200      	movs	r2, #0
 8003a02:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003a04:	4b0c      	ldr	r3, [pc, #48]	; (8003a38 <MX_USART3_UART_Init+0x58>)
 8003a06:	220c      	movs	r2, #12
 8003a08:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003a0a:	4b0b      	ldr	r3, [pc, #44]	; (8003a38 <MX_USART3_UART_Init+0x58>)
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003a10:	4b09      	ldr	r3, [pc, #36]	; (8003a38 <MX_USART3_UART_Init+0x58>)
 8003a12:	2200      	movs	r2, #0
 8003a14:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003a16:	4b08      	ldr	r3, [pc, #32]	; (8003a38 <MX_USART3_UART_Init+0x58>)
 8003a18:	2200      	movs	r2, #0
 8003a1a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003a1c:	4b06      	ldr	r3, [pc, #24]	; (8003a38 <MX_USART3_UART_Init+0x58>)
 8003a1e:	2200      	movs	r2, #0
 8003a20:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003a22:	4805      	ldr	r0, [pc, #20]	; (8003a38 <MX_USART3_UART_Init+0x58>)
 8003a24:	f009 fcb2 	bl	800d38c <HAL_UART_Init>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d001      	beq.n	8003a32 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8003a2e:	f001 fad1 	bl	8004fd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003a32:	bf00      	nop
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	20000bb8 	.word	0x20000bb8
 8003a3c:	40004800 	.word	0x40004800

08003a40 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b082      	sub	sp, #8
 8003a44:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003a46:	4b2a      	ldr	r3, [pc, #168]	; (8003af0 <MX_DMA_Init+0xb0>)
 8003a48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a4a:	4a29      	ldr	r2, [pc, #164]	; (8003af0 <MX_DMA_Init+0xb0>)
 8003a4c:	f043 0301 	orr.w	r3, r3, #1
 8003a50:	6493      	str	r3, [r2, #72]	; 0x48
 8003a52:	4b27      	ldr	r3, [pc, #156]	; (8003af0 <MX_DMA_Init+0xb0>)
 8003a54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a56:	f003 0301 	and.w	r3, r3, #1
 8003a5a:	607b      	str	r3, [r7, #4]
 8003a5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003a5e:	4b24      	ldr	r3, [pc, #144]	; (8003af0 <MX_DMA_Init+0xb0>)
 8003a60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a62:	4a23      	ldr	r2, [pc, #140]	; (8003af0 <MX_DMA_Init+0xb0>)
 8003a64:	f043 0302 	orr.w	r3, r3, #2
 8003a68:	6493      	str	r3, [r2, #72]	; 0x48
 8003a6a:	4b21      	ldr	r3, [pc, #132]	; (8003af0 <MX_DMA_Init+0xb0>)
 8003a6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a6e:	f003 0302 	and.w	r3, r3, #2
 8003a72:	603b      	str	r3, [r7, #0]
 8003a74:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8003a76:	2200      	movs	r2, #0
 8003a78:	2100      	movs	r1, #0
 8003a7a:	200c      	movs	r0, #12
 8003a7c:	f003 fb75 	bl	800716a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8003a80:	200c      	movs	r0, #12
 8003a82:	f003 fb8e 	bl	80071a2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8003a86:	2200      	movs	r2, #0
 8003a88:	2100      	movs	r1, #0
 8003a8a:	200e      	movs	r0, #14
 8003a8c:	f003 fb6d 	bl	800716a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8003a90:	200e      	movs	r0, #14
 8003a92:	f003 fb86 	bl	80071a2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8003a96:	2200      	movs	r2, #0
 8003a98:	2100      	movs	r1, #0
 8003a9a:	200f      	movs	r0, #15
 8003a9c:	f003 fb65 	bl	800716a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8003aa0:	200f      	movs	r0, #15
 8003aa2:	f003 fb7e 	bl	80071a2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	2100      	movs	r1, #0
 8003aaa:	2010      	movs	r0, #16
 8003aac:	f003 fb5d 	bl	800716a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8003ab0:	2010      	movs	r0, #16
 8003ab2:	f003 fb76 	bl	80071a2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 3, 0);
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	2103      	movs	r1, #3
 8003aba:	2011      	movs	r0, #17
 8003abc:	f003 fb55 	bl	800716a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8003ac0:	2011      	movs	r0, #17
 8003ac2:	f003 fb6e 	bl	80071a2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 0, 0);
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	2100      	movs	r1, #0
 8003aca:	203b      	movs	r0, #59	; 0x3b
 8003acc:	f003 fb4d 	bl	800716a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8003ad0:	203b      	movs	r0, #59	; 0x3b
 8003ad2:	f003 fb66 	bl	80071a2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel6_IRQn, 0, 0);
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	2100      	movs	r1, #0
 8003ada:	2044      	movs	r0, #68	; 0x44
 8003adc:	f003 fb45 	bl	800716a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel6_IRQn);
 8003ae0:	2044      	movs	r0, #68	; 0x44
 8003ae2:	f003 fb5e 	bl	80071a2 <HAL_NVIC_EnableIRQ>

}
 8003ae6:	bf00      	nop
 8003ae8:	3708      	adds	r7, #8
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	40021000 	.word	0x40021000

08003af4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b08a      	sub	sp, #40	; 0x28
 8003af8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003afa:	f107 0314 	add.w	r3, r7, #20
 8003afe:	2200      	movs	r2, #0
 8003b00:	601a      	str	r2, [r3, #0]
 8003b02:	605a      	str	r2, [r3, #4]
 8003b04:	609a      	str	r2, [r3, #8]
 8003b06:	60da      	str	r2, [r3, #12]
 8003b08:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b0a:	4b8e      	ldr	r3, [pc, #568]	; (8003d44 <MX_GPIO_Init+0x250>)
 8003b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b0e:	4a8d      	ldr	r2, [pc, #564]	; (8003d44 <MX_GPIO_Init+0x250>)
 8003b10:	f043 0304 	orr.w	r3, r3, #4
 8003b14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b16:	4b8b      	ldr	r3, [pc, #556]	; (8003d44 <MX_GPIO_Init+0x250>)
 8003b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b1a:	f003 0304 	and.w	r3, r3, #4
 8003b1e:	613b      	str	r3, [r7, #16]
 8003b20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003b22:	4b88      	ldr	r3, [pc, #544]	; (8003d44 <MX_GPIO_Init+0x250>)
 8003b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b26:	4a87      	ldr	r2, [pc, #540]	; (8003d44 <MX_GPIO_Init+0x250>)
 8003b28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b2e:	4b85      	ldr	r3, [pc, #532]	; (8003d44 <MX_GPIO_Init+0x250>)
 8003b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b36:	60fb      	str	r3, [r7, #12]
 8003b38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b3a:	4b82      	ldr	r3, [pc, #520]	; (8003d44 <MX_GPIO_Init+0x250>)
 8003b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b3e:	4a81      	ldr	r2, [pc, #516]	; (8003d44 <MX_GPIO_Init+0x250>)
 8003b40:	f043 0301 	orr.w	r3, r3, #1
 8003b44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b46:	4b7f      	ldr	r3, [pc, #508]	; (8003d44 <MX_GPIO_Init+0x250>)
 8003b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b4a:	f003 0301 	and.w	r3, r3, #1
 8003b4e:	60bb      	str	r3, [r7, #8]
 8003b50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b52:	4b7c      	ldr	r3, [pc, #496]	; (8003d44 <MX_GPIO_Init+0x250>)
 8003b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b56:	4a7b      	ldr	r2, [pc, #492]	; (8003d44 <MX_GPIO_Init+0x250>)
 8003b58:	f043 0302 	orr.w	r3, r3, #2
 8003b5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b5e:	4b79      	ldr	r3, [pc, #484]	; (8003d44 <MX_GPIO_Init+0x250>)
 8003b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b62:	f003 0302 	and.w	r3, r3, #2
 8003b66:	607b      	str	r3, [r7, #4]
 8003b68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003b6a:	4b76      	ldr	r3, [pc, #472]	; (8003d44 <MX_GPIO_Init+0x250>)
 8003b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b6e:	4a75      	ldr	r2, [pc, #468]	; (8003d44 <MX_GPIO_Init+0x250>)
 8003b70:	f043 0308 	orr.w	r3, r3, #8
 8003b74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b76:	4b73      	ldr	r3, [pc, #460]	; (8003d44 <MX_GPIO_Init+0x250>)
 8003b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b7a:	f003 0308 	and.w	r3, r3, #8
 8003b7e:	603b      	str	r3, [r7, #0]
 8003b80:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DISPLAY_ON_Pin|ERR_LED_Pin, GPIO_PIN_RESET);
 8003b82:	2200      	movs	r2, #0
 8003b84:	2109      	movs	r1, #9
 8003b86:	4870      	ldr	r0, [pc, #448]	; (8003d48 <MX_GPIO_Init+0x254>)
 8003b88:	f003 ff7a 	bl	8007a80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TIK_LED_GPIO_Port, TIK_LED_Pin, GPIO_PIN_RESET);
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	2102      	movs	r1, #2
 8003b90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b94:	f003 ff74 	bl	8007a80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8003b98:	2201      	movs	r2, #1
 8003b9a:	2110      	movs	r1, #16
 8003b9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ba0:	f003 ff6e 	bl	8007a80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin|SPI1_DC_Pin|BLE_WAKEUP_Pin, GPIO_PIN_SET);
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	f44f 5189 	mov.w	r1, #4384	; 0x1120
 8003baa:	4868      	ldr	r0, [pc, #416]	; (8003d4c <MX_GPIO_Init+0x258>)
 8003bac:	f003 ff68 	bl	8007a80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003bb6:	4864      	ldr	r0, [pc, #400]	; (8003d48 <MX_GPIO_Init+0x254>)
 8003bb8:	f003 ff62 	bl	8007a80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_RST_GPIO_Port, SPI1_RST_Pin, GPIO_PIN_SET);
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	2104      	movs	r1, #4
 8003bc0:	4863      	ldr	r0, [pc, #396]	; (8003d50 <MX_GPIO_Init+0x25c>)
 8003bc2:	f003 ff5d 	bl	8007a80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DISPLAY_ON_Pin */
  GPIO_InitStruct.Pin = DISPLAY_ON_Pin;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003bce:	2302      	movs	r3, #2
 8003bd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DISPLAY_ON_GPIO_Port, &GPIO_InitStruct);
 8003bd6:	f107 0314 	add.w	r3, r7, #20
 8003bda:	4619      	mov	r1, r3
 8003bdc:	485a      	ldr	r0, [pc, #360]	; (8003d48 <MX_GPIO_Init+0x254>)
 8003bde:	f003 fd8d 	bl	80076fc <HAL_GPIO_Init>

  /*Configure GPIO pins : KEY0_Pin KEY1_Pin */
  GPIO_InitStruct.Pin = KEY0_Pin|KEY1_Pin;
 8003be2:	2306      	movs	r3, #6
 8003be4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003be6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003bea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003bec:	2301      	movs	r3, #1
 8003bee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003bf0:	f107 0314 	add.w	r3, r7, #20
 8003bf4:	4619      	mov	r1, r3
 8003bf6:	4854      	ldr	r0, [pc, #336]	; (8003d48 <MX_GPIO_Init+0x254>)
 8003bf8:	f003 fd80 	bl	80076fc <HAL_GPIO_Init>

  /*Configure GPIO pin : ERR_LED_Pin */
  GPIO_InitStruct.Pin = ERR_LED_Pin;
 8003bfc:	2308      	movs	r3, #8
 8003bfe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c00:	2301      	movs	r3, #1
 8003c02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c04:	2300      	movs	r3, #0
 8003c06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ERR_LED_GPIO_Port, &GPIO_InitStruct);
 8003c0c:	f107 0314 	add.w	r3, r7, #20
 8003c10:	4619      	mov	r1, r3
 8003c12:	484d      	ldr	r0, [pc, #308]	; (8003d48 <MX_GPIO_Init+0x254>)
 8003c14:	f003 fd72 	bl	80076fc <HAL_GPIO_Init>

  /*Configure GPIO pin : CPU_WAKEUP_Pin */
  GPIO_InitStruct.Pin = CPU_WAKEUP_Pin;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003c1c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003c20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c22:	2300      	movs	r3, #0
 8003c24:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CPU_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 8003c26:	f107 0314 	add.w	r3, r7, #20
 8003c2a:	4619      	mov	r1, r3
 8003c2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c30:	f003 fd64 	bl	80076fc <HAL_GPIO_Init>

  /*Configure GPIO pin : TIK_LED_Pin */
  GPIO_InitStruct.Pin = TIK_LED_Pin;
 8003c34:	2302      	movs	r3, #2
 8003c36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c40:	2300      	movs	r3, #0
 8003c42:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TIK_LED_GPIO_Port, &GPIO_InitStruct);
 8003c44:	f107 0314 	add.w	r3, r7, #20
 8003c48:	4619      	mov	r1, r3
 8003c4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c4e:	f003 fd55 	bl	80076fc <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8003c52:	2310      	movs	r3, #16
 8003c54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c56:	2301      	movs	r3, #1
 8003c58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003c5e:	2302      	movs	r3, #2
 8003c60:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8003c62:	f107 0314 	add.w	r3, r7, #20
 8003c66:	4619      	mov	r1, r3
 8003c68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c6c:	f003 fd46 	bl	80076fc <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8003c70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c76:	2301      	movs	r3, #1
 8003c78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003c7e:	2302      	movs	r3, #2
 8003c80:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8003c82:	f107 0314 	add.w	r3, r7, #20
 8003c86:	4619      	mov	r1, r3
 8003c88:	4830      	ldr	r0, [pc, #192]	; (8003d4c <MX_GPIO_Init+0x258>)
 8003c8a:	f003 fd37 	bl	80076fc <HAL_GPIO_Init>

  /*Configure GPIO pin : GREEN_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin;
 8003c8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c94:	2301      	movs	r3, #1
 8003c96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GREEN_LED_GPIO_Port, &GPIO_InitStruct);
 8003ca0:	f107 0314 	add.w	r3, r7, #20
 8003ca4:	4619      	mov	r1, r3
 8003ca6:	4828      	ldr	r0, [pc, #160]	; (8003d48 <MX_GPIO_Init+0x254>)
 8003ca8:	f003 fd28 	bl	80076fc <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_RST_Pin */
  GPIO_InitStruct.Pin = SPI1_RST_Pin;
 8003cac:	2304      	movs	r3, #4
 8003cae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003cb8:	2302      	movs	r3, #2
 8003cba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_RST_GPIO_Port, &GPIO_InitStruct);
 8003cbc:	f107 0314 	add.w	r3, r7, #20
 8003cc0:	4619      	mov	r1, r3
 8003cc2:	4823      	ldr	r0, [pc, #140]	; (8003d50 <MX_GPIO_Init+0x25c>)
 8003cc4:	f003 fd1a 	bl	80076fc <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_DC_Pin */
  GPIO_InitStruct.Pin = SPI1_DC_Pin;
 8003cc8:	2320      	movs	r3, #32
 8003cca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003cd4:	2302      	movs	r3, #2
 8003cd6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_DC_GPIO_Port, &GPIO_InitStruct);
 8003cd8:	f107 0314 	add.w	r3, r7, #20
 8003cdc:	4619      	mov	r1, r3
 8003cde:	481b      	ldr	r0, [pc, #108]	; (8003d4c <MX_GPIO_Init+0x258>)
 8003ce0:	f003 fd0c 	bl	80076fc <HAL_GPIO_Init>

  /*Configure GPIO pin : BLE_WAKEUP_Pin */
  GPIO_InitStruct.Pin = BLE_WAKEUP_Pin;
 8003ce4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ce8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003cea:	2301      	movs	r3, #1
 8003cec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BLE_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 8003cf6:	f107 0314 	add.w	r3, r7, #20
 8003cfa:	4619      	mov	r1, r3
 8003cfc:	4813      	ldr	r0, [pc, #76]	; (8003d4c <MX_GPIO_Init+0x258>)
 8003cfe:	f003 fcfd 	bl	80076fc <HAL_GPIO_Init>

  /*Configure GPIO pin : BLE_STAT_Pin */
  GPIO_InitStruct.Pin = BLE_STAT_Pin;
 8003d02:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003d0c:	2302      	movs	r3, #2
 8003d0e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLE_STAT_GPIO_Port, &GPIO_InitStruct);
 8003d10:	f107 0314 	add.w	r3, r7, #20
 8003d14:	4619      	mov	r1, r3
 8003d16:	480d      	ldr	r0, [pc, #52]	; (8003d4c <MX_GPIO_Init+0x258>)
 8003d18:	f003 fcf0 	bl	80076fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	2100      	movs	r1, #0
 8003d20:	2007      	movs	r0, #7
 8003d22:	f003 fa22 	bl	800716a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8003d26:	2007      	movs	r0, #7
 8003d28:	f003 fa3b 	bl	80071a2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	2100      	movs	r1, #0
 8003d30:	2008      	movs	r0, #8
 8003d32:	f003 fa1a 	bl	800716a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8003d36:	2008      	movs	r0, #8
 8003d38:	f003 fa33 	bl	80071a2 <HAL_NVIC_EnableIRQ>

}
 8003d3c:	bf00      	nop
 8003d3e:	3728      	adds	r7, #40	; 0x28
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	40021000 	.word	0x40021000
 8003d48:	48000800 	.word	0x48000800
 8003d4c:	48000400 	.word	0x48000400
 8003d50:	48000c00 	.word	0x48000c00

08003d54 <hexToBin>:

//-------------------------------------------------------------------------------------------
//      Преобразует два символа строки из hex-формата в двоичный
//
uint8_t hexToBin(char *sc)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b085      	sub	sp, #20
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
char st = 0, ml = 0;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	73fb      	strb	r3, [r7, #15]
 8003d60:	2300      	movs	r3, #0
 8003d62:	73bb      	strb	r3, [r7, #14]

	if ((sc[0] >= '0') && (sc[0] <= '9')) st = (sc[0] - 0x30);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	781b      	ldrb	r3, [r3, #0]
 8003d68:	2b2f      	cmp	r3, #47	; 0x2f
 8003d6a:	d908      	bls.n	8003d7e <hexToBin+0x2a>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	781b      	ldrb	r3, [r3, #0]
 8003d70:	2b39      	cmp	r3, #57	; 0x39
 8003d72:	d804      	bhi.n	8003d7e <hexToBin+0x2a>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	781b      	ldrb	r3, [r3, #0]
 8003d78:	3b30      	subs	r3, #48	; 0x30
 8003d7a:	73fb      	strb	r3, [r7, #15]
 8003d7c:	e018      	b.n	8003db0 <hexToBin+0x5c>
	else
	if ((sc[0] >= 'A') && (sc[0] <= 'F')) st = (sc[0] - 0x37);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	781b      	ldrb	r3, [r3, #0]
 8003d82:	2b40      	cmp	r3, #64	; 0x40
 8003d84:	d908      	bls.n	8003d98 <hexToBin+0x44>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	781b      	ldrb	r3, [r3, #0]
 8003d8a:	2b46      	cmp	r3, #70	; 0x46
 8003d8c:	d804      	bhi.n	8003d98 <hexToBin+0x44>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	781b      	ldrb	r3, [r3, #0]
 8003d92:	3b37      	subs	r3, #55	; 0x37
 8003d94:	73fb      	strb	r3, [r7, #15]
 8003d96:	e00b      	b.n	8003db0 <hexToBin+0x5c>
	else
	if ((sc[0] >= 'a') && (sc[0] <= 'f')) st = (sc[0] - 0x57);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	781b      	ldrb	r3, [r3, #0]
 8003d9c:	2b60      	cmp	r3, #96	; 0x60
 8003d9e:	d907      	bls.n	8003db0 <hexToBin+0x5c>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	781b      	ldrb	r3, [r3, #0]
 8003da4:	2b66      	cmp	r3, #102	; 0x66
 8003da6:	d803      	bhi.n	8003db0 <hexToBin+0x5c>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	781b      	ldrb	r3, [r3, #0]
 8003dac:	3b57      	subs	r3, #87	; 0x57
 8003dae:	73fb      	strb	r3, [r7, #15]

	if ((sc[1] >= '0') && (sc[1] <= '9')) ml = (sc[1] - 0x30);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	3301      	adds	r3, #1
 8003db4:	781b      	ldrb	r3, [r3, #0]
 8003db6:	2b2f      	cmp	r3, #47	; 0x2f
 8003db8:	d90a      	bls.n	8003dd0 <hexToBin+0x7c>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	3301      	adds	r3, #1
 8003dbe:	781b      	ldrb	r3, [r3, #0]
 8003dc0:	2b39      	cmp	r3, #57	; 0x39
 8003dc2:	d805      	bhi.n	8003dd0 <hexToBin+0x7c>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	3301      	adds	r3, #1
 8003dc8:	781b      	ldrb	r3, [r3, #0]
 8003dca:	3b30      	subs	r3, #48	; 0x30
 8003dcc:	73bb      	strb	r3, [r7, #14]
 8003dce:	e01e      	b.n	8003e0e <hexToBin+0xba>
	else
	if ((sc[1] >= 'A') && (sc[1] <= 'F')) ml = (sc[1] - 0x37);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	3301      	adds	r3, #1
 8003dd4:	781b      	ldrb	r3, [r3, #0]
 8003dd6:	2b40      	cmp	r3, #64	; 0x40
 8003dd8:	d90a      	bls.n	8003df0 <hexToBin+0x9c>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	3301      	adds	r3, #1
 8003dde:	781b      	ldrb	r3, [r3, #0]
 8003de0:	2b46      	cmp	r3, #70	; 0x46
 8003de2:	d805      	bhi.n	8003df0 <hexToBin+0x9c>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	3301      	adds	r3, #1
 8003de8:	781b      	ldrb	r3, [r3, #0]
 8003dea:	3b37      	subs	r3, #55	; 0x37
 8003dec:	73bb      	strb	r3, [r7, #14]
 8003dee:	e00e      	b.n	8003e0e <hexToBin+0xba>
	else
	if ((sc[1] >= 'a') && (sc[1] <= 'f')) ml = (sc[1] - 0x57);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	3301      	adds	r3, #1
 8003df4:	781b      	ldrb	r3, [r3, #0]
 8003df6:	2b60      	cmp	r3, #96	; 0x60
 8003df8:	d909      	bls.n	8003e0e <hexToBin+0xba>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	3301      	adds	r3, #1
 8003dfe:	781b      	ldrb	r3, [r3, #0]
 8003e00:	2b66      	cmp	r3, #102	; 0x66
 8003e02:	d804      	bhi.n	8003e0e <hexToBin+0xba>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	3301      	adds	r3, #1
 8003e08:	781b      	ldrb	r3, [r3, #0]
 8003e0a:	3b57      	subs	r3, #87	; 0x57
 8003e0c:	73bb      	strb	r3, [r7, #14]

	return ((st << 4) | (ml & 0x0f));
 8003e0e:	7bfb      	ldrb	r3, [r7, #15]
 8003e10:	011b      	lsls	r3, r3, #4
 8003e12:	b25a      	sxtb	r2, r3
 8003e14:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003e18:	f003 030f 	and.w	r3, r3, #15
 8003e1c:	b25b      	sxtb	r3, r3
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	b25b      	sxtb	r3, r3
 8003e22:	b2db      	uxtb	r3, r3

}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3714      	adds	r7, #20
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr

08003e30 <getEvtCount>:


#ifdef SET_FIFO_MODE
//-------------------------------------------------------------------------------------------
uint8_t getEvtCount()
{
 8003e30:	b480      	push	{r7}
 8003e32:	af00      	add	r7, sp, #0
	return cnt_evt;
 8003e34:	4b03      	ldr	r3, [pc, #12]	; (8003e44 <getEvtCount+0x14>)
 8003e36:	781b      	ldrb	r3, [r3, #0]
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr
 8003e42:	bf00      	nop
 8003e44:	20001d6a 	.word	0x20001d6a

08003e48 <putEvt>:
//-------------------------------------------------------------------------------------------
void putEvt(int evt)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b082      	sub	sp, #8
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]

	//while (lock_fifo);
	//lock_fifo = true;

	if (cnt_evt > (MAX_FIFO_SIZE - 3)) {
 8003e50:	4b30      	ldr	r3, [pc, #192]	; (8003f14 <putEvt+0xcc>)
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	2b3d      	cmp	r3, #61	; 0x3d
 8003e56:	d907      	bls.n	8003e68 <putEvt+0x20>
		devError |= devFIFO;
 8003e58:	4b2f      	ldr	r3, [pc, #188]	; (8003f18 <putEvt+0xd0>)
 8003e5a:	881b      	ldrh	r3, [r3, #0]
 8003e5c:	f043 0310 	orr.w	r3, r3, #16
 8003e60:	b29a      	uxth	r2, r3
 8003e62:	4b2d      	ldr	r3, [pc, #180]	; (8003f18 <putEvt+0xd0>)
 8003e64:	801a      	strh	r2, [r3, #0]
		//lock_fifo = false;
		return;
 8003e66:	e051      	b.n	8003f0c <putEvt+0xc4>
	}

	HAL_NVIC_DisableIRQ(USART2_IRQn);
 8003e68:	2026      	movs	r0, #38	; 0x26
 8003e6a:	f003 f9a8 	bl	80071be <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(TIM4_IRQn);
 8003e6e:	201e      	movs	r0, #30
 8003e70:	f003 f9a5 	bl	80071be <HAL_NVIC_DisableIRQ>

	if (cnt_evt >= MAX_FIFO_SIZE) {
 8003e74:	4b27      	ldr	r3, [pc, #156]	; (8003f14 <putEvt+0xcc>)
 8003e76:	781b      	ldrb	r3, [r3, #0]
 8003e78:	2b3f      	cmp	r3, #63	; 0x3f
 8003e7a:	d906      	bls.n	8003e8a <putEvt+0x42>
			wr_evt_err++;
 8003e7c:	4b27      	ldr	r3, [pc, #156]	; (8003f1c <putEvt+0xd4>)
 8003e7e:	781b      	ldrb	r3, [r3, #0]
 8003e80:	3301      	adds	r3, #1
 8003e82:	b2da      	uxtb	r2, r3
 8003e84:	4b25      	ldr	r3, [pc, #148]	; (8003f1c <putEvt+0xd4>)
 8003e86:	701a      	strb	r2, [r3, #0]
 8003e88:	e027      	b.n	8003eda <putEvt+0x92>
		} else {
			evt_fifo[wr_evt_adr] = evt;
 8003e8a:	4b25      	ldr	r3, [pc, #148]	; (8003f20 <putEvt+0xd8>)
 8003e8c:	781b      	ldrb	r3, [r3, #0]
 8003e8e:	4619      	mov	r1, r3
 8003e90:	4a24      	ldr	r2, [pc, #144]	; (8003f24 <putEvt+0xdc>)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			cnt_evt++;
 8003e98:	4b1e      	ldr	r3, [pc, #120]	; (8003f14 <putEvt+0xcc>)
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	3301      	adds	r3, #1
 8003e9e:	b2da      	uxtb	r2, r3
 8003ea0:	4b1c      	ldr	r3, [pc, #112]	; (8003f14 <putEvt+0xcc>)
 8003ea2:	701a      	strb	r2, [r3, #0]
			if (wr_evt_adr < (MAX_FIFO_SIZE - 1) ) {
 8003ea4:	4b1e      	ldr	r3, [pc, #120]	; (8003f20 <putEvt+0xd8>)
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	2b3e      	cmp	r3, #62	; 0x3e
 8003eaa:	d806      	bhi.n	8003eba <putEvt+0x72>
				wr_evt_adr++;
 8003eac:	4b1c      	ldr	r3, [pc, #112]	; (8003f20 <putEvt+0xd8>)
 8003eae:	781b      	ldrb	r3, [r3, #0]
 8003eb0:	3301      	adds	r3, #1
 8003eb2:	b2da      	uxtb	r2, r3
 8003eb4:	4b1a      	ldr	r3, [pc, #104]	; (8003f20 <putEvt+0xd8>)
 8003eb6:	701a      	strb	r2, [r3, #0]
 8003eb8:	e002      	b.n	8003ec0 <putEvt+0x78>
			} else  {
				wr_evt_adr = 0;
 8003eba:	4b19      	ldr	r3, [pc, #100]	; (8003f20 <putEvt+0xd8>)
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	701a      	strb	r2, [r3, #0]
			}
			wr_evt_err = 0;
 8003ec0:	4b16      	ldr	r3, [pc, #88]	; (8003f1c <putEvt+0xd4>)
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	701a      	strb	r2, [r3, #0]
			if (cnt_evt > max_evt) max_evt = cnt_evt;
 8003ec6:	4b13      	ldr	r3, [pc, #76]	; (8003f14 <putEvt+0xcc>)
 8003ec8:	781a      	ldrb	r2, [r3, #0]
 8003eca:	4b17      	ldr	r3, [pc, #92]	; (8003f28 <putEvt+0xe0>)
 8003ecc:	781b      	ldrb	r3, [r3, #0]
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d903      	bls.n	8003eda <putEvt+0x92>
 8003ed2:	4b10      	ldr	r3, [pc, #64]	; (8003f14 <putEvt+0xcc>)
 8003ed4:	781a      	ldrb	r2, [r3, #0]
 8003ed6:	4b14      	ldr	r3, [pc, #80]	; (8003f28 <putEvt+0xe0>)
 8003ed8:	701a      	strb	r2, [r3, #0]
		}

		if (wr_evt_err) devError |= devFIFO;
 8003eda:	4b10      	ldr	r3, [pc, #64]	; (8003f1c <putEvt+0xd4>)
 8003edc:	781b      	ldrb	r3, [r3, #0]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d007      	beq.n	8003ef2 <putEvt+0xaa>
 8003ee2:	4b0d      	ldr	r3, [pc, #52]	; (8003f18 <putEvt+0xd0>)
 8003ee4:	881b      	ldrh	r3, [r3, #0]
 8003ee6:	f043 0310 	orr.w	r3, r3, #16
 8003eea:	b29a      	uxth	r2, r3
 8003eec:	4b0a      	ldr	r3, [pc, #40]	; (8003f18 <putEvt+0xd0>)
 8003eee:	801a      	strh	r2, [r3, #0]
 8003ef0:	e006      	b.n	8003f00 <putEvt+0xb8>
				   else devError &= ~devFIFO;
 8003ef2:	4b09      	ldr	r3, [pc, #36]	; (8003f18 <putEvt+0xd0>)
 8003ef4:	881b      	ldrh	r3, [r3, #0]
 8003ef6:	f023 0310 	bic.w	r3, r3, #16
 8003efa:	b29a      	uxth	r2, r3
 8003efc:	4b06      	ldr	r3, [pc, #24]	; (8003f18 <putEvt+0xd0>)
 8003efe:	801a      	strh	r2, [r3, #0]

		HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003f00:	201e      	movs	r0, #30
 8003f02:	f003 f94e 	bl	80071a2 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003f06:	2026      	movs	r0, #38	; 0x26
 8003f08:	f003 f94b 	bl	80071a2 <HAL_NVIC_EnableIRQ>

		//lock_fifo = false;
}
 8003f0c:	3708      	adds	r7, #8
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	bf00      	nop
 8003f14:	20001d6a 	.word	0x20001d6a
 8003f18:	2000194c 	.word	0x2000194c
 8003f1c:	20001d69 	.word	0x20001d69
 8003f20:	20001d68 	.word	0x20001d68
 8003f24:	200000cc 	.word	0x200000cc
 8003f28:	20001d6b 	.word	0x20001d6b

08003f2c <getEvt>:
//-------------------------------------------------------------------------------------------
int getEvt()
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b082      	sub	sp, #8
 8003f30:	af00      	add	r7, sp, #0
int ret = evt_None;
 8003f32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003f36:	607b      	str	r3, [r7, #4]

	//while (lock_fifo);
	//lock_fifo = true;

	HAL_NVIC_DisableIRQ(USART2_IRQn);
 8003f38:	2026      	movs	r0, #38	; 0x26
 8003f3a:	f003 f940 	bl	80071be <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(TIM4_IRQn);
 8003f3e:	201e      	movs	r0, #30
 8003f40:	f003 f93d 	bl	80071be <HAL_NVIC_DisableIRQ>
	if (cnt_evt) {
 8003f44:	4b16      	ldr	r3, [pc, #88]	; (8003fa0 <getEvt+0x74>)
 8003f46:	781b      	ldrb	r3, [r3, #0]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d01e      	beq.n	8003f8a <getEvt+0x5e>
		ret = evt_fifo[rd_evt_adr];
 8003f4c:	4b15      	ldr	r3, [pc, #84]	; (8003fa4 <getEvt+0x78>)
 8003f4e:	781b      	ldrb	r3, [r3, #0]
 8003f50:	461a      	mov	r2, r3
 8003f52:	4b15      	ldr	r3, [pc, #84]	; (8003fa8 <getEvt+0x7c>)
 8003f54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f58:	607b      	str	r3, [r7, #4]
		if (cnt_evt) cnt_evt--;
 8003f5a:	4b11      	ldr	r3, [pc, #68]	; (8003fa0 <getEvt+0x74>)
 8003f5c:	781b      	ldrb	r3, [r3, #0]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d005      	beq.n	8003f6e <getEvt+0x42>
 8003f62:	4b0f      	ldr	r3, [pc, #60]	; (8003fa0 <getEvt+0x74>)
 8003f64:	781b      	ldrb	r3, [r3, #0]
 8003f66:	3b01      	subs	r3, #1
 8003f68:	b2da      	uxtb	r2, r3
 8003f6a:	4b0d      	ldr	r3, [pc, #52]	; (8003fa0 <getEvt+0x74>)
 8003f6c:	701a      	strb	r2, [r3, #0]
		if (rd_evt_adr < (MAX_FIFO_SIZE - 1) ) {
 8003f6e:	4b0d      	ldr	r3, [pc, #52]	; (8003fa4 <getEvt+0x78>)
 8003f70:	781b      	ldrb	r3, [r3, #0]
 8003f72:	2b3e      	cmp	r3, #62	; 0x3e
 8003f74:	d806      	bhi.n	8003f84 <getEvt+0x58>
			rd_evt_adr++;
 8003f76:	4b0b      	ldr	r3, [pc, #44]	; (8003fa4 <getEvt+0x78>)
 8003f78:	781b      	ldrb	r3, [r3, #0]
 8003f7a:	3301      	adds	r3, #1
 8003f7c:	b2da      	uxtb	r2, r3
 8003f7e:	4b09      	ldr	r3, [pc, #36]	; (8003fa4 <getEvt+0x78>)
 8003f80:	701a      	strb	r2, [r3, #0]
 8003f82:	e002      	b.n	8003f8a <getEvt+0x5e>
		} else {
			rd_evt_adr = 0;
 8003f84:	4b07      	ldr	r3, [pc, #28]	; (8003fa4 <getEvt+0x78>)
 8003f86:	2200      	movs	r2, #0
 8003f88:	701a      	strb	r2, [r3, #0]
		}
	}

	HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003f8a:	201e      	movs	r0, #30
 8003f8c:	f003 f909 	bl	80071a2 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003f90:	2026      	movs	r0, #38	; 0x26
 8003f92:	f003 f906 	bl	80071a2 <HAL_NVIC_EnableIRQ>

	//lock_fifo = false;

	return ret;
 8003f96:	687b      	ldr	r3, [r7, #4]
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3708      	adds	r7, #8
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	20001d6a 	.word	0x20001d6a
 8003fa4:	20001d67 	.word	0x20001d67
 8003fa8:	200000cc 	.word	0x200000cc

08003fac <nameStation>:
//-------------------------------------------------------------------------------------------
#ifdef SET_DISPLAY

//-------------------------------------------------------------------------------------------
const char *nameStation(float fr)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b085      	sub	sp, #20
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	ed87 0a01 	vstr	s0, [r7, #4]
int8_t ik = -1;
 8003fb6:	23ff      	movs	r3, #255	; 0xff
 8003fb8:	73fb      	strb	r3, [r7, #15]

	for (int8_t i = 0; i < MAX_LIST; i++) {
 8003fba:	2300      	movs	r3, #0
 8003fbc:	73bb      	strb	r3, [r7, #14]
 8003fbe:	e01b      	b.n	8003ff8 <nameStation+0x4c>
		if (list[i].freq == fr) {
 8003fc0:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8003fc4:	491a      	ldr	r1, [pc, #104]	; (8004030 <nameStation+0x84>)
 8003fc6:	4613      	mov	r3, r2
 8003fc8:	00db      	lsls	r3, r3, #3
 8003fca:	4413      	add	r3, r2
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	440b      	add	r3, r1
 8003fd0:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8003fd4:	edd7 7a01 	vldr	s15, [r7, #4]
 8003fd8:	ee07 3a10 	vmov	s14, r3
 8003fdc:	eef4 7a47 	vcmp.f32	s15, s14
 8003fe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fe4:	d102      	bne.n	8003fec <nameStation+0x40>
			ik = i;
 8003fe6:	7bbb      	ldrb	r3, [r7, #14]
 8003fe8:	73fb      	strb	r3, [r7, #15]
			break;
 8003fea:	e009      	b.n	8004000 <nameStation+0x54>
	for (int8_t i = 0; i < MAX_LIST; i++) {
 8003fec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	3301      	adds	r3, #1
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	73bb      	strb	r3, [r7, #14]
 8003ff8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003ffc:	2b18      	cmp	r3, #24
 8003ffe:	dddf      	ble.n	8003fc0 <nameStation+0x14>
		}
	}

	if (ik != -1) return list[ik].name;
 8004000:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004004:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004008:	d009      	beq.n	800401e <nameStation+0x72>
 800400a:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800400e:	4613      	mov	r3, r2
 8004010:	00db      	lsls	r3, r3, #3
 8004012:	4413      	add	r3, r2
 8004014:	009b      	lsls	r3, r3, #2
 8004016:	4a06      	ldr	r2, [pc, #24]	; (8004030 <nameStation+0x84>)
 8004018:	4413      	add	r3, r2
 800401a:	3305      	adds	r3, #5
 800401c:	e001      	b.n	8004022 <nameStation+0x76>
			 else return noneStation;
 800401e:	4b05      	ldr	r3, [pc, #20]	; (8004034 <nameStation+0x88>)
 8004020:	681b      	ldr	r3, [r3, #0]
}
 8004022:	4618      	mov	r0, r3
 8004024:	3714      	adds	r7, #20
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr
 800402e:	bf00      	nop
 8004030:	20002db0 	.word	0x20002db0
 8004034:	200001f4 	.word	0x200001f4

08004038 <getNextList>:
//-------------------------------------------------------------------------------------------
float getNextList(float fr, uint8_t up, uint8_t *band)
{
 8004038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800403c:	b08e      	sub	sp, #56	; 0x38
 800403e:	af08      	add	r7, sp, #32
 8004040:	ed87 0a03 	vstr	s0, [r7, #12]
 8004044:	4603      	mov	r3, r0
 8004046:	6079      	str	r1, [r7, #4]
 8004048:	72fb      	strb	r3, [r7, #11]
float ret = fr;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	613b      	str	r3, [r7, #16]
int8_t ik = -1;
 800404e:	23ff      	movs	r3, #255	; 0xff
 8004050:	75fb      	strb	r3, [r7, #23]

	for (int8_t i = 0; i < MAX_LIST; i++) {
 8004052:	2300      	movs	r3, #0
 8004054:	75bb      	strb	r3, [r7, #22]
 8004056:	e01b      	b.n	8004090 <getNextList+0x58>
		if (list[i].freq == fr) {
 8004058:	f997 2016 	ldrsb.w	r2, [r7, #22]
 800405c:	4965      	ldr	r1, [pc, #404]	; (80041f4 <getNextList+0x1bc>)
 800405e:	4613      	mov	r3, r2
 8004060:	00db      	lsls	r3, r3, #3
 8004062:	4413      	add	r3, r2
 8004064:	009b      	lsls	r3, r3, #2
 8004066:	440b      	add	r3, r1
 8004068:	f8d3 3001 	ldr.w	r3, [r3, #1]
 800406c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004070:	ee07 3a10 	vmov	s14, r3
 8004074:	eef4 7a47 	vcmp.f32	s15, s14
 8004078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800407c:	d102      	bne.n	8004084 <getNextList+0x4c>
			ik = i;
 800407e:	7dbb      	ldrb	r3, [r7, #22]
 8004080:	75fb      	strb	r3, [r7, #23]
			break;
 8004082:	e009      	b.n	8004098 <getNextList+0x60>
	for (int8_t i = 0; i < MAX_LIST; i++) {
 8004084:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8004088:	b2db      	uxtb	r3, r3
 800408a:	3301      	adds	r3, #1
 800408c:	b2db      	uxtb	r3, r3
 800408e:	75bb      	strb	r3, [r7, #22]
 8004090:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8004094:	2b18      	cmp	r3, #24
 8004096:	dddf      	ble.n	8004058 <getNextList+0x20>
		}
	}
	if (ik != -1) {
 8004098:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800409c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040a0:	d01b      	beq.n	80040da <getNextList+0xa2>
		if (up) {
 80040a2:	7afb      	ldrb	r3, [r7, #11]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d00a      	beq.n	80040be <getNextList+0x86>
			if (++ik == MAX_LIST) ik = 0;
 80040a8:	7dfb      	ldrb	r3, [r7, #23]
 80040aa:	3301      	adds	r3, #1
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	75fb      	strb	r3, [r7, #23]
 80040b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80040b4:	2b19      	cmp	r3, #25
 80040b6:	d161      	bne.n	800417c <getNextList+0x144>
 80040b8:	2300      	movs	r3, #0
 80040ba:	75fb      	strb	r3, [r7, #23]
 80040bc:	e05e      	b.n	800417c <getNextList+0x144>
		} else {
			if (ik != 0) ik--; else ik = MAX_LIST - 1;
 80040be:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d006      	beq.n	80040d4 <getNextList+0x9c>
 80040c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	3b01      	subs	r3, #1
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	75fb      	strb	r3, [r7, #23]
 80040d2:	e053      	b.n	800417c <getNextList+0x144>
 80040d4:	2318      	movs	r3, #24
 80040d6:	75fb      	strb	r3, [r7, #23]
 80040d8:	e050      	b.n	800417c <getNextList+0x144>
		}
	} else {
		if (up) {// seek_up
 80040da:	7afb      	ldrb	r3, [r7, #11]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d023      	beq.n	8004128 <getNextList+0xf0>
			for (int8_t i = ik; i < MAX_LIST; i++) {
 80040e0:	7dfb      	ldrb	r3, [r7, #23]
 80040e2:	757b      	strb	r3, [r7, #21]
 80040e4:	e01b      	b.n	800411e <getNextList+0xe6>
				if (list[i].freq > fr) {
 80040e6:	f997 2015 	ldrsb.w	r2, [r7, #21]
 80040ea:	4942      	ldr	r1, [pc, #264]	; (80041f4 <getNextList+0x1bc>)
 80040ec:	4613      	mov	r3, r2
 80040ee:	00db      	lsls	r3, r3, #3
 80040f0:	4413      	add	r3, r2
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	440b      	add	r3, r1
 80040f6:	f8d3 3001 	ldr.w	r3, [r3, #1]
 80040fa:	edd7 7a03 	vldr	s15, [r7, #12]
 80040fe:	ee07 3a10 	vmov	s14, r3
 8004102:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800410a:	d502      	bpl.n	8004112 <getNextList+0xda>
					ik = i;
 800410c:	7d7b      	ldrb	r3, [r7, #21]
 800410e:	75fb      	strb	r3, [r7, #23]
					break;
 8004110:	e02d      	b.n	800416e <getNextList+0x136>
			for (int8_t i = ik; i < MAX_LIST; i++) {
 8004112:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8004116:	b2db      	uxtb	r3, r3
 8004118:	3301      	adds	r3, #1
 800411a:	b2db      	uxtb	r3, r3
 800411c:	757b      	strb	r3, [r7, #21]
 800411e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8004122:	2b18      	cmp	r3, #24
 8004124:	dddf      	ble.n	80040e6 <getNextList+0xae>
 8004126:	e022      	b.n	800416e <getNextList+0x136>
				}
			}
		} else {// seek_down
			for (int8_t i = ik; i <= 0; i--) {
 8004128:	7dfb      	ldrb	r3, [r7, #23]
 800412a:	753b      	strb	r3, [r7, #20]
 800412c:	e01b      	b.n	8004166 <getNextList+0x12e>
				if (list[i].freq < fr) {
 800412e:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8004132:	4930      	ldr	r1, [pc, #192]	; (80041f4 <getNextList+0x1bc>)
 8004134:	4613      	mov	r3, r2
 8004136:	00db      	lsls	r3, r3, #3
 8004138:	4413      	add	r3, r2
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	440b      	add	r3, r1
 800413e:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8004142:	edd7 7a03 	vldr	s15, [r7, #12]
 8004146:	ee07 3a10 	vmov	s14, r3
 800414a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800414e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004152:	dd02      	ble.n	800415a <getNextList+0x122>
					ik = i;
 8004154:	7d3b      	ldrb	r3, [r7, #20]
 8004156:	75fb      	strb	r3, [r7, #23]
					break;
 8004158:	e009      	b.n	800416e <getNextList+0x136>
			for (int8_t i = ik; i <= 0; i--) {
 800415a:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800415e:	b2db      	uxtb	r3, r3
 8004160:	3b01      	subs	r3, #1
 8004162:	b2db      	uxtb	r3, r3
 8004164:	753b      	strb	r3, [r7, #20]
 8004166:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800416a:	2b00      	cmp	r3, #0
 800416c:	dddf      	ble.n	800412e <getNextList+0xf6>
				}
			}
		}
		if (ik == -1) ik = 0;
 800416e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004172:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004176:	d101      	bne.n	800417c <getNextList+0x144>
 8004178:	2300      	movs	r3, #0
 800417a:	75fb      	strb	r3, [r7, #23]
	}
	ret = list[ik].freq;
 800417c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8004180:	491c      	ldr	r1, [pc, #112]	; (80041f4 <getNextList+0x1bc>)
 8004182:	4613      	mov	r3, r2
 8004184:	00db      	lsls	r3, r3, #3
 8004186:	4413      	add	r3, r2
 8004188:	009b      	lsls	r3, r3, #2
 800418a:	440b      	add	r3, r1
 800418c:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8004190:	613b      	str	r3, [r7, #16]
	*band = list[ik].band;
 8004192:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8004196:	4917      	ldr	r1, [pc, #92]	; (80041f4 <getNextList+0x1bc>)
 8004198:	4613      	mov	r3, r2
 800419a:	00db      	lsls	r3, r3, #3
 800419c:	4413      	add	r3, r2
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	440b      	add	r3, r1
 80041a2:	781a      	ldrb	r2, [r3, #0]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	701a      	strb	r2, [r3, #0]
	Report(1, "[%s] up=%u ik=%d, fr=%.1f ret=%.1f band=%u\r\n", __func__, up, ik, fr, ret, *band);
 80041a8:	f897 800b 	ldrb.w	r8, [r7, #11]
 80041ac:	f997 6017 	ldrsb.w	r6, [r7, #23]
 80041b0:	68f8      	ldr	r0, [r7, #12]
 80041b2:	f7fc f9c9 	bl	8000548 <__aeabi_f2d>
 80041b6:	4604      	mov	r4, r0
 80041b8:	460d      	mov	r5, r1
 80041ba:	6938      	ldr	r0, [r7, #16]
 80041bc:	f7fc f9c4 	bl	8000548 <__aeabi_f2d>
 80041c0:	4602      	mov	r2, r0
 80041c2:	460b      	mov	r3, r1
 80041c4:	6879      	ldr	r1, [r7, #4]
 80041c6:	7809      	ldrb	r1, [r1, #0]
 80041c8:	9106      	str	r1, [sp, #24]
 80041ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80041ce:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80041d2:	9600      	str	r6, [sp, #0]
 80041d4:	4643      	mov	r3, r8
 80041d6:	4a08      	ldr	r2, [pc, #32]	; (80041f8 <getNextList+0x1c0>)
 80041d8:	4908      	ldr	r1, [pc, #32]	; (80041fc <getNextList+0x1c4>)
 80041da:	2001      	movs	r0, #1
 80041dc:	f000 f9ce 	bl	800457c <Report>

	return ret;
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	ee07 3a90 	vmov	s15, r3
}
 80041e6:	eeb0 0a67 	vmov.f32	s0, s15
 80041ea:	3718      	adds	r7, #24
 80041ec:	46bd      	mov	sp, r7
 80041ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041f2:	bf00      	nop
 80041f4:	20002db0 	.word	0x20002db0
 80041f8:	08014ab8 	.word	0x08014ab8
 80041fc:	08013aec 	.word	0x08013aec

08004200 <showLine>:
//-------------------------------------------------------------------------------------------
void showLine(char *msg, uint16_t lin, int *last_len, bool update)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b08a      	sub	sp, #40	; 0x28
 8004204:	af02      	add	r7, sp, #8
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	607a      	str	r2, [r7, #4]
 800420a:	461a      	mov	r2, r3
 800420c:	460b      	mov	r3, r1
 800420e:	817b      	strh	r3, [r7, #10]
 8004210:	4613      	mov	r3, r2
 8004212:	727b      	strb	r3, [r7, #9]
int il = strlen(msg);
 8004214:	68f8      	ldr	r0, [r7, #12]
 8004216:	f7fb ffdb 	bl	80001d0 <strlen>
 800421a:	4603      	mov	r3, r0
 800421c:	617b      	str	r3, [r7, #20]
int xf = ( (SCREEN_WIDTH - (lfnt->FontWidth * il) ) >> 1);// & 0x7f;
 800421e:	4b2e      	ldr	r3, [pc, #184]	; (80042d8 <showLine+0xd8>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	781b      	ldrb	r3, [r3, #0]
 8004224:	461a      	mov	r2, r3
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	fb02 f303 	mul.w	r3, r2, r3
 800422c:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8004230:	105b      	asrs	r3, r3, #1
 8004232:	61fb      	str	r3, [r7, #28]
bool yes = false;
 8004234:	2300      	movs	r3, #0
 8004236:	76fb      	strb	r3, [r7, #27]

	if (*last_len > il) {
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	697a      	ldr	r2, [r7, #20]
 800423e:	429a      	cmp	r2, r3
 8004240:	da0d      	bge.n	800425e <showLine+0x5e>
		ST7565_DrawFilledRectangle(2, lin, SCREEN_WIDTH - 4, lfnt->FontHeight, PIX_OFF);
 8004242:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8004246:	4b24      	ldr	r3, [pc, #144]	; (80042d8 <showLine+0xd8>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	785b      	ldrb	r3, [r3, #1]
 800424c:	b21b      	sxth	r3, r3
 800424e:	2200      	movs	r2, #0
 8004250:	9200      	str	r2, [sp, #0]
 8004252:	227c      	movs	r2, #124	; 0x7c
 8004254:	2002      	movs	r0, #2
 8004256:	f7fd fcf0 	bl	8001c3a <ST7565_DrawFilledRectangle>
		yes = true;
 800425a:	2301      	movs	r3, #1
 800425c:	76fb      	strb	r3, [r7, #27]
	}
	*last_len = il;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	697a      	ldr	r2, [r7, #20]
 8004262:	601a      	str	r2, [r3, #0]
	if (*msg > 0x7f) {
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	781b      	ldrb	r3, [r3, #0]
 8004268:	b25b      	sxtb	r3, r3
 800426a:	2b00      	cmp	r3, #0
 800426c:	da03      	bge.n	8004276 <showLine+0x76>
		xf += il;
 800426e:	69fa      	ldr	r2, [r7, #28]
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	4413      	add	r3, r2
 8004274:	61fb      	str	r3, [r7, #28]
	}
	if (!yes) ST7565_DrawFilledRectangle(2, lin, SCREEN_WIDTH - 4, lfnt->FontHeight, PIX_OFF);
 8004276:	7efb      	ldrb	r3, [r7, #27]
 8004278:	f083 0301 	eor.w	r3, r3, #1
 800427c:	b2db      	uxtb	r3, r3
 800427e:	2b00      	cmp	r3, #0
 8004280:	d00b      	beq.n	800429a <showLine+0x9a>
 8004282:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8004286:	4b14      	ldr	r3, [pc, #80]	; (80042d8 <showLine+0xd8>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	785b      	ldrb	r3, [r3, #1]
 800428c:	b21b      	sxth	r3, r3
 800428e:	2200      	movs	r2, #0
 8004290:	9200      	str	r2, [sp, #0]
 8004292:	227c      	movs	r2, #124	; 0x7c
 8004294:	2002      	movs	r0, #2
 8004296:	f7fd fcd0 	bl	8001c3a <ST7565_DrawFilledRectangle>

	if ((!xf) || (xf > (SCREEN_WIDTH - 4))) xf = 1;
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d002      	beq.n	80042a6 <showLine+0xa6>
 80042a0:	69fb      	ldr	r3, [r7, #28]
 80042a2:	2b7c      	cmp	r3, #124	; 0x7c
 80042a4:	dd01      	ble.n	80042aa <showLine+0xaa>
 80042a6:	2301      	movs	r3, #1
 80042a8:	61fb      	str	r3, [r7, #28]
	ST7565_Print(xf, lin, msg, lfnt, 1, PIX_ON);
 80042aa:	69fb      	ldr	r3, [r7, #28]
 80042ac:	b218      	sxth	r0, r3
 80042ae:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80042b2:	4b09      	ldr	r3, [pc, #36]	; (80042d8 <showLine+0xd8>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	2201      	movs	r2, #1
 80042b8:	9201      	str	r2, [sp, #4]
 80042ba:	2201      	movs	r2, #1
 80042bc:	9200      	str	r2, [sp, #0]
 80042be:	68fa      	ldr	r2, [r7, #12]
 80042c0:	f7fd fa62 	bl	8001788 <ST7565_Print>
	if (update) ST7565_Update();
 80042c4:	7a7b      	ldrb	r3, [r7, #9]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d001      	beq.n	80042ce <showLine+0xce>
 80042ca:	f7fd f8ad 	bl	8001428 <ST7565_Update>
}
 80042ce:	bf00      	nop
 80042d0:	3720      	adds	r7, #32
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	20002d98 	.word	0x20002d98

080042dc <errLedOn>:
#endif
//-------------------------------------------------------------------------------------------
void errLedOn(bool on)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b082      	sub	sp, #8
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	4603      	mov	r3, r0
 80042e4:	71fb      	strb	r3, [r7, #7]
	if (on)
 80042e6:	79fb      	ldrb	r3, [r7, #7]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d005      	beq.n	80042f8 <errLedOn+0x1c>
		HAL_GPIO_WritePin(ERR_LED_GPIO_Port, ERR_LED_Pin, GPIO_PIN_SET);//LED ON
 80042ec:	2201      	movs	r2, #1
 80042ee:	2108      	movs	r1, #8
 80042f0:	4806      	ldr	r0, [pc, #24]	; (800430c <errLedOn+0x30>)
 80042f2:	f003 fbc5 	bl	8007a80 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(ERR_LED_GPIO_Port, ERR_LED_Pin, GPIO_PIN_RESET);//LED OFF
}
 80042f6:	e004      	b.n	8004302 <errLedOn+0x26>
		HAL_GPIO_WritePin(ERR_LED_GPIO_Port, ERR_LED_Pin, GPIO_PIN_RESET);//LED OFF
 80042f8:	2200      	movs	r2, #0
 80042fa:	2108      	movs	r1, #8
 80042fc:	4803      	ldr	r0, [pc, #12]	; (800430c <errLedOn+0x30>)
 80042fe:	f003 fbbf 	bl	8007a80 <HAL_GPIO_WritePin>
}
 8004302:	bf00      	nop
 8004304:	3708      	adds	r7, #8
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}
 800430a:	bf00      	nop
 800430c:	48000800 	.word	0x48000800

08004310 <get_secCounter>:
//------------------------------------------------------------------------------------
uint32_t get_secCounter()
{
 8004310:	b480      	push	{r7}
 8004312:	af00      	add	r7, sp, #0
	return secCounter;
 8004314:	4b03      	ldr	r3, [pc, #12]	; (8004324 <get_secCounter+0x14>)
 8004316:	681b      	ldr	r3, [r3, #0]
}
 8004318:	4618      	mov	r0, r3
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr
 8004322:	bf00      	nop
 8004324:	20001950 	.word	0x20001950

08004328 <toUppers>:
{
	return (get_msCounter() >= hs ? true : false);
}
//------------------------------------------------------------------------------------------
void toUppers(char *st)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b084      	sub	sp, #16
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
int i;

    for (i = 0; i < strlen(st); i++) *(st + i) = toupper(*(st + i));
 8004330:	2300      	movs	r3, #0
 8004332:	60fb      	str	r3, [r7, #12]
 8004334:	e019      	b.n	800436a <toUppers+0x42>
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	687a      	ldr	r2, [r7, #4]
 800433a:	4413      	add	r3, r2
 800433c:	781b      	ldrb	r3, [r3, #0]
 800433e:	72fb      	strb	r3, [r7, #11]
 8004340:	7afb      	ldrb	r3, [r7, #11]
 8004342:	3301      	adds	r3, #1
 8004344:	4a0f      	ldr	r2, [pc, #60]	; (8004384 <toUppers+0x5c>)
 8004346:	4413      	add	r3, r2
 8004348:	781b      	ldrb	r3, [r3, #0]
 800434a:	f003 0303 	and.w	r3, r3, #3
 800434e:	2b02      	cmp	r3, #2
 8004350:	d102      	bne.n	8004358 <toUppers+0x30>
 8004352:	7afb      	ldrb	r3, [r7, #11]
 8004354:	3b20      	subs	r3, #32
 8004356:	e000      	b.n	800435a <toUppers+0x32>
 8004358:	7afb      	ldrb	r3, [r7, #11]
 800435a:	68fa      	ldr	r2, [r7, #12]
 800435c:	6879      	ldr	r1, [r7, #4]
 800435e:	440a      	add	r2, r1
 8004360:	b2db      	uxtb	r3, r3
 8004362:	7013      	strb	r3, [r2, #0]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	3301      	adds	r3, #1
 8004368:	60fb      	str	r3, [r7, #12]
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f7fb ff30 	bl	80001d0 <strlen>
 8004370:	4602      	mov	r2, r0
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	429a      	cmp	r2, r3
 8004376:	d8de      	bhi.n	8004336 <toUppers+0xe>
}
 8004378:	bf00      	nop
 800437a:	bf00      	nop
 800437c:	3710      	adds	r7, #16
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}
 8004382:	bf00      	nop
 8004384:	08014b38 	.word	0x08014b38

08004388 <set_Date>:
//------------------------------------------------------------------------------------------
void set_Date(uint32_t usec)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b094      	sub	sp, #80	; 0x50
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
struct tm ts;
time_t ep = (time_t)usec;
 8004390:	6879      	ldr	r1, [r7, #4]
 8004392:	2000      	movs	r0, #0
 8004394:	460a      	mov	r2, r1
 8004396:	4603      	mov	r3, r0
 8004398:	e9c7 2308 	strd	r2, r3, [r7, #32]

	gmtime_r(&ep, &ts);
 800439c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80043a0:	f107 0320 	add.w	r3, r7, #32
 80043a4:	4611      	mov	r1, r2
 80043a6:	4618      	mov	r0, r3
 80043a8:	f00a fcc8 	bl	800ed3c <gmtime_r>

	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;
	sDate.WeekDay = ts.tm_wday;
 80043ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	723b      	strb	r3, [r7, #8]
	sDate.Month   = ts.tm_mon + 1;
 80043b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	3301      	adds	r3, #1
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	727b      	strb	r3, [r7, #9]
	sDate.Date    = ts.tm_mday;
 80043bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	72bb      	strb	r3, [r7, #10]
	sDate.Year    = ts.tm_year;
 80043c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	72fb      	strb	r3, [r7, #11]
	sTime.Hours   = ts.tm_hour + tZone;
 80043c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043ca:	b2da      	uxtb	r2, r3
 80043cc:	4b1a      	ldr	r3, [pc, #104]	; (8004438 <set_Date+0xb0>)
 80043ce:	781b      	ldrb	r3, [r3, #0]
 80043d0:	4413      	add	r3, r2
 80043d2:	b2db      	uxtb	r3, r3
 80043d4:	733b      	strb	r3, [r7, #12]
	sTime.Minutes = ts.tm_min;
 80043d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	737b      	strb	r3, [r7, #13]
	sTime.Seconds = ts.tm_sec;
 80043dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	73bb      	strb	r3, [r7, #14]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) devError |= devRTC;
 80043e2:	f107 030c 	add.w	r3, r7, #12
 80043e6:	2200      	movs	r2, #0
 80043e8:	4619      	mov	r1, r3
 80043ea:	4814      	ldr	r0, [pc, #80]	; (800443c <set_Date+0xb4>)
 80043ec:	f006 fc43 	bl	800ac76 <HAL_RTC_SetTime>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d007      	beq.n	8004406 <set_Date+0x7e>
 80043f6:	4b12      	ldr	r3, [pc, #72]	; (8004440 <set_Date+0xb8>)
 80043f8:	881b      	ldrh	r3, [r3, #0]
 80043fa:	f043 0308 	orr.w	r3, r3, #8
 80043fe:	b29a      	uxth	r2, r3
 8004400:	4b0f      	ldr	r3, [pc, #60]	; (8004440 <set_Date+0xb8>)
 8004402:	801a      	strh	r2, [r3, #0]
		if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) devError |= devRTC;
		else {
			setDate = true;
		}
	}
}
 8004404:	e014      	b.n	8004430 <set_Date+0xa8>
		if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) devError |= devRTC;
 8004406:	f107 0308 	add.w	r3, r7, #8
 800440a:	2200      	movs	r2, #0
 800440c:	4619      	mov	r1, r3
 800440e:	480b      	ldr	r0, [pc, #44]	; (800443c <set_Date+0xb4>)
 8004410:	f006 fd2a 	bl	800ae68 <HAL_RTC_SetDate>
 8004414:	4603      	mov	r3, r0
 8004416:	2b00      	cmp	r3, #0
 8004418:	d007      	beq.n	800442a <set_Date+0xa2>
 800441a:	4b09      	ldr	r3, [pc, #36]	; (8004440 <set_Date+0xb8>)
 800441c:	881b      	ldrh	r3, [r3, #0]
 800441e:	f043 0308 	orr.w	r3, r3, #8
 8004422:	b29a      	uxth	r2, r3
 8004424:	4b06      	ldr	r3, [pc, #24]	; (8004440 <set_Date+0xb8>)
 8004426:	801a      	strh	r2, [r3, #0]
}
 8004428:	e002      	b.n	8004430 <set_Date+0xa8>
			setDate = true;
 800442a:	4b06      	ldr	r3, [pc, #24]	; (8004444 <set_Date+0xbc>)
 800442c:	2201      	movs	r2, #1
 800442e:	701a      	strb	r2, [r3, #0]
}
 8004430:	bf00      	nop
 8004432:	3750      	adds	r7, #80	; 0x50
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}
 8004438:	20001d66 	.word	0x20001d66
 800443c:	20000924 	.word	0x20000924
 8004440:	2000194c 	.word	0x2000194c
 8004444:	20001d65 	.word	0x20001d65

08004448 <sec2str>:

	return ep;
}
//------------------------------------------------------------------------------------------
int sec2str(char *st)
{
 8004448:	b590      	push	{r4, r7, lr}
 800444a:	b093      	sub	sp, #76	; 0x4c
 800444c:	af04      	add	r7, sp, #16
 800444e:	6078      	str	r0, [r7, #4]
int ret = 0;
 8004450:	2300      	movs	r3, #0
 8004452:	637b      	str	r3, [r7, #52]	; 0x34

	if (!setDate) {
 8004454:	4b40      	ldr	r3, [pc, #256]	; (8004558 <sec2str+0x110>)
 8004456:	781b      	ldrb	r3, [r3, #0]
 8004458:	f083 0301 	eor.w	r3, r3, #1
 800445c:	b2db      	uxtb	r3, r3
 800445e:	2b00      	cmp	r3, #0
 8004460:	d040      	beq.n	80044e4 <sec2str+0x9c>
		uint32_t sec = get_secCounter();
 8004462:	f7ff ff55 	bl	8004310 <get_secCounter>
 8004466:	6338      	str	r0, [r7, #48]	; 0x30

		uint32_t day = sec / (60 * 60 * 24);
 8004468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800446a:	4a3c      	ldr	r2, [pc, #240]	; (800455c <sec2str+0x114>)
 800446c:	fba2 2303 	umull	r2, r3, r2, r3
 8004470:	0c1b      	lsrs	r3, r3, #16
 8004472:	62fb      	str	r3, [r7, #44]	; 0x2c
		sec %= (60 * 60 * 24);
 8004474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004476:	4a39      	ldr	r2, [pc, #228]	; (800455c <sec2str+0x114>)
 8004478:	fba2 1203 	umull	r1, r2, r2, r3
 800447c:	0c12      	lsrs	r2, r2, #16
 800447e:	4938      	ldr	r1, [pc, #224]	; (8004560 <sec2str+0x118>)
 8004480:	fb01 f202 	mul.w	r2, r1, r2
 8004484:	1a9b      	subs	r3, r3, r2
 8004486:	633b      	str	r3, [r7, #48]	; 0x30
		uint32_t hour = sec / (60 * 60);
 8004488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800448a:	4a36      	ldr	r2, [pc, #216]	; (8004564 <sec2str+0x11c>)
 800448c:	fba2 2303 	umull	r2, r3, r2, r3
 8004490:	0adb      	lsrs	r3, r3, #11
 8004492:	62bb      	str	r3, [r7, #40]	; 0x28
		sec %= (60 * 60);
 8004494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004496:	4a33      	ldr	r2, [pc, #204]	; (8004564 <sec2str+0x11c>)
 8004498:	fba2 1203 	umull	r1, r2, r2, r3
 800449c:	0ad2      	lsrs	r2, r2, #11
 800449e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80044a2:	fb01 f202 	mul.w	r2, r1, r2
 80044a6:	1a9b      	subs	r3, r3, r2
 80044a8:	633b      	str	r3, [r7, #48]	; 0x30
		uint32_t min = sec / (60);
 80044aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ac:	4a2e      	ldr	r2, [pc, #184]	; (8004568 <sec2str+0x120>)
 80044ae:	fba2 2303 	umull	r2, r3, r2, r3
 80044b2:	095b      	lsrs	r3, r3, #5
 80044b4:	627b      	str	r3, [r7, #36]	; 0x24
		sec %= 60;
 80044b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044b8:	4b2b      	ldr	r3, [pc, #172]	; (8004568 <sec2str+0x120>)
 80044ba:	fba3 1302 	umull	r1, r3, r3, r2
 80044be:	0959      	lsrs	r1, r3, #5
 80044c0:	460b      	mov	r3, r1
 80044c2:	011b      	lsls	r3, r3, #4
 80044c4:	1a5b      	subs	r3, r3, r1
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	633b      	str	r3, [r7, #48]	; 0x30

		ret = sprintf(st, "%lu.%02lu:%02lu:%02lu", day, hour, min, sec);
 80044cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ce:	9301      	str	r3, [sp, #4]
 80044d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d2:	9300      	str	r3, [sp, #0]
 80044d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044d8:	4924      	ldr	r1, [pc, #144]	; (800456c <sec2str+0x124>)
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f00b fa94 	bl	800fa08 <siprintf>
 80044e0:	6378      	str	r0, [r7, #52]	; 0x34
 80044e2:	e034      	b.n	800454e <sec2str+0x106>
	} else {
		RTC_TimeTypeDef sTime;
		RTC_DateTypeDef sDate;
		if (HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN)) devError |= devRTC;
 80044e4:	f107 030c 	add.w	r3, r7, #12
 80044e8:	2200      	movs	r2, #0
 80044ea:	4619      	mov	r1, r3
 80044ec:	4820      	ldr	r0, [pc, #128]	; (8004570 <sec2str+0x128>)
 80044ee:	f006 fd42 	bl	800af76 <HAL_RTC_GetDate>
 80044f2:	4603      	mov	r3, r0
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d007      	beq.n	8004508 <sec2str+0xc0>
 80044f8:	4b1e      	ldr	r3, [pc, #120]	; (8004574 <sec2str+0x12c>)
 80044fa:	881b      	ldrh	r3, [r3, #0]
 80044fc:	f043 0308 	orr.w	r3, r3, #8
 8004500:	b29a      	uxth	r2, r3
 8004502:	4b1c      	ldr	r3, [pc, #112]	; (8004574 <sec2str+0x12c>)
 8004504:	801a      	strh	r2, [r3, #0]
 8004506:	e022      	b.n	800454e <sec2str+0x106>
		else {
			if (HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN)) devError |= devRTC;
 8004508:	f107 0310 	add.w	r3, r7, #16
 800450c:	2200      	movs	r2, #0
 800450e:	4619      	mov	r1, r3
 8004510:	4817      	ldr	r0, [pc, #92]	; (8004570 <sec2str+0x128>)
 8004512:	f006 fc4d 	bl	800adb0 <HAL_RTC_GetTime>
 8004516:	4603      	mov	r3, r0
 8004518:	2b00      	cmp	r3, #0
 800451a:	d007      	beq.n	800452c <sec2str+0xe4>
 800451c:	4b15      	ldr	r3, [pc, #84]	; (8004574 <sec2str+0x12c>)
 800451e:	881b      	ldrh	r3, [r3, #0]
 8004520:	f043 0308 	orr.w	r3, r3, #8
 8004524:	b29a      	uxth	r2, r3
 8004526:	4b13      	ldr	r3, [pc, #76]	; (8004574 <sec2str+0x12c>)
 8004528:	801a      	strh	r2, [r3, #0]
 800452a:	e010      	b.n	800454e <sec2str+0x106>
			else {
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
								sDate.Date, sDate.Month,
 800452c:	7bbb      	ldrb	r3, [r7, #14]
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
 800452e:	4618      	mov	r0, r3
								sDate.Date, sDate.Month,
 8004530:	7b7b      	ldrb	r3, [r7, #13]
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
 8004532:	461c      	mov	r4, r3
								sTime.Hours, sTime.Minutes, sTime.Seconds);
 8004534:	7c3b      	ldrb	r3, [r7, #16]
 8004536:	7c7a      	ldrb	r2, [r7, #17]
 8004538:	7cb9      	ldrb	r1, [r7, #18]
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
 800453a:	9102      	str	r1, [sp, #8]
 800453c:	9201      	str	r2, [sp, #4]
 800453e:	9300      	str	r3, [sp, #0]
 8004540:	4623      	mov	r3, r4
 8004542:	4602      	mov	r2, r0
 8004544:	490c      	ldr	r1, [pc, #48]	; (8004578 <sec2str+0x130>)
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f00b fa5e 	bl	800fa08 <siprintf>
 800454c:	6378      	str	r0, [r7, #52]	; 0x34
			}
		}
	}

	return ret;
 800454e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004550:	4618      	mov	r0, r3
 8004552:	373c      	adds	r7, #60	; 0x3c
 8004554:	46bd      	mov	sp, r7
 8004556:	bd90      	pop	{r4, r7, pc}
 8004558:	20001d65 	.word	0x20001d65
 800455c:	c22e4507 	.word	0xc22e4507
 8004560:	00015180 	.word	0x00015180
 8004564:	91a2b3c5 	.word	0x91a2b3c5
 8004568:	88888889 	.word	0x88888889
 800456c:	08013b1c 	.word	0x08013b1c
 8004570:	20000924 	.word	0x20000924
 8004574:	2000194c 	.word	0x2000194c
 8004578:	08013b34 	.word	0x08013b34

0800457c <Report>:
//--------------------------------------------------------------------------------------------
void Report(const uint8_t addTime, const char *fmt, ...)
{
 800457c:	b40e      	push	{r1, r2, r3}
 800457e:	b590      	push	{r4, r7, lr}
 8004580:	b08a      	sub	sp, #40	; 0x28
 8004582:	af00      	add	r7, sp, #0
 8004584:	4603      	mov	r3, r0
 8004586:	71fb      	strb	r3, [r7, #7]
#ifdef SET_BLE
	if(sleep_mode) return;
 8004588:	4b3a      	ldr	r3, [pc, #232]	; (8004674 <Report+0xf8>)
 800458a:	781b      	ldrb	r3, [r3, #0]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d169      	bne.n	8004664 <Report+0xe8>
#endif

	size_t len = MAX_UART_BUF;
 8004590:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004594:	61bb      	str	r3, [r7, #24]
	char *buf = &cmdBuf[0];
 8004596:	4b38      	ldr	r3, [pc, #224]	; (8004678 <Report+0xfc>)
 8004598:	617b      	str	r3, [r7, #20]

	uint8_t cnt = 32;
 800459a:	2320      	movs	r3, #32
 800459c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t stim = HAL_GetTick();
 80045a0:	f002 fc94 	bl	8006ecc <HAL_GetTick>
 80045a4:	6238      	str	r0, [r7, #32]
	uint32_t etim = stim;
 80045a6:	6a3b      	ldr	r3, [r7, #32]
 80045a8:	613b      	str	r3, [r7, #16]
	while (!uartRdy && cnt) {
 80045aa:	e00e      	b.n	80045ca <Report+0x4e>
		etim = HAL_GetTick();
 80045ac:	f002 fc8e 	bl	8006ecc <HAL_GetTick>
 80045b0:	6138      	str	r0, [r7, #16]
		if (etim - stim) {
 80045b2:	693a      	ldr	r2, [r7, #16]
 80045b4:	6a3b      	ldr	r3, [r7, #32]
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d007      	beq.n	80045ca <Report+0x4e>
			stim = HAL_GetTick();
 80045ba:	f002 fc87 	bl	8006ecc <HAL_GetTick>
 80045be:	6238      	str	r0, [r7, #32]
			cnt--;
 80045c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80045c4:	3b01      	subs	r3, #1
 80045c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (!uartRdy && cnt) {
 80045ca:	4b2c      	ldr	r3, [pc, #176]	; (800467c <Report+0x100>)
 80045cc:	781b      	ldrb	r3, [r3, #0]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d103      	bne.n	80045da <Report+0x5e>
 80045d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d1e8      	bne.n	80045ac <Report+0x30>
		}
	}

	//if (buf) {
		*buf = '\0';
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	2200      	movs	r2, #0
 80045de:	701a      	strb	r2, [r3, #0]
		int dl = 0;
 80045e0:	2300      	movs	r3, #0
 80045e2:	61fb      	str	r3, [r7, #28]
		if (addTime) {
 80045e4:	79fb      	ldrb	r3, [r7, #7]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d010      	beq.n	800460c <Report+0x90>
			dl = sec2str(buf);
 80045ea:	6978      	ldr	r0, [r7, #20]
 80045ec:	f7ff ff2c 	bl	8004448 <sec2str>
 80045f0:	61f8      	str	r0, [r7, #28]
			strcat(buf, " | ");
 80045f2:	6978      	ldr	r0, [r7, #20]
 80045f4:	f7fb fdec 	bl	80001d0 <strlen>
 80045f8:	4603      	mov	r3, r0
 80045fa:	461a      	mov	r2, r3
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	4413      	add	r3, r2
 8004600:	4a1f      	ldr	r2, [pc, #124]	; (8004680 <Report+0x104>)
 8004602:	6810      	ldr	r0, [r2, #0]
 8004604:	6018      	str	r0, [r3, #0]
			dl += 3;
 8004606:	69fb      	ldr	r3, [r7, #28]
 8004608:	3303      	adds	r3, #3
 800460a:	61fb      	str	r3, [r7, #28]
		}

		va_list args;
		va_start(args, fmt);
 800460c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004610:	60fb      	str	r3, [r7, #12]
		vsnprintf(buf + dl, len - dl, fmt, args);
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	697a      	ldr	r2, [r7, #20]
 8004616:	18d0      	adds	r0, r2, r3
 8004618:	69fb      	ldr	r3, [r7, #28]
 800461a:	69ba      	ldr	r2, [r7, #24]
 800461c:	1ad1      	subs	r1, r2, r3
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004622:	f00c f92f 	bl	8010884 <vsniprintf>

		uartRdy = false;
 8004626:	4b15      	ldr	r3, [pc, #84]	; (800467c <Report+0x100>)
 8004628:	2200      	movs	r2, #0
 800462a:	701a      	strb	r2, [r3, #0]
		if (HAL_UART_Transmit_DMA(cmdPort, (uint8_t *)buf, strlen(buf)) != HAL_OK) devError |= devUART;
 800462c:	4b15      	ldr	r3, [pc, #84]	; (8004684 <Report+0x108>)
 800462e:	681c      	ldr	r4, [r3, #0]
 8004630:	6978      	ldr	r0, [r7, #20]
 8004632:	f7fb fdcd 	bl	80001d0 <strlen>
 8004636:	4603      	mov	r3, r0
 8004638:	b29b      	uxth	r3, r3
 800463a:	461a      	mov	r2, r3
 800463c:	6979      	ldr	r1, [r7, #20]
 800463e:	4620      	mov	r0, r4
 8004640:	f008 ffdc 	bl	800d5fc <HAL_UART_Transmit_DMA>
 8004644:	4603      	mov	r3, r0
 8004646:	2b00      	cmp	r3, #0
 8004648:	d006      	beq.n	8004658 <Report+0xdc>
 800464a:	4b0f      	ldr	r3, [pc, #60]	; (8004688 <Report+0x10c>)
 800464c:	881b      	ldrh	r3, [r3, #0]
 800464e:	f043 0302 	orr.w	r3, r3, #2
 8004652:	b29a      	uxth	r2, r3
 8004654:	4b0c      	ldr	r3, [pc, #48]	; (8004688 <Report+0x10c>)
 8004656:	801a      	strh	r2, [r3, #0]
		while (!uartRdy) {} //HAL_Delay(1)
 8004658:	bf00      	nop
 800465a:	4b08      	ldr	r3, [pc, #32]	; (800467c <Report+0x100>)
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d0fb      	beq.n	800465a <Report+0xde>
 8004662:	e000      	b.n	8004666 <Report+0xea>
	if(sleep_mode) return;
 8004664:	bf00      	nop
	//	free(buf);
	//} else {
	//	devError |= devMEM;
	//}

}
 8004666:	3728      	adds	r7, #40	; 0x28
 8004668:	46bd      	mov	sp, r7
 800466a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800466e:	b003      	add	sp, #12
 8004670:	4770      	bx	lr
 8004672:	bf00      	nop
 8004674:	20003589 	.word	0x20003589
 8004678:	2000114c 	.word	0x2000114c
 800467c:	20000014 	.word	0x20000014
 8004680:	08013b50 	.word	0x08013b50
 8004684:	20000010 	.word	0x20000010
 8004688:	2000194c 	.word	0x2000194c

0800468c <HAL_TIM_PeriodElapsedCallback>:



//------------------------------------------------------------------------------------------
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800468c:	b5b0      	push	{r4, r5, r7, lr}
 800468e:	b082      	sub	sp, #8
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM4) {
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a20      	ldr	r2, [pc, #128]	; (800471c <HAL_TIM_PeriodElapsedCallback+0x90>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d139      	bne.n	8004712 <HAL_TIM_PeriodElapsedCallback+0x86>
		msCounter++;//inc_msCounter();
 800469e:	4b20      	ldr	r3, [pc, #128]	; (8004720 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80046a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a4:	1c54      	adds	r4, r2, #1
 80046a6:	f143 0500 	adc.w	r5, r3, #0
 80046aa:	4b1d      	ldr	r3, [pc, #116]	; (8004720 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80046ac:	e9c3 4500 	strd	r4, r5, [r3]
		if (!(msCounter % _1s)) {// 1 seconda
 80046b0:	4b1b      	ldr	r3, [pc, #108]	; (8004720 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80046b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80046b6:	f04f 0264 	mov.w	r2, #100	; 0x64
 80046ba:	f04f 0300 	mov.w	r3, #0
 80046be:	f7fc fb33 	bl	8000d28 <__aeabi_uldivmod>
 80046c2:	4313      	orrs	r3, r2
 80046c4:	d111      	bne.n	80046ea <HAL_TIM_PeriodElapsedCallback+0x5e>
			secCounter++;
 80046c6:	4b17      	ldr	r3, [pc, #92]	; (8004724 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	3301      	adds	r3, #1
 80046cc:	4a15      	ldr	r2, [pc, #84]	; (8004724 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80046ce:	6013      	str	r3, [r2, #0]
		  	HAL_GPIO_TogglePin(TIK_LED_GPIO_Port, TIK_LED_Pin);
 80046d0:	2102      	movs	r1, #2
 80046d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80046d6:	f003 f9eb 	bl	8007ab0 <HAL_GPIO_TogglePin>
#ifdef SET_DISPLAY
		  	if (startSec) putEvt(evt_Sec);
 80046da:	4b13      	ldr	r3, [pc, #76]	; (8004728 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80046dc:	781b      	ldrb	r3, [r3, #0]
 80046de:	b2db      	uxtb	r3, r3
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d002      	beq.n	80046ea <HAL_TIM_PeriodElapsedCallback+0x5e>
 80046e4:	2008      	movs	r0, #8
 80046e6:	f7ff fbaf 	bl	8003e48 <putEvt>
#endif
	  	}
#ifdef SET_SLEEP
		if (sleep_mode) {
 80046ea:	4b10      	ldr	r3, [pc, #64]	; (800472c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80046ec:	781b      	ldrb	r3, [r3, #0]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d00f      	beq.n	8004712 <HAL_TIM_PeriodElapsedCallback+0x86>
			if (HAL_GPIO_ReadPin(CPU_WAKEUP_GPIO_Port, CPU_WAKEUP_Pin) == GPIO_PIN_SET) {
 80046f2:	2101      	movs	r1, #1
 80046f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80046f8:	f003 f9aa 	bl	8007a50 <HAL_GPIO_ReadPin>
 80046fc:	4603      	mov	r3, r0
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d107      	bne.n	8004712 <HAL_TIM_PeriodElapsedCallback+0x86>
				/*if (!tms) tms = HAL_GetTick();
				else
				if ((HAL_GetTick() - tms) > 500) {*/
					sleep_mode = false;
 8004702:	4b0a      	ldr	r3, [pc, #40]	; (800472c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8004704:	2200      	movs	r2, #0
 8004706:	701a      	strb	r2, [r3, #0]
					//tms = 0;
					HAL_PWR_DisableSleepOnExit();
 8004708:	f004 fec2 	bl	8009490 <HAL_PWR_DisableSleepOnExit>
					putEvt(cmdExitSleep);
 800470c:	2014      	movs	r0, #20
 800470e:	f7ff fb9b 	bl	8003e48 <putEvt>
				/*}*/
			}
		}
#endif
	}
}
 8004712:	bf00      	nop
 8004714:	3708      	adds	r7, #8
 8004716:	46bd      	mov	sp, r7
 8004718:	bdb0      	pop	{r4, r5, r7, pc}
 800471a:	bf00      	nop
 800471c:	40000800 	.word	0x40000800
 8004720:	20001958 	.word	0x20001958
 8004724:	20001950 	.word	0x20001950
 8004728:	20002d94 	.word	0x20002d94
 800472c:	20003589 	.word	0x20003589

08004730 <HAL_UART_TxCpltCallback>:
//--------------------------------------------------------------------------------------------

//-------------------------------------------------------------------------------------------
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004730:	b480      	push	{r7}
 8004732:	b083      	sub	sp, #12
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a0a      	ldr	r2, [pc, #40]	; (8004768 <HAL_UART_TxCpltCallback+0x38>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d103      	bne.n	800474a <HAL_UART_TxCpltCallback+0x1a>
		uartRdy = 1;
 8004742:	4b0a      	ldr	r3, [pc, #40]	; (800476c <HAL_UART_TxCpltCallback+0x3c>)
 8004744:	2201      	movs	r2, #1
 8004746:	701a      	strb	r2, [r3, #0]
	else
	if (huart->Instance == USART3) {
		bleRdy = 1;
	}
#endif
}
 8004748:	e007      	b.n	800475a <HAL_UART_TxCpltCallback+0x2a>
	if (huart->Instance == USART3) {
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a08      	ldr	r2, [pc, #32]	; (8004770 <HAL_UART_TxCpltCallback+0x40>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d102      	bne.n	800475a <HAL_UART_TxCpltCallback+0x2a>
		bleRdy = 1;
 8004754:	4b07      	ldr	r3, [pc, #28]	; (8004774 <HAL_UART_TxCpltCallback+0x44>)
 8004756:	2201      	movs	r2, #1
 8004758:	701a      	strb	r2, [r3, #0]
}
 800475a:	bf00      	nop
 800475c:	370c      	adds	r7, #12
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr
 8004766:	bf00      	nop
 8004768:	40004400 	.word	0x40004400
 800476c:	20000014 	.word	0x20000014
 8004770:	40004800 	.word	0x40004800
 8004774:	2000020c 	.word	0x2000020c

08004778 <HAL_UART_ErrorCallback>:
//-------------------------------------------------------------------------------------------
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004778:	b480      	push	{r7}
 800477a:	b083      	sub	sp, #12
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a0e      	ldr	r2, [pc, #56]	; (80047c0 <HAL_UART_ErrorCallback+0x48>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d107      	bne.n	800479a <HAL_UART_ErrorCallback+0x22>
		devError |= devUART;
 800478a:	4b0e      	ldr	r3, [pc, #56]	; (80047c4 <HAL_UART_ErrorCallback+0x4c>)
 800478c:	881b      	ldrh	r3, [r3, #0]
 800478e:	f043 0302 	orr.w	r3, r3, #2
 8004792:	b29a      	uxth	r2, r3
 8004794:	4b0b      	ldr	r3, [pc, #44]	; (80047c4 <HAL_UART_ErrorCallback+0x4c>)
 8004796:	801a      	strh	r2, [r3, #0]
	else
	if (huart->Instance == USART3) {
		devError |= devBLE;
	}
#endif
}
 8004798:	e00b      	b.n	80047b2 <HAL_UART_ErrorCallback+0x3a>
	if (huart->Instance == USART3) {
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a0a      	ldr	r2, [pc, #40]	; (80047c8 <HAL_UART_ErrorCallback+0x50>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d106      	bne.n	80047b2 <HAL_UART_ErrorCallback+0x3a>
		devError |= devBLE;
 80047a4:	4b07      	ldr	r3, [pc, #28]	; (80047c4 <HAL_UART_ErrorCallback+0x4c>)
 80047a6:	881b      	ldrh	r3, [r3, #0]
 80047a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80047ac:	b29a      	uxth	r2, r3
 80047ae:	4b05      	ldr	r3, [pc, #20]	; (80047c4 <HAL_UART_ErrorCallback+0x4c>)
 80047b0:	801a      	strh	r2, [r3, #0]
}
 80047b2:	bf00      	nop
 80047b4:	370c      	adds	r7, #12
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr
 80047be:	bf00      	nop
 80047c0:	40004400 	.word	0x40004400
 80047c4:	2000194c 	.word	0x2000194c
 80047c8:	40004800 	.word	0x40004800

080047cc <HAL_UART_RxCpltCallback>:
//-------------------------------------------------------------------------------------------
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80047cc:	b590      	push	{r4, r7, lr}
 80047ce:	b091      	sub	sp, #68	; 0x44
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
#ifdef SET_BLE
	if (huart->Instance == USART3) {
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a86      	ldr	r2, [pc, #536]	; (80049f4 <HAL_UART_RxCpltCallback+0x228>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	f040 8085 	bne.w	80048ea <HAL_UART_RxCpltCallback+0x11e>
		if ((rxbByte > 0x0D) && (rxbByte < 0x80)) {
 80047e0:	4b85      	ldr	r3, [pc, #532]	; (80049f8 <HAL_UART_RxCpltCallback+0x22c>)
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	2b0d      	cmp	r3, #13
 80047e6:	d91a      	bls.n	800481e <HAL_UART_RxCpltCallback+0x52>
 80047e8:	4b83      	ldr	r3, [pc, #524]	; (80049f8 <HAL_UART_RxCpltCallback+0x22c>)
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	b25b      	sxtb	r3, r3
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	db15      	blt.n	800481e <HAL_UART_RxCpltCallback+0x52>
			if (rxbByte >= 0x20) adone = 1;
 80047f2:	4b81      	ldr	r3, [pc, #516]	; (80049f8 <HAL_UART_RxCpltCallback+0x22c>)
 80047f4:	781b      	ldrb	r3, [r3, #0]
 80047f6:	2b1f      	cmp	r3, #31
 80047f8:	d902      	bls.n	8004800 <HAL_UART_RxCpltCallback+0x34>
 80047fa:	4b80      	ldr	r3, [pc, #512]	; (80049fc <HAL_UART_RxCpltCallback+0x230>)
 80047fc:	2201      	movs	r2, #1
 80047fe:	701a      	strb	r2, [r3, #0]
			if (adone) rxbBuf[rxbInd++] = (char)rxbByte;
 8004800:	4b7e      	ldr	r3, [pc, #504]	; (80049fc <HAL_UART_RxCpltCallback+0x230>)
 8004802:	781b      	ldrb	r3, [r3, #0]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d00a      	beq.n	800481e <HAL_UART_RxCpltCallback+0x52>
 8004808:	4b7d      	ldr	r3, [pc, #500]	; (8004a00 <HAL_UART_RxCpltCallback+0x234>)
 800480a:	881b      	ldrh	r3, [r3, #0]
 800480c:	1c5a      	adds	r2, r3, #1
 800480e:	b291      	uxth	r1, r2
 8004810:	4a7b      	ldr	r2, [pc, #492]	; (8004a00 <HAL_UART_RxCpltCallback+0x234>)
 8004812:	8011      	strh	r1, [r2, #0]
 8004814:	461a      	mov	r2, r3
 8004816:	4b78      	ldr	r3, [pc, #480]	; (80049f8 <HAL_UART_RxCpltCallback+0x22c>)
 8004818:	7819      	ldrb	r1, [r3, #0]
 800481a:	4b7a      	ldr	r3, [pc, #488]	; (8004a04 <HAL_UART_RxCpltCallback+0x238>)
 800481c:	5499      	strb	r1, [r3, r2]
		}
		if (adone) {
 800481e:	4b77      	ldr	r3, [pc, #476]	; (80049fc <HAL_UART_RxCpltCallback+0x230>)
 8004820:	781b      	ldrb	r3, [r3, #0]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d050      	beq.n	80048c8 <HAL_UART_RxCpltCallback+0xfc>
		//rxbBuf[rxbInd++] = (char)rxbByte;
			if (rxbByte == 0x0a) {// '\n'
 8004826:	4b74      	ldr	r3, [pc, #464]	; (80049f8 <HAL_UART_RxCpltCallback+0x22c>)
 8004828:	781b      	ldrb	r3, [r3, #0]
 800482a:	2b0a      	cmp	r3, #10
 800482c:	d14c      	bne.n	80048c8 <HAL_UART_RxCpltCallback+0xfc>
				//rxbBuf[--rxbInd] = '\0';
				if (bleQueAckFlag) {
 800482e:	4b76      	ldr	r3, [pc, #472]	; (8004a08 <HAL_UART_RxCpltCallback+0x23c>)
 8004830:	781b      	ldrb	r3, [r3, #0]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d03c      	beq.n	80048b0 <HAL_UART_RxCpltCallback+0xe4>
					int len = strlen(rxbBuf);
 8004836:	4873      	ldr	r0, [pc, #460]	; (8004a04 <HAL_UART_RxCpltCallback+0x238>)
 8004838:	f7fb fcca 	bl	80001d0 <strlen>
 800483c:	4603      	mov	r3, r0
 800483e:	60fb      	str	r3, [r7, #12]
					// Блок помещает в очередь ответов на команду очередное сообщение от модуля BLE
					char *from = (char *)calloc(1, len + 1);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	3301      	adds	r3, #1
 8004844:	4619      	mov	r1, r3
 8004846:	2001      	movs	r0, #1
 8004848:	f00a fa6a 	bl	800ed20 <calloc>
 800484c:	4603      	mov	r3, r0
 800484e:	60bb      	str	r3, [r7, #8]
					if (from) {
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d025      	beq.n	80048a2 <HAL_UART_RxCpltCallback+0xd6>
						memcpy(from, rxbBuf, len);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	461a      	mov	r2, r3
 800485a:	496a      	ldr	r1, [pc, #424]	; (8004a04 <HAL_UART_RxCpltCallback+0x238>)
 800485c:	68b8      	ldr	r0, [r7, #8]
 800485e:	f00a fb4d 	bl	800eefc <memcpy>
						if (putRECQ(from, &bleQueAck) < 0) {
 8004862:	496a      	ldr	r1, [pc, #424]	; (8004a0c <HAL_UART_RxCpltCallback+0x240>)
 8004864:	68b8      	ldr	r0, [r7, #8]
 8004866:	f7fd fb5a 	bl	8001f1e <putRECQ>
 800486a:	4603      	mov	r3, r0
 800486c:	2b00      	cmp	r3, #0
 800486e:	da0a      	bge.n	8004886 <HAL_UART_RxCpltCallback+0xba>
							devError |= devQUE;
 8004870:	4b67      	ldr	r3, [pc, #412]	; (8004a10 <HAL_UART_RxCpltCallback+0x244>)
 8004872:	881b      	ldrh	r3, [r3, #0]
 8004874:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004878:	b29a      	uxth	r2, r3
 800487a:	4b65      	ldr	r3, [pc, #404]	; (8004a10 <HAL_UART_RxCpltCallback+0x244>)
 800487c:	801a      	strh	r2, [r3, #0]
							free(from);
 800487e:	68b8      	ldr	r0, [r7, #8]
 8004880:	f00a fb34 	bl	800eeec <free>
 8004884:	e014      	b.n	80048b0 <HAL_UART_RxCpltCallback+0xe4>
						} else {
							if (devError & devQUE) devError &= ~devQUE;
 8004886:	4b62      	ldr	r3, [pc, #392]	; (8004a10 <HAL_UART_RxCpltCallback+0x244>)
 8004888:	881b      	ldrh	r3, [r3, #0]
 800488a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800488e:	2b00      	cmp	r3, #0
 8004890:	d00e      	beq.n	80048b0 <HAL_UART_RxCpltCallback+0xe4>
 8004892:	4b5f      	ldr	r3, [pc, #380]	; (8004a10 <HAL_UART_RxCpltCallback+0x244>)
 8004894:	881b      	ldrh	r3, [r3, #0]
 8004896:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800489a:	b29a      	uxth	r2, r3
 800489c:	4b5c      	ldr	r3, [pc, #368]	; (8004a10 <HAL_UART_RxCpltCallback+0x244>)
 800489e:	801a      	strh	r2, [r3, #0]
 80048a0:	e006      	b.n	80048b0 <HAL_UART_RxCpltCallback+0xe4>
						}
					} else {
						devError |= devMEM;
 80048a2:	4b5b      	ldr	r3, [pc, #364]	; (8004a10 <HAL_UART_RxCpltCallback+0x244>)
 80048a4:	881b      	ldrh	r3, [r3, #0]
 80048a6:	f043 0304 	orr.w	r3, r3, #4
 80048aa:	b29a      	uxth	r2, r3
 80048ac:	4b58      	ldr	r3, [pc, #352]	; (8004a10 <HAL_UART_RxCpltCallback+0x244>)
 80048ae:	801a      	strh	r2, [r3, #0]
					}
					//-----------------------------------------------------------------------------
				}
				rxbInd = 0;
 80048b0:	4b53      	ldr	r3, [pc, #332]	; (8004a00 <HAL_UART_RxCpltCallback+0x234>)
 80048b2:	2200      	movs	r2, #0
 80048b4:	801a      	strh	r2, [r3, #0]
				adone = 0;
 80048b6:	4b51      	ldr	r3, [pc, #324]	; (80049fc <HAL_UART_RxCpltCallback+0x230>)
 80048b8:	2200      	movs	r2, #0
 80048ba:	701a      	strb	r2, [r3, #0]
				memset(rxbBuf, 0, sizeof(rxbBuf));
 80048bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80048c0:	2100      	movs	r1, #0
 80048c2:	4850      	ldr	r0, [pc, #320]	; (8004a04 <HAL_UART_RxCpltCallback+0x238>)
 80048c4:	f00a fb28 	bl	800ef18 <memset>
			}
		}
		//
		if (HAL_UART_Receive_IT(huart, &rxbByte, 1) != HAL_OK) devError |= devBLE;
 80048c8:	2201      	movs	r2, #1
 80048ca:	494b      	ldr	r1, [pc, #300]	; (80049f8 <HAL_UART_RxCpltCallback+0x22c>)
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	f008 fe3f 	bl	800d550 <HAL_UART_Receive_IT>
 80048d2:	4603      	mov	r3, r0
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	f000 82cf 	beq.w	8004e78 <HAL_UART_RxCpltCallback+0x6ac>
 80048da:	4b4d      	ldr	r3, [pc, #308]	; (8004a10 <HAL_UART_RxCpltCallback+0x244>)
 80048dc:	881b      	ldrh	r3, [r3, #0]
 80048de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80048e2:	b29a      	uxth	r2, r3
 80048e4:	4b4a      	ldr	r3, [pc, #296]	; (8004a10 <HAL_UART_RxCpltCallback+0x244>)
 80048e6:	801a      	strh	r2, [r3, #0]
			*rxBuf = '\0';
		}

		if (HAL_UART_Receive_IT(huart, &rxByte, 1) != HAL_OK) devError |= devUART;
	}
}
 80048e8:	e2c6      	b.n	8004e78 <HAL_UART_RxCpltCallback+0x6ac>
	if (huart->Instance == USART2) {
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a49      	ldr	r2, [pc, #292]	; (8004a14 <HAL_UART_RxCpltCallback+0x248>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	f040 82c1 	bne.w	8004e78 <HAL_UART_RxCpltCallback+0x6ac>
		rxBuf[rxInd++] = (char)rxByte;
 80048f6:	4b48      	ldr	r3, [pc, #288]	; (8004a18 <HAL_UART_RxCpltCallback+0x24c>)
 80048f8:	881b      	ldrh	r3, [r3, #0]
 80048fa:	1c5a      	adds	r2, r3, #1
 80048fc:	b291      	uxth	r1, r2
 80048fe:	4a46      	ldr	r2, [pc, #280]	; (8004a18 <HAL_UART_RxCpltCallback+0x24c>)
 8004900:	8011      	strh	r1, [r2, #0]
 8004902:	461a      	mov	r2, r3
 8004904:	4b45      	ldr	r3, [pc, #276]	; (8004a1c <HAL_UART_RxCpltCallback+0x250>)
 8004906:	7819      	ldrb	r1, [r3, #0]
 8004908:	4b45      	ldr	r3, [pc, #276]	; (8004a20 <HAL_UART_RxCpltCallback+0x254>)
 800490a:	5499      	strb	r1, [r3, r2]
		if (rxByte == 0x0a) {//end of line
 800490c:	4b43      	ldr	r3, [pc, #268]	; (8004a1c <HAL_UART_RxCpltCallback+0x250>)
 800490e:	781b      	ldrb	r3, [r3, #0]
 8004910:	2b0a      	cmp	r3, #10
 8004912:	f040 82a2 	bne.w	8004e5a <HAL_UART_RxCpltCallback+0x68e>
			rxBuf[--rxInd] = '\0';
 8004916:	4b40      	ldr	r3, [pc, #256]	; (8004a18 <HAL_UART_RxCpltCallback+0x24c>)
 8004918:	881b      	ldrh	r3, [r3, #0]
 800491a:	3b01      	subs	r3, #1
 800491c:	b29a      	uxth	r2, r3
 800491e:	4b3e      	ldr	r3, [pc, #248]	; (8004a18 <HAL_UART_RxCpltCallback+0x24c>)
 8004920:	801a      	strh	r2, [r3, #0]
 8004922:	4b3d      	ldr	r3, [pc, #244]	; (8004a18 <HAL_UART_RxCpltCallback+0x24c>)
 8004924:	881b      	ldrh	r3, [r3, #0]
 8004926:	461a      	mov	r2, r3
 8004928:	4b3d      	ldr	r3, [pc, #244]	; (8004a20 <HAL_UART_RxCpltCallback+0x254>)
 800492a:	2100      	movs	r1, #0
 800492c:	5499      	strb	r1, [r3, r2]
			int i, ev = -1;
 800492e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004932:	63bb      	str	r3, [r7, #56]	; 0x38
			if (strlen(rxBuf) > 2) {
 8004934:	483a      	ldr	r0, [pc, #232]	; (8004a20 <HAL_UART_RxCpltCallback+0x254>)
 8004936:	f7fb fc4b 	bl	80001d0 <strlen>
 800493a:	4603      	mov	r3, r0
 800493c:	2b02      	cmp	r3, #2
 800493e:	f240 8286 	bls.w	8004e4e <HAL_UART_RxCpltCallback+0x682>
				if ( (strstr(rxBuf, "at+")) || (strstr(rxBuf, "AT+")) ) {
 8004942:	4938      	ldr	r1, [pc, #224]	; (8004a24 <HAL_UART_RxCpltCallback+0x258>)
 8004944:	4836      	ldr	r0, [pc, #216]	; (8004a20 <HAL_UART_RxCpltCallback+0x254>)
 8004946:	f00b f8a0 	bl	800fa8a <strstr>
 800494a:	4603      	mov	r3, r0
 800494c:	2b00      	cmp	r3, #0
 800494e:	d106      	bne.n	800495e <HAL_UART_RxCpltCallback+0x192>
 8004950:	4935      	ldr	r1, [pc, #212]	; (8004a28 <HAL_UART_RxCpltCallback+0x25c>)
 8004952:	4833      	ldr	r0, [pc, #204]	; (8004a20 <HAL_UART_RxCpltCallback+0x254>)
 8004954:	f00b f899 	bl	800fa8a <strstr>
 8004958:	4603      	mov	r3, r0
 800495a:	2b00      	cmp	r3, #0
 800495c:	d047      	beq.n	80049ee <HAL_UART_RxCpltCallback+0x222>
					if (bleQueCmdFlag) {
 800495e:	4b33      	ldr	r3, [pc, #204]	; (8004a2c <HAL_UART_RxCpltCallback+0x260>)
 8004960:	781b      	ldrb	r3, [r3, #0]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d03f      	beq.n	80049e6 <HAL_UART_RxCpltCallback+0x21a>
						int len = strlen(rxBuf);
 8004966:	482e      	ldr	r0, [pc, #184]	; (8004a20 <HAL_UART_RxCpltCallback+0x254>)
 8004968:	f7fb fc32 	bl	80001d0 <strlen>
 800496c:	4603      	mov	r3, r0
 800496e:	617b      	str	r3, [r7, #20]
						char *to = (char *)calloc(1, len + 3);
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	3303      	adds	r3, #3
 8004974:	4619      	mov	r1, r3
 8004976:	2001      	movs	r0, #1
 8004978:	f00a f9d2 	bl	800ed20 <calloc>
 800497c:	4603      	mov	r3, r0
 800497e:	613b      	str	r3, [r7, #16]
						if (to) {
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d028      	beq.n	80049d8 <HAL_UART_RxCpltCallback+0x20c>
							memcpy(to, rxBuf, len);
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	461a      	mov	r2, r3
 800498a:	4925      	ldr	r1, [pc, #148]	; (8004a20 <HAL_UART_RxCpltCallback+0x254>)
 800498c:	6938      	ldr	r0, [r7, #16]
 800498e:	f00a fab5 	bl	800eefc <memcpy>
							toUppers(to);
 8004992:	6938      	ldr	r0, [r7, #16]
 8004994:	f7ff fcc8 	bl	8004328 <toUppers>
							if (putRECQ(to, &bleQueCmd) < 0) {
 8004998:	4925      	ldr	r1, [pc, #148]	; (8004a30 <HAL_UART_RxCpltCallback+0x264>)
 800499a:	6938      	ldr	r0, [r7, #16]
 800499c:	f7fd fabf 	bl	8001f1e <putRECQ>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	da0a      	bge.n	80049bc <HAL_UART_RxCpltCallback+0x1f0>
								devError |= devQUE;
 80049a6:	4b1a      	ldr	r3, [pc, #104]	; (8004a10 <HAL_UART_RxCpltCallback+0x244>)
 80049a8:	881b      	ldrh	r3, [r3, #0]
 80049aa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80049ae:	b29a      	uxth	r2, r3
 80049b0:	4b17      	ldr	r3, [pc, #92]	; (8004a10 <HAL_UART_RxCpltCallback+0x244>)
 80049b2:	801a      	strh	r2, [r3, #0]
								free(to);
 80049b4:	6938      	ldr	r0, [r7, #16]
 80049b6:	f00a fa99 	bl	800eeec <free>
 80049ba:	e014      	b.n	80049e6 <HAL_UART_RxCpltCallback+0x21a>
								if (devError & devQUE) devError &= ~devQUE;
 80049bc:	4b14      	ldr	r3, [pc, #80]	; (8004a10 <HAL_UART_RxCpltCallback+0x244>)
 80049be:	881b      	ldrh	r3, [r3, #0]
 80049c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d00e      	beq.n	80049e6 <HAL_UART_RxCpltCallback+0x21a>
 80049c8:	4b11      	ldr	r3, [pc, #68]	; (8004a10 <HAL_UART_RxCpltCallback+0x244>)
 80049ca:	881b      	ldrh	r3, [r3, #0]
 80049cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80049d0:	b29a      	uxth	r2, r3
 80049d2:	4b0f      	ldr	r3, [pc, #60]	; (8004a10 <HAL_UART_RxCpltCallback+0x244>)
 80049d4:	801a      	strh	r2, [r3, #0]
 80049d6:	e006      	b.n	80049e6 <HAL_UART_RxCpltCallback+0x21a>
							devError |= devMEM;
 80049d8:	4b0d      	ldr	r3, [pc, #52]	; (8004a10 <HAL_UART_RxCpltCallback+0x244>)
 80049da:	881b      	ldrh	r3, [r3, #0]
 80049dc:	f043 0304 	orr.w	r3, r3, #4
 80049e0:	b29a      	uxth	r2, r3
 80049e2:	4b0b      	ldr	r3, [pc, #44]	; (8004a10 <HAL_UART_RxCpltCallback+0x244>)
 80049e4:	801a      	strh	r2, [r3, #0]
					ev = -2;
 80049e6:	f06f 0301 	mvn.w	r3, #1
 80049ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80049ec:	e222      	b.n	8004e34 <HAL_UART_RxCpltCallback+0x668>
					for (i = 0; i < MAX_CMDS; i++) {
 80049ee:	2300      	movs	r3, #0
 80049f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049f2:	e219      	b.n	8004e28 <HAL_UART_RxCpltCallback+0x65c>
 80049f4:	40004800 	.word	0x40004800
 80049f8:	20003136 	.word	0x20003136
 80049fc:	2000343e 	.word	0x2000343e
 8004a00:	20003138 	.word	0x20003138
 8004a04:	2000313c 	.word	0x2000313c
 8004a08:	20003587 	.word	0x20003587
 8004a0c:	20003440 	.word	0x20003440
 8004a10:	2000194c 	.word	0x2000194c
 8004a14:	40004400 	.word	0x40004400
 8004a18:	20001962 	.word	0x20001962
 8004a1c:	20001960 	.word	0x20001960
 8004a20:	20001964 	.word	0x20001964
 8004a24:	08013b54 	.word	0x08013b54
 8004a28:	08013b58 	.word	0x08013b58
 8004a2c:	20003588 	.word	0x20003588
 8004a30:	200034e4 	.word	0x200034e4
						if (!strncmp(rxBuf, s_cmds[i], strlen(s_cmds[i]))) {
 8004a34:	4aab      	ldr	r2, [pc, #684]	; (8004ce4 <HAL_UART_RxCpltCallback+0x518>)
 8004a36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a38:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8004a3c:	4aa9      	ldr	r2, [pc, #676]	; (8004ce4 <HAL_UART_RxCpltCallback+0x518>)
 8004a3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a44:	4618      	mov	r0, r3
 8004a46:	f7fb fbc3 	bl	80001d0 <strlen>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	4621      	mov	r1, r4
 8004a50:	48a5      	ldr	r0, [pc, #660]	; (8004ce8 <HAL_UART_RxCpltCallback+0x51c>)
 8004a52:	f00b f806 	bl	800fa62 <strncmp>
 8004a56:	4603      	mov	r3, r0
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	f040 81e2 	bne.w	8004e22 <HAL_UART_RxCpltCallback+0x656>
							char *uk = rxBuf + strlen(s_cmds[i]);
 8004a5e:	4aa1      	ldr	r2, [pc, #644]	; (8004ce4 <HAL_UART_RxCpltCallback+0x518>)
 8004a60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a66:	4618      	mov	r0, r3
 8004a68:	f7fb fbb2 	bl	80001d0 <strlen>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	4a9e      	ldr	r2, [pc, #632]	; (8004ce8 <HAL_UART_RxCpltCallback+0x51c>)
 8004a70:	4413      	add	r3, r2
 8004a72:	633b      	str	r3, [r7, #48]	; 0x30
							ev = -1;
 8004a74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004a78:	63bb      	str	r3, [r7, #56]	; 0x38
							switch (i) {
 8004a7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a7c:	2b15      	cmp	r3, #21
 8004a7e:	f200 81d8 	bhi.w	8004e32 <HAL_UART_RxCpltCallback+0x666>
 8004a82:	a201      	add	r2, pc, #4	; (adr r2, 8004a88 <HAL_UART_RxCpltCallback+0x2bc>)
 8004a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a88:	08004c1b 	.word	0x08004c1b
 8004a8c:	08004c1b 	.word	0x08004c1b
 8004a90:	08004c21 	.word	0x08004c21
 8004a94:	08004e33 	.word	0x08004e33
 8004a98:	08004c73 	.word	0x08004c73
 8004a9c:	08004c73 	.word	0x08004c73
 8004aa0:	08004dc5 	.word	0x08004dc5
 8004aa4:	08004d29 	.word	0x08004d29
 8004aa8:	08004e33 	.word	0x08004e33
 8004aac:	08004c1b 	.word	0x08004c1b
 8004ab0:	08004c1b 	.word	0x08004c1b
 8004ab4:	08004bd9 	.word	0x08004bd9
 8004ab8:	08004b95 	.word	0x08004b95
 8004abc:	08004b0d 	.word	0x08004b0d
 8004ac0:	08004c1b 	.word	0x08004c1b
 8004ac4:	08004b77 	.word	0x08004b77
 8004ac8:	08004bd9 	.word	0x08004bd9
 8004acc:	08004ae1 	.word	0x08004ae1
 8004ad0:	08004c1b 	.word	0x08004c1b
 8004ad4:	08004c1b 	.word	0x08004c1b
 8004ad8:	08004e33 	.word	0x08004e33
 8004adc:	08004c1b 	.word	0x08004c1b
									if (strlen(uk) >= 1) {
 8004ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae2:	781b      	ldrb	r3, [r3, #0]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	f000 818a 	beq.w	8004dfe <HAL_UART_RxCpltCallback+0x632>
										newBand = atol(uk);
 8004aea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004aec:	f00a f913 	bl	800ed16 <atol>
 8004af0:	4603      	mov	r3, r0
 8004af2:	b2da      	uxtb	r2, r3
 8004af4:	4b7d      	ldr	r3, [pc, #500]	; (8004cec <HAL_UART_RxCpltCallback+0x520>)
 8004af6:	701a      	strb	r2, [r3, #0]
										if (newBand != Band) {
 8004af8:	4b7c      	ldr	r3, [pc, #496]	; (8004cec <HAL_UART_RxCpltCallback+0x520>)
 8004afa:	781a      	ldrb	r2, [r3, #0]
 8004afc:	4b7c      	ldr	r3, [pc, #496]	; (8004cf0 <HAL_UART_RxCpltCallback+0x524>)
 8004afe:	781b      	ldrb	r3, [r3, #0]
 8004b00:	429a      	cmp	r2, r3
 8004b02:	f000 817c 	beq.w	8004dfe <HAL_UART_RxCpltCallback+0x632>
											ev = i;
 8004b06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b08:	63bb      	str	r3, [r7, #56]	; 0x38
								break;
 8004b0a:	e178      	b.n	8004dfe <HAL_UART_RxCpltCallback+0x632>
									if (strlen(uk) >= 1) {
 8004b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b0e:	781b      	ldrb	r3, [r3, #0]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	f000 8176 	beq.w	8004e02 <HAL_UART_RxCpltCallback+0x636>
										uint8_t nv = Volume;
 8004b16:	4b77      	ldr	r3, [pc, #476]	; (8004cf4 <HAL_UART_RxCpltCallback+0x528>)
 8004b18:	781b      	ldrb	r3, [r3, #0]
 8004b1a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
										if (strstr(uk, "up")) {
 8004b1e:	4976      	ldr	r1, [pc, #472]	; (8004cf8 <HAL_UART_RxCpltCallback+0x52c>)
 8004b20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b22:	f00a ffb2 	bl	800fa8a <strstr>
 8004b26:	4603      	mov	r3, r0
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d005      	beq.n	8004b38 <HAL_UART_RxCpltCallback+0x36c>
											nv++;
 8004b2c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004b30:	3301      	adds	r3, #1
 8004b32:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8004b36:	e012      	b.n	8004b5e <HAL_UART_RxCpltCallback+0x392>
										} else if (strstr(uk, "down")) {
 8004b38:	4970      	ldr	r1, [pc, #448]	; (8004cfc <HAL_UART_RxCpltCallback+0x530>)
 8004b3a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b3c:	f00a ffa5 	bl	800fa8a <strstr>
 8004b40:	4603      	mov	r3, r0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d005      	beq.n	8004b52 <HAL_UART_RxCpltCallback+0x386>
											nv--;
 8004b46:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004b4a:	3b01      	subs	r3, #1
 8004b4c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8004b50:	e005      	b.n	8004b5e <HAL_UART_RxCpltCallback+0x392>
											nv = (uint8_t)atol(uk);
 8004b52:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b54:	f00a f8df 	bl	800ed16 <atol>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
										if ((nv >= 0) && (nv <= 15)) {
 8004b5e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004b62:	2b0f      	cmp	r3, #15
 8004b64:	f200 814d 	bhi.w	8004e02 <HAL_UART_RxCpltCallback+0x636>
											newVolume = nv;
 8004b68:	4a65      	ldr	r2, [pc, #404]	; (8004d00 <HAL_UART_RxCpltCallback+0x534>)
 8004b6a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004b6e:	7013      	strb	r3, [r2, #0]
											ev = i;
 8004b70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b72:	63bb      	str	r3, [r7, #56]	; 0x38
								break;
 8004b74:	e145      	b.n	8004e02 <HAL_UART_RxCpltCallback+0x636>
									if (strlen(uk) >= 1) {
 8004b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b78:	781b      	ldrb	r3, [r3, #0]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	f000 8143 	beq.w	8004e06 <HAL_UART_RxCpltCallback+0x63a>
										newBassBoost = (uint8_t)atol(uk);
 8004b80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b82:	f00a f8c8 	bl	800ed16 <atol>
 8004b86:	4603      	mov	r3, r0
 8004b88:	b2da      	uxtb	r2, r3
 8004b8a:	4b5e      	ldr	r3, [pc, #376]	; (8004d04 <HAL_UART_RxCpltCallback+0x538>)
 8004b8c:	701a      	strb	r2, [r3, #0]
										ev = i;
 8004b8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b90:	63bb      	str	r3, [r7, #56]	; 0x38
								break;
 8004b92:	e138      	b.n	8004e06 <HAL_UART_RxCpltCallback+0x63a>
									if (strlen(uk) >= 2) {
 8004b94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b96:	f7fb fb1b 	bl	80001d0 <strlen>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	f240 8134 	bls.w	8004e0a <HAL_UART_RxCpltCallback+0x63e>
										newFreq = (float)atof(uk);
 8004ba2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ba4:	f00a f8b0 	bl	800ed08 <atof>
 8004ba8:	ec53 2b10 	vmov	r2, r3, d0
 8004bac:	4610      	mov	r0, r2
 8004bae:	4619      	mov	r1, r3
 8004bb0:	f7fc f81a 	bl	8000be8 <__aeabi_d2f>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	4a54      	ldr	r2, [pc, #336]	; (8004d08 <HAL_UART_RxCpltCallback+0x53c>)
 8004bb8:	6013      	str	r3, [r2, #0]
										if (newFreq != Freq) {
 8004bba:	4b53      	ldr	r3, [pc, #332]	; (8004d08 <HAL_UART_RxCpltCallback+0x53c>)
 8004bbc:	ed93 7a00 	vldr	s14, [r3]
 8004bc0:	4b52      	ldr	r3, [pc, #328]	; (8004d0c <HAL_UART_RxCpltCallback+0x540>)
 8004bc2:	edd3 7a00 	vldr	s15, [r3]
 8004bc6:	eeb4 7a67 	vcmp.f32	s14, s15
 8004bca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bce:	f000 811c 	beq.w	8004e0a <HAL_UART_RxCpltCallback+0x63e>
											ev = i;
 8004bd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bd4:	63bb      	str	r3, [r7, #56]	; 0x38
								break;
 8004bd6:	e118      	b.n	8004e0a <HAL_UART_RxCpltCallback+0x63e>
									seek_up = 1;
 8004bd8:	4b4d      	ldr	r3, [pc, #308]	; (8004d10 <HAL_UART_RxCpltCallback+0x544>)
 8004bda:	2201      	movs	r2, #1
 8004bdc:	701a      	strb	r2, [r3, #0]
									ev = i;
 8004bde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004be0:	63bb      	str	r3, [r7, #56]	; 0x38
									char *uki = strchr(uk, ':');
 8004be2:	213a      	movs	r1, #58	; 0x3a
 8004be4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004be6:	f00a ff2f 	bl	800fa48 <strchr>
 8004bea:	62f8      	str	r0, [r7, #44]	; 0x2c
									if (uki) {
 8004bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	f000 810d 	beq.w	8004e0e <HAL_UART_RxCpltCallback+0x642>
										if ((*(char *)(uki + 1) == '0') || strstr(uki + 1, "down")) seek_up = 0;
 8004bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bf6:	3301      	adds	r3, #1
 8004bf8:	781b      	ldrb	r3, [r3, #0]
 8004bfa:	2b30      	cmp	r3, #48	; 0x30
 8004bfc:	d009      	beq.n	8004c12 <HAL_UART_RxCpltCallback+0x446>
 8004bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c00:	3301      	adds	r3, #1
 8004c02:	493e      	ldr	r1, [pc, #248]	; (8004cfc <HAL_UART_RxCpltCallback+0x530>)
 8004c04:	4618      	mov	r0, r3
 8004c06:	f00a ff40 	bl	800fa8a <strstr>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	f000 80fe 	beq.w	8004e0e <HAL_UART_RxCpltCallback+0x642>
 8004c12:	4b3f      	ldr	r3, [pc, #252]	; (8004d10 <HAL_UART_RxCpltCallback+0x544>)
 8004c14:	2200      	movs	r2, #0
 8004c16:	701a      	strb	r2, [r3, #0]
								break;
 8004c18:	e0f9      	b.n	8004e0e <HAL_UART_RxCpltCallback+0x642>
									ev = i;
 8004c1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c1c:	63bb      	str	r3, [r7, #56]	; 0x38
								break;
 8004c1e:	e0ff      	b.n	8004e20 <HAL_UART_RxCpltCallback+0x654>
									if (strlen(uk) >= 10) {
 8004c20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c22:	f7fb fad5 	bl	80001d0 <strlen>
 8004c26:	4603      	mov	r3, r0
 8004c28:	2b09      	cmp	r3, #9
 8004c2a:	f240 80f2 	bls.w	8004e12 <HAL_UART_RxCpltCallback+0x646>
										char *uki = strchr(uk, ':');
 8004c2e:	213a      	movs	r1, #58	; 0x3a
 8004c30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c32:	f00a ff09 	bl	800fa48 <strchr>
 8004c36:	61b8      	str	r0, [r7, #24]
										if (uki) {
 8004c38:	69bb      	ldr	r3, [r7, #24]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d00c      	beq.n	8004c58 <HAL_UART_RxCpltCallback+0x48c>
											tZone = (uint8_t)atol(uki + 1);
 8004c3e:	69bb      	ldr	r3, [r7, #24]
 8004c40:	3301      	adds	r3, #1
 8004c42:	4618      	mov	r0, r3
 8004c44:	f00a f867 	bl	800ed16 <atol>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	b2da      	uxtb	r2, r3
 8004c4c:	4b31      	ldr	r3, [pc, #196]	; (8004d14 <HAL_UART_RxCpltCallback+0x548>)
 8004c4e:	701a      	strb	r2, [r3, #0]
											*uki = '\0';
 8004c50:	69bb      	ldr	r3, [r7, #24]
 8004c52:	2200      	movs	r2, #0
 8004c54:	701a      	strb	r2, [r3, #0]
 8004c56:	e002      	b.n	8004c5e <HAL_UART_RxCpltCallback+0x492>
											tZone = 0;
 8004c58:	4b2e      	ldr	r3, [pc, #184]	; (8004d14 <HAL_UART_RxCpltCallback+0x548>)
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	701a      	strb	r2, [r3, #0]
										epoch = (uint32_t)atol(uk);
 8004c5e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c60:	f00a f859 	bl	800ed16 <atol>
 8004c64:	4603      	mov	r3, r0
 8004c66:	461a      	mov	r2, r3
 8004c68:	4b2b      	ldr	r3, [pc, #172]	; (8004d18 <HAL_UART_RxCpltCallback+0x54c>)
 8004c6a:	601a      	str	r2, [r3, #0]
										ev = i;
 8004c6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c6e:	63bb      	str	r3, [r7, #56]	; 0x38
								break;
 8004c70:	e0cf      	b.n	8004e12 <HAL_UART_RxCpltCallback+0x646>
									if (i == cmdsRead) cmd_sector = cmdsRead;
 8004c72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c74:	2b04      	cmp	r3, #4
 8004c76:	d103      	bne.n	8004c80 <HAL_UART_RxCpltCallback+0x4b4>
 8004c78:	4b28      	ldr	r3, [pc, #160]	; (8004d1c <HAL_UART_RxCpltCallback+0x550>)
 8004c7a:	2204      	movs	r2, #4
 8004c7c:	601a      	str	r2, [r3, #0]
 8004c7e:	e002      	b.n	8004c86 <HAL_UART_RxCpltCallback+0x4ba>
												  else cmd_sector = cmdsErase;
 8004c80:	4b26      	ldr	r3, [pc, #152]	; (8004d1c <HAL_UART_RxCpltCallback+0x550>)
 8004c82:	2205      	movs	r2, #5
 8004c84:	601a      	str	r2, [r3, #0]
									if (*uk == ':') {
 8004c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c88:	781b      	ldrb	r3, [r3, #0]
 8004c8a:	2b3a      	cmp	r3, #58	; 0x3a
 8004c8c:	f040 80c3 	bne.w	8004e16 <HAL_UART_RxCpltCallback+0x64a>
										int sek = atoi(++uk);
 8004c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c92:	3301      	adds	r3, #1
 8004c94:	633b      	str	r3, [r7, #48]	; 0x30
 8004c96:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c98:	f00a f839 	bl	800ed0e <atoi>
 8004c9c:	61f8      	str	r0, [r7, #28]
										if ( ((sek >= 0) && (sek < W25qxx_getSectorCount())) || (sek == -1) ) {
 8004c9e:	69fb      	ldr	r3, [r7, #28]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	db05      	blt.n	8004cb0 <HAL_UART_RxCpltCallback+0x4e4>
 8004ca4:	f001 fcf6 	bl	8006694 <W25qxx_getSectorCount>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	69fb      	ldr	r3, [r7, #28]
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d804      	bhi.n	8004cba <HAL_UART_RxCpltCallback+0x4ee>
 8004cb0:	69fb      	ldr	r3, [r7, #28]
 8004cb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004cb6:	f040 80ae 	bne.w	8004e16 <HAL_UART_RxCpltCallback+0x64a>
											adr_sector = sek;
 8004cba:	4a19      	ldr	r2, [pc, #100]	; (8004d20 <HAL_UART_RxCpltCallback+0x554>)
 8004cbc:	69fb      	ldr	r3, [r7, #28]
 8004cbe:	6013      	str	r3, [r2, #0]
											offset_sector = 0;
 8004cc0:	4b18      	ldr	r3, [pc, #96]	; (8004d24 <HAL_UART_RxCpltCallback+0x558>)
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	601a      	str	r2, [r3, #0]
											if (sek == -1) {
 8004cc6:	69fb      	ldr	r3, [r7, #28]
 8004cc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ccc:	d107      	bne.n	8004cde <HAL_UART_RxCpltCallback+0x512>
												if (cmd_sector == cmdsErase) ev = i;
 8004cce:	4b13      	ldr	r3, [pc, #76]	; (8004d1c <HAL_UART_RxCpltCallback+0x550>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	2b05      	cmp	r3, #5
 8004cd4:	f040 809f 	bne.w	8004e16 <HAL_UART_RxCpltCallback+0x64a>
 8004cd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cda:	63bb      	str	r3, [r7, #56]	; 0x38
								break;
 8004cdc:	e09b      	b.n	8004e16 <HAL_UART_RxCpltCallback+0x64a>
												ev = i;
 8004cde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ce0:	63bb      	str	r3, [r7, #56]	; 0x38
								break;
 8004ce2:	e098      	b.n	8004e16 <HAL_UART_RxCpltCallback+0x64a>
 8004ce4:	2000001c 	.word	0x2000001c
 8004ce8:	20001964 	.word	0x20001964
 8004cec:	200001ed 	.word	0x200001ed
 8004cf0:	200001ec 	.word	0x200001ec
 8004cf4:	200001ef 	.word	0x200001ef
 8004cf8:	08013b5c 	.word	0x08013b5c
 8004cfc:	08013b60 	.word	0x08013b60
 8004d00:	200001f0 	.word	0x200001f0
 8004d04:	20002dab 	.word	0x20002dab
 8004d08:	200001e8 	.word	0x200001e8
 8004d0c:	200001e4 	.word	0x200001e4
 8004d10:	200001ee 	.word	0x200001ee
 8004d14:	20001d66 	.word	0x20001d66
 8004d18:	20000018 	.word	0x20000018
 8004d1c:	200001d8 	.word	0x200001d8
 8004d20:	20001d70 	.word	0x20001d70
 8004d24:	20001d74 	.word	0x20001d74
									if (*uk == ':') {
 8004d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d2a:	781b      	ldrb	r3, [r3, #0]
 8004d2c:	2b3a      	cmp	r3, #58	; 0x3a
 8004d2e:	d174      	bne.n	8004e1a <HAL_UART_RxCpltCallback+0x64e>
										uk++;
 8004d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d32:	3301      	adds	r3, #1
 8004d34:	633b      	str	r3, [r7, #48]	; 0x30
										int sek = atoi(uk);
 8004d36:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d38:	f009 ffe9 	bl	800ed0e <atoi>
 8004d3c:	62b8      	str	r0, [r7, #40]	; 0x28
										if ((sek >= 0) && (sek < W25qxx_getSectorCount())) {
 8004d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	db6a      	blt.n	8004e1a <HAL_UART_RxCpltCallback+0x64e>
 8004d44:	f001 fca6 	bl	8006694 <W25qxx_getSectorCount>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d964      	bls.n	8004e1a <HAL_UART_RxCpltCallback+0x64e>
											char *ukn = strchr(uk, ':');
 8004d50:	213a      	movs	r1, #58	; 0x3a
 8004d52:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d54:	f00a fe78 	bl	800fa48 <strchr>
 8004d58:	6278      	str	r0, [r7, #36]	; 0x24
											if (ukn) {
 8004d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d05c      	beq.n	8004e1a <HAL_UART_RxCpltCallback+0x64e>
												len_write = -1;
 8004d60:	4b47      	ldr	r3, [pc, #284]	; (8004e80 <HAL_UART_RxCpltCallback+0x6b4>)
 8004d62:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004d66:	601a      	str	r2, [r3, #0]
												ukn++;
 8004d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6a:	3301      	adds	r3, #1
 8004d6c:	627b      	str	r3, [r7, #36]	; 0x24
												byte_write = hexToBin(ukn);
 8004d6e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d70:	f7fe fff0 	bl	8003d54 <hexToBin>
 8004d74:	4603      	mov	r3, r0
 8004d76:	461a      	mov	r2, r3
 8004d78:	4b42      	ldr	r3, [pc, #264]	; (8004e84 <HAL_UART_RxCpltCallback+0x6b8>)
 8004d7a:	701a      	strb	r2, [r3, #0]
												uk = strchr(ukn, ':');
 8004d7c:	213a      	movs	r1, #58	; 0x3a
 8004d7e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d80:	f00a fe62 	bl	800fa48 <strchr>
 8004d84:	6338      	str	r0, [r7, #48]	; 0x30
												if (uk) {
 8004d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d012      	beq.n	8004db2 <HAL_UART_RxCpltCallback+0x5e6>
													int l = atoi(++uk);
 8004d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d8e:	3301      	adds	r3, #1
 8004d90:	633b      	str	r3, [r7, #48]	; 0x30
 8004d92:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d94:	f009 ffbb 	bl	800ed0e <atoi>
 8004d98:	6238      	str	r0, [r7, #32]
													if ((l > 0) && (l < W25qxx_getSectorSize())) len_write = l;
 8004d9a:	6a3b      	ldr	r3, [r7, #32]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	dd08      	ble.n	8004db2 <HAL_UART_RxCpltCallback+0x5e6>
 8004da0:	f001 fc84 	bl	80066ac <W25qxx_getSectorSize>
 8004da4:	4602      	mov	r2, r0
 8004da6:	6a3b      	ldr	r3, [r7, #32]
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d902      	bls.n	8004db2 <HAL_UART_RxCpltCallback+0x5e6>
 8004dac:	4a34      	ldr	r2, [pc, #208]	; (8004e80 <HAL_UART_RxCpltCallback+0x6b4>)
 8004dae:	6a3b      	ldr	r3, [r7, #32]
 8004db0:	6013      	str	r3, [r2, #0]
												adr_sector = sek;
 8004db2:	4a35      	ldr	r2, [pc, #212]	; (8004e88 <HAL_UART_RxCpltCallback+0x6bc>)
 8004db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004db6:	6013      	str	r3, [r2, #0]
												offset_sector = 0;
 8004db8:	4b34      	ldr	r3, [pc, #208]	; (8004e8c <HAL_UART_RxCpltCallback+0x6c0>)
 8004dba:	2200      	movs	r2, #0
 8004dbc:	601a      	str	r2, [r3, #0]
												ev = i;//flag_sector = true;
 8004dbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dc0:	63bb      	str	r3, [r7, #56]	; 0x38
								break;
 8004dc2:	e02a      	b.n	8004e1a <HAL_UART_RxCpltCallback+0x64e>
									if ((last_cmd_sector == cmdsRead) || (last_cmd_sector == cmdsNext)) {
 8004dc4:	4b32      	ldr	r3, [pc, #200]	; (8004e90 <HAL_UART_RxCpltCallback+0x6c4>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	2b04      	cmp	r3, #4
 8004dca:	d003      	beq.n	8004dd4 <HAL_UART_RxCpltCallback+0x608>
 8004dcc:	4b30      	ldr	r3, [pc, #192]	; (8004e90 <HAL_UART_RxCpltCallback+0x6c4>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	2b06      	cmp	r3, #6
 8004dd2:	d124      	bne.n	8004e1e <HAL_UART_RxCpltCallback+0x652>
										if ((offset_sector + list_sector) < W25qxx_getSectorSize()) {
 8004dd4:	4b2d      	ldr	r3, [pc, #180]	; (8004e8c <HAL_UART_RxCpltCallback+0x6c0>)
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	4b2e      	ldr	r3, [pc, #184]	; (8004e94 <HAL_UART_RxCpltCallback+0x6c8>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4413      	add	r3, r2
 8004dde:	461c      	mov	r4, r3
 8004de0:	f001 fc64 	bl	80066ac <W25qxx_getSectorSize>
 8004de4:	4603      	mov	r3, r0
 8004de6:	429c      	cmp	r4, r3
 8004de8:	d219      	bcs.n	8004e1e <HAL_UART_RxCpltCallback+0x652>
											offset_sector += list_sector;
 8004dea:	4b28      	ldr	r3, [pc, #160]	; (8004e8c <HAL_UART_RxCpltCallback+0x6c0>)
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	4b29      	ldr	r3, [pc, #164]	; (8004e94 <HAL_UART_RxCpltCallback+0x6c8>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4413      	add	r3, r2
 8004df4:	4a25      	ldr	r2, [pc, #148]	; (8004e8c <HAL_UART_RxCpltCallback+0x6c0>)
 8004df6:	6013      	str	r3, [r2, #0]
											ev = i;//flag_sector = true;
 8004df8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dfa:	63bb      	str	r3, [r7, #56]	; 0x38
								break;
 8004dfc:	e00f      	b.n	8004e1e <HAL_UART_RxCpltCallback+0x652>
								break;
 8004dfe:	bf00      	nop
 8004e00:	e017      	b.n	8004e32 <HAL_UART_RxCpltCallback+0x666>
								break;
 8004e02:	bf00      	nop
 8004e04:	e015      	b.n	8004e32 <HAL_UART_RxCpltCallback+0x666>
								break;
 8004e06:	bf00      	nop
 8004e08:	e013      	b.n	8004e32 <HAL_UART_RxCpltCallback+0x666>
								break;
 8004e0a:	bf00      	nop
 8004e0c:	e011      	b.n	8004e32 <HAL_UART_RxCpltCallback+0x666>
								break;
 8004e0e:	bf00      	nop
 8004e10:	e00f      	b.n	8004e32 <HAL_UART_RxCpltCallback+0x666>
								break;
 8004e12:	bf00      	nop
 8004e14:	e00d      	b.n	8004e32 <HAL_UART_RxCpltCallback+0x666>
								break;
 8004e16:	bf00      	nop
 8004e18:	e00b      	b.n	8004e32 <HAL_UART_RxCpltCallback+0x666>
								break;
 8004e1a:	bf00      	nop
 8004e1c:	e009      	b.n	8004e32 <HAL_UART_RxCpltCallback+0x666>
								break;
 8004e1e:	bf00      	nop
							break;
 8004e20:	e007      	b.n	8004e32 <HAL_UART_RxCpltCallback+0x666>
					for (i = 0; i < MAX_CMDS; i++) {
 8004e22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e24:	3301      	adds	r3, #1
 8004e26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e2a:	2b15      	cmp	r3, #21
 8004e2c:	f77f ae02 	ble.w	8004a34 <HAL_UART_RxCpltCallback+0x268>
 8004e30:	e000      	b.n	8004e34 <HAL_UART_RxCpltCallback+0x668>
							break;
 8004e32:	bf00      	nop
				if (ev != -2) {
 8004e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e36:	f113 0f02 	cmn.w	r3, #2
 8004e3a:	d008      	beq.n	8004e4e <HAL_UART_RxCpltCallback+0x682>
					if (ev == -1) ev = cmdErr;
 8004e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e42:	d101      	bne.n	8004e48 <HAL_UART_RxCpltCallback+0x67c>
 8004e44:	2303      	movs	r3, #3
 8004e46:	63bb      	str	r3, [r7, #56]	; 0x38
					putEvt(ev);
 8004e48:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004e4a:	f7fe fffd 	bl	8003e48 <putEvt>
			rxInd = 0;
 8004e4e:	4b12      	ldr	r3, [pc, #72]	; (8004e98 <HAL_UART_RxCpltCallback+0x6cc>)
 8004e50:	2200      	movs	r2, #0
 8004e52:	801a      	strh	r2, [r3, #0]
			*rxBuf = '\0';
 8004e54:	4b11      	ldr	r3, [pc, #68]	; (8004e9c <HAL_UART_RxCpltCallback+0x6d0>)
 8004e56:	2200      	movs	r2, #0
 8004e58:	701a      	strb	r2, [r3, #0]
		if (HAL_UART_Receive_IT(huart, &rxByte, 1) != HAL_OK) devError |= devUART;
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	4910      	ldr	r1, [pc, #64]	; (8004ea0 <HAL_UART_RxCpltCallback+0x6d4>)
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f008 fb76 	bl	800d550 <HAL_UART_Receive_IT>
 8004e64:	4603      	mov	r3, r0
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d006      	beq.n	8004e78 <HAL_UART_RxCpltCallback+0x6ac>
 8004e6a:	4b0e      	ldr	r3, [pc, #56]	; (8004ea4 <HAL_UART_RxCpltCallback+0x6d8>)
 8004e6c:	881b      	ldrh	r3, [r3, #0]
 8004e6e:	f043 0302 	orr.w	r3, r3, #2
 8004e72:	b29a      	uxth	r2, r3
 8004e74:	4b0b      	ldr	r3, [pc, #44]	; (8004ea4 <HAL_UART_RxCpltCallback+0x6d8>)
 8004e76:	801a      	strh	r2, [r3, #0]
}
 8004e78:	bf00      	nop
 8004e7a:	3744      	adds	r7, #68	; 0x44
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd90      	pop	{r4, r7, pc}
 8004e80:	20001d7c 	.word	0x20001d7c
 8004e84:	200001e0 	.word	0x200001e0
 8004e88:	20001d70 	.word	0x20001d70
 8004e8c:	20001d74 	.word	0x20001d74
 8004e90:	200001dc 	.word	0x200001dc
 8004e94:	20001d78 	.word	0x20001d78
 8004e98:	20001962 	.word	0x20001962
 8004e9c:	20001964 	.word	0x20001964
 8004ea0:	20001960 	.word	0x20001960
 8004ea4:	2000194c 	.word	0x2000194c

08004ea8 <spiDone>:
//-------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------
//    Функция устанавливает в начальное состояние 'готов' служебные параметры порта SPI1:
//
void spiDone(SPI_HandleTypeDef *hspi)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b082      	sub	sp, #8
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
#ifdef SET_W25FLASH
	if (hspi->Instance == SPI2) {
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a0a      	ldr	r2, [pc, #40]	; (8004ee0 <spiDone+0x38>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d105      	bne.n	8004ec6 <spiDone+0x1e>
		W25_UNSELECT();
 8004eba:	f001 fa0f 	bl	80062dc <W25_UNSELECT>
		spiRdy = 1;
 8004ebe:	4b09      	ldr	r3, [pc, #36]	; (8004ee4 <spiDone+0x3c>)
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	701a      	strb	r2, [r3, #0]
	else
	if (hspi->Instance == SPI1) {
		lcdRdy = 1;
	}
#endif
}
 8004ec4:	e007      	b.n	8004ed6 <spiDone+0x2e>
	if (hspi->Instance == SPI1) {
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a07      	ldr	r2, [pc, #28]	; (8004ee8 <spiDone+0x40>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d102      	bne.n	8004ed6 <spiDone+0x2e>
		lcdRdy = 1;
 8004ed0:	4b06      	ldr	r3, [pc, #24]	; (8004eec <spiDone+0x44>)
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	701a      	strb	r2, [r3, #0]
}
 8004ed6:	bf00      	nop
 8004ed8:	3708      	adds	r7, #8
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}
 8004ede:	bf00      	nop
 8004ee0:	40003800 	.word	0x40003800
 8004ee4:	200001d4 	.word	0x200001d4
 8004ee8:	40013000 	.word	0x40013000
 8004eec:	20000000 	.word	0x20000000

08004ef0 <HAL_SPI_RxCpltCallback>:
//-------------------------------------------------------------------------------------------
//    CallBack функция, вызывается по завершении приема данных от порта SPI
//
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b082      	sub	sp, #8
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
	spiDone(hspi);
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f7ff ffd5 	bl	8004ea8 <spiDone>
}
 8004efe:	bf00      	nop
 8004f00:	3708      	adds	r7, #8
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}

08004f06 <HAL_SPI_TxCpltCallback>:
//-------------------------------------------------------------------------------------------
//    CallBack функция, вызывается по завершении передачи данных в порт SPI
//
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004f06:	b580      	push	{r7, lr}
 8004f08:	b082      	sub	sp, #8
 8004f0a:	af00      	add	r7, sp, #0
 8004f0c:	6078      	str	r0, [r7, #4]
	spiDone(hspi);
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f7ff ffca 	bl	8004ea8 <spiDone>
}
 8004f14:	bf00      	nop
 8004f16:	3708      	adds	r7, #8
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}

08004f1c <HAL_SPI_TxRxCpltCallback>:
//-------------------------------------------------------------------------------------------
//    CallBack функция, вызывается по завершении приема/передачи данных порта SPI
//
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b082      	sub	sp, #8
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
	spiDone(hspi);
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	f7ff ffbf 	bl	8004ea8 <spiDone>
}
 8004f2a:	bf00      	nop
 8004f2c:	3708      	adds	r7, #8
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}
	...

08004f34 <HAL_SPI_ErrorCallback>:
//--------------------------------------------------------------------------------------------
//    CallBack функция, вызывается при возникновении ошибки у модуля SPI
//
void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b082      	sub	sp, #8
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
	spiDone(hspi);
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f7ff ffb3 	bl	8004ea8 <spiDone>
	devError |= devSPI;
 8004f42:	4b05      	ldr	r3, [pc, #20]	; (8004f58 <HAL_SPI_ErrorCallback+0x24>)
 8004f44:	881b      	ldrh	r3, [r3, #0]
 8004f46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f4a:	b29a      	uxth	r2, r3
 8004f4c:	4b02      	ldr	r3, [pc, #8]	; (8004f58 <HAL_SPI_ErrorCallback+0x24>)
 8004f4e:	801a      	strh	r2, [r3, #0]
}
 8004f50:	bf00      	nop
 8004f52:	3708      	adds	r7, #8
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}
 8004f58:	2000194c 	.word	0x2000194c

08004f5c <HAL_I2C_ErrorCallback>:
	}
#endif
}
//--------------------------------------------------------------------------------------------
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b083      	sub	sp, #12
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
#ifdef SET_RDA_CHIP
	if (hi2c->Instance == I2C1) {
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a07      	ldr	r2, [pc, #28]	; (8004f88 <HAL_I2C_ErrorCallback+0x2c>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d106      	bne.n	8004f7c <HAL_I2C_ErrorCallback+0x20>
		devError |= devRDA;
 8004f6e:	4b07      	ldr	r3, [pc, #28]	; (8004f8c <HAL_I2C_ErrorCallback+0x30>)
 8004f70:	881b      	ldrh	r3, [r3, #0]
 8004f72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f76:	b29a      	uxth	r2, r3
 8004f78:	4b04      	ldr	r3, [pc, #16]	; (8004f8c <HAL_I2C_ErrorCallback+0x30>)
 8004f7a:	801a      	strh	r2, [r3, #0]
	}
#endif
}
 8004f7c:	bf00      	nop
 8004f7e:	370c      	adds	r7, #12
 8004f80:	46bd      	mov	sp, r7
 8004f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f86:	4770      	bx	lr
 8004f88:	40005400 	.word	0x40005400
 8004f8c:	2000194c 	.word	0x2000194c

08004f90 <HAL_GPIO_EXTI_Callback>:
//--------------------------------------------------------------------------------------------
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b082      	sub	sp, #8
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	4603      	mov	r3, r0
 8004f98:	80fb      	strh	r3, [r7, #6]
	if ((GPIO_Pin == KEY0_Pin) || (GPIO_Pin == KEY1_Pin)) {
 8004f9a:	88fb      	ldrh	r3, [r7, #6]
 8004f9c:	2b02      	cmp	r3, #2
 8004f9e:	d002      	beq.n	8004fa6 <HAL_GPIO_EXTI_Callback+0x16>
 8004fa0:	88fb      	ldrh	r3, [r7, #6]
 8004fa2:	2b04      	cmp	r3, #4
 8004fa4:	d10f      	bne.n	8004fc6 <HAL_GPIO_EXTI_Callback+0x36>
		if (GPIO_Pin == KEY0_Pin) seek_up = 1;
 8004fa6:	88fb      	ldrh	r3, [r7, #6]
 8004fa8:	2b02      	cmp	r3, #2
 8004faa:	d103      	bne.n	8004fb4 <HAL_GPIO_EXTI_Callback+0x24>
 8004fac:	4b08      	ldr	r3, [pc, #32]	; (8004fd0 <HAL_GPIO_EXTI_Callback+0x40>)
 8004fae:	2201      	movs	r2, #1
 8004fb0:	701a      	strb	r2, [r3, #0]
 8004fb2:	e005      	b.n	8004fc0 <HAL_GPIO_EXTI_Callback+0x30>
		else
		if (GPIO_Pin == KEY1_Pin) seek_up = 0;
 8004fb4:	88fb      	ldrh	r3, [r7, #6]
 8004fb6:	2b04      	cmp	r3, #4
 8004fb8:	d102      	bne.n	8004fc0 <HAL_GPIO_EXTI_Callback+0x30>
 8004fba:	4b05      	ldr	r3, [pc, #20]	; (8004fd0 <HAL_GPIO_EXTI_Callback+0x40>)
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	701a      	strb	r2, [r3, #0]
		putEvt(cmdScan);
 8004fc0:	200b      	movs	r0, #11
 8004fc2:	f7fe ff41 	bl	8003e48 <putEvt>
	}
}
 8004fc6:	bf00      	nop
 8004fc8:	3708      	adds	r7, #8
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}
 8004fce:	bf00      	nop
 8004fd0:	200001ee 	.word	0x200001ee

08004fd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8004fd8:	b672      	cpsid	i
}
 8004fda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  devError |= devSYS;
 8004fdc:	4b05      	ldr	r3, [pc, #20]	; (8004ff4 <Error_Handler+0x20>)
 8004fde:	881b      	ldrh	r3, [r3, #0]
 8004fe0:	f043 0320 	orr.w	r3, r3, #32
 8004fe4:	b29a      	uxth	r2, r3
 8004fe6:	4b03      	ldr	r3, [pc, #12]	; (8004ff4 <Error_Handler+0x20>)
 8004fe8:	801a      	strh	r2, [r3, #0]
	  errLedOn(true);
 8004fea:	2001      	movs	r0, #1
 8004fec:	f7ff f976 	bl	80042dc <errLedOn>
	  devError |= devSYS;
 8004ff0:	e7f4      	b.n	8004fdc <Error_Handler+0x8>
 8004ff2:	bf00      	nop
 8004ff4:	2000194c 	.word	0x2000194c

08004ff8 <rda5807_init>:

//==============================================================================
// Инициализация rda5807
//==============================================================================
uint8_t rda5807_init(float *freq)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b088      	sub	sp, #32
 8004ffc:	af04      	add	r7, sp, #16
 8004ffe:	6078      	str	r0, [r7, #4]
uint8_t buf[2] = {0, 0};
 8005000:	2300      	movs	r3, #0
 8005002:	813b      	strh	r3, [r7, #8]
uint8_t *id = &buf[0];
 8005004:	f107 0308 	add.w	r3, r7, #8
 8005008:	60fb      	str	r3, [r7, #12]

    if (HAL_I2C_Mem_Read(i2cRDA, RDA5807_RandAccess_Addr, 0, I2C_MEMADD_SIZE_8BIT, buf, 2, RDA5807_TO) != HAL_OK) {
 800500a:	4b30      	ldr	r3, [pc, #192]	; (80050cc <rda5807_init+0xd4>)
 800500c:	6818      	ldr	r0, [r3, #0]
 800500e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005012:	9302      	str	r3, [sp, #8]
 8005014:	2302      	movs	r3, #2
 8005016:	9301      	str	r3, [sp, #4]
 8005018:	f107 0308 	add.w	r3, r7, #8
 800501c:	9300      	str	r3, [sp, #0]
 800501e:	2301      	movs	r3, #1
 8005020:	2200      	movs	r2, #0
 8005022:	2122      	movs	r1, #34	; 0x22
 8005024:	f003 f80e 	bl	8008044 <HAL_I2C_Mem_Read>
 8005028:	4603      	mov	r3, r0
 800502a:	2b00      	cmp	r3, #0
 800502c:	d13c      	bne.n	80050a8 <rda5807_init+0xb0>
    stx[0] = '\0';
    for (int i = 0; i < 64; i++) sprintf(stx+strlen(stx)," %02x", buf11[i]);
    Report(1, "[%s] %s\r\n", __func__, stx);
#endif

    rda5807_SoftReset();
 800502e:	f000 f927 	bl	8005280 <rda5807_SoftReset>
    if (devError & devRDA) goto err_out;
 8005032:	4b27      	ldr	r3, [pc, #156]	; (80050d0 <rda5807_init+0xd8>)
 8005034:	881b      	ldrh	r3, [r3, #0]
 8005036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800503a:	2b00      	cmp	r3, #0
 800503c:	d136      	bne.n	80050ac <rda5807_init+0xb4>

    rda5807_SetupDefault();
 800503e:	f000 f949 	bl	80052d4 <rda5807_SetupDefault>
    if (devError & devRDA) goto err_out;
 8005042:	4b23      	ldr	r3, [pc, #140]	; (80050d0 <rda5807_init+0xd8>)
 8005044:	881b      	ldrh	r3, [r3, #0]
 8005046:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800504a:	2b00      	cmp	r3, #0
 800504c:	d130      	bne.n	80050b0 <rda5807_init+0xb8>

    uint16_t fr = (uint16_t)(*freq * 10);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	edd3 7a00 	vldr	s15, [r3]
 8005054:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005058:	ee67 7a87 	vmul.f32	s15, s15, s14
 800505c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005060:	ee17 3a90 	vmov	r3, s15
 8005064:	817b      	strh	r3, [r7, #10]
    rda5807_SetFreq_In100Khz(fr);
 8005066:	897b      	ldrh	r3, [r7, #10]
 8005068:	4618      	mov	r0, r3
 800506a:	f000 fa79 	bl	8005560 <rda5807_SetFreq_In100Khz>
    //
    HAL_Delay(200);
 800506e:	20c8      	movs	r0, #200	; 0xc8
 8005070:	f001 ff38 	bl	8006ee4 <HAL_Delay>
    //
    *freq = (float)rda5807_GetFreq_In100Khz();
 8005074:	f000 faee 	bl	8005654 <rda5807_GetFreq_In100Khz>
 8005078:	4603      	mov	r3, r0
 800507a:	ee07 3a90 	vmov	s15, r3
 800507e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	edc3 7a00 	vstr	s15, [r3]
    *freq /= 10;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	ed93 7a00 	vldr	s14, [r3]
 800508e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8005092:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	edc3 7a00 	vstr	s15, [r3]
#ifdef SET_RDA_DEBUG
    Report(1, "[%s] Freq: %.2f\r\n", __func__, *freq);//rda5807_GetFreq_In100Khz());
#endif

    HAL_Delay(100);
 800509c:	2064      	movs	r0, #100	; 0x64
 800509e:	f001 ff21 	bl	8006ee4 <HAL_Delay>

    return *id;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	781b      	ldrb	r3, [r3, #0]
 80050a6:	e00d      	b.n	80050c4 <rda5807_init+0xcc>
    	goto err_out;
 80050a8:	bf00      	nop
 80050aa:	e002      	b.n	80050b2 <rda5807_init+0xba>
    if (devError & devRDA) goto err_out;
 80050ac:	bf00      	nop
 80050ae:	e000      	b.n	80050b2 <rda5807_init+0xba>
    if (devError & devRDA) goto err_out;
 80050b0:	bf00      	nop

err_out:
	devError |= devRDA;
 80050b2:	4b07      	ldr	r3, [pc, #28]	; (80050d0 <rda5807_init+0xd8>)
 80050b4:	881b      	ldrh	r3, [r3, #0]
 80050b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050ba:	b29a      	uxth	r2, r3
 80050bc:	4b04      	ldr	r3, [pc, #16]	; (80050d0 <rda5807_init+0xd8>)
 80050be:	801a      	strh	r2, [r3, #0]
    return *id;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	781b      	ldrb	r3, [r3, #0]
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3710      	adds	r7, #16
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}
 80050cc:	20000210 	.word	0x20000210
 80050d0:	2000194c 	.word	0x2000194c

080050d4 <rda5807_rssi>:
//==============================================================================
uint16_t rda5807_rssi()
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b082      	sub	sp, #8
 80050d8:	af00      	add	r7, sp, #0
uint16_t word = 0;
 80050da:	2300      	movs	r3, #0
 80050dc:	80fb      	strh	r3, [r7, #6]

    rda5807_read(0x0B, &word, 1);
 80050de:	1dbb      	adds	r3, r7, #6
 80050e0:	2201      	movs	r2, #1
 80050e2:	4619      	mov	r1, r3
 80050e4:	200b      	movs	r0, #11
 80050e6:	f000 f85d 	bl	80051a4 <rda5807_read>

    return (word >> 9);
 80050ea:	88fb      	ldrh	r3, [r7, #6]
 80050ec:	0a5b      	lsrs	r3, r3, #9
 80050ee:	b29b      	uxth	r3, r3
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	3708      	adds	r7, #8
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}

080050f8 <rda5807_bytes_change>:

//==============================================================================
// Процедура меняет местами байты попарно в буфере pBuff 
//==============================================================================
void rda5807_bytes_change(uint8_t *pBuff, uint8_t count)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b085      	sub	sp, #20
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
 8005100:	460b      	mov	r3, r1
 8005102:	70fb      	strb	r3, [r7, #3]
    while (count > 1) {    // Если осталась хотя бы пара байт
 8005104:	e010      	b.n	8005128 <rda5807_bytes_change+0x30>
        uint8_t Temp = *(pBuff + 1);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	785b      	ldrb	r3, [r3, #1]
 800510a:	73fb      	strb	r3, [r7, #15]
        *(pBuff + 1) = *pBuff;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	3301      	adds	r3, #1
 8005110:	687a      	ldr	r2, [r7, #4]
 8005112:	7812      	ldrb	r2, [r2, #0]
 8005114:	701a      	strb	r2, [r3, #0]
        *pBuff = Temp;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	7bfa      	ldrb	r2, [r7, #15]
 800511a:	701a      	strb	r2, [r3, #0]
        pBuff += 2;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	3302      	adds	r3, #2
 8005120:	607b      	str	r3, [r7, #4]
        count -= 2;
 8005122:	78fb      	ldrb	r3, [r7, #3]
 8005124:	3b02      	subs	r3, #2
 8005126:	70fb      	strb	r3, [r7, #3]
    while (count > 1) {    // Если осталась хотя бы пара байт
 8005128:	78fb      	ldrb	r3, [r7, #3]
 800512a:	2b01      	cmp	r3, #1
 800512c:	d8eb      	bhi.n	8005106 <rda5807_bytes_change+0xe>
    }
}
 800512e:	bf00      	nop
 8005130:	bf00      	nop
 8005132:	3714      	adds	r7, #20
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr

0800513c <rda5807_write_regfile>:
//==============================================================================
// Процедура пишет в rda5807 группу регистров (кол-во RegNum) начиная с 0x02
// Используется I2C-адрес RDA5807_SeqAccess_Addr
//==============================================================================
void rda5807_write_regfile(uint16_t *pBuff, uint8_t RegNum)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b084      	sub	sp, #16
 8005140:	af02      	add	r7, sp, #8
 8005142:	6078      	str	r0, [r7, #4]
 8005144:	460b      	mov	r3, r1
 8005146:	70fb      	strb	r3, [r7, #3]
    err = i2cm_Start(I2Cx, RDA5807_SeqAccess_Addr, 0, RDA5807_TO);
    if (err) {
        Error_Handler();
    } //*/

    rda5807_bytes_change((uint8_t *)pBuff, RegNum << 1);
 8005148:	78fb      	ldrb	r3, [r7, #3]
 800514a:	005b      	lsls	r3, r3, #1
 800514c:	b2db      	uxtb	r3, r3
 800514e:	4619      	mov	r1, r3
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f7ff ffd1 	bl	80050f8 <rda5807_bytes_change>

//    err = i2cm_WriteBuff(I2Cx, (uint8_t *) pBuff, RegNum << 1, RDA5807_TO);
//    i2cm_Stop(I2Cx, RDA5807_TO);

    if (HAL_I2C_Master_Transmit(i2cRDA, (uint16_t)RDA5807_SeqAccess_Addr, (uint8_t *)pBuff, RegNum << 1, RDA5807_TO) != HAL_OK) {
 8005156:	4b11      	ldr	r3, [pc, #68]	; (800519c <rda5807_write_regfile+0x60>)
 8005158:	6818      	ldr	r0, [r3, #0]
 800515a:	78fb      	ldrb	r3, [r7, #3]
 800515c:	b29b      	uxth	r3, r3
 800515e:	005b      	lsls	r3, r3, #1
 8005160:	b29b      	uxth	r3, r3
 8005162:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005166:	9200      	str	r2, [sp, #0]
 8005168:	687a      	ldr	r2, [r7, #4]
 800516a:	2120      	movs	r1, #32
 800516c:	f002 fd62 	bl	8007c34 <HAL_I2C_Master_Transmit>
 8005170:	4603      	mov	r3, r0
 8005172:	2b00      	cmp	r3, #0
 8005174:	d006      	beq.n	8005184 <rda5807_write_regfile+0x48>
    	devError |= devRDA;
 8005176:	4b0a      	ldr	r3, [pc, #40]	; (80051a0 <rda5807_write_regfile+0x64>)
 8005178:	881b      	ldrh	r3, [r3, #0]
 800517a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800517e:	b29a      	uxth	r2, r3
 8005180:	4b07      	ldr	r3, [pc, #28]	; (80051a0 <rda5807_write_regfile+0x64>)
 8005182:	801a      	strh	r2, [r3, #0]
    }

    rda5807_bytes_change((uint8_t *)pBuff, RegNum << 1);
 8005184:	78fb      	ldrb	r3, [r7, #3]
 8005186:	005b      	lsls	r3, r3, #1
 8005188:	b2db      	uxtb	r3, r3
 800518a:	4619      	mov	r1, r3
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	f7ff ffb3 	bl	80050f8 <rda5807_bytes_change>
}
 8005192:	bf00      	nop
 8005194:	3708      	adds	r7, #8
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}
 800519a:	bf00      	nop
 800519c:	20000210 	.word	0x20000210
 80051a0:	2000194c 	.word	0x2000194c

080051a4 <rda5807_read>:
//==============================================================================
// Процедура читает из rda5807 группу регистров (кол-во RegNum) начиная с RegAddr
// Используется I2C-адрес RDA5807_RandAccess_Addr (для режима совместимости с rda5800)
//==============================================================================
void rda5807_read(uint8_t RegAddr, uint16_t *pBuff, uint8_t RegNum)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b086      	sub	sp, #24
 80051a8:	af04      	add	r7, sp, #16
 80051aa:	4603      	mov	r3, r0
 80051ac:	6039      	str	r1, [r7, #0]
 80051ae:	71fb      	strb	r3, [r7, #7]
 80051b0:	4613      	mov	r3, r2
 80051b2:	71bb      	strb	r3, [r7, #6]
        Error_Handler();
    }
    // Читаем
    i2cm_ReadBuffAndStop(I2Cx, (uint8_t *) pBuff, RegNum << 1, RDA5807_TO); //*/

    if (HAL_I2C_Mem_Read(i2cRDA, RDA5807_RandAccess_Addr,
 80051b4:	4b13      	ldr	r3, [pc, #76]	; (8005204 <rda5807_read+0x60>)
 80051b6:	6818      	ldr	r0, [r3, #0]
 80051b8:	79fb      	ldrb	r3, [r7, #7]
 80051ba:	b29a      	uxth	r2, r3
 80051bc:	79bb      	ldrb	r3, [r7, #6]
 80051be:	b29b      	uxth	r3, r3
 80051c0:	005b      	lsls	r3, r3, #1
 80051c2:	b29b      	uxth	r3, r3
 80051c4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80051c8:	9102      	str	r1, [sp, #8]
 80051ca:	9301      	str	r3, [sp, #4]
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	9300      	str	r3, [sp, #0]
 80051d0:	2301      	movs	r3, #1
 80051d2:	2122      	movs	r1, #34	; 0x22
 80051d4:	f002 ff36 	bl	8008044 <HAL_I2C_Mem_Read>
 80051d8:	4603      	mov	r3, r0
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d006      	beq.n	80051ec <rda5807_read+0x48>
    				     RegAddr, I2C_MEMADD_SIZE_8BIT,
						 (uint8_t *)pBuff, RegNum << 1,
						 RDA5807_TO) != HAL_OK) {
    	devError |= devRDA;
 80051de:	4b0a      	ldr	r3, [pc, #40]	; (8005208 <rda5807_read+0x64>)
 80051e0:	881b      	ldrh	r3, [r3, #0]
 80051e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051e6:	b29a      	uxth	r2, r3
 80051e8:	4b07      	ldr	r3, [pc, #28]	; (8005208 <rda5807_read+0x64>)
 80051ea:	801a      	strh	r2, [r3, #0]
    }

    rda5807_bytes_change((uint8_t *)pBuff, RegNum << 1);
 80051ec:	79bb      	ldrb	r3, [r7, #6]
 80051ee:	005b      	lsls	r3, r3, #1
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	4619      	mov	r1, r3
 80051f4:	6838      	ldr	r0, [r7, #0]
 80051f6:	f7ff ff7f 	bl	80050f8 <rda5807_bytes_change>
}
 80051fa:	bf00      	nop
 80051fc:	3708      	adds	r7, #8
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}
 8005202:	bf00      	nop
 8005204:	20000210 	.word	0x20000210
 8005208:	2000194c 	.word	0x2000194c

0800520c <rda5807_write>:
//==============================================================================
// Процедура пишет в rda5807 группу регистров (кол-во RegNum) начиная с RegAddr
// Используется I2C-адрес RDA5807_RandAccess_Addr (для режима совместимости с rda5800)
//==============================================================================
void rda5807_write(uint8_t RegAddr, uint16_t *pBuff, uint8_t RegNum)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b086      	sub	sp, #24
 8005210:	af04      	add	r7, sp, #16
 8005212:	4603      	mov	r3, r0
 8005214:	6039      	str	r1, [r7, #0]
 8005216:	71fb      	strb	r3, [r7, #7]
 8005218:	4613      	mov	r3, r2
 800521a:	71bb      	strb	r3, [r7, #6]

    if (i2cm_WriteBuff(I2Cx, &RegAddr, 1, RDA5807_TO)) {
        Error_Handler();
    } //*/

    rda5807_bytes_change((uint8_t *)pBuff, RegNum << 1);
 800521c:	79bb      	ldrb	r3, [r7, #6]
 800521e:	005b      	lsls	r3, r3, #1
 8005220:	b2db      	uxtb	r3, r3
 8005222:	4619      	mov	r1, r3
 8005224:	6838      	ldr	r0, [r7, #0]
 8005226:	f7ff ff67 	bl	80050f8 <rda5807_bytes_change>

    //err = i2cm_WriteBuff(I2Cx, (uint8_t *) pBuff, RegNum << 1, RDA5807_TO);
    //i2cm_Stop(I2Cx, RDA5807_TO);

    if (HAL_I2C_Mem_Write(i2cRDA,
 800522a:	4b13      	ldr	r3, [pc, #76]	; (8005278 <rda5807_write+0x6c>)
 800522c:	6818      	ldr	r0, [r3, #0]
 800522e:	79fb      	ldrb	r3, [r7, #7]
 8005230:	b29a      	uxth	r2, r3
 8005232:	79bb      	ldrb	r3, [r7, #6]
 8005234:	b29b      	uxth	r3, r3
 8005236:	005b      	lsls	r3, r3, #1
 8005238:	b29b      	uxth	r3, r3
 800523a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800523e:	9102      	str	r1, [sp, #8]
 8005240:	9301      	str	r3, [sp, #4]
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	9300      	str	r3, [sp, #0]
 8005246:	2301      	movs	r3, #1
 8005248:	2122      	movs	r1, #34	; 0x22
 800524a:	f002 fde7 	bl	8007e1c <HAL_I2C_Mem_Write>
 800524e:	4603      	mov	r3, r0
 8005250:	2b00      	cmp	r3, #0
 8005252:	d006      	beq.n	8005262 <rda5807_write+0x56>
    					  RDA5807_RandAccess_Addr,
						  RegAddr, I2C_MEMADD_SIZE_8BIT,
						  (uint8_t *)pBuff, RegNum << 1,
						  RDA5807_TO) != HAL_OK) {
    	devError |= devRDA;
 8005254:	4b09      	ldr	r3, [pc, #36]	; (800527c <rda5807_write+0x70>)
 8005256:	881b      	ldrh	r3, [r3, #0]
 8005258:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800525c:	b29a      	uxth	r2, r3
 800525e:	4b07      	ldr	r3, [pc, #28]	; (800527c <rda5807_write+0x70>)
 8005260:	801a      	strh	r2, [r3, #0]
    }

    rda5807_bytes_change((uint8_t *)pBuff, RegNum << 1);
 8005262:	79bb      	ldrb	r3, [r7, #6]
 8005264:	005b      	lsls	r3, r3, #1
 8005266:	b2db      	uxtb	r3, r3
 8005268:	4619      	mov	r1, r3
 800526a:	6838      	ldr	r0, [r7, #0]
 800526c:	f7ff ff44 	bl	80050f8 <rda5807_bytes_change>
}
 8005270:	bf00      	nop
 8005272:	3708      	adds	r7, #8
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}
 8005278:	20000210 	.word	0x20000210
 800527c:	2000194c 	.word	0x2000194c

08005280 <rda5807_SoftReset>:

//==============================================================================
// Процедура делает программный сброс rda5807
//==============================================================================
void rda5807_SoftReset()
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b082      	sub	sp, #8
 8005284:	af00      	add	r7, sp, #0
tReg02h reg02;

    rda5807_read(2, (uint16_t *)&reg02, 1);
 8005286:	1d3b      	adds	r3, r7, #4
 8005288:	2201      	movs	r2, #1
 800528a:	4619      	mov	r1, r3
 800528c:	2002      	movs	r0, #2
 800528e:	f7ff ff89 	bl	80051a4 <rda5807_read>

	reg02.bENABLE = 1;
 8005292:	793b      	ldrb	r3, [r7, #4]
 8005294:	f043 0301 	orr.w	r3, r3, #1
 8005298:	713b      	strb	r3, [r7, #4]
	reg02.bSOFT_RESET = 1;
 800529a:	793b      	ldrb	r3, [r7, #4]
 800529c:	f043 0302 	orr.w	r3, r3, #2
 80052a0:	713b      	strb	r3, [r7, #4]
    rda5807_write(2, (uint16_t *)&reg02, 1);
 80052a2:	1d3b      	adds	r3, r7, #4
 80052a4:	2201      	movs	r2, #1
 80052a6:	4619      	mov	r1, r3
 80052a8:	2002      	movs	r0, #2
 80052aa:	f7ff ffaf 	bl	800520c <rda5807_write>

    reg02.bENABLE = 1;
 80052ae:	793b      	ldrb	r3, [r7, #4]
 80052b0:	f043 0301 	orr.w	r3, r3, #1
 80052b4:	713b      	strb	r3, [r7, #4]
    reg02.bSOFT_RESET = 0;
 80052b6:	793b      	ldrb	r3, [r7, #4]
 80052b8:	f36f 0341 	bfc	r3, #1, #1
 80052bc:	713b      	strb	r3, [r7, #4]
    rda5807_write(2, (uint16_t *)&reg02, 1);
 80052be:	1d3b      	adds	r3, r7, #4
 80052c0:	2201      	movs	r2, #1
 80052c2:	4619      	mov	r1, r3
 80052c4:	2002      	movs	r0, #2
 80052c6:	f7ff ffa1 	bl	800520c <rda5807_write>
}
 80052ca:	bf00      	nop
 80052cc:	3708      	adds	r7, #8
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}
	...

080052d4 <rda5807_SetupDefault>:

//==============================================================================
// Процедура производит начальную настройку rda5807
//==============================================================================
void rda5807_SetupDefault()
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	af00      	add	r7, sp, #0
	tReg06h Reg06;
	tReg07h Reg07;
} Buffs;*/

    // Регистр 0x02
    Buffs.Reg02.bENABLE = 1;
 80052d8:	4a6b      	ldr	r2, [pc, #428]	; (8005488 <rda5807_SetupDefault+0x1b4>)
 80052da:	7813      	ldrb	r3, [r2, #0]
 80052dc:	f043 0301 	orr.w	r3, r3, #1
 80052e0:	7013      	strb	r3, [r2, #0]
    Buffs.Reg02.bSOFT_RESET = 0;
 80052e2:	4a69      	ldr	r2, [pc, #420]	; (8005488 <rda5807_SetupDefault+0x1b4>)
 80052e4:	7813      	ldrb	r3, [r2, #0]
 80052e6:	f36f 0341 	bfc	r3, #1, #1
 80052ea:	7013      	strb	r3, [r2, #0]
    Buffs.Reg02.bNEW_METHOD = 1;
 80052ec:	4a66      	ldr	r2, [pc, #408]	; (8005488 <rda5807_SetupDefault+0x1b4>)
 80052ee:	7813      	ldrb	r3, [r2, #0]
 80052f0:	f043 0304 	orr.w	r3, r3, #4
 80052f4:	7013      	strb	r3, [r2, #0]
    Buffs.Reg02.bRDS_EN = 1;
 80052f6:	4a64      	ldr	r2, [pc, #400]	; (8005488 <rda5807_SetupDefault+0x1b4>)
 80052f8:	7813      	ldrb	r3, [r2, #0]
 80052fa:	f043 0308 	orr.w	r3, r3, #8
 80052fe:	7013      	strb	r3, [r2, #0]
    Buffs.Reg02.bCLK_MODE = 0;        // 32.768
 8005300:	4a61      	ldr	r2, [pc, #388]	; (8005488 <rda5807_SetupDefault+0x1b4>)
 8005302:	7813      	ldrb	r3, [r2, #0]
 8005304:	f36f 1306 	bfc	r3, #4, #3
 8005308:	7013      	strb	r3, [r2, #0]
    Buffs.Reg02.bSKMODE = 0;
 800530a:	4a5f      	ldr	r2, [pc, #380]	; (8005488 <rda5807_SetupDefault+0x1b4>)
 800530c:	7813      	ldrb	r3, [r2, #0]
 800530e:	f36f 13c7 	bfc	r3, #7, #1
 8005312:	7013      	strb	r3, [r2, #0]
    Buffs.Reg02.bSEEK = 0;
 8005314:	4a5c      	ldr	r2, [pc, #368]	; (8005488 <rda5807_SetupDefault+0x1b4>)
 8005316:	7853      	ldrb	r3, [r2, #1]
 8005318:	f36f 0300 	bfc	r3, #0, #1
 800531c:	7053      	strb	r3, [r2, #1]
    Buffs.Reg02.bSEEKUP = 1;
 800531e:	4a5a      	ldr	r2, [pc, #360]	; (8005488 <rda5807_SetupDefault+0x1b4>)
 8005320:	7853      	ldrb	r3, [r2, #1]
 8005322:	f043 0302 	orr.w	r3, r3, #2
 8005326:	7053      	strb	r3, [r2, #1]
    Buffs.Reg02.bRCLK_DirectInput = 0;
 8005328:	4a57      	ldr	r2, [pc, #348]	; (8005488 <rda5807_SetupDefault+0x1b4>)
 800532a:	7853      	ldrb	r3, [r2, #1]
 800532c:	f36f 0382 	bfc	r3, #2, #1
 8005330:	7053      	strb	r3, [r2, #1]
    Buffs.Reg02.bRCLK_NonCalibMode = 0;
 8005332:	4a55      	ldr	r2, [pc, #340]	; (8005488 <rda5807_SetupDefault+0x1b4>)
 8005334:	7853      	ldrb	r3, [r2, #1]
 8005336:	f36f 03c3 	bfc	r3, #3, #1
 800533a:	7053      	strb	r3, [r2, #1]
    Buffs.Reg02.bBASS = 0;
 800533c:	4a52      	ldr	r2, [pc, #328]	; (8005488 <rda5807_SetupDefault+0x1b4>)
 800533e:	7853      	ldrb	r3, [r2, #1]
 8005340:	f36f 1304 	bfc	r3, #4, #1
 8005344:	7053      	strb	r3, [r2, #1]
    Buffs.Reg02.bMONO = 0;
 8005346:	4a50      	ldr	r2, [pc, #320]	; (8005488 <rda5807_SetupDefault+0x1b4>)
 8005348:	7853      	ldrb	r3, [r2, #1]
 800534a:	f36f 1345 	bfc	r3, #5, #1
 800534e:	7053      	strb	r3, [r2, #1]
    Buffs.Reg02.bDMUTE = 1;
 8005350:	4a4d      	ldr	r2, [pc, #308]	; (8005488 <rda5807_SetupDefault+0x1b4>)
 8005352:	7853      	ldrb	r3, [r2, #1]
 8005354:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005358:	7053      	strb	r3, [r2, #1]
    Buffs.Reg02.bDHIZ = 1;
 800535a:	4a4b      	ldr	r2, [pc, #300]	; (8005488 <rda5807_SetupDefault+0x1b4>)
 800535c:	7853      	ldrb	r3, [r2, #1]
 800535e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005362:	7053      	strb	r3, [r2, #1]
    // Регистр 0x03
    Buffs.Reg03.bSPACE = 0;//Step;//0;   // Шаг настройки - 0 = 100 КГц
 8005364:	4a48      	ldr	r2, [pc, #288]	; (8005488 <rda5807_SetupDefault+0x1b4>)
 8005366:	7893      	ldrb	r3, [r2, #2]
 8005368:	f36f 0301 	bfc	r3, #0, #2
 800536c:	7093      	strb	r3, [r2, #2]
    Buffs.Reg03.bBAND = Band;//2;//0;    // Диапазон 2 - 76–108 MHz
 800536e:	4b47      	ldr	r3, [pc, #284]	; (800548c <rda5807_SetupDefault+0x1b8>)
 8005370:	781b      	ldrb	r3, [r3, #0]
 8005372:	f003 0303 	and.w	r3, r3, #3
 8005376:	b2d9      	uxtb	r1, r3
 8005378:	4a43      	ldr	r2, [pc, #268]	; (8005488 <rda5807_SetupDefault+0x1b4>)
 800537a:	7893      	ldrb	r3, [r2, #2]
 800537c:	f361 0383 	bfi	r3, r1, #2, #2
 8005380:	7093      	strb	r3, [r2, #2]
    Buffs.Reg03.bTUNE = 1;
 8005382:	4a41      	ldr	r2, [pc, #260]	; (8005488 <rda5807_SetupDefault+0x1b4>)
 8005384:	7893      	ldrb	r3, [r2, #2]
 8005386:	f043 0310 	orr.w	r3, r3, #16
 800538a:	7093      	strb	r3, [r2, #2]
    Buffs.Reg03.bDIRECT_MODE = 0;
 800538c:	4a3e      	ldr	r2, [pc, #248]	; (8005488 <rda5807_SetupDefault+0x1b4>)
 800538e:	7893      	ldrb	r3, [r2, #2]
 8005390:	f36f 1345 	bfc	r3, #5, #1
 8005394:	7093      	strb	r3, [r2, #2]
    Buffs.Reg03.bCHAN = 0;
 8005396:	4a3c      	ldr	r2, [pc, #240]	; (8005488 <rda5807_SetupDefault+0x1b4>)
 8005398:	8853      	ldrh	r3, [r2, #2]
 800539a:	f36f 138f 	bfc	r3, #6, #10
 800539e:	8053      	strh	r3, [r2, #2]
    // Регистр 0x04
    Buffs.Reg04.bRSVD1 = 0;
 80053a0:	4b39      	ldr	r3, [pc, #228]	; (8005488 <rda5807_SetupDefault+0x1b4>)
 80053a2:	2200      	movs	r2, #0
 80053a4:	711a      	strb	r2, [r3, #4]
    Buffs.Reg04.bAFCD = 0;
 80053a6:	4a38      	ldr	r2, [pc, #224]	; (8005488 <rda5807_SetupDefault+0x1b4>)
 80053a8:	7953      	ldrb	r3, [r2, #5]
 80053aa:	f36f 0300 	bfc	r3, #0, #1
 80053ae:	7153      	strb	r3, [r2, #5]
    Buffs.Reg04.bSOFTMUTE_EN = 1;
 80053b0:	4a35      	ldr	r2, [pc, #212]	; (8005488 <rda5807_SetupDefault+0x1b4>)
 80053b2:	7953      	ldrb	r3, [r2, #5]
 80053b4:	f043 0302 	orr.w	r3, r3, #2
 80053b8:	7153      	strb	r3, [r2, #5]
    Buffs.Reg04.bRSVD2 = 0;
 80053ba:	4a33      	ldr	r2, [pc, #204]	; (8005488 <rda5807_SetupDefault+0x1b4>)
 80053bc:	7953      	ldrb	r3, [r2, #5]
 80053be:	f36f 0382 	bfc	r3, #2, #1
 80053c2:	7153      	strb	r3, [r2, #5]
    Buffs.Reg04.bDE = 0;
 80053c4:	4a30      	ldr	r2, [pc, #192]	; (8005488 <rda5807_SetupDefault+0x1b4>)
 80053c6:	7953      	ldrb	r3, [r2, #5]
 80053c8:	f36f 03c3 	bfc	r3, #3, #1
 80053cc:	7153      	strb	r3, [r2, #5]
    Buffs.Reg04.bRSVD3 = 0;
 80053ce:	4a2e      	ldr	r2, [pc, #184]	; (8005488 <rda5807_SetupDefault+0x1b4>)
 80053d0:	7953      	ldrb	r3, [r2, #5]
 80053d2:	f36f 1307 	bfc	r3, #4, #4
 80053d6:	7153      	strb	r3, [r2, #5]
    // Регистр 0x05
    Buffs.Reg05.bVOLUME = 0;
 80053d8:	4a2b      	ldr	r2, [pc, #172]	; (8005488 <rda5807_SetupDefault+0x1b4>)
 80053da:	7993      	ldrb	r3, [r2, #6]
 80053dc:	f36f 0303 	bfc	r3, #0, #4
 80053e0:	7193      	strb	r3, [r2, #6]
    Buffs.Reg05.bANT_GAIN = 0;
 80053e2:	4a29      	ldr	r2, [pc, #164]	; (8005488 <rda5807_SetupDefault+0x1b4>)
 80053e4:	7993      	ldrb	r3, [r2, #6]
 80053e6:	f36f 1305 	bfc	r3, #4, #2
 80053ea:	7193      	strb	r3, [r2, #6]
    Buffs.Reg05.bANT_TYPE = ANT_TYPE_Both;//ANT_TYPE_External;//ANT_TYPE_Headphones;//ANT_TYPE_Both;
 80053ec:	4a26      	ldr	r2, [pc, #152]	; (8005488 <rda5807_SetupDefault+0x1b4>)
 80053ee:	7993      	ldrb	r3, [r2, #6]
 80053f0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80053f4:	7193      	strb	r3, [r2, #6]
    Buffs.Reg05.bSEEKTH = 8;
 80053f6:	4a24      	ldr	r2, [pc, #144]	; (8005488 <rda5807_SetupDefault+0x1b4>)
 80053f8:	79d3      	ldrb	r3, [r2, #7]
 80053fa:	2108      	movs	r1, #8
 80053fc:	f361 0303 	bfi	r3, r1, #0, #4
 8005400:	71d3      	strb	r3, [r2, #7]
    Buffs.Reg05.bRSVD3 = 0;
 8005402:	4a21      	ldr	r2, [pc, #132]	; (8005488 <rda5807_SetupDefault+0x1b4>)
 8005404:	79d3      	ldrb	r3, [r2, #7]
 8005406:	f36f 1306 	bfc	r3, #4, #3
 800540a:	71d3      	strb	r3, [r2, #7]
    Buffs.Reg05.bINT_MODE = 1;
 800540c:	4a1e      	ldr	r2, [pc, #120]	; (8005488 <rda5807_SetupDefault+0x1b4>)
 800540e:	79d3      	ldrb	r3, [r2, #7]
 8005410:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005414:	71d3      	strb	r3, [r2, #7]
    // Регистр 0x06
    Buffs.Reg06.bRSVD1 = 0;
 8005416:	4a1c      	ldr	r2, [pc, #112]	; (8005488 <rda5807_SetupDefault+0x1b4>)
 8005418:	8913      	ldrh	r3, [r2, #8]
 800541a:	f36f 030c 	bfc	r3, #0, #13
 800541e:	8113      	strh	r3, [r2, #8]
    Buffs.Reg06.bOPEN_MODE = 0;
 8005420:	4a19      	ldr	r2, [pc, #100]	; (8005488 <rda5807_SetupDefault+0x1b4>)
 8005422:	7a53      	ldrb	r3, [r2, #9]
 8005424:	f36f 1346 	bfc	r3, #5, #2
 8005428:	7253      	strb	r3, [r2, #9]
    Buffs.Reg06.bRSVD2 = 0;
 800542a:	4a17      	ldr	r2, [pc, #92]	; (8005488 <rda5807_SetupDefault+0x1b4>)
 800542c:	7a53      	ldrb	r3, [r2, #9]
 800542e:	f36f 13c7 	bfc	r3, #7, #1
 8005432:	7253      	strb	r3, [r2, #9]
    // Регистр 0x07
    Buffs.Reg07.bFREQ_MODE = 0;
 8005434:	4a14      	ldr	r2, [pc, #80]	; (8005488 <rda5807_SetupDefault+0x1b4>)
 8005436:	7a93      	ldrb	r3, [r2, #10]
 8005438:	f36f 0300 	bfc	r3, #0, #1
 800543c:	7293      	strb	r3, [r2, #10]
    Buffs.Reg07.bSOFTBLEND_EN = 1;
 800543e:	4a12      	ldr	r2, [pc, #72]	; (8005488 <rda5807_SetupDefault+0x1b4>)
 8005440:	7a93      	ldrb	r3, [r2, #10]
 8005442:	f043 0302 	orr.w	r3, r3, #2
 8005446:	7293      	strb	r3, [r2, #10]
    Buffs.Reg07.bSEEK_TH_OLD = 0;
 8005448:	4a0f      	ldr	r2, [pc, #60]	; (8005488 <rda5807_SetupDefault+0x1b4>)
 800544a:	7a93      	ldrb	r3, [r2, #10]
 800544c:	f36f 0387 	bfc	r3, #2, #6
 8005450:	7293      	strb	r3, [r2, #10]
    Buffs.Reg07.bRSVD1 = 0;
 8005452:	4a0d      	ldr	r2, [pc, #52]	; (8005488 <rda5807_SetupDefault+0x1b4>)
 8005454:	7ad3      	ldrb	r3, [r2, #11]
 8005456:	f36f 0300 	bfc	r3, #0, #1
 800545a:	72d3      	strb	r3, [r2, #11]
    Buffs.Reg07.b65M_50M_MODE = 1;
 800545c:	4a0a      	ldr	r2, [pc, #40]	; (8005488 <rda5807_SetupDefault+0x1b4>)
 800545e:	7ad3      	ldrb	r3, [r2, #11]
 8005460:	f043 0302 	orr.w	r3, r3, #2
 8005464:	72d3      	strb	r3, [r2, #11]
    Buffs.Reg07.bTH_SOFRBLEND = 16;
 8005466:	4a08      	ldr	r2, [pc, #32]	; (8005488 <rda5807_SetupDefault+0x1b4>)
 8005468:	7ad3      	ldrb	r3, [r2, #11]
 800546a:	2110      	movs	r1, #16
 800546c:	f361 0386 	bfi	r3, r1, #2, #5
 8005470:	72d3      	strb	r3, [r2, #11]
    Buffs.Reg07.bRSVD2 = 0;
 8005472:	4a05      	ldr	r2, [pc, #20]	; (8005488 <rda5807_SetupDefault+0x1b4>)
 8005474:	7ad3      	ldrb	r3, [r2, #11]
 8005476:	f36f 13c7 	bfc	r3, #7, #1
 800547a:	72d3      	strb	r3, [r2, #11]

    // Пишем регистры функцией записи регистрового файла
    rda5807_write_regfile((uint16_t *)&(Buffs.Reg02), 6);
 800547c:	2106      	movs	r1, #6
 800547e:	4802      	ldr	r0, [pc, #8]	; (8005488 <rda5807_SetupDefault+0x1b4>)
 8005480:	f7ff fe5c 	bl	800513c <rda5807_write_regfile>
}
 8005484:	bf00      	nop
 8005486:	bd80      	pop	{r7, pc}
 8005488:	2000358c 	.word	0x2000358c
 800548c:	200001ec 	.word	0x200001ec

08005490 <rda5807_SetVolume>:

//==============================================================================
// Процедура устанавливает уровень громкости (0..16) выхода rda5807. При Value=0 включает MUTE
//==============================================================================
void rda5807_SetVolume(uint8_t Value)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b084      	sub	sp, #16
 8005494:	af00      	add	r7, sp, #0
 8005496:	4603      	mov	r3, r0
 8005498:	71fb      	strb	r3, [r7, #7]
//tReg02h Reg02;
//tReg05h Reg05;
uint8_t Mute = Value ? 0 : 1;
 800549a:	79fb      	ldrb	r3, [r7, #7]
 800549c:	2b00      	cmp	r3, #0
 800549e:	bf0c      	ite	eq
 80054a0:	2301      	moveq	r3, #1
 80054a2:	2300      	movne	r3, #0
 80054a4:	b2db      	uxtb	r3, r3
 80054a6:	73fb      	strb	r3, [r7, #15]

    if (Value > 16) Value = 16;
 80054a8:	79fb      	ldrb	r3, [r7, #7]
 80054aa:	2b10      	cmp	r3, #16
 80054ac:	d901      	bls.n	80054b2 <rda5807_SetVolume+0x22>
 80054ae:	2310      	movs	r3, #16
 80054b0:	71fb      	strb	r3, [r7, #7]

    Value--;    // Значение для поля Volume на 1 меньше, чем входной параметр функции
 80054b2:	79fb      	ldrb	r3, [r7, #7]
 80054b4:	3b01      	subs	r3, #1
 80054b6:	71fb      	strb	r3, [r7, #7]

    if (!Mute) {
 80054b8:	7bfb      	ldrb	r3, [r7, #15]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d112      	bne.n	80054e4 <rda5807_SetVolume+0x54>
        // Читаем регистр 0x05
        rda5807_read(5, (uint16_t *)&Buffs.Reg05, 1);
 80054be:	2201      	movs	r2, #1
 80054c0:	4915      	ldr	r1, [pc, #84]	; (8005518 <rda5807_SetVolume+0x88>)
 80054c2:	2005      	movs	r0, #5
 80054c4:	f7ff fe6e 	bl	80051a4 <rda5807_read>
        // Меняем значение поля VOLUME
        Buffs.Reg05.bVOLUME = Value;
 80054c8:	79fb      	ldrb	r3, [r7, #7]
 80054ca:	f003 030f 	and.w	r3, r3, #15
 80054ce:	b2d9      	uxtb	r1, r3
 80054d0:	4a12      	ldr	r2, [pc, #72]	; (800551c <rda5807_SetVolume+0x8c>)
 80054d2:	7993      	ldrb	r3, [r2, #6]
 80054d4:	f361 0303 	bfi	r3, r1, #0, #4
 80054d8:	7193      	strb	r3, [r2, #6]
        // Пишем регистр 0x05
        rda5807_write(5, (uint16_t *)&Buffs.Reg05, 1);
 80054da:	2201      	movs	r2, #1
 80054dc:	490e      	ldr	r1, [pc, #56]	; (8005518 <rda5807_SetVolume+0x88>)
 80054de:	2005      	movs	r0, #5
 80054e0:	f7ff fe94 	bl	800520c <rda5807_write>
    }

    // Читаем регистр 0x02
    rda5807_read(2, (uint16_t *)&Buffs.Reg02, 1);
 80054e4:	2201      	movs	r2, #1
 80054e6:	490d      	ldr	r1, [pc, #52]	; (800551c <rda5807_SetVolume+0x8c>)
 80054e8:	2002      	movs	r0, #2
 80054ea:	f7ff fe5b 	bl	80051a4 <rda5807_read>
    // Меняем значение поля VOLUME
    Buffs.Reg02.bDMUTE = Mute ? 0 : 1;
 80054ee:	7bfb      	ldrb	r3, [r7, #15]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	bf0c      	ite	eq
 80054f4:	2301      	moveq	r3, #1
 80054f6:	2300      	movne	r3, #0
 80054f8:	b2d9      	uxtb	r1, r3
 80054fa:	4a08      	ldr	r2, [pc, #32]	; (800551c <rda5807_SetVolume+0x8c>)
 80054fc:	7853      	ldrb	r3, [r2, #1]
 80054fe:	f361 1386 	bfi	r3, r1, #6, #1
 8005502:	7053      	strb	r3, [r2, #1]
    // Пишем регистр 0x02
    rda5807_write(2, (uint16_t *)&Buffs.Reg02, 1);
 8005504:	2201      	movs	r2, #1
 8005506:	4905      	ldr	r1, [pc, #20]	; (800551c <rda5807_SetVolume+0x8c>)
 8005508:	2002      	movs	r0, #2
 800550a:	f7ff fe7f 	bl	800520c <rda5807_write>
}
 800550e:	bf00      	nop
 8005510:	3710      	adds	r7, #16
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}
 8005516:	bf00      	nop
 8005518:	20003592 	.word	0x20003592
 800551c:	2000358c 	.word	0x2000358c

08005520 <rda5807_SetBassBoost>:

//==============================================================================
// Процедура включает/выключает BassBoost
//==============================================================================
void rda5807_SetBassBoost(uint8_t Value)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b082      	sub	sp, #8
 8005524:	af00      	add	r7, sp, #0
 8005526:	4603      	mov	r3, r0
 8005528:	71fb      	strb	r3, [r7, #7]
//tReg02h Reg02;

    // Читаем регистр 0x02
    rda5807_read(2, (uint16_t *)&Buffs.Reg02, 1);
 800552a:	2201      	movs	r2, #1
 800552c:	490b      	ldr	r1, [pc, #44]	; (800555c <rda5807_SetBassBoost+0x3c>)
 800552e:	2002      	movs	r0, #2
 8005530:	f7ff fe38 	bl	80051a4 <rda5807_read>
    // Меняем значение поля BASS
    Buffs.Reg02.bBASS = (Value) ? 1 : 0;
 8005534:	79fb      	ldrb	r3, [r7, #7]
 8005536:	2b00      	cmp	r3, #0
 8005538:	bf14      	ite	ne
 800553a:	2301      	movne	r3, #1
 800553c:	2300      	moveq	r3, #0
 800553e:	b2d9      	uxtb	r1, r3
 8005540:	4a06      	ldr	r2, [pc, #24]	; (800555c <rda5807_SetBassBoost+0x3c>)
 8005542:	7853      	ldrb	r3, [r2, #1]
 8005544:	f361 1304 	bfi	r3, r1, #4, #1
 8005548:	7053      	strb	r3, [r2, #1]
    // Пишем регистр 0x02
    rda5807_write(2, (uint16_t *)&Buffs.Reg02, 1);
 800554a:	2201      	movs	r2, #1
 800554c:	4903      	ldr	r1, [pc, #12]	; (800555c <rda5807_SetBassBoost+0x3c>)
 800554e:	2002      	movs	r0, #2
 8005550:	f7ff fe5c 	bl	800520c <rda5807_write>
}
 8005554:	bf00      	nop
 8005556:	3708      	adds	r7, #8
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}
 800555c:	2000358c 	.word	0x2000358c

08005560 <rda5807_SetFreq_In100Khz>:
//==============================================================================
// Процедура устанавливает текущую частоту Freq100kHz и стартует перенастройку rda5807 на эту частоту.
// Окончание процесса можно установки можно проконтроллировать по обнулению бита STR в регистре 0x0A (функцией rda5807_Get_SeekTuneReadyFlag)
//==============================================================================
void rda5807_SetFreq_In100Khz(uint16_t Freq100kHz)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b084      	sub	sp, #16
 8005564:	af00      	add	r7, sp, #0
 8005566:	4603      	mov	r3, r0
 8005568:	80fb      	strh	r3, [r7, #6]
//tReg03h Reg03;
uint16_t l = 870, r = 1080;
 800556a:	f240 3366 	movw	r3, #870	; 0x366
 800556e:	81fb      	strh	r3, [r7, #14]
 8005570:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8005574:	81bb      	strh	r3, [r7, #12]

    // Проверка входного параметра для диапазона Buffs.Reg03.bBAND
	switch (Buffs.Reg03.bBAND) {    // Диапазон 87–108 MHz
 8005576:	4b33      	ldr	r3, [pc, #204]	; (8005644 <rda5807_SetFreq_In100Khz+0xe4>)
 8005578:	789b      	ldrb	r3, [r3, #2]
 800557a:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800557e:	b2db      	uxtb	r3, r3
 8005580:	2b03      	cmp	r3, #3
 8005582:	d011      	beq.n	80055a8 <rda5807_SetFreq_In100Khz+0x48>
 8005584:	2b03      	cmp	r3, #3
 8005586:	dc16      	bgt.n	80055b6 <rda5807_SetFreq_In100Khz+0x56>
 8005588:	2b01      	cmp	r3, #1
 800558a:	d002      	beq.n	8005592 <rda5807_SetFreq_In100Khz+0x32>
 800558c:	2b02      	cmp	r3, #2
 800558e:	d007      	beq.n	80055a0 <rda5807_SetFreq_In100Khz+0x40>
 8005590:	e011      	b.n	80055b6 <rda5807_SetFreq_In100Khz+0x56>
		//case 0:// 00 = 87–108 MHz (US/Europe)
		//break;
		case 1:// 01 = 76–91 MHz (Japan)
			l = 760;
 8005592:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 8005596:	81fb      	strh	r3, [r7, #14]
			r = 910;
 8005598:	f240 338e 	movw	r3, #910	; 0x38e
 800559c:	81bb      	strh	r3, [r7, #12]
		break;
 800559e:	e00a      	b.n	80055b6 <rda5807_SetFreq_In100Khz+0x56>
		case 2:// 10 = 76–108 MHz (world wide)
			l = 760;
 80055a0:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 80055a4:	81fb      	strh	r3, [r7, #14]
		break;
 80055a6:	e006      	b.n	80055b6 <rda5807_SetFreq_In100Khz+0x56>
		case 3:// 11 = 65 –76 MHz (East Europe) or 50-65MHz
			l = 650;
 80055a8:	f240 238a 	movw	r3, #650	; 0x28a
 80055ac:	81fb      	strh	r3, [r7, #14]
			r = 760;
 80055ae:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 80055b2:	81bb      	strh	r3, [r7, #12]
		break;
 80055b4:	bf00      	nop
	}
	lBand = ((float)l) / 10;
 80055b6:	89fb      	ldrh	r3, [r7, #14]
 80055b8:	ee07 3a90 	vmov	s15, r3
 80055bc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80055c0:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80055c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80055c8:	4b1f      	ldr	r3, [pc, #124]	; (8005648 <rda5807_SetFreq_In100Khz+0xe8>)
 80055ca:	edc3 7a00 	vstr	s15, [r3]
	rBand = ((float)r) / 10;
 80055ce:	89bb      	ldrh	r3, [r7, #12]
 80055d0:	ee07 3a90 	vmov	s15, r3
 80055d4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80055d8:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80055dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80055e0:	4b1a      	ldr	r3, [pc, #104]	; (800564c <rda5807_SetFreq_In100Khz+0xec>)
 80055e2:	edc3 7a00 	vstr	s15, [r3]

    if (Freq100kHz < l)  Freq100kHz = l;
 80055e6:	88fa      	ldrh	r2, [r7, #6]
 80055e8:	89fb      	ldrh	r3, [r7, #14]
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d201      	bcs.n	80055f2 <rda5807_SetFreq_In100Khz+0x92>
 80055ee:	89fb      	ldrh	r3, [r7, #14]
 80055f0:	80fb      	strh	r3, [r7, #6]
    if (Freq100kHz > r) Freq100kHz = r;
 80055f2:	88fa      	ldrh	r2, [r7, #6]
 80055f4:	89bb      	ldrh	r3, [r7, #12]
 80055f6:	429a      	cmp	r2, r3
 80055f8:	d901      	bls.n	80055fe <rda5807_SetFreq_In100Khz+0x9e>
 80055fa:	89bb      	ldrh	r3, [r7, #12]
 80055fc:	80fb      	strh	r3, [r7, #6]

    // Вычитаем начало диапазона (left)
    Freq100kHz -= l;
 80055fe:	88fa      	ldrh	r2, [r7, #6]
 8005600:	89fb      	ldrh	r3, [r7, #14]
 8005602:	1ad3      	subs	r3, r2, r3
 8005604:	80fb      	strh	r3, [r7, #6]

    // Читаем регистр 0x03
    rda5807_read(3, (uint16_t *)&Buffs.Reg03, 1);
 8005606:	2201      	movs	r2, #1
 8005608:	4911      	ldr	r1, [pc, #68]	; (8005650 <rda5807_SetFreq_In100Khz+0xf0>)
 800560a:	2003      	movs	r0, #3
 800560c:	f7ff fdca 	bl	80051a4 <rda5807_read>
    // Меняем значение поля CHAN
    Buffs.Reg03.bCHAN = Freq100kHz;
 8005610:	88fb      	ldrh	r3, [r7, #6]
 8005612:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005616:	b299      	uxth	r1, r3
 8005618:	4a0a      	ldr	r2, [pc, #40]	; (8005644 <rda5807_SetFreq_In100Khz+0xe4>)
 800561a:	8853      	ldrh	r3, [r2, #2]
 800561c:	f361 138f 	bfi	r3, r1, #6, #10
 8005620:	8053      	strh	r3, [r2, #2]
    // Выставляем флаг начала перенастройки на канал
    Buffs.Reg03.bTUNE = 1;
 8005622:	4a08      	ldr	r2, [pc, #32]	; (8005644 <rda5807_SetFreq_In100Khz+0xe4>)
 8005624:	7893      	ldrb	r3, [r2, #2]
 8005626:	f043 0310 	orr.w	r3, r3, #16
 800562a:	7093      	strb	r3, [r2, #2]
    // Пишем регистр 0x03
    rda5807_write(3, (uint16_t *)&Buffs.Reg03, 1);
 800562c:	2201      	movs	r2, #1
 800562e:	4908      	ldr	r1, [pc, #32]	; (8005650 <rda5807_SetFreq_In100Khz+0xf0>)
 8005630:	2003      	movs	r0, #3
 8005632:	f7ff fdeb 	bl	800520c <rda5807_write>

    HAL_Delay(50);
 8005636:	2032      	movs	r0, #50	; 0x32
 8005638:	f001 fc54 	bl	8006ee4 <HAL_Delay>
}
 800563c:	bf00      	nop
 800563e:	3710      	adds	r7, #16
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}
 8005644:	2000358c 	.word	0x2000358c
 8005648:	20002d9c 	.word	0x20002d9c
 800564c:	20002da0 	.word	0x20002da0
 8005650:	2000358e 	.word	0x2000358e

08005654 <rda5807_GetFreq_In100Khz>:

//==============================================================================
// Функция читает текущую частоту, на которую настроен rda5807
//==============================================================================
uint16_t rda5807_GetFreq_In100Khz()
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b082      	sub	sp, #8
 8005658:	af00      	add	r7, sp, #0
//tReg0Ah reg0A;

    // Читаем регистр 0x0A
    rda5807_read(0x0A, (uint16_t *)&Buffs.Reg0A, 1);
 800565a:	2201      	movs	r2, #1
 800565c:	491b      	ldr	r1, [pc, #108]	; (80056cc <rda5807_GetFreq_In100Khz+0x78>)
 800565e:	200a      	movs	r0, #10
 8005660:	f7ff fda0 	bl	80051a4 <rda5807_read>

    uint16_t Freq100kHz = Buffs.Reg0A.bREADCHAN;
 8005664:	4b1a      	ldr	r3, [pc, #104]	; (80056d0 <rda5807_GetFreq_In100Khz+0x7c>)
 8005666:	8a1b      	ldrh	r3, [r3, #16]
 8005668:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800566c:	b29b      	uxth	r3, r3
 800566e:	80bb      	strh	r3, [r7, #4]

    if (Freq100kHz == 319) return 0;
 8005670:	88bb      	ldrh	r3, [r7, #4]
 8005672:	f240 123f 	movw	r2, #319	; 0x13f
 8005676:	4293      	cmp	r3, r2
 8005678:	d101      	bne.n	800567e <rda5807_GetFreq_In100Khz+0x2a>
 800567a:	2300      	movs	r3, #0
 800567c:	e021      	b.n	80056c2 <rda5807_GetFreq_In100Khz+0x6e>

    // Прибавляем начало диапазона (87 МГц)
    uint16_t left = 870;
 800567e:	f240 3366 	movw	r3, #870	; 0x366
 8005682:	80fb      	strh	r3, [r7, #6]
    switch (Buffs.Reg03.bBAND) {    // Диапазон 87–108 MHz
 8005684:	4b12      	ldr	r3, [pc, #72]	; (80056d0 <rda5807_GetFreq_In100Khz+0x7c>)
 8005686:	789b      	ldrb	r3, [r3, #2]
 8005688:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800568c:	b2db      	uxtb	r3, r3
 800568e:	2b03      	cmp	r3, #3
 8005690:	d00e      	beq.n	80056b0 <rda5807_GetFreq_In100Khz+0x5c>
 8005692:	2b03      	cmp	r3, #3
 8005694:	dc10      	bgt.n	80056b8 <rda5807_GetFreq_In100Khz+0x64>
 8005696:	2b01      	cmp	r3, #1
 8005698:	d002      	beq.n	80056a0 <rda5807_GetFreq_In100Khz+0x4c>
 800569a:	2b02      	cmp	r3, #2
 800569c:	d004      	beq.n	80056a8 <rda5807_GetFreq_In100Khz+0x54>
 800569e:	e00b      	b.n	80056b8 <rda5807_GetFreq_In100Khz+0x64>
    	//case 0:// 00 = 87–108 MHz (US/Europe)
    	//break;
    	case 1:// 01 = 76–91 MHz (Japan)
    		left = 760;
 80056a0:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 80056a4:	80fb      	strh	r3, [r7, #6]
    	break;
 80056a6:	e007      	b.n	80056b8 <rda5807_GetFreq_In100Khz+0x64>
    	case 2:// 10 = 76–108 MHz (world wide)
    		left = 760;
 80056a8:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 80056ac:	80fb      	strh	r3, [r7, #6]
    	break;
 80056ae:	e003      	b.n	80056b8 <rda5807_GetFreq_In100Khz+0x64>
    	case 3:// 11 = 65 –76 MHz (East Europe) or 50-65MHz
    		left = 650;
 80056b0:	f240 238a 	movw	r3, #650	; 0x28a
 80056b4:	80fb      	strh	r3, [r7, #6]
    	break;
 80056b6:	bf00      	nop
    }
    Freq100kHz += left;
 80056b8:	88ba      	ldrh	r2, [r7, #4]
 80056ba:	88fb      	ldrh	r3, [r7, #6]
 80056bc:	4413      	add	r3, r2
 80056be:	80bb      	strh	r3, [r7, #4]

    return Freq100kHz;
 80056c0:	88bb      	ldrh	r3, [r7, #4]
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3708      	adds	r7, #8
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}
 80056ca:	bf00      	nop
 80056cc:	2000359c 	.word	0x2000359c
 80056d0:	2000358c 	.word	0x2000358c

080056d4 <rda5807_StartSeek>:

//==============================================================================
// Процедура стартует поиск радиостанции вверх/вниз
//==============================================================================
void rda5807_StartSeek(uint8_t Up)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b082      	sub	sp, #8
 80056d8:	af00      	add	r7, sp, #0
 80056da:	4603      	mov	r3, r0
 80056dc:	71fb      	strb	r3, [r7, #7]
//tReg02h Reg02;

    // Читаем регистр 0x02
    rda5807_read(0x02, (uint16_t *)&Buffs.Reg02, 1);
 80056de:	2201      	movs	r2, #1
 80056e0:	4910      	ldr	r1, [pc, #64]	; (8005724 <rda5807_StartSeek+0x50>)
 80056e2:	2002      	movs	r0, #2
 80056e4:	f7ff fd5e 	bl	80051a4 <rda5807_read>

    Buffs.Reg02.bSKMODE = 1;          // 07 Seek Mode (0 = wrap at the upper or lower band limit and continue seeking; 1 = stop seeking at the upper or lower band limit)
 80056e8:	4a0e      	ldr	r2, [pc, #56]	; (8005724 <rda5807_StartSeek+0x50>)
 80056ea:	7813      	ldrb	r3, [r2, #0]
 80056ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056f0:	7013      	strb	r3, [r2, #0]
    Buffs.Reg02.bSEEK = 1;            // 08 Seek (0 = Disable stop seek; 1 = Enable)
 80056f2:	4a0c      	ldr	r2, [pc, #48]	; (8005724 <rda5807_StartSeek+0x50>)
 80056f4:	7853      	ldrb	r3, [r2, #1]
 80056f6:	f043 0301 	orr.w	r3, r3, #1
 80056fa:	7053      	strb	r3, [r2, #1]
    Buffs.Reg02.bSEEKUP = Up ? 1 : 0; // 09 Seek Up (0 = Seek down; 1 = Seek up)
 80056fc:	79fb      	ldrb	r3, [r7, #7]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	bf14      	ite	ne
 8005702:	2301      	movne	r3, #1
 8005704:	2300      	moveq	r3, #0
 8005706:	b2d9      	uxtb	r1, r3
 8005708:	4a06      	ldr	r2, [pc, #24]	; (8005724 <rda5807_StartSeek+0x50>)
 800570a:	7853      	ldrb	r3, [r2, #1]
 800570c:	f361 0341 	bfi	r3, r1, #1, #1
 8005710:	7053      	strb	r3, [r2, #1]

    // Пишем регистр 0x02
    rda5807_write(0x02, (uint16_t *)&Buffs.Reg02, 1);
 8005712:	2201      	movs	r2, #1
 8005714:	4903      	ldr	r1, [pc, #12]	; (8005724 <rda5807_StartSeek+0x50>)
 8005716:	2002      	movs	r0, #2
 8005718:	f7ff fd78 	bl	800520c <rda5807_write>
}
 800571c:	bf00      	nop
 800571e:	3708      	adds	r7, #8
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}
 8005724:	2000358c 	.word	0x2000358c

08005728 <rda5807_Get_SeekTuneReadyFlag>:
//==============================================================================
// Функция возвращает состояние бита STR (SeekTuneReadyFlag)
// SeekTuneReadyFlag=1 пока идёт процесс настройки на частоту или поиск радиостанции.
//==============================================================================
uint8_t rda5807_Get_SeekTuneReadyFlag()
{
 8005728:	b580      	push	{r7, lr}
 800572a:	af00      	add	r7, sp, #0
//tReg0Ah reg0A;

    // Читаем регистр 0x0A
    rda5807_read(0x0A, (uint16_t *)&Buffs.Reg0A, 1);
 800572c:	2201      	movs	r2, #1
 800572e:	4905      	ldr	r1, [pc, #20]	; (8005744 <rda5807_Get_SeekTuneReadyFlag+0x1c>)
 8005730:	200a      	movs	r0, #10
 8005732:	f7ff fd37 	bl	80051a4 <rda5807_read>

    return Buffs.Reg0A.bSTC;
 8005736:	4b04      	ldr	r3, [pc, #16]	; (8005748 <rda5807_Get_SeekTuneReadyFlag+0x20>)
 8005738:	7c5b      	ldrb	r3, [r3, #17]
 800573a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800573e:	b2db      	uxtb	r3, r3
}
 8005740:	4618      	mov	r0, r3
 8005742:	bd80      	pop	{r7, pc}
 8005744:	2000359c 	.word	0x2000359c
 8005748:	2000358c 	.word	0x2000358c

0800574c <rda5807_Get_StereoMonoFlag>:
//==============================================================================
//==============================================================================
bool rda5807_Get_StereoMonoFlag()
{
 800574c:	b580      	push	{r7, lr}
 800574e:	af00      	add	r7, sp, #0
//tReg0Ah reg0A;

    // Читаем регистр 0x0A
    rda5807_read(0x0A, (uint16_t *)&Buffs.Reg0A, 1);
 8005750:	2201      	movs	r2, #1
 8005752:	4908      	ldr	r1, [pc, #32]	; (8005774 <rda5807_Get_StereoMonoFlag+0x28>)
 8005754:	200a      	movs	r0, #10
 8005756:	f7ff fd25 	bl	80051a4 <rda5807_read>

    return Buffs.Reg0A.bST;     // Stereo Indicator (0 = Mono; 1 = Stereo)
 800575a:	4b07      	ldr	r3, [pc, #28]	; (8005778 <rda5807_Get_StereoMonoFlag+0x2c>)
 800575c:	7c5b      	ldrb	r3, [r3, #17]
 800575e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005762:	b2db      	uxtb	r3, r3
 8005764:	2b00      	cmp	r3, #0
 8005766:	bf14      	ite	ne
 8005768:	2301      	movne	r3, #1
 800576a:	2300      	moveq	r3, #0
 800576c:	b2db      	uxtb	r3, r3
}
 800576e:	4618      	mov	r0, r3
 8005770:	bd80      	pop	{r7, pc}
 8005772:	bf00      	nop
 8005774:	2000359c 	.word	0x2000359c
 8005778:	2000358c 	.word	0x2000358c

0800577c <rda5807_Get_Channel>:
//==============================================================================
uint16_t rda5807_Get_Channel()
{
 800577c:	b580      	push	{r7, lr}
 800577e:	af00      	add	r7, sp, #0
//tReg0Ah reg0A;

    // Читаем регистр 0x0A
    rda5807_read(0x0A, (uint16_t *)&Buffs.Reg0A, 1);
 8005780:	2201      	movs	r2, #1
 8005782:	4905      	ldr	r1, [pc, #20]	; (8005798 <rda5807_Get_Channel+0x1c>)
 8005784:	200a      	movs	r0, #10
 8005786:	f7ff fd0d 	bl	80051a4 <rda5807_read>

    return Buffs.Reg0A.bREADCHAN;    // 0-9 Read Channel.
 800578a:	4b04      	ldr	r3, [pc, #16]	; (800579c <rda5807_Get_Channel+0x20>)
 800578c:	8a1b      	ldrh	r3, [r3, #16]
 800578e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005792:	b29b      	uxth	r3, r3
}
 8005794:	4618      	mov	r0, r3
 8005796:	bd80      	pop	{r7, pc}
 8005798:	2000359c 	.word	0x2000359c
 800579c:	2000358c 	.word	0x2000358c

080057a0 <rda5807_Set_Band>:
//==============================================================================
uint8_t rda5807_Set_Band(uint8_t band)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b084      	sub	sp, #16
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	4603      	mov	r3, r0
 80057a8:	71fb      	strb	r3, [r7, #7]
	if (band > 3) return 1;
 80057aa:	79fb      	ldrb	r3, [r7, #7]
 80057ac:	2b03      	cmp	r3, #3
 80057ae:	d901      	bls.n	80057b4 <rda5807_Set_Band+0x14>
 80057b0:	2301      	movs	r3, #1
 80057b2:	e054      	b.n	800585e <rda5807_Set_Band+0xbe>

    // Читаем регистр 3
    rda5807_read(3, (uint16_t *)&Buffs.Reg03, 1);
 80057b4:	2201      	movs	r2, #1
 80057b6:	492c      	ldr	r1, [pc, #176]	; (8005868 <rda5807_Set_Band+0xc8>)
 80057b8:	2003      	movs	r0, #3
 80057ba:	f7ff fcf3 	bl	80051a4 <rda5807_read>

    Buffs.Reg03.bBAND = band;
 80057be:	79fb      	ldrb	r3, [r7, #7]
 80057c0:	f003 0303 	and.w	r3, r3, #3
 80057c4:	b2d9      	uxtb	r1, r3
 80057c6:	4a29      	ldr	r2, [pc, #164]	; (800586c <rda5807_Set_Band+0xcc>)
 80057c8:	7893      	ldrb	r3, [r2, #2]
 80057ca:	f361 0383 	bfi	r3, r1, #2, #2
 80057ce:	7093      	strb	r3, [r2, #2]

    rda5807_write(3, (uint16_t *)&Buffs.Reg03, 1);
 80057d0:	2201      	movs	r2, #1
 80057d2:	4925      	ldr	r1, [pc, #148]	; (8005868 <rda5807_Set_Band+0xc8>)
 80057d4:	2003      	movs	r0, #3
 80057d6:	f7ff fd19 	bl	800520c <rda5807_write>

    uint16_t l = 870, r = 1080;
 80057da:	f240 3366 	movw	r3, #870	; 0x366
 80057de:	81fb      	strh	r3, [r7, #14]
 80057e0:	f44f 6387 	mov.w	r3, #1080	; 0x438
 80057e4:	81bb      	strh	r3, [r7, #12]

    switch (Buffs.Reg03.bBAND) {    // Диапазон 87–108 MHz
 80057e6:	4b21      	ldr	r3, [pc, #132]	; (800586c <rda5807_Set_Band+0xcc>)
 80057e8:	789b      	ldrb	r3, [r3, #2]
 80057ea:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	2b03      	cmp	r3, #3
 80057f2:	d011      	beq.n	8005818 <rda5807_Set_Band+0x78>
 80057f4:	2b03      	cmp	r3, #3
 80057f6:	dc16      	bgt.n	8005826 <rda5807_Set_Band+0x86>
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d002      	beq.n	8005802 <rda5807_Set_Band+0x62>
 80057fc:	2b02      	cmp	r3, #2
 80057fe:	d007      	beq.n	8005810 <rda5807_Set_Band+0x70>
 8005800:	e011      	b.n	8005826 <rda5807_Set_Band+0x86>
    	//case 0:// 00 = 87–108 MHz (US/Europe)
    	//break;
    	case 1:// 01 = 76–91 MHz (Japan)
    		l = 760;
 8005802:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 8005806:	81fb      	strh	r3, [r7, #14]
    		r = 910;
 8005808:	f240 338e 	movw	r3, #910	; 0x38e
 800580c:	81bb      	strh	r3, [r7, #12]
    	break;
 800580e:	e00a      	b.n	8005826 <rda5807_Set_Band+0x86>
    	case 2:// 10 = 76–108 MHz (world wide)
    		l = 760;
 8005810:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 8005814:	81fb      	strh	r3, [r7, #14]
    	break;
 8005816:	e006      	b.n	8005826 <rda5807_Set_Band+0x86>
    	case 3:// 11 = 65 –76 MHz (East Europe) or 50-65MHz
    		l = 650;
 8005818:	f240 238a 	movw	r3, #650	; 0x28a
 800581c:	81fb      	strh	r3, [r7, #14]
    		r = 760;
 800581e:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 8005822:	81bb      	strh	r3, [r7, #12]
    	break;
 8005824:	bf00      	nop
    }
    lBand = ((float)l) / 10;
 8005826:	89fb      	ldrh	r3, [r7, #14]
 8005828:	ee07 3a90 	vmov	s15, r3
 800582c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005830:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8005834:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005838:	4b0d      	ldr	r3, [pc, #52]	; (8005870 <rda5807_Set_Band+0xd0>)
 800583a:	edc3 7a00 	vstr	s15, [r3]
    rBand = ((float)r) / 10;
 800583e:	89bb      	ldrh	r3, [r7, #12]
 8005840:	ee07 3a90 	vmov	s15, r3
 8005844:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005848:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800584c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005850:	4b08      	ldr	r3, [pc, #32]	; (8005874 <rda5807_Set_Band+0xd4>)
 8005852:	edc3 7a00 	vstr	s15, [r3]

    HAL_Delay(50);
 8005856:	2032      	movs	r0, #50	; 0x32
 8005858:	f001 fb44 	bl	8006ee4 <HAL_Delay>

    return 0;
 800585c:	2300      	movs	r3, #0
}
 800585e:	4618      	mov	r0, r3
 8005860:	3710      	adds	r7, #16
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}
 8005866:	bf00      	nop
 8005868:	2000358e 	.word	0x2000358e
 800586c:	2000358c 	.word	0x2000358c
 8005870:	20002d9c 	.word	0x20002d9c
 8005874:	20002da0 	.word	0x20002da0

08005878 <rda5807_Set_Mute>:
//==============================================================================
void rda5807_Set_Mute(uint8_t mute)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b082      	sub	sp, #8
 800587c:	af00      	add	r7, sp, #0
 800587e:	4603      	mov	r3, r0
 8005880:	71fb      	strb	r3, [r7, #7]
	// Читаем регистр 2
	rda5807_read(2, (uint16_t *)&Buffs.Reg02, 1);
 8005882:	2201      	movs	r2, #1
 8005884:	490a      	ldr	r1, [pc, #40]	; (80058b0 <rda5807_Set_Mute+0x38>)
 8005886:	2002      	movs	r0, #2
 8005888:	f7ff fc8c 	bl	80051a4 <rda5807_read>

	Buffs.Reg02.bDMUTE = mute & 1;
 800588c:	79fb      	ldrb	r3, [r7, #7]
 800588e:	f003 0301 	and.w	r3, r3, #1
 8005892:	b2d9      	uxtb	r1, r3
 8005894:	4a06      	ldr	r2, [pc, #24]	; (80058b0 <rda5807_Set_Mute+0x38>)
 8005896:	7853      	ldrb	r3, [r2, #1]
 8005898:	f361 1386 	bfi	r3, r1, #6, #1
 800589c:	7053      	strb	r3, [r2, #1]

	rda5807_write(2, (uint16_t *)&Buffs.Reg02, 1);
 800589e:	2201      	movs	r2, #1
 80058a0:	4903      	ldr	r1, [pc, #12]	; (80058b0 <rda5807_Set_Mute+0x38>)
 80058a2:	2002      	movs	r0, #2
 80058a4:	f7ff fcb2 	bl	800520c <rda5807_write>
}
 80058a8:	bf00      	nop
 80058aa:	3708      	adds	r7, #8
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}
 80058b0:	2000358c 	.word	0x2000358c

080058b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b083      	sub	sp, #12
 80058b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80058ba:	4b0f      	ldr	r3, [pc, #60]	; (80058f8 <HAL_MspInit+0x44>)
 80058bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058be:	4a0e      	ldr	r2, [pc, #56]	; (80058f8 <HAL_MspInit+0x44>)
 80058c0:	f043 0301 	orr.w	r3, r3, #1
 80058c4:	6613      	str	r3, [r2, #96]	; 0x60
 80058c6:	4b0c      	ldr	r3, [pc, #48]	; (80058f8 <HAL_MspInit+0x44>)
 80058c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058ca:	f003 0301 	and.w	r3, r3, #1
 80058ce:	607b      	str	r3, [r7, #4]
 80058d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80058d2:	4b09      	ldr	r3, [pc, #36]	; (80058f8 <HAL_MspInit+0x44>)
 80058d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058d6:	4a08      	ldr	r2, [pc, #32]	; (80058f8 <HAL_MspInit+0x44>)
 80058d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058dc:	6593      	str	r3, [r2, #88]	; 0x58
 80058de:	4b06      	ldr	r3, [pc, #24]	; (80058f8 <HAL_MspInit+0x44>)
 80058e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058e6:	603b      	str	r3, [r7, #0]
 80058e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80058ea:	bf00      	nop
 80058ec:	370c      	adds	r7, #12
 80058ee:	46bd      	mov	sp, r7
 80058f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f4:	4770      	bx	lr
 80058f6:	bf00      	nop
 80058f8:	40021000 	.word	0x40021000

080058fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b0ac      	sub	sp, #176	; 0xb0
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005904:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005908:	2200      	movs	r2, #0
 800590a:	601a      	str	r2, [r3, #0]
 800590c:	605a      	str	r2, [r3, #4]
 800590e:	609a      	str	r2, [r3, #8]
 8005910:	60da      	str	r2, [r3, #12]
 8005912:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005914:	f107 0314 	add.w	r3, r7, #20
 8005918:	2288      	movs	r2, #136	; 0x88
 800591a:	2100      	movs	r1, #0
 800591c:	4618      	mov	r0, r3
 800591e:	f009 fafb 	bl	800ef18 <memset>
  if(hi2c->Instance==I2C1)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a57      	ldr	r2, [pc, #348]	; (8005a84 <HAL_I2C_MspInit+0x188>)
 8005928:	4293      	cmp	r3, r2
 800592a:	f040 80a7 	bne.w	8005a7c <HAL_I2C_MspInit+0x180>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800592e:	2340      	movs	r3, #64	; 0x40
 8005930:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8005932:	2300      	movs	r3, #0
 8005934:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005936:	f107 0314 	add.w	r3, r7, #20
 800593a:	4618      	mov	r0, r3
 800593c:	f004 fc64 	bl	800a208 <HAL_RCCEx_PeriphCLKConfig>
 8005940:	4603      	mov	r3, r0
 8005942:	2b00      	cmp	r3, #0
 8005944:	d001      	beq.n	800594a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8005946:	f7ff fb45 	bl	8004fd4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800594a:	4b4f      	ldr	r3, [pc, #316]	; (8005a88 <HAL_I2C_MspInit+0x18c>)
 800594c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800594e:	4a4e      	ldr	r2, [pc, #312]	; (8005a88 <HAL_I2C_MspInit+0x18c>)
 8005950:	f043 0302 	orr.w	r3, r3, #2
 8005954:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005956:	4b4c      	ldr	r3, [pc, #304]	; (8005a88 <HAL_I2C_MspInit+0x18c>)
 8005958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800595a:	f003 0302 	and.w	r3, r3, #2
 800595e:	613b      	str	r3, [r7, #16]
 8005960:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005962:	23c0      	movs	r3, #192	; 0xc0
 8005964:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005968:	2312      	movs	r3, #18
 800596a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800596e:	2300      	movs	r3, #0
 8005970:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005974:	2302      	movs	r3, #2
 8005976:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800597a:	2304      	movs	r3, #4
 800597c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005980:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005984:	4619      	mov	r1, r3
 8005986:	4841      	ldr	r0, [pc, #260]	; (8005a8c <HAL_I2C_MspInit+0x190>)
 8005988:	f001 feb8 	bl	80076fc <HAL_GPIO_Init>

    HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_PB6);
 800598c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8005990:	f003 fd1a 	bl	80093c8 <HAL_I2CEx_EnableFastModePlus>

    HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_PB7);
 8005994:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8005998:	f003 fd16 	bl	80093c8 <HAL_I2CEx_EnableFastModePlus>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800599c:	4b3a      	ldr	r3, [pc, #232]	; (8005a88 <HAL_I2C_MspInit+0x18c>)
 800599e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059a0:	4a39      	ldr	r2, [pc, #228]	; (8005a88 <HAL_I2C_MspInit+0x18c>)
 80059a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80059a6:	6593      	str	r3, [r2, #88]	; 0x58
 80059a8:	4b37      	ldr	r3, [pc, #220]	; (8005a88 <HAL_I2C_MspInit+0x18c>)
 80059aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80059b0:	60fb      	str	r3, [r7, #12]
 80059b2:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA2_Channel6;
 80059b4:	4b36      	ldr	r3, [pc, #216]	; (8005a90 <HAL_I2C_MspInit+0x194>)
 80059b6:	4a37      	ldr	r2, [pc, #220]	; (8005a94 <HAL_I2C_MspInit+0x198>)
 80059b8:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_5;
 80059ba:	4b35      	ldr	r3, [pc, #212]	; (8005a90 <HAL_I2C_MspInit+0x194>)
 80059bc:	2205      	movs	r2, #5
 80059be:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80059c0:	4b33      	ldr	r3, [pc, #204]	; (8005a90 <HAL_I2C_MspInit+0x194>)
 80059c2:	2200      	movs	r2, #0
 80059c4:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80059c6:	4b32      	ldr	r3, [pc, #200]	; (8005a90 <HAL_I2C_MspInit+0x194>)
 80059c8:	2200      	movs	r2, #0
 80059ca:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80059cc:	4b30      	ldr	r3, [pc, #192]	; (8005a90 <HAL_I2C_MspInit+0x194>)
 80059ce:	2280      	movs	r2, #128	; 0x80
 80059d0:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80059d2:	4b2f      	ldr	r3, [pc, #188]	; (8005a90 <HAL_I2C_MspInit+0x194>)
 80059d4:	2200      	movs	r2, #0
 80059d6:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80059d8:	4b2d      	ldr	r3, [pc, #180]	; (8005a90 <HAL_I2C_MspInit+0x194>)
 80059da:	2200      	movs	r2, #0
 80059dc:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80059de:	4b2c      	ldr	r3, [pc, #176]	; (8005a90 <HAL_I2C_MspInit+0x194>)
 80059e0:	2200      	movs	r2, #0
 80059e2:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80059e4:	4b2a      	ldr	r3, [pc, #168]	; (8005a90 <HAL_I2C_MspInit+0x194>)
 80059e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80059ea:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80059ec:	4828      	ldr	r0, [pc, #160]	; (8005a90 <HAL_I2C_MspInit+0x194>)
 80059ee:	f001 fc01 	bl	80071f4 <HAL_DMA_Init>
 80059f2:	4603      	mov	r3, r0
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d001      	beq.n	80059fc <HAL_I2C_MspInit+0x100>
    {
      Error_Handler();
 80059f8:	f7ff faec 	bl	8004fd4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	4a24      	ldr	r2, [pc, #144]	; (8005a90 <HAL_I2C_MspInit+0x194>)
 8005a00:	63da      	str	r2, [r3, #60]	; 0x3c
 8005a02:	4a23      	ldr	r2, [pc, #140]	; (8005a90 <HAL_I2C_MspInit+0x194>)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8005a08:	4b23      	ldr	r3, [pc, #140]	; (8005a98 <HAL_I2C_MspInit+0x19c>)
 8005a0a:	4a24      	ldr	r2, [pc, #144]	; (8005a9c <HAL_I2C_MspInit+0x1a0>)
 8005a0c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_3;
 8005a0e:	4b22      	ldr	r3, [pc, #136]	; (8005a98 <HAL_I2C_MspInit+0x19c>)
 8005a10:	2203      	movs	r2, #3
 8005a12:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005a14:	4b20      	ldr	r3, [pc, #128]	; (8005a98 <HAL_I2C_MspInit+0x19c>)
 8005a16:	2210      	movs	r2, #16
 8005a18:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005a1a:	4b1f      	ldr	r3, [pc, #124]	; (8005a98 <HAL_I2C_MspInit+0x19c>)
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005a20:	4b1d      	ldr	r3, [pc, #116]	; (8005a98 <HAL_I2C_MspInit+0x19c>)
 8005a22:	2280      	movs	r2, #128	; 0x80
 8005a24:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005a26:	4b1c      	ldr	r3, [pc, #112]	; (8005a98 <HAL_I2C_MspInit+0x19c>)
 8005a28:	2200      	movs	r2, #0
 8005a2a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005a2c:	4b1a      	ldr	r3, [pc, #104]	; (8005a98 <HAL_I2C_MspInit+0x19c>)
 8005a2e:	2200      	movs	r2, #0
 8005a30:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8005a32:	4b19      	ldr	r3, [pc, #100]	; (8005a98 <HAL_I2C_MspInit+0x19c>)
 8005a34:	2200      	movs	r2, #0
 8005a36:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8005a38:	4b17      	ldr	r3, [pc, #92]	; (8005a98 <HAL_I2C_MspInit+0x19c>)
 8005a3a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005a3e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8005a40:	4815      	ldr	r0, [pc, #84]	; (8005a98 <HAL_I2C_MspInit+0x19c>)
 8005a42:	f001 fbd7 	bl	80071f4 <HAL_DMA_Init>
 8005a46:	4603      	mov	r3, r0
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d001      	beq.n	8005a50 <HAL_I2C_MspInit+0x154>
    {
      Error_Handler();
 8005a4c:	f7ff fac2 	bl	8004fd4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	4a11      	ldr	r2, [pc, #68]	; (8005a98 <HAL_I2C_MspInit+0x19c>)
 8005a54:	639a      	str	r2, [r3, #56]	; 0x38
 8005a56:	4a10      	ldr	r2, [pc, #64]	; (8005a98 <HAL_I2C_MspInit+0x19c>)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	2100      	movs	r1, #0
 8005a60:	201f      	movs	r0, #31
 8005a62:	f001 fb82 	bl	800716a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8005a66:	201f      	movs	r0, #31
 8005a68:	f001 fb9b 	bl	80071a2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	2100      	movs	r1, #0
 8005a70:	2020      	movs	r0, #32
 8005a72:	f001 fb7a 	bl	800716a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8005a76:	2020      	movs	r0, #32
 8005a78:	f001 fb93 	bl	80071a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8005a7c:	bf00      	nop
 8005a7e:	37b0      	adds	r7, #176	; 0xb0
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}
 8005a84:	40005400 	.word	0x40005400
 8005a88:	40021000 	.word	0x40021000
 8005a8c:	48000400 	.word	0x48000400
 8005a90:	20000894 	.word	0x20000894
 8005a94:	4002046c 	.word	0x4002046c
 8005a98:	200008dc 	.word	0x200008dc
 8005a9c:	4002006c 	.word	0x4002006c

08005aa0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b0a4      	sub	sp, #144	; 0x90
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005aa8:	f107 0308 	add.w	r3, r7, #8
 8005aac:	2288      	movs	r2, #136	; 0x88
 8005aae:	2100      	movs	r1, #0
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	f009 fa31 	bl	800ef18 <memset>
  if(hrtc->Instance==RTC)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a10      	ldr	r2, [pc, #64]	; (8005afc <HAL_RTC_MspInit+0x5c>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d118      	bne.n	8005af2 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8005ac0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005ac4:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8005ac6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005aca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005ace:	f107 0308 	add.w	r3, r7, #8
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f004 fb98 	bl	800a208 <HAL_RCCEx_PeriphCLKConfig>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d001      	beq.n	8005ae2 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8005ade:	f7ff fa79 	bl	8004fd4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8005ae2:	4b07      	ldr	r3, [pc, #28]	; (8005b00 <HAL_RTC_MspInit+0x60>)
 8005ae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ae8:	4a05      	ldr	r2, [pc, #20]	; (8005b00 <HAL_RTC_MspInit+0x60>)
 8005aea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005aee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8005af2:	bf00      	nop
 8005af4:	3790      	adds	r7, #144	; 0x90
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}
 8005afa:	bf00      	nop
 8005afc:	40002800 	.word	0x40002800
 8005b00:	40021000 	.word	0x40021000

08005b04 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b08c      	sub	sp, #48	; 0x30
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b0c:	f107 031c 	add.w	r3, r7, #28
 8005b10:	2200      	movs	r2, #0
 8005b12:	601a      	str	r2, [r3, #0]
 8005b14:	605a      	str	r2, [r3, #4]
 8005b16:	609a      	str	r2, [r3, #8]
 8005b18:	60da      	str	r2, [r3, #12]
 8005b1a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a76      	ldr	r2, [pc, #472]	; (8005cfc <HAL_SPI_MspInit+0x1f8>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d15b      	bne.n	8005bde <HAL_SPI_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005b26:	4b76      	ldr	r3, [pc, #472]	; (8005d00 <HAL_SPI_MspInit+0x1fc>)
 8005b28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b2a:	4a75      	ldr	r2, [pc, #468]	; (8005d00 <HAL_SPI_MspInit+0x1fc>)
 8005b2c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005b30:	6613      	str	r3, [r2, #96]	; 0x60
 8005b32:	4b73      	ldr	r3, [pc, #460]	; (8005d00 <HAL_SPI_MspInit+0x1fc>)
 8005b34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b3a:	61bb      	str	r3, [r7, #24]
 8005b3c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b3e:	4b70      	ldr	r3, [pc, #448]	; (8005d00 <HAL_SPI_MspInit+0x1fc>)
 8005b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b42:	4a6f      	ldr	r2, [pc, #444]	; (8005d00 <HAL_SPI_MspInit+0x1fc>)
 8005b44:	f043 0301 	orr.w	r3, r3, #1
 8005b48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005b4a:	4b6d      	ldr	r3, [pc, #436]	; (8005d00 <HAL_SPI_MspInit+0x1fc>)
 8005b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b4e:	f003 0301 	and.w	r3, r3, #1
 8005b52:	617b      	str	r3, [r7, #20]
 8005b54:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8005b56:	23a0      	movs	r3, #160	; 0xa0
 8005b58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b5a:	2302      	movs	r3, #2
 8005b5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b62:	2303      	movs	r3, #3
 8005b64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005b66:	2305      	movs	r3, #5
 8005b68:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b6a:	f107 031c 	add.w	r3, r7, #28
 8005b6e:	4619      	mov	r1, r3
 8005b70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005b74:	f001 fdc2 	bl	80076fc <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Channel4;
 8005b78:	4b62      	ldr	r3, [pc, #392]	; (8005d04 <HAL_SPI_MspInit+0x200>)
 8005b7a:	4a63      	ldr	r2, [pc, #396]	; (8005d08 <HAL_SPI_MspInit+0x204>)
 8005b7c:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_4;
 8005b7e:	4b61      	ldr	r3, [pc, #388]	; (8005d04 <HAL_SPI_MspInit+0x200>)
 8005b80:	2204      	movs	r2, #4
 8005b82:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005b84:	4b5f      	ldr	r3, [pc, #380]	; (8005d04 <HAL_SPI_MspInit+0x200>)
 8005b86:	2210      	movs	r2, #16
 8005b88:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005b8a:	4b5e      	ldr	r3, [pc, #376]	; (8005d04 <HAL_SPI_MspInit+0x200>)
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005b90:	4b5c      	ldr	r3, [pc, #368]	; (8005d04 <HAL_SPI_MspInit+0x200>)
 8005b92:	2280      	movs	r2, #128	; 0x80
 8005b94:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005b96:	4b5b      	ldr	r3, [pc, #364]	; (8005d04 <HAL_SPI_MspInit+0x200>)
 8005b98:	2200      	movs	r2, #0
 8005b9a:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005b9c:	4b59      	ldr	r3, [pc, #356]	; (8005d04 <HAL_SPI_MspInit+0x200>)
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8005ba2:	4b58      	ldr	r3, [pc, #352]	; (8005d04 <HAL_SPI_MspInit+0x200>)
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8005ba8:	4b56      	ldr	r3, [pc, #344]	; (8005d04 <HAL_SPI_MspInit+0x200>)
 8005baa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005bae:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8005bb0:	4854      	ldr	r0, [pc, #336]	; (8005d04 <HAL_SPI_MspInit+0x200>)
 8005bb2:	f001 fb1f 	bl	80071f4 <HAL_DMA_Init>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d001      	beq.n	8005bc0 <HAL_SPI_MspInit+0xbc>
    {
      Error_Handler();
 8005bbc:	f7ff fa0a 	bl	8004fd4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	4a50      	ldr	r2, [pc, #320]	; (8005d04 <HAL_SPI_MspInit+0x200>)
 8005bc4:	655a      	str	r2, [r3, #84]	; 0x54
 8005bc6:	4a4f      	ldr	r2, [pc, #316]	; (8005d04 <HAL_SPI_MspInit+0x200>)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8005bcc:	2200      	movs	r2, #0
 8005bce:	2100      	movs	r1, #0
 8005bd0:	2023      	movs	r0, #35	; 0x23
 8005bd2:	f001 faca 	bl	800716a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8005bd6:	2023      	movs	r0, #35	; 0x23
 8005bd8:	f001 fae3 	bl	80071a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8005bdc:	e08a      	b.n	8005cf4 <HAL_SPI_MspInit+0x1f0>
  else if(hspi->Instance==SPI2)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a4a      	ldr	r2, [pc, #296]	; (8005d0c <HAL_SPI_MspInit+0x208>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	f040 8085 	bne.w	8005cf4 <HAL_SPI_MspInit+0x1f0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005bea:	4b45      	ldr	r3, [pc, #276]	; (8005d00 <HAL_SPI_MspInit+0x1fc>)
 8005bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bee:	4a44      	ldr	r2, [pc, #272]	; (8005d00 <HAL_SPI_MspInit+0x1fc>)
 8005bf0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005bf4:	6593      	str	r3, [r2, #88]	; 0x58
 8005bf6:	4b42      	ldr	r3, [pc, #264]	; (8005d00 <HAL_SPI_MspInit+0x1fc>)
 8005bf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bfe:	613b      	str	r3, [r7, #16]
 8005c00:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005c02:	4b3f      	ldr	r3, [pc, #252]	; (8005d00 <HAL_SPI_MspInit+0x1fc>)
 8005c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c06:	4a3e      	ldr	r2, [pc, #248]	; (8005d00 <HAL_SPI_MspInit+0x1fc>)
 8005c08:	f043 0302 	orr.w	r3, r3, #2
 8005c0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005c0e:	4b3c      	ldr	r3, [pc, #240]	; (8005d00 <HAL_SPI_MspInit+0x1fc>)
 8005c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c12:	f003 0302 	and.w	r3, r3, #2
 8005c16:	60fb      	str	r3, [r7, #12]
 8005c18:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8005c1a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8005c1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c20:	2302      	movs	r3, #2
 8005c22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c24:	2300      	movs	r3, #0
 8005c26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c28:	2303      	movs	r3, #3
 8005c2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005c2c:	2305      	movs	r3, #5
 8005c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c30:	f107 031c 	add.w	r3, r7, #28
 8005c34:	4619      	mov	r1, r3
 8005c36:	4836      	ldr	r0, [pc, #216]	; (8005d10 <HAL_SPI_MspInit+0x20c>)
 8005c38:	f001 fd60 	bl	80076fc <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Channel4;
 8005c3c:	4b35      	ldr	r3, [pc, #212]	; (8005d14 <HAL_SPI_MspInit+0x210>)
 8005c3e:	4a36      	ldr	r2, [pc, #216]	; (8005d18 <HAL_SPI_MspInit+0x214>)
 8005c40:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_1;
 8005c42:	4b34      	ldr	r3, [pc, #208]	; (8005d14 <HAL_SPI_MspInit+0x210>)
 8005c44:	2201      	movs	r2, #1
 8005c46:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005c48:	4b32      	ldr	r3, [pc, #200]	; (8005d14 <HAL_SPI_MspInit+0x210>)
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005c4e:	4b31      	ldr	r3, [pc, #196]	; (8005d14 <HAL_SPI_MspInit+0x210>)
 8005c50:	2200      	movs	r2, #0
 8005c52:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005c54:	4b2f      	ldr	r3, [pc, #188]	; (8005d14 <HAL_SPI_MspInit+0x210>)
 8005c56:	2280      	movs	r2, #128	; 0x80
 8005c58:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005c5a:	4b2e      	ldr	r3, [pc, #184]	; (8005d14 <HAL_SPI_MspInit+0x210>)
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005c60:	4b2c      	ldr	r3, [pc, #176]	; (8005d14 <HAL_SPI_MspInit+0x210>)
 8005c62:	2200      	movs	r2, #0
 8005c64:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8005c66:	4b2b      	ldr	r3, [pc, #172]	; (8005d14 <HAL_SPI_MspInit+0x210>)
 8005c68:	2200      	movs	r2, #0
 8005c6a:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8005c6c:	4b29      	ldr	r3, [pc, #164]	; (8005d14 <HAL_SPI_MspInit+0x210>)
 8005c6e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005c72:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8005c74:	4827      	ldr	r0, [pc, #156]	; (8005d14 <HAL_SPI_MspInit+0x210>)
 8005c76:	f001 fabd 	bl	80071f4 <HAL_DMA_Init>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d001      	beq.n	8005c84 <HAL_SPI_MspInit+0x180>
      Error_Handler();
 8005c80:	f7ff f9a8 	bl	8004fd4 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	4a23      	ldr	r2, [pc, #140]	; (8005d14 <HAL_SPI_MspInit+0x210>)
 8005c88:	659a      	str	r2, [r3, #88]	; 0x58
 8005c8a:	4a22      	ldr	r2, [pc, #136]	; (8005d14 <HAL_SPI_MspInit+0x210>)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8005c90:	4b22      	ldr	r3, [pc, #136]	; (8005d1c <HAL_SPI_MspInit+0x218>)
 8005c92:	4a23      	ldr	r2, [pc, #140]	; (8005d20 <HAL_SPI_MspInit+0x21c>)
 8005c94:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_1;
 8005c96:	4b21      	ldr	r3, [pc, #132]	; (8005d1c <HAL_SPI_MspInit+0x218>)
 8005c98:	2201      	movs	r2, #1
 8005c9a:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005c9c:	4b1f      	ldr	r3, [pc, #124]	; (8005d1c <HAL_SPI_MspInit+0x218>)
 8005c9e:	2210      	movs	r2, #16
 8005ca0:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005ca2:	4b1e      	ldr	r3, [pc, #120]	; (8005d1c <HAL_SPI_MspInit+0x218>)
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005ca8:	4b1c      	ldr	r3, [pc, #112]	; (8005d1c <HAL_SPI_MspInit+0x218>)
 8005caa:	2280      	movs	r2, #128	; 0x80
 8005cac:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005cae:	4b1b      	ldr	r3, [pc, #108]	; (8005d1c <HAL_SPI_MspInit+0x218>)
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005cb4:	4b19      	ldr	r3, [pc, #100]	; (8005d1c <HAL_SPI_MspInit+0x218>)
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8005cba:	4b18      	ldr	r3, [pc, #96]	; (8005d1c <HAL_SPI_MspInit+0x218>)
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8005cc0:	4b16      	ldr	r3, [pc, #88]	; (8005d1c <HAL_SPI_MspInit+0x218>)
 8005cc2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005cc6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8005cc8:	4814      	ldr	r0, [pc, #80]	; (8005d1c <HAL_SPI_MspInit+0x218>)
 8005cca:	f001 fa93 	bl	80071f4 <HAL_DMA_Init>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d001      	beq.n	8005cd8 <HAL_SPI_MspInit+0x1d4>
      Error_Handler();
 8005cd4:	f7ff f97e 	bl	8004fd4 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	4a10      	ldr	r2, [pc, #64]	; (8005d1c <HAL_SPI_MspInit+0x218>)
 8005cdc:	655a      	str	r2, [r3, #84]	; 0x54
 8005cde:	4a0f      	ldr	r2, [pc, #60]	; (8005d1c <HAL_SPI_MspInit+0x218>)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	2100      	movs	r1, #0
 8005ce8:	2024      	movs	r0, #36	; 0x24
 8005cea:	f001 fa3e 	bl	800716a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8005cee:	2024      	movs	r0, #36	; 0x24
 8005cf0:	f001 fa57 	bl	80071a2 <HAL_NVIC_EnableIRQ>
}
 8005cf4:	bf00      	nop
 8005cf6:	3730      	adds	r7, #48	; 0x30
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}
 8005cfc:	40013000 	.word	0x40013000
 8005d00:	40021000 	.word	0x40021000
 8005d04:	20000a10 	.word	0x20000a10
 8005d08:	40020444 	.word	0x40020444
 8005d0c:	40003800 	.word	0x40003800
 8005d10:	48000400 	.word	0x48000400
 8005d14:	20000a58 	.word	0x20000a58
 8005d18:	40020044 	.word	0x40020044
 8005d1c:	20000aa0 	.word	0x20000aa0
 8005d20:	40020058 	.word	0x40020058

08005d24 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b084      	sub	sp, #16
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a0d      	ldr	r2, [pc, #52]	; (8005d68 <HAL_TIM_Base_MspInit+0x44>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d113      	bne.n	8005d5e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005d36:	4b0d      	ldr	r3, [pc, #52]	; (8005d6c <HAL_TIM_Base_MspInit+0x48>)
 8005d38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d3a:	4a0c      	ldr	r2, [pc, #48]	; (8005d6c <HAL_TIM_Base_MspInit+0x48>)
 8005d3c:	f043 0304 	orr.w	r3, r3, #4
 8005d40:	6593      	str	r3, [r2, #88]	; 0x58
 8005d42:	4b0a      	ldr	r3, [pc, #40]	; (8005d6c <HAL_TIM_Base_MspInit+0x48>)
 8005d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d46:	f003 0304 	and.w	r3, r3, #4
 8005d4a:	60fb      	str	r3, [r7, #12]
 8005d4c:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 2, 0);
 8005d4e:	2200      	movs	r2, #0
 8005d50:	2102      	movs	r1, #2
 8005d52:	201e      	movs	r0, #30
 8005d54:	f001 fa09 	bl	800716a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8005d58:	201e      	movs	r0, #30
 8005d5a:	f001 fa22 	bl	80071a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8005d5e:	bf00      	nop
 8005d60:	3710      	adds	r7, #16
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}
 8005d66:	bf00      	nop
 8005d68:	40000800 	.word	0x40000800
 8005d6c:	40021000 	.word	0x40021000

08005d70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b0ae      	sub	sp, #184	; 0xb8
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d78:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	601a      	str	r2, [r3, #0]
 8005d80:	605a      	str	r2, [r3, #4]
 8005d82:	609a      	str	r2, [r3, #8]
 8005d84:	60da      	str	r2, [r3, #12]
 8005d86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005d88:	f107 031c 	add.w	r3, r7, #28
 8005d8c:	2288      	movs	r2, #136	; 0x88
 8005d8e:	2100      	movs	r1, #0
 8005d90:	4618      	mov	r0, r3
 8005d92:	f009 f8c1 	bl	800ef18 <memset>
  if(huart->Instance==USART2)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a74      	ldr	r2, [pc, #464]	; (8005f6c <HAL_UART_MspInit+0x1fc>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d16e      	bne.n	8005e7e <HAL_UART_MspInit+0x10e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8005da0:	2302      	movs	r3, #2
 8005da2:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8005da4:	2300      	movs	r3, #0
 8005da6:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005da8:	f107 031c 	add.w	r3, r7, #28
 8005dac:	4618      	mov	r0, r3
 8005dae:	f004 fa2b 	bl	800a208 <HAL_RCCEx_PeriphCLKConfig>
 8005db2:	4603      	mov	r3, r0
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d001      	beq.n	8005dbc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8005db8:	f7ff f90c 	bl	8004fd4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005dbc:	4b6c      	ldr	r3, [pc, #432]	; (8005f70 <HAL_UART_MspInit+0x200>)
 8005dbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dc0:	4a6b      	ldr	r2, [pc, #428]	; (8005f70 <HAL_UART_MspInit+0x200>)
 8005dc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005dc6:	6593      	str	r3, [r2, #88]	; 0x58
 8005dc8:	4b69      	ldr	r3, [pc, #420]	; (8005f70 <HAL_UART_MspInit+0x200>)
 8005dca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dd0:	61bb      	str	r3, [r7, #24]
 8005dd2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005dd4:	4b66      	ldr	r3, [pc, #408]	; (8005f70 <HAL_UART_MspInit+0x200>)
 8005dd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dd8:	4a65      	ldr	r2, [pc, #404]	; (8005f70 <HAL_UART_MspInit+0x200>)
 8005dda:	f043 0301 	orr.w	r3, r3, #1
 8005dde:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005de0:	4b63      	ldr	r3, [pc, #396]	; (8005f70 <HAL_UART_MspInit+0x200>)
 8005de2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005de4:	f003 0301 	and.w	r3, r3, #1
 8005de8:	617b      	str	r3, [r7, #20]
 8005dea:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = LOG_TX_Pin|LOG_RX_Pin;
 8005dec:	230c      	movs	r3, #12
 8005dee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005df2:	2302      	movs	r3, #2
 8005df4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005df8:	2300      	movs	r3, #0
 8005dfa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005dfe:	2303      	movs	r3, #3
 8005e00:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005e04:	2307      	movs	r3, #7
 8005e06:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e0a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005e0e:	4619      	mov	r1, r3
 8005e10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005e14:	f001 fc72 	bl	80076fc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8005e18:	4b56      	ldr	r3, [pc, #344]	; (8005f74 <HAL_UART_MspInit+0x204>)
 8005e1a:	4a57      	ldr	r2, [pc, #348]	; (8005f78 <HAL_UART_MspInit+0x208>)
 8005e1c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8005e1e:	4b55      	ldr	r3, [pc, #340]	; (8005f74 <HAL_UART_MspInit+0x204>)
 8005e20:	2202      	movs	r2, #2
 8005e22:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005e24:	4b53      	ldr	r3, [pc, #332]	; (8005f74 <HAL_UART_MspInit+0x204>)
 8005e26:	2210      	movs	r2, #16
 8005e28:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005e2a:	4b52      	ldr	r3, [pc, #328]	; (8005f74 <HAL_UART_MspInit+0x204>)
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005e30:	4b50      	ldr	r3, [pc, #320]	; (8005f74 <HAL_UART_MspInit+0x204>)
 8005e32:	2280      	movs	r2, #128	; 0x80
 8005e34:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005e36:	4b4f      	ldr	r3, [pc, #316]	; (8005f74 <HAL_UART_MspInit+0x204>)
 8005e38:	2200      	movs	r2, #0
 8005e3a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005e3c:	4b4d      	ldr	r3, [pc, #308]	; (8005f74 <HAL_UART_MspInit+0x204>)
 8005e3e:	2200      	movs	r2, #0
 8005e40:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8005e42:	4b4c      	ldr	r3, [pc, #304]	; (8005f74 <HAL_UART_MspInit+0x204>)
 8005e44:	2200      	movs	r2, #0
 8005e46:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8005e48:	4b4a      	ldr	r3, [pc, #296]	; (8005f74 <HAL_UART_MspInit+0x204>)
 8005e4a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005e4e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8005e50:	4848      	ldr	r0, [pc, #288]	; (8005f74 <HAL_UART_MspInit+0x204>)
 8005e52:	f001 f9cf 	bl	80071f4 <HAL_DMA_Init>
 8005e56:	4603      	mov	r3, r0
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d001      	beq.n	8005e60 <HAL_UART_MspInit+0xf0>
    {
      Error_Handler();
 8005e5c:	f7ff f8ba 	bl	8004fd4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	4a44      	ldr	r2, [pc, #272]	; (8005f74 <HAL_UART_MspInit+0x204>)
 8005e64:	66da      	str	r2, [r3, #108]	; 0x6c
 8005e66:	4a43      	ldr	r2, [pc, #268]	; (8005f74 <HAL_UART_MspInit+0x204>)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	2101      	movs	r1, #1
 8005e70:	2026      	movs	r0, #38	; 0x26
 8005e72:	f001 f97a 	bl	800716a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005e76:	2026      	movs	r0, #38	; 0x26
 8005e78:	f001 f993 	bl	80071a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8005e7c:	e071      	b.n	8005f62 <HAL_UART_MspInit+0x1f2>
  else if(huart->Instance==USART3)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a3e      	ldr	r2, [pc, #248]	; (8005f7c <HAL_UART_MspInit+0x20c>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d16c      	bne.n	8005f62 <HAL_UART_MspInit+0x1f2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8005e88:	2304      	movs	r3, #4
 8005e8a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005e90:	f107 031c 	add.w	r3, r7, #28
 8005e94:	4618      	mov	r0, r3
 8005e96:	f004 f9b7 	bl	800a208 <HAL_RCCEx_PeriphCLKConfig>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d001      	beq.n	8005ea4 <HAL_UART_MspInit+0x134>
      Error_Handler();
 8005ea0:	f7ff f898 	bl	8004fd4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8005ea4:	4b32      	ldr	r3, [pc, #200]	; (8005f70 <HAL_UART_MspInit+0x200>)
 8005ea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ea8:	4a31      	ldr	r2, [pc, #196]	; (8005f70 <HAL_UART_MspInit+0x200>)
 8005eaa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005eae:	6593      	str	r3, [r2, #88]	; 0x58
 8005eb0:	4b2f      	ldr	r3, [pc, #188]	; (8005f70 <HAL_UART_MspInit+0x200>)
 8005eb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005eb4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005eb8:	613b      	str	r3, [r7, #16]
 8005eba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005ebc:	4b2c      	ldr	r3, [pc, #176]	; (8005f70 <HAL_UART_MspInit+0x200>)
 8005ebe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ec0:	4a2b      	ldr	r2, [pc, #172]	; (8005f70 <HAL_UART_MspInit+0x200>)
 8005ec2:	f043 0304 	orr.w	r3, r3, #4
 8005ec6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005ec8:	4b29      	ldr	r3, [pc, #164]	; (8005f70 <HAL_UART_MspInit+0x200>)
 8005eca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ecc:	f003 0304 	and.w	r3, r3, #4
 8005ed0:	60fb      	str	r3, [r7, #12]
 8005ed2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005ed4:	2330      	movs	r3, #48	; 0x30
 8005ed6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005eda:	2302      	movs	r3, #2
 8005edc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ee6:	2303      	movs	r3, #3
 8005ee8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005eec:	2307      	movs	r3, #7
 8005eee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005ef2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005ef6:	4619      	mov	r1, r3
 8005ef8:	4821      	ldr	r0, [pc, #132]	; (8005f80 <HAL_UART_MspInit+0x210>)
 8005efa:	f001 fbff 	bl	80076fc <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8005efe:	4b21      	ldr	r3, [pc, #132]	; (8005f84 <HAL_UART_MspInit+0x214>)
 8005f00:	4a21      	ldr	r2, [pc, #132]	; (8005f88 <HAL_UART_MspInit+0x218>)
 8005f02:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_2;
 8005f04:	4b1f      	ldr	r3, [pc, #124]	; (8005f84 <HAL_UART_MspInit+0x214>)
 8005f06:	2202      	movs	r2, #2
 8005f08:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005f0a:	4b1e      	ldr	r3, [pc, #120]	; (8005f84 <HAL_UART_MspInit+0x214>)
 8005f0c:	2210      	movs	r2, #16
 8005f0e:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005f10:	4b1c      	ldr	r3, [pc, #112]	; (8005f84 <HAL_UART_MspInit+0x214>)
 8005f12:	2200      	movs	r2, #0
 8005f14:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005f16:	4b1b      	ldr	r3, [pc, #108]	; (8005f84 <HAL_UART_MspInit+0x214>)
 8005f18:	2280      	movs	r2, #128	; 0x80
 8005f1a:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005f1c:	4b19      	ldr	r3, [pc, #100]	; (8005f84 <HAL_UART_MspInit+0x214>)
 8005f1e:	2200      	movs	r2, #0
 8005f20:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005f22:	4b18      	ldr	r3, [pc, #96]	; (8005f84 <HAL_UART_MspInit+0x214>)
 8005f24:	2200      	movs	r2, #0
 8005f26:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8005f28:	4b16      	ldr	r3, [pc, #88]	; (8005f84 <HAL_UART_MspInit+0x214>)
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8005f2e:	4b15      	ldr	r3, [pc, #84]	; (8005f84 <HAL_UART_MspInit+0x214>)
 8005f30:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005f34:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8005f36:	4813      	ldr	r0, [pc, #76]	; (8005f84 <HAL_UART_MspInit+0x214>)
 8005f38:	f001 f95c 	bl	80071f4 <HAL_DMA_Init>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d001      	beq.n	8005f46 <HAL_UART_MspInit+0x1d6>
      Error_Handler();
 8005f42:	f7ff f847 	bl	8004fd4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	4a0e      	ldr	r2, [pc, #56]	; (8005f84 <HAL_UART_MspInit+0x214>)
 8005f4a:	66da      	str	r2, [r3, #108]	; 0x6c
 8005f4c:	4a0d      	ldr	r2, [pc, #52]	; (8005f84 <HAL_UART_MspInit+0x214>)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8005f52:	2200      	movs	r2, #0
 8005f54:	2100      	movs	r1, #0
 8005f56:	2027      	movs	r0, #39	; 0x27
 8005f58:	f001 f907 	bl	800716a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005f5c:	2027      	movs	r0, #39	; 0x27
 8005f5e:	f001 f920 	bl	80071a2 <HAL_NVIC_EnableIRQ>
}
 8005f62:	bf00      	nop
 8005f64:	37b8      	adds	r7, #184	; 0xb8
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}
 8005f6a:	bf00      	nop
 8005f6c:	40004400 	.word	0x40004400
 8005f70:	40021000 	.word	0x40021000
 8005f74:	20000c3c 	.word	0x20000c3c
 8005f78:	40020080 	.word	0x40020080
 8005f7c:	40004800 	.word	0x40004800
 8005f80:	48000800 	.word	0x48000800
 8005f84:	20000c84 	.word	0x20000c84
 8005f88:	4002001c 	.word	0x4002001c

08005f8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005f90:	e7fe      	b.n	8005f90 <NMI_Handler+0x4>

08005f92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005f92:	b480      	push	{r7}
 8005f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005f96:	e7fe      	b.n	8005f96 <HardFault_Handler+0x4>

08005f98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005f9c:	e7fe      	b.n	8005f9c <MemManage_Handler+0x4>

08005f9e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005f9e:	b480      	push	{r7}
 8005fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005fa2:	e7fe      	b.n	8005fa2 <BusFault_Handler+0x4>

08005fa4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005fa8:	e7fe      	b.n	8005fa8 <UsageFault_Handler+0x4>

08005faa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005faa:	b480      	push	{r7}
 8005fac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005fae:	bf00      	nop
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb6:	4770      	bx	lr

08005fb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005fbc:	bf00      	nop
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc4:	4770      	bx	lr

08005fc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005fc6:	b480      	push	{r7}
 8005fc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005fca:	bf00      	nop
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd2:	4770      	bx	lr

08005fd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005fd8:	f000 ff64 	bl	8006ea4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005fdc:	bf00      	nop
 8005fde:	bd80      	pop	{r7, pc}

08005fe0 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY0_Pin);
 8005fe4:	2002      	movs	r0, #2
 8005fe6:	f001 fd7d 	bl	8007ae4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8005fea:	bf00      	nop
 8005fec:	bd80      	pop	{r7, pc}

08005fee <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8005fee:	b580      	push	{r7, lr}
 8005ff0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY1_Pin);
 8005ff2:	2004      	movs	r0, #4
 8005ff4:	f001 fd76 	bl	8007ae4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8005ff8:	bf00      	nop
 8005ffa:	bd80      	pop	{r7, pc}

08005ffc <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8006000:	4802      	ldr	r0, [pc, #8]	; (800600c <DMA1_Channel2_IRQHandler+0x10>)
 8006002:	f001 fa8e 	bl	8007522 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8006006:	bf00      	nop
 8006008:	bd80      	pop	{r7, pc}
 800600a:	bf00      	nop
 800600c:	20000c84 	.word	0x20000c84

08006010 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8006014:	4802      	ldr	r0, [pc, #8]	; (8006020 <DMA1_Channel4_IRQHandler+0x10>)
 8006016:	f001 fa84 	bl	8007522 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800601a:	bf00      	nop
 800601c:	bd80      	pop	{r7, pc}
 800601e:	bf00      	nop
 8006020:	20000a58 	.word	0x20000a58

08006024 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8006028:	4802      	ldr	r0, [pc, #8]	; (8006034 <DMA1_Channel5_IRQHandler+0x10>)
 800602a:	f001 fa7a 	bl	8007522 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800602e:	bf00      	nop
 8006030:	bd80      	pop	{r7, pc}
 8006032:	bf00      	nop
 8006034:	20000aa0 	.word	0x20000aa0

08006038 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800603c:	4802      	ldr	r0, [pc, #8]	; (8006048 <DMA1_Channel6_IRQHandler+0x10>)
 800603e:	f001 fa70 	bl	8007522 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8006042:	bf00      	nop
 8006044:	bd80      	pop	{r7, pc}
 8006046:	bf00      	nop
 8006048:	200008dc 	.word	0x200008dc

0800604c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8006050:	4802      	ldr	r0, [pc, #8]	; (800605c <DMA1_Channel7_IRQHandler+0x10>)
 8006052:	f001 fa66 	bl	8007522 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8006056:	bf00      	nop
 8006058:	bd80      	pop	{r7, pc}
 800605a:	bf00      	nop
 800605c:	20000c3c 	.word	0x20000c3c

08006060 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8006064:	4802      	ldr	r0, [pc, #8]	; (8006070 <TIM4_IRQHandler+0x10>)
 8006066:	f006 fda6 	bl	800cbb6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800606a:	bf00      	nop
 800606c:	bd80      	pop	{r7, pc}
 800606e:	bf00      	nop
 8006070:	20000ae8 	.word	0x20000ae8

08006074 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8006078:	4802      	ldr	r0, [pc, #8]	; (8006084 <I2C1_EV_IRQHandler+0x10>)
 800607a:	f002 f8fd 	bl	8008278 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800607e:	bf00      	nop
 8006080:	bd80      	pop	{r7, pc}
 8006082:	bf00      	nop
 8006084:	20000840 	.word	0x20000840

08006088 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800608c:	4802      	ldr	r0, [pc, #8]	; (8006098 <I2C1_ER_IRQHandler+0x10>)
 800608e:	f002 f90d 	bl	80082ac <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8006092:	bf00      	nop
 8006094:	bd80      	pop	{r7, pc}
 8006096:	bf00      	nop
 8006098:	20000840 	.word	0x20000840

0800609c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80060a0:	4802      	ldr	r0, [pc, #8]	; (80060ac <SPI1_IRQHandler+0x10>)
 80060a2:	f006 f85b 	bl	800c15c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80060a6:	bf00      	nop
 80060a8:	bd80      	pop	{r7, pc}
 80060aa:	bf00      	nop
 80060ac:	20000948 	.word	0x20000948

080060b0 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80060b4:	4802      	ldr	r0, [pc, #8]	; (80060c0 <SPI2_IRQHandler+0x10>)
 80060b6:	f006 f851 	bl	800c15c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80060ba:	bf00      	nop
 80060bc:	bd80      	pop	{r7, pc}
 80060be:	bf00      	nop
 80060c0:	200009ac 	.word	0x200009ac

080060c4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80060c8:	4802      	ldr	r0, [pc, #8]	; (80060d4 <USART2_IRQHandler+0x10>)
 80060ca:	f007 fb27 	bl	800d71c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80060ce:	bf00      	nop
 80060d0:	bd80      	pop	{r7, pc}
 80060d2:	bf00      	nop
 80060d4:	20000b34 	.word	0x20000b34

080060d8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80060dc:	4802      	ldr	r0, [pc, #8]	; (80060e8 <USART3_IRQHandler+0x10>)
 80060de:	f007 fb1d 	bl	800d71c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80060e2:	bf00      	nop
 80060e4:	bd80      	pop	{r7, pc}
 80060e6:	bf00      	nop
 80060e8:	20000bb8 	.word	0x20000bb8

080060ec <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80060f0:	4802      	ldr	r0, [pc, #8]	; (80060fc <DMA2_Channel4_IRQHandler+0x10>)
 80060f2:	f001 fa16 	bl	8007522 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 80060f6:	bf00      	nop
 80060f8:	bd80      	pop	{r7, pc}
 80060fa:	bf00      	nop
 80060fc:	20000a10 	.word	0x20000a10

08006100 <DMA2_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA2 channel6 global interrupt.
  */
void DMA2_Channel6_IRQHandler(void)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel6_IRQn 0 */

  /* USER CODE END DMA2_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8006104:	4802      	ldr	r0, [pc, #8]	; (8006110 <DMA2_Channel6_IRQHandler+0x10>)
 8006106:	f001 fa0c 	bl	8007522 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel6_IRQn 1 */

  /* USER CODE END DMA2_Channel6_IRQn 1 */
}
 800610a:	bf00      	nop
 800610c:	bd80      	pop	{r7, pc}
 800610e:	bf00      	nop
 8006110:	20000894 	.word	0x20000894

08006114 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006114:	b480      	push	{r7}
 8006116:	af00      	add	r7, sp, #0
	return 1;
 8006118:	2301      	movs	r3, #1
}
 800611a:	4618      	mov	r0, r3
 800611c:	46bd      	mov	sp, r7
 800611e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006122:	4770      	bx	lr

08006124 <_kill>:

int _kill(int pid, int sig)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b082      	sub	sp, #8
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
 800612c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800612e:	f008 fdff 	bl	800ed30 <__errno>
 8006132:	4603      	mov	r3, r0
 8006134:	2216      	movs	r2, #22
 8006136:	601a      	str	r2, [r3, #0]
	return -1;
 8006138:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800613c:	4618      	mov	r0, r3
 800613e:	3708      	adds	r7, #8
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}

08006144 <_exit>:

void _exit (int status)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b082      	sub	sp, #8
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800614c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f7ff ffe7 	bl	8006124 <_kill>
	while (1) {}		/* Make sure we hang here */
 8006156:	e7fe      	b.n	8006156 <_exit+0x12>

08006158 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b086      	sub	sp, #24
 800615c:	af00      	add	r7, sp, #0
 800615e:	60f8      	str	r0, [r7, #12]
 8006160:	60b9      	str	r1, [r7, #8]
 8006162:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006164:	2300      	movs	r3, #0
 8006166:	617b      	str	r3, [r7, #20]
 8006168:	e00a      	b.n	8006180 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800616a:	f3af 8000 	nop.w
 800616e:	4601      	mov	r1, r0
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	1c5a      	adds	r2, r3, #1
 8006174:	60ba      	str	r2, [r7, #8]
 8006176:	b2ca      	uxtb	r2, r1
 8006178:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	3301      	adds	r3, #1
 800617e:	617b      	str	r3, [r7, #20]
 8006180:	697a      	ldr	r2, [r7, #20]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	429a      	cmp	r2, r3
 8006186:	dbf0      	blt.n	800616a <_read+0x12>
	}

return len;
 8006188:	687b      	ldr	r3, [r7, #4]
}
 800618a:	4618      	mov	r0, r3
 800618c:	3718      	adds	r7, #24
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}

08006192 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006192:	b580      	push	{r7, lr}
 8006194:	b086      	sub	sp, #24
 8006196:	af00      	add	r7, sp, #0
 8006198:	60f8      	str	r0, [r7, #12]
 800619a:	60b9      	str	r1, [r7, #8]
 800619c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800619e:	2300      	movs	r3, #0
 80061a0:	617b      	str	r3, [r7, #20]
 80061a2:	e009      	b.n	80061b8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	1c5a      	adds	r2, r3, #1
 80061a8:	60ba      	str	r2, [r7, #8]
 80061aa:	781b      	ldrb	r3, [r3, #0]
 80061ac:	4618      	mov	r0, r3
 80061ae:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	3301      	adds	r3, #1
 80061b6:	617b      	str	r3, [r7, #20]
 80061b8:	697a      	ldr	r2, [r7, #20]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	429a      	cmp	r2, r3
 80061be:	dbf1      	blt.n	80061a4 <_write+0x12>
	}
	return len;
 80061c0:	687b      	ldr	r3, [r7, #4]
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	3718      	adds	r7, #24
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}

080061ca <_close>:

int _close(int file)
{
 80061ca:	b480      	push	{r7}
 80061cc:	b083      	sub	sp, #12
 80061ce:	af00      	add	r7, sp, #0
 80061d0:	6078      	str	r0, [r7, #4]
	return -1;
 80061d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	370c      	adds	r7, #12
 80061da:	46bd      	mov	sp, r7
 80061dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e0:	4770      	bx	lr

080061e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80061e2:	b480      	push	{r7}
 80061e4:	b083      	sub	sp, #12
 80061e6:	af00      	add	r7, sp, #0
 80061e8:	6078      	str	r0, [r7, #4]
 80061ea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80061f2:	605a      	str	r2, [r3, #4]
	return 0;
 80061f4:	2300      	movs	r3, #0
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	370c      	adds	r7, #12
 80061fa:	46bd      	mov	sp, r7
 80061fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006200:	4770      	bx	lr

08006202 <_isatty>:

int _isatty(int file)
{
 8006202:	b480      	push	{r7}
 8006204:	b083      	sub	sp, #12
 8006206:	af00      	add	r7, sp, #0
 8006208:	6078      	str	r0, [r7, #4]
	return 1;
 800620a:	2301      	movs	r3, #1
}
 800620c:	4618      	mov	r0, r3
 800620e:	370c      	adds	r7, #12
 8006210:	46bd      	mov	sp, r7
 8006212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006216:	4770      	bx	lr

08006218 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006218:	b480      	push	{r7}
 800621a:	b085      	sub	sp, #20
 800621c:	af00      	add	r7, sp, #0
 800621e:	60f8      	str	r0, [r7, #12]
 8006220:	60b9      	str	r1, [r7, #8]
 8006222:	607a      	str	r2, [r7, #4]
	return 0;
 8006224:	2300      	movs	r3, #0
}
 8006226:	4618      	mov	r0, r3
 8006228:	3714      	adds	r7, #20
 800622a:	46bd      	mov	sp, r7
 800622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006230:	4770      	bx	lr
	...

08006234 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b086      	sub	sp, #24
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800623c:	4a14      	ldr	r2, [pc, #80]	; (8006290 <_sbrk+0x5c>)
 800623e:	4b15      	ldr	r3, [pc, #84]	; (8006294 <_sbrk+0x60>)
 8006240:	1ad3      	subs	r3, r2, r3
 8006242:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006248:	4b13      	ldr	r3, [pc, #76]	; (8006298 <_sbrk+0x64>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d102      	bne.n	8006256 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006250:	4b11      	ldr	r3, [pc, #68]	; (8006298 <_sbrk+0x64>)
 8006252:	4a12      	ldr	r2, [pc, #72]	; (800629c <_sbrk+0x68>)
 8006254:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006256:	4b10      	ldr	r3, [pc, #64]	; (8006298 <_sbrk+0x64>)
 8006258:	681a      	ldr	r2, [r3, #0]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	4413      	add	r3, r2
 800625e:	693a      	ldr	r2, [r7, #16]
 8006260:	429a      	cmp	r2, r3
 8006262:	d207      	bcs.n	8006274 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006264:	f008 fd64 	bl	800ed30 <__errno>
 8006268:	4603      	mov	r3, r0
 800626a:	220c      	movs	r2, #12
 800626c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800626e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006272:	e009      	b.n	8006288 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006274:	4b08      	ldr	r3, [pc, #32]	; (8006298 <_sbrk+0x64>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800627a:	4b07      	ldr	r3, [pc, #28]	; (8006298 <_sbrk+0x64>)
 800627c:	681a      	ldr	r2, [r3, #0]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	4413      	add	r3, r2
 8006282:	4a05      	ldr	r2, [pc, #20]	; (8006298 <_sbrk+0x64>)
 8006284:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006286:	68fb      	ldr	r3, [r7, #12]
}
 8006288:	4618      	mov	r0, r3
 800628a:	3718      	adds	r7, #24
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}
 8006290:	20018000 	.word	0x20018000
 8006294:	00000c00 	.word	0x00000c00
 8006298:	200035a0 	.word	0x200035a0
 800629c:	200036e8 	.word	0x200036e8

080062a0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80062a0:	b480      	push	{r7}
 80062a2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80062a4:	4b06      	ldr	r3, [pc, #24]	; (80062c0 <SystemInit+0x20>)
 80062a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062aa:	4a05      	ldr	r2, [pc, #20]	; (80062c0 <SystemInit+0x20>)
 80062ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80062b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80062b4:	bf00      	nop
 80062b6:	46bd      	mov	sp, r7
 80062b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062bc:	4770      	bx	lr
 80062be:	bf00      	nop
 80062c0:	e000ed00 	.word	0xe000ed00

080062c4 <W25_SELECT>:

extern void Report(const uint8_t addTime, const char *fmt, ...);

//------------------------------------------------------------------------------------------

void W25_SELECT()   { W25_SEL(); } //HAL_GPIO_WritePin(W25_CS_GPIO_Port, W25_CS_Pin, GPIO_PIN_RESET);//set to 0
 80062c4:	b580      	push	{r7, lr}
 80062c6:	af00      	add	r7, sp, #0
 80062c8:	2200      	movs	r2, #0
 80062ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80062ce:	4802      	ldr	r0, [pc, #8]	; (80062d8 <W25_SELECT+0x14>)
 80062d0:	f001 fbd6 	bl	8007a80 <HAL_GPIO_WritePin>
 80062d4:	bf00      	nop
 80062d6:	bd80      	pop	{r7, pc}
 80062d8:	48000400 	.word	0x48000400

080062dc <W25_UNSELECT>:
void W25_UNSELECT() { W25_UNSEL(); } //HAL_GPIO_WritePin(W25_CS_GPIO_Port, W25_CS_Pin, GPIO_PIN_SET);//set to 1
 80062dc:	b580      	push	{r7, lr}
 80062de:	af00      	add	r7, sp, #0
 80062e0:	2201      	movs	r2, #1
 80062e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80062e6:	4802      	ldr	r0, [pc, #8]	; (80062f0 <W25_UNSELECT+0x14>)
 80062e8:	f001 fbca 	bl	8007a80 <HAL_GPIO_WritePin>
 80062ec:	bf00      	nop
 80062ee:	bd80      	pop	{r7, pc}
 80062f0:	48000400 	.word	0x48000400

080062f4 <W25qxx_Spi>:
//void W25_SELECT()   { HAL_GPIO_WritePin(W25_CS_GPIO_Port, W25_CS_Pin, GPIO_PIN_RESET); }//set to 0
//void W25_UNSELECT() { HAL_GPIO_WritePin(W25_CS_GPIO_Port, W25_CS_Pin, GPIO_PIN_SET); }//set to 1

//------------------------------------------------------------------------------------------
uint8_t W25qxx_Spi(uint8_t Data)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b086      	sub	sp, #24
 80062f8:	af02      	add	r7, sp, #8
 80062fa:	4603      	mov	r3, r0
 80062fc:	71fb      	strb	r3, [r7, #7]
uint8_t ret;

    if (HAL_SPI_TransmitReceive(portFLASH, &Data, &ret, 1, min_wait_ms) != HAL_OK) devError |= devSPI;
 80062fe:	4b0c      	ldr	r3, [pc, #48]	; (8006330 <W25qxx_Spi+0x3c>)
 8006300:	6818      	ldr	r0, [r3, #0]
 8006302:	23fa      	movs	r3, #250	; 0xfa
 8006304:	f107 020f 	add.w	r2, r7, #15
 8006308:	1df9      	adds	r1, r7, #7
 800630a:	9300      	str	r3, [sp, #0]
 800630c:	2301      	movs	r3, #1
 800630e:	f005 fa92 	bl	800b836 <HAL_SPI_TransmitReceive>
 8006312:	4603      	mov	r3, r0
 8006314:	2b00      	cmp	r3, #0
 8006316:	d006      	beq.n	8006326 <W25qxx_Spi+0x32>
 8006318:	4b06      	ldr	r3, [pc, #24]	; (8006334 <W25qxx_Spi+0x40>)
 800631a:	881b      	ldrh	r3, [r3, #0]
 800631c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006320:	b29a      	uxth	r2, r3
 8006322:	4b04      	ldr	r3, [pc, #16]	; (8006334 <W25qxx_Spi+0x40>)
 8006324:	801a      	strh	r2, [r3, #0]

    return ret;
 8006326:	7bfb      	ldrb	r3, [r7, #15]
}
 8006328:	4618      	mov	r0, r3
 800632a:	3710      	adds	r7, #16
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}
 8006330:	2000000c 	.word	0x2000000c
 8006334:	2000194c 	.word	0x2000194c

08006338 <W25qxx_Reset>:
//------------------------------------------------------------------------------------------
void W25qxx_Reset(void)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	af00      	add	r7, sp, #0
	W25qxx_Delay(100);
 800633c:	2064      	movs	r0, #100	; 0x64
 800633e:	f000 fdd1 	bl	8006ee4 <HAL_Delay>

	W25_SELECT();
 8006342:	f7ff ffbf 	bl	80062c4 <W25_SELECT>
		W25qxx_Spi(EN_RESET);
 8006346:	2066      	movs	r0, #102	; 0x66
 8006348:	f7ff ffd4 	bl	80062f4 <W25qxx_Spi>
		W25qxx_Spi(CHIP_RESET);
 800634c:	2099      	movs	r0, #153	; 0x99
 800634e:	f7ff ffd1 	bl	80062f4 <W25qxx_Spi>
	W25_UNSELECT();
 8006352:	f7ff ffc3 	bl	80062dc <W25_UNSELECT>

	W25qxx_Delay(100);
 8006356:	2064      	movs	r0, #100	; 0x64
 8006358:	f000 fdc4 	bl	8006ee4 <HAL_Delay>
}
 800635c:	bf00      	nop
 800635e:	bd80      	pop	{r7, pc}

08006360 <W25qxx_ReadID>:
//------------------------------------------------------------------------------------------
uint32_t W25qxx_ReadID(void)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b084      	sub	sp, #16
 8006364:	af00      	add	r7, sp, #0
uint32_t Temp[3] = {0};
 8006366:	1d3b      	adds	r3, r7, #4
 8006368:	2200      	movs	r2, #0
 800636a:	601a      	str	r2, [r3, #0]
 800636c:	605a      	str	r2, [r3, #4]
 800636e:	609a      	str	r2, [r3, #8]

    W25_SELECT();//set to 0
 8006370:	f7ff ffa8 	bl	80062c4 <W25_SELECT>

    W25qxx_Spi(JEDEC_ID);
 8006374:	209f      	movs	r0, #159	; 0x9f
 8006376:	f7ff ffbd 	bl	80062f4 <W25qxx_Spi>
    Temp[0] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800637a:	20a5      	movs	r0, #165	; 0xa5
 800637c:	f7ff ffba 	bl	80062f4 <W25qxx_Spi>
 8006380:	4603      	mov	r3, r0
 8006382:	607b      	str	r3, [r7, #4]
    Temp[1] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8006384:	20a5      	movs	r0, #165	; 0xa5
 8006386:	f7ff ffb5 	bl	80062f4 <W25qxx_Spi>
 800638a:	4603      	mov	r3, r0
 800638c:	60bb      	str	r3, [r7, #8]
    Temp[2] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800638e:	20a5      	movs	r0, #165	; 0xa5
 8006390:	f7ff ffb0 	bl	80062f4 <W25qxx_Spi>
 8006394:	4603      	mov	r3, r0
 8006396:	60fb      	str	r3, [r7, #12]

    W25_UNSELECT();//set to 1
 8006398:	f7ff ffa0 	bl	80062dc <W25_UNSELECT>

    return ((Temp[0] << 16) | (Temp[1] << 8) | Temp[2]);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	041a      	lsls	r2, r3, #16
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	021b      	lsls	r3, r3, #8
 80063a4:	431a      	orrs	r2, r3
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	4313      	orrs	r3, r2
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	3710      	adds	r7, #16
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}
	...

080063b4 <W25qxx_ReadUniqID>:
//------------------------------------------------------------------------------------------
void W25qxx_ReadUniqID(void)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b082      	sub	sp, #8
 80063b8:	af00      	add	r7, sp, #0
	uint8_t dat[] = {READ_UID, W25QXX_DUMMY_BYTE, W25QXX_DUMMY_BYTE, W25QXX_DUMMY_BYTE, W25QXX_DUMMY_BYTE};
 80063ba:	4a18      	ldr	r2, [pc, #96]	; (800641c <W25qxx_ReadUniqID+0x68>)
 80063bc:	463b      	mov	r3, r7
 80063be:	e892 0003 	ldmia.w	r2, {r0, r1}
 80063c2:	6018      	str	r0, [r3, #0]
 80063c4:	3304      	adds	r3, #4
 80063c6:	7019      	strb	r1, [r3, #0]
    W25_SELECT();
 80063c8:	f7ff ff7c 	bl	80062c4 <W25_SELECT>

    //W25qxx_Spi(READ_UID);
    //for (uint8_t i = 0; i < 4; i++) W25qxx_Spi(W25QXX_DUMMY_BYTE);
    //for (uint8_t i = 0; i < 8; i++) w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
    if (HAL_SPI_Transmit(portFLASH, dat, sizeof(dat), min_wait_ms) != HAL_OK) devError |= devSPI;
 80063cc:	4b14      	ldr	r3, [pc, #80]	; (8006420 <W25qxx_ReadUniqID+0x6c>)
 80063ce:	6818      	ldr	r0, [r3, #0]
 80063d0:	23fa      	movs	r3, #250	; 0xfa
 80063d2:	4639      	mov	r1, r7
 80063d4:	2205      	movs	r2, #5
 80063d6:	f004 ff90 	bl	800b2fa <HAL_SPI_Transmit>
 80063da:	4603      	mov	r3, r0
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d006      	beq.n	80063ee <W25qxx_ReadUniqID+0x3a>
 80063e0:	4b10      	ldr	r3, [pc, #64]	; (8006424 <W25qxx_ReadUniqID+0x70>)
 80063e2:	881b      	ldrh	r3, [r3, #0]
 80063e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063e8:	b29a      	uxth	r2, r3
 80063ea:	4b0e      	ldr	r3, [pc, #56]	; (8006424 <W25qxx_ReadUniqID+0x70>)
 80063ec:	801a      	strh	r2, [r3, #0]
    if (HAL_SPI_Receive(portFLASH, w25qxx.UniqID, 8, min_wait_ms) != HAL_OK) devError |= devSPI;
 80063ee:	4b0c      	ldr	r3, [pc, #48]	; (8006420 <W25qxx_ReadUniqID+0x6c>)
 80063f0:	6818      	ldr	r0, [r3, #0]
 80063f2:	23fa      	movs	r3, #250	; 0xfa
 80063f4:	2208      	movs	r2, #8
 80063f6:	490c      	ldr	r1, [pc, #48]	; (8006428 <W25qxx_ReadUniqID+0x74>)
 80063f8:	f005 f8ed 	bl	800b5d6 <HAL_SPI_Receive>
 80063fc:	4603      	mov	r3, r0
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d006      	beq.n	8006410 <W25qxx_ReadUniqID+0x5c>
 8006402:	4b08      	ldr	r3, [pc, #32]	; (8006424 <W25qxx_ReadUniqID+0x70>)
 8006404:	881b      	ldrh	r3, [r3, #0]
 8006406:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800640a:	b29a      	uxth	r2, r3
 800640c:	4b05      	ldr	r3, [pc, #20]	; (8006424 <W25qxx_ReadUniqID+0x70>)
 800640e:	801a      	strh	r2, [r3, #0]

    W25_UNSELECT();
 8006410:	f7ff ff64 	bl	80062dc <W25_UNSELECT>
}
 8006414:	bf00      	nop
 8006416:	3708      	adds	r7, #8
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}
 800641c:	08013bbc 	.word	0x08013bbc
 8006420:	2000000c 	.word	0x2000000c
 8006424:	2000194c 	.word	0x2000194c
 8006428:	200035a5 	.word	0x200035a5

0800642c <W25qxx_WriteEnable>:
//------------------------------------------------------------------------------------------
void W25qxx_WriteEnable(void)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	af00      	add	r7, sp, #0
    W25_SELECT();
 8006430:	f7ff ff48 	bl	80062c4 <W25_SELECT>

    W25qxx_Spi(WRITE_ENABLE);
 8006434:	2006      	movs	r0, #6
 8006436:	f7ff ff5d 	bl	80062f4 <W25qxx_Spi>

    W25_UNSELECT();
 800643a:	f7ff ff4f 	bl	80062dc <W25_UNSELECT>

    W25qxx_Delay(1);
 800643e:	2001      	movs	r0, #1
 8006440:	f000 fd50 	bl	8006ee4 <HAL_Delay>
}
 8006444:	bf00      	nop
 8006446:	bd80      	pop	{r7, pc}

08006448 <W25qxx_ReadStatusRegister>:

    W25qxx_Delay(1);
}
//------------------------------------------------------------------------------------------
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusReg)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b084      	sub	sp, #16
 800644c:	af00      	add	r7, sp, #0
 800644e:	4603      	mov	r3, r0
 8006450:	71fb      	strb	r3, [r7, #7]
uint8_t status = 0;
 8006452:	2300      	movs	r3, #0
 8006454:	73fb      	strb	r3, [r7, #15]

    W25_SELECT();
 8006456:	f7ff ff35 	bl	80062c4 <W25_SELECT>

    switch (SelectStatusReg) {
 800645a:	79fb      	ldrb	r3, [r7, #7]
 800645c:	2b01      	cmp	r3, #1
 800645e:	d002      	beq.n	8006466 <W25qxx_ReadStatusRegister+0x1e>
 8006460:	2b02      	cmp	r3, #2
 8006462:	d00d      	beq.n	8006480 <W25qxx_ReadStatusRegister+0x38>
 8006464:	e019      	b.n	800649a <W25qxx_ReadStatusRegister+0x52>
        case 1:
            W25qxx_Spi(READ_STAT_REG1);
 8006466:	2005      	movs	r0, #5
 8006468:	f7ff ff44 	bl	80062f4 <W25qxx_Spi>
            status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800646c:	20a5      	movs	r0, #165	; 0xa5
 800646e:	f7ff ff41 	bl	80062f4 <W25qxx_Spi>
 8006472:	4603      	mov	r3, r0
 8006474:	73fb      	strb	r3, [r7, #15]
            w25qxx.StatusRegister1 = status;
 8006476:	4a12      	ldr	r2, [pc, #72]	; (80064c0 <W25qxx_ReadStatusRegister+0x78>)
 8006478:	7bfb      	ldrb	r3, [r7, #15]
 800647a:	f882 3023 	strb.w	r3, [r2, #35]	; 0x23
        break;
 800647e:	e018      	b.n	80064b2 <W25qxx_ReadStatusRegister+0x6a>
        case 2:
            W25qxx_Spi(READ_STAT_REG2);
 8006480:	2035      	movs	r0, #53	; 0x35
 8006482:	f7ff ff37 	bl	80062f4 <W25qxx_Spi>
            status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8006486:	20a5      	movs	r0, #165	; 0xa5
 8006488:	f7ff ff34 	bl	80062f4 <W25qxx_Spi>
 800648c:	4603      	mov	r3, r0
 800648e:	73fb      	strb	r3, [r7, #15]
            w25qxx.StatusRegister2 = status;
 8006490:	4a0b      	ldr	r2, [pc, #44]	; (80064c0 <W25qxx_ReadStatusRegister+0x78>)
 8006492:	7bfb      	ldrb	r3, [r7, #15]
 8006494:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
        break;
 8006498:	e00b      	b.n	80064b2 <W25qxx_ReadStatusRegister+0x6a>
        default : {
            W25qxx_Spi(READ_STAT_REG3);
 800649a:	2015      	movs	r0, #21
 800649c:	f7ff ff2a 	bl	80062f4 <W25qxx_Spi>
            status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80064a0:	20a5      	movs	r0, #165	; 0xa5
 80064a2:	f7ff ff27 	bl	80062f4 <W25qxx_Spi>
 80064a6:	4603      	mov	r3, r0
 80064a8:	73fb      	strb	r3, [r7, #15]
            w25qxx.StatusRegister3 = status;
 80064aa:	4a05      	ldr	r2, [pc, #20]	; (80064c0 <W25qxx_ReadStatusRegister+0x78>)
 80064ac:	7bfb      	ldrb	r3, [r7, #15]
 80064ae:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
        }
    }

    W25_UNSELECT();
 80064b2:	f7ff ff13 	bl	80062dc <W25_UNSELECT>

    return status;
 80064b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	3710      	adds	r7, #16
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}
 80064c0:	200035a4 	.word	0x200035a4

080064c4 <W25qxx_WaitForWriteEnd>:

    W25_UNSELECT();
}
//------------------------------------------------------------------------------------------
void W25qxx_WaitForWriteEnd(void)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	af00      	add	r7, sp, #0
    W25qxx_Delay(1);
 80064c8:	2001      	movs	r0, #1
 80064ca:	f000 fd0b 	bl	8006ee4 <HAL_Delay>

    W25_SELECT();
 80064ce:	f7ff fef9 	bl	80062c4 <W25_SELECT>

    W25qxx_Spi(READ_STAT_REG1);
 80064d2:	2005      	movs	r0, #5
 80064d4:	f7ff ff0e 	bl	80062f4 <W25qxx_Spi>
    do
    {
        w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80064d8:	20a5      	movs	r0, #165	; 0xa5
 80064da:	f7ff ff0b 	bl	80062f4 <W25qxx_Spi>
 80064de:	4603      	mov	r3, r0
 80064e0:	461a      	mov	r2, r3
 80064e2:	4b08      	ldr	r3, [pc, #32]	; (8006504 <W25qxx_WaitForWriteEnd+0x40>)
 80064e4:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
        W25qxx_Delay(1);
 80064e8:	2001      	movs	r0, #1
 80064ea:	f000 fcfb 	bl	8006ee4 <HAL_Delay>
    } while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 80064ee:	4b05      	ldr	r3, [pc, #20]	; (8006504 <W25qxx_WaitForWriteEnd+0x40>)
 80064f0:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80064f4:	f003 0301 	and.w	r3, r3, #1
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d1ed      	bne.n	80064d8 <W25qxx_WaitForWriteEnd+0x14>

    W25_UNSELECT();
 80064fc:	f7ff feee 	bl	80062dc <W25_UNSELECT>
}
 8006500:	bf00      	nop
 8006502:	bd80      	pop	{r7, pc}
 8006504:	200035a4 	.word	0x200035a4

08006508 <W25qxx_Init>:
//------------------------------------------------------------------------------------------
bool W25qxx_Init(void)
{
 8006508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800650a:	b089      	sub	sp, #36	; 0x24
 800650c:	af06      	add	r7, sp, #24

	W25qxx_Reset();
 800650e:	f7ff ff13 	bl	8006338 <W25qxx_Reset>


    w25qxx.Lock = 1;
 8006512:	4b54      	ldr	r3, [pc, #336]	; (8006664 <W25qxx_Init+0x15c>)
 8006514:	2201      	movs	r2, #1
 8006516:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    bool ret = false;
 800651a:	2300      	movs	r3, #0
 800651c:	71fb      	strb	r3, [r7, #7]

    W25_UNSELECT();
 800651e:	f7ff fedd 	bl	80062dc <W25_UNSELECT>

    uint32_t id = W25qxx_ReadID() & 0xffff;
 8006522:	f7ff ff1d 	bl	8006360 <W25qxx_ReadID>
 8006526:	4603      	mov	r3, r0
 8006528:	b29b      	uxth	r3, r3
 800652a:	603b      	str	r3, [r7, #0]
//#ifdef W25QXX_DEBUG
    Report(1, "w25qxx Init Begin... Chip ID:0x%X\r\n", id);
 800652c:	683a      	ldr	r2, [r7, #0]
 800652e:	494e      	ldr	r1, [pc, #312]	; (8006668 <W25qxx_Init+0x160>)
 8006530:	2001      	movs	r0, #1
 8006532:	f7fe f823 	bl	800457c <Report>
//#endif
    id &= 0xff;
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	b2db      	uxtb	r3, r3
 800653a:	603b      	str	r3, [r7, #0]
    id -= 0x10;//0x4010;
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	3b10      	subs	r3, #16
 8006540:	603b      	str	r3, [r7, #0]
    if (id > 0x0a) id = 0;
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	2b0a      	cmp	r3, #10
 8006546:	d901      	bls.n	800654c <W25qxx_Init+0x44>
 8006548:	2300      	movs	r3, #0
 800654a:	603b      	str	r3, [r7, #0]
    w25qxx.ID         = id;              //W25Q10..W25Q512
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	b2da      	uxtb	r2, r3
 8006550:	4b44      	ldr	r3, [pc, #272]	; (8006664 <W25qxx_Init+0x15c>)
 8006552:	701a      	strb	r2, [r3, #0]
    w25qxx.BlockCount = all_chipBLK[id]; //0..1024;
 8006554:	4a45      	ldr	r2, [pc, #276]	; (800666c <W25qxx_Init+0x164>)
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800655c:	4a41      	ldr	r2, [pc, #260]	; (8006664 <W25qxx_Init+0x15c>)
 800655e:	f8c2 301b 	str.w	r3, [r2, #27]
//#ifdef W25QXX_DEBUG
    Report(1, "Chip %s\r\n", all_chipID[id]);
 8006562:	4a43      	ldr	r2, [pc, #268]	; (8006670 <W25qxx_Init+0x168>)
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800656a:	461a      	mov	r2, r3
 800656c:	4941      	ldr	r1, [pc, #260]	; (8006674 <W25qxx_Init+0x16c>)
 800656e:	2001      	movs	r0, #1
 8006570:	f7fe f804 	bl	800457c <Report>
//#endif

    if (id) {
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d06b      	beq.n	8006652 <W25qxx_Init+0x14a>
    	w25qxx.PageSize = 256;
 800657a:	4b3a      	ldr	r3, [pc, #232]	; (8006664 <W25qxx_Init+0x15c>)
 800657c:	2200      	movs	r2, #0
 800657e:	725a      	strb	r2, [r3, #9]
 8006580:	2200      	movs	r2, #0
 8006582:	f042 0201 	orr.w	r2, r2, #1
 8006586:	729a      	strb	r2, [r3, #10]
    	w25qxx.SectorSize = 0x1000;
 8006588:	4b36      	ldr	r3, [pc, #216]	; (8006664 <W25qxx_Init+0x15c>)
 800658a:	2200      	movs	r2, #0
 800658c:	73da      	strb	r2, [r3, #15]
 800658e:	2200      	movs	r2, #0
 8006590:	f042 0210 	orr.w	r2, r2, #16
 8006594:	741a      	strb	r2, [r3, #16]
 8006596:	2200      	movs	r2, #0
 8006598:	745a      	strb	r2, [r3, #17]
 800659a:	2200      	movs	r2, #0
 800659c:	749a      	strb	r2, [r3, #18]
    	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 800659e:	4b31      	ldr	r3, [pc, #196]	; (8006664 <W25qxx_Init+0x15c>)
 80065a0:	f8d3 301b 	ldr.w	r3, [r3, #27]
 80065a4:	011b      	lsls	r3, r3, #4
 80065a6:	4a2f      	ldr	r2, [pc, #188]	; (8006664 <W25qxx_Init+0x15c>)
 80065a8:	f8c2 3013 	str.w	r3, [r2, #19]
    	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 80065ac:	4b2d      	ldr	r3, [pc, #180]	; (8006664 <W25qxx_Init+0x15c>)
 80065ae:	f8d3 3013 	ldr.w	r3, [r3, #19]
 80065b2:	4a2c      	ldr	r2, [pc, #176]	; (8006664 <W25qxx_Init+0x15c>)
 80065b4:	f8d2 200f 	ldr.w	r2, [r2, #15]
 80065b8:	fb02 f303 	mul.w	r3, r2, r3
 80065bc:	4a29      	ldr	r2, [pc, #164]	; (8006664 <W25qxx_Init+0x15c>)
 80065be:	f8b2 2009 	ldrh.w	r2, [r2, #9]
 80065c2:	b292      	uxth	r2, r2
 80065c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80065c8:	4a26      	ldr	r2, [pc, #152]	; (8006664 <W25qxx_Init+0x15c>)
 80065ca:	f8c2 300b 	str.w	r3, [r2, #11]
    	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 80065ce:	4b25      	ldr	r3, [pc, #148]	; (8006664 <W25qxx_Init+0x15c>)
 80065d0:	f8d3 300f 	ldr.w	r3, [r3, #15]
 80065d4:	011b      	lsls	r3, r3, #4
 80065d6:	4a23      	ldr	r2, [pc, #140]	; (8006664 <W25qxx_Init+0x15c>)
 80065d8:	f8c2 3017 	str.w	r3, [r2, #23]
    	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 80065dc:	4b21      	ldr	r3, [pc, #132]	; (8006664 <W25qxx_Init+0x15c>)
 80065de:	f8d3 3013 	ldr.w	r3, [r3, #19]
 80065e2:	4a20      	ldr	r2, [pc, #128]	; (8006664 <W25qxx_Init+0x15c>)
 80065e4:	f8d2 200f 	ldr.w	r2, [r2, #15]
 80065e8:	fb02 f303 	mul.w	r3, r2, r3
 80065ec:	0a9b      	lsrs	r3, r3, #10
 80065ee:	4a1d      	ldr	r2, [pc, #116]	; (8006664 <W25qxx_Init+0x15c>)
 80065f0:	f8c2 301f 	str.w	r3, [r2, #31]
    	W25qxx_ReadUniqID();
 80065f4:	f7ff fede 	bl	80063b4 <W25qxx_ReadUniqID>
    	W25qxx_ReadStatusRegister(1);
 80065f8:	2001      	movs	r0, #1
 80065fa:	f7ff ff25 	bl	8006448 <W25qxx_ReadStatusRegister>
    	W25qxx_ReadStatusRegister(2);
 80065fe:	2002      	movs	r0, #2
 8006600:	f7ff ff22 	bl	8006448 <W25qxx_ReadStatusRegister>
    	W25qxx_ReadStatusRegister(3);
 8006604:	2003      	movs	r0, #3
 8006606:	f7ff ff1f 	bl	8006448 <W25qxx_ReadStatusRegister>
    	ret = true;
 800660a:	2301      	movs	r3, #1
 800660c:	71fb      	strb	r3, [r7, #7]
                 "\tSector Size:\t%u bytes\r\n"
                 "\tSector Count:\t%u\r\n"
                 "\tBlock Size:\t%u bytes\r\n"
                 "\tBlock Count:\t%u\r\n"
                 "\tCapacity:\t%u KBytes\r\n",
                 w25qxx.PageSize,
 800660e:	4b15      	ldr	r3, [pc, #84]	; (8006664 <W25qxx_Init+0x15c>)
 8006610:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8006614:	b29b      	uxth	r3, r3
    	Report(0,"\tPage Size:\t%u bytes\r\n"
 8006616:	461e      	mov	r6, r3
 8006618:	4b12      	ldr	r3, [pc, #72]	; (8006664 <W25qxx_Init+0x15c>)
 800661a:	f8d3 500b 	ldr.w	r5, [r3, #11]
 800661e:	4b11      	ldr	r3, [pc, #68]	; (8006664 <W25qxx_Init+0x15c>)
 8006620:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8006624:	4a0f      	ldr	r2, [pc, #60]	; (8006664 <W25qxx_Init+0x15c>)
 8006626:	f8d2 2013 	ldr.w	r2, [r2, #19]
 800662a:	490e      	ldr	r1, [pc, #56]	; (8006664 <W25qxx_Init+0x15c>)
 800662c:	f8d1 1017 	ldr.w	r1, [r1, #23]
 8006630:	480c      	ldr	r0, [pc, #48]	; (8006664 <W25qxx_Init+0x15c>)
 8006632:	f8d0 001b 	ldr.w	r0, [r0, #27]
 8006636:	4c0b      	ldr	r4, [pc, #44]	; (8006664 <W25qxx_Init+0x15c>)
 8006638:	f8d4 401f 	ldr.w	r4, [r4, #31]
 800663c:	9404      	str	r4, [sp, #16]
 800663e:	9003      	str	r0, [sp, #12]
 8006640:	9102      	str	r1, [sp, #8]
 8006642:	9201      	str	r2, [sp, #4]
 8006644:	9300      	str	r3, [sp, #0]
 8006646:	462b      	mov	r3, r5
 8006648:	4632      	mov	r2, r6
 800664a:	490b      	ldr	r1, [pc, #44]	; (8006678 <W25qxx_Init+0x170>)
 800664c:	2000      	movs	r0, #0
 800664e:	f7fd ff95 	bl	800457c <Report>
                 w25qxx.BlockCount,
                 w25qxx.CapacityInKiloByte);
//#endif
    }

    w25qxx.Lock = 0;
 8006652:	4b04      	ldr	r3, [pc, #16]	; (8006664 <W25qxx_Init+0x15c>)
 8006654:	2200      	movs	r2, #0
 8006656:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

    return ret;
 800665a:	79fb      	ldrb	r3, [r7, #7]
}
 800665c:	4618      	mov	r0, r3
 800665e:	370c      	adds	r7, #12
 8006660:	46bd      	mov	sp, r7
 8006662:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006664:	200035a4 	.word	0x200035a4
 8006668:	08013bc4 	.word	0x08013bc4
 800666c:	08014b0c 	.word	0x08014b0c
 8006670:	20000218 	.word	0x20000218
 8006674:	08013be8 	.word	0x08013be8
 8006678:	08013bf4 	.word	0x08013bf4

0800667c <W25qxx_getChipID>:
//------------------------------------------------------------------------------------------
uint32_t W25qxx_getChipID()
{
 800667c:	b480      	push	{r7}
 800667e:	af00      	add	r7, sp, #0
	return (uint32_t)w25qxx.ID;
 8006680:	4b03      	ldr	r3, [pc, #12]	; (8006690 <W25qxx_getChipID+0x14>)
 8006682:	781b      	ldrb	r3, [r3, #0]
}
 8006684:	4618      	mov	r0, r3
 8006686:	46bd      	mov	sp, r7
 8006688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668c:	4770      	bx	lr
 800668e:	bf00      	nop
 8006690:	200035a4 	.word	0x200035a4

08006694 <W25qxx_getSectorCount>:
uint32_t W25qxx_getSectorCount()
{
 8006694:	b480      	push	{r7}
 8006696:	af00      	add	r7, sp, #0
	return w25qxx.SectorCount;
 8006698:	4b03      	ldr	r3, [pc, #12]	; (80066a8 <W25qxx_getSectorCount+0x14>)
 800669a:	f8d3 3013 	ldr.w	r3, [r3, #19]
}
 800669e:	4618      	mov	r0, r3
 80066a0:	46bd      	mov	sp, r7
 80066a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a6:	4770      	bx	lr
 80066a8:	200035a4 	.word	0x200035a4

080066ac <W25qxx_getSectorSize>:
uint32_t W25qxx_getSectorSize()
{
 80066ac:	b480      	push	{r7}
 80066ae:	af00      	add	r7, sp, #0
	return w25qxx.SectorSize;
 80066b0:	4b03      	ldr	r3, [pc, #12]	; (80066c0 <W25qxx_getSectorSize+0x14>)
 80066b2:	f8d3 300f 	ldr.w	r3, [r3, #15]
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	46bd      	mov	sp, r7
 80066ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066be:	4770      	bx	lr
 80066c0:	200035a4 	.word	0x200035a4

080066c4 <W25qxx_getPageSize>:
uint32_t W25qxx_getPageCount()
{
	return w25qxx.PageCount;
}
uint32_t W25qxx_getPageSize()
{
 80066c4:	b480      	push	{r7}
 80066c6:	af00      	add	r7, sp, #0
	return w25qxx.PageSize;
 80066c8:	4b04      	ldr	r3, [pc, #16]	; (80066dc <W25qxx_getPageSize+0x18>)
 80066ca:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 80066ce:	b29b      	uxth	r3, r3
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	46bd      	mov	sp, r7
 80066d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d8:	4770      	bx	lr
 80066da:	bf00      	nop
 80066dc:	200035a4 	.word	0x200035a4

080066e0 <W25qxx_EraseSector>:

    w25qxx.Lock = 0;
}
//------------------------------------------------------------------------------------------
void W25qxx_EraseSector(uint32_t SectorAddr)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b082      	sub	sp, #8
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
    while (w25qxx.Lock) W25qxx_Delay(1);
 80066e8:	e002      	b.n	80066f0 <W25qxx_EraseSector+0x10>
 80066ea:	2001      	movs	r0, #1
 80066ec:	f000 fbfa 	bl	8006ee4 <HAL_Delay>
 80066f0:	4b1c      	ldr	r3, [pc, #112]	; (8006764 <W25qxx_EraseSector+0x84>)
 80066f2:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d1f7      	bne.n	80066ea <W25qxx_EraseSector+0xa>

    w25qxx.Lock = 1;
 80066fa:	4b1a      	ldr	r3, [pc, #104]	; (8006764 <W25qxx_EraseSector+0x84>)
 80066fc:	2201      	movs	r2, #1
 80066fe:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
#ifdef W25QXX_DEBUG
    uint32_t StartTime = HAL_GetTick();
    Report(1, "%u Begin...", SectorAddr);
#endif

    W25qxx_WaitForWriteEnd();
 8006702:	f7ff fedf 	bl	80064c4 <W25qxx_WaitForWriteEnd>
    SectorAddr = SectorAddr * w25qxx.SectorSize;
 8006706:	4b17      	ldr	r3, [pc, #92]	; (8006764 <W25qxx_EraseSector+0x84>)
 8006708:	f8d3 200f 	ldr.w	r2, [r3, #15]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	fb02 f303 	mul.w	r3, r2, r3
 8006712:	607b      	str	r3, [r7, #4]
    W25qxx_WriteEnable();
 8006714:	f7ff fe8a 	bl	800642c <W25qxx_WriteEnable>

    W25_SELECT();
 8006718:	f7ff fdd4 	bl	80062c4 <W25_SELECT>
    W25qxx_Spi(SECTOR_ERASE);
 800671c:	2020      	movs	r0, #32
 800671e:	f7ff fde9 	bl	80062f4 <W25qxx_Spi>
    //if (w25qxx.ID >= W25Q256) W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
    W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	0c1b      	lsrs	r3, r3, #16
 8006726:	b2db      	uxtb	r3, r3
 8006728:	4618      	mov	r0, r3
 800672a:	f7ff fde3 	bl	80062f4 <W25qxx_Spi>
    W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	0a1b      	lsrs	r3, r3, #8
 8006732:	b2db      	uxtb	r3, r3
 8006734:	4618      	mov	r0, r3
 8006736:	f7ff fddd 	bl	80062f4 <W25qxx_Spi>
    W25qxx_Spi(SectorAddr & 0xFF);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	b2db      	uxtb	r3, r3
 800673e:	4618      	mov	r0, r3
 8006740:	f7ff fdd8 	bl	80062f4 <W25qxx_Spi>
    W25_UNSELECT();
 8006744:	f7ff fdca 	bl	80062dc <W25_UNSELECT>

    W25qxx_WaitForWriteEnd();
 8006748:	f7ff febc 	bl	80064c4 <W25qxx_WaitForWriteEnd>

#ifdef W25QXX_DEBUG
    uint32_t dur = HAL_GetTick() - StartTime;
    Report(0, " done after %u ms (%u sec)!\r\n", dur, dur / 1000);
#endif
    W25qxx_Delay(1);
 800674c:	2001      	movs	r0, #1
 800674e:	f000 fbc9 	bl	8006ee4 <HAL_Delay>

    w25qxx.Lock = 0;
 8006752:	4b04      	ldr	r3, [pc, #16]	; (8006764 <W25qxx_EraseSector+0x84>)
 8006754:	2200      	movs	r2, #0
 8006756:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 800675a:	bf00      	nop
 800675c:	3708      	adds	r7, #8
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}
 8006762:	bf00      	nop
 8006764:	200035a4 	.word	0x200035a4

08006768 <W25qxx_SectorToPage>:
{
    return ((SectorAddress * w25qxx.SectorSize) / w25qxx.BlockSize);
}
//------------------------------------------------------------------------------------------
uint32_t W25qxx_SectorToPage(uint32_t SectorAddress)
{
 8006768:	b480      	push	{r7}
 800676a:	b083      	sub	sp, #12
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
    return (SectorAddress * w25qxx.SectorSize) / w25qxx.PageSize;
 8006770:	4b08      	ldr	r3, [pc, #32]	; (8006794 <W25qxx_SectorToPage+0x2c>)
 8006772:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8006776:	687a      	ldr	r2, [r7, #4]
 8006778:	fb02 f303 	mul.w	r3, r2, r3
 800677c:	4a05      	ldr	r2, [pc, #20]	; (8006794 <W25qxx_SectorToPage+0x2c>)
 800677e:	f8b2 2009 	ldrh.w	r2, [r2, #9]
 8006782:	b292      	uxth	r2, r2
 8006784:	fbb3 f3f2 	udiv	r3, r3, r2
}
 8006788:	4618      	mov	r0, r3
 800678a:	370c      	adds	r7, #12
 800678c:	46bd      	mov	sp, r7
 800678e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006792:	4770      	bx	lr
 8006794:	200035a4 	.word	0x200035a4

08006798 <W25qxx_IsEmptySector>:

    return false;
}
//------------------------------------------------------------------------------------------
bool W25qxx_IsEmptySector(uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToCheck_up_to_SectorSize)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b090      	sub	sp, #64	; 0x40
 800679c:	af00      	add	r7, sp, #0
 800679e:	60f8      	str	r0, [r7, #12]
 80067a0:	60b9      	str	r1, [r7, #8]
 80067a2:	607a      	str	r2, [r7, #4]
    while (w25qxx.Lock) W25qxx_Delay(1);
 80067a4:	e002      	b.n	80067ac <W25qxx_IsEmptySector+0x14>
 80067a6:	2001      	movs	r0, #1
 80067a8:	f000 fb9c 	bl	8006ee4 <HAL_Delay>
 80067ac:	4b59      	ldr	r3, [pc, #356]	; (8006914 <W25qxx_IsEmptySector+0x17c>)
 80067ae:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d1f7      	bne.n	80067a6 <W25qxx_IsEmptySector+0xe>

    w25qxx.Lock = 1;
 80067b6:	4b57      	ldr	r3, [pc, #348]	; (8006914 <W25qxx_IsEmptySector+0x17c>)
 80067b8:	2201      	movs	r2, #1
 80067ba:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

    if ( (NumByteToCheck_up_to_SectorSize > w25qxx.SectorSize) || (!NumByteToCheck_up_to_SectorSize) )
 80067be:	4b55      	ldr	r3, [pc, #340]	; (8006914 <W25qxx_IsEmptySector+0x17c>)
 80067c0:	f8d3 300f 	ldr.w	r3, [r3, #15]
 80067c4:	687a      	ldr	r2, [r7, #4]
 80067c6:	429a      	cmp	r2, r3
 80067c8:	d802      	bhi.n	80067d0 <W25qxx_IsEmptySector+0x38>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d103      	bne.n	80067d8 <W25qxx_IsEmptySector+0x40>
                NumByteToCheck_up_to_SectorSize = w25qxx.SectorSize;
 80067d0:	4b50      	ldr	r3, [pc, #320]	; (8006914 <W25qxx_IsEmptySector+0x17c>)
 80067d2:	f8d3 300f 	ldr.w	r3, [r3, #15]
 80067d6:	607b      	str	r3, [r7, #4]
    uint32_t StartTime = HAL_GetTick();
#endif

    uint8_t pBuffer[32];
    uint32_t i, WorkAddress;
    for ( i = OffsetInByte; i < w25qxx.SectorSize; i += sizeof(pBuffer)) {
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067dc:	e040      	b.n	8006860 <W25qxx_IsEmptySector+0xc8>

    	W25_SELECT();
 80067de:	f7ff fd71 	bl	80062c4 <W25_SELECT>
        WorkAddress = (i + Sector_Address * w25qxx.SectorSize);
 80067e2:	4b4c      	ldr	r3, [pc, #304]	; (8006914 <W25qxx_IsEmptySector+0x17c>)
 80067e4:	f8d3 300f 	ldr.w	r3, [r3, #15]
 80067e8:	68fa      	ldr	r2, [r7, #12]
 80067ea:	fb02 f303 	mul.w	r3, r2, r3
 80067ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80067f0:	4413      	add	r3, r2
 80067f2:	637b      	str	r3, [r7, #52]	; 0x34
        W25qxx_Spi(DATA_READ);//FAST_READ);
 80067f4:	2003      	movs	r0, #3
 80067f6:	f7ff fd7d 	bl	80062f4 <W25qxx_Spi>
        //if (w25qxx.ID >= W25Q256) W25qxx_Spi((WorkAddress & 0xFF000000) >> 24);
        W25qxx_Spi((WorkAddress & 0xFF0000) >> 16);
 80067fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067fc:	0c1b      	lsrs	r3, r3, #16
 80067fe:	b2db      	uxtb	r3, r3
 8006800:	4618      	mov	r0, r3
 8006802:	f7ff fd77 	bl	80062f4 <W25qxx_Spi>
        W25qxx_Spi((WorkAddress & 0xFF00) >> 8);
 8006806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006808:	0a1b      	lsrs	r3, r3, #8
 800680a:	b2db      	uxtb	r3, r3
 800680c:	4618      	mov	r0, r3
 800680e:	f7ff fd71 	bl	80062f4 <W25qxx_Spi>
        W25qxx_Spi(WorkAddress & 0xFF);
 8006812:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006814:	b2db      	uxtb	r3, r3
 8006816:	4618      	mov	r0, r3
 8006818:	f7ff fd6c 	bl	80062f4 <W25qxx_Spi>
        //W25qxx_Spi(0);
        HAL_SPI_Receive(portFLASH, pBuffer, sizeof(pBuffer), min_wait_ms);
 800681c:	4b3e      	ldr	r3, [pc, #248]	; (8006918 <W25qxx_IsEmptySector+0x180>)
 800681e:	6818      	ldr	r0, [r3, #0]
 8006820:	23fa      	movs	r3, #250	; 0xfa
 8006822:	f107 0114 	add.w	r1, r7, #20
 8006826:	2220      	movs	r2, #32
 8006828:	f004 fed5 	bl	800b5d6 <HAL_SPI_Receive>
        W25_UNSELECT();
 800682c:	f7ff fd56 	bl	80062dc <W25_UNSELECT>

        for (uint8_t x = 0; x < sizeof(pBuffer); x++) {
 8006830:	2300      	movs	r3, #0
 8006832:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006836:	e00c      	b.n	8006852 <W25qxx_IsEmptySector+0xba>
            if (pBuffer[x] != 0xFF) goto NOT_EMPTY;
 8006838:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800683c:	3340      	adds	r3, #64	; 0x40
 800683e:	443b      	add	r3, r7
 8006840:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8006844:	2bff      	cmp	r3, #255	; 0xff
 8006846:	d159      	bne.n	80068fc <W25qxx_IsEmptySector+0x164>
        for (uint8_t x = 0; x < sizeof(pBuffer); x++) {
 8006848:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800684c:	3301      	adds	r3, #1
 800684e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006852:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006856:	2b1f      	cmp	r3, #31
 8006858:	d9ee      	bls.n	8006838 <W25qxx_IsEmptySector+0xa0>
    for ( i = OffsetInByte; i < w25qxx.SectorSize; i += sizeof(pBuffer)) {
 800685a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800685c:	3320      	adds	r3, #32
 800685e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006860:	4b2c      	ldr	r3, [pc, #176]	; (8006914 <W25qxx_IsEmptySector+0x17c>)
 8006862:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8006866:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006868:	429a      	cmp	r2, r3
 800686a:	d3b8      	bcc.n	80067de <W25qxx_IsEmptySector+0x46>
        }
    }
    if ((w25qxx.SectorSize + OffsetInByte) % sizeof(pBuffer) != 0) {
 800686c:	4b29      	ldr	r3, [pc, #164]	; (8006914 <W25qxx_IsEmptySector+0x17c>)
 800686e:	f8d3 200f 	ldr.w	r2, [r3, #15]
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	4413      	add	r3, r2
 8006876:	f003 031f 	and.w	r3, r3, #31
 800687a:	2b00      	cmp	r3, #0
 800687c:	d038      	beq.n	80068f0 <W25qxx_IsEmptySector+0x158>
        i -= sizeof(pBuffer);
 800687e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006880:	3b20      	subs	r3, #32
 8006882:	63fb      	str	r3, [r7, #60]	; 0x3c
        for( ; i < w25qxx.SectorSize; i++) {
 8006884:	e02e      	b.n	80068e4 <W25qxx_IsEmptySector+0x14c>

            W25_SELECT();
 8006886:	f7ff fd1d 	bl	80062c4 <W25_SELECT>
            WorkAddress = (i + Sector_Address * w25qxx.SectorSize);
 800688a:	4b22      	ldr	r3, [pc, #136]	; (8006914 <W25qxx_IsEmptySector+0x17c>)
 800688c:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8006890:	68fa      	ldr	r2, [r7, #12]
 8006892:	fb02 f303 	mul.w	r3, r2, r3
 8006896:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006898:	4413      	add	r3, r2
 800689a:	637b      	str	r3, [r7, #52]	; 0x34
            W25qxx_Spi(DATA_READ);//FAST_READ);
 800689c:	2003      	movs	r0, #3
 800689e:	f7ff fd29 	bl	80062f4 <W25qxx_Spi>
            //if (w25qxx.ID >= W25Q256) W25qxx_Spi((WorkAddress & 0xFF000000) >> 24);
            W25qxx_Spi((WorkAddress & 0xFF0000) >> 16);
 80068a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068a4:	0c1b      	lsrs	r3, r3, #16
 80068a6:	b2db      	uxtb	r3, r3
 80068a8:	4618      	mov	r0, r3
 80068aa:	f7ff fd23 	bl	80062f4 <W25qxx_Spi>
            W25qxx_Spi((WorkAddress & 0xFF00) >> 8);
 80068ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068b0:	0a1b      	lsrs	r3, r3, #8
 80068b2:	b2db      	uxtb	r3, r3
 80068b4:	4618      	mov	r0, r3
 80068b6:	f7ff fd1d 	bl	80062f4 <W25qxx_Spi>
            W25qxx_Spi(WorkAddress & 0xFF);
 80068ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068bc:	b2db      	uxtb	r3, r3
 80068be:	4618      	mov	r0, r3
 80068c0:	f7ff fd18 	bl	80062f4 <W25qxx_Spi>
            //W25qxx_Spi(0);
            HAL_SPI_Receive(portFLASH, pBuffer, 1, min_wait_ms);
 80068c4:	4b14      	ldr	r3, [pc, #80]	; (8006918 <W25qxx_IsEmptySector+0x180>)
 80068c6:	6818      	ldr	r0, [r3, #0]
 80068c8:	23fa      	movs	r3, #250	; 0xfa
 80068ca:	f107 0114 	add.w	r1, r7, #20
 80068ce:	2201      	movs	r2, #1
 80068d0:	f004 fe81 	bl	800b5d6 <HAL_SPI_Receive>
            W25_UNSELECT();
 80068d4:	f7ff fd02 	bl	80062dc <W25_UNSELECT>

            if (pBuffer[0] != 0xFF) goto NOT_EMPTY;
 80068d8:	7d3b      	ldrb	r3, [r7, #20]
 80068da:	2bff      	cmp	r3, #255	; 0xff
 80068dc:	d110      	bne.n	8006900 <W25qxx_IsEmptySector+0x168>
        for( ; i < w25qxx.SectorSize; i++) {
 80068de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068e0:	3301      	adds	r3, #1
 80068e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068e4:	4b0b      	ldr	r3, [pc, #44]	; (8006914 <W25qxx_IsEmptySector+0x17c>)
 80068e6:	f8d3 300f 	ldr.w	r3, [r3, #15]
 80068ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80068ec:	429a      	cmp	r2, r3
 80068ee:	d3ca      	bcc.n	8006886 <W25qxx_IsEmptySector+0xee>
#ifdef W25QXX_DEBUG
    Report(1, "w25qxx CheckSector is Empty in %u ms\r\n", HAL_GetTick() - StartTime);
    //W25qxx_Delay(100);
#endif

    w25qxx.Lock = 0;
 80068f0:	4b08      	ldr	r3, [pc, #32]	; (8006914 <W25qxx_IsEmptySector+0x17c>)
 80068f2:	2200      	movs	r2, #0
 80068f4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

    return true;
 80068f8:	2301      	movs	r3, #1
 80068fa:	e007      	b.n	800690c <W25qxx_IsEmptySector+0x174>
            if (pBuffer[x] != 0xFF) goto NOT_EMPTY;
 80068fc:	bf00      	nop
 80068fe:	e000      	b.n	8006902 <W25qxx_IsEmptySector+0x16a>
            if (pBuffer[0] != 0xFF) goto NOT_EMPTY;
 8006900:	bf00      	nop
#ifdef W25QXX_DEBUG
    Report(1, "w25qxx CheckSector is Not Empty in %u ms\r\n", HAL_GetTick() - StartTime);
    //W25qxx_Delay(100);
#endif

    w25qxx.Lock = 0;
 8006902:	4b04      	ldr	r3, [pc, #16]	; (8006914 <W25qxx_IsEmptySector+0x17c>)
 8006904:	2200      	movs	r2, #0
 8006906:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

    return false;
 800690a:	2300      	movs	r3, #0
}
 800690c:	4618      	mov	r0, r3
 800690e:	3740      	adds	r7, #64	; 0x40
 8006910:	46bd      	mov	sp, r7
 8006912:	bd80      	pop	{r7, pc}
 8006914:	200035a4 	.word	0x200035a4
 8006918:	2000000c 	.word	0x2000000c

0800691c <W25qxx_WritePage>:

    w25qxx.Lock = 0;
}
//------------------------------------------------------------------------------------------
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b086      	sub	sp, #24
 8006920:	af00      	add	r7, sp, #0
 8006922:	60f8      	str	r0, [r7, #12]
 8006924:	60b9      	str	r1, [r7, #8]
 8006926:	607a      	str	r2, [r7, #4]
 8006928:	603b      	str	r3, [r7, #0]
    while (w25qxx.Lock) W25qxx_Delay(1);
 800692a:	e002      	b.n	8006932 <W25qxx_WritePage+0x16>
 800692c:	2001      	movs	r0, #1
 800692e:	f000 fad9 	bl	8006ee4 <HAL_Delay>
 8006932:	4b4d      	ldr	r3, [pc, #308]	; (8006a68 <W25qxx_WritePage+0x14c>)
 8006934:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8006938:	2b00      	cmp	r3, #0
 800693a:	d1f7      	bne.n	800692c <W25qxx_WritePage+0x10>

    w25qxx.Lock = 1;
 800693c:	4b4a      	ldr	r3, [pc, #296]	; (8006a68 <W25qxx_WritePage+0x14c>)
 800693e:	2201      	movs	r2, #1
 8006940:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

    if ( ((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || !NumByteToWrite_up_to_PageSize )
 8006944:	683a      	ldr	r2, [r7, #0]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	4413      	add	r3, r2
 800694a:	4a47      	ldr	r2, [pc, #284]	; (8006a68 <W25qxx_WritePage+0x14c>)
 800694c:	f8b2 2009 	ldrh.w	r2, [r2, #9]
 8006950:	b292      	uxth	r2, r2
 8006952:	4293      	cmp	r3, r2
 8006954:	d802      	bhi.n	800695c <W25qxx_WritePage+0x40>
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d107      	bne.n	800696c <W25qxx_WritePage+0x50>
                NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 800695c:	4b42      	ldr	r3, [pc, #264]	; (8006a68 <W25qxx_WritePage+0x14c>)
 800695e:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8006962:	b29b      	uxth	r3, r3
 8006964:	461a      	mov	r2, r3
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	1ad3      	subs	r3, r2, r3
 800696a:	603b      	str	r3, [r7, #0]
    if ( (OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize )
 800696c:	687a      	ldr	r2, [r7, #4]
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	4413      	add	r3, r2
 8006972:	4a3d      	ldr	r2, [pc, #244]	; (8006a68 <W25qxx_WritePage+0x14c>)
 8006974:	f8b2 2009 	ldrh.w	r2, [r2, #9]
 8006978:	b292      	uxth	r2, r2
 800697a:	4293      	cmp	r3, r2
 800697c:	d907      	bls.n	800698e <W25qxx_WritePage+0x72>
                NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 800697e:	4b3a      	ldr	r3, [pc, #232]	; (8006a68 <W25qxx_WritePage+0x14c>)
 8006980:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8006984:	b29b      	uxth	r3, r3
 8006986:	461a      	mov	r2, r3
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	1ad3      	subs	r3, r2, r3
 800698c:	603b      	str	r3, [r7, #0]
    Report(1, "%s WritePage:0x%X(%u), Offset:%u ,Writes %u Bytes, begin...\r\n",
                 __func__, Page_Address, Page_Address, OffsetInByte, NumByteToWrite_up_to_PageSize);
    uint32_t StartTime = HAL_GetTick();
#endif

    W25qxx_WaitForWriteEnd();
 800698e:	f7ff fd99 	bl	80064c4 <W25qxx_WaitForWriteEnd>
    W25qxx_WriteEnable();
 8006992:	f7ff fd4b 	bl	800642c <W25qxx_WriteEnable>

    Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 8006996:	4b34      	ldr	r3, [pc, #208]	; (8006a68 <W25qxx_WritePage+0x14c>)
 8006998:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 800699c:	b29b      	uxth	r3, r3
 800699e:	461a      	mov	r2, r3
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	fb02 f303 	mul.w	r3, r2, r3
 80069a6:	687a      	ldr	r2, [r7, #4]
 80069a8:	4413      	add	r3, r2
 80069aa:	60bb      	str	r3, [r7, #8]
    W25qxx_Spi((Page_Address & 0xFF00) >> 8);
    W25qxx_Spi(Page_Address&0xFF);
    HAL_SPI_Transmit(portFLASH, pBuffer, NumByteToWrite_up_to_PageSize, min_wait_ms);
    W25_UNSELECT();*/

    uint16_t lens = NumByteToWrite_up_to_PageSize + PAGE_HDR_BYTES;
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	b29b      	uxth	r3, r3
 80069b0:	3304      	adds	r3, #4
 80069b2:	82fb      	strh	r3, [r7, #22]
    int idx = 0;
 80069b4:	2300      	movs	r3, #0
 80069b6:	613b      	str	r3, [r7, #16]
    pageTmp[idx++] = PAGE_PROG;
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	1c5a      	adds	r2, r3, #1
 80069bc:	613a      	str	r2, [r7, #16]
 80069be:	4a2b      	ldr	r2, [pc, #172]	; (8006a6c <W25qxx_WritePage+0x150>)
 80069c0:	2102      	movs	r1, #2
 80069c2:	54d1      	strb	r1, [r2, r3]
    //if (w25qxx.ID >= W25Q256) pageTmp[idx++] = (Page_Address & 0xFF000000) >> 24;
    pageTmp[idx++] = (Page_Address & 0xFF0000) >> 16;
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	0c19      	lsrs	r1, r3, #16
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	1c5a      	adds	r2, r3, #1
 80069cc:	613a      	str	r2, [r7, #16]
 80069ce:	b2c9      	uxtb	r1, r1
 80069d0:	4a26      	ldr	r2, [pc, #152]	; (8006a6c <W25qxx_WritePage+0x150>)
 80069d2:	54d1      	strb	r1, [r2, r3]
    pageTmp[idx++] = (Page_Address& 0xFF00) >> 8;
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	0a19      	lsrs	r1, r3, #8
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	1c5a      	adds	r2, r3, #1
 80069dc:	613a      	str	r2, [r7, #16]
 80069de:	b2c9      	uxtb	r1, r1
 80069e0:	4a22      	ldr	r2, [pc, #136]	; (8006a6c <W25qxx_WritePage+0x150>)
 80069e2:	54d1      	strb	r1, [r2, r3]
    pageTmp[idx++] = Page_Address & 0xFF;
 80069e4:	693b      	ldr	r3, [r7, #16]
 80069e6:	1c5a      	adds	r2, r3, #1
 80069e8:	613a      	str	r2, [r7, #16]
 80069ea:	68ba      	ldr	r2, [r7, #8]
 80069ec:	b2d1      	uxtb	r1, r2
 80069ee:	4a1f      	ldr	r2, [pc, #124]	; (8006a6c <W25qxx_WritePage+0x150>)
 80069f0:	54d1      	strb	r1, [r2, r3]
    memcpy(&pageTmp[PAGE_HDR_BYTES], pBuffer, NumByteToWrite_up_to_PageSize);//w25qxx.PageSize);
 80069f2:	683a      	ldr	r2, [r7, #0]
 80069f4:	68f9      	ldr	r1, [r7, #12]
 80069f6:	481e      	ldr	r0, [pc, #120]	; (8006a70 <W25qxx_WritePage+0x154>)
 80069f8:	f008 fa80 	bl	800eefc <memcpy>

    spiRdy = 0;
 80069fc:	4b1d      	ldr	r3, [pc, #116]	; (8006a74 <W25qxx_WritePage+0x158>)
 80069fe:	2200      	movs	r2, #0
 8006a00:	701a      	strb	r2, [r3, #0]

w25_withDMA = 1;
 8006a02:	4b1d      	ldr	r3, [pc, #116]	; (8006a78 <W25qxx_WritePage+0x15c>)
 8006a04:	2201      	movs	r2, #1
 8006a06:	701a      	strb	r2, [r3, #0]
    W25_SELECT();
 8006a08:	f7ff fc5c 	bl	80062c4 <W25_SELECT>
    if (w25_withDMA) {
 8006a0c:	4b1a      	ldr	r3, [pc, #104]	; (8006a78 <W25qxx_WritePage+0x15c>)
 8006a0e:	781b      	ldrb	r3, [r3, #0]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d012      	beq.n	8006a3a <W25qxx_WritePage+0x11e>
    	HAL_SPI_Transmit_DMA(portFLASH, pageTmp, lens);
 8006a14:	4b19      	ldr	r3, [pc, #100]	; (8006a7c <W25qxx_WritePage+0x160>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	8afa      	ldrh	r2, [r7, #22]
 8006a1a:	4914      	ldr	r1, [pc, #80]	; (8006a6c <W25qxx_WritePage+0x150>)
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	f005 f91d 	bl	800bc5c <HAL_SPI_Transmit_DMA>
    	while (!spiRdy) {
 8006a22:	e002      	b.n	8006a2a <W25qxx_WritePage+0x10e>
    		W25qxx_Delay(1);
 8006a24:	2001      	movs	r0, #1
 8006a26:	f000 fa5d 	bl	8006ee4 <HAL_Delay>
    	while (!spiRdy) {
 8006a2a:	4b12      	ldr	r3, [pc, #72]	; (8006a74 <W25qxx_WritePage+0x158>)
 8006a2c:	781b      	ldrb	r3, [r3, #0]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d0f8      	beq.n	8006a24 <W25qxx_WritePage+0x108>
    	}
w25_withDMA = 0;
 8006a32:	4b11      	ldr	r3, [pc, #68]	; (8006a78 <W25qxx_WritePage+0x15c>)
 8006a34:	2200      	movs	r2, #0
 8006a36:	701a      	strb	r2, [r3, #0]
 8006a38:	e00d      	b.n	8006a56 <W25qxx_WritePage+0x13a>
    } else {
    	HAL_SPI_Transmit(portFLASH, pageTmp, lens, min_wait_ms);
 8006a3a:	4b10      	ldr	r3, [pc, #64]	; (8006a7c <W25qxx_WritePage+0x160>)
 8006a3c:	6818      	ldr	r0, [r3, #0]
 8006a3e:	23fa      	movs	r3, #250	; 0xfa
 8006a40:	8afa      	ldrh	r2, [r7, #22]
 8006a42:	490a      	ldr	r1, [pc, #40]	; (8006a6c <W25qxx_WritePage+0x150>)
 8006a44:	f004 fc59 	bl	800b2fa <HAL_SPI_Transmit>

    	W25_UNSELECT();
 8006a48:	f7ff fc48 	bl	80062dc <W25_UNSELECT>

    	W25qxx_WaitForWriteEnd();
 8006a4c:	f7ff fd3a 	bl	80064c4 <W25qxx_WaitForWriteEnd>

    	spiRdy = 1;
 8006a50:	4b08      	ldr	r3, [pc, #32]	; (8006a74 <W25qxx_WritePage+0x158>)
 8006a52:	2201      	movs	r2, #1
 8006a54:	701a      	strb	r2, [r3, #0]
    	Report(0, "\r\n");
    	Report(1, "%s done after %u ms\r\n", __func__, StartTime);
#endif
    }

    w25qxx.Lock = 0;
 8006a56:	4b04      	ldr	r3, [pc, #16]	; (8006a68 <W25qxx_WritePage+0x14c>)
 8006a58:	2200      	movs	r2, #0
 8006a5a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 8006a5e:	bf00      	nop
 8006a60:	3718      	adds	r7, #24
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}
 8006a66:	bf00      	nop
 8006a68:	200035a4 	.word	0x200035a4
 8006a6c:	200035cc 	.word	0x200035cc
 8006a70:	200035d0 	.word	0x200035d0
 8006a74:	200001d4 	.word	0x200001d4
 8006a78:	200036d1 	.word	0x200036d1
 8006a7c:	2000000c 	.word	0x2000000c

08006a80 <W25qxx_WriteSector>:
//------------------------------------------------------------------------------------------
void W25qxx_WriteSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_SectorSize)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b088      	sub	sp, #32
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	60f8      	str	r0, [r7, #12]
 8006a88:	60b9      	str	r1, [r7, #8]
 8006a8a:	607a      	str	r2, [r7, #4]
 8006a8c:	603b      	str	r3, [r7, #0]
    if ((NumByteToWrite_up_to_SectorSize > w25qxx.SectorSize) || !NumByteToWrite_up_to_SectorSize)
 8006a8e:	4b31      	ldr	r3, [pc, #196]	; (8006b54 <W25qxx_WriteSector+0xd4>)
 8006a90:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8006a94:	683a      	ldr	r2, [r7, #0]
 8006a96:	429a      	cmp	r2, r3
 8006a98:	d802      	bhi.n	8006aa0 <W25qxx_WriteSector+0x20>
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d103      	bne.n	8006aa8 <W25qxx_WriteSector+0x28>
                NumByteToWrite_up_to_SectorSize = w25qxx.SectorSize;
 8006aa0:	4b2c      	ldr	r3, [pc, #176]	; (8006b54 <W25qxx_WriteSector+0xd4>)
 8006aa2:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8006aa6:	603b      	str	r3, [r7, #0]
    Report(1, "%s WriteSector:0x%X(%u), Offset:%u ,Write %u Bytes, begin...\r\n",
                 __func__, Sector_Address, Sector_Address, OffsetInByte, NumByteToWrite_up_to_SectorSize);
    //W25qxx_Delay(100);
#endif

    if (OffsetInByte >= w25qxx.SectorSize) {
 8006aa8:	4b2a      	ldr	r3, [pc, #168]	; (8006b54 <W25qxx_WriteSector+0xd4>)
 8006aaa:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8006aae:	687a      	ldr	r2, [r7, #4]
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	d24b      	bcs.n	8006b4c <W25qxx_WriteSector+0xcc>
        return;
    }

    int32_t BytesToWrite;
    uint32_t LocalOffset, StartPage;
    if ((OffsetInByte + NumByteToWrite_up_to_SectorSize) > w25qxx.SectorSize)
 8006ab4:	687a      	ldr	r2, [r7, #4]
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	441a      	add	r2, r3
 8006aba:	4b26      	ldr	r3, [pc, #152]	; (8006b54 <W25qxx_WriteSector+0xd4>)
 8006abc:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8006ac0:	429a      	cmp	r2, r3
 8006ac2:	d906      	bls.n	8006ad2 <W25qxx_WriteSector+0x52>
        BytesToWrite = w25qxx.SectorSize - OffsetInByte;
 8006ac4:	4b23      	ldr	r3, [pc, #140]	; (8006b54 <W25qxx_WriteSector+0xd4>)
 8006ac6:	f8d3 200f 	ldr.w	r2, [r3, #15]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	1ad3      	subs	r3, r2, r3
 8006ace:	61fb      	str	r3, [r7, #28]
 8006ad0:	e001      	b.n	8006ad6 <W25qxx_WriteSector+0x56>
    else
        BytesToWrite = NumByteToWrite_up_to_SectorSize;
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	61fb      	str	r3, [r7, #28]
    StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8006ad6:	68b8      	ldr	r0, [r7, #8]
 8006ad8:	f7ff fe46 	bl	8006768 <W25qxx_SectorToPage>
 8006adc:	4602      	mov	r2, r0
 8006ade:	4b1d      	ldr	r3, [pc, #116]	; (8006b54 <W25qxx_WriteSector+0xd4>)
 8006ae0:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8006ae4:	b29b      	uxth	r3, r3
 8006ae6:	4619      	mov	r1, r3
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	fbb3 f3f1 	udiv	r3, r3, r1
 8006aee:	4413      	add	r3, r2
 8006af0:	617b      	str	r3, [r7, #20]
    LocalOffset = OffsetInByte % w25qxx.PageSize;
 8006af2:	4b18      	ldr	r3, [pc, #96]	; (8006b54 <W25qxx_WriteSector+0xd4>)
 8006af4:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8006af8:	b29b      	uxth	r3, r3
 8006afa:	461a      	mov	r2, r3
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	fbb3 f1f2 	udiv	r1, r3, r2
 8006b02:	fb01 f202 	mul.w	r2, r1, r2
 8006b06:	1a9b      	subs	r3, r3, r2
 8006b08:	61bb      	str	r3, [r7, #24]

    do
    {
        W25qxx_WritePage(pBuffer, StartPage, LocalOffset, BytesToWrite);
 8006b0a:	69fb      	ldr	r3, [r7, #28]
 8006b0c:	69ba      	ldr	r2, [r7, #24]
 8006b0e:	6979      	ldr	r1, [r7, #20]
 8006b10:	68f8      	ldr	r0, [r7, #12]
 8006b12:	f7ff ff03 	bl	800691c <W25qxx_WritePage>
        StartPage++;
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	3301      	adds	r3, #1
 8006b1a:	617b      	str	r3, [r7, #20]
        BytesToWrite -= w25qxx.PageSize - LocalOffset;
 8006b1c:	4b0d      	ldr	r3, [pc, #52]	; (8006b54 <W25qxx_WriteSector+0xd4>)
 8006b1e:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8006b22:	b29b      	uxth	r3, r3
 8006b24:	461a      	mov	r2, r3
 8006b26:	69bb      	ldr	r3, [r7, #24]
 8006b28:	1a9a      	subs	r2, r3, r2
 8006b2a:	69fb      	ldr	r3, [r7, #28]
 8006b2c:	4413      	add	r3, r2
 8006b2e:	61fb      	str	r3, [r7, #28]
        pBuffer += w25qxx.PageSize;
 8006b30:	4b08      	ldr	r3, [pc, #32]	; (8006b54 <W25qxx_WriteSector+0xd4>)
 8006b32:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8006b36:	b29b      	uxth	r3, r3
 8006b38:	461a      	mov	r2, r3
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	4413      	add	r3, r2
 8006b3e:	60fb      	str	r3, [r7, #12]
        LocalOffset = 0;
 8006b40:	2300      	movs	r3, #0
 8006b42:	61bb      	str	r3, [r7, #24]
    } while(BytesToWrite > 0);
 8006b44:	69fb      	ldr	r3, [r7, #28]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	dcdf      	bgt.n	8006b0a <W25qxx_WriteSector+0x8a>
 8006b4a:	e000      	b.n	8006b4e <W25qxx_WriteSector+0xce>
        return;
 8006b4c:	bf00      	nop
#ifdef W25QXX_DEBUG
    Report(1, "%s Done\r\n", __func__);
    //W25qxx_Delay(100);
#endif

}
 8006b4e:	3720      	adds	r7, #32
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd80      	pop	{r7, pc}
 8006b54:	200035a4 	.word	0x200035a4

08006b58 <W25qxx_ReadPage>:

    w25qxx.Lock = 0;
}
//------------------------------------------------------------------------------------------
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b088      	sub	sp, #32
 8006b5c:	af02      	add	r7, sp, #8
 8006b5e:	60f8      	str	r0, [r7, #12]
 8006b60:	60b9      	str	r1, [r7, #8]
 8006b62:	607a      	str	r2, [r7, #4]
 8006b64:	603b      	str	r3, [r7, #0]
    while (w25qxx.Lock) W25qxx_Delay(1);
 8006b66:	e002      	b.n	8006b6e <W25qxx_ReadPage+0x16>
 8006b68:	2001      	movs	r0, #1
 8006b6a:	f000 f9bb 	bl	8006ee4 <HAL_Delay>
 8006b6e:	4b51      	ldr	r3, [pc, #324]	; (8006cb4 <W25qxx_ReadPage+0x15c>)
 8006b70:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d1f7      	bne.n	8006b68 <W25qxx_ReadPage+0x10>

    w25qxx.Lock = 1;
 8006b78:	4b4e      	ldr	r3, [pc, #312]	; (8006cb4 <W25qxx_ReadPage+0x15c>)
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

    if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || !NumByteToRead_up_to_PageSize)
 8006b80:	4b4c      	ldr	r3, [pc, #304]	; (8006cb4 <W25qxx_ReadPage+0x15c>)
 8006b82:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8006b86:	b29b      	uxth	r3, r3
 8006b88:	461a      	mov	r2, r3
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d802      	bhi.n	8006b96 <W25qxx_ReadPage+0x3e>
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d104      	bne.n	8006ba0 <W25qxx_ReadPage+0x48>
        NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 8006b96:	4b47      	ldr	r3, [pc, #284]	; (8006cb4 <W25qxx_ReadPage+0x15c>)
 8006b98:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8006b9c:	b29b      	uxth	r3, r3
 8006b9e:	603b      	str	r3, [r7, #0]
    if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 8006ba0:	687a      	ldr	r2, [r7, #4]
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	4413      	add	r3, r2
 8006ba6:	4a43      	ldr	r2, [pc, #268]	; (8006cb4 <W25qxx_ReadPage+0x15c>)
 8006ba8:	f8b2 2009 	ldrh.w	r2, [r2, #9]
 8006bac:	b292      	uxth	r2, r2
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d907      	bls.n	8006bc2 <W25qxx_ReadPage+0x6a>
        NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8006bb2:	4b40      	ldr	r3, [pc, #256]	; (8006cb4 <W25qxx_ReadPage+0x15c>)
 8006bb4:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8006bb8:	b29b      	uxth	r3, r3
 8006bba:	461a      	mov	r2, r3
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	1ad3      	subs	r3, r2, r3
 8006bc0:	603b      	str	r3, [r7, #0]
                 __func__, Page_Address, Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
    //W25qxx_Delay(100);
    uint32_t StartTime = HAL_GetTick();
#endif

    Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 8006bc2:	4b3c      	ldr	r3, [pc, #240]	; (8006cb4 <W25qxx_ReadPage+0x15c>)
 8006bc4:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8006bc8:	b29b      	uxth	r3, r3
 8006bca:	461a      	mov	r2, r3
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	fb02 f303 	mul.w	r3, r2, r3
 8006bd2:	687a      	ldr	r2, [r7, #4]
 8006bd4:	4413      	add	r3, r2
 8006bd6:	60bb      	str	r3, [r7, #8]
    W25qxx_Spi(Page_Address & 0xFF);
    //W25qxx_Spi(0);
    HAL_SPI_Receive(portFLASH, pBuffer, NumByteToRead_up_to_PageSize, min_wait_ms);
    W25_UNSELECT();
    */
    memset(pageTmp, 0, sizeof(pageTmp));
 8006bd8:	f240 1205 	movw	r2, #261	; 0x105
 8006bdc:	2100      	movs	r1, #0
 8006bde:	4836      	ldr	r0, [pc, #216]	; (8006cb8 <W25qxx_ReadPage+0x160>)
 8006be0:	f008 f99a 	bl	800ef18 <memset>
    uint16_t lens = NumByteToRead_up_to_PageSize + PAGE_HDR_BYTES;// + 1;
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	b29b      	uxth	r3, r3
 8006be8:	3304      	adds	r3, #4
 8006bea:	82fb      	strh	r3, [r7, #22]
    int idx = 0;
 8006bec:	2300      	movs	r3, #0
 8006bee:	613b      	str	r3, [r7, #16]
    pageTmp[idx++] = DATA_READ;//FAST_READ;
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	1c5a      	adds	r2, r3, #1
 8006bf4:	613a      	str	r2, [r7, #16]
 8006bf6:	4a30      	ldr	r2, [pc, #192]	; (8006cb8 <W25qxx_ReadPage+0x160>)
 8006bf8:	2103      	movs	r1, #3
 8006bfa:	54d1      	strb	r1, [r2, r3]
    //if (w25qxx.ID >= W25Q256) pageTmp[idx++] = (Page_Address & 0xFF000000) >> 24;
    pageTmp[idx++] = (Page_Address & 0xFF0000) >> 16;
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	0c19      	lsrs	r1, r3, #16
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	1c5a      	adds	r2, r3, #1
 8006c04:	613a      	str	r2, [r7, #16]
 8006c06:	b2c9      	uxtb	r1, r1
 8006c08:	4a2b      	ldr	r2, [pc, #172]	; (8006cb8 <W25qxx_ReadPage+0x160>)
 8006c0a:	54d1      	strb	r1, [r2, r3]
    pageTmp[idx++] = (Page_Address& 0xFF00) >> 8;
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	0a19      	lsrs	r1, r3, #8
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	1c5a      	adds	r2, r3, #1
 8006c14:	613a      	str	r2, [r7, #16]
 8006c16:	b2c9      	uxtb	r1, r1
 8006c18:	4a27      	ldr	r2, [pc, #156]	; (8006cb8 <W25qxx_ReadPage+0x160>)
 8006c1a:	54d1      	strb	r1, [r2, r3]
    pageTmp[idx++] = Page_Address & 0xFF;
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	1c5a      	adds	r2, r3, #1
 8006c20:	613a      	str	r2, [r7, #16]
 8006c22:	68ba      	ldr	r2, [r7, #8]
 8006c24:	b2d1      	uxtb	r1, r2
 8006c26:	4a24      	ldr	r2, [pc, #144]	; (8006cb8 <W25qxx_ReadPage+0x160>)
 8006c28:	54d1      	strb	r1, [r2, r3]
    //pageTmp[idx++] = 0;
    spiRdy = 0;
 8006c2a:	4b24      	ldr	r3, [pc, #144]	; (8006cbc <W25qxx_ReadPage+0x164>)
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	701a      	strb	r2, [r3, #0]

w25_withDMA = 1;
 8006c30:	4b23      	ldr	r3, [pc, #140]	; (8006cc0 <W25qxx_ReadPage+0x168>)
 8006c32:	2201      	movs	r2, #1
 8006c34:	701a      	strb	r2, [r3, #0]
    W25_SELECT();
 8006c36:	f7ff fb45 	bl	80062c4 <W25_SELECT>
    if (w25_withDMA) {
 8006c3a:	4b21      	ldr	r3, [pc, #132]	; (8006cc0 <W25qxx_ReadPage+0x168>)
 8006c3c:	781b      	ldrb	r3, [r3, #0]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d012      	beq.n	8006c68 <W25qxx_ReadPage+0x110>
    	HAL_SPI_TransmitReceive_DMA(portFLASH, pageTmp, pageTmp, lens);
 8006c42:	4b20      	ldr	r3, [pc, #128]	; (8006cc4 <W25qxx_ReadPage+0x16c>)
 8006c44:	6818      	ldr	r0, [r3, #0]
 8006c46:	8afb      	ldrh	r3, [r7, #22]
 8006c48:	4a1b      	ldr	r2, [pc, #108]	; (8006cb8 <W25qxx_ReadPage+0x160>)
 8006c4a:	491b      	ldr	r1, [pc, #108]	; (8006cb8 <W25qxx_ReadPage+0x160>)
 8006c4c:	f005 f8fa 	bl	800be44 <HAL_SPI_TransmitReceive_DMA>
    	while (!spiRdy) {
 8006c50:	e002      	b.n	8006c58 <W25qxx_ReadPage+0x100>
    		W25qxx_Delay(1);
 8006c52:	2001      	movs	r0, #1
 8006c54:	f000 f946 	bl	8006ee4 <HAL_Delay>
    	while (!spiRdy) {
 8006c58:	4b18      	ldr	r3, [pc, #96]	; (8006cbc <W25qxx_ReadPage+0x164>)
 8006c5a:	781b      	ldrb	r3, [r3, #0]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d0f8      	beq.n	8006c52 <W25qxx_ReadPage+0xfa>
    	}
w25_withDMA = 0;
 8006c60:	4b17      	ldr	r3, [pc, #92]	; (8006cc0 <W25qxx_ReadPage+0x168>)
 8006c62:	2200      	movs	r2, #0
 8006c64:	701a      	strb	r2, [r3, #0]
 8006c66:	e017      	b.n	8006c98 <W25qxx_ReadPage+0x140>
    } else {
    	if (HAL_SPI_TransmitReceive(portFLASH, pageTmp, pageTmp, lens, min_wait_ms) != HAL_OK) devError |= devSPI;
 8006c68:	4b16      	ldr	r3, [pc, #88]	; (8006cc4 <W25qxx_ReadPage+0x16c>)
 8006c6a:	6818      	ldr	r0, [r3, #0]
 8006c6c:	22fa      	movs	r2, #250	; 0xfa
 8006c6e:	8afb      	ldrh	r3, [r7, #22]
 8006c70:	9200      	str	r2, [sp, #0]
 8006c72:	4a11      	ldr	r2, [pc, #68]	; (8006cb8 <W25qxx_ReadPage+0x160>)
 8006c74:	4910      	ldr	r1, [pc, #64]	; (8006cb8 <W25qxx_ReadPage+0x160>)
 8006c76:	f004 fdde 	bl	800b836 <HAL_SPI_TransmitReceive>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d006      	beq.n	8006c8e <W25qxx_ReadPage+0x136>
 8006c80:	4b11      	ldr	r3, [pc, #68]	; (8006cc8 <W25qxx_ReadPage+0x170>)
 8006c82:	881b      	ldrh	r3, [r3, #0]
 8006c84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c88:	b29a      	uxth	r2, r3
 8006c8a:	4b0f      	ldr	r3, [pc, #60]	; (8006cc8 <W25qxx_ReadPage+0x170>)
 8006c8c:	801a      	strh	r2, [r3, #0]
    	W25_UNSELECT();
 8006c8e:	f7ff fb25 	bl	80062dc <W25_UNSELECT>

    	spiRdy = 1;
 8006c92:	4b0a      	ldr	r3, [pc, #40]	; (8006cbc <W25qxx_ReadPage+0x164>)
 8006c94:	2201      	movs	r2, #1
 8006c96:	701a      	strb	r2, [r3, #0]
    }
	memcpy(pBuffer, &pageTmp[PAGE_HDR_BYTES], NumByteToRead_up_to_PageSize);//w25qxx.PageSize);
 8006c98:	683a      	ldr	r2, [r7, #0]
 8006c9a:	490c      	ldr	r1, [pc, #48]	; (8006ccc <W25qxx_ReadPage+0x174>)
 8006c9c:	68f8      	ldr	r0, [r7, #12]
 8006c9e:	f008 f92d 	bl	800eefc <memcpy>
    	Report(0, "\r\n");
    	Report(1, "%s done after %u ms\r\n", __func__, StartTime);
#endif


    w25qxx.Lock = 0;
 8006ca2:	4b04      	ldr	r3, [pc, #16]	; (8006cb4 <W25qxx_ReadPage+0x15c>)
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 8006caa:	bf00      	nop
 8006cac:	3718      	adds	r7, #24
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}
 8006cb2:	bf00      	nop
 8006cb4:	200035a4 	.word	0x200035a4
 8006cb8:	200035cc 	.word	0x200035cc
 8006cbc:	200001d4 	.word	0x200001d4
 8006cc0:	200036d1 	.word	0x200036d1
 8006cc4:	2000000c 	.word	0x2000000c
 8006cc8:	2000194c 	.word	0x2000194c
 8006ccc:	200035d0 	.word	0x200035d0

08006cd0 <W25qxx_ReadSector>:
//------------------------------------------------------------------------------------------
void W25qxx_ReadSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_SectorSize)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b088      	sub	sp, #32
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	60f8      	str	r0, [r7, #12]
 8006cd8:	60b9      	str	r1, [r7, #8]
 8006cda:	607a      	str	r2, [r7, #4]
 8006cdc:	603b      	str	r3, [r7, #0]
    if ((NumByteToRead_up_to_SectorSize > w25qxx.SectorSize) || !NumByteToRead_up_to_SectorSize)
 8006cde:	4b31      	ldr	r3, [pc, #196]	; (8006da4 <W25qxx_ReadSector+0xd4>)
 8006ce0:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8006ce4:	683a      	ldr	r2, [r7, #0]
 8006ce6:	429a      	cmp	r2, r3
 8006ce8:	d802      	bhi.n	8006cf0 <W25qxx_ReadSector+0x20>
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d103      	bne.n	8006cf8 <W25qxx_ReadSector+0x28>
                NumByteToRead_up_to_SectorSize = w25qxx.SectorSize;
 8006cf0:	4b2c      	ldr	r3, [pc, #176]	; (8006da4 <W25qxx_ReadSector+0xd4>)
 8006cf2:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8006cf6:	603b      	str	r3, [r7, #0]
    Report(1, "%s:0x%X(%u), Offset:%u ,Read %u Bytes, begin...\r\n",
                 __func__, Sector_Address, Sector_Address, OffsetInByte, NumByteToRead_up_to_SectorSize);
    //W25qxx_Delay(100);
#endif

    if (OffsetInByte >= w25qxx.SectorSize) {
 8006cf8:	4b2a      	ldr	r3, [pc, #168]	; (8006da4 <W25qxx_ReadSector+0xd4>)
 8006cfa:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8006cfe:	687a      	ldr	r2, [r7, #4]
 8006d00:	429a      	cmp	r2, r3
 8006d02:	d24b      	bcs.n	8006d9c <W25qxx_ReadSector+0xcc>
        return;
    }

    int32_t BytesToRead;
    uint32_t LocalOffset, StartPage;
    if ((OffsetInByte + NumByteToRead_up_to_SectorSize) > w25qxx.SectorSize)
 8006d04:	687a      	ldr	r2, [r7, #4]
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	441a      	add	r2, r3
 8006d0a:	4b26      	ldr	r3, [pc, #152]	; (8006da4 <W25qxx_ReadSector+0xd4>)
 8006d0c:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8006d10:	429a      	cmp	r2, r3
 8006d12:	d906      	bls.n	8006d22 <W25qxx_ReadSector+0x52>
        BytesToRead = w25qxx.SectorSize - OffsetInByte;
 8006d14:	4b23      	ldr	r3, [pc, #140]	; (8006da4 <W25qxx_ReadSector+0xd4>)
 8006d16:	f8d3 200f 	ldr.w	r2, [r3, #15]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	1ad3      	subs	r3, r2, r3
 8006d1e:	61fb      	str	r3, [r7, #28]
 8006d20:	e001      	b.n	8006d26 <W25qxx_ReadSector+0x56>
    else
        BytesToRead = NumByteToRead_up_to_SectorSize;
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	61fb      	str	r3, [r7, #28]
    StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8006d26:	68b8      	ldr	r0, [r7, #8]
 8006d28:	f7ff fd1e 	bl	8006768 <W25qxx_SectorToPage>
 8006d2c:	4602      	mov	r2, r0
 8006d2e:	4b1d      	ldr	r3, [pc, #116]	; (8006da4 <W25qxx_ReadSector+0xd4>)
 8006d30:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8006d34:	b29b      	uxth	r3, r3
 8006d36:	4619      	mov	r1, r3
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8006d3e:	4413      	add	r3, r2
 8006d40:	617b      	str	r3, [r7, #20]
    LocalOffset = OffsetInByte % w25qxx.PageSize;
 8006d42:	4b18      	ldr	r3, [pc, #96]	; (8006da4 <W25qxx_ReadSector+0xd4>)
 8006d44:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8006d48:	b29b      	uxth	r3, r3
 8006d4a:	461a      	mov	r2, r3
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	fbb3 f1f2 	udiv	r1, r3, r2
 8006d52:	fb01 f202 	mul.w	r2, r1, r2
 8006d56:	1a9b      	subs	r3, r3, r2
 8006d58:	61bb      	str	r3, [r7, #24]
    do {
        W25qxx_ReadPage(pBuffer, StartPage, LocalOffset, BytesToRead);
 8006d5a:	69fb      	ldr	r3, [r7, #28]
 8006d5c:	69ba      	ldr	r2, [r7, #24]
 8006d5e:	6979      	ldr	r1, [r7, #20]
 8006d60:	68f8      	ldr	r0, [r7, #12]
 8006d62:	f7ff fef9 	bl	8006b58 <W25qxx_ReadPage>
        StartPage++;
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	3301      	adds	r3, #1
 8006d6a:	617b      	str	r3, [r7, #20]
        BytesToRead -= w25qxx.PageSize - LocalOffset;
 8006d6c:	4b0d      	ldr	r3, [pc, #52]	; (8006da4 <W25qxx_ReadSector+0xd4>)
 8006d6e:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8006d72:	b29b      	uxth	r3, r3
 8006d74:	461a      	mov	r2, r3
 8006d76:	69bb      	ldr	r3, [r7, #24]
 8006d78:	1a9a      	subs	r2, r3, r2
 8006d7a:	69fb      	ldr	r3, [r7, #28]
 8006d7c:	4413      	add	r3, r2
 8006d7e:	61fb      	str	r3, [r7, #28]
        pBuffer += w25qxx.PageSize;
 8006d80:	4b08      	ldr	r3, [pc, #32]	; (8006da4 <W25qxx_ReadSector+0xd4>)
 8006d82:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8006d86:	b29b      	uxth	r3, r3
 8006d88:	461a      	mov	r2, r3
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	4413      	add	r3, r2
 8006d8e:	60fb      	str	r3, [r7, #12]
        LocalOffset = 0;
 8006d90:	2300      	movs	r3, #0
 8006d92:	61bb      	str	r3, [r7, #24]
    } while(BytesToRead > 0);
 8006d94:	69fb      	ldr	r3, [r7, #28]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	dcdf      	bgt.n	8006d5a <W25qxx_ReadSector+0x8a>
 8006d9a:	e000      	b.n	8006d9e <W25qxx_ReadSector+0xce>
        return;
 8006d9c:	bf00      	nop
#ifdef W25QXX_DEBUG
    Report(1, "%s done\r\n", __func__);
    //W25qxx_Delay(100);
#endif

}
 8006d9e:	3720      	adds	r7, #32
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}
 8006da4:	200035a4 	.word	0x200035a4

08006da8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8006da8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006de0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8006dac:	f7ff fa78 	bl	80062a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006db0:	480c      	ldr	r0, [pc, #48]	; (8006de4 <LoopForever+0x6>)
  ldr r1, =_edata
 8006db2:	490d      	ldr	r1, [pc, #52]	; (8006de8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8006db4:	4a0d      	ldr	r2, [pc, #52]	; (8006dec <LoopForever+0xe>)
  movs r3, #0
 8006db6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006db8:	e002      	b.n	8006dc0 <LoopCopyDataInit>

08006dba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006dba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006dbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006dbe:	3304      	adds	r3, #4

08006dc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006dc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006dc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006dc4:	d3f9      	bcc.n	8006dba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006dc6:	4a0a      	ldr	r2, [pc, #40]	; (8006df0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8006dc8:	4c0a      	ldr	r4, [pc, #40]	; (8006df4 <LoopForever+0x16>)
  movs r3, #0
 8006dca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006dcc:	e001      	b.n	8006dd2 <LoopFillZerobss>

08006dce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006dce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006dd0:	3204      	adds	r2, #4

08006dd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006dd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006dd4:	d3fb      	bcc.n	8006dce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006dd6:	f008 f85d 	bl	800ee94 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8006dda:	f7fb f96d 	bl	80020b8 <main>

08006dde <LoopForever>:

LoopForever:
    b LoopForever
 8006dde:	e7fe      	b.n	8006dde <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8006de0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8006de4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006de8:	20000420 	.word	0x20000420
  ldr r2, =_sidata
 8006dec:	08014fec 	.word	0x08014fec
  ldr r2, =_sbss
 8006df0:	20000420 	.word	0x20000420
  ldr r4, =_ebss
 8006df4:	200036e8 	.word	0x200036e8

08006df8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006df8:	e7fe      	b.n	8006df8 <ADC1_2_IRQHandler>

08006dfa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006dfa:	b580      	push	{r7, lr}
 8006dfc:	b082      	sub	sp, #8
 8006dfe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006e00:	2300      	movs	r3, #0
 8006e02:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006e04:	2003      	movs	r0, #3
 8006e06:	f000 f9a5 	bl	8007154 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006e0a:	200f      	movs	r0, #15
 8006e0c:	f000 f80e 	bl	8006e2c <HAL_InitTick>
 8006e10:	4603      	mov	r3, r0
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d002      	beq.n	8006e1c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8006e16:	2301      	movs	r3, #1
 8006e18:	71fb      	strb	r3, [r7, #7]
 8006e1a:	e001      	b.n	8006e20 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8006e1c:	f7fe fd4a 	bl	80058b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8006e20:	79fb      	ldrb	r3, [r7, #7]
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	3708      	adds	r7, #8
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}
	...

08006e2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b084      	sub	sp, #16
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8006e34:	2300      	movs	r3, #0
 8006e36:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8006e38:	4b17      	ldr	r3, [pc, #92]	; (8006e98 <HAL_InitTick+0x6c>)
 8006e3a:	781b      	ldrb	r3, [r3, #0]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d023      	beq.n	8006e88 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8006e40:	4b16      	ldr	r3, [pc, #88]	; (8006e9c <HAL_InitTick+0x70>)
 8006e42:	681a      	ldr	r2, [r3, #0]
 8006e44:	4b14      	ldr	r3, [pc, #80]	; (8006e98 <HAL_InitTick+0x6c>)
 8006e46:	781b      	ldrb	r3, [r3, #0]
 8006e48:	4619      	mov	r1, r3
 8006e4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006e4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006e52:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e56:	4618      	mov	r0, r3
 8006e58:	f000 f9bf 	bl	80071da <HAL_SYSTICK_Config>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d10f      	bne.n	8006e82 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2b0f      	cmp	r3, #15
 8006e66:	d809      	bhi.n	8006e7c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006e68:	2200      	movs	r2, #0
 8006e6a:	6879      	ldr	r1, [r7, #4]
 8006e6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006e70:	f000 f97b 	bl	800716a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006e74:	4a0a      	ldr	r2, [pc, #40]	; (8006ea0 <HAL_InitTick+0x74>)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6013      	str	r3, [r2, #0]
 8006e7a:	e007      	b.n	8006e8c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	73fb      	strb	r3, [r7, #15]
 8006e80:	e004      	b.n	8006e8c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8006e82:	2301      	movs	r3, #1
 8006e84:	73fb      	strb	r3, [r7, #15]
 8006e86:	e001      	b.n	8006e8c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006e88:	2301      	movs	r3, #1
 8006e8a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8006e8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3710      	adds	r7, #16
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}
 8006e96:	bf00      	nop
 8006e98:	20000248 	.word	0x20000248
 8006e9c:	20000214 	.word	0x20000214
 8006ea0:	20000244 	.word	0x20000244

08006ea4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006ea8:	4b06      	ldr	r3, [pc, #24]	; (8006ec4 <HAL_IncTick+0x20>)
 8006eaa:	781b      	ldrb	r3, [r3, #0]
 8006eac:	461a      	mov	r2, r3
 8006eae:	4b06      	ldr	r3, [pc, #24]	; (8006ec8 <HAL_IncTick+0x24>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4413      	add	r3, r2
 8006eb4:	4a04      	ldr	r2, [pc, #16]	; (8006ec8 <HAL_IncTick+0x24>)
 8006eb6:	6013      	str	r3, [r2, #0]
}
 8006eb8:	bf00      	nop
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec0:	4770      	bx	lr
 8006ec2:	bf00      	nop
 8006ec4:	20000248 	.word	0x20000248
 8006ec8:	200036d4 	.word	0x200036d4

08006ecc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	af00      	add	r7, sp, #0
  return uwTick;
 8006ed0:	4b03      	ldr	r3, [pc, #12]	; (8006ee0 <HAL_GetTick+0x14>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006edc:	4770      	bx	lr
 8006ede:	bf00      	nop
 8006ee0:	200036d4 	.word	0x200036d4

08006ee4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b084      	sub	sp, #16
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006eec:	f7ff ffee 	bl	8006ecc <HAL_GetTick>
 8006ef0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006efc:	d005      	beq.n	8006f0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8006efe:	4b0a      	ldr	r3, [pc, #40]	; (8006f28 <HAL_Delay+0x44>)
 8006f00:	781b      	ldrb	r3, [r3, #0]
 8006f02:	461a      	mov	r2, r3
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	4413      	add	r3, r2
 8006f08:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006f0a:	bf00      	nop
 8006f0c:	f7ff ffde 	bl	8006ecc <HAL_GetTick>
 8006f10:	4602      	mov	r2, r0
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	1ad3      	subs	r3, r2, r3
 8006f16:	68fa      	ldr	r2, [r7, #12]
 8006f18:	429a      	cmp	r2, r3
 8006f1a:	d8f7      	bhi.n	8006f0c <HAL_Delay+0x28>
  {
  }
}
 8006f1c:	bf00      	nop
 8006f1e:	bf00      	nop
 8006f20:	3710      	adds	r7, #16
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}
 8006f26:	bf00      	nop
 8006f28:	20000248 	.word	0x20000248

08006f2c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8006f30:	4b05      	ldr	r3, [pc, #20]	; (8006f48 <HAL_SuspendTick+0x1c>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4a04      	ldr	r2, [pc, #16]	; (8006f48 <HAL_SuspendTick+0x1c>)
 8006f36:	f023 0302 	bic.w	r3, r3, #2
 8006f3a:	6013      	str	r3, [r2, #0]
}
 8006f3c:	bf00      	nop
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f44:	4770      	bx	lr
 8006f46:	bf00      	nop
 8006f48:	e000e010 	.word	0xe000e010

08006f4c <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8006f50:	4b05      	ldr	r3, [pc, #20]	; (8006f68 <HAL_ResumeTick+0x1c>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	4a04      	ldr	r2, [pc, #16]	; (8006f68 <HAL_ResumeTick+0x1c>)
 8006f56:	f043 0302 	orr.w	r3, r3, #2
 8006f5a:	6013      	str	r3, [r2, #0]
}
 8006f5c:	bf00      	nop
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f64:	4770      	bx	lr
 8006f66:	bf00      	nop
 8006f68:	e000e010 	.word	0xe000e010

08006f6c <__NVIC_SetPriorityGrouping>:
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b085      	sub	sp, #20
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f003 0307 	and.w	r3, r3, #7
 8006f7a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006f7c:	4b0c      	ldr	r3, [pc, #48]	; (8006fb0 <__NVIC_SetPriorityGrouping+0x44>)
 8006f7e:	68db      	ldr	r3, [r3, #12]
 8006f80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006f82:	68ba      	ldr	r2, [r7, #8]
 8006f84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006f88:	4013      	ands	r3, r2
 8006f8a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006f94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006f98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006f9e:	4a04      	ldr	r2, [pc, #16]	; (8006fb0 <__NVIC_SetPriorityGrouping+0x44>)
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	60d3      	str	r3, [r2, #12]
}
 8006fa4:	bf00      	nop
 8006fa6:	3714      	adds	r7, #20
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fae:	4770      	bx	lr
 8006fb0:	e000ed00 	.word	0xe000ed00

08006fb4 <__NVIC_GetPriorityGrouping>:
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006fb8:	4b04      	ldr	r3, [pc, #16]	; (8006fcc <__NVIC_GetPriorityGrouping+0x18>)
 8006fba:	68db      	ldr	r3, [r3, #12]
 8006fbc:	0a1b      	lsrs	r3, r3, #8
 8006fbe:	f003 0307 	and.w	r3, r3, #7
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fca:	4770      	bx	lr
 8006fcc:	e000ed00 	.word	0xe000ed00

08006fd0 <__NVIC_EnableIRQ>:
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b083      	sub	sp, #12
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	db0b      	blt.n	8006ffa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006fe2:	79fb      	ldrb	r3, [r7, #7]
 8006fe4:	f003 021f 	and.w	r2, r3, #31
 8006fe8:	4907      	ldr	r1, [pc, #28]	; (8007008 <__NVIC_EnableIRQ+0x38>)
 8006fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006fee:	095b      	lsrs	r3, r3, #5
 8006ff0:	2001      	movs	r0, #1
 8006ff2:	fa00 f202 	lsl.w	r2, r0, r2
 8006ff6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006ffa:	bf00      	nop
 8006ffc:	370c      	adds	r7, #12
 8006ffe:	46bd      	mov	sp, r7
 8007000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007004:	4770      	bx	lr
 8007006:	bf00      	nop
 8007008:	e000e100 	.word	0xe000e100

0800700c <__NVIC_DisableIRQ>:
{
 800700c:	b480      	push	{r7}
 800700e:	b083      	sub	sp, #12
 8007010:	af00      	add	r7, sp, #0
 8007012:	4603      	mov	r3, r0
 8007014:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800701a:	2b00      	cmp	r3, #0
 800701c:	db12      	blt.n	8007044 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800701e:	79fb      	ldrb	r3, [r7, #7]
 8007020:	f003 021f 	and.w	r2, r3, #31
 8007024:	490a      	ldr	r1, [pc, #40]	; (8007050 <__NVIC_DisableIRQ+0x44>)
 8007026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800702a:	095b      	lsrs	r3, r3, #5
 800702c:	2001      	movs	r0, #1
 800702e:	fa00 f202 	lsl.w	r2, r0, r2
 8007032:	3320      	adds	r3, #32
 8007034:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8007038:	f3bf 8f4f 	dsb	sy
}
 800703c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800703e:	f3bf 8f6f 	isb	sy
}
 8007042:	bf00      	nop
}
 8007044:	bf00      	nop
 8007046:	370c      	adds	r7, #12
 8007048:	46bd      	mov	sp, r7
 800704a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704e:	4770      	bx	lr
 8007050:	e000e100 	.word	0xe000e100

08007054 <__NVIC_SetPriority>:
{
 8007054:	b480      	push	{r7}
 8007056:	b083      	sub	sp, #12
 8007058:	af00      	add	r7, sp, #0
 800705a:	4603      	mov	r3, r0
 800705c:	6039      	str	r1, [r7, #0]
 800705e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007060:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007064:	2b00      	cmp	r3, #0
 8007066:	db0a      	blt.n	800707e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	b2da      	uxtb	r2, r3
 800706c:	490c      	ldr	r1, [pc, #48]	; (80070a0 <__NVIC_SetPriority+0x4c>)
 800706e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007072:	0112      	lsls	r2, r2, #4
 8007074:	b2d2      	uxtb	r2, r2
 8007076:	440b      	add	r3, r1
 8007078:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800707c:	e00a      	b.n	8007094 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	b2da      	uxtb	r2, r3
 8007082:	4908      	ldr	r1, [pc, #32]	; (80070a4 <__NVIC_SetPriority+0x50>)
 8007084:	79fb      	ldrb	r3, [r7, #7]
 8007086:	f003 030f 	and.w	r3, r3, #15
 800708a:	3b04      	subs	r3, #4
 800708c:	0112      	lsls	r2, r2, #4
 800708e:	b2d2      	uxtb	r2, r2
 8007090:	440b      	add	r3, r1
 8007092:	761a      	strb	r2, [r3, #24]
}
 8007094:	bf00      	nop
 8007096:	370c      	adds	r7, #12
 8007098:	46bd      	mov	sp, r7
 800709a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709e:	4770      	bx	lr
 80070a0:	e000e100 	.word	0xe000e100
 80070a4:	e000ed00 	.word	0xe000ed00

080070a8 <NVIC_EncodePriority>:
{
 80070a8:	b480      	push	{r7}
 80070aa:	b089      	sub	sp, #36	; 0x24
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	60f8      	str	r0, [r7, #12]
 80070b0:	60b9      	str	r1, [r7, #8]
 80070b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	f003 0307 	and.w	r3, r3, #7
 80070ba:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80070bc:	69fb      	ldr	r3, [r7, #28]
 80070be:	f1c3 0307 	rsb	r3, r3, #7
 80070c2:	2b04      	cmp	r3, #4
 80070c4:	bf28      	it	cs
 80070c6:	2304      	movcs	r3, #4
 80070c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80070ca:	69fb      	ldr	r3, [r7, #28]
 80070cc:	3304      	adds	r3, #4
 80070ce:	2b06      	cmp	r3, #6
 80070d0:	d902      	bls.n	80070d8 <NVIC_EncodePriority+0x30>
 80070d2:	69fb      	ldr	r3, [r7, #28]
 80070d4:	3b03      	subs	r3, #3
 80070d6:	e000      	b.n	80070da <NVIC_EncodePriority+0x32>
 80070d8:	2300      	movs	r3, #0
 80070da:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80070dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80070e0:	69bb      	ldr	r3, [r7, #24]
 80070e2:	fa02 f303 	lsl.w	r3, r2, r3
 80070e6:	43da      	mvns	r2, r3
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	401a      	ands	r2, r3
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80070f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	fa01 f303 	lsl.w	r3, r1, r3
 80070fa:	43d9      	mvns	r1, r3
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007100:	4313      	orrs	r3, r2
}
 8007102:	4618      	mov	r0, r3
 8007104:	3724      	adds	r7, #36	; 0x24
 8007106:	46bd      	mov	sp, r7
 8007108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710c:	4770      	bx	lr
	...

08007110 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b082      	sub	sp, #8
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	3b01      	subs	r3, #1
 800711c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007120:	d301      	bcc.n	8007126 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007122:	2301      	movs	r3, #1
 8007124:	e00f      	b.n	8007146 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007126:	4a0a      	ldr	r2, [pc, #40]	; (8007150 <SysTick_Config+0x40>)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	3b01      	subs	r3, #1
 800712c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800712e:	210f      	movs	r1, #15
 8007130:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007134:	f7ff ff8e 	bl	8007054 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007138:	4b05      	ldr	r3, [pc, #20]	; (8007150 <SysTick_Config+0x40>)
 800713a:	2200      	movs	r2, #0
 800713c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800713e:	4b04      	ldr	r3, [pc, #16]	; (8007150 <SysTick_Config+0x40>)
 8007140:	2207      	movs	r2, #7
 8007142:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007144:	2300      	movs	r3, #0
}
 8007146:	4618      	mov	r0, r3
 8007148:	3708      	adds	r7, #8
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}
 800714e:	bf00      	nop
 8007150:	e000e010 	.word	0xe000e010

08007154 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b082      	sub	sp, #8
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f7ff ff05 	bl	8006f6c <__NVIC_SetPriorityGrouping>
}
 8007162:	bf00      	nop
 8007164:	3708      	adds	r7, #8
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}

0800716a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800716a:	b580      	push	{r7, lr}
 800716c:	b086      	sub	sp, #24
 800716e:	af00      	add	r7, sp, #0
 8007170:	4603      	mov	r3, r0
 8007172:	60b9      	str	r1, [r7, #8]
 8007174:	607a      	str	r2, [r7, #4]
 8007176:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8007178:	2300      	movs	r3, #0
 800717a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800717c:	f7ff ff1a 	bl	8006fb4 <__NVIC_GetPriorityGrouping>
 8007180:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007182:	687a      	ldr	r2, [r7, #4]
 8007184:	68b9      	ldr	r1, [r7, #8]
 8007186:	6978      	ldr	r0, [r7, #20]
 8007188:	f7ff ff8e 	bl	80070a8 <NVIC_EncodePriority>
 800718c:	4602      	mov	r2, r0
 800718e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007192:	4611      	mov	r1, r2
 8007194:	4618      	mov	r0, r3
 8007196:	f7ff ff5d 	bl	8007054 <__NVIC_SetPriority>
}
 800719a:	bf00      	nop
 800719c:	3718      	adds	r7, #24
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}

080071a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80071a2:	b580      	push	{r7, lr}
 80071a4:	b082      	sub	sp, #8
 80071a6:	af00      	add	r7, sp, #0
 80071a8:	4603      	mov	r3, r0
 80071aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80071ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071b0:	4618      	mov	r0, r3
 80071b2:	f7ff ff0d 	bl	8006fd0 <__NVIC_EnableIRQ>
}
 80071b6:	bf00      	nop
 80071b8:	3708      	adds	r7, #8
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}

080071be <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80071be:	b580      	push	{r7, lr}
 80071c0:	b082      	sub	sp, #8
 80071c2:	af00      	add	r7, sp, #0
 80071c4:	4603      	mov	r3, r0
 80071c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80071c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071cc:	4618      	mov	r0, r3
 80071ce:	f7ff ff1d 	bl	800700c <__NVIC_DisableIRQ>
}
 80071d2:	bf00      	nop
 80071d4:	3708      	adds	r7, #8
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}

080071da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80071da:	b580      	push	{r7, lr}
 80071dc:	b082      	sub	sp, #8
 80071de:	af00      	add	r7, sp, #0
 80071e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f7ff ff94 	bl	8007110 <SysTick_Config>
 80071e8:	4603      	mov	r3, r0
}
 80071ea:	4618      	mov	r0, r3
 80071ec:	3708      	adds	r7, #8
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bd80      	pop	{r7, pc}
	...

080071f4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80071f4:	b480      	push	{r7}
 80071f6:	b085      	sub	sp, #20
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d101      	bne.n	8007206 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8007202:	2301      	movs	r3, #1
 8007204:	e098      	b.n	8007338 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	461a      	mov	r2, r3
 800720c:	4b4d      	ldr	r3, [pc, #308]	; (8007344 <HAL_DMA_Init+0x150>)
 800720e:	429a      	cmp	r2, r3
 8007210:	d80f      	bhi.n	8007232 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	461a      	mov	r2, r3
 8007218:	4b4b      	ldr	r3, [pc, #300]	; (8007348 <HAL_DMA_Init+0x154>)
 800721a:	4413      	add	r3, r2
 800721c:	4a4b      	ldr	r2, [pc, #300]	; (800734c <HAL_DMA_Init+0x158>)
 800721e:	fba2 2303 	umull	r2, r3, r2, r3
 8007222:	091b      	lsrs	r3, r3, #4
 8007224:	009a      	lsls	r2, r3, #2
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	4a48      	ldr	r2, [pc, #288]	; (8007350 <HAL_DMA_Init+0x15c>)
 800722e:	641a      	str	r2, [r3, #64]	; 0x40
 8007230:	e00e      	b.n	8007250 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	461a      	mov	r2, r3
 8007238:	4b46      	ldr	r3, [pc, #280]	; (8007354 <HAL_DMA_Init+0x160>)
 800723a:	4413      	add	r3, r2
 800723c:	4a43      	ldr	r2, [pc, #268]	; (800734c <HAL_DMA_Init+0x158>)
 800723e:	fba2 2303 	umull	r2, r3, r2, r3
 8007242:	091b      	lsrs	r3, r3, #4
 8007244:	009a      	lsls	r2, r3, #2
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	4a42      	ldr	r2, [pc, #264]	; (8007358 <HAL_DMA_Init+0x164>)
 800724e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2202      	movs	r2, #2
 8007254:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007266:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800726a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8007274:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	691b      	ldr	r3, [r3, #16]
 800727a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007280:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	699b      	ldr	r3, [r3, #24]
 8007286:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800728c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6a1b      	ldr	r3, [r3, #32]
 8007292:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007294:	68fa      	ldr	r2, [r7, #12]
 8007296:	4313      	orrs	r3, r2
 8007298:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	68fa      	ldr	r2, [r7, #12]
 80072a0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	689b      	ldr	r3, [r3, #8]
 80072a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80072aa:	d039      	beq.n	8007320 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072b0:	4a27      	ldr	r2, [pc, #156]	; (8007350 <HAL_DMA_Init+0x15c>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d11a      	bne.n	80072ec <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80072b6:	4b29      	ldr	r3, [pc, #164]	; (800735c <HAL_DMA_Init+0x168>)
 80072b8:	681a      	ldr	r2, [r3, #0]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072be:	f003 031c 	and.w	r3, r3, #28
 80072c2:	210f      	movs	r1, #15
 80072c4:	fa01 f303 	lsl.w	r3, r1, r3
 80072c8:	43db      	mvns	r3, r3
 80072ca:	4924      	ldr	r1, [pc, #144]	; (800735c <HAL_DMA_Init+0x168>)
 80072cc:	4013      	ands	r3, r2
 80072ce:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80072d0:	4b22      	ldr	r3, [pc, #136]	; (800735c <HAL_DMA_Init+0x168>)
 80072d2:	681a      	ldr	r2, [r3, #0]
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6859      	ldr	r1, [r3, #4]
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072dc:	f003 031c 	and.w	r3, r3, #28
 80072e0:	fa01 f303 	lsl.w	r3, r1, r3
 80072e4:	491d      	ldr	r1, [pc, #116]	; (800735c <HAL_DMA_Init+0x168>)
 80072e6:	4313      	orrs	r3, r2
 80072e8:	600b      	str	r3, [r1, #0]
 80072ea:	e019      	b.n	8007320 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80072ec:	4b1c      	ldr	r3, [pc, #112]	; (8007360 <HAL_DMA_Init+0x16c>)
 80072ee:	681a      	ldr	r2, [r3, #0]
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072f4:	f003 031c 	and.w	r3, r3, #28
 80072f8:	210f      	movs	r1, #15
 80072fa:	fa01 f303 	lsl.w	r3, r1, r3
 80072fe:	43db      	mvns	r3, r3
 8007300:	4917      	ldr	r1, [pc, #92]	; (8007360 <HAL_DMA_Init+0x16c>)
 8007302:	4013      	ands	r3, r2
 8007304:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8007306:	4b16      	ldr	r3, [pc, #88]	; (8007360 <HAL_DMA_Init+0x16c>)
 8007308:	681a      	ldr	r2, [r3, #0]
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6859      	ldr	r1, [r3, #4]
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007312:	f003 031c 	and.w	r3, r3, #28
 8007316:	fa01 f303 	lsl.w	r3, r1, r3
 800731a:	4911      	ldr	r1, [pc, #68]	; (8007360 <HAL_DMA_Init+0x16c>)
 800731c:	4313      	orrs	r3, r2
 800731e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2200      	movs	r2, #0
 8007324:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2201      	movs	r2, #1
 800732a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2200      	movs	r2, #0
 8007332:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007336:	2300      	movs	r3, #0
}
 8007338:	4618      	mov	r0, r3
 800733a:	3714      	adds	r7, #20
 800733c:	46bd      	mov	sp, r7
 800733e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007342:	4770      	bx	lr
 8007344:	40020407 	.word	0x40020407
 8007348:	bffdfff8 	.word	0xbffdfff8
 800734c:	cccccccd 	.word	0xcccccccd
 8007350:	40020000 	.word	0x40020000
 8007354:	bffdfbf8 	.word	0xbffdfbf8
 8007358:	40020400 	.word	0x40020400
 800735c:	400200a8 	.word	0x400200a8
 8007360:	400204a8 	.word	0x400204a8

08007364 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b086      	sub	sp, #24
 8007368:	af00      	add	r7, sp, #0
 800736a:	60f8      	str	r0, [r7, #12]
 800736c:	60b9      	str	r1, [r7, #8]
 800736e:	607a      	str	r2, [r7, #4]
 8007370:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007372:	2300      	movs	r3, #0
 8007374:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800737c:	2b01      	cmp	r3, #1
 800737e:	d101      	bne.n	8007384 <HAL_DMA_Start_IT+0x20>
 8007380:	2302      	movs	r3, #2
 8007382:	e04b      	b.n	800741c <HAL_DMA_Start_IT+0xb8>
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	2201      	movs	r2, #1
 8007388:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007392:	b2db      	uxtb	r3, r3
 8007394:	2b01      	cmp	r3, #1
 8007396:	d13a      	bne.n	800740e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	2202      	movs	r2, #2
 800739c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2200      	movs	r2, #0
 80073a4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	681a      	ldr	r2, [r3, #0]
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f022 0201 	bic.w	r2, r2, #1
 80073b4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	687a      	ldr	r2, [r7, #4]
 80073ba:	68b9      	ldr	r1, [r7, #8]
 80073bc:	68f8      	ldr	r0, [r7, #12]
 80073be:	f000 f96d 	bl	800769c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d008      	beq.n	80073dc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	681a      	ldr	r2, [r3, #0]
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f042 020e 	orr.w	r2, r2, #14
 80073d8:	601a      	str	r2, [r3, #0]
 80073da:	e00f      	b.n	80073fc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	681a      	ldr	r2, [r3, #0]
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f022 0204 	bic.w	r2, r2, #4
 80073ea:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	681a      	ldr	r2, [r3, #0]
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f042 020a 	orr.w	r2, r2, #10
 80073fa:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	681a      	ldr	r2, [r3, #0]
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f042 0201 	orr.w	r2, r2, #1
 800740a:	601a      	str	r2, [r3, #0]
 800740c:	e005      	b.n	800741a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	2200      	movs	r2, #0
 8007412:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8007416:	2302      	movs	r3, #2
 8007418:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800741a:	7dfb      	ldrb	r3, [r7, #23]
}
 800741c:	4618      	mov	r0, r3
 800741e:	3718      	adds	r7, #24
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}

08007424 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007424:	b480      	push	{r7}
 8007426:	b085      	sub	sp, #20
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800742c:	2300      	movs	r3, #0
 800742e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007436:	b2db      	uxtb	r3, r3
 8007438:	2b02      	cmp	r3, #2
 800743a:	d008      	beq.n	800744e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2204      	movs	r2, #4
 8007440:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2200      	movs	r2, #0
 8007446:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800744a:	2301      	movs	r3, #1
 800744c:	e022      	b.n	8007494 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	681a      	ldr	r2, [r3, #0]
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f022 020e 	bic.w	r2, r2, #14
 800745c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	681a      	ldr	r2, [r3, #0]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f022 0201 	bic.w	r2, r2, #1
 800746c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007472:	f003 021c 	and.w	r2, r3, #28
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800747a:	2101      	movs	r1, #1
 800747c:	fa01 f202 	lsl.w	r2, r1, r2
 8007480:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2201      	movs	r2, #1
 8007486:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2200      	movs	r2, #0
 800748e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8007492:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8007494:	4618      	mov	r0, r3
 8007496:	3714      	adds	r7, #20
 8007498:	46bd      	mov	sp, r7
 800749a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749e:	4770      	bx	lr

080074a0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b084      	sub	sp, #16
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80074a8:	2300      	movs	r3, #0
 80074aa:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80074b2:	b2db      	uxtb	r3, r3
 80074b4:	2b02      	cmp	r3, #2
 80074b6:	d005      	beq.n	80074c4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2204      	movs	r2, #4
 80074bc:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80074be:	2301      	movs	r3, #1
 80074c0:	73fb      	strb	r3, [r7, #15]
 80074c2:	e029      	b.n	8007518 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	681a      	ldr	r2, [r3, #0]
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f022 020e 	bic.w	r2, r2, #14
 80074d2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	681a      	ldr	r2, [r3, #0]
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f022 0201 	bic.w	r2, r2, #1
 80074e2:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074e8:	f003 021c 	and.w	r2, r3, #28
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074f0:	2101      	movs	r1, #1
 80074f2:	fa01 f202 	lsl.w	r2, r1, r2
 80074f6:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2201      	movs	r2, #1
 80074fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2200      	movs	r2, #0
 8007504:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800750c:	2b00      	cmp	r3, #0
 800750e:	d003      	beq.n	8007518 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	4798      	blx	r3
    }
  }
  return status;
 8007518:	7bfb      	ldrb	r3, [r7, #15]
}
 800751a:	4618      	mov	r0, r3
 800751c:	3710      	adds	r7, #16
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}

08007522 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007522:	b580      	push	{r7, lr}
 8007524:	b084      	sub	sp, #16
 8007526:	af00      	add	r7, sp, #0
 8007528:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800753e:	f003 031c 	and.w	r3, r3, #28
 8007542:	2204      	movs	r2, #4
 8007544:	409a      	lsls	r2, r3
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	4013      	ands	r3, r2
 800754a:	2b00      	cmp	r3, #0
 800754c:	d026      	beq.n	800759c <HAL_DMA_IRQHandler+0x7a>
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	f003 0304 	and.w	r3, r3, #4
 8007554:	2b00      	cmp	r3, #0
 8007556:	d021      	beq.n	800759c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f003 0320 	and.w	r3, r3, #32
 8007562:	2b00      	cmp	r3, #0
 8007564:	d107      	bne.n	8007576 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	681a      	ldr	r2, [r3, #0]
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f022 0204 	bic.w	r2, r2, #4
 8007574:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800757a:	f003 021c 	and.w	r2, r3, #28
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007582:	2104      	movs	r1, #4
 8007584:	fa01 f202 	lsl.w	r2, r1, r2
 8007588:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800758e:	2b00      	cmp	r3, #0
 8007590:	d071      	beq.n	8007676 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800759a:	e06c      	b.n	8007676 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075a0:	f003 031c 	and.w	r3, r3, #28
 80075a4:	2202      	movs	r2, #2
 80075a6:	409a      	lsls	r2, r3
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	4013      	ands	r3, r2
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d02e      	beq.n	800760e <HAL_DMA_IRQHandler+0xec>
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	f003 0302 	and.w	r3, r3, #2
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d029      	beq.n	800760e <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f003 0320 	and.w	r3, r3, #32
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d10b      	bne.n	80075e0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	681a      	ldr	r2, [r3, #0]
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f022 020a 	bic.w	r2, r2, #10
 80075d6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2201      	movs	r2, #1
 80075dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075e4:	f003 021c 	and.w	r2, r3, #28
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ec:	2102      	movs	r1, #2
 80075ee:	fa01 f202 	lsl.w	r2, r1, r2
 80075f2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2200      	movs	r2, #0
 80075f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007600:	2b00      	cmp	r3, #0
 8007602:	d038      	beq.n	8007676 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800760c:	e033      	b.n	8007676 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007612:	f003 031c 	and.w	r3, r3, #28
 8007616:	2208      	movs	r2, #8
 8007618:	409a      	lsls	r2, r3
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	4013      	ands	r3, r2
 800761e:	2b00      	cmp	r3, #0
 8007620:	d02a      	beq.n	8007678 <HAL_DMA_IRQHandler+0x156>
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	f003 0308 	and.w	r3, r3, #8
 8007628:	2b00      	cmp	r3, #0
 800762a:	d025      	beq.n	8007678 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	681a      	ldr	r2, [r3, #0]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f022 020e 	bic.w	r2, r2, #14
 800763a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007640:	f003 021c 	and.w	r2, r3, #28
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007648:	2101      	movs	r1, #1
 800764a:	fa01 f202 	lsl.w	r2, r1, r2
 800764e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2201      	movs	r2, #1
 8007654:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2201      	movs	r2, #1
 800765a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2200      	movs	r2, #0
 8007662:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800766a:	2b00      	cmp	r3, #0
 800766c:	d004      	beq.n	8007678 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8007676:	bf00      	nop
 8007678:	bf00      	nop
}
 800767a:	3710      	adds	r7, #16
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}

08007680 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8007680:	b480      	push	{r7}
 8007682:	b083      	sub	sp, #12
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800768e:	b2db      	uxtb	r3, r3
}
 8007690:	4618      	mov	r0, r3
 8007692:	370c      	adds	r7, #12
 8007694:	46bd      	mov	sp, r7
 8007696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769a:	4770      	bx	lr

0800769c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800769c:	b480      	push	{r7}
 800769e:	b085      	sub	sp, #20
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	60f8      	str	r0, [r7, #12]
 80076a4:	60b9      	str	r1, [r7, #8]
 80076a6:	607a      	str	r2, [r7, #4]
 80076a8:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076ae:	f003 021c 	and.w	r2, r3, #28
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076b6:	2101      	movs	r1, #1
 80076b8:	fa01 f202 	lsl.w	r2, r1, r2
 80076bc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	683a      	ldr	r2, [r7, #0]
 80076c4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	689b      	ldr	r3, [r3, #8]
 80076ca:	2b10      	cmp	r3, #16
 80076cc:	d108      	bne.n	80076e0 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	687a      	ldr	r2, [r7, #4]
 80076d4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	68ba      	ldr	r2, [r7, #8]
 80076dc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80076de:	e007      	b.n	80076f0 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	68ba      	ldr	r2, [r7, #8]
 80076e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	687a      	ldr	r2, [r7, #4]
 80076ee:	60da      	str	r2, [r3, #12]
}
 80076f0:	bf00      	nop
 80076f2:	3714      	adds	r7, #20
 80076f4:	46bd      	mov	sp, r7
 80076f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fa:	4770      	bx	lr

080076fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80076fc:	b480      	push	{r7}
 80076fe:	b087      	sub	sp, #28
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
 8007704:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007706:	2300      	movs	r3, #0
 8007708:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800770a:	e17f      	b.n	8007a0c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	681a      	ldr	r2, [r3, #0]
 8007710:	2101      	movs	r1, #1
 8007712:	697b      	ldr	r3, [r7, #20]
 8007714:	fa01 f303 	lsl.w	r3, r1, r3
 8007718:	4013      	ands	r3, r2
 800771a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	2b00      	cmp	r3, #0
 8007720:	f000 8171 	beq.w	8007a06 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	685b      	ldr	r3, [r3, #4]
 8007728:	f003 0303 	and.w	r3, r3, #3
 800772c:	2b01      	cmp	r3, #1
 800772e:	d005      	beq.n	800773c <HAL_GPIO_Init+0x40>
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	685b      	ldr	r3, [r3, #4]
 8007734:	f003 0303 	and.w	r3, r3, #3
 8007738:	2b02      	cmp	r3, #2
 800773a:	d130      	bne.n	800779e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	689b      	ldr	r3, [r3, #8]
 8007740:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	005b      	lsls	r3, r3, #1
 8007746:	2203      	movs	r2, #3
 8007748:	fa02 f303 	lsl.w	r3, r2, r3
 800774c:	43db      	mvns	r3, r3
 800774e:	693a      	ldr	r2, [r7, #16]
 8007750:	4013      	ands	r3, r2
 8007752:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	68da      	ldr	r2, [r3, #12]
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	005b      	lsls	r3, r3, #1
 800775c:	fa02 f303 	lsl.w	r3, r2, r3
 8007760:	693a      	ldr	r2, [r7, #16]
 8007762:	4313      	orrs	r3, r2
 8007764:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	693a      	ldr	r2, [r7, #16]
 800776a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	685b      	ldr	r3, [r3, #4]
 8007770:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007772:	2201      	movs	r2, #1
 8007774:	697b      	ldr	r3, [r7, #20]
 8007776:	fa02 f303 	lsl.w	r3, r2, r3
 800777a:	43db      	mvns	r3, r3
 800777c:	693a      	ldr	r2, [r7, #16]
 800777e:	4013      	ands	r3, r2
 8007780:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	685b      	ldr	r3, [r3, #4]
 8007786:	091b      	lsrs	r3, r3, #4
 8007788:	f003 0201 	and.w	r2, r3, #1
 800778c:	697b      	ldr	r3, [r7, #20]
 800778e:	fa02 f303 	lsl.w	r3, r2, r3
 8007792:	693a      	ldr	r2, [r7, #16]
 8007794:	4313      	orrs	r3, r2
 8007796:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	693a      	ldr	r2, [r7, #16]
 800779c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	685b      	ldr	r3, [r3, #4]
 80077a2:	f003 0303 	and.w	r3, r3, #3
 80077a6:	2b03      	cmp	r3, #3
 80077a8:	d118      	bne.n	80077dc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80077b0:	2201      	movs	r2, #1
 80077b2:	697b      	ldr	r3, [r7, #20]
 80077b4:	fa02 f303 	lsl.w	r3, r2, r3
 80077b8:	43db      	mvns	r3, r3
 80077ba:	693a      	ldr	r2, [r7, #16]
 80077bc:	4013      	ands	r3, r2
 80077be:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	685b      	ldr	r3, [r3, #4]
 80077c4:	08db      	lsrs	r3, r3, #3
 80077c6:	f003 0201 	and.w	r2, r3, #1
 80077ca:	697b      	ldr	r3, [r7, #20]
 80077cc:	fa02 f303 	lsl.w	r3, r2, r3
 80077d0:	693a      	ldr	r2, [r7, #16]
 80077d2:	4313      	orrs	r3, r2
 80077d4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	693a      	ldr	r2, [r7, #16]
 80077da:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	685b      	ldr	r3, [r3, #4]
 80077e0:	f003 0303 	and.w	r3, r3, #3
 80077e4:	2b03      	cmp	r3, #3
 80077e6:	d017      	beq.n	8007818 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	68db      	ldr	r3, [r3, #12]
 80077ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	005b      	lsls	r3, r3, #1
 80077f2:	2203      	movs	r2, #3
 80077f4:	fa02 f303 	lsl.w	r3, r2, r3
 80077f8:	43db      	mvns	r3, r3
 80077fa:	693a      	ldr	r2, [r7, #16]
 80077fc:	4013      	ands	r3, r2
 80077fe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	689a      	ldr	r2, [r3, #8]
 8007804:	697b      	ldr	r3, [r7, #20]
 8007806:	005b      	lsls	r3, r3, #1
 8007808:	fa02 f303 	lsl.w	r3, r2, r3
 800780c:	693a      	ldr	r2, [r7, #16]
 800780e:	4313      	orrs	r3, r2
 8007810:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	693a      	ldr	r2, [r7, #16]
 8007816:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	685b      	ldr	r3, [r3, #4]
 800781c:	f003 0303 	and.w	r3, r3, #3
 8007820:	2b02      	cmp	r3, #2
 8007822:	d123      	bne.n	800786c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8007824:	697b      	ldr	r3, [r7, #20]
 8007826:	08da      	lsrs	r2, r3, #3
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	3208      	adds	r2, #8
 800782c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007830:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8007832:	697b      	ldr	r3, [r7, #20]
 8007834:	f003 0307 	and.w	r3, r3, #7
 8007838:	009b      	lsls	r3, r3, #2
 800783a:	220f      	movs	r2, #15
 800783c:	fa02 f303 	lsl.w	r3, r2, r3
 8007840:	43db      	mvns	r3, r3
 8007842:	693a      	ldr	r2, [r7, #16]
 8007844:	4013      	ands	r3, r2
 8007846:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	691a      	ldr	r2, [r3, #16]
 800784c:	697b      	ldr	r3, [r7, #20]
 800784e:	f003 0307 	and.w	r3, r3, #7
 8007852:	009b      	lsls	r3, r3, #2
 8007854:	fa02 f303 	lsl.w	r3, r2, r3
 8007858:	693a      	ldr	r2, [r7, #16]
 800785a:	4313      	orrs	r3, r2
 800785c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800785e:	697b      	ldr	r3, [r7, #20]
 8007860:	08da      	lsrs	r2, r3, #3
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	3208      	adds	r2, #8
 8007866:	6939      	ldr	r1, [r7, #16]
 8007868:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8007872:	697b      	ldr	r3, [r7, #20]
 8007874:	005b      	lsls	r3, r3, #1
 8007876:	2203      	movs	r2, #3
 8007878:	fa02 f303 	lsl.w	r3, r2, r3
 800787c:	43db      	mvns	r3, r3
 800787e:	693a      	ldr	r2, [r7, #16]
 8007880:	4013      	ands	r3, r2
 8007882:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	685b      	ldr	r3, [r3, #4]
 8007888:	f003 0203 	and.w	r2, r3, #3
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	005b      	lsls	r3, r3, #1
 8007890:	fa02 f303 	lsl.w	r3, r2, r3
 8007894:	693a      	ldr	r2, [r7, #16]
 8007896:	4313      	orrs	r3, r2
 8007898:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	693a      	ldr	r2, [r7, #16]
 800789e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	685b      	ldr	r3, [r3, #4]
 80078a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	f000 80ac 	beq.w	8007a06 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80078ae:	4b5f      	ldr	r3, [pc, #380]	; (8007a2c <HAL_GPIO_Init+0x330>)
 80078b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078b2:	4a5e      	ldr	r2, [pc, #376]	; (8007a2c <HAL_GPIO_Init+0x330>)
 80078b4:	f043 0301 	orr.w	r3, r3, #1
 80078b8:	6613      	str	r3, [r2, #96]	; 0x60
 80078ba:	4b5c      	ldr	r3, [pc, #368]	; (8007a2c <HAL_GPIO_Init+0x330>)
 80078bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078be:	f003 0301 	and.w	r3, r3, #1
 80078c2:	60bb      	str	r3, [r7, #8]
 80078c4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80078c6:	4a5a      	ldr	r2, [pc, #360]	; (8007a30 <HAL_GPIO_Init+0x334>)
 80078c8:	697b      	ldr	r3, [r7, #20]
 80078ca:	089b      	lsrs	r3, r3, #2
 80078cc:	3302      	adds	r3, #2
 80078ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80078d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80078d4:	697b      	ldr	r3, [r7, #20]
 80078d6:	f003 0303 	and.w	r3, r3, #3
 80078da:	009b      	lsls	r3, r3, #2
 80078dc:	220f      	movs	r2, #15
 80078de:	fa02 f303 	lsl.w	r3, r2, r3
 80078e2:	43db      	mvns	r3, r3
 80078e4:	693a      	ldr	r2, [r7, #16]
 80078e6:	4013      	ands	r3, r2
 80078e8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80078f0:	d025      	beq.n	800793e <HAL_GPIO_Init+0x242>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	4a4f      	ldr	r2, [pc, #316]	; (8007a34 <HAL_GPIO_Init+0x338>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d01f      	beq.n	800793a <HAL_GPIO_Init+0x23e>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	4a4e      	ldr	r2, [pc, #312]	; (8007a38 <HAL_GPIO_Init+0x33c>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d019      	beq.n	8007936 <HAL_GPIO_Init+0x23a>
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	4a4d      	ldr	r2, [pc, #308]	; (8007a3c <HAL_GPIO_Init+0x340>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d013      	beq.n	8007932 <HAL_GPIO_Init+0x236>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	4a4c      	ldr	r2, [pc, #304]	; (8007a40 <HAL_GPIO_Init+0x344>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d00d      	beq.n	800792e <HAL_GPIO_Init+0x232>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	4a4b      	ldr	r2, [pc, #300]	; (8007a44 <HAL_GPIO_Init+0x348>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d007      	beq.n	800792a <HAL_GPIO_Init+0x22e>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	4a4a      	ldr	r2, [pc, #296]	; (8007a48 <HAL_GPIO_Init+0x34c>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d101      	bne.n	8007926 <HAL_GPIO_Init+0x22a>
 8007922:	2306      	movs	r3, #6
 8007924:	e00c      	b.n	8007940 <HAL_GPIO_Init+0x244>
 8007926:	2307      	movs	r3, #7
 8007928:	e00a      	b.n	8007940 <HAL_GPIO_Init+0x244>
 800792a:	2305      	movs	r3, #5
 800792c:	e008      	b.n	8007940 <HAL_GPIO_Init+0x244>
 800792e:	2304      	movs	r3, #4
 8007930:	e006      	b.n	8007940 <HAL_GPIO_Init+0x244>
 8007932:	2303      	movs	r3, #3
 8007934:	e004      	b.n	8007940 <HAL_GPIO_Init+0x244>
 8007936:	2302      	movs	r3, #2
 8007938:	e002      	b.n	8007940 <HAL_GPIO_Init+0x244>
 800793a:	2301      	movs	r3, #1
 800793c:	e000      	b.n	8007940 <HAL_GPIO_Init+0x244>
 800793e:	2300      	movs	r3, #0
 8007940:	697a      	ldr	r2, [r7, #20]
 8007942:	f002 0203 	and.w	r2, r2, #3
 8007946:	0092      	lsls	r2, r2, #2
 8007948:	4093      	lsls	r3, r2
 800794a:	693a      	ldr	r2, [r7, #16]
 800794c:	4313      	orrs	r3, r2
 800794e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8007950:	4937      	ldr	r1, [pc, #220]	; (8007a30 <HAL_GPIO_Init+0x334>)
 8007952:	697b      	ldr	r3, [r7, #20]
 8007954:	089b      	lsrs	r3, r3, #2
 8007956:	3302      	adds	r3, #2
 8007958:	693a      	ldr	r2, [r7, #16]
 800795a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800795e:	4b3b      	ldr	r3, [pc, #236]	; (8007a4c <HAL_GPIO_Init+0x350>)
 8007960:	689b      	ldr	r3, [r3, #8]
 8007962:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	43db      	mvns	r3, r3
 8007968:	693a      	ldr	r2, [r7, #16]
 800796a:	4013      	ands	r3, r2
 800796c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	685b      	ldr	r3, [r3, #4]
 8007972:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007976:	2b00      	cmp	r3, #0
 8007978:	d003      	beq.n	8007982 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800797a:	693a      	ldr	r2, [r7, #16]
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	4313      	orrs	r3, r2
 8007980:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007982:	4a32      	ldr	r2, [pc, #200]	; (8007a4c <HAL_GPIO_Init+0x350>)
 8007984:	693b      	ldr	r3, [r7, #16]
 8007986:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8007988:	4b30      	ldr	r3, [pc, #192]	; (8007a4c <HAL_GPIO_Init+0x350>)
 800798a:	68db      	ldr	r3, [r3, #12]
 800798c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	43db      	mvns	r3, r3
 8007992:	693a      	ldr	r2, [r7, #16]
 8007994:	4013      	ands	r3, r2
 8007996:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	685b      	ldr	r3, [r3, #4]
 800799c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d003      	beq.n	80079ac <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80079a4:	693a      	ldr	r2, [r7, #16]
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	4313      	orrs	r3, r2
 80079aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80079ac:	4a27      	ldr	r2, [pc, #156]	; (8007a4c <HAL_GPIO_Init+0x350>)
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80079b2:	4b26      	ldr	r3, [pc, #152]	; (8007a4c <HAL_GPIO_Init+0x350>)
 80079b4:	685b      	ldr	r3, [r3, #4]
 80079b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	43db      	mvns	r3, r3
 80079bc:	693a      	ldr	r2, [r7, #16]
 80079be:	4013      	ands	r3, r2
 80079c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	685b      	ldr	r3, [r3, #4]
 80079c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d003      	beq.n	80079d6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80079ce:	693a      	ldr	r2, [r7, #16]
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	4313      	orrs	r3, r2
 80079d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80079d6:	4a1d      	ldr	r2, [pc, #116]	; (8007a4c <HAL_GPIO_Init+0x350>)
 80079d8:	693b      	ldr	r3, [r7, #16]
 80079da:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80079dc:	4b1b      	ldr	r3, [pc, #108]	; (8007a4c <HAL_GPIO_Init+0x350>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	43db      	mvns	r3, r3
 80079e6:	693a      	ldr	r2, [r7, #16]
 80079e8:	4013      	ands	r3, r2
 80079ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	685b      	ldr	r3, [r3, #4]
 80079f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d003      	beq.n	8007a00 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80079f8:	693a      	ldr	r2, [r7, #16]
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	4313      	orrs	r3, r2
 80079fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007a00:	4a12      	ldr	r2, [pc, #72]	; (8007a4c <HAL_GPIO_Init+0x350>)
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8007a06:	697b      	ldr	r3, [r7, #20]
 8007a08:	3301      	adds	r3, #1
 8007a0a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	681a      	ldr	r2, [r3, #0]
 8007a10:	697b      	ldr	r3, [r7, #20]
 8007a12:	fa22 f303 	lsr.w	r3, r2, r3
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	f47f ae78 	bne.w	800770c <HAL_GPIO_Init+0x10>
  }
}
 8007a1c:	bf00      	nop
 8007a1e:	bf00      	nop
 8007a20:	371c      	adds	r7, #28
 8007a22:	46bd      	mov	sp, r7
 8007a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a28:	4770      	bx	lr
 8007a2a:	bf00      	nop
 8007a2c:	40021000 	.word	0x40021000
 8007a30:	40010000 	.word	0x40010000
 8007a34:	48000400 	.word	0x48000400
 8007a38:	48000800 	.word	0x48000800
 8007a3c:	48000c00 	.word	0x48000c00
 8007a40:	48001000 	.word	0x48001000
 8007a44:	48001400 	.word	0x48001400
 8007a48:	48001800 	.word	0x48001800
 8007a4c:	40010400 	.word	0x40010400

08007a50 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007a50:	b480      	push	{r7}
 8007a52:	b085      	sub	sp, #20
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
 8007a58:	460b      	mov	r3, r1
 8007a5a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	691a      	ldr	r2, [r3, #16]
 8007a60:	887b      	ldrh	r3, [r7, #2]
 8007a62:	4013      	ands	r3, r2
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d002      	beq.n	8007a6e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007a68:	2301      	movs	r3, #1
 8007a6a:	73fb      	strb	r3, [r7, #15]
 8007a6c:	e001      	b.n	8007a72 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007a72:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	3714      	adds	r7, #20
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7e:	4770      	bx	lr

08007a80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b083      	sub	sp, #12
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
 8007a88:	460b      	mov	r3, r1
 8007a8a:	807b      	strh	r3, [r7, #2]
 8007a8c:	4613      	mov	r3, r2
 8007a8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007a90:	787b      	ldrb	r3, [r7, #1]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d003      	beq.n	8007a9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007a96:	887a      	ldrh	r2, [r7, #2]
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007a9c:	e002      	b.n	8007aa4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007a9e:	887a      	ldrh	r2, [r7, #2]
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007aa4:	bf00      	nop
 8007aa6:	370c      	adds	r7, #12
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aae:	4770      	bx	lr

08007ab0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	b085      	sub	sp, #20
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
 8007ab8:	460b      	mov	r3, r1
 8007aba:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	695b      	ldr	r3, [r3, #20]
 8007ac0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007ac2:	887a      	ldrh	r2, [r7, #2]
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	4013      	ands	r3, r2
 8007ac8:	041a      	lsls	r2, r3, #16
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	43d9      	mvns	r1, r3
 8007ace:	887b      	ldrh	r3, [r7, #2]
 8007ad0:	400b      	ands	r3, r1
 8007ad2:	431a      	orrs	r2, r3
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	619a      	str	r2, [r3, #24]
}
 8007ad8:	bf00      	nop
 8007ada:	3714      	adds	r7, #20
 8007adc:	46bd      	mov	sp, r7
 8007ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae2:	4770      	bx	lr

08007ae4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b082      	sub	sp, #8
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	4603      	mov	r3, r0
 8007aec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8007aee:	4b08      	ldr	r3, [pc, #32]	; (8007b10 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007af0:	695a      	ldr	r2, [r3, #20]
 8007af2:	88fb      	ldrh	r3, [r7, #6]
 8007af4:	4013      	ands	r3, r2
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d006      	beq.n	8007b08 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007afa:	4a05      	ldr	r2, [pc, #20]	; (8007b10 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007afc:	88fb      	ldrh	r3, [r7, #6]
 8007afe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007b00:	88fb      	ldrh	r3, [r7, #6]
 8007b02:	4618      	mov	r0, r3
 8007b04:	f7fd fa44 	bl	8004f90 <HAL_GPIO_EXTI_Callback>
  }
}
 8007b08:	bf00      	nop
 8007b0a:	3708      	adds	r7, #8
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd80      	pop	{r7, pc}
 8007b10:	40010400 	.word	0x40010400

08007b14 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b082      	sub	sp, #8
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d101      	bne.n	8007b26 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007b22:	2301      	movs	r3, #1
 8007b24:	e081      	b.n	8007c2a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b2c:	b2db      	uxtb	r3, r3
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d106      	bne.n	8007b40 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2200      	movs	r2, #0
 8007b36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f7fd fede 	bl	80058fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2224      	movs	r2, #36	; 0x24
 8007b44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	681a      	ldr	r2, [r3, #0]
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f022 0201 	bic.w	r2, r2, #1
 8007b56:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	685a      	ldr	r2, [r3, #4]
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007b64:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	689a      	ldr	r2, [r3, #8]
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007b74:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	68db      	ldr	r3, [r3, #12]
 8007b7a:	2b01      	cmp	r3, #1
 8007b7c:	d107      	bne.n	8007b8e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	689a      	ldr	r2, [r3, #8]
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007b8a:	609a      	str	r2, [r3, #8]
 8007b8c:	e006      	b.n	8007b9c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	689a      	ldr	r2, [r3, #8]
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007b9a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	68db      	ldr	r3, [r3, #12]
 8007ba0:	2b02      	cmp	r3, #2
 8007ba2:	d104      	bne.n	8007bae <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007bac:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	685b      	ldr	r3, [r3, #4]
 8007bb4:	687a      	ldr	r2, [r7, #4]
 8007bb6:	6812      	ldr	r2, [r2, #0]
 8007bb8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007bbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bc0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	68da      	ldr	r2, [r3, #12]
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007bd0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	691a      	ldr	r2, [r3, #16]
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	695b      	ldr	r3, [r3, #20]
 8007bda:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	699b      	ldr	r3, [r3, #24]
 8007be2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	430a      	orrs	r2, r1
 8007bea:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	69d9      	ldr	r1, [r3, #28]
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6a1a      	ldr	r2, [r3, #32]
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	430a      	orrs	r2, r1
 8007bfa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	681a      	ldr	r2, [r3, #0]
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f042 0201 	orr.w	r2, r2, #1
 8007c0a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2220      	movs	r2, #32
 8007c16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2200      	movs	r2, #0
 8007c24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007c28:	2300      	movs	r3, #0
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	3708      	adds	r7, #8
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}
	...

08007c34 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b088      	sub	sp, #32
 8007c38:	af02      	add	r7, sp, #8
 8007c3a:	60f8      	str	r0, [r7, #12]
 8007c3c:	607a      	str	r2, [r7, #4]
 8007c3e:	461a      	mov	r2, r3
 8007c40:	460b      	mov	r3, r1
 8007c42:	817b      	strh	r3, [r7, #10]
 8007c44:	4613      	mov	r3, r2
 8007c46:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007c4e:	b2db      	uxtb	r3, r3
 8007c50:	2b20      	cmp	r3, #32
 8007c52:	f040 80da 	bne.w	8007e0a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007c5c:	2b01      	cmp	r3, #1
 8007c5e:	d101      	bne.n	8007c64 <HAL_I2C_Master_Transmit+0x30>
 8007c60:	2302      	movs	r3, #2
 8007c62:	e0d3      	b.n	8007e0c <HAL_I2C_Master_Transmit+0x1d8>
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	2201      	movs	r2, #1
 8007c68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007c6c:	f7ff f92e 	bl	8006ecc <HAL_GetTick>
 8007c70:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007c72:	697b      	ldr	r3, [r7, #20]
 8007c74:	9300      	str	r3, [sp, #0]
 8007c76:	2319      	movs	r3, #25
 8007c78:	2201      	movs	r2, #1
 8007c7a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007c7e:	68f8      	ldr	r0, [r7, #12]
 8007c80:	f001 f8d1 	bl	8008e26 <I2C_WaitOnFlagUntilTimeout>
 8007c84:	4603      	mov	r3, r0
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d001      	beq.n	8007c8e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	e0be      	b.n	8007e0c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	2221      	movs	r2, #33	; 0x21
 8007c92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	2210      	movs	r2, #16
 8007c9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	687a      	ldr	r2, [r7, #4]
 8007ca8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	893a      	ldrh	r2, [r7, #8]
 8007cae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cba:	b29b      	uxth	r3, r3
 8007cbc:	2bff      	cmp	r3, #255	; 0xff
 8007cbe:	d90e      	bls.n	8007cde <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	22ff      	movs	r2, #255	; 0xff
 8007cc4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cca:	b2da      	uxtb	r2, r3
 8007ccc:	8979      	ldrh	r1, [r7, #10]
 8007cce:	4b51      	ldr	r3, [pc, #324]	; (8007e14 <HAL_I2C_Master_Transmit+0x1e0>)
 8007cd0:	9300      	str	r3, [sp, #0]
 8007cd2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007cd6:	68f8      	ldr	r0, [r7, #12]
 8007cd8:	f001 fa4e 	bl	8009178 <I2C_TransferConfig>
 8007cdc:	e06c      	b.n	8007db8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ce2:	b29a      	uxth	r2, r3
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cec:	b2da      	uxtb	r2, r3
 8007cee:	8979      	ldrh	r1, [r7, #10]
 8007cf0:	4b48      	ldr	r3, [pc, #288]	; (8007e14 <HAL_I2C_Master_Transmit+0x1e0>)
 8007cf2:	9300      	str	r3, [sp, #0]
 8007cf4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007cf8:	68f8      	ldr	r0, [r7, #12]
 8007cfa:	f001 fa3d 	bl	8009178 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8007cfe:	e05b      	b.n	8007db8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007d00:	697a      	ldr	r2, [r7, #20]
 8007d02:	6a39      	ldr	r1, [r7, #32]
 8007d04:	68f8      	ldr	r0, [r7, #12]
 8007d06:	f001 f8ce 	bl	8008ea6 <I2C_WaitOnTXISFlagUntilTimeout>
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d001      	beq.n	8007d14 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8007d10:	2301      	movs	r3, #1
 8007d12:	e07b      	b.n	8007e0c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d18:	781a      	ldrb	r2, [r3, #0]
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d24:	1c5a      	adds	r2, r3, #1
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d2e:	b29b      	uxth	r3, r3
 8007d30:	3b01      	subs	r3, #1
 8007d32:	b29a      	uxth	r2, r3
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d3c:	3b01      	subs	r3, #1
 8007d3e:	b29a      	uxth	r2, r3
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d48:	b29b      	uxth	r3, r3
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d034      	beq.n	8007db8 <HAL_I2C_Master_Transmit+0x184>
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d130      	bne.n	8007db8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007d56:	697b      	ldr	r3, [r7, #20]
 8007d58:	9300      	str	r3, [sp, #0]
 8007d5a:	6a3b      	ldr	r3, [r7, #32]
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	2180      	movs	r1, #128	; 0x80
 8007d60:	68f8      	ldr	r0, [r7, #12]
 8007d62:	f001 f860 	bl	8008e26 <I2C_WaitOnFlagUntilTimeout>
 8007d66:	4603      	mov	r3, r0
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d001      	beq.n	8007d70 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	e04d      	b.n	8007e0c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d74:	b29b      	uxth	r3, r3
 8007d76:	2bff      	cmp	r3, #255	; 0xff
 8007d78:	d90e      	bls.n	8007d98 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	22ff      	movs	r2, #255	; 0xff
 8007d7e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d84:	b2da      	uxtb	r2, r3
 8007d86:	8979      	ldrh	r1, [r7, #10]
 8007d88:	2300      	movs	r3, #0
 8007d8a:	9300      	str	r3, [sp, #0]
 8007d8c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007d90:	68f8      	ldr	r0, [r7, #12]
 8007d92:	f001 f9f1 	bl	8009178 <I2C_TransferConfig>
 8007d96:	e00f      	b.n	8007db8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d9c:	b29a      	uxth	r2, r3
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007da6:	b2da      	uxtb	r2, r3
 8007da8:	8979      	ldrh	r1, [r7, #10]
 8007daa:	2300      	movs	r3, #0
 8007dac:	9300      	str	r3, [sp, #0]
 8007dae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007db2:	68f8      	ldr	r0, [r7, #12]
 8007db4:	f001 f9e0 	bl	8009178 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dbc:	b29b      	uxth	r3, r3
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d19e      	bne.n	8007d00 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007dc2:	697a      	ldr	r2, [r7, #20]
 8007dc4:	6a39      	ldr	r1, [r7, #32]
 8007dc6:	68f8      	ldr	r0, [r7, #12]
 8007dc8:	f001 f8ad 	bl	8008f26 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007dcc:	4603      	mov	r3, r0
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d001      	beq.n	8007dd6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	e01a      	b.n	8007e0c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	2220      	movs	r2, #32
 8007ddc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	6859      	ldr	r1, [r3, #4]
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	681a      	ldr	r2, [r3, #0]
 8007de8:	4b0b      	ldr	r3, [pc, #44]	; (8007e18 <HAL_I2C_Master_Transmit+0x1e4>)
 8007dea:	400b      	ands	r3, r1
 8007dec:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	2220      	movs	r2, #32
 8007df2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	2200      	movs	r2, #0
 8007dfa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	2200      	movs	r2, #0
 8007e02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007e06:	2300      	movs	r3, #0
 8007e08:	e000      	b.n	8007e0c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8007e0a:	2302      	movs	r3, #2
  }
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	3718      	adds	r7, #24
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bd80      	pop	{r7, pc}
 8007e14:	80002000 	.word	0x80002000
 8007e18:	fe00e800 	.word	0xfe00e800

08007e1c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b088      	sub	sp, #32
 8007e20:	af02      	add	r7, sp, #8
 8007e22:	60f8      	str	r0, [r7, #12]
 8007e24:	4608      	mov	r0, r1
 8007e26:	4611      	mov	r1, r2
 8007e28:	461a      	mov	r2, r3
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	817b      	strh	r3, [r7, #10]
 8007e2e:	460b      	mov	r3, r1
 8007e30:	813b      	strh	r3, [r7, #8]
 8007e32:	4613      	mov	r3, r2
 8007e34:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007e3c:	b2db      	uxtb	r3, r3
 8007e3e:	2b20      	cmp	r3, #32
 8007e40:	f040 80f9 	bne.w	8008036 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e44:	6a3b      	ldr	r3, [r7, #32]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d002      	beq.n	8007e50 <HAL_I2C_Mem_Write+0x34>
 8007e4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d105      	bne.n	8007e5c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e56:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007e58:	2301      	movs	r3, #1
 8007e5a:	e0ed      	b.n	8008038 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007e62:	2b01      	cmp	r3, #1
 8007e64:	d101      	bne.n	8007e6a <HAL_I2C_Mem_Write+0x4e>
 8007e66:	2302      	movs	r3, #2
 8007e68:	e0e6      	b.n	8008038 <HAL_I2C_Mem_Write+0x21c>
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	2201      	movs	r2, #1
 8007e6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007e72:	f7ff f82b 	bl	8006ecc <HAL_GetTick>
 8007e76:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007e78:	697b      	ldr	r3, [r7, #20]
 8007e7a:	9300      	str	r3, [sp, #0]
 8007e7c:	2319      	movs	r3, #25
 8007e7e:	2201      	movs	r2, #1
 8007e80:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007e84:	68f8      	ldr	r0, [r7, #12]
 8007e86:	f000 ffce 	bl	8008e26 <I2C_WaitOnFlagUntilTimeout>
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d001      	beq.n	8007e94 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8007e90:	2301      	movs	r3, #1
 8007e92:	e0d1      	b.n	8008038 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	2221      	movs	r2, #33	; 0x21
 8007e98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	2240      	movs	r2, #64	; 0x40
 8007ea0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	6a3a      	ldr	r2, [r7, #32]
 8007eae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007eb4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	2200      	movs	r2, #0
 8007eba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007ebc:	88f8      	ldrh	r0, [r7, #6]
 8007ebe:	893a      	ldrh	r2, [r7, #8]
 8007ec0:	8979      	ldrh	r1, [r7, #10]
 8007ec2:	697b      	ldr	r3, [r7, #20]
 8007ec4:	9301      	str	r3, [sp, #4]
 8007ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ec8:	9300      	str	r3, [sp, #0]
 8007eca:	4603      	mov	r3, r0
 8007ecc:	68f8      	ldr	r0, [r7, #12]
 8007ece:	f000 fb87 	bl	80085e0 <I2C_RequestMemoryWrite>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d005      	beq.n	8007ee4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	2200      	movs	r2, #0
 8007edc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	e0a9      	b.n	8008038 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ee8:	b29b      	uxth	r3, r3
 8007eea:	2bff      	cmp	r3, #255	; 0xff
 8007eec:	d90e      	bls.n	8007f0c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	22ff      	movs	r2, #255	; 0xff
 8007ef2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ef8:	b2da      	uxtb	r2, r3
 8007efa:	8979      	ldrh	r1, [r7, #10]
 8007efc:	2300      	movs	r3, #0
 8007efe:	9300      	str	r3, [sp, #0]
 8007f00:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007f04:	68f8      	ldr	r0, [r7, #12]
 8007f06:	f001 f937 	bl	8009178 <I2C_TransferConfig>
 8007f0a:	e00f      	b.n	8007f2c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f10:	b29a      	uxth	r2, r3
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f1a:	b2da      	uxtb	r2, r3
 8007f1c:	8979      	ldrh	r1, [r7, #10]
 8007f1e:	2300      	movs	r3, #0
 8007f20:	9300      	str	r3, [sp, #0]
 8007f22:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007f26:	68f8      	ldr	r0, [r7, #12]
 8007f28:	f001 f926 	bl	8009178 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007f2c:	697a      	ldr	r2, [r7, #20]
 8007f2e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f30:	68f8      	ldr	r0, [r7, #12]
 8007f32:	f000 ffb8 	bl	8008ea6 <I2C_WaitOnTXISFlagUntilTimeout>
 8007f36:	4603      	mov	r3, r0
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d001      	beq.n	8007f40 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8007f3c:	2301      	movs	r3, #1
 8007f3e:	e07b      	b.n	8008038 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f44:	781a      	ldrb	r2, [r3, #0]
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f50:	1c5a      	adds	r2, r3, #1
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f5a:	b29b      	uxth	r3, r3
 8007f5c:	3b01      	subs	r3, #1
 8007f5e:	b29a      	uxth	r2, r3
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f68:	3b01      	subs	r3, #1
 8007f6a:	b29a      	uxth	r2, r3
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f74:	b29b      	uxth	r3, r3
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d034      	beq.n	8007fe4 <HAL_I2C_Mem_Write+0x1c8>
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d130      	bne.n	8007fe4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007f82:	697b      	ldr	r3, [r7, #20]
 8007f84:	9300      	str	r3, [sp, #0]
 8007f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f88:	2200      	movs	r2, #0
 8007f8a:	2180      	movs	r1, #128	; 0x80
 8007f8c:	68f8      	ldr	r0, [r7, #12]
 8007f8e:	f000 ff4a 	bl	8008e26 <I2C_WaitOnFlagUntilTimeout>
 8007f92:	4603      	mov	r3, r0
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d001      	beq.n	8007f9c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8007f98:	2301      	movs	r3, #1
 8007f9a:	e04d      	b.n	8008038 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fa0:	b29b      	uxth	r3, r3
 8007fa2:	2bff      	cmp	r3, #255	; 0xff
 8007fa4:	d90e      	bls.n	8007fc4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	22ff      	movs	r2, #255	; 0xff
 8007faa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fb0:	b2da      	uxtb	r2, r3
 8007fb2:	8979      	ldrh	r1, [r7, #10]
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	9300      	str	r3, [sp, #0]
 8007fb8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007fbc:	68f8      	ldr	r0, [r7, #12]
 8007fbe:	f001 f8db 	bl	8009178 <I2C_TransferConfig>
 8007fc2:	e00f      	b.n	8007fe4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fc8:	b29a      	uxth	r2, r3
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fd2:	b2da      	uxtb	r2, r3
 8007fd4:	8979      	ldrh	r1, [r7, #10]
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	9300      	str	r3, [sp, #0]
 8007fda:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007fde:	68f8      	ldr	r0, [r7, #12]
 8007fe0:	f001 f8ca 	bl	8009178 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fe8:	b29b      	uxth	r3, r3
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d19e      	bne.n	8007f2c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007fee:	697a      	ldr	r2, [r7, #20]
 8007ff0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007ff2:	68f8      	ldr	r0, [r7, #12]
 8007ff4:	f000 ff97 	bl	8008f26 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d001      	beq.n	8008002 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8007ffe:	2301      	movs	r3, #1
 8008000:	e01a      	b.n	8008038 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	2220      	movs	r2, #32
 8008008:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	6859      	ldr	r1, [r3, #4]
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	681a      	ldr	r2, [r3, #0]
 8008014:	4b0a      	ldr	r3, [pc, #40]	; (8008040 <HAL_I2C_Mem_Write+0x224>)
 8008016:	400b      	ands	r3, r1
 8008018:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	2220      	movs	r2, #32
 800801e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	2200      	movs	r2, #0
 8008026:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	2200      	movs	r2, #0
 800802e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008032:	2300      	movs	r3, #0
 8008034:	e000      	b.n	8008038 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8008036:	2302      	movs	r3, #2
  }
}
 8008038:	4618      	mov	r0, r3
 800803a:	3718      	adds	r7, #24
 800803c:	46bd      	mov	sp, r7
 800803e:	bd80      	pop	{r7, pc}
 8008040:	fe00e800 	.word	0xfe00e800

08008044 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b088      	sub	sp, #32
 8008048:	af02      	add	r7, sp, #8
 800804a:	60f8      	str	r0, [r7, #12]
 800804c:	4608      	mov	r0, r1
 800804e:	4611      	mov	r1, r2
 8008050:	461a      	mov	r2, r3
 8008052:	4603      	mov	r3, r0
 8008054:	817b      	strh	r3, [r7, #10]
 8008056:	460b      	mov	r3, r1
 8008058:	813b      	strh	r3, [r7, #8]
 800805a:	4613      	mov	r3, r2
 800805c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008064:	b2db      	uxtb	r3, r3
 8008066:	2b20      	cmp	r3, #32
 8008068:	f040 80fd 	bne.w	8008266 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800806c:	6a3b      	ldr	r3, [r7, #32]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d002      	beq.n	8008078 <HAL_I2C_Mem_Read+0x34>
 8008072:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008074:	2b00      	cmp	r3, #0
 8008076:	d105      	bne.n	8008084 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800807e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008080:	2301      	movs	r3, #1
 8008082:	e0f1      	b.n	8008268 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800808a:	2b01      	cmp	r3, #1
 800808c:	d101      	bne.n	8008092 <HAL_I2C_Mem_Read+0x4e>
 800808e:	2302      	movs	r3, #2
 8008090:	e0ea      	b.n	8008268 <HAL_I2C_Mem_Read+0x224>
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	2201      	movs	r2, #1
 8008096:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800809a:	f7fe ff17 	bl	8006ecc <HAL_GetTick>
 800809e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80080a0:	697b      	ldr	r3, [r7, #20]
 80080a2:	9300      	str	r3, [sp, #0]
 80080a4:	2319      	movs	r3, #25
 80080a6:	2201      	movs	r2, #1
 80080a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80080ac:	68f8      	ldr	r0, [r7, #12]
 80080ae:	f000 feba 	bl	8008e26 <I2C_WaitOnFlagUntilTimeout>
 80080b2:	4603      	mov	r3, r0
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d001      	beq.n	80080bc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80080b8:	2301      	movs	r3, #1
 80080ba:	e0d5      	b.n	8008268 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	2222      	movs	r2, #34	; 0x22
 80080c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	2240      	movs	r2, #64	; 0x40
 80080c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	2200      	movs	r2, #0
 80080d0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	6a3a      	ldr	r2, [r7, #32]
 80080d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80080dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	2200      	movs	r2, #0
 80080e2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80080e4:	88f8      	ldrh	r0, [r7, #6]
 80080e6:	893a      	ldrh	r2, [r7, #8]
 80080e8:	8979      	ldrh	r1, [r7, #10]
 80080ea:	697b      	ldr	r3, [r7, #20]
 80080ec:	9301      	str	r3, [sp, #4]
 80080ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080f0:	9300      	str	r3, [sp, #0]
 80080f2:	4603      	mov	r3, r0
 80080f4:	68f8      	ldr	r0, [r7, #12]
 80080f6:	f000 fac7 	bl	8008688 <I2C_RequestMemoryRead>
 80080fa:	4603      	mov	r3, r0
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d005      	beq.n	800810c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	2200      	movs	r2, #0
 8008104:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008108:	2301      	movs	r3, #1
 800810a:	e0ad      	b.n	8008268 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008110:	b29b      	uxth	r3, r3
 8008112:	2bff      	cmp	r3, #255	; 0xff
 8008114:	d90e      	bls.n	8008134 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	22ff      	movs	r2, #255	; 0xff
 800811a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008120:	b2da      	uxtb	r2, r3
 8008122:	8979      	ldrh	r1, [r7, #10]
 8008124:	4b52      	ldr	r3, [pc, #328]	; (8008270 <HAL_I2C_Mem_Read+0x22c>)
 8008126:	9300      	str	r3, [sp, #0]
 8008128:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800812c:	68f8      	ldr	r0, [r7, #12]
 800812e:	f001 f823 	bl	8009178 <I2C_TransferConfig>
 8008132:	e00f      	b.n	8008154 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008138:	b29a      	uxth	r2, r3
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008142:	b2da      	uxtb	r2, r3
 8008144:	8979      	ldrh	r1, [r7, #10]
 8008146:	4b4a      	ldr	r3, [pc, #296]	; (8008270 <HAL_I2C_Mem_Read+0x22c>)
 8008148:	9300      	str	r3, [sp, #0]
 800814a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800814e:	68f8      	ldr	r0, [r7, #12]
 8008150:	f001 f812 	bl	8009178 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8008154:	697b      	ldr	r3, [r7, #20]
 8008156:	9300      	str	r3, [sp, #0]
 8008158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800815a:	2200      	movs	r2, #0
 800815c:	2104      	movs	r1, #4
 800815e:	68f8      	ldr	r0, [r7, #12]
 8008160:	f000 fe61 	bl	8008e26 <I2C_WaitOnFlagUntilTimeout>
 8008164:	4603      	mov	r3, r0
 8008166:	2b00      	cmp	r3, #0
 8008168:	d001      	beq.n	800816e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800816a:	2301      	movs	r3, #1
 800816c:	e07c      	b.n	8008268 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008178:	b2d2      	uxtb	r2, r2
 800817a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008180:	1c5a      	adds	r2, r3, #1
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800818a:	3b01      	subs	r3, #1
 800818c:	b29a      	uxth	r2, r3
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008196:	b29b      	uxth	r3, r3
 8008198:	3b01      	subs	r3, #1
 800819a:	b29a      	uxth	r2, r3
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081a4:	b29b      	uxth	r3, r3
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d034      	beq.n	8008214 <HAL_I2C_Mem_Read+0x1d0>
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d130      	bne.n	8008214 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80081b2:	697b      	ldr	r3, [r7, #20]
 80081b4:	9300      	str	r3, [sp, #0]
 80081b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081b8:	2200      	movs	r2, #0
 80081ba:	2180      	movs	r1, #128	; 0x80
 80081bc:	68f8      	ldr	r0, [r7, #12]
 80081be:	f000 fe32 	bl	8008e26 <I2C_WaitOnFlagUntilTimeout>
 80081c2:	4603      	mov	r3, r0
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d001      	beq.n	80081cc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80081c8:	2301      	movs	r3, #1
 80081ca:	e04d      	b.n	8008268 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081d0:	b29b      	uxth	r3, r3
 80081d2:	2bff      	cmp	r3, #255	; 0xff
 80081d4:	d90e      	bls.n	80081f4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	22ff      	movs	r2, #255	; 0xff
 80081da:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081e0:	b2da      	uxtb	r2, r3
 80081e2:	8979      	ldrh	r1, [r7, #10]
 80081e4:	2300      	movs	r3, #0
 80081e6:	9300      	str	r3, [sp, #0]
 80081e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80081ec:	68f8      	ldr	r0, [r7, #12]
 80081ee:	f000 ffc3 	bl	8009178 <I2C_TransferConfig>
 80081f2:	e00f      	b.n	8008214 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081f8:	b29a      	uxth	r2, r3
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008202:	b2da      	uxtb	r2, r3
 8008204:	8979      	ldrh	r1, [r7, #10]
 8008206:	2300      	movs	r3, #0
 8008208:	9300      	str	r3, [sp, #0]
 800820a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800820e:	68f8      	ldr	r0, [r7, #12]
 8008210:	f000 ffb2 	bl	8009178 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008218:	b29b      	uxth	r3, r3
 800821a:	2b00      	cmp	r3, #0
 800821c:	d19a      	bne.n	8008154 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800821e:	697a      	ldr	r2, [r7, #20]
 8008220:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008222:	68f8      	ldr	r0, [r7, #12]
 8008224:	f000 fe7f 	bl	8008f26 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008228:	4603      	mov	r3, r0
 800822a:	2b00      	cmp	r3, #0
 800822c:	d001      	beq.n	8008232 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800822e:	2301      	movs	r3, #1
 8008230:	e01a      	b.n	8008268 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	2220      	movs	r2, #32
 8008238:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	6859      	ldr	r1, [r3, #4]
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	681a      	ldr	r2, [r3, #0]
 8008244:	4b0b      	ldr	r3, [pc, #44]	; (8008274 <HAL_I2C_Mem_Read+0x230>)
 8008246:	400b      	ands	r3, r1
 8008248:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	2220      	movs	r2, #32
 800824e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	2200      	movs	r2, #0
 8008256:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	2200      	movs	r2, #0
 800825e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008262:	2300      	movs	r3, #0
 8008264:	e000      	b.n	8008268 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8008266:	2302      	movs	r3, #2
  }
}
 8008268:	4618      	mov	r0, r3
 800826a:	3718      	adds	r7, #24
 800826c:	46bd      	mov	sp, r7
 800826e:	bd80      	pop	{r7, pc}
 8008270:	80002400 	.word	0x80002400
 8008274:	fe00e800 	.word	0xfe00e800

08008278 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b084      	sub	sp, #16
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	699b      	ldr	r3, [r3, #24]
 8008286:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008294:	2b00      	cmp	r3, #0
 8008296:	d005      	beq.n	80082a4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800829c:	68ba      	ldr	r2, [r7, #8]
 800829e:	68f9      	ldr	r1, [r7, #12]
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	4798      	blx	r3
  }
}
 80082a4:	bf00      	nop
 80082a6:	3710      	adds	r7, #16
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bd80      	pop	{r7, pc}

080082ac <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b086      	sub	sp, #24
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	699b      	ldr	r3, [r3, #24]
 80082ba:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80082c4:	697b      	ldr	r3, [r7, #20]
 80082c6:	0a1b      	lsrs	r3, r3, #8
 80082c8:	f003 0301 	and.w	r3, r3, #1
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d010      	beq.n	80082f2 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80082d0:	693b      	ldr	r3, [r7, #16]
 80082d2:	09db      	lsrs	r3, r3, #7
 80082d4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d00a      	beq.n	80082f2 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082e0:	f043 0201 	orr.w	r2, r3, #1
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80082f0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80082f2:	697b      	ldr	r3, [r7, #20]
 80082f4:	0a9b      	lsrs	r3, r3, #10
 80082f6:	f003 0301 	and.w	r3, r3, #1
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d010      	beq.n	8008320 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80082fe:	693b      	ldr	r3, [r7, #16]
 8008300:	09db      	lsrs	r3, r3, #7
 8008302:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8008306:	2b00      	cmp	r3, #0
 8008308:	d00a      	beq.n	8008320 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800830e:	f043 0208 	orr.w	r2, r3, #8
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800831e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8008320:	697b      	ldr	r3, [r7, #20]
 8008322:	0a5b      	lsrs	r3, r3, #9
 8008324:	f003 0301 	and.w	r3, r3, #1
 8008328:	2b00      	cmp	r3, #0
 800832a:	d010      	beq.n	800834e <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800832c:	693b      	ldr	r3, [r7, #16]
 800832e:	09db      	lsrs	r3, r3, #7
 8008330:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8008334:	2b00      	cmp	r3, #0
 8008336:	d00a      	beq.n	800834e <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800833c:	f043 0202 	orr.w	r2, r3, #2
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f44f 7200 	mov.w	r2, #512	; 0x200
 800834c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008352:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	f003 030b 	and.w	r3, r3, #11
 800835a:	2b00      	cmp	r3, #0
 800835c:	d003      	beq.n	8008366 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800835e:	68f9      	ldr	r1, [r7, #12]
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f000 fc27 	bl	8008bb4 <I2C_ITError>
  }
}
 8008366:	bf00      	nop
 8008368:	3718      	adds	r7, #24
 800836a:	46bd      	mov	sp, r7
 800836c:	bd80      	pop	{r7, pc}

0800836e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800836e:	b480      	push	{r7}
 8008370:	b083      	sub	sp, #12
 8008372:	af00      	add	r7, sp, #0
 8008374:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8008376:	bf00      	nop
 8008378:	370c      	adds	r7, #12
 800837a:	46bd      	mov	sp, r7
 800837c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008380:	4770      	bx	lr

08008382 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008382:	b480      	push	{r7}
 8008384:	b083      	sub	sp, #12
 8008386:	af00      	add	r7, sp, #0
 8008388:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800838a:	bf00      	nop
 800838c:	370c      	adds	r7, #12
 800838e:	46bd      	mov	sp, r7
 8008390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008394:	4770      	bx	lr

08008396 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8008396:	b480      	push	{r7}
 8008398:	b083      	sub	sp, #12
 800839a:	af00      	add	r7, sp, #0
 800839c:	6078      	str	r0, [r7, #4]
 800839e:	460b      	mov	r3, r1
 80083a0:	70fb      	strb	r3, [r7, #3]
 80083a2:	4613      	mov	r3, r2
 80083a4:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80083a6:	bf00      	nop
 80083a8:	370c      	adds	r7, #12
 80083aa:	46bd      	mov	sp, r7
 80083ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b0:	4770      	bx	lr

080083b2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80083b2:	b480      	push	{r7}
 80083b4:	b083      	sub	sp, #12
 80083b6:	af00      	add	r7, sp, #0
 80083b8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80083ba:	bf00      	nop
 80083bc:	370c      	adds	r7, #12
 80083be:	46bd      	mov	sp, r7
 80083c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c4:	4770      	bx	lr

080083c6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80083c6:	b480      	push	{r7}
 80083c8:	b083      	sub	sp, #12
 80083ca:	af00      	add	r7, sp, #0
 80083cc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80083ce:	bf00      	nop
 80083d0:	370c      	adds	r7, #12
 80083d2:	46bd      	mov	sp, r7
 80083d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d8:	4770      	bx	lr

080083da <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80083da:	b580      	push	{r7, lr}
 80083dc:	b086      	sub	sp, #24
 80083de:	af00      	add	r7, sp, #0
 80083e0:	60f8      	str	r0, [r7, #12]
 80083e2:	60b9      	str	r1, [r7, #8]
 80083e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083ea:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80083f6:	2b01      	cmp	r3, #1
 80083f8:	d101      	bne.n	80083fe <I2C_Slave_ISR_IT+0x24>
 80083fa:	2302      	movs	r3, #2
 80083fc:	e0ec      	b.n	80085d8 <I2C_Slave_ISR_IT+0x1fe>
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	2201      	movs	r2, #1
 8008402:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008406:	693b      	ldr	r3, [r7, #16]
 8008408:	095b      	lsrs	r3, r3, #5
 800840a:	f003 0301 	and.w	r3, r3, #1
 800840e:	2b00      	cmp	r3, #0
 8008410:	d009      	beq.n	8008426 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	095b      	lsrs	r3, r3, #5
 8008416:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800841a:	2b00      	cmp	r3, #0
 800841c:	d003      	beq.n	8008426 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800841e:	6939      	ldr	r1, [r7, #16]
 8008420:	68f8      	ldr	r0, [r7, #12]
 8008422:	f000 fa67 	bl	80088f4 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008426:	693b      	ldr	r3, [r7, #16]
 8008428:	091b      	lsrs	r3, r3, #4
 800842a:	f003 0301 	and.w	r3, r3, #1
 800842e:	2b00      	cmp	r3, #0
 8008430:	d04d      	beq.n	80084ce <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	091b      	lsrs	r3, r3, #4
 8008436:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800843a:	2b00      	cmp	r3, #0
 800843c:	d047      	beq.n	80084ce <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008442:	b29b      	uxth	r3, r3
 8008444:	2b00      	cmp	r3, #0
 8008446:	d128      	bne.n	800849a <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800844e:	b2db      	uxtb	r3, r3
 8008450:	2b28      	cmp	r3, #40	; 0x28
 8008452:	d108      	bne.n	8008466 <I2C_Slave_ISR_IT+0x8c>
 8008454:	697b      	ldr	r3, [r7, #20]
 8008456:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800845a:	d104      	bne.n	8008466 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800845c:	6939      	ldr	r1, [r7, #16]
 800845e:	68f8      	ldr	r0, [r7, #12]
 8008460:	f000 fb52 	bl	8008b08 <I2C_ITListenCplt>
 8008464:	e032      	b.n	80084cc <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800846c:	b2db      	uxtb	r3, r3
 800846e:	2b29      	cmp	r3, #41	; 0x29
 8008470:	d10e      	bne.n	8008490 <I2C_Slave_ISR_IT+0xb6>
 8008472:	697b      	ldr	r3, [r7, #20]
 8008474:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008478:	d00a      	beq.n	8008490 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	2210      	movs	r2, #16
 8008480:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8008482:	68f8      	ldr	r0, [r7, #12]
 8008484:	f000 fc8d 	bl	8008da2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8008488:	68f8      	ldr	r0, [r7, #12]
 800848a:	f000 f9d5 	bl	8008838 <I2C_ITSlaveSeqCplt>
 800848e:	e01d      	b.n	80084cc <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	2210      	movs	r2, #16
 8008496:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8008498:	e096      	b.n	80085c8 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	2210      	movs	r2, #16
 80084a0:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084a6:	f043 0204 	orr.w	r2, r3, #4
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80084ae:	697b      	ldr	r3, [r7, #20]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d004      	beq.n	80084be <I2C_Slave_ISR_IT+0xe4>
 80084b4:	697b      	ldr	r3, [r7, #20]
 80084b6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80084ba:	f040 8085 	bne.w	80085c8 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084c2:	4619      	mov	r1, r3
 80084c4:	68f8      	ldr	r0, [r7, #12]
 80084c6:	f000 fb75 	bl	8008bb4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80084ca:	e07d      	b.n	80085c8 <I2C_Slave_ISR_IT+0x1ee>
 80084cc:	e07c      	b.n	80085c8 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80084ce:	693b      	ldr	r3, [r7, #16]
 80084d0:	089b      	lsrs	r3, r3, #2
 80084d2:	f003 0301 	and.w	r3, r3, #1
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d030      	beq.n	800853c <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	089b      	lsrs	r3, r3, #2
 80084de:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d02a      	beq.n	800853c <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084ea:	b29b      	uxth	r3, r3
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d018      	beq.n	8008522 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084fa:	b2d2      	uxtb	r2, r2
 80084fc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008502:	1c5a      	adds	r2, r3, #1
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800850c:	3b01      	subs	r3, #1
 800850e:	b29a      	uxth	r2, r3
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008518:	b29b      	uxth	r3, r3
 800851a:	3b01      	subs	r3, #1
 800851c:	b29a      	uxth	r2, r3
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008526:	b29b      	uxth	r3, r3
 8008528:	2b00      	cmp	r3, #0
 800852a:	d14f      	bne.n	80085cc <I2C_Slave_ISR_IT+0x1f2>
 800852c:	697b      	ldr	r3, [r7, #20]
 800852e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008532:	d04b      	beq.n	80085cc <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8008534:	68f8      	ldr	r0, [r7, #12]
 8008536:	f000 f97f 	bl	8008838 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800853a:	e047      	b.n	80085cc <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800853c:	693b      	ldr	r3, [r7, #16]
 800853e:	08db      	lsrs	r3, r3, #3
 8008540:	f003 0301 	and.w	r3, r3, #1
 8008544:	2b00      	cmp	r3, #0
 8008546:	d00a      	beq.n	800855e <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	08db      	lsrs	r3, r3, #3
 800854c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8008550:	2b00      	cmp	r3, #0
 8008552:	d004      	beq.n	800855e <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8008554:	6939      	ldr	r1, [r7, #16]
 8008556:	68f8      	ldr	r0, [r7, #12]
 8008558:	f000 f8ea 	bl	8008730 <I2C_ITAddrCplt>
 800855c:	e037      	b.n	80085ce <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800855e:	693b      	ldr	r3, [r7, #16]
 8008560:	085b      	lsrs	r3, r3, #1
 8008562:	f003 0301 	and.w	r3, r3, #1
 8008566:	2b00      	cmp	r3, #0
 8008568:	d031      	beq.n	80085ce <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	085b      	lsrs	r3, r3, #1
 800856e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8008572:	2b00      	cmp	r3, #0
 8008574:	d02b      	beq.n	80085ce <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800857a:	b29b      	uxth	r3, r3
 800857c:	2b00      	cmp	r3, #0
 800857e:	d018      	beq.n	80085b2 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008584:	781a      	ldrb	r2, [r3, #0]
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008590:	1c5a      	adds	r2, r3, #1
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800859a:	b29b      	uxth	r3, r3
 800859c:	3b01      	subs	r3, #1
 800859e:	b29a      	uxth	r2, r3
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80085a8:	3b01      	subs	r3, #1
 80085aa:	b29a      	uxth	r2, r3
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	851a      	strh	r2, [r3, #40]	; 0x28
 80085b0:	e00d      	b.n	80085ce <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80085b2:	697b      	ldr	r3, [r7, #20]
 80085b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80085b8:	d002      	beq.n	80085c0 <I2C_Slave_ISR_IT+0x1e6>
 80085ba:	697b      	ldr	r3, [r7, #20]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d106      	bne.n	80085ce <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80085c0:	68f8      	ldr	r0, [r7, #12]
 80085c2:	f000 f939 	bl	8008838 <I2C_ITSlaveSeqCplt>
 80085c6:	e002      	b.n	80085ce <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 80085c8:	bf00      	nop
 80085ca:	e000      	b.n	80085ce <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 80085cc:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	2200      	movs	r2, #0
 80085d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80085d6:	2300      	movs	r3, #0
}
 80085d8:	4618      	mov	r0, r3
 80085da:	3718      	adds	r7, #24
 80085dc:	46bd      	mov	sp, r7
 80085de:	bd80      	pop	{r7, pc}

080085e0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b086      	sub	sp, #24
 80085e4:	af02      	add	r7, sp, #8
 80085e6:	60f8      	str	r0, [r7, #12]
 80085e8:	4608      	mov	r0, r1
 80085ea:	4611      	mov	r1, r2
 80085ec:	461a      	mov	r2, r3
 80085ee:	4603      	mov	r3, r0
 80085f0:	817b      	strh	r3, [r7, #10]
 80085f2:	460b      	mov	r3, r1
 80085f4:	813b      	strh	r3, [r7, #8]
 80085f6:	4613      	mov	r3, r2
 80085f8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80085fa:	88fb      	ldrh	r3, [r7, #6]
 80085fc:	b2da      	uxtb	r2, r3
 80085fe:	8979      	ldrh	r1, [r7, #10]
 8008600:	4b20      	ldr	r3, [pc, #128]	; (8008684 <I2C_RequestMemoryWrite+0xa4>)
 8008602:	9300      	str	r3, [sp, #0]
 8008604:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008608:	68f8      	ldr	r0, [r7, #12]
 800860a:	f000 fdb5 	bl	8009178 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800860e:	69fa      	ldr	r2, [r7, #28]
 8008610:	69b9      	ldr	r1, [r7, #24]
 8008612:	68f8      	ldr	r0, [r7, #12]
 8008614:	f000 fc47 	bl	8008ea6 <I2C_WaitOnTXISFlagUntilTimeout>
 8008618:	4603      	mov	r3, r0
 800861a:	2b00      	cmp	r3, #0
 800861c:	d001      	beq.n	8008622 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800861e:	2301      	movs	r3, #1
 8008620:	e02c      	b.n	800867c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008622:	88fb      	ldrh	r3, [r7, #6]
 8008624:	2b01      	cmp	r3, #1
 8008626:	d105      	bne.n	8008634 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008628:	893b      	ldrh	r3, [r7, #8]
 800862a:	b2da      	uxtb	r2, r3
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	629a      	str	r2, [r3, #40]	; 0x28
 8008632:	e015      	b.n	8008660 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008634:	893b      	ldrh	r3, [r7, #8]
 8008636:	0a1b      	lsrs	r3, r3, #8
 8008638:	b29b      	uxth	r3, r3
 800863a:	b2da      	uxtb	r2, r3
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008642:	69fa      	ldr	r2, [r7, #28]
 8008644:	69b9      	ldr	r1, [r7, #24]
 8008646:	68f8      	ldr	r0, [r7, #12]
 8008648:	f000 fc2d 	bl	8008ea6 <I2C_WaitOnTXISFlagUntilTimeout>
 800864c:	4603      	mov	r3, r0
 800864e:	2b00      	cmp	r3, #0
 8008650:	d001      	beq.n	8008656 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8008652:	2301      	movs	r3, #1
 8008654:	e012      	b.n	800867c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008656:	893b      	ldrh	r3, [r7, #8]
 8008658:	b2da      	uxtb	r2, r3
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8008660:	69fb      	ldr	r3, [r7, #28]
 8008662:	9300      	str	r3, [sp, #0]
 8008664:	69bb      	ldr	r3, [r7, #24]
 8008666:	2200      	movs	r2, #0
 8008668:	2180      	movs	r1, #128	; 0x80
 800866a:	68f8      	ldr	r0, [r7, #12]
 800866c:	f000 fbdb 	bl	8008e26 <I2C_WaitOnFlagUntilTimeout>
 8008670:	4603      	mov	r3, r0
 8008672:	2b00      	cmp	r3, #0
 8008674:	d001      	beq.n	800867a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8008676:	2301      	movs	r3, #1
 8008678:	e000      	b.n	800867c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800867a:	2300      	movs	r3, #0
}
 800867c:	4618      	mov	r0, r3
 800867e:	3710      	adds	r7, #16
 8008680:	46bd      	mov	sp, r7
 8008682:	bd80      	pop	{r7, pc}
 8008684:	80002000 	.word	0x80002000

08008688 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b086      	sub	sp, #24
 800868c:	af02      	add	r7, sp, #8
 800868e:	60f8      	str	r0, [r7, #12]
 8008690:	4608      	mov	r0, r1
 8008692:	4611      	mov	r1, r2
 8008694:	461a      	mov	r2, r3
 8008696:	4603      	mov	r3, r0
 8008698:	817b      	strh	r3, [r7, #10]
 800869a:	460b      	mov	r3, r1
 800869c:	813b      	strh	r3, [r7, #8]
 800869e:	4613      	mov	r3, r2
 80086a0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80086a2:	88fb      	ldrh	r3, [r7, #6]
 80086a4:	b2da      	uxtb	r2, r3
 80086a6:	8979      	ldrh	r1, [r7, #10]
 80086a8:	4b20      	ldr	r3, [pc, #128]	; (800872c <I2C_RequestMemoryRead+0xa4>)
 80086aa:	9300      	str	r3, [sp, #0]
 80086ac:	2300      	movs	r3, #0
 80086ae:	68f8      	ldr	r0, [r7, #12]
 80086b0:	f000 fd62 	bl	8009178 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80086b4:	69fa      	ldr	r2, [r7, #28]
 80086b6:	69b9      	ldr	r1, [r7, #24]
 80086b8:	68f8      	ldr	r0, [r7, #12]
 80086ba:	f000 fbf4 	bl	8008ea6 <I2C_WaitOnTXISFlagUntilTimeout>
 80086be:	4603      	mov	r3, r0
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d001      	beq.n	80086c8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80086c4:	2301      	movs	r3, #1
 80086c6:	e02c      	b.n	8008722 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80086c8:	88fb      	ldrh	r3, [r7, #6]
 80086ca:	2b01      	cmp	r3, #1
 80086cc:	d105      	bne.n	80086da <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80086ce:	893b      	ldrh	r3, [r7, #8]
 80086d0:	b2da      	uxtb	r2, r3
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	629a      	str	r2, [r3, #40]	; 0x28
 80086d8:	e015      	b.n	8008706 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80086da:	893b      	ldrh	r3, [r7, #8]
 80086dc:	0a1b      	lsrs	r3, r3, #8
 80086de:	b29b      	uxth	r3, r3
 80086e0:	b2da      	uxtb	r2, r3
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80086e8:	69fa      	ldr	r2, [r7, #28]
 80086ea:	69b9      	ldr	r1, [r7, #24]
 80086ec:	68f8      	ldr	r0, [r7, #12]
 80086ee:	f000 fbda 	bl	8008ea6 <I2C_WaitOnTXISFlagUntilTimeout>
 80086f2:	4603      	mov	r3, r0
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d001      	beq.n	80086fc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80086f8:	2301      	movs	r3, #1
 80086fa:	e012      	b.n	8008722 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80086fc:	893b      	ldrh	r3, [r7, #8]
 80086fe:	b2da      	uxtb	r2, r3
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8008706:	69fb      	ldr	r3, [r7, #28]
 8008708:	9300      	str	r3, [sp, #0]
 800870a:	69bb      	ldr	r3, [r7, #24]
 800870c:	2200      	movs	r2, #0
 800870e:	2140      	movs	r1, #64	; 0x40
 8008710:	68f8      	ldr	r0, [r7, #12]
 8008712:	f000 fb88 	bl	8008e26 <I2C_WaitOnFlagUntilTimeout>
 8008716:	4603      	mov	r3, r0
 8008718:	2b00      	cmp	r3, #0
 800871a:	d001      	beq.n	8008720 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800871c:	2301      	movs	r3, #1
 800871e:	e000      	b.n	8008722 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8008720:	2300      	movs	r3, #0
}
 8008722:	4618      	mov	r0, r3
 8008724:	3710      	adds	r7, #16
 8008726:	46bd      	mov	sp, r7
 8008728:	bd80      	pop	{r7, pc}
 800872a:	bf00      	nop
 800872c:	80002000 	.word	0x80002000

08008730 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b084      	sub	sp, #16
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
 8008738:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008740:	b2db      	uxtb	r3, r3
 8008742:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008746:	2b28      	cmp	r3, #40	; 0x28
 8008748:	d16a      	bne.n	8008820 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	699b      	ldr	r3, [r3, #24]
 8008750:	0c1b      	lsrs	r3, r3, #16
 8008752:	b2db      	uxtb	r3, r3
 8008754:	f003 0301 	and.w	r3, r3, #1
 8008758:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	699b      	ldr	r3, [r3, #24]
 8008760:	0c1b      	lsrs	r3, r3, #16
 8008762:	b29b      	uxth	r3, r3
 8008764:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8008768:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	689b      	ldr	r3, [r3, #8]
 8008770:	b29b      	uxth	r3, r3
 8008772:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008776:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	68db      	ldr	r3, [r3, #12]
 800877e:	b29b      	uxth	r3, r3
 8008780:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8008784:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	68db      	ldr	r3, [r3, #12]
 800878a:	2b02      	cmp	r3, #2
 800878c:	d138      	bne.n	8008800 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800878e:	897b      	ldrh	r3, [r7, #10]
 8008790:	09db      	lsrs	r3, r3, #7
 8008792:	b29a      	uxth	r2, r3
 8008794:	89bb      	ldrh	r3, [r7, #12]
 8008796:	4053      	eors	r3, r2
 8008798:	b29b      	uxth	r3, r3
 800879a:	f003 0306 	and.w	r3, r3, #6
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d11c      	bne.n	80087dc <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80087a2:	897b      	ldrh	r3, [r7, #10]
 80087a4:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80087aa:	1c5a      	adds	r2, r3, #1
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80087b4:	2b02      	cmp	r3, #2
 80087b6:	d13b      	bne.n	8008830 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2200      	movs	r2, #0
 80087bc:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	2208      	movs	r2, #8
 80087c4:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2200      	movs	r2, #0
 80087ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80087ce:	89ba      	ldrh	r2, [r7, #12]
 80087d0:	7bfb      	ldrb	r3, [r7, #15]
 80087d2:	4619      	mov	r1, r3
 80087d4:	6878      	ldr	r0, [r7, #4]
 80087d6:	f7ff fdde 	bl	8008396 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80087da:	e029      	b.n	8008830 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80087dc:	893b      	ldrh	r3, [r7, #8]
 80087de:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80087e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80087e4:	6878      	ldr	r0, [r7, #4]
 80087e6:	f000 fcf9 	bl	80091dc <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2200      	movs	r2, #0
 80087ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80087f2:	89ba      	ldrh	r2, [r7, #12]
 80087f4:	7bfb      	ldrb	r3, [r7, #15]
 80087f6:	4619      	mov	r1, r3
 80087f8:	6878      	ldr	r0, [r7, #4]
 80087fa:	f7ff fdcc 	bl	8008396 <HAL_I2C_AddrCallback>
}
 80087fe:	e017      	b.n	8008830 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8008800:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008804:	6878      	ldr	r0, [r7, #4]
 8008806:	f000 fce9 	bl	80091dc <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2200      	movs	r2, #0
 800880e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008812:	89ba      	ldrh	r2, [r7, #12]
 8008814:	7bfb      	ldrb	r3, [r7, #15]
 8008816:	4619      	mov	r1, r3
 8008818:	6878      	ldr	r0, [r7, #4]
 800881a:	f7ff fdbc 	bl	8008396 <HAL_I2C_AddrCallback>
}
 800881e:	e007      	b.n	8008830 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	2208      	movs	r2, #8
 8008826:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2200      	movs	r2, #0
 800882c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8008830:	bf00      	nop
 8008832:	3710      	adds	r7, #16
 8008834:	46bd      	mov	sp, r7
 8008836:	bd80      	pop	{r7, pc}

08008838 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b084      	sub	sp, #16
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2200      	movs	r2, #0
 800884c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	0b9b      	lsrs	r3, r3, #14
 8008854:	f003 0301 	and.w	r3, r3, #1
 8008858:	2b00      	cmp	r3, #0
 800885a:	d008      	beq.n	800886e <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	681a      	ldr	r2, [r3, #0]
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800886a:	601a      	str	r2, [r3, #0]
 800886c:	e00d      	b.n	800888a <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	0bdb      	lsrs	r3, r3, #15
 8008872:	f003 0301 	and.w	r3, r3, #1
 8008876:	2b00      	cmp	r3, #0
 8008878:	d007      	beq.n	800888a <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	681a      	ldr	r2, [r3, #0]
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008888:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008890:	b2db      	uxtb	r3, r3
 8008892:	2b29      	cmp	r3, #41	; 0x29
 8008894:	d112      	bne.n	80088bc <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2228      	movs	r2, #40	; 0x28
 800889a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2221      	movs	r2, #33	; 0x21
 80088a2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80088a4:	2101      	movs	r1, #1
 80088a6:	6878      	ldr	r0, [r7, #4]
 80088a8:	f000 fc98 	bl	80091dc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2200      	movs	r2, #0
 80088b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80088b4:	6878      	ldr	r0, [r7, #4]
 80088b6:	f7ff fd5a 	bl	800836e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80088ba:	e017      	b.n	80088ec <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80088c2:	b2db      	uxtb	r3, r3
 80088c4:	2b2a      	cmp	r3, #42	; 0x2a
 80088c6:	d111      	bne.n	80088ec <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2228      	movs	r2, #40	; 0x28
 80088cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2222      	movs	r2, #34	; 0x22
 80088d4:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80088d6:	2102      	movs	r1, #2
 80088d8:	6878      	ldr	r0, [r7, #4]
 80088da:	f000 fc7f 	bl	80091dc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	2200      	movs	r2, #0
 80088e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f7ff fd4b 	bl	8008382 <HAL_I2C_SlaveRxCpltCallback>
}
 80088ec:	bf00      	nop
 80088ee:	3710      	adds	r7, #16
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}

080088f4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b086      	sub	sp, #24
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
 80088fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008910:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	2220      	movs	r2, #32
 8008918:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800891a:	7bfb      	ldrb	r3, [r7, #15]
 800891c:	2b21      	cmp	r3, #33	; 0x21
 800891e:	d002      	beq.n	8008926 <I2C_ITSlaveCplt+0x32>
 8008920:	7bfb      	ldrb	r3, [r7, #15]
 8008922:	2b29      	cmp	r3, #41	; 0x29
 8008924:	d108      	bne.n	8008938 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8008926:	f248 0101 	movw	r1, #32769	; 0x8001
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f000 fc56 	bl	80091dc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2221      	movs	r2, #33	; 0x21
 8008934:	631a      	str	r2, [r3, #48]	; 0x30
 8008936:	e00d      	b.n	8008954 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008938:	7bfb      	ldrb	r3, [r7, #15]
 800893a:	2b22      	cmp	r3, #34	; 0x22
 800893c:	d002      	beq.n	8008944 <I2C_ITSlaveCplt+0x50>
 800893e:	7bfb      	ldrb	r3, [r7, #15]
 8008940:	2b2a      	cmp	r3, #42	; 0x2a
 8008942:	d107      	bne.n	8008954 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8008944:	f248 0102 	movw	r1, #32770	; 0x8002
 8008948:	6878      	ldr	r0, [r7, #4]
 800894a:	f000 fc47 	bl	80091dc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2222      	movs	r2, #34	; 0x22
 8008952:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	685a      	ldr	r2, [r3, #4]
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008962:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	6859      	ldr	r1, [r3, #4]
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681a      	ldr	r2, [r3, #0]
 800896e:	4b64      	ldr	r3, [pc, #400]	; (8008b00 <I2C_ITSlaveCplt+0x20c>)
 8008970:	400b      	ands	r3, r1
 8008972:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	f000 fa14 	bl	8008da2 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800897a:	693b      	ldr	r3, [r7, #16]
 800897c:	0b9b      	lsrs	r3, r3, #14
 800897e:	f003 0301 	and.w	r3, r3, #1
 8008982:	2b00      	cmp	r3, #0
 8008984:	d013      	beq.n	80089ae <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	681a      	ldr	r2, [r3, #0]
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008994:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800899a:	2b00      	cmp	r3, #0
 800899c:	d020      	beq.n	80089e0 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	685b      	ldr	r3, [r3, #4]
 80089a6:	b29a      	uxth	r2, r3
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80089ac:	e018      	b.n	80089e0 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80089ae:	693b      	ldr	r3, [r7, #16]
 80089b0:	0bdb      	lsrs	r3, r3, #15
 80089b2:	f003 0301 	and.w	r3, r3, #1
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d012      	beq.n	80089e0 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	681a      	ldr	r2, [r3, #0]
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80089c8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d006      	beq.n	80089e0 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	685b      	ldr	r3, [r3, #4]
 80089da:	b29a      	uxth	r2, r3
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80089e0:	697b      	ldr	r3, [r7, #20]
 80089e2:	089b      	lsrs	r3, r3, #2
 80089e4:	f003 0301 	and.w	r3, r3, #1
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d020      	beq.n	8008a2e <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80089ec:	697b      	ldr	r3, [r7, #20]
 80089ee:	f023 0304 	bic.w	r3, r3, #4
 80089f2:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089fe:	b2d2      	uxtb	r2, r2
 8008a00:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a06:	1c5a      	adds	r2, r3, #1
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d00c      	beq.n	8008a2e <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a18:	3b01      	subs	r3, #1
 8008a1a:	b29a      	uxth	r2, r3
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a24:	b29b      	uxth	r3, r3
 8008a26:	3b01      	subs	r3, #1
 8008a28:	b29a      	uxth	r2, r3
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a32:	b29b      	uxth	r3, r3
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d005      	beq.n	8008a44 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a3c:	f043 0204 	orr.w	r2, r3, #4
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2200      	movs	r2, #0
 8008a48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2200      	movs	r2, #0
 8008a50:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d010      	beq.n	8008a7c <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a5e:	4619      	mov	r1, r3
 8008a60:	6878      	ldr	r0, [r7, #4]
 8008a62:	f000 f8a7 	bl	8008bb4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008a6c:	b2db      	uxtb	r3, r3
 8008a6e:	2b28      	cmp	r3, #40	; 0x28
 8008a70:	d141      	bne.n	8008af6 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8008a72:	6979      	ldr	r1, [r7, #20]
 8008a74:	6878      	ldr	r0, [r7, #4]
 8008a76:	f000 f847 	bl	8008b08 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008a7a:	e03c      	b.n	8008af6 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a80:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008a84:	d014      	beq.n	8008ab0 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	f7ff fed6 	bl	8008838 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	4a1d      	ldr	r2, [pc, #116]	; (8008b04 <I2C_ITSlaveCplt+0x210>)
 8008a90:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	2220      	movs	r2, #32
 8008a96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8008aa8:	6878      	ldr	r0, [r7, #4]
 8008aaa:	f7ff fc82 	bl	80083b2 <HAL_I2C_ListenCpltCallback>
}
 8008aae:	e022      	b.n	8008af6 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008ab6:	b2db      	uxtb	r3, r3
 8008ab8:	2b22      	cmp	r3, #34	; 0x22
 8008aba:	d10e      	bne.n	8008ada <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2220      	movs	r2, #32
 8008ac0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	2200      	movs	r2, #0
 8008ace:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	f7ff fc55 	bl	8008382 <HAL_I2C_SlaveRxCpltCallback>
}
 8008ad8:	e00d      	b.n	8008af6 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	2220      	movs	r2, #32
 8008ade:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2200      	movs	r2, #0
 8008aec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008af0:	6878      	ldr	r0, [r7, #4]
 8008af2:	f7ff fc3c 	bl	800836e <HAL_I2C_SlaveTxCpltCallback>
}
 8008af6:	bf00      	nop
 8008af8:	3718      	adds	r7, #24
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bd80      	pop	{r7, pc}
 8008afe:	bf00      	nop
 8008b00:	fe00e800 	.word	0xfe00e800
 8008b04:	ffff0000 	.word	0xffff0000

08008b08 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b082      	sub	sp, #8
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
 8008b10:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	4a26      	ldr	r2, [pc, #152]	; (8008bb0 <I2C_ITListenCplt+0xa8>)
 8008b16:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2220      	movs	r2, #32
 8008b22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2200      	movs	r2, #0
 8008b2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	2200      	movs	r2, #0
 8008b32:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	089b      	lsrs	r3, r3, #2
 8008b38:	f003 0301 	and.w	r3, r3, #1
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d022      	beq.n	8008b86 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b4a:	b2d2      	uxtb	r2, r2
 8008b4c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b52:	1c5a      	adds	r2, r3, #1
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d012      	beq.n	8008b86 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b64:	3b01      	subs	r3, #1
 8008b66:	b29a      	uxth	r2, r3
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b70:	b29b      	uxth	r3, r3
 8008b72:	3b01      	subs	r3, #1
 8008b74:	b29a      	uxth	r2, r3
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b7e:	f043 0204 	orr.w	r2, r3, #4
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008b86:	f248 0103 	movw	r1, #32771	; 0x8003
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f000 fb26 	bl	80091dc <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	2210      	movs	r2, #16
 8008b96:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8008ba0:	6878      	ldr	r0, [r7, #4]
 8008ba2:	f7ff fc06 	bl	80083b2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8008ba6:	bf00      	nop
 8008ba8:	3708      	adds	r7, #8
 8008baa:	46bd      	mov	sp, r7
 8008bac:	bd80      	pop	{r7, pc}
 8008bae:	bf00      	nop
 8008bb0:	ffff0000 	.word	0xffff0000

08008bb4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b084      	sub	sp, #16
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
 8008bbc:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008bc4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	2200      	movs	r2, #0
 8008bca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	4a5d      	ldr	r2, [pc, #372]	; (8008d48 <I2C_ITError+0x194>)
 8008bd2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	431a      	orrs	r2, r3
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8008be6:	7bfb      	ldrb	r3, [r7, #15]
 8008be8:	2b28      	cmp	r3, #40	; 0x28
 8008bea:	d005      	beq.n	8008bf8 <I2C_ITError+0x44>
 8008bec:	7bfb      	ldrb	r3, [r7, #15]
 8008bee:	2b29      	cmp	r3, #41	; 0x29
 8008bf0:	d002      	beq.n	8008bf8 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8008bf2:	7bfb      	ldrb	r3, [r7, #15]
 8008bf4:	2b2a      	cmp	r3, #42	; 0x2a
 8008bf6:	d10b      	bne.n	8008c10 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008bf8:	2103      	movs	r1, #3
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	f000 faee 	bl	80091dc <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2228      	movs	r2, #40	; 0x28
 8008c04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	4a50      	ldr	r2, [pc, #320]	; (8008d4c <I2C_ITError+0x198>)
 8008c0c:	635a      	str	r2, [r3, #52]	; 0x34
 8008c0e:	e011      	b.n	8008c34 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008c10:	f248 0103 	movw	r1, #32771	; 0x8003
 8008c14:	6878      	ldr	r0, [r7, #4]
 8008c16:	f000 fae1 	bl	80091dc <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008c20:	b2db      	uxtb	r3, r3
 8008c22:	2b60      	cmp	r3, #96	; 0x60
 8008c24:	d003      	beq.n	8008c2e <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2220      	movs	r2, #32
 8008c2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	2200      	movs	r2, #0
 8008c32:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c38:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d039      	beq.n	8008cb6 <I2C_ITError+0x102>
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	2b11      	cmp	r3, #17
 8008c46:	d002      	beq.n	8008c4e <I2C_ITError+0x9a>
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	2b21      	cmp	r3, #33	; 0x21
 8008c4c:	d133      	bne.n	8008cb6 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008c5c:	d107      	bne.n	8008c6e <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	681a      	ldr	r2, [r3, #0]
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008c6c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c72:	4618      	mov	r0, r3
 8008c74:	f7fe fd04 	bl	8007680 <HAL_DMA_GetState>
 8008c78:	4603      	mov	r3, r0
 8008c7a:	2b01      	cmp	r3, #1
 8008c7c:	d017      	beq.n	8008cae <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c82:	4a33      	ldr	r2, [pc, #204]	; (8008d50 <I2C_ITError+0x19c>)
 8008c84:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2200      	movs	r2, #0
 8008c8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c92:	4618      	mov	r0, r3
 8008c94:	f7fe fc04 	bl	80074a0 <HAL_DMA_Abort_IT>
 8008c98:	4603      	mov	r3, r0
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d04d      	beq.n	8008d3a <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ca4:	687a      	ldr	r2, [r7, #4]
 8008ca6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008ca8:	4610      	mov	r0, r2
 8008caa:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008cac:	e045      	b.n	8008d3a <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8008cae:	6878      	ldr	r0, [r7, #4]
 8008cb0:	f000 f850 	bl	8008d54 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008cb4:	e041      	b.n	8008d3a <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d039      	beq.n	8008d32 <I2C_ITError+0x17e>
 8008cbe:	68bb      	ldr	r3, [r7, #8]
 8008cc0:	2b12      	cmp	r3, #18
 8008cc2:	d002      	beq.n	8008cca <I2C_ITError+0x116>
 8008cc4:	68bb      	ldr	r3, [r7, #8]
 8008cc6:	2b22      	cmp	r3, #34	; 0x22
 8008cc8:	d133      	bne.n	8008d32 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008cd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008cd8:	d107      	bne.n	8008cea <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	681a      	ldr	r2, [r3, #0]
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008ce8:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cee:	4618      	mov	r0, r3
 8008cf0:	f7fe fcc6 	bl	8007680 <HAL_DMA_GetState>
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	2b01      	cmp	r3, #1
 8008cf8:	d017      	beq.n	8008d2a <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cfe:	4a14      	ldr	r2, [pc, #80]	; (8008d50 <I2C_ITError+0x19c>)
 8008d00:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2200      	movs	r2, #0
 8008d06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d0e:	4618      	mov	r0, r3
 8008d10:	f7fe fbc6 	bl	80074a0 <HAL_DMA_Abort_IT>
 8008d14:	4603      	mov	r3, r0
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d011      	beq.n	8008d3e <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d20:	687a      	ldr	r2, [r7, #4]
 8008d22:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008d24:	4610      	mov	r0, r2
 8008d26:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008d28:	e009      	b.n	8008d3e <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	f000 f812 	bl	8008d54 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008d30:	e005      	b.n	8008d3e <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f000 f80e 	bl	8008d54 <I2C_TreatErrorCallback>
  }
}
 8008d38:	e002      	b.n	8008d40 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008d3a:	bf00      	nop
 8008d3c:	e000      	b.n	8008d40 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008d3e:	bf00      	nop
}
 8008d40:	bf00      	nop
 8008d42:	3710      	adds	r7, #16
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bd80      	pop	{r7, pc}
 8008d48:	ffff0000 	.word	0xffff0000
 8008d4c:	080083db 	.word	0x080083db
 8008d50:	08008deb 	.word	0x08008deb

08008d54 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b082      	sub	sp, #8
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008d62:	b2db      	uxtb	r3, r3
 8008d64:	2b60      	cmp	r3, #96	; 0x60
 8008d66:	d10e      	bne.n	8008d86 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2220      	movs	r2, #32
 8008d6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2200      	movs	r2, #0
 8008d74:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	2200      	movs	r2, #0
 8008d7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f7ff fb21 	bl	80083c6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008d84:	e009      	b.n	8008d9a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2200      	movs	r2, #0
 8008d8a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2200      	movs	r2, #0
 8008d90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8008d94:	6878      	ldr	r0, [r7, #4]
 8008d96:	f7fc f8e1 	bl	8004f5c <HAL_I2C_ErrorCallback>
}
 8008d9a:	bf00      	nop
 8008d9c:	3708      	adds	r7, #8
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	bd80      	pop	{r7, pc}

08008da2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008da2:	b480      	push	{r7}
 8008da4:	b083      	sub	sp, #12
 8008da6:	af00      	add	r7, sp, #0
 8008da8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	699b      	ldr	r3, [r3, #24]
 8008db0:	f003 0302 	and.w	r3, r3, #2
 8008db4:	2b02      	cmp	r3, #2
 8008db6:	d103      	bne.n	8008dc0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	699b      	ldr	r3, [r3, #24]
 8008dc6:	f003 0301 	and.w	r3, r3, #1
 8008dca:	2b01      	cmp	r3, #1
 8008dcc:	d007      	beq.n	8008dde <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	699a      	ldr	r2, [r3, #24]
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	f042 0201 	orr.w	r2, r2, #1
 8008ddc:	619a      	str	r2, [r3, #24]
  }
}
 8008dde:	bf00      	nop
 8008de0:	370c      	adds	r7, #12
 8008de2:	46bd      	mov	sp, r7
 8008de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de8:	4770      	bx	lr

08008dea <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8008dea:	b580      	push	{r7, lr}
 8008dec:	b084      	sub	sp, #16
 8008dee:	af00      	add	r7, sp, #0
 8008df0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008df6:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d003      	beq.n	8008e08 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e04:	2200      	movs	r2, #0
 8008e06:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d003      	beq.n	8008e18 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e14:	2200      	movs	r2, #0
 8008e16:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8008e18:	68f8      	ldr	r0, [r7, #12]
 8008e1a:	f7ff ff9b 	bl	8008d54 <I2C_TreatErrorCallback>
}
 8008e1e:	bf00      	nop
 8008e20:	3710      	adds	r7, #16
 8008e22:	46bd      	mov	sp, r7
 8008e24:	bd80      	pop	{r7, pc}

08008e26 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008e26:	b580      	push	{r7, lr}
 8008e28:	b084      	sub	sp, #16
 8008e2a:	af00      	add	r7, sp, #0
 8008e2c:	60f8      	str	r0, [r7, #12]
 8008e2e:	60b9      	str	r1, [r7, #8]
 8008e30:	603b      	str	r3, [r7, #0]
 8008e32:	4613      	mov	r3, r2
 8008e34:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008e36:	e022      	b.n	8008e7e <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008e3e:	d01e      	beq.n	8008e7e <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e40:	f7fe f844 	bl	8006ecc <HAL_GetTick>
 8008e44:	4602      	mov	r2, r0
 8008e46:	69bb      	ldr	r3, [r7, #24]
 8008e48:	1ad3      	subs	r3, r2, r3
 8008e4a:	683a      	ldr	r2, [r7, #0]
 8008e4c:	429a      	cmp	r2, r3
 8008e4e:	d302      	bcc.n	8008e56 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d113      	bne.n	8008e7e <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e5a:	f043 0220 	orr.w	r2, r3, #32
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	2220      	movs	r2, #32
 8008e66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	2200      	movs	r2, #0
 8008e76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8008e7a:	2301      	movs	r3, #1
 8008e7c:	e00f      	b.n	8008e9e <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	699a      	ldr	r2, [r3, #24]
 8008e84:	68bb      	ldr	r3, [r7, #8]
 8008e86:	4013      	ands	r3, r2
 8008e88:	68ba      	ldr	r2, [r7, #8]
 8008e8a:	429a      	cmp	r2, r3
 8008e8c:	bf0c      	ite	eq
 8008e8e:	2301      	moveq	r3, #1
 8008e90:	2300      	movne	r3, #0
 8008e92:	b2db      	uxtb	r3, r3
 8008e94:	461a      	mov	r2, r3
 8008e96:	79fb      	ldrb	r3, [r7, #7]
 8008e98:	429a      	cmp	r2, r3
 8008e9a:	d0cd      	beq.n	8008e38 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008e9c:	2300      	movs	r3, #0
}
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	3710      	adds	r7, #16
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bd80      	pop	{r7, pc}

08008ea6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008ea6:	b580      	push	{r7, lr}
 8008ea8:	b084      	sub	sp, #16
 8008eaa:	af00      	add	r7, sp, #0
 8008eac:	60f8      	str	r0, [r7, #12]
 8008eae:	60b9      	str	r1, [r7, #8]
 8008eb0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008eb2:	e02c      	b.n	8008f0e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008eb4:	687a      	ldr	r2, [r7, #4]
 8008eb6:	68b9      	ldr	r1, [r7, #8]
 8008eb8:	68f8      	ldr	r0, [r7, #12]
 8008eba:	f000 f871 	bl	8008fa0 <I2C_IsErrorOccurred>
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d001      	beq.n	8008ec8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008ec4:	2301      	movs	r3, #1
 8008ec6:	e02a      	b.n	8008f1e <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ec8:	68bb      	ldr	r3, [r7, #8]
 8008eca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ece:	d01e      	beq.n	8008f0e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ed0:	f7fd fffc 	bl	8006ecc <HAL_GetTick>
 8008ed4:	4602      	mov	r2, r0
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	1ad3      	subs	r3, r2, r3
 8008eda:	68ba      	ldr	r2, [r7, #8]
 8008edc:	429a      	cmp	r2, r3
 8008ede:	d302      	bcc.n	8008ee6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d113      	bne.n	8008f0e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008eea:	f043 0220 	orr.w	r2, r3, #32
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	2220      	movs	r2, #32
 8008ef6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	2200      	movs	r2, #0
 8008efe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	2200      	movs	r2, #0
 8008f06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	e007      	b.n	8008f1e <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	699b      	ldr	r3, [r3, #24]
 8008f14:	f003 0302 	and.w	r3, r3, #2
 8008f18:	2b02      	cmp	r3, #2
 8008f1a:	d1cb      	bne.n	8008eb4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008f1c:	2300      	movs	r3, #0
}
 8008f1e:	4618      	mov	r0, r3
 8008f20:	3710      	adds	r7, #16
 8008f22:	46bd      	mov	sp, r7
 8008f24:	bd80      	pop	{r7, pc}

08008f26 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008f26:	b580      	push	{r7, lr}
 8008f28:	b084      	sub	sp, #16
 8008f2a:	af00      	add	r7, sp, #0
 8008f2c:	60f8      	str	r0, [r7, #12]
 8008f2e:	60b9      	str	r1, [r7, #8]
 8008f30:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008f32:	e028      	b.n	8008f86 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008f34:	687a      	ldr	r2, [r7, #4]
 8008f36:	68b9      	ldr	r1, [r7, #8]
 8008f38:	68f8      	ldr	r0, [r7, #12]
 8008f3a:	f000 f831 	bl	8008fa0 <I2C_IsErrorOccurred>
 8008f3e:	4603      	mov	r3, r0
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d001      	beq.n	8008f48 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008f44:	2301      	movs	r3, #1
 8008f46:	e026      	b.n	8008f96 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f48:	f7fd ffc0 	bl	8006ecc <HAL_GetTick>
 8008f4c:	4602      	mov	r2, r0
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	1ad3      	subs	r3, r2, r3
 8008f52:	68ba      	ldr	r2, [r7, #8]
 8008f54:	429a      	cmp	r2, r3
 8008f56:	d302      	bcc.n	8008f5e <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008f58:	68bb      	ldr	r3, [r7, #8]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d113      	bne.n	8008f86 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f62:	f043 0220 	orr.w	r2, r3, #32
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	2220      	movs	r2, #32
 8008f6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	2200      	movs	r2, #0
 8008f76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8008f82:	2301      	movs	r3, #1
 8008f84:	e007      	b.n	8008f96 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	699b      	ldr	r3, [r3, #24]
 8008f8c:	f003 0320 	and.w	r3, r3, #32
 8008f90:	2b20      	cmp	r3, #32
 8008f92:	d1cf      	bne.n	8008f34 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008f94:	2300      	movs	r3, #0
}
 8008f96:	4618      	mov	r0, r3
 8008f98:	3710      	adds	r7, #16
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bd80      	pop	{r7, pc}
	...

08008fa0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b08a      	sub	sp, #40	; 0x28
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	60f8      	str	r0, [r7, #12]
 8008fa8:	60b9      	str	r1, [r7, #8]
 8008faa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008fac:	2300      	movs	r3, #0
 8008fae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	699b      	ldr	r3, [r3, #24]
 8008fb8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8008fba:	2300      	movs	r3, #0
 8008fbc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008fc2:	69bb      	ldr	r3, [r7, #24]
 8008fc4:	f003 0310 	and.w	r3, r3, #16
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d075      	beq.n	80090b8 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	2210      	movs	r2, #16
 8008fd2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008fd4:	e056      	b.n	8009084 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008fd6:	68bb      	ldr	r3, [r7, #8]
 8008fd8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008fdc:	d052      	beq.n	8009084 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008fde:	f7fd ff75 	bl	8006ecc <HAL_GetTick>
 8008fe2:	4602      	mov	r2, r0
 8008fe4:	69fb      	ldr	r3, [r7, #28]
 8008fe6:	1ad3      	subs	r3, r2, r3
 8008fe8:	68ba      	ldr	r2, [r7, #8]
 8008fea:	429a      	cmp	r2, r3
 8008fec:	d302      	bcc.n	8008ff4 <I2C_IsErrorOccurred+0x54>
 8008fee:	68bb      	ldr	r3, [r7, #8]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d147      	bne.n	8009084 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	685b      	ldr	r3, [r3, #4]
 8008ffa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008ffe:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009006:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	699b      	ldr	r3, [r3, #24]
 800900e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009012:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009016:	d12e      	bne.n	8009076 <I2C_IsErrorOccurred+0xd6>
 8009018:	697b      	ldr	r3, [r7, #20]
 800901a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800901e:	d02a      	beq.n	8009076 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8009020:	7cfb      	ldrb	r3, [r7, #19]
 8009022:	2b20      	cmp	r3, #32
 8009024:	d027      	beq.n	8009076 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	685a      	ldr	r2, [r3, #4]
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009034:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8009036:	f7fd ff49 	bl	8006ecc <HAL_GetTick>
 800903a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800903c:	e01b      	b.n	8009076 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800903e:	f7fd ff45 	bl	8006ecc <HAL_GetTick>
 8009042:	4602      	mov	r2, r0
 8009044:	69fb      	ldr	r3, [r7, #28]
 8009046:	1ad3      	subs	r3, r2, r3
 8009048:	2b19      	cmp	r3, #25
 800904a:	d914      	bls.n	8009076 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009050:	f043 0220 	orr.w	r2, r3, #32
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	2220      	movs	r2, #32
 800905c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	2200      	movs	r2, #0
 8009064:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	2200      	movs	r2, #0
 800906c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8009070:	2301      	movs	r3, #1
 8009072:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	699b      	ldr	r3, [r3, #24]
 800907c:	f003 0320 	and.w	r3, r3, #32
 8009080:	2b20      	cmp	r3, #32
 8009082:	d1dc      	bne.n	800903e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	699b      	ldr	r3, [r3, #24]
 800908a:	f003 0320 	and.w	r3, r3, #32
 800908e:	2b20      	cmp	r3, #32
 8009090:	d003      	beq.n	800909a <I2C_IsErrorOccurred+0xfa>
 8009092:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009096:	2b00      	cmp	r3, #0
 8009098:	d09d      	beq.n	8008fd6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800909a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d103      	bne.n	80090aa <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	2220      	movs	r2, #32
 80090a8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80090aa:	6a3b      	ldr	r3, [r7, #32]
 80090ac:	f043 0304 	orr.w	r3, r3, #4
 80090b0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80090b2:	2301      	movs	r3, #1
 80090b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	699b      	ldr	r3, [r3, #24]
 80090be:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80090c0:	69bb      	ldr	r3, [r7, #24]
 80090c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d00b      	beq.n	80090e2 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80090ca:	6a3b      	ldr	r3, [r7, #32]
 80090cc:	f043 0301 	orr.w	r3, r3, #1
 80090d0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80090da:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80090dc:	2301      	movs	r3, #1
 80090de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80090e2:	69bb      	ldr	r3, [r7, #24]
 80090e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d00b      	beq.n	8009104 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80090ec:	6a3b      	ldr	r3, [r7, #32]
 80090ee:	f043 0308 	orr.w	r3, r3, #8
 80090f2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80090fc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80090fe:	2301      	movs	r3, #1
 8009100:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009104:	69bb      	ldr	r3, [r7, #24]
 8009106:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800910a:	2b00      	cmp	r3, #0
 800910c:	d00b      	beq.n	8009126 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800910e:	6a3b      	ldr	r3, [r7, #32]
 8009110:	f043 0302 	orr.w	r3, r3, #2
 8009114:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800911e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009120:	2301      	movs	r3, #1
 8009122:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8009126:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800912a:	2b00      	cmp	r3, #0
 800912c:	d01c      	beq.n	8009168 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800912e:	68f8      	ldr	r0, [r7, #12]
 8009130:	f7ff fe37 	bl	8008da2 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	6859      	ldr	r1, [r3, #4]
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	681a      	ldr	r2, [r3, #0]
 800913e:	4b0d      	ldr	r3, [pc, #52]	; (8009174 <I2C_IsErrorOccurred+0x1d4>)
 8009140:	400b      	ands	r3, r1
 8009142:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009148:	6a3b      	ldr	r3, [r7, #32]
 800914a:	431a      	orrs	r2, r3
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	2220      	movs	r2, #32
 8009154:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	2200      	movs	r2, #0
 800915c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	2200      	movs	r2, #0
 8009164:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8009168:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800916c:	4618      	mov	r0, r3
 800916e:	3728      	adds	r7, #40	; 0x28
 8009170:	46bd      	mov	sp, r7
 8009172:	bd80      	pop	{r7, pc}
 8009174:	fe00e800 	.word	0xfe00e800

08009178 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009178:	b480      	push	{r7}
 800917a:	b087      	sub	sp, #28
 800917c:	af00      	add	r7, sp, #0
 800917e:	60f8      	str	r0, [r7, #12]
 8009180:	607b      	str	r3, [r7, #4]
 8009182:	460b      	mov	r3, r1
 8009184:	817b      	strh	r3, [r7, #10]
 8009186:	4613      	mov	r3, r2
 8009188:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800918a:	897b      	ldrh	r3, [r7, #10]
 800918c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009190:	7a7b      	ldrb	r3, [r7, #9]
 8009192:	041b      	lsls	r3, r3, #16
 8009194:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009198:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800919e:	6a3b      	ldr	r3, [r7, #32]
 80091a0:	4313      	orrs	r3, r2
 80091a2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80091a6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	685a      	ldr	r2, [r3, #4]
 80091ae:	6a3b      	ldr	r3, [r7, #32]
 80091b0:	0d5b      	lsrs	r3, r3, #21
 80091b2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80091b6:	4b08      	ldr	r3, [pc, #32]	; (80091d8 <I2C_TransferConfig+0x60>)
 80091b8:	430b      	orrs	r3, r1
 80091ba:	43db      	mvns	r3, r3
 80091bc:	ea02 0103 	and.w	r1, r2, r3
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	697a      	ldr	r2, [r7, #20]
 80091c6:	430a      	orrs	r2, r1
 80091c8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80091ca:	bf00      	nop
 80091cc:	371c      	adds	r7, #28
 80091ce:	46bd      	mov	sp, r7
 80091d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d4:	4770      	bx	lr
 80091d6:	bf00      	nop
 80091d8:	03ff63ff 	.word	0x03ff63ff

080091dc <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80091dc:	b480      	push	{r7}
 80091de:	b085      	sub	sp, #20
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
 80091e4:	460b      	mov	r3, r1
 80091e6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80091e8:	2300      	movs	r3, #0
 80091ea:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80091ec:	887b      	ldrh	r3, [r7, #2]
 80091ee:	f003 0301 	and.w	r3, r3, #1
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d00f      	beq.n	8009216 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80091fc:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009204:	b2db      	uxtb	r3, r3
 8009206:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800920a:	2b28      	cmp	r3, #40	; 0x28
 800920c:	d003      	beq.n	8009216 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8009214:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8009216:	887b      	ldrh	r3, [r7, #2]
 8009218:	f003 0302 	and.w	r3, r3, #2
 800921c:	2b00      	cmp	r3, #0
 800921e:	d00f      	beq.n	8009240 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8009226:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800922e:	b2db      	uxtb	r3, r3
 8009230:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009234:	2b28      	cmp	r3, #40	; 0x28
 8009236:	d003      	beq.n	8009240 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800923e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8009240:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009244:	2b00      	cmp	r3, #0
 8009246:	da03      	bge.n	8009250 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800924e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8009250:	887b      	ldrh	r3, [r7, #2]
 8009252:	2b10      	cmp	r3, #16
 8009254:	d103      	bne.n	800925e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800925c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800925e:	887b      	ldrh	r3, [r7, #2]
 8009260:	2b20      	cmp	r3, #32
 8009262:	d103      	bne.n	800926c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	f043 0320 	orr.w	r3, r3, #32
 800926a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800926c:	887b      	ldrh	r3, [r7, #2]
 800926e:	2b40      	cmp	r3, #64	; 0x40
 8009270:	d103      	bne.n	800927a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009278:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	6819      	ldr	r1, [r3, #0]
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	43da      	mvns	r2, r3
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	400a      	ands	r2, r1
 800928a:	601a      	str	r2, [r3, #0]
}
 800928c:	bf00      	nop
 800928e:	3714      	adds	r7, #20
 8009290:	46bd      	mov	sp, r7
 8009292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009296:	4770      	bx	lr

08009298 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009298:	b480      	push	{r7}
 800929a:	b083      	sub	sp, #12
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
 80092a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80092a8:	b2db      	uxtb	r3, r3
 80092aa:	2b20      	cmp	r3, #32
 80092ac:	d138      	bne.n	8009320 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80092b4:	2b01      	cmp	r3, #1
 80092b6:	d101      	bne.n	80092bc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80092b8:	2302      	movs	r3, #2
 80092ba:	e032      	b.n	8009322 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2201      	movs	r2, #1
 80092c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2224      	movs	r2, #36	; 0x24
 80092c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	681a      	ldr	r2, [r3, #0]
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	f022 0201 	bic.w	r2, r2, #1
 80092da:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	681a      	ldr	r2, [r3, #0]
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80092ea:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	6819      	ldr	r1, [r3, #0]
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	683a      	ldr	r2, [r7, #0]
 80092f8:	430a      	orrs	r2, r1
 80092fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	681a      	ldr	r2, [r3, #0]
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	f042 0201 	orr.w	r2, r2, #1
 800930a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2220      	movs	r2, #32
 8009310:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2200      	movs	r2, #0
 8009318:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800931c:	2300      	movs	r3, #0
 800931e:	e000      	b.n	8009322 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009320:	2302      	movs	r3, #2
  }
}
 8009322:	4618      	mov	r0, r3
 8009324:	370c      	adds	r7, #12
 8009326:	46bd      	mov	sp, r7
 8009328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932c:	4770      	bx	lr

0800932e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800932e:	b480      	push	{r7}
 8009330:	b085      	sub	sp, #20
 8009332:	af00      	add	r7, sp, #0
 8009334:	6078      	str	r0, [r7, #4]
 8009336:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800933e:	b2db      	uxtb	r3, r3
 8009340:	2b20      	cmp	r3, #32
 8009342:	d139      	bne.n	80093b8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800934a:	2b01      	cmp	r3, #1
 800934c:	d101      	bne.n	8009352 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800934e:	2302      	movs	r3, #2
 8009350:	e033      	b.n	80093ba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	2201      	movs	r2, #1
 8009356:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	2224      	movs	r2, #36	; 0x24
 800935e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	681a      	ldr	r2, [r3, #0]
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	f022 0201 	bic.w	r2, r2, #1
 8009370:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009380:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	021b      	lsls	r3, r3, #8
 8009386:	68fa      	ldr	r2, [r7, #12]
 8009388:	4313      	orrs	r3, r2
 800938a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	68fa      	ldr	r2, [r7, #12]
 8009392:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	681a      	ldr	r2, [r3, #0]
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	f042 0201 	orr.w	r2, r2, #1
 80093a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	2220      	movs	r2, #32
 80093a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	2200      	movs	r2, #0
 80093b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80093b4:	2300      	movs	r3, #0
 80093b6:	e000      	b.n	80093ba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80093b8:	2302      	movs	r3, #2
  }
}
 80093ba:	4618      	mov	r0, r3
 80093bc:	3714      	adds	r7, #20
 80093be:	46bd      	mov	sp, r7
 80093c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c4:	4770      	bx	lr
	...

080093c8 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 80093c8:	b480      	push	{r7}
 80093ca:	b085      	sub	sp, #20
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80093d0:	4b0b      	ldr	r3, [pc, #44]	; (8009400 <HAL_I2CEx_EnableFastModePlus+0x38>)
 80093d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80093d4:	4a0a      	ldr	r2, [pc, #40]	; (8009400 <HAL_I2CEx_EnableFastModePlus+0x38>)
 80093d6:	f043 0301 	orr.w	r3, r3, #1
 80093da:	6613      	str	r3, [r2, #96]	; 0x60
 80093dc:	4b08      	ldr	r3, [pc, #32]	; (8009400 <HAL_I2CEx_EnableFastModePlus+0x38>)
 80093de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80093e0:	f003 0301 	and.w	r3, r3, #1
 80093e4:	60fb      	str	r3, [r7, #12]
 80093e6:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 80093e8:	4b06      	ldr	r3, [pc, #24]	; (8009404 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 80093ea:	685a      	ldr	r2, [r3, #4]
 80093ec:	4905      	ldr	r1, [pc, #20]	; (8009404 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	4313      	orrs	r3, r2
 80093f2:	604b      	str	r3, [r1, #4]
}
 80093f4:	bf00      	nop
 80093f6:	3714      	adds	r7, #20
 80093f8:	46bd      	mov	sp, r7
 80093fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fe:	4770      	bx	lr
 8009400:	40021000 	.word	0x40021000
 8009404:	40010000 	.word	0x40010000

08009408 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b082      	sub	sp, #8
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
 8009410:	460b      	mov	r3, r1
 8009412:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d10c      	bne.n	8009434 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 800941a:	4b13      	ldr	r3, [pc, #76]	; (8009468 <HAL_PWR_EnterSLEEPMode+0x60>)
 800941c:	695b      	ldr	r3, [r3, #20]
 800941e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009422:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009426:	d10e      	bne.n	8009446 <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8009428:	f000 f8b6 	bl	8009598 <HAL_PWREx_DisableLowPowerRunMode>
 800942c:	4603      	mov	r3, r0
 800942e:	2b00      	cmp	r3, #0
 8009430:	d009      	beq.n	8009446 <HAL_PWR_EnterSLEEPMode+0x3e>
      {
        return ;
 8009432:	e016      	b.n	8009462 <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF) == RESET)
 8009434:	4b0c      	ldr	r3, [pc, #48]	; (8009468 <HAL_PWR_EnterSLEEPMode+0x60>)
 8009436:	695b      	ldr	r3, [r3, #20]
 8009438:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800943c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009440:	d001      	beq.n	8009446 <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8009442:	f000 f899 	bl	8009578 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8009446:	4b09      	ldr	r3, [pc, #36]	; (800946c <HAL_PWR_EnterSLEEPMode+0x64>)
 8009448:	691b      	ldr	r3, [r3, #16]
 800944a:	4a08      	ldr	r2, [pc, #32]	; (800946c <HAL_PWR_EnterSLEEPMode+0x64>)
 800944c:	f023 0304 	bic.w	r3, r3, #4
 8009450:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8009452:	78fb      	ldrb	r3, [r7, #3]
 8009454:	2b01      	cmp	r3, #1
 8009456:	d101      	bne.n	800945c <HAL_PWR_EnterSLEEPMode+0x54>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8009458:	bf30      	wfi
 800945a:	e002      	b.n	8009462 <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800945c:	bf40      	sev
    __WFE();
 800945e:	bf20      	wfe
    __WFE();
 8009460:	bf20      	wfe
  }

}
 8009462:	3708      	adds	r7, #8
 8009464:	46bd      	mov	sp, r7
 8009466:	bd80      	pop	{r7, pc}
 8009468:	40007000 	.word	0x40007000
 800946c:	e000ed00 	.word	0xe000ed00

08009470 <HAL_PWR_EnableSleepOnExit>:
  *       Setting this bit is useful when the processor is expected to run only on
  *       interruptions handling.
  * @retval None
  */
void HAL_PWR_EnableSleepOnExit(void)
{
 8009470:	b480      	push	{r7}
 8009472:	af00      	add	r7, sp, #0
  /* Set SLEEPONEXIT bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8009474:	4b05      	ldr	r3, [pc, #20]	; (800948c <HAL_PWR_EnableSleepOnExit+0x1c>)
 8009476:	691b      	ldr	r3, [r3, #16]
 8009478:	4a04      	ldr	r2, [pc, #16]	; (800948c <HAL_PWR_EnableSleepOnExit+0x1c>)
 800947a:	f043 0302 	orr.w	r3, r3, #2
 800947e:	6113      	str	r3, [r2, #16]
}
 8009480:	bf00      	nop
 8009482:	46bd      	mov	sp, r7
 8009484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009488:	4770      	bx	lr
 800948a:	bf00      	nop
 800948c:	e000ed00 	.word	0xe000ed00

08009490 <HAL_PWR_DisableSleepOnExit>:
  * @note Clear SLEEPONEXIT bit of SCR register. When this bit is set, the processor
  *       re-enters SLEEP mode when an interruption handling is over.
  * @retval None
  */
void HAL_PWR_DisableSleepOnExit(void)
{
 8009490:	b480      	push	{r7}
 8009492:	af00      	add	r7, sp, #0
  /* Clear SLEEPONEXIT bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8009494:	4b05      	ldr	r3, [pc, #20]	; (80094ac <HAL_PWR_DisableSleepOnExit+0x1c>)
 8009496:	691b      	ldr	r3, [r3, #16]
 8009498:	4a04      	ldr	r2, [pc, #16]	; (80094ac <HAL_PWR_DisableSleepOnExit+0x1c>)
 800949a:	f023 0302 	bic.w	r3, r3, #2
 800949e:	6113      	str	r3, [r2, #16]
}
 80094a0:	bf00      	nop
 80094a2:	46bd      	mov	sp, r7
 80094a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a8:	4770      	bx	lr
 80094aa:	bf00      	nop
 80094ac:	e000ed00 	.word	0xe000ed00

080094b0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80094b0:	b480      	push	{r7}
 80094b2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80094b4:	4b04      	ldr	r3, [pc, #16]	; (80094c8 <HAL_PWREx_GetVoltageRange+0x18>)
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80094bc:	4618      	mov	r0, r3
 80094be:	46bd      	mov	sp, r7
 80094c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c4:	4770      	bx	lr
 80094c6:	bf00      	nop
 80094c8:	40007000 	.word	0x40007000

080094cc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80094cc:	b480      	push	{r7}
 80094ce:	b085      	sub	sp, #20
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80094da:	d130      	bne.n	800953e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80094dc:	4b23      	ldr	r3, [pc, #140]	; (800956c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80094e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80094e8:	d038      	beq.n	800955c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80094ea:	4b20      	ldr	r3, [pc, #128]	; (800956c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80094f2:	4a1e      	ldr	r2, [pc, #120]	; (800956c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80094f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80094f8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80094fa:	4b1d      	ldr	r3, [pc, #116]	; (8009570 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	2232      	movs	r2, #50	; 0x32
 8009500:	fb02 f303 	mul.w	r3, r2, r3
 8009504:	4a1b      	ldr	r2, [pc, #108]	; (8009574 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8009506:	fba2 2303 	umull	r2, r3, r2, r3
 800950a:	0c9b      	lsrs	r3, r3, #18
 800950c:	3301      	adds	r3, #1
 800950e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009510:	e002      	b.n	8009518 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	3b01      	subs	r3, #1
 8009516:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009518:	4b14      	ldr	r3, [pc, #80]	; (800956c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800951a:	695b      	ldr	r3, [r3, #20]
 800951c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009520:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009524:	d102      	bne.n	800952c <HAL_PWREx_ControlVoltageScaling+0x60>
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d1f2      	bne.n	8009512 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800952c:	4b0f      	ldr	r3, [pc, #60]	; (800956c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800952e:	695b      	ldr	r3, [r3, #20]
 8009530:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009534:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009538:	d110      	bne.n	800955c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800953a:	2303      	movs	r3, #3
 800953c:	e00f      	b.n	800955e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800953e:	4b0b      	ldr	r3, [pc, #44]	; (800956c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009546:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800954a:	d007      	beq.n	800955c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800954c:	4b07      	ldr	r3, [pc, #28]	; (800956c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009554:	4a05      	ldr	r2, [pc, #20]	; (800956c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009556:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800955a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800955c:	2300      	movs	r3, #0
}
 800955e:	4618      	mov	r0, r3
 8009560:	3714      	adds	r7, #20
 8009562:	46bd      	mov	sp, r7
 8009564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009568:	4770      	bx	lr
 800956a:	bf00      	nop
 800956c:	40007000 	.word	0x40007000
 8009570:	20000214 	.word	0x20000214
 8009574:	431bde83 	.word	0x431bde83

08009578 <HAL_PWREx_EnableLowPowerRunMode>:
  *        Setting RUN_PD in FLASH_ACR then appropriately reducing the clock frequency must
  *        be done before calling HAL_PWREx_EnableLowPowerRunMode() API.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8009578:	b480      	push	{r7}
 800957a:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 800957c:	4b05      	ldr	r3, [pc, #20]	; (8009594 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	4a04      	ldr	r2, [pc, #16]	; (8009594 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 8009582:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009586:	6013      	str	r3, [r2, #0]
}
 8009588:	bf00      	nop
 800958a:	46bd      	mov	sp, r7
 800958c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009590:	4770      	bx	lr
 8009592:	bf00      	nop
 8009594:	40007000 	.word	0x40007000

08009598 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8009598:	b480      	push	{r7}
 800959a:	b083      	sub	sp, #12
 800959c:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 800959e:	4b17      	ldr	r3, [pc, #92]	; (80095fc <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	4a16      	ldr	r2, [pc, #88]	; (80095fc <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 80095a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80095a8:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80095aa:	4b15      	ldr	r3, [pc, #84]	; (8009600 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	2232      	movs	r2, #50	; 0x32
 80095b0:	fb02 f303 	mul.w	r3, r2, r3
 80095b4:	4a13      	ldr	r2, [pc, #76]	; (8009604 <HAL_PWREx_DisableLowPowerRunMode+0x6c>)
 80095b6:	fba2 2303 	umull	r2, r3, r2, r3
 80095ba:	0c9b      	lsrs	r3, r3, #18
 80095bc:	3301      	adds	r3, #1
 80095be:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80095c0:	e002      	b.n	80095c8 <HAL_PWREx_DisableLowPowerRunMode+0x30>
  {
    wait_loop_index--;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	3b01      	subs	r3, #1
 80095c6:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80095c8:	4b0c      	ldr	r3, [pc, #48]	; (80095fc <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 80095ca:	695b      	ldr	r3, [r3, #20]
 80095cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80095d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80095d4:	d102      	bne.n	80095dc <HAL_PWREx_DisableLowPowerRunMode+0x44>
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d1f2      	bne.n	80095c2 <HAL_PWREx_DisableLowPowerRunMode+0x2a>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 80095dc:	4b07      	ldr	r3, [pc, #28]	; (80095fc <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 80095de:	695b      	ldr	r3, [r3, #20]
 80095e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80095e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80095e8:	d101      	bne.n	80095ee <HAL_PWREx_DisableLowPowerRunMode+0x56>
  {
    return HAL_TIMEOUT;
 80095ea:	2303      	movs	r3, #3
 80095ec:	e000      	b.n	80095f0 <HAL_PWREx_DisableLowPowerRunMode+0x58>
  }

  return HAL_OK;
 80095ee:	2300      	movs	r3, #0
}
 80095f0:	4618      	mov	r0, r3
 80095f2:	370c      	adds	r7, #12
 80095f4:	46bd      	mov	sp, r7
 80095f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fa:	4770      	bx	lr
 80095fc:	40007000 	.word	0x40007000
 8009600:	20000214 	.word	0x20000214
 8009604:	431bde83 	.word	0x431bde83

08009608 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009608:	b580      	push	{r7, lr}
 800960a:	b088      	sub	sp, #32
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d101      	bne.n	800961a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009616:	2301      	movs	r3, #1
 8009618:	e3ca      	b.n	8009db0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800961a:	4b97      	ldr	r3, [pc, #604]	; (8009878 <HAL_RCC_OscConfig+0x270>)
 800961c:	689b      	ldr	r3, [r3, #8]
 800961e:	f003 030c 	and.w	r3, r3, #12
 8009622:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009624:	4b94      	ldr	r3, [pc, #592]	; (8009878 <HAL_RCC_OscConfig+0x270>)
 8009626:	68db      	ldr	r3, [r3, #12]
 8009628:	f003 0303 	and.w	r3, r3, #3
 800962c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	f003 0310 	and.w	r3, r3, #16
 8009636:	2b00      	cmp	r3, #0
 8009638:	f000 80e4 	beq.w	8009804 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800963c:	69bb      	ldr	r3, [r7, #24]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d007      	beq.n	8009652 <HAL_RCC_OscConfig+0x4a>
 8009642:	69bb      	ldr	r3, [r7, #24]
 8009644:	2b0c      	cmp	r3, #12
 8009646:	f040 808b 	bne.w	8009760 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800964a:	697b      	ldr	r3, [r7, #20]
 800964c:	2b01      	cmp	r3, #1
 800964e:	f040 8087 	bne.w	8009760 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8009652:	4b89      	ldr	r3, [pc, #548]	; (8009878 <HAL_RCC_OscConfig+0x270>)
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	f003 0302 	and.w	r3, r3, #2
 800965a:	2b00      	cmp	r3, #0
 800965c:	d005      	beq.n	800966a <HAL_RCC_OscConfig+0x62>
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	699b      	ldr	r3, [r3, #24]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d101      	bne.n	800966a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8009666:	2301      	movs	r3, #1
 8009668:	e3a2      	b.n	8009db0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	6a1a      	ldr	r2, [r3, #32]
 800966e:	4b82      	ldr	r3, [pc, #520]	; (8009878 <HAL_RCC_OscConfig+0x270>)
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	f003 0308 	and.w	r3, r3, #8
 8009676:	2b00      	cmp	r3, #0
 8009678:	d004      	beq.n	8009684 <HAL_RCC_OscConfig+0x7c>
 800967a:	4b7f      	ldr	r3, [pc, #508]	; (8009878 <HAL_RCC_OscConfig+0x270>)
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009682:	e005      	b.n	8009690 <HAL_RCC_OscConfig+0x88>
 8009684:	4b7c      	ldr	r3, [pc, #496]	; (8009878 <HAL_RCC_OscConfig+0x270>)
 8009686:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800968a:	091b      	lsrs	r3, r3, #4
 800968c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009690:	4293      	cmp	r3, r2
 8009692:	d223      	bcs.n	80096dc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	6a1b      	ldr	r3, [r3, #32]
 8009698:	4618      	mov	r0, r3
 800969a:	f000 fd55 	bl	800a148 <RCC_SetFlashLatencyFromMSIRange>
 800969e:	4603      	mov	r3, r0
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d001      	beq.n	80096a8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80096a4:	2301      	movs	r3, #1
 80096a6:	e383      	b.n	8009db0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80096a8:	4b73      	ldr	r3, [pc, #460]	; (8009878 <HAL_RCC_OscConfig+0x270>)
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	4a72      	ldr	r2, [pc, #456]	; (8009878 <HAL_RCC_OscConfig+0x270>)
 80096ae:	f043 0308 	orr.w	r3, r3, #8
 80096b2:	6013      	str	r3, [r2, #0]
 80096b4:	4b70      	ldr	r3, [pc, #448]	; (8009878 <HAL_RCC_OscConfig+0x270>)
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	6a1b      	ldr	r3, [r3, #32]
 80096c0:	496d      	ldr	r1, [pc, #436]	; (8009878 <HAL_RCC_OscConfig+0x270>)
 80096c2:	4313      	orrs	r3, r2
 80096c4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80096c6:	4b6c      	ldr	r3, [pc, #432]	; (8009878 <HAL_RCC_OscConfig+0x270>)
 80096c8:	685b      	ldr	r3, [r3, #4]
 80096ca:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	69db      	ldr	r3, [r3, #28]
 80096d2:	021b      	lsls	r3, r3, #8
 80096d4:	4968      	ldr	r1, [pc, #416]	; (8009878 <HAL_RCC_OscConfig+0x270>)
 80096d6:	4313      	orrs	r3, r2
 80096d8:	604b      	str	r3, [r1, #4]
 80096da:	e025      	b.n	8009728 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80096dc:	4b66      	ldr	r3, [pc, #408]	; (8009878 <HAL_RCC_OscConfig+0x270>)
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	4a65      	ldr	r2, [pc, #404]	; (8009878 <HAL_RCC_OscConfig+0x270>)
 80096e2:	f043 0308 	orr.w	r3, r3, #8
 80096e6:	6013      	str	r3, [r2, #0]
 80096e8:	4b63      	ldr	r3, [pc, #396]	; (8009878 <HAL_RCC_OscConfig+0x270>)
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	6a1b      	ldr	r3, [r3, #32]
 80096f4:	4960      	ldr	r1, [pc, #384]	; (8009878 <HAL_RCC_OscConfig+0x270>)
 80096f6:	4313      	orrs	r3, r2
 80096f8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80096fa:	4b5f      	ldr	r3, [pc, #380]	; (8009878 <HAL_RCC_OscConfig+0x270>)
 80096fc:	685b      	ldr	r3, [r3, #4]
 80096fe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	69db      	ldr	r3, [r3, #28]
 8009706:	021b      	lsls	r3, r3, #8
 8009708:	495b      	ldr	r1, [pc, #364]	; (8009878 <HAL_RCC_OscConfig+0x270>)
 800970a:	4313      	orrs	r3, r2
 800970c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800970e:	69bb      	ldr	r3, [r7, #24]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d109      	bne.n	8009728 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	6a1b      	ldr	r3, [r3, #32]
 8009718:	4618      	mov	r0, r3
 800971a:	f000 fd15 	bl	800a148 <RCC_SetFlashLatencyFromMSIRange>
 800971e:	4603      	mov	r3, r0
 8009720:	2b00      	cmp	r3, #0
 8009722:	d001      	beq.n	8009728 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8009724:	2301      	movs	r3, #1
 8009726:	e343      	b.n	8009db0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009728:	f000 fc4a 	bl	8009fc0 <HAL_RCC_GetSysClockFreq>
 800972c:	4602      	mov	r2, r0
 800972e:	4b52      	ldr	r3, [pc, #328]	; (8009878 <HAL_RCC_OscConfig+0x270>)
 8009730:	689b      	ldr	r3, [r3, #8]
 8009732:	091b      	lsrs	r3, r3, #4
 8009734:	f003 030f 	and.w	r3, r3, #15
 8009738:	4950      	ldr	r1, [pc, #320]	; (800987c <HAL_RCC_OscConfig+0x274>)
 800973a:	5ccb      	ldrb	r3, [r1, r3]
 800973c:	f003 031f 	and.w	r3, r3, #31
 8009740:	fa22 f303 	lsr.w	r3, r2, r3
 8009744:	4a4e      	ldr	r2, [pc, #312]	; (8009880 <HAL_RCC_OscConfig+0x278>)
 8009746:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8009748:	4b4e      	ldr	r3, [pc, #312]	; (8009884 <HAL_RCC_OscConfig+0x27c>)
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	4618      	mov	r0, r3
 800974e:	f7fd fb6d 	bl	8006e2c <HAL_InitTick>
 8009752:	4603      	mov	r3, r0
 8009754:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8009756:	7bfb      	ldrb	r3, [r7, #15]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d052      	beq.n	8009802 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800975c:	7bfb      	ldrb	r3, [r7, #15]
 800975e:	e327      	b.n	8009db0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	699b      	ldr	r3, [r3, #24]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d032      	beq.n	80097ce <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8009768:	4b43      	ldr	r3, [pc, #268]	; (8009878 <HAL_RCC_OscConfig+0x270>)
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	4a42      	ldr	r2, [pc, #264]	; (8009878 <HAL_RCC_OscConfig+0x270>)
 800976e:	f043 0301 	orr.w	r3, r3, #1
 8009772:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8009774:	f7fd fbaa 	bl	8006ecc <HAL_GetTick>
 8009778:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800977a:	e008      	b.n	800978e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800977c:	f7fd fba6 	bl	8006ecc <HAL_GetTick>
 8009780:	4602      	mov	r2, r0
 8009782:	693b      	ldr	r3, [r7, #16]
 8009784:	1ad3      	subs	r3, r2, r3
 8009786:	2b02      	cmp	r3, #2
 8009788:	d901      	bls.n	800978e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800978a:	2303      	movs	r3, #3
 800978c:	e310      	b.n	8009db0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800978e:	4b3a      	ldr	r3, [pc, #232]	; (8009878 <HAL_RCC_OscConfig+0x270>)
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	f003 0302 	and.w	r3, r3, #2
 8009796:	2b00      	cmp	r3, #0
 8009798:	d0f0      	beq.n	800977c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800979a:	4b37      	ldr	r3, [pc, #220]	; (8009878 <HAL_RCC_OscConfig+0x270>)
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	4a36      	ldr	r2, [pc, #216]	; (8009878 <HAL_RCC_OscConfig+0x270>)
 80097a0:	f043 0308 	orr.w	r3, r3, #8
 80097a4:	6013      	str	r3, [r2, #0]
 80097a6:	4b34      	ldr	r3, [pc, #208]	; (8009878 <HAL_RCC_OscConfig+0x270>)
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	6a1b      	ldr	r3, [r3, #32]
 80097b2:	4931      	ldr	r1, [pc, #196]	; (8009878 <HAL_RCC_OscConfig+0x270>)
 80097b4:	4313      	orrs	r3, r2
 80097b6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80097b8:	4b2f      	ldr	r3, [pc, #188]	; (8009878 <HAL_RCC_OscConfig+0x270>)
 80097ba:	685b      	ldr	r3, [r3, #4]
 80097bc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	69db      	ldr	r3, [r3, #28]
 80097c4:	021b      	lsls	r3, r3, #8
 80097c6:	492c      	ldr	r1, [pc, #176]	; (8009878 <HAL_RCC_OscConfig+0x270>)
 80097c8:	4313      	orrs	r3, r2
 80097ca:	604b      	str	r3, [r1, #4]
 80097cc:	e01a      	b.n	8009804 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80097ce:	4b2a      	ldr	r3, [pc, #168]	; (8009878 <HAL_RCC_OscConfig+0x270>)
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	4a29      	ldr	r2, [pc, #164]	; (8009878 <HAL_RCC_OscConfig+0x270>)
 80097d4:	f023 0301 	bic.w	r3, r3, #1
 80097d8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80097da:	f7fd fb77 	bl	8006ecc <HAL_GetTick>
 80097de:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80097e0:	e008      	b.n	80097f4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80097e2:	f7fd fb73 	bl	8006ecc <HAL_GetTick>
 80097e6:	4602      	mov	r2, r0
 80097e8:	693b      	ldr	r3, [r7, #16]
 80097ea:	1ad3      	subs	r3, r2, r3
 80097ec:	2b02      	cmp	r3, #2
 80097ee:	d901      	bls.n	80097f4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80097f0:	2303      	movs	r3, #3
 80097f2:	e2dd      	b.n	8009db0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80097f4:	4b20      	ldr	r3, [pc, #128]	; (8009878 <HAL_RCC_OscConfig+0x270>)
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	f003 0302 	and.w	r3, r3, #2
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d1f0      	bne.n	80097e2 <HAL_RCC_OscConfig+0x1da>
 8009800:	e000      	b.n	8009804 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8009802:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	f003 0301 	and.w	r3, r3, #1
 800980c:	2b00      	cmp	r3, #0
 800980e:	d074      	beq.n	80098fa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8009810:	69bb      	ldr	r3, [r7, #24]
 8009812:	2b08      	cmp	r3, #8
 8009814:	d005      	beq.n	8009822 <HAL_RCC_OscConfig+0x21a>
 8009816:	69bb      	ldr	r3, [r7, #24]
 8009818:	2b0c      	cmp	r3, #12
 800981a:	d10e      	bne.n	800983a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800981c:	697b      	ldr	r3, [r7, #20]
 800981e:	2b03      	cmp	r3, #3
 8009820:	d10b      	bne.n	800983a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009822:	4b15      	ldr	r3, [pc, #84]	; (8009878 <HAL_RCC_OscConfig+0x270>)
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800982a:	2b00      	cmp	r3, #0
 800982c:	d064      	beq.n	80098f8 <HAL_RCC_OscConfig+0x2f0>
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	685b      	ldr	r3, [r3, #4]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d160      	bne.n	80098f8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8009836:	2301      	movs	r3, #1
 8009838:	e2ba      	b.n	8009db0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	685b      	ldr	r3, [r3, #4]
 800983e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009842:	d106      	bne.n	8009852 <HAL_RCC_OscConfig+0x24a>
 8009844:	4b0c      	ldr	r3, [pc, #48]	; (8009878 <HAL_RCC_OscConfig+0x270>)
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	4a0b      	ldr	r2, [pc, #44]	; (8009878 <HAL_RCC_OscConfig+0x270>)
 800984a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800984e:	6013      	str	r3, [r2, #0]
 8009850:	e026      	b.n	80098a0 <HAL_RCC_OscConfig+0x298>
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	685b      	ldr	r3, [r3, #4]
 8009856:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800985a:	d115      	bne.n	8009888 <HAL_RCC_OscConfig+0x280>
 800985c:	4b06      	ldr	r3, [pc, #24]	; (8009878 <HAL_RCC_OscConfig+0x270>)
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	4a05      	ldr	r2, [pc, #20]	; (8009878 <HAL_RCC_OscConfig+0x270>)
 8009862:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009866:	6013      	str	r3, [r2, #0]
 8009868:	4b03      	ldr	r3, [pc, #12]	; (8009878 <HAL_RCC_OscConfig+0x270>)
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	4a02      	ldr	r2, [pc, #8]	; (8009878 <HAL_RCC_OscConfig+0x270>)
 800986e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009872:	6013      	str	r3, [r2, #0]
 8009874:	e014      	b.n	80098a0 <HAL_RCC_OscConfig+0x298>
 8009876:	bf00      	nop
 8009878:	40021000 	.word	0x40021000
 800987c:	08014ac4 	.word	0x08014ac4
 8009880:	20000214 	.word	0x20000214
 8009884:	20000244 	.word	0x20000244
 8009888:	4ba0      	ldr	r3, [pc, #640]	; (8009b0c <HAL_RCC_OscConfig+0x504>)
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	4a9f      	ldr	r2, [pc, #636]	; (8009b0c <HAL_RCC_OscConfig+0x504>)
 800988e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009892:	6013      	str	r3, [r2, #0]
 8009894:	4b9d      	ldr	r3, [pc, #628]	; (8009b0c <HAL_RCC_OscConfig+0x504>)
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	4a9c      	ldr	r2, [pc, #624]	; (8009b0c <HAL_RCC_OscConfig+0x504>)
 800989a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800989e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	685b      	ldr	r3, [r3, #4]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d013      	beq.n	80098d0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098a8:	f7fd fb10 	bl	8006ecc <HAL_GetTick>
 80098ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80098ae:	e008      	b.n	80098c2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80098b0:	f7fd fb0c 	bl	8006ecc <HAL_GetTick>
 80098b4:	4602      	mov	r2, r0
 80098b6:	693b      	ldr	r3, [r7, #16]
 80098b8:	1ad3      	subs	r3, r2, r3
 80098ba:	2b64      	cmp	r3, #100	; 0x64
 80098bc:	d901      	bls.n	80098c2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80098be:	2303      	movs	r3, #3
 80098c0:	e276      	b.n	8009db0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80098c2:	4b92      	ldr	r3, [pc, #584]	; (8009b0c <HAL_RCC_OscConfig+0x504>)
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d0f0      	beq.n	80098b0 <HAL_RCC_OscConfig+0x2a8>
 80098ce:	e014      	b.n	80098fa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098d0:	f7fd fafc 	bl	8006ecc <HAL_GetTick>
 80098d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80098d6:	e008      	b.n	80098ea <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80098d8:	f7fd faf8 	bl	8006ecc <HAL_GetTick>
 80098dc:	4602      	mov	r2, r0
 80098de:	693b      	ldr	r3, [r7, #16]
 80098e0:	1ad3      	subs	r3, r2, r3
 80098e2:	2b64      	cmp	r3, #100	; 0x64
 80098e4:	d901      	bls.n	80098ea <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80098e6:	2303      	movs	r3, #3
 80098e8:	e262      	b.n	8009db0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80098ea:	4b88      	ldr	r3, [pc, #544]	; (8009b0c <HAL_RCC_OscConfig+0x504>)
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d1f0      	bne.n	80098d8 <HAL_RCC_OscConfig+0x2d0>
 80098f6:	e000      	b.n	80098fa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80098f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	f003 0302 	and.w	r3, r3, #2
 8009902:	2b00      	cmp	r3, #0
 8009904:	d060      	beq.n	80099c8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8009906:	69bb      	ldr	r3, [r7, #24]
 8009908:	2b04      	cmp	r3, #4
 800990a:	d005      	beq.n	8009918 <HAL_RCC_OscConfig+0x310>
 800990c:	69bb      	ldr	r3, [r7, #24]
 800990e:	2b0c      	cmp	r3, #12
 8009910:	d119      	bne.n	8009946 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8009912:	697b      	ldr	r3, [r7, #20]
 8009914:	2b02      	cmp	r3, #2
 8009916:	d116      	bne.n	8009946 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009918:	4b7c      	ldr	r3, [pc, #496]	; (8009b0c <HAL_RCC_OscConfig+0x504>)
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009920:	2b00      	cmp	r3, #0
 8009922:	d005      	beq.n	8009930 <HAL_RCC_OscConfig+0x328>
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	68db      	ldr	r3, [r3, #12]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d101      	bne.n	8009930 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800992c:	2301      	movs	r3, #1
 800992e:	e23f      	b.n	8009db0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009930:	4b76      	ldr	r3, [pc, #472]	; (8009b0c <HAL_RCC_OscConfig+0x504>)
 8009932:	685b      	ldr	r3, [r3, #4]
 8009934:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	691b      	ldr	r3, [r3, #16]
 800993c:	061b      	lsls	r3, r3, #24
 800993e:	4973      	ldr	r1, [pc, #460]	; (8009b0c <HAL_RCC_OscConfig+0x504>)
 8009940:	4313      	orrs	r3, r2
 8009942:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009944:	e040      	b.n	80099c8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	68db      	ldr	r3, [r3, #12]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d023      	beq.n	8009996 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800994e:	4b6f      	ldr	r3, [pc, #444]	; (8009b0c <HAL_RCC_OscConfig+0x504>)
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	4a6e      	ldr	r2, [pc, #440]	; (8009b0c <HAL_RCC_OscConfig+0x504>)
 8009954:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009958:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800995a:	f7fd fab7 	bl	8006ecc <HAL_GetTick>
 800995e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009960:	e008      	b.n	8009974 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009962:	f7fd fab3 	bl	8006ecc <HAL_GetTick>
 8009966:	4602      	mov	r2, r0
 8009968:	693b      	ldr	r3, [r7, #16]
 800996a:	1ad3      	subs	r3, r2, r3
 800996c:	2b02      	cmp	r3, #2
 800996e:	d901      	bls.n	8009974 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8009970:	2303      	movs	r3, #3
 8009972:	e21d      	b.n	8009db0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009974:	4b65      	ldr	r3, [pc, #404]	; (8009b0c <HAL_RCC_OscConfig+0x504>)
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800997c:	2b00      	cmp	r3, #0
 800997e:	d0f0      	beq.n	8009962 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009980:	4b62      	ldr	r3, [pc, #392]	; (8009b0c <HAL_RCC_OscConfig+0x504>)
 8009982:	685b      	ldr	r3, [r3, #4]
 8009984:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	691b      	ldr	r3, [r3, #16]
 800998c:	061b      	lsls	r3, r3, #24
 800998e:	495f      	ldr	r1, [pc, #380]	; (8009b0c <HAL_RCC_OscConfig+0x504>)
 8009990:	4313      	orrs	r3, r2
 8009992:	604b      	str	r3, [r1, #4]
 8009994:	e018      	b.n	80099c8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009996:	4b5d      	ldr	r3, [pc, #372]	; (8009b0c <HAL_RCC_OscConfig+0x504>)
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	4a5c      	ldr	r2, [pc, #368]	; (8009b0c <HAL_RCC_OscConfig+0x504>)
 800999c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80099a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099a2:	f7fd fa93 	bl	8006ecc <HAL_GetTick>
 80099a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80099a8:	e008      	b.n	80099bc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80099aa:	f7fd fa8f 	bl	8006ecc <HAL_GetTick>
 80099ae:	4602      	mov	r2, r0
 80099b0:	693b      	ldr	r3, [r7, #16]
 80099b2:	1ad3      	subs	r3, r2, r3
 80099b4:	2b02      	cmp	r3, #2
 80099b6:	d901      	bls.n	80099bc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80099b8:	2303      	movs	r3, #3
 80099ba:	e1f9      	b.n	8009db0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80099bc:	4b53      	ldr	r3, [pc, #332]	; (8009b0c <HAL_RCC_OscConfig+0x504>)
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d1f0      	bne.n	80099aa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	f003 0308 	and.w	r3, r3, #8
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d03c      	beq.n	8009a4e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	695b      	ldr	r3, [r3, #20]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d01c      	beq.n	8009a16 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80099dc:	4b4b      	ldr	r3, [pc, #300]	; (8009b0c <HAL_RCC_OscConfig+0x504>)
 80099de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80099e2:	4a4a      	ldr	r2, [pc, #296]	; (8009b0c <HAL_RCC_OscConfig+0x504>)
 80099e4:	f043 0301 	orr.w	r3, r3, #1
 80099e8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80099ec:	f7fd fa6e 	bl	8006ecc <HAL_GetTick>
 80099f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80099f2:	e008      	b.n	8009a06 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80099f4:	f7fd fa6a 	bl	8006ecc <HAL_GetTick>
 80099f8:	4602      	mov	r2, r0
 80099fa:	693b      	ldr	r3, [r7, #16]
 80099fc:	1ad3      	subs	r3, r2, r3
 80099fe:	2b02      	cmp	r3, #2
 8009a00:	d901      	bls.n	8009a06 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8009a02:	2303      	movs	r3, #3
 8009a04:	e1d4      	b.n	8009db0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009a06:	4b41      	ldr	r3, [pc, #260]	; (8009b0c <HAL_RCC_OscConfig+0x504>)
 8009a08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009a0c:	f003 0302 	and.w	r3, r3, #2
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d0ef      	beq.n	80099f4 <HAL_RCC_OscConfig+0x3ec>
 8009a14:	e01b      	b.n	8009a4e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009a16:	4b3d      	ldr	r3, [pc, #244]	; (8009b0c <HAL_RCC_OscConfig+0x504>)
 8009a18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009a1c:	4a3b      	ldr	r2, [pc, #236]	; (8009b0c <HAL_RCC_OscConfig+0x504>)
 8009a1e:	f023 0301 	bic.w	r3, r3, #1
 8009a22:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009a26:	f7fd fa51 	bl	8006ecc <HAL_GetTick>
 8009a2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009a2c:	e008      	b.n	8009a40 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009a2e:	f7fd fa4d 	bl	8006ecc <HAL_GetTick>
 8009a32:	4602      	mov	r2, r0
 8009a34:	693b      	ldr	r3, [r7, #16]
 8009a36:	1ad3      	subs	r3, r2, r3
 8009a38:	2b02      	cmp	r3, #2
 8009a3a:	d901      	bls.n	8009a40 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8009a3c:	2303      	movs	r3, #3
 8009a3e:	e1b7      	b.n	8009db0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009a40:	4b32      	ldr	r3, [pc, #200]	; (8009b0c <HAL_RCC_OscConfig+0x504>)
 8009a42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009a46:	f003 0302 	and.w	r3, r3, #2
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d1ef      	bne.n	8009a2e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	f003 0304 	and.w	r3, r3, #4
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	f000 80a6 	beq.w	8009ba8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8009a60:	4b2a      	ldr	r3, [pc, #168]	; (8009b0c <HAL_RCC_OscConfig+0x504>)
 8009a62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d10d      	bne.n	8009a88 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009a6c:	4b27      	ldr	r3, [pc, #156]	; (8009b0c <HAL_RCC_OscConfig+0x504>)
 8009a6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a70:	4a26      	ldr	r2, [pc, #152]	; (8009b0c <HAL_RCC_OscConfig+0x504>)
 8009a72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009a76:	6593      	str	r3, [r2, #88]	; 0x58
 8009a78:	4b24      	ldr	r3, [pc, #144]	; (8009b0c <HAL_RCC_OscConfig+0x504>)
 8009a7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009a80:	60bb      	str	r3, [r7, #8]
 8009a82:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009a84:	2301      	movs	r3, #1
 8009a86:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009a88:	4b21      	ldr	r3, [pc, #132]	; (8009b10 <HAL_RCC_OscConfig+0x508>)
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d118      	bne.n	8009ac6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009a94:	4b1e      	ldr	r3, [pc, #120]	; (8009b10 <HAL_RCC_OscConfig+0x508>)
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	4a1d      	ldr	r2, [pc, #116]	; (8009b10 <HAL_RCC_OscConfig+0x508>)
 8009a9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009a9e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009aa0:	f7fd fa14 	bl	8006ecc <HAL_GetTick>
 8009aa4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009aa6:	e008      	b.n	8009aba <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009aa8:	f7fd fa10 	bl	8006ecc <HAL_GetTick>
 8009aac:	4602      	mov	r2, r0
 8009aae:	693b      	ldr	r3, [r7, #16]
 8009ab0:	1ad3      	subs	r3, r2, r3
 8009ab2:	2b02      	cmp	r3, #2
 8009ab4:	d901      	bls.n	8009aba <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8009ab6:	2303      	movs	r3, #3
 8009ab8:	e17a      	b.n	8009db0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009aba:	4b15      	ldr	r3, [pc, #84]	; (8009b10 <HAL_RCC_OscConfig+0x508>)
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d0f0      	beq.n	8009aa8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	689b      	ldr	r3, [r3, #8]
 8009aca:	2b01      	cmp	r3, #1
 8009acc:	d108      	bne.n	8009ae0 <HAL_RCC_OscConfig+0x4d8>
 8009ace:	4b0f      	ldr	r3, [pc, #60]	; (8009b0c <HAL_RCC_OscConfig+0x504>)
 8009ad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ad4:	4a0d      	ldr	r2, [pc, #52]	; (8009b0c <HAL_RCC_OscConfig+0x504>)
 8009ad6:	f043 0301 	orr.w	r3, r3, #1
 8009ada:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009ade:	e029      	b.n	8009b34 <HAL_RCC_OscConfig+0x52c>
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	689b      	ldr	r3, [r3, #8]
 8009ae4:	2b05      	cmp	r3, #5
 8009ae6:	d115      	bne.n	8009b14 <HAL_RCC_OscConfig+0x50c>
 8009ae8:	4b08      	ldr	r3, [pc, #32]	; (8009b0c <HAL_RCC_OscConfig+0x504>)
 8009aea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009aee:	4a07      	ldr	r2, [pc, #28]	; (8009b0c <HAL_RCC_OscConfig+0x504>)
 8009af0:	f043 0304 	orr.w	r3, r3, #4
 8009af4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009af8:	4b04      	ldr	r3, [pc, #16]	; (8009b0c <HAL_RCC_OscConfig+0x504>)
 8009afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009afe:	4a03      	ldr	r2, [pc, #12]	; (8009b0c <HAL_RCC_OscConfig+0x504>)
 8009b00:	f043 0301 	orr.w	r3, r3, #1
 8009b04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009b08:	e014      	b.n	8009b34 <HAL_RCC_OscConfig+0x52c>
 8009b0a:	bf00      	nop
 8009b0c:	40021000 	.word	0x40021000
 8009b10:	40007000 	.word	0x40007000
 8009b14:	4b9c      	ldr	r3, [pc, #624]	; (8009d88 <HAL_RCC_OscConfig+0x780>)
 8009b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b1a:	4a9b      	ldr	r2, [pc, #620]	; (8009d88 <HAL_RCC_OscConfig+0x780>)
 8009b1c:	f023 0301 	bic.w	r3, r3, #1
 8009b20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009b24:	4b98      	ldr	r3, [pc, #608]	; (8009d88 <HAL_RCC_OscConfig+0x780>)
 8009b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b2a:	4a97      	ldr	r2, [pc, #604]	; (8009d88 <HAL_RCC_OscConfig+0x780>)
 8009b2c:	f023 0304 	bic.w	r3, r3, #4
 8009b30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	689b      	ldr	r3, [r3, #8]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d016      	beq.n	8009b6a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009b3c:	f7fd f9c6 	bl	8006ecc <HAL_GetTick>
 8009b40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009b42:	e00a      	b.n	8009b5a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009b44:	f7fd f9c2 	bl	8006ecc <HAL_GetTick>
 8009b48:	4602      	mov	r2, r0
 8009b4a:	693b      	ldr	r3, [r7, #16]
 8009b4c:	1ad3      	subs	r3, r2, r3
 8009b4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b52:	4293      	cmp	r3, r2
 8009b54:	d901      	bls.n	8009b5a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8009b56:	2303      	movs	r3, #3
 8009b58:	e12a      	b.n	8009db0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009b5a:	4b8b      	ldr	r3, [pc, #556]	; (8009d88 <HAL_RCC_OscConfig+0x780>)
 8009b5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b60:	f003 0302 	and.w	r3, r3, #2
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d0ed      	beq.n	8009b44 <HAL_RCC_OscConfig+0x53c>
 8009b68:	e015      	b.n	8009b96 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009b6a:	f7fd f9af 	bl	8006ecc <HAL_GetTick>
 8009b6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009b70:	e00a      	b.n	8009b88 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009b72:	f7fd f9ab 	bl	8006ecc <HAL_GetTick>
 8009b76:	4602      	mov	r2, r0
 8009b78:	693b      	ldr	r3, [r7, #16]
 8009b7a:	1ad3      	subs	r3, r2, r3
 8009b7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b80:	4293      	cmp	r3, r2
 8009b82:	d901      	bls.n	8009b88 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8009b84:	2303      	movs	r3, #3
 8009b86:	e113      	b.n	8009db0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009b88:	4b7f      	ldr	r3, [pc, #508]	; (8009d88 <HAL_RCC_OscConfig+0x780>)
 8009b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b8e:	f003 0302 	and.w	r3, r3, #2
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d1ed      	bne.n	8009b72 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009b96:	7ffb      	ldrb	r3, [r7, #31]
 8009b98:	2b01      	cmp	r3, #1
 8009b9a:	d105      	bne.n	8009ba8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009b9c:	4b7a      	ldr	r3, [pc, #488]	; (8009d88 <HAL_RCC_OscConfig+0x780>)
 8009b9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ba0:	4a79      	ldr	r2, [pc, #484]	; (8009d88 <HAL_RCC_OscConfig+0x780>)
 8009ba2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009ba6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	f000 80fe 	beq.w	8009dae <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bb6:	2b02      	cmp	r3, #2
 8009bb8:	f040 80d0 	bne.w	8009d5c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8009bbc:	4b72      	ldr	r3, [pc, #456]	; (8009d88 <HAL_RCC_OscConfig+0x780>)
 8009bbe:	68db      	ldr	r3, [r3, #12]
 8009bc0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8009bc2:	697b      	ldr	r3, [r7, #20]
 8009bc4:	f003 0203 	and.w	r2, r3, #3
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bcc:	429a      	cmp	r2, r3
 8009bce:	d130      	bne.n	8009c32 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009bd0:	697b      	ldr	r3, [r7, #20]
 8009bd2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bda:	3b01      	subs	r3, #1
 8009bdc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8009bde:	429a      	cmp	r2, r3
 8009be0:	d127      	bne.n	8009c32 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009be2:	697b      	ldr	r3, [r7, #20]
 8009be4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bec:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009bee:	429a      	cmp	r2, r3
 8009bf0:	d11f      	bne.n	8009c32 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8009bf2:	697b      	ldr	r3, [r7, #20]
 8009bf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009bf8:	687a      	ldr	r2, [r7, #4]
 8009bfa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009bfc:	2a07      	cmp	r2, #7
 8009bfe:	bf14      	ite	ne
 8009c00:	2201      	movne	r2, #1
 8009c02:	2200      	moveq	r2, #0
 8009c04:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009c06:	4293      	cmp	r3, r2
 8009c08:	d113      	bne.n	8009c32 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009c0a:	697b      	ldr	r3, [r7, #20]
 8009c0c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c14:	085b      	lsrs	r3, r3, #1
 8009c16:	3b01      	subs	r3, #1
 8009c18:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8009c1a:	429a      	cmp	r2, r3
 8009c1c:	d109      	bne.n	8009c32 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8009c1e:	697b      	ldr	r3, [r7, #20]
 8009c20:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c28:	085b      	lsrs	r3, r3, #1
 8009c2a:	3b01      	subs	r3, #1
 8009c2c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009c2e:	429a      	cmp	r2, r3
 8009c30:	d06e      	beq.n	8009d10 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8009c32:	69bb      	ldr	r3, [r7, #24]
 8009c34:	2b0c      	cmp	r3, #12
 8009c36:	d069      	beq.n	8009d0c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8009c38:	4b53      	ldr	r3, [pc, #332]	; (8009d88 <HAL_RCC_OscConfig+0x780>)
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d105      	bne.n	8009c50 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8009c44:	4b50      	ldr	r3, [pc, #320]	; (8009d88 <HAL_RCC_OscConfig+0x780>)
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d001      	beq.n	8009c54 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8009c50:	2301      	movs	r3, #1
 8009c52:	e0ad      	b.n	8009db0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8009c54:	4b4c      	ldr	r3, [pc, #304]	; (8009d88 <HAL_RCC_OscConfig+0x780>)
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	4a4b      	ldr	r2, [pc, #300]	; (8009d88 <HAL_RCC_OscConfig+0x780>)
 8009c5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009c5e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8009c60:	f7fd f934 	bl	8006ecc <HAL_GetTick>
 8009c64:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009c66:	e008      	b.n	8009c7a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009c68:	f7fd f930 	bl	8006ecc <HAL_GetTick>
 8009c6c:	4602      	mov	r2, r0
 8009c6e:	693b      	ldr	r3, [r7, #16]
 8009c70:	1ad3      	subs	r3, r2, r3
 8009c72:	2b02      	cmp	r3, #2
 8009c74:	d901      	bls.n	8009c7a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8009c76:	2303      	movs	r3, #3
 8009c78:	e09a      	b.n	8009db0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009c7a:	4b43      	ldr	r3, [pc, #268]	; (8009d88 <HAL_RCC_OscConfig+0x780>)
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d1f0      	bne.n	8009c68 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009c86:	4b40      	ldr	r3, [pc, #256]	; (8009d88 <HAL_RCC_OscConfig+0x780>)
 8009c88:	68da      	ldr	r2, [r3, #12]
 8009c8a:	4b40      	ldr	r3, [pc, #256]	; (8009d8c <HAL_RCC_OscConfig+0x784>)
 8009c8c:	4013      	ands	r3, r2
 8009c8e:	687a      	ldr	r2, [r7, #4]
 8009c90:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8009c92:	687a      	ldr	r2, [r7, #4]
 8009c94:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8009c96:	3a01      	subs	r2, #1
 8009c98:	0112      	lsls	r2, r2, #4
 8009c9a:	4311      	orrs	r1, r2
 8009c9c:	687a      	ldr	r2, [r7, #4]
 8009c9e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009ca0:	0212      	lsls	r2, r2, #8
 8009ca2:	4311      	orrs	r1, r2
 8009ca4:	687a      	ldr	r2, [r7, #4]
 8009ca6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8009ca8:	0852      	lsrs	r2, r2, #1
 8009caa:	3a01      	subs	r2, #1
 8009cac:	0552      	lsls	r2, r2, #21
 8009cae:	4311      	orrs	r1, r2
 8009cb0:	687a      	ldr	r2, [r7, #4]
 8009cb2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8009cb4:	0852      	lsrs	r2, r2, #1
 8009cb6:	3a01      	subs	r2, #1
 8009cb8:	0652      	lsls	r2, r2, #25
 8009cba:	4311      	orrs	r1, r2
 8009cbc:	687a      	ldr	r2, [r7, #4]
 8009cbe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009cc0:	0912      	lsrs	r2, r2, #4
 8009cc2:	0452      	lsls	r2, r2, #17
 8009cc4:	430a      	orrs	r2, r1
 8009cc6:	4930      	ldr	r1, [pc, #192]	; (8009d88 <HAL_RCC_OscConfig+0x780>)
 8009cc8:	4313      	orrs	r3, r2
 8009cca:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8009ccc:	4b2e      	ldr	r3, [pc, #184]	; (8009d88 <HAL_RCC_OscConfig+0x780>)
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	4a2d      	ldr	r2, [pc, #180]	; (8009d88 <HAL_RCC_OscConfig+0x780>)
 8009cd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009cd6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009cd8:	4b2b      	ldr	r3, [pc, #172]	; (8009d88 <HAL_RCC_OscConfig+0x780>)
 8009cda:	68db      	ldr	r3, [r3, #12]
 8009cdc:	4a2a      	ldr	r2, [pc, #168]	; (8009d88 <HAL_RCC_OscConfig+0x780>)
 8009cde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009ce2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8009ce4:	f7fd f8f2 	bl	8006ecc <HAL_GetTick>
 8009ce8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009cea:	e008      	b.n	8009cfe <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009cec:	f7fd f8ee 	bl	8006ecc <HAL_GetTick>
 8009cf0:	4602      	mov	r2, r0
 8009cf2:	693b      	ldr	r3, [r7, #16]
 8009cf4:	1ad3      	subs	r3, r2, r3
 8009cf6:	2b02      	cmp	r3, #2
 8009cf8:	d901      	bls.n	8009cfe <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8009cfa:	2303      	movs	r3, #3
 8009cfc:	e058      	b.n	8009db0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009cfe:	4b22      	ldr	r3, [pc, #136]	; (8009d88 <HAL_RCC_OscConfig+0x780>)
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d0f0      	beq.n	8009cec <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8009d0a:	e050      	b.n	8009dae <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8009d0c:	2301      	movs	r3, #1
 8009d0e:	e04f      	b.n	8009db0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009d10:	4b1d      	ldr	r3, [pc, #116]	; (8009d88 <HAL_RCC_OscConfig+0x780>)
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d148      	bne.n	8009dae <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8009d1c:	4b1a      	ldr	r3, [pc, #104]	; (8009d88 <HAL_RCC_OscConfig+0x780>)
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	4a19      	ldr	r2, [pc, #100]	; (8009d88 <HAL_RCC_OscConfig+0x780>)
 8009d22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009d26:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009d28:	4b17      	ldr	r3, [pc, #92]	; (8009d88 <HAL_RCC_OscConfig+0x780>)
 8009d2a:	68db      	ldr	r3, [r3, #12]
 8009d2c:	4a16      	ldr	r2, [pc, #88]	; (8009d88 <HAL_RCC_OscConfig+0x780>)
 8009d2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009d32:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009d34:	f7fd f8ca 	bl	8006ecc <HAL_GetTick>
 8009d38:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009d3a:	e008      	b.n	8009d4e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009d3c:	f7fd f8c6 	bl	8006ecc <HAL_GetTick>
 8009d40:	4602      	mov	r2, r0
 8009d42:	693b      	ldr	r3, [r7, #16]
 8009d44:	1ad3      	subs	r3, r2, r3
 8009d46:	2b02      	cmp	r3, #2
 8009d48:	d901      	bls.n	8009d4e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8009d4a:	2303      	movs	r3, #3
 8009d4c:	e030      	b.n	8009db0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009d4e:	4b0e      	ldr	r3, [pc, #56]	; (8009d88 <HAL_RCC_OscConfig+0x780>)
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d0f0      	beq.n	8009d3c <HAL_RCC_OscConfig+0x734>
 8009d5a:	e028      	b.n	8009dae <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8009d5c:	69bb      	ldr	r3, [r7, #24]
 8009d5e:	2b0c      	cmp	r3, #12
 8009d60:	d023      	beq.n	8009daa <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009d62:	4b09      	ldr	r3, [pc, #36]	; (8009d88 <HAL_RCC_OscConfig+0x780>)
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	4a08      	ldr	r2, [pc, #32]	; (8009d88 <HAL_RCC_OscConfig+0x780>)
 8009d68:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009d6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d6e:	f7fd f8ad 	bl	8006ecc <HAL_GetTick>
 8009d72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009d74:	e00c      	b.n	8009d90 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009d76:	f7fd f8a9 	bl	8006ecc <HAL_GetTick>
 8009d7a:	4602      	mov	r2, r0
 8009d7c:	693b      	ldr	r3, [r7, #16]
 8009d7e:	1ad3      	subs	r3, r2, r3
 8009d80:	2b02      	cmp	r3, #2
 8009d82:	d905      	bls.n	8009d90 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8009d84:	2303      	movs	r3, #3
 8009d86:	e013      	b.n	8009db0 <HAL_RCC_OscConfig+0x7a8>
 8009d88:	40021000 	.word	0x40021000
 8009d8c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009d90:	4b09      	ldr	r3, [pc, #36]	; (8009db8 <HAL_RCC_OscConfig+0x7b0>)
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d1ec      	bne.n	8009d76 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8009d9c:	4b06      	ldr	r3, [pc, #24]	; (8009db8 <HAL_RCC_OscConfig+0x7b0>)
 8009d9e:	68da      	ldr	r2, [r3, #12]
 8009da0:	4905      	ldr	r1, [pc, #20]	; (8009db8 <HAL_RCC_OscConfig+0x7b0>)
 8009da2:	4b06      	ldr	r3, [pc, #24]	; (8009dbc <HAL_RCC_OscConfig+0x7b4>)
 8009da4:	4013      	ands	r3, r2
 8009da6:	60cb      	str	r3, [r1, #12]
 8009da8:	e001      	b.n	8009dae <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8009daa:	2301      	movs	r3, #1
 8009dac:	e000      	b.n	8009db0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8009dae:	2300      	movs	r3, #0
}
 8009db0:	4618      	mov	r0, r3
 8009db2:	3720      	adds	r7, #32
 8009db4:	46bd      	mov	sp, r7
 8009db6:	bd80      	pop	{r7, pc}
 8009db8:	40021000 	.word	0x40021000
 8009dbc:	feeefffc 	.word	0xfeeefffc

08009dc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b084      	sub	sp, #16
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
 8009dc8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d101      	bne.n	8009dd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009dd0:	2301      	movs	r3, #1
 8009dd2:	e0e7      	b.n	8009fa4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009dd4:	4b75      	ldr	r3, [pc, #468]	; (8009fac <HAL_RCC_ClockConfig+0x1ec>)
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	f003 0307 	and.w	r3, r3, #7
 8009ddc:	683a      	ldr	r2, [r7, #0]
 8009dde:	429a      	cmp	r2, r3
 8009de0:	d910      	bls.n	8009e04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009de2:	4b72      	ldr	r3, [pc, #456]	; (8009fac <HAL_RCC_ClockConfig+0x1ec>)
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	f023 0207 	bic.w	r2, r3, #7
 8009dea:	4970      	ldr	r1, [pc, #448]	; (8009fac <HAL_RCC_ClockConfig+0x1ec>)
 8009dec:	683b      	ldr	r3, [r7, #0]
 8009dee:	4313      	orrs	r3, r2
 8009df0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009df2:	4b6e      	ldr	r3, [pc, #440]	; (8009fac <HAL_RCC_ClockConfig+0x1ec>)
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	f003 0307 	and.w	r3, r3, #7
 8009dfa:	683a      	ldr	r2, [r7, #0]
 8009dfc:	429a      	cmp	r2, r3
 8009dfe:	d001      	beq.n	8009e04 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009e00:	2301      	movs	r3, #1
 8009e02:	e0cf      	b.n	8009fa4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	f003 0302 	and.w	r3, r3, #2
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d010      	beq.n	8009e32 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	689a      	ldr	r2, [r3, #8]
 8009e14:	4b66      	ldr	r3, [pc, #408]	; (8009fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8009e16:	689b      	ldr	r3, [r3, #8]
 8009e18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009e1c:	429a      	cmp	r2, r3
 8009e1e:	d908      	bls.n	8009e32 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009e20:	4b63      	ldr	r3, [pc, #396]	; (8009fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8009e22:	689b      	ldr	r3, [r3, #8]
 8009e24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	689b      	ldr	r3, [r3, #8]
 8009e2c:	4960      	ldr	r1, [pc, #384]	; (8009fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8009e2e:	4313      	orrs	r3, r2
 8009e30:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	f003 0301 	and.w	r3, r3, #1
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d04c      	beq.n	8009ed8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	685b      	ldr	r3, [r3, #4]
 8009e42:	2b03      	cmp	r3, #3
 8009e44:	d107      	bne.n	8009e56 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009e46:	4b5a      	ldr	r3, [pc, #360]	; (8009fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d121      	bne.n	8009e96 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8009e52:	2301      	movs	r3, #1
 8009e54:	e0a6      	b.n	8009fa4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	685b      	ldr	r3, [r3, #4]
 8009e5a:	2b02      	cmp	r3, #2
 8009e5c:	d107      	bne.n	8009e6e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009e5e:	4b54      	ldr	r3, [pc, #336]	; (8009fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d115      	bne.n	8009e96 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8009e6a:	2301      	movs	r3, #1
 8009e6c:	e09a      	b.n	8009fa4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	685b      	ldr	r3, [r3, #4]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d107      	bne.n	8009e86 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8009e76:	4b4e      	ldr	r3, [pc, #312]	; (8009fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	f003 0302 	and.w	r3, r3, #2
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d109      	bne.n	8009e96 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8009e82:	2301      	movs	r3, #1
 8009e84:	e08e      	b.n	8009fa4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009e86:	4b4a      	ldr	r3, [pc, #296]	; (8009fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d101      	bne.n	8009e96 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8009e92:	2301      	movs	r3, #1
 8009e94:	e086      	b.n	8009fa4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009e96:	4b46      	ldr	r3, [pc, #280]	; (8009fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8009e98:	689b      	ldr	r3, [r3, #8]
 8009e9a:	f023 0203 	bic.w	r2, r3, #3
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	685b      	ldr	r3, [r3, #4]
 8009ea2:	4943      	ldr	r1, [pc, #268]	; (8009fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8009ea4:	4313      	orrs	r3, r2
 8009ea6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009ea8:	f7fd f810 	bl	8006ecc <HAL_GetTick>
 8009eac:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009eae:	e00a      	b.n	8009ec6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009eb0:	f7fd f80c 	bl	8006ecc <HAL_GetTick>
 8009eb4:	4602      	mov	r2, r0
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	1ad3      	subs	r3, r2, r3
 8009eba:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ebe:	4293      	cmp	r3, r2
 8009ec0:	d901      	bls.n	8009ec6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8009ec2:	2303      	movs	r3, #3
 8009ec4:	e06e      	b.n	8009fa4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009ec6:	4b3a      	ldr	r3, [pc, #232]	; (8009fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8009ec8:	689b      	ldr	r3, [r3, #8]
 8009eca:	f003 020c 	and.w	r2, r3, #12
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	685b      	ldr	r3, [r3, #4]
 8009ed2:	009b      	lsls	r3, r3, #2
 8009ed4:	429a      	cmp	r2, r3
 8009ed6:	d1eb      	bne.n	8009eb0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	f003 0302 	and.w	r3, r3, #2
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d010      	beq.n	8009f06 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	689a      	ldr	r2, [r3, #8]
 8009ee8:	4b31      	ldr	r3, [pc, #196]	; (8009fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8009eea:	689b      	ldr	r3, [r3, #8]
 8009eec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009ef0:	429a      	cmp	r2, r3
 8009ef2:	d208      	bcs.n	8009f06 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009ef4:	4b2e      	ldr	r3, [pc, #184]	; (8009fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8009ef6:	689b      	ldr	r3, [r3, #8]
 8009ef8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	689b      	ldr	r3, [r3, #8]
 8009f00:	492b      	ldr	r1, [pc, #172]	; (8009fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8009f02:	4313      	orrs	r3, r2
 8009f04:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009f06:	4b29      	ldr	r3, [pc, #164]	; (8009fac <HAL_RCC_ClockConfig+0x1ec>)
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	f003 0307 	and.w	r3, r3, #7
 8009f0e:	683a      	ldr	r2, [r7, #0]
 8009f10:	429a      	cmp	r2, r3
 8009f12:	d210      	bcs.n	8009f36 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009f14:	4b25      	ldr	r3, [pc, #148]	; (8009fac <HAL_RCC_ClockConfig+0x1ec>)
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	f023 0207 	bic.w	r2, r3, #7
 8009f1c:	4923      	ldr	r1, [pc, #140]	; (8009fac <HAL_RCC_ClockConfig+0x1ec>)
 8009f1e:	683b      	ldr	r3, [r7, #0]
 8009f20:	4313      	orrs	r3, r2
 8009f22:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009f24:	4b21      	ldr	r3, [pc, #132]	; (8009fac <HAL_RCC_ClockConfig+0x1ec>)
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	f003 0307 	and.w	r3, r3, #7
 8009f2c:	683a      	ldr	r2, [r7, #0]
 8009f2e:	429a      	cmp	r2, r3
 8009f30:	d001      	beq.n	8009f36 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8009f32:	2301      	movs	r3, #1
 8009f34:	e036      	b.n	8009fa4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	f003 0304 	and.w	r3, r3, #4
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d008      	beq.n	8009f54 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009f42:	4b1b      	ldr	r3, [pc, #108]	; (8009fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8009f44:	689b      	ldr	r3, [r3, #8]
 8009f46:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	68db      	ldr	r3, [r3, #12]
 8009f4e:	4918      	ldr	r1, [pc, #96]	; (8009fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8009f50:	4313      	orrs	r3, r2
 8009f52:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	f003 0308 	and.w	r3, r3, #8
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d009      	beq.n	8009f74 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009f60:	4b13      	ldr	r3, [pc, #76]	; (8009fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8009f62:	689b      	ldr	r3, [r3, #8]
 8009f64:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	691b      	ldr	r3, [r3, #16]
 8009f6c:	00db      	lsls	r3, r3, #3
 8009f6e:	4910      	ldr	r1, [pc, #64]	; (8009fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8009f70:	4313      	orrs	r3, r2
 8009f72:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009f74:	f000 f824 	bl	8009fc0 <HAL_RCC_GetSysClockFreq>
 8009f78:	4602      	mov	r2, r0
 8009f7a:	4b0d      	ldr	r3, [pc, #52]	; (8009fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8009f7c:	689b      	ldr	r3, [r3, #8]
 8009f7e:	091b      	lsrs	r3, r3, #4
 8009f80:	f003 030f 	and.w	r3, r3, #15
 8009f84:	490b      	ldr	r1, [pc, #44]	; (8009fb4 <HAL_RCC_ClockConfig+0x1f4>)
 8009f86:	5ccb      	ldrb	r3, [r1, r3]
 8009f88:	f003 031f 	and.w	r3, r3, #31
 8009f8c:	fa22 f303 	lsr.w	r3, r2, r3
 8009f90:	4a09      	ldr	r2, [pc, #36]	; (8009fb8 <HAL_RCC_ClockConfig+0x1f8>)
 8009f92:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8009f94:	4b09      	ldr	r3, [pc, #36]	; (8009fbc <HAL_RCC_ClockConfig+0x1fc>)
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	4618      	mov	r0, r3
 8009f9a:	f7fc ff47 	bl	8006e2c <HAL_InitTick>
 8009f9e:	4603      	mov	r3, r0
 8009fa0:	72fb      	strb	r3, [r7, #11]

  return status;
 8009fa2:	7afb      	ldrb	r3, [r7, #11]
}
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	3710      	adds	r7, #16
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	bd80      	pop	{r7, pc}
 8009fac:	40022000 	.word	0x40022000
 8009fb0:	40021000 	.word	0x40021000
 8009fb4:	08014ac4 	.word	0x08014ac4
 8009fb8:	20000214 	.word	0x20000214
 8009fbc:	20000244 	.word	0x20000244

08009fc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009fc0:	b480      	push	{r7}
 8009fc2:	b089      	sub	sp, #36	; 0x24
 8009fc4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	61fb      	str	r3, [r7, #28]
 8009fca:	2300      	movs	r3, #0
 8009fcc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009fce:	4b3e      	ldr	r3, [pc, #248]	; (800a0c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8009fd0:	689b      	ldr	r3, [r3, #8]
 8009fd2:	f003 030c 	and.w	r3, r3, #12
 8009fd6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009fd8:	4b3b      	ldr	r3, [pc, #236]	; (800a0c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8009fda:	68db      	ldr	r3, [r3, #12]
 8009fdc:	f003 0303 	and.w	r3, r3, #3
 8009fe0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8009fe2:	693b      	ldr	r3, [r7, #16]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d005      	beq.n	8009ff4 <HAL_RCC_GetSysClockFreq+0x34>
 8009fe8:	693b      	ldr	r3, [r7, #16]
 8009fea:	2b0c      	cmp	r3, #12
 8009fec:	d121      	bne.n	800a032 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	2b01      	cmp	r3, #1
 8009ff2:	d11e      	bne.n	800a032 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8009ff4:	4b34      	ldr	r3, [pc, #208]	; (800a0c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	f003 0308 	and.w	r3, r3, #8
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d107      	bne.n	800a010 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800a000:	4b31      	ldr	r3, [pc, #196]	; (800a0c8 <HAL_RCC_GetSysClockFreq+0x108>)
 800a002:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a006:	0a1b      	lsrs	r3, r3, #8
 800a008:	f003 030f 	and.w	r3, r3, #15
 800a00c:	61fb      	str	r3, [r7, #28]
 800a00e:	e005      	b.n	800a01c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800a010:	4b2d      	ldr	r3, [pc, #180]	; (800a0c8 <HAL_RCC_GetSysClockFreq+0x108>)
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	091b      	lsrs	r3, r3, #4
 800a016:	f003 030f 	and.w	r3, r3, #15
 800a01a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800a01c:	4a2b      	ldr	r2, [pc, #172]	; (800a0cc <HAL_RCC_GetSysClockFreq+0x10c>)
 800a01e:	69fb      	ldr	r3, [r7, #28]
 800a020:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a024:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800a026:	693b      	ldr	r3, [r7, #16]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d10d      	bne.n	800a048 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800a02c:	69fb      	ldr	r3, [r7, #28]
 800a02e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800a030:	e00a      	b.n	800a048 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800a032:	693b      	ldr	r3, [r7, #16]
 800a034:	2b04      	cmp	r3, #4
 800a036:	d102      	bne.n	800a03e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800a038:	4b25      	ldr	r3, [pc, #148]	; (800a0d0 <HAL_RCC_GetSysClockFreq+0x110>)
 800a03a:	61bb      	str	r3, [r7, #24]
 800a03c:	e004      	b.n	800a048 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800a03e:	693b      	ldr	r3, [r7, #16]
 800a040:	2b08      	cmp	r3, #8
 800a042:	d101      	bne.n	800a048 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800a044:	4b23      	ldr	r3, [pc, #140]	; (800a0d4 <HAL_RCC_GetSysClockFreq+0x114>)
 800a046:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800a048:	693b      	ldr	r3, [r7, #16]
 800a04a:	2b0c      	cmp	r3, #12
 800a04c:	d134      	bne.n	800a0b8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800a04e:	4b1e      	ldr	r3, [pc, #120]	; (800a0c8 <HAL_RCC_GetSysClockFreq+0x108>)
 800a050:	68db      	ldr	r3, [r3, #12]
 800a052:	f003 0303 	and.w	r3, r3, #3
 800a056:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800a058:	68bb      	ldr	r3, [r7, #8]
 800a05a:	2b02      	cmp	r3, #2
 800a05c:	d003      	beq.n	800a066 <HAL_RCC_GetSysClockFreq+0xa6>
 800a05e:	68bb      	ldr	r3, [r7, #8]
 800a060:	2b03      	cmp	r3, #3
 800a062:	d003      	beq.n	800a06c <HAL_RCC_GetSysClockFreq+0xac>
 800a064:	e005      	b.n	800a072 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800a066:	4b1a      	ldr	r3, [pc, #104]	; (800a0d0 <HAL_RCC_GetSysClockFreq+0x110>)
 800a068:	617b      	str	r3, [r7, #20]
      break;
 800a06a:	e005      	b.n	800a078 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800a06c:	4b19      	ldr	r3, [pc, #100]	; (800a0d4 <HAL_RCC_GetSysClockFreq+0x114>)
 800a06e:	617b      	str	r3, [r7, #20]
      break;
 800a070:	e002      	b.n	800a078 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800a072:	69fb      	ldr	r3, [r7, #28]
 800a074:	617b      	str	r3, [r7, #20]
      break;
 800a076:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a078:	4b13      	ldr	r3, [pc, #76]	; (800a0c8 <HAL_RCC_GetSysClockFreq+0x108>)
 800a07a:	68db      	ldr	r3, [r3, #12]
 800a07c:	091b      	lsrs	r3, r3, #4
 800a07e:	f003 0307 	and.w	r3, r3, #7
 800a082:	3301      	adds	r3, #1
 800a084:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800a086:	4b10      	ldr	r3, [pc, #64]	; (800a0c8 <HAL_RCC_GetSysClockFreq+0x108>)
 800a088:	68db      	ldr	r3, [r3, #12]
 800a08a:	0a1b      	lsrs	r3, r3, #8
 800a08c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a090:	697a      	ldr	r2, [r7, #20]
 800a092:	fb03 f202 	mul.w	r2, r3, r2
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	fbb2 f3f3 	udiv	r3, r2, r3
 800a09c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800a09e:	4b0a      	ldr	r3, [pc, #40]	; (800a0c8 <HAL_RCC_GetSysClockFreq+0x108>)
 800a0a0:	68db      	ldr	r3, [r3, #12]
 800a0a2:	0e5b      	lsrs	r3, r3, #25
 800a0a4:	f003 0303 	and.w	r3, r3, #3
 800a0a8:	3301      	adds	r3, #1
 800a0aa:	005b      	lsls	r3, r3, #1
 800a0ac:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800a0ae:	697a      	ldr	r2, [r7, #20]
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0b6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800a0b8:	69bb      	ldr	r3, [r7, #24]
}
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	3724      	adds	r7, #36	; 0x24
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c4:	4770      	bx	lr
 800a0c6:	bf00      	nop
 800a0c8:	40021000 	.word	0x40021000
 800a0cc:	08014adc 	.word	0x08014adc
 800a0d0:	00f42400 	.word	0x00f42400
 800a0d4:	007a1200 	.word	0x007a1200

0800a0d8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a0d8:	b480      	push	{r7}
 800a0da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a0dc:	4b03      	ldr	r3, [pc, #12]	; (800a0ec <HAL_RCC_GetHCLKFreq+0x14>)
 800a0de:	681b      	ldr	r3, [r3, #0]
}
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e8:	4770      	bx	lr
 800a0ea:	bf00      	nop
 800a0ec:	20000214 	.word	0x20000214

0800a0f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800a0f4:	f7ff fff0 	bl	800a0d8 <HAL_RCC_GetHCLKFreq>
 800a0f8:	4602      	mov	r2, r0
 800a0fa:	4b06      	ldr	r3, [pc, #24]	; (800a114 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a0fc:	689b      	ldr	r3, [r3, #8]
 800a0fe:	0a1b      	lsrs	r3, r3, #8
 800a100:	f003 0307 	and.w	r3, r3, #7
 800a104:	4904      	ldr	r1, [pc, #16]	; (800a118 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a106:	5ccb      	ldrb	r3, [r1, r3]
 800a108:	f003 031f 	and.w	r3, r3, #31
 800a10c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a110:	4618      	mov	r0, r3
 800a112:	bd80      	pop	{r7, pc}
 800a114:	40021000 	.word	0x40021000
 800a118:	08014ad4 	.word	0x08014ad4

0800a11c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800a120:	f7ff ffda 	bl	800a0d8 <HAL_RCC_GetHCLKFreq>
 800a124:	4602      	mov	r2, r0
 800a126:	4b06      	ldr	r3, [pc, #24]	; (800a140 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a128:	689b      	ldr	r3, [r3, #8]
 800a12a:	0adb      	lsrs	r3, r3, #11
 800a12c:	f003 0307 	and.w	r3, r3, #7
 800a130:	4904      	ldr	r1, [pc, #16]	; (800a144 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a132:	5ccb      	ldrb	r3, [r1, r3]
 800a134:	f003 031f 	and.w	r3, r3, #31
 800a138:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a13c:	4618      	mov	r0, r3
 800a13e:	bd80      	pop	{r7, pc}
 800a140:	40021000 	.word	0x40021000
 800a144:	08014ad4 	.word	0x08014ad4

0800a148 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	b086      	sub	sp, #24
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800a150:	2300      	movs	r3, #0
 800a152:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800a154:	4b2a      	ldr	r3, [pc, #168]	; (800a200 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a158:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d003      	beq.n	800a168 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800a160:	f7ff f9a6 	bl	80094b0 <HAL_PWREx_GetVoltageRange>
 800a164:	6178      	str	r0, [r7, #20]
 800a166:	e014      	b.n	800a192 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800a168:	4b25      	ldr	r3, [pc, #148]	; (800a200 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a16a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a16c:	4a24      	ldr	r2, [pc, #144]	; (800a200 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a16e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a172:	6593      	str	r3, [r2, #88]	; 0x58
 800a174:	4b22      	ldr	r3, [pc, #136]	; (800a200 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a176:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a178:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a17c:	60fb      	str	r3, [r7, #12]
 800a17e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800a180:	f7ff f996 	bl	80094b0 <HAL_PWREx_GetVoltageRange>
 800a184:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800a186:	4b1e      	ldr	r3, [pc, #120]	; (800a200 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a18a:	4a1d      	ldr	r2, [pc, #116]	; (800a200 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a18c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a190:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a192:	697b      	ldr	r3, [r7, #20]
 800a194:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a198:	d10b      	bne.n	800a1b2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	2b80      	cmp	r3, #128	; 0x80
 800a19e:	d919      	bls.n	800a1d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	2ba0      	cmp	r3, #160	; 0xa0
 800a1a4:	d902      	bls.n	800a1ac <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800a1a6:	2302      	movs	r3, #2
 800a1a8:	613b      	str	r3, [r7, #16]
 800a1aa:	e013      	b.n	800a1d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800a1ac:	2301      	movs	r3, #1
 800a1ae:	613b      	str	r3, [r7, #16]
 800a1b0:	e010      	b.n	800a1d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	2b80      	cmp	r3, #128	; 0x80
 800a1b6:	d902      	bls.n	800a1be <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800a1b8:	2303      	movs	r3, #3
 800a1ba:	613b      	str	r3, [r7, #16]
 800a1bc:	e00a      	b.n	800a1d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	2b80      	cmp	r3, #128	; 0x80
 800a1c2:	d102      	bne.n	800a1ca <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800a1c4:	2302      	movs	r3, #2
 800a1c6:	613b      	str	r3, [r7, #16]
 800a1c8:	e004      	b.n	800a1d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	2b70      	cmp	r3, #112	; 0x70
 800a1ce:	d101      	bne.n	800a1d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800a1d0:	2301      	movs	r3, #1
 800a1d2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800a1d4:	4b0b      	ldr	r3, [pc, #44]	; (800a204 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	f023 0207 	bic.w	r2, r3, #7
 800a1dc:	4909      	ldr	r1, [pc, #36]	; (800a204 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800a1de:	693b      	ldr	r3, [r7, #16]
 800a1e0:	4313      	orrs	r3, r2
 800a1e2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800a1e4:	4b07      	ldr	r3, [pc, #28]	; (800a204 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	f003 0307 	and.w	r3, r3, #7
 800a1ec:	693a      	ldr	r2, [r7, #16]
 800a1ee:	429a      	cmp	r2, r3
 800a1f0:	d001      	beq.n	800a1f6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800a1f2:	2301      	movs	r3, #1
 800a1f4:	e000      	b.n	800a1f8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800a1f6:	2300      	movs	r3, #0
}
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	3718      	adds	r7, #24
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	bd80      	pop	{r7, pc}
 800a200:	40021000 	.word	0x40021000
 800a204:	40022000 	.word	0x40022000

0800a208 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b086      	sub	sp, #24
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a210:	2300      	movs	r3, #0
 800a212:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a214:	2300      	movs	r3, #0
 800a216:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a220:	2b00      	cmp	r3, #0
 800a222:	d041      	beq.n	800a2a8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a228:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800a22c:	d02a      	beq.n	800a284 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800a22e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800a232:	d824      	bhi.n	800a27e <HAL_RCCEx_PeriphCLKConfig+0x76>
 800a234:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a238:	d008      	beq.n	800a24c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800a23a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a23e:	d81e      	bhi.n	800a27e <HAL_RCCEx_PeriphCLKConfig+0x76>
 800a240:	2b00      	cmp	r3, #0
 800a242:	d00a      	beq.n	800a25a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800a244:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a248:	d010      	beq.n	800a26c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a24a:	e018      	b.n	800a27e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800a24c:	4b86      	ldr	r3, [pc, #536]	; (800a468 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a24e:	68db      	ldr	r3, [r3, #12]
 800a250:	4a85      	ldr	r2, [pc, #532]	; (800a468 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a252:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a256:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800a258:	e015      	b.n	800a286 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	3304      	adds	r3, #4
 800a25e:	2100      	movs	r1, #0
 800a260:	4618      	mov	r0, r3
 800a262:	f000 fabb 	bl	800a7dc <RCCEx_PLLSAI1_Config>
 800a266:	4603      	mov	r3, r0
 800a268:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800a26a:	e00c      	b.n	800a286 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	3320      	adds	r3, #32
 800a270:	2100      	movs	r1, #0
 800a272:	4618      	mov	r0, r3
 800a274:	f000 fba6 	bl	800a9c4 <RCCEx_PLLSAI2_Config>
 800a278:	4603      	mov	r3, r0
 800a27a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800a27c:	e003      	b.n	800a286 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a27e:	2301      	movs	r3, #1
 800a280:	74fb      	strb	r3, [r7, #19]
      break;
 800a282:	e000      	b.n	800a286 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800a284:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a286:	7cfb      	ldrb	r3, [r7, #19]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d10b      	bne.n	800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a28c:	4b76      	ldr	r3, [pc, #472]	; (800a468 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a28e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a292:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a29a:	4973      	ldr	r1, [pc, #460]	; (800a468 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a29c:	4313      	orrs	r3, r2
 800a29e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800a2a2:	e001      	b.n	800a2a8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2a4:	7cfb      	ldrb	r3, [r7, #19]
 800a2a6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d041      	beq.n	800a338 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a2b8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a2bc:	d02a      	beq.n	800a314 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800a2be:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a2c2:	d824      	bhi.n	800a30e <HAL_RCCEx_PeriphCLKConfig+0x106>
 800a2c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a2c8:	d008      	beq.n	800a2dc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800a2ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a2ce:	d81e      	bhi.n	800a30e <HAL_RCCEx_PeriphCLKConfig+0x106>
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d00a      	beq.n	800a2ea <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800a2d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a2d8:	d010      	beq.n	800a2fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800a2da:	e018      	b.n	800a30e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800a2dc:	4b62      	ldr	r3, [pc, #392]	; (800a468 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a2de:	68db      	ldr	r3, [r3, #12]
 800a2e0:	4a61      	ldr	r2, [pc, #388]	; (800a468 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a2e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a2e6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800a2e8:	e015      	b.n	800a316 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	3304      	adds	r3, #4
 800a2ee:	2100      	movs	r1, #0
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	f000 fa73 	bl	800a7dc <RCCEx_PLLSAI1_Config>
 800a2f6:	4603      	mov	r3, r0
 800a2f8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800a2fa:	e00c      	b.n	800a316 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	3320      	adds	r3, #32
 800a300:	2100      	movs	r1, #0
 800a302:	4618      	mov	r0, r3
 800a304:	f000 fb5e 	bl	800a9c4 <RCCEx_PLLSAI2_Config>
 800a308:	4603      	mov	r3, r0
 800a30a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800a30c:	e003      	b.n	800a316 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a30e:	2301      	movs	r3, #1
 800a310:	74fb      	strb	r3, [r7, #19]
      break;
 800a312:	e000      	b.n	800a316 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800a314:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a316:	7cfb      	ldrb	r3, [r7, #19]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d10b      	bne.n	800a334 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800a31c:	4b52      	ldr	r3, [pc, #328]	; (800a468 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a31e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a322:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a32a:	494f      	ldr	r1, [pc, #316]	; (800a468 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a32c:	4313      	orrs	r3, r2
 800a32e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800a332:	e001      	b.n	800a338 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a334:	7cfb      	ldrb	r3, [r7, #19]
 800a336:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a340:	2b00      	cmp	r3, #0
 800a342:	f000 80a0 	beq.w	800a486 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a346:	2300      	movs	r3, #0
 800a348:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800a34a:	4b47      	ldr	r3, [pc, #284]	; (800a468 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a34c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a34e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a352:	2b00      	cmp	r3, #0
 800a354:	d101      	bne.n	800a35a <HAL_RCCEx_PeriphCLKConfig+0x152>
 800a356:	2301      	movs	r3, #1
 800a358:	e000      	b.n	800a35c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800a35a:	2300      	movs	r3, #0
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d00d      	beq.n	800a37c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a360:	4b41      	ldr	r3, [pc, #260]	; (800a468 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a364:	4a40      	ldr	r2, [pc, #256]	; (800a468 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a366:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a36a:	6593      	str	r3, [r2, #88]	; 0x58
 800a36c:	4b3e      	ldr	r3, [pc, #248]	; (800a468 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a36e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a370:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a374:	60bb      	str	r3, [r7, #8]
 800a376:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a378:	2301      	movs	r3, #1
 800a37a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a37c:	4b3b      	ldr	r3, [pc, #236]	; (800a46c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	4a3a      	ldr	r2, [pc, #232]	; (800a46c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800a382:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a386:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a388:	f7fc fda0 	bl	8006ecc <HAL_GetTick>
 800a38c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800a38e:	e009      	b.n	800a3a4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a390:	f7fc fd9c 	bl	8006ecc <HAL_GetTick>
 800a394:	4602      	mov	r2, r0
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	1ad3      	subs	r3, r2, r3
 800a39a:	2b02      	cmp	r3, #2
 800a39c:	d902      	bls.n	800a3a4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800a39e:	2303      	movs	r3, #3
 800a3a0:	74fb      	strb	r3, [r7, #19]
        break;
 800a3a2:	e005      	b.n	800a3b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800a3a4:	4b31      	ldr	r3, [pc, #196]	; (800a46c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d0ef      	beq.n	800a390 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800a3b0:	7cfb      	ldrb	r3, [r7, #19]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d15c      	bne.n	800a470 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800a3b6:	4b2c      	ldr	r3, [pc, #176]	; (800a468 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a3b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a3bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a3c0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800a3c2:	697b      	ldr	r3, [r7, #20]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d01f      	beq.n	800a408 <HAL_RCCEx_PeriphCLKConfig+0x200>
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a3ce:	697a      	ldr	r2, [r7, #20]
 800a3d0:	429a      	cmp	r2, r3
 800a3d2:	d019      	beq.n	800a408 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a3d4:	4b24      	ldr	r3, [pc, #144]	; (800a468 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a3d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a3da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a3de:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a3e0:	4b21      	ldr	r3, [pc, #132]	; (800a468 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a3e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a3e6:	4a20      	ldr	r2, [pc, #128]	; (800a468 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a3e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a3ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a3f0:	4b1d      	ldr	r3, [pc, #116]	; (800a468 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a3f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a3f6:	4a1c      	ldr	r2, [pc, #112]	; (800a468 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a3f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a3fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800a400:	4a19      	ldr	r2, [pc, #100]	; (800a468 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a402:	697b      	ldr	r3, [r7, #20]
 800a404:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800a408:	697b      	ldr	r3, [r7, #20]
 800a40a:	f003 0301 	and.w	r3, r3, #1
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d016      	beq.n	800a440 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a412:	f7fc fd5b 	bl	8006ecc <HAL_GetTick>
 800a416:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a418:	e00b      	b.n	800a432 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a41a:	f7fc fd57 	bl	8006ecc <HAL_GetTick>
 800a41e:	4602      	mov	r2, r0
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	1ad3      	subs	r3, r2, r3
 800a424:	f241 3288 	movw	r2, #5000	; 0x1388
 800a428:	4293      	cmp	r3, r2
 800a42a:	d902      	bls.n	800a432 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800a42c:	2303      	movs	r3, #3
 800a42e:	74fb      	strb	r3, [r7, #19]
            break;
 800a430:	e006      	b.n	800a440 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a432:	4b0d      	ldr	r3, [pc, #52]	; (800a468 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a434:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a438:	f003 0302 	and.w	r3, r3, #2
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d0ec      	beq.n	800a41a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800a440:	7cfb      	ldrb	r3, [r7, #19]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d10c      	bne.n	800a460 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a446:	4b08      	ldr	r3, [pc, #32]	; (800a468 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a448:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a44c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a456:	4904      	ldr	r1, [pc, #16]	; (800a468 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a458:	4313      	orrs	r3, r2
 800a45a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800a45e:	e009      	b.n	800a474 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a460:	7cfb      	ldrb	r3, [r7, #19]
 800a462:	74bb      	strb	r3, [r7, #18]
 800a464:	e006      	b.n	800a474 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800a466:	bf00      	nop
 800a468:	40021000 	.word	0x40021000
 800a46c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a470:	7cfb      	ldrb	r3, [r7, #19]
 800a472:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a474:	7c7b      	ldrb	r3, [r7, #17]
 800a476:	2b01      	cmp	r3, #1
 800a478:	d105      	bne.n	800a486 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a47a:	4b9e      	ldr	r3, [pc, #632]	; (800a6f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a47c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a47e:	4a9d      	ldr	r2, [pc, #628]	; (800a6f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a480:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a484:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	f003 0301 	and.w	r3, r3, #1
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d00a      	beq.n	800a4a8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a492:	4b98      	ldr	r3, [pc, #608]	; (800a6f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a494:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a498:	f023 0203 	bic.w	r2, r3, #3
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4a0:	4994      	ldr	r1, [pc, #592]	; (800a6f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a4a2:	4313      	orrs	r3, r2
 800a4a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	f003 0302 	and.w	r3, r3, #2
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d00a      	beq.n	800a4ca <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a4b4:	4b8f      	ldr	r3, [pc, #572]	; (800a6f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a4b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4ba:	f023 020c 	bic.w	r2, r3, #12
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4c2:	498c      	ldr	r1, [pc, #560]	; (800a6f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a4c4:	4313      	orrs	r3, r2
 800a4c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	f003 0304 	and.w	r3, r3, #4
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d00a      	beq.n	800a4ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800a4d6:	4b87      	ldr	r3, [pc, #540]	; (800a6f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a4d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4dc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4e4:	4983      	ldr	r1, [pc, #524]	; (800a6f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a4e6:	4313      	orrs	r3, r2
 800a4e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	f003 0308 	and.w	r3, r3, #8
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d00a      	beq.n	800a50e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800a4f8:	4b7e      	ldr	r3, [pc, #504]	; (800a6f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a4fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4fe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a506:	497b      	ldr	r1, [pc, #492]	; (800a6f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a508:	4313      	orrs	r3, r2
 800a50a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	f003 0310 	and.w	r3, r3, #16
 800a516:	2b00      	cmp	r3, #0
 800a518:	d00a      	beq.n	800a530 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800a51a:	4b76      	ldr	r3, [pc, #472]	; (800a6f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a51c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a520:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a528:	4972      	ldr	r1, [pc, #456]	; (800a6f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a52a:	4313      	orrs	r3, r2
 800a52c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	f003 0320 	and.w	r3, r3, #32
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d00a      	beq.n	800a552 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a53c:	4b6d      	ldr	r3, [pc, #436]	; (800a6f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a53e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a542:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a54a:	496a      	ldr	r1, [pc, #424]	; (800a6f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a54c:	4313      	orrs	r3, r2
 800a54e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d00a      	beq.n	800a574 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a55e:	4b65      	ldr	r3, [pc, #404]	; (800a6f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a560:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a564:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a56c:	4961      	ldr	r1, [pc, #388]	; (800a6f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a56e:	4313      	orrs	r3, r2
 800a570:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d00a      	beq.n	800a596 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a580:	4b5c      	ldr	r3, [pc, #368]	; (800a6f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a582:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a586:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a58e:	4959      	ldr	r1, [pc, #356]	; (800a6f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a590:	4313      	orrs	r3, r2
 800a592:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d00a      	beq.n	800a5b8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a5a2:	4b54      	ldr	r3, [pc, #336]	; (800a6f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a5a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5a8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a5b0:	4950      	ldr	r1, [pc, #320]	; (800a6f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a5b2:	4313      	orrs	r3, r2
 800a5b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d00a      	beq.n	800a5da <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800a5c4:	4b4b      	ldr	r3, [pc, #300]	; (800a6f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a5c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5ca:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5d2:	4948      	ldr	r1, [pc, #288]	; (800a6f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a5d4:	4313      	orrs	r3, r2
 800a5d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d00a      	beq.n	800a5fc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a5e6:	4b43      	ldr	r3, [pc, #268]	; (800a6f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a5e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a5f4:	493f      	ldr	r1, [pc, #252]	; (800a6f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a5f6:	4313      	orrs	r3, r2
 800a5f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a604:	2b00      	cmp	r3, #0
 800a606:	d028      	beq.n	800a65a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a608:	4b3a      	ldr	r3, [pc, #232]	; (800a6f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a60a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a60e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a616:	4937      	ldr	r1, [pc, #220]	; (800a6f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a618:	4313      	orrs	r3, r2
 800a61a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a622:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a626:	d106      	bne.n	800a636 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a628:	4b32      	ldr	r3, [pc, #200]	; (800a6f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a62a:	68db      	ldr	r3, [r3, #12]
 800a62c:	4a31      	ldr	r2, [pc, #196]	; (800a6f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a62e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a632:	60d3      	str	r3, [r2, #12]
 800a634:	e011      	b.n	800a65a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a63a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a63e:	d10c      	bne.n	800a65a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	3304      	adds	r3, #4
 800a644:	2101      	movs	r1, #1
 800a646:	4618      	mov	r0, r3
 800a648:	f000 f8c8 	bl	800a7dc <RCCEx_PLLSAI1_Config>
 800a64c:	4603      	mov	r3, r0
 800a64e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800a650:	7cfb      	ldrb	r3, [r7, #19]
 800a652:	2b00      	cmp	r3, #0
 800a654:	d001      	beq.n	800a65a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800a656:	7cfb      	ldrb	r3, [r7, #19]
 800a658:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a662:	2b00      	cmp	r3, #0
 800a664:	d028      	beq.n	800a6b8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800a666:	4b23      	ldr	r3, [pc, #140]	; (800a6f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a668:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a66c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a674:	491f      	ldr	r1, [pc, #124]	; (800a6f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a676:	4313      	orrs	r3, r2
 800a678:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a680:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a684:	d106      	bne.n	800a694 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a686:	4b1b      	ldr	r3, [pc, #108]	; (800a6f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a688:	68db      	ldr	r3, [r3, #12]
 800a68a:	4a1a      	ldr	r2, [pc, #104]	; (800a6f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a68c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a690:	60d3      	str	r3, [r2, #12]
 800a692:	e011      	b.n	800a6b8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a698:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a69c:	d10c      	bne.n	800a6b8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	3304      	adds	r3, #4
 800a6a2:	2101      	movs	r1, #1
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	f000 f899 	bl	800a7dc <RCCEx_PLLSAI1_Config>
 800a6aa:	4603      	mov	r3, r0
 800a6ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800a6ae:	7cfb      	ldrb	r3, [r7, #19]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d001      	beq.n	800a6b8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800a6b4:	7cfb      	ldrb	r3, [r7, #19]
 800a6b6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d02b      	beq.n	800a71c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a6c4:	4b0b      	ldr	r3, [pc, #44]	; (800a6f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a6c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6ca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a6d2:	4908      	ldr	r1, [pc, #32]	; (800a6f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a6d4:	4313      	orrs	r3, r2
 800a6d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a6de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a6e2:	d109      	bne.n	800a6f8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a6e4:	4b03      	ldr	r3, [pc, #12]	; (800a6f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a6e6:	68db      	ldr	r3, [r3, #12]
 800a6e8:	4a02      	ldr	r2, [pc, #8]	; (800a6f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a6ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a6ee:	60d3      	str	r3, [r2, #12]
 800a6f0:	e014      	b.n	800a71c <HAL_RCCEx_PeriphCLKConfig+0x514>
 800a6f2:	bf00      	nop
 800a6f4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a6fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a700:	d10c      	bne.n	800a71c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	3304      	adds	r3, #4
 800a706:	2101      	movs	r1, #1
 800a708:	4618      	mov	r0, r3
 800a70a:	f000 f867 	bl	800a7dc <RCCEx_PLLSAI1_Config>
 800a70e:	4603      	mov	r3, r0
 800a710:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800a712:	7cfb      	ldrb	r3, [r7, #19]
 800a714:	2b00      	cmp	r3, #0
 800a716:	d001      	beq.n	800a71c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800a718:	7cfb      	ldrb	r3, [r7, #19]
 800a71a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a724:	2b00      	cmp	r3, #0
 800a726:	d02f      	beq.n	800a788 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a728:	4b2b      	ldr	r3, [pc, #172]	; (800a7d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800a72a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a72e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a736:	4928      	ldr	r1, [pc, #160]	; (800a7d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800a738:	4313      	orrs	r3, r2
 800a73a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a742:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a746:	d10d      	bne.n	800a764 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	3304      	adds	r3, #4
 800a74c:	2102      	movs	r1, #2
 800a74e:	4618      	mov	r0, r3
 800a750:	f000 f844 	bl	800a7dc <RCCEx_PLLSAI1_Config>
 800a754:	4603      	mov	r3, r0
 800a756:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800a758:	7cfb      	ldrb	r3, [r7, #19]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d014      	beq.n	800a788 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800a75e:	7cfb      	ldrb	r3, [r7, #19]
 800a760:	74bb      	strb	r3, [r7, #18]
 800a762:	e011      	b.n	800a788 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a768:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a76c:	d10c      	bne.n	800a788 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	3320      	adds	r3, #32
 800a772:	2102      	movs	r1, #2
 800a774:	4618      	mov	r0, r3
 800a776:	f000 f925 	bl	800a9c4 <RCCEx_PLLSAI2_Config>
 800a77a:	4603      	mov	r3, r0
 800a77c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800a77e:	7cfb      	ldrb	r3, [r7, #19]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d001      	beq.n	800a788 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800a784:	7cfb      	ldrb	r3, [r7, #19]
 800a786:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a790:	2b00      	cmp	r3, #0
 800a792:	d00a      	beq.n	800a7aa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a794:	4b10      	ldr	r3, [pc, #64]	; (800a7d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800a796:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a79a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a7a2:	490d      	ldr	r1, [pc, #52]	; (800a7d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800a7a4:	4313      	orrs	r3, r2
 800a7a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d00b      	beq.n	800a7ce <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a7b6:	4b08      	ldr	r3, [pc, #32]	; (800a7d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800a7b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7bc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a7c6:	4904      	ldr	r1, [pc, #16]	; (800a7d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800a7c8:	4313      	orrs	r3, r2
 800a7ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800a7ce:	7cbb      	ldrb	r3, [r7, #18]
}
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	3718      	adds	r7, #24
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	bd80      	pop	{r7, pc}
 800a7d8:	40021000 	.word	0x40021000

0800a7dc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b084      	sub	sp, #16
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
 800a7e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a7ea:	4b75      	ldr	r3, [pc, #468]	; (800a9c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a7ec:	68db      	ldr	r3, [r3, #12]
 800a7ee:	f003 0303 	and.w	r3, r3, #3
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d018      	beq.n	800a828 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800a7f6:	4b72      	ldr	r3, [pc, #456]	; (800a9c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a7f8:	68db      	ldr	r3, [r3, #12]
 800a7fa:	f003 0203 	and.w	r2, r3, #3
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	429a      	cmp	r2, r3
 800a804:	d10d      	bne.n	800a822 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
       ||
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d009      	beq.n	800a822 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800a80e:	4b6c      	ldr	r3, [pc, #432]	; (800a9c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a810:	68db      	ldr	r3, [r3, #12]
 800a812:	091b      	lsrs	r3, r3, #4
 800a814:	f003 0307 	and.w	r3, r3, #7
 800a818:	1c5a      	adds	r2, r3, #1
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	685b      	ldr	r3, [r3, #4]
       ||
 800a81e:	429a      	cmp	r2, r3
 800a820:	d047      	beq.n	800a8b2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800a822:	2301      	movs	r3, #1
 800a824:	73fb      	strb	r3, [r7, #15]
 800a826:	e044      	b.n	800a8b2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	2b03      	cmp	r3, #3
 800a82e:	d018      	beq.n	800a862 <RCCEx_PLLSAI1_Config+0x86>
 800a830:	2b03      	cmp	r3, #3
 800a832:	d825      	bhi.n	800a880 <RCCEx_PLLSAI1_Config+0xa4>
 800a834:	2b01      	cmp	r3, #1
 800a836:	d002      	beq.n	800a83e <RCCEx_PLLSAI1_Config+0x62>
 800a838:	2b02      	cmp	r3, #2
 800a83a:	d009      	beq.n	800a850 <RCCEx_PLLSAI1_Config+0x74>
 800a83c:	e020      	b.n	800a880 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800a83e:	4b60      	ldr	r3, [pc, #384]	; (800a9c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	f003 0302 	and.w	r3, r3, #2
 800a846:	2b00      	cmp	r3, #0
 800a848:	d11d      	bne.n	800a886 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800a84a:	2301      	movs	r3, #1
 800a84c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a84e:	e01a      	b.n	800a886 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800a850:	4b5b      	ldr	r3, [pc, #364]	; (800a9c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d116      	bne.n	800a88a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800a85c:	2301      	movs	r3, #1
 800a85e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a860:	e013      	b.n	800a88a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800a862:	4b57      	ldr	r3, [pc, #348]	; (800a9c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d10f      	bne.n	800a88e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800a86e:	4b54      	ldr	r3, [pc, #336]	; (800a9c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a876:	2b00      	cmp	r3, #0
 800a878:	d109      	bne.n	800a88e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800a87a:	2301      	movs	r3, #1
 800a87c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a87e:	e006      	b.n	800a88e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800a880:	2301      	movs	r3, #1
 800a882:	73fb      	strb	r3, [r7, #15]
      break;
 800a884:	e004      	b.n	800a890 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800a886:	bf00      	nop
 800a888:	e002      	b.n	800a890 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800a88a:	bf00      	nop
 800a88c:	e000      	b.n	800a890 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800a88e:	bf00      	nop
    }

    if(status == HAL_OK)
 800a890:	7bfb      	ldrb	r3, [r7, #15]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d10d      	bne.n	800a8b2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800a896:	4b4a      	ldr	r3, [pc, #296]	; (800a9c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a898:	68db      	ldr	r3, [r3, #12]
 800a89a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	6819      	ldr	r1, [r3, #0]
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	685b      	ldr	r3, [r3, #4]
 800a8a6:	3b01      	subs	r3, #1
 800a8a8:	011b      	lsls	r3, r3, #4
 800a8aa:	430b      	orrs	r3, r1
 800a8ac:	4944      	ldr	r1, [pc, #272]	; (800a9c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a8ae:	4313      	orrs	r3, r2
 800a8b0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800a8b2:	7bfb      	ldrb	r3, [r7, #15]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d17d      	bne.n	800a9b4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800a8b8:	4b41      	ldr	r3, [pc, #260]	; (800a9c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	4a40      	ldr	r2, [pc, #256]	; (800a9c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a8be:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a8c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a8c4:	f7fc fb02 	bl	8006ecc <HAL_GetTick>
 800a8c8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800a8ca:	e009      	b.n	800a8e0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a8cc:	f7fc fafe 	bl	8006ecc <HAL_GetTick>
 800a8d0:	4602      	mov	r2, r0
 800a8d2:	68bb      	ldr	r3, [r7, #8]
 800a8d4:	1ad3      	subs	r3, r2, r3
 800a8d6:	2b02      	cmp	r3, #2
 800a8d8:	d902      	bls.n	800a8e0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800a8da:	2303      	movs	r3, #3
 800a8dc:	73fb      	strb	r3, [r7, #15]
        break;
 800a8de:	e005      	b.n	800a8ec <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800a8e0:	4b37      	ldr	r3, [pc, #220]	; (800a9c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d1ef      	bne.n	800a8cc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800a8ec:	7bfb      	ldrb	r3, [r7, #15]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d160      	bne.n	800a9b4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800a8f2:	683b      	ldr	r3, [r7, #0]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d111      	bne.n	800a91c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a8f8:	4b31      	ldr	r3, [pc, #196]	; (800a9c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a8fa:	691b      	ldr	r3, [r3, #16]
 800a8fc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800a900:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a904:	687a      	ldr	r2, [r7, #4]
 800a906:	6892      	ldr	r2, [r2, #8]
 800a908:	0211      	lsls	r1, r2, #8
 800a90a:	687a      	ldr	r2, [r7, #4]
 800a90c:	68d2      	ldr	r2, [r2, #12]
 800a90e:	0912      	lsrs	r2, r2, #4
 800a910:	0452      	lsls	r2, r2, #17
 800a912:	430a      	orrs	r2, r1
 800a914:	492a      	ldr	r1, [pc, #168]	; (800a9c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a916:	4313      	orrs	r3, r2
 800a918:	610b      	str	r3, [r1, #16]
 800a91a:	e027      	b.n	800a96c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800a91c:	683b      	ldr	r3, [r7, #0]
 800a91e:	2b01      	cmp	r3, #1
 800a920:	d112      	bne.n	800a948 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a922:	4b27      	ldr	r3, [pc, #156]	; (800a9c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a924:	691b      	ldr	r3, [r3, #16]
 800a926:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800a92a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800a92e:	687a      	ldr	r2, [r7, #4]
 800a930:	6892      	ldr	r2, [r2, #8]
 800a932:	0211      	lsls	r1, r2, #8
 800a934:	687a      	ldr	r2, [r7, #4]
 800a936:	6912      	ldr	r2, [r2, #16]
 800a938:	0852      	lsrs	r2, r2, #1
 800a93a:	3a01      	subs	r2, #1
 800a93c:	0552      	lsls	r2, r2, #21
 800a93e:	430a      	orrs	r2, r1
 800a940:	491f      	ldr	r1, [pc, #124]	; (800a9c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a942:	4313      	orrs	r3, r2
 800a944:	610b      	str	r3, [r1, #16]
 800a946:	e011      	b.n	800a96c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a948:	4b1d      	ldr	r3, [pc, #116]	; (800a9c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a94a:	691b      	ldr	r3, [r3, #16]
 800a94c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800a950:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800a954:	687a      	ldr	r2, [r7, #4]
 800a956:	6892      	ldr	r2, [r2, #8]
 800a958:	0211      	lsls	r1, r2, #8
 800a95a:	687a      	ldr	r2, [r7, #4]
 800a95c:	6952      	ldr	r2, [r2, #20]
 800a95e:	0852      	lsrs	r2, r2, #1
 800a960:	3a01      	subs	r2, #1
 800a962:	0652      	lsls	r2, r2, #25
 800a964:	430a      	orrs	r2, r1
 800a966:	4916      	ldr	r1, [pc, #88]	; (800a9c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a968:	4313      	orrs	r3, r2
 800a96a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800a96c:	4b14      	ldr	r3, [pc, #80]	; (800a9c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	4a13      	ldr	r2, [pc, #76]	; (800a9c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a972:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a976:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a978:	f7fc faa8 	bl	8006ecc <HAL_GetTick>
 800a97c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800a97e:	e009      	b.n	800a994 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a980:	f7fc faa4 	bl	8006ecc <HAL_GetTick>
 800a984:	4602      	mov	r2, r0
 800a986:	68bb      	ldr	r3, [r7, #8]
 800a988:	1ad3      	subs	r3, r2, r3
 800a98a:	2b02      	cmp	r3, #2
 800a98c:	d902      	bls.n	800a994 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800a98e:	2303      	movs	r3, #3
 800a990:	73fb      	strb	r3, [r7, #15]
          break;
 800a992:	e005      	b.n	800a9a0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800a994:	4b0a      	ldr	r3, [pc, #40]	; (800a9c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d0ef      	beq.n	800a980 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800a9a0:	7bfb      	ldrb	r3, [r7, #15]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d106      	bne.n	800a9b4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800a9a6:	4b06      	ldr	r3, [pc, #24]	; (800a9c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a9a8:	691a      	ldr	r2, [r3, #16]
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	699b      	ldr	r3, [r3, #24]
 800a9ae:	4904      	ldr	r1, [pc, #16]	; (800a9c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a9b0:	4313      	orrs	r3, r2
 800a9b2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800a9b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	3710      	adds	r7, #16
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	bd80      	pop	{r7, pc}
 800a9be:	bf00      	nop
 800a9c0:	40021000 	.word	0x40021000

0800a9c4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800a9c4:	b580      	push	{r7, lr}
 800a9c6:	b084      	sub	sp, #16
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	6078      	str	r0, [r7, #4]
 800a9cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a9d2:	4b6a      	ldr	r3, [pc, #424]	; (800ab7c <RCCEx_PLLSAI2_Config+0x1b8>)
 800a9d4:	68db      	ldr	r3, [r3, #12]
 800a9d6:	f003 0303 	and.w	r3, r3, #3
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d018      	beq.n	800aa10 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800a9de:	4b67      	ldr	r3, [pc, #412]	; (800ab7c <RCCEx_PLLSAI2_Config+0x1b8>)
 800a9e0:	68db      	ldr	r3, [r3, #12]
 800a9e2:	f003 0203 	and.w	r2, r3, #3
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	429a      	cmp	r2, r3
 800a9ec:	d10d      	bne.n	800aa0a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
       ||
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d009      	beq.n	800aa0a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800a9f6:	4b61      	ldr	r3, [pc, #388]	; (800ab7c <RCCEx_PLLSAI2_Config+0x1b8>)
 800a9f8:	68db      	ldr	r3, [r3, #12]
 800a9fa:	091b      	lsrs	r3, r3, #4
 800a9fc:	f003 0307 	and.w	r3, r3, #7
 800aa00:	1c5a      	adds	r2, r3, #1
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	685b      	ldr	r3, [r3, #4]
       ||
 800aa06:	429a      	cmp	r2, r3
 800aa08:	d047      	beq.n	800aa9a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800aa0a:	2301      	movs	r3, #1
 800aa0c:	73fb      	strb	r3, [r7, #15]
 800aa0e:	e044      	b.n	800aa9a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	2b03      	cmp	r3, #3
 800aa16:	d018      	beq.n	800aa4a <RCCEx_PLLSAI2_Config+0x86>
 800aa18:	2b03      	cmp	r3, #3
 800aa1a:	d825      	bhi.n	800aa68 <RCCEx_PLLSAI2_Config+0xa4>
 800aa1c:	2b01      	cmp	r3, #1
 800aa1e:	d002      	beq.n	800aa26 <RCCEx_PLLSAI2_Config+0x62>
 800aa20:	2b02      	cmp	r3, #2
 800aa22:	d009      	beq.n	800aa38 <RCCEx_PLLSAI2_Config+0x74>
 800aa24:	e020      	b.n	800aa68 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800aa26:	4b55      	ldr	r3, [pc, #340]	; (800ab7c <RCCEx_PLLSAI2_Config+0x1b8>)
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	f003 0302 	and.w	r3, r3, #2
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d11d      	bne.n	800aa6e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800aa32:	2301      	movs	r3, #1
 800aa34:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800aa36:	e01a      	b.n	800aa6e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800aa38:	4b50      	ldr	r3, [pc, #320]	; (800ab7c <RCCEx_PLLSAI2_Config+0x1b8>)
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d116      	bne.n	800aa72 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800aa44:	2301      	movs	r3, #1
 800aa46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800aa48:	e013      	b.n	800aa72 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800aa4a:	4b4c      	ldr	r3, [pc, #304]	; (800ab7c <RCCEx_PLLSAI2_Config+0x1b8>)
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d10f      	bne.n	800aa76 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800aa56:	4b49      	ldr	r3, [pc, #292]	; (800ab7c <RCCEx_PLLSAI2_Config+0x1b8>)
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d109      	bne.n	800aa76 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800aa62:	2301      	movs	r3, #1
 800aa64:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800aa66:	e006      	b.n	800aa76 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800aa68:	2301      	movs	r3, #1
 800aa6a:	73fb      	strb	r3, [r7, #15]
      break;
 800aa6c:	e004      	b.n	800aa78 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800aa6e:	bf00      	nop
 800aa70:	e002      	b.n	800aa78 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800aa72:	bf00      	nop
 800aa74:	e000      	b.n	800aa78 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800aa76:	bf00      	nop
    }

    if(status == HAL_OK)
 800aa78:	7bfb      	ldrb	r3, [r7, #15]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d10d      	bne.n	800aa9a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800aa7e:	4b3f      	ldr	r3, [pc, #252]	; (800ab7c <RCCEx_PLLSAI2_Config+0x1b8>)
 800aa80:	68db      	ldr	r3, [r3, #12]
 800aa82:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	6819      	ldr	r1, [r3, #0]
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	685b      	ldr	r3, [r3, #4]
 800aa8e:	3b01      	subs	r3, #1
 800aa90:	011b      	lsls	r3, r3, #4
 800aa92:	430b      	orrs	r3, r1
 800aa94:	4939      	ldr	r1, [pc, #228]	; (800ab7c <RCCEx_PLLSAI2_Config+0x1b8>)
 800aa96:	4313      	orrs	r3, r2
 800aa98:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800aa9a:	7bfb      	ldrb	r3, [r7, #15]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d167      	bne.n	800ab70 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800aaa0:	4b36      	ldr	r3, [pc, #216]	; (800ab7c <RCCEx_PLLSAI2_Config+0x1b8>)
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	4a35      	ldr	r2, [pc, #212]	; (800ab7c <RCCEx_PLLSAI2_Config+0x1b8>)
 800aaa6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800aaaa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aaac:	f7fc fa0e 	bl	8006ecc <HAL_GetTick>
 800aab0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800aab2:	e009      	b.n	800aac8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800aab4:	f7fc fa0a 	bl	8006ecc <HAL_GetTick>
 800aab8:	4602      	mov	r2, r0
 800aaba:	68bb      	ldr	r3, [r7, #8]
 800aabc:	1ad3      	subs	r3, r2, r3
 800aabe:	2b02      	cmp	r3, #2
 800aac0:	d902      	bls.n	800aac8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800aac2:	2303      	movs	r3, #3
 800aac4:	73fb      	strb	r3, [r7, #15]
        break;
 800aac6:	e005      	b.n	800aad4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800aac8:	4b2c      	ldr	r3, [pc, #176]	; (800ab7c <RCCEx_PLLSAI2_Config+0x1b8>)
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d1ef      	bne.n	800aab4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800aad4:	7bfb      	ldrb	r3, [r7, #15]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d14a      	bne.n	800ab70 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800aada:	683b      	ldr	r3, [r7, #0]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d111      	bne.n	800ab04 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800aae0:	4b26      	ldr	r3, [pc, #152]	; (800ab7c <RCCEx_PLLSAI2_Config+0x1b8>)
 800aae2:	695b      	ldr	r3, [r3, #20]
 800aae4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800aae8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aaec:	687a      	ldr	r2, [r7, #4]
 800aaee:	6892      	ldr	r2, [r2, #8]
 800aaf0:	0211      	lsls	r1, r2, #8
 800aaf2:	687a      	ldr	r2, [r7, #4]
 800aaf4:	68d2      	ldr	r2, [r2, #12]
 800aaf6:	0912      	lsrs	r2, r2, #4
 800aaf8:	0452      	lsls	r2, r2, #17
 800aafa:	430a      	orrs	r2, r1
 800aafc:	491f      	ldr	r1, [pc, #124]	; (800ab7c <RCCEx_PLLSAI2_Config+0x1b8>)
 800aafe:	4313      	orrs	r3, r2
 800ab00:	614b      	str	r3, [r1, #20]
 800ab02:	e011      	b.n	800ab28 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800ab04:	4b1d      	ldr	r3, [pc, #116]	; (800ab7c <RCCEx_PLLSAI2_Config+0x1b8>)
 800ab06:	695b      	ldr	r3, [r3, #20]
 800ab08:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800ab0c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800ab10:	687a      	ldr	r2, [r7, #4]
 800ab12:	6892      	ldr	r2, [r2, #8]
 800ab14:	0211      	lsls	r1, r2, #8
 800ab16:	687a      	ldr	r2, [r7, #4]
 800ab18:	6912      	ldr	r2, [r2, #16]
 800ab1a:	0852      	lsrs	r2, r2, #1
 800ab1c:	3a01      	subs	r2, #1
 800ab1e:	0652      	lsls	r2, r2, #25
 800ab20:	430a      	orrs	r2, r1
 800ab22:	4916      	ldr	r1, [pc, #88]	; (800ab7c <RCCEx_PLLSAI2_Config+0x1b8>)
 800ab24:	4313      	orrs	r3, r2
 800ab26:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800ab28:	4b14      	ldr	r3, [pc, #80]	; (800ab7c <RCCEx_PLLSAI2_Config+0x1b8>)
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	4a13      	ldr	r2, [pc, #76]	; (800ab7c <RCCEx_PLLSAI2_Config+0x1b8>)
 800ab2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ab32:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ab34:	f7fc f9ca 	bl	8006ecc <HAL_GetTick>
 800ab38:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800ab3a:	e009      	b.n	800ab50 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800ab3c:	f7fc f9c6 	bl	8006ecc <HAL_GetTick>
 800ab40:	4602      	mov	r2, r0
 800ab42:	68bb      	ldr	r3, [r7, #8]
 800ab44:	1ad3      	subs	r3, r2, r3
 800ab46:	2b02      	cmp	r3, #2
 800ab48:	d902      	bls.n	800ab50 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800ab4a:	2303      	movs	r3, #3
 800ab4c:	73fb      	strb	r3, [r7, #15]
          break;
 800ab4e:	e005      	b.n	800ab5c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800ab50:	4b0a      	ldr	r3, [pc, #40]	; (800ab7c <RCCEx_PLLSAI2_Config+0x1b8>)
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d0ef      	beq.n	800ab3c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800ab5c:	7bfb      	ldrb	r3, [r7, #15]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d106      	bne.n	800ab70 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800ab62:	4b06      	ldr	r3, [pc, #24]	; (800ab7c <RCCEx_PLLSAI2_Config+0x1b8>)
 800ab64:	695a      	ldr	r2, [r3, #20]
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	695b      	ldr	r3, [r3, #20]
 800ab6a:	4904      	ldr	r1, [pc, #16]	; (800ab7c <RCCEx_PLLSAI2_Config+0x1b8>)
 800ab6c:	4313      	orrs	r3, r2
 800ab6e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800ab70:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab72:	4618      	mov	r0, r3
 800ab74:	3710      	adds	r7, #16
 800ab76:	46bd      	mov	sp, r7
 800ab78:	bd80      	pop	{r7, pc}
 800ab7a:	bf00      	nop
 800ab7c:	40021000 	.word	0x40021000

0800ab80 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b084      	sub	sp, #16
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800ab88:	2301      	movs	r3, #1
 800ab8a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d06c      	beq.n	800ac6c <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800ab98:	b2db      	uxtb	r3, r3
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d106      	bne.n	800abac <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	2200      	movs	r2, #0
 800aba2:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800aba6:	6878      	ldr	r0, [r7, #4]
 800aba8:	f7fa ff7a 	bl	8005aa0 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	2202      	movs	r2, #2
 800abb0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	22ca      	movs	r2, #202	; 0xca
 800abba:	625a      	str	r2, [r3, #36]	; 0x24
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	2253      	movs	r2, #83	; 0x53
 800abc2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800abc4:	6878      	ldr	r0, [r7, #4]
 800abc6:	f000 fa49 	bl	800b05c <RTC_EnterInitMode>
 800abca:	4603      	mov	r3, r0
 800abcc:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800abce:	7bfb      	ldrb	r3, [r7, #15]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d14b      	bne.n	800ac6c <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	689b      	ldr	r3, [r3, #8]
 800abda:	687a      	ldr	r2, [r7, #4]
 800abdc:	6812      	ldr	r2, [r2, #0]
 800abde:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800abe2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800abe6:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	6899      	ldr	r1, [r3, #8]
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	685a      	ldr	r2, [r3, #4]
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	691b      	ldr	r3, [r3, #16]
 800abf6:	431a      	orrs	r2, r3
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	699b      	ldr	r3, [r3, #24]
 800abfc:	431a      	orrs	r2, r3
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	430a      	orrs	r2, r1
 800ac04:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	687a      	ldr	r2, [r7, #4]
 800ac0c:	68d2      	ldr	r2, [r2, #12]
 800ac0e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	6919      	ldr	r1, [r3, #16]
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	689b      	ldr	r3, [r3, #8]
 800ac1a:	041a      	lsls	r2, r3, #16
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	430a      	orrs	r2, r1
 800ac22:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800ac24:	6878      	ldr	r0, [r7, #4]
 800ac26:	f000 fa4d 	bl	800b0c4 <RTC_ExitInitMode>
 800ac2a:	4603      	mov	r3, r0
 800ac2c:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800ac2e:	7bfb      	ldrb	r3, [r7, #15]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d11b      	bne.n	800ac6c <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	f022 0203 	bic.w	r2, r2, #3
 800ac42:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	69da      	ldr	r2, [r3, #28]
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	695b      	ldr	r3, [r3, #20]
 800ac52:	431a      	orrs	r2, r3
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	430a      	orrs	r2, r1
 800ac5a:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	22ff      	movs	r2, #255	; 0xff
 800ac62:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	2201      	movs	r2, #1
 800ac68:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 800ac6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac6e:	4618      	mov	r0, r3
 800ac70:	3710      	adds	r7, #16
 800ac72:	46bd      	mov	sp, r7
 800ac74:	bd80      	pop	{r7, pc}

0800ac76 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800ac76:	b590      	push	{r4, r7, lr}
 800ac78:	b087      	sub	sp, #28
 800ac7a:	af00      	add	r7, sp, #0
 800ac7c:	60f8      	str	r0, [r7, #12]
 800ac7e:	60b9      	str	r1, [r7, #8]
 800ac80:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ac88:	2b01      	cmp	r3, #1
 800ac8a:	d101      	bne.n	800ac90 <HAL_RTC_SetTime+0x1a>
 800ac8c:	2302      	movs	r3, #2
 800ac8e:	e08b      	b.n	800ada8 <HAL_RTC_SetTime+0x132>
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	2201      	movs	r2, #1
 800ac94:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	2202      	movs	r2, #2
 800ac9c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	22ca      	movs	r2, #202	; 0xca
 800aca6:	625a      	str	r2, [r3, #36]	; 0x24
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	2253      	movs	r2, #83	; 0x53
 800acae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800acb0:	68f8      	ldr	r0, [r7, #12]
 800acb2:	f000 f9d3 	bl	800b05c <RTC_EnterInitMode>
 800acb6:	4603      	mov	r3, r0
 800acb8:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800acba:	7cfb      	ldrb	r3, [r7, #19]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d163      	bne.n	800ad88 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d126      	bne.n	800ad14 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	689b      	ldr	r3, [r3, #8]
 800accc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d102      	bne.n	800acda <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800acd4:	68bb      	ldr	r3, [r7, #8]
 800acd6:	2200      	movs	r2, #0
 800acd8:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800acda:	68bb      	ldr	r3, [r7, #8]
 800acdc:	781b      	ldrb	r3, [r3, #0]
 800acde:	4618      	mov	r0, r3
 800ace0:	f000 fa2e 	bl	800b140 <RTC_ByteToBcd2>
 800ace4:	4603      	mov	r3, r0
 800ace6:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800ace8:	68bb      	ldr	r3, [r7, #8]
 800acea:	785b      	ldrb	r3, [r3, #1]
 800acec:	4618      	mov	r0, r3
 800acee:	f000 fa27 	bl	800b140 <RTC_ByteToBcd2>
 800acf2:	4603      	mov	r3, r0
 800acf4:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800acf6:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800acf8:	68bb      	ldr	r3, [r7, #8]
 800acfa:	789b      	ldrb	r3, [r3, #2]
 800acfc:	4618      	mov	r0, r3
 800acfe:	f000 fa1f 	bl	800b140 <RTC_ByteToBcd2>
 800ad02:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800ad04:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800ad08:	68bb      	ldr	r3, [r7, #8]
 800ad0a:	78db      	ldrb	r3, [r3, #3]
 800ad0c:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800ad0e:	4313      	orrs	r3, r2
 800ad10:	617b      	str	r3, [r7, #20]
 800ad12:	e018      	b.n	800ad46 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	689b      	ldr	r3, [r3, #8]
 800ad1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d102      	bne.n	800ad28 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800ad22:	68bb      	ldr	r3, [r7, #8]
 800ad24:	2200      	movs	r2, #0
 800ad26:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800ad28:	68bb      	ldr	r3, [r7, #8]
 800ad2a:	781b      	ldrb	r3, [r3, #0]
 800ad2c:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800ad2e:	68bb      	ldr	r3, [r7, #8]
 800ad30:	785b      	ldrb	r3, [r3, #1]
 800ad32:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800ad34:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800ad36:	68ba      	ldr	r2, [r7, #8]
 800ad38:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800ad3a:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800ad3c:	68bb      	ldr	r3, [r7, #8]
 800ad3e:	78db      	ldrb	r3, [r3, #3]
 800ad40:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800ad42:	4313      	orrs	r3, r2
 800ad44:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	681a      	ldr	r2, [r3, #0]
 800ad4a:	697b      	ldr	r3, [r7, #20]
 800ad4c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800ad50:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800ad54:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	689a      	ldr	r2, [r3, #8]
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800ad64:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	6899      	ldr	r1, [r3, #8]
 800ad6c:	68bb      	ldr	r3, [r7, #8]
 800ad6e:	68da      	ldr	r2, [r3, #12]
 800ad70:	68bb      	ldr	r3, [r7, #8]
 800ad72:	691b      	ldr	r3, [r3, #16]
 800ad74:	431a      	orrs	r2, r3
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	430a      	orrs	r2, r1
 800ad7c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800ad7e:	68f8      	ldr	r0, [r7, #12]
 800ad80:	f000 f9a0 	bl	800b0c4 <RTC_ExitInitMode>
 800ad84:	4603      	mov	r3, r0
 800ad86:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	22ff      	movs	r2, #255	; 0xff
 800ad8e:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800ad90:	7cfb      	ldrb	r3, [r7, #19]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d103      	bne.n	800ad9e <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	2201      	movs	r2, #1
 800ad9a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	2200      	movs	r2, #0
 800ada2:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800ada6:	7cfb      	ldrb	r3, [r7, #19]
}
 800ada8:	4618      	mov	r0, r3
 800adaa:	371c      	adds	r7, #28
 800adac:	46bd      	mov	sp, r7
 800adae:	bd90      	pop	{r4, r7, pc}

0800adb0 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b086      	sub	sp, #24
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	60f8      	str	r0, [r7, #12]
 800adb8:	60b9      	str	r1, [r7, #8]
 800adba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800adc2:	68bb      	ldr	r3, [r7, #8]
 800adc4:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	691b      	ldr	r3, [r3, #16]
 800adcc:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800add0:	68bb      	ldr	r3, [r7, #8]
 800add2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800adde:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800ade2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 800ade4:	697b      	ldr	r3, [r7, #20]
 800ade6:	0c1b      	lsrs	r3, r3, #16
 800ade8:	b2db      	uxtb	r3, r3
 800adea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800adee:	b2da      	uxtb	r2, r3
 800adf0:	68bb      	ldr	r3, [r7, #8]
 800adf2:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800adf4:	697b      	ldr	r3, [r7, #20]
 800adf6:	0a1b      	lsrs	r3, r3, #8
 800adf8:	b2db      	uxtb	r3, r3
 800adfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800adfe:	b2da      	uxtb	r2, r3
 800ae00:	68bb      	ldr	r3, [r7, #8]
 800ae02:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 800ae04:	697b      	ldr	r3, [r7, #20]
 800ae06:	b2db      	uxtb	r3, r3
 800ae08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae0c:	b2da      	uxtb	r2, r3
 800ae0e:	68bb      	ldr	r3, [r7, #8]
 800ae10:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800ae12:	697b      	ldr	r3, [r7, #20]
 800ae14:	0d9b      	lsrs	r3, r3, #22
 800ae16:	b2db      	uxtb	r3, r3
 800ae18:	f003 0301 	and.w	r3, r3, #1
 800ae1c:	b2da      	uxtb	r2, r3
 800ae1e:	68bb      	ldr	r3, [r7, #8]
 800ae20:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d11a      	bne.n	800ae5e <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800ae28:	68bb      	ldr	r3, [r7, #8]
 800ae2a:	781b      	ldrb	r3, [r3, #0]
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	f000 f9a7 	bl	800b180 <RTC_Bcd2ToByte>
 800ae32:	4603      	mov	r3, r0
 800ae34:	461a      	mov	r2, r3
 800ae36:	68bb      	ldr	r3, [r7, #8]
 800ae38:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800ae3a:	68bb      	ldr	r3, [r7, #8]
 800ae3c:	785b      	ldrb	r3, [r3, #1]
 800ae3e:	4618      	mov	r0, r3
 800ae40:	f000 f99e 	bl	800b180 <RTC_Bcd2ToByte>
 800ae44:	4603      	mov	r3, r0
 800ae46:	461a      	mov	r2, r3
 800ae48:	68bb      	ldr	r3, [r7, #8]
 800ae4a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800ae4c:	68bb      	ldr	r3, [r7, #8]
 800ae4e:	789b      	ldrb	r3, [r3, #2]
 800ae50:	4618      	mov	r0, r3
 800ae52:	f000 f995 	bl	800b180 <RTC_Bcd2ToByte>
 800ae56:	4603      	mov	r3, r0
 800ae58:	461a      	mov	r2, r3
 800ae5a:	68bb      	ldr	r3, [r7, #8]
 800ae5c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800ae5e:	2300      	movs	r3, #0
}
 800ae60:	4618      	mov	r0, r3
 800ae62:	3718      	adds	r7, #24
 800ae64:	46bd      	mov	sp, r7
 800ae66:	bd80      	pop	{r7, pc}

0800ae68 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800ae68:	b590      	push	{r4, r7, lr}
 800ae6a:	b087      	sub	sp, #28
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	60f8      	str	r0, [r7, #12]
 800ae70:	60b9      	str	r1, [r7, #8]
 800ae72:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ae7a:	2b01      	cmp	r3, #1
 800ae7c:	d101      	bne.n	800ae82 <HAL_RTC_SetDate+0x1a>
 800ae7e:	2302      	movs	r3, #2
 800ae80:	e075      	b.n	800af6e <HAL_RTC_SetDate+0x106>
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	2201      	movs	r2, #1
 800ae86:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	2202      	movs	r2, #2
 800ae8e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d10e      	bne.n	800aeb6 <HAL_RTC_SetDate+0x4e>
 800ae98:	68bb      	ldr	r3, [r7, #8]
 800ae9a:	785b      	ldrb	r3, [r3, #1]
 800ae9c:	f003 0310 	and.w	r3, r3, #16
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d008      	beq.n	800aeb6 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800aea4:	68bb      	ldr	r3, [r7, #8]
 800aea6:	785b      	ldrb	r3, [r3, #1]
 800aea8:	f023 0310 	bic.w	r3, r3, #16
 800aeac:	b2db      	uxtb	r3, r3
 800aeae:	330a      	adds	r3, #10
 800aeb0:	b2da      	uxtb	r2, r3
 800aeb2:	68bb      	ldr	r3, [r7, #8]
 800aeb4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d11c      	bne.n	800aef6 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800aebc:	68bb      	ldr	r3, [r7, #8]
 800aebe:	78db      	ldrb	r3, [r3, #3]
 800aec0:	4618      	mov	r0, r3
 800aec2:	f000 f93d 	bl	800b140 <RTC_ByteToBcd2>
 800aec6:	4603      	mov	r3, r0
 800aec8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800aeca:	68bb      	ldr	r3, [r7, #8]
 800aecc:	785b      	ldrb	r3, [r3, #1]
 800aece:	4618      	mov	r0, r3
 800aed0:	f000 f936 	bl	800b140 <RTC_ByteToBcd2>
 800aed4:	4603      	mov	r3, r0
 800aed6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800aed8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800aeda:	68bb      	ldr	r3, [r7, #8]
 800aedc:	789b      	ldrb	r3, [r3, #2]
 800aede:	4618      	mov	r0, r3
 800aee0:	f000 f92e 	bl	800b140 <RTC_ByteToBcd2>
 800aee4:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800aee6:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800aeea:	68bb      	ldr	r3, [r7, #8]
 800aeec:	781b      	ldrb	r3, [r3, #0]
 800aeee:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800aef0:	4313      	orrs	r3, r2
 800aef2:	617b      	str	r3, [r7, #20]
 800aef4:	e00e      	b.n	800af14 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800aef6:	68bb      	ldr	r3, [r7, #8]
 800aef8:	78db      	ldrb	r3, [r3, #3]
 800aefa:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800aefc:	68bb      	ldr	r3, [r7, #8]
 800aefe:	785b      	ldrb	r3, [r3, #1]
 800af00:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800af02:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800af04:	68ba      	ldr	r2, [r7, #8]
 800af06:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800af08:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800af0a:	68bb      	ldr	r3, [r7, #8]
 800af0c:	781b      	ldrb	r3, [r3, #0]
 800af0e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800af10:	4313      	orrs	r3, r2
 800af12:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	22ca      	movs	r2, #202	; 0xca
 800af1a:	625a      	str	r2, [r3, #36]	; 0x24
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	2253      	movs	r2, #83	; 0x53
 800af22:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800af24:	68f8      	ldr	r0, [r7, #12]
 800af26:	f000 f899 	bl	800b05c <RTC_EnterInitMode>
 800af2a:	4603      	mov	r3, r0
 800af2c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800af2e:	7cfb      	ldrb	r3, [r7, #19]
 800af30:	2b00      	cmp	r3, #0
 800af32:	d10c      	bne.n	800af4e <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	681a      	ldr	r2, [r3, #0]
 800af38:	697b      	ldr	r3, [r7, #20]
 800af3a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800af3e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800af42:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800af44:	68f8      	ldr	r0, [r7, #12]
 800af46:	f000 f8bd 	bl	800b0c4 <RTC_ExitInitMode>
 800af4a:	4603      	mov	r3, r0
 800af4c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	22ff      	movs	r2, #255	; 0xff
 800af54:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800af56:	7cfb      	ldrb	r3, [r7, #19]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d103      	bne.n	800af64 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	2201      	movs	r2, #1
 800af60:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	2200      	movs	r2, #0
 800af68:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800af6c:	7cfb      	ldrb	r3, [r7, #19]
}
 800af6e:	4618      	mov	r0, r3
 800af70:	371c      	adds	r7, #28
 800af72:	46bd      	mov	sp, r7
 800af74:	bd90      	pop	{r4, r7, pc}

0800af76 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800af76:	b580      	push	{r7, lr}
 800af78:	b086      	sub	sp, #24
 800af7a:	af00      	add	r7, sp, #0
 800af7c:	60f8      	str	r0, [r7, #12]
 800af7e:	60b9      	str	r1, [r7, #8]
 800af80:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	685b      	ldr	r3, [r3, #4]
 800af88:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800af8c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800af90:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800af92:	697b      	ldr	r3, [r7, #20]
 800af94:	0c1b      	lsrs	r3, r3, #16
 800af96:	b2da      	uxtb	r2, r3
 800af98:	68bb      	ldr	r3, [r7, #8]
 800af9a:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800af9c:	697b      	ldr	r3, [r7, #20]
 800af9e:	0a1b      	lsrs	r3, r3, #8
 800afa0:	b2db      	uxtb	r3, r3
 800afa2:	f003 031f 	and.w	r3, r3, #31
 800afa6:	b2da      	uxtb	r2, r3
 800afa8:	68bb      	ldr	r3, [r7, #8]
 800afaa:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800afac:	697b      	ldr	r3, [r7, #20]
 800afae:	b2db      	uxtb	r3, r3
 800afb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800afb4:	b2da      	uxtb	r2, r3
 800afb6:	68bb      	ldr	r3, [r7, #8]
 800afb8:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 800afba:	697b      	ldr	r3, [r7, #20]
 800afbc:	0b5b      	lsrs	r3, r3, #13
 800afbe:	b2db      	uxtb	r3, r3
 800afc0:	f003 0307 	and.w	r3, r3, #7
 800afc4:	b2da      	uxtb	r2, r3
 800afc6:	68bb      	ldr	r3, [r7, #8]
 800afc8:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d11a      	bne.n	800b006 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800afd0:	68bb      	ldr	r3, [r7, #8]
 800afd2:	78db      	ldrb	r3, [r3, #3]
 800afd4:	4618      	mov	r0, r3
 800afd6:	f000 f8d3 	bl	800b180 <RTC_Bcd2ToByte>
 800afda:	4603      	mov	r3, r0
 800afdc:	461a      	mov	r2, r3
 800afde:	68bb      	ldr	r3, [r7, #8]
 800afe0:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800afe2:	68bb      	ldr	r3, [r7, #8]
 800afe4:	785b      	ldrb	r3, [r3, #1]
 800afe6:	4618      	mov	r0, r3
 800afe8:	f000 f8ca 	bl	800b180 <RTC_Bcd2ToByte>
 800afec:	4603      	mov	r3, r0
 800afee:	461a      	mov	r2, r3
 800aff0:	68bb      	ldr	r3, [r7, #8]
 800aff2:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800aff4:	68bb      	ldr	r3, [r7, #8]
 800aff6:	789b      	ldrb	r3, [r3, #2]
 800aff8:	4618      	mov	r0, r3
 800affa:	f000 f8c1 	bl	800b180 <RTC_Bcd2ToByte>
 800affe:	4603      	mov	r3, r0
 800b000:	461a      	mov	r2, r3
 800b002:	68bb      	ldr	r3, [r7, #8]
 800b004:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800b006:	2300      	movs	r3, #0
}
 800b008:	4618      	mov	r0, r3
 800b00a:	3718      	adds	r7, #24
 800b00c:	46bd      	mov	sp, r7
 800b00e:	bd80      	pop	{r7, pc}

0800b010 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800b010:	b580      	push	{r7, lr}
 800b012:	b084      	sub	sp, #16
 800b014:	af00      	add	r7, sp, #0
 800b016:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	68da      	ldr	r2, [r3, #12]
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800b026:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 800b028:	f7fb ff50 	bl	8006ecc <HAL_GetTick>
 800b02c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800b02e:	e009      	b.n	800b044 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800b030:	f7fb ff4c 	bl	8006ecc <HAL_GetTick>
 800b034:	4602      	mov	r2, r0
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	1ad3      	subs	r3, r2, r3
 800b03a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b03e:	d901      	bls.n	800b044 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800b040:	2303      	movs	r3, #3
 800b042:	e007      	b.n	800b054 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	68db      	ldr	r3, [r3, #12]
 800b04a:	f003 0320 	and.w	r3, r3, #32
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d0ee      	beq.n	800b030 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800b052:	2300      	movs	r3, #0
}
 800b054:	4618      	mov	r0, r3
 800b056:	3710      	adds	r7, #16
 800b058:	46bd      	mov	sp, r7
 800b05a:	bd80      	pop	{r7, pc}

0800b05c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800b05c:	b580      	push	{r7, lr}
 800b05e:	b084      	sub	sp, #16
 800b060:	af00      	add	r7, sp, #0
 800b062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b064:	2300      	movs	r3, #0
 800b066:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	68db      	ldr	r3, [r3, #12]
 800b06e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b072:	2b00      	cmp	r3, #0
 800b074:	d120      	bne.n	800b0b8 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b07e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800b080:	f7fb ff24 	bl	8006ecc <HAL_GetTick>
 800b084:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800b086:	e00d      	b.n	800b0a4 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800b088:	f7fb ff20 	bl	8006ecc <HAL_GetTick>
 800b08c:	4602      	mov	r2, r0
 800b08e:	68bb      	ldr	r3, [r7, #8]
 800b090:	1ad3      	subs	r3, r2, r3
 800b092:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b096:	d905      	bls.n	800b0a4 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800b098:	2303      	movs	r3, #3
 800b09a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	2203      	movs	r2, #3
 800b0a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	68db      	ldr	r3, [r3, #12]
 800b0aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d102      	bne.n	800b0b8 <RTC_EnterInitMode+0x5c>
 800b0b2:	7bfb      	ldrb	r3, [r7, #15]
 800b0b4:	2b03      	cmp	r3, #3
 800b0b6:	d1e7      	bne.n	800b088 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800b0b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	3710      	adds	r7, #16
 800b0be:	46bd      	mov	sp, r7
 800b0c0:	bd80      	pop	{r7, pc}
	...

0800b0c4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	b084      	sub	sp, #16
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b0cc:	2300      	movs	r3, #0
 800b0ce:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800b0d0:	4b1a      	ldr	r3, [pc, #104]	; (800b13c <RTC_ExitInitMode+0x78>)
 800b0d2:	68db      	ldr	r3, [r3, #12]
 800b0d4:	4a19      	ldr	r2, [pc, #100]	; (800b13c <RTC_ExitInitMode+0x78>)
 800b0d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b0da:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800b0dc:	4b17      	ldr	r3, [pc, #92]	; (800b13c <RTC_ExitInitMode+0x78>)
 800b0de:	689b      	ldr	r3, [r3, #8]
 800b0e0:	f003 0320 	and.w	r3, r3, #32
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d10c      	bne.n	800b102 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b0e8:	6878      	ldr	r0, [r7, #4]
 800b0ea:	f7ff ff91 	bl	800b010 <HAL_RTC_WaitForSynchro>
 800b0ee:	4603      	mov	r3, r0
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d01e      	beq.n	800b132 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	2203      	movs	r2, #3
 800b0f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800b0fc:	2303      	movs	r3, #3
 800b0fe:	73fb      	strb	r3, [r7, #15]
 800b100:	e017      	b.n	800b132 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800b102:	4b0e      	ldr	r3, [pc, #56]	; (800b13c <RTC_ExitInitMode+0x78>)
 800b104:	689b      	ldr	r3, [r3, #8]
 800b106:	4a0d      	ldr	r2, [pc, #52]	; (800b13c <RTC_ExitInitMode+0x78>)
 800b108:	f023 0320 	bic.w	r3, r3, #32
 800b10c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b10e:	6878      	ldr	r0, [r7, #4]
 800b110:	f7ff ff7e 	bl	800b010 <HAL_RTC_WaitForSynchro>
 800b114:	4603      	mov	r3, r0
 800b116:	2b00      	cmp	r3, #0
 800b118:	d005      	beq.n	800b126 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	2203      	movs	r2, #3
 800b11e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800b122:	2303      	movs	r3, #3
 800b124:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800b126:	4b05      	ldr	r3, [pc, #20]	; (800b13c <RTC_ExitInitMode+0x78>)
 800b128:	689b      	ldr	r3, [r3, #8]
 800b12a:	4a04      	ldr	r2, [pc, #16]	; (800b13c <RTC_ExitInitMode+0x78>)
 800b12c:	f043 0320 	orr.w	r3, r3, #32
 800b130:	6093      	str	r3, [r2, #8]
  }

  return status;
 800b132:	7bfb      	ldrb	r3, [r7, #15]
}
 800b134:	4618      	mov	r0, r3
 800b136:	3710      	adds	r7, #16
 800b138:	46bd      	mov	sp, r7
 800b13a:	bd80      	pop	{r7, pc}
 800b13c:	40002800 	.word	0x40002800

0800b140 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800b140:	b480      	push	{r7}
 800b142:	b085      	sub	sp, #20
 800b144:	af00      	add	r7, sp, #0
 800b146:	4603      	mov	r3, r0
 800b148:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800b14a:	2300      	movs	r3, #0
 800b14c:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 800b14e:	79fb      	ldrb	r3, [r7, #7]
 800b150:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 800b152:	e005      	b.n	800b160 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	3301      	adds	r3, #1
 800b158:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 800b15a:	7afb      	ldrb	r3, [r7, #11]
 800b15c:	3b0a      	subs	r3, #10
 800b15e:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 800b160:	7afb      	ldrb	r3, [r7, #11]
 800b162:	2b09      	cmp	r3, #9
 800b164:	d8f6      	bhi.n	800b154 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	b2db      	uxtb	r3, r3
 800b16a:	011b      	lsls	r3, r3, #4
 800b16c:	b2da      	uxtb	r2, r3
 800b16e:	7afb      	ldrb	r3, [r7, #11]
 800b170:	4313      	orrs	r3, r2
 800b172:	b2db      	uxtb	r3, r3
}
 800b174:	4618      	mov	r0, r3
 800b176:	3714      	adds	r7, #20
 800b178:	46bd      	mov	sp, r7
 800b17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17e:	4770      	bx	lr

0800b180 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800b180:	b480      	push	{r7}
 800b182:	b085      	sub	sp, #20
 800b184:	af00      	add	r7, sp, #0
 800b186:	4603      	mov	r3, r0
 800b188:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800b18a:	79fb      	ldrb	r3, [r7, #7]
 800b18c:	091b      	lsrs	r3, r3, #4
 800b18e:	b2db      	uxtb	r3, r3
 800b190:	461a      	mov	r2, r3
 800b192:	0092      	lsls	r2, r2, #2
 800b194:	4413      	add	r3, r2
 800b196:	005b      	lsls	r3, r3, #1
 800b198:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800b19a:	79fb      	ldrb	r3, [r7, #7]
 800b19c:	f003 030f 	and.w	r3, r3, #15
 800b1a0:	b2da      	uxtb	r2, r3
 800b1a2:	7bfb      	ldrb	r3, [r7, #15]
 800b1a4:	4413      	add	r3, r2
 800b1a6:	b2db      	uxtb	r3, r3
}
 800b1a8:	4618      	mov	r0, r3
 800b1aa:	3714      	adds	r7, #20
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b2:	4770      	bx	lr

0800b1b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b084      	sub	sp, #16
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d101      	bne.n	800b1c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b1c2:	2301      	movs	r3, #1
 800b1c4:	e095      	b.n	800b2f2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d108      	bne.n	800b1e0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	685b      	ldr	r3, [r3, #4]
 800b1d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b1d6:	d009      	beq.n	800b1ec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	2200      	movs	r2, #0
 800b1dc:	61da      	str	r2, [r3, #28]
 800b1de:	e005      	b.n	800b1ec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	2200      	movs	r2, #0
 800b1ea:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b1f8:	b2db      	uxtb	r3, r3
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d106      	bne.n	800b20c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	2200      	movs	r2, #0
 800b202:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b206:	6878      	ldr	r0, [r7, #4]
 800b208:	f7fa fc7c 	bl	8005b04 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	2202      	movs	r2, #2
 800b210:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	681a      	ldr	r2, [r3, #0]
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b222:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	68db      	ldr	r3, [r3, #12]
 800b228:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b22c:	d902      	bls.n	800b234 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800b22e:	2300      	movs	r3, #0
 800b230:	60fb      	str	r3, [r7, #12]
 800b232:	e002      	b.n	800b23a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800b234:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b238:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	68db      	ldr	r3, [r3, #12]
 800b23e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800b242:	d007      	beq.n	800b254 <HAL_SPI_Init+0xa0>
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	68db      	ldr	r3, [r3, #12]
 800b248:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b24c:	d002      	beq.n	800b254 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	2200      	movs	r2, #0
 800b252:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	685b      	ldr	r3, [r3, #4]
 800b258:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	689b      	ldr	r3, [r3, #8]
 800b260:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800b264:	431a      	orrs	r2, r3
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	691b      	ldr	r3, [r3, #16]
 800b26a:	f003 0302 	and.w	r3, r3, #2
 800b26e:	431a      	orrs	r2, r3
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	695b      	ldr	r3, [r3, #20]
 800b274:	f003 0301 	and.w	r3, r3, #1
 800b278:	431a      	orrs	r2, r3
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	699b      	ldr	r3, [r3, #24]
 800b27e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b282:	431a      	orrs	r2, r3
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	69db      	ldr	r3, [r3, #28]
 800b288:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b28c:	431a      	orrs	r2, r3
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	6a1b      	ldr	r3, [r3, #32]
 800b292:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b296:	ea42 0103 	orr.w	r1, r2, r3
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b29e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	430a      	orrs	r2, r1
 800b2a8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	699b      	ldr	r3, [r3, #24]
 800b2ae:	0c1b      	lsrs	r3, r3, #16
 800b2b0:	f003 0204 	and.w	r2, r3, #4
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2b8:	f003 0310 	and.w	r3, r3, #16
 800b2bc:	431a      	orrs	r2, r3
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2c2:	f003 0308 	and.w	r3, r3, #8
 800b2c6:	431a      	orrs	r2, r3
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	68db      	ldr	r3, [r3, #12]
 800b2cc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800b2d0:	ea42 0103 	orr.w	r1, r2, r3
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	430a      	orrs	r2, r1
 800b2e0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	2200      	movs	r2, #0
 800b2e6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	2201      	movs	r2, #1
 800b2ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800b2f0:	2300      	movs	r3, #0
}
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	3710      	adds	r7, #16
 800b2f6:	46bd      	mov	sp, r7
 800b2f8:	bd80      	pop	{r7, pc}

0800b2fa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b2fa:	b580      	push	{r7, lr}
 800b2fc:	b088      	sub	sp, #32
 800b2fe:	af00      	add	r7, sp, #0
 800b300:	60f8      	str	r0, [r7, #12]
 800b302:	60b9      	str	r1, [r7, #8]
 800b304:	603b      	str	r3, [r7, #0]
 800b306:	4613      	mov	r3, r2
 800b308:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b30a:	2300      	movs	r3, #0
 800b30c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800b314:	2b01      	cmp	r3, #1
 800b316:	d101      	bne.n	800b31c <HAL_SPI_Transmit+0x22>
 800b318:	2302      	movs	r3, #2
 800b31a:	e158      	b.n	800b5ce <HAL_SPI_Transmit+0x2d4>
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	2201      	movs	r2, #1
 800b320:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b324:	f7fb fdd2 	bl	8006ecc <HAL_GetTick>
 800b328:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800b32a:	88fb      	ldrh	r3, [r7, #6]
 800b32c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b334:	b2db      	uxtb	r3, r3
 800b336:	2b01      	cmp	r3, #1
 800b338:	d002      	beq.n	800b340 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800b33a:	2302      	movs	r3, #2
 800b33c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b33e:	e13d      	b.n	800b5bc <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800b340:	68bb      	ldr	r3, [r7, #8]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d002      	beq.n	800b34c <HAL_SPI_Transmit+0x52>
 800b346:	88fb      	ldrh	r3, [r7, #6]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d102      	bne.n	800b352 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800b34c:	2301      	movs	r3, #1
 800b34e:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b350:	e134      	b.n	800b5bc <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	2203      	movs	r2, #3
 800b356:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	2200      	movs	r2, #0
 800b35e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	68ba      	ldr	r2, [r7, #8]
 800b364:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	88fa      	ldrh	r2, [r7, #6]
 800b36a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	88fa      	ldrh	r2, [r7, #6]
 800b370:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	2200      	movs	r2, #0
 800b376:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	2200      	movs	r2, #0
 800b37c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	2200      	movs	r2, #0
 800b384:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	2200      	movs	r2, #0
 800b38c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	2200      	movs	r2, #0
 800b392:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	689b      	ldr	r3, [r3, #8]
 800b398:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b39c:	d10f      	bne.n	800b3be <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	681a      	ldr	r2, [r3, #0]
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b3ac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	681a      	ldr	r2, [r3, #0]
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b3bc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3c8:	2b40      	cmp	r3, #64	; 0x40
 800b3ca:	d007      	beq.n	800b3dc <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	681a      	ldr	r2, [r3, #0]
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b3da:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	68db      	ldr	r3, [r3, #12]
 800b3e0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b3e4:	d94b      	bls.n	800b47e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	685b      	ldr	r3, [r3, #4]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d002      	beq.n	800b3f4 <HAL_SPI_Transmit+0xfa>
 800b3ee:	8afb      	ldrh	r3, [r7, #22]
 800b3f0:	2b01      	cmp	r3, #1
 800b3f2:	d13e      	bne.n	800b472 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3f8:	881a      	ldrh	r2, [r3, #0]
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b404:	1c9a      	adds	r2, r3, #2
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b40e:	b29b      	uxth	r3, r3
 800b410:	3b01      	subs	r3, #1
 800b412:	b29a      	uxth	r2, r3
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800b418:	e02b      	b.n	800b472 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	689b      	ldr	r3, [r3, #8]
 800b420:	f003 0302 	and.w	r3, r3, #2
 800b424:	2b02      	cmp	r3, #2
 800b426:	d112      	bne.n	800b44e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b42c:	881a      	ldrh	r2, [r3, #0]
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b438:	1c9a      	adds	r2, r3, #2
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b442:	b29b      	uxth	r3, r3
 800b444:	3b01      	subs	r3, #1
 800b446:	b29a      	uxth	r2, r3
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b44c:	e011      	b.n	800b472 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b44e:	f7fb fd3d 	bl	8006ecc <HAL_GetTick>
 800b452:	4602      	mov	r2, r0
 800b454:	69bb      	ldr	r3, [r7, #24]
 800b456:	1ad3      	subs	r3, r2, r3
 800b458:	683a      	ldr	r2, [r7, #0]
 800b45a:	429a      	cmp	r2, r3
 800b45c:	d803      	bhi.n	800b466 <HAL_SPI_Transmit+0x16c>
 800b45e:	683b      	ldr	r3, [r7, #0]
 800b460:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b464:	d102      	bne.n	800b46c <HAL_SPI_Transmit+0x172>
 800b466:	683b      	ldr	r3, [r7, #0]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d102      	bne.n	800b472 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800b46c:	2303      	movs	r3, #3
 800b46e:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b470:	e0a4      	b.n	800b5bc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b476:	b29b      	uxth	r3, r3
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d1ce      	bne.n	800b41a <HAL_SPI_Transmit+0x120>
 800b47c:	e07c      	b.n	800b578 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	685b      	ldr	r3, [r3, #4]
 800b482:	2b00      	cmp	r3, #0
 800b484:	d002      	beq.n	800b48c <HAL_SPI_Transmit+0x192>
 800b486:	8afb      	ldrh	r3, [r7, #22]
 800b488:	2b01      	cmp	r3, #1
 800b48a:	d170      	bne.n	800b56e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b490:	b29b      	uxth	r3, r3
 800b492:	2b01      	cmp	r3, #1
 800b494:	d912      	bls.n	800b4bc <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b49a:	881a      	ldrh	r2, [r3, #0]
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4a6:	1c9a      	adds	r2, r3, #2
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b4b0:	b29b      	uxth	r3, r3
 800b4b2:	3b02      	subs	r3, #2
 800b4b4:	b29a      	uxth	r2, r3
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b4ba:	e058      	b.n	800b56e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	330c      	adds	r3, #12
 800b4c6:	7812      	ldrb	r2, [r2, #0]
 800b4c8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4ce:	1c5a      	adds	r2, r3, #1
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b4d8:	b29b      	uxth	r3, r3
 800b4da:	3b01      	subs	r3, #1
 800b4dc:	b29a      	uxth	r2, r3
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800b4e2:	e044      	b.n	800b56e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	689b      	ldr	r3, [r3, #8]
 800b4ea:	f003 0302 	and.w	r3, r3, #2
 800b4ee:	2b02      	cmp	r3, #2
 800b4f0:	d12b      	bne.n	800b54a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b4f6:	b29b      	uxth	r3, r3
 800b4f8:	2b01      	cmp	r3, #1
 800b4fa:	d912      	bls.n	800b522 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b500:	881a      	ldrh	r2, [r3, #0]
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b50c:	1c9a      	adds	r2, r3, #2
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b516:	b29b      	uxth	r3, r3
 800b518:	3b02      	subs	r3, #2
 800b51a:	b29a      	uxth	r2, r3
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b520:	e025      	b.n	800b56e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	330c      	adds	r3, #12
 800b52c:	7812      	ldrb	r2, [r2, #0]
 800b52e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b534:	1c5a      	adds	r2, r3, #1
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b53e:	b29b      	uxth	r3, r3
 800b540:	3b01      	subs	r3, #1
 800b542:	b29a      	uxth	r2, r3
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b548:	e011      	b.n	800b56e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b54a:	f7fb fcbf 	bl	8006ecc <HAL_GetTick>
 800b54e:	4602      	mov	r2, r0
 800b550:	69bb      	ldr	r3, [r7, #24]
 800b552:	1ad3      	subs	r3, r2, r3
 800b554:	683a      	ldr	r2, [r7, #0]
 800b556:	429a      	cmp	r2, r3
 800b558:	d803      	bhi.n	800b562 <HAL_SPI_Transmit+0x268>
 800b55a:	683b      	ldr	r3, [r7, #0]
 800b55c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b560:	d102      	bne.n	800b568 <HAL_SPI_Transmit+0x26e>
 800b562:	683b      	ldr	r3, [r7, #0]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d102      	bne.n	800b56e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800b568:	2303      	movs	r3, #3
 800b56a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b56c:	e026      	b.n	800b5bc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b572:	b29b      	uxth	r3, r3
 800b574:	2b00      	cmp	r3, #0
 800b576:	d1b5      	bne.n	800b4e4 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b578:	69ba      	ldr	r2, [r7, #24]
 800b57a:	6839      	ldr	r1, [r7, #0]
 800b57c:	68f8      	ldr	r0, [r7, #12]
 800b57e:	f001 f9dd 	bl	800c93c <SPI_EndRxTxTransaction>
 800b582:	4603      	mov	r3, r0
 800b584:	2b00      	cmp	r3, #0
 800b586:	d002      	beq.n	800b58e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	2220      	movs	r2, #32
 800b58c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	689b      	ldr	r3, [r3, #8]
 800b592:	2b00      	cmp	r3, #0
 800b594:	d10a      	bne.n	800b5ac <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b596:	2300      	movs	r3, #0
 800b598:	613b      	str	r3, [r7, #16]
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	68db      	ldr	r3, [r3, #12]
 800b5a0:	613b      	str	r3, [r7, #16]
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	689b      	ldr	r3, [r3, #8]
 800b5a8:	613b      	str	r3, [r7, #16]
 800b5aa:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d002      	beq.n	800b5ba <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800b5b4:	2301      	movs	r3, #1
 800b5b6:	77fb      	strb	r3, [r7, #31]
 800b5b8:	e000      	b.n	800b5bc <HAL_SPI_Transmit+0x2c2>
  }

error:
 800b5ba:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	2201      	movs	r2, #1
 800b5c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800b5cc:	7ffb      	ldrb	r3, [r7, #31]
}
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	3720      	adds	r7, #32
 800b5d2:	46bd      	mov	sp, r7
 800b5d4:	bd80      	pop	{r7, pc}

0800b5d6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b5d6:	b580      	push	{r7, lr}
 800b5d8:	b088      	sub	sp, #32
 800b5da:	af02      	add	r7, sp, #8
 800b5dc:	60f8      	str	r0, [r7, #12]
 800b5de:	60b9      	str	r1, [r7, #8]
 800b5e0:	603b      	str	r3, [r7, #0]
 800b5e2:	4613      	mov	r3, r2
 800b5e4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	685b      	ldr	r3, [r3, #4]
 800b5ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b5f2:	d112      	bne.n	800b61a <HAL_SPI_Receive+0x44>
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	689b      	ldr	r3, [r3, #8]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d10e      	bne.n	800b61a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	2204      	movs	r2, #4
 800b600:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800b604:	88fa      	ldrh	r2, [r7, #6]
 800b606:	683b      	ldr	r3, [r7, #0]
 800b608:	9300      	str	r3, [sp, #0]
 800b60a:	4613      	mov	r3, r2
 800b60c:	68ba      	ldr	r2, [r7, #8]
 800b60e:	68b9      	ldr	r1, [r7, #8]
 800b610:	68f8      	ldr	r0, [r7, #12]
 800b612:	f000 f910 	bl	800b836 <HAL_SPI_TransmitReceive>
 800b616:	4603      	mov	r3, r0
 800b618:	e109      	b.n	800b82e <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800b620:	2b01      	cmp	r3, #1
 800b622:	d101      	bne.n	800b628 <HAL_SPI_Receive+0x52>
 800b624:	2302      	movs	r3, #2
 800b626:	e102      	b.n	800b82e <HAL_SPI_Receive+0x258>
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	2201      	movs	r2, #1
 800b62c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b630:	f7fb fc4c 	bl	8006ecc <HAL_GetTick>
 800b634:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b63c:	b2db      	uxtb	r3, r3
 800b63e:	2b01      	cmp	r3, #1
 800b640:	d002      	beq.n	800b648 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800b642:	2302      	movs	r3, #2
 800b644:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b646:	e0e9      	b.n	800b81c <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 800b648:	68bb      	ldr	r3, [r7, #8]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d002      	beq.n	800b654 <HAL_SPI_Receive+0x7e>
 800b64e:	88fb      	ldrh	r3, [r7, #6]
 800b650:	2b00      	cmp	r3, #0
 800b652:	d102      	bne.n	800b65a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800b654:	2301      	movs	r3, #1
 800b656:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b658:	e0e0      	b.n	800b81c <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	2204      	movs	r2, #4
 800b65e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	2200      	movs	r2, #0
 800b666:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	68ba      	ldr	r2, [r7, #8]
 800b66c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	88fa      	ldrh	r2, [r7, #6]
 800b672:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	88fa      	ldrh	r2, [r7, #6]
 800b67a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	2200      	movs	r2, #0
 800b682:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	2200      	movs	r2, #0
 800b688:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	2200      	movs	r2, #0
 800b68e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	2200      	movs	r2, #0
 800b694:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	2200      	movs	r2, #0
 800b69a:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	68db      	ldr	r3, [r3, #12]
 800b6a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b6a4:	d908      	bls.n	800b6b8 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	685a      	ldr	r2, [r3, #4]
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b6b4:	605a      	str	r2, [r3, #4]
 800b6b6:	e007      	b.n	800b6c8 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	685a      	ldr	r2, [r3, #4]
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b6c6:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	689b      	ldr	r3, [r3, #8]
 800b6cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b6d0:	d10f      	bne.n	800b6f2 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	681a      	ldr	r2, [r3, #0]
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b6e0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	681a      	ldr	r2, [r3, #0]
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b6f0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6fc:	2b40      	cmp	r3, #64	; 0x40
 800b6fe:	d007      	beq.n	800b710 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	681a      	ldr	r2, [r3, #0]
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b70e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	68db      	ldr	r3, [r3, #12]
 800b714:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b718:	d867      	bhi.n	800b7ea <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800b71a:	e030      	b.n	800b77e <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	689b      	ldr	r3, [r3, #8]
 800b722:	f003 0301 	and.w	r3, r3, #1
 800b726:	2b01      	cmp	r3, #1
 800b728:	d117      	bne.n	800b75a <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	f103 020c 	add.w	r2, r3, #12
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b736:	7812      	ldrb	r2, [r2, #0]
 800b738:	b2d2      	uxtb	r2, r2
 800b73a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b740:	1c5a      	adds	r2, r3, #1
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b74c:	b29b      	uxth	r3, r3
 800b74e:	3b01      	subs	r3, #1
 800b750:	b29a      	uxth	r2, r3
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800b758:	e011      	b.n	800b77e <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b75a:	f7fb fbb7 	bl	8006ecc <HAL_GetTick>
 800b75e:	4602      	mov	r2, r0
 800b760:	693b      	ldr	r3, [r7, #16]
 800b762:	1ad3      	subs	r3, r2, r3
 800b764:	683a      	ldr	r2, [r7, #0]
 800b766:	429a      	cmp	r2, r3
 800b768:	d803      	bhi.n	800b772 <HAL_SPI_Receive+0x19c>
 800b76a:	683b      	ldr	r3, [r7, #0]
 800b76c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b770:	d102      	bne.n	800b778 <HAL_SPI_Receive+0x1a2>
 800b772:	683b      	ldr	r3, [r7, #0]
 800b774:	2b00      	cmp	r3, #0
 800b776:	d102      	bne.n	800b77e <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 800b778:	2303      	movs	r3, #3
 800b77a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800b77c:	e04e      	b.n	800b81c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b784:	b29b      	uxth	r3, r3
 800b786:	2b00      	cmp	r3, #0
 800b788:	d1c8      	bne.n	800b71c <HAL_SPI_Receive+0x146>
 800b78a:	e034      	b.n	800b7f6 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	689b      	ldr	r3, [r3, #8]
 800b792:	f003 0301 	and.w	r3, r3, #1
 800b796:	2b01      	cmp	r3, #1
 800b798:	d115      	bne.n	800b7c6 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	68da      	ldr	r2, [r3, #12]
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7a4:	b292      	uxth	r2, r2
 800b7a6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7ac:	1c9a      	adds	r2, r3, #2
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b7b8:	b29b      	uxth	r3, r3
 800b7ba:	3b01      	subs	r3, #1
 800b7bc:	b29a      	uxth	r2, r3
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800b7c4:	e011      	b.n	800b7ea <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b7c6:	f7fb fb81 	bl	8006ecc <HAL_GetTick>
 800b7ca:	4602      	mov	r2, r0
 800b7cc:	693b      	ldr	r3, [r7, #16]
 800b7ce:	1ad3      	subs	r3, r2, r3
 800b7d0:	683a      	ldr	r2, [r7, #0]
 800b7d2:	429a      	cmp	r2, r3
 800b7d4:	d803      	bhi.n	800b7de <HAL_SPI_Receive+0x208>
 800b7d6:	683b      	ldr	r3, [r7, #0]
 800b7d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b7dc:	d102      	bne.n	800b7e4 <HAL_SPI_Receive+0x20e>
 800b7de:	683b      	ldr	r3, [r7, #0]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d102      	bne.n	800b7ea <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 800b7e4:	2303      	movs	r3, #3
 800b7e6:	75fb      	strb	r3, [r7, #23]
          goto error;
 800b7e8:	e018      	b.n	800b81c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b7f0:	b29b      	uxth	r3, r3
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d1ca      	bne.n	800b78c <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b7f6:	693a      	ldr	r2, [r7, #16]
 800b7f8:	6839      	ldr	r1, [r7, #0]
 800b7fa:	68f8      	ldr	r0, [r7, #12]
 800b7fc:	f001 f846 	bl	800c88c <SPI_EndRxTransaction>
 800b800:	4603      	mov	r3, r0
 800b802:	2b00      	cmp	r3, #0
 800b804:	d002      	beq.n	800b80c <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	2220      	movs	r2, #32
 800b80a:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b810:	2b00      	cmp	r3, #0
 800b812:	d002      	beq.n	800b81a <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 800b814:	2301      	movs	r3, #1
 800b816:	75fb      	strb	r3, [r7, #23]
 800b818:	e000      	b.n	800b81c <HAL_SPI_Receive+0x246>
  }

error :
 800b81a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	2201      	movs	r2, #1
 800b820:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	2200      	movs	r2, #0
 800b828:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800b82c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b82e:	4618      	mov	r0, r3
 800b830:	3718      	adds	r7, #24
 800b832:	46bd      	mov	sp, r7
 800b834:	bd80      	pop	{r7, pc}

0800b836 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800b836:	b580      	push	{r7, lr}
 800b838:	b08a      	sub	sp, #40	; 0x28
 800b83a:	af00      	add	r7, sp, #0
 800b83c:	60f8      	str	r0, [r7, #12]
 800b83e:	60b9      	str	r1, [r7, #8]
 800b840:	607a      	str	r2, [r7, #4]
 800b842:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800b844:	2301      	movs	r3, #1
 800b846:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800b848:	2300      	movs	r3, #0
 800b84a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800b854:	2b01      	cmp	r3, #1
 800b856:	d101      	bne.n	800b85c <HAL_SPI_TransmitReceive+0x26>
 800b858:	2302      	movs	r3, #2
 800b85a:	e1fb      	b.n	800bc54 <HAL_SPI_TransmitReceive+0x41e>
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	2201      	movs	r2, #1
 800b860:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b864:	f7fb fb32 	bl	8006ecc <HAL_GetTick>
 800b868:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b870:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	685b      	ldr	r3, [r3, #4]
 800b876:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800b878:	887b      	ldrh	r3, [r7, #2]
 800b87a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800b87c:	887b      	ldrh	r3, [r7, #2]
 800b87e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b880:	7efb      	ldrb	r3, [r7, #27]
 800b882:	2b01      	cmp	r3, #1
 800b884:	d00e      	beq.n	800b8a4 <HAL_SPI_TransmitReceive+0x6e>
 800b886:	697b      	ldr	r3, [r7, #20]
 800b888:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b88c:	d106      	bne.n	800b89c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	689b      	ldr	r3, [r3, #8]
 800b892:	2b00      	cmp	r3, #0
 800b894:	d102      	bne.n	800b89c <HAL_SPI_TransmitReceive+0x66>
 800b896:	7efb      	ldrb	r3, [r7, #27]
 800b898:	2b04      	cmp	r3, #4
 800b89a:	d003      	beq.n	800b8a4 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800b89c:	2302      	movs	r3, #2
 800b89e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800b8a2:	e1cd      	b.n	800bc40 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b8a4:	68bb      	ldr	r3, [r7, #8]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d005      	beq.n	800b8b6 <HAL_SPI_TransmitReceive+0x80>
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d002      	beq.n	800b8b6 <HAL_SPI_TransmitReceive+0x80>
 800b8b0:	887b      	ldrh	r3, [r7, #2]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d103      	bne.n	800b8be <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800b8b6:	2301      	movs	r3, #1
 800b8b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800b8bc:	e1c0      	b.n	800bc40 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b8c4:	b2db      	uxtb	r3, r3
 800b8c6:	2b04      	cmp	r3, #4
 800b8c8:	d003      	beq.n	800b8d2 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	2205      	movs	r2, #5
 800b8ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	2200      	movs	r2, #0
 800b8d6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	687a      	ldr	r2, [r7, #4]
 800b8dc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	887a      	ldrh	r2, [r7, #2]
 800b8e2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	887a      	ldrh	r2, [r7, #2]
 800b8ea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	68ba      	ldr	r2, [r7, #8]
 800b8f2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	887a      	ldrh	r2, [r7, #2]
 800b8f8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	887a      	ldrh	r2, [r7, #2]
 800b8fe:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	2200      	movs	r2, #0
 800b904:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	2200      	movs	r2, #0
 800b90a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	68db      	ldr	r3, [r3, #12]
 800b910:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b914:	d802      	bhi.n	800b91c <HAL_SPI_TransmitReceive+0xe6>
 800b916:	8a3b      	ldrh	r3, [r7, #16]
 800b918:	2b01      	cmp	r3, #1
 800b91a:	d908      	bls.n	800b92e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	685a      	ldr	r2, [r3, #4]
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b92a:	605a      	str	r2, [r3, #4]
 800b92c:	e007      	b.n	800b93e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	685a      	ldr	r2, [r3, #4]
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b93c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b948:	2b40      	cmp	r3, #64	; 0x40
 800b94a:	d007      	beq.n	800b95c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	681a      	ldr	r2, [r3, #0]
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b95a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	68db      	ldr	r3, [r3, #12]
 800b960:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b964:	d97c      	bls.n	800ba60 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	685b      	ldr	r3, [r3, #4]
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d002      	beq.n	800b974 <HAL_SPI_TransmitReceive+0x13e>
 800b96e:	8a7b      	ldrh	r3, [r7, #18]
 800b970:	2b01      	cmp	r3, #1
 800b972:	d169      	bne.n	800ba48 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b978:	881a      	ldrh	r2, [r3, #0]
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b984:	1c9a      	adds	r2, r3, #2
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b98e:	b29b      	uxth	r3, r3
 800b990:	3b01      	subs	r3, #1
 800b992:	b29a      	uxth	r2, r3
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b998:	e056      	b.n	800ba48 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	689b      	ldr	r3, [r3, #8]
 800b9a0:	f003 0302 	and.w	r3, r3, #2
 800b9a4:	2b02      	cmp	r3, #2
 800b9a6:	d11b      	bne.n	800b9e0 <HAL_SPI_TransmitReceive+0x1aa>
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b9ac:	b29b      	uxth	r3, r3
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d016      	beq.n	800b9e0 <HAL_SPI_TransmitReceive+0x1aa>
 800b9b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9b4:	2b01      	cmp	r3, #1
 800b9b6:	d113      	bne.n	800b9e0 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9bc:	881a      	ldrh	r2, [r3, #0]
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9c8:	1c9a      	adds	r2, r3, #2
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b9d2:	b29b      	uxth	r3, r3
 800b9d4:	3b01      	subs	r3, #1
 800b9d6:	b29a      	uxth	r2, r3
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b9dc:	2300      	movs	r3, #0
 800b9de:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	689b      	ldr	r3, [r3, #8]
 800b9e6:	f003 0301 	and.w	r3, r3, #1
 800b9ea:	2b01      	cmp	r3, #1
 800b9ec:	d11c      	bne.n	800ba28 <HAL_SPI_TransmitReceive+0x1f2>
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b9f4:	b29b      	uxth	r3, r3
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d016      	beq.n	800ba28 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	68da      	ldr	r2, [r3, #12]
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba04:	b292      	uxth	r2, r2
 800ba06:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba0c:	1c9a      	adds	r2, r3, #2
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ba18:	b29b      	uxth	r3, r3
 800ba1a:	3b01      	subs	r3, #1
 800ba1c:	b29a      	uxth	r2, r3
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ba24:	2301      	movs	r3, #1
 800ba26:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800ba28:	f7fb fa50 	bl	8006ecc <HAL_GetTick>
 800ba2c:	4602      	mov	r2, r0
 800ba2e:	69fb      	ldr	r3, [r7, #28]
 800ba30:	1ad3      	subs	r3, r2, r3
 800ba32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba34:	429a      	cmp	r2, r3
 800ba36:	d807      	bhi.n	800ba48 <HAL_SPI_TransmitReceive+0x212>
 800ba38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ba3e:	d003      	beq.n	800ba48 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800ba40:	2303      	movs	r3, #3
 800ba42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800ba46:	e0fb      	b.n	800bc40 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ba4c:	b29b      	uxth	r3, r3
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d1a3      	bne.n	800b99a <HAL_SPI_TransmitReceive+0x164>
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ba58:	b29b      	uxth	r3, r3
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d19d      	bne.n	800b99a <HAL_SPI_TransmitReceive+0x164>
 800ba5e:	e0df      	b.n	800bc20 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	685b      	ldr	r3, [r3, #4]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d003      	beq.n	800ba70 <HAL_SPI_TransmitReceive+0x23a>
 800ba68:	8a7b      	ldrh	r3, [r7, #18]
 800ba6a:	2b01      	cmp	r3, #1
 800ba6c:	f040 80cb 	bne.w	800bc06 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ba74:	b29b      	uxth	r3, r3
 800ba76:	2b01      	cmp	r3, #1
 800ba78:	d912      	bls.n	800baa0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba7e:	881a      	ldrh	r2, [r3, #0]
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba8a:	1c9a      	adds	r2, r3, #2
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ba94:	b29b      	uxth	r3, r3
 800ba96:	3b02      	subs	r3, #2
 800ba98:	b29a      	uxth	r2, r3
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ba9e:	e0b2      	b.n	800bc06 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	330c      	adds	r3, #12
 800baaa:	7812      	ldrb	r2, [r2, #0]
 800baac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bab2:	1c5a      	adds	r2, r3, #1
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800babc:	b29b      	uxth	r3, r3
 800babe:	3b01      	subs	r3, #1
 800bac0:	b29a      	uxth	r2, r3
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bac6:	e09e      	b.n	800bc06 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	689b      	ldr	r3, [r3, #8]
 800bace:	f003 0302 	and.w	r3, r3, #2
 800bad2:	2b02      	cmp	r3, #2
 800bad4:	d134      	bne.n	800bb40 <HAL_SPI_TransmitReceive+0x30a>
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bada:	b29b      	uxth	r3, r3
 800badc:	2b00      	cmp	r3, #0
 800bade:	d02f      	beq.n	800bb40 <HAL_SPI_TransmitReceive+0x30a>
 800bae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bae2:	2b01      	cmp	r3, #1
 800bae4:	d12c      	bne.n	800bb40 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800baea:	b29b      	uxth	r3, r3
 800baec:	2b01      	cmp	r3, #1
 800baee:	d912      	bls.n	800bb16 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800baf4:	881a      	ldrh	r2, [r3, #0]
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb00:	1c9a      	adds	r2, r3, #2
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bb0a:	b29b      	uxth	r3, r3
 800bb0c:	3b02      	subs	r3, #2
 800bb0e:	b29a      	uxth	r2, r3
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	87da      	strh	r2, [r3, #62]	; 0x3e
 800bb14:	e012      	b.n	800bb3c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	330c      	adds	r3, #12
 800bb20:	7812      	ldrb	r2, [r2, #0]
 800bb22:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb28:	1c5a      	adds	r2, r3, #1
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bb32:	b29b      	uxth	r3, r3
 800bb34:	3b01      	subs	r3, #1
 800bb36:	b29a      	uxth	r2, r3
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800bb3c:	2300      	movs	r3, #0
 800bb3e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	689b      	ldr	r3, [r3, #8]
 800bb46:	f003 0301 	and.w	r3, r3, #1
 800bb4a:	2b01      	cmp	r3, #1
 800bb4c:	d148      	bne.n	800bbe0 <HAL_SPI_TransmitReceive+0x3aa>
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800bb54:	b29b      	uxth	r3, r3
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d042      	beq.n	800bbe0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800bb60:	b29b      	uxth	r3, r3
 800bb62:	2b01      	cmp	r3, #1
 800bb64:	d923      	bls.n	800bbae <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	68da      	ldr	r2, [r3, #12]
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb70:	b292      	uxth	r2, r2
 800bb72:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb78:	1c9a      	adds	r2, r3, #2
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800bb84:	b29b      	uxth	r3, r3
 800bb86:	3b02      	subs	r3, #2
 800bb88:	b29a      	uxth	r2, r3
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800bb96:	b29b      	uxth	r3, r3
 800bb98:	2b01      	cmp	r3, #1
 800bb9a:	d81f      	bhi.n	800bbdc <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	685a      	ldr	r2, [r3, #4]
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800bbaa:	605a      	str	r2, [r3, #4]
 800bbac:	e016      	b.n	800bbdc <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	f103 020c 	add.w	r2, r3, #12
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbba:	7812      	ldrb	r2, [r2, #0]
 800bbbc:	b2d2      	uxtb	r2, r2
 800bbbe:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbc4:	1c5a      	adds	r2, r3, #1
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800bbd0:	b29b      	uxth	r3, r3
 800bbd2:	3b01      	subs	r3, #1
 800bbd4:	b29a      	uxth	r2, r3
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800bbdc:	2301      	movs	r3, #1
 800bbde:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800bbe0:	f7fb f974 	bl	8006ecc <HAL_GetTick>
 800bbe4:	4602      	mov	r2, r0
 800bbe6:	69fb      	ldr	r3, [r7, #28]
 800bbe8:	1ad3      	subs	r3, r2, r3
 800bbea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bbec:	429a      	cmp	r2, r3
 800bbee:	d803      	bhi.n	800bbf8 <HAL_SPI_TransmitReceive+0x3c2>
 800bbf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbf2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bbf6:	d102      	bne.n	800bbfe <HAL_SPI_TransmitReceive+0x3c8>
 800bbf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d103      	bne.n	800bc06 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800bbfe:	2303      	movs	r3, #3
 800bc00:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800bc04:	e01c      	b.n	800bc40 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bc0a:	b29b      	uxth	r3, r3
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	f47f af5b 	bne.w	800bac8 <HAL_SPI_TransmitReceive+0x292>
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800bc18:	b29b      	uxth	r3, r3
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	f47f af54 	bne.w	800bac8 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800bc20:	69fa      	ldr	r2, [r7, #28]
 800bc22:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bc24:	68f8      	ldr	r0, [r7, #12]
 800bc26:	f000 fe89 	bl	800c93c <SPI_EndRxTxTransaction>
 800bc2a:	4603      	mov	r3, r0
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d006      	beq.n	800bc3e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800bc30:	2301      	movs	r3, #1
 800bc32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	2220      	movs	r2, #32
 800bc3a:	661a      	str	r2, [r3, #96]	; 0x60
 800bc3c:	e000      	b.n	800bc40 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800bc3e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	2201      	movs	r2, #1
 800bc44:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	2200      	movs	r2, #0
 800bc4c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800bc50:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800bc54:	4618      	mov	r0, r3
 800bc56:	3728      	adds	r7, #40	; 0x28
 800bc58:	46bd      	mov	sp, r7
 800bc5a:	bd80      	pop	{r7, pc}

0800bc5c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800bc5c:	b580      	push	{r7, lr}
 800bc5e:	b086      	sub	sp, #24
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	60f8      	str	r0, [r7, #12]
 800bc64:	60b9      	str	r1, [r7, #8]
 800bc66:	4613      	mov	r3, r2
 800bc68:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800bc74:	2b01      	cmp	r3, #1
 800bc76:	d101      	bne.n	800bc7c <HAL_SPI_Transmit_DMA+0x20>
 800bc78:	2302      	movs	r3, #2
 800bc7a:	e0d8      	b.n	800be2e <HAL_SPI_Transmit_DMA+0x1d2>
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	2201      	movs	r2, #1
 800bc80:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800bc8a:	b2db      	uxtb	r3, r3
 800bc8c:	2b01      	cmp	r3, #1
 800bc8e:	d002      	beq.n	800bc96 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800bc90:	2302      	movs	r3, #2
 800bc92:	75fb      	strb	r3, [r7, #23]
    goto error;
 800bc94:	e0c6      	b.n	800be24 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 800bc96:	68bb      	ldr	r3, [r7, #8]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d002      	beq.n	800bca2 <HAL_SPI_Transmit_DMA+0x46>
 800bc9c:	88fb      	ldrh	r3, [r7, #6]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d102      	bne.n	800bca8 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800bca2:	2301      	movs	r3, #1
 800bca4:	75fb      	strb	r3, [r7, #23]
    goto error;
 800bca6:	e0bd      	b.n	800be24 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	2203      	movs	r2, #3
 800bcac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	2200      	movs	r2, #0
 800bcb4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	68ba      	ldr	r2, [r7, #8]
 800bcba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	88fa      	ldrh	r2, [r7, #6]
 800bcc0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	88fa      	ldrh	r2, [r7, #6]
 800bcc6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	2200      	movs	r2, #0
 800bccc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	2200      	movs	r2, #0
 800bcd2:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	2200      	movs	r2, #0
 800bcd8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	2200      	movs	r2, #0
 800bcde:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	2200      	movs	r2, #0
 800bce6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	689b      	ldr	r3, [r3, #8]
 800bcee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bcf2:	d10f      	bne.n	800bd14 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	681a      	ldr	r2, [r3, #0]
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bd02:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	681a      	ldr	r2, [r3, #0]
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bd12:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd18:	4a47      	ldr	r2, [pc, #284]	; (800be38 <HAL_SPI_Transmit_DMA+0x1dc>)
 800bd1a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd20:	4a46      	ldr	r2, [pc, #280]	; (800be3c <HAL_SPI_Transmit_DMA+0x1e0>)
 800bd22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd28:	4a45      	ldr	r2, [pc, #276]	; (800be40 <HAL_SPI_Transmit_DMA+0x1e4>)
 800bd2a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd30:	2200      	movs	r2, #0
 800bd32:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	685a      	ldr	r2, [r3, #4]
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800bd42:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	68db      	ldr	r3, [r3, #12]
 800bd48:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bd4c:	d82d      	bhi.n	800bdaa <HAL_SPI_Transmit_DMA+0x14e>
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd52:	699b      	ldr	r3, [r3, #24]
 800bd54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bd58:	d127      	bne.n	800bdaa <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bd5e:	b29b      	uxth	r3, r3
 800bd60:	f003 0301 	and.w	r3, r3, #1
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d10f      	bne.n	800bd88 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	685a      	ldr	r2, [r3, #4]
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800bd76:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bd7c:	b29b      	uxth	r3, r3
 800bd7e:	085b      	lsrs	r3, r3, #1
 800bd80:	b29a      	uxth	r2, r3
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	87da      	strh	r2, [r3, #62]	; 0x3e
 800bd86:	e010      	b.n	800bdaa <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	685a      	ldr	r2, [r3, #4]
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bd96:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bd9c:	b29b      	uxth	r3, r3
 800bd9e:	085b      	lsrs	r3, r3, #1
 800bda0:	b29b      	uxth	r3, r3
 800bda2:	3301      	adds	r3, #1
 800bda4:	b29a      	uxth	r2, r3
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdb2:	4619      	mov	r1, r3
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	330c      	adds	r3, #12
 800bdba:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bdc0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800bdc2:	f7fb facf 	bl	8007364 <HAL_DMA_Start_IT>
 800bdc6:	4603      	mov	r3, r0
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d00c      	beq.n	800bde6 <HAL_SPI_Transmit_DMA+0x18a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bdd0:	f043 0210 	orr.w	r2, r3, #16
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800bdd8:	2301      	movs	r3, #1
 800bdda:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	2201      	movs	r2, #1
 800bde0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800bde4:	e01e      	b.n	800be24 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bdf0:	2b40      	cmp	r3, #64	; 0x40
 800bdf2:	d007      	beq.n	800be04 <HAL_SPI_Transmit_DMA+0x1a8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	681a      	ldr	r2, [r3, #0]
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800be02:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	685a      	ldr	r2, [r3, #4]
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	f042 0220 	orr.w	r2, r2, #32
 800be12:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	685a      	ldr	r2, [r3, #4]
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	f042 0202 	orr.w	r2, r2, #2
 800be22:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	2200      	movs	r2, #0
 800be28:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800be2c:	7dfb      	ldrb	r3, [r7, #23]
}
 800be2e:	4618      	mov	r0, r3
 800be30:	3718      	adds	r7, #24
 800be32:	46bd      	mov	sp, r7
 800be34:	bd80      	pop	{r7, pc}
 800be36:	bf00      	nop
 800be38:	0800c593 	.word	0x0800c593
 800be3c:	0800c3b5 	.word	0x0800c3b5
 800be40:	0800c5e7 	.word	0x0800c5e7

0800be44 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800be44:	b580      	push	{r7, lr}
 800be46:	b086      	sub	sp, #24
 800be48:	af00      	add	r7, sp, #0
 800be4a:	60f8      	str	r0, [r7, #12]
 800be4c:	60b9      	str	r1, [r7, #8]
 800be4e:	607a      	str	r2, [r7, #4]
 800be50:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800be52:	2300      	movs	r3, #0
 800be54:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800be5c:	2b01      	cmp	r3, #1
 800be5e:	d101      	bne.n	800be64 <HAL_SPI_TransmitReceive_DMA+0x20>
 800be60:	2302      	movs	r3, #2
 800be62:	e16c      	b.n	800c13e <HAL_SPI_TransmitReceive_DMA+0x2fa>
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	2201      	movs	r2, #1
 800be68:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800be72:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	685b      	ldr	r3, [r3, #4]
 800be78:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800be7a:	7dbb      	ldrb	r3, [r7, #22]
 800be7c:	2b01      	cmp	r3, #1
 800be7e:	d00d      	beq.n	800be9c <HAL_SPI_TransmitReceive_DMA+0x58>
 800be80:	693b      	ldr	r3, [r7, #16]
 800be82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800be86:	d106      	bne.n	800be96 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	689b      	ldr	r3, [r3, #8]
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d102      	bne.n	800be96 <HAL_SPI_TransmitReceive_DMA+0x52>
 800be90:	7dbb      	ldrb	r3, [r7, #22]
 800be92:	2b04      	cmp	r3, #4
 800be94:	d002      	beq.n	800be9c <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800be96:	2302      	movs	r3, #2
 800be98:	75fb      	strb	r3, [r7, #23]
    goto error;
 800be9a:	e14b      	b.n	800c134 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800be9c:	68bb      	ldr	r3, [r7, #8]
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d005      	beq.n	800beae <HAL_SPI_TransmitReceive_DMA+0x6a>
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d002      	beq.n	800beae <HAL_SPI_TransmitReceive_DMA+0x6a>
 800bea8:	887b      	ldrh	r3, [r7, #2]
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d102      	bne.n	800beb4 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800beae:	2301      	movs	r3, #1
 800beb0:	75fb      	strb	r3, [r7, #23]
    goto error;
 800beb2:	e13f      	b.n	800c134 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800beba:	b2db      	uxtb	r3, r3
 800bebc:	2b04      	cmp	r3, #4
 800bebe:	d003      	beq.n	800bec8 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	2205      	movs	r2, #5
 800bec4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	2200      	movs	r2, #0
 800becc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	68ba      	ldr	r2, [r7, #8]
 800bed2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	887a      	ldrh	r2, [r7, #2]
 800bed8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	887a      	ldrh	r2, [r7, #2]
 800bede:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	687a      	ldr	r2, [r7, #4]
 800bee4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	887a      	ldrh	r2, [r7, #2]
 800beea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	887a      	ldrh	r2, [r7, #2]
 800bef2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	2200      	movs	r2, #0
 800befa:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	2200      	movs	r2, #0
 800bf00:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	685a      	ldr	r2, [r3, #4]
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 800bf10:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	68db      	ldr	r3, [r3, #12]
 800bf16:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bf1a:	d908      	bls.n	800bf2e <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	685a      	ldr	r2, [r3, #4]
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800bf2a:	605a      	str	r2, [r3, #4]
 800bf2c:	e06f      	b.n	800c00e <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	685a      	ldr	r2, [r3, #4]
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800bf3c:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf42:	699b      	ldr	r3, [r3, #24]
 800bf44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bf48:	d126      	bne.n	800bf98 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800bf4e:	f003 0301 	and.w	r3, r3, #1
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d10f      	bne.n	800bf76 <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	685a      	ldr	r2, [r3, #4]
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800bf64:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bf6a:	b29b      	uxth	r3, r3
 800bf6c:	085b      	lsrs	r3, r3, #1
 800bf6e:	b29a      	uxth	r2, r3
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	87da      	strh	r2, [r3, #62]	; 0x3e
 800bf74:	e010      	b.n	800bf98 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	685a      	ldr	r2, [r3, #4]
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bf84:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bf8a:	b29b      	uxth	r3, r3
 800bf8c:	085b      	lsrs	r3, r3, #1
 800bf8e:	b29b      	uxth	r3, r3
 800bf90:	3301      	adds	r3, #1
 800bf92:	b29a      	uxth	r2, r3
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf9c:	699b      	ldr	r3, [r3, #24]
 800bf9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bfa2:	d134      	bne.n	800c00e <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	685a      	ldr	r2, [r3, #4]
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800bfb2:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800bfba:	b29b      	uxth	r3, r3
 800bfbc:	f003 0301 	and.w	r3, r3, #1
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d111      	bne.n	800bfe8 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	685a      	ldr	r2, [r3, #4]
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bfd2:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800bfda:	b29b      	uxth	r3, r3
 800bfdc:	085b      	lsrs	r3, r3, #1
 800bfde:	b29a      	uxth	r2, r3
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800bfe6:	e012      	b.n	800c00e <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	685a      	ldr	r2, [r3, #4]
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bff6:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800bffe:	b29b      	uxth	r3, r3
 800c000:	085b      	lsrs	r3, r3, #1
 800c002:	b29b      	uxth	r3, r3
 800c004:	3301      	adds	r3, #1
 800c006:	b29a      	uxth	r2, r3
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c014:	b2db      	uxtb	r3, r3
 800c016:	2b04      	cmp	r3, #4
 800c018:	d108      	bne.n	800c02c <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c01e:	4a4a      	ldr	r2, [pc, #296]	; (800c148 <HAL_SPI_TransmitReceive_DMA+0x304>)
 800c020:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c026:	4a49      	ldr	r2, [pc, #292]	; (800c14c <HAL_SPI_TransmitReceive_DMA+0x308>)
 800c028:	62da      	str	r2, [r3, #44]	; 0x2c
 800c02a:	e007      	b.n	800c03c <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c030:	4a47      	ldr	r2, [pc, #284]	; (800c150 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 800c032:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c038:	4a46      	ldr	r2, [pc, #280]	; (800c154 <HAL_SPI_TransmitReceive_DMA+0x310>)
 800c03a:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c040:	4a45      	ldr	r2, [pc, #276]	; (800c158 <HAL_SPI_TransmitReceive_DMA+0x314>)
 800c042:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c048:	2200      	movs	r2, #0
 800c04a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	330c      	adds	r3, #12
 800c056:	4619      	mov	r1, r3
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c05c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c064:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800c066:	f7fb f97d 	bl	8007364 <HAL_DMA_Start_IT>
 800c06a:	4603      	mov	r3, r0
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d00c      	beq.n	800c08a <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c074:	f043 0210 	orr.w	r2, r3, #16
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800c07c:	2301      	movs	r3, #1
 800c07e:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	2201      	movs	r2, #1
 800c084:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800c088:	e054      	b.n	800c134 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	685a      	ldr	r2, [r3, #4]
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	f042 0201 	orr.w	r2, r2, #1
 800c098:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c09e:	2200      	movs	r2, #0
 800c0a0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c0a6:	2200      	movs	r2, #0
 800c0a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c0ae:	2200      	movs	r2, #0
 800c0b0:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c0b6:	2200      	movs	r2, #0
 800c0b8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0c2:	4619      	mov	r1, r3
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	330c      	adds	r3, #12
 800c0ca:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c0d0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800c0d2:	f7fb f947 	bl	8007364 <HAL_DMA_Start_IT>
 800c0d6:	4603      	mov	r3, r0
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d00c      	beq.n	800c0f6 <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c0e0:	f043 0210 	orr.w	r2, r3, #16
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800c0e8:	2301      	movs	r3, #1
 800c0ea:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	2201      	movs	r2, #1
 800c0f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800c0f4:	e01e      	b.n	800c134 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c100:	2b40      	cmp	r3, #64	; 0x40
 800c102:	d007      	beq.n	800c114 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	681a      	ldr	r2, [r3, #0]
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c112:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	685a      	ldr	r2, [r3, #4]
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	f042 0220 	orr.w	r2, r2, #32
 800c122:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	685a      	ldr	r2, [r3, #4]
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	f042 0202 	orr.w	r2, r2, #2
 800c132:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	2200      	movs	r2, #0
 800c138:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800c13c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c13e:	4618      	mov	r0, r3
 800c140:	3718      	adds	r7, #24
 800c142:	46bd      	mov	sp, r7
 800c144:	bd80      	pop	{r7, pc}
 800c146:	bf00      	nop
 800c148:	0800c5af 	.word	0x0800c5af
 800c14c:	0800c45b 	.word	0x0800c45b
 800c150:	0800c5cb 	.word	0x0800c5cb
 800c154:	0800c503 	.word	0x0800c503
 800c158:	0800c5e7 	.word	0x0800c5e7

0800c15c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800c15c:	b580      	push	{r7, lr}
 800c15e:	b088      	sub	sp, #32
 800c160:	af00      	add	r7, sp, #0
 800c162:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	685b      	ldr	r3, [r3, #4]
 800c16a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	689b      	ldr	r3, [r3, #8]
 800c172:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800c174:	69bb      	ldr	r3, [r7, #24]
 800c176:	099b      	lsrs	r3, r3, #6
 800c178:	f003 0301 	and.w	r3, r3, #1
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d10f      	bne.n	800c1a0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800c180:	69bb      	ldr	r3, [r7, #24]
 800c182:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800c186:	2b00      	cmp	r3, #0
 800c188:	d00a      	beq.n	800c1a0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800c18a:	69fb      	ldr	r3, [r7, #28]
 800c18c:	099b      	lsrs	r3, r3, #6
 800c18e:	f003 0301 	and.w	r3, r3, #1
 800c192:	2b00      	cmp	r3, #0
 800c194:	d004      	beq.n	800c1a0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c19a:	6878      	ldr	r0, [r7, #4]
 800c19c:	4798      	blx	r3
    return;
 800c19e:	e0d7      	b.n	800c350 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800c1a0:	69bb      	ldr	r3, [r7, #24]
 800c1a2:	085b      	lsrs	r3, r3, #1
 800c1a4:	f003 0301 	and.w	r3, r3, #1
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d00a      	beq.n	800c1c2 <HAL_SPI_IRQHandler+0x66>
 800c1ac:	69fb      	ldr	r3, [r7, #28]
 800c1ae:	09db      	lsrs	r3, r3, #7
 800c1b0:	f003 0301 	and.w	r3, r3, #1
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d004      	beq.n	800c1c2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c1bc:	6878      	ldr	r0, [r7, #4]
 800c1be:	4798      	blx	r3
    return;
 800c1c0:	e0c6      	b.n	800c350 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800c1c2:	69bb      	ldr	r3, [r7, #24]
 800c1c4:	095b      	lsrs	r3, r3, #5
 800c1c6:	f003 0301 	and.w	r3, r3, #1
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d10c      	bne.n	800c1e8 <HAL_SPI_IRQHandler+0x8c>
 800c1ce:	69bb      	ldr	r3, [r7, #24]
 800c1d0:	099b      	lsrs	r3, r3, #6
 800c1d2:	f003 0301 	and.w	r3, r3, #1
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d106      	bne.n	800c1e8 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800c1da:	69bb      	ldr	r3, [r7, #24]
 800c1dc:	0a1b      	lsrs	r3, r3, #8
 800c1de:	f003 0301 	and.w	r3, r3, #1
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	f000 80b4 	beq.w	800c350 <HAL_SPI_IRQHandler+0x1f4>
 800c1e8:	69fb      	ldr	r3, [r7, #28]
 800c1ea:	095b      	lsrs	r3, r3, #5
 800c1ec:	f003 0301 	and.w	r3, r3, #1
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	f000 80ad 	beq.w	800c350 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800c1f6:	69bb      	ldr	r3, [r7, #24]
 800c1f8:	099b      	lsrs	r3, r3, #6
 800c1fa:	f003 0301 	and.w	r3, r3, #1
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d023      	beq.n	800c24a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c208:	b2db      	uxtb	r3, r3
 800c20a:	2b03      	cmp	r3, #3
 800c20c:	d011      	beq.n	800c232 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c212:	f043 0204 	orr.w	r2, r3, #4
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c21a:	2300      	movs	r3, #0
 800c21c:	617b      	str	r3, [r7, #20]
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	68db      	ldr	r3, [r3, #12]
 800c224:	617b      	str	r3, [r7, #20]
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	689b      	ldr	r3, [r3, #8]
 800c22c:	617b      	str	r3, [r7, #20]
 800c22e:	697b      	ldr	r3, [r7, #20]
 800c230:	e00b      	b.n	800c24a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c232:	2300      	movs	r3, #0
 800c234:	613b      	str	r3, [r7, #16]
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	68db      	ldr	r3, [r3, #12]
 800c23c:	613b      	str	r3, [r7, #16]
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	689b      	ldr	r3, [r3, #8]
 800c244:	613b      	str	r3, [r7, #16]
 800c246:	693b      	ldr	r3, [r7, #16]
        return;
 800c248:	e082      	b.n	800c350 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800c24a:	69bb      	ldr	r3, [r7, #24]
 800c24c:	095b      	lsrs	r3, r3, #5
 800c24e:	f003 0301 	and.w	r3, r3, #1
 800c252:	2b00      	cmp	r3, #0
 800c254:	d014      	beq.n	800c280 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c25a:	f043 0201 	orr.w	r2, r3, #1
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c262:	2300      	movs	r3, #0
 800c264:	60fb      	str	r3, [r7, #12]
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	689b      	ldr	r3, [r3, #8]
 800c26c:	60fb      	str	r3, [r7, #12]
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	681a      	ldr	r2, [r3, #0]
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c27c:	601a      	str	r2, [r3, #0]
 800c27e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800c280:	69bb      	ldr	r3, [r7, #24]
 800c282:	0a1b      	lsrs	r3, r3, #8
 800c284:	f003 0301 	and.w	r3, r3, #1
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d00c      	beq.n	800c2a6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c290:	f043 0208 	orr.w	r2, r3, #8
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c298:	2300      	movs	r3, #0
 800c29a:	60bb      	str	r3, [r7, #8]
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	689b      	ldr	r3, [r3, #8]
 800c2a2:	60bb      	str	r3, [r7, #8]
 800c2a4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d04f      	beq.n	800c34e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	685a      	ldr	r2, [r3, #4]
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c2bc:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	2201      	movs	r2, #1
 800c2c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800c2c6:	69fb      	ldr	r3, [r7, #28]
 800c2c8:	f003 0302 	and.w	r3, r3, #2
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d104      	bne.n	800c2da <HAL_SPI_IRQHandler+0x17e>
 800c2d0:	69fb      	ldr	r3, [r7, #28]
 800c2d2:	f003 0301 	and.w	r3, r3, #1
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d034      	beq.n	800c344 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	685a      	ldr	r2, [r3, #4]
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	f022 0203 	bic.w	r2, r2, #3
 800c2e8:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d011      	beq.n	800c316 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c2f6:	4a18      	ldr	r2, [pc, #96]	; (800c358 <HAL_SPI_IRQHandler+0x1fc>)
 800c2f8:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c2fe:	4618      	mov	r0, r3
 800c300:	f7fb f8ce 	bl	80074a0 <HAL_DMA_Abort_IT>
 800c304:	4603      	mov	r3, r0
 800c306:	2b00      	cmp	r3, #0
 800c308:	d005      	beq.n	800c316 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c30e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d016      	beq.n	800c34c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c322:	4a0d      	ldr	r2, [pc, #52]	; (800c358 <HAL_SPI_IRQHandler+0x1fc>)
 800c324:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c32a:	4618      	mov	r0, r3
 800c32c:	f7fb f8b8 	bl	80074a0 <HAL_DMA_Abort_IT>
 800c330:	4603      	mov	r3, r0
 800c332:	2b00      	cmp	r3, #0
 800c334:	d00a      	beq.n	800c34c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c33a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800c342:	e003      	b.n	800c34c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800c344:	6878      	ldr	r0, [r7, #4]
 800c346:	f7f8 fdf5 	bl	8004f34 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800c34a:	e000      	b.n	800c34e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800c34c:	bf00      	nop
    return;
 800c34e:	bf00      	nop
  }
}
 800c350:	3720      	adds	r7, #32
 800c352:	46bd      	mov	sp, r7
 800c354:	bd80      	pop	{r7, pc}
 800c356:	bf00      	nop
 800c358:	0800c627 	.word	0x0800c627

0800c35c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800c35c:	b480      	push	{r7}
 800c35e:	b083      	sub	sp, #12
 800c360:	af00      	add	r7, sp, #0
 800c362:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800c364:	bf00      	nop
 800c366:	370c      	adds	r7, #12
 800c368:	46bd      	mov	sp, r7
 800c36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c36e:	4770      	bx	lr

0800c370 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800c370:	b480      	push	{r7}
 800c372:	b083      	sub	sp, #12
 800c374:	af00      	add	r7, sp, #0
 800c376:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800c378:	bf00      	nop
 800c37a:	370c      	adds	r7, #12
 800c37c:	46bd      	mov	sp, r7
 800c37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c382:	4770      	bx	lr

0800c384 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800c384:	b480      	push	{r7}
 800c386:	b083      	sub	sp, #12
 800c388:	af00      	add	r7, sp, #0
 800c38a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800c38c:	bf00      	nop
 800c38e:	370c      	adds	r7, #12
 800c390:	46bd      	mov	sp, r7
 800c392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c396:	4770      	bx	lr

0800c398 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800c398:	b480      	push	{r7}
 800c39a:	b083      	sub	sp, #12
 800c39c:	af00      	add	r7, sp, #0
 800c39e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c3a6:	b2db      	uxtb	r3, r3
}
 800c3a8:	4618      	mov	r0, r3
 800c3aa:	370c      	adds	r7, #12
 800c3ac:	46bd      	mov	sp, r7
 800c3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b2:	4770      	bx	lr

0800c3b4 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c3b4:	b580      	push	{r7, lr}
 800c3b6:	b086      	sub	sp, #24
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3c0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c3c2:	f7fa fd83 	bl	8006ecc <HAL_GetTick>
 800c3c6:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	f003 0320 	and.w	r3, r3, #32
 800c3d2:	2b20      	cmp	r3, #32
 800c3d4:	d03b      	beq.n	800c44e <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800c3d6:	697b      	ldr	r3, [r7, #20]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	685a      	ldr	r2, [r3, #4]
 800c3dc:	697b      	ldr	r3, [r7, #20]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	f022 0220 	bic.w	r2, r2, #32
 800c3e4:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800c3e6:	697b      	ldr	r3, [r7, #20]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	685a      	ldr	r2, [r3, #4]
 800c3ec:	697b      	ldr	r3, [r7, #20]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	f022 0202 	bic.w	r2, r2, #2
 800c3f4:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800c3f6:	693a      	ldr	r2, [r7, #16]
 800c3f8:	2164      	movs	r1, #100	; 0x64
 800c3fa:	6978      	ldr	r0, [r7, #20]
 800c3fc:	f000 fa9e 	bl	800c93c <SPI_EndRxTxTransaction>
 800c400:	4603      	mov	r3, r0
 800c402:	2b00      	cmp	r3, #0
 800c404:	d005      	beq.n	800c412 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c406:	697b      	ldr	r3, [r7, #20]
 800c408:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c40a:	f043 0220 	orr.w	r2, r3, #32
 800c40e:	697b      	ldr	r3, [r7, #20]
 800c410:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c412:	697b      	ldr	r3, [r7, #20]
 800c414:	689b      	ldr	r3, [r3, #8]
 800c416:	2b00      	cmp	r3, #0
 800c418:	d10a      	bne.n	800c430 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c41a:	2300      	movs	r3, #0
 800c41c:	60fb      	str	r3, [r7, #12]
 800c41e:	697b      	ldr	r3, [r7, #20]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	68db      	ldr	r3, [r3, #12]
 800c424:	60fb      	str	r3, [r7, #12]
 800c426:	697b      	ldr	r3, [r7, #20]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	689b      	ldr	r3, [r3, #8]
 800c42c:	60fb      	str	r3, [r7, #12]
 800c42e:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800c430:	697b      	ldr	r3, [r7, #20]
 800c432:	2200      	movs	r2, #0
 800c434:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800c436:	697b      	ldr	r3, [r7, #20]
 800c438:	2201      	movs	r2, #1
 800c43a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c43e:	697b      	ldr	r3, [r7, #20]
 800c440:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c442:	2b00      	cmp	r3, #0
 800c444:	d003      	beq.n	800c44e <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800c446:	6978      	ldr	r0, [r7, #20]
 800c448:	f7f8 fd74 	bl	8004f34 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800c44c:	e002      	b.n	800c454 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800c44e:	6978      	ldr	r0, [r7, #20]
 800c450:	f7f8 fd59 	bl	8004f06 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c454:	3718      	adds	r7, #24
 800c456:	46bd      	mov	sp, r7
 800c458:	bd80      	pop	{r7, pc}

0800c45a <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c45a:	b580      	push	{r7, lr}
 800c45c:	b084      	sub	sp, #16
 800c45e:	af00      	add	r7, sp, #0
 800c460:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c466:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c468:	f7fa fd30 	bl	8006ecc <HAL_GetTick>
 800c46c:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	f003 0320 	and.w	r3, r3, #32
 800c478:	2b20      	cmp	r3, #32
 800c47a:	d03c      	beq.n	800c4f6 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	685a      	ldr	r2, [r3, #4]
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	f022 0220 	bic.w	r2, r2, #32
 800c48a:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	689b      	ldr	r3, [r3, #8]
 800c490:	2b00      	cmp	r3, #0
 800c492:	d10d      	bne.n	800c4b0 <SPI_DMAReceiveCplt+0x56>
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	685b      	ldr	r3, [r3, #4]
 800c498:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c49c:	d108      	bne.n	800c4b0 <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	685a      	ldr	r2, [r3, #4]
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	f022 0203 	bic.w	r2, r2, #3
 800c4ac:	605a      	str	r2, [r3, #4]
 800c4ae:	e007      	b.n	800c4c0 <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	685a      	ldr	r2, [r3, #4]
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	f022 0201 	bic.w	r2, r2, #1
 800c4be:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800c4c0:	68ba      	ldr	r2, [r7, #8]
 800c4c2:	2164      	movs	r1, #100	; 0x64
 800c4c4:	68f8      	ldr	r0, [r7, #12]
 800c4c6:	f000 f9e1 	bl	800c88c <SPI_EndRxTransaction>
 800c4ca:	4603      	mov	r3, r0
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d002      	beq.n	800c4d6 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	2220      	movs	r2, #32
 800c4d4:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	2200      	movs	r2, #0
 800c4da:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	2201      	movs	r2, #1
 800c4e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d003      	beq.n	800c4f6 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800c4ee:	68f8      	ldr	r0, [r7, #12]
 800c4f0:	f7f8 fd20 	bl	8004f34 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800c4f4:	e002      	b.n	800c4fc <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800c4f6:	68f8      	ldr	r0, [r7, #12]
 800c4f8:	f7f8 fcfa 	bl	8004ef0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c4fc:	3710      	adds	r7, #16
 800c4fe:	46bd      	mov	sp, r7
 800c500:	bd80      	pop	{r7, pc}

0800c502 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c502:	b580      	push	{r7, lr}
 800c504:	b084      	sub	sp, #16
 800c506:	af00      	add	r7, sp, #0
 800c508:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c50e:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c510:	f7fa fcdc 	bl	8006ecc <HAL_GetTick>
 800c514:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	f003 0320 	and.w	r3, r3, #32
 800c520:	2b20      	cmp	r3, #32
 800c522:	d030      	beq.n	800c586 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	685a      	ldr	r2, [r3, #4]
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	f022 0220 	bic.w	r2, r2, #32
 800c532:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800c534:	68ba      	ldr	r2, [r7, #8]
 800c536:	2164      	movs	r1, #100	; 0x64
 800c538:	68f8      	ldr	r0, [r7, #12]
 800c53a:	f000 f9ff 	bl	800c93c <SPI_EndRxTxTransaction>
 800c53e:	4603      	mov	r3, r0
 800c540:	2b00      	cmp	r3, #0
 800c542:	d005      	beq.n	800c550 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c548:	f043 0220 	orr.w	r2, r3, #32
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	685a      	ldr	r2, [r3, #4]
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	f022 0203 	bic.w	r2, r2, #3
 800c55e:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	2200      	movs	r2, #0
 800c564:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	2200      	movs	r2, #0
 800c56a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	2201      	movs	r2, #1
 800c572:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d003      	beq.n	800c586 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800c57e:	68f8      	ldr	r0, [r7, #12]
 800c580:	f7f8 fcd8 	bl	8004f34 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800c584:	e002      	b.n	800c58c <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800c586:	68f8      	ldr	r0, [r7, #12]
 800c588:	f7f8 fcc8 	bl	8004f1c <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c58c:	3710      	adds	r7, #16
 800c58e:	46bd      	mov	sp, r7
 800c590:	bd80      	pop	{r7, pc}

0800c592 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c592:	b580      	push	{r7, lr}
 800c594:	b084      	sub	sp, #16
 800c596:	af00      	add	r7, sp, #0
 800c598:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c59e:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800c5a0:	68f8      	ldr	r0, [r7, #12]
 800c5a2:	f7ff fedb 	bl	800c35c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c5a6:	bf00      	nop
 800c5a8:	3710      	adds	r7, #16
 800c5aa:	46bd      	mov	sp, r7
 800c5ac:	bd80      	pop	{r7, pc}

0800c5ae <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c5ae:	b580      	push	{r7, lr}
 800c5b0:	b084      	sub	sp, #16
 800c5b2:	af00      	add	r7, sp, #0
 800c5b4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5ba:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800c5bc:	68f8      	ldr	r0, [r7, #12]
 800c5be:	f7ff fed7 	bl	800c370 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c5c2:	bf00      	nop
 800c5c4:	3710      	adds	r7, #16
 800c5c6:	46bd      	mov	sp, r7
 800c5c8:	bd80      	pop	{r7, pc}

0800c5ca <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c5ca:	b580      	push	{r7, lr}
 800c5cc:	b084      	sub	sp, #16
 800c5ce:	af00      	add	r7, sp, #0
 800c5d0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5d6:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800c5d8:	68f8      	ldr	r0, [r7, #12]
 800c5da:	f7ff fed3 	bl	800c384 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c5de:	bf00      	nop
 800c5e0:	3710      	adds	r7, #16
 800c5e2:	46bd      	mov	sp, r7
 800c5e4:	bd80      	pop	{r7, pc}

0800c5e6 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800c5e6:	b580      	push	{r7, lr}
 800c5e8:	b084      	sub	sp, #16
 800c5ea:	af00      	add	r7, sp, #0
 800c5ec:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5f2:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	685a      	ldr	r2, [r3, #4]
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	f022 0203 	bic.w	r2, r2, #3
 800c602:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c608:	f043 0210 	orr.w	r2, r3, #16
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	2201      	movs	r2, #1
 800c614:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800c618:	68f8      	ldr	r0, [r7, #12]
 800c61a:	f7f8 fc8b 	bl	8004f34 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c61e:	bf00      	nop
 800c620:	3710      	adds	r7, #16
 800c622:	46bd      	mov	sp, r7
 800c624:	bd80      	pop	{r7, pc}

0800c626 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c626:	b580      	push	{r7, lr}
 800c628:	b084      	sub	sp, #16
 800c62a:	af00      	add	r7, sp, #0
 800c62c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c632:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	2200      	movs	r2, #0
 800c638:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	2200      	movs	r2, #0
 800c640:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800c642:	68f8      	ldr	r0, [r7, #12]
 800c644:	f7f8 fc76 	bl	8004f34 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c648:	bf00      	nop
 800c64a:	3710      	adds	r7, #16
 800c64c:	46bd      	mov	sp, r7
 800c64e:	bd80      	pop	{r7, pc}

0800c650 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c650:	b580      	push	{r7, lr}
 800c652:	b088      	sub	sp, #32
 800c654:	af00      	add	r7, sp, #0
 800c656:	60f8      	str	r0, [r7, #12]
 800c658:	60b9      	str	r1, [r7, #8]
 800c65a:	603b      	str	r3, [r7, #0]
 800c65c:	4613      	mov	r3, r2
 800c65e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800c660:	f7fa fc34 	bl	8006ecc <HAL_GetTick>
 800c664:	4602      	mov	r2, r0
 800c666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c668:	1a9b      	subs	r3, r3, r2
 800c66a:	683a      	ldr	r2, [r7, #0]
 800c66c:	4413      	add	r3, r2
 800c66e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800c670:	f7fa fc2c 	bl	8006ecc <HAL_GetTick>
 800c674:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800c676:	4b39      	ldr	r3, [pc, #228]	; (800c75c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	015b      	lsls	r3, r3, #5
 800c67c:	0d1b      	lsrs	r3, r3, #20
 800c67e:	69fa      	ldr	r2, [r7, #28]
 800c680:	fb02 f303 	mul.w	r3, r2, r3
 800c684:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c686:	e054      	b.n	800c732 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800c688:	683b      	ldr	r3, [r7, #0]
 800c68a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c68e:	d050      	beq.n	800c732 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800c690:	f7fa fc1c 	bl	8006ecc <HAL_GetTick>
 800c694:	4602      	mov	r2, r0
 800c696:	69bb      	ldr	r3, [r7, #24]
 800c698:	1ad3      	subs	r3, r2, r3
 800c69a:	69fa      	ldr	r2, [r7, #28]
 800c69c:	429a      	cmp	r2, r3
 800c69e:	d902      	bls.n	800c6a6 <SPI_WaitFlagStateUntilTimeout+0x56>
 800c6a0:	69fb      	ldr	r3, [r7, #28]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d13d      	bne.n	800c722 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	685a      	ldr	r2, [r3, #4]
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c6b4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	685b      	ldr	r3, [r3, #4]
 800c6ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c6be:	d111      	bne.n	800c6e4 <SPI_WaitFlagStateUntilTimeout+0x94>
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	689b      	ldr	r3, [r3, #8]
 800c6c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c6c8:	d004      	beq.n	800c6d4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	689b      	ldr	r3, [r3, #8]
 800c6ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c6d2:	d107      	bne.n	800c6e4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	681a      	ldr	r2, [r3, #0]
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c6e2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c6ec:	d10f      	bne.n	800c70e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	681a      	ldr	r2, [r3, #0]
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c6fc:	601a      	str	r2, [r3, #0]
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	681a      	ldr	r2, [r3, #0]
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c70c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	2201      	movs	r2, #1
 800c712:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	2200      	movs	r2, #0
 800c71a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800c71e:	2303      	movs	r3, #3
 800c720:	e017      	b.n	800c752 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800c722:	697b      	ldr	r3, [r7, #20]
 800c724:	2b00      	cmp	r3, #0
 800c726:	d101      	bne.n	800c72c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800c728:	2300      	movs	r3, #0
 800c72a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800c72c:	697b      	ldr	r3, [r7, #20]
 800c72e:	3b01      	subs	r3, #1
 800c730:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	689a      	ldr	r2, [r3, #8]
 800c738:	68bb      	ldr	r3, [r7, #8]
 800c73a:	4013      	ands	r3, r2
 800c73c:	68ba      	ldr	r2, [r7, #8]
 800c73e:	429a      	cmp	r2, r3
 800c740:	bf0c      	ite	eq
 800c742:	2301      	moveq	r3, #1
 800c744:	2300      	movne	r3, #0
 800c746:	b2db      	uxtb	r3, r3
 800c748:	461a      	mov	r2, r3
 800c74a:	79fb      	ldrb	r3, [r7, #7]
 800c74c:	429a      	cmp	r2, r3
 800c74e:	d19b      	bne.n	800c688 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800c750:	2300      	movs	r3, #0
}
 800c752:	4618      	mov	r0, r3
 800c754:	3720      	adds	r7, #32
 800c756:	46bd      	mov	sp, r7
 800c758:	bd80      	pop	{r7, pc}
 800c75a:	bf00      	nop
 800c75c:	20000214 	.word	0x20000214

0800c760 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c760:	b580      	push	{r7, lr}
 800c762:	b08a      	sub	sp, #40	; 0x28
 800c764:	af00      	add	r7, sp, #0
 800c766:	60f8      	str	r0, [r7, #12]
 800c768:	60b9      	str	r1, [r7, #8]
 800c76a:	607a      	str	r2, [r7, #4]
 800c76c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800c76e:	2300      	movs	r3, #0
 800c770:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800c772:	f7fa fbab 	bl	8006ecc <HAL_GetTick>
 800c776:	4602      	mov	r2, r0
 800c778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c77a:	1a9b      	subs	r3, r3, r2
 800c77c:	683a      	ldr	r2, [r7, #0]
 800c77e:	4413      	add	r3, r2
 800c780:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800c782:	f7fa fba3 	bl	8006ecc <HAL_GetTick>
 800c786:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	330c      	adds	r3, #12
 800c78e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800c790:	4b3d      	ldr	r3, [pc, #244]	; (800c888 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800c792:	681a      	ldr	r2, [r3, #0]
 800c794:	4613      	mov	r3, r2
 800c796:	009b      	lsls	r3, r3, #2
 800c798:	4413      	add	r3, r2
 800c79a:	00da      	lsls	r2, r3, #3
 800c79c:	1ad3      	subs	r3, r2, r3
 800c79e:	0d1b      	lsrs	r3, r3, #20
 800c7a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c7a2:	fb02 f303 	mul.w	r3, r2, r3
 800c7a6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800c7a8:	e060      	b.n	800c86c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800c7aa:	68bb      	ldr	r3, [r7, #8]
 800c7ac:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800c7b0:	d107      	bne.n	800c7c2 <SPI_WaitFifoStateUntilTimeout+0x62>
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d104      	bne.n	800c7c2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800c7b8:	69fb      	ldr	r3, [r7, #28]
 800c7ba:	781b      	ldrb	r3, [r3, #0]
 800c7bc:	b2db      	uxtb	r3, r3
 800c7be:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800c7c0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800c7c2:	683b      	ldr	r3, [r7, #0]
 800c7c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c7c8:	d050      	beq.n	800c86c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800c7ca:	f7fa fb7f 	bl	8006ecc <HAL_GetTick>
 800c7ce:	4602      	mov	r2, r0
 800c7d0:	6a3b      	ldr	r3, [r7, #32]
 800c7d2:	1ad3      	subs	r3, r2, r3
 800c7d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c7d6:	429a      	cmp	r2, r3
 800c7d8:	d902      	bls.n	800c7e0 <SPI_WaitFifoStateUntilTimeout+0x80>
 800c7da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d13d      	bne.n	800c85c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	685a      	ldr	r2, [r3, #4]
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c7ee:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	685b      	ldr	r3, [r3, #4]
 800c7f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c7f8:	d111      	bne.n	800c81e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	689b      	ldr	r3, [r3, #8]
 800c7fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c802:	d004      	beq.n	800c80e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	689b      	ldr	r3, [r3, #8]
 800c808:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c80c:	d107      	bne.n	800c81e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	681a      	ldr	r2, [r3, #0]
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c81c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c822:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c826:	d10f      	bne.n	800c848 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	681a      	ldr	r2, [r3, #0]
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c836:	601a      	str	r2, [r3, #0]
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	681a      	ldr	r2, [r3, #0]
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c846:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	2201      	movs	r2, #1
 800c84c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	2200      	movs	r2, #0
 800c854:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800c858:	2303      	movs	r3, #3
 800c85a:	e010      	b.n	800c87e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800c85c:	69bb      	ldr	r3, [r7, #24]
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d101      	bne.n	800c866 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800c862:	2300      	movs	r3, #0
 800c864:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800c866:	69bb      	ldr	r3, [r7, #24]
 800c868:	3b01      	subs	r3, #1
 800c86a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	689a      	ldr	r2, [r3, #8]
 800c872:	68bb      	ldr	r3, [r7, #8]
 800c874:	4013      	ands	r3, r2
 800c876:	687a      	ldr	r2, [r7, #4]
 800c878:	429a      	cmp	r2, r3
 800c87a:	d196      	bne.n	800c7aa <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800c87c:	2300      	movs	r3, #0
}
 800c87e:	4618      	mov	r0, r3
 800c880:	3728      	adds	r7, #40	; 0x28
 800c882:	46bd      	mov	sp, r7
 800c884:	bd80      	pop	{r7, pc}
 800c886:	bf00      	nop
 800c888:	20000214 	.word	0x20000214

0800c88c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800c88c:	b580      	push	{r7, lr}
 800c88e:	b086      	sub	sp, #24
 800c890:	af02      	add	r7, sp, #8
 800c892:	60f8      	str	r0, [r7, #12]
 800c894:	60b9      	str	r1, [r7, #8]
 800c896:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	685b      	ldr	r3, [r3, #4]
 800c89c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c8a0:	d111      	bne.n	800c8c6 <SPI_EndRxTransaction+0x3a>
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	689b      	ldr	r3, [r3, #8]
 800c8a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c8aa:	d004      	beq.n	800c8b6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	689b      	ldr	r3, [r3, #8]
 800c8b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c8b4:	d107      	bne.n	800c8c6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	681a      	ldr	r2, [r3, #0]
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c8c4:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	9300      	str	r3, [sp, #0]
 800c8ca:	68bb      	ldr	r3, [r7, #8]
 800c8cc:	2200      	movs	r2, #0
 800c8ce:	2180      	movs	r1, #128	; 0x80
 800c8d0:	68f8      	ldr	r0, [r7, #12]
 800c8d2:	f7ff febd 	bl	800c650 <SPI_WaitFlagStateUntilTimeout>
 800c8d6:	4603      	mov	r3, r0
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d007      	beq.n	800c8ec <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c8e0:	f043 0220 	orr.w	r2, r3, #32
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c8e8:	2303      	movs	r3, #3
 800c8ea:	e023      	b.n	800c934 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	685b      	ldr	r3, [r3, #4]
 800c8f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c8f4:	d11d      	bne.n	800c932 <SPI_EndRxTransaction+0xa6>
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	689b      	ldr	r3, [r3, #8]
 800c8fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c8fe:	d004      	beq.n	800c90a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	689b      	ldr	r3, [r3, #8]
 800c904:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c908:	d113      	bne.n	800c932 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	9300      	str	r3, [sp, #0]
 800c90e:	68bb      	ldr	r3, [r7, #8]
 800c910:	2200      	movs	r2, #0
 800c912:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800c916:	68f8      	ldr	r0, [r7, #12]
 800c918:	f7ff ff22 	bl	800c760 <SPI_WaitFifoStateUntilTimeout>
 800c91c:	4603      	mov	r3, r0
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d007      	beq.n	800c932 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c926:	f043 0220 	orr.w	r2, r3, #32
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800c92e:	2303      	movs	r3, #3
 800c930:	e000      	b.n	800c934 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800c932:	2300      	movs	r3, #0
}
 800c934:	4618      	mov	r0, r3
 800c936:	3710      	adds	r7, #16
 800c938:	46bd      	mov	sp, r7
 800c93a:	bd80      	pop	{r7, pc}

0800c93c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800c93c:	b580      	push	{r7, lr}
 800c93e:	b086      	sub	sp, #24
 800c940:	af02      	add	r7, sp, #8
 800c942:	60f8      	str	r0, [r7, #12]
 800c944:	60b9      	str	r1, [r7, #8]
 800c946:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	9300      	str	r3, [sp, #0]
 800c94c:	68bb      	ldr	r3, [r7, #8]
 800c94e:	2200      	movs	r2, #0
 800c950:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800c954:	68f8      	ldr	r0, [r7, #12]
 800c956:	f7ff ff03 	bl	800c760 <SPI_WaitFifoStateUntilTimeout>
 800c95a:	4603      	mov	r3, r0
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d007      	beq.n	800c970 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c964:	f043 0220 	orr.w	r2, r3, #32
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c96c:	2303      	movs	r3, #3
 800c96e:	e027      	b.n	800c9c0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	9300      	str	r3, [sp, #0]
 800c974:	68bb      	ldr	r3, [r7, #8]
 800c976:	2200      	movs	r2, #0
 800c978:	2180      	movs	r1, #128	; 0x80
 800c97a:	68f8      	ldr	r0, [r7, #12]
 800c97c:	f7ff fe68 	bl	800c650 <SPI_WaitFlagStateUntilTimeout>
 800c980:	4603      	mov	r3, r0
 800c982:	2b00      	cmp	r3, #0
 800c984:	d007      	beq.n	800c996 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c98a:	f043 0220 	orr.w	r2, r3, #32
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c992:	2303      	movs	r3, #3
 800c994:	e014      	b.n	800c9c0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	9300      	str	r3, [sp, #0]
 800c99a:	68bb      	ldr	r3, [r7, #8]
 800c99c:	2200      	movs	r2, #0
 800c99e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800c9a2:	68f8      	ldr	r0, [r7, #12]
 800c9a4:	f7ff fedc 	bl	800c760 <SPI_WaitFifoStateUntilTimeout>
 800c9a8:	4603      	mov	r3, r0
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d007      	beq.n	800c9be <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c9b2:	f043 0220 	orr.w	r2, r3, #32
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c9ba:	2303      	movs	r3, #3
 800c9bc:	e000      	b.n	800c9c0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800c9be:	2300      	movs	r3, #0
}
 800c9c0:	4618      	mov	r0, r3
 800c9c2:	3710      	adds	r7, #16
 800c9c4:	46bd      	mov	sp, r7
 800c9c6:	bd80      	pop	{r7, pc}

0800c9c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c9c8:	b580      	push	{r7, lr}
 800c9ca:	b082      	sub	sp, #8
 800c9cc:	af00      	add	r7, sp, #0
 800c9ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d101      	bne.n	800c9da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c9d6:	2301      	movs	r3, #1
 800c9d8:	e049      	b.n	800ca6e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c9e0:	b2db      	uxtb	r3, r3
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d106      	bne.n	800c9f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	2200      	movs	r2, #0
 800c9ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c9ee:	6878      	ldr	r0, [r7, #4]
 800c9f0:	f7f9 f998 	bl	8005d24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	2202      	movs	r2, #2
 800c9f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	681a      	ldr	r2, [r3, #0]
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	3304      	adds	r3, #4
 800ca04:	4619      	mov	r1, r3
 800ca06:	4610      	mov	r0, r2
 800ca08:	f000 fae6 	bl	800cfd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	2201      	movs	r2, #1
 800ca10:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	2201      	movs	r2, #1
 800ca18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	2201      	movs	r2, #1
 800ca20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	2201      	movs	r2, #1
 800ca28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	2201      	movs	r2, #1
 800ca30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	2201      	movs	r2, #1
 800ca38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	2201      	movs	r2, #1
 800ca40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	2201      	movs	r2, #1
 800ca48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	2201      	movs	r2, #1
 800ca50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	2201      	movs	r2, #1
 800ca58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	2201      	movs	r2, #1
 800ca60:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	2201      	movs	r2, #1
 800ca68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ca6c:	2300      	movs	r3, #0
}
 800ca6e:	4618      	mov	r0, r3
 800ca70:	3708      	adds	r7, #8
 800ca72:	46bd      	mov	sp, r7
 800ca74:	bd80      	pop	{r7, pc}
	...

0800ca78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ca78:	b480      	push	{r7}
 800ca7a:	b085      	sub	sp, #20
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ca86:	b2db      	uxtb	r3, r3
 800ca88:	2b01      	cmp	r3, #1
 800ca8a:	d001      	beq.n	800ca90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ca8c:	2301      	movs	r3, #1
 800ca8e:	e04f      	b.n	800cb30 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	2202      	movs	r2, #2
 800ca94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	68da      	ldr	r2, [r3, #12]
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	f042 0201 	orr.w	r2, r2, #1
 800caa6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	4a23      	ldr	r2, [pc, #140]	; (800cb3c <HAL_TIM_Base_Start_IT+0xc4>)
 800caae:	4293      	cmp	r3, r2
 800cab0:	d01d      	beq.n	800caee <HAL_TIM_Base_Start_IT+0x76>
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800caba:	d018      	beq.n	800caee <HAL_TIM_Base_Start_IT+0x76>
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	4a1f      	ldr	r2, [pc, #124]	; (800cb40 <HAL_TIM_Base_Start_IT+0xc8>)
 800cac2:	4293      	cmp	r3, r2
 800cac4:	d013      	beq.n	800caee <HAL_TIM_Base_Start_IT+0x76>
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	4a1e      	ldr	r2, [pc, #120]	; (800cb44 <HAL_TIM_Base_Start_IT+0xcc>)
 800cacc:	4293      	cmp	r3, r2
 800cace:	d00e      	beq.n	800caee <HAL_TIM_Base_Start_IT+0x76>
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	4a1c      	ldr	r2, [pc, #112]	; (800cb48 <HAL_TIM_Base_Start_IT+0xd0>)
 800cad6:	4293      	cmp	r3, r2
 800cad8:	d009      	beq.n	800caee <HAL_TIM_Base_Start_IT+0x76>
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	4a1b      	ldr	r2, [pc, #108]	; (800cb4c <HAL_TIM_Base_Start_IT+0xd4>)
 800cae0:	4293      	cmp	r3, r2
 800cae2:	d004      	beq.n	800caee <HAL_TIM_Base_Start_IT+0x76>
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	4a19      	ldr	r2, [pc, #100]	; (800cb50 <HAL_TIM_Base_Start_IT+0xd8>)
 800caea:	4293      	cmp	r3, r2
 800caec:	d115      	bne.n	800cb1a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	689a      	ldr	r2, [r3, #8]
 800caf4:	4b17      	ldr	r3, [pc, #92]	; (800cb54 <HAL_TIM_Base_Start_IT+0xdc>)
 800caf6:	4013      	ands	r3, r2
 800caf8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	2b06      	cmp	r3, #6
 800cafe:	d015      	beq.n	800cb2c <HAL_TIM_Base_Start_IT+0xb4>
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cb06:	d011      	beq.n	800cb2c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	681a      	ldr	r2, [r3, #0]
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	f042 0201 	orr.w	r2, r2, #1
 800cb16:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cb18:	e008      	b.n	800cb2c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	681a      	ldr	r2, [r3, #0]
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	f042 0201 	orr.w	r2, r2, #1
 800cb28:	601a      	str	r2, [r3, #0]
 800cb2a:	e000      	b.n	800cb2e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cb2c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800cb2e:	2300      	movs	r3, #0
}
 800cb30:	4618      	mov	r0, r3
 800cb32:	3714      	adds	r7, #20
 800cb34:	46bd      	mov	sp, r7
 800cb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb3a:	4770      	bx	lr
 800cb3c:	40012c00 	.word	0x40012c00
 800cb40:	40000400 	.word	0x40000400
 800cb44:	40000800 	.word	0x40000800
 800cb48:	40000c00 	.word	0x40000c00
 800cb4c:	40013400 	.word	0x40013400
 800cb50:	40014000 	.word	0x40014000
 800cb54:	00010007 	.word	0x00010007

0800cb58 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800cb58:	b480      	push	{r7}
 800cb5a:	b083      	sub	sp, #12
 800cb5c:	af00      	add	r7, sp, #0
 800cb5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	68da      	ldr	r2, [r3, #12]
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	f022 0201 	bic.w	r2, r2, #1
 800cb6e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	6a1a      	ldr	r2, [r3, #32]
 800cb76:	f241 1311 	movw	r3, #4369	; 0x1111
 800cb7a:	4013      	ands	r3, r2
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d10f      	bne.n	800cba0 <HAL_TIM_Base_Stop_IT+0x48>
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	6a1a      	ldr	r2, [r3, #32]
 800cb86:	f240 4344 	movw	r3, #1092	; 0x444
 800cb8a:	4013      	ands	r3, r2
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d107      	bne.n	800cba0 <HAL_TIM_Base_Stop_IT+0x48>
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	681a      	ldr	r2, [r3, #0]
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	f022 0201 	bic.w	r2, r2, #1
 800cb9e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	2201      	movs	r2, #1
 800cba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800cba8:	2300      	movs	r3, #0
}
 800cbaa:	4618      	mov	r0, r3
 800cbac:	370c      	adds	r7, #12
 800cbae:	46bd      	mov	sp, r7
 800cbb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb4:	4770      	bx	lr

0800cbb6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800cbb6:	b580      	push	{r7, lr}
 800cbb8:	b082      	sub	sp, #8
 800cbba:	af00      	add	r7, sp, #0
 800cbbc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	691b      	ldr	r3, [r3, #16]
 800cbc4:	f003 0302 	and.w	r3, r3, #2
 800cbc8:	2b02      	cmp	r3, #2
 800cbca:	d122      	bne.n	800cc12 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	68db      	ldr	r3, [r3, #12]
 800cbd2:	f003 0302 	and.w	r3, r3, #2
 800cbd6:	2b02      	cmp	r3, #2
 800cbd8:	d11b      	bne.n	800cc12 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	f06f 0202 	mvn.w	r2, #2
 800cbe2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	2201      	movs	r2, #1
 800cbe8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	699b      	ldr	r3, [r3, #24]
 800cbf0:	f003 0303 	and.w	r3, r3, #3
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d003      	beq.n	800cc00 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800cbf8:	6878      	ldr	r0, [r7, #4]
 800cbfa:	f000 f9ce 	bl	800cf9a <HAL_TIM_IC_CaptureCallback>
 800cbfe:	e005      	b.n	800cc0c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800cc00:	6878      	ldr	r0, [r7, #4]
 800cc02:	f000 f9c0 	bl	800cf86 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cc06:	6878      	ldr	r0, [r7, #4]
 800cc08:	f000 f9d1 	bl	800cfae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	2200      	movs	r2, #0
 800cc10:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	691b      	ldr	r3, [r3, #16]
 800cc18:	f003 0304 	and.w	r3, r3, #4
 800cc1c:	2b04      	cmp	r3, #4
 800cc1e:	d122      	bne.n	800cc66 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	68db      	ldr	r3, [r3, #12]
 800cc26:	f003 0304 	and.w	r3, r3, #4
 800cc2a:	2b04      	cmp	r3, #4
 800cc2c:	d11b      	bne.n	800cc66 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	f06f 0204 	mvn.w	r2, #4
 800cc36:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	2202      	movs	r2, #2
 800cc3c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	699b      	ldr	r3, [r3, #24]
 800cc44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d003      	beq.n	800cc54 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cc4c:	6878      	ldr	r0, [r7, #4]
 800cc4e:	f000 f9a4 	bl	800cf9a <HAL_TIM_IC_CaptureCallback>
 800cc52:	e005      	b.n	800cc60 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cc54:	6878      	ldr	r0, [r7, #4]
 800cc56:	f000 f996 	bl	800cf86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cc5a:	6878      	ldr	r0, [r7, #4]
 800cc5c:	f000 f9a7 	bl	800cfae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	2200      	movs	r2, #0
 800cc64:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	691b      	ldr	r3, [r3, #16]
 800cc6c:	f003 0308 	and.w	r3, r3, #8
 800cc70:	2b08      	cmp	r3, #8
 800cc72:	d122      	bne.n	800ccba <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	68db      	ldr	r3, [r3, #12]
 800cc7a:	f003 0308 	and.w	r3, r3, #8
 800cc7e:	2b08      	cmp	r3, #8
 800cc80:	d11b      	bne.n	800ccba <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	f06f 0208 	mvn.w	r2, #8
 800cc8a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	2204      	movs	r2, #4
 800cc90:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	69db      	ldr	r3, [r3, #28]
 800cc98:	f003 0303 	and.w	r3, r3, #3
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d003      	beq.n	800cca8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cca0:	6878      	ldr	r0, [r7, #4]
 800cca2:	f000 f97a 	bl	800cf9a <HAL_TIM_IC_CaptureCallback>
 800cca6:	e005      	b.n	800ccb4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cca8:	6878      	ldr	r0, [r7, #4]
 800ccaa:	f000 f96c 	bl	800cf86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ccae:	6878      	ldr	r0, [r7, #4]
 800ccb0:	f000 f97d 	bl	800cfae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	2200      	movs	r2, #0
 800ccb8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	691b      	ldr	r3, [r3, #16]
 800ccc0:	f003 0310 	and.w	r3, r3, #16
 800ccc4:	2b10      	cmp	r3, #16
 800ccc6:	d122      	bne.n	800cd0e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	68db      	ldr	r3, [r3, #12]
 800ccce:	f003 0310 	and.w	r3, r3, #16
 800ccd2:	2b10      	cmp	r3, #16
 800ccd4:	d11b      	bne.n	800cd0e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	f06f 0210 	mvn.w	r2, #16
 800ccde:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	2208      	movs	r2, #8
 800cce4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	69db      	ldr	r3, [r3, #28]
 800ccec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d003      	beq.n	800ccfc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ccf4:	6878      	ldr	r0, [r7, #4]
 800ccf6:	f000 f950 	bl	800cf9a <HAL_TIM_IC_CaptureCallback>
 800ccfa:	e005      	b.n	800cd08 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ccfc:	6878      	ldr	r0, [r7, #4]
 800ccfe:	f000 f942 	bl	800cf86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cd02:	6878      	ldr	r0, [r7, #4]
 800cd04:	f000 f953 	bl	800cfae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	2200      	movs	r2, #0
 800cd0c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	691b      	ldr	r3, [r3, #16]
 800cd14:	f003 0301 	and.w	r3, r3, #1
 800cd18:	2b01      	cmp	r3, #1
 800cd1a:	d10e      	bne.n	800cd3a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	68db      	ldr	r3, [r3, #12]
 800cd22:	f003 0301 	and.w	r3, r3, #1
 800cd26:	2b01      	cmp	r3, #1
 800cd28:	d107      	bne.n	800cd3a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	f06f 0201 	mvn.w	r2, #1
 800cd32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800cd34:	6878      	ldr	r0, [r7, #4]
 800cd36:	f7f7 fca9 	bl	800468c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	691b      	ldr	r3, [r3, #16]
 800cd40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cd44:	2b80      	cmp	r3, #128	; 0x80
 800cd46:	d10e      	bne.n	800cd66 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	68db      	ldr	r3, [r3, #12]
 800cd4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cd52:	2b80      	cmp	r3, #128	; 0x80
 800cd54:	d107      	bne.n	800cd66 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800cd5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800cd60:	6878      	ldr	r0, [r7, #4]
 800cd62:	f000 faff 	bl	800d364 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	691b      	ldr	r3, [r3, #16]
 800cd6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cd70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cd74:	d10e      	bne.n	800cd94 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	68db      	ldr	r3, [r3, #12]
 800cd7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cd80:	2b80      	cmp	r3, #128	; 0x80
 800cd82:	d107      	bne.n	800cd94 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800cd8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800cd8e:	6878      	ldr	r0, [r7, #4]
 800cd90:	f000 faf2 	bl	800d378 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	691b      	ldr	r3, [r3, #16]
 800cd9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd9e:	2b40      	cmp	r3, #64	; 0x40
 800cda0:	d10e      	bne.n	800cdc0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	68db      	ldr	r3, [r3, #12]
 800cda8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cdac:	2b40      	cmp	r3, #64	; 0x40
 800cdae:	d107      	bne.n	800cdc0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800cdb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800cdba:	6878      	ldr	r0, [r7, #4]
 800cdbc:	f000 f901 	bl	800cfc2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	691b      	ldr	r3, [r3, #16]
 800cdc6:	f003 0320 	and.w	r3, r3, #32
 800cdca:	2b20      	cmp	r3, #32
 800cdcc:	d10e      	bne.n	800cdec <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	68db      	ldr	r3, [r3, #12]
 800cdd4:	f003 0320 	and.w	r3, r3, #32
 800cdd8:	2b20      	cmp	r3, #32
 800cdda:	d107      	bne.n	800cdec <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	f06f 0220 	mvn.w	r2, #32
 800cde4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800cde6:	6878      	ldr	r0, [r7, #4]
 800cde8:	f000 fab2 	bl	800d350 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800cdec:	bf00      	nop
 800cdee:	3708      	adds	r7, #8
 800cdf0:	46bd      	mov	sp, r7
 800cdf2:	bd80      	pop	{r7, pc}

0800cdf4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800cdf4:	b580      	push	{r7, lr}
 800cdf6:	b084      	sub	sp, #16
 800cdf8:	af00      	add	r7, sp, #0
 800cdfa:	6078      	str	r0, [r7, #4]
 800cdfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800cdfe:	2300      	movs	r3, #0
 800ce00:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ce08:	2b01      	cmp	r3, #1
 800ce0a:	d101      	bne.n	800ce10 <HAL_TIM_ConfigClockSource+0x1c>
 800ce0c:	2302      	movs	r3, #2
 800ce0e:	e0b6      	b.n	800cf7e <HAL_TIM_ConfigClockSource+0x18a>
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	2201      	movs	r2, #1
 800ce14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	2202      	movs	r2, #2
 800ce1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	689b      	ldr	r3, [r3, #8]
 800ce26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ce28:	68bb      	ldr	r3, [r7, #8]
 800ce2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ce2e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800ce32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ce34:	68bb      	ldr	r3, [r7, #8]
 800ce36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ce3a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	68ba      	ldr	r2, [r7, #8]
 800ce42:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ce44:	683b      	ldr	r3, [r7, #0]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ce4c:	d03e      	beq.n	800cecc <HAL_TIM_ConfigClockSource+0xd8>
 800ce4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ce52:	f200 8087 	bhi.w	800cf64 <HAL_TIM_ConfigClockSource+0x170>
 800ce56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ce5a:	f000 8086 	beq.w	800cf6a <HAL_TIM_ConfigClockSource+0x176>
 800ce5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ce62:	d87f      	bhi.n	800cf64 <HAL_TIM_ConfigClockSource+0x170>
 800ce64:	2b70      	cmp	r3, #112	; 0x70
 800ce66:	d01a      	beq.n	800ce9e <HAL_TIM_ConfigClockSource+0xaa>
 800ce68:	2b70      	cmp	r3, #112	; 0x70
 800ce6a:	d87b      	bhi.n	800cf64 <HAL_TIM_ConfigClockSource+0x170>
 800ce6c:	2b60      	cmp	r3, #96	; 0x60
 800ce6e:	d050      	beq.n	800cf12 <HAL_TIM_ConfigClockSource+0x11e>
 800ce70:	2b60      	cmp	r3, #96	; 0x60
 800ce72:	d877      	bhi.n	800cf64 <HAL_TIM_ConfigClockSource+0x170>
 800ce74:	2b50      	cmp	r3, #80	; 0x50
 800ce76:	d03c      	beq.n	800cef2 <HAL_TIM_ConfigClockSource+0xfe>
 800ce78:	2b50      	cmp	r3, #80	; 0x50
 800ce7a:	d873      	bhi.n	800cf64 <HAL_TIM_ConfigClockSource+0x170>
 800ce7c:	2b40      	cmp	r3, #64	; 0x40
 800ce7e:	d058      	beq.n	800cf32 <HAL_TIM_ConfigClockSource+0x13e>
 800ce80:	2b40      	cmp	r3, #64	; 0x40
 800ce82:	d86f      	bhi.n	800cf64 <HAL_TIM_ConfigClockSource+0x170>
 800ce84:	2b30      	cmp	r3, #48	; 0x30
 800ce86:	d064      	beq.n	800cf52 <HAL_TIM_ConfigClockSource+0x15e>
 800ce88:	2b30      	cmp	r3, #48	; 0x30
 800ce8a:	d86b      	bhi.n	800cf64 <HAL_TIM_ConfigClockSource+0x170>
 800ce8c:	2b20      	cmp	r3, #32
 800ce8e:	d060      	beq.n	800cf52 <HAL_TIM_ConfigClockSource+0x15e>
 800ce90:	2b20      	cmp	r3, #32
 800ce92:	d867      	bhi.n	800cf64 <HAL_TIM_ConfigClockSource+0x170>
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d05c      	beq.n	800cf52 <HAL_TIM_ConfigClockSource+0x15e>
 800ce98:	2b10      	cmp	r3, #16
 800ce9a:	d05a      	beq.n	800cf52 <HAL_TIM_ConfigClockSource+0x15e>
 800ce9c:	e062      	b.n	800cf64 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	6818      	ldr	r0, [r3, #0]
 800cea2:	683b      	ldr	r3, [r7, #0]
 800cea4:	6899      	ldr	r1, [r3, #8]
 800cea6:	683b      	ldr	r3, [r7, #0]
 800cea8:	685a      	ldr	r2, [r3, #4]
 800ceaa:	683b      	ldr	r3, [r7, #0]
 800ceac:	68db      	ldr	r3, [r3, #12]
 800ceae:	f000 f9a7 	bl	800d200 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	689b      	ldr	r3, [r3, #8]
 800ceb8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ceba:	68bb      	ldr	r3, [r7, #8]
 800cebc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800cec0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	68ba      	ldr	r2, [r7, #8]
 800cec8:	609a      	str	r2, [r3, #8]
      break;
 800ceca:	e04f      	b.n	800cf6c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	6818      	ldr	r0, [r3, #0]
 800ced0:	683b      	ldr	r3, [r7, #0]
 800ced2:	6899      	ldr	r1, [r3, #8]
 800ced4:	683b      	ldr	r3, [r7, #0]
 800ced6:	685a      	ldr	r2, [r3, #4]
 800ced8:	683b      	ldr	r3, [r7, #0]
 800ceda:	68db      	ldr	r3, [r3, #12]
 800cedc:	f000 f990 	bl	800d200 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	689a      	ldr	r2, [r3, #8]
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ceee:	609a      	str	r2, [r3, #8]
      break;
 800cef0:	e03c      	b.n	800cf6c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	6818      	ldr	r0, [r3, #0]
 800cef6:	683b      	ldr	r3, [r7, #0]
 800cef8:	6859      	ldr	r1, [r3, #4]
 800cefa:	683b      	ldr	r3, [r7, #0]
 800cefc:	68db      	ldr	r3, [r3, #12]
 800cefe:	461a      	mov	r2, r3
 800cf00:	f000 f904 	bl	800d10c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	2150      	movs	r1, #80	; 0x50
 800cf0a:	4618      	mov	r0, r3
 800cf0c:	f000 f95d 	bl	800d1ca <TIM_ITRx_SetConfig>
      break;
 800cf10:	e02c      	b.n	800cf6c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	6818      	ldr	r0, [r3, #0]
 800cf16:	683b      	ldr	r3, [r7, #0]
 800cf18:	6859      	ldr	r1, [r3, #4]
 800cf1a:	683b      	ldr	r3, [r7, #0]
 800cf1c:	68db      	ldr	r3, [r3, #12]
 800cf1e:	461a      	mov	r2, r3
 800cf20:	f000 f923 	bl	800d16a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	2160      	movs	r1, #96	; 0x60
 800cf2a:	4618      	mov	r0, r3
 800cf2c:	f000 f94d 	bl	800d1ca <TIM_ITRx_SetConfig>
      break;
 800cf30:	e01c      	b.n	800cf6c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	6818      	ldr	r0, [r3, #0]
 800cf36:	683b      	ldr	r3, [r7, #0]
 800cf38:	6859      	ldr	r1, [r3, #4]
 800cf3a:	683b      	ldr	r3, [r7, #0]
 800cf3c:	68db      	ldr	r3, [r3, #12]
 800cf3e:	461a      	mov	r2, r3
 800cf40:	f000 f8e4 	bl	800d10c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	2140      	movs	r1, #64	; 0x40
 800cf4a:	4618      	mov	r0, r3
 800cf4c:	f000 f93d 	bl	800d1ca <TIM_ITRx_SetConfig>
      break;
 800cf50:	e00c      	b.n	800cf6c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	681a      	ldr	r2, [r3, #0]
 800cf56:	683b      	ldr	r3, [r7, #0]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	4619      	mov	r1, r3
 800cf5c:	4610      	mov	r0, r2
 800cf5e:	f000 f934 	bl	800d1ca <TIM_ITRx_SetConfig>
      break;
 800cf62:	e003      	b.n	800cf6c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800cf64:	2301      	movs	r3, #1
 800cf66:	73fb      	strb	r3, [r7, #15]
      break;
 800cf68:	e000      	b.n	800cf6c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800cf6a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	2201      	movs	r2, #1
 800cf70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	2200      	movs	r2, #0
 800cf78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800cf7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf7e:	4618      	mov	r0, r3
 800cf80:	3710      	adds	r7, #16
 800cf82:	46bd      	mov	sp, r7
 800cf84:	bd80      	pop	{r7, pc}

0800cf86 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cf86:	b480      	push	{r7}
 800cf88:	b083      	sub	sp, #12
 800cf8a:	af00      	add	r7, sp, #0
 800cf8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800cf8e:	bf00      	nop
 800cf90:	370c      	adds	r7, #12
 800cf92:	46bd      	mov	sp, r7
 800cf94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf98:	4770      	bx	lr

0800cf9a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800cf9a:	b480      	push	{r7}
 800cf9c:	b083      	sub	sp, #12
 800cf9e:	af00      	add	r7, sp, #0
 800cfa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800cfa2:	bf00      	nop
 800cfa4:	370c      	adds	r7, #12
 800cfa6:	46bd      	mov	sp, r7
 800cfa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfac:	4770      	bx	lr

0800cfae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cfae:	b480      	push	{r7}
 800cfb0:	b083      	sub	sp, #12
 800cfb2:	af00      	add	r7, sp, #0
 800cfb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800cfb6:	bf00      	nop
 800cfb8:	370c      	adds	r7, #12
 800cfba:	46bd      	mov	sp, r7
 800cfbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc0:	4770      	bx	lr

0800cfc2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cfc2:	b480      	push	{r7}
 800cfc4:	b083      	sub	sp, #12
 800cfc6:	af00      	add	r7, sp, #0
 800cfc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800cfca:	bf00      	nop
 800cfcc:	370c      	adds	r7, #12
 800cfce:	46bd      	mov	sp, r7
 800cfd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd4:	4770      	bx	lr
	...

0800cfd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800cfd8:	b480      	push	{r7}
 800cfda:	b085      	sub	sp, #20
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	6078      	str	r0, [r7, #4]
 800cfe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	4a40      	ldr	r2, [pc, #256]	; (800d0ec <TIM_Base_SetConfig+0x114>)
 800cfec:	4293      	cmp	r3, r2
 800cfee:	d013      	beq.n	800d018 <TIM_Base_SetConfig+0x40>
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cff6:	d00f      	beq.n	800d018 <TIM_Base_SetConfig+0x40>
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	4a3d      	ldr	r2, [pc, #244]	; (800d0f0 <TIM_Base_SetConfig+0x118>)
 800cffc:	4293      	cmp	r3, r2
 800cffe:	d00b      	beq.n	800d018 <TIM_Base_SetConfig+0x40>
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	4a3c      	ldr	r2, [pc, #240]	; (800d0f4 <TIM_Base_SetConfig+0x11c>)
 800d004:	4293      	cmp	r3, r2
 800d006:	d007      	beq.n	800d018 <TIM_Base_SetConfig+0x40>
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	4a3b      	ldr	r2, [pc, #236]	; (800d0f8 <TIM_Base_SetConfig+0x120>)
 800d00c:	4293      	cmp	r3, r2
 800d00e:	d003      	beq.n	800d018 <TIM_Base_SetConfig+0x40>
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	4a3a      	ldr	r2, [pc, #232]	; (800d0fc <TIM_Base_SetConfig+0x124>)
 800d014:	4293      	cmp	r3, r2
 800d016:	d108      	bne.n	800d02a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d01e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d020:	683b      	ldr	r3, [r7, #0]
 800d022:	685b      	ldr	r3, [r3, #4]
 800d024:	68fa      	ldr	r2, [r7, #12]
 800d026:	4313      	orrs	r3, r2
 800d028:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	4a2f      	ldr	r2, [pc, #188]	; (800d0ec <TIM_Base_SetConfig+0x114>)
 800d02e:	4293      	cmp	r3, r2
 800d030:	d01f      	beq.n	800d072 <TIM_Base_SetConfig+0x9a>
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d038:	d01b      	beq.n	800d072 <TIM_Base_SetConfig+0x9a>
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	4a2c      	ldr	r2, [pc, #176]	; (800d0f0 <TIM_Base_SetConfig+0x118>)
 800d03e:	4293      	cmp	r3, r2
 800d040:	d017      	beq.n	800d072 <TIM_Base_SetConfig+0x9a>
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	4a2b      	ldr	r2, [pc, #172]	; (800d0f4 <TIM_Base_SetConfig+0x11c>)
 800d046:	4293      	cmp	r3, r2
 800d048:	d013      	beq.n	800d072 <TIM_Base_SetConfig+0x9a>
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	4a2a      	ldr	r2, [pc, #168]	; (800d0f8 <TIM_Base_SetConfig+0x120>)
 800d04e:	4293      	cmp	r3, r2
 800d050:	d00f      	beq.n	800d072 <TIM_Base_SetConfig+0x9a>
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	4a29      	ldr	r2, [pc, #164]	; (800d0fc <TIM_Base_SetConfig+0x124>)
 800d056:	4293      	cmp	r3, r2
 800d058:	d00b      	beq.n	800d072 <TIM_Base_SetConfig+0x9a>
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	4a28      	ldr	r2, [pc, #160]	; (800d100 <TIM_Base_SetConfig+0x128>)
 800d05e:	4293      	cmp	r3, r2
 800d060:	d007      	beq.n	800d072 <TIM_Base_SetConfig+0x9a>
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	4a27      	ldr	r2, [pc, #156]	; (800d104 <TIM_Base_SetConfig+0x12c>)
 800d066:	4293      	cmp	r3, r2
 800d068:	d003      	beq.n	800d072 <TIM_Base_SetConfig+0x9a>
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	4a26      	ldr	r2, [pc, #152]	; (800d108 <TIM_Base_SetConfig+0x130>)
 800d06e:	4293      	cmp	r3, r2
 800d070:	d108      	bne.n	800d084 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d078:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d07a:	683b      	ldr	r3, [r7, #0]
 800d07c:	68db      	ldr	r3, [r3, #12]
 800d07e:	68fa      	ldr	r2, [r7, #12]
 800d080:	4313      	orrs	r3, r2
 800d082:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d08a:	683b      	ldr	r3, [r7, #0]
 800d08c:	695b      	ldr	r3, [r3, #20]
 800d08e:	4313      	orrs	r3, r2
 800d090:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	68fa      	ldr	r2, [r7, #12]
 800d096:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d098:	683b      	ldr	r3, [r7, #0]
 800d09a:	689a      	ldr	r2, [r3, #8]
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d0a0:	683b      	ldr	r3, [r7, #0]
 800d0a2:	681a      	ldr	r2, [r3, #0]
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	4a10      	ldr	r2, [pc, #64]	; (800d0ec <TIM_Base_SetConfig+0x114>)
 800d0ac:	4293      	cmp	r3, r2
 800d0ae:	d00f      	beq.n	800d0d0 <TIM_Base_SetConfig+0xf8>
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	4a12      	ldr	r2, [pc, #72]	; (800d0fc <TIM_Base_SetConfig+0x124>)
 800d0b4:	4293      	cmp	r3, r2
 800d0b6:	d00b      	beq.n	800d0d0 <TIM_Base_SetConfig+0xf8>
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	4a11      	ldr	r2, [pc, #68]	; (800d100 <TIM_Base_SetConfig+0x128>)
 800d0bc:	4293      	cmp	r3, r2
 800d0be:	d007      	beq.n	800d0d0 <TIM_Base_SetConfig+0xf8>
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	4a10      	ldr	r2, [pc, #64]	; (800d104 <TIM_Base_SetConfig+0x12c>)
 800d0c4:	4293      	cmp	r3, r2
 800d0c6:	d003      	beq.n	800d0d0 <TIM_Base_SetConfig+0xf8>
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	4a0f      	ldr	r2, [pc, #60]	; (800d108 <TIM_Base_SetConfig+0x130>)
 800d0cc:	4293      	cmp	r3, r2
 800d0ce:	d103      	bne.n	800d0d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d0d0:	683b      	ldr	r3, [r7, #0]
 800d0d2:	691a      	ldr	r2, [r3, #16]
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	2201      	movs	r2, #1
 800d0dc:	615a      	str	r2, [r3, #20]
}
 800d0de:	bf00      	nop
 800d0e0:	3714      	adds	r7, #20
 800d0e2:	46bd      	mov	sp, r7
 800d0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e8:	4770      	bx	lr
 800d0ea:	bf00      	nop
 800d0ec:	40012c00 	.word	0x40012c00
 800d0f0:	40000400 	.word	0x40000400
 800d0f4:	40000800 	.word	0x40000800
 800d0f8:	40000c00 	.word	0x40000c00
 800d0fc:	40013400 	.word	0x40013400
 800d100:	40014000 	.word	0x40014000
 800d104:	40014400 	.word	0x40014400
 800d108:	40014800 	.word	0x40014800

0800d10c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d10c:	b480      	push	{r7}
 800d10e:	b087      	sub	sp, #28
 800d110:	af00      	add	r7, sp, #0
 800d112:	60f8      	str	r0, [r7, #12]
 800d114:	60b9      	str	r1, [r7, #8]
 800d116:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	6a1b      	ldr	r3, [r3, #32]
 800d11c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	6a1b      	ldr	r3, [r3, #32]
 800d122:	f023 0201 	bic.w	r2, r3, #1
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	699b      	ldr	r3, [r3, #24]
 800d12e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d130:	693b      	ldr	r3, [r7, #16]
 800d132:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d136:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	011b      	lsls	r3, r3, #4
 800d13c:	693a      	ldr	r2, [r7, #16]
 800d13e:	4313      	orrs	r3, r2
 800d140:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d142:	697b      	ldr	r3, [r7, #20]
 800d144:	f023 030a 	bic.w	r3, r3, #10
 800d148:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d14a:	697a      	ldr	r2, [r7, #20]
 800d14c:	68bb      	ldr	r3, [r7, #8]
 800d14e:	4313      	orrs	r3, r2
 800d150:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	693a      	ldr	r2, [r7, #16]
 800d156:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	697a      	ldr	r2, [r7, #20]
 800d15c:	621a      	str	r2, [r3, #32]
}
 800d15e:	bf00      	nop
 800d160:	371c      	adds	r7, #28
 800d162:	46bd      	mov	sp, r7
 800d164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d168:	4770      	bx	lr

0800d16a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d16a:	b480      	push	{r7}
 800d16c:	b087      	sub	sp, #28
 800d16e:	af00      	add	r7, sp, #0
 800d170:	60f8      	str	r0, [r7, #12]
 800d172:	60b9      	str	r1, [r7, #8]
 800d174:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	6a1b      	ldr	r3, [r3, #32]
 800d17a:	f023 0210 	bic.w	r2, r3, #16
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	699b      	ldr	r3, [r3, #24]
 800d186:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	6a1b      	ldr	r3, [r3, #32]
 800d18c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d18e:	697b      	ldr	r3, [r7, #20]
 800d190:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d194:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	031b      	lsls	r3, r3, #12
 800d19a:	697a      	ldr	r2, [r7, #20]
 800d19c:	4313      	orrs	r3, r2
 800d19e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d1a0:	693b      	ldr	r3, [r7, #16]
 800d1a2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d1a6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d1a8:	68bb      	ldr	r3, [r7, #8]
 800d1aa:	011b      	lsls	r3, r3, #4
 800d1ac:	693a      	ldr	r2, [r7, #16]
 800d1ae:	4313      	orrs	r3, r2
 800d1b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	697a      	ldr	r2, [r7, #20]
 800d1b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	693a      	ldr	r2, [r7, #16]
 800d1bc:	621a      	str	r2, [r3, #32]
}
 800d1be:	bf00      	nop
 800d1c0:	371c      	adds	r7, #28
 800d1c2:	46bd      	mov	sp, r7
 800d1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c8:	4770      	bx	lr

0800d1ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d1ca:	b480      	push	{r7}
 800d1cc:	b085      	sub	sp, #20
 800d1ce:	af00      	add	r7, sp, #0
 800d1d0:	6078      	str	r0, [r7, #4]
 800d1d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	689b      	ldr	r3, [r3, #8]
 800d1d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d1e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d1e2:	683a      	ldr	r2, [r7, #0]
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	4313      	orrs	r3, r2
 800d1e8:	f043 0307 	orr.w	r3, r3, #7
 800d1ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	68fa      	ldr	r2, [r7, #12]
 800d1f2:	609a      	str	r2, [r3, #8]
}
 800d1f4:	bf00      	nop
 800d1f6:	3714      	adds	r7, #20
 800d1f8:	46bd      	mov	sp, r7
 800d1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1fe:	4770      	bx	lr

0800d200 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d200:	b480      	push	{r7}
 800d202:	b087      	sub	sp, #28
 800d204:	af00      	add	r7, sp, #0
 800d206:	60f8      	str	r0, [r7, #12]
 800d208:	60b9      	str	r1, [r7, #8]
 800d20a:	607a      	str	r2, [r7, #4]
 800d20c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	689b      	ldr	r3, [r3, #8]
 800d212:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d214:	697b      	ldr	r3, [r7, #20]
 800d216:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d21a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d21c:	683b      	ldr	r3, [r7, #0]
 800d21e:	021a      	lsls	r2, r3, #8
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	431a      	orrs	r2, r3
 800d224:	68bb      	ldr	r3, [r7, #8]
 800d226:	4313      	orrs	r3, r2
 800d228:	697a      	ldr	r2, [r7, #20]
 800d22a:	4313      	orrs	r3, r2
 800d22c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	697a      	ldr	r2, [r7, #20]
 800d232:	609a      	str	r2, [r3, #8]
}
 800d234:	bf00      	nop
 800d236:	371c      	adds	r7, #28
 800d238:	46bd      	mov	sp, r7
 800d23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d23e:	4770      	bx	lr

0800d240 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d240:	b480      	push	{r7}
 800d242:	b085      	sub	sp, #20
 800d244:	af00      	add	r7, sp, #0
 800d246:	6078      	str	r0, [r7, #4]
 800d248:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d250:	2b01      	cmp	r3, #1
 800d252:	d101      	bne.n	800d258 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d254:	2302      	movs	r3, #2
 800d256:	e068      	b.n	800d32a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	2201      	movs	r2, #1
 800d25c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	2202      	movs	r2, #2
 800d264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	685b      	ldr	r3, [r3, #4]
 800d26e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	689b      	ldr	r3, [r3, #8]
 800d276:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	4a2e      	ldr	r2, [pc, #184]	; (800d338 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800d27e:	4293      	cmp	r3, r2
 800d280:	d004      	beq.n	800d28c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	4a2d      	ldr	r2, [pc, #180]	; (800d33c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800d288:	4293      	cmp	r3, r2
 800d28a:	d108      	bne.n	800d29e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800d292:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d294:	683b      	ldr	r3, [r7, #0]
 800d296:	685b      	ldr	r3, [r3, #4]
 800d298:	68fa      	ldr	r2, [r7, #12]
 800d29a:	4313      	orrs	r3, r2
 800d29c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d2a4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d2a6:	683b      	ldr	r3, [r7, #0]
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	68fa      	ldr	r2, [r7, #12]
 800d2ac:	4313      	orrs	r3, r2
 800d2ae:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	68fa      	ldr	r2, [r7, #12]
 800d2b6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	4a1e      	ldr	r2, [pc, #120]	; (800d338 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800d2be:	4293      	cmp	r3, r2
 800d2c0:	d01d      	beq.n	800d2fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d2ca:	d018      	beq.n	800d2fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	4a1b      	ldr	r2, [pc, #108]	; (800d340 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d2d2:	4293      	cmp	r3, r2
 800d2d4:	d013      	beq.n	800d2fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	4a1a      	ldr	r2, [pc, #104]	; (800d344 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d2dc:	4293      	cmp	r3, r2
 800d2de:	d00e      	beq.n	800d2fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	4a18      	ldr	r2, [pc, #96]	; (800d348 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800d2e6:	4293      	cmp	r3, r2
 800d2e8:	d009      	beq.n	800d2fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	4a13      	ldr	r2, [pc, #76]	; (800d33c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800d2f0:	4293      	cmp	r3, r2
 800d2f2:	d004      	beq.n	800d2fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	4a14      	ldr	r2, [pc, #80]	; (800d34c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800d2fa:	4293      	cmp	r3, r2
 800d2fc:	d10c      	bne.n	800d318 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d2fe:	68bb      	ldr	r3, [r7, #8]
 800d300:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d304:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d306:	683b      	ldr	r3, [r7, #0]
 800d308:	689b      	ldr	r3, [r3, #8]
 800d30a:	68ba      	ldr	r2, [r7, #8]
 800d30c:	4313      	orrs	r3, r2
 800d30e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	68ba      	ldr	r2, [r7, #8]
 800d316:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	2201      	movs	r2, #1
 800d31c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	2200      	movs	r2, #0
 800d324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d328:	2300      	movs	r3, #0
}
 800d32a:	4618      	mov	r0, r3
 800d32c:	3714      	adds	r7, #20
 800d32e:	46bd      	mov	sp, r7
 800d330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d334:	4770      	bx	lr
 800d336:	bf00      	nop
 800d338:	40012c00 	.word	0x40012c00
 800d33c:	40013400 	.word	0x40013400
 800d340:	40000400 	.word	0x40000400
 800d344:	40000800 	.word	0x40000800
 800d348:	40000c00 	.word	0x40000c00
 800d34c:	40014000 	.word	0x40014000

0800d350 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d350:	b480      	push	{r7}
 800d352:	b083      	sub	sp, #12
 800d354:	af00      	add	r7, sp, #0
 800d356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d358:	bf00      	nop
 800d35a:	370c      	adds	r7, #12
 800d35c:	46bd      	mov	sp, r7
 800d35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d362:	4770      	bx	lr

0800d364 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d364:	b480      	push	{r7}
 800d366:	b083      	sub	sp, #12
 800d368:	af00      	add	r7, sp, #0
 800d36a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d36c:	bf00      	nop
 800d36e:	370c      	adds	r7, #12
 800d370:	46bd      	mov	sp, r7
 800d372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d376:	4770      	bx	lr

0800d378 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d378:	b480      	push	{r7}
 800d37a:	b083      	sub	sp, #12
 800d37c:	af00      	add	r7, sp, #0
 800d37e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d380:	bf00      	nop
 800d382:	370c      	adds	r7, #12
 800d384:	46bd      	mov	sp, r7
 800d386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d38a:	4770      	bx	lr

0800d38c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d38c:	b580      	push	{r7, lr}
 800d38e:	b082      	sub	sp, #8
 800d390:	af00      	add	r7, sp, #0
 800d392:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	2b00      	cmp	r3, #0
 800d398:	d101      	bne.n	800d39e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d39a:	2301      	movs	r3, #1
 800d39c:	e040      	b.n	800d420 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d106      	bne.n	800d3b4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	2200      	movs	r2, #0
 800d3aa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d3ae:	6878      	ldr	r0, [r7, #4]
 800d3b0:	f7f8 fcde 	bl	8005d70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	2224      	movs	r2, #36	; 0x24
 800d3b8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	681a      	ldr	r2, [r3, #0]
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	f022 0201 	bic.w	r2, r2, #1
 800d3c8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d3ca:	6878      	ldr	r0, [r7, #4]
 800d3cc:	f000 fc9e 	bl	800dd0c <UART_SetConfig>
 800d3d0:	4603      	mov	r3, r0
 800d3d2:	2b01      	cmp	r3, #1
 800d3d4:	d101      	bne.n	800d3da <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800d3d6:	2301      	movs	r3, #1
 800d3d8:	e022      	b.n	800d420 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d002      	beq.n	800d3e8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800d3e2:	6878      	ldr	r0, [r7, #4]
 800d3e4:	f000 ff4a 	bl	800e27c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	685a      	ldr	r2, [r3, #4]
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d3f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	689a      	ldr	r2, [r3, #8]
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d406:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	681a      	ldr	r2, [r3, #0]
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	f042 0201 	orr.w	r2, r2, #1
 800d416:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d418:	6878      	ldr	r0, [r7, #4]
 800d41a:	f000 ffd1 	bl	800e3c0 <UART_CheckIdleState>
 800d41e:	4603      	mov	r3, r0
}
 800d420:	4618      	mov	r0, r3
 800d422:	3708      	adds	r7, #8
 800d424:	46bd      	mov	sp, r7
 800d426:	bd80      	pop	{r7, pc}

0800d428 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d428:	b580      	push	{r7, lr}
 800d42a:	b08a      	sub	sp, #40	; 0x28
 800d42c:	af02      	add	r7, sp, #8
 800d42e:	60f8      	str	r0, [r7, #12]
 800d430:	60b9      	str	r1, [r7, #8]
 800d432:	603b      	str	r3, [r7, #0]
 800d434:	4613      	mov	r3, r2
 800d436:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d43c:	2b20      	cmp	r3, #32
 800d43e:	f040 8082 	bne.w	800d546 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800d442:	68bb      	ldr	r3, [r7, #8]
 800d444:	2b00      	cmp	r3, #0
 800d446:	d002      	beq.n	800d44e <HAL_UART_Transmit+0x26>
 800d448:	88fb      	ldrh	r3, [r7, #6]
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d101      	bne.n	800d452 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800d44e:	2301      	movs	r3, #1
 800d450:	e07a      	b.n	800d548 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800d458:	2b01      	cmp	r3, #1
 800d45a:	d101      	bne.n	800d460 <HAL_UART_Transmit+0x38>
 800d45c:	2302      	movs	r3, #2
 800d45e:	e073      	b.n	800d548 <HAL_UART_Transmit+0x120>
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	2201      	movs	r2, #1
 800d464:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	2200      	movs	r2, #0
 800d46c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	2221      	movs	r2, #33	; 0x21
 800d474:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d476:	f7f9 fd29 	bl	8006ecc <HAL_GetTick>
 800d47a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	88fa      	ldrh	r2, [r7, #6]
 800d480:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	88fa      	ldrh	r2, [r7, #6]
 800d488:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	689b      	ldr	r3, [r3, #8]
 800d490:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d494:	d108      	bne.n	800d4a8 <HAL_UART_Transmit+0x80>
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	691b      	ldr	r3, [r3, #16]
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d104      	bne.n	800d4a8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800d49e:	2300      	movs	r3, #0
 800d4a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d4a2:	68bb      	ldr	r3, [r7, #8]
 800d4a4:	61bb      	str	r3, [r7, #24]
 800d4a6:	e003      	b.n	800d4b0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800d4a8:	68bb      	ldr	r3, [r7, #8]
 800d4aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d4ac:	2300      	movs	r3, #0
 800d4ae:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	2200      	movs	r2, #0
 800d4b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800d4b8:	e02d      	b.n	800d516 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d4ba:	683b      	ldr	r3, [r7, #0]
 800d4bc:	9300      	str	r3, [sp, #0]
 800d4be:	697b      	ldr	r3, [r7, #20]
 800d4c0:	2200      	movs	r2, #0
 800d4c2:	2180      	movs	r1, #128	; 0x80
 800d4c4:	68f8      	ldr	r0, [r7, #12]
 800d4c6:	f000 ffc4 	bl	800e452 <UART_WaitOnFlagUntilTimeout>
 800d4ca:	4603      	mov	r3, r0
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d001      	beq.n	800d4d4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800d4d0:	2303      	movs	r3, #3
 800d4d2:	e039      	b.n	800d548 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800d4d4:	69fb      	ldr	r3, [r7, #28]
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d10b      	bne.n	800d4f2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d4da:	69bb      	ldr	r3, [r7, #24]
 800d4dc:	881a      	ldrh	r2, [r3, #0]
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d4e6:	b292      	uxth	r2, r2
 800d4e8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800d4ea:	69bb      	ldr	r3, [r7, #24]
 800d4ec:	3302      	adds	r3, #2
 800d4ee:	61bb      	str	r3, [r7, #24]
 800d4f0:	e008      	b.n	800d504 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d4f2:	69fb      	ldr	r3, [r7, #28]
 800d4f4:	781a      	ldrb	r2, [r3, #0]
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	b292      	uxth	r2, r2
 800d4fc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800d4fe:	69fb      	ldr	r3, [r7, #28]
 800d500:	3301      	adds	r3, #1
 800d502:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800d50a:	b29b      	uxth	r3, r3
 800d50c:	3b01      	subs	r3, #1
 800d50e:	b29a      	uxth	r2, r3
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800d51c:	b29b      	uxth	r3, r3
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d1cb      	bne.n	800d4ba <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d522:	683b      	ldr	r3, [r7, #0]
 800d524:	9300      	str	r3, [sp, #0]
 800d526:	697b      	ldr	r3, [r7, #20]
 800d528:	2200      	movs	r2, #0
 800d52a:	2140      	movs	r1, #64	; 0x40
 800d52c:	68f8      	ldr	r0, [r7, #12]
 800d52e:	f000 ff90 	bl	800e452 <UART_WaitOnFlagUntilTimeout>
 800d532:	4603      	mov	r3, r0
 800d534:	2b00      	cmp	r3, #0
 800d536:	d001      	beq.n	800d53c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800d538:	2303      	movs	r3, #3
 800d53a:	e005      	b.n	800d548 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	2220      	movs	r2, #32
 800d540:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800d542:	2300      	movs	r3, #0
 800d544:	e000      	b.n	800d548 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800d546:	2302      	movs	r3, #2
  }
}
 800d548:	4618      	mov	r0, r3
 800d54a:	3720      	adds	r7, #32
 800d54c:	46bd      	mov	sp, r7
 800d54e:	bd80      	pop	{r7, pc}

0800d550 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d550:	b580      	push	{r7, lr}
 800d552:	b08a      	sub	sp, #40	; 0x28
 800d554:	af00      	add	r7, sp, #0
 800d556:	60f8      	str	r0, [r7, #12]
 800d558:	60b9      	str	r1, [r7, #8]
 800d55a:	4613      	mov	r3, r2
 800d55c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d562:	2b20      	cmp	r3, #32
 800d564:	d142      	bne.n	800d5ec <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800d566:	68bb      	ldr	r3, [r7, #8]
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d002      	beq.n	800d572 <HAL_UART_Receive_IT+0x22>
 800d56c:	88fb      	ldrh	r3, [r7, #6]
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d101      	bne.n	800d576 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800d572:	2301      	movs	r3, #1
 800d574:	e03b      	b.n	800d5ee <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800d57c:	2b01      	cmp	r3, #1
 800d57e:	d101      	bne.n	800d584 <HAL_UART_Receive_IT+0x34>
 800d580:	2302      	movs	r3, #2
 800d582:	e034      	b.n	800d5ee <HAL_UART_Receive_IT+0x9e>
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	2201      	movs	r2, #1
 800d588:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	2200      	movs	r2, #0
 800d590:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	4a18      	ldr	r2, [pc, #96]	; (800d5f8 <HAL_UART_Receive_IT+0xa8>)
 800d598:	4293      	cmp	r3, r2
 800d59a:	d01f      	beq.n	800d5dc <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	685b      	ldr	r3, [r3, #4]
 800d5a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d018      	beq.n	800d5dc <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5b0:	697b      	ldr	r3, [r7, #20]
 800d5b2:	e853 3f00 	ldrex	r3, [r3]
 800d5b6:	613b      	str	r3, [r7, #16]
   return(result);
 800d5b8:	693b      	ldr	r3, [r7, #16]
 800d5ba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d5be:	627b      	str	r3, [r7, #36]	; 0x24
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	461a      	mov	r2, r3
 800d5c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5c8:	623b      	str	r3, [r7, #32]
 800d5ca:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5cc:	69f9      	ldr	r1, [r7, #28]
 800d5ce:	6a3a      	ldr	r2, [r7, #32]
 800d5d0:	e841 2300 	strex	r3, r2, [r1]
 800d5d4:	61bb      	str	r3, [r7, #24]
   return(result);
 800d5d6:	69bb      	ldr	r3, [r7, #24]
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d1e6      	bne.n	800d5aa <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800d5dc:	88fb      	ldrh	r3, [r7, #6]
 800d5de:	461a      	mov	r2, r3
 800d5e0:	68b9      	ldr	r1, [r7, #8]
 800d5e2:	68f8      	ldr	r0, [r7, #12]
 800d5e4:	f000 fffa 	bl	800e5dc <UART_Start_Receive_IT>
 800d5e8:	4603      	mov	r3, r0
 800d5ea:	e000      	b.n	800d5ee <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800d5ec:	2302      	movs	r3, #2
  }
}
 800d5ee:	4618      	mov	r0, r3
 800d5f0:	3728      	adds	r7, #40	; 0x28
 800d5f2:	46bd      	mov	sp, r7
 800d5f4:	bd80      	pop	{r7, pc}
 800d5f6:	bf00      	nop
 800d5f8:	40008000 	.word	0x40008000

0800d5fc <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800d5fc:	b580      	push	{r7, lr}
 800d5fe:	b08a      	sub	sp, #40	; 0x28
 800d600:	af00      	add	r7, sp, #0
 800d602:	60f8      	str	r0, [r7, #12]
 800d604:	60b9      	str	r1, [r7, #8]
 800d606:	4613      	mov	r3, r2
 800d608:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d60e:	2b20      	cmp	r3, #32
 800d610:	d178      	bne.n	800d704 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800d612:	68bb      	ldr	r3, [r7, #8]
 800d614:	2b00      	cmp	r3, #0
 800d616:	d002      	beq.n	800d61e <HAL_UART_Transmit_DMA+0x22>
 800d618:	88fb      	ldrh	r3, [r7, #6]
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d101      	bne.n	800d622 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800d61e:	2301      	movs	r3, #1
 800d620:	e071      	b.n	800d706 <HAL_UART_Transmit_DMA+0x10a>
    }

    __HAL_LOCK(huart);
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800d628:	2b01      	cmp	r3, #1
 800d62a:	d101      	bne.n	800d630 <HAL_UART_Transmit_DMA+0x34>
 800d62c:	2302      	movs	r3, #2
 800d62e:	e06a      	b.n	800d706 <HAL_UART_Transmit_DMA+0x10a>
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	2201      	movs	r2, #1
 800d634:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	68ba      	ldr	r2, [r7, #8]
 800d63c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	88fa      	ldrh	r2, [r7, #6]
 800d642:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	88fa      	ldrh	r2, [r7, #6]
 800d64a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	2200      	movs	r2, #0
 800d652:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	2221      	movs	r2, #33	; 0x21
 800d65a:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d660:	2b00      	cmp	r3, #0
 800d662:	d02b      	beq.n	800d6bc <HAL_UART_Transmit_DMA+0xc0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d668:	4a29      	ldr	r2, [pc, #164]	; (800d710 <HAL_UART_Transmit_DMA+0x114>)
 800d66a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d670:	4a28      	ldr	r2, [pc, #160]	; (800d714 <HAL_UART_Transmit_DMA+0x118>)
 800d672:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d678:	4a27      	ldr	r2, [pc, #156]	; (800d718 <HAL_UART_Transmit_DMA+0x11c>)
 800d67a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d680:	2200      	movs	r2, #0
 800d682:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d68c:	4619      	mov	r1, r3
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	3328      	adds	r3, #40	; 0x28
 800d694:	461a      	mov	r2, r3
 800d696:	88fb      	ldrh	r3, [r7, #6]
 800d698:	f7f9 fe64 	bl	8007364 <HAL_DMA_Start_IT>
 800d69c:	4603      	mov	r3, r0
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d00c      	beq.n	800d6bc <HAL_UART_Transmit_DMA+0xc0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	2210      	movs	r2, #16
 800d6a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	2200      	movs	r2, #0
 800d6ae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	2220      	movs	r2, #32
 800d6b6:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 800d6b8:	2301      	movs	r3, #1
 800d6ba:	e024      	b.n	800d706 <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	2240      	movs	r2, #64	; 0x40
 800d6c2:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	2200      	movs	r2, #0
 800d6c8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	3308      	adds	r3, #8
 800d6d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6d4:	697b      	ldr	r3, [r7, #20]
 800d6d6:	e853 3f00 	ldrex	r3, [r3]
 800d6da:	613b      	str	r3, [r7, #16]
   return(result);
 800d6dc:	693b      	ldr	r3, [r7, #16]
 800d6de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d6e2:	627b      	str	r3, [r7, #36]	; 0x24
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	3308      	adds	r3, #8
 800d6ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d6ec:	623a      	str	r2, [r7, #32]
 800d6ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6f0:	69f9      	ldr	r1, [r7, #28]
 800d6f2:	6a3a      	ldr	r2, [r7, #32]
 800d6f4:	e841 2300 	strex	r3, r2, [r1]
 800d6f8:	61bb      	str	r3, [r7, #24]
   return(result);
 800d6fa:	69bb      	ldr	r3, [r7, #24]
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d1e5      	bne.n	800d6cc <HAL_UART_Transmit_DMA+0xd0>

    return HAL_OK;
 800d700:	2300      	movs	r3, #0
 800d702:	e000      	b.n	800d706 <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800d704:	2302      	movs	r3, #2
  }
}
 800d706:	4618      	mov	r0, r3
 800d708:	3728      	adds	r7, #40	; 0x28
 800d70a:	46bd      	mov	sp, r7
 800d70c:	bd80      	pop	{r7, pc}
 800d70e:	bf00      	nop
 800d710:	0800e883 	.word	0x0800e883
 800d714:	0800e91d 	.word	0x0800e91d
 800d718:	0800e939 	.word	0x0800e939

0800d71c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d71c:	b580      	push	{r7, lr}
 800d71e:	b0ba      	sub	sp, #232	; 0xe8
 800d720:	af00      	add	r7, sp, #0
 800d722:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	69db      	ldr	r3, [r3, #28]
 800d72a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	689b      	ldr	r3, [r3, #8]
 800d73e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d742:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800d746:	f640 030f 	movw	r3, #2063	; 0x80f
 800d74a:	4013      	ands	r3, r2
 800d74c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800d750:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d754:	2b00      	cmp	r3, #0
 800d756:	d115      	bne.n	800d784 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800d758:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d75c:	f003 0320 	and.w	r3, r3, #32
 800d760:	2b00      	cmp	r3, #0
 800d762:	d00f      	beq.n	800d784 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800d764:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d768:	f003 0320 	and.w	r3, r3, #32
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d009      	beq.n	800d784 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d774:	2b00      	cmp	r3, #0
 800d776:	f000 82a6 	beq.w	800dcc6 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d77e:	6878      	ldr	r0, [r7, #4]
 800d780:	4798      	blx	r3
      }
      return;
 800d782:	e2a0      	b.n	800dcc6 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800d784:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d788:	2b00      	cmp	r3, #0
 800d78a:	f000 8117 	beq.w	800d9bc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800d78e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d792:	f003 0301 	and.w	r3, r3, #1
 800d796:	2b00      	cmp	r3, #0
 800d798:	d106      	bne.n	800d7a8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800d79a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800d79e:	4b85      	ldr	r3, [pc, #532]	; (800d9b4 <HAL_UART_IRQHandler+0x298>)
 800d7a0:	4013      	ands	r3, r2
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	f000 810a 	beq.w	800d9bc <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d7a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d7ac:	f003 0301 	and.w	r3, r3, #1
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d011      	beq.n	800d7d8 <HAL_UART_IRQHandler+0xbc>
 800d7b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d7b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d00b      	beq.n	800d7d8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	2201      	movs	r2, #1
 800d7c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d7ce:	f043 0201 	orr.w	r2, r3, #1
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d7d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d7dc:	f003 0302 	and.w	r3, r3, #2
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d011      	beq.n	800d808 <HAL_UART_IRQHandler+0xec>
 800d7e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d7e8:	f003 0301 	and.w	r3, r3, #1
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d00b      	beq.n	800d808 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	2202      	movs	r2, #2
 800d7f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d7fe:	f043 0204 	orr.w	r2, r3, #4
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d808:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d80c:	f003 0304 	and.w	r3, r3, #4
 800d810:	2b00      	cmp	r3, #0
 800d812:	d011      	beq.n	800d838 <HAL_UART_IRQHandler+0x11c>
 800d814:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d818:	f003 0301 	and.w	r3, r3, #1
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d00b      	beq.n	800d838 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	2204      	movs	r2, #4
 800d826:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d82e:	f043 0202 	orr.w	r2, r3, #2
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d838:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d83c:	f003 0308 	and.w	r3, r3, #8
 800d840:	2b00      	cmp	r3, #0
 800d842:	d017      	beq.n	800d874 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800d844:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d848:	f003 0320 	and.w	r3, r3, #32
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d105      	bne.n	800d85c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800d850:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d854:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d00b      	beq.n	800d874 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	2208      	movs	r2, #8
 800d862:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d86a:	f043 0208 	orr.w	r2, r3, #8
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d874:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d878:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d012      	beq.n	800d8a6 <HAL_UART_IRQHandler+0x18a>
 800d880:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d884:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d00c      	beq.n	800d8a6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d894:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d89c:	f043 0220 	orr.w	r2, r3, #32
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	f000 820c 	beq.w	800dcca <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800d8b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d8b6:	f003 0320 	and.w	r3, r3, #32
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d00d      	beq.n	800d8da <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800d8be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d8c2:	f003 0320 	and.w	r3, r3, #32
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d007      	beq.n	800d8da <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d003      	beq.n	800d8da <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d8d6:	6878      	ldr	r0, [r7, #4]
 800d8d8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d8e0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	689b      	ldr	r3, [r3, #8]
 800d8ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d8ee:	2b40      	cmp	r3, #64	; 0x40
 800d8f0:	d005      	beq.n	800d8fe <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d8f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d8f6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d04f      	beq.n	800d99e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d8fe:	6878      	ldr	r0, [r7, #4]
 800d900:	f000 ff5c 	bl	800e7bc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	689b      	ldr	r3, [r3, #8]
 800d90a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d90e:	2b40      	cmp	r3, #64	; 0x40
 800d910:	d141      	bne.n	800d996 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	3308      	adds	r3, #8
 800d918:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d91c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d920:	e853 3f00 	ldrex	r3, [r3]
 800d924:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800d928:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d92c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d930:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	3308      	adds	r3, #8
 800d93a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800d93e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800d942:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d946:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800d94a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d94e:	e841 2300 	strex	r3, r2, [r1]
 800d952:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800d956:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d1d9      	bne.n	800d912 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d962:	2b00      	cmp	r3, #0
 800d964:	d013      	beq.n	800d98e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d96a:	4a13      	ldr	r2, [pc, #76]	; (800d9b8 <HAL_UART_IRQHandler+0x29c>)
 800d96c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d972:	4618      	mov	r0, r3
 800d974:	f7f9 fd94 	bl	80074a0 <HAL_DMA_Abort_IT>
 800d978:	4603      	mov	r3, r0
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d017      	beq.n	800d9ae <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d984:	687a      	ldr	r2, [r7, #4]
 800d986:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800d988:	4610      	mov	r0, r2
 800d98a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d98c:	e00f      	b.n	800d9ae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d98e:	6878      	ldr	r0, [r7, #4]
 800d990:	f7f6 fef2 	bl	8004778 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d994:	e00b      	b.n	800d9ae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d996:	6878      	ldr	r0, [r7, #4]
 800d998:	f7f6 feee 	bl	8004778 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d99c:	e007      	b.n	800d9ae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d99e:	6878      	ldr	r0, [r7, #4]
 800d9a0:	f7f6 feea 	bl	8004778 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	2200      	movs	r2, #0
 800d9a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800d9ac:	e18d      	b.n	800dcca <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d9ae:	bf00      	nop
    return;
 800d9b0:	e18b      	b.n	800dcca <HAL_UART_IRQHandler+0x5ae>
 800d9b2:	bf00      	nop
 800d9b4:	04000120 	.word	0x04000120
 800d9b8:	0800e9b5 	.word	0x0800e9b5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d9c0:	2b01      	cmp	r3, #1
 800d9c2:	f040 8146 	bne.w	800dc52 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d9c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d9ca:	f003 0310 	and.w	r3, r3, #16
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	f000 813f 	beq.w	800dc52 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d9d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d9d8:	f003 0310 	and.w	r3, r3, #16
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	f000 8138 	beq.w	800dc52 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	2210      	movs	r2, #16
 800d9e8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	689b      	ldr	r3, [r3, #8]
 800d9f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d9f4:	2b40      	cmp	r3, #64	; 0x40
 800d9f6:	f040 80b4 	bne.w	800db62 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	685b      	ldr	r3, [r3, #4]
 800da02:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800da06:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	f000 815f 	beq.w	800dcce <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800da16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800da1a:	429a      	cmp	r2, r3
 800da1c:	f080 8157 	bcs.w	800dcce <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800da26:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	f003 0320 	and.w	r3, r3, #32
 800da36:	2b00      	cmp	r3, #0
 800da38:	f040 8085 	bne.w	800db46 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da44:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800da48:	e853 3f00 	ldrex	r3, [r3]
 800da4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800da50:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800da54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800da58:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	461a      	mov	r2, r3
 800da62:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800da66:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800da6a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da6e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800da72:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800da76:	e841 2300 	strex	r3, r2, [r1]
 800da7a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800da7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800da82:	2b00      	cmp	r3, #0
 800da84:	d1da      	bne.n	800da3c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	3308      	adds	r3, #8
 800da8c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800da90:	e853 3f00 	ldrex	r3, [r3]
 800da94:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800da96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800da98:	f023 0301 	bic.w	r3, r3, #1
 800da9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	3308      	adds	r3, #8
 800daa6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800daaa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800daae:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dab0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800dab2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800dab6:	e841 2300 	strex	r3, r2, [r1]
 800daba:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800dabc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d1e1      	bne.n	800da86 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	3308      	adds	r3, #8
 800dac8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800daca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dacc:	e853 3f00 	ldrex	r3, [r3]
 800dad0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800dad2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dad4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dad8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	3308      	adds	r3, #8
 800dae2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800dae6:	66fa      	str	r2, [r7, #108]	; 0x6c
 800dae8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800daea:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800daec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800daee:	e841 2300 	strex	r3, r2, [r1]
 800daf2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800daf4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d1e3      	bne.n	800dac2 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	2220      	movs	r2, #32
 800dafe:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	2200      	movs	r2, #0
 800db04:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db0e:	e853 3f00 	ldrex	r3, [r3]
 800db12:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800db14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800db16:	f023 0310 	bic.w	r3, r3, #16
 800db1a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	461a      	mov	r2, r3
 800db24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800db28:	65bb      	str	r3, [r7, #88]	; 0x58
 800db2a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db2c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800db2e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800db30:	e841 2300 	strex	r3, r2, [r1]
 800db34:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800db36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d1e4      	bne.n	800db06 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db40:	4618      	mov	r0, r3
 800db42:	f7f9 fc6f 	bl	8007424 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800db52:	b29b      	uxth	r3, r3
 800db54:	1ad3      	subs	r3, r2, r3
 800db56:	b29b      	uxth	r3, r3
 800db58:	4619      	mov	r1, r3
 800db5a:	6878      	ldr	r0, [r7, #4]
 800db5c:	f000 f8ca 	bl	800dcf4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800db60:	e0b5      	b.n	800dcce <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800db6e:	b29b      	uxth	r3, r3
 800db70:	1ad3      	subs	r3, r2, r3
 800db72:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800db7c:	b29b      	uxth	r3, r3
 800db7e:	2b00      	cmp	r3, #0
 800db80:	f000 80a7 	beq.w	800dcd2 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 800db84:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800db88:	2b00      	cmp	r3, #0
 800db8a:	f000 80a2 	beq.w	800dcd2 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db96:	e853 3f00 	ldrex	r3, [r3]
 800db9a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800db9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db9e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800dba2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	461a      	mov	r2, r3
 800dbac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800dbb0:	647b      	str	r3, [r7, #68]	; 0x44
 800dbb2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbb4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800dbb6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dbb8:	e841 2300 	strex	r3, r2, [r1]
 800dbbc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800dbbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d1e4      	bne.n	800db8e <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	3308      	adds	r3, #8
 800dbca:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbce:	e853 3f00 	ldrex	r3, [r3]
 800dbd2:	623b      	str	r3, [r7, #32]
   return(result);
 800dbd4:	6a3b      	ldr	r3, [r7, #32]
 800dbd6:	f023 0301 	bic.w	r3, r3, #1
 800dbda:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	3308      	adds	r3, #8
 800dbe4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800dbe8:	633a      	str	r2, [r7, #48]	; 0x30
 800dbea:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dbee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dbf0:	e841 2300 	strex	r3, r2, [r1]
 800dbf4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800dbf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d1e3      	bne.n	800dbc4 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	2220      	movs	r2, #32
 800dc00:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	2200      	movs	r2, #0
 800dc06:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	2200      	movs	r2, #0
 800dc0c:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc14:	693b      	ldr	r3, [r7, #16]
 800dc16:	e853 3f00 	ldrex	r3, [r3]
 800dc1a:	60fb      	str	r3, [r7, #12]
   return(result);
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	f023 0310 	bic.w	r3, r3, #16
 800dc22:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	461a      	mov	r2, r3
 800dc2c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800dc30:	61fb      	str	r3, [r7, #28]
 800dc32:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc34:	69b9      	ldr	r1, [r7, #24]
 800dc36:	69fa      	ldr	r2, [r7, #28]
 800dc38:	e841 2300 	strex	r3, r2, [r1]
 800dc3c:	617b      	str	r3, [r7, #20]
   return(result);
 800dc3e:	697b      	ldr	r3, [r7, #20]
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d1e4      	bne.n	800dc0e <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800dc44:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800dc48:	4619      	mov	r1, r3
 800dc4a:	6878      	ldr	r0, [r7, #4]
 800dc4c:	f000 f852 	bl	800dcf4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800dc50:	e03f      	b.n	800dcd2 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800dc52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dc56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d00e      	beq.n	800dc7c <HAL_UART_IRQHandler+0x560>
 800dc5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dc62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d008      	beq.n	800dc7c <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800dc72:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800dc74:	6878      	ldr	r0, [r7, #4]
 800dc76:	f001 f83d 	bl	800ecf4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800dc7a:	e02d      	b.n	800dcd8 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800dc7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dc80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d00e      	beq.n	800dca6 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800dc88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dc8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d008      	beq.n	800dca6 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d01c      	beq.n	800dcd6 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dca0:	6878      	ldr	r0, [r7, #4]
 800dca2:	4798      	blx	r3
    }
    return;
 800dca4:	e017      	b.n	800dcd6 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800dca6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dcaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d012      	beq.n	800dcd8 <HAL_UART_IRQHandler+0x5bc>
 800dcb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dcb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d00c      	beq.n	800dcd8 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800dcbe:	6878      	ldr	r0, [r7, #4]
 800dcc0:	f000 fe8e 	bl	800e9e0 <UART_EndTransmit_IT>
    return;
 800dcc4:	e008      	b.n	800dcd8 <HAL_UART_IRQHandler+0x5bc>
      return;
 800dcc6:	bf00      	nop
 800dcc8:	e006      	b.n	800dcd8 <HAL_UART_IRQHandler+0x5bc>
    return;
 800dcca:	bf00      	nop
 800dccc:	e004      	b.n	800dcd8 <HAL_UART_IRQHandler+0x5bc>
      return;
 800dcce:	bf00      	nop
 800dcd0:	e002      	b.n	800dcd8 <HAL_UART_IRQHandler+0x5bc>
      return;
 800dcd2:	bf00      	nop
 800dcd4:	e000      	b.n	800dcd8 <HAL_UART_IRQHandler+0x5bc>
    return;
 800dcd6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800dcd8:	37e8      	adds	r7, #232	; 0xe8
 800dcda:	46bd      	mov	sp, r7
 800dcdc:	bd80      	pop	{r7, pc}
 800dcde:	bf00      	nop

0800dce0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800dce0:	b480      	push	{r7}
 800dce2:	b083      	sub	sp, #12
 800dce4:	af00      	add	r7, sp, #0
 800dce6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800dce8:	bf00      	nop
 800dcea:	370c      	adds	r7, #12
 800dcec:	46bd      	mov	sp, r7
 800dcee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf2:	4770      	bx	lr

0800dcf4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800dcf4:	b480      	push	{r7}
 800dcf6:	b083      	sub	sp, #12
 800dcf8:	af00      	add	r7, sp, #0
 800dcfa:	6078      	str	r0, [r7, #4]
 800dcfc:	460b      	mov	r3, r1
 800dcfe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800dd00:	bf00      	nop
 800dd02:	370c      	adds	r7, #12
 800dd04:	46bd      	mov	sp, r7
 800dd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd0a:	4770      	bx	lr

0800dd0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800dd0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800dd10:	b08a      	sub	sp, #40	; 0x28
 800dd12:	af00      	add	r7, sp, #0
 800dd14:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800dd16:	2300      	movs	r3, #0
 800dd18:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	689a      	ldr	r2, [r3, #8]
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	691b      	ldr	r3, [r3, #16]
 800dd24:	431a      	orrs	r2, r3
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	695b      	ldr	r3, [r3, #20]
 800dd2a:	431a      	orrs	r2, r3
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	69db      	ldr	r3, [r3, #28]
 800dd30:	4313      	orrs	r3, r2
 800dd32:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	681a      	ldr	r2, [r3, #0]
 800dd3a:	4ba4      	ldr	r3, [pc, #656]	; (800dfcc <UART_SetConfig+0x2c0>)
 800dd3c:	4013      	ands	r3, r2
 800dd3e:	68fa      	ldr	r2, [r7, #12]
 800dd40:	6812      	ldr	r2, [r2, #0]
 800dd42:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dd44:	430b      	orrs	r3, r1
 800dd46:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	685b      	ldr	r3, [r3, #4]
 800dd4e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	68da      	ldr	r2, [r3, #12]
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	430a      	orrs	r2, r1
 800dd5c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	699b      	ldr	r3, [r3, #24]
 800dd62:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	4a99      	ldr	r2, [pc, #612]	; (800dfd0 <UART_SetConfig+0x2c4>)
 800dd6a:	4293      	cmp	r3, r2
 800dd6c:	d004      	beq.n	800dd78 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	6a1b      	ldr	r3, [r3, #32]
 800dd72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dd74:	4313      	orrs	r3, r2
 800dd76:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	689b      	ldr	r3, [r3, #8]
 800dd7e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dd88:	430a      	orrs	r2, r1
 800dd8a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	4a90      	ldr	r2, [pc, #576]	; (800dfd4 <UART_SetConfig+0x2c8>)
 800dd92:	4293      	cmp	r3, r2
 800dd94:	d126      	bne.n	800dde4 <UART_SetConfig+0xd8>
 800dd96:	4b90      	ldr	r3, [pc, #576]	; (800dfd8 <UART_SetConfig+0x2cc>)
 800dd98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dd9c:	f003 0303 	and.w	r3, r3, #3
 800dda0:	2b03      	cmp	r3, #3
 800dda2:	d81b      	bhi.n	800dddc <UART_SetConfig+0xd0>
 800dda4:	a201      	add	r2, pc, #4	; (adr r2, 800ddac <UART_SetConfig+0xa0>)
 800dda6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddaa:	bf00      	nop
 800ddac:	0800ddbd 	.word	0x0800ddbd
 800ddb0:	0800ddcd 	.word	0x0800ddcd
 800ddb4:	0800ddc5 	.word	0x0800ddc5
 800ddb8:	0800ddd5 	.word	0x0800ddd5
 800ddbc:	2301      	movs	r3, #1
 800ddbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ddc2:	e116      	b.n	800dff2 <UART_SetConfig+0x2e6>
 800ddc4:	2302      	movs	r3, #2
 800ddc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ddca:	e112      	b.n	800dff2 <UART_SetConfig+0x2e6>
 800ddcc:	2304      	movs	r3, #4
 800ddce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ddd2:	e10e      	b.n	800dff2 <UART_SetConfig+0x2e6>
 800ddd4:	2308      	movs	r3, #8
 800ddd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ddda:	e10a      	b.n	800dff2 <UART_SetConfig+0x2e6>
 800dddc:	2310      	movs	r3, #16
 800ddde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800dde2:	e106      	b.n	800dff2 <UART_SetConfig+0x2e6>
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	4a7c      	ldr	r2, [pc, #496]	; (800dfdc <UART_SetConfig+0x2d0>)
 800ddea:	4293      	cmp	r3, r2
 800ddec:	d138      	bne.n	800de60 <UART_SetConfig+0x154>
 800ddee:	4b7a      	ldr	r3, [pc, #488]	; (800dfd8 <UART_SetConfig+0x2cc>)
 800ddf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ddf4:	f003 030c 	and.w	r3, r3, #12
 800ddf8:	2b0c      	cmp	r3, #12
 800ddfa:	d82d      	bhi.n	800de58 <UART_SetConfig+0x14c>
 800ddfc:	a201      	add	r2, pc, #4	; (adr r2, 800de04 <UART_SetConfig+0xf8>)
 800ddfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de02:	bf00      	nop
 800de04:	0800de39 	.word	0x0800de39
 800de08:	0800de59 	.word	0x0800de59
 800de0c:	0800de59 	.word	0x0800de59
 800de10:	0800de59 	.word	0x0800de59
 800de14:	0800de49 	.word	0x0800de49
 800de18:	0800de59 	.word	0x0800de59
 800de1c:	0800de59 	.word	0x0800de59
 800de20:	0800de59 	.word	0x0800de59
 800de24:	0800de41 	.word	0x0800de41
 800de28:	0800de59 	.word	0x0800de59
 800de2c:	0800de59 	.word	0x0800de59
 800de30:	0800de59 	.word	0x0800de59
 800de34:	0800de51 	.word	0x0800de51
 800de38:	2300      	movs	r3, #0
 800de3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800de3e:	e0d8      	b.n	800dff2 <UART_SetConfig+0x2e6>
 800de40:	2302      	movs	r3, #2
 800de42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800de46:	e0d4      	b.n	800dff2 <UART_SetConfig+0x2e6>
 800de48:	2304      	movs	r3, #4
 800de4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800de4e:	e0d0      	b.n	800dff2 <UART_SetConfig+0x2e6>
 800de50:	2308      	movs	r3, #8
 800de52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800de56:	e0cc      	b.n	800dff2 <UART_SetConfig+0x2e6>
 800de58:	2310      	movs	r3, #16
 800de5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800de5e:	e0c8      	b.n	800dff2 <UART_SetConfig+0x2e6>
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	4a5e      	ldr	r2, [pc, #376]	; (800dfe0 <UART_SetConfig+0x2d4>)
 800de66:	4293      	cmp	r3, r2
 800de68:	d125      	bne.n	800deb6 <UART_SetConfig+0x1aa>
 800de6a:	4b5b      	ldr	r3, [pc, #364]	; (800dfd8 <UART_SetConfig+0x2cc>)
 800de6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800de70:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800de74:	2b30      	cmp	r3, #48	; 0x30
 800de76:	d016      	beq.n	800dea6 <UART_SetConfig+0x19a>
 800de78:	2b30      	cmp	r3, #48	; 0x30
 800de7a:	d818      	bhi.n	800deae <UART_SetConfig+0x1a2>
 800de7c:	2b20      	cmp	r3, #32
 800de7e:	d00a      	beq.n	800de96 <UART_SetConfig+0x18a>
 800de80:	2b20      	cmp	r3, #32
 800de82:	d814      	bhi.n	800deae <UART_SetConfig+0x1a2>
 800de84:	2b00      	cmp	r3, #0
 800de86:	d002      	beq.n	800de8e <UART_SetConfig+0x182>
 800de88:	2b10      	cmp	r3, #16
 800de8a:	d008      	beq.n	800de9e <UART_SetConfig+0x192>
 800de8c:	e00f      	b.n	800deae <UART_SetConfig+0x1a2>
 800de8e:	2300      	movs	r3, #0
 800de90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800de94:	e0ad      	b.n	800dff2 <UART_SetConfig+0x2e6>
 800de96:	2302      	movs	r3, #2
 800de98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800de9c:	e0a9      	b.n	800dff2 <UART_SetConfig+0x2e6>
 800de9e:	2304      	movs	r3, #4
 800dea0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800dea4:	e0a5      	b.n	800dff2 <UART_SetConfig+0x2e6>
 800dea6:	2308      	movs	r3, #8
 800dea8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800deac:	e0a1      	b.n	800dff2 <UART_SetConfig+0x2e6>
 800deae:	2310      	movs	r3, #16
 800deb0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800deb4:	e09d      	b.n	800dff2 <UART_SetConfig+0x2e6>
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	4a4a      	ldr	r2, [pc, #296]	; (800dfe4 <UART_SetConfig+0x2d8>)
 800debc:	4293      	cmp	r3, r2
 800debe:	d125      	bne.n	800df0c <UART_SetConfig+0x200>
 800dec0:	4b45      	ldr	r3, [pc, #276]	; (800dfd8 <UART_SetConfig+0x2cc>)
 800dec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dec6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800deca:	2bc0      	cmp	r3, #192	; 0xc0
 800decc:	d016      	beq.n	800defc <UART_SetConfig+0x1f0>
 800dece:	2bc0      	cmp	r3, #192	; 0xc0
 800ded0:	d818      	bhi.n	800df04 <UART_SetConfig+0x1f8>
 800ded2:	2b80      	cmp	r3, #128	; 0x80
 800ded4:	d00a      	beq.n	800deec <UART_SetConfig+0x1e0>
 800ded6:	2b80      	cmp	r3, #128	; 0x80
 800ded8:	d814      	bhi.n	800df04 <UART_SetConfig+0x1f8>
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d002      	beq.n	800dee4 <UART_SetConfig+0x1d8>
 800dede:	2b40      	cmp	r3, #64	; 0x40
 800dee0:	d008      	beq.n	800def4 <UART_SetConfig+0x1e8>
 800dee2:	e00f      	b.n	800df04 <UART_SetConfig+0x1f8>
 800dee4:	2300      	movs	r3, #0
 800dee6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800deea:	e082      	b.n	800dff2 <UART_SetConfig+0x2e6>
 800deec:	2302      	movs	r3, #2
 800deee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800def2:	e07e      	b.n	800dff2 <UART_SetConfig+0x2e6>
 800def4:	2304      	movs	r3, #4
 800def6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800defa:	e07a      	b.n	800dff2 <UART_SetConfig+0x2e6>
 800defc:	2308      	movs	r3, #8
 800defe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800df02:	e076      	b.n	800dff2 <UART_SetConfig+0x2e6>
 800df04:	2310      	movs	r3, #16
 800df06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800df0a:	e072      	b.n	800dff2 <UART_SetConfig+0x2e6>
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	4a35      	ldr	r2, [pc, #212]	; (800dfe8 <UART_SetConfig+0x2dc>)
 800df12:	4293      	cmp	r3, r2
 800df14:	d12a      	bne.n	800df6c <UART_SetConfig+0x260>
 800df16:	4b30      	ldr	r3, [pc, #192]	; (800dfd8 <UART_SetConfig+0x2cc>)
 800df18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800df1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800df20:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800df24:	d01a      	beq.n	800df5c <UART_SetConfig+0x250>
 800df26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800df2a:	d81b      	bhi.n	800df64 <UART_SetConfig+0x258>
 800df2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800df30:	d00c      	beq.n	800df4c <UART_SetConfig+0x240>
 800df32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800df36:	d815      	bhi.n	800df64 <UART_SetConfig+0x258>
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d003      	beq.n	800df44 <UART_SetConfig+0x238>
 800df3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800df40:	d008      	beq.n	800df54 <UART_SetConfig+0x248>
 800df42:	e00f      	b.n	800df64 <UART_SetConfig+0x258>
 800df44:	2300      	movs	r3, #0
 800df46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800df4a:	e052      	b.n	800dff2 <UART_SetConfig+0x2e6>
 800df4c:	2302      	movs	r3, #2
 800df4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800df52:	e04e      	b.n	800dff2 <UART_SetConfig+0x2e6>
 800df54:	2304      	movs	r3, #4
 800df56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800df5a:	e04a      	b.n	800dff2 <UART_SetConfig+0x2e6>
 800df5c:	2308      	movs	r3, #8
 800df5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800df62:	e046      	b.n	800dff2 <UART_SetConfig+0x2e6>
 800df64:	2310      	movs	r3, #16
 800df66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800df6a:	e042      	b.n	800dff2 <UART_SetConfig+0x2e6>
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	4a17      	ldr	r2, [pc, #92]	; (800dfd0 <UART_SetConfig+0x2c4>)
 800df72:	4293      	cmp	r3, r2
 800df74:	d13a      	bne.n	800dfec <UART_SetConfig+0x2e0>
 800df76:	4b18      	ldr	r3, [pc, #96]	; (800dfd8 <UART_SetConfig+0x2cc>)
 800df78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800df7c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800df80:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800df84:	d01a      	beq.n	800dfbc <UART_SetConfig+0x2b0>
 800df86:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800df8a:	d81b      	bhi.n	800dfc4 <UART_SetConfig+0x2b8>
 800df8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800df90:	d00c      	beq.n	800dfac <UART_SetConfig+0x2a0>
 800df92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800df96:	d815      	bhi.n	800dfc4 <UART_SetConfig+0x2b8>
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d003      	beq.n	800dfa4 <UART_SetConfig+0x298>
 800df9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dfa0:	d008      	beq.n	800dfb4 <UART_SetConfig+0x2a8>
 800dfa2:	e00f      	b.n	800dfc4 <UART_SetConfig+0x2b8>
 800dfa4:	2300      	movs	r3, #0
 800dfa6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800dfaa:	e022      	b.n	800dff2 <UART_SetConfig+0x2e6>
 800dfac:	2302      	movs	r3, #2
 800dfae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800dfb2:	e01e      	b.n	800dff2 <UART_SetConfig+0x2e6>
 800dfb4:	2304      	movs	r3, #4
 800dfb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800dfba:	e01a      	b.n	800dff2 <UART_SetConfig+0x2e6>
 800dfbc:	2308      	movs	r3, #8
 800dfbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800dfc2:	e016      	b.n	800dff2 <UART_SetConfig+0x2e6>
 800dfc4:	2310      	movs	r3, #16
 800dfc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800dfca:	e012      	b.n	800dff2 <UART_SetConfig+0x2e6>
 800dfcc:	efff69f3 	.word	0xefff69f3
 800dfd0:	40008000 	.word	0x40008000
 800dfd4:	40013800 	.word	0x40013800
 800dfd8:	40021000 	.word	0x40021000
 800dfdc:	40004400 	.word	0x40004400
 800dfe0:	40004800 	.word	0x40004800
 800dfe4:	40004c00 	.word	0x40004c00
 800dfe8:	40005000 	.word	0x40005000
 800dfec:	2310      	movs	r3, #16
 800dfee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	4a9f      	ldr	r2, [pc, #636]	; (800e274 <UART_SetConfig+0x568>)
 800dff8:	4293      	cmp	r3, r2
 800dffa:	d17a      	bne.n	800e0f2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800dffc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e000:	2b08      	cmp	r3, #8
 800e002:	d824      	bhi.n	800e04e <UART_SetConfig+0x342>
 800e004:	a201      	add	r2, pc, #4	; (adr r2, 800e00c <UART_SetConfig+0x300>)
 800e006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e00a:	bf00      	nop
 800e00c:	0800e031 	.word	0x0800e031
 800e010:	0800e04f 	.word	0x0800e04f
 800e014:	0800e039 	.word	0x0800e039
 800e018:	0800e04f 	.word	0x0800e04f
 800e01c:	0800e03f 	.word	0x0800e03f
 800e020:	0800e04f 	.word	0x0800e04f
 800e024:	0800e04f 	.word	0x0800e04f
 800e028:	0800e04f 	.word	0x0800e04f
 800e02c:	0800e047 	.word	0x0800e047
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e030:	f7fc f85e 	bl	800a0f0 <HAL_RCC_GetPCLK1Freq>
 800e034:	61f8      	str	r0, [r7, #28]
        break;
 800e036:	e010      	b.n	800e05a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e038:	4b8f      	ldr	r3, [pc, #572]	; (800e278 <UART_SetConfig+0x56c>)
 800e03a:	61fb      	str	r3, [r7, #28]
        break;
 800e03c:	e00d      	b.n	800e05a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e03e:	f7fb ffbf 	bl	8009fc0 <HAL_RCC_GetSysClockFreq>
 800e042:	61f8      	str	r0, [r7, #28]
        break;
 800e044:	e009      	b.n	800e05a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e046:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e04a:	61fb      	str	r3, [r7, #28]
        break;
 800e04c:	e005      	b.n	800e05a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800e04e:	2300      	movs	r3, #0
 800e050:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800e052:	2301      	movs	r3, #1
 800e054:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800e058:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e05a:	69fb      	ldr	r3, [r7, #28]
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	f000 80fb 	beq.w	800e258 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	685a      	ldr	r2, [r3, #4]
 800e066:	4613      	mov	r3, r2
 800e068:	005b      	lsls	r3, r3, #1
 800e06a:	4413      	add	r3, r2
 800e06c:	69fa      	ldr	r2, [r7, #28]
 800e06e:	429a      	cmp	r2, r3
 800e070:	d305      	bcc.n	800e07e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	685b      	ldr	r3, [r3, #4]
 800e076:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800e078:	69fa      	ldr	r2, [r7, #28]
 800e07a:	429a      	cmp	r2, r3
 800e07c:	d903      	bls.n	800e086 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800e07e:	2301      	movs	r3, #1
 800e080:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800e084:	e0e8      	b.n	800e258 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800e086:	69fb      	ldr	r3, [r7, #28]
 800e088:	2200      	movs	r2, #0
 800e08a:	461c      	mov	r4, r3
 800e08c:	4615      	mov	r5, r2
 800e08e:	f04f 0200 	mov.w	r2, #0
 800e092:	f04f 0300 	mov.w	r3, #0
 800e096:	022b      	lsls	r3, r5, #8
 800e098:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800e09c:	0222      	lsls	r2, r4, #8
 800e09e:	68f9      	ldr	r1, [r7, #12]
 800e0a0:	6849      	ldr	r1, [r1, #4]
 800e0a2:	0849      	lsrs	r1, r1, #1
 800e0a4:	2000      	movs	r0, #0
 800e0a6:	4688      	mov	r8, r1
 800e0a8:	4681      	mov	r9, r0
 800e0aa:	eb12 0a08 	adds.w	sl, r2, r8
 800e0ae:	eb43 0b09 	adc.w	fp, r3, r9
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	685b      	ldr	r3, [r3, #4]
 800e0b6:	2200      	movs	r2, #0
 800e0b8:	603b      	str	r3, [r7, #0]
 800e0ba:	607a      	str	r2, [r7, #4]
 800e0bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e0c0:	4650      	mov	r0, sl
 800e0c2:	4659      	mov	r1, fp
 800e0c4:	f7f2 fe30 	bl	8000d28 <__aeabi_uldivmod>
 800e0c8:	4602      	mov	r2, r0
 800e0ca:	460b      	mov	r3, r1
 800e0cc:	4613      	mov	r3, r2
 800e0ce:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e0d0:	69bb      	ldr	r3, [r7, #24]
 800e0d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e0d6:	d308      	bcc.n	800e0ea <UART_SetConfig+0x3de>
 800e0d8:	69bb      	ldr	r3, [r7, #24]
 800e0da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e0de:	d204      	bcs.n	800e0ea <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	69ba      	ldr	r2, [r7, #24]
 800e0e6:	60da      	str	r2, [r3, #12]
 800e0e8:	e0b6      	b.n	800e258 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800e0ea:	2301      	movs	r3, #1
 800e0ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800e0f0:	e0b2      	b.n	800e258 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	69db      	ldr	r3, [r3, #28]
 800e0f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e0fa:	d15e      	bne.n	800e1ba <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800e0fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e100:	2b08      	cmp	r3, #8
 800e102:	d828      	bhi.n	800e156 <UART_SetConfig+0x44a>
 800e104:	a201      	add	r2, pc, #4	; (adr r2, 800e10c <UART_SetConfig+0x400>)
 800e106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e10a:	bf00      	nop
 800e10c:	0800e131 	.word	0x0800e131
 800e110:	0800e139 	.word	0x0800e139
 800e114:	0800e141 	.word	0x0800e141
 800e118:	0800e157 	.word	0x0800e157
 800e11c:	0800e147 	.word	0x0800e147
 800e120:	0800e157 	.word	0x0800e157
 800e124:	0800e157 	.word	0x0800e157
 800e128:	0800e157 	.word	0x0800e157
 800e12c:	0800e14f 	.word	0x0800e14f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e130:	f7fb ffde 	bl	800a0f0 <HAL_RCC_GetPCLK1Freq>
 800e134:	61f8      	str	r0, [r7, #28]
        break;
 800e136:	e014      	b.n	800e162 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e138:	f7fb fff0 	bl	800a11c <HAL_RCC_GetPCLK2Freq>
 800e13c:	61f8      	str	r0, [r7, #28]
        break;
 800e13e:	e010      	b.n	800e162 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e140:	4b4d      	ldr	r3, [pc, #308]	; (800e278 <UART_SetConfig+0x56c>)
 800e142:	61fb      	str	r3, [r7, #28]
        break;
 800e144:	e00d      	b.n	800e162 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e146:	f7fb ff3b 	bl	8009fc0 <HAL_RCC_GetSysClockFreq>
 800e14a:	61f8      	str	r0, [r7, #28]
        break;
 800e14c:	e009      	b.n	800e162 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e14e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e152:	61fb      	str	r3, [r7, #28]
        break;
 800e154:	e005      	b.n	800e162 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800e156:	2300      	movs	r3, #0
 800e158:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800e15a:	2301      	movs	r3, #1
 800e15c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800e160:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e162:	69fb      	ldr	r3, [r7, #28]
 800e164:	2b00      	cmp	r3, #0
 800e166:	d077      	beq.n	800e258 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800e168:	69fb      	ldr	r3, [r7, #28]
 800e16a:	005a      	lsls	r2, r3, #1
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	685b      	ldr	r3, [r3, #4]
 800e170:	085b      	lsrs	r3, r3, #1
 800e172:	441a      	add	r2, r3
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	685b      	ldr	r3, [r3, #4]
 800e178:	fbb2 f3f3 	udiv	r3, r2, r3
 800e17c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e17e:	69bb      	ldr	r3, [r7, #24]
 800e180:	2b0f      	cmp	r3, #15
 800e182:	d916      	bls.n	800e1b2 <UART_SetConfig+0x4a6>
 800e184:	69bb      	ldr	r3, [r7, #24]
 800e186:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e18a:	d212      	bcs.n	800e1b2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e18c:	69bb      	ldr	r3, [r7, #24]
 800e18e:	b29b      	uxth	r3, r3
 800e190:	f023 030f 	bic.w	r3, r3, #15
 800e194:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e196:	69bb      	ldr	r3, [r7, #24]
 800e198:	085b      	lsrs	r3, r3, #1
 800e19a:	b29b      	uxth	r3, r3
 800e19c:	f003 0307 	and.w	r3, r3, #7
 800e1a0:	b29a      	uxth	r2, r3
 800e1a2:	8afb      	ldrh	r3, [r7, #22]
 800e1a4:	4313      	orrs	r3, r2
 800e1a6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	8afa      	ldrh	r2, [r7, #22]
 800e1ae:	60da      	str	r2, [r3, #12]
 800e1b0:	e052      	b.n	800e258 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800e1b2:	2301      	movs	r3, #1
 800e1b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800e1b8:	e04e      	b.n	800e258 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e1ba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e1be:	2b08      	cmp	r3, #8
 800e1c0:	d827      	bhi.n	800e212 <UART_SetConfig+0x506>
 800e1c2:	a201      	add	r2, pc, #4	; (adr r2, 800e1c8 <UART_SetConfig+0x4bc>)
 800e1c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1c8:	0800e1ed 	.word	0x0800e1ed
 800e1cc:	0800e1f5 	.word	0x0800e1f5
 800e1d0:	0800e1fd 	.word	0x0800e1fd
 800e1d4:	0800e213 	.word	0x0800e213
 800e1d8:	0800e203 	.word	0x0800e203
 800e1dc:	0800e213 	.word	0x0800e213
 800e1e0:	0800e213 	.word	0x0800e213
 800e1e4:	0800e213 	.word	0x0800e213
 800e1e8:	0800e20b 	.word	0x0800e20b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e1ec:	f7fb ff80 	bl	800a0f0 <HAL_RCC_GetPCLK1Freq>
 800e1f0:	61f8      	str	r0, [r7, #28]
        break;
 800e1f2:	e014      	b.n	800e21e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e1f4:	f7fb ff92 	bl	800a11c <HAL_RCC_GetPCLK2Freq>
 800e1f8:	61f8      	str	r0, [r7, #28]
        break;
 800e1fa:	e010      	b.n	800e21e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e1fc:	4b1e      	ldr	r3, [pc, #120]	; (800e278 <UART_SetConfig+0x56c>)
 800e1fe:	61fb      	str	r3, [r7, #28]
        break;
 800e200:	e00d      	b.n	800e21e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e202:	f7fb fedd 	bl	8009fc0 <HAL_RCC_GetSysClockFreq>
 800e206:	61f8      	str	r0, [r7, #28]
        break;
 800e208:	e009      	b.n	800e21e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e20a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e20e:	61fb      	str	r3, [r7, #28]
        break;
 800e210:	e005      	b.n	800e21e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800e212:	2300      	movs	r3, #0
 800e214:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800e216:	2301      	movs	r3, #1
 800e218:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800e21c:	bf00      	nop
    }

    if (pclk != 0U)
 800e21e:	69fb      	ldr	r3, [r7, #28]
 800e220:	2b00      	cmp	r3, #0
 800e222:	d019      	beq.n	800e258 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	685b      	ldr	r3, [r3, #4]
 800e228:	085a      	lsrs	r2, r3, #1
 800e22a:	69fb      	ldr	r3, [r7, #28]
 800e22c:	441a      	add	r2, r3
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	685b      	ldr	r3, [r3, #4]
 800e232:	fbb2 f3f3 	udiv	r3, r2, r3
 800e236:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e238:	69bb      	ldr	r3, [r7, #24]
 800e23a:	2b0f      	cmp	r3, #15
 800e23c:	d909      	bls.n	800e252 <UART_SetConfig+0x546>
 800e23e:	69bb      	ldr	r3, [r7, #24]
 800e240:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e244:	d205      	bcs.n	800e252 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e246:	69bb      	ldr	r3, [r7, #24]
 800e248:	b29a      	uxth	r2, r3
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	60da      	str	r2, [r3, #12]
 800e250:	e002      	b.n	800e258 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800e252:	2301      	movs	r3, #1
 800e254:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	2200      	movs	r2, #0
 800e25c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	2200      	movs	r2, #0
 800e262:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800e264:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800e268:	4618      	mov	r0, r3
 800e26a:	3728      	adds	r7, #40	; 0x28
 800e26c:	46bd      	mov	sp, r7
 800e26e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e272:	bf00      	nop
 800e274:	40008000 	.word	0x40008000
 800e278:	00f42400 	.word	0x00f42400

0800e27c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e27c:	b480      	push	{r7}
 800e27e:	b083      	sub	sp, #12
 800e280:	af00      	add	r7, sp, #0
 800e282:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e288:	f003 0301 	and.w	r3, r3, #1
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d00a      	beq.n	800e2a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	685b      	ldr	r3, [r3, #4]
 800e296:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	430a      	orrs	r2, r1
 800e2a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2aa:	f003 0302 	and.w	r3, r3, #2
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d00a      	beq.n	800e2c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	685b      	ldr	r3, [r3, #4]
 800e2b8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	430a      	orrs	r2, r1
 800e2c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2cc:	f003 0304 	and.w	r3, r3, #4
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d00a      	beq.n	800e2ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	685b      	ldr	r3, [r3, #4]
 800e2da:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	430a      	orrs	r2, r1
 800e2e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2ee:	f003 0308 	and.w	r3, r3, #8
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d00a      	beq.n	800e30c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	685b      	ldr	r3, [r3, #4]
 800e2fc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	430a      	orrs	r2, r1
 800e30a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e310:	f003 0310 	and.w	r3, r3, #16
 800e314:	2b00      	cmp	r3, #0
 800e316:	d00a      	beq.n	800e32e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	689b      	ldr	r3, [r3, #8]
 800e31e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	430a      	orrs	r2, r1
 800e32c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e332:	f003 0320 	and.w	r3, r3, #32
 800e336:	2b00      	cmp	r3, #0
 800e338:	d00a      	beq.n	800e350 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	689b      	ldr	r3, [r3, #8]
 800e340:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	430a      	orrs	r2, r1
 800e34e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d01a      	beq.n	800e392 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	685b      	ldr	r3, [r3, #4]
 800e362:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	430a      	orrs	r2, r1
 800e370:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e376:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e37a:	d10a      	bne.n	800e392 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	685b      	ldr	r3, [r3, #4]
 800e382:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	430a      	orrs	r2, r1
 800e390:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e396:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d00a      	beq.n	800e3b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	685b      	ldr	r3, [r3, #4]
 800e3a4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	430a      	orrs	r2, r1
 800e3b2:	605a      	str	r2, [r3, #4]
  }
}
 800e3b4:	bf00      	nop
 800e3b6:	370c      	adds	r7, #12
 800e3b8:	46bd      	mov	sp, r7
 800e3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3be:	4770      	bx	lr

0800e3c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e3c0:	b580      	push	{r7, lr}
 800e3c2:	b086      	sub	sp, #24
 800e3c4:	af02      	add	r7, sp, #8
 800e3c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	2200      	movs	r2, #0
 800e3cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e3d0:	f7f8 fd7c 	bl	8006ecc <HAL_GetTick>
 800e3d4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	f003 0308 	and.w	r3, r3, #8
 800e3e0:	2b08      	cmp	r3, #8
 800e3e2:	d10e      	bne.n	800e402 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e3e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e3e8:	9300      	str	r3, [sp, #0]
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	2200      	movs	r2, #0
 800e3ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e3f2:	6878      	ldr	r0, [r7, #4]
 800e3f4:	f000 f82d 	bl	800e452 <UART_WaitOnFlagUntilTimeout>
 800e3f8:	4603      	mov	r3, r0
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d001      	beq.n	800e402 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e3fe:	2303      	movs	r3, #3
 800e400:	e023      	b.n	800e44a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	f003 0304 	and.w	r3, r3, #4
 800e40c:	2b04      	cmp	r3, #4
 800e40e:	d10e      	bne.n	800e42e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e410:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e414:	9300      	str	r3, [sp, #0]
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	2200      	movs	r2, #0
 800e41a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e41e:	6878      	ldr	r0, [r7, #4]
 800e420:	f000 f817 	bl	800e452 <UART_WaitOnFlagUntilTimeout>
 800e424:	4603      	mov	r3, r0
 800e426:	2b00      	cmp	r3, #0
 800e428:	d001      	beq.n	800e42e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e42a:	2303      	movs	r3, #3
 800e42c:	e00d      	b.n	800e44a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	2220      	movs	r2, #32
 800e432:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	2220      	movs	r2, #32
 800e438:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	2200      	movs	r2, #0
 800e43e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	2200      	movs	r2, #0
 800e444:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800e448:	2300      	movs	r3, #0
}
 800e44a:	4618      	mov	r0, r3
 800e44c:	3710      	adds	r7, #16
 800e44e:	46bd      	mov	sp, r7
 800e450:	bd80      	pop	{r7, pc}

0800e452 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e452:	b580      	push	{r7, lr}
 800e454:	b09c      	sub	sp, #112	; 0x70
 800e456:	af00      	add	r7, sp, #0
 800e458:	60f8      	str	r0, [r7, #12]
 800e45a:	60b9      	str	r1, [r7, #8]
 800e45c:	603b      	str	r3, [r7, #0]
 800e45e:	4613      	mov	r3, r2
 800e460:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e462:	e0a5      	b.n	800e5b0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e464:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e466:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e46a:	f000 80a1 	beq.w	800e5b0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e46e:	f7f8 fd2d 	bl	8006ecc <HAL_GetTick>
 800e472:	4602      	mov	r2, r0
 800e474:	683b      	ldr	r3, [r7, #0]
 800e476:	1ad3      	subs	r3, r2, r3
 800e478:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e47a:	429a      	cmp	r2, r3
 800e47c:	d302      	bcc.n	800e484 <UART_WaitOnFlagUntilTimeout+0x32>
 800e47e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e480:	2b00      	cmp	r3, #0
 800e482:	d13e      	bne.n	800e502 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e48a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e48c:	e853 3f00 	ldrex	r3, [r3]
 800e490:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800e492:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e494:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e498:	667b      	str	r3, [r7, #100]	; 0x64
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	461a      	mov	r2, r3
 800e4a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e4a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e4a4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4a6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e4a8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e4aa:	e841 2300 	strex	r3, r2, [r1]
 800e4ae:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800e4b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d1e6      	bne.n	800e484 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	3308      	adds	r3, #8
 800e4bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e4c0:	e853 3f00 	ldrex	r3, [r3]
 800e4c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e4c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4c8:	f023 0301 	bic.w	r3, r3, #1
 800e4cc:	663b      	str	r3, [r7, #96]	; 0x60
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	3308      	adds	r3, #8
 800e4d4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e4d6:	64ba      	str	r2, [r7, #72]	; 0x48
 800e4d8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4da:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e4dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e4de:	e841 2300 	strex	r3, r2, [r1]
 800e4e2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e4e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d1e5      	bne.n	800e4b6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	2220      	movs	r2, #32
 800e4ee:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	2220      	movs	r2, #32
 800e4f4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	2200      	movs	r2, #0
 800e4fa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800e4fe:	2303      	movs	r3, #3
 800e500:	e067      	b.n	800e5d2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	f003 0304 	and.w	r3, r3, #4
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d04f      	beq.n	800e5b0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	69db      	ldr	r3, [r3, #28]
 800e516:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e51a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e51e:	d147      	bne.n	800e5b0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e528:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e532:	e853 3f00 	ldrex	r3, [r3]
 800e536:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e53a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e53e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	461a      	mov	r2, r3
 800e546:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e548:	637b      	str	r3, [r7, #52]	; 0x34
 800e54a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e54c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e54e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e550:	e841 2300 	strex	r3, r2, [r1]
 800e554:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d1e6      	bne.n	800e52a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	3308      	adds	r3, #8
 800e562:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e564:	697b      	ldr	r3, [r7, #20]
 800e566:	e853 3f00 	ldrex	r3, [r3]
 800e56a:	613b      	str	r3, [r7, #16]
   return(result);
 800e56c:	693b      	ldr	r3, [r7, #16]
 800e56e:	f023 0301 	bic.w	r3, r3, #1
 800e572:	66bb      	str	r3, [r7, #104]	; 0x68
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	3308      	adds	r3, #8
 800e57a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e57c:	623a      	str	r2, [r7, #32]
 800e57e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e580:	69f9      	ldr	r1, [r7, #28]
 800e582:	6a3a      	ldr	r2, [r7, #32]
 800e584:	e841 2300 	strex	r3, r2, [r1]
 800e588:	61bb      	str	r3, [r7, #24]
   return(result);
 800e58a:	69bb      	ldr	r3, [r7, #24]
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d1e5      	bne.n	800e55c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	2220      	movs	r2, #32
 800e594:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	2220      	movs	r2, #32
 800e59a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	2220      	movs	r2, #32
 800e5a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	2200      	movs	r2, #0
 800e5a8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800e5ac:	2303      	movs	r3, #3
 800e5ae:	e010      	b.n	800e5d2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	69da      	ldr	r2, [r3, #28]
 800e5b6:	68bb      	ldr	r3, [r7, #8]
 800e5b8:	4013      	ands	r3, r2
 800e5ba:	68ba      	ldr	r2, [r7, #8]
 800e5bc:	429a      	cmp	r2, r3
 800e5be:	bf0c      	ite	eq
 800e5c0:	2301      	moveq	r3, #1
 800e5c2:	2300      	movne	r3, #0
 800e5c4:	b2db      	uxtb	r3, r3
 800e5c6:	461a      	mov	r2, r3
 800e5c8:	79fb      	ldrb	r3, [r7, #7]
 800e5ca:	429a      	cmp	r2, r3
 800e5cc:	f43f af4a 	beq.w	800e464 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e5d0:	2300      	movs	r3, #0
}
 800e5d2:	4618      	mov	r0, r3
 800e5d4:	3770      	adds	r7, #112	; 0x70
 800e5d6:	46bd      	mov	sp, r7
 800e5d8:	bd80      	pop	{r7, pc}
	...

0800e5dc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e5dc:	b480      	push	{r7}
 800e5de:	b097      	sub	sp, #92	; 0x5c
 800e5e0:	af00      	add	r7, sp, #0
 800e5e2:	60f8      	str	r0, [r7, #12]
 800e5e4:	60b9      	str	r1, [r7, #8]
 800e5e6:	4613      	mov	r3, r2
 800e5e8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	68ba      	ldr	r2, [r7, #8]
 800e5ee:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	88fa      	ldrh	r2, [r7, #6]
 800e5f4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	88fa      	ldrh	r2, [r7, #6]
 800e5fc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	2200      	movs	r2, #0
 800e604:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	689b      	ldr	r3, [r3, #8]
 800e60a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e60e:	d10e      	bne.n	800e62e <UART_Start_Receive_IT+0x52>
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	691b      	ldr	r3, [r3, #16]
 800e614:	2b00      	cmp	r3, #0
 800e616:	d105      	bne.n	800e624 <UART_Start_Receive_IT+0x48>
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800e61e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800e622:	e02d      	b.n	800e680 <UART_Start_Receive_IT+0xa4>
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	22ff      	movs	r2, #255	; 0xff
 800e628:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800e62c:	e028      	b.n	800e680 <UART_Start_Receive_IT+0xa4>
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	689b      	ldr	r3, [r3, #8]
 800e632:	2b00      	cmp	r3, #0
 800e634:	d10d      	bne.n	800e652 <UART_Start_Receive_IT+0x76>
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	691b      	ldr	r3, [r3, #16]
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d104      	bne.n	800e648 <UART_Start_Receive_IT+0x6c>
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	22ff      	movs	r2, #255	; 0xff
 800e642:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800e646:	e01b      	b.n	800e680 <UART_Start_Receive_IT+0xa4>
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	227f      	movs	r2, #127	; 0x7f
 800e64c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800e650:	e016      	b.n	800e680 <UART_Start_Receive_IT+0xa4>
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	689b      	ldr	r3, [r3, #8]
 800e656:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e65a:	d10d      	bne.n	800e678 <UART_Start_Receive_IT+0x9c>
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	691b      	ldr	r3, [r3, #16]
 800e660:	2b00      	cmp	r3, #0
 800e662:	d104      	bne.n	800e66e <UART_Start_Receive_IT+0x92>
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	227f      	movs	r2, #127	; 0x7f
 800e668:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800e66c:	e008      	b.n	800e680 <UART_Start_Receive_IT+0xa4>
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	223f      	movs	r2, #63	; 0x3f
 800e672:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800e676:	e003      	b.n	800e680 <UART_Start_Receive_IT+0xa4>
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	2200      	movs	r2, #0
 800e67c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	2200      	movs	r2, #0
 800e684:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	2222      	movs	r2, #34	; 0x22
 800e68c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	3308      	adds	r3, #8
 800e694:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e696:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e698:	e853 3f00 	ldrex	r3, [r3]
 800e69c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e69e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6a0:	f043 0301 	orr.w	r3, r3, #1
 800e6a4:	657b      	str	r3, [r7, #84]	; 0x54
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	3308      	adds	r3, #8
 800e6ac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e6ae:	64ba      	str	r2, [r7, #72]	; 0x48
 800e6b0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6b2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e6b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e6b6:	e841 2300 	strex	r3, r2, [r1]
 800e6ba:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e6bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d1e5      	bne.n	800e68e <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	689b      	ldr	r3, [r3, #8]
 800e6c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e6ca:	d107      	bne.n	800e6dc <UART_Start_Receive_IT+0x100>
 800e6cc:	68fb      	ldr	r3, [r7, #12]
 800e6ce:	691b      	ldr	r3, [r3, #16]
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d103      	bne.n	800e6dc <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	4a24      	ldr	r2, [pc, #144]	; (800e768 <UART_Start_Receive_IT+0x18c>)
 800e6d8:	665a      	str	r2, [r3, #100]	; 0x64
 800e6da:	e002      	b.n	800e6e2 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	4a23      	ldr	r2, [pc, #140]	; (800e76c <UART_Start_Receive_IT+0x190>)
 800e6e0:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	2200      	movs	r2, #0
 800e6e6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	691b      	ldr	r3, [r3, #16]
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d019      	beq.n	800e726 <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6fa:	e853 3f00 	ldrex	r3, [r3]
 800e6fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e702:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800e706:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	461a      	mov	r2, r3
 800e70e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e710:	637b      	str	r3, [r7, #52]	; 0x34
 800e712:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e714:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e716:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e718:	e841 2300 	strex	r3, r2, [r1]
 800e71c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e71e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e720:	2b00      	cmp	r3, #0
 800e722:	d1e6      	bne.n	800e6f2 <UART_Start_Receive_IT+0x116>
 800e724:	e018      	b.n	800e758 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e72c:	697b      	ldr	r3, [r7, #20]
 800e72e:	e853 3f00 	ldrex	r3, [r3]
 800e732:	613b      	str	r3, [r7, #16]
   return(result);
 800e734:	693b      	ldr	r3, [r7, #16]
 800e736:	f043 0320 	orr.w	r3, r3, #32
 800e73a:	653b      	str	r3, [r7, #80]	; 0x50
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	461a      	mov	r2, r3
 800e742:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e744:	623b      	str	r3, [r7, #32]
 800e746:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e748:	69f9      	ldr	r1, [r7, #28]
 800e74a:	6a3a      	ldr	r2, [r7, #32]
 800e74c:	e841 2300 	strex	r3, r2, [r1]
 800e750:	61bb      	str	r3, [r7, #24]
   return(result);
 800e752:	69bb      	ldr	r3, [r7, #24]
 800e754:	2b00      	cmp	r3, #0
 800e756:	d1e6      	bne.n	800e726 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800e758:	2300      	movs	r3, #0
}
 800e75a:	4618      	mov	r0, r3
 800e75c:	375c      	adds	r7, #92	; 0x5c
 800e75e:	46bd      	mov	sp, r7
 800e760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e764:	4770      	bx	lr
 800e766:	bf00      	nop
 800e768:	0800eb95 	.word	0x0800eb95
 800e76c:	0800ea35 	.word	0x0800ea35

0800e770 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800e770:	b480      	push	{r7}
 800e772:	b089      	sub	sp, #36	; 0x24
 800e774:	af00      	add	r7, sp, #0
 800e776:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	e853 3f00 	ldrex	r3, [r3]
 800e784:	60bb      	str	r3, [r7, #8]
   return(result);
 800e786:	68bb      	ldr	r3, [r7, #8]
 800e788:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800e78c:	61fb      	str	r3, [r7, #28]
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	461a      	mov	r2, r3
 800e794:	69fb      	ldr	r3, [r7, #28]
 800e796:	61bb      	str	r3, [r7, #24]
 800e798:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e79a:	6979      	ldr	r1, [r7, #20]
 800e79c:	69ba      	ldr	r2, [r7, #24]
 800e79e:	e841 2300 	strex	r3, r2, [r1]
 800e7a2:	613b      	str	r3, [r7, #16]
   return(result);
 800e7a4:	693b      	ldr	r3, [r7, #16]
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d1e6      	bne.n	800e778 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	2220      	movs	r2, #32
 800e7ae:	679a      	str	r2, [r3, #120]	; 0x78
}
 800e7b0:	bf00      	nop
 800e7b2:	3724      	adds	r7, #36	; 0x24
 800e7b4:	46bd      	mov	sp, r7
 800e7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ba:	4770      	bx	lr

0800e7bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e7bc:	b480      	push	{r7}
 800e7be:	b095      	sub	sp, #84	; 0x54
 800e7c0:	af00      	add	r7, sp, #0
 800e7c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7cc:	e853 3f00 	ldrex	r3, [r3]
 800e7d0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e7d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e7d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	461a      	mov	r2, r3
 800e7e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e7e2:	643b      	str	r3, [r7, #64]	; 0x40
 800e7e4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7e6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e7e8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e7ea:	e841 2300 	strex	r3, r2, [r1]
 800e7ee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e7f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d1e6      	bne.n	800e7c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	3308      	adds	r3, #8
 800e7fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7fe:	6a3b      	ldr	r3, [r7, #32]
 800e800:	e853 3f00 	ldrex	r3, [r3]
 800e804:	61fb      	str	r3, [r7, #28]
   return(result);
 800e806:	69fb      	ldr	r3, [r7, #28]
 800e808:	f023 0301 	bic.w	r3, r3, #1
 800e80c:	64bb      	str	r3, [r7, #72]	; 0x48
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	3308      	adds	r3, #8
 800e814:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e816:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e818:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e81a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e81c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e81e:	e841 2300 	strex	r3, r2, [r1]
 800e822:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e826:	2b00      	cmp	r3, #0
 800e828:	d1e5      	bne.n	800e7f6 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e82e:	2b01      	cmp	r3, #1
 800e830:	d118      	bne.n	800e864 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	e853 3f00 	ldrex	r3, [r3]
 800e83e:	60bb      	str	r3, [r7, #8]
   return(result);
 800e840:	68bb      	ldr	r3, [r7, #8]
 800e842:	f023 0310 	bic.w	r3, r3, #16
 800e846:	647b      	str	r3, [r7, #68]	; 0x44
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	461a      	mov	r2, r3
 800e84e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e850:	61bb      	str	r3, [r7, #24]
 800e852:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e854:	6979      	ldr	r1, [r7, #20]
 800e856:	69ba      	ldr	r2, [r7, #24]
 800e858:	e841 2300 	strex	r3, r2, [r1]
 800e85c:	613b      	str	r3, [r7, #16]
   return(result);
 800e85e:	693b      	ldr	r3, [r7, #16]
 800e860:	2b00      	cmp	r3, #0
 800e862:	d1e6      	bne.n	800e832 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	2220      	movs	r2, #32
 800e868:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	2200      	movs	r2, #0
 800e86e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	2200      	movs	r2, #0
 800e874:	665a      	str	r2, [r3, #100]	; 0x64
}
 800e876:	bf00      	nop
 800e878:	3754      	adds	r7, #84	; 0x54
 800e87a:	46bd      	mov	sp, r7
 800e87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e880:	4770      	bx	lr

0800e882 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800e882:	b580      	push	{r7, lr}
 800e884:	b090      	sub	sp, #64	; 0x40
 800e886:	af00      	add	r7, sp, #0
 800e888:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e88e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	f003 0320 	and.w	r3, r3, #32
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d137      	bne.n	800e90e <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800e89e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8a0:	2200      	movs	r2, #0
 800e8a2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e8a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	3308      	adds	r3, #8
 800e8ac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8b0:	e853 3f00 	ldrex	r3, [r3]
 800e8b4:	623b      	str	r3, [r7, #32]
   return(result);
 800e8b6:	6a3b      	ldr	r3, [r7, #32]
 800e8b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e8bc:	63bb      	str	r3, [r7, #56]	; 0x38
 800e8be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8c0:	681b      	ldr	r3, [r3, #0]
 800e8c2:	3308      	adds	r3, #8
 800e8c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e8c6:	633a      	str	r2, [r7, #48]	; 0x30
 800e8c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e8cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e8ce:	e841 2300 	strex	r3, r2, [r1]
 800e8d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e8d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d1e5      	bne.n	800e8a6 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e8da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8e0:	693b      	ldr	r3, [r7, #16]
 800e8e2:	e853 3f00 	ldrex	r3, [r3]
 800e8e6:	60fb      	str	r3, [r7, #12]
   return(result);
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e8ee:	637b      	str	r3, [r7, #52]	; 0x34
 800e8f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	461a      	mov	r2, r3
 800e8f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e8f8:	61fb      	str	r3, [r7, #28]
 800e8fa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8fc:	69b9      	ldr	r1, [r7, #24]
 800e8fe:	69fa      	ldr	r2, [r7, #28]
 800e900:	e841 2300 	strex	r3, r2, [r1]
 800e904:	617b      	str	r3, [r7, #20]
   return(result);
 800e906:	697b      	ldr	r3, [r7, #20]
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d1e6      	bne.n	800e8da <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e90c:	e002      	b.n	800e914 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800e90e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e910:	f7f5 ff0e 	bl	8004730 <HAL_UART_TxCpltCallback>
}
 800e914:	bf00      	nop
 800e916:	3740      	adds	r7, #64	; 0x40
 800e918:	46bd      	mov	sp, r7
 800e91a:	bd80      	pop	{r7, pc}

0800e91c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e91c:	b580      	push	{r7, lr}
 800e91e:	b084      	sub	sp, #16
 800e920:	af00      	add	r7, sp, #0
 800e922:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e928:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800e92a:	68f8      	ldr	r0, [r7, #12]
 800e92c:	f7ff f9d8 	bl	800dce0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e930:	bf00      	nop
 800e932:	3710      	adds	r7, #16
 800e934:	46bd      	mov	sp, r7
 800e936:	bd80      	pop	{r7, pc}

0800e938 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800e938:	b580      	push	{r7, lr}
 800e93a:	b086      	sub	sp, #24
 800e93c:	af00      	add	r7, sp, #0
 800e93e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e944:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800e946:	697b      	ldr	r3, [r7, #20]
 800e948:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e94a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800e94c:	697b      	ldr	r3, [r7, #20]
 800e94e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e950:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800e952:	697b      	ldr	r3, [r7, #20]
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	689b      	ldr	r3, [r3, #8]
 800e958:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e95c:	2b80      	cmp	r3, #128	; 0x80
 800e95e:	d109      	bne.n	800e974 <UART_DMAError+0x3c>
 800e960:	693b      	ldr	r3, [r7, #16]
 800e962:	2b21      	cmp	r3, #33	; 0x21
 800e964:	d106      	bne.n	800e974 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800e966:	697b      	ldr	r3, [r7, #20]
 800e968:	2200      	movs	r2, #0
 800e96a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800e96e:	6978      	ldr	r0, [r7, #20]
 800e970:	f7ff fefe 	bl	800e770 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800e974:	697b      	ldr	r3, [r7, #20]
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	689b      	ldr	r3, [r3, #8]
 800e97a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e97e:	2b40      	cmp	r3, #64	; 0x40
 800e980:	d109      	bne.n	800e996 <UART_DMAError+0x5e>
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	2b22      	cmp	r3, #34	; 0x22
 800e986:	d106      	bne.n	800e996 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800e988:	697b      	ldr	r3, [r7, #20]
 800e98a:	2200      	movs	r2, #0
 800e98c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800e990:	6978      	ldr	r0, [r7, #20]
 800e992:	f7ff ff13 	bl	800e7bc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800e996:	697b      	ldr	r3, [r7, #20]
 800e998:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e99c:	f043 0210 	orr.w	r2, r3, #16
 800e9a0:	697b      	ldr	r3, [r7, #20]
 800e9a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e9a6:	6978      	ldr	r0, [r7, #20]
 800e9a8:	f7f5 fee6 	bl	8004778 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e9ac:	bf00      	nop
 800e9ae:	3718      	adds	r7, #24
 800e9b0:	46bd      	mov	sp, r7
 800e9b2:	bd80      	pop	{r7, pc}

0800e9b4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e9b4:	b580      	push	{r7, lr}
 800e9b6:	b084      	sub	sp, #16
 800e9b8:	af00      	add	r7, sp, #0
 800e9ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e9c0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	2200      	movs	r2, #0
 800e9c6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800e9ca:	68fb      	ldr	r3, [r7, #12]
 800e9cc:	2200      	movs	r2, #0
 800e9ce:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e9d2:	68f8      	ldr	r0, [r7, #12]
 800e9d4:	f7f5 fed0 	bl	8004778 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e9d8:	bf00      	nop
 800e9da:	3710      	adds	r7, #16
 800e9dc:	46bd      	mov	sp, r7
 800e9de:	bd80      	pop	{r7, pc}

0800e9e0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e9e0:	b580      	push	{r7, lr}
 800e9e2:	b088      	sub	sp, #32
 800e9e4:	af00      	add	r7, sp, #0
 800e9e6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	e853 3f00 	ldrex	r3, [r3]
 800e9f4:	60bb      	str	r3, [r7, #8]
   return(result);
 800e9f6:	68bb      	ldr	r3, [r7, #8]
 800e9f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e9fc:	61fb      	str	r3, [r7, #28]
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	461a      	mov	r2, r3
 800ea04:	69fb      	ldr	r3, [r7, #28]
 800ea06:	61bb      	str	r3, [r7, #24]
 800ea08:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea0a:	6979      	ldr	r1, [r7, #20]
 800ea0c:	69ba      	ldr	r2, [r7, #24]
 800ea0e:	e841 2300 	strex	r3, r2, [r1]
 800ea12:	613b      	str	r3, [r7, #16]
   return(result);
 800ea14:	693b      	ldr	r3, [r7, #16]
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d1e6      	bne.n	800e9e8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	2220      	movs	r2, #32
 800ea1e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	2200      	movs	r2, #0
 800ea24:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ea26:	6878      	ldr	r0, [r7, #4]
 800ea28:	f7f5 fe82 	bl	8004730 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ea2c:	bf00      	nop
 800ea2e:	3720      	adds	r7, #32
 800ea30:	46bd      	mov	sp, r7
 800ea32:	bd80      	pop	{r7, pc}

0800ea34 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800ea34:	b580      	push	{r7, lr}
 800ea36:	b096      	sub	sp, #88	; 0x58
 800ea38:	af00      	add	r7, sp, #0
 800ea3a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ea42:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ea4a:	2b22      	cmp	r3, #34	; 0x22
 800ea4c:	f040 8094 	bne.w	800eb78 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ea56:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ea5a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800ea5e:	b2d9      	uxtb	r1, r3
 800ea60:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800ea64:	b2da      	uxtb	r2, r3
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ea6a:	400a      	ands	r2, r1
 800ea6c:	b2d2      	uxtb	r2, r2
 800ea6e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ea74:	1c5a      	adds	r2, r3, #1
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ea80:	b29b      	uxth	r3, r3
 800ea82:	3b01      	subs	r3, #1
 800ea84:	b29a      	uxth	r2, r3
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ea92:	b29b      	uxth	r3, r3
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d179      	bne.n	800eb8c <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eaa0:	e853 3f00 	ldrex	r3, [r3]
 800eaa4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800eaa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eaa8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800eaac:	653b      	str	r3, [r7, #80]	; 0x50
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	461a      	mov	r2, r3
 800eab4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eab6:	647b      	str	r3, [r7, #68]	; 0x44
 800eab8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eaba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800eabc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800eabe:	e841 2300 	strex	r3, r2, [r1]
 800eac2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800eac4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d1e6      	bne.n	800ea98 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	3308      	adds	r3, #8
 800ead0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ead2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ead4:	e853 3f00 	ldrex	r3, [r3]
 800ead8:	623b      	str	r3, [r7, #32]
   return(result);
 800eada:	6a3b      	ldr	r3, [r7, #32]
 800eadc:	f023 0301 	bic.w	r3, r3, #1
 800eae0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	3308      	adds	r3, #8
 800eae8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800eaea:	633a      	str	r2, [r7, #48]	; 0x30
 800eaec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eaee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800eaf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eaf2:	e841 2300 	strex	r3, r2, [r1]
 800eaf6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800eaf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d1e5      	bne.n	800eaca <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	2220      	movs	r2, #32
 800eb02:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	2200      	movs	r2, #0
 800eb08:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800eb0e:	2b01      	cmp	r3, #1
 800eb10:	d12e      	bne.n	800eb70 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	2200      	movs	r2, #0
 800eb16:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb1e:	693b      	ldr	r3, [r7, #16]
 800eb20:	e853 3f00 	ldrex	r3, [r3]
 800eb24:	60fb      	str	r3, [r7, #12]
   return(result);
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	f023 0310 	bic.w	r3, r3, #16
 800eb2c:	64bb      	str	r3, [r7, #72]	; 0x48
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	681b      	ldr	r3, [r3, #0]
 800eb32:	461a      	mov	r2, r3
 800eb34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eb36:	61fb      	str	r3, [r7, #28]
 800eb38:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb3a:	69b9      	ldr	r1, [r7, #24]
 800eb3c:	69fa      	ldr	r2, [r7, #28]
 800eb3e:	e841 2300 	strex	r3, r2, [r1]
 800eb42:	617b      	str	r3, [r7, #20]
   return(result);
 800eb44:	697b      	ldr	r3, [r7, #20]
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d1e6      	bne.n	800eb18 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	69db      	ldr	r3, [r3, #28]
 800eb50:	f003 0310 	and.w	r3, r3, #16
 800eb54:	2b10      	cmp	r3, #16
 800eb56:	d103      	bne.n	800eb60 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	2210      	movs	r2, #16
 800eb5e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800eb66:	4619      	mov	r1, r3
 800eb68:	6878      	ldr	r0, [r7, #4]
 800eb6a:	f7ff f8c3 	bl	800dcf4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800eb6e:	e00d      	b.n	800eb8c <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800eb70:	6878      	ldr	r0, [r7, #4]
 800eb72:	f7f5 fe2b 	bl	80047cc <HAL_UART_RxCpltCallback>
}
 800eb76:	e009      	b.n	800eb8c <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	8b1b      	ldrh	r3, [r3, #24]
 800eb7e:	b29a      	uxth	r2, r3
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	f042 0208 	orr.w	r2, r2, #8
 800eb88:	b292      	uxth	r2, r2
 800eb8a:	831a      	strh	r2, [r3, #24]
}
 800eb8c:	bf00      	nop
 800eb8e:	3758      	adds	r7, #88	; 0x58
 800eb90:	46bd      	mov	sp, r7
 800eb92:	bd80      	pop	{r7, pc}

0800eb94 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800eb94:	b580      	push	{r7, lr}
 800eb96:	b096      	sub	sp, #88	; 0x58
 800eb98:	af00      	add	r7, sp, #0
 800eb9a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800eba2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ebaa:	2b22      	cmp	r3, #34	; 0x22
 800ebac:	f040 8094 	bne.w	800ecd8 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ebb6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ebbe:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800ebc0:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800ebc4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800ebc8:	4013      	ands	r3, r2
 800ebca:	b29a      	uxth	r2, r3
 800ebcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ebce:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ebd4:	1c9a      	adds	r2, r3, #2
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ebe0:	b29b      	uxth	r3, r3
 800ebe2:	3b01      	subs	r3, #1
 800ebe4:	b29a      	uxth	r2, r3
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ebf2:	b29b      	uxth	r3, r3
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d179      	bne.n	800ecec <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec00:	e853 3f00 	ldrex	r3, [r3]
 800ec04:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ec06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec08:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ec0c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	461a      	mov	r2, r3
 800ec14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ec16:	643b      	str	r3, [r7, #64]	; 0x40
 800ec18:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec1a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ec1c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ec1e:	e841 2300 	strex	r3, r2, [r1]
 800ec22:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ec24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d1e6      	bne.n	800ebf8 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	3308      	adds	r3, #8
 800ec30:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec32:	6a3b      	ldr	r3, [r7, #32]
 800ec34:	e853 3f00 	ldrex	r3, [r3]
 800ec38:	61fb      	str	r3, [r7, #28]
   return(result);
 800ec3a:	69fb      	ldr	r3, [r7, #28]
 800ec3c:	f023 0301 	bic.w	r3, r3, #1
 800ec40:	64bb      	str	r3, [r7, #72]	; 0x48
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	681b      	ldr	r3, [r3, #0]
 800ec46:	3308      	adds	r3, #8
 800ec48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ec4a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ec4c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec4e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ec50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ec52:	e841 2300 	strex	r3, r2, [r1]
 800ec56:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ec58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d1e5      	bne.n	800ec2a <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	2220      	movs	r2, #32
 800ec62:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	2200      	movs	r2, #0
 800ec68:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ec6e:	2b01      	cmp	r3, #1
 800ec70:	d12e      	bne.n	800ecd0 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	2200      	movs	r2, #0
 800ec76:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec7e:	68fb      	ldr	r3, [r7, #12]
 800ec80:	e853 3f00 	ldrex	r3, [r3]
 800ec84:	60bb      	str	r3, [r7, #8]
   return(result);
 800ec86:	68bb      	ldr	r3, [r7, #8]
 800ec88:	f023 0310 	bic.w	r3, r3, #16
 800ec8c:	647b      	str	r3, [r7, #68]	; 0x44
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	461a      	mov	r2, r3
 800ec94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ec96:	61bb      	str	r3, [r7, #24]
 800ec98:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec9a:	6979      	ldr	r1, [r7, #20]
 800ec9c:	69ba      	ldr	r2, [r7, #24]
 800ec9e:	e841 2300 	strex	r3, r2, [r1]
 800eca2:	613b      	str	r3, [r7, #16]
   return(result);
 800eca4:	693b      	ldr	r3, [r7, #16]
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d1e6      	bne.n	800ec78 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	69db      	ldr	r3, [r3, #28]
 800ecb0:	f003 0310 	and.w	r3, r3, #16
 800ecb4:	2b10      	cmp	r3, #16
 800ecb6:	d103      	bne.n	800ecc0 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	2210      	movs	r2, #16
 800ecbe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800ecc6:	4619      	mov	r1, r3
 800ecc8:	6878      	ldr	r0, [r7, #4]
 800ecca:	f7ff f813 	bl	800dcf4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ecce:	e00d      	b.n	800ecec <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800ecd0:	6878      	ldr	r0, [r7, #4]
 800ecd2:	f7f5 fd7b 	bl	80047cc <HAL_UART_RxCpltCallback>
}
 800ecd6:	e009      	b.n	800ecec <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	8b1b      	ldrh	r3, [r3, #24]
 800ecde:	b29a      	uxth	r2, r3
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	f042 0208 	orr.w	r2, r2, #8
 800ece8:	b292      	uxth	r2, r2
 800ecea:	831a      	strh	r2, [r3, #24]
}
 800ecec:	bf00      	nop
 800ecee:	3758      	adds	r7, #88	; 0x58
 800ecf0:	46bd      	mov	sp, r7
 800ecf2:	bd80      	pop	{r7, pc}

0800ecf4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ecf4:	b480      	push	{r7}
 800ecf6:	b083      	sub	sp, #12
 800ecf8:	af00      	add	r7, sp, #0
 800ecfa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ecfc:	bf00      	nop
 800ecfe:	370c      	adds	r7, #12
 800ed00:	46bd      	mov	sp, r7
 800ed02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed06:	4770      	bx	lr

0800ed08 <atof>:
 800ed08:	2100      	movs	r1, #0
 800ed0a:	f001 bcf7 	b.w	80106fc <strtod>

0800ed0e <atoi>:
 800ed0e:	220a      	movs	r2, #10
 800ed10:	2100      	movs	r1, #0
 800ed12:	f001 bd81 	b.w	8010818 <strtol>

0800ed16 <atol>:
 800ed16:	220a      	movs	r2, #10
 800ed18:	2100      	movs	r1, #0
 800ed1a:	f001 bd7d 	b.w	8010818 <strtol>
	...

0800ed20 <calloc>:
 800ed20:	4b02      	ldr	r3, [pc, #8]	; (800ed2c <calloc+0xc>)
 800ed22:	460a      	mov	r2, r1
 800ed24:	4601      	mov	r1, r0
 800ed26:	6818      	ldr	r0, [r3, #0]
 800ed28:	f000 b8fe 	b.w	800ef28 <_calloc_r>
 800ed2c:	2000024c 	.word	0x2000024c

0800ed30 <__errno>:
 800ed30:	4b01      	ldr	r3, [pc, #4]	; (800ed38 <__errno+0x8>)
 800ed32:	6818      	ldr	r0, [r3, #0]
 800ed34:	4770      	bx	lr
 800ed36:	bf00      	nop
 800ed38:	2000024c 	.word	0x2000024c

0800ed3c <gmtime_r>:
 800ed3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed40:	e9d0 6700 	ldrd	r6, r7, [r0]
 800ed44:	460c      	mov	r4, r1
 800ed46:	4a4f      	ldr	r2, [pc, #316]	; (800ee84 <gmtime_r+0x148>)
 800ed48:	2300      	movs	r3, #0
 800ed4a:	4630      	mov	r0, r6
 800ed4c:	4639      	mov	r1, r7
 800ed4e:	f7f1 ff9b 	bl	8000c88 <__aeabi_ldivmod>
 800ed52:	4639      	mov	r1, r7
 800ed54:	4605      	mov	r5, r0
 800ed56:	4a4b      	ldr	r2, [pc, #300]	; (800ee84 <gmtime_r+0x148>)
 800ed58:	4630      	mov	r0, r6
 800ed5a:	2300      	movs	r3, #0
 800ed5c:	f7f1 ff94 	bl	8000c88 <__aeabi_ldivmod>
 800ed60:	2a00      	cmp	r2, #0
 800ed62:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 800ed66:	bfb7      	itett	lt
 800ed68:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 800ed6c:	f600 236c 	addwge	r3, r0, #2668	; 0xa6c
 800ed70:	f600 236b 	addwlt	r3, r0, #2667	; 0xa6b
 800ed74:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 800ed78:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 800ed7c:	fbb2 f1f0 	udiv	r1, r2, r0
 800ed80:	fb00 2211 	mls	r2, r0, r1, r2
 800ed84:	203c      	movs	r0, #60	; 0x3c
 800ed86:	60a1      	str	r1, [r4, #8]
 800ed88:	fbb2 f1f0 	udiv	r1, r2, r0
 800ed8c:	fb00 2211 	mls	r2, r0, r1, r2
 800ed90:	6061      	str	r1, [r4, #4]
 800ed92:	6022      	str	r2, [r4, #0]
 800ed94:	2107      	movs	r1, #7
 800ed96:	1cda      	adds	r2, r3, #3
 800ed98:	fb92 f1f1 	sdiv	r1, r2, r1
 800ed9c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800eda0:	1a52      	subs	r2, r2, r1
 800eda2:	bf48      	it	mi
 800eda4:	3207      	addmi	r2, #7
 800eda6:	4d38      	ldr	r5, [pc, #224]	; (800ee88 <gmtime_r+0x14c>)
 800eda8:	4838      	ldr	r0, [pc, #224]	; (800ee8c <gmtime_r+0x150>)
 800edaa:	61a2      	str	r2, [r4, #24]
 800edac:	2b00      	cmp	r3, #0
 800edae:	bfb7      	itett	lt
 800edb0:	f5a3 320e 	sublt.w	r2, r3, #145408	; 0x23800
 800edb4:	fb93 f5f5 	sdivge	r5, r3, r5
 800edb8:	f5a2 722c 	sublt.w	r2, r2, #688	; 0x2b0
 800edbc:	fb92 f5f5 	sdivlt	r5, r2, r5
 800edc0:	fb00 3005 	mla	r0, r0, r5, r3
 800edc4:	f648 62ac 	movw	r2, #36524	; 0x8eac
 800edc8:	fbb0 f2f2 	udiv	r2, r0, r2
 800edcc:	4402      	add	r2, r0
 800edce:	f240 53b4 	movw	r3, #1460	; 0x5b4
 800edd2:	fbb0 f1f3 	udiv	r1, r0, r3
 800edd6:	1a52      	subs	r2, r2, r1
 800edd8:	f240 1c6d 	movw	ip, #365	; 0x16d
 800eddc:	492c      	ldr	r1, [pc, #176]	; (800ee90 <gmtime_r+0x154>)
 800edde:	fbb0 f1f1 	udiv	r1, r0, r1
 800ede2:	2764      	movs	r7, #100	; 0x64
 800ede4:	1a52      	subs	r2, r2, r1
 800ede6:	fbb2 f1fc 	udiv	r1, r2, ip
 800edea:	fbb2 f3f3 	udiv	r3, r2, r3
 800edee:	fbb1 f6f7 	udiv	r6, r1, r7
 800edf2:	1af3      	subs	r3, r6, r3
 800edf4:	4403      	add	r3, r0
 800edf6:	fb0c 3311 	mls	r3, ip, r1, r3
 800edfa:	2299      	movs	r2, #153	; 0x99
 800edfc:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 800ee00:	f10e 0e02 	add.w	lr, lr, #2
 800ee04:	f103 0c01 	add.w	ip, r3, #1
 800ee08:	fbbe f0f2 	udiv	r0, lr, r2
 800ee0c:	4342      	muls	r2, r0
 800ee0e:	3202      	adds	r2, #2
 800ee10:	f04f 0805 	mov.w	r8, #5
 800ee14:	fbb2 f2f8 	udiv	r2, r2, r8
 800ee18:	ebac 0c02 	sub.w	ip, ip, r2
 800ee1c:	f240 52f9 	movw	r2, #1529	; 0x5f9
 800ee20:	4596      	cmp	lr, r2
 800ee22:	bf94      	ite	ls
 800ee24:	2202      	movls	r2, #2
 800ee26:	f06f 0209 	mvnhi.w	r2, #9
 800ee2a:	4410      	add	r0, r2
 800ee2c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800ee30:	fb02 1505 	mla	r5, r2, r5, r1
 800ee34:	2801      	cmp	r0, #1
 800ee36:	bf98      	it	ls
 800ee38:	3501      	addls	r5, #1
 800ee3a:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 800ee3e:	d30d      	bcc.n	800ee5c <gmtime_r+0x120>
 800ee40:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800ee44:	61e3      	str	r3, [r4, #28]
 800ee46:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 800ee4a:	2300      	movs	r3, #0
 800ee4c:	e9c4 0504 	strd	r0, r5, [r4, #16]
 800ee50:	f8c4 c00c 	str.w	ip, [r4, #12]
 800ee54:	6223      	str	r3, [r4, #32]
 800ee56:	4620      	mov	r0, r4
 800ee58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee5c:	078a      	lsls	r2, r1, #30
 800ee5e:	d102      	bne.n	800ee66 <gmtime_r+0x12a>
 800ee60:	fb07 1616 	mls	r6, r7, r6, r1
 800ee64:	b95e      	cbnz	r6, 800ee7e <gmtime_r+0x142>
 800ee66:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800ee6a:	fbb1 f6f2 	udiv	r6, r1, r2
 800ee6e:	fb02 1216 	mls	r2, r2, r6, r1
 800ee72:	fab2 f282 	clz	r2, r2
 800ee76:	0952      	lsrs	r2, r2, #5
 800ee78:	333b      	adds	r3, #59	; 0x3b
 800ee7a:	4413      	add	r3, r2
 800ee7c:	e7e2      	b.n	800ee44 <gmtime_r+0x108>
 800ee7e:	2201      	movs	r2, #1
 800ee80:	e7fa      	b.n	800ee78 <gmtime_r+0x13c>
 800ee82:	bf00      	nop
 800ee84:	00015180 	.word	0x00015180
 800ee88:	00023ab1 	.word	0x00023ab1
 800ee8c:	fffdc54f 	.word	0xfffdc54f
 800ee90:	00023ab0 	.word	0x00023ab0

0800ee94 <__libc_init_array>:
 800ee94:	b570      	push	{r4, r5, r6, lr}
 800ee96:	4d0d      	ldr	r5, [pc, #52]	; (800eecc <__libc_init_array+0x38>)
 800ee98:	4c0d      	ldr	r4, [pc, #52]	; (800eed0 <__libc_init_array+0x3c>)
 800ee9a:	1b64      	subs	r4, r4, r5
 800ee9c:	10a4      	asrs	r4, r4, #2
 800ee9e:	2600      	movs	r6, #0
 800eea0:	42a6      	cmp	r6, r4
 800eea2:	d109      	bne.n	800eeb8 <__libc_init_array+0x24>
 800eea4:	4d0b      	ldr	r5, [pc, #44]	; (800eed4 <__libc_init_array+0x40>)
 800eea6:	4c0c      	ldr	r4, [pc, #48]	; (800eed8 <__libc_init_array+0x44>)
 800eea8:	f004 fae8 	bl	801347c <_init>
 800eeac:	1b64      	subs	r4, r4, r5
 800eeae:	10a4      	asrs	r4, r4, #2
 800eeb0:	2600      	movs	r6, #0
 800eeb2:	42a6      	cmp	r6, r4
 800eeb4:	d105      	bne.n	800eec2 <__libc_init_array+0x2e>
 800eeb6:	bd70      	pop	{r4, r5, r6, pc}
 800eeb8:	f855 3b04 	ldr.w	r3, [r5], #4
 800eebc:	4798      	blx	r3
 800eebe:	3601      	adds	r6, #1
 800eec0:	e7ee      	b.n	800eea0 <__libc_init_array+0xc>
 800eec2:	f855 3b04 	ldr.w	r3, [r5], #4
 800eec6:	4798      	blx	r3
 800eec8:	3601      	adds	r6, #1
 800eeca:	e7f2      	b.n	800eeb2 <__libc_init_array+0x1e>
 800eecc:	08014fe4 	.word	0x08014fe4
 800eed0:	08014fe4 	.word	0x08014fe4
 800eed4:	08014fe4 	.word	0x08014fe4
 800eed8:	08014fe8 	.word	0x08014fe8

0800eedc <malloc>:
 800eedc:	4b02      	ldr	r3, [pc, #8]	; (800eee8 <malloc+0xc>)
 800eede:	4601      	mov	r1, r0
 800eee0:	6818      	ldr	r0, [r3, #0]
 800eee2:	f000 b8a3 	b.w	800f02c <_malloc_r>
 800eee6:	bf00      	nop
 800eee8:	2000024c 	.word	0x2000024c

0800eeec <free>:
 800eeec:	4b02      	ldr	r3, [pc, #8]	; (800eef8 <free+0xc>)
 800eeee:	4601      	mov	r1, r0
 800eef0:	6818      	ldr	r0, [r3, #0]
 800eef2:	f000 b82f 	b.w	800ef54 <_free_r>
 800eef6:	bf00      	nop
 800eef8:	2000024c 	.word	0x2000024c

0800eefc <memcpy>:
 800eefc:	440a      	add	r2, r1
 800eefe:	4291      	cmp	r1, r2
 800ef00:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ef04:	d100      	bne.n	800ef08 <memcpy+0xc>
 800ef06:	4770      	bx	lr
 800ef08:	b510      	push	{r4, lr}
 800ef0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ef0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ef12:	4291      	cmp	r1, r2
 800ef14:	d1f9      	bne.n	800ef0a <memcpy+0xe>
 800ef16:	bd10      	pop	{r4, pc}

0800ef18 <memset>:
 800ef18:	4402      	add	r2, r0
 800ef1a:	4603      	mov	r3, r0
 800ef1c:	4293      	cmp	r3, r2
 800ef1e:	d100      	bne.n	800ef22 <memset+0xa>
 800ef20:	4770      	bx	lr
 800ef22:	f803 1b01 	strb.w	r1, [r3], #1
 800ef26:	e7f9      	b.n	800ef1c <memset+0x4>

0800ef28 <_calloc_r>:
 800ef28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ef2a:	fba1 2402 	umull	r2, r4, r1, r2
 800ef2e:	b94c      	cbnz	r4, 800ef44 <_calloc_r+0x1c>
 800ef30:	4611      	mov	r1, r2
 800ef32:	9201      	str	r2, [sp, #4]
 800ef34:	f000 f87a 	bl	800f02c <_malloc_r>
 800ef38:	9a01      	ldr	r2, [sp, #4]
 800ef3a:	4605      	mov	r5, r0
 800ef3c:	b930      	cbnz	r0, 800ef4c <_calloc_r+0x24>
 800ef3e:	4628      	mov	r0, r5
 800ef40:	b003      	add	sp, #12
 800ef42:	bd30      	pop	{r4, r5, pc}
 800ef44:	220c      	movs	r2, #12
 800ef46:	6002      	str	r2, [r0, #0]
 800ef48:	2500      	movs	r5, #0
 800ef4a:	e7f8      	b.n	800ef3e <_calloc_r+0x16>
 800ef4c:	4621      	mov	r1, r4
 800ef4e:	f7ff ffe3 	bl	800ef18 <memset>
 800ef52:	e7f4      	b.n	800ef3e <_calloc_r+0x16>

0800ef54 <_free_r>:
 800ef54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ef56:	2900      	cmp	r1, #0
 800ef58:	d044      	beq.n	800efe4 <_free_r+0x90>
 800ef5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ef5e:	9001      	str	r0, [sp, #4]
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	f1a1 0404 	sub.w	r4, r1, #4
 800ef66:	bfb8      	it	lt
 800ef68:	18e4      	addlt	r4, r4, r3
 800ef6a:	f002 fe9d 	bl	8011ca8 <__malloc_lock>
 800ef6e:	4a1e      	ldr	r2, [pc, #120]	; (800efe8 <_free_r+0x94>)
 800ef70:	9801      	ldr	r0, [sp, #4]
 800ef72:	6813      	ldr	r3, [r2, #0]
 800ef74:	b933      	cbnz	r3, 800ef84 <_free_r+0x30>
 800ef76:	6063      	str	r3, [r4, #4]
 800ef78:	6014      	str	r4, [r2, #0]
 800ef7a:	b003      	add	sp, #12
 800ef7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ef80:	f002 be98 	b.w	8011cb4 <__malloc_unlock>
 800ef84:	42a3      	cmp	r3, r4
 800ef86:	d908      	bls.n	800ef9a <_free_r+0x46>
 800ef88:	6825      	ldr	r5, [r4, #0]
 800ef8a:	1961      	adds	r1, r4, r5
 800ef8c:	428b      	cmp	r3, r1
 800ef8e:	bf01      	itttt	eq
 800ef90:	6819      	ldreq	r1, [r3, #0]
 800ef92:	685b      	ldreq	r3, [r3, #4]
 800ef94:	1949      	addeq	r1, r1, r5
 800ef96:	6021      	streq	r1, [r4, #0]
 800ef98:	e7ed      	b.n	800ef76 <_free_r+0x22>
 800ef9a:	461a      	mov	r2, r3
 800ef9c:	685b      	ldr	r3, [r3, #4]
 800ef9e:	b10b      	cbz	r3, 800efa4 <_free_r+0x50>
 800efa0:	42a3      	cmp	r3, r4
 800efa2:	d9fa      	bls.n	800ef9a <_free_r+0x46>
 800efa4:	6811      	ldr	r1, [r2, #0]
 800efa6:	1855      	adds	r5, r2, r1
 800efa8:	42a5      	cmp	r5, r4
 800efaa:	d10b      	bne.n	800efc4 <_free_r+0x70>
 800efac:	6824      	ldr	r4, [r4, #0]
 800efae:	4421      	add	r1, r4
 800efb0:	1854      	adds	r4, r2, r1
 800efb2:	42a3      	cmp	r3, r4
 800efb4:	6011      	str	r1, [r2, #0]
 800efb6:	d1e0      	bne.n	800ef7a <_free_r+0x26>
 800efb8:	681c      	ldr	r4, [r3, #0]
 800efba:	685b      	ldr	r3, [r3, #4]
 800efbc:	6053      	str	r3, [r2, #4]
 800efbe:	4421      	add	r1, r4
 800efc0:	6011      	str	r1, [r2, #0]
 800efc2:	e7da      	b.n	800ef7a <_free_r+0x26>
 800efc4:	d902      	bls.n	800efcc <_free_r+0x78>
 800efc6:	230c      	movs	r3, #12
 800efc8:	6003      	str	r3, [r0, #0]
 800efca:	e7d6      	b.n	800ef7a <_free_r+0x26>
 800efcc:	6825      	ldr	r5, [r4, #0]
 800efce:	1961      	adds	r1, r4, r5
 800efd0:	428b      	cmp	r3, r1
 800efd2:	bf04      	itt	eq
 800efd4:	6819      	ldreq	r1, [r3, #0]
 800efd6:	685b      	ldreq	r3, [r3, #4]
 800efd8:	6063      	str	r3, [r4, #4]
 800efda:	bf04      	itt	eq
 800efdc:	1949      	addeq	r1, r1, r5
 800efde:	6021      	streq	r1, [r4, #0]
 800efe0:	6054      	str	r4, [r2, #4]
 800efe2:	e7ca      	b.n	800ef7a <_free_r+0x26>
 800efe4:	b003      	add	sp, #12
 800efe6:	bd30      	pop	{r4, r5, pc}
 800efe8:	200036d8 	.word	0x200036d8

0800efec <sbrk_aligned>:
 800efec:	b570      	push	{r4, r5, r6, lr}
 800efee:	4e0e      	ldr	r6, [pc, #56]	; (800f028 <sbrk_aligned+0x3c>)
 800eff0:	460c      	mov	r4, r1
 800eff2:	6831      	ldr	r1, [r6, #0]
 800eff4:	4605      	mov	r5, r0
 800eff6:	b911      	cbnz	r1, 800effe <sbrk_aligned+0x12>
 800eff8:	f000 fcf6 	bl	800f9e8 <_sbrk_r>
 800effc:	6030      	str	r0, [r6, #0]
 800effe:	4621      	mov	r1, r4
 800f000:	4628      	mov	r0, r5
 800f002:	f000 fcf1 	bl	800f9e8 <_sbrk_r>
 800f006:	1c43      	adds	r3, r0, #1
 800f008:	d00a      	beq.n	800f020 <sbrk_aligned+0x34>
 800f00a:	1cc4      	adds	r4, r0, #3
 800f00c:	f024 0403 	bic.w	r4, r4, #3
 800f010:	42a0      	cmp	r0, r4
 800f012:	d007      	beq.n	800f024 <sbrk_aligned+0x38>
 800f014:	1a21      	subs	r1, r4, r0
 800f016:	4628      	mov	r0, r5
 800f018:	f000 fce6 	bl	800f9e8 <_sbrk_r>
 800f01c:	3001      	adds	r0, #1
 800f01e:	d101      	bne.n	800f024 <sbrk_aligned+0x38>
 800f020:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800f024:	4620      	mov	r0, r4
 800f026:	bd70      	pop	{r4, r5, r6, pc}
 800f028:	200036dc 	.word	0x200036dc

0800f02c <_malloc_r>:
 800f02c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f030:	1ccd      	adds	r5, r1, #3
 800f032:	f025 0503 	bic.w	r5, r5, #3
 800f036:	3508      	adds	r5, #8
 800f038:	2d0c      	cmp	r5, #12
 800f03a:	bf38      	it	cc
 800f03c:	250c      	movcc	r5, #12
 800f03e:	2d00      	cmp	r5, #0
 800f040:	4607      	mov	r7, r0
 800f042:	db01      	blt.n	800f048 <_malloc_r+0x1c>
 800f044:	42a9      	cmp	r1, r5
 800f046:	d905      	bls.n	800f054 <_malloc_r+0x28>
 800f048:	230c      	movs	r3, #12
 800f04a:	603b      	str	r3, [r7, #0]
 800f04c:	2600      	movs	r6, #0
 800f04e:	4630      	mov	r0, r6
 800f050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f054:	4e2e      	ldr	r6, [pc, #184]	; (800f110 <_malloc_r+0xe4>)
 800f056:	f002 fe27 	bl	8011ca8 <__malloc_lock>
 800f05a:	6833      	ldr	r3, [r6, #0]
 800f05c:	461c      	mov	r4, r3
 800f05e:	bb34      	cbnz	r4, 800f0ae <_malloc_r+0x82>
 800f060:	4629      	mov	r1, r5
 800f062:	4638      	mov	r0, r7
 800f064:	f7ff ffc2 	bl	800efec <sbrk_aligned>
 800f068:	1c43      	adds	r3, r0, #1
 800f06a:	4604      	mov	r4, r0
 800f06c:	d14d      	bne.n	800f10a <_malloc_r+0xde>
 800f06e:	6834      	ldr	r4, [r6, #0]
 800f070:	4626      	mov	r6, r4
 800f072:	2e00      	cmp	r6, #0
 800f074:	d140      	bne.n	800f0f8 <_malloc_r+0xcc>
 800f076:	6823      	ldr	r3, [r4, #0]
 800f078:	4631      	mov	r1, r6
 800f07a:	4638      	mov	r0, r7
 800f07c:	eb04 0803 	add.w	r8, r4, r3
 800f080:	f000 fcb2 	bl	800f9e8 <_sbrk_r>
 800f084:	4580      	cmp	r8, r0
 800f086:	d13a      	bne.n	800f0fe <_malloc_r+0xd2>
 800f088:	6821      	ldr	r1, [r4, #0]
 800f08a:	3503      	adds	r5, #3
 800f08c:	1a6d      	subs	r5, r5, r1
 800f08e:	f025 0503 	bic.w	r5, r5, #3
 800f092:	3508      	adds	r5, #8
 800f094:	2d0c      	cmp	r5, #12
 800f096:	bf38      	it	cc
 800f098:	250c      	movcc	r5, #12
 800f09a:	4629      	mov	r1, r5
 800f09c:	4638      	mov	r0, r7
 800f09e:	f7ff ffa5 	bl	800efec <sbrk_aligned>
 800f0a2:	3001      	adds	r0, #1
 800f0a4:	d02b      	beq.n	800f0fe <_malloc_r+0xd2>
 800f0a6:	6823      	ldr	r3, [r4, #0]
 800f0a8:	442b      	add	r3, r5
 800f0aa:	6023      	str	r3, [r4, #0]
 800f0ac:	e00e      	b.n	800f0cc <_malloc_r+0xa0>
 800f0ae:	6822      	ldr	r2, [r4, #0]
 800f0b0:	1b52      	subs	r2, r2, r5
 800f0b2:	d41e      	bmi.n	800f0f2 <_malloc_r+0xc6>
 800f0b4:	2a0b      	cmp	r2, #11
 800f0b6:	d916      	bls.n	800f0e6 <_malloc_r+0xba>
 800f0b8:	1961      	adds	r1, r4, r5
 800f0ba:	42a3      	cmp	r3, r4
 800f0bc:	6025      	str	r5, [r4, #0]
 800f0be:	bf18      	it	ne
 800f0c0:	6059      	strne	r1, [r3, #4]
 800f0c2:	6863      	ldr	r3, [r4, #4]
 800f0c4:	bf08      	it	eq
 800f0c6:	6031      	streq	r1, [r6, #0]
 800f0c8:	5162      	str	r2, [r4, r5]
 800f0ca:	604b      	str	r3, [r1, #4]
 800f0cc:	4638      	mov	r0, r7
 800f0ce:	f104 060b 	add.w	r6, r4, #11
 800f0d2:	f002 fdef 	bl	8011cb4 <__malloc_unlock>
 800f0d6:	f026 0607 	bic.w	r6, r6, #7
 800f0da:	1d23      	adds	r3, r4, #4
 800f0dc:	1af2      	subs	r2, r6, r3
 800f0de:	d0b6      	beq.n	800f04e <_malloc_r+0x22>
 800f0e0:	1b9b      	subs	r3, r3, r6
 800f0e2:	50a3      	str	r3, [r4, r2]
 800f0e4:	e7b3      	b.n	800f04e <_malloc_r+0x22>
 800f0e6:	6862      	ldr	r2, [r4, #4]
 800f0e8:	42a3      	cmp	r3, r4
 800f0ea:	bf0c      	ite	eq
 800f0ec:	6032      	streq	r2, [r6, #0]
 800f0ee:	605a      	strne	r2, [r3, #4]
 800f0f0:	e7ec      	b.n	800f0cc <_malloc_r+0xa0>
 800f0f2:	4623      	mov	r3, r4
 800f0f4:	6864      	ldr	r4, [r4, #4]
 800f0f6:	e7b2      	b.n	800f05e <_malloc_r+0x32>
 800f0f8:	4634      	mov	r4, r6
 800f0fa:	6876      	ldr	r6, [r6, #4]
 800f0fc:	e7b9      	b.n	800f072 <_malloc_r+0x46>
 800f0fe:	230c      	movs	r3, #12
 800f100:	603b      	str	r3, [r7, #0]
 800f102:	4638      	mov	r0, r7
 800f104:	f002 fdd6 	bl	8011cb4 <__malloc_unlock>
 800f108:	e7a1      	b.n	800f04e <_malloc_r+0x22>
 800f10a:	6025      	str	r5, [r4, #0]
 800f10c:	e7de      	b.n	800f0cc <_malloc_r+0xa0>
 800f10e:	bf00      	nop
 800f110:	200036d8 	.word	0x200036d8

0800f114 <__cvt>:
 800f114:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f118:	ec55 4b10 	vmov	r4, r5, d0
 800f11c:	2d00      	cmp	r5, #0
 800f11e:	460e      	mov	r6, r1
 800f120:	4619      	mov	r1, r3
 800f122:	462b      	mov	r3, r5
 800f124:	bfbb      	ittet	lt
 800f126:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800f12a:	461d      	movlt	r5, r3
 800f12c:	2300      	movge	r3, #0
 800f12e:	232d      	movlt	r3, #45	; 0x2d
 800f130:	700b      	strb	r3, [r1, #0]
 800f132:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f134:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800f138:	4691      	mov	r9, r2
 800f13a:	f023 0820 	bic.w	r8, r3, #32
 800f13e:	bfbc      	itt	lt
 800f140:	4622      	movlt	r2, r4
 800f142:	4614      	movlt	r4, r2
 800f144:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f148:	d005      	beq.n	800f156 <__cvt+0x42>
 800f14a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800f14e:	d100      	bne.n	800f152 <__cvt+0x3e>
 800f150:	3601      	adds	r6, #1
 800f152:	2102      	movs	r1, #2
 800f154:	e000      	b.n	800f158 <__cvt+0x44>
 800f156:	2103      	movs	r1, #3
 800f158:	ab03      	add	r3, sp, #12
 800f15a:	9301      	str	r3, [sp, #4]
 800f15c:	ab02      	add	r3, sp, #8
 800f15e:	9300      	str	r3, [sp, #0]
 800f160:	ec45 4b10 	vmov	d0, r4, r5
 800f164:	4653      	mov	r3, sl
 800f166:	4632      	mov	r2, r6
 800f168:	f001 fc26 	bl	80109b8 <_dtoa_r>
 800f16c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800f170:	4607      	mov	r7, r0
 800f172:	d102      	bne.n	800f17a <__cvt+0x66>
 800f174:	f019 0f01 	tst.w	r9, #1
 800f178:	d022      	beq.n	800f1c0 <__cvt+0xac>
 800f17a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f17e:	eb07 0906 	add.w	r9, r7, r6
 800f182:	d110      	bne.n	800f1a6 <__cvt+0x92>
 800f184:	783b      	ldrb	r3, [r7, #0]
 800f186:	2b30      	cmp	r3, #48	; 0x30
 800f188:	d10a      	bne.n	800f1a0 <__cvt+0x8c>
 800f18a:	2200      	movs	r2, #0
 800f18c:	2300      	movs	r3, #0
 800f18e:	4620      	mov	r0, r4
 800f190:	4629      	mov	r1, r5
 800f192:	f7f1 fc99 	bl	8000ac8 <__aeabi_dcmpeq>
 800f196:	b918      	cbnz	r0, 800f1a0 <__cvt+0x8c>
 800f198:	f1c6 0601 	rsb	r6, r6, #1
 800f19c:	f8ca 6000 	str.w	r6, [sl]
 800f1a0:	f8da 3000 	ldr.w	r3, [sl]
 800f1a4:	4499      	add	r9, r3
 800f1a6:	2200      	movs	r2, #0
 800f1a8:	2300      	movs	r3, #0
 800f1aa:	4620      	mov	r0, r4
 800f1ac:	4629      	mov	r1, r5
 800f1ae:	f7f1 fc8b 	bl	8000ac8 <__aeabi_dcmpeq>
 800f1b2:	b108      	cbz	r0, 800f1b8 <__cvt+0xa4>
 800f1b4:	f8cd 900c 	str.w	r9, [sp, #12]
 800f1b8:	2230      	movs	r2, #48	; 0x30
 800f1ba:	9b03      	ldr	r3, [sp, #12]
 800f1bc:	454b      	cmp	r3, r9
 800f1be:	d307      	bcc.n	800f1d0 <__cvt+0xbc>
 800f1c0:	9b03      	ldr	r3, [sp, #12]
 800f1c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f1c4:	1bdb      	subs	r3, r3, r7
 800f1c6:	4638      	mov	r0, r7
 800f1c8:	6013      	str	r3, [r2, #0]
 800f1ca:	b004      	add	sp, #16
 800f1cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f1d0:	1c59      	adds	r1, r3, #1
 800f1d2:	9103      	str	r1, [sp, #12]
 800f1d4:	701a      	strb	r2, [r3, #0]
 800f1d6:	e7f0      	b.n	800f1ba <__cvt+0xa6>

0800f1d8 <__exponent>:
 800f1d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f1da:	4603      	mov	r3, r0
 800f1dc:	2900      	cmp	r1, #0
 800f1de:	bfb8      	it	lt
 800f1e0:	4249      	neglt	r1, r1
 800f1e2:	f803 2b02 	strb.w	r2, [r3], #2
 800f1e6:	bfb4      	ite	lt
 800f1e8:	222d      	movlt	r2, #45	; 0x2d
 800f1ea:	222b      	movge	r2, #43	; 0x2b
 800f1ec:	2909      	cmp	r1, #9
 800f1ee:	7042      	strb	r2, [r0, #1]
 800f1f0:	dd2a      	ble.n	800f248 <__exponent+0x70>
 800f1f2:	f10d 0407 	add.w	r4, sp, #7
 800f1f6:	46a4      	mov	ip, r4
 800f1f8:	270a      	movs	r7, #10
 800f1fa:	46a6      	mov	lr, r4
 800f1fc:	460a      	mov	r2, r1
 800f1fe:	fb91 f6f7 	sdiv	r6, r1, r7
 800f202:	fb07 1516 	mls	r5, r7, r6, r1
 800f206:	3530      	adds	r5, #48	; 0x30
 800f208:	2a63      	cmp	r2, #99	; 0x63
 800f20a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800f20e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800f212:	4631      	mov	r1, r6
 800f214:	dcf1      	bgt.n	800f1fa <__exponent+0x22>
 800f216:	3130      	adds	r1, #48	; 0x30
 800f218:	f1ae 0502 	sub.w	r5, lr, #2
 800f21c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800f220:	1c44      	adds	r4, r0, #1
 800f222:	4629      	mov	r1, r5
 800f224:	4561      	cmp	r1, ip
 800f226:	d30a      	bcc.n	800f23e <__exponent+0x66>
 800f228:	f10d 0209 	add.w	r2, sp, #9
 800f22c:	eba2 020e 	sub.w	r2, r2, lr
 800f230:	4565      	cmp	r5, ip
 800f232:	bf88      	it	hi
 800f234:	2200      	movhi	r2, #0
 800f236:	4413      	add	r3, r2
 800f238:	1a18      	subs	r0, r3, r0
 800f23a:	b003      	add	sp, #12
 800f23c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f23e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f242:	f804 2f01 	strb.w	r2, [r4, #1]!
 800f246:	e7ed      	b.n	800f224 <__exponent+0x4c>
 800f248:	2330      	movs	r3, #48	; 0x30
 800f24a:	3130      	adds	r1, #48	; 0x30
 800f24c:	7083      	strb	r3, [r0, #2]
 800f24e:	70c1      	strb	r1, [r0, #3]
 800f250:	1d03      	adds	r3, r0, #4
 800f252:	e7f1      	b.n	800f238 <__exponent+0x60>

0800f254 <_printf_float>:
 800f254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f258:	ed2d 8b02 	vpush	{d8}
 800f25c:	b08d      	sub	sp, #52	; 0x34
 800f25e:	460c      	mov	r4, r1
 800f260:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800f264:	4616      	mov	r6, r2
 800f266:	461f      	mov	r7, r3
 800f268:	4605      	mov	r5, r0
 800f26a:	f002 fd03 	bl	8011c74 <_localeconv_r>
 800f26e:	f8d0 a000 	ldr.w	sl, [r0]
 800f272:	4650      	mov	r0, sl
 800f274:	f7f0 ffac 	bl	80001d0 <strlen>
 800f278:	2300      	movs	r3, #0
 800f27a:	930a      	str	r3, [sp, #40]	; 0x28
 800f27c:	6823      	ldr	r3, [r4, #0]
 800f27e:	9305      	str	r3, [sp, #20]
 800f280:	f8d8 3000 	ldr.w	r3, [r8]
 800f284:	f894 b018 	ldrb.w	fp, [r4, #24]
 800f288:	3307      	adds	r3, #7
 800f28a:	f023 0307 	bic.w	r3, r3, #7
 800f28e:	f103 0208 	add.w	r2, r3, #8
 800f292:	f8c8 2000 	str.w	r2, [r8]
 800f296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f29a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800f29e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800f2a2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f2a6:	9307      	str	r3, [sp, #28]
 800f2a8:	f8cd 8018 	str.w	r8, [sp, #24]
 800f2ac:	ee08 0a10 	vmov	s16, r0
 800f2b0:	4b9f      	ldr	r3, [pc, #636]	; (800f530 <_printf_float+0x2dc>)
 800f2b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f2b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f2ba:	f7f1 fc37 	bl	8000b2c <__aeabi_dcmpun>
 800f2be:	bb88      	cbnz	r0, 800f324 <_printf_float+0xd0>
 800f2c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f2c4:	4b9a      	ldr	r3, [pc, #616]	; (800f530 <_printf_float+0x2dc>)
 800f2c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f2ca:	f7f1 fc11 	bl	8000af0 <__aeabi_dcmple>
 800f2ce:	bb48      	cbnz	r0, 800f324 <_printf_float+0xd0>
 800f2d0:	2200      	movs	r2, #0
 800f2d2:	2300      	movs	r3, #0
 800f2d4:	4640      	mov	r0, r8
 800f2d6:	4649      	mov	r1, r9
 800f2d8:	f7f1 fc00 	bl	8000adc <__aeabi_dcmplt>
 800f2dc:	b110      	cbz	r0, 800f2e4 <_printf_float+0x90>
 800f2de:	232d      	movs	r3, #45	; 0x2d
 800f2e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f2e4:	4b93      	ldr	r3, [pc, #588]	; (800f534 <_printf_float+0x2e0>)
 800f2e6:	4894      	ldr	r0, [pc, #592]	; (800f538 <_printf_float+0x2e4>)
 800f2e8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800f2ec:	bf94      	ite	ls
 800f2ee:	4698      	movls	r8, r3
 800f2f0:	4680      	movhi	r8, r0
 800f2f2:	2303      	movs	r3, #3
 800f2f4:	6123      	str	r3, [r4, #16]
 800f2f6:	9b05      	ldr	r3, [sp, #20]
 800f2f8:	f023 0204 	bic.w	r2, r3, #4
 800f2fc:	6022      	str	r2, [r4, #0]
 800f2fe:	f04f 0900 	mov.w	r9, #0
 800f302:	9700      	str	r7, [sp, #0]
 800f304:	4633      	mov	r3, r6
 800f306:	aa0b      	add	r2, sp, #44	; 0x2c
 800f308:	4621      	mov	r1, r4
 800f30a:	4628      	mov	r0, r5
 800f30c:	f000 f9d8 	bl	800f6c0 <_printf_common>
 800f310:	3001      	adds	r0, #1
 800f312:	f040 8090 	bne.w	800f436 <_printf_float+0x1e2>
 800f316:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f31a:	b00d      	add	sp, #52	; 0x34
 800f31c:	ecbd 8b02 	vpop	{d8}
 800f320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f324:	4642      	mov	r2, r8
 800f326:	464b      	mov	r3, r9
 800f328:	4640      	mov	r0, r8
 800f32a:	4649      	mov	r1, r9
 800f32c:	f7f1 fbfe 	bl	8000b2c <__aeabi_dcmpun>
 800f330:	b140      	cbz	r0, 800f344 <_printf_float+0xf0>
 800f332:	464b      	mov	r3, r9
 800f334:	2b00      	cmp	r3, #0
 800f336:	bfbc      	itt	lt
 800f338:	232d      	movlt	r3, #45	; 0x2d
 800f33a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800f33e:	487f      	ldr	r0, [pc, #508]	; (800f53c <_printf_float+0x2e8>)
 800f340:	4b7f      	ldr	r3, [pc, #508]	; (800f540 <_printf_float+0x2ec>)
 800f342:	e7d1      	b.n	800f2e8 <_printf_float+0x94>
 800f344:	6863      	ldr	r3, [r4, #4]
 800f346:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800f34a:	9206      	str	r2, [sp, #24]
 800f34c:	1c5a      	adds	r2, r3, #1
 800f34e:	d13f      	bne.n	800f3d0 <_printf_float+0x17c>
 800f350:	2306      	movs	r3, #6
 800f352:	6063      	str	r3, [r4, #4]
 800f354:	9b05      	ldr	r3, [sp, #20]
 800f356:	6861      	ldr	r1, [r4, #4]
 800f358:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800f35c:	2300      	movs	r3, #0
 800f35e:	9303      	str	r3, [sp, #12]
 800f360:	ab0a      	add	r3, sp, #40	; 0x28
 800f362:	e9cd b301 	strd	fp, r3, [sp, #4]
 800f366:	ab09      	add	r3, sp, #36	; 0x24
 800f368:	ec49 8b10 	vmov	d0, r8, r9
 800f36c:	9300      	str	r3, [sp, #0]
 800f36e:	6022      	str	r2, [r4, #0]
 800f370:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f374:	4628      	mov	r0, r5
 800f376:	f7ff fecd 	bl	800f114 <__cvt>
 800f37a:	9b06      	ldr	r3, [sp, #24]
 800f37c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f37e:	2b47      	cmp	r3, #71	; 0x47
 800f380:	4680      	mov	r8, r0
 800f382:	d108      	bne.n	800f396 <_printf_float+0x142>
 800f384:	1cc8      	adds	r0, r1, #3
 800f386:	db02      	blt.n	800f38e <_printf_float+0x13a>
 800f388:	6863      	ldr	r3, [r4, #4]
 800f38a:	4299      	cmp	r1, r3
 800f38c:	dd41      	ble.n	800f412 <_printf_float+0x1be>
 800f38e:	f1ab 0b02 	sub.w	fp, fp, #2
 800f392:	fa5f fb8b 	uxtb.w	fp, fp
 800f396:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f39a:	d820      	bhi.n	800f3de <_printf_float+0x18a>
 800f39c:	3901      	subs	r1, #1
 800f39e:	465a      	mov	r2, fp
 800f3a0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f3a4:	9109      	str	r1, [sp, #36]	; 0x24
 800f3a6:	f7ff ff17 	bl	800f1d8 <__exponent>
 800f3aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f3ac:	1813      	adds	r3, r2, r0
 800f3ae:	2a01      	cmp	r2, #1
 800f3b0:	4681      	mov	r9, r0
 800f3b2:	6123      	str	r3, [r4, #16]
 800f3b4:	dc02      	bgt.n	800f3bc <_printf_float+0x168>
 800f3b6:	6822      	ldr	r2, [r4, #0]
 800f3b8:	07d2      	lsls	r2, r2, #31
 800f3ba:	d501      	bpl.n	800f3c0 <_printf_float+0x16c>
 800f3bc:	3301      	adds	r3, #1
 800f3be:	6123      	str	r3, [r4, #16]
 800f3c0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d09c      	beq.n	800f302 <_printf_float+0xae>
 800f3c8:	232d      	movs	r3, #45	; 0x2d
 800f3ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f3ce:	e798      	b.n	800f302 <_printf_float+0xae>
 800f3d0:	9a06      	ldr	r2, [sp, #24]
 800f3d2:	2a47      	cmp	r2, #71	; 0x47
 800f3d4:	d1be      	bne.n	800f354 <_printf_float+0x100>
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	d1bc      	bne.n	800f354 <_printf_float+0x100>
 800f3da:	2301      	movs	r3, #1
 800f3dc:	e7b9      	b.n	800f352 <_printf_float+0xfe>
 800f3de:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800f3e2:	d118      	bne.n	800f416 <_printf_float+0x1c2>
 800f3e4:	2900      	cmp	r1, #0
 800f3e6:	6863      	ldr	r3, [r4, #4]
 800f3e8:	dd0b      	ble.n	800f402 <_printf_float+0x1ae>
 800f3ea:	6121      	str	r1, [r4, #16]
 800f3ec:	b913      	cbnz	r3, 800f3f4 <_printf_float+0x1a0>
 800f3ee:	6822      	ldr	r2, [r4, #0]
 800f3f0:	07d0      	lsls	r0, r2, #31
 800f3f2:	d502      	bpl.n	800f3fa <_printf_float+0x1a6>
 800f3f4:	3301      	adds	r3, #1
 800f3f6:	440b      	add	r3, r1
 800f3f8:	6123      	str	r3, [r4, #16]
 800f3fa:	65a1      	str	r1, [r4, #88]	; 0x58
 800f3fc:	f04f 0900 	mov.w	r9, #0
 800f400:	e7de      	b.n	800f3c0 <_printf_float+0x16c>
 800f402:	b913      	cbnz	r3, 800f40a <_printf_float+0x1b6>
 800f404:	6822      	ldr	r2, [r4, #0]
 800f406:	07d2      	lsls	r2, r2, #31
 800f408:	d501      	bpl.n	800f40e <_printf_float+0x1ba>
 800f40a:	3302      	adds	r3, #2
 800f40c:	e7f4      	b.n	800f3f8 <_printf_float+0x1a4>
 800f40e:	2301      	movs	r3, #1
 800f410:	e7f2      	b.n	800f3f8 <_printf_float+0x1a4>
 800f412:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800f416:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f418:	4299      	cmp	r1, r3
 800f41a:	db05      	blt.n	800f428 <_printf_float+0x1d4>
 800f41c:	6823      	ldr	r3, [r4, #0]
 800f41e:	6121      	str	r1, [r4, #16]
 800f420:	07d8      	lsls	r0, r3, #31
 800f422:	d5ea      	bpl.n	800f3fa <_printf_float+0x1a6>
 800f424:	1c4b      	adds	r3, r1, #1
 800f426:	e7e7      	b.n	800f3f8 <_printf_float+0x1a4>
 800f428:	2900      	cmp	r1, #0
 800f42a:	bfd4      	ite	le
 800f42c:	f1c1 0202 	rsble	r2, r1, #2
 800f430:	2201      	movgt	r2, #1
 800f432:	4413      	add	r3, r2
 800f434:	e7e0      	b.n	800f3f8 <_printf_float+0x1a4>
 800f436:	6823      	ldr	r3, [r4, #0]
 800f438:	055a      	lsls	r2, r3, #21
 800f43a:	d407      	bmi.n	800f44c <_printf_float+0x1f8>
 800f43c:	6923      	ldr	r3, [r4, #16]
 800f43e:	4642      	mov	r2, r8
 800f440:	4631      	mov	r1, r6
 800f442:	4628      	mov	r0, r5
 800f444:	47b8      	blx	r7
 800f446:	3001      	adds	r0, #1
 800f448:	d12c      	bne.n	800f4a4 <_printf_float+0x250>
 800f44a:	e764      	b.n	800f316 <_printf_float+0xc2>
 800f44c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f450:	f240 80e0 	bls.w	800f614 <_printf_float+0x3c0>
 800f454:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f458:	2200      	movs	r2, #0
 800f45a:	2300      	movs	r3, #0
 800f45c:	f7f1 fb34 	bl	8000ac8 <__aeabi_dcmpeq>
 800f460:	2800      	cmp	r0, #0
 800f462:	d034      	beq.n	800f4ce <_printf_float+0x27a>
 800f464:	4a37      	ldr	r2, [pc, #220]	; (800f544 <_printf_float+0x2f0>)
 800f466:	2301      	movs	r3, #1
 800f468:	4631      	mov	r1, r6
 800f46a:	4628      	mov	r0, r5
 800f46c:	47b8      	blx	r7
 800f46e:	3001      	adds	r0, #1
 800f470:	f43f af51 	beq.w	800f316 <_printf_float+0xc2>
 800f474:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f478:	429a      	cmp	r2, r3
 800f47a:	db02      	blt.n	800f482 <_printf_float+0x22e>
 800f47c:	6823      	ldr	r3, [r4, #0]
 800f47e:	07d8      	lsls	r0, r3, #31
 800f480:	d510      	bpl.n	800f4a4 <_printf_float+0x250>
 800f482:	ee18 3a10 	vmov	r3, s16
 800f486:	4652      	mov	r2, sl
 800f488:	4631      	mov	r1, r6
 800f48a:	4628      	mov	r0, r5
 800f48c:	47b8      	blx	r7
 800f48e:	3001      	adds	r0, #1
 800f490:	f43f af41 	beq.w	800f316 <_printf_float+0xc2>
 800f494:	f04f 0800 	mov.w	r8, #0
 800f498:	f104 091a 	add.w	r9, r4, #26
 800f49c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f49e:	3b01      	subs	r3, #1
 800f4a0:	4543      	cmp	r3, r8
 800f4a2:	dc09      	bgt.n	800f4b8 <_printf_float+0x264>
 800f4a4:	6823      	ldr	r3, [r4, #0]
 800f4a6:	079b      	lsls	r3, r3, #30
 800f4a8:	f100 8105 	bmi.w	800f6b6 <_printf_float+0x462>
 800f4ac:	68e0      	ldr	r0, [r4, #12]
 800f4ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f4b0:	4298      	cmp	r0, r3
 800f4b2:	bfb8      	it	lt
 800f4b4:	4618      	movlt	r0, r3
 800f4b6:	e730      	b.n	800f31a <_printf_float+0xc6>
 800f4b8:	2301      	movs	r3, #1
 800f4ba:	464a      	mov	r2, r9
 800f4bc:	4631      	mov	r1, r6
 800f4be:	4628      	mov	r0, r5
 800f4c0:	47b8      	blx	r7
 800f4c2:	3001      	adds	r0, #1
 800f4c4:	f43f af27 	beq.w	800f316 <_printf_float+0xc2>
 800f4c8:	f108 0801 	add.w	r8, r8, #1
 800f4cc:	e7e6      	b.n	800f49c <_printf_float+0x248>
 800f4ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	dc39      	bgt.n	800f548 <_printf_float+0x2f4>
 800f4d4:	4a1b      	ldr	r2, [pc, #108]	; (800f544 <_printf_float+0x2f0>)
 800f4d6:	2301      	movs	r3, #1
 800f4d8:	4631      	mov	r1, r6
 800f4da:	4628      	mov	r0, r5
 800f4dc:	47b8      	blx	r7
 800f4de:	3001      	adds	r0, #1
 800f4e0:	f43f af19 	beq.w	800f316 <_printf_float+0xc2>
 800f4e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f4e8:	4313      	orrs	r3, r2
 800f4ea:	d102      	bne.n	800f4f2 <_printf_float+0x29e>
 800f4ec:	6823      	ldr	r3, [r4, #0]
 800f4ee:	07d9      	lsls	r1, r3, #31
 800f4f0:	d5d8      	bpl.n	800f4a4 <_printf_float+0x250>
 800f4f2:	ee18 3a10 	vmov	r3, s16
 800f4f6:	4652      	mov	r2, sl
 800f4f8:	4631      	mov	r1, r6
 800f4fa:	4628      	mov	r0, r5
 800f4fc:	47b8      	blx	r7
 800f4fe:	3001      	adds	r0, #1
 800f500:	f43f af09 	beq.w	800f316 <_printf_float+0xc2>
 800f504:	f04f 0900 	mov.w	r9, #0
 800f508:	f104 0a1a 	add.w	sl, r4, #26
 800f50c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f50e:	425b      	negs	r3, r3
 800f510:	454b      	cmp	r3, r9
 800f512:	dc01      	bgt.n	800f518 <_printf_float+0x2c4>
 800f514:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f516:	e792      	b.n	800f43e <_printf_float+0x1ea>
 800f518:	2301      	movs	r3, #1
 800f51a:	4652      	mov	r2, sl
 800f51c:	4631      	mov	r1, r6
 800f51e:	4628      	mov	r0, r5
 800f520:	47b8      	blx	r7
 800f522:	3001      	adds	r0, #1
 800f524:	f43f aef7 	beq.w	800f316 <_printf_float+0xc2>
 800f528:	f109 0901 	add.w	r9, r9, #1
 800f52c:	e7ee      	b.n	800f50c <_printf_float+0x2b8>
 800f52e:	bf00      	nop
 800f530:	7fefffff 	.word	0x7fefffff
 800f534:	08014c40 	.word	0x08014c40
 800f538:	08014c44 	.word	0x08014c44
 800f53c:	08014c4c 	.word	0x08014c4c
 800f540:	08014c48 	.word	0x08014c48
 800f544:	08014c50 	.word	0x08014c50
 800f548:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f54a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f54c:	429a      	cmp	r2, r3
 800f54e:	bfa8      	it	ge
 800f550:	461a      	movge	r2, r3
 800f552:	2a00      	cmp	r2, #0
 800f554:	4691      	mov	r9, r2
 800f556:	dc37      	bgt.n	800f5c8 <_printf_float+0x374>
 800f558:	f04f 0b00 	mov.w	fp, #0
 800f55c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f560:	f104 021a 	add.w	r2, r4, #26
 800f564:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f566:	9305      	str	r3, [sp, #20]
 800f568:	eba3 0309 	sub.w	r3, r3, r9
 800f56c:	455b      	cmp	r3, fp
 800f56e:	dc33      	bgt.n	800f5d8 <_printf_float+0x384>
 800f570:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f574:	429a      	cmp	r2, r3
 800f576:	db3b      	blt.n	800f5f0 <_printf_float+0x39c>
 800f578:	6823      	ldr	r3, [r4, #0]
 800f57a:	07da      	lsls	r2, r3, #31
 800f57c:	d438      	bmi.n	800f5f0 <_printf_float+0x39c>
 800f57e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f580:	9a05      	ldr	r2, [sp, #20]
 800f582:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f584:	1a9a      	subs	r2, r3, r2
 800f586:	eba3 0901 	sub.w	r9, r3, r1
 800f58a:	4591      	cmp	r9, r2
 800f58c:	bfa8      	it	ge
 800f58e:	4691      	movge	r9, r2
 800f590:	f1b9 0f00 	cmp.w	r9, #0
 800f594:	dc35      	bgt.n	800f602 <_printf_float+0x3ae>
 800f596:	f04f 0800 	mov.w	r8, #0
 800f59a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f59e:	f104 0a1a 	add.w	sl, r4, #26
 800f5a2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f5a6:	1a9b      	subs	r3, r3, r2
 800f5a8:	eba3 0309 	sub.w	r3, r3, r9
 800f5ac:	4543      	cmp	r3, r8
 800f5ae:	f77f af79 	ble.w	800f4a4 <_printf_float+0x250>
 800f5b2:	2301      	movs	r3, #1
 800f5b4:	4652      	mov	r2, sl
 800f5b6:	4631      	mov	r1, r6
 800f5b8:	4628      	mov	r0, r5
 800f5ba:	47b8      	blx	r7
 800f5bc:	3001      	adds	r0, #1
 800f5be:	f43f aeaa 	beq.w	800f316 <_printf_float+0xc2>
 800f5c2:	f108 0801 	add.w	r8, r8, #1
 800f5c6:	e7ec      	b.n	800f5a2 <_printf_float+0x34e>
 800f5c8:	4613      	mov	r3, r2
 800f5ca:	4631      	mov	r1, r6
 800f5cc:	4642      	mov	r2, r8
 800f5ce:	4628      	mov	r0, r5
 800f5d0:	47b8      	blx	r7
 800f5d2:	3001      	adds	r0, #1
 800f5d4:	d1c0      	bne.n	800f558 <_printf_float+0x304>
 800f5d6:	e69e      	b.n	800f316 <_printf_float+0xc2>
 800f5d8:	2301      	movs	r3, #1
 800f5da:	4631      	mov	r1, r6
 800f5dc:	4628      	mov	r0, r5
 800f5de:	9205      	str	r2, [sp, #20]
 800f5e0:	47b8      	blx	r7
 800f5e2:	3001      	adds	r0, #1
 800f5e4:	f43f ae97 	beq.w	800f316 <_printf_float+0xc2>
 800f5e8:	9a05      	ldr	r2, [sp, #20]
 800f5ea:	f10b 0b01 	add.w	fp, fp, #1
 800f5ee:	e7b9      	b.n	800f564 <_printf_float+0x310>
 800f5f0:	ee18 3a10 	vmov	r3, s16
 800f5f4:	4652      	mov	r2, sl
 800f5f6:	4631      	mov	r1, r6
 800f5f8:	4628      	mov	r0, r5
 800f5fa:	47b8      	blx	r7
 800f5fc:	3001      	adds	r0, #1
 800f5fe:	d1be      	bne.n	800f57e <_printf_float+0x32a>
 800f600:	e689      	b.n	800f316 <_printf_float+0xc2>
 800f602:	9a05      	ldr	r2, [sp, #20]
 800f604:	464b      	mov	r3, r9
 800f606:	4442      	add	r2, r8
 800f608:	4631      	mov	r1, r6
 800f60a:	4628      	mov	r0, r5
 800f60c:	47b8      	blx	r7
 800f60e:	3001      	adds	r0, #1
 800f610:	d1c1      	bne.n	800f596 <_printf_float+0x342>
 800f612:	e680      	b.n	800f316 <_printf_float+0xc2>
 800f614:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f616:	2a01      	cmp	r2, #1
 800f618:	dc01      	bgt.n	800f61e <_printf_float+0x3ca>
 800f61a:	07db      	lsls	r3, r3, #31
 800f61c:	d538      	bpl.n	800f690 <_printf_float+0x43c>
 800f61e:	2301      	movs	r3, #1
 800f620:	4642      	mov	r2, r8
 800f622:	4631      	mov	r1, r6
 800f624:	4628      	mov	r0, r5
 800f626:	47b8      	blx	r7
 800f628:	3001      	adds	r0, #1
 800f62a:	f43f ae74 	beq.w	800f316 <_printf_float+0xc2>
 800f62e:	ee18 3a10 	vmov	r3, s16
 800f632:	4652      	mov	r2, sl
 800f634:	4631      	mov	r1, r6
 800f636:	4628      	mov	r0, r5
 800f638:	47b8      	blx	r7
 800f63a:	3001      	adds	r0, #1
 800f63c:	f43f ae6b 	beq.w	800f316 <_printf_float+0xc2>
 800f640:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f644:	2200      	movs	r2, #0
 800f646:	2300      	movs	r3, #0
 800f648:	f7f1 fa3e 	bl	8000ac8 <__aeabi_dcmpeq>
 800f64c:	b9d8      	cbnz	r0, 800f686 <_printf_float+0x432>
 800f64e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f650:	f108 0201 	add.w	r2, r8, #1
 800f654:	3b01      	subs	r3, #1
 800f656:	4631      	mov	r1, r6
 800f658:	4628      	mov	r0, r5
 800f65a:	47b8      	blx	r7
 800f65c:	3001      	adds	r0, #1
 800f65e:	d10e      	bne.n	800f67e <_printf_float+0x42a>
 800f660:	e659      	b.n	800f316 <_printf_float+0xc2>
 800f662:	2301      	movs	r3, #1
 800f664:	4652      	mov	r2, sl
 800f666:	4631      	mov	r1, r6
 800f668:	4628      	mov	r0, r5
 800f66a:	47b8      	blx	r7
 800f66c:	3001      	adds	r0, #1
 800f66e:	f43f ae52 	beq.w	800f316 <_printf_float+0xc2>
 800f672:	f108 0801 	add.w	r8, r8, #1
 800f676:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f678:	3b01      	subs	r3, #1
 800f67a:	4543      	cmp	r3, r8
 800f67c:	dcf1      	bgt.n	800f662 <_printf_float+0x40e>
 800f67e:	464b      	mov	r3, r9
 800f680:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f684:	e6dc      	b.n	800f440 <_printf_float+0x1ec>
 800f686:	f04f 0800 	mov.w	r8, #0
 800f68a:	f104 0a1a 	add.w	sl, r4, #26
 800f68e:	e7f2      	b.n	800f676 <_printf_float+0x422>
 800f690:	2301      	movs	r3, #1
 800f692:	4642      	mov	r2, r8
 800f694:	e7df      	b.n	800f656 <_printf_float+0x402>
 800f696:	2301      	movs	r3, #1
 800f698:	464a      	mov	r2, r9
 800f69a:	4631      	mov	r1, r6
 800f69c:	4628      	mov	r0, r5
 800f69e:	47b8      	blx	r7
 800f6a0:	3001      	adds	r0, #1
 800f6a2:	f43f ae38 	beq.w	800f316 <_printf_float+0xc2>
 800f6a6:	f108 0801 	add.w	r8, r8, #1
 800f6aa:	68e3      	ldr	r3, [r4, #12]
 800f6ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f6ae:	1a5b      	subs	r3, r3, r1
 800f6b0:	4543      	cmp	r3, r8
 800f6b2:	dcf0      	bgt.n	800f696 <_printf_float+0x442>
 800f6b4:	e6fa      	b.n	800f4ac <_printf_float+0x258>
 800f6b6:	f04f 0800 	mov.w	r8, #0
 800f6ba:	f104 0919 	add.w	r9, r4, #25
 800f6be:	e7f4      	b.n	800f6aa <_printf_float+0x456>

0800f6c0 <_printf_common>:
 800f6c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f6c4:	4616      	mov	r6, r2
 800f6c6:	4699      	mov	r9, r3
 800f6c8:	688a      	ldr	r2, [r1, #8]
 800f6ca:	690b      	ldr	r3, [r1, #16]
 800f6cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f6d0:	4293      	cmp	r3, r2
 800f6d2:	bfb8      	it	lt
 800f6d4:	4613      	movlt	r3, r2
 800f6d6:	6033      	str	r3, [r6, #0]
 800f6d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f6dc:	4607      	mov	r7, r0
 800f6de:	460c      	mov	r4, r1
 800f6e0:	b10a      	cbz	r2, 800f6e6 <_printf_common+0x26>
 800f6e2:	3301      	adds	r3, #1
 800f6e4:	6033      	str	r3, [r6, #0]
 800f6e6:	6823      	ldr	r3, [r4, #0]
 800f6e8:	0699      	lsls	r1, r3, #26
 800f6ea:	bf42      	ittt	mi
 800f6ec:	6833      	ldrmi	r3, [r6, #0]
 800f6ee:	3302      	addmi	r3, #2
 800f6f0:	6033      	strmi	r3, [r6, #0]
 800f6f2:	6825      	ldr	r5, [r4, #0]
 800f6f4:	f015 0506 	ands.w	r5, r5, #6
 800f6f8:	d106      	bne.n	800f708 <_printf_common+0x48>
 800f6fa:	f104 0a19 	add.w	sl, r4, #25
 800f6fe:	68e3      	ldr	r3, [r4, #12]
 800f700:	6832      	ldr	r2, [r6, #0]
 800f702:	1a9b      	subs	r3, r3, r2
 800f704:	42ab      	cmp	r3, r5
 800f706:	dc26      	bgt.n	800f756 <_printf_common+0x96>
 800f708:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f70c:	1e13      	subs	r3, r2, #0
 800f70e:	6822      	ldr	r2, [r4, #0]
 800f710:	bf18      	it	ne
 800f712:	2301      	movne	r3, #1
 800f714:	0692      	lsls	r2, r2, #26
 800f716:	d42b      	bmi.n	800f770 <_printf_common+0xb0>
 800f718:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f71c:	4649      	mov	r1, r9
 800f71e:	4638      	mov	r0, r7
 800f720:	47c0      	blx	r8
 800f722:	3001      	adds	r0, #1
 800f724:	d01e      	beq.n	800f764 <_printf_common+0xa4>
 800f726:	6823      	ldr	r3, [r4, #0]
 800f728:	68e5      	ldr	r5, [r4, #12]
 800f72a:	6832      	ldr	r2, [r6, #0]
 800f72c:	f003 0306 	and.w	r3, r3, #6
 800f730:	2b04      	cmp	r3, #4
 800f732:	bf08      	it	eq
 800f734:	1aad      	subeq	r5, r5, r2
 800f736:	68a3      	ldr	r3, [r4, #8]
 800f738:	6922      	ldr	r2, [r4, #16]
 800f73a:	bf0c      	ite	eq
 800f73c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f740:	2500      	movne	r5, #0
 800f742:	4293      	cmp	r3, r2
 800f744:	bfc4      	itt	gt
 800f746:	1a9b      	subgt	r3, r3, r2
 800f748:	18ed      	addgt	r5, r5, r3
 800f74a:	2600      	movs	r6, #0
 800f74c:	341a      	adds	r4, #26
 800f74e:	42b5      	cmp	r5, r6
 800f750:	d11a      	bne.n	800f788 <_printf_common+0xc8>
 800f752:	2000      	movs	r0, #0
 800f754:	e008      	b.n	800f768 <_printf_common+0xa8>
 800f756:	2301      	movs	r3, #1
 800f758:	4652      	mov	r2, sl
 800f75a:	4649      	mov	r1, r9
 800f75c:	4638      	mov	r0, r7
 800f75e:	47c0      	blx	r8
 800f760:	3001      	adds	r0, #1
 800f762:	d103      	bne.n	800f76c <_printf_common+0xac>
 800f764:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f768:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f76c:	3501      	adds	r5, #1
 800f76e:	e7c6      	b.n	800f6fe <_printf_common+0x3e>
 800f770:	18e1      	adds	r1, r4, r3
 800f772:	1c5a      	adds	r2, r3, #1
 800f774:	2030      	movs	r0, #48	; 0x30
 800f776:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f77a:	4422      	add	r2, r4
 800f77c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f780:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f784:	3302      	adds	r3, #2
 800f786:	e7c7      	b.n	800f718 <_printf_common+0x58>
 800f788:	2301      	movs	r3, #1
 800f78a:	4622      	mov	r2, r4
 800f78c:	4649      	mov	r1, r9
 800f78e:	4638      	mov	r0, r7
 800f790:	47c0      	blx	r8
 800f792:	3001      	adds	r0, #1
 800f794:	d0e6      	beq.n	800f764 <_printf_common+0xa4>
 800f796:	3601      	adds	r6, #1
 800f798:	e7d9      	b.n	800f74e <_printf_common+0x8e>
	...

0800f79c <_printf_i>:
 800f79c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f7a0:	7e0f      	ldrb	r7, [r1, #24]
 800f7a2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f7a4:	2f78      	cmp	r7, #120	; 0x78
 800f7a6:	4691      	mov	r9, r2
 800f7a8:	4680      	mov	r8, r0
 800f7aa:	460c      	mov	r4, r1
 800f7ac:	469a      	mov	sl, r3
 800f7ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f7b2:	d807      	bhi.n	800f7c4 <_printf_i+0x28>
 800f7b4:	2f62      	cmp	r7, #98	; 0x62
 800f7b6:	d80a      	bhi.n	800f7ce <_printf_i+0x32>
 800f7b8:	2f00      	cmp	r7, #0
 800f7ba:	f000 80d8 	beq.w	800f96e <_printf_i+0x1d2>
 800f7be:	2f58      	cmp	r7, #88	; 0x58
 800f7c0:	f000 80a3 	beq.w	800f90a <_printf_i+0x16e>
 800f7c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f7c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f7cc:	e03a      	b.n	800f844 <_printf_i+0xa8>
 800f7ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f7d2:	2b15      	cmp	r3, #21
 800f7d4:	d8f6      	bhi.n	800f7c4 <_printf_i+0x28>
 800f7d6:	a101      	add	r1, pc, #4	; (adr r1, 800f7dc <_printf_i+0x40>)
 800f7d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f7dc:	0800f835 	.word	0x0800f835
 800f7e0:	0800f849 	.word	0x0800f849
 800f7e4:	0800f7c5 	.word	0x0800f7c5
 800f7e8:	0800f7c5 	.word	0x0800f7c5
 800f7ec:	0800f7c5 	.word	0x0800f7c5
 800f7f0:	0800f7c5 	.word	0x0800f7c5
 800f7f4:	0800f849 	.word	0x0800f849
 800f7f8:	0800f7c5 	.word	0x0800f7c5
 800f7fc:	0800f7c5 	.word	0x0800f7c5
 800f800:	0800f7c5 	.word	0x0800f7c5
 800f804:	0800f7c5 	.word	0x0800f7c5
 800f808:	0800f955 	.word	0x0800f955
 800f80c:	0800f879 	.word	0x0800f879
 800f810:	0800f937 	.word	0x0800f937
 800f814:	0800f7c5 	.word	0x0800f7c5
 800f818:	0800f7c5 	.word	0x0800f7c5
 800f81c:	0800f977 	.word	0x0800f977
 800f820:	0800f7c5 	.word	0x0800f7c5
 800f824:	0800f879 	.word	0x0800f879
 800f828:	0800f7c5 	.word	0x0800f7c5
 800f82c:	0800f7c5 	.word	0x0800f7c5
 800f830:	0800f93f 	.word	0x0800f93f
 800f834:	682b      	ldr	r3, [r5, #0]
 800f836:	1d1a      	adds	r2, r3, #4
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	602a      	str	r2, [r5, #0]
 800f83c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f840:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f844:	2301      	movs	r3, #1
 800f846:	e0a3      	b.n	800f990 <_printf_i+0x1f4>
 800f848:	6820      	ldr	r0, [r4, #0]
 800f84a:	6829      	ldr	r1, [r5, #0]
 800f84c:	0606      	lsls	r6, r0, #24
 800f84e:	f101 0304 	add.w	r3, r1, #4
 800f852:	d50a      	bpl.n	800f86a <_printf_i+0xce>
 800f854:	680e      	ldr	r6, [r1, #0]
 800f856:	602b      	str	r3, [r5, #0]
 800f858:	2e00      	cmp	r6, #0
 800f85a:	da03      	bge.n	800f864 <_printf_i+0xc8>
 800f85c:	232d      	movs	r3, #45	; 0x2d
 800f85e:	4276      	negs	r6, r6
 800f860:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f864:	485e      	ldr	r0, [pc, #376]	; (800f9e0 <_printf_i+0x244>)
 800f866:	230a      	movs	r3, #10
 800f868:	e019      	b.n	800f89e <_printf_i+0x102>
 800f86a:	680e      	ldr	r6, [r1, #0]
 800f86c:	602b      	str	r3, [r5, #0]
 800f86e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f872:	bf18      	it	ne
 800f874:	b236      	sxthne	r6, r6
 800f876:	e7ef      	b.n	800f858 <_printf_i+0xbc>
 800f878:	682b      	ldr	r3, [r5, #0]
 800f87a:	6820      	ldr	r0, [r4, #0]
 800f87c:	1d19      	adds	r1, r3, #4
 800f87e:	6029      	str	r1, [r5, #0]
 800f880:	0601      	lsls	r1, r0, #24
 800f882:	d501      	bpl.n	800f888 <_printf_i+0xec>
 800f884:	681e      	ldr	r6, [r3, #0]
 800f886:	e002      	b.n	800f88e <_printf_i+0xf2>
 800f888:	0646      	lsls	r6, r0, #25
 800f88a:	d5fb      	bpl.n	800f884 <_printf_i+0xe8>
 800f88c:	881e      	ldrh	r6, [r3, #0]
 800f88e:	4854      	ldr	r0, [pc, #336]	; (800f9e0 <_printf_i+0x244>)
 800f890:	2f6f      	cmp	r7, #111	; 0x6f
 800f892:	bf0c      	ite	eq
 800f894:	2308      	moveq	r3, #8
 800f896:	230a      	movne	r3, #10
 800f898:	2100      	movs	r1, #0
 800f89a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f89e:	6865      	ldr	r5, [r4, #4]
 800f8a0:	60a5      	str	r5, [r4, #8]
 800f8a2:	2d00      	cmp	r5, #0
 800f8a4:	bfa2      	ittt	ge
 800f8a6:	6821      	ldrge	r1, [r4, #0]
 800f8a8:	f021 0104 	bicge.w	r1, r1, #4
 800f8ac:	6021      	strge	r1, [r4, #0]
 800f8ae:	b90e      	cbnz	r6, 800f8b4 <_printf_i+0x118>
 800f8b0:	2d00      	cmp	r5, #0
 800f8b2:	d04d      	beq.n	800f950 <_printf_i+0x1b4>
 800f8b4:	4615      	mov	r5, r2
 800f8b6:	fbb6 f1f3 	udiv	r1, r6, r3
 800f8ba:	fb03 6711 	mls	r7, r3, r1, r6
 800f8be:	5dc7      	ldrb	r7, [r0, r7]
 800f8c0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f8c4:	4637      	mov	r7, r6
 800f8c6:	42bb      	cmp	r3, r7
 800f8c8:	460e      	mov	r6, r1
 800f8ca:	d9f4      	bls.n	800f8b6 <_printf_i+0x11a>
 800f8cc:	2b08      	cmp	r3, #8
 800f8ce:	d10b      	bne.n	800f8e8 <_printf_i+0x14c>
 800f8d0:	6823      	ldr	r3, [r4, #0]
 800f8d2:	07de      	lsls	r6, r3, #31
 800f8d4:	d508      	bpl.n	800f8e8 <_printf_i+0x14c>
 800f8d6:	6923      	ldr	r3, [r4, #16]
 800f8d8:	6861      	ldr	r1, [r4, #4]
 800f8da:	4299      	cmp	r1, r3
 800f8dc:	bfde      	ittt	le
 800f8de:	2330      	movle	r3, #48	; 0x30
 800f8e0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f8e4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800f8e8:	1b52      	subs	r2, r2, r5
 800f8ea:	6122      	str	r2, [r4, #16]
 800f8ec:	f8cd a000 	str.w	sl, [sp]
 800f8f0:	464b      	mov	r3, r9
 800f8f2:	aa03      	add	r2, sp, #12
 800f8f4:	4621      	mov	r1, r4
 800f8f6:	4640      	mov	r0, r8
 800f8f8:	f7ff fee2 	bl	800f6c0 <_printf_common>
 800f8fc:	3001      	adds	r0, #1
 800f8fe:	d14c      	bne.n	800f99a <_printf_i+0x1fe>
 800f900:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f904:	b004      	add	sp, #16
 800f906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f90a:	4835      	ldr	r0, [pc, #212]	; (800f9e0 <_printf_i+0x244>)
 800f90c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f910:	6829      	ldr	r1, [r5, #0]
 800f912:	6823      	ldr	r3, [r4, #0]
 800f914:	f851 6b04 	ldr.w	r6, [r1], #4
 800f918:	6029      	str	r1, [r5, #0]
 800f91a:	061d      	lsls	r5, r3, #24
 800f91c:	d514      	bpl.n	800f948 <_printf_i+0x1ac>
 800f91e:	07df      	lsls	r7, r3, #31
 800f920:	bf44      	itt	mi
 800f922:	f043 0320 	orrmi.w	r3, r3, #32
 800f926:	6023      	strmi	r3, [r4, #0]
 800f928:	b91e      	cbnz	r6, 800f932 <_printf_i+0x196>
 800f92a:	6823      	ldr	r3, [r4, #0]
 800f92c:	f023 0320 	bic.w	r3, r3, #32
 800f930:	6023      	str	r3, [r4, #0]
 800f932:	2310      	movs	r3, #16
 800f934:	e7b0      	b.n	800f898 <_printf_i+0xfc>
 800f936:	6823      	ldr	r3, [r4, #0]
 800f938:	f043 0320 	orr.w	r3, r3, #32
 800f93c:	6023      	str	r3, [r4, #0]
 800f93e:	2378      	movs	r3, #120	; 0x78
 800f940:	4828      	ldr	r0, [pc, #160]	; (800f9e4 <_printf_i+0x248>)
 800f942:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f946:	e7e3      	b.n	800f910 <_printf_i+0x174>
 800f948:	0659      	lsls	r1, r3, #25
 800f94a:	bf48      	it	mi
 800f94c:	b2b6      	uxthmi	r6, r6
 800f94e:	e7e6      	b.n	800f91e <_printf_i+0x182>
 800f950:	4615      	mov	r5, r2
 800f952:	e7bb      	b.n	800f8cc <_printf_i+0x130>
 800f954:	682b      	ldr	r3, [r5, #0]
 800f956:	6826      	ldr	r6, [r4, #0]
 800f958:	6961      	ldr	r1, [r4, #20]
 800f95a:	1d18      	adds	r0, r3, #4
 800f95c:	6028      	str	r0, [r5, #0]
 800f95e:	0635      	lsls	r5, r6, #24
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	d501      	bpl.n	800f968 <_printf_i+0x1cc>
 800f964:	6019      	str	r1, [r3, #0]
 800f966:	e002      	b.n	800f96e <_printf_i+0x1d2>
 800f968:	0670      	lsls	r0, r6, #25
 800f96a:	d5fb      	bpl.n	800f964 <_printf_i+0x1c8>
 800f96c:	8019      	strh	r1, [r3, #0]
 800f96e:	2300      	movs	r3, #0
 800f970:	6123      	str	r3, [r4, #16]
 800f972:	4615      	mov	r5, r2
 800f974:	e7ba      	b.n	800f8ec <_printf_i+0x150>
 800f976:	682b      	ldr	r3, [r5, #0]
 800f978:	1d1a      	adds	r2, r3, #4
 800f97a:	602a      	str	r2, [r5, #0]
 800f97c:	681d      	ldr	r5, [r3, #0]
 800f97e:	6862      	ldr	r2, [r4, #4]
 800f980:	2100      	movs	r1, #0
 800f982:	4628      	mov	r0, r5
 800f984:	f7f0 fc2c 	bl	80001e0 <memchr>
 800f988:	b108      	cbz	r0, 800f98e <_printf_i+0x1f2>
 800f98a:	1b40      	subs	r0, r0, r5
 800f98c:	6060      	str	r0, [r4, #4]
 800f98e:	6863      	ldr	r3, [r4, #4]
 800f990:	6123      	str	r3, [r4, #16]
 800f992:	2300      	movs	r3, #0
 800f994:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f998:	e7a8      	b.n	800f8ec <_printf_i+0x150>
 800f99a:	6923      	ldr	r3, [r4, #16]
 800f99c:	462a      	mov	r2, r5
 800f99e:	4649      	mov	r1, r9
 800f9a0:	4640      	mov	r0, r8
 800f9a2:	47d0      	blx	sl
 800f9a4:	3001      	adds	r0, #1
 800f9a6:	d0ab      	beq.n	800f900 <_printf_i+0x164>
 800f9a8:	6823      	ldr	r3, [r4, #0]
 800f9aa:	079b      	lsls	r3, r3, #30
 800f9ac:	d413      	bmi.n	800f9d6 <_printf_i+0x23a>
 800f9ae:	68e0      	ldr	r0, [r4, #12]
 800f9b0:	9b03      	ldr	r3, [sp, #12]
 800f9b2:	4298      	cmp	r0, r3
 800f9b4:	bfb8      	it	lt
 800f9b6:	4618      	movlt	r0, r3
 800f9b8:	e7a4      	b.n	800f904 <_printf_i+0x168>
 800f9ba:	2301      	movs	r3, #1
 800f9bc:	4632      	mov	r2, r6
 800f9be:	4649      	mov	r1, r9
 800f9c0:	4640      	mov	r0, r8
 800f9c2:	47d0      	blx	sl
 800f9c4:	3001      	adds	r0, #1
 800f9c6:	d09b      	beq.n	800f900 <_printf_i+0x164>
 800f9c8:	3501      	adds	r5, #1
 800f9ca:	68e3      	ldr	r3, [r4, #12]
 800f9cc:	9903      	ldr	r1, [sp, #12]
 800f9ce:	1a5b      	subs	r3, r3, r1
 800f9d0:	42ab      	cmp	r3, r5
 800f9d2:	dcf2      	bgt.n	800f9ba <_printf_i+0x21e>
 800f9d4:	e7eb      	b.n	800f9ae <_printf_i+0x212>
 800f9d6:	2500      	movs	r5, #0
 800f9d8:	f104 0619 	add.w	r6, r4, #25
 800f9dc:	e7f5      	b.n	800f9ca <_printf_i+0x22e>
 800f9de:	bf00      	nop
 800f9e0:	08014c52 	.word	0x08014c52
 800f9e4:	08014c63 	.word	0x08014c63

0800f9e8 <_sbrk_r>:
 800f9e8:	b538      	push	{r3, r4, r5, lr}
 800f9ea:	4d06      	ldr	r5, [pc, #24]	; (800fa04 <_sbrk_r+0x1c>)
 800f9ec:	2300      	movs	r3, #0
 800f9ee:	4604      	mov	r4, r0
 800f9f0:	4608      	mov	r0, r1
 800f9f2:	602b      	str	r3, [r5, #0]
 800f9f4:	f7f6 fc1e 	bl	8006234 <_sbrk>
 800f9f8:	1c43      	adds	r3, r0, #1
 800f9fa:	d102      	bne.n	800fa02 <_sbrk_r+0x1a>
 800f9fc:	682b      	ldr	r3, [r5, #0]
 800f9fe:	b103      	cbz	r3, 800fa02 <_sbrk_r+0x1a>
 800fa00:	6023      	str	r3, [r4, #0]
 800fa02:	bd38      	pop	{r3, r4, r5, pc}
 800fa04:	200036e4 	.word	0x200036e4

0800fa08 <siprintf>:
 800fa08:	b40e      	push	{r1, r2, r3}
 800fa0a:	b500      	push	{lr}
 800fa0c:	b09c      	sub	sp, #112	; 0x70
 800fa0e:	ab1d      	add	r3, sp, #116	; 0x74
 800fa10:	9002      	str	r0, [sp, #8]
 800fa12:	9006      	str	r0, [sp, #24]
 800fa14:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800fa18:	4809      	ldr	r0, [pc, #36]	; (800fa40 <siprintf+0x38>)
 800fa1a:	9107      	str	r1, [sp, #28]
 800fa1c:	9104      	str	r1, [sp, #16]
 800fa1e:	4909      	ldr	r1, [pc, #36]	; (800fa44 <siprintf+0x3c>)
 800fa20:	f853 2b04 	ldr.w	r2, [r3], #4
 800fa24:	9105      	str	r1, [sp, #20]
 800fa26:	6800      	ldr	r0, [r0, #0]
 800fa28:	9301      	str	r3, [sp, #4]
 800fa2a:	a902      	add	r1, sp, #8
 800fa2c:	f002 fe64 	bl	80126f8 <_svfiprintf_r>
 800fa30:	9b02      	ldr	r3, [sp, #8]
 800fa32:	2200      	movs	r2, #0
 800fa34:	701a      	strb	r2, [r3, #0]
 800fa36:	b01c      	add	sp, #112	; 0x70
 800fa38:	f85d eb04 	ldr.w	lr, [sp], #4
 800fa3c:	b003      	add	sp, #12
 800fa3e:	4770      	bx	lr
 800fa40:	2000024c 	.word	0x2000024c
 800fa44:	ffff0208 	.word	0xffff0208

0800fa48 <strchr>:
 800fa48:	b2c9      	uxtb	r1, r1
 800fa4a:	4603      	mov	r3, r0
 800fa4c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fa50:	b11a      	cbz	r2, 800fa5a <strchr+0x12>
 800fa52:	428a      	cmp	r2, r1
 800fa54:	d1f9      	bne.n	800fa4a <strchr+0x2>
 800fa56:	4618      	mov	r0, r3
 800fa58:	4770      	bx	lr
 800fa5a:	2900      	cmp	r1, #0
 800fa5c:	bf18      	it	ne
 800fa5e:	2300      	movne	r3, #0
 800fa60:	e7f9      	b.n	800fa56 <strchr+0xe>

0800fa62 <strncmp>:
 800fa62:	b510      	push	{r4, lr}
 800fa64:	b17a      	cbz	r2, 800fa86 <strncmp+0x24>
 800fa66:	4603      	mov	r3, r0
 800fa68:	3901      	subs	r1, #1
 800fa6a:	1884      	adds	r4, r0, r2
 800fa6c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800fa70:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800fa74:	4290      	cmp	r0, r2
 800fa76:	d101      	bne.n	800fa7c <strncmp+0x1a>
 800fa78:	42a3      	cmp	r3, r4
 800fa7a:	d101      	bne.n	800fa80 <strncmp+0x1e>
 800fa7c:	1a80      	subs	r0, r0, r2
 800fa7e:	bd10      	pop	{r4, pc}
 800fa80:	2800      	cmp	r0, #0
 800fa82:	d1f3      	bne.n	800fa6c <strncmp+0xa>
 800fa84:	e7fa      	b.n	800fa7c <strncmp+0x1a>
 800fa86:	4610      	mov	r0, r2
 800fa88:	e7f9      	b.n	800fa7e <strncmp+0x1c>

0800fa8a <strstr>:
 800fa8a:	780a      	ldrb	r2, [r1, #0]
 800fa8c:	b570      	push	{r4, r5, r6, lr}
 800fa8e:	b96a      	cbnz	r2, 800faac <strstr+0x22>
 800fa90:	bd70      	pop	{r4, r5, r6, pc}
 800fa92:	429a      	cmp	r2, r3
 800fa94:	d109      	bne.n	800faaa <strstr+0x20>
 800fa96:	460c      	mov	r4, r1
 800fa98:	4605      	mov	r5, r0
 800fa9a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800fa9e:	2b00      	cmp	r3, #0
 800faa0:	d0f6      	beq.n	800fa90 <strstr+0x6>
 800faa2:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800faa6:	429e      	cmp	r6, r3
 800faa8:	d0f7      	beq.n	800fa9a <strstr+0x10>
 800faaa:	3001      	adds	r0, #1
 800faac:	7803      	ldrb	r3, [r0, #0]
 800faae:	2b00      	cmp	r3, #0
 800fab0:	d1ef      	bne.n	800fa92 <strstr+0x8>
 800fab2:	4618      	mov	r0, r3
 800fab4:	e7ec      	b.n	800fa90 <strstr+0x6>

0800fab6 <sulp>:
 800fab6:	b570      	push	{r4, r5, r6, lr}
 800fab8:	4604      	mov	r4, r0
 800faba:	460d      	mov	r5, r1
 800fabc:	ec45 4b10 	vmov	d0, r4, r5
 800fac0:	4616      	mov	r6, r2
 800fac2:	f002 fc6f 	bl	80123a4 <__ulp>
 800fac6:	ec51 0b10 	vmov	r0, r1, d0
 800faca:	b17e      	cbz	r6, 800faec <sulp+0x36>
 800facc:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800fad0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	dd09      	ble.n	800faec <sulp+0x36>
 800fad8:	051b      	lsls	r3, r3, #20
 800fada:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800fade:	2400      	movs	r4, #0
 800fae0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800fae4:	4622      	mov	r2, r4
 800fae6:	462b      	mov	r3, r5
 800fae8:	f7f0 fd86 	bl	80005f8 <__aeabi_dmul>
 800faec:	bd70      	pop	{r4, r5, r6, pc}
	...

0800faf0 <_strtod_l>:
 800faf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800faf4:	ed2d 8b02 	vpush	{d8}
 800faf8:	b09d      	sub	sp, #116	; 0x74
 800fafa:	461f      	mov	r7, r3
 800fafc:	2300      	movs	r3, #0
 800fafe:	9318      	str	r3, [sp, #96]	; 0x60
 800fb00:	4ba2      	ldr	r3, [pc, #648]	; (800fd8c <_strtod_l+0x29c>)
 800fb02:	9213      	str	r2, [sp, #76]	; 0x4c
 800fb04:	681b      	ldr	r3, [r3, #0]
 800fb06:	9305      	str	r3, [sp, #20]
 800fb08:	4604      	mov	r4, r0
 800fb0a:	4618      	mov	r0, r3
 800fb0c:	4688      	mov	r8, r1
 800fb0e:	f7f0 fb5f 	bl	80001d0 <strlen>
 800fb12:	f04f 0a00 	mov.w	sl, #0
 800fb16:	4605      	mov	r5, r0
 800fb18:	f04f 0b00 	mov.w	fp, #0
 800fb1c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800fb20:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fb22:	781a      	ldrb	r2, [r3, #0]
 800fb24:	2a2b      	cmp	r2, #43	; 0x2b
 800fb26:	d04e      	beq.n	800fbc6 <_strtod_l+0xd6>
 800fb28:	d83b      	bhi.n	800fba2 <_strtod_l+0xb2>
 800fb2a:	2a0d      	cmp	r2, #13
 800fb2c:	d834      	bhi.n	800fb98 <_strtod_l+0xa8>
 800fb2e:	2a08      	cmp	r2, #8
 800fb30:	d834      	bhi.n	800fb9c <_strtod_l+0xac>
 800fb32:	2a00      	cmp	r2, #0
 800fb34:	d03e      	beq.n	800fbb4 <_strtod_l+0xc4>
 800fb36:	2300      	movs	r3, #0
 800fb38:	930a      	str	r3, [sp, #40]	; 0x28
 800fb3a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800fb3c:	7833      	ldrb	r3, [r6, #0]
 800fb3e:	2b30      	cmp	r3, #48	; 0x30
 800fb40:	f040 80b0 	bne.w	800fca4 <_strtod_l+0x1b4>
 800fb44:	7873      	ldrb	r3, [r6, #1]
 800fb46:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800fb4a:	2b58      	cmp	r3, #88	; 0x58
 800fb4c:	d168      	bne.n	800fc20 <_strtod_l+0x130>
 800fb4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fb50:	9301      	str	r3, [sp, #4]
 800fb52:	ab18      	add	r3, sp, #96	; 0x60
 800fb54:	9702      	str	r7, [sp, #8]
 800fb56:	9300      	str	r3, [sp, #0]
 800fb58:	4a8d      	ldr	r2, [pc, #564]	; (800fd90 <_strtod_l+0x2a0>)
 800fb5a:	ab19      	add	r3, sp, #100	; 0x64
 800fb5c:	a917      	add	r1, sp, #92	; 0x5c
 800fb5e:	4620      	mov	r0, r4
 800fb60:	f001 fd80 	bl	8011664 <__gethex>
 800fb64:	f010 0707 	ands.w	r7, r0, #7
 800fb68:	4605      	mov	r5, r0
 800fb6a:	d005      	beq.n	800fb78 <_strtod_l+0x88>
 800fb6c:	2f06      	cmp	r7, #6
 800fb6e:	d12c      	bne.n	800fbca <_strtod_l+0xda>
 800fb70:	3601      	adds	r6, #1
 800fb72:	2300      	movs	r3, #0
 800fb74:	9617      	str	r6, [sp, #92]	; 0x5c
 800fb76:	930a      	str	r3, [sp, #40]	; 0x28
 800fb78:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800fb7a:	2b00      	cmp	r3, #0
 800fb7c:	f040 8590 	bne.w	80106a0 <_strtod_l+0xbb0>
 800fb80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fb82:	b1eb      	cbz	r3, 800fbc0 <_strtod_l+0xd0>
 800fb84:	4652      	mov	r2, sl
 800fb86:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800fb8a:	ec43 2b10 	vmov	d0, r2, r3
 800fb8e:	b01d      	add	sp, #116	; 0x74
 800fb90:	ecbd 8b02 	vpop	{d8}
 800fb94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb98:	2a20      	cmp	r2, #32
 800fb9a:	d1cc      	bne.n	800fb36 <_strtod_l+0x46>
 800fb9c:	3301      	adds	r3, #1
 800fb9e:	9317      	str	r3, [sp, #92]	; 0x5c
 800fba0:	e7be      	b.n	800fb20 <_strtod_l+0x30>
 800fba2:	2a2d      	cmp	r2, #45	; 0x2d
 800fba4:	d1c7      	bne.n	800fb36 <_strtod_l+0x46>
 800fba6:	2201      	movs	r2, #1
 800fba8:	920a      	str	r2, [sp, #40]	; 0x28
 800fbaa:	1c5a      	adds	r2, r3, #1
 800fbac:	9217      	str	r2, [sp, #92]	; 0x5c
 800fbae:	785b      	ldrb	r3, [r3, #1]
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d1c2      	bne.n	800fb3a <_strtod_l+0x4a>
 800fbb4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800fbb6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	f040 856e 	bne.w	801069c <_strtod_l+0xbac>
 800fbc0:	4652      	mov	r2, sl
 800fbc2:	465b      	mov	r3, fp
 800fbc4:	e7e1      	b.n	800fb8a <_strtod_l+0x9a>
 800fbc6:	2200      	movs	r2, #0
 800fbc8:	e7ee      	b.n	800fba8 <_strtod_l+0xb8>
 800fbca:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800fbcc:	b13a      	cbz	r2, 800fbde <_strtod_l+0xee>
 800fbce:	2135      	movs	r1, #53	; 0x35
 800fbd0:	a81a      	add	r0, sp, #104	; 0x68
 800fbd2:	f002 fcf2 	bl	80125ba <__copybits>
 800fbd6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800fbd8:	4620      	mov	r0, r4
 800fbda:	f002 f8b1 	bl	8011d40 <_Bfree>
 800fbde:	3f01      	subs	r7, #1
 800fbe0:	2f04      	cmp	r7, #4
 800fbe2:	d806      	bhi.n	800fbf2 <_strtod_l+0x102>
 800fbe4:	e8df f007 	tbb	[pc, r7]
 800fbe8:	1714030a 	.word	0x1714030a
 800fbec:	0a          	.byte	0x0a
 800fbed:	00          	.byte	0x00
 800fbee:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800fbf2:	0728      	lsls	r0, r5, #28
 800fbf4:	d5c0      	bpl.n	800fb78 <_strtod_l+0x88>
 800fbf6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800fbfa:	e7bd      	b.n	800fb78 <_strtod_l+0x88>
 800fbfc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800fc00:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800fc02:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800fc06:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800fc0a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800fc0e:	e7f0      	b.n	800fbf2 <_strtod_l+0x102>
 800fc10:	f8df b180 	ldr.w	fp, [pc, #384]	; 800fd94 <_strtod_l+0x2a4>
 800fc14:	e7ed      	b.n	800fbf2 <_strtod_l+0x102>
 800fc16:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800fc1a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800fc1e:	e7e8      	b.n	800fbf2 <_strtod_l+0x102>
 800fc20:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fc22:	1c5a      	adds	r2, r3, #1
 800fc24:	9217      	str	r2, [sp, #92]	; 0x5c
 800fc26:	785b      	ldrb	r3, [r3, #1]
 800fc28:	2b30      	cmp	r3, #48	; 0x30
 800fc2a:	d0f9      	beq.n	800fc20 <_strtod_l+0x130>
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d0a3      	beq.n	800fb78 <_strtod_l+0x88>
 800fc30:	2301      	movs	r3, #1
 800fc32:	f04f 0900 	mov.w	r9, #0
 800fc36:	9304      	str	r3, [sp, #16]
 800fc38:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fc3a:	9308      	str	r3, [sp, #32]
 800fc3c:	f8cd 901c 	str.w	r9, [sp, #28]
 800fc40:	464f      	mov	r7, r9
 800fc42:	220a      	movs	r2, #10
 800fc44:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800fc46:	7806      	ldrb	r6, [r0, #0]
 800fc48:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800fc4c:	b2d9      	uxtb	r1, r3
 800fc4e:	2909      	cmp	r1, #9
 800fc50:	d92a      	bls.n	800fca8 <_strtod_l+0x1b8>
 800fc52:	9905      	ldr	r1, [sp, #20]
 800fc54:	462a      	mov	r2, r5
 800fc56:	f7ff ff04 	bl	800fa62 <strncmp>
 800fc5a:	b398      	cbz	r0, 800fcc4 <_strtod_l+0x1d4>
 800fc5c:	2000      	movs	r0, #0
 800fc5e:	4632      	mov	r2, r6
 800fc60:	463d      	mov	r5, r7
 800fc62:	9005      	str	r0, [sp, #20]
 800fc64:	4603      	mov	r3, r0
 800fc66:	2a65      	cmp	r2, #101	; 0x65
 800fc68:	d001      	beq.n	800fc6e <_strtod_l+0x17e>
 800fc6a:	2a45      	cmp	r2, #69	; 0x45
 800fc6c:	d118      	bne.n	800fca0 <_strtod_l+0x1b0>
 800fc6e:	b91d      	cbnz	r5, 800fc78 <_strtod_l+0x188>
 800fc70:	9a04      	ldr	r2, [sp, #16]
 800fc72:	4302      	orrs	r2, r0
 800fc74:	d09e      	beq.n	800fbb4 <_strtod_l+0xc4>
 800fc76:	2500      	movs	r5, #0
 800fc78:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800fc7c:	f108 0201 	add.w	r2, r8, #1
 800fc80:	9217      	str	r2, [sp, #92]	; 0x5c
 800fc82:	f898 2001 	ldrb.w	r2, [r8, #1]
 800fc86:	2a2b      	cmp	r2, #43	; 0x2b
 800fc88:	d075      	beq.n	800fd76 <_strtod_l+0x286>
 800fc8a:	2a2d      	cmp	r2, #45	; 0x2d
 800fc8c:	d07b      	beq.n	800fd86 <_strtod_l+0x296>
 800fc8e:	f04f 0c00 	mov.w	ip, #0
 800fc92:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800fc96:	2909      	cmp	r1, #9
 800fc98:	f240 8082 	bls.w	800fda0 <_strtod_l+0x2b0>
 800fc9c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800fca0:	2600      	movs	r6, #0
 800fca2:	e09d      	b.n	800fde0 <_strtod_l+0x2f0>
 800fca4:	2300      	movs	r3, #0
 800fca6:	e7c4      	b.n	800fc32 <_strtod_l+0x142>
 800fca8:	2f08      	cmp	r7, #8
 800fcaa:	bfd8      	it	le
 800fcac:	9907      	ldrle	r1, [sp, #28]
 800fcae:	f100 0001 	add.w	r0, r0, #1
 800fcb2:	bfda      	itte	le
 800fcb4:	fb02 3301 	mlale	r3, r2, r1, r3
 800fcb8:	9307      	strle	r3, [sp, #28]
 800fcba:	fb02 3909 	mlagt	r9, r2, r9, r3
 800fcbe:	3701      	adds	r7, #1
 800fcc0:	9017      	str	r0, [sp, #92]	; 0x5c
 800fcc2:	e7bf      	b.n	800fc44 <_strtod_l+0x154>
 800fcc4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fcc6:	195a      	adds	r2, r3, r5
 800fcc8:	9217      	str	r2, [sp, #92]	; 0x5c
 800fcca:	5d5a      	ldrb	r2, [r3, r5]
 800fccc:	2f00      	cmp	r7, #0
 800fcce:	d037      	beq.n	800fd40 <_strtod_l+0x250>
 800fcd0:	9005      	str	r0, [sp, #20]
 800fcd2:	463d      	mov	r5, r7
 800fcd4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800fcd8:	2b09      	cmp	r3, #9
 800fcda:	d912      	bls.n	800fd02 <_strtod_l+0x212>
 800fcdc:	2301      	movs	r3, #1
 800fcde:	e7c2      	b.n	800fc66 <_strtod_l+0x176>
 800fce0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fce2:	1c5a      	adds	r2, r3, #1
 800fce4:	9217      	str	r2, [sp, #92]	; 0x5c
 800fce6:	785a      	ldrb	r2, [r3, #1]
 800fce8:	3001      	adds	r0, #1
 800fcea:	2a30      	cmp	r2, #48	; 0x30
 800fcec:	d0f8      	beq.n	800fce0 <_strtod_l+0x1f0>
 800fcee:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800fcf2:	2b08      	cmp	r3, #8
 800fcf4:	f200 84d9 	bhi.w	80106aa <_strtod_l+0xbba>
 800fcf8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fcfa:	9005      	str	r0, [sp, #20]
 800fcfc:	2000      	movs	r0, #0
 800fcfe:	9308      	str	r3, [sp, #32]
 800fd00:	4605      	mov	r5, r0
 800fd02:	3a30      	subs	r2, #48	; 0x30
 800fd04:	f100 0301 	add.w	r3, r0, #1
 800fd08:	d014      	beq.n	800fd34 <_strtod_l+0x244>
 800fd0a:	9905      	ldr	r1, [sp, #20]
 800fd0c:	4419      	add	r1, r3
 800fd0e:	9105      	str	r1, [sp, #20]
 800fd10:	462b      	mov	r3, r5
 800fd12:	eb00 0e05 	add.w	lr, r0, r5
 800fd16:	210a      	movs	r1, #10
 800fd18:	4573      	cmp	r3, lr
 800fd1a:	d113      	bne.n	800fd44 <_strtod_l+0x254>
 800fd1c:	182b      	adds	r3, r5, r0
 800fd1e:	2b08      	cmp	r3, #8
 800fd20:	f105 0501 	add.w	r5, r5, #1
 800fd24:	4405      	add	r5, r0
 800fd26:	dc1c      	bgt.n	800fd62 <_strtod_l+0x272>
 800fd28:	9907      	ldr	r1, [sp, #28]
 800fd2a:	230a      	movs	r3, #10
 800fd2c:	fb03 2301 	mla	r3, r3, r1, r2
 800fd30:	9307      	str	r3, [sp, #28]
 800fd32:	2300      	movs	r3, #0
 800fd34:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800fd36:	1c51      	adds	r1, r2, #1
 800fd38:	9117      	str	r1, [sp, #92]	; 0x5c
 800fd3a:	7852      	ldrb	r2, [r2, #1]
 800fd3c:	4618      	mov	r0, r3
 800fd3e:	e7c9      	b.n	800fcd4 <_strtod_l+0x1e4>
 800fd40:	4638      	mov	r0, r7
 800fd42:	e7d2      	b.n	800fcea <_strtod_l+0x1fa>
 800fd44:	2b08      	cmp	r3, #8
 800fd46:	dc04      	bgt.n	800fd52 <_strtod_l+0x262>
 800fd48:	9e07      	ldr	r6, [sp, #28]
 800fd4a:	434e      	muls	r6, r1
 800fd4c:	9607      	str	r6, [sp, #28]
 800fd4e:	3301      	adds	r3, #1
 800fd50:	e7e2      	b.n	800fd18 <_strtod_l+0x228>
 800fd52:	f103 0c01 	add.w	ip, r3, #1
 800fd56:	f1bc 0f10 	cmp.w	ip, #16
 800fd5a:	bfd8      	it	le
 800fd5c:	fb01 f909 	mulle.w	r9, r1, r9
 800fd60:	e7f5      	b.n	800fd4e <_strtod_l+0x25e>
 800fd62:	2d10      	cmp	r5, #16
 800fd64:	bfdc      	itt	le
 800fd66:	230a      	movle	r3, #10
 800fd68:	fb03 2909 	mlale	r9, r3, r9, r2
 800fd6c:	e7e1      	b.n	800fd32 <_strtod_l+0x242>
 800fd6e:	2300      	movs	r3, #0
 800fd70:	9305      	str	r3, [sp, #20]
 800fd72:	2301      	movs	r3, #1
 800fd74:	e77c      	b.n	800fc70 <_strtod_l+0x180>
 800fd76:	f04f 0c00 	mov.w	ip, #0
 800fd7a:	f108 0202 	add.w	r2, r8, #2
 800fd7e:	9217      	str	r2, [sp, #92]	; 0x5c
 800fd80:	f898 2002 	ldrb.w	r2, [r8, #2]
 800fd84:	e785      	b.n	800fc92 <_strtod_l+0x1a2>
 800fd86:	f04f 0c01 	mov.w	ip, #1
 800fd8a:	e7f6      	b.n	800fd7a <_strtod_l+0x28a>
 800fd8c:	08014dc0 	.word	0x08014dc0
 800fd90:	08014c74 	.word	0x08014c74
 800fd94:	7ff00000 	.word	0x7ff00000
 800fd98:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800fd9a:	1c51      	adds	r1, r2, #1
 800fd9c:	9117      	str	r1, [sp, #92]	; 0x5c
 800fd9e:	7852      	ldrb	r2, [r2, #1]
 800fda0:	2a30      	cmp	r2, #48	; 0x30
 800fda2:	d0f9      	beq.n	800fd98 <_strtod_l+0x2a8>
 800fda4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800fda8:	2908      	cmp	r1, #8
 800fdaa:	f63f af79 	bhi.w	800fca0 <_strtod_l+0x1b0>
 800fdae:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800fdb2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800fdb4:	9206      	str	r2, [sp, #24]
 800fdb6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800fdb8:	1c51      	adds	r1, r2, #1
 800fdba:	9117      	str	r1, [sp, #92]	; 0x5c
 800fdbc:	7852      	ldrb	r2, [r2, #1]
 800fdbe:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800fdc2:	2e09      	cmp	r6, #9
 800fdc4:	d937      	bls.n	800fe36 <_strtod_l+0x346>
 800fdc6:	9e06      	ldr	r6, [sp, #24]
 800fdc8:	1b89      	subs	r1, r1, r6
 800fdca:	2908      	cmp	r1, #8
 800fdcc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800fdd0:	dc02      	bgt.n	800fdd8 <_strtod_l+0x2e8>
 800fdd2:	4576      	cmp	r6, lr
 800fdd4:	bfa8      	it	ge
 800fdd6:	4676      	movge	r6, lr
 800fdd8:	f1bc 0f00 	cmp.w	ip, #0
 800fddc:	d000      	beq.n	800fde0 <_strtod_l+0x2f0>
 800fdde:	4276      	negs	r6, r6
 800fde0:	2d00      	cmp	r5, #0
 800fde2:	d14d      	bne.n	800fe80 <_strtod_l+0x390>
 800fde4:	9904      	ldr	r1, [sp, #16]
 800fde6:	4301      	orrs	r1, r0
 800fde8:	f47f aec6 	bne.w	800fb78 <_strtod_l+0x88>
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	f47f aee1 	bne.w	800fbb4 <_strtod_l+0xc4>
 800fdf2:	2a69      	cmp	r2, #105	; 0x69
 800fdf4:	d027      	beq.n	800fe46 <_strtod_l+0x356>
 800fdf6:	dc24      	bgt.n	800fe42 <_strtod_l+0x352>
 800fdf8:	2a49      	cmp	r2, #73	; 0x49
 800fdfa:	d024      	beq.n	800fe46 <_strtod_l+0x356>
 800fdfc:	2a4e      	cmp	r2, #78	; 0x4e
 800fdfe:	f47f aed9 	bne.w	800fbb4 <_strtod_l+0xc4>
 800fe02:	499f      	ldr	r1, [pc, #636]	; (8010080 <_strtod_l+0x590>)
 800fe04:	a817      	add	r0, sp, #92	; 0x5c
 800fe06:	f001 fe85 	bl	8011b14 <__match>
 800fe0a:	2800      	cmp	r0, #0
 800fe0c:	f43f aed2 	beq.w	800fbb4 <_strtod_l+0xc4>
 800fe10:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fe12:	781b      	ldrb	r3, [r3, #0]
 800fe14:	2b28      	cmp	r3, #40	; 0x28
 800fe16:	d12d      	bne.n	800fe74 <_strtod_l+0x384>
 800fe18:	499a      	ldr	r1, [pc, #616]	; (8010084 <_strtod_l+0x594>)
 800fe1a:	aa1a      	add	r2, sp, #104	; 0x68
 800fe1c:	a817      	add	r0, sp, #92	; 0x5c
 800fe1e:	f001 fe8d 	bl	8011b3c <__hexnan>
 800fe22:	2805      	cmp	r0, #5
 800fe24:	d126      	bne.n	800fe74 <_strtod_l+0x384>
 800fe26:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800fe28:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800fe2c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800fe30:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800fe34:	e6a0      	b.n	800fb78 <_strtod_l+0x88>
 800fe36:	210a      	movs	r1, #10
 800fe38:	fb01 2e0e 	mla	lr, r1, lr, r2
 800fe3c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800fe40:	e7b9      	b.n	800fdb6 <_strtod_l+0x2c6>
 800fe42:	2a6e      	cmp	r2, #110	; 0x6e
 800fe44:	e7db      	b.n	800fdfe <_strtod_l+0x30e>
 800fe46:	4990      	ldr	r1, [pc, #576]	; (8010088 <_strtod_l+0x598>)
 800fe48:	a817      	add	r0, sp, #92	; 0x5c
 800fe4a:	f001 fe63 	bl	8011b14 <__match>
 800fe4e:	2800      	cmp	r0, #0
 800fe50:	f43f aeb0 	beq.w	800fbb4 <_strtod_l+0xc4>
 800fe54:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fe56:	498d      	ldr	r1, [pc, #564]	; (801008c <_strtod_l+0x59c>)
 800fe58:	3b01      	subs	r3, #1
 800fe5a:	a817      	add	r0, sp, #92	; 0x5c
 800fe5c:	9317      	str	r3, [sp, #92]	; 0x5c
 800fe5e:	f001 fe59 	bl	8011b14 <__match>
 800fe62:	b910      	cbnz	r0, 800fe6a <_strtod_l+0x37a>
 800fe64:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fe66:	3301      	adds	r3, #1
 800fe68:	9317      	str	r3, [sp, #92]	; 0x5c
 800fe6a:	f8df b230 	ldr.w	fp, [pc, #560]	; 801009c <_strtod_l+0x5ac>
 800fe6e:	f04f 0a00 	mov.w	sl, #0
 800fe72:	e681      	b.n	800fb78 <_strtod_l+0x88>
 800fe74:	4886      	ldr	r0, [pc, #536]	; (8010090 <_strtod_l+0x5a0>)
 800fe76:	f002 fd3f 	bl	80128f8 <nan>
 800fe7a:	ec5b ab10 	vmov	sl, fp, d0
 800fe7e:	e67b      	b.n	800fb78 <_strtod_l+0x88>
 800fe80:	9b05      	ldr	r3, [sp, #20]
 800fe82:	9807      	ldr	r0, [sp, #28]
 800fe84:	1af3      	subs	r3, r6, r3
 800fe86:	2f00      	cmp	r7, #0
 800fe88:	bf08      	it	eq
 800fe8a:	462f      	moveq	r7, r5
 800fe8c:	2d10      	cmp	r5, #16
 800fe8e:	9306      	str	r3, [sp, #24]
 800fe90:	46a8      	mov	r8, r5
 800fe92:	bfa8      	it	ge
 800fe94:	f04f 0810 	movge.w	r8, #16
 800fe98:	f7f0 fb34 	bl	8000504 <__aeabi_ui2d>
 800fe9c:	2d09      	cmp	r5, #9
 800fe9e:	4682      	mov	sl, r0
 800fea0:	468b      	mov	fp, r1
 800fea2:	dd13      	ble.n	800fecc <_strtod_l+0x3dc>
 800fea4:	4b7b      	ldr	r3, [pc, #492]	; (8010094 <_strtod_l+0x5a4>)
 800fea6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800feaa:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800feae:	f7f0 fba3 	bl	80005f8 <__aeabi_dmul>
 800feb2:	4682      	mov	sl, r0
 800feb4:	4648      	mov	r0, r9
 800feb6:	468b      	mov	fp, r1
 800feb8:	f7f0 fb24 	bl	8000504 <__aeabi_ui2d>
 800febc:	4602      	mov	r2, r0
 800febe:	460b      	mov	r3, r1
 800fec0:	4650      	mov	r0, sl
 800fec2:	4659      	mov	r1, fp
 800fec4:	f7f0 f9e2 	bl	800028c <__adddf3>
 800fec8:	4682      	mov	sl, r0
 800feca:	468b      	mov	fp, r1
 800fecc:	2d0f      	cmp	r5, #15
 800fece:	dc38      	bgt.n	800ff42 <_strtod_l+0x452>
 800fed0:	9b06      	ldr	r3, [sp, #24]
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	f43f ae50 	beq.w	800fb78 <_strtod_l+0x88>
 800fed8:	dd24      	ble.n	800ff24 <_strtod_l+0x434>
 800feda:	2b16      	cmp	r3, #22
 800fedc:	dc0b      	bgt.n	800fef6 <_strtod_l+0x406>
 800fede:	496d      	ldr	r1, [pc, #436]	; (8010094 <_strtod_l+0x5a4>)
 800fee0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800fee4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fee8:	4652      	mov	r2, sl
 800feea:	465b      	mov	r3, fp
 800feec:	f7f0 fb84 	bl	80005f8 <__aeabi_dmul>
 800fef0:	4682      	mov	sl, r0
 800fef2:	468b      	mov	fp, r1
 800fef4:	e640      	b.n	800fb78 <_strtod_l+0x88>
 800fef6:	9a06      	ldr	r2, [sp, #24]
 800fef8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800fefc:	4293      	cmp	r3, r2
 800fefe:	db20      	blt.n	800ff42 <_strtod_l+0x452>
 800ff00:	4c64      	ldr	r4, [pc, #400]	; (8010094 <_strtod_l+0x5a4>)
 800ff02:	f1c5 050f 	rsb	r5, r5, #15
 800ff06:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800ff0a:	4652      	mov	r2, sl
 800ff0c:	465b      	mov	r3, fp
 800ff0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ff12:	f7f0 fb71 	bl	80005f8 <__aeabi_dmul>
 800ff16:	9b06      	ldr	r3, [sp, #24]
 800ff18:	1b5d      	subs	r5, r3, r5
 800ff1a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800ff1e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ff22:	e7e3      	b.n	800feec <_strtod_l+0x3fc>
 800ff24:	9b06      	ldr	r3, [sp, #24]
 800ff26:	3316      	adds	r3, #22
 800ff28:	db0b      	blt.n	800ff42 <_strtod_l+0x452>
 800ff2a:	9b05      	ldr	r3, [sp, #20]
 800ff2c:	1b9e      	subs	r6, r3, r6
 800ff2e:	4b59      	ldr	r3, [pc, #356]	; (8010094 <_strtod_l+0x5a4>)
 800ff30:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800ff34:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ff38:	4650      	mov	r0, sl
 800ff3a:	4659      	mov	r1, fp
 800ff3c:	f7f0 fc86 	bl	800084c <__aeabi_ddiv>
 800ff40:	e7d6      	b.n	800fef0 <_strtod_l+0x400>
 800ff42:	9b06      	ldr	r3, [sp, #24]
 800ff44:	eba5 0808 	sub.w	r8, r5, r8
 800ff48:	4498      	add	r8, r3
 800ff4a:	f1b8 0f00 	cmp.w	r8, #0
 800ff4e:	dd74      	ble.n	801003a <_strtod_l+0x54a>
 800ff50:	f018 030f 	ands.w	r3, r8, #15
 800ff54:	d00a      	beq.n	800ff6c <_strtod_l+0x47c>
 800ff56:	494f      	ldr	r1, [pc, #316]	; (8010094 <_strtod_l+0x5a4>)
 800ff58:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ff5c:	4652      	mov	r2, sl
 800ff5e:	465b      	mov	r3, fp
 800ff60:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ff64:	f7f0 fb48 	bl	80005f8 <__aeabi_dmul>
 800ff68:	4682      	mov	sl, r0
 800ff6a:	468b      	mov	fp, r1
 800ff6c:	f038 080f 	bics.w	r8, r8, #15
 800ff70:	d04f      	beq.n	8010012 <_strtod_l+0x522>
 800ff72:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800ff76:	dd22      	ble.n	800ffbe <_strtod_l+0x4ce>
 800ff78:	2500      	movs	r5, #0
 800ff7a:	462e      	mov	r6, r5
 800ff7c:	9507      	str	r5, [sp, #28]
 800ff7e:	9505      	str	r5, [sp, #20]
 800ff80:	2322      	movs	r3, #34	; 0x22
 800ff82:	f8df b118 	ldr.w	fp, [pc, #280]	; 801009c <_strtod_l+0x5ac>
 800ff86:	6023      	str	r3, [r4, #0]
 800ff88:	f04f 0a00 	mov.w	sl, #0
 800ff8c:	9b07      	ldr	r3, [sp, #28]
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	f43f adf2 	beq.w	800fb78 <_strtod_l+0x88>
 800ff94:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ff96:	4620      	mov	r0, r4
 800ff98:	f001 fed2 	bl	8011d40 <_Bfree>
 800ff9c:	9905      	ldr	r1, [sp, #20]
 800ff9e:	4620      	mov	r0, r4
 800ffa0:	f001 fece 	bl	8011d40 <_Bfree>
 800ffa4:	4631      	mov	r1, r6
 800ffa6:	4620      	mov	r0, r4
 800ffa8:	f001 feca 	bl	8011d40 <_Bfree>
 800ffac:	9907      	ldr	r1, [sp, #28]
 800ffae:	4620      	mov	r0, r4
 800ffb0:	f001 fec6 	bl	8011d40 <_Bfree>
 800ffb4:	4629      	mov	r1, r5
 800ffb6:	4620      	mov	r0, r4
 800ffb8:	f001 fec2 	bl	8011d40 <_Bfree>
 800ffbc:	e5dc      	b.n	800fb78 <_strtod_l+0x88>
 800ffbe:	4b36      	ldr	r3, [pc, #216]	; (8010098 <_strtod_l+0x5a8>)
 800ffc0:	9304      	str	r3, [sp, #16]
 800ffc2:	2300      	movs	r3, #0
 800ffc4:	ea4f 1828 	mov.w	r8, r8, asr #4
 800ffc8:	4650      	mov	r0, sl
 800ffca:	4659      	mov	r1, fp
 800ffcc:	4699      	mov	r9, r3
 800ffce:	f1b8 0f01 	cmp.w	r8, #1
 800ffd2:	dc21      	bgt.n	8010018 <_strtod_l+0x528>
 800ffd4:	b10b      	cbz	r3, 800ffda <_strtod_l+0x4ea>
 800ffd6:	4682      	mov	sl, r0
 800ffd8:	468b      	mov	fp, r1
 800ffda:	4b2f      	ldr	r3, [pc, #188]	; (8010098 <_strtod_l+0x5a8>)
 800ffdc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800ffe0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800ffe4:	4652      	mov	r2, sl
 800ffe6:	465b      	mov	r3, fp
 800ffe8:	e9d9 0100 	ldrd	r0, r1, [r9]
 800ffec:	f7f0 fb04 	bl	80005f8 <__aeabi_dmul>
 800fff0:	4b2a      	ldr	r3, [pc, #168]	; (801009c <_strtod_l+0x5ac>)
 800fff2:	460a      	mov	r2, r1
 800fff4:	400b      	ands	r3, r1
 800fff6:	492a      	ldr	r1, [pc, #168]	; (80100a0 <_strtod_l+0x5b0>)
 800fff8:	428b      	cmp	r3, r1
 800fffa:	4682      	mov	sl, r0
 800fffc:	d8bc      	bhi.n	800ff78 <_strtod_l+0x488>
 800fffe:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8010002:	428b      	cmp	r3, r1
 8010004:	bf86      	itte	hi
 8010006:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80100a4 <_strtod_l+0x5b4>
 801000a:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 801000e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8010012:	2300      	movs	r3, #0
 8010014:	9304      	str	r3, [sp, #16]
 8010016:	e084      	b.n	8010122 <_strtod_l+0x632>
 8010018:	f018 0f01 	tst.w	r8, #1
 801001c:	d005      	beq.n	801002a <_strtod_l+0x53a>
 801001e:	9b04      	ldr	r3, [sp, #16]
 8010020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010024:	f7f0 fae8 	bl	80005f8 <__aeabi_dmul>
 8010028:	2301      	movs	r3, #1
 801002a:	9a04      	ldr	r2, [sp, #16]
 801002c:	3208      	adds	r2, #8
 801002e:	f109 0901 	add.w	r9, r9, #1
 8010032:	ea4f 0868 	mov.w	r8, r8, asr #1
 8010036:	9204      	str	r2, [sp, #16]
 8010038:	e7c9      	b.n	800ffce <_strtod_l+0x4de>
 801003a:	d0ea      	beq.n	8010012 <_strtod_l+0x522>
 801003c:	f1c8 0800 	rsb	r8, r8, #0
 8010040:	f018 020f 	ands.w	r2, r8, #15
 8010044:	d00a      	beq.n	801005c <_strtod_l+0x56c>
 8010046:	4b13      	ldr	r3, [pc, #76]	; (8010094 <_strtod_l+0x5a4>)
 8010048:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801004c:	4650      	mov	r0, sl
 801004e:	4659      	mov	r1, fp
 8010050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010054:	f7f0 fbfa 	bl	800084c <__aeabi_ddiv>
 8010058:	4682      	mov	sl, r0
 801005a:	468b      	mov	fp, r1
 801005c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8010060:	d0d7      	beq.n	8010012 <_strtod_l+0x522>
 8010062:	f1b8 0f1f 	cmp.w	r8, #31
 8010066:	dd1f      	ble.n	80100a8 <_strtod_l+0x5b8>
 8010068:	2500      	movs	r5, #0
 801006a:	462e      	mov	r6, r5
 801006c:	9507      	str	r5, [sp, #28]
 801006e:	9505      	str	r5, [sp, #20]
 8010070:	2322      	movs	r3, #34	; 0x22
 8010072:	f04f 0a00 	mov.w	sl, #0
 8010076:	f04f 0b00 	mov.w	fp, #0
 801007a:	6023      	str	r3, [r4, #0]
 801007c:	e786      	b.n	800ff8c <_strtod_l+0x49c>
 801007e:	bf00      	nop
 8010080:	08014c4d 	.word	0x08014c4d
 8010084:	08014c88 	.word	0x08014c88
 8010088:	08014c45 	.word	0x08014c45
 801008c:	08014ccb 	.word	0x08014ccb
 8010090:	08014f78 	.word	0x08014f78
 8010094:	08014e58 	.word	0x08014e58
 8010098:	08014e30 	.word	0x08014e30
 801009c:	7ff00000 	.word	0x7ff00000
 80100a0:	7ca00000 	.word	0x7ca00000
 80100a4:	7fefffff 	.word	0x7fefffff
 80100a8:	f018 0310 	ands.w	r3, r8, #16
 80100ac:	bf18      	it	ne
 80100ae:	236a      	movne	r3, #106	; 0x6a
 80100b0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8010460 <_strtod_l+0x970>
 80100b4:	9304      	str	r3, [sp, #16]
 80100b6:	4650      	mov	r0, sl
 80100b8:	4659      	mov	r1, fp
 80100ba:	2300      	movs	r3, #0
 80100bc:	f018 0f01 	tst.w	r8, #1
 80100c0:	d004      	beq.n	80100cc <_strtod_l+0x5dc>
 80100c2:	e9d9 2300 	ldrd	r2, r3, [r9]
 80100c6:	f7f0 fa97 	bl	80005f8 <__aeabi_dmul>
 80100ca:	2301      	movs	r3, #1
 80100cc:	ea5f 0868 	movs.w	r8, r8, asr #1
 80100d0:	f109 0908 	add.w	r9, r9, #8
 80100d4:	d1f2      	bne.n	80100bc <_strtod_l+0x5cc>
 80100d6:	b10b      	cbz	r3, 80100dc <_strtod_l+0x5ec>
 80100d8:	4682      	mov	sl, r0
 80100da:	468b      	mov	fp, r1
 80100dc:	9b04      	ldr	r3, [sp, #16]
 80100de:	b1c3      	cbz	r3, 8010112 <_strtod_l+0x622>
 80100e0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80100e4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	4659      	mov	r1, fp
 80100ec:	dd11      	ble.n	8010112 <_strtod_l+0x622>
 80100ee:	2b1f      	cmp	r3, #31
 80100f0:	f340 8124 	ble.w	801033c <_strtod_l+0x84c>
 80100f4:	2b34      	cmp	r3, #52	; 0x34
 80100f6:	bfde      	ittt	le
 80100f8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80100fc:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8010100:	fa03 f202 	lslle.w	r2, r3, r2
 8010104:	f04f 0a00 	mov.w	sl, #0
 8010108:	bfcc      	ite	gt
 801010a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801010e:	ea02 0b01 	andle.w	fp, r2, r1
 8010112:	2200      	movs	r2, #0
 8010114:	2300      	movs	r3, #0
 8010116:	4650      	mov	r0, sl
 8010118:	4659      	mov	r1, fp
 801011a:	f7f0 fcd5 	bl	8000ac8 <__aeabi_dcmpeq>
 801011e:	2800      	cmp	r0, #0
 8010120:	d1a2      	bne.n	8010068 <_strtod_l+0x578>
 8010122:	9b07      	ldr	r3, [sp, #28]
 8010124:	9300      	str	r3, [sp, #0]
 8010126:	9908      	ldr	r1, [sp, #32]
 8010128:	462b      	mov	r3, r5
 801012a:	463a      	mov	r2, r7
 801012c:	4620      	mov	r0, r4
 801012e:	f001 fe6f 	bl	8011e10 <__s2b>
 8010132:	9007      	str	r0, [sp, #28]
 8010134:	2800      	cmp	r0, #0
 8010136:	f43f af1f 	beq.w	800ff78 <_strtod_l+0x488>
 801013a:	9b05      	ldr	r3, [sp, #20]
 801013c:	1b9e      	subs	r6, r3, r6
 801013e:	9b06      	ldr	r3, [sp, #24]
 8010140:	2b00      	cmp	r3, #0
 8010142:	bfb4      	ite	lt
 8010144:	4633      	movlt	r3, r6
 8010146:	2300      	movge	r3, #0
 8010148:	930c      	str	r3, [sp, #48]	; 0x30
 801014a:	9b06      	ldr	r3, [sp, #24]
 801014c:	2500      	movs	r5, #0
 801014e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010152:	9312      	str	r3, [sp, #72]	; 0x48
 8010154:	462e      	mov	r6, r5
 8010156:	9b07      	ldr	r3, [sp, #28]
 8010158:	4620      	mov	r0, r4
 801015a:	6859      	ldr	r1, [r3, #4]
 801015c:	f001 fdb0 	bl	8011cc0 <_Balloc>
 8010160:	9005      	str	r0, [sp, #20]
 8010162:	2800      	cmp	r0, #0
 8010164:	f43f af0c 	beq.w	800ff80 <_strtod_l+0x490>
 8010168:	9b07      	ldr	r3, [sp, #28]
 801016a:	691a      	ldr	r2, [r3, #16]
 801016c:	3202      	adds	r2, #2
 801016e:	f103 010c 	add.w	r1, r3, #12
 8010172:	0092      	lsls	r2, r2, #2
 8010174:	300c      	adds	r0, #12
 8010176:	f7fe fec1 	bl	800eefc <memcpy>
 801017a:	ec4b ab10 	vmov	d0, sl, fp
 801017e:	aa1a      	add	r2, sp, #104	; 0x68
 8010180:	a919      	add	r1, sp, #100	; 0x64
 8010182:	4620      	mov	r0, r4
 8010184:	f002 f98a 	bl	801249c <__d2b>
 8010188:	ec4b ab18 	vmov	d8, sl, fp
 801018c:	9018      	str	r0, [sp, #96]	; 0x60
 801018e:	2800      	cmp	r0, #0
 8010190:	f43f aef6 	beq.w	800ff80 <_strtod_l+0x490>
 8010194:	2101      	movs	r1, #1
 8010196:	4620      	mov	r0, r4
 8010198:	f001 fed4 	bl	8011f44 <__i2b>
 801019c:	4606      	mov	r6, r0
 801019e:	2800      	cmp	r0, #0
 80101a0:	f43f aeee 	beq.w	800ff80 <_strtod_l+0x490>
 80101a4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80101a6:	9904      	ldr	r1, [sp, #16]
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	bfab      	itete	ge
 80101ac:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80101ae:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80101b0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80101b2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80101b6:	bfac      	ite	ge
 80101b8:	eb03 0902 	addge.w	r9, r3, r2
 80101bc:	1ad7      	sublt	r7, r2, r3
 80101be:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80101c0:	eba3 0801 	sub.w	r8, r3, r1
 80101c4:	4490      	add	r8, r2
 80101c6:	4ba1      	ldr	r3, [pc, #644]	; (801044c <_strtod_l+0x95c>)
 80101c8:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80101cc:	4598      	cmp	r8, r3
 80101ce:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80101d2:	f280 80c7 	bge.w	8010364 <_strtod_l+0x874>
 80101d6:	eba3 0308 	sub.w	r3, r3, r8
 80101da:	2b1f      	cmp	r3, #31
 80101dc:	eba2 0203 	sub.w	r2, r2, r3
 80101e0:	f04f 0101 	mov.w	r1, #1
 80101e4:	f300 80b1 	bgt.w	801034a <_strtod_l+0x85a>
 80101e8:	fa01 f303 	lsl.w	r3, r1, r3
 80101ec:	930d      	str	r3, [sp, #52]	; 0x34
 80101ee:	2300      	movs	r3, #0
 80101f0:	9308      	str	r3, [sp, #32]
 80101f2:	eb09 0802 	add.w	r8, r9, r2
 80101f6:	9b04      	ldr	r3, [sp, #16]
 80101f8:	45c1      	cmp	r9, r8
 80101fa:	4417      	add	r7, r2
 80101fc:	441f      	add	r7, r3
 80101fe:	464b      	mov	r3, r9
 8010200:	bfa8      	it	ge
 8010202:	4643      	movge	r3, r8
 8010204:	42bb      	cmp	r3, r7
 8010206:	bfa8      	it	ge
 8010208:	463b      	movge	r3, r7
 801020a:	2b00      	cmp	r3, #0
 801020c:	bfc2      	ittt	gt
 801020e:	eba8 0803 	subgt.w	r8, r8, r3
 8010212:	1aff      	subgt	r7, r7, r3
 8010214:	eba9 0903 	subgt.w	r9, r9, r3
 8010218:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801021a:	2b00      	cmp	r3, #0
 801021c:	dd17      	ble.n	801024e <_strtod_l+0x75e>
 801021e:	4631      	mov	r1, r6
 8010220:	461a      	mov	r2, r3
 8010222:	4620      	mov	r0, r4
 8010224:	f001 ff4e 	bl	80120c4 <__pow5mult>
 8010228:	4606      	mov	r6, r0
 801022a:	2800      	cmp	r0, #0
 801022c:	f43f aea8 	beq.w	800ff80 <_strtod_l+0x490>
 8010230:	4601      	mov	r1, r0
 8010232:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8010234:	4620      	mov	r0, r4
 8010236:	f001 fe9b 	bl	8011f70 <__multiply>
 801023a:	900b      	str	r0, [sp, #44]	; 0x2c
 801023c:	2800      	cmp	r0, #0
 801023e:	f43f ae9f 	beq.w	800ff80 <_strtod_l+0x490>
 8010242:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010244:	4620      	mov	r0, r4
 8010246:	f001 fd7b 	bl	8011d40 <_Bfree>
 801024a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801024c:	9318      	str	r3, [sp, #96]	; 0x60
 801024e:	f1b8 0f00 	cmp.w	r8, #0
 8010252:	f300 808c 	bgt.w	801036e <_strtod_l+0x87e>
 8010256:	9b06      	ldr	r3, [sp, #24]
 8010258:	2b00      	cmp	r3, #0
 801025a:	dd08      	ble.n	801026e <_strtod_l+0x77e>
 801025c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801025e:	9905      	ldr	r1, [sp, #20]
 8010260:	4620      	mov	r0, r4
 8010262:	f001 ff2f 	bl	80120c4 <__pow5mult>
 8010266:	9005      	str	r0, [sp, #20]
 8010268:	2800      	cmp	r0, #0
 801026a:	f43f ae89 	beq.w	800ff80 <_strtod_l+0x490>
 801026e:	2f00      	cmp	r7, #0
 8010270:	dd08      	ble.n	8010284 <_strtod_l+0x794>
 8010272:	9905      	ldr	r1, [sp, #20]
 8010274:	463a      	mov	r2, r7
 8010276:	4620      	mov	r0, r4
 8010278:	f001 ff7e 	bl	8012178 <__lshift>
 801027c:	9005      	str	r0, [sp, #20]
 801027e:	2800      	cmp	r0, #0
 8010280:	f43f ae7e 	beq.w	800ff80 <_strtod_l+0x490>
 8010284:	f1b9 0f00 	cmp.w	r9, #0
 8010288:	dd08      	ble.n	801029c <_strtod_l+0x7ac>
 801028a:	4631      	mov	r1, r6
 801028c:	464a      	mov	r2, r9
 801028e:	4620      	mov	r0, r4
 8010290:	f001 ff72 	bl	8012178 <__lshift>
 8010294:	4606      	mov	r6, r0
 8010296:	2800      	cmp	r0, #0
 8010298:	f43f ae72 	beq.w	800ff80 <_strtod_l+0x490>
 801029c:	9a05      	ldr	r2, [sp, #20]
 801029e:	9918      	ldr	r1, [sp, #96]	; 0x60
 80102a0:	4620      	mov	r0, r4
 80102a2:	f001 fff5 	bl	8012290 <__mdiff>
 80102a6:	4605      	mov	r5, r0
 80102a8:	2800      	cmp	r0, #0
 80102aa:	f43f ae69 	beq.w	800ff80 <_strtod_l+0x490>
 80102ae:	68c3      	ldr	r3, [r0, #12]
 80102b0:	930b      	str	r3, [sp, #44]	; 0x2c
 80102b2:	2300      	movs	r3, #0
 80102b4:	60c3      	str	r3, [r0, #12]
 80102b6:	4631      	mov	r1, r6
 80102b8:	f001 ffce 	bl	8012258 <__mcmp>
 80102bc:	2800      	cmp	r0, #0
 80102be:	da60      	bge.n	8010382 <_strtod_l+0x892>
 80102c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80102c2:	ea53 030a 	orrs.w	r3, r3, sl
 80102c6:	f040 8082 	bne.w	80103ce <_strtod_l+0x8de>
 80102ca:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d17d      	bne.n	80103ce <_strtod_l+0x8de>
 80102d2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80102d6:	0d1b      	lsrs	r3, r3, #20
 80102d8:	051b      	lsls	r3, r3, #20
 80102da:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80102de:	d976      	bls.n	80103ce <_strtod_l+0x8de>
 80102e0:	696b      	ldr	r3, [r5, #20]
 80102e2:	b913      	cbnz	r3, 80102ea <_strtod_l+0x7fa>
 80102e4:	692b      	ldr	r3, [r5, #16]
 80102e6:	2b01      	cmp	r3, #1
 80102e8:	dd71      	ble.n	80103ce <_strtod_l+0x8de>
 80102ea:	4629      	mov	r1, r5
 80102ec:	2201      	movs	r2, #1
 80102ee:	4620      	mov	r0, r4
 80102f0:	f001 ff42 	bl	8012178 <__lshift>
 80102f4:	4631      	mov	r1, r6
 80102f6:	4605      	mov	r5, r0
 80102f8:	f001 ffae 	bl	8012258 <__mcmp>
 80102fc:	2800      	cmp	r0, #0
 80102fe:	dd66      	ble.n	80103ce <_strtod_l+0x8de>
 8010300:	9904      	ldr	r1, [sp, #16]
 8010302:	4a53      	ldr	r2, [pc, #332]	; (8010450 <_strtod_l+0x960>)
 8010304:	465b      	mov	r3, fp
 8010306:	2900      	cmp	r1, #0
 8010308:	f000 8081 	beq.w	801040e <_strtod_l+0x91e>
 801030c:	ea02 010b 	and.w	r1, r2, fp
 8010310:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8010314:	dc7b      	bgt.n	801040e <_strtod_l+0x91e>
 8010316:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801031a:	f77f aea9 	ble.w	8010070 <_strtod_l+0x580>
 801031e:	4b4d      	ldr	r3, [pc, #308]	; (8010454 <_strtod_l+0x964>)
 8010320:	4650      	mov	r0, sl
 8010322:	4659      	mov	r1, fp
 8010324:	2200      	movs	r2, #0
 8010326:	f7f0 f967 	bl	80005f8 <__aeabi_dmul>
 801032a:	460b      	mov	r3, r1
 801032c:	4303      	orrs	r3, r0
 801032e:	bf08      	it	eq
 8010330:	2322      	moveq	r3, #34	; 0x22
 8010332:	4682      	mov	sl, r0
 8010334:	468b      	mov	fp, r1
 8010336:	bf08      	it	eq
 8010338:	6023      	streq	r3, [r4, #0]
 801033a:	e62b      	b.n	800ff94 <_strtod_l+0x4a4>
 801033c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010340:	fa02 f303 	lsl.w	r3, r2, r3
 8010344:	ea03 0a0a 	and.w	sl, r3, sl
 8010348:	e6e3      	b.n	8010112 <_strtod_l+0x622>
 801034a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801034e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8010352:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8010356:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801035a:	fa01 f308 	lsl.w	r3, r1, r8
 801035e:	9308      	str	r3, [sp, #32]
 8010360:	910d      	str	r1, [sp, #52]	; 0x34
 8010362:	e746      	b.n	80101f2 <_strtod_l+0x702>
 8010364:	2300      	movs	r3, #0
 8010366:	9308      	str	r3, [sp, #32]
 8010368:	2301      	movs	r3, #1
 801036a:	930d      	str	r3, [sp, #52]	; 0x34
 801036c:	e741      	b.n	80101f2 <_strtod_l+0x702>
 801036e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010370:	4642      	mov	r2, r8
 8010372:	4620      	mov	r0, r4
 8010374:	f001 ff00 	bl	8012178 <__lshift>
 8010378:	9018      	str	r0, [sp, #96]	; 0x60
 801037a:	2800      	cmp	r0, #0
 801037c:	f47f af6b 	bne.w	8010256 <_strtod_l+0x766>
 8010380:	e5fe      	b.n	800ff80 <_strtod_l+0x490>
 8010382:	465f      	mov	r7, fp
 8010384:	d16e      	bne.n	8010464 <_strtod_l+0x974>
 8010386:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010388:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801038c:	b342      	cbz	r2, 80103e0 <_strtod_l+0x8f0>
 801038e:	4a32      	ldr	r2, [pc, #200]	; (8010458 <_strtod_l+0x968>)
 8010390:	4293      	cmp	r3, r2
 8010392:	d128      	bne.n	80103e6 <_strtod_l+0x8f6>
 8010394:	9b04      	ldr	r3, [sp, #16]
 8010396:	4651      	mov	r1, sl
 8010398:	b1eb      	cbz	r3, 80103d6 <_strtod_l+0x8e6>
 801039a:	4b2d      	ldr	r3, [pc, #180]	; (8010450 <_strtod_l+0x960>)
 801039c:	403b      	ands	r3, r7
 801039e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80103a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80103a6:	d819      	bhi.n	80103dc <_strtod_l+0x8ec>
 80103a8:	0d1b      	lsrs	r3, r3, #20
 80103aa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80103ae:	fa02 f303 	lsl.w	r3, r2, r3
 80103b2:	4299      	cmp	r1, r3
 80103b4:	d117      	bne.n	80103e6 <_strtod_l+0x8f6>
 80103b6:	4b29      	ldr	r3, [pc, #164]	; (801045c <_strtod_l+0x96c>)
 80103b8:	429f      	cmp	r7, r3
 80103ba:	d102      	bne.n	80103c2 <_strtod_l+0x8d2>
 80103bc:	3101      	adds	r1, #1
 80103be:	f43f addf 	beq.w	800ff80 <_strtod_l+0x490>
 80103c2:	4b23      	ldr	r3, [pc, #140]	; (8010450 <_strtod_l+0x960>)
 80103c4:	403b      	ands	r3, r7
 80103c6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80103ca:	f04f 0a00 	mov.w	sl, #0
 80103ce:	9b04      	ldr	r3, [sp, #16]
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d1a4      	bne.n	801031e <_strtod_l+0x82e>
 80103d4:	e5de      	b.n	800ff94 <_strtod_l+0x4a4>
 80103d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80103da:	e7ea      	b.n	80103b2 <_strtod_l+0x8c2>
 80103dc:	4613      	mov	r3, r2
 80103de:	e7e8      	b.n	80103b2 <_strtod_l+0x8c2>
 80103e0:	ea53 030a 	orrs.w	r3, r3, sl
 80103e4:	d08c      	beq.n	8010300 <_strtod_l+0x810>
 80103e6:	9b08      	ldr	r3, [sp, #32]
 80103e8:	b1db      	cbz	r3, 8010422 <_strtod_l+0x932>
 80103ea:	423b      	tst	r3, r7
 80103ec:	d0ef      	beq.n	80103ce <_strtod_l+0x8de>
 80103ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80103f0:	9a04      	ldr	r2, [sp, #16]
 80103f2:	4650      	mov	r0, sl
 80103f4:	4659      	mov	r1, fp
 80103f6:	b1c3      	cbz	r3, 801042a <_strtod_l+0x93a>
 80103f8:	f7ff fb5d 	bl	800fab6 <sulp>
 80103fc:	4602      	mov	r2, r0
 80103fe:	460b      	mov	r3, r1
 8010400:	ec51 0b18 	vmov	r0, r1, d8
 8010404:	f7ef ff42 	bl	800028c <__adddf3>
 8010408:	4682      	mov	sl, r0
 801040a:	468b      	mov	fp, r1
 801040c:	e7df      	b.n	80103ce <_strtod_l+0x8de>
 801040e:	4013      	ands	r3, r2
 8010410:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8010414:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8010418:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801041c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8010420:	e7d5      	b.n	80103ce <_strtod_l+0x8de>
 8010422:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010424:	ea13 0f0a 	tst.w	r3, sl
 8010428:	e7e0      	b.n	80103ec <_strtod_l+0x8fc>
 801042a:	f7ff fb44 	bl	800fab6 <sulp>
 801042e:	4602      	mov	r2, r0
 8010430:	460b      	mov	r3, r1
 8010432:	ec51 0b18 	vmov	r0, r1, d8
 8010436:	f7ef ff27 	bl	8000288 <__aeabi_dsub>
 801043a:	2200      	movs	r2, #0
 801043c:	2300      	movs	r3, #0
 801043e:	4682      	mov	sl, r0
 8010440:	468b      	mov	fp, r1
 8010442:	f7f0 fb41 	bl	8000ac8 <__aeabi_dcmpeq>
 8010446:	2800      	cmp	r0, #0
 8010448:	d0c1      	beq.n	80103ce <_strtod_l+0x8de>
 801044a:	e611      	b.n	8010070 <_strtod_l+0x580>
 801044c:	fffffc02 	.word	0xfffffc02
 8010450:	7ff00000 	.word	0x7ff00000
 8010454:	39500000 	.word	0x39500000
 8010458:	000fffff 	.word	0x000fffff
 801045c:	7fefffff 	.word	0x7fefffff
 8010460:	08014ca0 	.word	0x08014ca0
 8010464:	4631      	mov	r1, r6
 8010466:	4628      	mov	r0, r5
 8010468:	f002 f874 	bl	8012554 <__ratio>
 801046c:	ec59 8b10 	vmov	r8, r9, d0
 8010470:	ee10 0a10 	vmov	r0, s0
 8010474:	2200      	movs	r2, #0
 8010476:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801047a:	4649      	mov	r1, r9
 801047c:	f7f0 fb38 	bl	8000af0 <__aeabi_dcmple>
 8010480:	2800      	cmp	r0, #0
 8010482:	d07a      	beq.n	801057a <_strtod_l+0xa8a>
 8010484:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010486:	2b00      	cmp	r3, #0
 8010488:	d04a      	beq.n	8010520 <_strtod_l+0xa30>
 801048a:	4b95      	ldr	r3, [pc, #596]	; (80106e0 <_strtod_l+0xbf0>)
 801048c:	2200      	movs	r2, #0
 801048e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010492:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80106e0 <_strtod_l+0xbf0>
 8010496:	f04f 0800 	mov.w	r8, #0
 801049a:	4b92      	ldr	r3, [pc, #584]	; (80106e4 <_strtod_l+0xbf4>)
 801049c:	403b      	ands	r3, r7
 801049e:	930d      	str	r3, [sp, #52]	; 0x34
 80104a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80104a2:	4b91      	ldr	r3, [pc, #580]	; (80106e8 <_strtod_l+0xbf8>)
 80104a4:	429a      	cmp	r2, r3
 80104a6:	f040 80b0 	bne.w	801060a <_strtod_l+0xb1a>
 80104aa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80104ae:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80104b2:	ec4b ab10 	vmov	d0, sl, fp
 80104b6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80104ba:	f001 ff73 	bl	80123a4 <__ulp>
 80104be:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80104c2:	ec53 2b10 	vmov	r2, r3, d0
 80104c6:	f7f0 f897 	bl	80005f8 <__aeabi_dmul>
 80104ca:	4652      	mov	r2, sl
 80104cc:	465b      	mov	r3, fp
 80104ce:	f7ef fedd 	bl	800028c <__adddf3>
 80104d2:	460b      	mov	r3, r1
 80104d4:	4983      	ldr	r1, [pc, #524]	; (80106e4 <_strtod_l+0xbf4>)
 80104d6:	4a85      	ldr	r2, [pc, #532]	; (80106ec <_strtod_l+0xbfc>)
 80104d8:	4019      	ands	r1, r3
 80104da:	4291      	cmp	r1, r2
 80104dc:	4682      	mov	sl, r0
 80104de:	d960      	bls.n	80105a2 <_strtod_l+0xab2>
 80104e0:	ee18 3a90 	vmov	r3, s17
 80104e4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80104e8:	4293      	cmp	r3, r2
 80104ea:	d104      	bne.n	80104f6 <_strtod_l+0xa06>
 80104ec:	ee18 3a10 	vmov	r3, s16
 80104f0:	3301      	adds	r3, #1
 80104f2:	f43f ad45 	beq.w	800ff80 <_strtod_l+0x490>
 80104f6:	f8df b200 	ldr.w	fp, [pc, #512]	; 80106f8 <_strtod_l+0xc08>
 80104fa:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80104fe:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010500:	4620      	mov	r0, r4
 8010502:	f001 fc1d 	bl	8011d40 <_Bfree>
 8010506:	9905      	ldr	r1, [sp, #20]
 8010508:	4620      	mov	r0, r4
 801050a:	f001 fc19 	bl	8011d40 <_Bfree>
 801050e:	4631      	mov	r1, r6
 8010510:	4620      	mov	r0, r4
 8010512:	f001 fc15 	bl	8011d40 <_Bfree>
 8010516:	4629      	mov	r1, r5
 8010518:	4620      	mov	r0, r4
 801051a:	f001 fc11 	bl	8011d40 <_Bfree>
 801051e:	e61a      	b.n	8010156 <_strtod_l+0x666>
 8010520:	f1ba 0f00 	cmp.w	sl, #0
 8010524:	d11b      	bne.n	801055e <_strtod_l+0xa6e>
 8010526:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801052a:	b9f3      	cbnz	r3, 801056a <_strtod_l+0xa7a>
 801052c:	4b6c      	ldr	r3, [pc, #432]	; (80106e0 <_strtod_l+0xbf0>)
 801052e:	2200      	movs	r2, #0
 8010530:	4640      	mov	r0, r8
 8010532:	4649      	mov	r1, r9
 8010534:	f7f0 fad2 	bl	8000adc <__aeabi_dcmplt>
 8010538:	b9d0      	cbnz	r0, 8010570 <_strtod_l+0xa80>
 801053a:	4640      	mov	r0, r8
 801053c:	4649      	mov	r1, r9
 801053e:	4b6c      	ldr	r3, [pc, #432]	; (80106f0 <_strtod_l+0xc00>)
 8010540:	2200      	movs	r2, #0
 8010542:	f7f0 f859 	bl	80005f8 <__aeabi_dmul>
 8010546:	4680      	mov	r8, r0
 8010548:	4689      	mov	r9, r1
 801054a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801054e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8010552:	9315      	str	r3, [sp, #84]	; 0x54
 8010554:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8010558:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801055c:	e79d      	b.n	801049a <_strtod_l+0x9aa>
 801055e:	f1ba 0f01 	cmp.w	sl, #1
 8010562:	d102      	bne.n	801056a <_strtod_l+0xa7a>
 8010564:	2f00      	cmp	r7, #0
 8010566:	f43f ad83 	beq.w	8010070 <_strtod_l+0x580>
 801056a:	4b62      	ldr	r3, [pc, #392]	; (80106f4 <_strtod_l+0xc04>)
 801056c:	2200      	movs	r2, #0
 801056e:	e78e      	b.n	801048e <_strtod_l+0x99e>
 8010570:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80106f0 <_strtod_l+0xc00>
 8010574:	f04f 0800 	mov.w	r8, #0
 8010578:	e7e7      	b.n	801054a <_strtod_l+0xa5a>
 801057a:	4b5d      	ldr	r3, [pc, #372]	; (80106f0 <_strtod_l+0xc00>)
 801057c:	4640      	mov	r0, r8
 801057e:	4649      	mov	r1, r9
 8010580:	2200      	movs	r2, #0
 8010582:	f7f0 f839 	bl	80005f8 <__aeabi_dmul>
 8010586:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010588:	4680      	mov	r8, r0
 801058a:	4689      	mov	r9, r1
 801058c:	b933      	cbnz	r3, 801059c <_strtod_l+0xaac>
 801058e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010592:	900e      	str	r0, [sp, #56]	; 0x38
 8010594:	930f      	str	r3, [sp, #60]	; 0x3c
 8010596:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801059a:	e7dd      	b.n	8010558 <_strtod_l+0xa68>
 801059c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80105a0:	e7f9      	b.n	8010596 <_strtod_l+0xaa6>
 80105a2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80105a6:	9b04      	ldr	r3, [sp, #16]
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	d1a8      	bne.n	80104fe <_strtod_l+0xa0e>
 80105ac:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80105b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80105b2:	0d1b      	lsrs	r3, r3, #20
 80105b4:	051b      	lsls	r3, r3, #20
 80105b6:	429a      	cmp	r2, r3
 80105b8:	d1a1      	bne.n	80104fe <_strtod_l+0xa0e>
 80105ba:	4640      	mov	r0, r8
 80105bc:	4649      	mov	r1, r9
 80105be:	f7f0 fbcb 	bl	8000d58 <__aeabi_d2lz>
 80105c2:	f7ef ffeb 	bl	800059c <__aeabi_l2d>
 80105c6:	4602      	mov	r2, r0
 80105c8:	460b      	mov	r3, r1
 80105ca:	4640      	mov	r0, r8
 80105cc:	4649      	mov	r1, r9
 80105ce:	f7ef fe5b 	bl	8000288 <__aeabi_dsub>
 80105d2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80105d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80105d8:	ea43 030a 	orr.w	r3, r3, sl
 80105dc:	4313      	orrs	r3, r2
 80105de:	4680      	mov	r8, r0
 80105e0:	4689      	mov	r9, r1
 80105e2:	d055      	beq.n	8010690 <_strtod_l+0xba0>
 80105e4:	a336      	add	r3, pc, #216	; (adr r3, 80106c0 <_strtod_l+0xbd0>)
 80105e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105ea:	f7f0 fa77 	bl	8000adc <__aeabi_dcmplt>
 80105ee:	2800      	cmp	r0, #0
 80105f0:	f47f acd0 	bne.w	800ff94 <_strtod_l+0x4a4>
 80105f4:	a334      	add	r3, pc, #208	; (adr r3, 80106c8 <_strtod_l+0xbd8>)
 80105f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105fa:	4640      	mov	r0, r8
 80105fc:	4649      	mov	r1, r9
 80105fe:	f7f0 fa8b 	bl	8000b18 <__aeabi_dcmpgt>
 8010602:	2800      	cmp	r0, #0
 8010604:	f43f af7b 	beq.w	80104fe <_strtod_l+0xa0e>
 8010608:	e4c4      	b.n	800ff94 <_strtod_l+0x4a4>
 801060a:	9b04      	ldr	r3, [sp, #16]
 801060c:	b333      	cbz	r3, 801065c <_strtod_l+0xb6c>
 801060e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010610:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8010614:	d822      	bhi.n	801065c <_strtod_l+0xb6c>
 8010616:	a32e      	add	r3, pc, #184	; (adr r3, 80106d0 <_strtod_l+0xbe0>)
 8010618:	e9d3 2300 	ldrd	r2, r3, [r3]
 801061c:	4640      	mov	r0, r8
 801061e:	4649      	mov	r1, r9
 8010620:	f7f0 fa66 	bl	8000af0 <__aeabi_dcmple>
 8010624:	b1a0      	cbz	r0, 8010650 <_strtod_l+0xb60>
 8010626:	4649      	mov	r1, r9
 8010628:	4640      	mov	r0, r8
 801062a:	f7f0 fabd 	bl	8000ba8 <__aeabi_d2uiz>
 801062e:	2801      	cmp	r0, #1
 8010630:	bf38      	it	cc
 8010632:	2001      	movcc	r0, #1
 8010634:	f7ef ff66 	bl	8000504 <__aeabi_ui2d>
 8010638:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801063a:	4680      	mov	r8, r0
 801063c:	4689      	mov	r9, r1
 801063e:	bb23      	cbnz	r3, 801068a <_strtod_l+0xb9a>
 8010640:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010644:	9010      	str	r0, [sp, #64]	; 0x40
 8010646:	9311      	str	r3, [sp, #68]	; 0x44
 8010648:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801064c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010650:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010652:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010654:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8010658:	1a9b      	subs	r3, r3, r2
 801065a:	9309      	str	r3, [sp, #36]	; 0x24
 801065c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010660:	eeb0 0a48 	vmov.f32	s0, s16
 8010664:	eef0 0a68 	vmov.f32	s1, s17
 8010668:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801066c:	f001 fe9a 	bl	80123a4 <__ulp>
 8010670:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010674:	ec53 2b10 	vmov	r2, r3, d0
 8010678:	f7ef ffbe 	bl	80005f8 <__aeabi_dmul>
 801067c:	ec53 2b18 	vmov	r2, r3, d8
 8010680:	f7ef fe04 	bl	800028c <__adddf3>
 8010684:	4682      	mov	sl, r0
 8010686:	468b      	mov	fp, r1
 8010688:	e78d      	b.n	80105a6 <_strtod_l+0xab6>
 801068a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 801068e:	e7db      	b.n	8010648 <_strtod_l+0xb58>
 8010690:	a311      	add	r3, pc, #68	; (adr r3, 80106d8 <_strtod_l+0xbe8>)
 8010692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010696:	f7f0 fa21 	bl	8000adc <__aeabi_dcmplt>
 801069a:	e7b2      	b.n	8010602 <_strtod_l+0xb12>
 801069c:	2300      	movs	r3, #0
 801069e:	930a      	str	r3, [sp, #40]	; 0x28
 80106a0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80106a2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80106a4:	6013      	str	r3, [r2, #0]
 80106a6:	f7ff ba6b 	b.w	800fb80 <_strtod_l+0x90>
 80106aa:	2a65      	cmp	r2, #101	; 0x65
 80106ac:	f43f ab5f 	beq.w	800fd6e <_strtod_l+0x27e>
 80106b0:	2a45      	cmp	r2, #69	; 0x45
 80106b2:	f43f ab5c 	beq.w	800fd6e <_strtod_l+0x27e>
 80106b6:	2301      	movs	r3, #1
 80106b8:	f7ff bb94 	b.w	800fde4 <_strtod_l+0x2f4>
 80106bc:	f3af 8000 	nop.w
 80106c0:	94a03595 	.word	0x94a03595
 80106c4:	3fdfffff 	.word	0x3fdfffff
 80106c8:	35afe535 	.word	0x35afe535
 80106cc:	3fe00000 	.word	0x3fe00000
 80106d0:	ffc00000 	.word	0xffc00000
 80106d4:	41dfffff 	.word	0x41dfffff
 80106d8:	94a03595 	.word	0x94a03595
 80106dc:	3fcfffff 	.word	0x3fcfffff
 80106e0:	3ff00000 	.word	0x3ff00000
 80106e4:	7ff00000 	.word	0x7ff00000
 80106e8:	7fe00000 	.word	0x7fe00000
 80106ec:	7c9fffff 	.word	0x7c9fffff
 80106f0:	3fe00000 	.word	0x3fe00000
 80106f4:	bff00000 	.word	0xbff00000
 80106f8:	7fefffff 	.word	0x7fefffff

080106fc <strtod>:
 80106fc:	460a      	mov	r2, r1
 80106fe:	4601      	mov	r1, r0
 8010700:	4802      	ldr	r0, [pc, #8]	; (801070c <strtod+0x10>)
 8010702:	4b03      	ldr	r3, [pc, #12]	; (8010710 <strtod+0x14>)
 8010704:	6800      	ldr	r0, [r0, #0]
 8010706:	f7ff b9f3 	b.w	800faf0 <_strtod_l>
 801070a:	bf00      	nop
 801070c:	2000024c 	.word	0x2000024c
 8010710:	200002b4 	.word	0x200002b4

08010714 <_strtol_l.constprop.0>:
 8010714:	2b01      	cmp	r3, #1
 8010716:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801071a:	d001      	beq.n	8010720 <_strtol_l.constprop.0+0xc>
 801071c:	2b24      	cmp	r3, #36	; 0x24
 801071e:	d906      	bls.n	801072e <_strtol_l.constprop.0+0x1a>
 8010720:	f7fe fb06 	bl	800ed30 <__errno>
 8010724:	2316      	movs	r3, #22
 8010726:	6003      	str	r3, [r0, #0]
 8010728:	2000      	movs	r0, #0
 801072a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801072e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8010814 <_strtol_l.constprop.0+0x100>
 8010732:	460d      	mov	r5, r1
 8010734:	462e      	mov	r6, r5
 8010736:	f815 4b01 	ldrb.w	r4, [r5], #1
 801073a:	f814 700c 	ldrb.w	r7, [r4, ip]
 801073e:	f017 0708 	ands.w	r7, r7, #8
 8010742:	d1f7      	bne.n	8010734 <_strtol_l.constprop.0+0x20>
 8010744:	2c2d      	cmp	r4, #45	; 0x2d
 8010746:	d132      	bne.n	80107ae <_strtol_l.constprop.0+0x9a>
 8010748:	782c      	ldrb	r4, [r5, #0]
 801074a:	2701      	movs	r7, #1
 801074c:	1cb5      	adds	r5, r6, #2
 801074e:	2b00      	cmp	r3, #0
 8010750:	d05b      	beq.n	801080a <_strtol_l.constprop.0+0xf6>
 8010752:	2b10      	cmp	r3, #16
 8010754:	d109      	bne.n	801076a <_strtol_l.constprop.0+0x56>
 8010756:	2c30      	cmp	r4, #48	; 0x30
 8010758:	d107      	bne.n	801076a <_strtol_l.constprop.0+0x56>
 801075a:	782c      	ldrb	r4, [r5, #0]
 801075c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8010760:	2c58      	cmp	r4, #88	; 0x58
 8010762:	d14d      	bne.n	8010800 <_strtol_l.constprop.0+0xec>
 8010764:	786c      	ldrb	r4, [r5, #1]
 8010766:	2310      	movs	r3, #16
 8010768:	3502      	adds	r5, #2
 801076a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801076e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8010772:	f04f 0c00 	mov.w	ip, #0
 8010776:	fbb8 f9f3 	udiv	r9, r8, r3
 801077a:	4666      	mov	r6, ip
 801077c:	fb03 8a19 	mls	sl, r3, r9, r8
 8010780:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8010784:	f1be 0f09 	cmp.w	lr, #9
 8010788:	d816      	bhi.n	80107b8 <_strtol_l.constprop.0+0xa4>
 801078a:	4674      	mov	r4, lr
 801078c:	42a3      	cmp	r3, r4
 801078e:	dd24      	ble.n	80107da <_strtol_l.constprop.0+0xc6>
 8010790:	f1bc 0f00 	cmp.w	ip, #0
 8010794:	db1e      	blt.n	80107d4 <_strtol_l.constprop.0+0xc0>
 8010796:	45b1      	cmp	r9, r6
 8010798:	d31c      	bcc.n	80107d4 <_strtol_l.constprop.0+0xc0>
 801079a:	d101      	bne.n	80107a0 <_strtol_l.constprop.0+0x8c>
 801079c:	45a2      	cmp	sl, r4
 801079e:	db19      	blt.n	80107d4 <_strtol_l.constprop.0+0xc0>
 80107a0:	fb06 4603 	mla	r6, r6, r3, r4
 80107a4:	f04f 0c01 	mov.w	ip, #1
 80107a8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80107ac:	e7e8      	b.n	8010780 <_strtol_l.constprop.0+0x6c>
 80107ae:	2c2b      	cmp	r4, #43	; 0x2b
 80107b0:	bf04      	itt	eq
 80107b2:	782c      	ldrbeq	r4, [r5, #0]
 80107b4:	1cb5      	addeq	r5, r6, #2
 80107b6:	e7ca      	b.n	801074e <_strtol_l.constprop.0+0x3a>
 80107b8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80107bc:	f1be 0f19 	cmp.w	lr, #25
 80107c0:	d801      	bhi.n	80107c6 <_strtol_l.constprop.0+0xb2>
 80107c2:	3c37      	subs	r4, #55	; 0x37
 80107c4:	e7e2      	b.n	801078c <_strtol_l.constprop.0+0x78>
 80107c6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80107ca:	f1be 0f19 	cmp.w	lr, #25
 80107ce:	d804      	bhi.n	80107da <_strtol_l.constprop.0+0xc6>
 80107d0:	3c57      	subs	r4, #87	; 0x57
 80107d2:	e7db      	b.n	801078c <_strtol_l.constprop.0+0x78>
 80107d4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80107d8:	e7e6      	b.n	80107a8 <_strtol_l.constprop.0+0x94>
 80107da:	f1bc 0f00 	cmp.w	ip, #0
 80107de:	da05      	bge.n	80107ec <_strtol_l.constprop.0+0xd8>
 80107e0:	2322      	movs	r3, #34	; 0x22
 80107e2:	6003      	str	r3, [r0, #0]
 80107e4:	4646      	mov	r6, r8
 80107e6:	b942      	cbnz	r2, 80107fa <_strtol_l.constprop.0+0xe6>
 80107e8:	4630      	mov	r0, r6
 80107ea:	e79e      	b.n	801072a <_strtol_l.constprop.0+0x16>
 80107ec:	b107      	cbz	r7, 80107f0 <_strtol_l.constprop.0+0xdc>
 80107ee:	4276      	negs	r6, r6
 80107f0:	2a00      	cmp	r2, #0
 80107f2:	d0f9      	beq.n	80107e8 <_strtol_l.constprop.0+0xd4>
 80107f4:	f1bc 0f00 	cmp.w	ip, #0
 80107f8:	d000      	beq.n	80107fc <_strtol_l.constprop.0+0xe8>
 80107fa:	1e69      	subs	r1, r5, #1
 80107fc:	6011      	str	r1, [r2, #0]
 80107fe:	e7f3      	b.n	80107e8 <_strtol_l.constprop.0+0xd4>
 8010800:	2430      	movs	r4, #48	; 0x30
 8010802:	2b00      	cmp	r3, #0
 8010804:	d1b1      	bne.n	801076a <_strtol_l.constprop.0+0x56>
 8010806:	2308      	movs	r3, #8
 8010808:	e7af      	b.n	801076a <_strtol_l.constprop.0+0x56>
 801080a:	2c30      	cmp	r4, #48	; 0x30
 801080c:	d0a5      	beq.n	801075a <_strtol_l.constprop.0+0x46>
 801080e:	230a      	movs	r3, #10
 8010810:	e7ab      	b.n	801076a <_strtol_l.constprop.0+0x56>
 8010812:	bf00      	nop
 8010814:	08014b39 	.word	0x08014b39

08010818 <strtol>:
 8010818:	4613      	mov	r3, r2
 801081a:	460a      	mov	r2, r1
 801081c:	4601      	mov	r1, r0
 801081e:	4802      	ldr	r0, [pc, #8]	; (8010828 <strtol+0x10>)
 8010820:	6800      	ldr	r0, [r0, #0]
 8010822:	f7ff bf77 	b.w	8010714 <_strtol_l.constprop.0>
 8010826:	bf00      	nop
 8010828:	2000024c 	.word	0x2000024c

0801082c <_vsniprintf_r>:
 801082c:	b530      	push	{r4, r5, lr}
 801082e:	4614      	mov	r4, r2
 8010830:	2c00      	cmp	r4, #0
 8010832:	b09b      	sub	sp, #108	; 0x6c
 8010834:	4605      	mov	r5, r0
 8010836:	461a      	mov	r2, r3
 8010838:	da05      	bge.n	8010846 <_vsniprintf_r+0x1a>
 801083a:	238b      	movs	r3, #139	; 0x8b
 801083c:	6003      	str	r3, [r0, #0]
 801083e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010842:	b01b      	add	sp, #108	; 0x6c
 8010844:	bd30      	pop	{r4, r5, pc}
 8010846:	f44f 7302 	mov.w	r3, #520	; 0x208
 801084a:	f8ad 300c 	strh.w	r3, [sp, #12]
 801084e:	bf14      	ite	ne
 8010850:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8010854:	4623      	moveq	r3, r4
 8010856:	9302      	str	r3, [sp, #8]
 8010858:	9305      	str	r3, [sp, #20]
 801085a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801085e:	9100      	str	r1, [sp, #0]
 8010860:	9104      	str	r1, [sp, #16]
 8010862:	f8ad 300e 	strh.w	r3, [sp, #14]
 8010866:	4669      	mov	r1, sp
 8010868:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801086a:	f001 ff45 	bl	80126f8 <_svfiprintf_r>
 801086e:	1c43      	adds	r3, r0, #1
 8010870:	bfbc      	itt	lt
 8010872:	238b      	movlt	r3, #139	; 0x8b
 8010874:	602b      	strlt	r3, [r5, #0]
 8010876:	2c00      	cmp	r4, #0
 8010878:	d0e3      	beq.n	8010842 <_vsniprintf_r+0x16>
 801087a:	9b00      	ldr	r3, [sp, #0]
 801087c:	2200      	movs	r2, #0
 801087e:	701a      	strb	r2, [r3, #0]
 8010880:	e7df      	b.n	8010842 <_vsniprintf_r+0x16>
	...

08010884 <vsniprintf>:
 8010884:	b507      	push	{r0, r1, r2, lr}
 8010886:	9300      	str	r3, [sp, #0]
 8010888:	4613      	mov	r3, r2
 801088a:	460a      	mov	r2, r1
 801088c:	4601      	mov	r1, r0
 801088e:	4803      	ldr	r0, [pc, #12]	; (801089c <vsniprintf+0x18>)
 8010890:	6800      	ldr	r0, [r0, #0]
 8010892:	f7ff ffcb 	bl	801082c <_vsniprintf_r>
 8010896:	b003      	add	sp, #12
 8010898:	f85d fb04 	ldr.w	pc, [sp], #4
 801089c:	2000024c 	.word	0x2000024c

080108a0 <quorem>:
 80108a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108a4:	6903      	ldr	r3, [r0, #16]
 80108a6:	690c      	ldr	r4, [r1, #16]
 80108a8:	42a3      	cmp	r3, r4
 80108aa:	4607      	mov	r7, r0
 80108ac:	f2c0 8081 	blt.w	80109b2 <quorem+0x112>
 80108b0:	3c01      	subs	r4, #1
 80108b2:	f101 0814 	add.w	r8, r1, #20
 80108b6:	f100 0514 	add.w	r5, r0, #20
 80108ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80108be:	9301      	str	r3, [sp, #4]
 80108c0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80108c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80108c8:	3301      	adds	r3, #1
 80108ca:	429a      	cmp	r2, r3
 80108cc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80108d0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80108d4:	fbb2 f6f3 	udiv	r6, r2, r3
 80108d8:	d331      	bcc.n	801093e <quorem+0x9e>
 80108da:	f04f 0e00 	mov.w	lr, #0
 80108de:	4640      	mov	r0, r8
 80108e0:	46ac      	mov	ip, r5
 80108e2:	46f2      	mov	sl, lr
 80108e4:	f850 2b04 	ldr.w	r2, [r0], #4
 80108e8:	b293      	uxth	r3, r2
 80108ea:	fb06 e303 	mla	r3, r6, r3, lr
 80108ee:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80108f2:	b29b      	uxth	r3, r3
 80108f4:	ebaa 0303 	sub.w	r3, sl, r3
 80108f8:	f8dc a000 	ldr.w	sl, [ip]
 80108fc:	0c12      	lsrs	r2, r2, #16
 80108fe:	fa13 f38a 	uxtah	r3, r3, sl
 8010902:	fb06 e202 	mla	r2, r6, r2, lr
 8010906:	9300      	str	r3, [sp, #0]
 8010908:	9b00      	ldr	r3, [sp, #0]
 801090a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801090e:	b292      	uxth	r2, r2
 8010910:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8010914:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010918:	f8bd 3000 	ldrh.w	r3, [sp]
 801091c:	4581      	cmp	r9, r0
 801091e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010922:	f84c 3b04 	str.w	r3, [ip], #4
 8010926:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801092a:	d2db      	bcs.n	80108e4 <quorem+0x44>
 801092c:	f855 300b 	ldr.w	r3, [r5, fp]
 8010930:	b92b      	cbnz	r3, 801093e <quorem+0x9e>
 8010932:	9b01      	ldr	r3, [sp, #4]
 8010934:	3b04      	subs	r3, #4
 8010936:	429d      	cmp	r5, r3
 8010938:	461a      	mov	r2, r3
 801093a:	d32e      	bcc.n	801099a <quorem+0xfa>
 801093c:	613c      	str	r4, [r7, #16]
 801093e:	4638      	mov	r0, r7
 8010940:	f001 fc8a 	bl	8012258 <__mcmp>
 8010944:	2800      	cmp	r0, #0
 8010946:	db24      	blt.n	8010992 <quorem+0xf2>
 8010948:	3601      	adds	r6, #1
 801094a:	4628      	mov	r0, r5
 801094c:	f04f 0c00 	mov.w	ip, #0
 8010950:	f858 2b04 	ldr.w	r2, [r8], #4
 8010954:	f8d0 e000 	ldr.w	lr, [r0]
 8010958:	b293      	uxth	r3, r2
 801095a:	ebac 0303 	sub.w	r3, ip, r3
 801095e:	0c12      	lsrs	r2, r2, #16
 8010960:	fa13 f38e 	uxtah	r3, r3, lr
 8010964:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8010968:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801096c:	b29b      	uxth	r3, r3
 801096e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010972:	45c1      	cmp	r9, r8
 8010974:	f840 3b04 	str.w	r3, [r0], #4
 8010978:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801097c:	d2e8      	bcs.n	8010950 <quorem+0xb0>
 801097e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010982:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010986:	b922      	cbnz	r2, 8010992 <quorem+0xf2>
 8010988:	3b04      	subs	r3, #4
 801098a:	429d      	cmp	r5, r3
 801098c:	461a      	mov	r2, r3
 801098e:	d30a      	bcc.n	80109a6 <quorem+0x106>
 8010990:	613c      	str	r4, [r7, #16]
 8010992:	4630      	mov	r0, r6
 8010994:	b003      	add	sp, #12
 8010996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801099a:	6812      	ldr	r2, [r2, #0]
 801099c:	3b04      	subs	r3, #4
 801099e:	2a00      	cmp	r2, #0
 80109a0:	d1cc      	bne.n	801093c <quorem+0x9c>
 80109a2:	3c01      	subs	r4, #1
 80109a4:	e7c7      	b.n	8010936 <quorem+0x96>
 80109a6:	6812      	ldr	r2, [r2, #0]
 80109a8:	3b04      	subs	r3, #4
 80109aa:	2a00      	cmp	r2, #0
 80109ac:	d1f0      	bne.n	8010990 <quorem+0xf0>
 80109ae:	3c01      	subs	r4, #1
 80109b0:	e7eb      	b.n	801098a <quorem+0xea>
 80109b2:	2000      	movs	r0, #0
 80109b4:	e7ee      	b.n	8010994 <quorem+0xf4>
	...

080109b8 <_dtoa_r>:
 80109b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109bc:	ed2d 8b04 	vpush	{d8-d9}
 80109c0:	ec57 6b10 	vmov	r6, r7, d0
 80109c4:	b093      	sub	sp, #76	; 0x4c
 80109c6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80109c8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80109cc:	9106      	str	r1, [sp, #24]
 80109ce:	ee10 aa10 	vmov	sl, s0
 80109d2:	4604      	mov	r4, r0
 80109d4:	9209      	str	r2, [sp, #36]	; 0x24
 80109d6:	930c      	str	r3, [sp, #48]	; 0x30
 80109d8:	46bb      	mov	fp, r7
 80109da:	b975      	cbnz	r5, 80109fa <_dtoa_r+0x42>
 80109dc:	2010      	movs	r0, #16
 80109de:	f7fe fa7d 	bl	800eedc <malloc>
 80109e2:	4602      	mov	r2, r0
 80109e4:	6260      	str	r0, [r4, #36]	; 0x24
 80109e6:	b920      	cbnz	r0, 80109f2 <_dtoa_r+0x3a>
 80109e8:	4ba7      	ldr	r3, [pc, #668]	; (8010c88 <_dtoa_r+0x2d0>)
 80109ea:	21ea      	movs	r1, #234	; 0xea
 80109ec:	48a7      	ldr	r0, [pc, #668]	; (8010c8c <_dtoa_r+0x2d4>)
 80109ee:	f001 ffed 	bl	80129cc <__assert_func>
 80109f2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80109f6:	6005      	str	r5, [r0, #0]
 80109f8:	60c5      	str	r5, [r0, #12]
 80109fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80109fc:	6819      	ldr	r1, [r3, #0]
 80109fe:	b151      	cbz	r1, 8010a16 <_dtoa_r+0x5e>
 8010a00:	685a      	ldr	r2, [r3, #4]
 8010a02:	604a      	str	r2, [r1, #4]
 8010a04:	2301      	movs	r3, #1
 8010a06:	4093      	lsls	r3, r2
 8010a08:	608b      	str	r3, [r1, #8]
 8010a0a:	4620      	mov	r0, r4
 8010a0c:	f001 f998 	bl	8011d40 <_Bfree>
 8010a10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010a12:	2200      	movs	r2, #0
 8010a14:	601a      	str	r2, [r3, #0]
 8010a16:	1e3b      	subs	r3, r7, #0
 8010a18:	bfaa      	itet	ge
 8010a1a:	2300      	movge	r3, #0
 8010a1c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8010a20:	f8c8 3000 	strge.w	r3, [r8]
 8010a24:	4b9a      	ldr	r3, [pc, #616]	; (8010c90 <_dtoa_r+0x2d8>)
 8010a26:	bfbc      	itt	lt
 8010a28:	2201      	movlt	r2, #1
 8010a2a:	f8c8 2000 	strlt.w	r2, [r8]
 8010a2e:	ea33 030b 	bics.w	r3, r3, fp
 8010a32:	d11b      	bne.n	8010a6c <_dtoa_r+0xb4>
 8010a34:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010a36:	f242 730f 	movw	r3, #9999	; 0x270f
 8010a3a:	6013      	str	r3, [r2, #0]
 8010a3c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010a40:	4333      	orrs	r3, r6
 8010a42:	f000 8592 	beq.w	801156a <_dtoa_r+0xbb2>
 8010a46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010a48:	b963      	cbnz	r3, 8010a64 <_dtoa_r+0xac>
 8010a4a:	4b92      	ldr	r3, [pc, #584]	; (8010c94 <_dtoa_r+0x2dc>)
 8010a4c:	e022      	b.n	8010a94 <_dtoa_r+0xdc>
 8010a4e:	4b92      	ldr	r3, [pc, #584]	; (8010c98 <_dtoa_r+0x2e0>)
 8010a50:	9301      	str	r3, [sp, #4]
 8010a52:	3308      	adds	r3, #8
 8010a54:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010a56:	6013      	str	r3, [r2, #0]
 8010a58:	9801      	ldr	r0, [sp, #4]
 8010a5a:	b013      	add	sp, #76	; 0x4c
 8010a5c:	ecbd 8b04 	vpop	{d8-d9}
 8010a60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a64:	4b8b      	ldr	r3, [pc, #556]	; (8010c94 <_dtoa_r+0x2dc>)
 8010a66:	9301      	str	r3, [sp, #4]
 8010a68:	3303      	adds	r3, #3
 8010a6a:	e7f3      	b.n	8010a54 <_dtoa_r+0x9c>
 8010a6c:	2200      	movs	r2, #0
 8010a6e:	2300      	movs	r3, #0
 8010a70:	4650      	mov	r0, sl
 8010a72:	4659      	mov	r1, fp
 8010a74:	f7f0 f828 	bl	8000ac8 <__aeabi_dcmpeq>
 8010a78:	ec4b ab19 	vmov	d9, sl, fp
 8010a7c:	4680      	mov	r8, r0
 8010a7e:	b158      	cbz	r0, 8010a98 <_dtoa_r+0xe0>
 8010a80:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010a82:	2301      	movs	r3, #1
 8010a84:	6013      	str	r3, [r2, #0]
 8010a86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	f000 856b 	beq.w	8011564 <_dtoa_r+0xbac>
 8010a8e:	4883      	ldr	r0, [pc, #524]	; (8010c9c <_dtoa_r+0x2e4>)
 8010a90:	6018      	str	r0, [r3, #0]
 8010a92:	1e43      	subs	r3, r0, #1
 8010a94:	9301      	str	r3, [sp, #4]
 8010a96:	e7df      	b.n	8010a58 <_dtoa_r+0xa0>
 8010a98:	ec4b ab10 	vmov	d0, sl, fp
 8010a9c:	aa10      	add	r2, sp, #64	; 0x40
 8010a9e:	a911      	add	r1, sp, #68	; 0x44
 8010aa0:	4620      	mov	r0, r4
 8010aa2:	f001 fcfb 	bl	801249c <__d2b>
 8010aa6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8010aaa:	ee08 0a10 	vmov	s16, r0
 8010aae:	2d00      	cmp	r5, #0
 8010ab0:	f000 8084 	beq.w	8010bbc <_dtoa_r+0x204>
 8010ab4:	ee19 3a90 	vmov	r3, s19
 8010ab8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010abc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8010ac0:	4656      	mov	r6, sl
 8010ac2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8010ac6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8010aca:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8010ace:	4b74      	ldr	r3, [pc, #464]	; (8010ca0 <_dtoa_r+0x2e8>)
 8010ad0:	2200      	movs	r2, #0
 8010ad2:	4630      	mov	r0, r6
 8010ad4:	4639      	mov	r1, r7
 8010ad6:	f7ef fbd7 	bl	8000288 <__aeabi_dsub>
 8010ada:	a365      	add	r3, pc, #404	; (adr r3, 8010c70 <_dtoa_r+0x2b8>)
 8010adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ae0:	f7ef fd8a 	bl	80005f8 <__aeabi_dmul>
 8010ae4:	a364      	add	r3, pc, #400	; (adr r3, 8010c78 <_dtoa_r+0x2c0>)
 8010ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010aea:	f7ef fbcf 	bl	800028c <__adddf3>
 8010aee:	4606      	mov	r6, r0
 8010af0:	4628      	mov	r0, r5
 8010af2:	460f      	mov	r7, r1
 8010af4:	f7ef fd16 	bl	8000524 <__aeabi_i2d>
 8010af8:	a361      	add	r3, pc, #388	; (adr r3, 8010c80 <_dtoa_r+0x2c8>)
 8010afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010afe:	f7ef fd7b 	bl	80005f8 <__aeabi_dmul>
 8010b02:	4602      	mov	r2, r0
 8010b04:	460b      	mov	r3, r1
 8010b06:	4630      	mov	r0, r6
 8010b08:	4639      	mov	r1, r7
 8010b0a:	f7ef fbbf 	bl	800028c <__adddf3>
 8010b0e:	4606      	mov	r6, r0
 8010b10:	460f      	mov	r7, r1
 8010b12:	f7f0 f821 	bl	8000b58 <__aeabi_d2iz>
 8010b16:	2200      	movs	r2, #0
 8010b18:	9000      	str	r0, [sp, #0]
 8010b1a:	2300      	movs	r3, #0
 8010b1c:	4630      	mov	r0, r6
 8010b1e:	4639      	mov	r1, r7
 8010b20:	f7ef ffdc 	bl	8000adc <__aeabi_dcmplt>
 8010b24:	b150      	cbz	r0, 8010b3c <_dtoa_r+0x184>
 8010b26:	9800      	ldr	r0, [sp, #0]
 8010b28:	f7ef fcfc 	bl	8000524 <__aeabi_i2d>
 8010b2c:	4632      	mov	r2, r6
 8010b2e:	463b      	mov	r3, r7
 8010b30:	f7ef ffca 	bl	8000ac8 <__aeabi_dcmpeq>
 8010b34:	b910      	cbnz	r0, 8010b3c <_dtoa_r+0x184>
 8010b36:	9b00      	ldr	r3, [sp, #0]
 8010b38:	3b01      	subs	r3, #1
 8010b3a:	9300      	str	r3, [sp, #0]
 8010b3c:	9b00      	ldr	r3, [sp, #0]
 8010b3e:	2b16      	cmp	r3, #22
 8010b40:	d85a      	bhi.n	8010bf8 <_dtoa_r+0x240>
 8010b42:	9a00      	ldr	r2, [sp, #0]
 8010b44:	4b57      	ldr	r3, [pc, #348]	; (8010ca4 <_dtoa_r+0x2ec>)
 8010b46:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b4e:	ec51 0b19 	vmov	r0, r1, d9
 8010b52:	f7ef ffc3 	bl	8000adc <__aeabi_dcmplt>
 8010b56:	2800      	cmp	r0, #0
 8010b58:	d050      	beq.n	8010bfc <_dtoa_r+0x244>
 8010b5a:	9b00      	ldr	r3, [sp, #0]
 8010b5c:	3b01      	subs	r3, #1
 8010b5e:	9300      	str	r3, [sp, #0]
 8010b60:	2300      	movs	r3, #0
 8010b62:	930b      	str	r3, [sp, #44]	; 0x2c
 8010b64:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010b66:	1b5d      	subs	r5, r3, r5
 8010b68:	1e6b      	subs	r3, r5, #1
 8010b6a:	9305      	str	r3, [sp, #20]
 8010b6c:	bf45      	ittet	mi
 8010b6e:	f1c5 0301 	rsbmi	r3, r5, #1
 8010b72:	9304      	strmi	r3, [sp, #16]
 8010b74:	2300      	movpl	r3, #0
 8010b76:	2300      	movmi	r3, #0
 8010b78:	bf4c      	ite	mi
 8010b7a:	9305      	strmi	r3, [sp, #20]
 8010b7c:	9304      	strpl	r3, [sp, #16]
 8010b7e:	9b00      	ldr	r3, [sp, #0]
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	db3d      	blt.n	8010c00 <_dtoa_r+0x248>
 8010b84:	9b05      	ldr	r3, [sp, #20]
 8010b86:	9a00      	ldr	r2, [sp, #0]
 8010b88:	920a      	str	r2, [sp, #40]	; 0x28
 8010b8a:	4413      	add	r3, r2
 8010b8c:	9305      	str	r3, [sp, #20]
 8010b8e:	2300      	movs	r3, #0
 8010b90:	9307      	str	r3, [sp, #28]
 8010b92:	9b06      	ldr	r3, [sp, #24]
 8010b94:	2b09      	cmp	r3, #9
 8010b96:	f200 8089 	bhi.w	8010cac <_dtoa_r+0x2f4>
 8010b9a:	2b05      	cmp	r3, #5
 8010b9c:	bfc4      	itt	gt
 8010b9e:	3b04      	subgt	r3, #4
 8010ba0:	9306      	strgt	r3, [sp, #24]
 8010ba2:	9b06      	ldr	r3, [sp, #24]
 8010ba4:	f1a3 0302 	sub.w	r3, r3, #2
 8010ba8:	bfcc      	ite	gt
 8010baa:	2500      	movgt	r5, #0
 8010bac:	2501      	movle	r5, #1
 8010bae:	2b03      	cmp	r3, #3
 8010bb0:	f200 8087 	bhi.w	8010cc2 <_dtoa_r+0x30a>
 8010bb4:	e8df f003 	tbb	[pc, r3]
 8010bb8:	59383a2d 	.word	0x59383a2d
 8010bbc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8010bc0:	441d      	add	r5, r3
 8010bc2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8010bc6:	2b20      	cmp	r3, #32
 8010bc8:	bfc1      	itttt	gt
 8010bca:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8010bce:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8010bd2:	fa0b f303 	lslgt.w	r3, fp, r3
 8010bd6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8010bda:	bfda      	itte	le
 8010bdc:	f1c3 0320 	rsble	r3, r3, #32
 8010be0:	fa06 f003 	lslle.w	r0, r6, r3
 8010be4:	4318      	orrgt	r0, r3
 8010be6:	f7ef fc8d 	bl	8000504 <__aeabi_ui2d>
 8010bea:	2301      	movs	r3, #1
 8010bec:	4606      	mov	r6, r0
 8010bee:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8010bf2:	3d01      	subs	r5, #1
 8010bf4:	930e      	str	r3, [sp, #56]	; 0x38
 8010bf6:	e76a      	b.n	8010ace <_dtoa_r+0x116>
 8010bf8:	2301      	movs	r3, #1
 8010bfa:	e7b2      	b.n	8010b62 <_dtoa_r+0x1aa>
 8010bfc:	900b      	str	r0, [sp, #44]	; 0x2c
 8010bfe:	e7b1      	b.n	8010b64 <_dtoa_r+0x1ac>
 8010c00:	9b04      	ldr	r3, [sp, #16]
 8010c02:	9a00      	ldr	r2, [sp, #0]
 8010c04:	1a9b      	subs	r3, r3, r2
 8010c06:	9304      	str	r3, [sp, #16]
 8010c08:	4253      	negs	r3, r2
 8010c0a:	9307      	str	r3, [sp, #28]
 8010c0c:	2300      	movs	r3, #0
 8010c0e:	930a      	str	r3, [sp, #40]	; 0x28
 8010c10:	e7bf      	b.n	8010b92 <_dtoa_r+0x1da>
 8010c12:	2300      	movs	r3, #0
 8010c14:	9308      	str	r3, [sp, #32]
 8010c16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	dc55      	bgt.n	8010cc8 <_dtoa_r+0x310>
 8010c1c:	2301      	movs	r3, #1
 8010c1e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010c22:	461a      	mov	r2, r3
 8010c24:	9209      	str	r2, [sp, #36]	; 0x24
 8010c26:	e00c      	b.n	8010c42 <_dtoa_r+0x28a>
 8010c28:	2301      	movs	r3, #1
 8010c2a:	e7f3      	b.n	8010c14 <_dtoa_r+0x25c>
 8010c2c:	2300      	movs	r3, #0
 8010c2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010c30:	9308      	str	r3, [sp, #32]
 8010c32:	9b00      	ldr	r3, [sp, #0]
 8010c34:	4413      	add	r3, r2
 8010c36:	9302      	str	r3, [sp, #8]
 8010c38:	3301      	adds	r3, #1
 8010c3a:	2b01      	cmp	r3, #1
 8010c3c:	9303      	str	r3, [sp, #12]
 8010c3e:	bfb8      	it	lt
 8010c40:	2301      	movlt	r3, #1
 8010c42:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8010c44:	2200      	movs	r2, #0
 8010c46:	6042      	str	r2, [r0, #4]
 8010c48:	2204      	movs	r2, #4
 8010c4a:	f102 0614 	add.w	r6, r2, #20
 8010c4e:	429e      	cmp	r6, r3
 8010c50:	6841      	ldr	r1, [r0, #4]
 8010c52:	d93d      	bls.n	8010cd0 <_dtoa_r+0x318>
 8010c54:	4620      	mov	r0, r4
 8010c56:	f001 f833 	bl	8011cc0 <_Balloc>
 8010c5a:	9001      	str	r0, [sp, #4]
 8010c5c:	2800      	cmp	r0, #0
 8010c5e:	d13b      	bne.n	8010cd8 <_dtoa_r+0x320>
 8010c60:	4b11      	ldr	r3, [pc, #68]	; (8010ca8 <_dtoa_r+0x2f0>)
 8010c62:	4602      	mov	r2, r0
 8010c64:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8010c68:	e6c0      	b.n	80109ec <_dtoa_r+0x34>
 8010c6a:	2301      	movs	r3, #1
 8010c6c:	e7df      	b.n	8010c2e <_dtoa_r+0x276>
 8010c6e:	bf00      	nop
 8010c70:	636f4361 	.word	0x636f4361
 8010c74:	3fd287a7 	.word	0x3fd287a7
 8010c78:	8b60c8b3 	.word	0x8b60c8b3
 8010c7c:	3fc68a28 	.word	0x3fc68a28
 8010c80:	509f79fb 	.word	0x509f79fb
 8010c84:	3fd34413 	.word	0x3fd34413
 8010c88:	08014cd5 	.word	0x08014cd5
 8010c8c:	08014cec 	.word	0x08014cec
 8010c90:	7ff00000 	.word	0x7ff00000
 8010c94:	08014cd1 	.word	0x08014cd1
 8010c98:	08014cc8 	.word	0x08014cc8
 8010c9c:	08014c51 	.word	0x08014c51
 8010ca0:	3ff80000 	.word	0x3ff80000
 8010ca4:	08014e58 	.word	0x08014e58
 8010ca8:	08014d47 	.word	0x08014d47
 8010cac:	2501      	movs	r5, #1
 8010cae:	2300      	movs	r3, #0
 8010cb0:	9306      	str	r3, [sp, #24]
 8010cb2:	9508      	str	r5, [sp, #32]
 8010cb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010cb8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010cbc:	2200      	movs	r2, #0
 8010cbe:	2312      	movs	r3, #18
 8010cc0:	e7b0      	b.n	8010c24 <_dtoa_r+0x26c>
 8010cc2:	2301      	movs	r3, #1
 8010cc4:	9308      	str	r3, [sp, #32]
 8010cc6:	e7f5      	b.n	8010cb4 <_dtoa_r+0x2fc>
 8010cc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010cca:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010cce:	e7b8      	b.n	8010c42 <_dtoa_r+0x28a>
 8010cd0:	3101      	adds	r1, #1
 8010cd2:	6041      	str	r1, [r0, #4]
 8010cd4:	0052      	lsls	r2, r2, #1
 8010cd6:	e7b8      	b.n	8010c4a <_dtoa_r+0x292>
 8010cd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010cda:	9a01      	ldr	r2, [sp, #4]
 8010cdc:	601a      	str	r2, [r3, #0]
 8010cde:	9b03      	ldr	r3, [sp, #12]
 8010ce0:	2b0e      	cmp	r3, #14
 8010ce2:	f200 809d 	bhi.w	8010e20 <_dtoa_r+0x468>
 8010ce6:	2d00      	cmp	r5, #0
 8010ce8:	f000 809a 	beq.w	8010e20 <_dtoa_r+0x468>
 8010cec:	9b00      	ldr	r3, [sp, #0]
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	dd32      	ble.n	8010d58 <_dtoa_r+0x3a0>
 8010cf2:	4ab7      	ldr	r2, [pc, #732]	; (8010fd0 <_dtoa_r+0x618>)
 8010cf4:	f003 030f 	and.w	r3, r3, #15
 8010cf8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010cfc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010d00:	9b00      	ldr	r3, [sp, #0]
 8010d02:	05d8      	lsls	r0, r3, #23
 8010d04:	ea4f 1723 	mov.w	r7, r3, asr #4
 8010d08:	d516      	bpl.n	8010d38 <_dtoa_r+0x380>
 8010d0a:	4bb2      	ldr	r3, [pc, #712]	; (8010fd4 <_dtoa_r+0x61c>)
 8010d0c:	ec51 0b19 	vmov	r0, r1, d9
 8010d10:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010d14:	f7ef fd9a 	bl	800084c <__aeabi_ddiv>
 8010d18:	f007 070f 	and.w	r7, r7, #15
 8010d1c:	4682      	mov	sl, r0
 8010d1e:	468b      	mov	fp, r1
 8010d20:	2503      	movs	r5, #3
 8010d22:	4eac      	ldr	r6, [pc, #688]	; (8010fd4 <_dtoa_r+0x61c>)
 8010d24:	b957      	cbnz	r7, 8010d3c <_dtoa_r+0x384>
 8010d26:	4642      	mov	r2, r8
 8010d28:	464b      	mov	r3, r9
 8010d2a:	4650      	mov	r0, sl
 8010d2c:	4659      	mov	r1, fp
 8010d2e:	f7ef fd8d 	bl	800084c <__aeabi_ddiv>
 8010d32:	4682      	mov	sl, r0
 8010d34:	468b      	mov	fp, r1
 8010d36:	e028      	b.n	8010d8a <_dtoa_r+0x3d2>
 8010d38:	2502      	movs	r5, #2
 8010d3a:	e7f2      	b.n	8010d22 <_dtoa_r+0x36a>
 8010d3c:	07f9      	lsls	r1, r7, #31
 8010d3e:	d508      	bpl.n	8010d52 <_dtoa_r+0x39a>
 8010d40:	4640      	mov	r0, r8
 8010d42:	4649      	mov	r1, r9
 8010d44:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010d48:	f7ef fc56 	bl	80005f8 <__aeabi_dmul>
 8010d4c:	3501      	adds	r5, #1
 8010d4e:	4680      	mov	r8, r0
 8010d50:	4689      	mov	r9, r1
 8010d52:	107f      	asrs	r7, r7, #1
 8010d54:	3608      	adds	r6, #8
 8010d56:	e7e5      	b.n	8010d24 <_dtoa_r+0x36c>
 8010d58:	f000 809b 	beq.w	8010e92 <_dtoa_r+0x4da>
 8010d5c:	9b00      	ldr	r3, [sp, #0]
 8010d5e:	4f9d      	ldr	r7, [pc, #628]	; (8010fd4 <_dtoa_r+0x61c>)
 8010d60:	425e      	negs	r6, r3
 8010d62:	4b9b      	ldr	r3, [pc, #620]	; (8010fd0 <_dtoa_r+0x618>)
 8010d64:	f006 020f 	and.w	r2, r6, #15
 8010d68:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d70:	ec51 0b19 	vmov	r0, r1, d9
 8010d74:	f7ef fc40 	bl	80005f8 <__aeabi_dmul>
 8010d78:	1136      	asrs	r6, r6, #4
 8010d7a:	4682      	mov	sl, r0
 8010d7c:	468b      	mov	fp, r1
 8010d7e:	2300      	movs	r3, #0
 8010d80:	2502      	movs	r5, #2
 8010d82:	2e00      	cmp	r6, #0
 8010d84:	d17a      	bne.n	8010e7c <_dtoa_r+0x4c4>
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	d1d3      	bne.n	8010d32 <_dtoa_r+0x37a>
 8010d8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	f000 8082 	beq.w	8010e96 <_dtoa_r+0x4de>
 8010d92:	4b91      	ldr	r3, [pc, #580]	; (8010fd8 <_dtoa_r+0x620>)
 8010d94:	2200      	movs	r2, #0
 8010d96:	4650      	mov	r0, sl
 8010d98:	4659      	mov	r1, fp
 8010d9a:	f7ef fe9f 	bl	8000adc <__aeabi_dcmplt>
 8010d9e:	2800      	cmp	r0, #0
 8010da0:	d079      	beq.n	8010e96 <_dtoa_r+0x4de>
 8010da2:	9b03      	ldr	r3, [sp, #12]
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	d076      	beq.n	8010e96 <_dtoa_r+0x4de>
 8010da8:	9b02      	ldr	r3, [sp, #8]
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	dd36      	ble.n	8010e1c <_dtoa_r+0x464>
 8010dae:	9b00      	ldr	r3, [sp, #0]
 8010db0:	4650      	mov	r0, sl
 8010db2:	4659      	mov	r1, fp
 8010db4:	1e5f      	subs	r7, r3, #1
 8010db6:	2200      	movs	r2, #0
 8010db8:	4b88      	ldr	r3, [pc, #544]	; (8010fdc <_dtoa_r+0x624>)
 8010dba:	f7ef fc1d 	bl	80005f8 <__aeabi_dmul>
 8010dbe:	9e02      	ldr	r6, [sp, #8]
 8010dc0:	4682      	mov	sl, r0
 8010dc2:	468b      	mov	fp, r1
 8010dc4:	3501      	adds	r5, #1
 8010dc6:	4628      	mov	r0, r5
 8010dc8:	f7ef fbac 	bl	8000524 <__aeabi_i2d>
 8010dcc:	4652      	mov	r2, sl
 8010dce:	465b      	mov	r3, fp
 8010dd0:	f7ef fc12 	bl	80005f8 <__aeabi_dmul>
 8010dd4:	4b82      	ldr	r3, [pc, #520]	; (8010fe0 <_dtoa_r+0x628>)
 8010dd6:	2200      	movs	r2, #0
 8010dd8:	f7ef fa58 	bl	800028c <__adddf3>
 8010ddc:	46d0      	mov	r8, sl
 8010dde:	46d9      	mov	r9, fp
 8010de0:	4682      	mov	sl, r0
 8010de2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8010de6:	2e00      	cmp	r6, #0
 8010de8:	d158      	bne.n	8010e9c <_dtoa_r+0x4e4>
 8010dea:	4b7e      	ldr	r3, [pc, #504]	; (8010fe4 <_dtoa_r+0x62c>)
 8010dec:	2200      	movs	r2, #0
 8010dee:	4640      	mov	r0, r8
 8010df0:	4649      	mov	r1, r9
 8010df2:	f7ef fa49 	bl	8000288 <__aeabi_dsub>
 8010df6:	4652      	mov	r2, sl
 8010df8:	465b      	mov	r3, fp
 8010dfa:	4680      	mov	r8, r0
 8010dfc:	4689      	mov	r9, r1
 8010dfe:	f7ef fe8b 	bl	8000b18 <__aeabi_dcmpgt>
 8010e02:	2800      	cmp	r0, #0
 8010e04:	f040 8295 	bne.w	8011332 <_dtoa_r+0x97a>
 8010e08:	4652      	mov	r2, sl
 8010e0a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8010e0e:	4640      	mov	r0, r8
 8010e10:	4649      	mov	r1, r9
 8010e12:	f7ef fe63 	bl	8000adc <__aeabi_dcmplt>
 8010e16:	2800      	cmp	r0, #0
 8010e18:	f040 8289 	bne.w	801132e <_dtoa_r+0x976>
 8010e1c:	ec5b ab19 	vmov	sl, fp, d9
 8010e20:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	f2c0 8148 	blt.w	80110b8 <_dtoa_r+0x700>
 8010e28:	9a00      	ldr	r2, [sp, #0]
 8010e2a:	2a0e      	cmp	r2, #14
 8010e2c:	f300 8144 	bgt.w	80110b8 <_dtoa_r+0x700>
 8010e30:	4b67      	ldr	r3, [pc, #412]	; (8010fd0 <_dtoa_r+0x618>)
 8010e32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010e36:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010e3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	f280 80d5 	bge.w	8010fec <_dtoa_r+0x634>
 8010e42:	9b03      	ldr	r3, [sp, #12]
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	f300 80d1 	bgt.w	8010fec <_dtoa_r+0x634>
 8010e4a:	f040 826f 	bne.w	801132c <_dtoa_r+0x974>
 8010e4e:	4b65      	ldr	r3, [pc, #404]	; (8010fe4 <_dtoa_r+0x62c>)
 8010e50:	2200      	movs	r2, #0
 8010e52:	4640      	mov	r0, r8
 8010e54:	4649      	mov	r1, r9
 8010e56:	f7ef fbcf 	bl	80005f8 <__aeabi_dmul>
 8010e5a:	4652      	mov	r2, sl
 8010e5c:	465b      	mov	r3, fp
 8010e5e:	f7ef fe51 	bl	8000b04 <__aeabi_dcmpge>
 8010e62:	9e03      	ldr	r6, [sp, #12]
 8010e64:	4637      	mov	r7, r6
 8010e66:	2800      	cmp	r0, #0
 8010e68:	f040 8245 	bne.w	80112f6 <_dtoa_r+0x93e>
 8010e6c:	9d01      	ldr	r5, [sp, #4]
 8010e6e:	2331      	movs	r3, #49	; 0x31
 8010e70:	f805 3b01 	strb.w	r3, [r5], #1
 8010e74:	9b00      	ldr	r3, [sp, #0]
 8010e76:	3301      	adds	r3, #1
 8010e78:	9300      	str	r3, [sp, #0]
 8010e7a:	e240      	b.n	80112fe <_dtoa_r+0x946>
 8010e7c:	07f2      	lsls	r2, r6, #31
 8010e7e:	d505      	bpl.n	8010e8c <_dtoa_r+0x4d4>
 8010e80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010e84:	f7ef fbb8 	bl	80005f8 <__aeabi_dmul>
 8010e88:	3501      	adds	r5, #1
 8010e8a:	2301      	movs	r3, #1
 8010e8c:	1076      	asrs	r6, r6, #1
 8010e8e:	3708      	adds	r7, #8
 8010e90:	e777      	b.n	8010d82 <_dtoa_r+0x3ca>
 8010e92:	2502      	movs	r5, #2
 8010e94:	e779      	b.n	8010d8a <_dtoa_r+0x3d2>
 8010e96:	9f00      	ldr	r7, [sp, #0]
 8010e98:	9e03      	ldr	r6, [sp, #12]
 8010e9a:	e794      	b.n	8010dc6 <_dtoa_r+0x40e>
 8010e9c:	9901      	ldr	r1, [sp, #4]
 8010e9e:	4b4c      	ldr	r3, [pc, #304]	; (8010fd0 <_dtoa_r+0x618>)
 8010ea0:	4431      	add	r1, r6
 8010ea2:	910d      	str	r1, [sp, #52]	; 0x34
 8010ea4:	9908      	ldr	r1, [sp, #32]
 8010ea6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8010eaa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010eae:	2900      	cmp	r1, #0
 8010eb0:	d043      	beq.n	8010f3a <_dtoa_r+0x582>
 8010eb2:	494d      	ldr	r1, [pc, #308]	; (8010fe8 <_dtoa_r+0x630>)
 8010eb4:	2000      	movs	r0, #0
 8010eb6:	f7ef fcc9 	bl	800084c <__aeabi_ddiv>
 8010eba:	4652      	mov	r2, sl
 8010ebc:	465b      	mov	r3, fp
 8010ebe:	f7ef f9e3 	bl	8000288 <__aeabi_dsub>
 8010ec2:	9d01      	ldr	r5, [sp, #4]
 8010ec4:	4682      	mov	sl, r0
 8010ec6:	468b      	mov	fp, r1
 8010ec8:	4649      	mov	r1, r9
 8010eca:	4640      	mov	r0, r8
 8010ecc:	f7ef fe44 	bl	8000b58 <__aeabi_d2iz>
 8010ed0:	4606      	mov	r6, r0
 8010ed2:	f7ef fb27 	bl	8000524 <__aeabi_i2d>
 8010ed6:	4602      	mov	r2, r0
 8010ed8:	460b      	mov	r3, r1
 8010eda:	4640      	mov	r0, r8
 8010edc:	4649      	mov	r1, r9
 8010ede:	f7ef f9d3 	bl	8000288 <__aeabi_dsub>
 8010ee2:	3630      	adds	r6, #48	; 0x30
 8010ee4:	f805 6b01 	strb.w	r6, [r5], #1
 8010ee8:	4652      	mov	r2, sl
 8010eea:	465b      	mov	r3, fp
 8010eec:	4680      	mov	r8, r0
 8010eee:	4689      	mov	r9, r1
 8010ef0:	f7ef fdf4 	bl	8000adc <__aeabi_dcmplt>
 8010ef4:	2800      	cmp	r0, #0
 8010ef6:	d163      	bne.n	8010fc0 <_dtoa_r+0x608>
 8010ef8:	4642      	mov	r2, r8
 8010efa:	464b      	mov	r3, r9
 8010efc:	4936      	ldr	r1, [pc, #216]	; (8010fd8 <_dtoa_r+0x620>)
 8010efe:	2000      	movs	r0, #0
 8010f00:	f7ef f9c2 	bl	8000288 <__aeabi_dsub>
 8010f04:	4652      	mov	r2, sl
 8010f06:	465b      	mov	r3, fp
 8010f08:	f7ef fde8 	bl	8000adc <__aeabi_dcmplt>
 8010f0c:	2800      	cmp	r0, #0
 8010f0e:	f040 80b5 	bne.w	801107c <_dtoa_r+0x6c4>
 8010f12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010f14:	429d      	cmp	r5, r3
 8010f16:	d081      	beq.n	8010e1c <_dtoa_r+0x464>
 8010f18:	4b30      	ldr	r3, [pc, #192]	; (8010fdc <_dtoa_r+0x624>)
 8010f1a:	2200      	movs	r2, #0
 8010f1c:	4650      	mov	r0, sl
 8010f1e:	4659      	mov	r1, fp
 8010f20:	f7ef fb6a 	bl	80005f8 <__aeabi_dmul>
 8010f24:	4b2d      	ldr	r3, [pc, #180]	; (8010fdc <_dtoa_r+0x624>)
 8010f26:	4682      	mov	sl, r0
 8010f28:	468b      	mov	fp, r1
 8010f2a:	4640      	mov	r0, r8
 8010f2c:	4649      	mov	r1, r9
 8010f2e:	2200      	movs	r2, #0
 8010f30:	f7ef fb62 	bl	80005f8 <__aeabi_dmul>
 8010f34:	4680      	mov	r8, r0
 8010f36:	4689      	mov	r9, r1
 8010f38:	e7c6      	b.n	8010ec8 <_dtoa_r+0x510>
 8010f3a:	4650      	mov	r0, sl
 8010f3c:	4659      	mov	r1, fp
 8010f3e:	f7ef fb5b 	bl	80005f8 <__aeabi_dmul>
 8010f42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010f44:	9d01      	ldr	r5, [sp, #4]
 8010f46:	930f      	str	r3, [sp, #60]	; 0x3c
 8010f48:	4682      	mov	sl, r0
 8010f4a:	468b      	mov	fp, r1
 8010f4c:	4649      	mov	r1, r9
 8010f4e:	4640      	mov	r0, r8
 8010f50:	f7ef fe02 	bl	8000b58 <__aeabi_d2iz>
 8010f54:	4606      	mov	r6, r0
 8010f56:	f7ef fae5 	bl	8000524 <__aeabi_i2d>
 8010f5a:	3630      	adds	r6, #48	; 0x30
 8010f5c:	4602      	mov	r2, r0
 8010f5e:	460b      	mov	r3, r1
 8010f60:	4640      	mov	r0, r8
 8010f62:	4649      	mov	r1, r9
 8010f64:	f7ef f990 	bl	8000288 <__aeabi_dsub>
 8010f68:	f805 6b01 	strb.w	r6, [r5], #1
 8010f6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010f6e:	429d      	cmp	r5, r3
 8010f70:	4680      	mov	r8, r0
 8010f72:	4689      	mov	r9, r1
 8010f74:	f04f 0200 	mov.w	r2, #0
 8010f78:	d124      	bne.n	8010fc4 <_dtoa_r+0x60c>
 8010f7a:	4b1b      	ldr	r3, [pc, #108]	; (8010fe8 <_dtoa_r+0x630>)
 8010f7c:	4650      	mov	r0, sl
 8010f7e:	4659      	mov	r1, fp
 8010f80:	f7ef f984 	bl	800028c <__adddf3>
 8010f84:	4602      	mov	r2, r0
 8010f86:	460b      	mov	r3, r1
 8010f88:	4640      	mov	r0, r8
 8010f8a:	4649      	mov	r1, r9
 8010f8c:	f7ef fdc4 	bl	8000b18 <__aeabi_dcmpgt>
 8010f90:	2800      	cmp	r0, #0
 8010f92:	d173      	bne.n	801107c <_dtoa_r+0x6c4>
 8010f94:	4652      	mov	r2, sl
 8010f96:	465b      	mov	r3, fp
 8010f98:	4913      	ldr	r1, [pc, #76]	; (8010fe8 <_dtoa_r+0x630>)
 8010f9a:	2000      	movs	r0, #0
 8010f9c:	f7ef f974 	bl	8000288 <__aeabi_dsub>
 8010fa0:	4602      	mov	r2, r0
 8010fa2:	460b      	mov	r3, r1
 8010fa4:	4640      	mov	r0, r8
 8010fa6:	4649      	mov	r1, r9
 8010fa8:	f7ef fd98 	bl	8000adc <__aeabi_dcmplt>
 8010fac:	2800      	cmp	r0, #0
 8010fae:	f43f af35 	beq.w	8010e1c <_dtoa_r+0x464>
 8010fb2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8010fb4:	1e6b      	subs	r3, r5, #1
 8010fb6:	930f      	str	r3, [sp, #60]	; 0x3c
 8010fb8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010fbc:	2b30      	cmp	r3, #48	; 0x30
 8010fbe:	d0f8      	beq.n	8010fb2 <_dtoa_r+0x5fa>
 8010fc0:	9700      	str	r7, [sp, #0]
 8010fc2:	e049      	b.n	8011058 <_dtoa_r+0x6a0>
 8010fc4:	4b05      	ldr	r3, [pc, #20]	; (8010fdc <_dtoa_r+0x624>)
 8010fc6:	f7ef fb17 	bl	80005f8 <__aeabi_dmul>
 8010fca:	4680      	mov	r8, r0
 8010fcc:	4689      	mov	r9, r1
 8010fce:	e7bd      	b.n	8010f4c <_dtoa_r+0x594>
 8010fd0:	08014e58 	.word	0x08014e58
 8010fd4:	08014e30 	.word	0x08014e30
 8010fd8:	3ff00000 	.word	0x3ff00000
 8010fdc:	40240000 	.word	0x40240000
 8010fe0:	401c0000 	.word	0x401c0000
 8010fe4:	40140000 	.word	0x40140000
 8010fe8:	3fe00000 	.word	0x3fe00000
 8010fec:	9d01      	ldr	r5, [sp, #4]
 8010fee:	4656      	mov	r6, sl
 8010ff0:	465f      	mov	r7, fp
 8010ff2:	4642      	mov	r2, r8
 8010ff4:	464b      	mov	r3, r9
 8010ff6:	4630      	mov	r0, r6
 8010ff8:	4639      	mov	r1, r7
 8010ffa:	f7ef fc27 	bl	800084c <__aeabi_ddiv>
 8010ffe:	f7ef fdab 	bl	8000b58 <__aeabi_d2iz>
 8011002:	4682      	mov	sl, r0
 8011004:	f7ef fa8e 	bl	8000524 <__aeabi_i2d>
 8011008:	4642      	mov	r2, r8
 801100a:	464b      	mov	r3, r9
 801100c:	f7ef faf4 	bl	80005f8 <__aeabi_dmul>
 8011010:	4602      	mov	r2, r0
 8011012:	460b      	mov	r3, r1
 8011014:	4630      	mov	r0, r6
 8011016:	4639      	mov	r1, r7
 8011018:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 801101c:	f7ef f934 	bl	8000288 <__aeabi_dsub>
 8011020:	f805 6b01 	strb.w	r6, [r5], #1
 8011024:	9e01      	ldr	r6, [sp, #4]
 8011026:	9f03      	ldr	r7, [sp, #12]
 8011028:	1bae      	subs	r6, r5, r6
 801102a:	42b7      	cmp	r7, r6
 801102c:	4602      	mov	r2, r0
 801102e:	460b      	mov	r3, r1
 8011030:	d135      	bne.n	801109e <_dtoa_r+0x6e6>
 8011032:	f7ef f92b 	bl	800028c <__adddf3>
 8011036:	4642      	mov	r2, r8
 8011038:	464b      	mov	r3, r9
 801103a:	4606      	mov	r6, r0
 801103c:	460f      	mov	r7, r1
 801103e:	f7ef fd6b 	bl	8000b18 <__aeabi_dcmpgt>
 8011042:	b9d0      	cbnz	r0, 801107a <_dtoa_r+0x6c2>
 8011044:	4642      	mov	r2, r8
 8011046:	464b      	mov	r3, r9
 8011048:	4630      	mov	r0, r6
 801104a:	4639      	mov	r1, r7
 801104c:	f7ef fd3c 	bl	8000ac8 <__aeabi_dcmpeq>
 8011050:	b110      	cbz	r0, 8011058 <_dtoa_r+0x6a0>
 8011052:	f01a 0f01 	tst.w	sl, #1
 8011056:	d110      	bne.n	801107a <_dtoa_r+0x6c2>
 8011058:	4620      	mov	r0, r4
 801105a:	ee18 1a10 	vmov	r1, s16
 801105e:	f000 fe6f 	bl	8011d40 <_Bfree>
 8011062:	2300      	movs	r3, #0
 8011064:	9800      	ldr	r0, [sp, #0]
 8011066:	702b      	strb	r3, [r5, #0]
 8011068:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801106a:	3001      	adds	r0, #1
 801106c:	6018      	str	r0, [r3, #0]
 801106e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011070:	2b00      	cmp	r3, #0
 8011072:	f43f acf1 	beq.w	8010a58 <_dtoa_r+0xa0>
 8011076:	601d      	str	r5, [r3, #0]
 8011078:	e4ee      	b.n	8010a58 <_dtoa_r+0xa0>
 801107a:	9f00      	ldr	r7, [sp, #0]
 801107c:	462b      	mov	r3, r5
 801107e:	461d      	mov	r5, r3
 8011080:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011084:	2a39      	cmp	r2, #57	; 0x39
 8011086:	d106      	bne.n	8011096 <_dtoa_r+0x6de>
 8011088:	9a01      	ldr	r2, [sp, #4]
 801108a:	429a      	cmp	r2, r3
 801108c:	d1f7      	bne.n	801107e <_dtoa_r+0x6c6>
 801108e:	9901      	ldr	r1, [sp, #4]
 8011090:	2230      	movs	r2, #48	; 0x30
 8011092:	3701      	adds	r7, #1
 8011094:	700a      	strb	r2, [r1, #0]
 8011096:	781a      	ldrb	r2, [r3, #0]
 8011098:	3201      	adds	r2, #1
 801109a:	701a      	strb	r2, [r3, #0]
 801109c:	e790      	b.n	8010fc0 <_dtoa_r+0x608>
 801109e:	4ba6      	ldr	r3, [pc, #664]	; (8011338 <_dtoa_r+0x980>)
 80110a0:	2200      	movs	r2, #0
 80110a2:	f7ef faa9 	bl	80005f8 <__aeabi_dmul>
 80110a6:	2200      	movs	r2, #0
 80110a8:	2300      	movs	r3, #0
 80110aa:	4606      	mov	r6, r0
 80110ac:	460f      	mov	r7, r1
 80110ae:	f7ef fd0b 	bl	8000ac8 <__aeabi_dcmpeq>
 80110b2:	2800      	cmp	r0, #0
 80110b4:	d09d      	beq.n	8010ff2 <_dtoa_r+0x63a>
 80110b6:	e7cf      	b.n	8011058 <_dtoa_r+0x6a0>
 80110b8:	9a08      	ldr	r2, [sp, #32]
 80110ba:	2a00      	cmp	r2, #0
 80110bc:	f000 80d7 	beq.w	801126e <_dtoa_r+0x8b6>
 80110c0:	9a06      	ldr	r2, [sp, #24]
 80110c2:	2a01      	cmp	r2, #1
 80110c4:	f300 80ba 	bgt.w	801123c <_dtoa_r+0x884>
 80110c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80110ca:	2a00      	cmp	r2, #0
 80110cc:	f000 80b2 	beq.w	8011234 <_dtoa_r+0x87c>
 80110d0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80110d4:	9e07      	ldr	r6, [sp, #28]
 80110d6:	9d04      	ldr	r5, [sp, #16]
 80110d8:	9a04      	ldr	r2, [sp, #16]
 80110da:	441a      	add	r2, r3
 80110dc:	9204      	str	r2, [sp, #16]
 80110de:	9a05      	ldr	r2, [sp, #20]
 80110e0:	2101      	movs	r1, #1
 80110e2:	441a      	add	r2, r3
 80110e4:	4620      	mov	r0, r4
 80110e6:	9205      	str	r2, [sp, #20]
 80110e8:	f000 ff2c 	bl	8011f44 <__i2b>
 80110ec:	4607      	mov	r7, r0
 80110ee:	2d00      	cmp	r5, #0
 80110f0:	dd0c      	ble.n	801110c <_dtoa_r+0x754>
 80110f2:	9b05      	ldr	r3, [sp, #20]
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	dd09      	ble.n	801110c <_dtoa_r+0x754>
 80110f8:	42ab      	cmp	r3, r5
 80110fa:	9a04      	ldr	r2, [sp, #16]
 80110fc:	bfa8      	it	ge
 80110fe:	462b      	movge	r3, r5
 8011100:	1ad2      	subs	r2, r2, r3
 8011102:	9204      	str	r2, [sp, #16]
 8011104:	9a05      	ldr	r2, [sp, #20]
 8011106:	1aed      	subs	r5, r5, r3
 8011108:	1ad3      	subs	r3, r2, r3
 801110a:	9305      	str	r3, [sp, #20]
 801110c:	9b07      	ldr	r3, [sp, #28]
 801110e:	b31b      	cbz	r3, 8011158 <_dtoa_r+0x7a0>
 8011110:	9b08      	ldr	r3, [sp, #32]
 8011112:	2b00      	cmp	r3, #0
 8011114:	f000 80af 	beq.w	8011276 <_dtoa_r+0x8be>
 8011118:	2e00      	cmp	r6, #0
 801111a:	dd13      	ble.n	8011144 <_dtoa_r+0x78c>
 801111c:	4639      	mov	r1, r7
 801111e:	4632      	mov	r2, r6
 8011120:	4620      	mov	r0, r4
 8011122:	f000 ffcf 	bl	80120c4 <__pow5mult>
 8011126:	ee18 2a10 	vmov	r2, s16
 801112a:	4601      	mov	r1, r0
 801112c:	4607      	mov	r7, r0
 801112e:	4620      	mov	r0, r4
 8011130:	f000 ff1e 	bl	8011f70 <__multiply>
 8011134:	ee18 1a10 	vmov	r1, s16
 8011138:	4680      	mov	r8, r0
 801113a:	4620      	mov	r0, r4
 801113c:	f000 fe00 	bl	8011d40 <_Bfree>
 8011140:	ee08 8a10 	vmov	s16, r8
 8011144:	9b07      	ldr	r3, [sp, #28]
 8011146:	1b9a      	subs	r2, r3, r6
 8011148:	d006      	beq.n	8011158 <_dtoa_r+0x7a0>
 801114a:	ee18 1a10 	vmov	r1, s16
 801114e:	4620      	mov	r0, r4
 8011150:	f000 ffb8 	bl	80120c4 <__pow5mult>
 8011154:	ee08 0a10 	vmov	s16, r0
 8011158:	2101      	movs	r1, #1
 801115a:	4620      	mov	r0, r4
 801115c:	f000 fef2 	bl	8011f44 <__i2b>
 8011160:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011162:	2b00      	cmp	r3, #0
 8011164:	4606      	mov	r6, r0
 8011166:	f340 8088 	ble.w	801127a <_dtoa_r+0x8c2>
 801116a:	461a      	mov	r2, r3
 801116c:	4601      	mov	r1, r0
 801116e:	4620      	mov	r0, r4
 8011170:	f000 ffa8 	bl	80120c4 <__pow5mult>
 8011174:	9b06      	ldr	r3, [sp, #24]
 8011176:	2b01      	cmp	r3, #1
 8011178:	4606      	mov	r6, r0
 801117a:	f340 8081 	ble.w	8011280 <_dtoa_r+0x8c8>
 801117e:	f04f 0800 	mov.w	r8, #0
 8011182:	6933      	ldr	r3, [r6, #16]
 8011184:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8011188:	6918      	ldr	r0, [r3, #16]
 801118a:	f000 fe8b 	bl	8011ea4 <__hi0bits>
 801118e:	f1c0 0020 	rsb	r0, r0, #32
 8011192:	9b05      	ldr	r3, [sp, #20]
 8011194:	4418      	add	r0, r3
 8011196:	f010 001f 	ands.w	r0, r0, #31
 801119a:	f000 8092 	beq.w	80112c2 <_dtoa_r+0x90a>
 801119e:	f1c0 0320 	rsb	r3, r0, #32
 80111a2:	2b04      	cmp	r3, #4
 80111a4:	f340 808a 	ble.w	80112bc <_dtoa_r+0x904>
 80111a8:	f1c0 001c 	rsb	r0, r0, #28
 80111ac:	9b04      	ldr	r3, [sp, #16]
 80111ae:	4403      	add	r3, r0
 80111b0:	9304      	str	r3, [sp, #16]
 80111b2:	9b05      	ldr	r3, [sp, #20]
 80111b4:	4403      	add	r3, r0
 80111b6:	4405      	add	r5, r0
 80111b8:	9305      	str	r3, [sp, #20]
 80111ba:	9b04      	ldr	r3, [sp, #16]
 80111bc:	2b00      	cmp	r3, #0
 80111be:	dd07      	ble.n	80111d0 <_dtoa_r+0x818>
 80111c0:	ee18 1a10 	vmov	r1, s16
 80111c4:	461a      	mov	r2, r3
 80111c6:	4620      	mov	r0, r4
 80111c8:	f000 ffd6 	bl	8012178 <__lshift>
 80111cc:	ee08 0a10 	vmov	s16, r0
 80111d0:	9b05      	ldr	r3, [sp, #20]
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	dd05      	ble.n	80111e2 <_dtoa_r+0x82a>
 80111d6:	4631      	mov	r1, r6
 80111d8:	461a      	mov	r2, r3
 80111da:	4620      	mov	r0, r4
 80111dc:	f000 ffcc 	bl	8012178 <__lshift>
 80111e0:	4606      	mov	r6, r0
 80111e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	d06e      	beq.n	80112c6 <_dtoa_r+0x90e>
 80111e8:	ee18 0a10 	vmov	r0, s16
 80111ec:	4631      	mov	r1, r6
 80111ee:	f001 f833 	bl	8012258 <__mcmp>
 80111f2:	2800      	cmp	r0, #0
 80111f4:	da67      	bge.n	80112c6 <_dtoa_r+0x90e>
 80111f6:	9b00      	ldr	r3, [sp, #0]
 80111f8:	3b01      	subs	r3, #1
 80111fa:	ee18 1a10 	vmov	r1, s16
 80111fe:	9300      	str	r3, [sp, #0]
 8011200:	220a      	movs	r2, #10
 8011202:	2300      	movs	r3, #0
 8011204:	4620      	mov	r0, r4
 8011206:	f000 fdbd 	bl	8011d84 <__multadd>
 801120a:	9b08      	ldr	r3, [sp, #32]
 801120c:	ee08 0a10 	vmov	s16, r0
 8011210:	2b00      	cmp	r3, #0
 8011212:	f000 81b1 	beq.w	8011578 <_dtoa_r+0xbc0>
 8011216:	2300      	movs	r3, #0
 8011218:	4639      	mov	r1, r7
 801121a:	220a      	movs	r2, #10
 801121c:	4620      	mov	r0, r4
 801121e:	f000 fdb1 	bl	8011d84 <__multadd>
 8011222:	9b02      	ldr	r3, [sp, #8]
 8011224:	2b00      	cmp	r3, #0
 8011226:	4607      	mov	r7, r0
 8011228:	f300 808e 	bgt.w	8011348 <_dtoa_r+0x990>
 801122c:	9b06      	ldr	r3, [sp, #24]
 801122e:	2b02      	cmp	r3, #2
 8011230:	dc51      	bgt.n	80112d6 <_dtoa_r+0x91e>
 8011232:	e089      	b.n	8011348 <_dtoa_r+0x990>
 8011234:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011236:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801123a:	e74b      	b.n	80110d4 <_dtoa_r+0x71c>
 801123c:	9b03      	ldr	r3, [sp, #12]
 801123e:	1e5e      	subs	r6, r3, #1
 8011240:	9b07      	ldr	r3, [sp, #28]
 8011242:	42b3      	cmp	r3, r6
 8011244:	bfbf      	itttt	lt
 8011246:	9b07      	ldrlt	r3, [sp, #28]
 8011248:	9607      	strlt	r6, [sp, #28]
 801124a:	1af2      	sublt	r2, r6, r3
 801124c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801124e:	bfb6      	itet	lt
 8011250:	189b      	addlt	r3, r3, r2
 8011252:	1b9e      	subge	r6, r3, r6
 8011254:	930a      	strlt	r3, [sp, #40]	; 0x28
 8011256:	9b03      	ldr	r3, [sp, #12]
 8011258:	bfb8      	it	lt
 801125a:	2600      	movlt	r6, #0
 801125c:	2b00      	cmp	r3, #0
 801125e:	bfb7      	itett	lt
 8011260:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8011264:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8011268:	1a9d      	sublt	r5, r3, r2
 801126a:	2300      	movlt	r3, #0
 801126c:	e734      	b.n	80110d8 <_dtoa_r+0x720>
 801126e:	9e07      	ldr	r6, [sp, #28]
 8011270:	9d04      	ldr	r5, [sp, #16]
 8011272:	9f08      	ldr	r7, [sp, #32]
 8011274:	e73b      	b.n	80110ee <_dtoa_r+0x736>
 8011276:	9a07      	ldr	r2, [sp, #28]
 8011278:	e767      	b.n	801114a <_dtoa_r+0x792>
 801127a:	9b06      	ldr	r3, [sp, #24]
 801127c:	2b01      	cmp	r3, #1
 801127e:	dc18      	bgt.n	80112b2 <_dtoa_r+0x8fa>
 8011280:	f1ba 0f00 	cmp.w	sl, #0
 8011284:	d115      	bne.n	80112b2 <_dtoa_r+0x8fa>
 8011286:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801128a:	b993      	cbnz	r3, 80112b2 <_dtoa_r+0x8fa>
 801128c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011290:	0d1b      	lsrs	r3, r3, #20
 8011292:	051b      	lsls	r3, r3, #20
 8011294:	b183      	cbz	r3, 80112b8 <_dtoa_r+0x900>
 8011296:	9b04      	ldr	r3, [sp, #16]
 8011298:	3301      	adds	r3, #1
 801129a:	9304      	str	r3, [sp, #16]
 801129c:	9b05      	ldr	r3, [sp, #20]
 801129e:	3301      	adds	r3, #1
 80112a0:	9305      	str	r3, [sp, #20]
 80112a2:	f04f 0801 	mov.w	r8, #1
 80112a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	f47f af6a 	bne.w	8011182 <_dtoa_r+0x7ca>
 80112ae:	2001      	movs	r0, #1
 80112b0:	e76f      	b.n	8011192 <_dtoa_r+0x7da>
 80112b2:	f04f 0800 	mov.w	r8, #0
 80112b6:	e7f6      	b.n	80112a6 <_dtoa_r+0x8ee>
 80112b8:	4698      	mov	r8, r3
 80112ba:	e7f4      	b.n	80112a6 <_dtoa_r+0x8ee>
 80112bc:	f43f af7d 	beq.w	80111ba <_dtoa_r+0x802>
 80112c0:	4618      	mov	r0, r3
 80112c2:	301c      	adds	r0, #28
 80112c4:	e772      	b.n	80111ac <_dtoa_r+0x7f4>
 80112c6:	9b03      	ldr	r3, [sp, #12]
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	dc37      	bgt.n	801133c <_dtoa_r+0x984>
 80112cc:	9b06      	ldr	r3, [sp, #24]
 80112ce:	2b02      	cmp	r3, #2
 80112d0:	dd34      	ble.n	801133c <_dtoa_r+0x984>
 80112d2:	9b03      	ldr	r3, [sp, #12]
 80112d4:	9302      	str	r3, [sp, #8]
 80112d6:	9b02      	ldr	r3, [sp, #8]
 80112d8:	b96b      	cbnz	r3, 80112f6 <_dtoa_r+0x93e>
 80112da:	4631      	mov	r1, r6
 80112dc:	2205      	movs	r2, #5
 80112de:	4620      	mov	r0, r4
 80112e0:	f000 fd50 	bl	8011d84 <__multadd>
 80112e4:	4601      	mov	r1, r0
 80112e6:	4606      	mov	r6, r0
 80112e8:	ee18 0a10 	vmov	r0, s16
 80112ec:	f000 ffb4 	bl	8012258 <__mcmp>
 80112f0:	2800      	cmp	r0, #0
 80112f2:	f73f adbb 	bgt.w	8010e6c <_dtoa_r+0x4b4>
 80112f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80112f8:	9d01      	ldr	r5, [sp, #4]
 80112fa:	43db      	mvns	r3, r3
 80112fc:	9300      	str	r3, [sp, #0]
 80112fe:	f04f 0800 	mov.w	r8, #0
 8011302:	4631      	mov	r1, r6
 8011304:	4620      	mov	r0, r4
 8011306:	f000 fd1b 	bl	8011d40 <_Bfree>
 801130a:	2f00      	cmp	r7, #0
 801130c:	f43f aea4 	beq.w	8011058 <_dtoa_r+0x6a0>
 8011310:	f1b8 0f00 	cmp.w	r8, #0
 8011314:	d005      	beq.n	8011322 <_dtoa_r+0x96a>
 8011316:	45b8      	cmp	r8, r7
 8011318:	d003      	beq.n	8011322 <_dtoa_r+0x96a>
 801131a:	4641      	mov	r1, r8
 801131c:	4620      	mov	r0, r4
 801131e:	f000 fd0f 	bl	8011d40 <_Bfree>
 8011322:	4639      	mov	r1, r7
 8011324:	4620      	mov	r0, r4
 8011326:	f000 fd0b 	bl	8011d40 <_Bfree>
 801132a:	e695      	b.n	8011058 <_dtoa_r+0x6a0>
 801132c:	2600      	movs	r6, #0
 801132e:	4637      	mov	r7, r6
 8011330:	e7e1      	b.n	80112f6 <_dtoa_r+0x93e>
 8011332:	9700      	str	r7, [sp, #0]
 8011334:	4637      	mov	r7, r6
 8011336:	e599      	b.n	8010e6c <_dtoa_r+0x4b4>
 8011338:	40240000 	.word	0x40240000
 801133c:	9b08      	ldr	r3, [sp, #32]
 801133e:	2b00      	cmp	r3, #0
 8011340:	f000 80ca 	beq.w	80114d8 <_dtoa_r+0xb20>
 8011344:	9b03      	ldr	r3, [sp, #12]
 8011346:	9302      	str	r3, [sp, #8]
 8011348:	2d00      	cmp	r5, #0
 801134a:	dd05      	ble.n	8011358 <_dtoa_r+0x9a0>
 801134c:	4639      	mov	r1, r7
 801134e:	462a      	mov	r2, r5
 8011350:	4620      	mov	r0, r4
 8011352:	f000 ff11 	bl	8012178 <__lshift>
 8011356:	4607      	mov	r7, r0
 8011358:	f1b8 0f00 	cmp.w	r8, #0
 801135c:	d05b      	beq.n	8011416 <_dtoa_r+0xa5e>
 801135e:	6879      	ldr	r1, [r7, #4]
 8011360:	4620      	mov	r0, r4
 8011362:	f000 fcad 	bl	8011cc0 <_Balloc>
 8011366:	4605      	mov	r5, r0
 8011368:	b928      	cbnz	r0, 8011376 <_dtoa_r+0x9be>
 801136a:	4b87      	ldr	r3, [pc, #540]	; (8011588 <_dtoa_r+0xbd0>)
 801136c:	4602      	mov	r2, r0
 801136e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8011372:	f7ff bb3b 	b.w	80109ec <_dtoa_r+0x34>
 8011376:	693a      	ldr	r2, [r7, #16]
 8011378:	3202      	adds	r2, #2
 801137a:	0092      	lsls	r2, r2, #2
 801137c:	f107 010c 	add.w	r1, r7, #12
 8011380:	300c      	adds	r0, #12
 8011382:	f7fd fdbb 	bl	800eefc <memcpy>
 8011386:	2201      	movs	r2, #1
 8011388:	4629      	mov	r1, r5
 801138a:	4620      	mov	r0, r4
 801138c:	f000 fef4 	bl	8012178 <__lshift>
 8011390:	9b01      	ldr	r3, [sp, #4]
 8011392:	f103 0901 	add.w	r9, r3, #1
 8011396:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801139a:	4413      	add	r3, r2
 801139c:	9305      	str	r3, [sp, #20]
 801139e:	f00a 0301 	and.w	r3, sl, #1
 80113a2:	46b8      	mov	r8, r7
 80113a4:	9304      	str	r3, [sp, #16]
 80113a6:	4607      	mov	r7, r0
 80113a8:	4631      	mov	r1, r6
 80113aa:	ee18 0a10 	vmov	r0, s16
 80113ae:	f7ff fa77 	bl	80108a0 <quorem>
 80113b2:	4641      	mov	r1, r8
 80113b4:	9002      	str	r0, [sp, #8]
 80113b6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80113ba:	ee18 0a10 	vmov	r0, s16
 80113be:	f000 ff4b 	bl	8012258 <__mcmp>
 80113c2:	463a      	mov	r2, r7
 80113c4:	9003      	str	r0, [sp, #12]
 80113c6:	4631      	mov	r1, r6
 80113c8:	4620      	mov	r0, r4
 80113ca:	f000 ff61 	bl	8012290 <__mdiff>
 80113ce:	68c2      	ldr	r2, [r0, #12]
 80113d0:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 80113d4:	4605      	mov	r5, r0
 80113d6:	bb02      	cbnz	r2, 801141a <_dtoa_r+0xa62>
 80113d8:	4601      	mov	r1, r0
 80113da:	ee18 0a10 	vmov	r0, s16
 80113de:	f000 ff3b 	bl	8012258 <__mcmp>
 80113e2:	4602      	mov	r2, r0
 80113e4:	4629      	mov	r1, r5
 80113e6:	4620      	mov	r0, r4
 80113e8:	9207      	str	r2, [sp, #28]
 80113ea:	f000 fca9 	bl	8011d40 <_Bfree>
 80113ee:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80113f2:	ea43 0102 	orr.w	r1, r3, r2
 80113f6:	9b04      	ldr	r3, [sp, #16]
 80113f8:	430b      	orrs	r3, r1
 80113fa:	464d      	mov	r5, r9
 80113fc:	d10f      	bne.n	801141e <_dtoa_r+0xa66>
 80113fe:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011402:	d02a      	beq.n	801145a <_dtoa_r+0xaa2>
 8011404:	9b03      	ldr	r3, [sp, #12]
 8011406:	2b00      	cmp	r3, #0
 8011408:	dd02      	ble.n	8011410 <_dtoa_r+0xa58>
 801140a:	9b02      	ldr	r3, [sp, #8]
 801140c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8011410:	f88b a000 	strb.w	sl, [fp]
 8011414:	e775      	b.n	8011302 <_dtoa_r+0x94a>
 8011416:	4638      	mov	r0, r7
 8011418:	e7ba      	b.n	8011390 <_dtoa_r+0x9d8>
 801141a:	2201      	movs	r2, #1
 801141c:	e7e2      	b.n	80113e4 <_dtoa_r+0xa2c>
 801141e:	9b03      	ldr	r3, [sp, #12]
 8011420:	2b00      	cmp	r3, #0
 8011422:	db04      	blt.n	801142e <_dtoa_r+0xa76>
 8011424:	9906      	ldr	r1, [sp, #24]
 8011426:	430b      	orrs	r3, r1
 8011428:	9904      	ldr	r1, [sp, #16]
 801142a:	430b      	orrs	r3, r1
 801142c:	d122      	bne.n	8011474 <_dtoa_r+0xabc>
 801142e:	2a00      	cmp	r2, #0
 8011430:	ddee      	ble.n	8011410 <_dtoa_r+0xa58>
 8011432:	ee18 1a10 	vmov	r1, s16
 8011436:	2201      	movs	r2, #1
 8011438:	4620      	mov	r0, r4
 801143a:	f000 fe9d 	bl	8012178 <__lshift>
 801143e:	4631      	mov	r1, r6
 8011440:	ee08 0a10 	vmov	s16, r0
 8011444:	f000 ff08 	bl	8012258 <__mcmp>
 8011448:	2800      	cmp	r0, #0
 801144a:	dc03      	bgt.n	8011454 <_dtoa_r+0xa9c>
 801144c:	d1e0      	bne.n	8011410 <_dtoa_r+0xa58>
 801144e:	f01a 0f01 	tst.w	sl, #1
 8011452:	d0dd      	beq.n	8011410 <_dtoa_r+0xa58>
 8011454:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011458:	d1d7      	bne.n	801140a <_dtoa_r+0xa52>
 801145a:	2339      	movs	r3, #57	; 0x39
 801145c:	f88b 3000 	strb.w	r3, [fp]
 8011460:	462b      	mov	r3, r5
 8011462:	461d      	mov	r5, r3
 8011464:	3b01      	subs	r3, #1
 8011466:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801146a:	2a39      	cmp	r2, #57	; 0x39
 801146c:	d071      	beq.n	8011552 <_dtoa_r+0xb9a>
 801146e:	3201      	adds	r2, #1
 8011470:	701a      	strb	r2, [r3, #0]
 8011472:	e746      	b.n	8011302 <_dtoa_r+0x94a>
 8011474:	2a00      	cmp	r2, #0
 8011476:	dd07      	ble.n	8011488 <_dtoa_r+0xad0>
 8011478:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801147c:	d0ed      	beq.n	801145a <_dtoa_r+0xaa2>
 801147e:	f10a 0301 	add.w	r3, sl, #1
 8011482:	f88b 3000 	strb.w	r3, [fp]
 8011486:	e73c      	b.n	8011302 <_dtoa_r+0x94a>
 8011488:	9b05      	ldr	r3, [sp, #20]
 801148a:	f809 ac01 	strb.w	sl, [r9, #-1]
 801148e:	4599      	cmp	r9, r3
 8011490:	d047      	beq.n	8011522 <_dtoa_r+0xb6a>
 8011492:	ee18 1a10 	vmov	r1, s16
 8011496:	2300      	movs	r3, #0
 8011498:	220a      	movs	r2, #10
 801149a:	4620      	mov	r0, r4
 801149c:	f000 fc72 	bl	8011d84 <__multadd>
 80114a0:	45b8      	cmp	r8, r7
 80114a2:	ee08 0a10 	vmov	s16, r0
 80114a6:	f04f 0300 	mov.w	r3, #0
 80114aa:	f04f 020a 	mov.w	r2, #10
 80114ae:	4641      	mov	r1, r8
 80114b0:	4620      	mov	r0, r4
 80114b2:	d106      	bne.n	80114c2 <_dtoa_r+0xb0a>
 80114b4:	f000 fc66 	bl	8011d84 <__multadd>
 80114b8:	4680      	mov	r8, r0
 80114ba:	4607      	mov	r7, r0
 80114bc:	f109 0901 	add.w	r9, r9, #1
 80114c0:	e772      	b.n	80113a8 <_dtoa_r+0x9f0>
 80114c2:	f000 fc5f 	bl	8011d84 <__multadd>
 80114c6:	4639      	mov	r1, r7
 80114c8:	4680      	mov	r8, r0
 80114ca:	2300      	movs	r3, #0
 80114cc:	220a      	movs	r2, #10
 80114ce:	4620      	mov	r0, r4
 80114d0:	f000 fc58 	bl	8011d84 <__multadd>
 80114d4:	4607      	mov	r7, r0
 80114d6:	e7f1      	b.n	80114bc <_dtoa_r+0xb04>
 80114d8:	9b03      	ldr	r3, [sp, #12]
 80114da:	9302      	str	r3, [sp, #8]
 80114dc:	9d01      	ldr	r5, [sp, #4]
 80114de:	ee18 0a10 	vmov	r0, s16
 80114e2:	4631      	mov	r1, r6
 80114e4:	f7ff f9dc 	bl	80108a0 <quorem>
 80114e8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80114ec:	9b01      	ldr	r3, [sp, #4]
 80114ee:	f805 ab01 	strb.w	sl, [r5], #1
 80114f2:	1aea      	subs	r2, r5, r3
 80114f4:	9b02      	ldr	r3, [sp, #8]
 80114f6:	4293      	cmp	r3, r2
 80114f8:	dd09      	ble.n	801150e <_dtoa_r+0xb56>
 80114fa:	ee18 1a10 	vmov	r1, s16
 80114fe:	2300      	movs	r3, #0
 8011500:	220a      	movs	r2, #10
 8011502:	4620      	mov	r0, r4
 8011504:	f000 fc3e 	bl	8011d84 <__multadd>
 8011508:	ee08 0a10 	vmov	s16, r0
 801150c:	e7e7      	b.n	80114de <_dtoa_r+0xb26>
 801150e:	9b02      	ldr	r3, [sp, #8]
 8011510:	2b00      	cmp	r3, #0
 8011512:	bfc8      	it	gt
 8011514:	461d      	movgt	r5, r3
 8011516:	9b01      	ldr	r3, [sp, #4]
 8011518:	bfd8      	it	le
 801151a:	2501      	movle	r5, #1
 801151c:	441d      	add	r5, r3
 801151e:	f04f 0800 	mov.w	r8, #0
 8011522:	ee18 1a10 	vmov	r1, s16
 8011526:	2201      	movs	r2, #1
 8011528:	4620      	mov	r0, r4
 801152a:	f000 fe25 	bl	8012178 <__lshift>
 801152e:	4631      	mov	r1, r6
 8011530:	ee08 0a10 	vmov	s16, r0
 8011534:	f000 fe90 	bl	8012258 <__mcmp>
 8011538:	2800      	cmp	r0, #0
 801153a:	dc91      	bgt.n	8011460 <_dtoa_r+0xaa8>
 801153c:	d102      	bne.n	8011544 <_dtoa_r+0xb8c>
 801153e:	f01a 0f01 	tst.w	sl, #1
 8011542:	d18d      	bne.n	8011460 <_dtoa_r+0xaa8>
 8011544:	462b      	mov	r3, r5
 8011546:	461d      	mov	r5, r3
 8011548:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801154c:	2a30      	cmp	r2, #48	; 0x30
 801154e:	d0fa      	beq.n	8011546 <_dtoa_r+0xb8e>
 8011550:	e6d7      	b.n	8011302 <_dtoa_r+0x94a>
 8011552:	9a01      	ldr	r2, [sp, #4]
 8011554:	429a      	cmp	r2, r3
 8011556:	d184      	bne.n	8011462 <_dtoa_r+0xaaa>
 8011558:	9b00      	ldr	r3, [sp, #0]
 801155a:	3301      	adds	r3, #1
 801155c:	9300      	str	r3, [sp, #0]
 801155e:	2331      	movs	r3, #49	; 0x31
 8011560:	7013      	strb	r3, [r2, #0]
 8011562:	e6ce      	b.n	8011302 <_dtoa_r+0x94a>
 8011564:	4b09      	ldr	r3, [pc, #36]	; (801158c <_dtoa_r+0xbd4>)
 8011566:	f7ff ba95 	b.w	8010a94 <_dtoa_r+0xdc>
 801156a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801156c:	2b00      	cmp	r3, #0
 801156e:	f47f aa6e 	bne.w	8010a4e <_dtoa_r+0x96>
 8011572:	4b07      	ldr	r3, [pc, #28]	; (8011590 <_dtoa_r+0xbd8>)
 8011574:	f7ff ba8e 	b.w	8010a94 <_dtoa_r+0xdc>
 8011578:	9b02      	ldr	r3, [sp, #8]
 801157a:	2b00      	cmp	r3, #0
 801157c:	dcae      	bgt.n	80114dc <_dtoa_r+0xb24>
 801157e:	9b06      	ldr	r3, [sp, #24]
 8011580:	2b02      	cmp	r3, #2
 8011582:	f73f aea8 	bgt.w	80112d6 <_dtoa_r+0x91e>
 8011586:	e7a9      	b.n	80114dc <_dtoa_r+0xb24>
 8011588:	08014d47 	.word	0x08014d47
 801158c:	08014c50 	.word	0x08014c50
 8011590:	08014cc8 	.word	0x08014cc8

08011594 <rshift>:
 8011594:	6903      	ldr	r3, [r0, #16]
 8011596:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801159a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801159e:	ea4f 1261 	mov.w	r2, r1, asr #5
 80115a2:	f100 0414 	add.w	r4, r0, #20
 80115a6:	dd45      	ble.n	8011634 <rshift+0xa0>
 80115a8:	f011 011f 	ands.w	r1, r1, #31
 80115ac:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80115b0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80115b4:	d10c      	bne.n	80115d0 <rshift+0x3c>
 80115b6:	f100 0710 	add.w	r7, r0, #16
 80115ba:	4629      	mov	r1, r5
 80115bc:	42b1      	cmp	r1, r6
 80115be:	d334      	bcc.n	801162a <rshift+0x96>
 80115c0:	1a9b      	subs	r3, r3, r2
 80115c2:	009b      	lsls	r3, r3, #2
 80115c4:	1eea      	subs	r2, r5, #3
 80115c6:	4296      	cmp	r6, r2
 80115c8:	bf38      	it	cc
 80115ca:	2300      	movcc	r3, #0
 80115cc:	4423      	add	r3, r4
 80115ce:	e015      	b.n	80115fc <rshift+0x68>
 80115d0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80115d4:	f1c1 0820 	rsb	r8, r1, #32
 80115d8:	40cf      	lsrs	r7, r1
 80115da:	f105 0e04 	add.w	lr, r5, #4
 80115de:	46a1      	mov	r9, r4
 80115e0:	4576      	cmp	r6, lr
 80115e2:	46f4      	mov	ip, lr
 80115e4:	d815      	bhi.n	8011612 <rshift+0x7e>
 80115e6:	1a9a      	subs	r2, r3, r2
 80115e8:	0092      	lsls	r2, r2, #2
 80115ea:	3a04      	subs	r2, #4
 80115ec:	3501      	adds	r5, #1
 80115ee:	42ae      	cmp	r6, r5
 80115f0:	bf38      	it	cc
 80115f2:	2200      	movcc	r2, #0
 80115f4:	18a3      	adds	r3, r4, r2
 80115f6:	50a7      	str	r7, [r4, r2]
 80115f8:	b107      	cbz	r7, 80115fc <rshift+0x68>
 80115fa:	3304      	adds	r3, #4
 80115fc:	1b1a      	subs	r2, r3, r4
 80115fe:	42a3      	cmp	r3, r4
 8011600:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8011604:	bf08      	it	eq
 8011606:	2300      	moveq	r3, #0
 8011608:	6102      	str	r2, [r0, #16]
 801160a:	bf08      	it	eq
 801160c:	6143      	streq	r3, [r0, #20]
 801160e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011612:	f8dc c000 	ldr.w	ip, [ip]
 8011616:	fa0c fc08 	lsl.w	ip, ip, r8
 801161a:	ea4c 0707 	orr.w	r7, ip, r7
 801161e:	f849 7b04 	str.w	r7, [r9], #4
 8011622:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011626:	40cf      	lsrs	r7, r1
 8011628:	e7da      	b.n	80115e0 <rshift+0x4c>
 801162a:	f851 cb04 	ldr.w	ip, [r1], #4
 801162e:	f847 cf04 	str.w	ip, [r7, #4]!
 8011632:	e7c3      	b.n	80115bc <rshift+0x28>
 8011634:	4623      	mov	r3, r4
 8011636:	e7e1      	b.n	80115fc <rshift+0x68>

08011638 <__hexdig_fun>:
 8011638:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801163c:	2b09      	cmp	r3, #9
 801163e:	d802      	bhi.n	8011646 <__hexdig_fun+0xe>
 8011640:	3820      	subs	r0, #32
 8011642:	b2c0      	uxtb	r0, r0
 8011644:	4770      	bx	lr
 8011646:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801164a:	2b05      	cmp	r3, #5
 801164c:	d801      	bhi.n	8011652 <__hexdig_fun+0x1a>
 801164e:	3847      	subs	r0, #71	; 0x47
 8011650:	e7f7      	b.n	8011642 <__hexdig_fun+0xa>
 8011652:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8011656:	2b05      	cmp	r3, #5
 8011658:	d801      	bhi.n	801165e <__hexdig_fun+0x26>
 801165a:	3827      	subs	r0, #39	; 0x27
 801165c:	e7f1      	b.n	8011642 <__hexdig_fun+0xa>
 801165e:	2000      	movs	r0, #0
 8011660:	4770      	bx	lr
	...

08011664 <__gethex>:
 8011664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011668:	ed2d 8b02 	vpush	{d8}
 801166c:	b089      	sub	sp, #36	; 0x24
 801166e:	ee08 0a10 	vmov	s16, r0
 8011672:	9304      	str	r3, [sp, #16]
 8011674:	4bb4      	ldr	r3, [pc, #720]	; (8011948 <__gethex+0x2e4>)
 8011676:	681b      	ldr	r3, [r3, #0]
 8011678:	9301      	str	r3, [sp, #4]
 801167a:	4618      	mov	r0, r3
 801167c:	468b      	mov	fp, r1
 801167e:	4690      	mov	r8, r2
 8011680:	f7ee fda6 	bl	80001d0 <strlen>
 8011684:	9b01      	ldr	r3, [sp, #4]
 8011686:	f8db 2000 	ldr.w	r2, [fp]
 801168a:	4403      	add	r3, r0
 801168c:	4682      	mov	sl, r0
 801168e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8011692:	9305      	str	r3, [sp, #20]
 8011694:	1c93      	adds	r3, r2, #2
 8011696:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801169a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801169e:	32fe      	adds	r2, #254	; 0xfe
 80116a0:	18d1      	adds	r1, r2, r3
 80116a2:	461f      	mov	r7, r3
 80116a4:	f813 0b01 	ldrb.w	r0, [r3], #1
 80116a8:	9100      	str	r1, [sp, #0]
 80116aa:	2830      	cmp	r0, #48	; 0x30
 80116ac:	d0f8      	beq.n	80116a0 <__gethex+0x3c>
 80116ae:	f7ff ffc3 	bl	8011638 <__hexdig_fun>
 80116b2:	4604      	mov	r4, r0
 80116b4:	2800      	cmp	r0, #0
 80116b6:	d13a      	bne.n	801172e <__gethex+0xca>
 80116b8:	9901      	ldr	r1, [sp, #4]
 80116ba:	4652      	mov	r2, sl
 80116bc:	4638      	mov	r0, r7
 80116be:	f7fe f9d0 	bl	800fa62 <strncmp>
 80116c2:	4605      	mov	r5, r0
 80116c4:	2800      	cmp	r0, #0
 80116c6:	d168      	bne.n	801179a <__gethex+0x136>
 80116c8:	f817 000a 	ldrb.w	r0, [r7, sl]
 80116cc:	eb07 060a 	add.w	r6, r7, sl
 80116d0:	f7ff ffb2 	bl	8011638 <__hexdig_fun>
 80116d4:	2800      	cmp	r0, #0
 80116d6:	d062      	beq.n	801179e <__gethex+0x13a>
 80116d8:	4633      	mov	r3, r6
 80116da:	7818      	ldrb	r0, [r3, #0]
 80116dc:	2830      	cmp	r0, #48	; 0x30
 80116de:	461f      	mov	r7, r3
 80116e0:	f103 0301 	add.w	r3, r3, #1
 80116e4:	d0f9      	beq.n	80116da <__gethex+0x76>
 80116e6:	f7ff ffa7 	bl	8011638 <__hexdig_fun>
 80116ea:	2301      	movs	r3, #1
 80116ec:	fab0 f480 	clz	r4, r0
 80116f0:	0964      	lsrs	r4, r4, #5
 80116f2:	4635      	mov	r5, r6
 80116f4:	9300      	str	r3, [sp, #0]
 80116f6:	463a      	mov	r2, r7
 80116f8:	4616      	mov	r6, r2
 80116fa:	3201      	adds	r2, #1
 80116fc:	7830      	ldrb	r0, [r6, #0]
 80116fe:	f7ff ff9b 	bl	8011638 <__hexdig_fun>
 8011702:	2800      	cmp	r0, #0
 8011704:	d1f8      	bne.n	80116f8 <__gethex+0x94>
 8011706:	9901      	ldr	r1, [sp, #4]
 8011708:	4652      	mov	r2, sl
 801170a:	4630      	mov	r0, r6
 801170c:	f7fe f9a9 	bl	800fa62 <strncmp>
 8011710:	b980      	cbnz	r0, 8011734 <__gethex+0xd0>
 8011712:	b94d      	cbnz	r5, 8011728 <__gethex+0xc4>
 8011714:	eb06 050a 	add.w	r5, r6, sl
 8011718:	462a      	mov	r2, r5
 801171a:	4616      	mov	r6, r2
 801171c:	3201      	adds	r2, #1
 801171e:	7830      	ldrb	r0, [r6, #0]
 8011720:	f7ff ff8a 	bl	8011638 <__hexdig_fun>
 8011724:	2800      	cmp	r0, #0
 8011726:	d1f8      	bne.n	801171a <__gethex+0xb6>
 8011728:	1bad      	subs	r5, r5, r6
 801172a:	00ad      	lsls	r5, r5, #2
 801172c:	e004      	b.n	8011738 <__gethex+0xd4>
 801172e:	2400      	movs	r4, #0
 8011730:	4625      	mov	r5, r4
 8011732:	e7e0      	b.n	80116f6 <__gethex+0x92>
 8011734:	2d00      	cmp	r5, #0
 8011736:	d1f7      	bne.n	8011728 <__gethex+0xc4>
 8011738:	7833      	ldrb	r3, [r6, #0]
 801173a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801173e:	2b50      	cmp	r3, #80	; 0x50
 8011740:	d13b      	bne.n	80117ba <__gethex+0x156>
 8011742:	7873      	ldrb	r3, [r6, #1]
 8011744:	2b2b      	cmp	r3, #43	; 0x2b
 8011746:	d02c      	beq.n	80117a2 <__gethex+0x13e>
 8011748:	2b2d      	cmp	r3, #45	; 0x2d
 801174a:	d02e      	beq.n	80117aa <__gethex+0x146>
 801174c:	1c71      	adds	r1, r6, #1
 801174e:	f04f 0900 	mov.w	r9, #0
 8011752:	7808      	ldrb	r0, [r1, #0]
 8011754:	f7ff ff70 	bl	8011638 <__hexdig_fun>
 8011758:	1e43      	subs	r3, r0, #1
 801175a:	b2db      	uxtb	r3, r3
 801175c:	2b18      	cmp	r3, #24
 801175e:	d82c      	bhi.n	80117ba <__gethex+0x156>
 8011760:	f1a0 0210 	sub.w	r2, r0, #16
 8011764:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8011768:	f7ff ff66 	bl	8011638 <__hexdig_fun>
 801176c:	1e43      	subs	r3, r0, #1
 801176e:	b2db      	uxtb	r3, r3
 8011770:	2b18      	cmp	r3, #24
 8011772:	d91d      	bls.n	80117b0 <__gethex+0x14c>
 8011774:	f1b9 0f00 	cmp.w	r9, #0
 8011778:	d000      	beq.n	801177c <__gethex+0x118>
 801177a:	4252      	negs	r2, r2
 801177c:	4415      	add	r5, r2
 801177e:	f8cb 1000 	str.w	r1, [fp]
 8011782:	b1e4      	cbz	r4, 80117be <__gethex+0x15a>
 8011784:	9b00      	ldr	r3, [sp, #0]
 8011786:	2b00      	cmp	r3, #0
 8011788:	bf14      	ite	ne
 801178a:	2700      	movne	r7, #0
 801178c:	2706      	moveq	r7, #6
 801178e:	4638      	mov	r0, r7
 8011790:	b009      	add	sp, #36	; 0x24
 8011792:	ecbd 8b02 	vpop	{d8}
 8011796:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801179a:	463e      	mov	r6, r7
 801179c:	4625      	mov	r5, r4
 801179e:	2401      	movs	r4, #1
 80117a0:	e7ca      	b.n	8011738 <__gethex+0xd4>
 80117a2:	f04f 0900 	mov.w	r9, #0
 80117a6:	1cb1      	adds	r1, r6, #2
 80117a8:	e7d3      	b.n	8011752 <__gethex+0xee>
 80117aa:	f04f 0901 	mov.w	r9, #1
 80117ae:	e7fa      	b.n	80117a6 <__gethex+0x142>
 80117b0:	230a      	movs	r3, #10
 80117b2:	fb03 0202 	mla	r2, r3, r2, r0
 80117b6:	3a10      	subs	r2, #16
 80117b8:	e7d4      	b.n	8011764 <__gethex+0x100>
 80117ba:	4631      	mov	r1, r6
 80117bc:	e7df      	b.n	801177e <__gethex+0x11a>
 80117be:	1bf3      	subs	r3, r6, r7
 80117c0:	3b01      	subs	r3, #1
 80117c2:	4621      	mov	r1, r4
 80117c4:	2b07      	cmp	r3, #7
 80117c6:	dc0b      	bgt.n	80117e0 <__gethex+0x17c>
 80117c8:	ee18 0a10 	vmov	r0, s16
 80117cc:	f000 fa78 	bl	8011cc0 <_Balloc>
 80117d0:	4604      	mov	r4, r0
 80117d2:	b940      	cbnz	r0, 80117e6 <__gethex+0x182>
 80117d4:	4b5d      	ldr	r3, [pc, #372]	; (801194c <__gethex+0x2e8>)
 80117d6:	4602      	mov	r2, r0
 80117d8:	21de      	movs	r1, #222	; 0xde
 80117da:	485d      	ldr	r0, [pc, #372]	; (8011950 <__gethex+0x2ec>)
 80117dc:	f001 f8f6 	bl	80129cc <__assert_func>
 80117e0:	3101      	adds	r1, #1
 80117e2:	105b      	asrs	r3, r3, #1
 80117e4:	e7ee      	b.n	80117c4 <__gethex+0x160>
 80117e6:	f100 0914 	add.w	r9, r0, #20
 80117ea:	f04f 0b00 	mov.w	fp, #0
 80117ee:	f1ca 0301 	rsb	r3, sl, #1
 80117f2:	f8cd 9008 	str.w	r9, [sp, #8]
 80117f6:	f8cd b000 	str.w	fp, [sp]
 80117fa:	9306      	str	r3, [sp, #24]
 80117fc:	42b7      	cmp	r7, r6
 80117fe:	d340      	bcc.n	8011882 <__gethex+0x21e>
 8011800:	9802      	ldr	r0, [sp, #8]
 8011802:	9b00      	ldr	r3, [sp, #0]
 8011804:	f840 3b04 	str.w	r3, [r0], #4
 8011808:	eba0 0009 	sub.w	r0, r0, r9
 801180c:	1080      	asrs	r0, r0, #2
 801180e:	0146      	lsls	r6, r0, #5
 8011810:	6120      	str	r0, [r4, #16]
 8011812:	4618      	mov	r0, r3
 8011814:	f000 fb46 	bl	8011ea4 <__hi0bits>
 8011818:	1a30      	subs	r0, r6, r0
 801181a:	f8d8 6000 	ldr.w	r6, [r8]
 801181e:	42b0      	cmp	r0, r6
 8011820:	dd63      	ble.n	80118ea <__gethex+0x286>
 8011822:	1b87      	subs	r7, r0, r6
 8011824:	4639      	mov	r1, r7
 8011826:	4620      	mov	r0, r4
 8011828:	f000 feea 	bl	8012600 <__any_on>
 801182c:	4682      	mov	sl, r0
 801182e:	b1a8      	cbz	r0, 801185c <__gethex+0x1f8>
 8011830:	1e7b      	subs	r3, r7, #1
 8011832:	1159      	asrs	r1, r3, #5
 8011834:	f003 021f 	and.w	r2, r3, #31
 8011838:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801183c:	f04f 0a01 	mov.w	sl, #1
 8011840:	fa0a f202 	lsl.w	r2, sl, r2
 8011844:	420a      	tst	r2, r1
 8011846:	d009      	beq.n	801185c <__gethex+0x1f8>
 8011848:	4553      	cmp	r3, sl
 801184a:	dd05      	ble.n	8011858 <__gethex+0x1f4>
 801184c:	1eb9      	subs	r1, r7, #2
 801184e:	4620      	mov	r0, r4
 8011850:	f000 fed6 	bl	8012600 <__any_on>
 8011854:	2800      	cmp	r0, #0
 8011856:	d145      	bne.n	80118e4 <__gethex+0x280>
 8011858:	f04f 0a02 	mov.w	sl, #2
 801185c:	4639      	mov	r1, r7
 801185e:	4620      	mov	r0, r4
 8011860:	f7ff fe98 	bl	8011594 <rshift>
 8011864:	443d      	add	r5, r7
 8011866:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801186a:	42ab      	cmp	r3, r5
 801186c:	da4c      	bge.n	8011908 <__gethex+0x2a4>
 801186e:	ee18 0a10 	vmov	r0, s16
 8011872:	4621      	mov	r1, r4
 8011874:	f000 fa64 	bl	8011d40 <_Bfree>
 8011878:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801187a:	2300      	movs	r3, #0
 801187c:	6013      	str	r3, [r2, #0]
 801187e:	27a3      	movs	r7, #163	; 0xa3
 8011880:	e785      	b.n	801178e <__gethex+0x12a>
 8011882:	1e73      	subs	r3, r6, #1
 8011884:	9a05      	ldr	r2, [sp, #20]
 8011886:	9303      	str	r3, [sp, #12]
 8011888:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801188c:	4293      	cmp	r3, r2
 801188e:	d019      	beq.n	80118c4 <__gethex+0x260>
 8011890:	f1bb 0f20 	cmp.w	fp, #32
 8011894:	d107      	bne.n	80118a6 <__gethex+0x242>
 8011896:	9b02      	ldr	r3, [sp, #8]
 8011898:	9a00      	ldr	r2, [sp, #0]
 801189a:	f843 2b04 	str.w	r2, [r3], #4
 801189e:	9302      	str	r3, [sp, #8]
 80118a0:	2300      	movs	r3, #0
 80118a2:	9300      	str	r3, [sp, #0]
 80118a4:	469b      	mov	fp, r3
 80118a6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80118aa:	f7ff fec5 	bl	8011638 <__hexdig_fun>
 80118ae:	9b00      	ldr	r3, [sp, #0]
 80118b0:	f000 000f 	and.w	r0, r0, #15
 80118b4:	fa00 f00b 	lsl.w	r0, r0, fp
 80118b8:	4303      	orrs	r3, r0
 80118ba:	9300      	str	r3, [sp, #0]
 80118bc:	f10b 0b04 	add.w	fp, fp, #4
 80118c0:	9b03      	ldr	r3, [sp, #12]
 80118c2:	e00d      	b.n	80118e0 <__gethex+0x27c>
 80118c4:	9b03      	ldr	r3, [sp, #12]
 80118c6:	9a06      	ldr	r2, [sp, #24]
 80118c8:	4413      	add	r3, r2
 80118ca:	42bb      	cmp	r3, r7
 80118cc:	d3e0      	bcc.n	8011890 <__gethex+0x22c>
 80118ce:	4618      	mov	r0, r3
 80118d0:	9901      	ldr	r1, [sp, #4]
 80118d2:	9307      	str	r3, [sp, #28]
 80118d4:	4652      	mov	r2, sl
 80118d6:	f7fe f8c4 	bl	800fa62 <strncmp>
 80118da:	9b07      	ldr	r3, [sp, #28]
 80118dc:	2800      	cmp	r0, #0
 80118de:	d1d7      	bne.n	8011890 <__gethex+0x22c>
 80118e0:	461e      	mov	r6, r3
 80118e2:	e78b      	b.n	80117fc <__gethex+0x198>
 80118e4:	f04f 0a03 	mov.w	sl, #3
 80118e8:	e7b8      	b.n	801185c <__gethex+0x1f8>
 80118ea:	da0a      	bge.n	8011902 <__gethex+0x29e>
 80118ec:	1a37      	subs	r7, r6, r0
 80118ee:	4621      	mov	r1, r4
 80118f0:	ee18 0a10 	vmov	r0, s16
 80118f4:	463a      	mov	r2, r7
 80118f6:	f000 fc3f 	bl	8012178 <__lshift>
 80118fa:	1bed      	subs	r5, r5, r7
 80118fc:	4604      	mov	r4, r0
 80118fe:	f100 0914 	add.w	r9, r0, #20
 8011902:	f04f 0a00 	mov.w	sl, #0
 8011906:	e7ae      	b.n	8011866 <__gethex+0x202>
 8011908:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801190c:	42a8      	cmp	r0, r5
 801190e:	dd72      	ble.n	80119f6 <__gethex+0x392>
 8011910:	1b45      	subs	r5, r0, r5
 8011912:	42ae      	cmp	r6, r5
 8011914:	dc36      	bgt.n	8011984 <__gethex+0x320>
 8011916:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801191a:	2b02      	cmp	r3, #2
 801191c:	d02a      	beq.n	8011974 <__gethex+0x310>
 801191e:	2b03      	cmp	r3, #3
 8011920:	d02c      	beq.n	801197c <__gethex+0x318>
 8011922:	2b01      	cmp	r3, #1
 8011924:	d11c      	bne.n	8011960 <__gethex+0x2fc>
 8011926:	42ae      	cmp	r6, r5
 8011928:	d11a      	bne.n	8011960 <__gethex+0x2fc>
 801192a:	2e01      	cmp	r6, #1
 801192c:	d112      	bne.n	8011954 <__gethex+0x2f0>
 801192e:	9a04      	ldr	r2, [sp, #16]
 8011930:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011934:	6013      	str	r3, [r2, #0]
 8011936:	2301      	movs	r3, #1
 8011938:	6123      	str	r3, [r4, #16]
 801193a:	f8c9 3000 	str.w	r3, [r9]
 801193e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011940:	2762      	movs	r7, #98	; 0x62
 8011942:	601c      	str	r4, [r3, #0]
 8011944:	e723      	b.n	801178e <__gethex+0x12a>
 8011946:	bf00      	nop
 8011948:	08014dc0 	.word	0x08014dc0
 801194c:	08014d47 	.word	0x08014d47
 8011950:	08014d58 	.word	0x08014d58
 8011954:	1e71      	subs	r1, r6, #1
 8011956:	4620      	mov	r0, r4
 8011958:	f000 fe52 	bl	8012600 <__any_on>
 801195c:	2800      	cmp	r0, #0
 801195e:	d1e6      	bne.n	801192e <__gethex+0x2ca>
 8011960:	ee18 0a10 	vmov	r0, s16
 8011964:	4621      	mov	r1, r4
 8011966:	f000 f9eb 	bl	8011d40 <_Bfree>
 801196a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801196c:	2300      	movs	r3, #0
 801196e:	6013      	str	r3, [r2, #0]
 8011970:	2750      	movs	r7, #80	; 0x50
 8011972:	e70c      	b.n	801178e <__gethex+0x12a>
 8011974:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011976:	2b00      	cmp	r3, #0
 8011978:	d1f2      	bne.n	8011960 <__gethex+0x2fc>
 801197a:	e7d8      	b.n	801192e <__gethex+0x2ca>
 801197c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801197e:	2b00      	cmp	r3, #0
 8011980:	d1d5      	bne.n	801192e <__gethex+0x2ca>
 8011982:	e7ed      	b.n	8011960 <__gethex+0x2fc>
 8011984:	1e6f      	subs	r7, r5, #1
 8011986:	f1ba 0f00 	cmp.w	sl, #0
 801198a:	d131      	bne.n	80119f0 <__gethex+0x38c>
 801198c:	b127      	cbz	r7, 8011998 <__gethex+0x334>
 801198e:	4639      	mov	r1, r7
 8011990:	4620      	mov	r0, r4
 8011992:	f000 fe35 	bl	8012600 <__any_on>
 8011996:	4682      	mov	sl, r0
 8011998:	117b      	asrs	r3, r7, #5
 801199a:	2101      	movs	r1, #1
 801199c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80119a0:	f007 071f 	and.w	r7, r7, #31
 80119a4:	fa01 f707 	lsl.w	r7, r1, r7
 80119a8:	421f      	tst	r7, r3
 80119aa:	4629      	mov	r1, r5
 80119ac:	4620      	mov	r0, r4
 80119ae:	bf18      	it	ne
 80119b0:	f04a 0a02 	orrne.w	sl, sl, #2
 80119b4:	1b76      	subs	r6, r6, r5
 80119b6:	f7ff fded 	bl	8011594 <rshift>
 80119ba:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80119be:	2702      	movs	r7, #2
 80119c0:	f1ba 0f00 	cmp.w	sl, #0
 80119c4:	d048      	beq.n	8011a58 <__gethex+0x3f4>
 80119c6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80119ca:	2b02      	cmp	r3, #2
 80119cc:	d015      	beq.n	80119fa <__gethex+0x396>
 80119ce:	2b03      	cmp	r3, #3
 80119d0:	d017      	beq.n	8011a02 <__gethex+0x39e>
 80119d2:	2b01      	cmp	r3, #1
 80119d4:	d109      	bne.n	80119ea <__gethex+0x386>
 80119d6:	f01a 0f02 	tst.w	sl, #2
 80119da:	d006      	beq.n	80119ea <__gethex+0x386>
 80119dc:	f8d9 0000 	ldr.w	r0, [r9]
 80119e0:	ea4a 0a00 	orr.w	sl, sl, r0
 80119e4:	f01a 0f01 	tst.w	sl, #1
 80119e8:	d10e      	bne.n	8011a08 <__gethex+0x3a4>
 80119ea:	f047 0710 	orr.w	r7, r7, #16
 80119ee:	e033      	b.n	8011a58 <__gethex+0x3f4>
 80119f0:	f04f 0a01 	mov.w	sl, #1
 80119f4:	e7d0      	b.n	8011998 <__gethex+0x334>
 80119f6:	2701      	movs	r7, #1
 80119f8:	e7e2      	b.n	80119c0 <__gethex+0x35c>
 80119fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80119fc:	f1c3 0301 	rsb	r3, r3, #1
 8011a00:	9315      	str	r3, [sp, #84]	; 0x54
 8011a02:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	d0f0      	beq.n	80119ea <__gethex+0x386>
 8011a08:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8011a0c:	f104 0314 	add.w	r3, r4, #20
 8011a10:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8011a14:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8011a18:	f04f 0c00 	mov.w	ip, #0
 8011a1c:	4618      	mov	r0, r3
 8011a1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011a22:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8011a26:	d01c      	beq.n	8011a62 <__gethex+0x3fe>
 8011a28:	3201      	adds	r2, #1
 8011a2a:	6002      	str	r2, [r0, #0]
 8011a2c:	2f02      	cmp	r7, #2
 8011a2e:	f104 0314 	add.w	r3, r4, #20
 8011a32:	d13f      	bne.n	8011ab4 <__gethex+0x450>
 8011a34:	f8d8 2000 	ldr.w	r2, [r8]
 8011a38:	3a01      	subs	r2, #1
 8011a3a:	42b2      	cmp	r2, r6
 8011a3c:	d10a      	bne.n	8011a54 <__gethex+0x3f0>
 8011a3e:	1171      	asrs	r1, r6, #5
 8011a40:	2201      	movs	r2, #1
 8011a42:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011a46:	f006 061f 	and.w	r6, r6, #31
 8011a4a:	fa02 f606 	lsl.w	r6, r2, r6
 8011a4e:	421e      	tst	r6, r3
 8011a50:	bf18      	it	ne
 8011a52:	4617      	movne	r7, r2
 8011a54:	f047 0720 	orr.w	r7, r7, #32
 8011a58:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011a5a:	601c      	str	r4, [r3, #0]
 8011a5c:	9b04      	ldr	r3, [sp, #16]
 8011a5e:	601d      	str	r5, [r3, #0]
 8011a60:	e695      	b.n	801178e <__gethex+0x12a>
 8011a62:	4299      	cmp	r1, r3
 8011a64:	f843 cc04 	str.w	ip, [r3, #-4]
 8011a68:	d8d8      	bhi.n	8011a1c <__gethex+0x3b8>
 8011a6a:	68a3      	ldr	r3, [r4, #8]
 8011a6c:	459b      	cmp	fp, r3
 8011a6e:	db19      	blt.n	8011aa4 <__gethex+0x440>
 8011a70:	6861      	ldr	r1, [r4, #4]
 8011a72:	ee18 0a10 	vmov	r0, s16
 8011a76:	3101      	adds	r1, #1
 8011a78:	f000 f922 	bl	8011cc0 <_Balloc>
 8011a7c:	4681      	mov	r9, r0
 8011a7e:	b918      	cbnz	r0, 8011a88 <__gethex+0x424>
 8011a80:	4b1a      	ldr	r3, [pc, #104]	; (8011aec <__gethex+0x488>)
 8011a82:	4602      	mov	r2, r0
 8011a84:	2184      	movs	r1, #132	; 0x84
 8011a86:	e6a8      	b.n	80117da <__gethex+0x176>
 8011a88:	6922      	ldr	r2, [r4, #16]
 8011a8a:	3202      	adds	r2, #2
 8011a8c:	f104 010c 	add.w	r1, r4, #12
 8011a90:	0092      	lsls	r2, r2, #2
 8011a92:	300c      	adds	r0, #12
 8011a94:	f7fd fa32 	bl	800eefc <memcpy>
 8011a98:	4621      	mov	r1, r4
 8011a9a:	ee18 0a10 	vmov	r0, s16
 8011a9e:	f000 f94f 	bl	8011d40 <_Bfree>
 8011aa2:	464c      	mov	r4, r9
 8011aa4:	6923      	ldr	r3, [r4, #16]
 8011aa6:	1c5a      	adds	r2, r3, #1
 8011aa8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011aac:	6122      	str	r2, [r4, #16]
 8011aae:	2201      	movs	r2, #1
 8011ab0:	615a      	str	r2, [r3, #20]
 8011ab2:	e7bb      	b.n	8011a2c <__gethex+0x3c8>
 8011ab4:	6922      	ldr	r2, [r4, #16]
 8011ab6:	455a      	cmp	r2, fp
 8011ab8:	dd0b      	ble.n	8011ad2 <__gethex+0x46e>
 8011aba:	2101      	movs	r1, #1
 8011abc:	4620      	mov	r0, r4
 8011abe:	f7ff fd69 	bl	8011594 <rshift>
 8011ac2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011ac6:	3501      	adds	r5, #1
 8011ac8:	42ab      	cmp	r3, r5
 8011aca:	f6ff aed0 	blt.w	801186e <__gethex+0x20a>
 8011ace:	2701      	movs	r7, #1
 8011ad0:	e7c0      	b.n	8011a54 <__gethex+0x3f0>
 8011ad2:	f016 061f 	ands.w	r6, r6, #31
 8011ad6:	d0fa      	beq.n	8011ace <__gethex+0x46a>
 8011ad8:	4453      	add	r3, sl
 8011ada:	f1c6 0620 	rsb	r6, r6, #32
 8011ade:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8011ae2:	f000 f9df 	bl	8011ea4 <__hi0bits>
 8011ae6:	42b0      	cmp	r0, r6
 8011ae8:	dbe7      	blt.n	8011aba <__gethex+0x456>
 8011aea:	e7f0      	b.n	8011ace <__gethex+0x46a>
 8011aec:	08014d47 	.word	0x08014d47

08011af0 <L_shift>:
 8011af0:	f1c2 0208 	rsb	r2, r2, #8
 8011af4:	0092      	lsls	r2, r2, #2
 8011af6:	b570      	push	{r4, r5, r6, lr}
 8011af8:	f1c2 0620 	rsb	r6, r2, #32
 8011afc:	6843      	ldr	r3, [r0, #4]
 8011afe:	6804      	ldr	r4, [r0, #0]
 8011b00:	fa03 f506 	lsl.w	r5, r3, r6
 8011b04:	432c      	orrs	r4, r5
 8011b06:	40d3      	lsrs	r3, r2
 8011b08:	6004      	str	r4, [r0, #0]
 8011b0a:	f840 3f04 	str.w	r3, [r0, #4]!
 8011b0e:	4288      	cmp	r0, r1
 8011b10:	d3f4      	bcc.n	8011afc <L_shift+0xc>
 8011b12:	bd70      	pop	{r4, r5, r6, pc}

08011b14 <__match>:
 8011b14:	b530      	push	{r4, r5, lr}
 8011b16:	6803      	ldr	r3, [r0, #0]
 8011b18:	3301      	adds	r3, #1
 8011b1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011b1e:	b914      	cbnz	r4, 8011b26 <__match+0x12>
 8011b20:	6003      	str	r3, [r0, #0]
 8011b22:	2001      	movs	r0, #1
 8011b24:	bd30      	pop	{r4, r5, pc}
 8011b26:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011b2a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8011b2e:	2d19      	cmp	r5, #25
 8011b30:	bf98      	it	ls
 8011b32:	3220      	addls	r2, #32
 8011b34:	42a2      	cmp	r2, r4
 8011b36:	d0f0      	beq.n	8011b1a <__match+0x6>
 8011b38:	2000      	movs	r0, #0
 8011b3a:	e7f3      	b.n	8011b24 <__match+0x10>

08011b3c <__hexnan>:
 8011b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b40:	680b      	ldr	r3, [r1, #0]
 8011b42:	115e      	asrs	r6, r3, #5
 8011b44:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8011b48:	f013 031f 	ands.w	r3, r3, #31
 8011b4c:	b087      	sub	sp, #28
 8011b4e:	bf18      	it	ne
 8011b50:	3604      	addne	r6, #4
 8011b52:	2500      	movs	r5, #0
 8011b54:	1f37      	subs	r7, r6, #4
 8011b56:	4690      	mov	r8, r2
 8011b58:	6802      	ldr	r2, [r0, #0]
 8011b5a:	9301      	str	r3, [sp, #4]
 8011b5c:	4682      	mov	sl, r0
 8011b5e:	f846 5c04 	str.w	r5, [r6, #-4]
 8011b62:	46b9      	mov	r9, r7
 8011b64:	463c      	mov	r4, r7
 8011b66:	9502      	str	r5, [sp, #8]
 8011b68:	46ab      	mov	fp, r5
 8011b6a:	7851      	ldrb	r1, [r2, #1]
 8011b6c:	1c53      	adds	r3, r2, #1
 8011b6e:	9303      	str	r3, [sp, #12]
 8011b70:	b341      	cbz	r1, 8011bc4 <__hexnan+0x88>
 8011b72:	4608      	mov	r0, r1
 8011b74:	9205      	str	r2, [sp, #20]
 8011b76:	9104      	str	r1, [sp, #16]
 8011b78:	f7ff fd5e 	bl	8011638 <__hexdig_fun>
 8011b7c:	2800      	cmp	r0, #0
 8011b7e:	d14f      	bne.n	8011c20 <__hexnan+0xe4>
 8011b80:	9904      	ldr	r1, [sp, #16]
 8011b82:	9a05      	ldr	r2, [sp, #20]
 8011b84:	2920      	cmp	r1, #32
 8011b86:	d818      	bhi.n	8011bba <__hexnan+0x7e>
 8011b88:	9b02      	ldr	r3, [sp, #8]
 8011b8a:	459b      	cmp	fp, r3
 8011b8c:	dd13      	ble.n	8011bb6 <__hexnan+0x7a>
 8011b8e:	454c      	cmp	r4, r9
 8011b90:	d206      	bcs.n	8011ba0 <__hexnan+0x64>
 8011b92:	2d07      	cmp	r5, #7
 8011b94:	dc04      	bgt.n	8011ba0 <__hexnan+0x64>
 8011b96:	462a      	mov	r2, r5
 8011b98:	4649      	mov	r1, r9
 8011b9a:	4620      	mov	r0, r4
 8011b9c:	f7ff ffa8 	bl	8011af0 <L_shift>
 8011ba0:	4544      	cmp	r4, r8
 8011ba2:	d950      	bls.n	8011c46 <__hexnan+0x10a>
 8011ba4:	2300      	movs	r3, #0
 8011ba6:	f1a4 0904 	sub.w	r9, r4, #4
 8011baa:	f844 3c04 	str.w	r3, [r4, #-4]
 8011bae:	f8cd b008 	str.w	fp, [sp, #8]
 8011bb2:	464c      	mov	r4, r9
 8011bb4:	461d      	mov	r5, r3
 8011bb6:	9a03      	ldr	r2, [sp, #12]
 8011bb8:	e7d7      	b.n	8011b6a <__hexnan+0x2e>
 8011bba:	2929      	cmp	r1, #41	; 0x29
 8011bbc:	d156      	bne.n	8011c6c <__hexnan+0x130>
 8011bbe:	3202      	adds	r2, #2
 8011bc0:	f8ca 2000 	str.w	r2, [sl]
 8011bc4:	f1bb 0f00 	cmp.w	fp, #0
 8011bc8:	d050      	beq.n	8011c6c <__hexnan+0x130>
 8011bca:	454c      	cmp	r4, r9
 8011bcc:	d206      	bcs.n	8011bdc <__hexnan+0xa0>
 8011bce:	2d07      	cmp	r5, #7
 8011bd0:	dc04      	bgt.n	8011bdc <__hexnan+0xa0>
 8011bd2:	462a      	mov	r2, r5
 8011bd4:	4649      	mov	r1, r9
 8011bd6:	4620      	mov	r0, r4
 8011bd8:	f7ff ff8a 	bl	8011af0 <L_shift>
 8011bdc:	4544      	cmp	r4, r8
 8011bde:	d934      	bls.n	8011c4a <__hexnan+0x10e>
 8011be0:	f1a8 0204 	sub.w	r2, r8, #4
 8011be4:	4623      	mov	r3, r4
 8011be6:	f853 1b04 	ldr.w	r1, [r3], #4
 8011bea:	f842 1f04 	str.w	r1, [r2, #4]!
 8011bee:	429f      	cmp	r7, r3
 8011bf0:	d2f9      	bcs.n	8011be6 <__hexnan+0xaa>
 8011bf2:	1b3b      	subs	r3, r7, r4
 8011bf4:	f023 0303 	bic.w	r3, r3, #3
 8011bf8:	3304      	adds	r3, #4
 8011bfa:	3401      	adds	r4, #1
 8011bfc:	3e03      	subs	r6, #3
 8011bfe:	42b4      	cmp	r4, r6
 8011c00:	bf88      	it	hi
 8011c02:	2304      	movhi	r3, #4
 8011c04:	4443      	add	r3, r8
 8011c06:	2200      	movs	r2, #0
 8011c08:	f843 2b04 	str.w	r2, [r3], #4
 8011c0c:	429f      	cmp	r7, r3
 8011c0e:	d2fb      	bcs.n	8011c08 <__hexnan+0xcc>
 8011c10:	683b      	ldr	r3, [r7, #0]
 8011c12:	b91b      	cbnz	r3, 8011c1c <__hexnan+0xe0>
 8011c14:	4547      	cmp	r7, r8
 8011c16:	d127      	bne.n	8011c68 <__hexnan+0x12c>
 8011c18:	2301      	movs	r3, #1
 8011c1a:	603b      	str	r3, [r7, #0]
 8011c1c:	2005      	movs	r0, #5
 8011c1e:	e026      	b.n	8011c6e <__hexnan+0x132>
 8011c20:	3501      	adds	r5, #1
 8011c22:	2d08      	cmp	r5, #8
 8011c24:	f10b 0b01 	add.w	fp, fp, #1
 8011c28:	dd06      	ble.n	8011c38 <__hexnan+0xfc>
 8011c2a:	4544      	cmp	r4, r8
 8011c2c:	d9c3      	bls.n	8011bb6 <__hexnan+0x7a>
 8011c2e:	2300      	movs	r3, #0
 8011c30:	f844 3c04 	str.w	r3, [r4, #-4]
 8011c34:	2501      	movs	r5, #1
 8011c36:	3c04      	subs	r4, #4
 8011c38:	6822      	ldr	r2, [r4, #0]
 8011c3a:	f000 000f 	and.w	r0, r0, #15
 8011c3e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8011c42:	6022      	str	r2, [r4, #0]
 8011c44:	e7b7      	b.n	8011bb6 <__hexnan+0x7a>
 8011c46:	2508      	movs	r5, #8
 8011c48:	e7b5      	b.n	8011bb6 <__hexnan+0x7a>
 8011c4a:	9b01      	ldr	r3, [sp, #4]
 8011c4c:	2b00      	cmp	r3, #0
 8011c4e:	d0df      	beq.n	8011c10 <__hexnan+0xd4>
 8011c50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011c54:	f1c3 0320 	rsb	r3, r3, #32
 8011c58:	fa22 f303 	lsr.w	r3, r2, r3
 8011c5c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8011c60:	401a      	ands	r2, r3
 8011c62:	f846 2c04 	str.w	r2, [r6, #-4]
 8011c66:	e7d3      	b.n	8011c10 <__hexnan+0xd4>
 8011c68:	3f04      	subs	r7, #4
 8011c6a:	e7d1      	b.n	8011c10 <__hexnan+0xd4>
 8011c6c:	2004      	movs	r0, #4
 8011c6e:	b007      	add	sp, #28
 8011c70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011c74 <_localeconv_r>:
 8011c74:	4800      	ldr	r0, [pc, #0]	; (8011c78 <_localeconv_r+0x4>)
 8011c76:	4770      	bx	lr
 8011c78:	200003a4 	.word	0x200003a4

08011c7c <__retarget_lock_init_recursive>:
 8011c7c:	4770      	bx	lr

08011c7e <__retarget_lock_acquire_recursive>:
 8011c7e:	4770      	bx	lr

08011c80 <__retarget_lock_release_recursive>:
 8011c80:	4770      	bx	lr

08011c82 <__ascii_mbtowc>:
 8011c82:	b082      	sub	sp, #8
 8011c84:	b901      	cbnz	r1, 8011c88 <__ascii_mbtowc+0x6>
 8011c86:	a901      	add	r1, sp, #4
 8011c88:	b142      	cbz	r2, 8011c9c <__ascii_mbtowc+0x1a>
 8011c8a:	b14b      	cbz	r3, 8011ca0 <__ascii_mbtowc+0x1e>
 8011c8c:	7813      	ldrb	r3, [r2, #0]
 8011c8e:	600b      	str	r3, [r1, #0]
 8011c90:	7812      	ldrb	r2, [r2, #0]
 8011c92:	1e10      	subs	r0, r2, #0
 8011c94:	bf18      	it	ne
 8011c96:	2001      	movne	r0, #1
 8011c98:	b002      	add	sp, #8
 8011c9a:	4770      	bx	lr
 8011c9c:	4610      	mov	r0, r2
 8011c9e:	e7fb      	b.n	8011c98 <__ascii_mbtowc+0x16>
 8011ca0:	f06f 0001 	mvn.w	r0, #1
 8011ca4:	e7f8      	b.n	8011c98 <__ascii_mbtowc+0x16>
	...

08011ca8 <__malloc_lock>:
 8011ca8:	4801      	ldr	r0, [pc, #4]	; (8011cb0 <__malloc_lock+0x8>)
 8011caa:	f7ff bfe8 	b.w	8011c7e <__retarget_lock_acquire_recursive>
 8011cae:	bf00      	nop
 8011cb0:	200036e0 	.word	0x200036e0

08011cb4 <__malloc_unlock>:
 8011cb4:	4801      	ldr	r0, [pc, #4]	; (8011cbc <__malloc_unlock+0x8>)
 8011cb6:	f7ff bfe3 	b.w	8011c80 <__retarget_lock_release_recursive>
 8011cba:	bf00      	nop
 8011cbc:	200036e0 	.word	0x200036e0

08011cc0 <_Balloc>:
 8011cc0:	b570      	push	{r4, r5, r6, lr}
 8011cc2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011cc4:	4604      	mov	r4, r0
 8011cc6:	460d      	mov	r5, r1
 8011cc8:	b976      	cbnz	r6, 8011ce8 <_Balloc+0x28>
 8011cca:	2010      	movs	r0, #16
 8011ccc:	f7fd f906 	bl	800eedc <malloc>
 8011cd0:	4602      	mov	r2, r0
 8011cd2:	6260      	str	r0, [r4, #36]	; 0x24
 8011cd4:	b920      	cbnz	r0, 8011ce0 <_Balloc+0x20>
 8011cd6:	4b18      	ldr	r3, [pc, #96]	; (8011d38 <_Balloc+0x78>)
 8011cd8:	4818      	ldr	r0, [pc, #96]	; (8011d3c <_Balloc+0x7c>)
 8011cda:	2166      	movs	r1, #102	; 0x66
 8011cdc:	f000 fe76 	bl	80129cc <__assert_func>
 8011ce0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011ce4:	6006      	str	r6, [r0, #0]
 8011ce6:	60c6      	str	r6, [r0, #12]
 8011ce8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8011cea:	68f3      	ldr	r3, [r6, #12]
 8011cec:	b183      	cbz	r3, 8011d10 <_Balloc+0x50>
 8011cee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011cf0:	68db      	ldr	r3, [r3, #12]
 8011cf2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011cf6:	b9b8      	cbnz	r0, 8011d28 <_Balloc+0x68>
 8011cf8:	2101      	movs	r1, #1
 8011cfa:	fa01 f605 	lsl.w	r6, r1, r5
 8011cfe:	1d72      	adds	r2, r6, #5
 8011d00:	0092      	lsls	r2, r2, #2
 8011d02:	4620      	mov	r0, r4
 8011d04:	f7fd f910 	bl	800ef28 <_calloc_r>
 8011d08:	b160      	cbz	r0, 8011d24 <_Balloc+0x64>
 8011d0a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011d0e:	e00e      	b.n	8011d2e <_Balloc+0x6e>
 8011d10:	2221      	movs	r2, #33	; 0x21
 8011d12:	2104      	movs	r1, #4
 8011d14:	4620      	mov	r0, r4
 8011d16:	f7fd f907 	bl	800ef28 <_calloc_r>
 8011d1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011d1c:	60f0      	str	r0, [r6, #12]
 8011d1e:	68db      	ldr	r3, [r3, #12]
 8011d20:	2b00      	cmp	r3, #0
 8011d22:	d1e4      	bne.n	8011cee <_Balloc+0x2e>
 8011d24:	2000      	movs	r0, #0
 8011d26:	bd70      	pop	{r4, r5, r6, pc}
 8011d28:	6802      	ldr	r2, [r0, #0]
 8011d2a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011d2e:	2300      	movs	r3, #0
 8011d30:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011d34:	e7f7      	b.n	8011d26 <_Balloc+0x66>
 8011d36:	bf00      	nop
 8011d38:	08014cd5 	.word	0x08014cd5
 8011d3c:	08014dd4 	.word	0x08014dd4

08011d40 <_Bfree>:
 8011d40:	b570      	push	{r4, r5, r6, lr}
 8011d42:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011d44:	4605      	mov	r5, r0
 8011d46:	460c      	mov	r4, r1
 8011d48:	b976      	cbnz	r6, 8011d68 <_Bfree+0x28>
 8011d4a:	2010      	movs	r0, #16
 8011d4c:	f7fd f8c6 	bl	800eedc <malloc>
 8011d50:	4602      	mov	r2, r0
 8011d52:	6268      	str	r0, [r5, #36]	; 0x24
 8011d54:	b920      	cbnz	r0, 8011d60 <_Bfree+0x20>
 8011d56:	4b09      	ldr	r3, [pc, #36]	; (8011d7c <_Bfree+0x3c>)
 8011d58:	4809      	ldr	r0, [pc, #36]	; (8011d80 <_Bfree+0x40>)
 8011d5a:	218a      	movs	r1, #138	; 0x8a
 8011d5c:	f000 fe36 	bl	80129cc <__assert_func>
 8011d60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011d64:	6006      	str	r6, [r0, #0]
 8011d66:	60c6      	str	r6, [r0, #12]
 8011d68:	b13c      	cbz	r4, 8011d7a <_Bfree+0x3a>
 8011d6a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011d6c:	6862      	ldr	r2, [r4, #4]
 8011d6e:	68db      	ldr	r3, [r3, #12]
 8011d70:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011d74:	6021      	str	r1, [r4, #0]
 8011d76:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011d7a:	bd70      	pop	{r4, r5, r6, pc}
 8011d7c:	08014cd5 	.word	0x08014cd5
 8011d80:	08014dd4 	.word	0x08014dd4

08011d84 <__multadd>:
 8011d84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d88:	690d      	ldr	r5, [r1, #16]
 8011d8a:	4607      	mov	r7, r0
 8011d8c:	460c      	mov	r4, r1
 8011d8e:	461e      	mov	r6, r3
 8011d90:	f101 0c14 	add.w	ip, r1, #20
 8011d94:	2000      	movs	r0, #0
 8011d96:	f8dc 3000 	ldr.w	r3, [ip]
 8011d9a:	b299      	uxth	r1, r3
 8011d9c:	fb02 6101 	mla	r1, r2, r1, r6
 8011da0:	0c1e      	lsrs	r6, r3, #16
 8011da2:	0c0b      	lsrs	r3, r1, #16
 8011da4:	fb02 3306 	mla	r3, r2, r6, r3
 8011da8:	b289      	uxth	r1, r1
 8011daa:	3001      	adds	r0, #1
 8011dac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011db0:	4285      	cmp	r5, r0
 8011db2:	f84c 1b04 	str.w	r1, [ip], #4
 8011db6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011dba:	dcec      	bgt.n	8011d96 <__multadd+0x12>
 8011dbc:	b30e      	cbz	r6, 8011e02 <__multadd+0x7e>
 8011dbe:	68a3      	ldr	r3, [r4, #8]
 8011dc0:	42ab      	cmp	r3, r5
 8011dc2:	dc19      	bgt.n	8011df8 <__multadd+0x74>
 8011dc4:	6861      	ldr	r1, [r4, #4]
 8011dc6:	4638      	mov	r0, r7
 8011dc8:	3101      	adds	r1, #1
 8011dca:	f7ff ff79 	bl	8011cc0 <_Balloc>
 8011dce:	4680      	mov	r8, r0
 8011dd0:	b928      	cbnz	r0, 8011dde <__multadd+0x5a>
 8011dd2:	4602      	mov	r2, r0
 8011dd4:	4b0c      	ldr	r3, [pc, #48]	; (8011e08 <__multadd+0x84>)
 8011dd6:	480d      	ldr	r0, [pc, #52]	; (8011e0c <__multadd+0x88>)
 8011dd8:	21b5      	movs	r1, #181	; 0xb5
 8011dda:	f000 fdf7 	bl	80129cc <__assert_func>
 8011dde:	6922      	ldr	r2, [r4, #16]
 8011de0:	3202      	adds	r2, #2
 8011de2:	f104 010c 	add.w	r1, r4, #12
 8011de6:	0092      	lsls	r2, r2, #2
 8011de8:	300c      	adds	r0, #12
 8011dea:	f7fd f887 	bl	800eefc <memcpy>
 8011dee:	4621      	mov	r1, r4
 8011df0:	4638      	mov	r0, r7
 8011df2:	f7ff ffa5 	bl	8011d40 <_Bfree>
 8011df6:	4644      	mov	r4, r8
 8011df8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011dfc:	3501      	adds	r5, #1
 8011dfe:	615e      	str	r6, [r3, #20]
 8011e00:	6125      	str	r5, [r4, #16]
 8011e02:	4620      	mov	r0, r4
 8011e04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e08:	08014d47 	.word	0x08014d47
 8011e0c:	08014dd4 	.word	0x08014dd4

08011e10 <__s2b>:
 8011e10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011e14:	460c      	mov	r4, r1
 8011e16:	4615      	mov	r5, r2
 8011e18:	461f      	mov	r7, r3
 8011e1a:	2209      	movs	r2, #9
 8011e1c:	3308      	adds	r3, #8
 8011e1e:	4606      	mov	r6, r0
 8011e20:	fb93 f3f2 	sdiv	r3, r3, r2
 8011e24:	2100      	movs	r1, #0
 8011e26:	2201      	movs	r2, #1
 8011e28:	429a      	cmp	r2, r3
 8011e2a:	db09      	blt.n	8011e40 <__s2b+0x30>
 8011e2c:	4630      	mov	r0, r6
 8011e2e:	f7ff ff47 	bl	8011cc0 <_Balloc>
 8011e32:	b940      	cbnz	r0, 8011e46 <__s2b+0x36>
 8011e34:	4602      	mov	r2, r0
 8011e36:	4b19      	ldr	r3, [pc, #100]	; (8011e9c <__s2b+0x8c>)
 8011e38:	4819      	ldr	r0, [pc, #100]	; (8011ea0 <__s2b+0x90>)
 8011e3a:	21ce      	movs	r1, #206	; 0xce
 8011e3c:	f000 fdc6 	bl	80129cc <__assert_func>
 8011e40:	0052      	lsls	r2, r2, #1
 8011e42:	3101      	adds	r1, #1
 8011e44:	e7f0      	b.n	8011e28 <__s2b+0x18>
 8011e46:	9b08      	ldr	r3, [sp, #32]
 8011e48:	6143      	str	r3, [r0, #20]
 8011e4a:	2d09      	cmp	r5, #9
 8011e4c:	f04f 0301 	mov.w	r3, #1
 8011e50:	6103      	str	r3, [r0, #16]
 8011e52:	dd16      	ble.n	8011e82 <__s2b+0x72>
 8011e54:	f104 0909 	add.w	r9, r4, #9
 8011e58:	46c8      	mov	r8, r9
 8011e5a:	442c      	add	r4, r5
 8011e5c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8011e60:	4601      	mov	r1, r0
 8011e62:	3b30      	subs	r3, #48	; 0x30
 8011e64:	220a      	movs	r2, #10
 8011e66:	4630      	mov	r0, r6
 8011e68:	f7ff ff8c 	bl	8011d84 <__multadd>
 8011e6c:	45a0      	cmp	r8, r4
 8011e6e:	d1f5      	bne.n	8011e5c <__s2b+0x4c>
 8011e70:	f1a5 0408 	sub.w	r4, r5, #8
 8011e74:	444c      	add	r4, r9
 8011e76:	1b2d      	subs	r5, r5, r4
 8011e78:	1963      	adds	r3, r4, r5
 8011e7a:	42bb      	cmp	r3, r7
 8011e7c:	db04      	blt.n	8011e88 <__s2b+0x78>
 8011e7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011e82:	340a      	adds	r4, #10
 8011e84:	2509      	movs	r5, #9
 8011e86:	e7f6      	b.n	8011e76 <__s2b+0x66>
 8011e88:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011e8c:	4601      	mov	r1, r0
 8011e8e:	3b30      	subs	r3, #48	; 0x30
 8011e90:	220a      	movs	r2, #10
 8011e92:	4630      	mov	r0, r6
 8011e94:	f7ff ff76 	bl	8011d84 <__multadd>
 8011e98:	e7ee      	b.n	8011e78 <__s2b+0x68>
 8011e9a:	bf00      	nop
 8011e9c:	08014d47 	.word	0x08014d47
 8011ea0:	08014dd4 	.word	0x08014dd4

08011ea4 <__hi0bits>:
 8011ea4:	0c03      	lsrs	r3, r0, #16
 8011ea6:	041b      	lsls	r3, r3, #16
 8011ea8:	b9d3      	cbnz	r3, 8011ee0 <__hi0bits+0x3c>
 8011eaa:	0400      	lsls	r0, r0, #16
 8011eac:	2310      	movs	r3, #16
 8011eae:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8011eb2:	bf04      	itt	eq
 8011eb4:	0200      	lsleq	r0, r0, #8
 8011eb6:	3308      	addeq	r3, #8
 8011eb8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8011ebc:	bf04      	itt	eq
 8011ebe:	0100      	lsleq	r0, r0, #4
 8011ec0:	3304      	addeq	r3, #4
 8011ec2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8011ec6:	bf04      	itt	eq
 8011ec8:	0080      	lsleq	r0, r0, #2
 8011eca:	3302      	addeq	r3, #2
 8011ecc:	2800      	cmp	r0, #0
 8011ece:	db05      	blt.n	8011edc <__hi0bits+0x38>
 8011ed0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8011ed4:	f103 0301 	add.w	r3, r3, #1
 8011ed8:	bf08      	it	eq
 8011eda:	2320      	moveq	r3, #32
 8011edc:	4618      	mov	r0, r3
 8011ede:	4770      	bx	lr
 8011ee0:	2300      	movs	r3, #0
 8011ee2:	e7e4      	b.n	8011eae <__hi0bits+0xa>

08011ee4 <__lo0bits>:
 8011ee4:	6803      	ldr	r3, [r0, #0]
 8011ee6:	f013 0207 	ands.w	r2, r3, #7
 8011eea:	4601      	mov	r1, r0
 8011eec:	d00b      	beq.n	8011f06 <__lo0bits+0x22>
 8011eee:	07da      	lsls	r2, r3, #31
 8011ef0:	d423      	bmi.n	8011f3a <__lo0bits+0x56>
 8011ef2:	0798      	lsls	r0, r3, #30
 8011ef4:	bf49      	itett	mi
 8011ef6:	085b      	lsrmi	r3, r3, #1
 8011ef8:	089b      	lsrpl	r3, r3, #2
 8011efa:	2001      	movmi	r0, #1
 8011efc:	600b      	strmi	r3, [r1, #0]
 8011efe:	bf5c      	itt	pl
 8011f00:	600b      	strpl	r3, [r1, #0]
 8011f02:	2002      	movpl	r0, #2
 8011f04:	4770      	bx	lr
 8011f06:	b298      	uxth	r0, r3
 8011f08:	b9a8      	cbnz	r0, 8011f36 <__lo0bits+0x52>
 8011f0a:	0c1b      	lsrs	r3, r3, #16
 8011f0c:	2010      	movs	r0, #16
 8011f0e:	b2da      	uxtb	r2, r3
 8011f10:	b90a      	cbnz	r2, 8011f16 <__lo0bits+0x32>
 8011f12:	3008      	adds	r0, #8
 8011f14:	0a1b      	lsrs	r3, r3, #8
 8011f16:	071a      	lsls	r2, r3, #28
 8011f18:	bf04      	itt	eq
 8011f1a:	091b      	lsreq	r3, r3, #4
 8011f1c:	3004      	addeq	r0, #4
 8011f1e:	079a      	lsls	r2, r3, #30
 8011f20:	bf04      	itt	eq
 8011f22:	089b      	lsreq	r3, r3, #2
 8011f24:	3002      	addeq	r0, #2
 8011f26:	07da      	lsls	r2, r3, #31
 8011f28:	d403      	bmi.n	8011f32 <__lo0bits+0x4e>
 8011f2a:	085b      	lsrs	r3, r3, #1
 8011f2c:	f100 0001 	add.w	r0, r0, #1
 8011f30:	d005      	beq.n	8011f3e <__lo0bits+0x5a>
 8011f32:	600b      	str	r3, [r1, #0]
 8011f34:	4770      	bx	lr
 8011f36:	4610      	mov	r0, r2
 8011f38:	e7e9      	b.n	8011f0e <__lo0bits+0x2a>
 8011f3a:	2000      	movs	r0, #0
 8011f3c:	4770      	bx	lr
 8011f3e:	2020      	movs	r0, #32
 8011f40:	4770      	bx	lr
	...

08011f44 <__i2b>:
 8011f44:	b510      	push	{r4, lr}
 8011f46:	460c      	mov	r4, r1
 8011f48:	2101      	movs	r1, #1
 8011f4a:	f7ff feb9 	bl	8011cc0 <_Balloc>
 8011f4e:	4602      	mov	r2, r0
 8011f50:	b928      	cbnz	r0, 8011f5e <__i2b+0x1a>
 8011f52:	4b05      	ldr	r3, [pc, #20]	; (8011f68 <__i2b+0x24>)
 8011f54:	4805      	ldr	r0, [pc, #20]	; (8011f6c <__i2b+0x28>)
 8011f56:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8011f5a:	f000 fd37 	bl	80129cc <__assert_func>
 8011f5e:	2301      	movs	r3, #1
 8011f60:	6144      	str	r4, [r0, #20]
 8011f62:	6103      	str	r3, [r0, #16]
 8011f64:	bd10      	pop	{r4, pc}
 8011f66:	bf00      	nop
 8011f68:	08014d47 	.word	0x08014d47
 8011f6c:	08014dd4 	.word	0x08014dd4

08011f70 <__multiply>:
 8011f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f74:	4691      	mov	r9, r2
 8011f76:	690a      	ldr	r2, [r1, #16]
 8011f78:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011f7c:	429a      	cmp	r2, r3
 8011f7e:	bfb8      	it	lt
 8011f80:	460b      	movlt	r3, r1
 8011f82:	460c      	mov	r4, r1
 8011f84:	bfbc      	itt	lt
 8011f86:	464c      	movlt	r4, r9
 8011f88:	4699      	movlt	r9, r3
 8011f8a:	6927      	ldr	r7, [r4, #16]
 8011f8c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8011f90:	68a3      	ldr	r3, [r4, #8]
 8011f92:	6861      	ldr	r1, [r4, #4]
 8011f94:	eb07 060a 	add.w	r6, r7, sl
 8011f98:	42b3      	cmp	r3, r6
 8011f9a:	b085      	sub	sp, #20
 8011f9c:	bfb8      	it	lt
 8011f9e:	3101      	addlt	r1, #1
 8011fa0:	f7ff fe8e 	bl	8011cc0 <_Balloc>
 8011fa4:	b930      	cbnz	r0, 8011fb4 <__multiply+0x44>
 8011fa6:	4602      	mov	r2, r0
 8011fa8:	4b44      	ldr	r3, [pc, #272]	; (80120bc <__multiply+0x14c>)
 8011faa:	4845      	ldr	r0, [pc, #276]	; (80120c0 <__multiply+0x150>)
 8011fac:	f240 115d 	movw	r1, #349	; 0x15d
 8011fb0:	f000 fd0c 	bl	80129cc <__assert_func>
 8011fb4:	f100 0514 	add.w	r5, r0, #20
 8011fb8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011fbc:	462b      	mov	r3, r5
 8011fbe:	2200      	movs	r2, #0
 8011fc0:	4543      	cmp	r3, r8
 8011fc2:	d321      	bcc.n	8012008 <__multiply+0x98>
 8011fc4:	f104 0314 	add.w	r3, r4, #20
 8011fc8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8011fcc:	f109 0314 	add.w	r3, r9, #20
 8011fd0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8011fd4:	9202      	str	r2, [sp, #8]
 8011fd6:	1b3a      	subs	r2, r7, r4
 8011fd8:	3a15      	subs	r2, #21
 8011fda:	f022 0203 	bic.w	r2, r2, #3
 8011fde:	3204      	adds	r2, #4
 8011fe0:	f104 0115 	add.w	r1, r4, #21
 8011fe4:	428f      	cmp	r7, r1
 8011fe6:	bf38      	it	cc
 8011fe8:	2204      	movcc	r2, #4
 8011fea:	9201      	str	r2, [sp, #4]
 8011fec:	9a02      	ldr	r2, [sp, #8]
 8011fee:	9303      	str	r3, [sp, #12]
 8011ff0:	429a      	cmp	r2, r3
 8011ff2:	d80c      	bhi.n	801200e <__multiply+0x9e>
 8011ff4:	2e00      	cmp	r6, #0
 8011ff6:	dd03      	ble.n	8012000 <__multiply+0x90>
 8011ff8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011ffc:	2b00      	cmp	r3, #0
 8011ffe:	d05a      	beq.n	80120b6 <__multiply+0x146>
 8012000:	6106      	str	r6, [r0, #16]
 8012002:	b005      	add	sp, #20
 8012004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012008:	f843 2b04 	str.w	r2, [r3], #4
 801200c:	e7d8      	b.n	8011fc0 <__multiply+0x50>
 801200e:	f8b3 a000 	ldrh.w	sl, [r3]
 8012012:	f1ba 0f00 	cmp.w	sl, #0
 8012016:	d024      	beq.n	8012062 <__multiply+0xf2>
 8012018:	f104 0e14 	add.w	lr, r4, #20
 801201c:	46a9      	mov	r9, r5
 801201e:	f04f 0c00 	mov.w	ip, #0
 8012022:	f85e 2b04 	ldr.w	r2, [lr], #4
 8012026:	f8d9 1000 	ldr.w	r1, [r9]
 801202a:	fa1f fb82 	uxth.w	fp, r2
 801202e:	b289      	uxth	r1, r1
 8012030:	fb0a 110b 	mla	r1, sl, fp, r1
 8012034:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8012038:	f8d9 2000 	ldr.w	r2, [r9]
 801203c:	4461      	add	r1, ip
 801203e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012042:	fb0a c20b 	mla	r2, sl, fp, ip
 8012046:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801204a:	b289      	uxth	r1, r1
 801204c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8012050:	4577      	cmp	r7, lr
 8012052:	f849 1b04 	str.w	r1, [r9], #4
 8012056:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801205a:	d8e2      	bhi.n	8012022 <__multiply+0xb2>
 801205c:	9a01      	ldr	r2, [sp, #4]
 801205e:	f845 c002 	str.w	ip, [r5, r2]
 8012062:	9a03      	ldr	r2, [sp, #12]
 8012064:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8012068:	3304      	adds	r3, #4
 801206a:	f1b9 0f00 	cmp.w	r9, #0
 801206e:	d020      	beq.n	80120b2 <__multiply+0x142>
 8012070:	6829      	ldr	r1, [r5, #0]
 8012072:	f104 0c14 	add.w	ip, r4, #20
 8012076:	46ae      	mov	lr, r5
 8012078:	f04f 0a00 	mov.w	sl, #0
 801207c:	f8bc b000 	ldrh.w	fp, [ip]
 8012080:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8012084:	fb09 220b 	mla	r2, r9, fp, r2
 8012088:	4492      	add	sl, r2
 801208a:	b289      	uxth	r1, r1
 801208c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8012090:	f84e 1b04 	str.w	r1, [lr], #4
 8012094:	f85c 2b04 	ldr.w	r2, [ip], #4
 8012098:	f8be 1000 	ldrh.w	r1, [lr]
 801209c:	0c12      	lsrs	r2, r2, #16
 801209e:	fb09 1102 	mla	r1, r9, r2, r1
 80120a2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80120a6:	4567      	cmp	r7, ip
 80120a8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80120ac:	d8e6      	bhi.n	801207c <__multiply+0x10c>
 80120ae:	9a01      	ldr	r2, [sp, #4]
 80120b0:	50a9      	str	r1, [r5, r2]
 80120b2:	3504      	adds	r5, #4
 80120b4:	e79a      	b.n	8011fec <__multiply+0x7c>
 80120b6:	3e01      	subs	r6, #1
 80120b8:	e79c      	b.n	8011ff4 <__multiply+0x84>
 80120ba:	bf00      	nop
 80120bc:	08014d47 	.word	0x08014d47
 80120c0:	08014dd4 	.word	0x08014dd4

080120c4 <__pow5mult>:
 80120c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80120c8:	4615      	mov	r5, r2
 80120ca:	f012 0203 	ands.w	r2, r2, #3
 80120ce:	4606      	mov	r6, r0
 80120d0:	460f      	mov	r7, r1
 80120d2:	d007      	beq.n	80120e4 <__pow5mult+0x20>
 80120d4:	4c25      	ldr	r4, [pc, #148]	; (801216c <__pow5mult+0xa8>)
 80120d6:	3a01      	subs	r2, #1
 80120d8:	2300      	movs	r3, #0
 80120da:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80120de:	f7ff fe51 	bl	8011d84 <__multadd>
 80120e2:	4607      	mov	r7, r0
 80120e4:	10ad      	asrs	r5, r5, #2
 80120e6:	d03d      	beq.n	8012164 <__pow5mult+0xa0>
 80120e8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80120ea:	b97c      	cbnz	r4, 801210c <__pow5mult+0x48>
 80120ec:	2010      	movs	r0, #16
 80120ee:	f7fc fef5 	bl	800eedc <malloc>
 80120f2:	4602      	mov	r2, r0
 80120f4:	6270      	str	r0, [r6, #36]	; 0x24
 80120f6:	b928      	cbnz	r0, 8012104 <__pow5mult+0x40>
 80120f8:	4b1d      	ldr	r3, [pc, #116]	; (8012170 <__pow5mult+0xac>)
 80120fa:	481e      	ldr	r0, [pc, #120]	; (8012174 <__pow5mult+0xb0>)
 80120fc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8012100:	f000 fc64 	bl	80129cc <__assert_func>
 8012104:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012108:	6004      	str	r4, [r0, #0]
 801210a:	60c4      	str	r4, [r0, #12]
 801210c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8012110:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012114:	b94c      	cbnz	r4, 801212a <__pow5mult+0x66>
 8012116:	f240 2171 	movw	r1, #625	; 0x271
 801211a:	4630      	mov	r0, r6
 801211c:	f7ff ff12 	bl	8011f44 <__i2b>
 8012120:	2300      	movs	r3, #0
 8012122:	f8c8 0008 	str.w	r0, [r8, #8]
 8012126:	4604      	mov	r4, r0
 8012128:	6003      	str	r3, [r0, #0]
 801212a:	f04f 0900 	mov.w	r9, #0
 801212e:	07eb      	lsls	r3, r5, #31
 8012130:	d50a      	bpl.n	8012148 <__pow5mult+0x84>
 8012132:	4639      	mov	r1, r7
 8012134:	4622      	mov	r2, r4
 8012136:	4630      	mov	r0, r6
 8012138:	f7ff ff1a 	bl	8011f70 <__multiply>
 801213c:	4639      	mov	r1, r7
 801213e:	4680      	mov	r8, r0
 8012140:	4630      	mov	r0, r6
 8012142:	f7ff fdfd 	bl	8011d40 <_Bfree>
 8012146:	4647      	mov	r7, r8
 8012148:	106d      	asrs	r5, r5, #1
 801214a:	d00b      	beq.n	8012164 <__pow5mult+0xa0>
 801214c:	6820      	ldr	r0, [r4, #0]
 801214e:	b938      	cbnz	r0, 8012160 <__pow5mult+0x9c>
 8012150:	4622      	mov	r2, r4
 8012152:	4621      	mov	r1, r4
 8012154:	4630      	mov	r0, r6
 8012156:	f7ff ff0b 	bl	8011f70 <__multiply>
 801215a:	6020      	str	r0, [r4, #0]
 801215c:	f8c0 9000 	str.w	r9, [r0]
 8012160:	4604      	mov	r4, r0
 8012162:	e7e4      	b.n	801212e <__pow5mult+0x6a>
 8012164:	4638      	mov	r0, r7
 8012166:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801216a:	bf00      	nop
 801216c:	08014f20 	.word	0x08014f20
 8012170:	08014cd5 	.word	0x08014cd5
 8012174:	08014dd4 	.word	0x08014dd4

08012178 <__lshift>:
 8012178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801217c:	460c      	mov	r4, r1
 801217e:	6849      	ldr	r1, [r1, #4]
 8012180:	6923      	ldr	r3, [r4, #16]
 8012182:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012186:	68a3      	ldr	r3, [r4, #8]
 8012188:	4607      	mov	r7, r0
 801218a:	4691      	mov	r9, r2
 801218c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012190:	f108 0601 	add.w	r6, r8, #1
 8012194:	42b3      	cmp	r3, r6
 8012196:	db0b      	blt.n	80121b0 <__lshift+0x38>
 8012198:	4638      	mov	r0, r7
 801219a:	f7ff fd91 	bl	8011cc0 <_Balloc>
 801219e:	4605      	mov	r5, r0
 80121a0:	b948      	cbnz	r0, 80121b6 <__lshift+0x3e>
 80121a2:	4602      	mov	r2, r0
 80121a4:	4b2a      	ldr	r3, [pc, #168]	; (8012250 <__lshift+0xd8>)
 80121a6:	482b      	ldr	r0, [pc, #172]	; (8012254 <__lshift+0xdc>)
 80121a8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80121ac:	f000 fc0e 	bl	80129cc <__assert_func>
 80121b0:	3101      	adds	r1, #1
 80121b2:	005b      	lsls	r3, r3, #1
 80121b4:	e7ee      	b.n	8012194 <__lshift+0x1c>
 80121b6:	2300      	movs	r3, #0
 80121b8:	f100 0114 	add.w	r1, r0, #20
 80121bc:	f100 0210 	add.w	r2, r0, #16
 80121c0:	4618      	mov	r0, r3
 80121c2:	4553      	cmp	r3, sl
 80121c4:	db37      	blt.n	8012236 <__lshift+0xbe>
 80121c6:	6920      	ldr	r0, [r4, #16]
 80121c8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80121cc:	f104 0314 	add.w	r3, r4, #20
 80121d0:	f019 091f 	ands.w	r9, r9, #31
 80121d4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80121d8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80121dc:	d02f      	beq.n	801223e <__lshift+0xc6>
 80121de:	f1c9 0e20 	rsb	lr, r9, #32
 80121e2:	468a      	mov	sl, r1
 80121e4:	f04f 0c00 	mov.w	ip, #0
 80121e8:	681a      	ldr	r2, [r3, #0]
 80121ea:	fa02 f209 	lsl.w	r2, r2, r9
 80121ee:	ea42 020c 	orr.w	r2, r2, ip
 80121f2:	f84a 2b04 	str.w	r2, [sl], #4
 80121f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80121fa:	4298      	cmp	r0, r3
 80121fc:	fa22 fc0e 	lsr.w	ip, r2, lr
 8012200:	d8f2      	bhi.n	80121e8 <__lshift+0x70>
 8012202:	1b03      	subs	r3, r0, r4
 8012204:	3b15      	subs	r3, #21
 8012206:	f023 0303 	bic.w	r3, r3, #3
 801220a:	3304      	adds	r3, #4
 801220c:	f104 0215 	add.w	r2, r4, #21
 8012210:	4290      	cmp	r0, r2
 8012212:	bf38      	it	cc
 8012214:	2304      	movcc	r3, #4
 8012216:	f841 c003 	str.w	ip, [r1, r3]
 801221a:	f1bc 0f00 	cmp.w	ip, #0
 801221e:	d001      	beq.n	8012224 <__lshift+0xac>
 8012220:	f108 0602 	add.w	r6, r8, #2
 8012224:	3e01      	subs	r6, #1
 8012226:	4638      	mov	r0, r7
 8012228:	612e      	str	r6, [r5, #16]
 801222a:	4621      	mov	r1, r4
 801222c:	f7ff fd88 	bl	8011d40 <_Bfree>
 8012230:	4628      	mov	r0, r5
 8012232:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012236:	f842 0f04 	str.w	r0, [r2, #4]!
 801223a:	3301      	adds	r3, #1
 801223c:	e7c1      	b.n	80121c2 <__lshift+0x4a>
 801223e:	3904      	subs	r1, #4
 8012240:	f853 2b04 	ldr.w	r2, [r3], #4
 8012244:	f841 2f04 	str.w	r2, [r1, #4]!
 8012248:	4298      	cmp	r0, r3
 801224a:	d8f9      	bhi.n	8012240 <__lshift+0xc8>
 801224c:	e7ea      	b.n	8012224 <__lshift+0xac>
 801224e:	bf00      	nop
 8012250:	08014d47 	.word	0x08014d47
 8012254:	08014dd4 	.word	0x08014dd4

08012258 <__mcmp>:
 8012258:	b530      	push	{r4, r5, lr}
 801225a:	6902      	ldr	r2, [r0, #16]
 801225c:	690c      	ldr	r4, [r1, #16]
 801225e:	1b12      	subs	r2, r2, r4
 8012260:	d10e      	bne.n	8012280 <__mcmp+0x28>
 8012262:	f100 0314 	add.w	r3, r0, #20
 8012266:	3114      	adds	r1, #20
 8012268:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801226c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8012270:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8012274:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8012278:	42a5      	cmp	r5, r4
 801227a:	d003      	beq.n	8012284 <__mcmp+0x2c>
 801227c:	d305      	bcc.n	801228a <__mcmp+0x32>
 801227e:	2201      	movs	r2, #1
 8012280:	4610      	mov	r0, r2
 8012282:	bd30      	pop	{r4, r5, pc}
 8012284:	4283      	cmp	r3, r0
 8012286:	d3f3      	bcc.n	8012270 <__mcmp+0x18>
 8012288:	e7fa      	b.n	8012280 <__mcmp+0x28>
 801228a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801228e:	e7f7      	b.n	8012280 <__mcmp+0x28>

08012290 <__mdiff>:
 8012290:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012294:	460c      	mov	r4, r1
 8012296:	4606      	mov	r6, r0
 8012298:	4611      	mov	r1, r2
 801229a:	4620      	mov	r0, r4
 801229c:	4690      	mov	r8, r2
 801229e:	f7ff ffdb 	bl	8012258 <__mcmp>
 80122a2:	1e05      	subs	r5, r0, #0
 80122a4:	d110      	bne.n	80122c8 <__mdiff+0x38>
 80122a6:	4629      	mov	r1, r5
 80122a8:	4630      	mov	r0, r6
 80122aa:	f7ff fd09 	bl	8011cc0 <_Balloc>
 80122ae:	b930      	cbnz	r0, 80122be <__mdiff+0x2e>
 80122b0:	4b3a      	ldr	r3, [pc, #232]	; (801239c <__mdiff+0x10c>)
 80122b2:	4602      	mov	r2, r0
 80122b4:	f240 2132 	movw	r1, #562	; 0x232
 80122b8:	4839      	ldr	r0, [pc, #228]	; (80123a0 <__mdiff+0x110>)
 80122ba:	f000 fb87 	bl	80129cc <__assert_func>
 80122be:	2301      	movs	r3, #1
 80122c0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80122c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122c8:	bfa4      	itt	ge
 80122ca:	4643      	movge	r3, r8
 80122cc:	46a0      	movge	r8, r4
 80122ce:	4630      	mov	r0, r6
 80122d0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80122d4:	bfa6      	itte	ge
 80122d6:	461c      	movge	r4, r3
 80122d8:	2500      	movge	r5, #0
 80122da:	2501      	movlt	r5, #1
 80122dc:	f7ff fcf0 	bl	8011cc0 <_Balloc>
 80122e0:	b920      	cbnz	r0, 80122ec <__mdiff+0x5c>
 80122e2:	4b2e      	ldr	r3, [pc, #184]	; (801239c <__mdiff+0x10c>)
 80122e4:	4602      	mov	r2, r0
 80122e6:	f44f 7110 	mov.w	r1, #576	; 0x240
 80122ea:	e7e5      	b.n	80122b8 <__mdiff+0x28>
 80122ec:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80122f0:	6926      	ldr	r6, [r4, #16]
 80122f2:	60c5      	str	r5, [r0, #12]
 80122f4:	f104 0914 	add.w	r9, r4, #20
 80122f8:	f108 0514 	add.w	r5, r8, #20
 80122fc:	f100 0e14 	add.w	lr, r0, #20
 8012300:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8012304:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8012308:	f108 0210 	add.w	r2, r8, #16
 801230c:	46f2      	mov	sl, lr
 801230e:	2100      	movs	r1, #0
 8012310:	f859 3b04 	ldr.w	r3, [r9], #4
 8012314:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8012318:	fa1f f883 	uxth.w	r8, r3
 801231c:	fa11 f18b 	uxtah	r1, r1, fp
 8012320:	0c1b      	lsrs	r3, r3, #16
 8012322:	eba1 0808 	sub.w	r8, r1, r8
 8012326:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801232a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801232e:	fa1f f888 	uxth.w	r8, r8
 8012332:	1419      	asrs	r1, r3, #16
 8012334:	454e      	cmp	r6, r9
 8012336:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801233a:	f84a 3b04 	str.w	r3, [sl], #4
 801233e:	d8e7      	bhi.n	8012310 <__mdiff+0x80>
 8012340:	1b33      	subs	r3, r6, r4
 8012342:	3b15      	subs	r3, #21
 8012344:	f023 0303 	bic.w	r3, r3, #3
 8012348:	3304      	adds	r3, #4
 801234a:	3415      	adds	r4, #21
 801234c:	42a6      	cmp	r6, r4
 801234e:	bf38      	it	cc
 8012350:	2304      	movcc	r3, #4
 8012352:	441d      	add	r5, r3
 8012354:	4473      	add	r3, lr
 8012356:	469e      	mov	lr, r3
 8012358:	462e      	mov	r6, r5
 801235a:	4566      	cmp	r6, ip
 801235c:	d30e      	bcc.n	801237c <__mdiff+0xec>
 801235e:	f10c 0203 	add.w	r2, ip, #3
 8012362:	1b52      	subs	r2, r2, r5
 8012364:	f022 0203 	bic.w	r2, r2, #3
 8012368:	3d03      	subs	r5, #3
 801236a:	45ac      	cmp	ip, r5
 801236c:	bf38      	it	cc
 801236e:	2200      	movcc	r2, #0
 8012370:	441a      	add	r2, r3
 8012372:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8012376:	b17b      	cbz	r3, 8012398 <__mdiff+0x108>
 8012378:	6107      	str	r7, [r0, #16]
 801237a:	e7a3      	b.n	80122c4 <__mdiff+0x34>
 801237c:	f856 8b04 	ldr.w	r8, [r6], #4
 8012380:	fa11 f288 	uxtah	r2, r1, r8
 8012384:	1414      	asrs	r4, r2, #16
 8012386:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801238a:	b292      	uxth	r2, r2
 801238c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8012390:	f84e 2b04 	str.w	r2, [lr], #4
 8012394:	1421      	asrs	r1, r4, #16
 8012396:	e7e0      	b.n	801235a <__mdiff+0xca>
 8012398:	3f01      	subs	r7, #1
 801239a:	e7ea      	b.n	8012372 <__mdiff+0xe2>
 801239c:	08014d47 	.word	0x08014d47
 80123a0:	08014dd4 	.word	0x08014dd4

080123a4 <__ulp>:
 80123a4:	b082      	sub	sp, #8
 80123a6:	ed8d 0b00 	vstr	d0, [sp]
 80123aa:	9b01      	ldr	r3, [sp, #4]
 80123ac:	4912      	ldr	r1, [pc, #72]	; (80123f8 <__ulp+0x54>)
 80123ae:	4019      	ands	r1, r3
 80123b0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80123b4:	2900      	cmp	r1, #0
 80123b6:	dd05      	ble.n	80123c4 <__ulp+0x20>
 80123b8:	2200      	movs	r2, #0
 80123ba:	460b      	mov	r3, r1
 80123bc:	ec43 2b10 	vmov	d0, r2, r3
 80123c0:	b002      	add	sp, #8
 80123c2:	4770      	bx	lr
 80123c4:	4249      	negs	r1, r1
 80123c6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80123ca:	ea4f 5021 	mov.w	r0, r1, asr #20
 80123ce:	f04f 0200 	mov.w	r2, #0
 80123d2:	f04f 0300 	mov.w	r3, #0
 80123d6:	da04      	bge.n	80123e2 <__ulp+0x3e>
 80123d8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80123dc:	fa41 f300 	asr.w	r3, r1, r0
 80123e0:	e7ec      	b.n	80123bc <__ulp+0x18>
 80123e2:	f1a0 0114 	sub.w	r1, r0, #20
 80123e6:	291e      	cmp	r1, #30
 80123e8:	bfda      	itte	le
 80123ea:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80123ee:	fa20 f101 	lsrle.w	r1, r0, r1
 80123f2:	2101      	movgt	r1, #1
 80123f4:	460a      	mov	r2, r1
 80123f6:	e7e1      	b.n	80123bc <__ulp+0x18>
 80123f8:	7ff00000 	.word	0x7ff00000

080123fc <__b2d>:
 80123fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80123fe:	6905      	ldr	r5, [r0, #16]
 8012400:	f100 0714 	add.w	r7, r0, #20
 8012404:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8012408:	1f2e      	subs	r6, r5, #4
 801240a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801240e:	4620      	mov	r0, r4
 8012410:	f7ff fd48 	bl	8011ea4 <__hi0bits>
 8012414:	f1c0 0320 	rsb	r3, r0, #32
 8012418:	280a      	cmp	r0, #10
 801241a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8012498 <__b2d+0x9c>
 801241e:	600b      	str	r3, [r1, #0]
 8012420:	dc14      	bgt.n	801244c <__b2d+0x50>
 8012422:	f1c0 0e0b 	rsb	lr, r0, #11
 8012426:	fa24 f10e 	lsr.w	r1, r4, lr
 801242a:	42b7      	cmp	r7, r6
 801242c:	ea41 030c 	orr.w	r3, r1, ip
 8012430:	bf34      	ite	cc
 8012432:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8012436:	2100      	movcs	r1, #0
 8012438:	3015      	adds	r0, #21
 801243a:	fa04 f000 	lsl.w	r0, r4, r0
 801243e:	fa21 f10e 	lsr.w	r1, r1, lr
 8012442:	ea40 0201 	orr.w	r2, r0, r1
 8012446:	ec43 2b10 	vmov	d0, r2, r3
 801244a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801244c:	42b7      	cmp	r7, r6
 801244e:	bf3a      	itte	cc
 8012450:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8012454:	f1a5 0608 	subcc.w	r6, r5, #8
 8012458:	2100      	movcs	r1, #0
 801245a:	380b      	subs	r0, #11
 801245c:	d017      	beq.n	801248e <__b2d+0x92>
 801245e:	f1c0 0c20 	rsb	ip, r0, #32
 8012462:	fa04 f500 	lsl.w	r5, r4, r0
 8012466:	42be      	cmp	r6, r7
 8012468:	fa21 f40c 	lsr.w	r4, r1, ip
 801246c:	ea45 0504 	orr.w	r5, r5, r4
 8012470:	bf8c      	ite	hi
 8012472:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8012476:	2400      	movls	r4, #0
 8012478:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801247c:	fa01 f000 	lsl.w	r0, r1, r0
 8012480:	fa24 f40c 	lsr.w	r4, r4, ip
 8012484:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8012488:	ea40 0204 	orr.w	r2, r0, r4
 801248c:	e7db      	b.n	8012446 <__b2d+0x4a>
 801248e:	ea44 030c 	orr.w	r3, r4, ip
 8012492:	460a      	mov	r2, r1
 8012494:	e7d7      	b.n	8012446 <__b2d+0x4a>
 8012496:	bf00      	nop
 8012498:	3ff00000 	.word	0x3ff00000

0801249c <__d2b>:
 801249c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80124a0:	4689      	mov	r9, r1
 80124a2:	2101      	movs	r1, #1
 80124a4:	ec57 6b10 	vmov	r6, r7, d0
 80124a8:	4690      	mov	r8, r2
 80124aa:	f7ff fc09 	bl	8011cc0 <_Balloc>
 80124ae:	4604      	mov	r4, r0
 80124b0:	b930      	cbnz	r0, 80124c0 <__d2b+0x24>
 80124b2:	4602      	mov	r2, r0
 80124b4:	4b25      	ldr	r3, [pc, #148]	; (801254c <__d2b+0xb0>)
 80124b6:	4826      	ldr	r0, [pc, #152]	; (8012550 <__d2b+0xb4>)
 80124b8:	f240 310a 	movw	r1, #778	; 0x30a
 80124bc:	f000 fa86 	bl	80129cc <__assert_func>
 80124c0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80124c4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80124c8:	bb35      	cbnz	r5, 8012518 <__d2b+0x7c>
 80124ca:	2e00      	cmp	r6, #0
 80124cc:	9301      	str	r3, [sp, #4]
 80124ce:	d028      	beq.n	8012522 <__d2b+0x86>
 80124d0:	4668      	mov	r0, sp
 80124d2:	9600      	str	r6, [sp, #0]
 80124d4:	f7ff fd06 	bl	8011ee4 <__lo0bits>
 80124d8:	9900      	ldr	r1, [sp, #0]
 80124da:	b300      	cbz	r0, 801251e <__d2b+0x82>
 80124dc:	9a01      	ldr	r2, [sp, #4]
 80124de:	f1c0 0320 	rsb	r3, r0, #32
 80124e2:	fa02 f303 	lsl.w	r3, r2, r3
 80124e6:	430b      	orrs	r3, r1
 80124e8:	40c2      	lsrs	r2, r0
 80124ea:	6163      	str	r3, [r4, #20]
 80124ec:	9201      	str	r2, [sp, #4]
 80124ee:	9b01      	ldr	r3, [sp, #4]
 80124f0:	61a3      	str	r3, [r4, #24]
 80124f2:	2b00      	cmp	r3, #0
 80124f4:	bf14      	ite	ne
 80124f6:	2202      	movne	r2, #2
 80124f8:	2201      	moveq	r2, #1
 80124fa:	6122      	str	r2, [r4, #16]
 80124fc:	b1d5      	cbz	r5, 8012534 <__d2b+0x98>
 80124fe:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8012502:	4405      	add	r5, r0
 8012504:	f8c9 5000 	str.w	r5, [r9]
 8012508:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801250c:	f8c8 0000 	str.w	r0, [r8]
 8012510:	4620      	mov	r0, r4
 8012512:	b003      	add	sp, #12
 8012514:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012518:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801251c:	e7d5      	b.n	80124ca <__d2b+0x2e>
 801251e:	6161      	str	r1, [r4, #20]
 8012520:	e7e5      	b.n	80124ee <__d2b+0x52>
 8012522:	a801      	add	r0, sp, #4
 8012524:	f7ff fcde 	bl	8011ee4 <__lo0bits>
 8012528:	9b01      	ldr	r3, [sp, #4]
 801252a:	6163      	str	r3, [r4, #20]
 801252c:	2201      	movs	r2, #1
 801252e:	6122      	str	r2, [r4, #16]
 8012530:	3020      	adds	r0, #32
 8012532:	e7e3      	b.n	80124fc <__d2b+0x60>
 8012534:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012538:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801253c:	f8c9 0000 	str.w	r0, [r9]
 8012540:	6918      	ldr	r0, [r3, #16]
 8012542:	f7ff fcaf 	bl	8011ea4 <__hi0bits>
 8012546:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801254a:	e7df      	b.n	801250c <__d2b+0x70>
 801254c:	08014d47 	.word	0x08014d47
 8012550:	08014dd4 	.word	0x08014dd4

08012554 <__ratio>:
 8012554:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012558:	4688      	mov	r8, r1
 801255a:	4669      	mov	r1, sp
 801255c:	4681      	mov	r9, r0
 801255e:	f7ff ff4d 	bl	80123fc <__b2d>
 8012562:	a901      	add	r1, sp, #4
 8012564:	4640      	mov	r0, r8
 8012566:	ec55 4b10 	vmov	r4, r5, d0
 801256a:	f7ff ff47 	bl	80123fc <__b2d>
 801256e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012572:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8012576:	eba3 0c02 	sub.w	ip, r3, r2
 801257a:	e9dd 3200 	ldrd	r3, r2, [sp]
 801257e:	1a9b      	subs	r3, r3, r2
 8012580:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8012584:	ec51 0b10 	vmov	r0, r1, d0
 8012588:	2b00      	cmp	r3, #0
 801258a:	bfd6      	itet	le
 801258c:	460a      	movle	r2, r1
 801258e:	462a      	movgt	r2, r5
 8012590:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8012594:	468b      	mov	fp, r1
 8012596:	462f      	mov	r7, r5
 8012598:	bfd4      	ite	le
 801259a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801259e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80125a2:	4620      	mov	r0, r4
 80125a4:	ee10 2a10 	vmov	r2, s0
 80125a8:	465b      	mov	r3, fp
 80125aa:	4639      	mov	r1, r7
 80125ac:	f7ee f94e 	bl	800084c <__aeabi_ddiv>
 80125b0:	ec41 0b10 	vmov	d0, r0, r1
 80125b4:	b003      	add	sp, #12
 80125b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080125ba <__copybits>:
 80125ba:	3901      	subs	r1, #1
 80125bc:	b570      	push	{r4, r5, r6, lr}
 80125be:	1149      	asrs	r1, r1, #5
 80125c0:	6914      	ldr	r4, [r2, #16]
 80125c2:	3101      	adds	r1, #1
 80125c4:	f102 0314 	add.w	r3, r2, #20
 80125c8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80125cc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80125d0:	1f05      	subs	r5, r0, #4
 80125d2:	42a3      	cmp	r3, r4
 80125d4:	d30c      	bcc.n	80125f0 <__copybits+0x36>
 80125d6:	1aa3      	subs	r3, r4, r2
 80125d8:	3b11      	subs	r3, #17
 80125da:	f023 0303 	bic.w	r3, r3, #3
 80125de:	3211      	adds	r2, #17
 80125e0:	42a2      	cmp	r2, r4
 80125e2:	bf88      	it	hi
 80125e4:	2300      	movhi	r3, #0
 80125e6:	4418      	add	r0, r3
 80125e8:	2300      	movs	r3, #0
 80125ea:	4288      	cmp	r0, r1
 80125ec:	d305      	bcc.n	80125fa <__copybits+0x40>
 80125ee:	bd70      	pop	{r4, r5, r6, pc}
 80125f0:	f853 6b04 	ldr.w	r6, [r3], #4
 80125f4:	f845 6f04 	str.w	r6, [r5, #4]!
 80125f8:	e7eb      	b.n	80125d2 <__copybits+0x18>
 80125fa:	f840 3b04 	str.w	r3, [r0], #4
 80125fe:	e7f4      	b.n	80125ea <__copybits+0x30>

08012600 <__any_on>:
 8012600:	f100 0214 	add.w	r2, r0, #20
 8012604:	6900      	ldr	r0, [r0, #16]
 8012606:	114b      	asrs	r3, r1, #5
 8012608:	4298      	cmp	r0, r3
 801260a:	b510      	push	{r4, lr}
 801260c:	db11      	blt.n	8012632 <__any_on+0x32>
 801260e:	dd0a      	ble.n	8012626 <__any_on+0x26>
 8012610:	f011 011f 	ands.w	r1, r1, #31
 8012614:	d007      	beq.n	8012626 <__any_on+0x26>
 8012616:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801261a:	fa24 f001 	lsr.w	r0, r4, r1
 801261e:	fa00 f101 	lsl.w	r1, r0, r1
 8012622:	428c      	cmp	r4, r1
 8012624:	d10b      	bne.n	801263e <__any_on+0x3e>
 8012626:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801262a:	4293      	cmp	r3, r2
 801262c:	d803      	bhi.n	8012636 <__any_on+0x36>
 801262e:	2000      	movs	r0, #0
 8012630:	bd10      	pop	{r4, pc}
 8012632:	4603      	mov	r3, r0
 8012634:	e7f7      	b.n	8012626 <__any_on+0x26>
 8012636:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801263a:	2900      	cmp	r1, #0
 801263c:	d0f5      	beq.n	801262a <__any_on+0x2a>
 801263e:	2001      	movs	r0, #1
 8012640:	e7f6      	b.n	8012630 <__any_on+0x30>

08012642 <__ssputs_r>:
 8012642:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012646:	688e      	ldr	r6, [r1, #8]
 8012648:	429e      	cmp	r6, r3
 801264a:	4682      	mov	sl, r0
 801264c:	460c      	mov	r4, r1
 801264e:	4690      	mov	r8, r2
 8012650:	461f      	mov	r7, r3
 8012652:	d838      	bhi.n	80126c6 <__ssputs_r+0x84>
 8012654:	898a      	ldrh	r2, [r1, #12]
 8012656:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801265a:	d032      	beq.n	80126c2 <__ssputs_r+0x80>
 801265c:	6825      	ldr	r5, [r4, #0]
 801265e:	6909      	ldr	r1, [r1, #16]
 8012660:	eba5 0901 	sub.w	r9, r5, r1
 8012664:	6965      	ldr	r5, [r4, #20]
 8012666:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801266a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801266e:	3301      	adds	r3, #1
 8012670:	444b      	add	r3, r9
 8012672:	106d      	asrs	r5, r5, #1
 8012674:	429d      	cmp	r5, r3
 8012676:	bf38      	it	cc
 8012678:	461d      	movcc	r5, r3
 801267a:	0553      	lsls	r3, r2, #21
 801267c:	d531      	bpl.n	80126e2 <__ssputs_r+0xa0>
 801267e:	4629      	mov	r1, r5
 8012680:	f7fc fcd4 	bl	800f02c <_malloc_r>
 8012684:	4606      	mov	r6, r0
 8012686:	b950      	cbnz	r0, 801269e <__ssputs_r+0x5c>
 8012688:	230c      	movs	r3, #12
 801268a:	f8ca 3000 	str.w	r3, [sl]
 801268e:	89a3      	ldrh	r3, [r4, #12]
 8012690:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012694:	81a3      	strh	r3, [r4, #12]
 8012696:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801269a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801269e:	6921      	ldr	r1, [r4, #16]
 80126a0:	464a      	mov	r2, r9
 80126a2:	f7fc fc2b 	bl	800eefc <memcpy>
 80126a6:	89a3      	ldrh	r3, [r4, #12]
 80126a8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80126ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80126b0:	81a3      	strh	r3, [r4, #12]
 80126b2:	6126      	str	r6, [r4, #16]
 80126b4:	6165      	str	r5, [r4, #20]
 80126b6:	444e      	add	r6, r9
 80126b8:	eba5 0509 	sub.w	r5, r5, r9
 80126bc:	6026      	str	r6, [r4, #0]
 80126be:	60a5      	str	r5, [r4, #8]
 80126c0:	463e      	mov	r6, r7
 80126c2:	42be      	cmp	r6, r7
 80126c4:	d900      	bls.n	80126c8 <__ssputs_r+0x86>
 80126c6:	463e      	mov	r6, r7
 80126c8:	6820      	ldr	r0, [r4, #0]
 80126ca:	4632      	mov	r2, r6
 80126cc:	4641      	mov	r1, r8
 80126ce:	f000 f9cf 	bl	8012a70 <memmove>
 80126d2:	68a3      	ldr	r3, [r4, #8]
 80126d4:	1b9b      	subs	r3, r3, r6
 80126d6:	60a3      	str	r3, [r4, #8]
 80126d8:	6823      	ldr	r3, [r4, #0]
 80126da:	4433      	add	r3, r6
 80126dc:	6023      	str	r3, [r4, #0]
 80126de:	2000      	movs	r0, #0
 80126e0:	e7db      	b.n	801269a <__ssputs_r+0x58>
 80126e2:	462a      	mov	r2, r5
 80126e4:	f000 f9de 	bl	8012aa4 <_realloc_r>
 80126e8:	4606      	mov	r6, r0
 80126ea:	2800      	cmp	r0, #0
 80126ec:	d1e1      	bne.n	80126b2 <__ssputs_r+0x70>
 80126ee:	6921      	ldr	r1, [r4, #16]
 80126f0:	4650      	mov	r0, sl
 80126f2:	f7fc fc2f 	bl	800ef54 <_free_r>
 80126f6:	e7c7      	b.n	8012688 <__ssputs_r+0x46>

080126f8 <_svfiprintf_r>:
 80126f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126fc:	4698      	mov	r8, r3
 80126fe:	898b      	ldrh	r3, [r1, #12]
 8012700:	061b      	lsls	r3, r3, #24
 8012702:	b09d      	sub	sp, #116	; 0x74
 8012704:	4607      	mov	r7, r0
 8012706:	460d      	mov	r5, r1
 8012708:	4614      	mov	r4, r2
 801270a:	d50e      	bpl.n	801272a <_svfiprintf_r+0x32>
 801270c:	690b      	ldr	r3, [r1, #16]
 801270e:	b963      	cbnz	r3, 801272a <_svfiprintf_r+0x32>
 8012710:	2140      	movs	r1, #64	; 0x40
 8012712:	f7fc fc8b 	bl	800f02c <_malloc_r>
 8012716:	6028      	str	r0, [r5, #0]
 8012718:	6128      	str	r0, [r5, #16]
 801271a:	b920      	cbnz	r0, 8012726 <_svfiprintf_r+0x2e>
 801271c:	230c      	movs	r3, #12
 801271e:	603b      	str	r3, [r7, #0]
 8012720:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012724:	e0d1      	b.n	80128ca <_svfiprintf_r+0x1d2>
 8012726:	2340      	movs	r3, #64	; 0x40
 8012728:	616b      	str	r3, [r5, #20]
 801272a:	2300      	movs	r3, #0
 801272c:	9309      	str	r3, [sp, #36]	; 0x24
 801272e:	2320      	movs	r3, #32
 8012730:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012734:	f8cd 800c 	str.w	r8, [sp, #12]
 8012738:	2330      	movs	r3, #48	; 0x30
 801273a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80128e4 <_svfiprintf_r+0x1ec>
 801273e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012742:	f04f 0901 	mov.w	r9, #1
 8012746:	4623      	mov	r3, r4
 8012748:	469a      	mov	sl, r3
 801274a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801274e:	b10a      	cbz	r2, 8012754 <_svfiprintf_r+0x5c>
 8012750:	2a25      	cmp	r2, #37	; 0x25
 8012752:	d1f9      	bne.n	8012748 <_svfiprintf_r+0x50>
 8012754:	ebba 0b04 	subs.w	fp, sl, r4
 8012758:	d00b      	beq.n	8012772 <_svfiprintf_r+0x7a>
 801275a:	465b      	mov	r3, fp
 801275c:	4622      	mov	r2, r4
 801275e:	4629      	mov	r1, r5
 8012760:	4638      	mov	r0, r7
 8012762:	f7ff ff6e 	bl	8012642 <__ssputs_r>
 8012766:	3001      	adds	r0, #1
 8012768:	f000 80aa 	beq.w	80128c0 <_svfiprintf_r+0x1c8>
 801276c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801276e:	445a      	add	r2, fp
 8012770:	9209      	str	r2, [sp, #36]	; 0x24
 8012772:	f89a 3000 	ldrb.w	r3, [sl]
 8012776:	2b00      	cmp	r3, #0
 8012778:	f000 80a2 	beq.w	80128c0 <_svfiprintf_r+0x1c8>
 801277c:	2300      	movs	r3, #0
 801277e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012782:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012786:	f10a 0a01 	add.w	sl, sl, #1
 801278a:	9304      	str	r3, [sp, #16]
 801278c:	9307      	str	r3, [sp, #28]
 801278e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012792:	931a      	str	r3, [sp, #104]	; 0x68
 8012794:	4654      	mov	r4, sl
 8012796:	2205      	movs	r2, #5
 8012798:	f814 1b01 	ldrb.w	r1, [r4], #1
 801279c:	4851      	ldr	r0, [pc, #324]	; (80128e4 <_svfiprintf_r+0x1ec>)
 801279e:	f7ed fd1f 	bl	80001e0 <memchr>
 80127a2:	9a04      	ldr	r2, [sp, #16]
 80127a4:	b9d8      	cbnz	r0, 80127de <_svfiprintf_r+0xe6>
 80127a6:	06d0      	lsls	r0, r2, #27
 80127a8:	bf44      	itt	mi
 80127aa:	2320      	movmi	r3, #32
 80127ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80127b0:	0711      	lsls	r1, r2, #28
 80127b2:	bf44      	itt	mi
 80127b4:	232b      	movmi	r3, #43	; 0x2b
 80127b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80127ba:	f89a 3000 	ldrb.w	r3, [sl]
 80127be:	2b2a      	cmp	r3, #42	; 0x2a
 80127c0:	d015      	beq.n	80127ee <_svfiprintf_r+0xf6>
 80127c2:	9a07      	ldr	r2, [sp, #28]
 80127c4:	4654      	mov	r4, sl
 80127c6:	2000      	movs	r0, #0
 80127c8:	f04f 0c0a 	mov.w	ip, #10
 80127cc:	4621      	mov	r1, r4
 80127ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80127d2:	3b30      	subs	r3, #48	; 0x30
 80127d4:	2b09      	cmp	r3, #9
 80127d6:	d94e      	bls.n	8012876 <_svfiprintf_r+0x17e>
 80127d8:	b1b0      	cbz	r0, 8012808 <_svfiprintf_r+0x110>
 80127da:	9207      	str	r2, [sp, #28]
 80127dc:	e014      	b.n	8012808 <_svfiprintf_r+0x110>
 80127de:	eba0 0308 	sub.w	r3, r0, r8
 80127e2:	fa09 f303 	lsl.w	r3, r9, r3
 80127e6:	4313      	orrs	r3, r2
 80127e8:	9304      	str	r3, [sp, #16]
 80127ea:	46a2      	mov	sl, r4
 80127ec:	e7d2      	b.n	8012794 <_svfiprintf_r+0x9c>
 80127ee:	9b03      	ldr	r3, [sp, #12]
 80127f0:	1d19      	adds	r1, r3, #4
 80127f2:	681b      	ldr	r3, [r3, #0]
 80127f4:	9103      	str	r1, [sp, #12]
 80127f6:	2b00      	cmp	r3, #0
 80127f8:	bfbb      	ittet	lt
 80127fa:	425b      	neglt	r3, r3
 80127fc:	f042 0202 	orrlt.w	r2, r2, #2
 8012800:	9307      	strge	r3, [sp, #28]
 8012802:	9307      	strlt	r3, [sp, #28]
 8012804:	bfb8      	it	lt
 8012806:	9204      	strlt	r2, [sp, #16]
 8012808:	7823      	ldrb	r3, [r4, #0]
 801280a:	2b2e      	cmp	r3, #46	; 0x2e
 801280c:	d10c      	bne.n	8012828 <_svfiprintf_r+0x130>
 801280e:	7863      	ldrb	r3, [r4, #1]
 8012810:	2b2a      	cmp	r3, #42	; 0x2a
 8012812:	d135      	bne.n	8012880 <_svfiprintf_r+0x188>
 8012814:	9b03      	ldr	r3, [sp, #12]
 8012816:	1d1a      	adds	r2, r3, #4
 8012818:	681b      	ldr	r3, [r3, #0]
 801281a:	9203      	str	r2, [sp, #12]
 801281c:	2b00      	cmp	r3, #0
 801281e:	bfb8      	it	lt
 8012820:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8012824:	3402      	adds	r4, #2
 8012826:	9305      	str	r3, [sp, #20]
 8012828:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80128f4 <_svfiprintf_r+0x1fc>
 801282c:	7821      	ldrb	r1, [r4, #0]
 801282e:	2203      	movs	r2, #3
 8012830:	4650      	mov	r0, sl
 8012832:	f7ed fcd5 	bl	80001e0 <memchr>
 8012836:	b140      	cbz	r0, 801284a <_svfiprintf_r+0x152>
 8012838:	2340      	movs	r3, #64	; 0x40
 801283a:	eba0 000a 	sub.w	r0, r0, sl
 801283e:	fa03 f000 	lsl.w	r0, r3, r0
 8012842:	9b04      	ldr	r3, [sp, #16]
 8012844:	4303      	orrs	r3, r0
 8012846:	3401      	adds	r4, #1
 8012848:	9304      	str	r3, [sp, #16]
 801284a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801284e:	4826      	ldr	r0, [pc, #152]	; (80128e8 <_svfiprintf_r+0x1f0>)
 8012850:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012854:	2206      	movs	r2, #6
 8012856:	f7ed fcc3 	bl	80001e0 <memchr>
 801285a:	2800      	cmp	r0, #0
 801285c:	d038      	beq.n	80128d0 <_svfiprintf_r+0x1d8>
 801285e:	4b23      	ldr	r3, [pc, #140]	; (80128ec <_svfiprintf_r+0x1f4>)
 8012860:	bb1b      	cbnz	r3, 80128aa <_svfiprintf_r+0x1b2>
 8012862:	9b03      	ldr	r3, [sp, #12]
 8012864:	3307      	adds	r3, #7
 8012866:	f023 0307 	bic.w	r3, r3, #7
 801286a:	3308      	adds	r3, #8
 801286c:	9303      	str	r3, [sp, #12]
 801286e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012870:	4433      	add	r3, r6
 8012872:	9309      	str	r3, [sp, #36]	; 0x24
 8012874:	e767      	b.n	8012746 <_svfiprintf_r+0x4e>
 8012876:	fb0c 3202 	mla	r2, ip, r2, r3
 801287a:	460c      	mov	r4, r1
 801287c:	2001      	movs	r0, #1
 801287e:	e7a5      	b.n	80127cc <_svfiprintf_r+0xd4>
 8012880:	2300      	movs	r3, #0
 8012882:	3401      	adds	r4, #1
 8012884:	9305      	str	r3, [sp, #20]
 8012886:	4619      	mov	r1, r3
 8012888:	f04f 0c0a 	mov.w	ip, #10
 801288c:	4620      	mov	r0, r4
 801288e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012892:	3a30      	subs	r2, #48	; 0x30
 8012894:	2a09      	cmp	r2, #9
 8012896:	d903      	bls.n	80128a0 <_svfiprintf_r+0x1a8>
 8012898:	2b00      	cmp	r3, #0
 801289a:	d0c5      	beq.n	8012828 <_svfiprintf_r+0x130>
 801289c:	9105      	str	r1, [sp, #20]
 801289e:	e7c3      	b.n	8012828 <_svfiprintf_r+0x130>
 80128a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80128a4:	4604      	mov	r4, r0
 80128a6:	2301      	movs	r3, #1
 80128a8:	e7f0      	b.n	801288c <_svfiprintf_r+0x194>
 80128aa:	ab03      	add	r3, sp, #12
 80128ac:	9300      	str	r3, [sp, #0]
 80128ae:	462a      	mov	r2, r5
 80128b0:	4b0f      	ldr	r3, [pc, #60]	; (80128f0 <_svfiprintf_r+0x1f8>)
 80128b2:	a904      	add	r1, sp, #16
 80128b4:	4638      	mov	r0, r7
 80128b6:	f7fc fccd 	bl	800f254 <_printf_float>
 80128ba:	1c42      	adds	r2, r0, #1
 80128bc:	4606      	mov	r6, r0
 80128be:	d1d6      	bne.n	801286e <_svfiprintf_r+0x176>
 80128c0:	89ab      	ldrh	r3, [r5, #12]
 80128c2:	065b      	lsls	r3, r3, #25
 80128c4:	f53f af2c 	bmi.w	8012720 <_svfiprintf_r+0x28>
 80128c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80128ca:	b01d      	add	sp, #116	; 0x74
 80128cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128d0:	ab03      	add	r3, sp, #12
 80128d2:	9300      	str	r3, [sp, #0]
 80128d4:	462a      	mov	r2, r5
 80128d6:	4b06      	ldr	r3, [pc, #24]	; (80128f0 <_svfiprintf_r+0x1f8>)
 80128d8:	a904      	add	r1, sp, #16
 80128da:	4638      	mov	r0, r7
 80128dc:	f7fc ff5e 	bl	800f79c <_printf_i>
 80128e0:	e7eb      	b.n	80128ba <_svfiprintf_r+0x1c2>
 80128e2:	bf00      	nop
 80128e4:	08014f2c 	.word	0x08014f2c
 80128e8:	08014f36 	.word	0x08014f36
 80128ec:	0800f255 	.word	0x0800f255
 80128f0:	08012643 	.word	0x08012643
 80128f4:	08014f32 	.word	0x08014f32

080128f8 <nan>:
 80128f8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012900 <nan+0x8>
 80128fc:	4770      	bx	lr
 80128fe:	bf00      	nop
 8012900:	00000000 	.word	0x00000000
 8012904:	7ff80000 	.word	0x7ff80000

08012908 <__sread>:
 8012908:	b510      	push	{r4, lr}
 801290a:	460c      	mov	r4, r1
 801290c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012910:	f000 fa50 	bl	8012db4 <_read_r>
 8012914:	2800      	cmp	r0, #0
 8012916:	bfab      	itete	ge
 8012918:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801291a:	89a3      	ldrhlt	r3, [r4, #12]
 801291c:	181b      	addge	r3, r3, r0
 801291e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012922:	bfac      	ite	ge
 8012924:	6563      	strge	r3, [r4, #84]	; 0x54
 8012926:	81a3      	strhlt	r3, [r4, #12]
 8012928:	bd10      	pop	{r4, pc}

0801292a <__swrite>:
 801292a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801292e:	461f      	mov	r7, r3
 8012930:	898b      	ldrh	r3, [r1, #12]
 8012932:	05db      	lsls	r3, r3, #23
 8012934:	4605      	mov	r5, r0
 8012936:	460c      	mov	r4, r1
 8012938:	4616      	mov	r6, r2
 801293a:	d505      	bpl.n	8012948 <__swrite+0x1e>
 801293c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012940:	2302      	movs	r3, #2
 8012942:	2200      	movs	r2, #0
 8012944:	f000 f882 	bl	8012a4c <_lseek_r>
 8012948:	89a3      	ldrh	r3, [r4, #12]
 801294a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801294e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012952:	81a3      	strh	r3, [r4, #12]
 8012954:	4632      	mov	r2, r6
 8012956:	463b      	mov	r3, r7
 8012958:	4628      	mov	r0, r5
 801295a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801295e:	f000 b823 	b.w	80129a8 <_write_r>

08012962 <__sseek>:
 8012962:	b510      	push	{r4, lr}
 8012964:	460c      	mov	r4, r1
 8012966:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801296a:	f000 f86f 	bl	8012a4c <_lseek_r>
 801296e:	1c43      	adds	r3, r0, #1
 8012970:	89a3      	ldrh	r3, [r4, #12]
 8012972:	bf15      	itete	ne
 8012974:	6560      	strne	r0, [r4, #84]	; 0x54
 8012976:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801297a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801297e:	81a3      	strheq	r3, [r4, #12]
 8012980:	bf18      	it	ne
 8012982:	81a3      	strhne	r3, [r4, #12]
 8012984:	bd10      	pop	{r4, pc}

08012986 <__sclose>:
 8012986:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801298a:	f000 b83d 	b.w	8012a08 <_close_r>

0801298e <__ascii_wctomb>:
 801298e:	b149      	cbz	r1, 80129a4 <__ascii_wctomb+0x16>
 8012990:	2aff      	cmp	r2, #255	; 0xff
 8012992:	bf85      	ittet	hi
 8012994:	238a      	movhi	r3, #138	; 0x8a
 8012996:	6003      	strhi	r3, [r0, #0]
 8012998:	700a      	strbls	r2, [r1, #0]
 801299a:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 801299e:	bf98      	it	ls
 80129a0:	2001      	movls	r0, #1
 80129a2:	4770      	bx	lr
 80129a4:	4608      	mov	r0, r1
 80129a6:	4770      	bx	lr

080129a8 <_write_r>:
 80129a8:	b538      	push	{r3, r4, r5, lr}
 80129aa:	4d07      	ldr	r5, [pc, #28]	; (80129c8 <_write_r+0x20>)
 80129ac:	4604      	mov	r4, r0
 80129ae:	4608      	mov	r0, r1
 80129b0:	4611      	mov	r1, r2
 80129b2:	2200      	movs	r2, #0
 80129b4:	602a      	str	r2, [r5, #0]
 80129b6:	461a      	mov	r2, r3
 80129b8:	f7f3 fbeb 	bl	8006192 <_write>
 80129bc:	1c43      	adds	r3, r0, #1
 80129be:	d102      	bne.n	80129c6 <_write_r+0x1e>
 80129c0:	682b      	ldr	r3, [r5, #0]
 80129c2:	b103      	cbz	r3, 80129c6 <_write_r+0x1e>
 80129c4:	6023      	str	r3, [r4, #0]
 80129c6:	bd38      	pop	{r3, r4, r5, pc}
 80129c8:	200036e4 	.word	0x200036e4

080129cc <__assert_func>:
 80129cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80129ce:	4614      	mov	r4, r2
 80129d0:	461a      	mov	r2, r3
 80129d2:	4b09      	ldr	r3, [pc, #36]	; (80129f8 <__assert_func+0x2c>)
 80129d4:	681b      	ldr	r3, [r3, #0]
 80129d6:	4605      	mov	r5, r0
 80129d8:	68d8      	ldr	r0, [r3, #12]
 80129da:	b14c      	cbz	r4, 80129f0 <__assert_func+0x24>
 80129dc:	4b07      	ldr	r3, [pc, #28]	; (80129fc <__assert_func+0x30>)
 80129de:	9100      	str	r1, [sp, #0]
 80129e0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80129e4:	4906      	ldr	r1, [pc, #24]	; (8012a00 <__assert_func+0x34>)
 80129e6:	462b      	mov	r3, r5
 80129e8:	f000 f81e 	bl	8012a28 <fiprintf>
 80129ec:	f000 fab4 	bl	8012f58 <abort>
 80129f0:	4b04      	ldr	r3, [pc, #16]	; (8012a04 <__assert_func+0x38>)
 80129f2:	461c      	mov	r4, r3
 80129f4:	e7f3      	b.n	80129de <__assert_func+0x12>
 80129f6:	bf00      	nop
 80129f8:	2000024c 	.word	0x2000024c
 80129fc:	08014f3d 	.word	0x08014f3d
 8012a00:	08014f4a 	.word	0x08014f4a
 8012a04:	08014f78 	.word	0x08014f78

08012a08 <_close_r>:
 8012a08:	b538      	push	{r3, r4, r5, lr}
 8012a0a:	4d06      	ldr	r5, [pc, #24]	; (8012a24 <_close_r+0x1c>)
 8012a0c:	2300      	movs	r3, #0
 8012a0e:	4604      	mov	r4, r0
 8012a10:	4608      	mov	r0, r1
 8012a12:	602b      	str	r3, [r5, #0]
 8012a14:	f7f3 fbd9 	bl	80061ca <_close>
 8012a18:	1c43      	adds	r3, r0, #1
 8012a1a:	d102      	bne.n	8012a22 <_close_r+0x1a>
 8012a1c:	682b      	ldr	r3, [r5, #0]
 8012a1e:	b103      	cbz	r3, 8012a22 <_close_r+0x1a>
 8012a20:	6023      	str	r3, [r4, #0]
 8012a22:	bd38      	pop	{r3, r4, r5, pc}
 8012a24:	200036e4 	.word	0x200036e4

08012a28 <fiprintf>:
 8012a28:	b40e      	push	{r1, r2, r3}
 8012a2a:	b503      	push	{r0, r1, lr}
 8012a2c:	4601      	mov	r1, r0
 8012a2e:	ab03      	add	r3, sp, #12
 8012a30:	4805      	ldr	r0, [pc, #20]	; (8012a48 <fiprintf+0x20>)
 8012a32:	f853 2b04 	ldr.w	r2, [r3], #4
 8012a36:	6800      	ldr	r0, [r0, #0]
 8012a38:	9301      	str	r3, [sp, #4]
 8012a3a:	f000 f88b 	bl	8012b54 <_vfiprintf_r>
 8012a3e:	b002      	add	sp, #8
 8012a40:	f85d eb04 	ldr.w	lr, [sp], #4
 8012a44:	b003      	add	sp, #12
 8012a46:	4770      	bx	lr
 8012a48:	2000024c 	.word	0x2000024c

08012a4c <_lseek_r>:
 8012a4c:	b538      	push	{r3, r4, r5, lr}
 8012a4e:	4d07      	ldr	r5, [pc, #28]	; (8012a6c <_lseek_r+0x20>)
 8012a50:	4604      	mov	r4, r0
 8012a52:	4608      	mov	r0, r1
 8012a54:	4611      	mov	r1, r2
 8012a56:	2200      	movs	r2, #0
 8012a58:	602a      	str	r2, [r5, #0]
 8012a5a:	461a      	mov	r2, r3
 8012a5c:	f7f3 fbdc 	bl	8006218 <_lseek>
 8012a60:	1c43      	adds	r3, r0, #1
 8012a62:	d102      	bne.n	8012a6a <_lseek_r+0x1e>
 8012a64:	682b      	ldr	r3, [r5, #0]
 8012a66:	b103      	cbz	r3, 8012a6a <_lseek_r+0x1e>
 8012a68:	6023      	str	r3, [r4, #0]
 8012a6a:	bd38      	pop	{r3, r4, r5, pc}
 8012a6c:	200036e4 	.word	0x200036e4

08012a70 <memmove>:
 8012a70:	4288      	cmp	r0, r1
 8012a72:	b510      	push	{r4, lr}
 8012a74:	eb01 0402 	add.w	r4, r1, r2
 8012a78:	d902      	bls.n	8012a80 <memmove+0x10>
 8012a7a:	4284      	cmp	r4, r0
 8012a7c:	4623      	mov	r3, r4
 8012a7e:	d807      	bhi.n	8012a90 <memmove+0x20>
 8012a80:	1e43      	subs	r3, r0, #1
 8012a82:	42a1      	cmp	r1, r4
 8012a84:	d008      	beq.n	8012a98 <memmove+0x28>
 8012a86:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012a8a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012a8e:	e7f8      	b.n	8012a82 <memmove+0x12>
 8012a90:	4402      	add	r2, r0
 8012a92:	4601      	mov	r1, r0
 8012a94:	428a      	cmp	r2, r1
 8012a96:	d100      	bne.n	8012a9a <memmove+0x2a>
 8012a98:	bd10      	pop	{r4, pc}
 8012a9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012a9e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012aa2:	e7f7      	b.n	8012a94 <memmove+0x24>

08012aa4 <_realloc_r>:
 8012aa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012aa8:	4680      	mov	r8, r0
 8012aaa:	4614      	mov	r4, r2
 8012aac:	460e      	mov	r6, r1
 8012aae:	b921      	cbnz	r1, 8012aba <_realloc_r+0x16>
 8012ab0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012ab4:	4611      	mov	r1, r2
 8012ab6:	f7fc bab9 	b.w	800f02c <_malloc_r>
 8012aba:	b92a      	cbnz	r2, 8012ac8 <_realloc_r+0x24>
 8012abc:	f7fc fa4a 	bl	800ef54 <_free_r>
 8012ac0:	4625      	mov	r5, r4
 8012ac2:	4628      	mov	r0, r5
 8012ac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ac8:	f000 fc6a 	bl	80133a0 <_malloc_usable_size_r>
 8012acc:	4284      	cmp	r4, r0
 8012ace:	4607      	mov	r7, r0
 8012ad0:	d802      	bhi.n	8012ad8 <_realloc_r+0x34>
 8012ad2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8012ad6:	d812      	bhi.n	8012afe <_realloc_r+0x5a>
 8012ad8:	4621      	mov	r1, r4
 8012ada:	4640      	mov	r0, r8
 8012adc:	f7fc faa6 	bl	800f02c <_malloc_r>
 8012ae0:	4605      	mov	r5, r0
 8012ae2:	2800      	cmp	r0, #0
 8012ae4:	d0ed      	beq.n	8012ac2 <_realloc_r+0x1e>
 8012ae6:	42bc      	cmp	r4, r7
 8012ae8:	4622      	mov	r2, r4
 8012aea:	4631      	mov	r1, r6
 8012aec:	bf28      	it	cs
 8012aee:	463a      	movcs	r2, r7
 8012af0:	f7fc fa04 	bl	800eefc <memcpy>
 8012af4:	4631      	mov	r1, r6
 8012af6:	4640      	mov	r0, r8
 8012af8:	f7fc fa2c 	bl	800ef54 <_free_r>
 8012afc:	e7e1      	b.n	8012ac2 <_realloc_r+0x1e>
 8012afe:	4635      	mov	r5, r6
 8012b00:	e7df      	b.n	8012ac2 <_realloc_r+0x1e>

08012b02 <__sfputc_r>:
 8012b02:	6893      	ldr	r3, [r2, #8]
 8012b04:	3b01      	subs	r3, #1
 8012b06:	2b00      	cmp	r3, #0
 8012b08:	b410      	push	{r4}
 8012b0a:	6093      	str	r3, [r2, #8]
 8012b0c:	da08      	bge.n	8012b20 <__sfputc_r+0x1e>
 8012b0e:	6994      	ldr	r4, [r2, #24]
 8012b10:	42a3      	cmp	r3, r4
 8012b12:	db01      	blt.n	8012b18 <__sfputc_r+0x16>
 8012b14:	290a      	cmp	r1, #10
 8012b16:	d103      	bne.n	8012b20 <__sfputc_r+0x1e>
 8012b18:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012b1c:	f000 b95c 	b.w	8012dd8 <__swbuf_r>
 8012b20:	6813      	ldr	r3, [r2, #0]
 8012b22:	1c58      	adds	r0, r3, #1
 8012b24:	6010      	str	r0, [r2, #0]
 8012b26:	7019      	strb	r1, [r3, #0]
 8012b28:	4608      	mov	r0, r1
 8012b2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012b2e:	4770      	bx	lr

08012b30 <__sfputs_r>:
 8012b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b32:	4606      	mov	r6, r0
 8012b34:	460f      	mov	r7, r1
 8012b36:	4614      	mov	r4, r2
 8012b38:	18d5      	adds	r5, r2, r3
 8012b3a:	42ac      	cmp	r4, r5
 8012b3c:	d101      	bne.n	8012b42 <__sfputs_r+0x12>
 8012b3e:	2000      	movs	r0, #0
 8012b40:	e007      	b.n	8012b52 <__sfputs_r+0x22>
 8012b42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012b46:	463a      	mov	r2, r7
 8012b48:	4630      	mov	r0, r6
 8012b4a:	f7ff ffda 	bl	8012b02 <__sfputc_r>
 8012b4e:	1c43      	adds	r3, r0, #1
 8012b50:	d1f3      	bne.n	8012b3a <__sfputs_r+0xa>
 8012b52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012b54 <_vfiprintf_r>:
 8012b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b58:	460d      	mov	r5, r1
 8012b5a:	b09d      	sub	sp, #116	; 0x74
 8012b5c:	4614      	mov	r4, r2
 8012b5e:	4698      	mov	r8, r3
 8012b60:	4606      	mov	r6, r0
 8012b62:	b118      	cbz	r0, 8012b6c <_vfiprintf_r+0x18>
 8012b64:	6983      	ldr	r3, [r0, #24]
 8012b66:	b90b      	cbnz	r3, 8012b6c <_vfiprintf_r+0x18>
 8012b68:	f000 fb18 	bl	801319c <__sinit>
 8012b6c:	4b89      	ldr	r3, [pc, #548]	; (8012d94 <_vfiprintf_r+0x240>)
 8012b6e:	429d      	cmp	r5, r3
 8012b70:	d11b      	bne.n	8012baa <_vfiprintf_r+0x56>
 8012b72:	6875      	ldr	r5, [r6, #4]
 8012b74:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012b76:	07d9      	lsls	r1, r3, #31
 8012b78:	d405      	bmi.n	8012b86 <_vfiprintf_r+0x32>
 8012b7a:	89ab      	ldrh	r3, [r5, #12]
 8012b7c:	059a      	lsls	r2, r3, #22
 8012b7e:	d402      	bmi.n	8012b86 <_vfiprintf_r+0x32>
 8012b80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012b82:	f7ff f87c 	bl	8011c7e <__retarget_lock_acquire_recursive>
 8012b86:	89ab      	ldrh	r3, [r5, #12]
 8012b88:	071b      	lsls	r3, r3, #28
 8012b8a:	d501      	bpl.n	8012b90 <_vfiprintf_r+0x3c>
 8012b8c:	692b      	ldr	r3, [r5, #16]
 8012b8e:	b9eb      	cbnz	r3, 8012bcc <_vfiprintf_r+0x78>
 8012b90:	4629      	mov	r1, r5
 8012b92:	4630      	mov	r0, r6
 8012b94:	f000 f972 	bl	8012e7c <__swsetup_r>
 8012b98:	b1c0      	cbz	r0, 8012bcc <_vfiprintf_r+0x78>
 8012b9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012b9c:	07dc      	lsls	r4, r3, #31
 8012b9e:	d50e      	bpl.n	8012bbe <_vfiprintf_r+0x6a>
 8012ba0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012ba4:	b01d      	add	sp, #116	; 0x74
 8012ba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012baa:	4b7b      	ldr	r3, [pc, #492]	; (8012d98 <_vfiprintf_r+0x244>)
 8012bac:	429d      	cmp	r5, r3
 8012bae:	d101      	bne.n	8012bb4 <_vfiprintf_r+0x60>
 8012bb0:	68b5      	ldr	r5, [r6, #8]
 8012bb2:	e7df      	b.n	8012b74 <_vfiprintf_r+0x20>
 8012bb4:	4b79      	ldr	r3, [pc, #484]	; (8012d9c <_vfiprintf_r+0x248>)
 8012bb6:	429d      	cmp	r5, r3
 8012bb8:	bf08      	it	eq
 8012bba:	68f5      	ldreq	r5, [r6, #12]
 8012bbc:	e7da      	b.n	8012b74 <_vfiprintf_r+0x20>
 8012bbe:	89ab      	ldrh	r3, [r5, #12]
 8012bc0:	0598      	lsls	r0, r3, #22
 8012bc2:	d4ed      	bmi.n	8012ba0 <_vfiprintf_r+0x4c>
 8012bc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012bc6:	f7ff f85b 	bl	8011c80 <__retarget_lock_release_recursive>
 8012bca:	e7e9      	b.n	8012ba0 <_vfiprintf_r+0x4c>
 8012bcc:	2300      	movs	r3, #0
 8012bce:	9309      	str	r3, [sp, #36]	; 0x24
 8012bd0:	2320      	movs	r3, #32
 8012bd2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012bd6:	f8cd 800c 	str.w	r8, [sp, #12]
 8012bda:	2330      	movs	r3, #48	; 0x30
 8012bdc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012da0 <_vfiprintf_r+0x24c>
 8012be0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012be4:	f04f 0901 	mov.w	r9, #1
 8012be8:	4623      	mov	r3, r4
 8012bea:	469a      	mov	sl, r3
 8012bec:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012bf0:	b10a      	cbz	r2, 8012bf6 <_vfiprintf_r+0xa2>
 8012bf2:	2a25      	cmp	r2, #37	; 0x25
 8012bf4:	d1f9      	bne.n	8012bea <_vfiprintf_r+0x96>
 8012bf6:	ebba 0b04 	subs.w	fp, sl, r4
 8012bfa:	d00b      	beq.n	8012c14 <_vfiprintf_r+0xc0>
 8012bfc:	465b      	mov	r3, fp
 8012bfe:	4622      	mov	r2, r4
 8012c00:	4629      	mov	r1, r5
 8012c02:	4630      	mov	r0, r6
 8012c04:	f7ff ff94 	bl	8012b30 <__sfputs_r>
 8012c08:	3001      	adds	r0, #1
 8012c0a:	f000 80aa 	beq.w	8012d62 <_vfiprintf_r+0x20e>
 8012c0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012c10:	445a      	add	r2, fp
 8012c12:	9209      	str	r2, [sp, #36]	; 0x24
 8012c14:	f89a 3000 	ldrb.w	r3, [sl]
 8012c18:	2b00      	cmp	r3, #0
 8012c1a:	f000 80a2 	beq.w	8012d62 <_vfiprintf_r+0x20e>
 8012c1e:	2300      	movs	r3, #0
 8012c20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012c24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012c28:	f10a 0a01 	add.w	sl, sl, #1
 8012c2c:	9304      	str	r3, [sp, #16]
 8012c2e:	9307      	str	r3, [sp, #28]
 8012c30:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012c34:	931a      	str	r3, [sp, #104]	; 0x68
 8012c36:	4654      	mov	r4, sl
 8012c38:	2205      	movs	r2, #5
 8012c3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012c3e:	4858      	ldr	r0, [pc, #352]	; (8012da0 <_vfiprintf_r+0x24c>)
 8012c40:	f7ed face 	bl	80001e0 <memchr>
 8012c44:	9a04      	ldr	r2, [sp, #16]
 8012c46:	b9d8      	cbnz	r0, 8012c80 <_vfiprintf_r+0x12c>
 8012c48:	06d1      	lsls	r1, r2, #27
 8012c4a:	bf44      	itt	mi
 8012c4c:	2320      	movmi	r3, #32
 8012c4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012c52:	0713      	lsls	r3, r2, #28
 8012c54:	bf44      	itt	mi
 8012c56:	232b      	movmi	r3, #43	; 0x2b
 8012c58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012c5c:	f89a 3000 	ldrb.w	r3, [sl]
 8012c60:	2b2a      	cmp	r3, #42	; 0x2a
 8012c62:	d015      	beq.n	8012c90 <_vfiprintf_r+0x13c>
 8012c64:	9a07      	ldr	r2, [sp, #28]
 8012c66:	4654      	mov	r4, sl
 8012c68:	2000      	movs	r0, #0
 8012c6a:	f04f 0c0a 	mov.w	ip, #10
 8012c6e:	4621      	mov	r1, r4
 8012c70:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012c74:	3b30      	subs	r3, #48	; 0x30
 8012c76:	2b09      	cmp	r3, #9
 8012c78:	d94e      	bls.n	8012d18 <_vfiprintf_r+0x1c4>
 8012c7a:	b1b0      	cbz	r0, 8012caa <_vfiprintf_r+0x156>
 8012c7c:	9207      	str	r2, [sp, #28]
 8012c7e:	e014      	b.n	8012caa <_vfiprintf_r+0x156>
 8012c80:	eba0 0308 	sub.w	r3, r0, r8
 8012c84:	fa09 f303 	lsl.w	r3, r9, r3
 8012c88:	4313      	orrs	r3, r2
 8012c8a:	9304      	str	r3, [sp, #16]
 8012c8c:	46a2      	mov	sl, r4
 8012c8e:	e7d2      	b.n	8012c36 <_vfiprintf_r+0xe2>
 8012c90:	9b03      	ldr	r3, [sp, #12]
 8012c92:	1d19      	adds	r1, r3, #4
 8012c94:	681b      	ldr	r3, [r3, #0]
 8012c96:	9103      	str	r1, [sp, #12]
 8012c98:	2b00      	cmp	r3, #0
 8012c9a:	bfbb      	ittet	lt
 8012c9c:	425b      	neglt	r3, r3
 8012c9e:	f042 0202 	orrlt.w	r2, r2, #2
 8012ca2:	9307      	strge	r3, [sp, #28]
 8012ca4:	9307      	strlt	r3, [sp, #28]
 8012ca6:	bfb8      	it	lt
 8012ca8:	9204      	strlt	r2, [sp, #16]
 8012caa:	7823      	ldrb	r3, [r4, #0]
 8012cac:	2b2e      	cmp	r3, #46	; 0x2e
 8012cae:	d10c      	bne.n	8012cca <_vfiprintf_r+0x176>
 8012cb0:	7863      	ldrb	r3, [r4, #1]
 8012cb2:	2b2a      	cmp	r3, #42	; 0x2a
 8012cb4:	d135      	bne.n	8012d22 <_vfiprintf_r+0x1ce>
 8012cb6:	9b03      	ldr	r3, [sp, #12]
 8012cb8:	1d1a      	adds	r2, r3, #4
 8012cba:	681b      	ldr	r3, [r3, #0]
 8012cbc:	9203      	str	r2, [sp, #12]
 8012cbe:	2b00      	cmp	r3, #0
 8012cc0:	bfb8      	it	lt
 8012cc2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8012cc6:	3402      	adds	r4, #2
 8012cc8:	9305      	str	r3, [sp, #20]
 8012cca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012db0 <_vfiprintf_r+0x25c>
 8012cce:	7821      	ldrb	r1, [r4, #0]
 8012cd0:	2203      	movs	r2, #3
 8012cd2:	4650      	mov	r0, sl
 8012cd4:	f7ed fa84 	bl	80001e0 <memchr>
 8012cd8:	b140      	cbz	r0, 8012cec <_vfiprintf_r+0x198>
 8012cda:	2340      	movs	r3, #64	; 0x40
 8012cdc:	eba0 000a 	sub.w	r0, r0, sl
 8012ce0:	fa03 f000 	lsl.w	r0, r3, r0
 8012ce4:	9b04      	ldr	r3, [sp, #16]
 8012ce6:	4303      	orrs	r3, r0
 8012ce8:	3401      	adds	r4, #1
 8012cea:	9304      	str	r3, [sp, #16]
 8012cec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012cf0:	482c      	ldr	r0, [pc, #176]	; (8012da4 <_vfiprintf_r+0x250>)
 8012cf2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012cf6:	2206      	movs	r2, #6
 8012cf8:	f7ed fa72 	bl	80001e0 <memchr>
 8012cfc:	2800      	cmp	r0, #0
 8012cfe:	d03f      	beq.n	8012d80 <_vfiprintf_r+0x22c>
 8012d00:	4b29      	ldr	r3, [pc, #164]	; (8012da8 <_vfiprintf_r+0x254>)
 8012d02:	bb1b      	cbnz	r3, 8012d4c <_vfiprintf_r+0x1f8>
 8012d04:	9b03      	ldr	r3, [sp, #12]
 8012d06:	3307      	adds	r3, #7
 8012d08:	f023 0307 	bic.w	r3, r3, #7
 8012d0c:	3308      	adds	r3, #8
 8012d0e:	9303      	str	r3, [sp, #12]
 8012d10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012d12:	443b      	add	r3, r7
 8012d14:	9309      	str	r3, [sp, #36]	; 0x24
 8012d16:	e767      	b.n	8012be8 <_vfiprintf_r+0x94>
 8012d18:	fb0c 3202 	mla	r2, ip, r2, r3
 8012d1c:	460c      	mov	r4, r1
 8012d1e:	2001      	movs	r0, #1
 8012d20:	e7a5      	b.n	8012c6e <_vfiprintf_r+0x11a>
 8012d22:	2300      	movs	r3, #0
 8012d24:	3401      	adds	r4, #1
 8012d26:	9305      	str	r3, [sp, #20]
 8012d28:	4619      	mov	r1, r3
 8012d2a:	f04f 0c0a 	mov.w	ip, #10
 8012d2e:	4620      	mov	r0, r4
 8012d30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012d34:	3a30      	subs	r2, #48	; 0x30
 8012d36:	2a09      	cmp	r2, #9
 8012d38:	d903      	bls.n	8012d42 <_vfiprintf_r+0x1ee>
 8012d3a:	2b00      	cmp	r3, #0
 8012d3c:	d0c5      	beq.n	8012cca <_vfiprintf_r+0x176>
 8012d3e:	9105      	str	r1, [sp, #20]
 8012d40:	e7c3      	b.n	8012cca <_vfiprintf_r+0x176>
 8012d42:	fb0c 2101 	mla	r1, ip, r1, r2
 8012d46:	4604      	mov	r4, r0
 8012d48:	2301      	movs	r3, #1
 8012d4a:	e7f0      	b.n	8012d2e <_vfiprintf_r+0x1da>
 8012d4c:	ab03      	add	r3, sp, #12
 8012d4e:	9300      	str	r3, [sp, #0]
 8012d50:	462a      	mov	r2, r5
 8012d52:	4b16      	ldr	r3, [pc, #88]	; (8012dac <_vfiprintf_r+0x258>)
 8012d54:	a904      	add	r1, sp, #16
 8012d56:	4630      	mov	r0, r6
 8012d58:	f7fc fa7c 	bl	800f254 <_printf_float>
 8012d5c:	4607      	mov	r7, r0
 8012d5e:	1c78      	adds	r0, r7, #1
 8012d60:	d1d6      	bne.n	8012d10 <_vfiprintf_r+0x1bc>
 8012d62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012d64:	07d9      	lsls	r1, r3, #31
 8012d66:	d405      	bmi.n	8012d74 <_vfiprintf_r+0x220>
 8012d68:	89ab      	ldrh	r3, [r5, #12]
 8012d6a:	059a      	lsls	r2, r3, #22
 8012d6c:	d402      	bmi.n	8012d74 <_vfiprintf_r+0x220>
 8012d6e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012d70:	f7fe ff86 	bl	8011c80 <__retarget_lock_release_recursive>
 8012d74:	89ab      	ldrh	r3, [r5, #12]
 8012d76:	065b      	lsls	r3, r3, #25
 8012d78:	f53f af12 	bmi.w	8012ba0 <_vfiprintf_r+0x4c>
 8012d7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012d7e:	e711      	b.n	8012ba4 <_vfiprintf_r+0x50>
 8012d80:	ab03      	add	r3, sp, #12
 8012d82:	9300      	str	r3, [sp, #0]
 8012d84:	462a      	mov	r2, r5
 8012d86:	4b09      	ldr	r3, [pc, #36]	; (8012dac <_vfiprintf_r+0x258>)
 8012d88:	a904      	add	r1, sp, #16
 8012d8a:	4630      	mov	r0, r6
 8012d8c:	f7fc fd06 	bl	800f79c <_printf_i>
 8012d90:	e7e4      	b.n	8012d5c <_vfiprintf_r+0x208>
 8012d92:	bf00      	nop
 8012d94:	08014f9c 	.word	0x08014f9c
 8012d98:	08014fbc 	.word	0x08014fbc
 8012d9c:	08014f7c 	.word	0x08014f7c
 8012da0:	08014f2c 	.word	0x08014f2c
 8012da4:	08014f36 	.word	0x08014f36
 8012da8:	0800f255 	.word	0x0800f255
 8012dac:	08012b31 	.word	0x08012b31
 8012db0:	08014f32 	.word	0x08014f32

08012db4 <_read_r>:
 8012db4:	b538      	push	{r3, r4, r5, lr}
 8012db6:	4d07      	ldr	r5, [pc, #28]	; (8012dd4 <_read_r+0x20>)
 8012db8:	4604      	mov	r4, r0
 8012dba:	4608      	mov	r0, r1
 8012dbc:	4611      	mov	r1, r2
 8012dbe:	2200      	movs	r2, #0
 8012dc0:	602a      	str	r2, [r5, #0]
 8012dc2:	461a      	mov	r2, r3
 8012dc4:	f7f3 f9c8 	bl	8006158 <_read>
 8012dc8:	1c43      	adds	r3, r0, #1
 8012dca:	d102      	bne.n	8012dd2 <_read_r+0x1e>
 8012dcc:	682b      	ldr	r3, [r5, #0]
 8012dce:	b103      	cbz	r3, 8012dd2 <_read_r+0x1e>
 8012dd0:	6023      	str	r3, [r4, #0]
 8012dd2:	bd38      	pop	{r3, r4, r5, pc}
 8012dd4:	200036e4 	.word	0x200036e4

08012dd8 <__swbuf_r>:
 8012dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012dda:	460e      	mov	r6, r1
 8012ddc:	4614      	mov	r4, r2
 8012dde:	4605      	mov	r5, r0
 8012de0:	b118      	cbz	r0, 8012dea <__swbuf_r+0x12>
 8012de2:	6983      	ldr	r3, [r0, #24]
 8012de4:	b90b      	cbnz	r3, 8012dea <__swbuf_r+0x12>
 8012de6:	f000 f9d9 	bl	801319c <__sinit>
 8012dea:	4b21      	ldr	r3, [pc, #132]	; (8012e70 <__swbuf_r+0x98>)
 8012dec:	429c      	cmp	r4, r3
 8012dee:	d12b      	bne.n	8012e48 <__swbuf_r+0x70>
 8012df0:	686c      	ldr	r4, [r5, #4]
 8012df2:	69a3      	ldr	r3, [r4, #24]
 8012df4:	60a3      	str	r3, [r4, #8]
 8012df6:	89a3      	ldrh	r3, [r4, #12]
 8012df8:	071a      	lsls	r2, r3, #28
 8012dfa:	d52f      	bpl.n	8012e5c <__swbuf_r+0x84>
 8012dfc:	6923      	ldr	r3, [r4, #16]
 8012dfe:	b36b      	cbz	r3, 8012e5c <__swbuf_r+0x84>
 8012e00:	6923      	ldr	r3, [r4, #16]
 8012e02:	6820      	ldr	r0, [r4, #0]
 8012e04:	1ac0      	subs	r0, r0, r3
 8012e06:	6963      	ldr	r3, [r4, #20]
 8012e08:	b2f6      	uxtb	r6, r6
 8012e0a:	4283      	cmp	r3, r0
 8012e0c:	4637      	mov	r7, r6
 8012e0e:	dc04      	bgt.n	8012e1a <__swbuf_r+0x42>
 8012e10:	4621      	mov	r1, r4
 8012e12:	4628      	mov	r0, r5
 8012e14:	f000 f92e 	bl	8013074 <_fflush_r>
 8012e18:	bb30      	cbnz	r0, 8012e68 <__swbuf_r+0x90>
 8012e1a:	68a3      	ldr	r3, [r4, #8]
 8012e1c:	3b01      	subs	r3, #1
 8012e1e:	60a3      	str	r3, [r4, #8]
 8012e20:	6823      	ldr	r3, [r4, #0]
 8012e22:	1c5a      	adds	r2, r3, #1
 8012e24:	6022      	str	r2, [r4, #0]
 8012e26:	701e      	strb	r6, [r3, #0]
 8012e28:	6963      	ldr	r3, [r4, #20]
 8012e2a:	3001      	adds	r0, #1
 8012e2c:	4283      	cmp	r3, r0
 8012e2e:	d004      	beq.n	8012e3a <__swbuf_r+0x62>
 8012e30:	89a3      	ldrh	r3, [r4, #12]
 8012e32:	07db      	lsls	r3, r3, #31
 8012e34:	d506      	bpl.n	8012e44 <__swbuf_r+0x6c>
 8012e36:	2e0a      	cmp	r6, #10
 8012e38:	d104      	bne.n	8012e44 <__swbuf_r+0x6c>
 8012e3a:	4621      	mov	r1, r4
 8012e3c:	4628      	mov	r0, r5
 8012e3e:	f000 f919 	bl	8013074 <_fflush_r>
 8012e42:	b988      	cbnz	r0, 8012e68 <__swbuf_r+0x90>
 8012e44:	4638      	mov	r0, r7
 8012e46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012e48:	4b0a      	ldr	r3, [pc, #40]	; (8012e74 <__swbuf_r+0x9c>)
 8012e4a:	429c      	cmp	r4, r3
 8012e4c:	d101      	bne.n	8012e52 <__swbuf_r+0x7a>
 8012e4e:	68ac      	ldr	r4, [r5, #8]
 8012e50:	e7cf      	b.n	8012df2 <__swbuf_r+0x1a>
 8012e52:	4b09      	ldr	r3, [pc, #36]	; (8012e78 <__swbuf_r+0xa0>)
 8012e54:	429c      	cmp	r4, r3
 8012e56:	bf08      	it	eq
 8012e58:	68ec      	ldreq	r4, [r5, #12]
 8012e5a:	e7ca      	b.n	8012df2 <__swbuf_r+0x1a>
 8012e5c:	4621      	mov	r1, r4
 8012e5e:	4628      	mov	r0, r5
 8012e60:	f000 f80c 	bl	8012e7c <__swsetup_r>
 8012e64:	2800      	cmp	r0, #0
 8012e66:	d0cb      	beq.n	8012e00 <__swbuf_r+0x28>
 8012e68:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8012e6c:	e7ea      	b.n	8012e44 <__swbuf_r+0x6c>
 8012e6e:	bf00      	nop
 8012e70:	08014f9c 	.word	0x08014f9c
 8012e74:	08014fbc 	.word	0x08014fbc
 8012e78:	08014f7c 	.word	0x08014f7c

08012e7c <__swsetup_r>:
 8012e7c:	4b32      	ldr	r3, [pc, #200]	; (8012f48 <__swsetup_r+0xcc>)
 8012e7e:	b570      	push	{r4, r5, r6, lr}
 8012e80:	681d      	ldr	r5, [r3, #0]
 8012e82:	4606      	mov	r6, r0
 8012e84:	460c      	mov	r4, r1
 8012e86:	b125      	cbz	r5, 8012e92 <__swsetup_r+0x16>
 8012e88:	69ab      	ldr	r3, [r5, #24]
 8012e8a:	b913      	cbnz	r3, 8012e92 <__swsetup_r+0x16>
 8012e8c:	4628      	mov	r0, r5
 8012e8e:	f000 f985 	bl	801319c <__sinit>
 8012e92:	4b2e      	ldr	r3, [pc, #184]	; (8012f4c <__swsetup_r+0xd0>)
 8012e94:	429c      	cmp	r4, r3
 8012e96:	d10f      	bne.n	8012eb8 <__swsetup_r+0x3c>
 8012e98:	686c      	ldr	r4, [r5, #4]
 8012e9a:	89a3      	ldrh	r3, [r4, #12]
 8012e9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012ea0:	0719      	lsls	r1, r3, #28
 8012ea2:	d42c      	bmi.n	8012efe <__swsetup_r+0x82>
 8012ea4:	06dd      	lsls	r5, r3, #27
 8012ea6:	d411      	bmi.n	8012ecc <__swsetup_r+0x50>
 8012ea8:	2309      	movs	r3, #9
 8012eaa:	6033      	str	r3, [r6, #0]
 8012eac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012eb0:	81a3      	strh	r3, [r4, #12]
 8012eb2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012eb6:	e03e      	b.n	8012f36 <__swsetup_r+0xba>
 8012eb8:	4b25      	ldr	r3, [pc, #148]	; (8012f50 <__swsetup_r+0xd4>)
 8012eba:	429c      	cmp	r4, r3
 8012ebc:	d101      	bne.n	8012ec2 <__swsetup_r+0x46>
 8012ebe:	68ac      	ldr	r4, [r5, #8]
 8012ec0:	e7eb      	b.n	8012e9a <__swsetup_r+0x1e>
 8012ec2:	4b24      	ldr	r3, [pc, #144]	; (8012f54 <__swsetup_r+0xd8>)
 8012ec4:	429c      	cmp	r4, r3
 8012ec6:	bf08      	it	eq
 8012ec8:	68ec      	ldreq	r4, [r5, #12]
 8012eca:	e7e6      	b.n	8012e9a <__swsetup_r+0x1e>
 8012ecc:	0758      	lsls	r0, r3, #29
 8012ece:	d512      	bpl.n	8012ef6 <__swsetup_r+0x7a>
 8012ed0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012ed2:	b141      	cbz	r1, 8012ee6 <__swsetup_r+0x6a>
 8012ed4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012ed8:	4299      	cmp	r1, r3
 8012eda:	d002      	beq.n	8012ee2 <__swsetup_r+0x66>
 8012edc:	4630      	mov	r0, r6
 8012ede:	f7fc f839 	bl	800ef54 <_free_r>
 8012ee2:	2300      	movs	r3, #0
 8012ee4:	6363      	str	r3, [r4, #52]	; 0x34
 8012ee6:	89a3      	ldrh	r3, [r4, #12]
 8012ee8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012eec:	81a3      	strh	r3, [r4, #12]
 8012eee:	2300      	movs	r3, #0
 8012ef0:	6063      	str	r3, [r4, #4]
 8012ef2:	6923      	ldr	r3, [r4, #16]
 8012ef4:	6023      	str	r3, [r4, #0]
 8012ef6:	89a3      	ldrh	r3, [r4, #12]
 8012ef8:	f043 0308 	orr.w	r3, r3, #8
 8012efc:	81a3      	strh	r3, [r4, #12]
 8012efe:	6923      	ldr	r3, [r4, #16]
 8012f00:	b94b      	cbnz	r3, 8012f16 <__swsetup_r+0x9a>
 8012f02:	89a3      	ldrh	r3, [r4, #12]
 8012f04:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012f08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012f0c:	d003      	beq.n	8012f16 <__swsetup_r+0x9a>
 8012f0e:	4621      	mov	r1, r4
 8012f10:	4630      	mov	r0, r6
 8012f12:	f000 fa05 	bl	8013320 <__smakebuf_r>
 8012f16:	89a0      	ldrh	r0, [r4, #12]
 8012f18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012f1c:	f010 0301 	ands.w	r3, r0, #1
 8012f20:	d00a      	beq.n	8012f38 <__swsetup_r+0xbc>
 8012f22:	2300      	movs	r3, #0
 8012f24:	60a3      	str	r3, [r4, #8]
 8012f26:	6963      	ldr	r3, [r4, #20]
 8012f28:	425b      	negs	r3, r3
 8012f2a:	61a3      	str	r3, [r4, #24]
 8012f2c:	6923      	ldr	r3, [r4, #16]
 8012f2e:	b943      	cbnz	r3, 8012f42 <__swsetup_r+0xc6>
 8012f30:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012f34:	d1ba      	bne.n	8012eac <__swsetup_r+0x30>
 8012f36:	bd70      	pop	{r4, r5, r6, pc}
 8012f38:	0781      	lsls	r1, r0, #30
 8012f3a:	bf58      	it	pl
 8012f3c:	6963      	ldrpl	r3, [r4, #20]
 8012f3e:	60a3      	str	r3, [r4, #8]
 8012f40:	e7f4      	b.n	8012f2c <__swsetup_r+0xb0>
 8012f42:	2000      	movs	r0, #0
 8012f44:	e7f7      	b.n	8012f36 <__swsetup_r+0xba>
 8012f46:	bf00      	nop
 8012f48:	2000024c 	.word	0x2000024c
 8012f4c:	08014f9c 	.word	0x08014f9c
 8012f50:	08014fbc 	.word	0x08014fbc
 8012f54:	08014f7c 	.word	0x08014f7c

08012f58 <abort>:
 8012f58:	b508      	push	{r3, lr}
 8012f5a:	2006      	movs	r0, #6
 8012f5c:	f000 fa50 	bl	8013400 <raise>
 8012f60:	2001      	movs	r0, #1
 8012f62:	f7f3 f8ef 	bl	8006144 <_exit>
	...

08012f68 <__sflush_r>:
 8012f68:	898a      	ldrh	r2, [r1, #12]
 8012f6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f6e:	4605      	mov	r5, r0
 8012f70:	0710      	lsls	r0, r2, #28
 8012f72:	460c      	mov	r4, r1
 8012f74:	d458      	bmi.n	8013028 <__sflush_r+0xc0>
 8012f76:	684b      	ldr	r3, [r1, #4]
 8012f78:	2b00      	cmp	r3, #0
 8012f7a:	dc05      	bgt.n	8012f88 <__sflush_r+0x20>
 8012f7c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012f7e:	2b00      	cmp	r3, #0
 8012f80:	dc02      	bgt.n	8012f88 <__sflush_r+0x20>
 8012f82:	2000      	movs	r0, #0
 8012f84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012f8a:	2e00      	cmp	r6, #0
 8012f8c:	d0f9      	beq.n	8012f82 <__sflush_r+0x1a>
 8012f8e:	2300      	movs	r3, #0
 8012f90:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012f94:	682f      	ldr	r7, [r5, #0]
 8012f96:	602b      	str	r3, [r5, #0]
 8012f98:	d032      	beq.n	8013000 <__sflush_r+0x98>
 8012f9a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012f9c:	89a3      	ldrh	r3, [r4, #12]
 8012f9e:	075a      	lsls	r2, r3, #29
 8012fa0:	d505      	bpl.n	8012fae <__sflush_r+0x46>
 8012fa2:	6863      	ldr	r3, [r4, #4]
 8012fa4:	1ac0      	subs	r0, r0, r3
 8012fa6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012fa8:	b10b      	cbz	r3, 8012fae <__sflush_r+0x46>
 8012faa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012fac:	1ac0      	subs	r0, r0, r3
 8012fae:	2300      	movs	r3, #0
 8012fb0:	4602      	mov	r2, r0
 8012fb2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012fb4:	6a21      	ldr	r1, [r4, #32]
 8012fb6:	4628      	mov	r0, r5
 8012fb8:	47b0      	blx	r6
 8012fba:	1c43      	adds	r3, r0, #1
 8012fbc:	89a3      	ldrh	r3, [r4, #12]
 8012fbe:	d106      	bne.n	8012fce <__sflush_r+0x66>
 8012fc0:	6829      	ldr	r1, [r5, #0]
 8012fc2:	291d      	cmp	r1, #29
 8012fc4:	d82c      	bhi.n	8013020 <__sflush_r+0xb8>
 8012fc6:	4a2a      	ldr	r2, [pc, #168]	; (8013070 <__sflush_r+0x108>)
 8012fc8:	40ca      	lsrs	r2, r1
 8012fca:	07d6      	lsls	r6, r2, #31
 8012fcc:	d528      	bpl.n	8013020 <__sflush_r+0xb8>
 8012fce:	2200      	movs	r2, #0
 8012fd0:	6062      	str	r2, [r4, #4]
 8012fd2:	04d9      	lsls	r1, r3, #19
 8012fd4:	6922      	ldr	r2, [r4, #16]
 8012fd6:	6022      	str	r2, [r4, #0]
 8012fd8:	d504      	bpl.n	8012fe4 <__sflush_r+0x7c>
 8012fda:	1c42      	adds	r2, r0, #1
 8012fdc:	d101      	bne.n	8012fe2 <__sflush_r+0x7a>
 8012fde:	682b      	ldr	r3, [r5, #0]
 8012fe0:	b903      	cbnz	r3, 8012fe4 <__sflush_r+0x7c>
 8012fe2:	6560      	str	r0, [r4, #84]	; 0x54
 8012fe4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012fe6:	602f      	str	r7, [r5, #0]
 8012fe8:	2900      	cmp	r1, #0
 8012fea:	d0ca      	beq.n	8012f82 <__sflush_r+0x1a>
 8012fec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012ff0:	4299      	cmp	r1, r3
 8012ff2:	d002      	beq.n	8012ffa <__sflush_r+0x92>
 8012ff4:	4628      	mov	r0, r5
 8012ff6:	f7fb ffad 	bl	800ef54 <_free_r>
 8012ffa:	2000      	movs	r0, #0
 8012ffc:	6360      	str	r0, [r4, #52]	; 0x34
 8012ffe:	e7c1      	b.n	8012f84 <__sflush_r+0x1c>
 8013000:	6a21      	ldr	r1, [r4, #32]
 8013002:	2301      	movs	r3, #1
 8013004:	4628      	mov	r0, r5
 8013006:	47b0      	blx	r6
 8013008:	1c41      	adds	r1, r0, #1
 801300a:	d1c7      	bne.n	8012f9c <__sflush_r+0x34>
 801300c:	682b      	ldr	r3, [r5, #0]
 801300e:	2b00      	cmp	r3, #0
 8013010:	d0c4      	beq.n	8012f9c <__sflush_r+0x34>
 8013012:	2b1d      	cmp	r3, #29
 8013014:	d001      	beq.n	801301a <__sflush_r+0xb2>
 8013016:	2b16      	cmp	r3, #22
 8013018:	d101      	bne.n	801301e <__sflush_r+0xb6>
 801301a:	602f      	str	r7, [r5, #0]
 801301c:	e7b1      	b.n	8012f82 <__sflush_r+0x1a>
 801301e:	89a3      	ldrh	r3, [r4, #12]
 8013020:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013024:	81a3      	strh	r3, [r4, #12]
 8013026:	e7ad      	b.n	8012f84 <__sflush_r+0x1c>
 8013028:	690f      	ldr	r7, [r1, #16]
 801302a:	2f00      	cmp	r7, #0
 801302c:	d0a9      	beq.n	8012f82 <__sflush_r+0x1a>
 801302e:	0793      	lsls	r3, r2, #30
 8013030:	680e      	ldr	r6, [r1, #0]
 8013032:	bf08      	it	eq
 8013034:	694b      	ldreq	r3, [r1, #20]
 8013036:	600f      	str	r7, [r1, #0]
 8013038:	bf18      	it	ne
 801303a:	2300      	movne	r3, #0
 801303c:	eba6 0807 	sub.w	r8, r6, r7
 8013040:	608b      	str	r3, [r1, #8]
 8013042:	f1b8 0f00 	cmp.w	r8, #0
 8013046:	dd9c      	ble.n	8012f82 <__sflush_r+0x1a>
 8013048:	6a21      	ldr	r1, [r4, #32]
 801304a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801304c:	4643      	mov	r3, r8
 801304e:	463a      	mov	r2, r7
 8013050:	4628      	mov	r0, r5
 8013052:	47b0      	blx	r6
 8013054:	2800      	cmp	r0, #0
 8013056:	dc06      	bgt.n	8013066 <__sflush_r+0xfe>
 8013058:	89a3      	ldrh	r3, [r4, #12]
 801305a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801305e:	81a3      	strh	r3, [r4, #12]
 8013060:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013064:	e78e      	b.n	8012f84 <__sflush_r+0x1c>
 8013066:	4407      	add	r7, r0
 8013068:	eba8 0800 	sub.w	r8, r8, r0
 801306c:	e7e9      	b.n	8013042 <__sflush_r+0xda>
 801306e:	bf00      	nop
 8013070:	20400001 	.word	0x20400001

08013074 <_fflush_r>:
 8013074:	b538      	push	{r3, r4, r5, lr}
 8013076:	690b      	ldr	r3, [r1, #16]
 8013078:	4605      	mov	r5, r0
 801307a:	460c      	mov	r4, r1
 801307c:	b913      	cbnz	r3, 8013084 <_fflush_r+0x10>
 801307e:	2500      	movs	r5, #0
 8013080:	4628      	mov	r0, r5
 8013082:	bd38      	pop	{r3, r4, r5, pc}
 8013084:	b118      	cbz	r0, 801308e <_fflush_r+0x1a>
 8013086:	6983      	ldr	r3, [r0, #24]
 8013088:	b90b      	cbnz	r3, 801308e <_fflush_r+0x1a>
 801308a:	f000 f887 	bl	801319c <__sinit>
 801308e:	4b14      	ldr	r3, [pc, #80]	; (80130e0 <_fflush_r+0x6c>)
 8013090:	429c      	cmp	r4, r3
 8013092:	d11b      	bne.n	80130cc <_fflush_r+0x58>
 8013094:	686c      	ldr	r4, [r5, #4]
 8013096:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801309a:	2b00      	cmp	r3, #0
 801309c:	d0ef      	beq.n	801307e <_fflush_r+0xa>
 801309e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80130a0:	07d0      	lsls	r0, r2, #31
 80130a2:	d404      	bmi.n	80130ae <_fflush_r+0x3a>
 80130a4:	0599      	lsls	r1, r3, #22
 80130a6:	d402      	bmi.n	80130ae <_fflush_r+0x3a>
 80130a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80130aa:	f7fe fde8 	bl	8011c7e <__retarget_lock_acquire_recursive>
 80130ae:	4628      	mov	r0, r5
 80130b0:	4621      	mov	r1, r4
 80130b2:	f7ff ff59 	bl	8012f68 <__sflush_r>
 80130b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80130b8:	07da      	lsls	r2, r3, #31
 80130ba:	4605      	mov	r5, r0
 80130bc:	d4e0      	bmi.n	8013080 <_fflush_r+0xc>
 80130be:	89a3      	ldrh	r3, [r4, #12]
 80130c0:	059b      	lsls	r3, r3, #22
 80130c2:	d4dd      	bmi.n	8013080 <_fflush_r+0xc>
 80130c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80130c6:	f7fe fddb 	bl	8011c80 <__retarget_lock_release_recursive>
 80130ca:	e7d9      	b.n	8013080 <_fflush_r+0xc>
 80130cc:	4b05      	ldr	r3, [pc, #20]	; (80130e4 <_fflush_r+0x70>)
 80130ce:	429c      	cmp	r4, r3
 80130d0:	d101      	bne.n	80130d6 <_fflush_r+0x62>
 80130d2:	68ac      	ldr	r4, [r5, #8]
 80130d4:	e7df      	b.n	8013096 <_fflush_r+0x22>
 80130d6:	4b04      	ldr	r3, [pc, #16]	; (80130e8 <_fflush_r+0x74>)
 80130d8:	429c      	cmp	r4, r3
 80130da:	bf08      	it	eq
 80130dc:	68ec      	ldreq	r4, [r5, #12]
 80130de:	e7da      	b.n	8013096 <_fflush_r+0x22>
 80130e0:	08014f9c 	.word	0x08014f9c
 80130e4:	08014fbc 	.word	0x08014fbc
 80130e8:	08014f7c 	.word	0x08014f7c

080130ec <std>:
 80130ec:	2300      	movs	r3, #0
 80130ee:	b510      	push	{r4, lr}
 80130f0:	4604      	mov	r4, r0
 80130f2:	e9c0 3300 	strd	r3, r3, [r0]
 80130f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80130fa:	6083      	str	r3, [r0, #8]
 80130fc:	8181      	strh	r1, [r0, #12]
 80130fe:	6643      	str	r3, [r0, #100]	; 0x64
 8013100:	81c2      	strh	r2, [r0, #14]
 8013102:	6183      	str	r3, [r0, #24]
 8013104:	4619      	mov	r1, r3
 8013106:	2208      	movs	r2, #8
 8013108:	305c      	adds	r0, #92	; 0x5c
 801310a:	f7fb ff05 	bl	800ef18 <memset>
 801310e:	4b05      	ldr	r3, [pc, #20]	; (8013124 <std+0x38>)
 8013110:	6263      	str	r3, [r4, #36]	; 0x24
 8013112:	4b05      	ldr	r3, [pc, #20]	; (8013128 <std+0x3c>)
 8013114:	62a3      	str	r3, [r4, #40]	; 0x28
 8013116:	4b05      	ldr	r3, [pc, #20]	; (801312c <std+0x40>)
 8013118:	62e3      	str	r3, [r4, #44]	; 0x2c
 801311a:	4b05      	ldr	r3, [pc, #20]	; (8013130 <std+0x44>)
 801311c:	6224      	str	r4, [r4, #32]
 801311e:	6323      	str	r3, [r4, #48]	; 0x30
 8013120:	bd10      	pop	{r4, pc}
 8013122:	bf00      	nop
 8013124:	08012909 	.word	0x08012909
 8013128:	0801292b 	.word	0x0801292b
 801312c:	08012963 	.word	0x08012963
 8013130:	08012987 	.word	0x08012987

08013134 <_cleanup_r>:
 8013134:	4901      	ldr	r1, [pc, #4]	; (801313c <_cleanup_r+0x8>)
 8013136:	f000 b8af 	b.w	8013298 <_fwalk_reent>
 801313a:	bf00      	nop
 801313c:	08013075 	.word	0x08013075

08013140 <__sfmoreglue>:
 8013140:	b570      	push	{r4, r5, r6, lr}
 8013142:	2268      	movs	r2, #104	; 0x68
 8013144:	1e4d      	subs	r5, r1, #1
 8013146:	4355      	muls	r5, r2
 8013148:	460e      	mov	r6, r1
 801314a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801314e:	f7fb ff6d 	bl	800f02c <_malloc_r>
 8013152:	4604      	mov	r4, r0
 8013154:	b140      	cbz	r0, 8013168 <__sfmoreglue+0x28>
 8013156:	2100      	movs	r1, #0
 8013158:	e9c0 1600 	strd	r1, r6, [r0]
 801315c:	300c      	adds	r0, #12
 801315e:	60a0      	str	r0, [r4, #8]
 8013160:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013164:	f7fb fed8 	bl	800ef18 <memset>
 8013168:	4620      	mov	r0, r4
 801316a:	bd70      	pop	{r4, r5, r6, pc}

0801316c <__sfp_lock_acquire>:
 801316c:	4801      	ldr	r0, [pc, #4]	; (8013174 <__sfp_lock_acquire+0x8>)
 801316e:	f7fe bd86 	b.w	8011c7e <__retarget_lock_acquire_recursive>
 8013172:	bf00      	nop
 8013174:	200036e1 	.word	0x200036e1

08013178 <__sfp_lock_release>:
 8013178:	4801      	ldr	r0, [pc, #4]	; (8013180 <__sfp_lock_release+0x8>)
 801317a:	f7fe bd81 	b.w	8011c80 <__retarget_lock_release_recursive>
 801317e:	bf00      	nop
 8013180:	200036e1 	.word	0x200036e1

08013184 <__sinit_lock_acquire>:
 8013184:	4801      	ldr	r0, [pc, #4]	; (801318c <__sinit_lock_acquire+0x8>)
 8013186:	f7fe bd7a 	b.w	8011c7e <__retarget_lock_acquire_recursive>
 801318a:	bf00      	nop
 801318c:	200036e2 	.word	0x200036e2

08013190 <__sinit_lock_release>:
 8013190:	4801      	ldr	r0, [pc, #4]	; (8013198 <__sinit_lock_release+0x8>)
 8013192:	f7fe bd75 	b.w	8011c80 <__retarget_lock_release_recursive>
 8013196:	bf00      	nop
 8013198:	200036e2 	.word	0x200036e2

0801319c <__sinit>:
 801319c:	b510      	push	{r4, lr}
 801319e:	4604      	mov	r4, r0
 80131a0:	f7ff fff0 	bl	8013184 <__sinit_lock_acquire>
 80131a4:	69a3      	ldr	r3, [r4, #24]
 80131a6:	b11b      	cbz	r3, 80131b0 <__sinit+0x14>
 80131a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80131ac:	f7ff bff0 	b.w	8013190 <__sinit_lock_release>
 80131b0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80131b4:	6523      	str	r3, [r4, #80]	; 0x50
 80131b6:	4b13      	ldr	r3, [pc, #76]	; (8013204 <__sinit+0x68>)
 80131b8:	4a13      	ldr	r2, [pc, #76]	; (8013208 <__sinit+0x6c>)
 80131ba:	681b      	ldr	r3, [r3, #0]
 80131bc:	62a2      	str	r2, [r4, #40]	; 0x28
 80131be:	42a3      	cmp	r3, r4
 80131c0:	bf04      	itt	eq
 80131c2:	2301      	moveq	r3, #1
 80131c4:	61a3      	streq	r3, [r4, #24]
 80131c6:	4620      	mov	r0, r4
 80131c8:	f000 f820 	bl	801320c <__sfp>
 80131cc:	6060      	str	r0, [r4, #4]
 80131ce:	4620      	mov	r0, r4
 80131d0:	f000 f81c 	bl	801320c <__sfp>
 80131d4:	60a0      	str	r0, [r4, #8]
 80131d6:	4620      	mov	r0, r4
 80131d8:	f000 f818 	bl	801320c <__sfp>
 80131dc:	2200      	movs	r2, #0
 80131de:	60e0      	str	r0, [r4, #12]
 80131e0:	2104      	movs	r1, #4
 80131e2:	6860      	ldr	r0, [r4, #4]
 80131e4:	f7ff ff82 	bl	80130ec <std>
 80131e8:	68a0      	ldr	r0, [r4, #8]
 80131ea:	2201      	movs	r2, #1
 80131ec:	2109      	movs	r1, #9
 80131ee:	f7ff ff7d 	bl	80130ec <std>
 80131f2:	68e0      	ldr	r0, [r4, #12]
 80131f4:	2202      	movs	r2, #2
 80131f6:	2112      	movs	r1, #18
 80131f8:	f7ff ff78 	bl	80130ec <std>
 80131fc:	2301      	movs	r3, #1
 80131fe:	61a3      	str	r3, [r4, #24]
 8013200:	e7d2      	b.n	80131a8 <__sinit+0xc>
 8013202:	bf00      	nop
 8013204:	08014c3c 	.word	0x08014c3c
 8013208:	08013135 	.word	0x08013135

0801320c <__sfp>:
 801320c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801320e:	4607      	mov	r7, r0
 8013210:	f7ff ffac 	bl	801316c <__sfp_lock_acquire>
 8013214:	4b1e      	ldr	r3, [pc, #120]	; (8013290 <__sfp+0x84>)
 8013216:	681e      	ldr	r6, [r3, #0]
 8013218:	69b3      	ldr	r3, [r6, #24]
 801321a:	b913      	cbnz	r3, 8013222 <__sfp+0x16>
 801321c:	4630      	mov	r0, r6
 801321e:	f7ff ffbd 	bl	801319c <__sinit>
 8013222:	3648      	adds	r6, #72	; 0x48
 8013224:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013228:	3b01      	subs	r3, #1
 801322a:	d503      	bpl.n	8013234 <__sfp+0x28>
 801322c:	6833      	ldr	r3, [r6, #0]
 801322e:	b30b      	cbz	r3, 8013274 <__sfp+0x68>
 8013230:	6836      	ldr	r6, [r6, #0]
 8013232:	e7f7      	b.n	8013224 <__sfp+0x18>
 8013234:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013238:	b9d5      	cbnz	r5, 8013270 <__sfp+0x64>
 801323a:	4b16      	ldr	r3, [pc, #88]	; (8013294 <__sfp+0x88>)
 801323c:	60e3      	str	r3, [r4, #12]
 801323e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8013242:	6665      	str	r5, [r4, #100]	; 0x64
 8013244:	f7fe fd1a 	bl	8011c7c <__retarget_lock_init_recursive>
 8013248:	f7ff ff96 	bl	8013178 <__sfp_lock_release>
 801324c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8013250:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8013254:	6025      	str	r5, [r4, #0]
 8013256:	61a5      	str	r5, [r4, #24]
 8013258:	2208      	movs	r2, #8
 801325a:	4629      	mov	r1, r5
 801325c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013260:	f7fb fe5a 	bl	800ef18 <memset>
 8013264:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013268:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801326c:	4620      	mov	r0, r4
 801326e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013270:	3468      	adds	r4, #104	; 0x68
 8013272:	e7d9      	b.n	8013228 <__sfp+0x1c>
 8013274:	2104      	movs	r1, #4
 8013276:	4638      	mov	r0, r7
 8013278:	f7ff ff62 	bl	8013140 <__sfmoreglue>
 801327c:	4604      	mov	r4, r0
 801327e:	6030      	str	r0, [r6, #0]
 8013280:	2800      	cmp	r0, #0
 8013282:	d1d5      	bne.n	8013230 <__sfp+0x24>
 8013284:	f7ff ff78 	bl	8013178 <__sfp_lock_release>
 8013288:	230c      	movs	r3, #12
 801328a:	603b      	str	r3, [r7, #0]
 801328c:	e7ee      	b.n	801326c <__sfp+0x60>
 801328e:	bf00      	nop
 8013290:	08014c3c 	.word	0x08014c3c
 8013294:	ffff0001 	.word	0xffff0001

08013298 <_fwalk_reent>:
 8013298:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801329c:	4606      	mov	r6, r0
 801329e:	4688      	mov	r8, r1
 80132a0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80132a4:	2700      	movs	r7, #0
 80132a6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80132aa:	f1b9 0901 	subs.w	r9, r9, #1
 80132ae:	d505      	bpl.n	80132bc <_fwalk_reent+0x24>
 80132b0:	6824      	ldr	r4, [r4, #0]
 80132b2:	2c00      	cmp	r4, #0
 80132b4:	d1f7      	bne.n	80132a6 <_fwalk_reent+0xe>
 80132b6:	4638      	mov	r0, r7
 80132b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80132bc:	89ab      	ldrh	r3, [r5, #12]
 80132be:	2b01      	cmp	r3, #1
 80132c0:	d907      	bls.n	80132d2 <_fwalk_reent+0x3a>
 80132c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80132c6:	3301      	adds	r3, #1
 80132c8:	d003      	beq.n	80132d2 <_fwalk_reent+0x3a>
 80132ca:	4629      	mov	r1, r5
 80132cc:	4630      	mov	r0, r6
 80132ce:	47c0      	blx	r8
 80132d0:	4307      	orrs	r7, r0
 80132d2:	3568      	adds	r5, #104	; 0x68
 80132d4:	e7e9      	b.n	80132aa <_fwalk_reent+0x12>

080132d6 <__swhatbuf_r>:
 80132d6:	b570      	push	{r4, r5, r6, lr}
 80132d8:	460e      	mov	r6, r1
 80132da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80132de:	2900      	cmp	r1, #0
 80132e0:	b096      	sub	sp, #88	; 0x58
 80132e2:	4614      	mov	r4, r2
 80132e4:	461d      	mov	r5, r3
 80132e6:	da08      	bge.n	80132fa <__swhatbuf_r+0x24>
 80132e8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80132ec:	2200      	movs	r2, #0
 80132ee:	602a      	str	r2, [r5, #0]
 80132f0:	061a      	lsls	r2, r3, #24
 80132f2:	d410      	bmi.n	8013316 <__swhatbuf_r+0x40>
 80132f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80132f8:	e00e      	b.n	8013318 <__swhatbuf_r+0x42>
 80132fa:	466a      	mov	r2, sp
 80132fc:	f000 f89c 	bl	8013438 <_fstat_r>
 8013300:	2800      	cmp	r0, #0
 8013302:	dbf1      	blt.n	80132e8 <__swhatbuf_r+0x12>
 8013304:	9a01      	ldr	r2, [sp, #4]
 8013306:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801330a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801330e:	425a      	negs	r2, r3
 8013310:	415a      	adcs	r2, r3
 8013312:	602a      	str	r2, [r5, #0]
 8013314:	e7ee      	b.n	80132f4 <__swhatbuf_r+0x1e>
 8013316:	2340      	movs	r3, #64	; 0x40
 8013318:	2000      	movs	r0, #0
 801331a:	6023      	str	r3, [r4, #0]
 801331c:	b016      	add	sp, #88	; 0x58
 801331e:	bd70      	pop	{r4, r5, r6, pc}

08013320 <__smakebuf_r>:
 8013320:	898b      	ldrh	r3, [r1, #12]
 8013322:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013324:	079d      	lsls	r5, r3, #30
 8013326:	4606      	mov	r6, r0
 8013328:	460c      	mov	r4, r1
 801332a:	d507      	bpl.n	801333c <__smakebuf_r+0x1c>
 801332c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013330:	6023      	str	r3, [r4, #0]
 8013332:	6123      	str	r3, [r4, #16]
 8013334:	2301      	movs	r3, #1
 8013336:	6163      	str	r3, [r4, #20]
 8013338:	b002      	add	sp, #8
 801333a:	bd70      	pop	{r4, r5, r6, pc}
 801333c:	ab01      	add	r3, sp, #4
 801333e:	466a      	mov	r2, sp
 8013340:	f7ff ffc9 	bl	80132d6 <__swhatbuf_r>
 8013344:	9900      	ldr	r1, [sp, #0]
 8013346:	4605      	mov	r5, r0
 8013348:	4630      	mov	r0, r6
 801334a:	f7fb fe6f 	bl	800f02c <_malloc_r>
 801334e:	b948      	cbnz	r0, 8013364 <__smakebuf_r+0x44>
 8013350:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013354:	059a      	lsls	r2, r3, #22
 8013356:	d4ef      	bmi.n	8013338 <__smakebuf_r+0x18>
 8013358:	f023 0303 	bic.w	r3, r3, #3
 801335c:	f043 0302 	orr.w	r3, r3, #2
 8013360:	81a3      	strh	r3, [r4, #12]
 8013362:	e7e3      	b.n	801332c <__smakebuf_r+0xc>
 8013364:	4b0d      	ldr	r3, [pc, #52]	; (801339c <__smakebuf_r+0x7c>)
 8013366:	62b3      	str	r3, [r6, #40]	; 0x28
 8013368:	89a3      	ldrh	r3, [r4, #12]
 801336a:	6020      	str	r0, [r4, #0]
 801336c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013370:	81a3      	strh	r3, [r4, #12]
 8013372:	9b00      	ldr	r3, [sp, #0]
 8013374:	6163      	str	r3, [r4, #20]
 8013376:	9b01      	ldr	r3, [sp, #4]
 8013378:	6120      	str	r0, [r4, #16]
 801337a:	b15b      	cbz	r3, 8013394 <__smakebuf_r+0x74>
 801337c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013380:	4630      	mov	r0, r6
 8013382:	f000 f86b 	bl	801345c <_isatty_r>
 8013386:	b128      	cbz	r0, 8013394 <__smakebuf_r+0x74>
 8013388:	89a3      	ldrh	r3, [r4, #12]
 801338a:	f023 0303 	bic.w	r3, r3, #3
 801338e:	f043 0301 	orr.w	r3, r3, #1
 8013392:	81a3      	strh	r3, [r4, #12]
 8013394:	89a0      	ldrh	r0, [r4, #12]
 8013396:	4305      	orrs	r5, r0
 8013398:	81a5      	strh	r5, [r4, #12]
 801339a:	e7cd      	b.n	8013338 <__smakebuf_r+0x18>
 801339c:	08013135 	.word	0x08013135

080133a0 <_malloc_usable_size_r>:
 80133a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80133a4:	1f18      	subs	r0, r3, #4
 80133a6:	2b00      	cmp	r3, #0
 80133a8:	bfbc      	itt	lt
 80133aa:	580b      	ldrlt	r3, [r1, r0]
 80133ac:	18c0      	addlt	r0, r0, r3
 80133ae:	4770      	bx	lr

080133b0 <_raise_r>:
 80133b0:	291f      	cmp	r1, #31
 80133b2:	b538      	push	{r3, r4, r5, lr}
 80133b4:	4604      	mov	r4, r0
 80133b6:	460d      	mov	r5, r1
 80133b8:	d904      	bls.n	80133c4 <_raise_r+0x14>
 80133ba:	2316      	movs	r3, #22
 80133bc:	6003      	str	r3, [r0, #0]
 80133be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80133c2:	bd38      	pop	{r3, r4, r5, pc}
 80133c4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80133c6:	b112      	cbz	r2, 80133ce <_raise_r+0x1e>
 80133c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80133cc:	b94b      	cbnz	r3, 80133e2 <_raise_r+0x32>
 80133ce:	4620      	mov	r0, r4
 80133d0:	f000 f830 	bl	8013434 <_getpid_r>
 80133d4:	462a      	mov	r2, r5
 80133d6:	4601      	mov	r1, r0
 80133d8:	4620      	mov	r0, r4
 80133da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80133de:	f000 b817 	b.w	8013410 <_kill_r>
 80133e2:	2b01      	cmp	r3, #1
 80133e4:	d00a      	beq.n	80133fc <_raise_r+0x4c>
 80133e6:	1c59      	adds	r1, r3, #1
 80133e8:	d103      	bne.n	80133f2 <_raise_r+0x42>
 80133ea:	2316      	movs	r3, #22
 80133ec:	6003      	str	r3, [r0, #0]
 80133ee:	2001      	movs	r0, #1
 80133f0:	e7e7      	b.n	80133c2 <_raise_r+0x12>
 80133f2:	2400      	movs	r4, #0
 80133f4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80133f8:	4628      	mov	r0, r5
 80133fa:	4798      	blx	r3
 80133fc:	2000      	movs	r0, #0
 80133fe:	e7e0      	b.n	80133c2 <_raise_r+0x12>

08013400 <raise>:
 8013400:	4b02      	ldr	r3, [pc, #8]	; (801340c <raise+0xc>)
 8013402:	4601      	mov	r1, r0
 8013404:	6818      	ldr	r0, [r3, #0]
 8013406:	f7ff bfd3 	b.w	80133b0 <_raise_r>
 801340a:	bf00      	nop
 801340c:	2000024c 	.word	0x2000024c

08013410 <_kill_r>:
 8013410:	b538      	push	{r3, r4, r5, lr}
 8013412:	4d07      	ldr	r5, [pc, #28]	; (8013430 <_kill_r+0x20>)
 8013414:	2300      	movs	r3, #0
 8013416:	4604      	mov	r4, r0
 8013418:	4608      	mov	r0, r1
 801341a:	4611      	mov	r1, r2
 801341c:	602b      	str	r3, [r5, #0]
 801341e:	f7f2 fe81 	bl	8006124 <_kill>
 8013422:	1c43      	adds	r3, r0, #1
 8013424:	d102      	bne.n	801342c <_kill_r+0x1c>
 8013426:	682b      	ldr	r3, [r5, #0]
 8013428:	b103      	cbz	r3, 801342c <_kill_r+0x1c>
 801342a:	6023      	str	r3, [r4, #0]
 801342c:	bd38      	pop	{r3, r4, r5, pc}
 801342e:	bf00      	nop
 8013430:	200036e4 	.word	0x200036e4

08013434 <_getpid_r>:
 8013434:	f7f2 be6e 	b.w	8006114 <_getpid>

08013438 <_fstat_r>:
 8013438:	b538      	push	{r3, r4, r5, lr}
 801343a:	4d07      	ldr	r5, [pc, #28]	; (8013458 <_fstat_r+0x20>)
 801343c:	2300      	movs	r3, #0
 801343e:	4604      	mov	r4, r0
 8013440:	4608      	mov	r0, r1
 8013442:	4611      	mov	r1, r2
 8013444:	602b      	str	r3, [r5, #0]
 8013446:	f7f2 fecc 	bl	80061e2 <_fstat>
 801344a:	1c43      	adds	r3, r0, #1
 801344c:	d102      	bne.n	8013454 <_fstat_r+0x1c>
 801344e:	682b      	ldr	r3, [r5, #0]
 8013450:	b103      	cbz	r3, 8013454 <_fstat_r+0x1c>
 8013452:	6023      	str	r3, [r4, #0]
 8013454:	bd38      	pop	{r3, r4, r5, pc}
 8013456:	bf00      	nop
 8013458:	200036e4 	.word	0x200036e4

0801345c <_isatty_r>:
 801345c:	b538      	push	{r3, r4, r5, lr}
 801345e:	4d06      	ldr	r5, [pc, #24]	; (8013478 <_isatty_r+0x1c>)
 8013460:	2300      	movs	r3, #0
 8013462:	4604      	mov	r4, r0
 8013464:	4608      	mov	r0, r1
 8013466:	602b      	str	r3, [r5, #0]
 8013468:	f7f2 fecb 	bl	8006202 <_isatty>
 801346c:	1c43      	adds	r3, r0, #1
 801346e:	d102      	bne.n	8013476 <_isatty_r+0x1a>
 8013470:	682b      	ldr	r3, [r5, #0]
 8013472:	b103      	cbz	r3, 8013476 <_isatty_r+0x1a>
 8013474:	6023      	str	r3, [r4, #0]
 8013476:	bd38      	pop	{r3, r4, r5, pc}
 8013478:	200036e4 	.word	0x200036e4

0801347c <_init>:
 801347c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801347e:	bf00      	nop
 8013480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013482:	bc08      	pop	{r3}
 8013484:	469e      	mov	lr, r3
 8013486:	4770      	bx	lr

08013488 <_fini>:
 8013488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801348a:	bf00      	nop
 801348c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801348e:	bc08      	pop	{r3}
 8013490:	469e      	mov	lr, r3
 8013492:	4770      	bx	lr
