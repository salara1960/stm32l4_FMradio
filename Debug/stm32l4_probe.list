
stm32l4_probe.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011c6c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001524  08011e00  08011e00  00021e00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013324  08013324  000303c4  2**0
                  CONTENTS
  4 .ARM          00000008  08013324  08013324  00023324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801332c  0801332c  000303c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801332c  0801332c  0002332c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013330  08013330  00023330  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003c4  20000000  08013334  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002a08  200003c8  080136f8  000303c8  2**3
                  ALLOC
 10 ._user_heap_stack 00001000  20002dd0  080136f8  00032dd0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000303c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e651  00000000  00000000  000303f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000393f  00000000  00000000  0004ea45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a58  00000000  00000000  00052388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001950  00000000  00000000  00053de0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b2b6  00000000  00000000  00055730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f4cd  00000000  00000000  000809e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001021cd  00000000  00000000  0009feb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001a2080  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000086d0  00000000  00000000  001a20d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200003c8 	.word	0x200003c8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08011de4 	.word	0x08011de4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200003cc 	.word	0x200003cc
 80001cc:	08011de4 	.word	0x08011de4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_ldivmod>:
 8000c88:	b97b      	cbnz	r3, 8000caa <__aeabi_ldivmod+0x22>
 8000c8a:	b972      	cbnz	r2, 8000caa <__aeabi_ldivmod+0x22>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bfbe      	ittt	lt
 8000c90:	2000      	movlt	r0, #0
 8000c92:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c96:	e006      	blt.n	8000ca6 <__aeabi_ldivmod+0x1e>
 8000c98:	bf08      	it	eq
 8000c9a:	2800      	cmpeq	r0, #0
 8000c9c:	bf1c      	itt	ne
 8000c9e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ca2:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ca6:	f000 b9f5 	b.w	8001094 <__aeabi_idiv0>
 8000caa:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cae:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb2:	2900      	cmp	r1, #0
 8000cb4:	db09      	blt.n	8000cca <__aeabi_ldivmod+0x42>
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	db1a      	blt.n	8000cf0 <__aeabi_ldivmod+0x68>
 8000cba:	f000 f883 	bl	8000dc4 <__udivmoddi4>
 8000cbe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc6:	b004      	add	sp, #16
 8000cc8:	4770      	bx	lr
 8000cca:	4240      	negs	r0, r0
 8000ccc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	db1b      	blt.n	8000d0c <__aeabi_ldivmod+0x84>
 8000cd4:	f000 f876 	bl	8000dc4 <__udivmoddi4>
 8000cd8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce0:	b004      	add	sp, #16
 8000ce2:	4240      	negs	r0, r0
 8000ce4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce8:	4252      	negs	r2, r2
 8000cea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cee:	4770      	bx	lr
 8000cf0:	4252      	negs	r2, r2
 8000cf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf6:	f000 f865 	bl	8000dc4 <__udivmoddi4>
 8000cfa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d02:	b004      	add	sp, #16
 8000d04:	4240      	negs	r0, r0
 8000d06:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0a:	4770      	bx	lr
 8000d0c:	4252      	negs	r2, r2
 8000d0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d12:	f000 f857 	bl	8000dc4 <__udivmoddi4>
 8000d16:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d1e:	b004      	add	sp, #16
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	4770      	bx	lr

08000d28 <__aeabi_uldivmod>:
 8000d28:	b953      	cbnz	r3, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2a:	b94a      	cbnz	r2, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2c:	2900      	cmp	r1, #0
 8000d2e:	bf08      	it	eq
 8000d30:	2800      	cmpeq	r0, #0
 8000d32:	bf1c      	itt	ne
 8000d34:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000d38:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000d3c:	f000 b9aa 	b.w	8001094 <__aeabi_idiv0>
 8000d40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d48:	f000 f83c 	bl	8000dc4 <__udivmoddi4>
 8000d4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d54:	b004      	add	sp, #16
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_d2lz>:
 8000d58:	b538      	push	{r3, r4, r5, lr}
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	4604      	mov	r4, r0
 8000d60:	460d      	mov	r5, r1
 8000d62:	f7ff febb 	bl	8000adc <__aeabi_dcmplt>
 8000d66:	b928      	cbnz	r0, 8000d74 <__aeabi_d2lz+0x1c>
 8000d68:	4620      	mov	r0, r4
 8000d6a:	4629      	mov	r1, r5
 8000d6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d70:	f000 b80a 	b.w	8000d88 <__aeabi_d2ulz>
 8000d74:	4620      	mov	r0, r4
 8000d76:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d7a:	f000 f805 	bl	8000d88 <__aeabi_d2ulz>
 8000d7e:	4240      	negs	r0, r0
 8000d80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d84:	bd38      	pop	{r3, r4, r5, pc}
 8000d86:	bf00      	nop

08000d88 <__aeabi_d2ulz>:
 8000d88:	b5d0      	push	{r4, r6, r7, lr}
 8000d8a:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <__aeabi_d2ulz+0x34>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	4606      	mov	r6, r0
 8000d90:	460f      	mov	r7, r1
 8000d92:	f7ff fc31 	bl	80005f8 <__aeabi_dmul>
 8000d96:	f7ff ff07 	bl	8000ba8 <__aeabi_d2uiz>
 8000d9a:	4604      	mov	r4, r0
 8000d9c:	f7ff fbb2 	bl	8000504 <__aeabi_ui2d>
 8000da0:	4b07      	ldr	r3, [pc, #28]	; (8000dc0 <__aeabi_d2ulz+0x38>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	f7ff fc28 	bl	80005f8 <__aeabi_dmul>
 8000da8:	4602      	mov	r2, r0
 8000daa:	460b      	mov	r3, r1
 8000dac:	4630      	mov	r0, r6
 8000dae:	4639      	mov	r1, r7
 8000db0:	f7ff fa6a 	bl	8000288 <__aeabi_dsub>
 8000db4:	f7ff fef8 	bl	8000ba8 <__aeabi_d2uiz>
 8000db8:	4621      	mov	r1, r4
 8000dba:	bdd0      	pop	{r4, r6, r7, pc}
 8000dbc:	3df00000 	.word	0x3df00000
 8000dc0:	41f00000 	.word	0x41f00000

08000dc4 <__udivmoddi4>:
 8000dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dc8:	9d08      	ldr	r5, [sp, #32]
 8000dca:	4604      	mov	r4, r0
 8000dcc:	468e      	mov	lr, r1
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d14d      	bne.n	8000e6e <__udivmoddi4+0xaa>
 8000dd2:	428a      	cmp	r2, r1
 8000dd4:	4694      	mov	ip, r2
 8000dd6:	d969      	bls.n	8000eac <__udivmoddi4+0xe8>
 8000dd8:	fab2 f282 	clz	r2, r2
 8000ddc:	b152      	cbz	r2, 8000df4 <__udivmoddi4+0x30>
 8000dde:	fa01 f302 	lsl.w	r3, r1, r2
 8000de2:	f1c2 0120 	rsb	r1, r2, #32
 8000de6:	fa20 f101 	lsr.w	r1, r0, r1
 8000dea:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dee:	ea41 0e03 	orr.w	lr, r1, r3
 8000df2:	4094      	lsls	r4, r2
 8000df4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df8:	0c21      	lsrs	r1, r4, #16
 8000dfa:	fbbe f6f8 	udiv	r6, lr, r8
 8000dfe:	fa1f f78c 	uxth.w	r7, ip
 8000e02:	fb08 e316 	mls	r3, r8, r6, lr
 8000e06:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e0a:	fb06 f107 	mul.w	r1, r6, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d90a      	bls.n	8000e28 <__udivmoddi4+0x64>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000e1a:	f080 811f 	bcs.w	800105c <__udivmoddi4+0x298>
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	f240 811c 	bls.w	800105c <__udivmoddi4+0x298>
 8000e24:	3e02      	subs	r6, #2
 8000e26:	4463      	add	r3, ip
 8000e28:	1a5b      	subs	r3, r3, r1
 8000e2a:	b2a4      	uxth	r4, r4
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3310 	mls	r3, r8, r0, r3
 8000e34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e38:	fb00 f707 	mul.w	r7, r0, r7
 8000e3c:	42a7      	cmp	r7, r4
 8000e3e:	d90a      	bls.n	8000e56 <__udivmoddi4+0x92>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e48:	f080 810a 	bcs.w	8001060 <__udivmoddi4+0x29c>
 8000e4c:	42a7      	cmp	r7, r4
 8000e4e:	f240 8107 	bls.w	8001060 <__udivmoddi4+0x29c>
 8000e52:	4464      	add	r4, ip
 8000e54:	3802      	subs	r0, #2
 8000e56:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e5a:	1be4      	subs	r4, r4, r7
 8000e5c:	2600      	movs	r6, #0
 8000e5e:	b11d      	cbz	r5, 8000e68 <__udivmoddi4+0xa4>
 8000e60:	40d4      	lsrs	r4, r2
 8000e62:	2300      	movs	r3, #0
 8000e64:	e9c5 4300 	strd	r4, r3, [r5]
 8000e68:	4631      	mov	r1, r6
 8000e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6e:	428b      	cmp	r3, r1
 8000e70:	d909      	bls.n	8000e86 <__udivmoddi4+0xc2>
 8000e72:	2d00      	cmp	r5, #0
 8000e74:	f000 80ef 	beq.w	8001056 <__udivmoddi4+0x292>
 8000e78:	2600      	movs	r6, #0
 8000e7a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e7e:	4630      	mov	r0, r6
 8000e80:	4631      	mov	r1, r6
 8000e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e86:	fab3 f683 	clz	r6, r3
 8000e8a:	2e00      	cmp	r6, #0
 8000e8c:	d14a      	bne.n	8000f24 <__udivmoddi4+0x160>
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	d302      	bcc.n	8000e98 <__udivmoddi4+0xd4>
 8000e92:	4282      	cmp	r2, r0
 8000e94:	f200 80f9 	bhi.w	800108a <__udivmoddi4+0x2c6>
 8000e98:	1a84      	subs	r4, r0, r2
 8000e9a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e9e:	2001      	movs	r0, #1
 8000ea0:	469e      	mov	lr, r3
 8000ea2:	2d00      	cmp	r5, #0
 8000ea4:	d0e0      	beq.n	8000e68 <__udivmoddi4+0xa4>
 8000ea6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000eaa:	e7dd      	b.n	8000e68 <__udivmoddi4+0xa4>
 8000eac:	b902      	cbnz	r2, 8000eb0 <__udivmoddi4+0xec>
 8000eae:	deff      	udf	#255	; 0xff
 8000eb0:	fab2 f282 	clz	r2, r2
 8000eb4:	2a00      	cmp	r2, #0
 8000eb6:	f040 8092 	bne.w	8000fde <__udivmoddi4+0x21a>
 8000eba:	eba1 010c 	sub.w	r1, r1, ip
 8000ebe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ec2:	fa1f fe8c 	uxth.w	lr, ip
 8000ec6:	2601      	movs	r6, #1
 8000ec8:	0c20      	lsrs	r0, r4, #16
 8000eca:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ece:	fb07 1113 	mls	r1, r7, r3, r1
 8000ed2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed6:	fb0e f003 	mul.w	r0, lr, r3
 8000eda:	4288      	cmp	r0, r1
 8000edc:	d908      	bls.n	8000ef0 <__udivmoddi4+0x12c>
 8000ede:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee2:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000ee6:	d202      	bcs.n	8000eee <__udivmoddi4+0x12a>
 8000ee8:	4288      	cmp	r0, r1
 8000eea:	f200 80cb 	bhi.w	8001084 <__udivmoddi4+0x2c0>
 8000eee:	4643      	mov	r3, r8
 8000ef0:	1a09      	subs	r1, r1, r0
 8000ef2:	b2a4      	uxth	r4, r4
 8000ef4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ef8:	fb07 1110 	mls	r1, r7, r0, r1
 8000efc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f00:	fb0e fe00 	mul.w	lr, lr, r0
 8000f04:	45a6      	cmp	lr, r4
 8000f06:	d908      	bls.n	8000f1a <__udivmoddi4+0x156>
 8000f08:	eb1c 0404 	adds.w	r4, ip, r4
 8000f0c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000f10:	d202      	bcs.n	8000f18 <__udivmoddi4+0x154>
 8000f12:	45a6      	cmp	lr, r4
 8000f14:	f200 80bb 	bhi.w	800108e <__udivmoddi4+0x2ca>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	eba4 040e 	sub.w	r4, r4, lr
 8000f1e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f22:	e79c      	b.n	8000e5e <__udivmoddi4+0x9a>
 8000f24:	f1c6 0720 	rsb	r7, r6, #32
 8000f28:	40b3      	lsls	r3, r6
 8000f2a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f2e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f32:	fa20 f407 	lsr.w	r4, r0, r7
 8000f36:	fa01 f306 	lsl.w	r3, r1, r6
 8000f3a:	431c      	orrs	r4, r3
 8000f3c:	40f9      	lsrs	r1, r7
 8000f3e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f42:	fa00 f306 	lsl.w	r3, r0, r6
 8000f46:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f4a:	0c20      	lsrs	r0, r4, #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fb09 1118 	mls	r1, r9, r8, r1
 8000f54:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f58:	fb08 f00e 	mul.w	r0, r8, lr
 8000f5c:	4288      	cmp	r0, r1
 8000f5e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f62:	d90b      	bls.n	8000f7c <__udivmoddi4+0x1b8>
 8000f64:	eb1c 0101 	adds.w	r1, ip, r1
 8000f68:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000f6c:	f080 8088 	bcs.w	8001080 <__udivmoddi4+0x2bc>
 8000f70:	4288      	cmp	r0, r1
 8000f72:	f240 8085 	bls.w	8001080 <__udivmoddi4+0x2bc>
 8000f76:	f1a8 0802 	sub.w	r8, r8, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1a09      	subs	r1, r1, r0
 8000f7e:	b2a4      	uxth	r4, r4
 8000f80:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f84:	fb09 1110 	mls	r1, r9, r0, r1
 8000f88:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f8c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f90:	458e      	cmp	lr, r1
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x1e2>
 8000f94:	eb1c 0101 	adds.w	r1, ip, r1
 8000f98:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000f9c:	d26c      	bcs.n	8001078 <__udivmoddi4+0x2b4>
 8000f9e:	458e      	cmp	lr, r1
 8000fa0:	d96a      	bls.n	8001078 <__udivmoddi4+0x2b4>
 8000fa2:	3802      	subs	r0, #2
 8000fa4:	4461      	add	r1, ip
 8000fa6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000faa:	fba0 9402 	umull	r9, r4, r0, r2
 8000fae:	eba1 010e 	sub.w	r1, r1, lr
 8000fb2:	42a1      	cmp	r1, r4
 8000fb4:	46c8      	mov	r8, r9
 8000fb6:	46a6      	mov	lr, r4
 8000fb8:	d356      	bcc.n	8001068 <__udivmoddi4+0x2a4>
 8000fba:	d053      	beq.n	8001064 <__udivmoddi4+0x2a0>
 8000fbc:	b15d      	cbz	r5, 8000fd6 <__udivmoddi4+0x212>
 8000fbe:	ebb3 0208 	subs.w	r2, r3, r8
 8000fc2:	eb61 010e 	sbc.w	r1, r1, lr
 8000fc6:	fa01 f707 	lsl.w	r7, r1, r7
 8000fca:	fa22 f306 	lsr.w	r3, r2, r6
 8000fce:	40f1      	lsrs	r1, r6
 8000fd0:	431f      	orrs	r7, r3
 8000fd2:	e9c5 7100 	strd	r7, r1, [r5]
 8000fd6:	2600      	movs	r6, #0
 8000fd8:	4631      	mov	r1, r6
 8000fda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fde:	f1c2 0320 	rsb	r3, r2, #32
 8000fe2:	40d8      	lsrs	r0, r3
 8000fe4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fe8:	fa21 f303 	lsr.w	r3, r1, r3
 8000fec:	4091      	lsls	r1, r2
 8000fee:	4301      	orrs	r1, r0
 8000ff0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ff4:	fa1f fe8c 	uxth.w	lr, ip
 8000ff8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ffc:	fb07 3610 	mls	r6, r7, r0, r3
 8001000:	0c0b      	lsrs	r3, r1, #16
 8001002:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001006:	fb00 f60e 	mul.w	r6, r0, lr
 800100a:	429e      	cmp	r6, r3
 800100c:	fa04 f402 	lsl.w	r4, r4, r2
 8001010:	d908      	bls.n	8001024 <__udivmoddi4+0x260>
 8001012:	eb1c 0303 	adds.w	r3, ip, r3
 8001016:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800101a:	d22f      	bcs.n	800107c <__udivmoddi4+0x2b8>
 800101c:	429e      	cmp	r6, r3
 800101e:	d92d      	bls.n	800107c <__udivmoddi4+0x2b8>
 8001020:	3802      	subs	r0, #2
 8001022:	4463      	add	r3, ip
 8001024:	1b9b      	subs	r3, r3, r6
 8001026:	b289      	uxth	r1, r1
 8001028:	fbb3 f6f7 	udiv	r6, r3, r7
 800102c:	fb07 3316 	mls	r3, r7, r6, r3
 8001030:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001034:	fb06 f30e 	mul.w	r3, r6, lr
 8001038:	428b      	cmp	r3, r1
 800103a:	d908      	bls.n	800104e <__udivmoddi4+0x28a>
 800103c:	eb1c 0101 	adds.w	r1, ip, r1
 8001040:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8001044:	d216      	bcs.n	8001074 <__udivmoddi4+0x2b0>
 8001046:	428b      	cmp	r3, r1
 8001048:	d914      	bls.n	8001074 <__udivmoddi4+0x2b0>
 800104a:	3e02      	subs	r6, #2
 800104c:	4461      	add	r1, ip
 800104e:	1ac9      	subs	r1, r1, r3
 8001050:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001054:	e738      	b.n	8000ec8 <__udivmoddi4+0x104>
 8001056:	462e      	mov	r6, r5
 8001058:	4628      	mov	r0, r5
 800105a:	e705      	b.n	8000e68 <__udivmoddi4+0xa4>
 800105c:	4606      	mov	r6, r0
 800105e:	e6e3      	b.n	8000e28 <__udivmoddi4+0x64>
 8001060:	4618      	mov	r0, r3
 8001062:	e6f8      	b.n	8000e56 <__udivmoddi4+0x92>
 8001064:	454b      	cmp	r3, r9
 8001066:	d2a9      	bcs.n	8000fbc <__udivmoddi4+0x1f8>
 8001068:	ebb9 0802 	subs.w	r8, r9, r2
 800106c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001070:	3801      	subs	r0, #1
 8001072:	e7a3      	b.n	8000fbc <__udivmoddi4+0x1f8>
 8001074:	4646      	mov	r6, r8
 8001076:	e7ea      	b.n	800104e <__udivmoddi4+0x28a>
 8001078:	4620      	mov	r0, r4
 800107a:	e794      	b.n	8000fa6 <__udivmoddi4+0x1e2>
 800107c:	4640      	mov	r0, r8
 800107e:	e7d1      	b.n	8001024 <__udivmoddi4+0x260>
 8001080:	46d0      	mov	r8, sl
 8001082:	e77b      	b.n	8000f7c <__udivmoddi4+0x1b8>
 8001084:	3b02      	subs	r3, #2
 8001086:	4461      	add	r1, ip
 8001088:	e732      	b.n	8000ef0 <__udivmoddi4+0x12c>
 800108a:	4630      	mov	r0, r6
 800108c:	e709      	b.n	8000ea2 <__udivmoddi4+0xde>
 800108e:	4464      	add	r4, ip
 8001090:	3802      	subs	r0, #2
 8001092:	e742      	b.n	8000f1a <__udivmoddi4+0x156>

08001094 <__aeabi_idiv0>:
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop

08001098 <ST7565_Select>:
uint8_t lcdRdy = 1;

//------------------------------------------------------------------------------

inline static void ST7565_Select()
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
#ifdef CS_PORT
	//-- если захотим переделать под HAL ------------------
	#ifdef ST7565_SPI_HAL
		//HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
		CS_GPIO_Port->BSRR = ( CS_Pin << 16 );
 800109c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80010a0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80010a4:	619a      	str	r2, [r3, #24]
	#ifdef ST7565_SPI_CMSIS
		CS_GPIO_Port->BSRR = ( CS_Pin << 16 );
	#endif
	//-----------------------------------------------------
#endif
}
 80010a6:	bf00      	nop
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr

080010b0 <ST7565_Unselect>:

//------------------------------------------------------------------------------

inline static void ST7565_Unselect()
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
#ifdef CS_PORT
	//-- если захотим переделать под HAL ------------------
	#ifdef ST7565_SPI_HAL
		//HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
		CS_GPIO_Port->BSRR = CS_Pin;
 80010b4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80010b8:	2210      	movs	r2, #16
 80010ba:	619a      	str	r2, [r3, #24]
	#ifdef ST7565_SPI_CMSIS
		CS_GPIO_Port->BSRR = CS_Pin;
	#endif
	//-----------------------------------------------------
#endif
}
 80010bc:	bf00      	nop
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
	...

080010c8 <ST7565_Reset>:
	* @brief	 ( описание ):  аппарвтный сброс дисплея
	* @param	( параметры ):	
	* @return  ( возвращает ):	
*******************************************************************************/
void ST7565_Reset()
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
	RES_GPIO_Port->BSRR = (RES_Pin << 16);//HAL_GPIO_WritePin(RES_GPIO_Port, RES_Pin, GPIO_PIN_RESET );
 80010cc:	4b07      	ldr	r3, [pc, #28]	; (80010ec <ST7565_Reset+0x24>)
 80010ce:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80010d2:	619a      	str	r2, [r3, #24]
	HAL_Delay(1);
 80010d4:	2001      	movs	r0, #1
 80010d6:	f004 fd17 	bl	8005b08 <HAL_Delay>
	
	RES_GPIO_Port->BSRR = RES_Pin;//HAL_GPIO_WritePin(RES_GPIO_Port, RES_Pin, GPIO_PIN_SET );
 80010da:	4b04      	ldr	r3, [pc, #16]	; (80010ec <ST7565_Reset+0x24>)
 80010dc:	2204      	movs	r2, #4
 80010de:	619a      	str	r2, [r3, #24]
	HAL_Delay(1);
 80010e0:	2001      	movs	r0, #1
 80010e2:	f004 fd11 	bl	8005b08 <HAL_Delay>
}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	48000c00 	.word	0x48000c00

080010f0 <ST7565_w_dats>:
//--------------------------------------------------------------------------------
#ifdef SET_NEW_PROC
inline static void ST7565_w_dats(uint8_t *Data, uint16_t len)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	460b      	mov	r3, r1
 80010fa:	807b      	strh	r3, [r7, #2]
	DC_GPIO_Port->BSRR = DC_Pin;//HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 80010fc:	4b1d      	ldr	r3, [pc, #116]	; (8001174 <ST7565_w_dats+0x84>)
 80010fe:	2220      	movs	r2, #32
 8001100:	619a      	str	r2, [r3, #24]

	if (with_dma) {
 8001102:	4b1d      	ldr	r3, [pc, #116]	; (8001178 <ST7565_w_dats+0x88>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d018      	beq.n	800113c <ST7565_w_dats+0x4c>
		lcdRdy = 0;
 800110a:	4b1c      	ldr	r3, [pc, #112]	; (800117c <ST7565_w_dats+0x8c>)
 800110c:	2200      	movs	r2, #0
 800110e:	701a      	strb	r2, [r3, #0]
		if (HAL_SPI_Transmit_DMA(&ST7565_SPI_HAL, Data, len) != HAL_OK) devError |= devLCD;
 8001110:	887b      	ldrh	r3, [r7, #2]
 8001112:	461a      	mov	r2, r3
 8001114:	6879      	ldr	r1, [r7, #4]
 8001116:	481a      	ldr	r0, [pc, #104]	; (8001180 <ST7565_w_dats+0x90>)
 8001118:	f009 faf6 	bl	800a708 <HAL_SPI_Transmit_DMA>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d006      	beq.n	8001130 <ST7565_w_dats+0x40>
 8001122:	4b18      	ldr	r3, [pc, #96]	; (8001184 <ST7565_w_dats+0x94>)
 8001124:	881b      	ldrh	r3, [r3, #0]
 8001126:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800112a:	b29a      	uxth	r2, r3
 800112c:	4b15      	ldr	r3, [pc, #84]	; (8001184 <ST7565_w_dats+0x94>)
 800112e:	801a      	strh	r2, [r3, #0]
		while (!lcdRdy) {};
 8001130:	bf00      	nop
 8001132:	4b12      	ldr	r3, [pc, #72]	; (800117c <ST7565_w_dats+0x8c>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d0fb      	beq.n	8001132 <ST7565_w_dats+0x42>
	} else {
		if (HAL_SPI_Transmit(&ST7565_SPI_HAL, Data, len, HAL_MAX_DELAY) != HAL_OK) devError |= devLCD;
		while (HAL_SPI_GetState(&ST7565_SPI_HAL) != HAL_SPI_STATE_READY) {};
	}
}
 800113a:	e017      	b.n	800116c <ST7565_w_dats+0x7c>
		if (HAL_SPI_Transmit(&ST7565_SPI_HAL, Data, len, HAL_MAX_DELAY) != HAL_OK) devError |= devLCD;
 800113c:	887a      	ldrh	r2, [r7, #2]
 800113e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001142:	6879      	ldr	r1, [r7, #4]
 8001144:	480e      	ldr	r0, [pc, #56]	; (8001180 <ST7565_w_dats+0x90>)
 8001146:	f008 fe2e 	bl	8009da6 <HAL_SPI_Transmit>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d006      	beq.n	800115e <ST7565_w_dats+0x6e>
 8001150:	4b0c      	ldr	r3, [pc, #48]	; (8001184 <ST7565_w_dats+0x94>)
 8001152:	881b      	ldrh	r3, [r3, #0]
 8001154:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001158:	b29a      	uxth	r2, r3
 800115a:	4b0a      	ldr	r3, [pc, #40]	; (8001184 <ST7565_w_dats+0x94>)
 800115c:	801a      	strh	r2, [r3, #0]
		while (HAL_SPI_GetState(&ST7565_SPI_HAL) != HAL_SPI_STATE_READY) {};
 800115e:	bf00      	nop
 8001160:	4807      	ldr	r0, [pc, #28]	; (8001180 <ST7565_w_dats+0x90>)
 8001162:	f009 fe6f 	bl	800ae44 <HAL_SPI_GetState>
 8001166:	4603      	mov	r3, r0
 8001168:	2b01      	cmp	r3, #1
 800116a:	d1f9      	bne.n	8001160 <ST7565_w_dats+0x70>
}
 800116c:	bf00      	nop
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	48000400 	.word	0x48000400
 8001178:	20000000 	.word	0x20000000
 800117c:	20000001 	.word	0x20000001
 8001180:	200008ec 	.word	0x200008ec
 8001184:	20001424 	.word	0x20001424

08001188 <ST7565_w_cmds>:
//
inline static void ST7565_w_cmds(uint8_t *Command, uint16_t len)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	460b      	mov	r3, r1
 8001192:	807b      	strh	r3, [r7, #2]
	DC_GPIO_Port->BSRR = (DC_Pin << 16);//HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
 8001194:	4b1e      	ldr	r3, [pc, #120]	; (8001210 <ST7565_w_cmds+0x88>)
 8001196:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800119a:	619a      	str	r2, [r3, #24]

	if (with_dma) {
 800119c:	4b1d      	ldr	r3, [pc, #116]	; (8001214 <ST7565_w_cmds+0x8c>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d018      	beq.n	80011d6 <ST7565_w_cmds+0x4e>
		lcdRdy = 0;
 80011a4:	4b1c      	ldr	r3, [pc, #112]	; (8001218 <ST7565_w_cmds+0x90>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	701a      	strb	r2, [r3, #0]
		if (HAL_SPI_Transmit_DMA(&ST7565_SPI_HAL, Command, len) != HAL_OK) devError |= devLCD;
 80011aa:	887b      	ldrh	r3, [r7, #2]
 80011ac:	461a      	mov	r2, r3
 80011ae:	6879      	ldr	r1, [r7, #4]
 80011b0:	481a      	ldr	r0, [pc, #104]	; (800121c <ST7565_w_cmds+0x94>)
 80011b2:	f009 faa9 	bl	800a708 <HAL_SPI_Transmit_DMA>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d006      	beq.n	80011ca <ST7565_w_cmds+0x42>
 80011bc:	4b18      	ldr	r3, [pc, #96]	; (8001220 <ST7565_w_cmds+0x98>)
 80011be:	881b      	ldrh	r3, [r3, #0]
 80011c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011c4:	b29a      	uxth	r2, r3
 80011c6:	4b16      	ldr	r3, [pc, #88]	; (8001220 <ST7565_w_cmds+0x98>)
 80011c8:	801a      	strh	r2, [r3, #0]
		while (!lcdRdy) {};
 80011ca:	bf00      	nop
 80011cc:	4b12      	ldr	r3, [pc, #72]	; (8001218 <ST7565_w_cmds+0x90>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d0fb      	beq.n	80011cc <ST7565_w_cmds+0x44>
	} else {
		if (HAL_SPI_Transmit(&ST7565_SPI_HAL, Command, len, HAL_MAX_DELAY) != HAL_OK) devError |= devLCD;
		while (HAL_SPI_GetState(&ST7565_SPI_HAL) != HAL_SPI_STATE_READY) {};
	}
}
 80011d4:	e017      	b.n	8001206 <ST7565_w_cmds+0x7e>
		if (HAL_SPI_Transmit(&ST7565_SPI_HAL, Command, len, HAL_MAX_DELAY) != HAL_OK) devError |= devLCD;
 80011d6:	887a      	ldrh	r2, [r7, #2]
 80011d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011dc:	6879      	ldr	r1, [r7, #4]
 80011de:	480f      	ldr	r0, [pc, #60]	; (800121c <ST7565_w_cmds+0x94>)
 80011e0:	f008 fde1 	bl	8009da6 <HAL_SPI_Transmit>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d006      	beq.n	80011f8 <ST7565_w_cmds+0x70>
 80011ea:	4b0d      	ldr	r3, [pc, #52]	; (8001220 <ST7565_w_cmds+0x98>)
 80011ec:	881b      	ldrh	r3, [r3, #0]
 80011ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011f2:	b29a      	uxth	r2, r3
 80011f4:	4b0a      	ldr	r3, [pc, #40]	; (8001220 <ST7565_w_cmds+0x98>)
 80011f6:	801a      	strh	r2, [r3, #0]
		while (HAL_SPI_GetState(&ST7565_SPI_HAL) != HAL_SPI_STATE_READY) {};
 80011f8:	bf00      	nop
 80011fa:	4808      	ldr	r0, [pc, #32]	; (800121c <ST7565_w_cmds+0x94>)
 80011fc:	f009 fe22 	bl	800ae44 <HAL_SPI_GetState>
 8001200:	4603      	mov	r3, r0
 8001202:	2b01      	cmp	r3, #1
 8001204:	d1f9      	bne.n	80011fa <ST7565_w_cmds+0x72>
}
 8001206:	bf00      	nop
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	48000400 	.word	0x48000400
 8001214:	20000000 	.word	0x20000000
 8001218:	20000001 	.word	0x20000001
 800121c:	200008ec 	.word	0x200008ec
 8001220:	20001424 	.word	0x20001424

08001224 <ST7565_SetX>:
inline static void ST7565_SetX(uint8_t x)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	71fb      	strb	r3, [r7, #7]
	uint8_t bytes[] = { ((x & 0xf0) >> 4) | 0x10, x & 0x0f };
 800122e:	79fb      	ldrb	r3, [r7, #7]
 8001230:	091b      	lsrs	r3, r3, #4
 8001232:	b2db      	uxtb	r3, r3
 8001234:	f043 0310 	orr.w	r3, r3, #16
 8001238:	b2db      	uxtb	r3, r3
 800123a:	733b      	strb	r3, [r7, #12]
 800123c:	79fb      	ldrb	r3, [r7, #7]
 800123e:	f003 030f 	and.w	r3, r3, #15
 8001242:	b2db      	uxtb	r3, r3
 8001244:	737b      	strb	r3, [r7, #13]
	ST7565_w_cmds(bytes, 2);
 8001246:	f107 030c 	add.w	r3, r7, #12
 800124a:	2102      	movs	r1, #2
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff ff9b 	bl	8001188 <ST7565_w_cmds>
}
 8001252:	bf00      	nop
 8001254:	3710      	adds	r7, #16
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <ST7565_SetY>:
//
inline static void ST7565_SetY(uint8_t y)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b084      	sub	sp, #16
 800125e:	af00      	add	r7, sp, #0
 8001260:	4603      	mov	r3, r0
 8001262:	71fb      	strb	r3, [r7, #7]
	uint8_t byte = (y & 0x07) | 0xB0;
 8001264:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001268:	f003 0307 	and.w	r3, r3, #7
 800126c:	b25b      	sxtb	r3, r3
 800126e:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8001272:	b25b      	sxtb	r3, r3
 8001274:	b2db      	uxtb	r3, r3
 8001276:	73fb      	strb	r3, [r7, #15]
	ST7565_w_cmds(&byte, 1);
 8001278:	f107 030f 	add.w	r3, r7, #15
 800127c:	2101      	movs	r1, #1
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff ff82 	bl	8001188 <ST7565_w_cmds>
}
 8001284:	bf00      	nop
 8001286:	3710      	adds	r7, #16
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}

0800128c <ST7565_Display_fill>:
								( данные отправляются сразу на дисплей и записываются в буфер кадра )
								Функцию ST7565_Update() вызывать не нужно
	* @return  ( возвращает ):	
*******************************************************************************/
void ST7565_Display_fill(uint8_t fill)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
 8001292:	4603      	mov	r3, r0
 8001294:	71fb      	strb	r3, [r7, #7]
uint8_t page;//, column;
	
	memset(ST7565_buffer, fill, (SCREEN_WIDTH * SCREEN_HEIGHT / 8));	// отчистка памяти заполняем массив значением 0x00
 8001296:	79fb      	ldrb	r3, [r7, #7]
 8001298:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800129c:	4619      	mov	r1, r3
 800129e:	4814      	ldr	r0, [pc, #80]	; (80012f0 <ST7565_Display_fill+0x64>)
 80012a0:	f00c fae4 	bl	800d86c <memset>
	
	ST7565_Select();
 80012a4:	f7ff fef8 	bl	8001098 <ST7565_Select>
#ifdef SET_NEW_PROC
	uint8_t dta[] = {0, 0x10, 0};
 80012a8:	4a12      	ldr	r2, [pc, #72]	; (80012f4 <ST7565_Display_fill+0x68>)
 80012aa:	f107 030c 	add.w	r3, r7, #12
 80012ae:	6812      	ldr	r2, [r2, #0]
 80012b0:	4611      	mov	r1, r2
 80012b2:	8019      	strh	r1, [r3, #0]
 80012b4:	3302      	adds	r3, #2
 80012b6:	0c12      	lsrs	r2, r2, #16
 80012b8:	701a      	strb	r2, [r3, #0]
#endif
	for (page = 0xB7; page >= 0xB0; page-- ) {
 80012ba:	23b7      	movs	r3, #183	; 0xb7
 80012bc:	73fb      	strb	r3, [r7, #15]
 80012be:	e00e      	b.n	80012de <ST7565_Display_fill+0x52>
		ST7565_w_cmd(page);  //set page address
		ST7565_w_cmd(0x10);  //set Column address MSB   
		ST7565_w_cmd(0x00);  //set column address LSB
		for (column = 0; column < 131; column++) ST7565_w_dat(fill);
#else
		dta[0] = page;
 80012c0:	7bfb      	ldrb	r3, [r7, #15]
 80012c2:	733b      	strb	r3, [r7, #12]
		ST7565_w_cmds(dta, sizeof(dta));
 80012c4:	f107 030c 	add.w	r3, r7, #12
 80012c8:	2103      	movs	r1, #3
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff ff5c 	bl	8001188 <ST7565_w_cmds>
		ST7565_w_dats(ST7565_buffer, 131);
 80012d0:	2183      	movs	r1, #131	; 0x83
 80012d2:	4807      	ldr	r0, [pc, #28]	; (80012f0 <ST7565_Display_fill+0x64>)
 80012d4:	f7ff ff0c 	bl	80010f0 <ST7565_w_dats>
	for (page = 0xB7; page >= 0xB0; page-- ) {
 80012d8:	7bfb      	ldrb	r3, [r7, #15]
 80012da:	3b01      	subs	r3, #1
 80012dc:	73fb      	strb	r3, [r7, #15]
 80012de:	7bfb      	ldrb	r3, [r7, #15]
 80012e0:	2baf      	cmp	r3, #175	; 0xaf
 80012e2:	d8ed      	bhi.n	80012c0 <ST7565_Display_fill+0x34>
#endif
    }
		
	ST7565_Unselect();
 80012e4:	f7ff fee4 	bl	80010b0 <ST7565_Unselect>
}
 80012e8:	bf00      	nop
 80012ea:	3710      	adds	r7, #16
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	200003e4 	.word	0x200003e4
 80012f4:	08011e00 	.word	0x08011e00

080012f8 <ST7565_Init>:
	* @brief	 ( описание ):  инициализация дисплея ( при другой инициализации можно поменять параметры внутри функции )
	* @param	( параметры ):	
	* @return  ( возвращает ):	
*******************************************************************************/
void ST7565_Init()
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
	ST7565_Select();
 80012fe:	f7ff fecb 	bl	8001098 <ST7565_Select>
	ST7565_w_cmd(CMD_DISPLAY_ON);    		//Display on
	// Инвертирование экрана CMD_SET_DISP_NORMAL - OFF    CMD_SET_DISP_REVERSE - ON
	ST7565_w_cmd(CMD_SET_DISP_NORMAL);
	//HAL_Delay(1);//1
#else
	uint8_t dta[] = {
 8001302:	4a09      	ldr	r2, [pc, #36]	; (8001328 <ST7565_Init+0x30>)
 8001304:	1d3b      	adds	r3, r7, #4
 8001306:	ca07      	ldmia	r2, {r0, r1, r2}
 8001308:	c303      	stmia	r3!, {r0, r1}
 800130a:	801a      	strh	r2, [r3, #0]
	};
	#if defined (SCREEN_ORIENTATION_180)
		dta[1] = CMD_SET_ADC_REVERSE;    	//ADC selection(SEG0->SEG128)  CMD_SET_ADC_NORMAL горизонтально «нормальная» (не перевернутая)
		dta[2] = CMD_SET_COM_NORMAL;    		//SHL selection(COM0->COM64)   CMD_SET_COM_REVERSE вертикально «перевернутая» (дополняет команду выше)
	#endif
	ST7565_w_cmds(dta, sizeof(dta));
 800130c:	1d3b      	adds	r3, r7, #4
 800130e:	210a      	movs	r1, #10
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff ff39 	bl	8001188 <ST7565_w_cmds>
#endif
	
	ST7565_Display_fill(0);
 8001316:	2000      	movs	r0, #0
 8001318:	f7ff ffb8 	bl	800128c <ST7565_Display_fill>
	
	ST7565_Unselect();
 800131c:	f7ff fec8 	bl	80010b0 <ST7565_Unselect>
   
}
 8001320:	bf00      	nop
 8001322:	3710      	adds	r7, #16
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	08011e04 	.word	0x08011e04

0800132c <ST7565_CMD_DISPLAY>:
//--------------------------------------------------------------------------------
void ST7565_CMD_DISPLAY(uint8_t byte)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	4603      	mov	r3, r0
 8001334:	71fb      	strb	r3, [r7, #7]
#ifdef SET_NEW_PROC
	ST7565_w_cmds(&byte, 1);
 8001336:	1dfb      	adds	r3, r7, #7
 8001338:	2101      	movs	r1, #1
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff ff24 	bl	8001188 <ST7565_w_cmds>
#else
	ST7565_w_cmd(byte);
#endif
}
 8001340:	bf00      	nop
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}

08001348 <ST7565_Draw_pixel>:
	* @param	( параметры ):	координата X(0 - 127) и координата Y(0 - 63)  color 1 or 0
	* @return  ( возвращает ):	
*******************************************************************************/
// X(0 - 127)  Y(0 - 63)
void ST7565_Draw_pixel(int16_t x, int16_t y, uint8_t color)
{
 8001348:	b480      	push	{r7}
 800134a:	b085      	sub	sp, #20
 800134c:	af00      	add	r7, sp, #0
 800134e:	4603      	mov	r3, r0
 8001350:	80fb      	strh	r3, [r7, #6]
 8001352:	460b      	mov	r3, r1
 8001354:	80bb      	strh	r3, [r7, #4]
 8001356:	4613      	mov	r3, r2
 8001358:	70fb      	strb	r3, [r7, #3]
    if (x >= SCREEN_WIDTH || x < 0 || y >= SCREEN_HEIGHT || y < 0) return;
 800135a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800135e:	2b7f      	cmp	r3, #127	; 0x7f
 8001360:	dc4c      	bgt.n	80013fc <ST7565_Draw_pixel+0xb4>
 8001362:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001366:	2b00      	cmp	r3, #0
 8001368:	db48      	blt.n	80013fc <ST7565_Draw_pixel+0xb4>
 800136a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800136e:	2b3f      	cmp	r3, #63	; 0x3f
 8001370:	dc44      	bgt.n	80013fc <ST7565_Draw_pixel+0xb4>
 8001372:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001376:	2b00      	cmp	r3, #0
 8001378:	db40      	blt.n	80013fc <ST7565_Draw_pixel+0xb4>

    uint16_t array_pos = x + ((y >> 3) * SCREEN_WIDTH );
 800137a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800137e:	10db      	asrs	r3, r3, #3
 8001380:	b21b      	sxth	r3, r3
 8001382:	b29b      	uxth	r3, r3
 8001384:	01db      	lsls	r3, r3, #7
 8001386:	b29a      	uxth	r2, r3
 8001388:	88fb      	ldrh	r3, [r7, #6]
 800138a:	4413      	add	r3, r2
 800138c:	81fb      	strh	r3, [r7, #14]

    if (color) {
 800138e:	78fb      	ldrb	r3, [r7, #3]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d018      	beq.n	80013c6 <ST7565_Draw_pixel+0x7e>
        ST7565_buffer[array_pos] |= 1 << (y % 8);
 8001394:	89fb      	ldrh	r3, [r7, #14]
 8001396:	4a1c      	ldr	r2, [pc, #112]	; (8001408 <ST7565_Draw_pixel+0xc0>)
 8001398:	5cd3      	ldrb	r3, [r2, r3]
 800139a:	b25a      	sxtb	r2, r3
 800139c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80013a0:	4259      	negs	r1, r3
 80013a2:	f003 0307 	and.w	r3, r3, #7
 80013a6:	f001 0107 	and.w	r1, r1, #7
 80013aa:	bf58      	it	pl
 80013ac:	424b      	negpl	r3, r1
 80013ae:	b21b      	sxth	r3, r3
 80013b0:	4619      	mov	r1, r3
 80013b2:	2301      	movs	r3, #1
 80013b4:	408b      	lsls	r3, r1
 80013b6:	b25b      	sxtb	r3, r3
 80013b8:	4313      	orrs	r3, r2
 80013ba:	b25a      	sxtb	r2, r3
 80013bc:	89fb      	ldrh	r3, [r7, #14]
 80013be:	b2d1      	uxtb	r1, r2
 80013c0:	4a11      	ldr	r2, [pc, #68]	; (8001408 <ST7565_Draw_pixel+0xc0>)
 80013c2:	54d1      	strb	r1, [r2, r3]
 80013c4:	e01b      	b.n	80013fe <ST7565_Draw_pixel+0xb6>
    } else {
        ST7565_buffer[array_pos] &= 0xFF ^ 1 << (y % 8);
 80013c6:	89fb      	ldrh	r3, [r7, #14]
 80013c8:	4a0f      	ldr	r2, [pc, #60]	; (8001408 <ST7565_Draw_pixel+0xc0>)
 80013ca:	5cd3      	ldrb	r3, [r2, r3]
 80013cc:	b25a      	sxtb	r2, r3
 80013ce:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80013d2:	4259      	negs	r1, r3
 80013d4:	f003 0307 	and.w	r3, r3, #7
 80013d8:	f001 0107 	and.w	r1, r1, #7
 80013dc:	bf58      	it	pl
 80013de:	424b      	negpl	r3, r1
 80013e0:	b21b      	sxth	r3, r3
 80013e2:	4619      	mov	r1, r3
 80013e4:	2301      	movs	r3, #1
 80013e6:	408b      	lsls	r3, r1
 80013e8:	b25b      	sxtb	r3, r3
 80013ea:	43db      	mvns	r3, r3
 80013ec:	b25b      	sxtb	r3, r3
 80013ee:	4013      	ands	r3, r2
 80013f0:	b25a      	sxtb	r2, r3
 80013f2:	89fb      	ldrh	r3, [r7, #14]
 80013f4:	b2d1      	uxtb	r1, r2
 80013f6:	4a04      	ldr	r2, [pc, #16]	; (8001408 <ST7565_Draw_pixel+0xc0>)
 80013f8:	54d1      	strb	r1, [r2, r3]
 80013fa:	e000      	b.n	80013fe <ST7565_Draw_pixel+0xb6>
    if (x >= SCREEN_WIDTH || x < 0 || y >= SCREEN_HEIGHT || y < 0) return;
 80013fc:	bf00      	nop
    }
}
 80013fe:	3714      	adds	r7, #20
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr
 8001408:	200003e4 	.word	0x200003e4

0800140c <ST7565_Update>:
	* @brief	 ( описание ):  вывод буффера кадра на дисплей
	* @param	( параметры ):	
	* @return  ( возвращает ):	
*******************************************************************************/
void ST7565_Update()
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
uint8_t x, y;
		
	ST7565_Select();
 8001412:	f7ff fe41 	bl	8001098 <ST7565_Select>

  	for (y = 0; y < 8; y++) {
 8001416:	2300      	movs	r3, #0
 8001418:	71bb      	strb	r3, [r7, #6]
 800141a:	e01d      	b.n	8001458 <ST7565_Update+0x4c>
		ST7565_SetX(0);	
 800141c:	2000      	movs	r0, #0
 800141e:	f7ff ff01 	bl	8001224 <ST7565_SetX>
		ST7565_SetY(y);
 8001422:	79bb      	ldrb	r3, [r7, #6]
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff ff18 	bl	800125a <ST7565_SetY>
		for (x = 0; x < 128; x++) {
 800142a:	2300      	movs	r3, #0
 800142c:	71fb      	strb	r3, [r7, #7]
 800142e:	e00c      	b.n	800144a <ST7565_Update+0x3e>
			ST7565_w_dats(&ST7565_buffer[x + 128 * y], 1);
 8001430:	79fa      	ldrb	r2, [r7, #7]
 8001432:	79bb      	ldrb	r3, [r7, #6]
 8001434:	01db      	lsls	r3, r3, #7
 8001436:	4413      	add	r3, r2
 8001438:	4a0d      	ldr	r2, [pc, #52]	; (8001470 <ST7565_Update+0x64>)
 800143a:	4413      	add	r3, r2
 800143c:	2101      	movs	r1, #1
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff fe56 	bl	80010f0 <ST7565_w_dats>
		for (x = 0; x < 128; x++) {
 8001444:	79fb      	ldrb	r3, [r7, #7]
 8001446:	3301      	adds	r3, #1
 8001448:	71fb      	strb	r3, [r7, #7]
 800144a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144e:	2b00      	cmp	r3, #0
 8001450:	daee      	bge.n	8001430 <ST7565_Update+0x24>
  	for (y = 0; y < 8; y++) {
 8001452:	79bb      	ldrb	r3, [r7, #6]
 8001454:	3301      	adds	r3, #1
 8001456:	71bb      	strb	r3, [r7, #6]
 8001458:	79bb      	ldrb	r3, [r7, #6]
 800145a:	2b07      	cmp	r3, #7
 800145c:	d9de      	bls.n	800141c <ST7565_Update+0x10>
		}
	}
	
	ST7565_Unselect();
 800145e:	f7ff fe27 	bl	80010b0 <ST7565_Unselect>
	HAL_Delay(100);
 8001462:	2064      	movs	r0, #100	; 0x64
 8001464:	f004 fb50 	bl	8005b08 <HAL_Delay>
}
 8001468:	bf00      	nop
 800146a:	3708      	adds	r7, #8
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	200003e4 	.word	0x200003e4

08001474 <ST7565_DrawChar>:
	* @brief	 ( описание ):  функция записывает 1 символ в буфер кадра
	* @param	( параметры ):	координаты X(0 - 127)  Y(0 - 63), символ, шрифт, множитель, цвет 1 или 0
	* @return  ( возвращает ):	
*******************************************************************************/
void ST7565_DrawChar(int16_t x, int16_t y, unsigned char ch, FontDef_t* Font, uint8_t multiplier, uint8_t color)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b088      	sub	sp, #32
 8001478:	af00      	add	r7, sp, #0
 800147a:	607b      	str	r3, [r7, #4]
 800147c:	4603      	mov	r3, r0
 800147e:	81fb      	strh	r3, [r7, #14]
 8001480:	460b      	mov	r3, r1
 8001482:	81bb      	strh	r3, [r7, #12]
 8001484:	4613      	mov	r3, r2
 8001486:	72fb      	strb	r3, [r7, #11]
uint16_t i, j;
uint16_t b;
int16_t X = x, Y = y;
 8001488:	89fb      	ldrh	r3, [r7, #14]
 800148a:	833b      	strh	r3, [r7, #24]
 800148c:	89bb      	ldrh	r3, [r7, #12]
 800148e:	82fb      	strh	r3, [r7, #22]
int16_t xx, yy;
	
	if (multiplier < 1) multiplier = 1;
 8001490:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001494:	2b00      	cmp	r3, #0
 8001496:	d102      	bne.n	800149e <ST7565_DrawChar+0x2a>
 8001498:	2301      	movs	r3, #1
 800149a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	
	// Check available space in LCD
	if (SCREEN_WIDTH >= ( x + Font->FontWidth) || SCREEN_HEIGHT >= ( y + Font->FontHeight)) {
 800149e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	7812      	ldrb	r2, [r2, #0]
 80014a6:	4413      	add	r3, r2
 80014a8:	2b80      	cmp	r3, #128	; 0x80
 80014aa:	dd07      	ble.n	80014bc <ST7565_DrawChar+0x48>
 80014ac:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80014b0:	687a      	ldr	r2, [r7, #4]
 80014b2:	7852      	ldrb	r2, [r2, #1]
 80014b4:	4413      	add	r3, r2
 80014b6:	2b40      	cmp	r3, #64	; 0x40
 80014b8:	f300 8154 	bgt.w	8001764 <ST7565_DrawChar+0x2f0>
		// Go through font
		for (i = 0; i < Font->FontHeight; i++) {
 80014bc:	2300      	movs	r3, #0
 80014be:	83fb      	strh	r3, [r7, #30]
 80014c0:	e149      	b.n	8001756 <ST7565_DrawChar+0x2e2>
			if (ch < 127) {
 80014c2:	7afb      	ldrb	r3, [r7, #11]
 80014c4:	2b7e      	cmp	r3, #126	; 0x7e
 80014c6:	d80f      	bhi.n	80014e8 <ST7565_DrawChar+0x74>
				b = Font->data[(ch - 32) * Font->FontHeight + i];
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	f8d3 2002 	ldr.w	r2, [r3, #2]
 80014ce:	7afb      	ldrb	r3, [r7, #11]
 80014d0:	3b20      	subs	r3, #32
 80014d2:	6879      	ldr	r1, [r7, #4]
 80014d4:	7849      	ldrb	r1, [r1, #1]
 80014d6:	fb03 f101 	mul.w	r1, r3, r1
 80014da:	8bfb      	ldrh	r3, [r7, #30]
 80014dc:	440b      	add	r3, r1
 80014de:	005b      	lsls	r3, r3, #1
 80014e0:	4413      	add	r3, r2
 80014e2:	881b      	ldrh	r3, [r3, #0]
 80014e4:	837b      	strh	r3, [r7, #26]
 80014e6:	e0af      	b.n	8001648 <ST7565_DrawChar+0x1d4>
			} else if (ch > 191) {
 80014e8:	7afb      	ldrb	r3, [r7, #11]
 80014ea:	2bbf      	cmp	r3, #191	; 0xbf
 80014ec:	d90f      	bls.n	800150e <ST7565_DrawChar+0x9a>
				// +96 это так как латинские символы и знаки в шрифтах занимают 96 позиций
				// и если в шрифте который содержит сперва латиницу и спец символы и потом 
				// только кирилицу то нужно добавлять 95 если шрифт 
				// содержит только кирилицу то +96 не нужно
				b = Font->data[((ch - 192) + 96) * Font->FontHeight + i];
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	f8d3 2002 	ldr.w	r2, [r3, #2]
 80014f4:	7afb      	ldrb	r3, [r7, #11]
 80014f6:	3b60      	subs	r3, #96	; 0x60
 80014f8:	6879      	ldr	r1, [r7, #4]
 80014fa:	7849      	ldrb	r1, [r1, #1]
 80014fc:	fb03 f101 	mul.w	r1, r3, r1
 8001500:	8bfb      	ldrh	r3, [r7, #30]
 8001502:	440b      	add	r3, r1
 8001504:	005b      	lsls	r3, r3, #1
 8001506:	4413      	add	r3, r2
 8001508:	881b      	ldrh	r3, [r3, #0]
 800150a:	837b      	strh	r3, [r7, #26]
 800150c:	e09c      	b.n	8001648 <ST7565_DrawChar+0x1d4>
			} else if (ch == 168) {	// 168 символ по ASCII - Ё
 800150e:	7afb      	ldrb	r3, [r7, #11]
 8001510:	2ba8      	cmp	r3, #168	; 0xa8
 8001512:	d111      	bne.n	8001538 <ST7565_DrawChar+0xc4>
				// 160 эллемент ( символ Ё ) 
				b = Font->data[160 * Font->FontHeight + i];
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	f8d3 2002 	ldr.w	r2, [r3, #2]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	785b      	ldrb	r3, [r3, #1]
 800151e:	4619      	mov	r1, r3
 8001520:	460b      	mov	r3, r1
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	440b      	add	r3, r1
 8001526:	015b      	lsls	r3, r3, #5
 8001528:	4619      	mov	r1, r3
 800152a:	8bfb      	ldrh	r3, [r7, #30]
 800152c:	440b      	add	r3, r1
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	4413      	add	r3, r2
 8001532:	881b      	ldrh	r3, [r3, #0]
 8001534:	837b      	strh	r3, [r7, #26]
 8001536:	e087      	b.n	8001648 <ST7565_DrawChar+0x1d4>
			} else if (ch == 184) {	// 184 символ по ASCII - ё
 8001538:	7afb      	ldrb	r3, [r7, #11]
 800153a:	2bb8      	cmp	r3, #184	; 0xb8
 800153c:	d111      	bne.n	8001562 <ST7565_DrawChar+0xee>
				// 161 эллемент  ( символ ё ) 
				b = Font->data[161 * Font->FontHeight + i];
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	f8d3 1002 	ldr.w	r1, [r3, #2]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	785b      	ldrb	r3, [r3, #1]
 8001548:	461a      	mov	r2, r3
 800154a:	4613      	mov	r3, r2
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	4413      	add	r3, r2
 8001550:	015b      	lsls	r3, r3, #5
 8001552:	441a      	add	r2, r3
 8001554:	8bfb      	ldrh	r3, [r7, #30]
 8001556:	4413      	add	r3, r2
 8001558:	005b      	lsls	r3, r3, #1
 800155a:	440b      	add	r3, r1
 800155c:	881b      	ldrh	r3, [r3, #0]
 800155e:	837b      	strh	r3, [r7, #26]
 8001560:	e072      	b.n	8001648 <ST7565_DrawChar+0x1d4>
			} else if (ch == 170) {	// 168 символ по ASCII - Є
 8001562:	7afb      	ldrb	r3, [r7, #11]
 8001564:	2baa      	cmp	r3, #170	; 0xaa
 8001566:	d10f      	bne.n	8001588 <ST7565_DrawChar+0x114>
				// 162 эллемент ( символ Є )
				b = Font->data[162 * Font->FontHeight + i];
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	f8d3 2002 	ldr.w	r2, [r3, #2]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	785b      	ldrb	r3, [r3, #1]
 8001572:	4619      	mov	r1, r3
 8001574:	23a2      	movs	r3, #162	; 0xa2
 8001576:	fb03 f101 	mul.w	r1, r3, r1
 800157a:	8bfb      	ldrh	r3, [r7, #30]
 800157c:	440b      	add	r3, r1
 800157e:	005b      	lsls	r3, r3, #1
 8001580:	4413      	add	r3, r2
 8001582:	881b      	ldrh	r3, [r3, #0]
 8001584:	837b      	strh	r3, [r7, #26]
 8001586:	e05f      	b.n	8001648 <ST7565_DrawChar+0x1d4>
			} else if (ch == 175) {	// 184 символ по ASCII - Ї
 8001588:	7afb      	ldrb	r3, [r7, #11]
 800158a:	2baf      	cmp	r3, #175	; 0xaf
 800158c:	d10f      	bne.n	80015ae <ST7565_DrawChar+0x13a>
				// 163 эллемент  ( символ Ї )
				b = Font->data[163 * Font->FontHeight + i];
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	f8d3 2002 	ldr.w	r2, [r3, #2]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	785b      	ldrb	r3, [r3, #1]
 8001598:	4619      	mov	r1, r3
 800159a:	23a3      	movs	r3, #163	; 0xa3
 800159c:	fb03 f101 	mul.w	r1, r3, r1
 80015a0:	8bfb      	ldrh	r3, [r7, #30]
 80015a2:	440b      	add	r3, r1
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	4413      	add	r3, r2
 80015a8:	881b      	ldrh	r3, [r3, #0]
 80015aa:	837b      	strh	r3, [r7, #26]
 80015ac:	e04c      	b.n	8001648 <ST7565_DrawChar+0x1d4>
			} else if (ch == 178) {	// 168 символ по ASCII - І
 80015ae:	7afb      	ldrb	r3, [r7, #11]
 80015b0:	2bb2      	cmp	r3, #178	; 0xb2
 80015b2:	d10f      	bne.n	80015d4 <ST7565_DrawChar+0x160>
				// 164 эллемент ( символ І )
				b = Font->data[164 * Font->FontHeight + i];
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	f8d3 2002 	ldr.w	r2, [r3, #2]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	785b      	ldrb	r3, [r3, #1]
 80015be:	4619      	mov	r1, r3
 80015c0:	23a4      	movs	r3, #164	; 0xa4
 80015c2:	fb03 f101 	mul.w	r1, r3, r1
 80015c6:	8bfb      	ldrh	r3, [r7, #30]
 80015c8:	440b      	add	r3, r1
 80015ca:	005b      	lsls	r3, r3, #1
 80015cc:	4413      	add	r3, r2
 80015ce:	881b      	ldrh	r3, [r3, #0]
 80015d0:	837b      	strh	r3, [r7, #26]
 80015d2:	e039      	b.n	8001648 <ST7565_DrawChar+0x1d4>
			}
			else if (ch == 179) {	// 184 символ по ASCII - і
 80015d4:	7afb      	ldrb	r3, [r7, #11]
 80015d6:	2bb3      	cmp	r3, #179	; 0xb3
 80015d8:	d111      	bne.n	80015fe <ST7565_DrawChar+0x18a>
				// 165 эллемент  ( символ і )
				b = Font->data[165 * Font->FontHeight + i];
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	f8d3 2002 	ldr.w	r2, [r3, #2]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	785b      	ldrb	r3, [r3, #1]
 80015e4:	4619      	mov	r1, r3
 80015e6:	460b      	mov	r3, r1
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	440b      	add	r3, r1
 80015ec:	0159      	lsls	r1, r3, #5
 80015ee:	4419      	add	r1, r3
 80015f0:	8bfb      	ldrh	r3, [r7, #30]
 80015f2:	440b      	add	r3, r1
 80015f4:	005b      	lsls	r3, r3, #1
 80015f6:	4413      	add	r3, r2
 80015f8:	881b      	ldrh	r3, [r3, #0]
 80015fa:	837b      	strh	r3, [r7, #26]
 80015fc:	e024      	b.n	8001648 <ST7565_DrawChar+0x1d4>
			} else if (ch == 186) {	// 184 символ по ASCII - є
 80015fe:	7afb      	ldrb	r3, [r7, #11]
 8001600:	2bba      	cmp	r3, #186	; 0xba
 8001602:	d10f      	bne.n	8001624 <ST7565_DrawChar+0x1b0>
				// 166 эллемент  ( символ є )
				b = Font->data[166 * Font->FontHeight + i];
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	f8d3 2002 	ldr.w	r2, [r3, #2]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	785b      	ldrb	r3, [r3, #1]
 800160e:	4619      	mov	r1, r3
 8001610:	23a6      	movs	r3, #166	; 0xa6
 8001612:	fb03 f101 	mul.w	r1, r3, r1
 8001616:	8bfb      	ldrh	r3, [r7, #30]
 8001618:	440b      	add	r3, r1
 800161a:	005b      	lsls	r3, r3, #1
 800161c:	4413      	add	r3, r2
 800161e:	881b      	ldrh	r3, [r3, #0]
 8001620:	837b      	strh	r3, [r7, #26]
 8001622:	e011      	b.n	8001648 <ST7565_DrawChar+0x1d4>
			} else if (ch == 191) {	// 168 символ по ASCII - ї
 8001624:	7afb      	ldrb	r3, [r7, #11]
 8001626:	2bbf      	cmp	r3, #191	; 0xbf
 8001628:	d10e      	bne.n	8001648 <ST7565_DrawChar+0x1d4>
				// 167 эллемент ( символ ї )
				b = Font->data[167 * Font->FontHeight + i];
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	f8d3 2002 	ldr.w	r2, [r3, #2]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	785b      	ldrb	r3, [r3, #1]
 8001634:	4619      	mov	r1, r3
 8001636:	23a7      	movs	r3, #167	; 0xa7
 8001638:	fb03 f101 	mul.w	r1, r3, r1
 800163c:	8bfb      	ldrh	r3, [r7, #30]
 800163e:	440b      	add	r3, r1
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	4413      	add	r3, r2
 8001644:	881b      	ldrh	r3, [r3, #0]
 8001646:	837b      	strh	r3, [r7, #26]
			}
			//-----------------------------------------------------------------------------
			
			for (j = 0; j < Font->FontWidth; j++) {
 8001648:	2300      	movs	r3, #0
 800164a:	83bb      	strh	r3, [r7, #28]
 800164c:	e071      	b.n	8001732 <ST7565_DrawChar+0x2be>
				if ((b << j) & 0x8000) {
 800164e:	8b7a      	ldrh	r2, [r7, #26]
 8001650:	8bbb      	ldrh	r3, [r7, #28]
 8001652:	fa02 f303 	lsl.w	r3, r2, r3
 8001656:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d02d      	beq.n	80016ba <ST7565_DrawChar+0x246>
					for (yy = 0; yy < multiplier; yy++){
 800165e:	2300      	movs	r3, #0
 8001660:	827b      	strh	r3, [r7, #18]
 8001662:	e023      	b.n	80016ac <ST7565_DrawChar+0x238>
						for (xx = 0; xx < multiplier; xx++){
 8001664:	2300      	movs	r3, #0
 8001666:	82bb      	strh	r3, [r7, #20]
 8001668:	e014      	b.n	8001694 <ST7565_DrawChar+0x220>
							ST7565_Draw_pixel(X + xx, Y + yy, color);
 800166a:	8b3a      	ldrh	r2, [r7, #24]
 800166c:	8abb      	ldrh	r3, [r7, #20]
 800166e:	4413      	add	r3, r2
 8001670:	b29b      	uxth	r3, r3
 8001672:	b218      	sxth	r0, r3
 8001674:	8afa      	ldrh	r2, [r7, #22]
 8001676:	8a7b      	ldrh	r3, [r7, #18]
 8001678:	4413      	add	r3, r2
 800167a:	b29b      	uxth	r3, r3
 800167c:	b21b      	sxth	r3, r3
 800167e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8001682:	4619      	mov	r1, r3
 8001684:	f7ff fe60 	bl	8001348 <ST7565_Draw_pixel>
						for (xx = 0; xx < multiplier; xx++){
 8001688:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800168c:	b29b      	uxth	r3, r3
 800168e:	3301      	adds	r3, #1
 8001690:	b29b      	uxth	r3, r3
 8001692:	82bb      	strh	r3, [r7, #20]
 8001694:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001698:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800169c:	429a      	cmp	r2, r3
 800169e:	dbe4      	blt.n	800166a <ST7565_DrawChar+0x1f6>
					for (yy = 0; yy < multiplier; yy++){
 80016a0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80016a4:	b29b      	uxth	r3, r3
 80016a6:	3301      	adds	r3, #1
 80016a8:	b29b      	uxth	r3, r3
 80016aa:	827b      	strh	r3, [r7, #18]
 80016ac:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80016b0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80016b4:	429a      	cmp	r2, r3
 80016b6:	dbd5      	blt.n	8001664 <ST7565_DrawChar+0x1f0>
 80016b8:	e031      	b.n	800171e <ST7565_DrawChar+0x2aa>
						}
					}
				} else {// если фон очищать то оставляем если чтоб фон оставался старый то коментируем эту часть -------------
					for (yy = 0; yy < multiplier; yy++){
 80016ba:	2300      	movs	r3, #0
 80016bc:	827b      	strh	r3, [r7, #18]
 80016be:	e028      	b.n	8001712 <ST7565_DrawChar+0x29e>
						for (xx = 0; xx < multiplier; xx++){
 80016c0:	2300      	movs	r3, #0
 80016c2:	82bb      	strh	r3, [r7, #20]
 80016c4:	e019      	b.n	80016fa <ST7565_DrawChar+0x286>
							ST7565_Draw_pixel(X + xx, Y + yy, !color);
 80016c6:	8b3a      	ldrh	r2, [r7, #24]
 80016c8:	8abb      	ldrh	r3, [r7, #20]
 80016ca:	4413      	add	r3, r2
 80016cc:	b29b      	uxth	r3, r3
 80016ce:	b218      	sxth	r0, r3
 80016d0:	8afa      	ldrh	r2, [r7, #22]
 80016d2:	8a7b      	ldrh	r3, [r7, #18]
 80016d4:	4413      	add	r3, r2
 80016d6:	b29b      	uxth	r3, r3
 80016d8:	b219      	sxth	r1, r3
 80016da:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80016de:	2b00      	cmp	r3, #0
 80016e0:	bf0c      	ite	eq
 80016e2:	2301      	moveq	r3, #1
 80016e4:	2300      	movne	r3, #0
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	461a      	mov	r2, r3
 80016ea:	f7ff fe2d 	bl	8001348 <ST7565_Draw_pixel>
						for (xx = 0; xx < multiplier; xx++){
 80016ee:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80016f2:	b29b      	uxth	r3, r3
 80016f4:	3301      	adds	r3, #1
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	82bb      	strh	r3, [r7, #20]
 80016fa:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80016fe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001702:	429a      	cmp	r2, r3
 8001704:	dbdf      	blt.n	80016c6 <ST7565_DrawChar+0x252>
					for (yy = 0; yy < multiplier; yy++){
 8001706:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800170a:	b29b      	uxth	r3, r3
 800170c:	3301      	adds	r3, #1
 800170e:	b29b      	uxth	r3, r3
 8001710:	827b      	strh	r3, [r7, #18]
 8001712:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001716:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800171a:	429a      	cmp	r2, r3
 800171c:	dbd0      	blt.n	80016c0 <ST7565_DrawChar+0x24c>
						}
					}
				}
				//----------------------------------------------------------------------------------------------------
				X += multiplier;
 800171e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001722:	b29a      	uxth	r2, r3
 8001724:	8b3b      	ldrh	r3, [r7, #24]
 8001726:	4413      	add	r3, r2
 8001728:	b29b      	uxth	r3, r3
 800172a:	833b      	strh	r3, [r7, #24]
			for (j = 0; j < Font->FontWidth; j++) {
 800172c:	8bbb      	ldrh	r3, [r7, #28]
 800172e:	3301      	adds	r3, #1
 8001730:	83bb      	strh	r3, [r7, #28]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	b29b      	uxth	r3, r3
 8001738:	8bba      	ldrh	r2, [r7, #28]
 800173a:	429a      	cmp	r2, r3
 800173c:	d387      	bcc.n	800164e <ST7565_DrawChar+0x1da>
			}
			X = x;
 800173e:	89fb      	ldrh	r3, [r7, #14]
 8001740:	833b      	strh	r3, [r7, #24]
			Y += multiplier;
 8001742:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001746:	b29a      	uxth	r2, r3
 8001748:	8afb      	ldrh	r3, [r7, #22]
 800174a:	4413      	add	r3, r2
 800174c:	b29b      	uxth	r3, r3
 800174e:	82fb      	strh	r3, [r7, #22]
		for (i = 0; i < Font->FontHeight; i++) {
 8001750:	8bfb      	ldrh	r3, [r7, #30]
 8001752:	3301      	adds	r3, #1
 8001754:	83fb      	strh	r3, [r7, #30]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	785b      	ldrb	r3, [r3, #1]
 800175a:	b29b      	uxth	r3, r3
 800175c:	8bfa      	ldrh	r2, [r7, #30]
 800175e:	429a      	cmp	r2, r3
 8001760:	f4ff aeaf 	bcc.w	80014c2 <ST7565_DrawChar+0x4e>
		}
		
	}
}
 8001764:	bf00      	nop
 8001766:	3720      	adds	r7, #32
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}

0800176c <ST7565_Print>:
 * @brief	 ( описание ):  функция записывает строку в буфер кадра ( поддерживает кириллицу ( в том числе и Укр. язык) и латиницу
 * @param	( параметры ):	координаты X(0 - 127)  Y(0 - 63), символ, шрифт, множитель, цвет 1 или 0
 * @return  ( возвращает ):
*******************************************************************************/
void ST7565_Print(int16_t x, int16_t y, char *str, FontDef_t *Font, uint8_t multiplier, uint8_t color)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b088      	sub	sp, #32
 8001770:	af02      	add	r7, sp, #8
 8001772:	60ba      	str	r2, [r7, #8]
 8001774:	607b      	str	r3, [r7, #4]
 8001776:	4603      	mov	r3, r0
 8001778:	81fb      	strh	r3, [r7, #14]
 800177a:	460b      	mov	r3, r1
 800177c:	81bb      	strh	r3, [r7, #12]
unsigned char buff_char;
uint16_t len = strlen(str);
 800177e:	68b8      	ldr	r0, [r7, #8]
 8001780:	f7fe fd26 	bl	80001d0 <strlen>
 8001784:	4603      	mov	r3, r0
 8001786:	82bb      	strh	r3, [r7, #20]

	if (multiplier < 1) multiplier = 1;
 8001788:	f897 3020 	ldrb.w	r3, [r7, #32]
 800178c:	2b00      	cmp	r3, #0
 800178e:	f040 809c 	bne.w	80018ca <ST7565_Print+0x15e>
 8001792:	2301      	movs	r3, #1
 8001794:	f887 3020 	strb.w	r3, [r7, #32]
	
	while (len--) {
 8001798:	e097      	b.n	80018ca <ST7565_Print+0x15e>
		//---------------------------------------------------------------------
		// проверка на кириллицу UTF-8, если латиница то пропускаем if
		// Расширенные символы ASCII Win-1251 кириллица (код символа 128-255)
		// проверяем первый байт из двух ( так как UTF-8 ето два байта )
		// если он больше либо равен 0xC0 ( первый байт в кириллеце будет равен 0xD0 либо 0xD1 именно в алфавите )
		if ( (uint8_t)*str >= 0xC0 ) {	// код 0xC0 соответствует символу кириллица 'A' по ASCII Win-1251
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	2bbf      	cmp	r3, #191	; 0xbf
 80017a0:	d974      	bls.n	800188c <ST7565_Print+0x120>
			// проверяем какой именно байт первый 0xD0 либо 0xD1
			switch ((uint8_t)*str) {
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	2bd0      	cmp	r3, #208	; 0xd0
 80017a8:	d002      	beq.n	80017b0 <ST7565_Print+0x44>
 80017aa:	2bd1      	cmp	r3, #209	; 0xd1
 80017ac:	d02c      	beq.n	8001808 <ST7565_Print+0x9c>
 80017ae:	e05b      	b.n	8001868 <ST7565_Print+0xfc>
				case 0xD0:
				//{
					// увеличиваем массив так как нам нужен второй байт
					str++;
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	3301      	adds	r3, #1
 80017b4:	60bb      	str	r3, [r7, #8]
					// проверяем второй байт там сам символ
					if ((uint8_t)*str == 0x81) { buff_char = 0xA8; break; }		// байт символа Ё ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	2b81      	cmp	r3, #129	; 0x81
 80017bc:	d102      	bne.n	80017c4 <ST7565_Print+0x58>
 80017be:	23a8      	movs	r3, #168	; 0xa8
 80017c0:	75fb      	strb	r3, [r7, #23]
 80017c2:	e051      	b.n	8001868 <ST7565_Print+0xfc>
					else if ((uint8_t)*str >= 0x90 && (uint8_t)*str <= 0xBF) { buff_char = (*str) + 0x30; }	// байт символов А...Я а...п  делаем здвиг на +48
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	2b8f      	cmp	r3, #143	; 0x8f
 80017ca:	d908      	bls.n	80017de <ST7565_Print+0x72>
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	2bbf      	cmp	r3, #191	; 0xbf
 80017d2:	d804      	bhi.n	80017de <ST7565_Print+0x72>
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	3330      	adds	r3, #48	; 0x30
 80017da:	75fb      	strb	r3, [r7, #23]
					else if ((uint8_t)*str == 0x84) { buff_char = 0xAA; break; }		// байт символа Є ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					else if ((uint8_t)*str == 0x86) { buff_char = 0xB2; break; }		// байт символа І ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					else if ((uint8_t)*str == 0x87) { buff_char = 0xAF; break; }		// байт символа Ї ( если нужнф еще символы добавляем тут и в функции DrawChar() )
				break;
 80017dc:	e041      	b.n	8001862 <ST7565_Print+0xf6>
					else if ((uint8_t)*str == 0x84) { buff_char = 0xAA; break; }		// байт символа Є ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 80017de:	68bb      	ldr	r3, [r7, #8]
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	2b84      	cmp	r3, #132	; 0x84
 80017e4:	d102      	bne.n	80017ec <ST7565_Print+0x80>
 80017e6:	23aa      	movs	r3, #170	; 0xaa
 80017e8:	75fb      	strb	r3, [r7, #23]
 80017ea:	e03d      	b.n	8001868 <ST7565_Print+0xfc>
					else if ((uint8_t)*str == 0x86) { buff_char = 0xB2; break; }		// байт символа І ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	2b86      	cmp	r3, #134	; 0x86
 80017f2:	d102      	bne.n	80017fa <ST7565_Print+0x8e>
 80017f4:	23b2      	movs	r3, #178	; 0xb2
 80017f6:	75fb      	strb	r3, [r7, #23]
 80017f8:	e036      	b.n	8001868 <ST7565_Print+0xfc>
					else if ((uint8_t)*str == 0x87) { buff_char = 0xAF; break; }		// байт символа Ї ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	2b87      	cmp	r3, #135	; 0x87
 8001800:	d12f      	bne.n	8001862 <ST7565_Print+0xf6>
 8001802:	23af      	movs	r3, #175	; 0xaf
 8001804:	75fb      	strb	r3, [r7, #23]
 8001806:	e02f      	b.n	8001868 <ST7565_Print+0xfc>
				//}
				case 0xD1:
				//{
					// увеличиваем массив так как нам нужен второй байт
					str++;
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	3301      	adds	r3, #1
 800180c:	60bb      	str	r3, [r7, #8]
					// проверяем второй байт там сам символ
					if ((uint8_t)*str == 0x91) { buff_char = 0xB8; break; }		// байт символа ё ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	2b91      	cmp	r3, #145	; 0x91
 8001814:	d102      	bne.n	800181c <ST7565_Print+0xb0>
 8001816:	23b8      	movs	r3, #184	; 0xb8
 8001818:	75fb      	strb	r3, [r7, #23]
 800181a:	e025      	b.n	8001868 <ST7565_Print+0xfc>
					else if ((uint8_t)*str >= 0x80 && (uint8_t)*str <= 0x8F) { buff_char = (*str) + 0x70; }	// байт символов п...я	елаем здвиг на +112
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	b25b      	sxtb	r3, r3
 8001822:	2b00      	cmp	r3, #0
 8001824:	da08      	bge.n	8001838 <ST7565_Print+0xcc>
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	2b8f      	cmp	r3, #143	; 0x8f
 800182c:	d804      	bhi.n	8001838 <ST7565_Print+0xcc>
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	3370      	adds	r3, #112	; 0x70
 8001834:	75fb      	strb	r3, [r7, #23]
					else if ((uint8_t)*str == 0x94) { buff_char = 0xBA; break; }		// байт символа є ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					else if ((uint8_t)*str == 0x96) { buff_char = 0xB3; break; }		// байт символа і ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					else if ((uint8_t)*str == 0x97) { buff_char = 0xBF; break; }		// байт символа ї ( если нужнф еще символы добавляем тут и в функции DrawChar() )
				break;
 8001836:	e016      	b.n	8001866 <ST7565_Print+0xfa>
					else if ((uint8_t)*str == 0x94) { buff_char = 0xBA; break; }		// байт символа є ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	2b94      	cmp	r3, #148	; 0x94
 800183e:	d102      	bne.n	8001846 <ST7565_Print+0xda>
 8001840:	23ba      	movs	r3, #186	; 0xba
 8001842:	75fb      	strb	r3, [r7, #23]
 8001844:	e010      	b.n	8001868 <ST7565_Print+0xfc>
					else if ((uint8_t)*str == 0x96) { buff_char = 0xB3; break; }		// байт символа і ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	2b96      	cmp	r3, #150	; 0x96
 800184c:	d102      	bne.n	8001854 <ST7565_Print+0xe8>
 800184e:	23b3      	movs	r3, #179	; 0xb3
 8001850:	75fb      	strb	r3, [r7, #23]
 8001852:	e009      	b.n	8001868 <ST7565_Print+0xfc>
					else if ((uint8_t)*str == 0x97) { buff_char = 0xBF; break; }		// байт символа ї ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	2b97      	cmp	r3, #151	; 0x97
 800185a:	d104      	bne.n	8001866 <ST7565_Print+0xfa>
 800185c:	23bf      	movs	r3, #191	; 0xbf
 800185e:	75fb      	strb	r3, [r7, #23]
 8001860:	e002      	b.n	8001868 <ST7565_Print+0xfc>
				break;
 8001862:	bf00      	nop
 8001864:	e000      	b.n	8001868 <ST7565_Print+0xfc>
				break;
 8001866:	bf00      	nop
				//}
			}
			// уменьшаем еще переменную так как израсходывали 2 байта для кириллицы
			len--;
 8001868:	8abb      	ldrh	r3, [r7, #20]
 800186a:	3b01      	subs	r3, #1
 800186c:	82bb      	strh	r3, [r7, #20]
			ST7565_DrawChar(x, y, buff_char, Font, multiplier, color);
 800186e:	7dfa      	ldrb	r2, [r7, #23]
 8001870:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8001874:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8001878:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800187c:	9301      	str	r3, [sp, #4]
 800187e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001882:	9300      	str	r3, [sp, #0]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	f7ff fdf5 	bl	8001474 <ST7565_DrawChar>
 800188a:	e00e      	b.n	80018aa <ST7565_Print+0x13e>
		} else {
			ST7565_DrawChar(x, y, *str, Font, multiplier, color);
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	781a      	ldrb	r2, [r3, #0]
 8001890:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8001894:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8001898:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800189c:	9301      	str	r3, [sp, #4]
 800189e:	f897 3020 	ldrb.w	r3, [r7, #32]
 80018a2:	9300      	str	r3, [sp, #0]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	f7ff fde5 	bl	8001474 <ST7565_DrawChar>
		}
		
		x += (Font->FontWidth * multiplier);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	b29a      	uxth	r2, r3
 80018b0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80018b4:	b29b      	uxth	r3, r3
 80018b6:	fb12 f303 	smulbb	r3, r2, r3
 80018ba:	b29a      	uxth	r2, r3
 80018bc:	89fb      	ldrh	r3, [r7, #14]
 80018be:	4413      	add	r3, r2
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	81fb      	strh	r3, [r7, #14]
		str++;
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	3301      	adds	r3, #1
 80018c8:	60bb      	str	r3, [r7, #8]
	while (len--) {
 80018ca:	8abb      	ldrh	r3, [r7, #20]
 80018cc:	1e5a      	subs	r2, r3, #1
 80018ce:	82ba      	strh	r2, [r7, #20]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	f47f af62 	bne.w	800179a <ST7565_Print+0x2e>
	}
}
 80018d6:	bf00      	nop
 80018d8:	bf00      	nop
 80018da:	3718      	adds	r7, #24
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}

080018e0 <ST7565_DrawLine>:
	* @param	( параметры ):	координаты начальной точки и конечной и цвет 0 или 1
								X(0 - 127)  Y(0 - 63)
	* @return  ( возвращает ):	
*******************************************************************************/
void ST7565_DrawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint8_t c)
{
 80018e0:	b590      	push	{r4, r7, lr}
 80018e2:	b087      	sub	sp, #28
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	4604      	mov	r4, r0
 80018e8:	4608      	mov	r0, r1
 80018ea:	4611      	mov	r1, r2
 80018ec:	461a      	mov	r2, r3
 80018ee:	4623      	mov	r3, r4
 80018f0:	80fb      	strh	r3, [r7, #6]
 80018f2:	4603      	mov	r3, r0
 80018f4:	80bb      	strh	r3, [r7, #4]
 80018f6:	460b      	mov	r3, r1
 80018f8:	807b      	strh	r3, [r7, #2]
 80018fa:	4613      	mov	r3, r2
 80018fc:	803b      	strh	r3, [r7, #0]
int16_t dx, dy, sx, sy, err, e2, i, tmp;
	
	/* Check for overflow */
	if (x0 >= SCREEN_WIDTH)  x0 = SCREEN_WIDTH  - 1;
 80018fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001902:	2b7f      	cmp	r3, #127	; 0x7f
 8001904:	dd01      	ble.n	800190a <ST7565_DrawLine+0x2a>
 8001906:	237f      	movs	r3, #127	; 0x7f
 8001908:	80fb      	strh	r3, [r7, #6]
	if (x1 >= SCREEN_WIDTH)  x1 = SCREEN_WIDTH  - 1;
 800190a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800190e:	2b7f      	cmp	r3, #127	; 0x7f
 8001910:	dd01      	ble.n	8001916 <ST7565_DrawLine+0x36>
 8001912:	237f      	movs	r3, #127	; 0x7f
 8001914:	807b      	strh	r3, [r7, #2]
	if (y0 >= SCREEN_HEIGHT) y0 = SCREEN_HEIGHT - 1;
 8001916:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800191a:	2b3f      	cmp	r3, #63	; 0x3f
 800191c:	dd01      	ble.n	8001922 <ST7565_DrawLine+0x42>
 800191e:	233f      	movs	r3, #63	; 0x3f
 8001920:	80bb      	strh	r3, [r7, #4]
	if (y1 >= SCREEN_HEIGHT) y1 = SCREEN_HEIGHT - 1;
 8001922:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001926:	2b3f      	cmp	r3, #63	; 0x3f
 8001928:	dd01      	ble.n	800192e <ST7565_DrawLine+0x4e>
 800192a:	233f      	movs	r3, #63	; 0x3f
 800192c:	803b      	strh	r3, [r7, #0]
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 800192e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001932:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001936:	429a      	cmp	r2, r3
 8001938:	da05      	bge.n	8001946 <ST7565_DrawLine+0x66>
 800193a:	887a      	ldrh	r2, [r7, #2]
 800193c:	88fb      	ldrh	r3, [r7, #6]
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	b29b      	uxth	r3, r3
 8001942:	b21b      	sxth	r3, r3
 8001944:	e004      	b.n	8001950 <ST7565_DrawLine+0x70>
 8001946:	88fa      	ldrh	r2, [r7, #6]
 8001948:	887b      	ldrh	r3, [r7, #2]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	b29b      	uxth	r3, r3
 800194e:	b21b      	sxth	r3, r3
 8001950:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 8001952:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001956:	f9b7 3000 	ldrsh.w	r3, [r7]
 800195a:	429a      	cmp	r2, r3
 800195c:	da05      	bge.n	800196a <ST7565_DrawLine+0x8a>
 800195e:	883a      	ldrh	r2, [r7, #0]
 8001960:	88bb      	ldrh	r3, [r7, #4]
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	b29b      	uxth	r3, r3
 8001966:	b21b      	sxth	r3, r3
 8001968:	e004      	b.n	8001974 <ST7565_DrawLine+0x94>
 800196a:	88ba      	ldrh	r2, [r7, #4]
 800196c:	883b      	ldrh	r3, [r7, #0]
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	b29b      	uxth	r3, r3
 8001972:	b21b      	sxth	r3, r3
 8001974:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1; 
 8001976:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800197a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800197e:	429a      	cmp	r2, r3
 8001980:	da01      	bge.n	8001986 <ST7565_DrawLine+0xa6>
 8001982:	2301      	movs	r3, #1
 8001984:	e001      	b.n	800198a <ST7565_DrawLine+0xaa>
 8001986:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800198a:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1; 
 800198c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001990:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001994:	429a      	cmp	r2, r3
 8001996:	da01      	bge.n	800199c <ST7565_DrawLine+0xbc>
 8001998:	2301      	movs	r3, #1
 800199a:	e001      	b.n	80019a0 <ST7565_DrawLine+0xc0>
 800199c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019a0:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2; 
 80019a2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80019a6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80019aa:	429a      	cmp	r2, r3
 80019ac:	dd06      	ble.n	80019bc <ST7565_DrawLine+0xdc>
 80019ae:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80019b2:	0fda      	lsrs	r2, r3, #31
 80019b4:	4413      	add	r3, r2
 80019b6:	105b      	asrs	r3, r3, #1
 80019b8:	b21b      	sxth	r3, r3
 80019ba:	e006      	b.n	80019ca <ST7565_DrawLine+0xea>
 80019bc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80019c0:	0fda      	lsrs	r2, r3, #31
 80019c2:	4413      	add	r3, r2
 80019c4:	105b      	asrs	r3, r3, #1
 80019c6:	425b      	negs	r3, r3
 80019c8:	b21b      	sxth	r3, r3
 80019ca:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 80019cc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d130      	bne.n	8001a36 <ST7565_DrawLine+0x156>
		if (y1 < y0) {
 80019d4:	f9b7 2000 	ldrsh.w	r2, [r7]
 80019d8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80019dc:	429a      	cmp	r2, r3
 80019de:	da05      	bge.n	80019ec <ST7565_DrawLine+0x10c>
			tmp = y1;
 80019e0:	883b      	ldrh	r3, [r7, #0]
 80019e2:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 80019e4:	88bb      	ldrh	r3, [r7, #4]
 80019e6:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 80019e8:	893b      	ldrh	r3, [r7, #8]
 80019ea:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 80019ec:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80019f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	da05      	bge.n	8001a04 <ST7565_DrawLine+0x124>
			tmp = x1;
 80019f8:	887b      	ldrh	r3, [r7, #2]
 80019fa:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 80019fc:	88fb      	ldrh	r3, [r7, #6]
 80019fe:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8001a00:	893b      	ldrh	r3, [r7, #8]
 8001a02:	80fb      	strh	r3, [r7, #6]
		}
		
		// Vertical line
		for (i = y0; i <= y1; i++) ST7565_Draw_pixel(x0, i, c);
 8001a04:	88bb      	ldrh	r3, [r7, #4]
 8001a06:	82bb      	strh	r3, [r7, #20]
 8001a08:	e00e      	b.n	8001a28 <ST7565_DrawLine+0x148>
 8001a0a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001a0e:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 8001a12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7ff fc96 	bl	8001348 <ST7565_Draw_pixel>
 8001a1c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001a20:	b29b      	uxth	r3, r3
 8001a22:	3301      	adds	r3, #1
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	82bb      	strh	r3, [r7, #20]
 8001a28:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001a2c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	ddea      	ble.n	8001a0a <ST7565_DrawLine+0x12a>
		
		return;
 8001a34:	e06e      	b.n	8001b14 <ST7565_DrawLine+0x234>
	}
	
	if (dy == 0) {
 8001a36:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d130      	bne.n	8001aa0 <ST7565_DrawLine+0x1c0>
		if (y1 < y0) {
 8001a3e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001a42:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001a46:	429a      	cmp	r2, r3
 8001a48:	da05      	bge.n	8001a56 <ST7565_DrawLine+0x176>
			tmp = y1;
 8001a4a:	883b      	ldrh	r3, [r7, #0]
 8001a4c:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8001a4e:	88bb      	ldrh	r3, [r7, #4]
 8001a50:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8001a52:	893b      	ldrh	r3, [r7, #8]
 8001a54:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 8001a56:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001a5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	da05      	bge.n	8001a6e <ST7565_DrawLine+0x18e>
			tmp = x1;
 8001a62:	887b      	ldrh	r3, [r7, #2]
 8001a64:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8001a66:	88fb      	ldrh	r3, [r7, #6]
 8001a68:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8001a6a:	893b      	ldrh	r3, [r7, #8]
 8001a6c:	80fb      	strh	r3, [r7, #6]
		}
		
		// Horizontal line
		for (i = x0; i <= x1; i++) ST7565_Draw_pixel(i, y0, c);
 8001a6e:	88fb      	ldrh	r3, [r7, #6]
 8001a70:	82bb      	strh	r3, [r7, #20]
 8001a72:	e00e      	b.n	8001a92 <ST7565_DrawLine+0x1b2>
 8001a74:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001a78:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001a7c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7ff fc61 	bl	8001348 <ST7565_Draw_pixel>
 8001a86:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001a8a:	b29b      	uxth	r3, r3
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	b29b      	uxth	r3, r3
 8001a90:	82bb      	strh	r3, [r7, #20]
 8001a92:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001a96:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	ddea      	ble.n	8001a74 <ST7565_DrawLine+0x194>
		
		return;
 8001a9e:	e039      	b.n	8001b14 <ST7565_DrawLine+0x234>
	}
	
	while (1) {
		ST7565_Draw_pixel(x0, y0, c);
 8001aa0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001aa4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001aa8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7ff fc4b 	bl	8001348 <ST7565_Draw_pixel>
		if (x0 == x1 && y0 == y1) break;
 8001ab2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001ab6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d105      	bne.n	8001aca <ST7565_DrawLine+0x1ea>
 8001abe:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001ac2:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d023      	beq.n	8001b12 <ST7565_DrawLine+0x232>

		e2 = err; 
 8001aca:	8afb      	ldrh	r3, [r7, #22]
 8001acc:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 8001ace:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001ad2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001ad6:	425b      	negs	r3, r3
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	dd09      	ble.n	8001af0 <ST7565_DrawLine+0x210>
			err -= dy;
 8001adc:	8afa      	ldrh	r2, [r7, #22]
 8001ade:	8a3b      	ldrh	r3, [r7, #16]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 8001ae6:	88fa      	ldrh	r2, [r7, #6]
 8001ae8:	89fb      	ldrh	r3, [r7, #14]
 8001aea:	4413      	add	r3, r2
 8001aec:	b29b      	uxth	r3, r3
 8001aee:	80fb      	strh	r3, [r7, #6]
		} 
		if (e2 < dy) {
 8001af0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001af4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	dad1      	bge.n	8001aa0 <ST7565_DrawLine+0x1c0>
			err += dx;
 8001afc:	8afa      	ldrh	r2, [r7, #22]
 8001afe:	8a7b      	ldrh	r3, [r7, #18]
 8001b00:	4413      	add	r3, r2
 8001b02:	b29b      	uxth	r3, r3
 8001b04:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 8001b06:	88ba      	ldrh	r2, [r7, #4]
 8001b08:	89bb      	ldrh	r3, [r7, #12]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	b29b      	uxth	r3, r3
 8001b0e:	80bb      	strh	r3, [r7, #4]
		ST7565_Draw_pixel(x0, y0, c);
 8001b10:	e7c6      	b.n	8001aa0 <ST7565_DrawLine+0x1c0>
		if (x0 == x1 && y0 == y1) break;
 8001b12:	bf00      	nop
		} 
	}
}
 8001b14:	371c      	adds	r7, #28
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd90      	pop	{r4, r7, pc}

08001b1a <ST7565_DrawRectangle>:
	* @param	( параметры ):	координаты верхнего левого и ширина и высота и цвет
								X(0 - 127)  Y(0 - 63)
	* @return  ( возвращает ):	
*******************************************************************************/
void ST7565_DrawRectangle(int16_t x, int16_t y, int16_t w, int16_t h, uint8_t c)
{
 8001b1a:	b590      	push	{r4, r7, lr}
 8001b1c:	b085      	sub	sp, #20
 8001b1e:	af02      	add	r7, sp, #8
 8001b20:	4604      	mov	r4, r0
 8001b22:	4608      	mov	r0, r1
 8001b24:	4611      	mov	r1, r2
 8001b26:	461a      	mov	r2, r3
 8001b28:	4623      	mov	r3, r4
 8001b2a:	80fb      	strh	r3, [r7, #6]
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	80bb      	strh	r3, [r7, #4]
 8001b30:	460b      	mov	r3, r1
 8001b32:	807b      	strh	r3, [r7, #2]
 8001b34:	4613      	mov	r3, r2
 8001b36:	803b      	strh	r3, [r7, #0]
	// Check input parameters
	if (x >= SCREEN_WIDTH || y >= SCREEN_HEIGHT) return;
 8001b38:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b3c:	2b7f      	cmp	r3, #127	; 0x7f
 8001b3e:	dc6a      	bgt.n	8001c16 <ST7565_DrawRectangle+0xfc>
 8001b40:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001b44:	2b3f      	cmp	r3, #63	; 0x3f
 8001b46:	dc66      	bgt.n	8001c16 <ST7565_DrawRectangle+0xfc>
	
	// Check width and height
	if ((x + w) >= SCREEN_WIDTH)  w = SCREEN_WIDTH  - x;
 8001b48:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001b4c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001b50:	4413      	add	r3, r2
 8001b52:	2b7f      	cmp	r3, #127	; 0x7f
 8001b54:	dd04      	ble.n	8001b60 <ST7565_DrawRectangle+0x46>
 8001b56:	88fb      	ldrh	r3, [r7, #6]
 8001b58:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001b5c:	b29b      	uxth	r3, r3
 8001b5e:	807b      	strh	r3, [r7, #2]
	if ((y + h) >= SCREEN_HEIGHT) h = SCREEN_HEIGHT - y;
 8001b60:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001b64:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001b68:	4413      	add	r3, r2
 8001b6a:	2b3f      	cmp	r3, #63	; 0x3f
 8001b6c:	dd04      	ble.n	8001b78 <ST7565_DrawRectangle+0x5e>
 8001b6e:	88bb      	ldrh	r3, [r7, #4]
 8001b70:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	803b      	strh	r3, [r7, #0]
	
	// Draw 4 lines
	ST7565_DrawLine(x, y, x + w, y, c);         // Top line
 8001b78:	88fa      	ldrh	r2, [r7, #6]
 8001b7a:	887b      	ldrh	r3, [r7, #2]
 8001b7c:	4413      	add	r3, r2
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	b21a      	sxth	r2, r3
 8001b82:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8001b86:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001b8a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001b8e:	7e3b      	ldrb	r3, [r7, #24]
 8001b90:	9300      	str	r3, [sp, #0]
 8001b92:	4623      	mov	r3, r4
 8001b94:	f7ff fea4 	bl	80018e0 <ST7565_DrawLine>
	ST7565_DrawLine(x, y + h, x + w, y + h, c); // Bottom line
 8001b98:	88ba      	ldrh	r2, [r7, #4]
 8001b9a:	883b      	ldrh	r3, [r7, #0]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	b219      	sxth	r1, r3
 8001ba2:	88fa      	ldrh	r2, [r7, #6]
 8001ba4:	887b      	ldrh	r3, [r7, #2]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	b21c      	sxth	r4, r3
 8001bac:	88ba      	ldrh	r2, [r7, #4]
 8001bae:	883b      	ldrh	r3, [r7, #0]
 8001bb0:	4413      	add	r3, r2
 8001bb2:	b29b      	uxth	r3, r3
 8001bb4:	b21a      	sxth	r2, r3
 8001bb6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001bba:	7e3b      	ldrb	r3, [r7, #24]
 8001bbc:	9300      	str	r3, [sp, #0]
 8001bbe:	4613      	mov	r3, r2
 8001bc0:	4622      	mov	r2, r4
 8001bc2:	f7ff fe8d 	bl	80018e0 <ST7565_DrawLine>
	ST7565_DrawLine(x, y, x, y + h, c);         // Left line
 8001bc6:	88ba      	ldrh	r2, [r7, #4]
 8001bc8:	883b      	ldrh	r3, [r7, #0]
 8001bca:	4413      	add	r3, r2
 8001bcc:	b29b      	uxth	r3, r3
 8001bce:	b21c      	sxth	r4, r3
 8001bd0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001bd4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001bd8:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001bdc:	7e3b      	ldrb	r3, [r7, #24]
 8001bde:	9300      	str	r3, [sp, #0]
 8001be0:	4623      	mov	r3, r4
 8001be2:	f7ff fe7d 	bl	80018e0 <ST7565_DrawLine>
	ST7565_DrawLine(x + w, y, x + w, y + h, c); // Right line
 8001be6:	88fa      	ldrh	r2, [r7, #6]
 8001be8:	887b      	ldrh	r3, [r7, #2]
 8001bea:	4413      	add	r3, r2
 8001bec:	b29b      	uxth	r3, r3
 8001bee:	b218      	sxth	r0, r3
 8001bf0:	88fa      	ldrh	r2, [r7, #6]
 8001bf2:	887b      	ldrh	r3, [r7, #2]
 8001bf4:	4413      	add	r3, r2
 8001bf6:	b29b      	uxth	r3, r3
 8001bf8:	b21c      	sxth	r4, r3
 8001bfa:	88ba      	ldrh	r2, [r7, #4]
 8001bfc:	883b      	ldrh	r3, [r7, #0]
 8001bfe:	4413      	add	r3, r2
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	b21a      	sxth	r2, r3
 8001c04:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001c08:	7e3b      	ldrb	r3, [r7, #24]
 8001c0a:	9300      	str	r3, [sp, #0]
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	4622      	mov	r2, r4
 8001c10:	f7ff fe66 	bl	80018e0 <ST7565_DrawLine>
 8001c14:	e000      	b.n	8001c18 <ST7565_DrawRectangle+0xfe>
	if (x >= SCREEN_WIDTH || y >= SCREEN_HEIGHT) return;
 8001c16:	bf00      	nop
}
 8001c18:	370c      	adds	r7, #12
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd90      	pop	{r4, r7, pc}

08001c1e <ST7565_DrawFilledRectangle>:
	* @param	( параметры ):	координаты верхнего левого и ширина и высота и цвет
								X(0 - 127)  Y(0 - 63)
	* @return  ( возвращает ):	
*******************************************************************************/
void ST7565_DrawFilledRectangle(int16_t x, int16_t y, int16_t w, int16_t h, uint8_t c)
{
 8001c1e:	b590      	push	{r4, r7, lr}
 8001c20:	b087      	sub	sp, #28
 8001c22:	af02      	add	r7, sp, #8
 8001c24:	4604      	mov	r4, r0
 8001c26:	4608      	mov	r0, r1
 8001c28:	4611      	mov	r1, r2
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	4623      	mov	r3, r4
 8001c2e:	80fb      	strh	r3, [r7, #6]
 8001c30:	4603      	mov	r3, r0
 8001c32:	80bb      	strh	r3, [r7, #4]
 8001c34:	460b      	mov	r3, r1
 8001c36:	807b      	strh	r3, [r7, #2]
 8001c38:	4613      	mov	r3, r2
 8001c3a:	803b      	strh	r3, [r7, #0]
uint8_t i;
	
	// Check input parameters
	if (x >= SCREEN_WIDTH || y >= SCREEN_HEIGHT) return;
 8001c3c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c40:	2b7f      	cmp	r3, #127	; 0x7f
 8001c42:	dc41      	bgt.n	8001cc8 <ST7565_DrawFilledRectangle+0xaa>
 8001c44:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001c48:	2b3f      	cmp	r3, #63	; 0x3f
 8001c4a:	dc3d      	bgt.n	8001cc8 <ST7565_DrawFilledRectangle+0xaa>
	
	// Check width and height
	if ((x + w) >= SCREEN_WIDTH)  w = SCREEN_WIDTH  - x;
 8001c4c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001c50:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001c54:	4413      	add	r3, r2
 8001c56:	2b7f      	cmp	r3, #127	; 0x7f
 8001c58:	dd04      	ble.n	8001c64 <ST7565_DrawFilledRectangle+0x46>
 8001c5a:	88fb      	ldrh	r3, [r7, #6]
 8001c5c:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001c60:	b29b      	uxth	r3, r3
 8001c62:	807b      	strh	r3, [r7, #2]
	if ((y + h) >= SCREEN_HEIGHT) h = SCREEN_HEIGHT - y;
 8001c64:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001c68:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001c6c:	4413      	add	r3, r2
 8001c6e:	2b3f      	cmp	r3, #63	; 0x3f
 8001c70:	dd04      	ble.n	8001c7c <ST7565_DrawFilledRectangle+0x5e>
 8001c72:	88bb      	ldrh	r3, [r7, #4]
 8001c74:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8001c78:	b29b      	uxth	r3, r3
 8001c7a:	803b      	strh	r3, [r7, #0]
	
	for (i = 0; i <= h; i++) ST7565_DrawLine(x, y + i, x + w, y + i, c);
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	73fb      	strb	r3, [r7, #15]
 8001c80:	e01c      	b.n	8001cbc <ST7565_DrawFilledRectangle+0x9e>
 8001c82:	7bfb      	ldrb	r3, [r7, #15]
 8001c84:	b29a      	uxth	r2, r3
 8001c86:	88bb      	ldrh	r3, [r7, #4]
 8001c88:	4413      	add	r3, r2
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	b219      	sxth	r1, r3
 8001c8e:	88fa      	ldrh	r2, [r7, #6]
 8001c90:	887b      	ldrh	r3, [r7, #2]
 8001c92:	4413      	add	r3, r2
 8001c94:	b29b      	uxth	r3, r3
 8001c96:	b21c      	sxth	r4, r3
 8001c98:	7bfb      	ldrb	r3, [r7, #15]
 8001c9a:	b29a      	uxth	r2, r3
 8001c9c:	88bb      	ldrh	r3, [r7, #4]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	b29b      	uxth	r3, r3
 8001ca2:	b21a      	sxth	r2, r3
 8001ca4:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001ca8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001cac:	9300      	str	r3, [sp, #0]
 8001cae:	4613      	mov	r3, r2
 8001cb0:	4622      	mov	r2, r4
 8001cb2:	f7ff fe15 	bl	80018e0 <ST7565_DrawLine>
 8001cb6:	7bfb      	ldrb	r3, [r7, #15]
 8001cb8:	3301      	adds	r3, #1
 8001cba:	73fb      	strb	r3, [r7, #15]
 8001cbc:	7bfa      	ldrb	r2, [r7, #15]
 8001cbe:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	dddd      	ble.n	8001c82 <ST7565_DrawFilledRectangle+0x64>
 8001cc6:	e000      	b.n	8001cca <ST7565_DrawFilledRectangle+0xac>
	if (x >= SCREEN_WIDTH || y >= SCREEN_HEIGHT) return;
 8001cc8:	bf00      	nop
}
 8001cca:	3714      	adds	r7, #20
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd90      	pop	{r4, r7, pc}

08001cd0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001cd4:	f3bf 8f4f 	dsb	sy
}
 8001cd8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001cda:	4b06      	ldr	r3, [pc, #24]	; (8001cf4 <__NVIC_SystemReset+0x24>)
 8001cdc:	68db      	ldr	r3, [r3, #12]
 8001cde:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001ce2:	4904      	ldr	r1, [pc, #16]	; (8001cf4 <__NVIC_SystemReset+0x24>)
 8001ce4:	4b04      	ldr	r3, [pc, #16]	; (8001cf8 <__NVIC_SystemReset+0x28>)
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001cea:	f3bf 8f4f 	dsb	sy
}
 8001cee:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001cf0:	bf00      	nop
 8001cf2:	e7fd      	b.n	8001cf0 <__NVIC_SystemReset+0x20>
 8001cf4:	e000ed00 	.word	0xe000ed00
 8001cf8:	05fa0004 	.word	0x05fa0004

08001cfc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d00:	b0b1      	sub	sp, #196	; 0xc4
 8001d02:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d04:	f003 fe8b 	bl	8005a1e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d08:	f000 ff4a 	bl	8002ba0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d0c:	f001 f982 	bl	8003014 <MX_GPIO_Init>
  MX_TIM4_Init();
 8001d10:	f001 f8b0 	bl	8002e74 <MX_TIM4_Init>
  MX_DMA_Init();
 8001d14:	f001 f92c 	bl	8002f70 <MX_DMA_Init>
  MX_RTC_Init();
 8001d18:	f000 ffd4 	bl	8002cc4 <MX_RTC_Init>
  MX_USART2_UART_Init();
 8001d1c:	f001 f8f8 	bl	8002f10 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8001d20:	f001 f86a 	bl	8002df8 <MX_SPI2_Init>
  MX_SPI1_Init();
 8001d24:	f001 f82a 	bl	8002d7c <MX_SPI1_Init>
  MX_I2C1_Init();
 8001d28:	f000 ff8c 	bl	8002c44 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */


  if (HAL_TIM_Base_Start_IT(tikPort) != HAL_OK) devError |= devTIK;
 8001d2c:	4bc0      	ldr	r3, [pc, #768]	; (8002030 <main+0x334>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4618      	mov	r0, r3
 8001d32:	f009 fbf7 	bl	800b524 <HAL_TIM_Base_Start_IT>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d006      	beq.n	8001d4a <main+0x4e>
 8001d3c:	4bbd      	ldr	r3, [pc, #756]	; (8002034 <main+0x338>)
 8001d3e:	881b      	ldrh	r3, [r3, #0]
 8001d40:	f043 0301 	orr.w	r3, r3, #1
 8001d44:	b29a      	uxth	r2, r3
 8001d46:	4bbb      	ldr	r3, [pc, #748]	; (8002034 <main+0x338>)
 8001d48:	801a      	strh	r2, [r3, #0]

  for (int8_t i = 0; i < 4; i++) {
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8001d50:	e012      	b.n	8001d78 <main+0x7c>
	  errLedOn(true);
 8001d52:	2001      	movs	r0, #1
 8001d54:	f001 fbc6 	bl	80034e4 <errLedOn>
	  HAL_Delay(150);
 8001d58:	2096      	movs	r0, #150	; 0x96
 8001d5a:	f003 fed5 	bl	8005b08 <HAL_Delay>
	  errLedOn(false);
 8001d5e:	2000      	movs	r0, #0
 8001d60:	f001 fbc0 	bl	80034e4 <errLedOn>
	  HAL_Delay(150);
 8001d64:	2096      	movs	r0, #150	; 0x96
 8001d66:	f003 fecf 	bl	8005b08 <HAL_Delay>
  for (int8_t i = 0; i < 4; i++) {
 8001d6a:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	3301      	adds	r3, #1
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8001d78:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
 8001d7c:	2b03      	cmp	r3, #3
 8001d7e:	dde8      	ble.n	8001d52 <main+0x56>
  }

  if (HAL_UART_Receive_IT(cmdPort, &rxByte, 1) != HAL_OK) devError |= devUART;
 8001d80:	4bad      	ldr	r3, [pc, #692]	; (8002038 <main+0x33c>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	2201      	movs	r2, #1
 8001d86:	49ad      	ldr	r1, [pc, #692]	; (800203c <main+0x340>)
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f00a f8a3 	bl	800bed4 <HAL_UART_Receive_IT>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d006      	beq.n	8001da2 <main+0xa6>
 8001d94:	4ba7      	ldr	r3, [pc, #668]	; (8002034 <main+0x338>)
 8001d96:	881b      	ldrh	r3, [r3, #0]
 8001d98:	f043 0302 	orr.w	r3, r3, #2
 8001d9c:	b29a      	uxth	r2, r3
 8001d9e:	4ba5      	ldr	r3, [pc, #660]	; (8002034 <main+0x338>)
 8001da0:	801a      	strh	r2, [r3, #0]

  set_Date(epoch);
 8001da2:	4ba7      	ldr	r3, [pc, #668]	; (8002040 <main+0x344>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f001 fbc2 	bl	8003530 <set_Date>

  HAL_Delay(250);
 8001dac:	20fa      	movs	r0, #250	; 0xfa
 8001dae:	f003 feab 	bl	8005b08 <HAL_Delay>

  Report(1, "[que:%u] Start application ver.%s\r\n", cntEvt, ver);
 8001db2:	4ba4      	ldr	r3, [pc, #656]	; (8002044 <main+0x348>)
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	461a      	mov	r2, r3
 8001dba:	4ba3      	ldr	r3, [pc, #652]	; (8002048 <main+0x34c>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	49a3      	ldr	r1, [pc, #652]	; (800204c <main+0x350>)
 8001dc0:	2001      	movs	r0, #1
 8001dc2:	f001 fcaf 	bl	8003724 <Report>

#ifdef SET_W25FLASH
    chipPresent = W25qxx_Init();
 8001dc6:	f003 f9b1 	bl	800512c <W25qxx_Init>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	461a      	mov	r2, r3
 8001dce:	4ba0      	ldr	r3, [pc, #640]	; (8002050 <main+0x354>)
 8001dd0:	701a      	strb	r2, [r3, #0]
    uint32_t cid = W25qxx_getChipID();
 8001dd2:	f003 fa65 	bl	80052a0 <W25qxx_getChipID>
 8001dd6:	6738      	str	r0, [r7, #112]	; 0x70
    if ( chipPresent && ((cid >= W25Q10) && (cid <= W25Q128)) ) validChipID = true;
 8001dd8:	4b9d      	ldr	r3, [pc, #628]	; (8002050 <main+0x354>)
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d008      	beq.n	8001df2 <main+0xf6>
 8001de0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d005      	beq.n	8001df2 <main+0xf6>
 8001de6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001de8:	2b08      	cmp	r3, #8
 8001dea:	d802      	bhi.n	8001df2 <main+0xf6>
 8001dec:	4b99      	ldr	r3, [pc, #612]	; (8002054 <main+0x358>)
 8001dee:	2201      	movs	r2, #1
 8001df0:	701a      	strb	r2, [r3, #0]
    list_sector = W25qxx_getPageSize() << 1;//2;
 8001df2:	f003 fa79 	bl	80052e8 <W25qxx_getPageSize>
 8001df6:	4603      	mov	r3, r0
 8001df8:	005b      	lsls	r3, r3, #1
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	4b96      	ldr	r3, [pc, #600]	; (8002058 <main+0x35c>)
 8001dfe:	601a      	str	r2, [r3, #0]

#endif

#ifdef SET_NEW_RDA

    rdaID = rda5807_init(&Freq);
 8001e00:	4896      	ldr	r0, [pc, #600]	; (800205c <main+0x360>)
 8001e02:	f002 f84d 	bl	8003ea0 <rda5807_init>
 8001e06:	4603      	mov	r3, r0
 8001e08:	461a      	mov	r2, r3
 8001e0a:	4b95      	ldr	r3, [pc, #596]	; (8002060 <main+0x364>)
 8001e0c:	701a      	strb	r2, [r3, #0]
    RSSI = rda5807_rssi();
 8001e0e:	f002 f8b5 	bl	8003f7c <rda5807_rssi>
 8001e12:	4603      	mov	r3, r0
 8001e14:	461a      	mov	r2, r3
 8001e16:	4b93      	ldr	r3, [pc, #588]	; (8002064 <main+0x368>)
 8001e18:	801a      	strh	r2, [r3, #0]
    rda5807_SetVolume(Volume);
 8001e1a:	4b93      	ldr	r3, [pc, #588]	; (8002068 <main+0x36c>)
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f002 fa84 	bl	800432c <rda5807_SetVolume>
    rda5807_SetBassBoost(BassBoost);
 8001e24:	4b91      	ldr	r3, [pc, #580]	; (800206c <main+0x370>)
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f002 fac7 	bl	80043bc <rda5807_SetBassBoost>
    stereo = rda5807_Get_StereoMonoFlag();
 8001e2e:	f002 fbdb 	bl	80045e8 <rda5807_Get_StereoMonoFlag>
 8001e32:	4603      	mov	r3, r0
 8001e34:	461a      	mov	r2, r3
 8001e36:	4b8e      	ldr	r3, [pc, #568]	; (8002070 <main+0x374>)
 8001e38:	701a      	strb	r2, [r3, #0]
    Chan = rda5807_Get_Channel();
 8001e3a:	f002 fbed 	bl	8004618 <rda5807_Get_Channel>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	461a      	mov	r2, r3
 8001e42:	4b8c      	ldr	r3, [pc, #560]	; (8002074 <main+0x378>)
 8001e44:	801a      	strh	r2, [r3, #0]
#endif

#ifdef SET_DISPLAY

	#ifdef FONT_6x8
  		FontDef_t Font_6x8 = { 6, 8, Font6x8 };
 8001e46:	4a8c      	ldr	r2, [pc, #560]	; (8002078 <main+0x37c>)
 8001e48:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001e4c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e50:	6018      	str	r0, [r3, #0]
 8001e52:	3304      	adds	r3, #4
 8001e54:	8019      	strh	r1, [r3, #0]
  		lfnt = &Font_6x8;
 8001e56:	4a89      	ldr	r2, [pc, #548]	; (800207c <main+0x380>)
 8001e58:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001e5c:	6013      	str	r3, [r2, #0]
	#endif


  	uint16_t lin1 = 1;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  	uint16_t lin2 = lin1 + Font_6x8.FontHeight + 4;//chipID...
 8001e64:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001e68:	b29a      	uxth	r2, r3
 8001e6a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8001e6e:	4413      	add	r3, r2
 8001e70:	b29b      	uxth	r3, r3
 8001e72:	3304      	adds	r3, #4
 8001e74:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
  	uint16_t lin3 = lin2 + Font_6x8.FontHeight + 1;//Band...
 8001e78:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001e7c:	b29a      	uxth	r2, r3
 8001e7e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8001e82:	4413      	add	r3, r2
 8001e84:	b29b      	uxth	r3, r3
 8001e86:	3301      	adds	r3, #1
 8001e88:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
  	uint16_t lin4 = lin3 + Font_6x8.FontHeight + 1;//Freq...
 8001e8c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001e90:	b29a      	uxth	r2, r3
 8001e92:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8001e96:	4413      	add	r3, r2
 8001e98:	b29b      	uxth	r3, r3
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
  	uint16_t lin5 = lin4 + Font_6x8.FontHeight + 1;//Volume...
 8001ea0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001ea4:	b29a      	uxth	r2, r3
 8001ea6:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001eaa:	4413      	add	r3, r2
 8001eac:	b29b      	uxth	r3, r3
 8001eae:	3301      	adds	r3, #1
 8001eb0:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
  	char st[64];

  	ST7565_Reset();
 8001eb4:	f7ff f908 	bl	80010c8 <ST7565_Reset>
  	ST7565_Init();
 8001eb8:	f7ff fa1e 	bl	80012f8 <ST7565_Init>

  	ST7565_CMD_DISPLAY(CMD_DISPLAY_ON);
 8001ebc:	20af      	movs	r0, #175	; 0xaf
 8001ebe:	f7ff fa35 	bl	800132c <ST7565_CMD_DISPLAY>

    int dl = sprintf(tmp, "Ver.%s", ver);
 8001ec2:	4b61      	ldr	r3, [pc, #388]	; (8002048 <main+0x34c>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	496d      	ldr	r1, [pc, #436]	; (8002080 <main+0x384>)
 8001eca:	486e      	ldr	r0, [pc, #440]	; (8002084 <main+0x388>)
 8001ecc:	f00c f940 	bl	800e150 <siprintf>
 8001ed0:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    uint16_t x = ((SCREEN_WIDTH - (Font_6x8.FontWidth * dl)) >> 1) & 0x7f;
 8001ed4:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001ed8:	461a      	mov	r2, r3
 8001eda:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001ede:	fb02 f303 	mul.w	r3, r2, r3
 8001ee2:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001ee6:	105b      	asrs	r3, r3, #1
 8001ee8:	b29b      	uxth	r3, r3
 8001eea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001eee:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
    ST7565_Print(x, SCREEN_HEIGHT - Font_6x8.FontHeight, tmp, &Font_6x8, 1, PIX_ON);//печатаем надпись с указаным шрифтом и цветом(PIX_ON-белый, PIX_OFF-черный)
 8001ef2:	f9b7 0064 	ldrsh.w	r0, [r7, #100]	; 0x64
 8001ef6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001efa:	b29b      	uxth	r3, r3
 8001efc:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8001f00:	b29b      	uxth	r3, r3
 8001f02:	b219      	sxth	r1, r3
 8001f04:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001f08:	2201      	movs	r2, #1
 8001f0a:	9201      	str	r2, [sp, #4]
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	9200      	str	r2, [sp, #0]
 8001f10:	4a5c      	ldr	r2, [pc, #368]	; (8002084 <main+0x388>)
 8001f12:	f7ff fc2b 	bl	800176c <ST7565_Print>

	#if defined(SET_RDA_CHIP) || defined(SET_NEW_RDA)
    	int il = sprintf(st, "RDA5807 chipID:0x%x", rdaID);
 8001f16:	4b52      	ldr	r3, [pc, #328]	; (8002060 <main+0x364>)
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	f107 030c 	add.w	r3, r7, #12
 8001f20:	4959      	ldr	r1, [pc, #356]	; (8002088 <main+0x38c>)
 8001f22:	4618      	mov	r0, r3
 8001f24:	f00c f914 	bl	800e150 <siprintf>
 8001f28:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    	uint16_t xf = ((SCREEN_WIDTH - (Font_6x8.FontWidth * il)) >> 1) & 0x7f;
 8001f2c:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001f30:	461a      	mov	r2, r3
 8001f32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001f36:	fb02 f303 	mul.w	r3, r2, r3
 8001f3a:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001f3e:	105b      	asrs	r3, r3, #1
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f46:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    	if (!xf) xf = 1;
 8001f4a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d102      	bne.n	8001f58 <main+0x25c>
 8001f52:	2301      	movs	r3, #1
 8001f54:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    	ST7565_Print(xf, lin2, st, &Font_6x8, 1, PIX_ON);
 8001f58:	f9b7 008a 	ldrsh.w	r0, [r7, #138]	; 0x8a
 8001f5c:	f9b7 106c 	ldrsh.w	r1, [r7, #108]	; 0x6c
 8001f60:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001f64:	f107 020c 	add.w	r2, r7, #12
 8001f68:	2401      	movs	r4, #1
 8001f6a:	9401      	str	r4, [sp, #4]
 8001f6c:	2401      	movs	r4, #1
 8001f6e:	9400      	str	r4, [sp, #0]
 8001f70:	f7ff fbfc 	bl	800176c <ST7565_Print>

    	il = sprintf(st, "FM Band:%.1f-%.1f", lBand, rBand);
 8001f74:	4b45      	ldr	r3, [pc, #276]	; (800208c <main+0x390>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7fe fae5 	bl	8000548 <__aeabi_f2d>
 8001f7e:	4604      	mov	r4, r0
 8001f80:	460d      	mov	r5, r1
 8001f82:	4b43      	ldr	r3, [pc, #268]	; (8002090 <main+0x394>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7fe fade 	bl	8000548 <__aeabi_f2d>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	460b      	mov	r3, r1
 8001f90:	f107 000c 	add.w	r0, r7, #12
 8001f94:	e9cd 2300 	strd	r2, r3, [sp]
 8001f98:	4622      	mov	r2, r4
 8001f9a:	462b      	mov	r3, r5
 8001f9c:	493d      	ldr	r1, [pc, #244]	; (8002094 <main+0x398>)
 8001f9e:	f00c f8d7 	bl	800e150 <siprintf>
 8001fa2:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    	int lib = il;
 8001fa6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001faa:	60bb      	str	r3, [r7, #8]
    	xf = ((SCREEN_WIDTH - (Font_6x8.FontWidth * il)) >> 1) & 0x7f;
 8001fac:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001fb6:	fb02 f303 	mul.w	r3, r2, r3
 8001fba:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001fbe:	105b      	asrs	r3, r3, #1
 8001fc0:	b29b      	uxth	r3, r3
 8001fc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001fc6:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    	if ((!xf) || (xf > (SCREEN_WIDTH - 3))) xf = 1;
 8001fca:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d003      	beq.n	8001fda <main+0x2de>
 8001fd2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8001fd6:	2b7d      	cmp	r3, #125	; 0x7d
 8001fd8:	d902      	bls.n	8001fe0 <main+0x2e4>
 8001fda:	2301      	movs	r3, #1
 8001fdc:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    	ST7565_Print(xf, lin3, st, &Font_6x8, 1, PIX_ON);
 8001fe0:	f9b7 008a 	ldrsh.w	r0, [r7, #138]	; 0x8a
 8001fe4:	f9b7 106a 	ldrsh.w	r1, [r7, #106]	; 0x6a
 8001fe8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001fec:	f107 020c 	add.w	r2, r7, #12
 8001ff0:	2401      	movs	r4, #1
 8001ff2:	9401      	str	r4, [sp, #4]
 8001ff4:	2401      	movs	r4, #1
 8001ff6:	9400      	str	r4, [sp, #0]
 8001ff8:	f7ff fbb8 	bl	800176c <ST7565_Print>

    	if (stereo)
 8001ffc:	4b1c      	ldr	r3, [pc, #112]	; (8002070 <main+0x374>)
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d04b      	beq.n	800209c <main+0x3a0>
    		il = sprintf(st, "Rssi:%u Freq:%.1f S", RSSI, Freq);
 8002004:	4b17      	ldr	r3, [pc, #92]	; (8002064 <main+0x368>)
 8002006:	881b      	ldrh	r3, [r3, #0]
 8002008:	461c      	mov	r4, r3
 800200a:	4b14      	ldr	r3, [pc, #80]	; (800205c <main+0x360>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4618      	mov	r0, r3
 8002010:	f7fe fa9a 	bl	8000548 <__aeabi_f2d>
 8002014:	4602      	mov	r2, r0
 8002016:	460b      	mov	r3, r1
 8002018:	f107 000c 	add.w	r0, r7, #12
 800201c:	e9cd 2300 	strd	r2, r3, [sp]
 8002020:	4622      	mov	r2, r4
 8002022:	491d      	ldr	r1, [pc, #116]	; (8002098 <main+0x39c>)
 8002024:	f00c f894 	bl	800e150 <siprintf>
 8002028:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
 800202c:	e04a      	b.n	80020c4 <main+0x3c8>
 800202e:	bf00      	nop
 8002030:	20000008 	.word	0x20000008
 8002034:	20001424 	.word	0x20001424
 8002038:	20000010 	.word	0x20000010
 800203c:	20001438 	.word	0x20001438
 8002040:	20000018 	.word	0x20000018
 8002044:	20001844 	.word	0x20001844
 8002048:	20000004 	.word	0x20000004
 800204c:	08011f20 	.word	0x08011f20
 8002050:	20002c58 	.word	0x20002c58
 8002054:	20002c59 	.word	0x20002c59
 8002058:	20001850 	.word	0x20001850
 800205c:	200001a8 	.word	0x200001a8
 8002060:	20002c6c 	.word	0x20002c6c
 8002064:	20002c6a 	.word	0x20002c6a
 8002068:	200001b1 	.word	0x200001b1
 800206c:	20002c6e 	.word	0x20002c6e
 8002070:	20002c70 	.word	0x20002c70
 8002074:	20002c68 	.word	0x20002c68
 8002078:	080121f4 	.word	0x080121f4
 800207c:	20002c5c 	.word	0x20002c5c
 8002080:	08011f44 	.word	0x08011f44
 8002084:	20000fa4 	.word	0x20000fa4
 8002088:	08011f4c 	.word	0x08011f4c
 800208c:	20002c60 	.word	0x20002c60
 8002090:	20002c64 	.word	0x20002c64
 8002094:	08011f60 	.word	0x08011f60
 8002098:	08011f74 	.word	0x08011f74
    	else
    		il = sprintf(st, "Rssi:%u Freq:%.1f", RSSI, Freq);
 800209c:	4bac      	ldr	r3, [pc, #688]	; (8002350 <main+0x654>)
 800209e:	881b      	ldrh	r3, [r3, #0]
 80020a0:	461c      	mov	r4, r3
 80020a2:	4bac      	ldr	r3, [pc, #688]	; (8002354 <main+0x658>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4618      	mov	r0, r3
 80020a8:	f7fe fa4e 	bl	8000548 <__aeabi_f2d>
 80020ac:	4602      	mov	r2, r0
 80020ae:	460b      	mov	r3, r1
 80020b0:	f107 000c 	add.w	r0, r7, #12
 80020b4:	e9cd 2300 	strd	r2, r3, [sp]
 80020b8:	4622      	mov	r2, r4
 80020ba:	49a7      	ldr	r1, [pc, #668]	; (8002358 <main+0x65c>)
 80020bc:	f00c f848 	bl	800e150 <siprintf>
 80020c0:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    	int lil = il;
 80020c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80020c8:	607b      	str	r3, [r7, #4]
    	xf = ((SCREEN_WIDTH - (Font_6x8.FontWidth * il)) >> 1) & 0x7f;
 80020ca:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80020ce:	461a      	mov	r2, r3
 80020d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80020d4:	fb02 f303 	mul.w	r3, r2, r3
 80020d8:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80020dc:	105b      	asrs	r3, r3, #1
 80020de:	b29b      	uxth	r3, r3
 80020e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80020e4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    	if ((!xf) || (xf > (SCREEN_WIDTH - 3))) xf = 1;
 80020e8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d003      	beq.n	80020f8 <main+0x3fc>
 80020f0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80020f4:	2b7d      	cmp	r3, #125	; 0x7d
 80020f6:	d902      	bls.n	80020fe <main+0x402>
 80020f8:	2301      	movs	r3, #1
 80020fa:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    	ST7565_Print(xf, lin4, st, &Font_6x8, 1, PIX_ON);
 80020fe:	f9b7 008a 	ldrsh.w	r0, [r7, #138]	; 0x8a
 8002102:	f9b7 1068 	ldrsh.w	r1, [r7, #104]	; 0x68
 8002106:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800210a:	f107 020c 	add.w	r2, r7, #12
 800210e:	2401      	movs	r4, #1
 8002110:	9401      	str	r4, [sp, #4]
 8002112:	2401      	movs	r4, #1
 8002114:	9400      	str	r4, [sp, #0]
 8002116:	f7ff fb29 	bl	800176c <ST7565_Print>

    	int im = sprintf(st, "Vol:%u BassEn:%u", Volume, BassBoost);
 800211a:	4b90      	ldr	r3, [pc, #576]	; (800235c <main+0x660>)
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	461a      	mov	r2, r3
 8002120:	4b8f      	ldr	r3, [pc, #572]	; (8002360 <main+0x664>)
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	f107 000c 	add.w	r0, r7, #12
 8002128:	498e      	ldr	r1, [pc, #568]	; (8002364 <main+0x668>)
 800212a:	f00c f811 	bl	800e150 <siprintf>
 800212e:	6638      	str	r0, [r7, #96]	; 0x60
    	int lim = im;
 8002130:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002132:	603b      	str	r3, [r7, #0]
    	xf = ((SCREEN_WIDTH - (Font_6x8.FontWidth * im)) >> 1) & 0x7f;
 8002134:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8002138:	461a      	mov	r2, r3
 800213a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800213c:	fb02 f303 	mul.w	r3, r2, r3
 8002140:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002144:	105b      	asrs	r3, r3, #1
 8002146:	b29b      	uxth	r3, r3
 8002148:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800214c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    	if ((!xf) || (xf > (SCREEN_WIDTH - 3))) xf = 1;
 8002150:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8002154:	2b00      	cmp	r3, #0
 8002156:	d003      	beq.n	8002160 <main+0x464>
 8002158:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800215c:	2b7d      	cmp	r3, #125	; 0x7d
 800215e:	d902      	bls.n	8002166 <main+0x46a>
 8002160:	2301      	movs	r3, #1
 8002162:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    	ST7565_Print(xf, lin5, st, &Font_6x8, 1, PIX_ON);
 8002166:	f9b7 008a 	ldrsh.w	r0, [r7, #138]	; 0x8a
 800216a:	f9b7 1066 	ldrsh.w	r1, [r7, #102]	; 0x66
 800216e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002172:	f107 020c 	add.w	r2, r7, #12
 8002176:	2401      	movs	r4, #1
 8002178:	9401      	str	r4, [sp, #4]
 800217a:	2401      	movs	r4, #1
 800217c:	9400      	str	r4, [sp, #0]
 800217e:	f7ff faf5 	bl	800176c <ST7565_Print>

    	Report(1, "ChipID:0x%x Chan:%u Freq:%.2f RSSI:%u Band:%.1f-%.1f Vol:%u BassEn:%u\r\n",
 8002182:	4b79      	ldr	r3, [pc, #484]	; (8002368 <main+0x66c>)
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	469a      	mov	sl, r3
 8002188:	4b78      	ldr	r3, [pc, #480]	; (800236c <main+0x670>)
 800218a:	881b      	ldrh	r3, [r3, #0]
 800218c:	469b      	mov	fp, r3
 800218e:	4b71      	ldr	r3, [pc, #452]	; (8002354 <main+0x658>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4618      	mov	r0, r3
 8002194:	f7fe f9d8 	bl	8000548 <__aeabi_f2d>
 8002198:	4604      	mov	r4, r0
 800219a:	460d      	mov	r5, r1
 800219c:	4b6c      	ldr	r3, [pc, #432]	; (8002350 <main+0x654>)
 800219e:	881b      	ldrh	r3, [r3, #0]
 80021a0:	461e      	mov	r6, r3
 80021a2:	4b73      	ldr	r3, [pc, #460]	; (8002370 <main+0x674>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4618      	mov	r0, r3
 80021a8:	f7fe f9ce 	bl	8000548 <__aeabi_f2d>
 80021ac:	4680      	mov	r8, r0
 80021ae:	4689      	mov	r9, r1
 80021b0:	4b70      	ldr	r3, [pc, #448]	; (8002374 <main+0x678>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7fe f9c7 	bl	8000548 <__aeabi_f2d>
 80021ba:	4602      	mov	r2, r0
 80021bc:	460b      	mov	r3, r1
 80021be:	4967      	ldr	r1, [pc, #412]	; (800235c <main+0x660>)
 80021c0:	7809      	ldrb	r1, [r1, #0]
 80021c2:	4608      	mov	r0, r1
 80021c4:	4966      	ldr	r1, [pc, #408]	; (8002360 <main+0x664>)
 80021c6:	7809      	ldrb	r1, [r1, #0]
 80021c8:	9109      	str	r1, [sp, #36]	; 0x24
 80021ca:	9008      	str	r0, [sp, #32]
 80021cc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80021d0:	e9cd 8904 	strd	r8, r9, [sp, #16]
 80021d4:	9602      	str	r6, [sp, #8]
 80021d6:	e9cd 4500 	strd	r4, r5, [sp]
 80021da:	465b      	mov	r3, fp
 80021dc:	4652      	mov	r2, sl
 80021de:	4966      	ldr	r1, [pc, #408]	; (8002378 <main+0x67c>)
 80021e0:	2001      	movs	r0, #1
 80021e2:	f001 fa9f 	bl	8003724 <Report>
    			rdaID, Chan, Freq, RSSI, lBand, rBand, Volume, BassBoost);
	#endif

    ST7565_DrawRectangle(0, Font_6x8.FontHeight, SCREEN_WIDTH - 1, SCREEN_HEIGHT - (Font_6x8.FontHeight << 1) - 2, PIX_ON);
 80021e6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80021ea:	b219      	sxth	r1, r3
 80021ec:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80021f0:	b29b      	uxth	r3, r3
 80021f2:	005b      	lsls	r3, r3, #1
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	f1c3 033e 	rsb	r3, r3, #62	; 0x3e
 80021fa:	b29b      	uxth	r3, r3
 80021fc:	b21b      	sxth	r3, r3
 80021fe:	2201      	movs	r2, #1
 8002200:	9200      	str	r2, [sp, #0]
 8002202:	227f      	movs	r2, #127	; 0x7f
 8002204:	2000      	movs	r0, #0
 8002206:	f7ff fc88 	bl	8001b1a <ST7565_DrawRectangle>
    ST7565_DrawFilledRectangle(0, 0, SCREEN_WIDTH - 1, Font_6x8.FontHeight, PIX_ON);
 800220a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800220e:	b21b      	sxth	r3, r3
 8002210:	2201      	movs	r2, #1
 8002212:	9200      	str	r2, [sp, #0]
 8002214:	227f      	movs	r2, #127	; 0x7f
 8002216:	2100      	movs	r1, #0
 8002218:	2000      	movs	r0, #0
 800221a:	f7ff fd00 	bl	8001c1e <ST7565_DrawFilledRectangle>
    ST7565_Update();
 800221e:	f7ff f8f5 	bl	800140c <ST7565_Update>

    startSec = true;
 8002222:	4b56      	ldr	r3, [pc, #344]	; (800237c <main+0x680>)
 8002224:	2201      	movs	r2, #1
 8002226:	701a      	strb	r2, [r3, #0]

#endif

    uint16_t lastErr = devOK;
 8002228:	2300      	movs	r3, #0
 800222a:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88

    putEvt(evt_Freq);
 800222e:	200c      	movs	r0, #12
 8002230:	f001 f85c 	bl	80032ec <putEvt>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


    while (!restart) {
 8002234:	f000 bc6c 	b.w	8002b10 <main+0xe14>


#ifdef SET_FIFO_MODE
    	evt = getEvt();
 8002238:	f001 f8ca 	bl	80033d0 <getEvt>
 800223c:	4603      	mov	r3, r0
 800223e:	4a50      	ldr	r2, [pc, #320]	; (8002380 <main+0x684>)
 8002240:	6013      	str	r3, [r2, #0]
    	if (evt != evt_None) {
 8002242:	4b4f      	ldr	r3, [pc, #316]	; (8002380 <main+0x684>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800224a:	f000 8449 	beq.w	8002ae0 <main+0xde4>
    		cntEvt = getEvtCount();
 800224e:	f001 f841 	bl	80032d4 <getEvtCount>
 8002252:	4603      	mov	r3, r0
 8002254:	461a      	mov	r2, r3
 8002256:	4b4b      	ldr	r3, [pc, #300]	; (8002384 <main+0x688>)
 8002258:	701a      	strb	r2, [r3, #0]
    		if (evt != evt_Sec) {
 800225a:	4b49      	ldr	r3, [pc, #292]	; (8002380 <main+0x684>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	2b08      	cmp	r3, #8
 8002260:	d050      	beq.n	8002304 <main+0x608>
    			Report(1, "[que:%u] get event '%s'\r\n", cntEvt, str_cmds[evt]);
 8002262:	4b48      	ldr	r3, [pc, #288]	; (8002384 <main+0x688>)
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	b2db      	uxtb	r3, r3
 8002268:	4619      	mov	r1, r3
 800226a:	4b45      	ldr	r3, [pc, #276]	; (8002380 <main+0x684>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a46      	ldr	r2, [pc, #280]	; (8002388 <main+0x68c>)
 8002270:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002274:	460a      	mov	r2, r1
 8002276:	4945      	ldr	r1, [pc, #276]	; (800238c <main+0x690>)
 8002278:	2001      	movs	r0, #1
 800227a:	f001 fa53 	bl	8003724 <Report>
#ifdef SET_DISPLAY
    			ST7565_DrawFilledRectangle(0, SCREEN_HEIGHT - Font_6x8.FontHeight, SCREEN_WIDTH - 1, Font_6x8.FontHeight, PIX_OFF);
 800227e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002282:	b29b      	uxth	r3, r3
 8002284:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8002288:	b29b      	uxth	r3, r3
 800228a:	b219      	sxth	r1, r3
 800228c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002290:	b21b      	sxth	r3, r3
 8002292:	2200      	movs	r2, #0
 8002294:	9200      	str	r2, [sp, #0]
 8002296:	227f      	movs	r2, #127	; 0x7f
 8002298:	2000      	movs	r0, #0
 800229a:	f7ff fcc0 	bl	8001c1e <ST7565_DrawFilledRectangle>
    			dl = sprintf(tmp, "evt(%u) : %s", cntEvt, str_cmds[evt]);
 800229e:	4b39      	ldr	r3, [pc, #228]	; (8002384 <main+0x688>)
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	4619      	mov	r1, r3
 80022a6:	4b36      	ldr	r3, [pc, #216]	; (8002380 <main+0x684>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a37      	ldr	r2, [pc, #220]	; (8002388 <main+0x68c>)
 80022ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022b0:	460a      	mov	r2, r1
 80022b2:	4937      	ldr	r1, [pc, #220]	; (8002390 <main+0x694>)
 80022b4:	4837      	ldr	r0, [pc, #220]	; (8002394 <main+0x698>)
 80022b6:	f00b ff4b 	bl	800e150 <siprintf>
 80022ba:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    			x = ((SCREEN_WIDTH - (Font_6x8.FontWidth * dl)) >> 1) & 0x7f;
 80022be:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80022c2:	461a      	mov	r2, r3
 80022c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80022c8:	fb02 f303 	mul.w	r3, r2, r3
 80022cc:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80022d0:	105b      	asrs	r3, r3, #1
 80022d2:	b29b      	uxth	r3, r3
 80022d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80022d8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
    			ST7565_Print(x, SCREEN_HEIGHT - Font_6x8.FontHeight, tmp, &Font_6x8, 1, PIX_ON);//печатаем надпись с указаным шрифтом и цветом(PIX_ON-белый, PIX_OFF-черный)
 80022dc:	f9b7 0064 	ldrsh.w	r0, [r7, #100]	; 0x64
 80022e0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80022e4:	b29b      	uxth	r3, r3
 80022e6:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	b219      	sxth	r1, r3
 80022ee:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80022f2:	2201      	movs	r2, #1
 80022f4:	9201      	str	r2, [sp, #4]
 80022f6:	2201      	movs	r2, #1
 80022f8:	9200      	str	r2, [sp, #0]
 80022fa:	4a26      	ldr	r2, [pc, #152]	; (8002394 <main+0x698>)
 80022fc:	f7ff fa36 	bl	800176c <ST7565_Print>
    			ST7565_Update();
 8002300:	f7ff f884 	bl	800140c <ST7565_Update>
#endif
    		}
    		switch (evt) {
 8002304:	4b1e      	ldr	r3, [pc, #120]	; (8002380 <main+0x684>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	2b0e      	cmp	r3, #14
 800230a:	f200 83d9 	bhi.w	8002ac0 <main+0xdc4>
 800230e:	a201      	add	r2, pc, #4	; (adr r2, 8002314 <main+0x618>)
 8002310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002314:	08002819 	.word	0x08002819
 8002318:	08002867 	.word	0x08002867
 800231c:	0800287f 	.word	0x0800287f
 8002320:	0800289f 	.word	0x0800289f
 8002324:	080028b1 	.word	0x080028b1
 8002328:	08002a99 	.word	0x08002a99
 800232c:	080028b1 	.word	0x080028b1
 8002330:	08002a23 	.word	0x08002a23
 8002334:	080025f5 	.word	0x080025f5
 8002338:	08002589 	.word	0x08002589
 800233c:	08002801 	.word	0x08002801
 8002340:	08002569 	.word	0x08002569
 8002344:	0800244f 	.word	0x0800244f
 8002348:	080023f5 	.word	0x080023f5
 800234c:	08002399 	.word	0x08002399
 8002350:	20002c6a 	.word	0x20002c6a
 8002354:	200001a8 	.word	0x200001a8
 8002358:	08011f88 	.word	0x08011f88
 800235c:	200001b1 	.word	0x200001b1
 8002360:	20002c6e 	.word	0x20002c6e
 8002364:	08011f9c 	.word	0x08011f9c
 8002368:	20002c6c 	.word	0x20002c6c
 800236c:	20002c68 	.word	0x20002c68
 8002370:	20002c60 	.word	0x20002c60
 8002374:	20002c64 	.word	0x20002c64
 8002378:	08011fb0 	.word	0x08011fb0
 800237c:	20002c5a 	.word	0x20002c5a
 8002380:	20000194 	.word	0x20000194
 8002384:	20001844 	.word	0x20001844
 8002388:	20000058 	.word	0x20000058
 800238c:	08011ff8 	.word	0x08011ff8
 8002390:	08012014 	.word	0x08012014
 8002394:	20000fa4 	.word	0x20000fa4
    			case evt_Bass:
    				if (newBassBoost != BassBoost) {
 8002398:	4b7f      	ldr	r3, [pc, #508]	; (8002598 <main+0x89c>)
 800239a:	781a      	ldrb	r2, [r3, #0]
 800239c:	4b7f      	ldr	r3, [pc, #508]	; (800259c <main+0x8a0>)
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	f000 8386 	beq.w	8002ab2 <main+0xdb6>
    					BassBoost = newBassBoost;
 80023a6:	4b7c      	ldr	r3, [pc, #496]	; (8002598 <main+0x89c>)
 80023a8:	781a      	ldrb	r2, [r3, #0]
 80023aa:	4b7c      	ldr	r3, [pc, #496]	; (800259c <main+0x8a0>)
 80023ac:	701a      	strb	r2, [r3, #0]
    					rda5807_SetBassBoost(BassBoost);
 80023ae:	4b7b      	ldr	r3, [pc, #492]	; (800259c <main+0x8a0>)
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	4618      	mov	r0, r3
 80023b4:	f002 f802 	bl	80043bc <rda5807_SetBassBoost>
    					//
    					sprintf(st, "Vol:%u Bass:%u", Volume, BassBoost);
 80023b8:	4b79      	ldr	r3, [pc, #484]	; (80025a0 <main+0x8a4>)
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	461a      	mov	r2, r3
 80023be:	4b77      	ldr	r3, [pc, #476]	; (800259c <main+0x8a0>)
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	f107 000c 	add.w	r0, r7, #12
 80023c6:	4977      	ldr	r1, [pc, #476]	; (80025a4 <main+0x8a8>)
 80023c8:	f00b fec2 	bl	800e150 <siprintf>
    					showLine(st, lin5, &lib);
 80023cc:	f107 0208 	add.w	r2, r7, #8
 80023d0:	f8b7 1066 	ldrh.w	r1, [r7, #102]	; 0x66
 80023d4:	f107 030c 	add.w	r3, r7, #12
 80023d8:	4618      	mov	r0, r3
 80023da:	f001 f839 	bl	8003450 <showLine>
    					Report(1, "[que:%u] set new BassBoost to %u\r\n", cntEvt, BassBoost);
 80023de:	4b72      	ldr	r3, [pc, #456]	; (80025a8 <main+0x8ac>)
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	461a      	mov	r2, r3
 80023e6:	4b6d      	ldr	r3, [pc, #436]	; (800259c <main+0x8a0>)
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	4970      	ldr	r1, [pc, #448]	; (80025ac <main+0x8b0>)
 80023ec:	2001      	movs	r0, #1
 80023ee:	f001 f999 	bl	8003724 <Report>
    				}
    			break;
 80023f2:	e35e      	b.n	8002ab2 <main+0xdb6>
    			case evt_Vol:
    				if (newVolume != Volume) {
 80023f4:	4b6e      	ldr	r3, [pc, #440]	; (80025b0 <main+0x8b4>)
 80023f6:	781a      	ldrb	r2, [r3, #0]
 80023f8:	4b69      	ldr	r3, [pc, #420]	; (80025a0 <main+0x8a4>)
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	429a      	cmp	r2, r3
 80023fe:	f000 835a 	beq.w	8002ab6 <main+0xdba>
    					Volume = newVolume;
 8002402:	4b6b      	ldr	r3, [pc, #428]	; (80025b0 <main+0x8b4>)
 8002404:	781a      	ldrb	r2, [r3, #0]
 8002406:	4b66      	ldr	r3, [pc, #408]	; (80025a0 <main+0x8a4>)
 8002408:	701a      	strb	r2, [r3, #0]
    					rda5807_SetVolume(Volume);
 800240a:	4b65      	ldr	r3, [pc, #404]	; (80025a0 <main+0x8a4>)
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	4618      	mov	r0, r3
 8002410:	f001 ff8c 	bl	800432c <rda5807_SetVolume>
    					//
    					sprintf(st, "Vol:%u BassEn:%u", Volume, BassBoost);
 8002414:	4b62      	ldr	r3, [pc, #392]	; (80025a0 <main+0x8a4>)
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	461a      	mov	r2, r3
 800241a:	4b60      	ldr	r3, [pc, #384]	; (800259c <main+0x8a0>)
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	f107 000c 	add.w	r0, r7, #12
 8002422:	4964      	ldr	r1, [pc, #400]	; (80025b4 <main+0x8b8>)
 8002424:	f00b fe94 	bl	800e150 <siprintf>
    					showLine(st, lin5, &lim);
 8002428:	463a      	mov	r2, r7
 800242a:	f8b7 1066 	ldrh.w	r1, [r7, #102]	; 0x66
 800242e:	f107 030c 	add.w	r3, r7, #12
 8002432:	4618      	mov	r0, r3
 8002434:	f001 f80c 	bl	8003450 <showLine>
    					Report(1, "[que:%u] set new Volume to %u\r\n", cntEvt, Volume);
 8002438:	4b5b      	ldr	r3, [pc, #364]	; (80025a8 <main+0x8ac>)
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	b2db      	uxtb	r3, r3
 800243e:	461a      	mov	r2, r3
 8002440:	4b57      	ldr	r3, [pc, #348]	; (80025a0 <main+0x8a4>)
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	495c      	ldr	r1, [pc, #368]	; (80025b8 <main+0x8bc>)
 8002446:	2001      	movs	r0, #1
 8002448:	f001 f96c 	bl	8003724 <Report>
    				}
    			break;
 800244c:	e333      	b.n	8002ab6 <main+0xdba>
    			case evt_Freq:
    				if ((newFreq >= lBand) && (newFreq <= rBand)) {
 800244e:	4b5b      	ldr	r3, [pc, #364]	; (80025bc <main+0x8c0>)
 8002450:	ed93 7a00 	vldr	s14, [r3]
 8002454:	4b5a      	ldr	r3, [pc, #360]	; (80025c0 <main+0x8c4>)
 8002456:	edd3 7a00 	vldr	s15, [r3]
 800245a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800245e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002462:	da00      	bge.n	8002466 <main+0x76a>
    							sprintf(st, "Rssi:%u Freq:%.1f", RSSI, Freq);
    						showLine(st, lin4, &lil);
    						Report(1, "[que:%u] set new Freq to %.1f (Chan:%u)\r\n", cntEvt, Freq, Chan);
    					}
    				}
				break;
 8002464:	e329      	b.n	8002aba <main+0xdbe>
    				if ((newFreq >= lBand) && (newFreq <= rBand)) {
 8002466:	4b55      	ldr	r3, [pc, #340]	; (80025bc <main+0x8c0>)
 8002468:	ed93 7a00 	vldr	s14, [r3]
 800246c:	4b55      	ldr	r3, [pc, #340]	; (80025c4 <main+0x8c8>)
 800246e:	edd3 7a00 	vldr	s15, [r3]
 8002472:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800247a:	d900      	bls.n	800247e <main+0x782>
				break;
 800247c:	e31d      	b.n	8002aba <main+0xdbe>
    					if (newFreq != Freq) {
 800247e:	4b4f      	ldr	r3, [pc, #316]	; (80025bc <main+0x8c0>)
 8002480:	ed93 7a00 	vldr	s14, [r3]
 8002484:	4b50      	ldr	r3, [pc, #320]	; (80025c8 <main+0x8cc>)
 8002486:	edd3 7a00 	vldr	s15, [r3]
 800248a:	eeb4 7a67 	vcmp.f32	s14, s15
 800248e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002492:	f000 8312 	beq.w	8002aba <main+0xdbe>
    						Freq = newFreq;
 8002496:	4b49      	ldr	r3, [pc, #292]	; (80025bc <main+0x8c0>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a4b      	ldr	r2, [pc, #300]	; (80025c8 <main+0x8cc>)
 800249c:	6013      	str	r3, [r2, #0]
    						uint16_t fr = (uint16_t)(Freq * 10);
 800249e:	4b4a      	ldr	r3, [pc, #296]	; (80025c8 <main+0x8cc>)
 80024a0:	edd3 7a00 	vldr	s15, [r3]
 80024a4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80024a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024b0:	ee17 3a90 	vmov	r3, s15
 80024b4:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
    						rda5807_SetFreq_In100Khz(fr);
 80024b8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80024bc:	4618      	mov	r0, r3
 80024be:	f001 ff9d 	bl	80043fc <rda5807_SetFreq_In100Khz>
    						stereo = rda5807_Get_StereoMonoFlag();
 80024c2:	f002 f891 	bl	80045e8 <rda5807_Get_StereoMonoFlag>
 80024c6:	4603      	mov	r3, r0
 80024c8:	461a      	mov	r2, r3
 80024ca:	4b40      	ldr	r3, [pc, #256]	; (80025cc <main+0x8d0>)
 80024cc:	701a      	strb	r2, [r3, #0]
    						Chan = rda5807_Get_Channel();
 80024ce:	f002 f8a3 	bl	8004618 <rda5807_Get_Channel>
 80024d2:	4603      	mov	r3, r0
 80024d4:	461a      	mov	r2, r3
 80024d6:	4b3e      	ldr	r3, [pc, #248]	; (80025d0 <main+0x8d4>)
 80024d8:	801a      	strh	r2, [r3, #0]
    						if (stereo)
 80024da:	4b3c      	ldr	r3, [pc, #240]	; (80025cc <main+0x8d0>)
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d012      	beq.n	8002508 <main+0x80c>
    							sprintf(st, "Rssi:%u Freq:%.1f S", RSSI, Freq);
 80024e2:	4b3c      	ldr	r3, [pc, #240]	; (80025d4 <main+0x8d8>)
 80024e4:	881b      	ldrh	r3, [r3, #0]
 80024e6:	461c      	mov	r4, r3
 80024e8:	4b37      	ldr	r3, [pc, #220]	; (80025c8 <main+0x8cc>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4618      	mov	r0, r3
 80024ee:	f7fe f82b 	bl	8000548 <__aeabi_f2d>
 80024f2:	4602      	mov	r2, r0
 80024f4:	460b      	mov	r3, r1
 80024f6:	f107 000c 	add.w	r0, r7, #12
 80024fa:	e9cd 2300 	strd	r2, r3, [sp]
 80024fe:	4622      	mov	r2, r4
 8002500:	4935      	ldr	r1, [pc, #212]	; (80025d8 <main+0x8dc>)
 8002502:	f00b fe25 	bl	800e150 <siprintf>
 8002506:	e011      	b.n	800252c <main+0x830>
    							sprintf(st, "Rssi:%u Freq:%.1f", RSSI, Freq);
 8002508:	4b32      	ldr	r3, [pc, #200]	; (80025d4 <main+0x8d8>)
 800250a:	881b      	ldrh	r3, [r3, #0]
 800250c:	461c      	mov	r4, r3
 800250e:	4b2e      	ldr	r3, [pc, #184]	; (80025c8 <main+0x8cc>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4618      	mov	r0, r3
 8002514:	f7fe f818 	bl	8000548 <__aeabi_f2d>
 8002518:	4602      	mov	r2, r0
 800251a:	460b      	mov	r3, r1
 800251c:	f107 000c 	add.w	r0, r7, #12
 8002520:	e9cd 2300 	strd	r2, r3, [sp]
 8002524:	4622      	mov	r2, r4
 8002526:	492d      	ldr	r1, [pc, #180]	; (80025dc <main+0x8e0>)
 8002528:	f00b fe12 	bl	800e150 <siprintf>
    						showLine(st, lin4, &lil);
 800252c:	1d3a      	adds	r2, r7, #4
 800252e:	f8b7 1068 	ldrh.w	r1, [r7, #104]	; 0x68
 8002532:	f107 030c 	add.w	r3, r7, #12
 8002536:	4618      	mov	r0, r3
 8002538:	f000 ff8a 	bl	8003450 <showLine>
    						Report(1, "[que:%u] set new Freq to %.1f (Chan:%u)\r\n", cntEvt, Freq, Chan);
 800253c:	4b1a      	ldr	r3, [pc, #104]	; (80025a8 <main+0x8ac>)
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	b2db      	uxtb	r3, r3
 8002542:	461c      	mov	r4, r3
 8002544:	4b20      	ldr	r3, [pc, #128]	; (80025c8 <main+0x8cc>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4618      	mov	r0, r3
 800254a:	f7fd fffd 	bl	8000548 <__aeabi_f2d>
 800254e:	4602      	mov	r2, r0
 8002550:	460b      	mov	r3, r1
 8002552:	491f      	ldr	r1, [pc, #124]	; (80025d0 <main+0x8d4>)
 8002554:	8809      	ldrh	r1, [r1, #0]
 8002556:	9102      	str	r1, [sp, #8]
 8002558:	e9cd 2300 	strd	r2, r3, [sp]
 800255c:	4622      	mov	r2, r4
 800255e:	4920      	ldr	r1, [pc, #128]	; (80025e0 <main+0x8e4>)
 8002560:	2001      	movs	r0, #1
 8002562:	f001 f8df 	bl	8003724 <Report>
				break;
 8002566:	e2a8      	b.n	8002aba <main+0xdbe>
    			case evt_Scan:
    				if (!scan) {
 8002568:	4b1e      	ldr	r3, [pc, #120]	; (80025e4 <main+0x8e8>)
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	b2db      	uxtb	r3, r3
 800256e:	2b00      	cmp	r3, #0
 8002570:	f040 82a5 	bne.w	8002abe <main+0xdc2>
    					scan = 1;
 8002574:	4b1b      	ldr	r3, [pc, #108]	; (80025e4 <main+0x8e8>)
 8002576:	2201      	movs	r2, #1
 8002578:	701a      	strb	r2, [r3, #0]
    					rda5807_StartSeek(seek_up);
 800257a:	4b1b      	ldr	r3, [pc, #108]	; (80025e8 <main+0x8ec>)
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	b2db      	uxtb	r3, r3
 8002580:	4618      	mov	r0, r3
 8002582:	f001 fff5 	bl	8004570 <rda5807_StartSeek>
    				}
    			break;
 8002586:	e29a      	b.n	8002abe <main+0xdc2>
    			case evt_Ver:
    				Report(1, "Ver.%s\r\n", ver);
 8002588:	4b18      	ldr	r3, [pc, #96]	; (80025ec <main+0x8f0>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	461a      	mov	r2, r3
 800258e:	4918      	ldr	r1, [pc, #96]	; (80025f0 <main+0x8f4>)
 8002590:	2001      	movs	r0, #1
 8002592:	f001 f8c7 	bl	8003724 <Report>
    			break;
 8002596:	e293      	b.n	8002ac0 <main+0xdc4>
 8002598:	20002c6f 	.word	0x20002c6f
 800259c:	20002c6e 	.word	0x20002c6e
 80025a0:	200001b1 	.word	0x200001b1
 80025a4:	08012024 	.word	0x08012024
 80025a8:	20001844 	.word	0x20001844
 80025ac:	08012034 	.word	0x08012034
 80025b0:	200001b2 	.word	0x200001b2
 80025b4:	08011f9c 	.word	0x08011f9c
 80025b8:	08012058 	.word	0x08012058
 80025bc:	200001ac 	.word	0x200001ac
 80025c0:	20002c60 	.word	0x20002c60
 80025c4:	20002c64 	.word	0x20002c64
 80025c8:	200001a8 	.word	0x200001a8
 80025cc:	20002c70 	.word	0x20002c70
 80025d0:	20002c68 	.word	0x20002c68
 80025d4:	20002c6a 	.word	0x20002c6a
 80025d8:	08011f74 	.word	0x08011f74
 80025dc:	08011f88 	.word	0x08011f88
 80025e0:	08012078 	.word	0x08012078
 80025e4:	20002c6d 	.word	0x20002c6d
 80025e8:	200001b0 	.word	0x200001b0
 80025ec:	20000004 	.word	0x20000004
 80025f0:	080120a4 	.word	0x080120a4
    			case evt_Sec:
    			{
#ifdef SET_DISPLAY
    				dl = sec2str(st);
 80025f4:	f107 030c 	add.w	r3, r7, #12
 80025f8:	4618      	mov	r0, r3
 80025fa:	f000 fff9 	bl	80035f0 <sec2str>
 80025fe:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    				x = ((SCREEN_WIDTH - (Font_6x8.FontWidth * dl)) >> 1) & 0x7f;
 8002602:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8002606:	461a      	mov	r2, r3
 8002608:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800260c:	fb02 f303 	mul.w	r3, r2, r3
 8002610:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002614:	105b      	asrs	r3, r3, #1
 8002616:	b29b      	uxth	r3, r3
 8002618:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800261c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
    				ST7565_Print(x, lin1, st, &Font_6x8, 0, PIX_OFF);
 8002620:	f9b7 0064 	ldrsh.w	r0, [r7, #100]	; 0x64
 8002624:	f9b7 106e 	ldrsh.w	r1, [r7, #110]	; 0x6e
 8002628:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800262c:	f107 020c 	add.w	r2, r7, #12
 8002630:	2400      	movs	r4, #0
 8002632:	9401      	str	r4, [sp, #4]
 8002634:	2400      	movs	r4, #0
 8002636:	9400      	str	r4, [sp, #0]
 8002638:	f7ff f898 	bl	800176c <ST7565_Print>
#endif
    				//
    				if (scan) {
 800263c:	4bb1      	ldr	r3, [pc, #708]	; (8002904 <main+0xc08>)
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	b2db      	uxtb	r3, r3
 8002642:	2b00      	cmp	r3, #0
 8002644:	d036      	beq.n	80026b4 <main+0x9b8>
    					if (rda5807_Get_SeekTuneReadyFlag()) {//RadioNewState(Idle, 10);
 8002646:	f001 ffbd 	bl	80045c4 <rda5807_Get_SeekTuneReadyFlag>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d031      	beq.n	80026b4 <main+0x9b8>
    						Freq = (float)rda5807_GetFreq_In100Khz();
 8002650:	f001 ff4e 	bl	80044f0 <rda5807_GetFreq_In100Khz>
 8002654:	4603      	mov	r3, r0
 8002656:	ee07 3a90 	vmov	s15, r3
 800265a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800265e:	4baa      	ldr	r3, [pc, #680]	; (8002908 <main+0xc0c>)
 8002660:	edc3 7a00 	vstr	s15, [r3]
    						Freq /= 10;
 8002664:	4ba8      	ldr	r3, [pc, #672]	; (8002908 <main+0xc0c>)
 8002666:	ed93 7a00 	vldr	s14, [r3]
 800266a:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800266e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002672:	4ba5      	ldr	r3, [pc, #660]	; (8002908 <main+0xc0c>)
 8002674:	edc3 7a00 	vstr	s15, [r3]
    						scan = 0;
 8002678:	4ba2      	ldr	r3, [pc, #648]	; (8002904 <main+0xc08>)
 800267a:	2200      	movs	r2, #0
 800267c:	701a      	strb	r2, [r3, #0]
    						Chan = rda5807_Get_Channel();
 800267e:	f001 ffcb 	bl	8004618 <rda5807_Get_Channel>
 8002682:	4603      	mov	r3, r0
 8002684:	461a      	mov	r2, r3
 8002686:	4ba1      	ldr	r3, [pc, #644]	; (800290c <main+0xc10>)
 8002688:	801a      	strh	r2, [r3, #0]
    						Report(1, "[que:%u] set new Freq to %.1f (Chan:%u)\r\n", cntEvt, Freq, Chan);
 800268a:	4ba1      	ldr	r3, [pc, #644]	; (8002910 <main+0xc14>)
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	b2db      	uxtb	r3, r3
 8002690:	461c      	mov	r4, r3
 8002692:	4b9d      	ldr	r3, [pc, #628]	; (8002908 <main+0xc0c>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4618      	mov	r0, r3
 8002698:	f7fd ff56 	bl	8000548 <__aeabi_f2d>
 800269c:	4602      	mov	r2, r0
 800269e:	460b      	mov	r3, r1
 80026a0:	499a      	ldr	r1, [pc, #616]	; (800290c <main+0xc10>)
 80026a2:	8809      	ldrh	r1, [r1, #0]
 80026a4:	9102      	str	r1, [sp, #8]
 80026a6:	e9cd 2300 	strd	r2, r3, [sp]
 80026aa:	4622      	mov	r2, r4
 80026ac:	4999      	ldr	r1, [pc, #612]	; (8002914 <main+0xc18>)
 80026ae:	2001      	movs	r0, #1
 80026b0:	f001 f838 	bl	8003724 <Report>
    					}
    				}
    				//
    				uint16_t rssi = rda5807_rssi();
 80026b4:	f001 fc62 	bl	8003f7c <rda5807_rssi>
 80026b8:	4603      	mov	r3, r0
 80026ba:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
    				if (rssi != RSSI) {
 80026be:	4b96      	ldr	r3, [pc, #600]	; (8002918 <main+0xc1c>)
 80026c0:	881b      	ldrh	r3, [r3, #0]
 80026c2:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d03a      	beq.n	8002740 <main+0xa44>
    					RSSI = rssi;
 80026ca:	4a93      	ldr	r2, [pc, #588]	; (8002918 <main+0xc1c>)
 80026cc:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80026d0:	8013      	strh	r3, [r2, #0]
    					stereo = rda5807_Get_StereoMonoFlag();
 80026d2:	f001 ff89 	bl	80045e8 <rda5807_Get_StereoMonoFlag>
 80026d6:	4603      	mov	r3, r0
 80026d8:	461a      	mov	r2, r3
 80026da:	4b90      	ldr	r3, [pc, #576]	; (800291c <main+0xc20>)
 80026dc:	701a      	strb	r2, [r3, #0]
#ifdef SET_DISPLAY
    					if (stereo)
 80026de:	4b8f      	ldr	r3, [pc, #572]	; (800291c <main+0xc20>)
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d012      	beq.n	800270c <main+0xa10>
    						sprintf(st, "Rssi:%u Freq:%.1f S", RSSI, Freq);
 80026e6:	4b8c      	ldr	r3, [pc, #560]	; (8002918 <main+0xc1c>)
 80026e8:	881b      	ldrh	r3, [r3, #0]
 80026ea:	461c      	mov	r4, r3
 80026ec:	4b86      	ldr	r3, [pc, #536]	; (8002908 <main+0xc0c>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4618      	mov	r0, r3
 80026f2:	f7fd ff29 	bl	8000548 <__aeabi_f2d>
 80026f6:	4602      	mov	r2, r0
 80026f8:	460b      	mov	r3, r1
 80026fa:	f107 000c 	add.w	r0, r7, #12
 80026fe:	e9cd 2300 	strd	r2, r3, [sp]
 8002702:	4622      	mov	r2, r4
 8002704:	4986      	ldr	r1, [pc, #536]	; (8002920 <main+0xc24>)
 8002706:	f00b fd23 	bl	800e150 <siprintf>
 800270a:	e011      	b.n	8002730 <main+0xa34>
    					else
    						sprintf(st, "Rssi:%u Freq:%.1f", RSSI, Freq);
 800270c:	4b82      	ldr	r3, [pc, #520]	; (8002918 <main+0xc1c>)
 800270e:	881b      	ldrh	r3, [r3, #0]
 8002710:	461c      	mov	r4, r3
 8002712:	4b7d      	ldr	r3, [pc, #500]	; (8002908 <main+0xc0c>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4618      	mov	r0, r3
 8002718:	f7fd ff16 	bl	8000548 <__aeabi_f2d>
 800271c:	4602      	mov	r2, r0
 800271e:	460b      	mov	r3, r1
 8002720:	f107 000c 	add.w	r0, r7, #12
 8002724:	e9cd 2300 	strd	r2, r3, [sp]
 8002728:	4622      	mov	r2, r4
 800272a:	497e      	ldr	r1, [pc, #504]	; (8002924 <main+0xc28>)
 800272c:	f00b fd10 	bl	800e150 <siprintf>
    					showLine(st, lin4, &lil);
 8002730:	1d3a      	adds	r2, r7, #4
 8002732:	f8b7 1068 	ldrh.w	r1, [r7, #104]	; 0x68
 8002736:	f107 030c 	add.w	r3, r7, #12
 800273a:	4618      	mov	r0, r3
 800273c:	f000 fe88 	bl	8003450 <showLine>
    					//Report(1, "ChipID:0x%x Chan:%u Freq:%.2f RSSI:%u\r\n", rdaID, Chan, Freq, RSSI);
#endif
    				}
    				//
    				if (devError) {
 8002740:	4b79      	ldr	r3, [pc, #484]	; (8002928 <main+0xc2c>)
 8002742:	881b      	ldrh	r3, [r3, #0]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d00d      	beq.n	8002764 <main+0xa68>
    					dl = sprintf(tmp, "devError : 0x%04X", devError);
 8002748:	4b77      	ldr	r3, [pc, #476]	; (8002928 <main+0xc2c>)
 800274a:	881b      	ldrh	r3, [r3, #0]
 800274c:	461a      	mov	r2, r3
 800274e:	4977      	ldr	r1, [pc, #476]	; (800292c <main+0xc30>)
 8002750:	4877      	ldr	r0, [pc, #476]	; (8002930 <main+0xc34>)
 8002752:	f00b fcfd 	bl	800e150 <siprintf>
 8002756:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    					lastErr = devError;
 800275a:	4b73      	ldr	r3, [pc, #460]	; (8002928 <main+0xc2c>)
 800275c:	881b      	ldrh	r3, [r3, #0]
 800275e:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8002762:	e013      	b.n	800278c <main+0xa90>
    				} else {
    					if (lastErr) {
 8002764:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8002768:	2b00      	cmp	r3, #0
 800276a:	d00c      	beq.n	8002786 <main+0xa8a>
    						dl = sprintf(tmp, "Ver.%s", ver);
 800276c:	4b71      	ldr	r3, [pc, #452]	; (8002934 <main+0xc38>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	461a      	mov	r2, r3
 8002772:	4971      	ldr	r1, [pc, #452]	; (8002938 <main+0xc3c>)
 8002774:	486e      	ldr	r0, [pc, #440]	; (8002930 <main+0xc34>)
 8002776:	f00b fceb 	bl	800e150 <siprintf>
 800277a:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    						lastErr = devOK;
 800277e:	2300      	movs	r3, #0
 8002780:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8002784:	e002      	b.n	800278c <main+0xa90>
    					} else dl = 0;
 8002786:	2300      	movs	r3, #0
 8002788:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    				}
#ifdef SET_DISPLAY
    				if (dl) {
 800278c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002790:	2b00      	cmp	r3, #0
 8002792:	d032      	beq.n	80027fa <main+0xafe>
    					ST7565_DrawFilledRectangle(0, SCREEN_HEIGHT - Font_6x8.FontHeight, SCREEN_WIDTH - 1, Font_6x8.FontHeight, PIX_OFF);
 8002794:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002798:	b29b      	uxth	r3, r3
 800279a:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800279e:	b29b      	uxth	r3, r3
 80027a0:	b219      	sxth	r1, r3
 80027a2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80027a6:	b21b      	sxth	r3, r3
 80027a8:	2200      	movs	r2, #0
 80027aa:	9200      	str	r2, [sp, #0]
 80027ac:	227f      	movs	r2, #127	; 0x7f
 80027ae:	2000      	movs	r0, #0
 80027b0:	f7ff fa35 	bl	8001c1e <ST7565_DrawFilledRectangle>
    					x = ((SCREEN_WIDTH - (Font_6x8.FontWidth * dl)) >> 1) & 0x7f;
 80027b4:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80027b8:	461a      	mov	r2, r3
 80027ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80027be:	fb02 f303 	mul.w	r3, r2, r3
 80027c2:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80027c6:	105b      	asrs	r3, r3, #1
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80027ce:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
    					ST7565_Print(x, SCREEN_HEIGHT - Font_6x8.FontHeight, tmp, &Font_6x8, 1, PIX_ON);
 80027d2:	f9b7 0064 	ldrsh.w	r0, [r7, #100]	; 0x64
 80027d6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80027da:	b29b      	uxth	r3, r3
 80027dc:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	b219      	sxth	r1, r3
 80027e4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80027e8:	2201      	movs	r2, #1
 80027ea:	9201      	str	r2, [sp, #4]
 80027ec:	2201      	movs	r2, #1
 80027ee:	9200      	str	r2, [sp, #0]
 80027f0:	4a4f      	ldr	r2, [pc, #316]	; (8002930 <main+0xc34>)
 80027f2:	f7fe ffbb 	bl	800176c <ST7565_Print>
    					ST7565_Update();
 80027f6:	f7fe fe09 	bl	800140c <ST7565_Update>
    				}
    				//
    				ST7565_Update();
 80027fa:	f7fe fe07 	bl	800140c <ST7565_Update>
#endif
    			}
    			break;
 80027fe:	e15f      	b.n	8002ac0 <main+0xdc4>
    			case evt_Clr:
    				devError = devOK;
 8002800:	4b49      	ldr	r3, [pc, #292]	; (8002928 <main+0xc2c>)
 8002802:	2200      	movs	r2, #0
 8002804:	801a      	strh	r2, [r3, #0]
    				Report(1, "[que:%u] Clear all Errors...\r\n", cntEvt);
 8002806:	4b42      	ldr	r3, [pc, #264]	; (8002910 <main+0xc14>)
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	b2db      	uxtb	r3, r3
 800280c:	461a      	mov	r2, r3
 800280e:	494b      	ldr	r1, [pc, #300]	; (800293c <main+0xc40>)
 8002810:	2001      	movs	r0, #1
 8002812:	f000 ff87 	bl	8003724 <Report>
    			break;
 8002816:	e153      	b.n	8002ac0 <main+0xdc4>
    			case evt_Help:
    				stx[0] = '\0';
 8002818:	4b49      	ldr	r3, [pc, #292]	; (8002940 <main+0xc44>)
 800281a:	2200      	movs	r2, #0
 800281c:	701a      	strb	r2, [r3, #0]
    				for (int8_t i = 0; i < MAX_CMDS; i++) sprintf(stx+strlen(stx), "\t%s\r\n", s_cmds[i]);
 800281e:	2300      	movs	r3, #0
 8002820:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8002824:	e015      	b.n	8002852 <main+0xb56>
 8002826:	4846      	ldr	r0, [pc, #280]	; (8002940 <main+0xc44>)
 8002828:	f7fd fcd2 	bl	80001d0 <strlen>
 800282c:	4603      	mov	r3, r0
 800282e:	4a44      	ldr	r2, [pc, #272]	; (8002940 <main+0xc44>)
 8002830:	1898      	adds	r0, r3, r2
 8002832:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 8002836:	4a43      	ldr	r2, [pc, #268]	; (8002944 <main+0xc48>)
 8002838:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800283c:	461a      	mov	r2, r3
 800283e:	4942      	ldr	r1, [pc, #264]	; (8002948 <main+0xc4c>)
 8002840:	f00b fc86 	bl	800e150 <siprintf>
 8002844:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 8002848:	b2db      	uxtb	r3, r3
 800284a:	3301      	adds	r3, #1
 800284c:	b2db      	uxtb	r3, r3
 800284e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8002852:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 8002856:	2b0e      	cmp	r3, #14
 8002858:	dde5      	ble.n	8002826 <main+0xb2a>
    				Report(0, "%s", stx);
 800285a:	4a39      	ldr	r2, [pc, #228]	; (8002940 <main+0xc44>)
 800285c:	493b      	ldr	r1, [pc, #236]	; (800294c <main+0xc50>)
 800285e:	2000      	movs	r0, #0
 8002860:	f000 ff60 	bl	8003724 <Report>
    			break;
 8002864:	e12c      	b.n	8002ac0 <main+0xdc4>
    			case evt_Restart:
    				restart = 1;
 8002866:	4b3a      	ldr	r3, [pc, #232]	; (8002950 <main+0xc54>)
 8002868:	2201      	movs	r2, #1
 800286a:	701a      	strb	r2, [r3, #0]
    				Report(1, "[que:%u] Restart system...\r\n", cntEvt);
 800286c:	4b28      	ldr	r3, [pc, #160]	; (8002910 <main+0xc14>)
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	b2db      	uxtb	r3, r3
 8002872:	461a      	mov	r2, r3
 8002874:	4937      	ldr	r1, [pc, #220]	; (8002954 <main+0xc58>)
 8002876:	2001      	movs	r0, #1
 8002878:	f000 ff54 	bl	8003724 <Report>
    			break;
 800287c:	e120      	b.n	8002ac0 <main+0xdc4>
    			case evt_Epoch:
    				set_Date(epoch);
 800287e:	4b36      	ldr	r3, [pc, #216]	; (8002958 <main+0xc5c>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4618      	mov	r0, r3
 8002884:	f000 fe54 	bl	8003530 <set_Date>
    				Report(1, "[que:%u] Set Unix TimeStamp to %lu\r\n", cntEvt, epoch);
 8002888:	4b21      	ldr	r3, [pc, #132]	; (8002910 <main+0xc14>)
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	b2db      	uxtb	r3, r3
 800288e:	461a      	mov	r2, r3
 8002890:	4b31      	ldr	r3, [pc, #196]	; (8002958 <main+0xc5c>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4931      	ldr	r1, [pc, #196]	; (800295c <main+0xc60>)
 8002896:	2001      	movs	r0, #1
 8002898:	f000 ff44 	bl	8003724 <Report>
    			break;
 800289c:	e110      	b.n	8002ac0 <main+0xdc4>
    			case evt_Err:
    				Report(1, "[que:%u] Error input from uart\r\n", cntEvt);
 800289e:	4b1c      	ldr	r3, [pc, #112]	; (8002910 <main+0xc14>)
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	461a      	mov	r2, r3
 80028a6:	492e      	ldr	r1, [pc, #184]	; (8002960 <main+0xc64>)
 80028a8:	2001      	movs	r0, #1
 80028aa:	f000 ff3b 	bl	8003724 <Report>
    			break;
 80028ae:	e107      	b.n	8002ac0 <main+0xdc4>
#ifdef SET_W25FLASH
    			case evt_sRead:
    			case evt_sNext:
    			{
    				uint32_t w25_adr = (adr_sector * W25qxx_getSectorSize()) + offset_sector;
 80028b0:	f002 fd0e 	bl	80052d0 <W25qxx_getSectorSize>
 80028b4:	4603      	mov	r3, r0
 80028b6:	4a2b      	ldr	r2, [pc, #172]	; (8002964 <main+0xc68>)
 80028b8:	6812      	ldr	r2, [r2, #0]
 80028ba:	fb02 f303 	mul.w	r3, r2, r3
 80028be:	4a2a      	ldr	r2, [pc, #168]	; (8002968 <main+0xc6c>)
 80028c0:	6812      	ldr	r2, [r2, #0]
 80028c2:	4413      	add	r3, r2
 80028c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    				uint32_t dlin = list_sector;
 80028c8:	4b28      	ldr	r3, [pc, #160]	; (800296c <main+0xc70>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	65bb      	str	r3, [r7, #88]	; 0x58
    				int step = 32;
 80028ce:	2320      	movs	r3, #32
 80028d0:	657b      	str	r3, [r7, #84]	; 0x54
    				uint32_t ind = 0;
 80028d2:	2300      	movs	r3, #0
 80028d4:	67fb      	str	r3, [r7, #124]	; 0x7c
    				W25qxx_ReadSector(fs_work, adr_sector, offset_sector, dlin);
 80028d6:	4b23      	ldr	r3, [pc, #140]	; (8002964 <main+0xc68>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4619      	mov	r1, r3
 80028dc:	4b22      	ldr	r3, [pc, #136]	; (8002968 <main+0xc6c>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	461a      	mov	r2, r3
 80028e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028e4:	4822      	ldr	r0, [pc, #136]	; (8002970 <main+0xc74>)
 80028e6:	f003 f805 	bl	80058f4 <W25qxx_ReadSector>
    				Report(0, "Read sector:%d offset:%d len:%u\r\n", adr_sector, offset_sector, dlin);
 80028ea:	4b1e      	ldr	r3, [pc, #120]	; (8002964 <main+0xc68>)
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	4b1e      	ldr	r3, [pc, #120]	; (8002968 <main+0xc6c>)
 80028f0:	6819      	ldr	r1, [r3, #0]
 80028f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028f4:	9300      	str	r3, [sp, #0]
 80028f6:	460b      	mov	r3, r1
 80028f8:	491e      	ldr	r1, [pc, #120]	; (8002974 <main+0xc78>)
 80028fa:	2000      	movs	r0, #0
 80028fc:	f000 ff12 	bl	8003724 <Report>
    				while (ind < dlin) {
 8002900:	e08a      	b.n	8002a18 <main+0xd1c>
 8002902:	bf00      	nop
 8002904:	20002c6d 	.word	0x20002c6d
 8002908:	200001a8 	.word	0x200001a8
 800290c:	20002c68 	.word	0x20002c68
 8002910:	20001844 	.word	0x20001844
 8002914:	08012078 	.word	0x08012078
 8002918:	20002c6a 	.word	0x20002c6a
 800291c:	20002c70 	.word	0x20002c70
 8002920:	08011f74 	.word	0x08011f74
 8002924:	08011f88 	.word	0x08011f88
 8002928:	20001424 	.word	0x20001424
 800292c:	080120b0 	.word	0x080120b0
 8002930:	20000fa4 	.word	0x20000fa4
 8002934:	20000004 	.word	0x20000004
 8002938:	08011f44 	.word	0x08011f44
 800293c:	080120c4 	.word	0x080120c4
 8002940:	20000ba4 	.word	0x20000ba4
 8002944:	2000001c 	.word	0x2000001c
 8002948:	080120e4 	.word	0x080120e4
 800294c:	080120ec 	.word	0x080120ec
 8002950:	2000183c 	.word	0x2000183c
 8002954:	080120f0 	.word	0x080120f0
 8002958:	20000018 	.word	0x20000018
 800295c:	08012110 	.word	0x08012110
 8002960:	08012138 	.word	0x08012138
 8002964:	20001848 	.word	0x20001848
 8002968:	2000184c 	.word	0x2000184c
 800296c:	20001850 	.word	0x20001850
 8002970:	20001858 	.word	0x20001858
 8002974:	0801215c 	.word	0x0801215c
    					strf[0] = '\0';
 8002978:	4b74      	ldr	r3, [pc, #464]	; (8002b4c <main+0xe50>)
 800297a:	2200      	movs	r2, #0
 800297c:	701a      	strb	r2, [r3, #0]
    					while (1) {
    						sprintf(strf+strlen(strf), "%06X ", (unsigned int)w25_adr);
 800297e:	4873      	ldr	r0, [pc, #460]	; (8002b4c <main+0xe50>)
 8002980:	f7fd fc26 	bl	80001d0 <strlen>
 8002984:	4603      	mov	r3, r0
 8002986:	4a71      	ldr	r2, [pc, #452]	; (8002b4c <main+0xe50>)
 8002988:	4413      	add	r3, r2
 800298a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800298e:	4970      	ldr	r1, [pc, #448]	; (8002b50 <main+0xe54>)
 8002990:	4618      	mov	r0, r3
 8002992:	f00b fbdd 	bl	800e150 <siprintf>
    						for (int i = 0; i < step; i++) sprintf(strf+strlen(strf), " %02X", fs_work[i + ind]);
 8002996:	2300      	movs	r3, #0
 8002998:	67bb      	str	r3, [r7, #120]	; 0x78
 800299a:	e011      	b.n	80029c0 <main+0xcc4>
 800299c:	486b      	ldr	r0, [pc, #428]	; (8002b4c <main+0xe50>)
 800299e:	f7fd fc17 	bl	80001d0 <strlen>
 80029a2:	4603      	mov	r3, r0
 80029a4:	4a69      	ldr	r2, [pc, #420]	; (8002b4c <main+0xe50>)
 80029a6:	1898      	adds	r0, r3, r2
 80029a8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80029aa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80029ac:	4413      	add	r3, r2
 80029ae:	4a69      	ldr	r2, [pc, #420]	; (8002b54 <main+0xe58>)
 80029b0:	5cd3      	ldrb	r3, [r2, r3]
 80029b2:	461a      	mov	r2, r3
 80029b4:	4968      	ldr	r1, [pc, #416]	; (8002b58 <main+0xe5c>)
 80029b6:	f00b fbcb 	bl	800e150 <siprintf>
 80029ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80029bc:	3301      	adds	r3, #1
 80029be:	67bb      	str	r3, [r7, #120]	; 0x78
 80029c0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80029c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029c4:	429a      	cmp	r2, r3
 80029c6:	dbe9      	blt.n	800299c <main+0xca0>
    						strcat(strf, "\r\n");
 80029c8:	4860      	ldr	r0, [pc, #384]	; (8002b4c <main+0xe50>)
 80029ca:	f7fd fc01 	bl	80001d0 <strlen>
 80029ce:	4603      	mov	r3, r0
 80029d0:	461a      	mov	r2, r3
 80029d2:	4b5e      	ldr	r3, [pc, #376]	; (8002b4c <main+0xe50>)
 80029d4:	4413      	add	r3, r2
 80029d6:	4a61      	ldr	r2, [pc, #388]	; (8002b5c <main+0xe60>)
 80029d8:	8811      	ldrh	r1, [r2, #0]
 80029da:	7892      	ldrb	r2, [r2, #2]
 80029dc:	8019      	strh	r1, [r3, #0]
 80029de:	709a      	strb	r2, [r3, #2]
    						w25_adr += step;
 80029e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80029e6:	4413      	add	r3, r2
 80029e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    						ind += step;
 80029ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029ee:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80029f0:	4413      	add	r3, r2
 80029f2:	67fb      	str	r3, [r7, #124]	; 0x7c
    						if (!(ind % W25qxx_getPageSize())) break;
 80029f4:	f002 fc78 	bl	80052e8 <W25qxx_getPageSize>
 80029f8:	4602      	mov	r2, r0
 80029fa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80029fc:	fbb3 f1f2 	udiv	r1, r3, r2
 8002a00:	fb01 f202 	mul.w	r2, r1, r2
 8002a04:	1a9b      	subs	r3, r3, r2
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d000      	beq.n	8002a0c <main+0xd10>
    						sprintf(strf+strlen(strf), "%06X ", (unsigned int)w25_adr);
 8002a0a:	e7b8      	b.n	800297e <main+0xc82>
    						if (!(ind % W25qxx_getPageSize())) break;
 8002a0c:	bf00      	nop
    					}
    					Report(0, "%s", strf);
 8002a0e:	4a4f      	ldr	r2, [pc, #316]	; (8002b4c <main+0xe50>)
 8002a10:	4953      	ldr	r1, [pc, #332]	; (8002b60 <main+0xe64>)
 8002a12:	2000      	movs	r0, #0
 8002a14:	f000 fe86 	bl	8003724 <Report>
    				while (ind < dlin) {
 8002a18:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002a1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d3ab      	bcc.n	8002978 <main+0xc7c>
    				}
    			}
    			break;
 8002a20:	e04e      	b.n	8002ac0 <main+0xdc4>
    			case evt_sWrite:
    			{
    				uint32_t ss = W25qxx_getSectorSize();
 8002a22:	f002 fc55 	bl	80052d0 <W25qxx_getSectorSize>
 8002a26:	6778      	str	r0, [r7, #116]	; 0x74
    				if (!W25qxx_IsEmptySector(adr_sector, 0, ss)) W25qxx_EraseSector(adr_sector);
 8002a28:	4b4e      	ldr	r3, [pc, #312]	; (8002b64 <main+0xe68>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002a2e:	2100      	movs	r1, #0
 8002a30:	4618      	mov	r0, r3
 8002a32:	f002 fcc3 	bl	80053bc <W25qxx_IsEmptySector>
 8002a36:	4603      	mov	r3, r0
 8002a38:	f083 0301 	eor.w	r3, r3, #1
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d004      	beq.n	8002a4c <main+0xd50>
 8002a42:	4b48      	ldr	r3, [pc, #288]	; (8002b64 <main+0xe68>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4618      	mov	r0, r3
 8002a48:	f002 fc5c 	bl	8005304 <W25qxx_EraseSector>
    				memset(fs_work, byte_write, ss);
 8002a4c:	4b46      	ldr	r3, [pc, #280]	; (8002b68 <main+0xe6c>)
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002a52:	4619      	mov	r1, r3
 8002a54:	483f      	ldr	r0, [pc, #252]	; (8002b54 <main+0xe58>)
 8002a56:	f00a ff09 	bl	800d86c <memset>
    				if (len_write != -1) ss = len_write;
 8002a5a:	4b44      	ldr	r3, [pc, #272]	; (8002b6c <main+0xe70>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a62:	d002      	beq.n	8002a6a <main+0xd6e>
 8002a64:	4b41      	ldr	r3, [pc, #260]	; (8002b6c <main+0xe70>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	677b      	str	r3, [r7, #116]	; 0x74
    				W25qxx_WriteSector(fs_work, adr_sector, offset_sector, ss);
 8002a6a:	4b3e      	ldr	r3, [pc, #248]	; (8002b64 <main+0xe68>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4619      	mov	r1, r3
 8002a70:	4b3f      	ldr	r3, [pc, #252]	; (8002b70 <main+0xe74>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	461a      	mov	r2, r3
 8002a76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a78:	4836      	ldr	r0, [pc, #216]	; (8002b54 <main+0xe58>)
 8002a7a:	f002 fe13 	bl	80056a4 <W25qxx_WriteSector>
    				Report(0, "Fill sector:%d byte:%02X len:%d done\r\n", adr_sector, byte_write, ss);
 8002a7e:	4b39      	ldr	r3, [pc, #228]	; (8002b64 <main+0xe68>)
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	4b39      	ldr	r3, [pc, #228]	; (8002b68 <main+0xe6c>)
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	4619      	mov	r1, r3
 8002a88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a8a:	9300      	str	r3, [sp, #0]
 8002a8c:	460b      	mov	r3, r1
 8002a8e:	4939      	ldr	r1, [pc, #228]	; (8002b74 <main+0xe78>)
 8002a90:	2000      	movs	r0, #0
 8002a92:	f000 fe47 	bl	8003724 <Report>
    			}
    			break;
 8002a96:	e013      	b.n	8002ac0 <main+0xdc4>
    			case evt_sErase:
    				W25qxx_EraseSector(adr_sector);
 8002a98:	4b32      	ldr	r3, [pc, #200]	; (8002b64 <main+0xe68>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f002 fc31 	bl	8005304 <W25qxx_EraseSector>
    				Report(0, "Erase sector:%d done\r\n", adr_sector);
 8002aa2:	4b30      	ldr	r3, [pc, #192]	; (8002b64 <main+0xe68>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	4933      	ldr	r1, [pc, #204]	; (8002b78 <main+0xe7c>)
 8002aaa:	2000      	movs	r0, #0
 8002aac:	f000 fe3a 	bl	8003724 <Report>
    				break;
 8002ab0:	e006      	b.n	8002ac0 <main+0xdc4>
    			break;
 8002ab2:	bf00      	nop
 8002ab4:	e004      	b.n	8002ac0 <main+0xdc4>
    			break;
 8002ab6:	bf00      	nop
 8002ab8:	e002      	b.n	8002ac0 <main+0xdc4>
				break;
 8002aba:	bf00      	nop
 8002abc:	e000      	b.n	8002ac0 <main+0xdc4>
    			break;
 8002abe:	bf00      	nop
#endif
    		}
    		if ((evt >= evt_sRead) && (evt <= evt_sWrite)) {
 8002ac0:	4b2e      	ldr	r3, [pc, #184]	; (8002b7c <main+0xe80>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2b03      	cmp	r3, #3
 8002ac6:	dd0b      	ble.n	8002ae0 <main+0xde4>
 8002ac8:	4b2c      	ldr	r3, [pc, #176]	; (8002b7c <main+0xe80>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	2b07      	cmp	r3, #7
 8002ace:	dc07      	bgt.n	8002ae0 <main+0xde4>
    			last_cmd_sector =  evt;//cmd_sector;
 8002ad0:	4b2a      	ldr	r3, [pc, #168]	; (8002b7c <main+0xe80>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a2a      	ldr	r2, [pc, #168]	; (8002b80 <main+0xe84>)
 8002ad6:	6013      	str	r3, [r2, #0]
    			cmd_sector = sNone;
 8002ad8:	4b2a      	ldr	r3, [pc, #168]	; (8002b84 <main+0xe88>)
 8002ada:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002ade:	601a      	str	r2, [r3, #0]
    		}
    	}
#endif

    	if (devError) {
 8002ae0:	4b29      	ldr	r3, [pc, #164]	; (8002b88 <main+0xe8c>)
 8002ae2:	881b      	ldrh	r3, [r3, #0]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d009      	beq.n	8002afc <main+0xe00>
    		errLedOn(true);
 8002ae8:	2001      	movs	r0, #1
 8002aea:	f000 fcfb 	bl	80034e4 <errLedOn>
    		HAL_Delay(50);
 8002aee:	2032      	movs	r0, #50	; 0x32
 8002af0:	f003 f80a 	bl	8005b08 <HAL_Delay>
    		errLedOn(false);
 8002af4:	2000      	movs	r0, #0
 8002af6:	f000 fcf5 	bl	80034e4 <errLedOn>
 8002afa:	e009      	b.n	8002b10 <main+0xe14>
    	} else {
    		if (HAL_GPIO_ReadPin(ERR_LED_GPIO_Port, ERR_LED_Pin)) errLedOn(false);
 8002afc:	2108      	movs	r1, #8
 8002afe:	4823      	ldr	r0, [pc, #140]	; (8002b8c <main+0xe90>)
 8002b00:	f003 fd98 	bl	8006634 <HAL_GPIO_ReadPin>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d002      	beq.n	8002b10 <main+0xe14>
 8002b0a:	2000      	movs	r0, #0
 8002b0c:	f000 fcea 	bl	80034e4 <errLedOn>
    while (!restart) {
 8002b10:	4b1f      	ldr	r3, [pc, #124]	; (8002b90 <main+0xe94>)
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	f43f ab8e 	beq.w	8002238 <main+0x53c>

    /* USER CODE BEGIN 3 */

    }

    HAL_TIM_Base_Stop_IT(tikPort);
 8002b1c:	4b1d      	ldr	r3, [pc, #116]	; (8002b94 <main+0xe98>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4618      	mov	r0, r3
 8002b22:	f008 fd6f 	bl	800b604 <HAL_TIM_Base_Stop_IT>

#ifdef SET_DISPLAY
    ST7565_Reset();
 8002b26:	f7fe facf 	bl	80010c8 <ST7565_Reset>
    ST7565_CMD_DISPLAY(CMD_DISPLAY_OFF);
 8002b2a:	20ae      	movs	r0, #174	; 0xae
 8002b2c:	f7fe fbfe 	bl	800132c <ST7565_CMD_DISPLAY>
#endif
#if defined(SET_RDA_CHIP) || defined(SET_NEW_RDA)

#endif
    Report(1, "[que:%u] Stop application...\r\n", cntEvt);
 8002b30:	4b19      	ldr	r3, [pc, #100]	; (8002b98 <main+0xe9c>)
 8002b32:	781b      	ldrb	r3, [r3, #0]
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	461a      	mov	r2, r3
 8002b38:	4918      	ldr	r1, [pc, #96]	; (8002b9c <main+0xea0>)
 8002b3a:	2001      	movs	r0, #1
 8002b3c:	f000 fdf2 	bl	8003724 <Report>

    HAL_Delay(500);
 8002b40:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002b44:	f002 ffe0 	bl	8005b08 <HAL_Delay>

    NVIC_SystemReset();
 8002b48:	f7ff f8c2 	bl	8001cd0 <__NVIC_SystemReset>
 8002b4c:	20002858 	.word	0x20002858
 8002b50:	08012180 	.word	0x08012180
 8002b54:	20001858 	.word	0x20001858
 8002b58:	08012188 	.word	0x08012188
 8002b5c:	08012190 	.word	0x08012190
 8002b60:	080120ec 	.word	0x080120ec
 8002b64:	20001848 	.word	0x20001848
 8002b68:	200001a4 	.word	0x200001a4
 8002b6c:	20001854 	.word	0x20001854
 8002b70:	2000184c 	.word	0x2000184c
 8002b74:	08012194 	.word	0x08012194
 8002b78:	080121bc 	.word	0x080121bc
 8002b7c:	20000194 	.word	0x20000194
 8002b80:	200001a0 	.word	0x200001a0
 8002b84:	2000019c 	.word	0x2000019c
 8002b88:	20001424 	.word	0x20001424
 8002b8c:	48000800 	.word	0x48000800
 8002b90:	2000183c 	.word	0x2000183c
 8002b94:	20000008 	.word	0x20000008
 8002b98:	20001844 	.word	0x20001844
 8002b9c:	080121d4 	.word	0x080121d4

08002ba0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b096      	sub	sp, #88	; 0x58
 8002ba4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ba6:	f107 0314 	add.w	r3, r7, #20
 8002baa:	2244      	movs	r2, #68	; 0x44
 8002bac:	2100      	movs	r1, #0
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f00a fe5c 	bl	800d86c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002bb4:	463b      	mov	r3, r7
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	601a      	str	r2, [r3, #0]
 8002bba:	605a      	str	r2, [r3, #4]
 8002bbc:	609a      	str	r2, [r3, #8]
 8002bbe:	60da      	str	r2, [r3, #12]
 8002bc0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002bc2:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002bc6:	f005 fa1f 	bl	8008008 <HAL_PWREx_ControlVoltageScaling>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d001      	beq.n	8002bd4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002bd0:	f001 f954 	bl	8003e7c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002bd4:	2309      	movs	r3, #9
 8002bd6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002bd8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002bdc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002bde:	2301      	movs	r3, #1
 8002be0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002be2:	2302      	movs	r3, #2
 8002be4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002be6:	2303      	movs	r3, #3
 8002be8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002bea:	2301      	movs	r3, #1
 8002bec:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 8002bee:	2314      	movs	r3, #20
 8002bf0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002bf2:	2307      	movs	r3, #7
 8002bf4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002bf6:	2302      	movs	r3, #2
 8002bf8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002bfa:	2302      	movs	r3, #2
 8002bfc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002bfe:	f107 0314 	add.w	r3, r7, #20
 8002c02:	4618      	mov	r0, r3
 8002c04:	f005 fa56 	bl	80080b4 <HAL_RCC_OscConfig>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d001      	beq.n	8002c12 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8002c0e:	f001 f935 	bl	8003e7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c12:	230f      	movs	r3, #15
 8002c14:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c16:	2303      	movs	r3, #3
 8002c18:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002c22:	2300      	movs	r3, #0
 8002c24:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002c26:	463b      	mov	r3, r7
 8002c28:	2104      	movs	r1, #4
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f005 fe1e 	bl	800886c <HAL_RCC_ClockConfig>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d001      	beq.n	8002c3a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002c36:	f001 f921 	bl	8003e7c <Error_Handler>
  }
}
 8002c3a:	bf00      	nop
 8002c3c:	3758      	adds	r7, #88	; 0x58
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
	...

08002c44 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002c48:	4b1b      	ldr	r3, [pc, #108]	; (8002cb8 <MX_I2C1_Init+0x74>)
 8002c4a:	4a1c      	ldr	r2, [pc, #112]	; (8002cbc <MX_I2C1_Init+0x78>)
 8002c4c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702D95;
 8002c4e:	4b1a      	ldr	r3, [pc, #104]	; (8002cb8 <MX_I2C1_Init+0x74>)
 8002c50:	4a1b      	ldr	r2, [pc, #108]	; (8002cc0 <MX_I2C1_Init+0x7c>)
 8002c52:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002c54:	4b18      	ldr	r3, [pc, #96]	; (8002cb8 <MX_I2C1_Init+0x74>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002c5a:	4b17      	ldr	r3, [pc, #92]	; (8002cb8 <MX_I2C1_Init+0x74>)
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002c60:	4b15      	ldr	r3, [pc, #84]	; (8002cb8 <MX_I2C1_Init+0x74>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002c66:	4b14      	ldr	r3, [pc, #80]	; (8002cb8 <MX_I2C1_Init+0x74>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002c6c:	4b12      	ldr	r3, [pc, #72]	; (8002cb8 <MX_I2C1_Init+0x74>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002c72:	4b11      	ldr	r3, [pc, #68]	; (8002cb8 <MX_I2C1_Init+0x74>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002c78:	4b0f      	ldr	r3, [pc, #60]	; (8002cb8 <MX_I2C1_Init+0x74>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002c7e:	480e      	ldr	r0, [pc, #56]	; (8002cb8 <MX_I2C1_Init+0x74>)
 8002c80:	f003 fd3a 	bl	80066f8 <HAL_I2C_Init>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d001      	beq.n	8002c8e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002c8a:	f001 f8f7 	bl	8003e7c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 8002c8e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002c92:	4809      	ldr	r0, [pc, #36]	; (8002cb8 <MX_I2C1_Init+0x74>)
 8002c94:	f005 f8f2 	bl	8007e7c <HAL_I2CEx_ConfigAnalogFilter>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d001      	beq.n	8002ca2 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8002c9e:	f001 f8ed 	bl	8003e7c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002ca2:	2100      	movs	r1, #0
 8002ca4:	4804      	ldr	r0, [pc, #16]	; (8002cb8 <MX_I2C1_Init+0x74>)
 8002ca6:	f005 f934 	bl	8007f12 <HAL_I2CEx_ConfigDigitalFilter>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d001      	beq.n	8002cb4 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8002cb0:	f001 f8e4 	bl	8003e7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002cb4:	bf00      	nop
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	200007e4 	.word	0x200007e4
 8002cbc:	40005400 	.word	0x40005400
 8002cc0:	00702d95 	.word	0x00702d95

08002cc4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b086      	sub	sp, #24
 8002cc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002cca:	1d3b      	adds	r3, r7, #4
 8002ccc:	2200      	movs	r2, #0
 8002cce:	601a      	str	r2, [r3, #0]
 8002cd0:	605a      	str	r2, [r3, #4]
 8002cd2:	609a      	str	r2, [r3, #8]
 8002cd4:	60da      	str	r2, [r3, #12]
 8002cd6:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002cd8:	2300      	movs	r3, #0
 8002cda:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002cdc:	4b25      	ldr	r3, [pc, #148]	; (8002d74 <MX_RTC_Init+0xb0>)
 8002cde:	4a26      	ldr	r2, [pc, #152]	; (8002d78 <MX_RTC_Init+0xb4>)
 8002ce0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002ce2:	4b24      	ldr	r3, [pc, #144]	; (8002d74 <MX_RTC_Init+0xb0>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002ce8:	4b22      	ldr	r3, [pc, #136]	; (8002d74 <MX_RTC_Init+0xb0>)
 8002cea:	227f      	movs	r2, #127	; 0x7f
 8002cec:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002cee:	4b21      	ldr	r3, [pc, #132]	; (8002d74 <MX_RTC_Init+0xb0>)
 8002cf0:	22ff      	movs	r2, #255	; 0xff
 8002cf2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002cf4:	4b1f      	ldr	r3, [pc, #124]	; (8002d74 <MX_RTC_Init+0xb0>)
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002cfa:	4b1e      	ldr	r3, [pc, #120]	; (8002d74 <MX_RTC_Init+0xb0>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002d00:	4b1c      	ldr	r3, [pc, #112]	; (8002d74 <MX_RTC_Init+0xb0>)
 8002d02:	2200      	movs	r2, #0
 8002d04:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002d06:	4b1b      	ldr	r3, [pc, #108]	; (8002d74 <MX_RTC_Init+0xb0>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002d0c:	4819      	ldr	r0, [pc, #100]	; (8002d74 <MX_RTC_Init+0xb0>)
 8002d0e:	f006 fc8d 	bl	800962c <HAL_RTC_Init>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d001      	beq.n	8002d1c <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8002d18:	f001 f8b0 	bl	8003e7c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8002d20:	2300      	movs	r3, #0
 8002d22:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8002d24:	2300      	movs	r3, #0
 8002d26:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002d30:	1d3b      	adds	r3, r7, #4
 8002d32:	2201      	movs	r2, #1
 8002d34:	4619      	mov	r1, r3
 8002d36:	480f      	ldr	r0, [pc, #60]	; (8002d74 <MX_RTC_Init+0xb0>)
 8002d38:	f006 fcf3 	bl	8009722 <HAL_RTC_SetTime>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d001      	beq.n	8002d46 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8002d42:	f001 f89b 	bl	8003e7c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 8002d46:	2303      	movs	r3, #3
 8002d48:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JULY;
 8002d4a:	2307      	movs	r3, #7
 8002d4c:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x6;
 8002d4e:	2306      	movs	r3, #6
 8002d50:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x22;
 8002d52:	2322      	movs	r3, #34	; 0x22
 8002d54:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002d56:	463b      	mov	r3, r7
 8002d58:	2201      	movs	r2, #1
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	4805      	ldr	r0, [pc, #20]	; (8002d74 <MX_RTC_Init+0xb0>)
 8002d5e:	f006 fdd9 	bl	8009914 <HAL_RTC_SetDate>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d001      	beq.n	8002d6c <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8002d68:	f001 f888 	bl	8003e7c <Error_Handler>

  //set_Date(epoch);

  /* USER CODE END RTC_Init 2 */

}
 8002d6c:	bf00      	nop
 8002d6e:	3718      	adds	r7, #24
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	200008c8 	.word	0x200008c8
 8002d78:	40002800 	.word	0x40002800

08002d7c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002d80:	4b1b      	ldr	r3, [pc, #108]	; (8002df0 <MX_SPI1_Init+0x74>)
 8002d82:	4a1c      	ldr	r2, [pc, #112]	; (8002df4 <MX_SPI1_Init+0x78>)
 8002d84:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002d86:	4b1a      	ldr	r3, [pc, #104]	; (8002df0 <MX_SPI1_Init+0x74>)
 8002d88:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002d8c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002d8e:	4b18      	ldr	r3, [pc, #96]	; (8002df0 <MX_SPI1_Init+0x74>)
 8002d90:	2200      	movs	r2, #0
 8002d92:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002d94:	4b16      	ldr	r3, [pc, #88]	; (8002df0 <MX_SPI1_Init+0x74>)
 8002d96:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002d9a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d9c:	4b14      	ldr	r3, [pc, #80]	; (8002df0 <MX_SPI1_Init+0x74>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002da2:	4b13      	ldr	r3, [pc, #76]	; (8002df0 <MX_SPI1_Init+0x74>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002da8:	4b11      	ldr	r3, [pc, #68]	; (8002df0 <MX_SPI1_Init+0x74>)
 8002daa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dae:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002db0:	4b0f      	ldr	r3, [pc, #60]	; (8002df0 <MX_SPI1_Init+0x74>)
 8002db2:	2208      	movs	r2, #8
 8002db4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002db6:	4b0e      	ldr	r3, [pc, #56]	; (8002df0 <MX_SPI1_Init+0x74>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002dbc:	4b0c      	ldr	r3, [pc, #48]	; (8002df0 <MX_SPI1_Init+0x74>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002dc2:	4b0b      	ldr	r3, [pc, #44]	; (8002df0 <MX_SPI1_Init+0x74>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002dc8:	4b09      	ldr	r3, [pc, #36]	; (8002df0 <MX_SPI1_Init+0x74>)
 8002dca:	2207      	movs	r2, #7
 8002dcc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002dce:	4b08      	ldr	r3, [pc, #32]	; (8002df0 <MX_SPI1_Init+0x74>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002dd4:	4b06      	ldr	r3, [pc, #24]	; (8002df0 <MX_SPI1_Init+0x74>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002dda:	4805      	ldr	r0, [pc, #20]	; (8002df0 <MX_SPI1_Init+0x74>)
 8002ddc:	f006 ff40 	bl	8009c60 <HAL_SPI_Init>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d001      	beq.n	8002dea <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002de6:	f001 f849 	bl	8003e7c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002dea:	bf00      	nop
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	200008ec 	.word	0x200008ec
 8002df4:	40013000 	.word	0x40013000

08002df8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002dfc:	4b1b      	ldr	r3, [pc, #108]	; (8002e6c <MX_SPI2_Init+0x74>)
 8002dfe:	4a1c      	ldr	r2, [pc, #112]	; (8002e70 <MX_SPI2_Init+0x78>)
 8002e00:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002e02:	4b1a      	ldr	r3, [pc, #104]	; (8002e6c <MX_SPI2_Init+0x74>)
 8002e04:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002e08:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002e0a:	4b18      	ldr	r3, [pc, #96]	; (8002e6c <MX_SPI2_Init+0x74>)
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002e10:	4b16      	ldr	r3, [pc, #88]	; (8002e6c <MX_SPI2_Init+0x74>)
 8002e12:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002e16:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e18:	4b14      	ldr	r3, [pc, #80]	; (8002e6c <MX_SPI2_Init+0x74>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002e1e:	4b13      	ldr	r3, [pc, #76]	; (8002e6c <MX_SPI2_Init+0x74>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002e24:	4b11      	ldr	r3, [pc, #68]	; (8002e6c <MX_SPI2_Init+0x74>)
 8002e26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e2a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002e2c:	4b0f      	ldr	r3, [pc, #60]	; (8002e6c <MX_SPI2_Init+0x74>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002e32:	4b0e      	ldr	r3, [pc, #56]	; (8002e6c <MX_SPI2_Init+0x74>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002e38:	4b0c      	ldr	r3, [pc, #48]	; (8002e6c <MX_SPI2_Init+0x74>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e3e:	4b0b      	ldr	r3, [pc, #44]	; (8002e6c <MX_SPI2_Init+0x74>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002e44:	4b09      	ldr	r3, [pc, #36]	; (8002e6c <MX_SPI2_Init+0x74>)
 8002e46:	2207      	movs	r2, #7
 8002e48:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002e4a:	4b08      	ldr	r3, [pc, #32]	; (8002e6c <MX_SPI2_Init+0x74>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002e50:	4b06      	ldr	r3, [pc, #24]	; (8002e6c <MX_SPI2_Init+0x74>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002e56:	4805      	ldr	r0, [pc, #20]	; (8002e6c <MX_SPI2_Init+0x74>)
 8002e58:	f006 ff02 	bl	8009c60 <HAL_SPI_Init>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d001      	beq.n	8002e66 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8002e62:	f001 f80b 	bl	8003e7c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002e66:	bf00      	nop
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	20000950 	.word	0x20000950
 8002e70:	40003800 	.word	0x40003800

08002e74 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b088      	sub	sp, #32
 8002e78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e7a:	f107 0310 	add.w	r3, r7, #16
 8002e7e:	2200      	movs	r2, #0
 8002e80:	601a      	str	r2, [r3, #0]
 8002e82:	605a      	str	r2, [r3, #4]
 8002e84:	609a      	str	r2, [r3, #8]
 8002e86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e88:	1d3b      	adds	r3, r7, #4
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	601a      	str	r2, [r3, #0]
 8002e8e:	605a      	str	r2, [r3, #4]
 8002e90:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN TIM4_Init 1 */

  // interupt every 10 ms

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002e92:	4b1d      	ldr	r3, [pc, #116]	; (8002f08 <MX_TIM4_Init+0x94>)
 8002e94:	4a1d      	ldr	r2, [pc, #116]	; (8002f0c <MX_TIM4_Init+0x98>)
 8002e96:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7999;
 8002e98:	4b1b      	ldr	r3, [pc, #108]	; (8002f08 <MX_TIM4_Init+0x94>)
 8002e9a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8002e9e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ea0:	4b19      	ldr	r3, [pc, #100]	; (8002f08 <MX_TIM4_Init+0x94>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 8002ea6:	4b18      	ldr	r3, [pc, #96]	; (8002f08 <MX_TIM4_Init+0x94>)
 8002ea8:	2263      	movs	r2, #99	; 0x63
 8002eaa:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002eac:	4b16      	ldr	r3, [pc, #88]	; (8002f08 <MX_TIM4_Init+0x94>)
 8002eae:	2200      	movs	r2, #0
 8002eb0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002eb2:	4b15      	ldr	r3, [pc, #84]	; (8002f08 <MX_TIM4_Init+0x94>)
 8002eb4:	2280      	movs	r2, #128	; 0x80
 8002eb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002eb8:	4813      	ldr	r0, [pc, #76]	; (8002f08 <MX_TIM4_Init+0x94>)
 8002eba:	f008 fadb 	bl	800b474 <HAL_TIM_Base_Init>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d001      	beq.n	8002ec8 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8002ec4:	f000 ffda 	bl	8003e7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ec8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ecc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002ece:	f107 0310 	add.w	r3, r7, #16
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	480c      	ldr	r0, [pc, #48]	; (8002f08 <MX_TIM4_Init+0x94>)
 8002ed6:	f008 fce3 	bl	800b8a0 <HAL_TIM_ConfigClockSource>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d001      	beq.n	8002ee4 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002ee0:	f000 ffcc 	bl	8003e7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002eec:	1d3b      	adds	r3, r7, #4
 8002eee:	4619      	mov	r1, r3
 8002ef0:	4805      	ldr	r0, [pc, #20]	; (8002f08 <MX_TIM4_Init+0x94>)
 8002ef2:	f008 fefb 	bl	800bcec <HAL_TIMEx_MasterConfigSynchronization>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d001      	beq.n	8002f00 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002efc:	f000 ffbe 	bl	8003e7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002f00:	bf00      	nop
 8002f02:	3720      	adds	r7, #32
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	20000a8c 	.word	0x20000a8c
 8002f0c:	40000800 	.word	0x40000800

08002f10 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002f14:	4b14      	ldr	r3, [pc, #80]	; (8002f68 <MX_USART2_UART_Init+0x58>)
 8002f16:	4a15      	ldr	r2, [pc, #84]	; (8002f6c <MX_USART2_UART_Init+0x5c>)
 8002f18:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 230400;
 8002f1a:	4b13      	ldr	r3, [pc, #76]	; (8002f68 <MX_USART2_UART_Init+0x58>)
 8002f1c:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8002f20:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002f22:	4b11      	ldr	r3, [pc, #68]	; (8002f68 <MX_USART2_UART_Init+0x58>)
 8002f24:	2200      	movs	r2, #0
 8002f26:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002f28:	4b0f      	ldr	r3, [pc, #60]	; (8002f68 <MX_USART2_UART_Init+0x58>)
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002f2e:	4b0e      	ldr	r3, [pc, #56]	; (8002f68 <MX_USART2_UART_Init+0x58>)
 8002f30:	2200      	movs	r2, #0
 8002f32:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002f34:	4b0c      	ldr	r3, [pc, #48]	; (8002f68 <MX_USART2_UART_Init+0x58>)
 8002f36:	220c      	movs	r2, #12
 8002f38:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f3a:	4b0b      	ldr	r3, [pc, #44]	; (8002f68 <MX_USART2_UART_Init+0x58>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f40:	4b09      	ldr	r3, [pc, #36]	; (8002f68 <MX_USART2_UART_Init+0x58>)
 8002f42:	2200      	movs	r2, #0
 8002f44:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f46:	4b08      	ldr	r3, [pc, #32]	; (8002f68 <MX_USART2_UART_Init+0x58>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f4c:	4b06      	ldr	r3, [pc, #24]	; (8002f68 <MX_USART2_UART_Init+0x58>)
 8002f4e:	2200      	movs	r2, #0
 8002f50:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002f52:	4805      	ldr	r0, [pc, #20]	; (8002f68 <MX_USART2_UART_Init+0x58>)
 8002f54:	f008 ff70 	bl	800be38 <HAL_UART_Init>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d001      	beq.n	8002f62 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002f5e:	f000 ff8d 	bl	8003e7c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002f62:	bf00      	nop
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	20000ad8 	.word	0x20000ad8
 8002f6c:	40004400 	.word	0x40004400

08002f70 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002f76:	4b26      	ldr	r3, [pc, #152]	; (8003010 <MX_DMA_Init+0xa0>)
 8002f78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f7a:	4a25      	ldr	r2, [pc, #148]	; (8003010 <MX_DMA_Init+0xa0>)
 8002f7c:	f043 0301 	orr.w	r3, r3, #1
 8002f80:	6493      	str	r3, [r2, #72]	; 0x48
 8002f82:	4b23      	ldr	r3, [pc, #140]	; (8003010 <MX_DMA_Init+0xa0>)
 8002f84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f86:	f003 0301 	and.w	r3, r3, #1
 8002f8a:	607b      	str	r3, [r7, #4]
 8002f8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002f8e:	4b20      	ldr	r3, [pc, #128]	; (8003010 <MX_DMA_Init+0xa0>)
 8002f90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f92:	4a1f      	ldr	r2, [pc, #124]	; (8003010 <MX_DMA_Init+0xa0>)
 8002f94:	f043 0302 	orr.w	r3, r3, #2
 8002f98:	6493      	str	r3, [r2, #72]	; 0x48
 8002f9a:	4b1d      	ldr	r3, [pc, #116]	; (8003010 <MX_DMA_Init+0xa0>)
 8002f9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f9e:	f003 0302 	and.w	r3, r3, #2
 8002fa2:	603b      	str	r3, [r7, #0]
 8002fa4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	2100      	movs	r1, #0
 8002faa:	200d      	movs	r0, #13
 8002fac:	f002 fecf 	bl	8005d4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002fb0:	200d      	movs	r0, #13
 8002fb2:	f002 fee8 	bl	8005d86 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	2100      	movs	r1, #0
 8002fba:	200e      	movs	r0, #14
 8002fbc:	f002 fec7 	bl	8005d4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8002fc0:	200e      	movs	r0, #14
 8002fc2:	f002 fee0 	bl	8005d86 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	2100      	movs	r1, #0
 8002fca:	200f      	movs	r0, #15
 8002fcc:	f002 febf 	bl	8005d4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8002fd0:	200f      	movs	r0, #15
 8002fd2:	f002 fed8 	bl	8005d86 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	2100      	movs	r1, #0
 8002fda:	2010      	movs	r0, #16
 8002fdc:	f002 feb7 	bl	8005d4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8002fe0:	2010      	movs	r0, #16
 8002fe2:	f002 fed0 	bl	8005d86 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 3, 0);
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	2103      	movs	r1, #3
 8002fea:	2011      	movs	r0, #17
 8002fec:	f002 feaf 	bl	8005d4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8002ff0:	2011      	movs	r0, #17
 8002ff2:	f002 fec8 	bl	8005d86 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel6_IRQn, 0, 0);
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	2100      	movs	r1, #0
 8002ffa:	2044      	movs	r0, #68	; 0x44
 8002ffc:	f002 fea7 	bl	8005d4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel6_IRQn);
 8003000:	2044      	movs	r0, #68	; 0x44
 8003002:	f002 fec0 	bl	8005d86 <HAL_NVIC_EnableIRQ>

}
 8003006:	bf00      	nop
 8003008:	3708      	adds	r7, #8
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	40021000 	.word	0x40021000

08003014 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b08a      	sub	sp, #40	; 0x28
 8003018:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800301a:	f107 0314 	add.w	r3, r7, #20
 800301e:	2200      	movs	r2, #0
 8003020:	601a      	str	r2, [r3, #0]
 8003022:	605a      	str	r2, [r3, #4]
 8003024:	609a      	str	r2, [r3, #8]
 8003026:	60da      	str	r2, [r3, #12]
 8003028:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800302a:	4b6f      	ldr	r3, [pc, #444]	; (80031e8 <MX_GPIO_Init+0x1d4>)
 800302c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800302e:	4a6e      	ldr	r2, [pc, #440]	; (80031e8 <MX_GPIO_Init+0x1d4>)
 8003030:	f043 0304 	orr.w	r3, r3, #4
 8003034:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003036:	4b6c      	ldr	r3, [pc, #432]	; (80031e8 <MX_GPIO_Init+0x1d4>)
 8003038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800303a:	f003 0304 	and.w	r3, r3, #4
 800303e:	613b      	str	r3, [r7, #16]
 8003040:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003042:	4b69      	ldr	r3, [pc, #420]	; (80031e8 <MX_GPIO_Init+0x1d4>)
 8003044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003046:	4a68      	ldr	r2, [pc, #416]	; (80031e8 <MX_GPIO_Init+0x1d4>)
 8003048:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800304c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800304e:	4b66      	ldr	r3, [pc, #408]	; (80031e8 <MX_GPIO_Init+0x1d4>)
 8003050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003052:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003056:	60fb      	str	r3, [r7, #12]
 8003058:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800305a:	4b63      	ldr	r3, [pc, #396]	; (80031e8 <MX_GPIO_Init+0x1d4>)
 800305c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800305e:	4a62      	ldr	r2, [pc, #392]	; (80031e8 <MX_GPIO_Init+0x1d4>)
 8003060:	f043 0301 	orr.w	r3, r3, #1
 8003064:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003066:	4b60      	ldr	r3, [pc, #384]	; (80031e8 <MX_GPIO_Init+0x1d4>)
 8003068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800306a:	f003 0301 	and.w	r3, r3, #1
 800306e:	60bb      	str	r3, [r7, #8]
 8003070:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003072:	4b5d      	ldr	r3, [pc, #372]	; (80031e8 <MX_GPIO_Init+0x1d4>)
 8003074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003076:	4a5c      	ldr	r2, [pc, #368]	; (80031e8 <MX_GPIO_Init+0x1d4>)
 8003078:	f043 0302 	orr.w	r3, r3, #2
 800307c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800307e:	4b5a      	ldr	r3, [pc, #360]	; (80031e8 <MX_GPIO_Init+0x1d4>)
 8003080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003082:	f003 0302 	and.w	r3, r3, #2
 8003086:	607b      	str	r3, [r7, #4]
 8003088:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800308a:	4b57      	ldr	r3, [pc, #348]	; (80031e8 <MX_GPIO_Init+0x1d4>)
 800308c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800308e:	4a56      	ldr	r2, [pc, #344]	; (80031e8 <MX_GPIO_Init+0x1d4>)
 8003090:	f043 0308 	orr.w	r3, r3, #8
 8003094:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003096:	4b54      	ldr	r3, [pc, #336]	; (80031e8 <MX_GPIO_Init+0x1d4>)
 8003098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800309a:	f003 0308 	and.w	r3, r3, #8
 800309e:	603b      	str	r3, [r7, #0]
 80030a0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TIK_LED_Pin|ERR_LED_Pin, GPIO_PIN_RESET);
 80030a2:	2200      	movs	r2, #0
 80030a4:	2109      	movs	r1, #9
 80030a6:	4851      	ldr	r0, [pc, #324]	; (80031ec <MX_GPIO_Init+0x1d8>)
 80030a8:	f003 fadc 	bl	8006664 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 80030ac:	2201      	movs	r2, #1
 80030ae:	2110      	movs	r1, #16
 80030b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030b4:	f003 fad6 	bl	8006664 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin|SPI1_DC_Pin, GPIO_PIN_SET);
 80030b8:	2201      	movs	r2, #1
 80030ba:	f44f 5181 	mov.w	r1, #4128	; 0x1020
 80030be:	484c      	ldr	r0, [pc, #304]	; (80031f0 <MX_GPIO_Init+0x1dc>)
 80030c0:	f003 fad0 	bl	8006664 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);
 80030c4:	2201      	movs	r2, #1
 80030c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80030ca:	4848      	ldr	r0, [pc, #288]	; (80031ec <MX_GPIO_Init+0x1d8>)
 80030cc:	f003 faca 	bl	8006664 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_RST_GPIO_Port, SPI1_RST_Pin, GPIO_PIN_SET);
 80030d0:	2201      	movs	r2, #1
 80030d2:	2104      	movs	r1, #4
 80030d4:	4847      	ldr	r0, [pc, #284]	; (80031f4 <MX_GPIO_Init+0x1e0>)
 80030d6:	f003 fac5 	bl	8006664 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TIK_LED_Pin */
  GPIO_InitStruct.Pin = TIK_LED_Pin;
 80030da:	2301      	movs	r3, #1
 80030dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030de:	2301      	movs	r3, #1
 80030e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80030e2:	2302      	movs	r3, #2
 80030e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80030e6:	2301      	movs	r3, #1
 80030e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TIK_LED_GPIO_Port, &GPIO_InitStruct);
 80030ea:	f107 0314 	add.w	r3, r7, #20
 80030ee:	4619      	mov	r1, r3
 80030f0:	483e      	ldr	r0, [pc, #248]	; (80031ec <MX_GPIO_Init+0x1d8>)
 80030f2:	f003 f8f5 	bl	80062e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEY0_Pin KEY1_Pin */
  GPIO_InitStruct.Pin = KEY0_Pin|KEY1_Pin;
 80030f6:	2306      	movs	r3, #6
 80030f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80030fa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80030fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003100:	2301      	movs	r3, #1
 8003102:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003104:	f107 0314 	add.w	r3, r7, #20
 8003108:	4619      	mov	r1, r3
 800310a:	4838      	ldr	r0, [pc, #224]	; (80031ec <MX_GPIO_Init+0x1d8>)
 800310c:	f003 f8e8 	bl	80062e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ERR_LED_Pin */
  GPIO_InitStruct.Pin = ERR_LED_Pin;
 8003110:	2308      	movs	r3, #8
 8003112:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003114:	2301      	movs	r3, #1
 8003116:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003118:	2300      	movs	r3, #0
 800311a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800311c:	2301      	movs	r3, #1
 800311e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ERR_LED_GPIO_Port, &GPIO_InitStruct);
 8003120:	f107 0314 	add.w	r3, r7, #20
 8003124:	4619      	mov	r1, r3
 8003126:	4831      	ldr	r0, [pc, #196]	; (80031ec <MX_GPIO_Init+0x1d8>)
 8003128:	f003 f8da 	bl	80062e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 800312c:	2310      	movs	r3, #16
 800312e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003130:	2301      	movs	r3, #1
 8003132:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003134:	2300      	movs	r3, #0
 8003136:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003138:	2302      	movs	r3, #2
 800313a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 800313c:	f107 0314 	add.w	r3, r7, #20
 8003140:	4619      	mov	r1, r3
 8003142:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003146:	f003 f8cb 	bl	80062e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 800314a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800314e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003150:	2301      	movs	r3, #1
 8003152:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003154:	2301      	movs	r3, #1
 8003156:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003158:	2302      	movs	r3, #2
 800315a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 800315c:	f107 0314 	add.w	r3, r7, #20
 8003160:	4619      	mov	r1, r3
 8003162:	4823      	ldr	r0, [pc, #140]	; (80031f0 <MX_GPIO_Init+0x1dc>)
 8003164:	f003 f8bc 	bl	80062e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : GREEN_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin;
 8003168:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800316c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800316e:	2301      	movs	r3, #1
 8003170:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003172:	2301      	movs	r3, #1
 8003174:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003176:	2301      	movs	r3, #1
 8003178:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GREEN_LED_GPIO_Port, &GPIO_InitStruct);
 800317a:	f107 0314 	add.w	r3, r7, #20
 800317e:	4619      	mov	r1, r3
 8003180:	481a      	ldr	r0, [pc, #104]	; (80031ec <MX_GPIO_Init+0x1d8>)
 8003182:	f003 f8ad 	bl	80062e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_RST_Pin */
  GPIO_InitStruct.Pin = SPI1_RST_Pin;
 8003186:	2304      	movs	r3, #4
 8003188:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800318a:	2301      	movs	r3, #1
 800318c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800318e:	2301      	movs	r3, #1
 8003190:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003192:	2302      	movs	r3, #2
 8003194:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_RST_GPIO_Port, &GPIO_InitStruct);
 8003196:	f107 0314 	add.w	r3, r7, #20
 800319a:	4619      	mov	r1, r3
 800319c:	4815      	ldr	r0, [pc, #84]	; (80031f4 <MX_GPIO_Init+0x1e0>)
 800319e:	f003 f89f 	bl	80062e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_DC_Pin */
  GPIO_InitStruct.Pin = SPI1_DC_Pin;
 80031a2:	2320      	movs	r3, #32
 80031a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031a6:	2301      	movs	r3, #1
 80031a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031aa:	2300      	movs	r3, #0
 80031ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80031ae:	2302      	movs	r3, #2
 80031b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_DC_GPIO_Port, &GPIO_InitStruct);
 80031b2:	f107 0314 	add.w	r3, r7, #20
 80031b6:	4619      	mov	r1, r3
 80031b8:	480d      	ldr	r0, [pc, #52]	; (80031f0 <MX_GPIO_Init+0x1dc>)
 80031ba:	f003 f891 	bl	80062e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80031be:	2200      	movs	r2, #0
 80031c0:	2100      	movs	r1, #0
 80031c2:	2007      	movs	r0, #7
 80031c4:	f002 fdc3 	bl	8005d4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80031c8:	2007      	movs	r0, #7
 80031ca:	f002 fddc 	bl	8005d86 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80031ce:	2200      	movs	r2, #0
 80031d0:	2100      	movs	r1, #0
 80031d2:	2008      	movs	r0, #8
 80031d4:	f002 fdbb 	bl	8005d4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80031d8:	2008      	movs	r0, #8
 80031da:	f002 fdd4 	bl	8005d86 <HAL_NVIC_EnableIRQ>

}
 80031de:	bf00      	nop
 80031e0:	3728      	adds	r7, #40	; 0x28
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	40021000 	.word	0x40021000
 80031ec:	48000800 	.word	0x48000800
 80031f0:	48000400 	.word	0x48000400
 80031f4:	48000c00 	.word	0x48000c00

080031f8 <hexToBin>:

//-------------------------------------------------------------------------------------------
//      Преобразует два символа строки из hex-формата в двоичный
//
uint8_t hexToBin(char *sc)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b085      	sub	sp, #20
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
char st = 0, ml = 0;
 8003200:	2300      	movs	r3, #0
 8003202:	73fb      	strb	r3, [r7, #15]
 8003204:	2300      	movs	r3, #0
 8003206:	73bb      	strb	r3, [r7, #14]

	if ((sc[0] >= '0') && (sc[0] <= '9')) st = (sc[0] - 0x30);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	2b2f      	cmp	r3, #47	; 0x2f
 800320e:	d908      	bls.n	8003222 <hexToBin+0x2a>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	2b39      	cmp	r3, #57	; 0x39
 8003216:	d804      	bhi.n	8003222 <hexToBin+0x2a>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	3b30      	subs	r3, #48	; 0x30
 800321e:	73fb      	strb	r3, [r7, #15]
 8003220:	e018      	b.n	8003254 <hexToBin+0x5c>
	else
	if ((sc[0] >= 'A') && (sc[0] <= 'F')) st = (sc[0] - 0x37);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	2b40      	cmp	r3, #64	; 0x40
 8003228:	d908      	bls.n	800323c <hexToBin+0x44>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	781b      	ldrb	r3, [r3, #0]
 800322e:	2b46      	cmp	r3, #70	; 0x46
 8003230:	d804      	bhi.n	800323c <hexToBin+0x44>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	781b      	ldrb	r3, [r3, #0]
 8003236:	3b37      	subs	r3, #55	; 0x37
 8003238:	73fb      	strb	r3, [r7, #15]
 800323a:	e00b      	b.n	8003254 <hexToBin+0x5c>
	else
	if ((sc[0] >= 'a') && (sc[0] <= 'f')) st = (sc[0] - 0x57);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	2b60      	cmp	r3, #96	; 0x60
 8003242:	d907      	bls.n	8003254 <hexToBin+0x5c>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	781b      	ldrb	r3, [r3, #0]
 8003248:	2b66      	cmp	r3, #102	; 0x66
 800324a:	d803      	bhi.n	8003254 <hexToBin+0x5c>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	3b57      	subs	r3, #87	; 0x57
 8003252:	73fb      	strb	r3, [r7, #15]

	if ((sc[1] >= '0') && (sc[1] <= '9')) ml = (sc[1] - 0x30);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	3301      	adds	r3, #1
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	2b2f      	cmp	r3, #47	; 0x2f
 800325c:	d90a      	bls.n	8003274 <hexToBin+0x7c>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	3301      	adds	r3, #1
 8003262:	781b      	ldrb	r3, [r3, #0]
 8003264:	2b39      	cmp	r3, #57	; 0x39
 8003266:	d805      	bhi.n	8003274 <hexToBin+0x7c>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	3301      	adds	r3, #1
 800326c:	781b      	ldrb	r3, [r3, #0]
 800326e:	3b30      	subs	r3, #48	; 0x30
 8003270:	73bb      	strb	r3, [r7, #14]
 8003272:	e01e      	b.n	80032b2 <hexToBin+0xba>
	else
	if ((sc[1] >= 'A') && (sc[1] <= 'F')) ml = (sc[1] - 0x37);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	3301      	adds	r3, #1
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	2b40      	cmp	r3, #64	; 0x40
 800327c:	d90a      	bls.n	8003294 <hexToBin+0x9c>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	3301      	adds	r3, #1
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	2b46      	cmp	r3, #70	; 0x46
 8003286:	d805      	bhi.n	8003294 <hexToBin+0x9c>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	3301      	adds	r3, #1
 800328c:	781b      	ldrb	r3, [r3, #0]
 800328e:	3b37      	subs	r3, #55	; 0x37
 8003290:	73bb      	strb	r3, [r7, #14]
 8003292:	e00e      	b.n	80032b2 <hexToBin+0xba>
	else
	if ((sc[1] >= 'a') && (sc[1] <= 'f')) ml = (sc[1] - 0x57);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	3301      	adds	r3, #1
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	2b60      	cmp	r3, #96	; 0x60
 800329c:	d909      	bls.n	80032b2 <hexToBin+0xba>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	3301      	adds	r3, #1
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	2b66      	cmp	r3, #102	; 0x66
 80032a6:	d804      	bhi.n	80032b2 <hexToBin+0xba>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	3301      	adds	r3, #1
 80032ac:	781b      	ldrb	r3, [r3, #0]
 80032ae:	3b57      	subs	r3, #87	; 0x57
 80032b0:	73bb      	strb	r3, [r7, #14]

	return ((st << 4) | (ml & 0x0f));
 80032b2:	7bfb      	ldrb	r3, [r7, #15]
 80032b4:	011b      	lsls	r3, r3, #4
 80032b6:	b25a      	sxtb	r2, r3
 80032b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80032bc:	f003 030f 	and.w	r3, r3, #15
 80032c0:	b25b      	sxtb	r3, r3
 80032c2:	4313      	orrs	r3, r2
 80032c4:	b25b      	sxtb	r3, r3
 80032c6:	b2db      	uxtb	r3, r3

}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3714      	adds	r7, #20
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr

080032d4 <getEvtCount>:


#ifdef SET_FIFO_MODE
//-------------------------------------------------------------------------------------------
uint8_t getEvtCount()
{
 80032d4:	b480      	push	{r7}
 80032d6:	af00      	add	r7, sp, #0
	return cnt_evt;
 80032d8:	4b03      	ldr	r3, [pc, #12]	; (80032e8 <getEvtCount+0x14>)
 80032da:	781b      	ldrb	r3, [r3, #0]
}
 80032dc:	4618      	mov	r0, r3
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr
 80032e6:	bf00      	nop
 80032e8:	20001842 	.word	0x20001842

080032ec <putEvt>:
//-------------------------------------------------------------------------------------------
void putEvt(int evt)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b082      	sub	sp, #8
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]

	//while (lock_fifo);
	//lock_fifo = true;

	if (cnt_evt > (MAX_FIFO_SIZE - 3)) {
 80032f4:	4b30      	ldr	r3, [pc, #192]	; (80033b8 <putEvt+0xcc>)
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	2b3d      	cmp	r3, #61	; 0x3d
 80032fa:	d907      	bls.n	800330c <putEvt+0x20>
		devError |= devFIFO;
 80032fc:	4b2f      	ldr	r3, [pc, #188]	; (80033bc <putEvt+0xd0>)
 80032fe:	881b      	ldrh	r3, [r3, #0]
 8003300:	f043 0310 	orr.w	r3, r3, #16
 8003304:	b29a      	uxth	r2, r3
 8003306:	4b2d      	ldr	r3, [pc, #180]	; (80033bc <putEvt+0xd0>)
 8003308:	801a      	strh	r2, [r3, #0]
		//lock_fifo = false;
		return;
 800330a:	e051      	b.n	80033b0 <putEvt+0xc4>
	}

	HAL_NVIC_DisableIRQ(USART2_IRQn);
 800330c:	2026      	movs	r0, #38	; 0x26
 800330e:	f002 fd48 	bl	8005da2 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(TIM4_IRQn);
 8003312:	201e      	movs	r0, #30
 8003314:	f002 fd45 	bl	8005da2 <HAL_NVIC_DisableIRQ>

	if (cnt_evt >= MAX_FIFO_SIZE) {
 8003318:	4b27      	ldr	r3, [pc, #156]	; (80033b8 <putEvt+0xcc>)
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	2b3f      	cmp	r3, #63	; 0x3f
 800331e:	d906      	bls.n	800332e <putEvt+0x42>
			wr_evt_err++;
 8003320:	4b27      	ldr	r3, [pc, #156]	; (80033c0 <putEvt+0xd4>)
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	3301      	adds	r3, #1
 8003326:	b2da      	uxtb	r2, r3
 8003328:	4b25      	ldr	r3, [pc, #148]	; (80033c0 <putEvt+0xd4>)
 800332a:	701a      	strb	r2, [r3, #0]
 800332c:	e027      	b.n	800337e <putEvt+0x92>
		} else {
			evt_fifo[wr_evt_adr] = evt;
 800332e:	4b25      	ldr	r3, [pc, #148]	; (80033c4 <putEvt+0xd8>)
 8003330:	781b      	ldrb	r3, [r3, #0]
 8003332:	4619      	mov	r1, r3
 8003334:	4a24      	ldr	r2, [pc, #144]	; (80033c8 <putEvt+0xdc>)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			cnt_evt++;
 800333c:	4b1e      	ldr	r3, [pc, #120]	; (80033b8 <putEvt+0xcc>)
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	3301      	adds	r3, #1
 8003342:	b2da      	uxtb	r2, r3
 8003344:	4b1c      	ldr	r3, [pc, #112]	; (80033b8 <putEvt+0xcc>)
 8003346:	701a      	strb	r2, [r3, #0]
			if (wr_evt_adr < (MAX_FIFO_SIZE - 1) ) {
 8003348:	4b1e      	ldr	r3, [pc, #120]	; (80033c4 <putEvt+0xd8>)
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	2b3e      	cmp	r3, #62	; 0x3e
 800334e:	d806      	bhi.n	800335e <putEvt+0x72>
				wr_evt_adr++;
 8003350:	4b1c      	ldr	r3, [pc, #112]	; (80033c4 <putEvt+0xd8>)
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	3301      	adds	r3, #1
 8003356:	b2da      	uxtb	r2, r3
 8003358:	4b1a      	ldr	r3, [pc, #104]	; (80033c4 <putEvt+0xd8>)
 800335a:	701a      	strb	r2, [r3, #0]
 800335c:	e002      	b.n	8003364 <putEvt+0x78>
			} else  {
				wr_evt_adr = 0;
 800335e:	4b19      	ldr	r3, [pc, #100]	; (80033c4 <putEvt+0xd8>)
 8003360:	2200      	movs	r2, #0
 8003362:	701a      	strb	r2, [r3, #0]
			}
			wr_evt_err = 0;
 8003364:	4b16      	ldr	r3, [pc, #88]	; (80033c0 <putEvt+0xd4>)
 8003366:	2200      	movs	r2, #0
 8003368:	701a      	strb	r2, [r3, #0]
			if (cnt_evt > max_evt) max_evt = cnt_evt;
 800336a:	4b13      	ldr	r3, [pc, #76]	; (80033b8 <putEvt+0xcc>)
 800336c:	781a      	ldrb	r2, [r3, #0]
 800336e:	4b17      	ldr	r3, [pc, #92]	; (80033cc <putEvt+0xe0>)
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	429a      	cmp	r2, r3
 8003374:	d903      	bls.n	800337e <putEvt+0x92>
 8003376:	4b10      	ldr	r3, [pc, #64]	; (80033b8 <putEvt+0xcc>)
 8003378:	781a      	ldrb	r2, [r3, #0]
 800337a:	4b14      	ldr	r3, [pc, #80]	; (80033cc <putEvt+0xe0>)
 800337c:	701a      	strb	r2, [r3, #0]
		}

		if (wr_evt_err) devError |= devFIFO;
 800337e:	4b10      	ldr	r3, [pc, #64]	; (80033c0 <putEvt+0xd4>)
 8003380:	781b      	ldrb	r3, [r3, #0]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d007      	beq.n	8003396 <putEvt+0xaa>
 8003386:	4b0d      	ldr	r3, [pc, #52]	; (80033bc <putEvt+0xd0>)
 8003388:	881b      	ldrh	r3, [r3, #0]
 800338a:	f043 0310 	orr.w	r3, r3, #16
 800338e:	b29a      	uxth	r2, r3
 8003390:	4b0a      	ldr	r3, [pc, #40]	; (80033bc <putEvt+0xd0>)
 8003392:	801a      	strh	r2, [r3, #0]
 8003394:	e006      	b.n	80033a4 <putEvt+0xb8>
				   else devError &= ~devFIFO;
 8003396:	4b09      	ldr	r3, [pc, #36]	; (80033bc <putEvt+0xd0>)
 8003398:	881b      	ldrh	r3, [r3, #0]
 800339a:	f023 0310 	bic.w	r3, r3, #16
 800339e:	b29a      	uxth	r2, r3
 80033a0:	4b06      	ldr	r3, [pc, #24]	; (80033bc <putEvt+0xd0>)
 80033a2:	801a      	strh	r2, [r3, #0]

		HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80033a4:	201e      	movs	r0, #30
 80033a6:	f002 fcee 	bl	8005d86 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(USART2_IRQn);
 80033aa:	2026      	movs	r0, #38	; 0x26
 80033ac:	f002 fceb 	bl	8005d86 <HAL_NVIC_EnableIRQ>

		//lock_fifo = false;
}
 80033b0:	3708      	adds	r7, #8
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	20001842 	.word	0x20001842
 80033bc:	20001424 	.word	0x20001424
 80033c0:	20001841 	.word	0x20001841
 80033c4:	20001840 	.word	0x20001840
 80033c8:	20000094 	.word	0x20000094
 80033cc:	20001843 	.word	0x20001843

080033d0 <getEvt>:
//-------------------------------------------------------------------------------------------
int getEvt()
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0
int ret = evt_None;
 80033d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80033da:	607b      	str	r3, [r7, #4]

	//while (lock_fifo);
	//lock_fifo = true;

	HAL_NVIC_DisableIRQ(USART2_IRQn);
 80033dc:	2026      	movs	r0, #38	; 0x26
 80033de:	f002 fce0 	bl	8005da2 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(TIM4_IRQn);
 80033e2:	201e      	movs	r0, #30
 80033e4:	f002 fcdd 	bl	8005da2 <HAL_NVIC_DisableIRQ>
	if (cnt_evt) {
 80033e8:	4b16      	ldr	r3, [pc, #88]	; (8003444 <getEvt+0x74>)
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d01e      	beq.n	800342e <getEvt+0x5e>
		ret = evt_fifo[rd_evt_adr];
 80033f0:	4b15      	ldr	r3, [pc, #84]	; (8003448 <getEvt+0x78>)
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	461a      	mov	r2, r3
 80033f6:	4b15      	ldr	r3, [pc, #84]	; (800344c <getEvt+0x7c>)
 80033f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033fc:	607b      	str	r3, [r7, #4]
		if (cnt_evt) cnt_evt--;
 80033fe:	4b11      	ldr	r3, [pc, #68]	; (8003444 <getEvt+0x74>)
 8003400:	781b      	ldrb	r3, [r3, #0]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d005      	beq.n	8003412 <getEvt+0x42>
 8003406:	4b0f      	ldr	r3, [pc, #60]	; (8003444 <getEvt+0x74>)
 8003408:	781b      	ldrb	r3, [r3, #0]
 800340a:	3b01      	subs	r3, #1
 800340c:	b2da      	uxtb	r2, r3
 800340e:	4b0d      	ldr	r3, [pc, #52]	; (8003444 <getEvt+0x74>)
 8003410:	701a      	strb	r2, [r3, #0]
		if (rd_evt_adr < (MAX_FIFO_SIZE - 1) ) {
 8003412:	4b0d      	ldr	r3, [pc, #52]	; (8003448 <getEvt+0x78>)
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	2b3e      	cmp	r3, #62	; 0x3e
 8003418:	d806      	bhi.n	8003428 <getEvt+0x58>
			rd_evt_adr++;
 800341a:	4b0b      	ldr	r3, [pc, #44]	; (8003448 <getEvt+0x78>)
 800341c:	781b      	ldrb	r3, [r3, #0]
 800341e:	3301      	adds	r3, #1
 8003420:	b2da      	uxtb	r2, r3
 8003422:	4b09      	ldr	r3, [pc, #36]	; (8003448 <getEvt+0x78>)
 8003424:	701a      	strb	r2, [r3, #0]
 8003426:	e002      	b.n	800342e <getEvt+0x5e>
		} else {
			rd_evt_adr = 0;
 8003428:	4b07      	ldr	r3, [pc, #28]	; (8003448 <getEvt+0x78>)
 800342a:	2200      	movs	r2, #0
 800342c:	701a      	strb	r2, [r3, #0]
		}
	}

	HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800342e:	201e      	movs	r0, #30
 8003430:	f002 fca9 	bl	8005d86 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003434:	2026      	movs	r0, #38	; 0x26
 8003436:	f002 fca6 	bl	8005d86 <HAL_NVIC_EnableIRQ>

	//lock_fifo = false;

	return ret;
 800343a:	687b      	ldr	r3, [r7, #4]
}
 800343c:	4618      	mov	r0, r3
 800343e:	3708      	adds	r7, #8
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}
 8003444:	20001842 	.word	0x20001842
 8003448:	2000183f 	.word	0x2000183f
 800344c:	20000094 	.word	0x20000094

08003450 <showLine>:
#endif

//-------------------------------------------------------------------------------------------
#ifdef SET_DISPLAY
void showLine(char *msg, uint16_t lin, int *lil)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b088      	sub	sp, #32
 8003454:	af02      	add	r7, sp, #8
 8003456:	60f8      	str	r0, [r7, #12]
 8003458:	460b      	mov	r3, r1
 800345a:	607a      	str	r2, [r7, #4]
 800345c:	817b      	strh	r3, [r7, #10]
int il = strlen(msg);
 800345e:	68f8      	ldr	r0, [r7, #12]
 8003460:	f7fc feb6 	bl	80001d0 <strlen>
 8003464:	4603      	mov	r3, r0
 8003466:	613b      	str	r3, [r7, #16]

	if (*lil > il) {
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	693a      	ldr	r2, [r7, #16]
 800346e:	429a      	cmp	r2, r3
 8003470:	da0b      	bge.n	800348a <showLine+0x3a>
		ST7565_DrawFilledRectangle(2, lin, SCREEN_WIDTH - 4, lfnt->FontHeight, PIX_OFF);
 8003472:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8003476:	4b1a      	ldr	r3, [pc, #104]	; (80034e0 <showLine+0x90>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	785b      	ldrb	r3, [r3, #1]
 800347c:	b21b      	sxth	r3, r3
 800347e:	2200      	movs	r2, #0
 8003480:	9200      	str	r2, [sp, #0]
 8003482:	227c      	movs	r2, #124	; 0x7c
 8003484:	2002      	movs	r0, #2
 8003486:	f7fe fbca 	bl	8001c1e <ST7565_DrawFilledRectangle>
	}
	*lil = il;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	693a      	ldr	r2, [r7, #16]
 800348e:	601a      	str	r2, [r3, #0]
	int xf = ((SCREEN_WIDTH - (lfnt->FontWidth * il)) >> 1) & 0x7f;
 8003490:	4b13      	ldr	r3, [pc, #76]	; (80034e0 <showLine+0x90>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	461a      	mov	r2, r3
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	fb02 f303 	mul.w	r3, r2, r3
 800349e:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80034a2:	105b      	asrs	r3, r3, #1
 80034a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034a8:	617b      	str	r3, [r7, #20]
	if ((!xf) || (xf > (SCREEN_WIDTH - 3))) xf = 1;
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d002      	beq.n	80034b6 <showLine+0x66>
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	2b7d      	cmp	r3, #125	; 0x7d
 80034b4:	dd01      	ble.n	80034ba <showLine+0x6a>
 80034b6:	2301      	movs	r3, #1
 80034b8:	617b      	str	r3, [r7, #20]
	ST7565_Print(xf, lin, msg, lfnt, 1, PIX_ON);
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	b218      	sxth	r0, r3
 80034be:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80034c2:	4b07      	ldr	r3, [pc, #28]	; (80034e0 <showLine+0x90>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	2201      	movs	r2, #1
 80034c8:	9201      	str	r2, [sp, #4]
 80034ca:	2201      	movs	r2, #1
 80034cc:	9200      	str	r2, [sp, #0]
 80034ce:	68fa      	ldr	r2, [r7, #12]
 80034d0:	f7fe f94c 	bl	800176c <ST7565_Print>
	ST7565_Update();
 80034d4:	f7fd ff9a 	bl	800140c <ST7565_Update>
}
 80034d8:	bf00      	nop
 80034da:	3718      	adds	r7, #24
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	20002c5c 	.word	0x20002c5c

080034e4 <errLedOn>:
#endif
//-------------------------------------------------------------------------------------------
void errLedOn(bool on)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b082      	sub	sp, #8
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	4603      	mov	r3, r0
 80034ec:	71fb      	strb	r3, [r7, #7]
	if (on)
 80034ee:	79fb      	ldrb	r3, [r7, #7]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d005      	beq.n	8003500 <errLedOn+0x1c>
		HAL_GPIO_WritePin(ERR_LED_GPIO_Port, ERR_LED_Pin, GPIO_PIN_SET);//LED ON
 80034f4:	2201      	movs	r2, #1
 80034f6:	2108      	movs	r1, #8
 80034f8:	4806      	ldr	r0, [pc, #24]	; (8003514 <errLedOn+0x30>)
 80034fa:	f003 f8b3 	bl	8006664 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(ERR_LED_GPIO_Port, ERR_LED_Pin, GPIO_PIN_RESET);//LED OFF
}
 80034fe:	e004      	b.n	800350a <errLedOn+0x26>
		HAL_GPIO_WritePin(ERR_LED_GPIO_Port, ERR_LED_Pin, GPIO_PIN_RESET);//LED OFF
 8003500:	2200      	movs	r2, #0
 8003502:	2108      	movs	r1, #8
 8003504:	4803      	ldr	r0, [pc, #12]	; (8003514 <errLedOn+0x30>)
 8003506:	f003 f8ad 	bl	8006664 <HAL_GPIO_WritePin>
}
 800350a:	bf00      	nop
 800350c:	3708      	adds	r7, #8
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	48000800 	.word	0x48000800

08003518 <get_secCounter>:
//------------------------------------------------------------------------------------
uint32_t get_secCounter()
{
 8003518:	b480      	push	{r7}
 800351a:	af00      	add	r7, sp, #0
	return secCounter;
 800351c:	4b03      	ldr	r3, [pc, #12]	; (800352c <get_secCounter+0x14>)
 800351e:	681b      	ldr	r3, [r3, #0]
}
 8003520:	4618      	mov	r0, r3
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr
 800352a:	bf00      	nop
 800352c:	20001428 	.word	0x20001428

08003530 <set_Date>:

    for (i = 0; i < strlen(st); i++) *(st + i) = toupper(*(st + i));
}
//------------------------------------------------------------------------------------------
void set_Date(uint32_t usec)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b094      	sub	sp, #80	; 0x50
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
struct tm ts;
time_t ep = (time_t)usec;
 8003538:	6879      	ldr	r1, [r7, #4]
 800353a:	2000      	movs	r0, #0
 800353c:	460a      	mov	r2, r1
 800353e:	4603      	mov	r3, r0
 8003540:	e9c7 2308 	strd	r2, r3, [r7, #32]

	gmtime_r(&ep, &ts);
 8003544:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8003548:	f107 0320 	add.w	r3, r7, #32
 800354c:	4611      	mov	r1, r2
 800354e:	4618      	mov	r0, r3
 8003550:	f00a f8ae 	bl	800d6b0 <gmtime_r>

	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;
	sDate.WeekDay = ts.tm_wday;
 8003554:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003556:	b2db      	uxtb	r3, r3
 8003558:	723b      	strb	r3, [r7, #8]
	sDate.Month   = ts.tm_mon + 1;
 800355a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800355c:	b2db      	uxtb	r3, r3
 800355e:	3301      	adds	r3, #1
 8003560:	b2db      	uxtb	r3, r3
 8003562:	727b      	strb	r3, [r7, #9]
	sDate.Date    = ts.tm_mday;
 8003564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003566:	b2db      	uxtb	r3, r3
 8003568:	72bb      	strb	r3, [r7, #10]
	sDate.Year    = ts.tm_year;
 800356a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800356c:	b2db      	uxtb	r3, r3
 800356e:	72fb      	strb	r3, [r7, #11]
	sTime.Hours   = ts.tm_hour + tZone;
 8003570:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003572:	b2da      	uxtb	r2, r3
 8003574:	4b1a      	ldr	r3, [pc, #104]	; (80035e0 <set_Date+0xb0>)
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	4413      	add	r3, r2
 800357a:	b2db      	uxtb	r3, r3
 800357c:	733b      	strb	r3, [r7, #12]
	sTime.Minutes = ts.tm_min;
 800357e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003580:	b2db      	uxtb	r3, r3
 8003582:	737b      	strb	r3, [r7, #13]
	sTime.Seconds = ts.tm_sec;
 8003584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003586:	b2db      	uxtb	r3, r3
 8003588:	73bb      	strb	r3, [r7, #14]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) devError |= devRTC;
 800358a:	f107 030c 	add.w	r3, r7, #12
 800358e:	2200      	movs	r2, #0
 8003590:	4619      	mov	r1, r3
 8003592:	4814      	ldr	r0, [pc, #80]	; (80035e4 <set_Date+0xb4>)
 8003594:	f006 f8c5 	bl	8009722 <HAL_RTC_SetTime>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d007      	beq.n	80035ae <set_Date+0x7e>
 800359e:	4b12      	ldr	r3, [pc, #72]	; (80035e8 <set_Date+0xb8>)
 80035a0:	881b      	ldrh	r3, [r3, #0]
 80035a2:	f043 0308 	orr.w	r3, r3, #8
 80035a6:	b29a      	uxth	r2, r3
 80035a8:	4b0f      	ldr	r3, [pc, #60]	; (80035e8 <set_Date+0xb8>)
 80035aa:	801a      	strh	r2, [r3, #0]
		if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) devError |= devRTC;
		else {
			setDate = true;
		}
	}
}
 80035ac:	e014      	b.n	80035d8 <set_Date+0xa8>
		if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) devError |= devRTC;
 80035ae:	f107 0308 	add.w	r3, r7, #8
 80035b2:	2200      	movs	r2, #0
 80035b4:	4619      	mov	r1, r3
 80035b6:	480b      	ldr	r0, [pc, #44]	; (80035e4 <set_Date+0xb4>)
 80035b8:	f006 f9ac 	bl	8009914 <HAL_RTC_SetDate>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d007      	beq.n	80035d2 <set_Date+0xa2>
 80035c2:	4b09      	ldr	r3, [pc, #36]	; (80035e8 <set_Date+0xb8>)
 80035c4:	881b      	ldrh	r3, [r3, #0]
 80035c6:	f043 0308 	orr.w	r3, r3, #8
 80035ca:	b29a      	uxth	r2, r3
 80035cc:	4b06      	ldr	r3, [pc, #24]	; (80035e8 <set_Date+0xb8>)
 80035ce:	801a      	strh	r2, [r3, #0]
}
 80035d0:	e002      	b.n	80035d8 <set_Date+0xa8>
			setDate = true;
 80035d2:	4b06      	ldr	r3, [pc, #24]	; (80035ec <set_Date+0xbc>)
 80035d4:	2201      	movs	r2, #1
 80035d6:	701a      	strb	r2, [r3, #0]
}
 80035d8:	bf00      	nop
 80035da:	3750      	adds	r7, #80	; 0x50
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	2000183e 	.word	0x2000183e
 80035e4:	200008c8 	.word	0x200008c8
 80035e8:	20001424 	.word	0x20001424
 80035ec:	2000183d 	.word	0x2000183d

080035f0 <sec2str>:

	return ep;
}
//------------------------------------------------------------------------------------------
int sec2str(char *st)
{
 80035f0:	b590      	push	{r4, r7, lr}
 80035f2:	b093      	sub	sp, #76	; 0x4c
 80035f4:	af04      	add	r7, sp, #16
 80035f6:	6078      	str	r0, [r7, #4]
int ret = 0;
 80035f8:	2300      	movs	r3, #0
 80035fa:	637b      	str	r3, [r7, #52]	; 0x34

	if (!setDate) {
 80035fc:	4b40      	ldr	r3, [pc, #256]	; (8003700 <sec2str+0x110>)
 80035fe:	781b      	ldrb	r3, [r3, #0]
 8003600:	f083 0301 	eor.w	r3, r3, #1
 8003604:	b2db      	uxtb	r3, r3
 8003606:	2b00      	cmp	r3, #0
 8003608:	d040      	beq.n	800368c <sec2str+0x9c>
		uint32_t sec = get_secCounter();
 800360a:	f7ff ff85 	bl	8003518 <get_secCounter>
 800360e:	6338      	str	r0, [r7, #48]	; 0x30

		uint32_t day = sec / (60 * 60 * 24);
 8003610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003612:	4a3c      	ldr	r2, [pc, #240]	; (8003704 <sec2str+0x114>)
 8003614:	fba2 2303 	umull	r2, r3, r2, r3
 8003618:	0c1b      	lsrs	r3, r3, #16
 800361a:	62fb      	str	r3, [r7, #44]	; 0x2c
		sec %= (60 * 60 * 24);
 800361c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800361e:	4a39      	ldr	r2, [pc, #228]	; (8003704 <sec2str+0x114>)
 8003620:	fba2 1203 	umull	r1, r2, r2, r3
 8003624:	0c12      	lsrs	r2, r2, #16
 8003626:	4938      	ldr	r1, [pc, #224]	; (8003708 <sec2str+0x118>)
 8003628:	fb01 f202 	mul.w	r2, r1, r2
 800362c:	1a9b      	subs	r3, r3, r2
 800362e:	633b      	str	r3, [r7, #48]	; 0x30
		uint32_t hour = sec / (60 * 60);
 8003630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003632:	4a36      	ldr	r2, [pc, #216]	; (800370c <sec2str+0x11c>)
 8003634:	fba2 2303 	umull	r2, r3, r2, r3
 8003638:	0adb      	lsrs	r3, r3, #11
 800363a:	62bb      	str	r3, [r7, #40]	; 0x28
		sec %= (60 * 60);
 800363c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800363e:	4a33      	ldr	r2, [pc, #204]	; (800370c <sec2str+0x11c>)
 8003640:	fba2 1203 	umull	r1, r2, r2, r3
 8003644:	0ad2      	lsrs	r2, r2, #11
 8003646:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800364a:	fb01 f202 	mul.w	r2, r1, r2
 800364e:	1a9b      	subs	r3, r3, r2
 8003650:	633b      	str	r3, [r7, #48]	; 0x30
		uint32_t min = sec / (60);
 8003652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003654:	4a2e      	ldr	r2, [pc, #184]	; (8003710 <sec2str+0x120>)
 8003656:	fba2 2303 	umull	r2, r3, r2, r3
 800365a:	095b      	lsrs	r3, r3, #5
 800365c:	627b      	str	r3, [r7, #36]	; 0x24
		sec %= 60;
 800365e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003660:	4b2b      	ldr	r3, [pc, #172]	; (8003710 <sec2str+0x120>)
 8003662:	fba3 1302 	umull	r1, r3, r3, r2
 8003666:	0959      	lsrs	r1, r3, #5
 8003668:	460b      	mov	r3, r1
 800366a:	011b      	lsls	r3, r3, #4
 800366c:	1a5b      	subs	r3, r3, r1
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	633b      	str	r3, [r7, #48]	; 0x30

		ret = sprintf(st, "%lu.%02lu:%02lu:%02lu", day, hour, min, sec);
 8003674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003676:	9301      	str	r3, [sp, #4]
 8003678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367a:	9300      	str	r3, [sp, #0]
 800367c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800367e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003680:	4924      	ldr	r1, [pc, #144]	; (8003714 <sec2str+0x124>)
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f00a fd64 	bl	800e150 <siprintf>
 8003688:	6378      	str	r0, [r7, #52]	; 0x34
 800368a:	e034      	b.n	80036f6 <sec2str+0x106>
	} else {
		RTC_TimeTypeDef sTime;
		RTC_DateTypeDef sDate;
		if (HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN)) devError |= devRTC;
 800368c:	f107 030c 	add.w	r3, r7, #12
 8003690:	2200      	movs	r2, #0
 8003692:	4619      	mov	r1, r3
 8003694:	4820      	ldr	r0, [pc, #128]	; (8003718 <sec2str+0x128>)
 8003696:	f006 f9c4 	bl	8009a22 <HAL_RTC_GetDate>
 800369a:	4603      	mov	r3, r0
 800369c:	2b00      	cmp	r3, #0
 800369e:	d007      	beq.n	80036b0 <sec2str+0xc0>
 80036a0:	4b1e      	ldr	r3, [pc, #120]	; (800371c <sec2str+0x12c>)
 80036a2:	881b      	ldrh	r3, [r3, #0]
 80036a4:	f043 0308 	orr.w	r3, r3, #8
 80036a8:	b29a      	uxth	r2, r3
 80036aa:	4b1c      	ldr	r3, [pc, #112]	; (800371c <sec2str+0x12c>)
 80036ac:	801a      	strh	r2, [r3, #0]
 80036ae:	e022      	b.n	80036f6 <sec2str+0x106>
		else {
			if (HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN)) devError |= devRTC;
 80036b0:	f107 0310 	add.w	r3, r7, #16
 80036b4:	2200      	movs	r2, #0
 80036b6:	4619      	mov	r1, r3
 80036b8:	4817      	ldr	r0, [pc, #92]	; (8003718 <sec2str+0x128>)
 80036ba:	f006 f8cf 	bl	800985c <HAL_RTC_GetTime>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d007      	beq.n	80036d4 <sec2str+0xe4>
 80036c4:	4b15      	ldr	r3, [pc, #84]	; (800371c <sec2str+0x12c>)
 80036c6:	881b      	ldrh	r3, [r3, #0]
 80036c8:	f043 0308 	orr.w	r3, r3, #8
 80036cc:	b29a      	uxth	r2, r3
 80036ce:	4b13      	ldr	r3, [pc, #76]	; (800371c <sec2str+0x12c>)
 80036d0:	801a      	strh	r2, [r3, #0]
 80036d2:	e010      	b.n	80036f6 <sec2str+0x106>
			else {
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
								sDate.Date, sDate.Month,
 80036d4:	7bbb      	ldrb	r3, [r7, #14]
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
 80036d6:	4618      	mov	r0, r3
								sDate.Date, sDate.Month,
 80036d8:	7b7b      	ldrb	r3, [r7, #13]
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
 80036da:	461c      	mov	r4, r3
								sTime.Hours, sTime.Minutes, sTime.Seconds);
 80036dc:	7c3b      	ldrb	r3, [r7, #16]
 80036de:	7c7a      	ldrb	r2, [r7, #17]
 80036e0:	7cb9      	ldrb	r1, [r7, #18]
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
 80036e2:	9102      	str	r1, [sp, #8]
 80036e4:	9201      	str	r2, [sp, #4]
 80036e6:	9300      	str	r3, [sp, #0]
 80036e8:	4623      	mov	r3, r4
 80036ea:	4602      	mov	r2, r0
 80036ec:	490c      	ldr	r1, [pc, #48]	; (8003720 <sec2str+0x130>)
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f00a fd2e 	bl	800e150 <siprintf>
 80036f4:	6378      	str	r0, [r7, #52]	; 0x34
			}
		}
	}

	return ret;
 80036f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	373c      	adds	r7, #60	; 0x3c
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd90      	pop	{r4, r7, pc}
 8003700:	2000183d 	.word	0x2000183d
 8003704:	c22e4507 	.word	0xc22e4507
 8003708:	00015180 	.word	0x00015180
 800370c:	91a2b3c5 	.word	0x91a2b3c5
 8003710:	88888889 	.word	0x88888889
 8003714:	080121fc 	.word	0x080121fc
 8003718:	200008c8 	.word	0x200008c8
 800371c:	20001424 	.word	0x20001424
 8003720:	08012214 	.word	0x08012214

08003724 <Report>:
//--------------------------------------------------------------------------------------------
void Report(const uint8_t addTime, const char *fmt, ...)
{
 8003724:	b40e      	push	{r1, r2, r3}
 8003726:	b590      	push	{r4, r7, lr}
 8003728:	b088      	sub	sp, #32
 800372a:	af00      	add	r7, sp, #0
 800372c:	4603      	mov	r3, r0
 800372e:	71fb      	strb	r3, [r7, #7]
size_t len = MAX_UART_BUF;
 8003730:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003734:	617b      	str	r3, [r7, #20]
char *buf = &cmdBuf[0];
 8003736:	4b32      	ldr	r3, [pc, #200]	; (8003800 <Report+0xdc>)
 8003738:	613b      	str	r3, [r7, #16]
uint32_t cnt = 16;
 800373a:	2310      	movs	r3, #16
 800373c:	61fb      	str	r3, [r7, #28]
uint32_t stim = HAL_GetTick();
 800373e:	f002 f9d7 	bl	8005af0 <HAL_GetTick>
 8003742:	60f8      	str	r0, [r7, #12]

	while (!uartRdy && cnt) {
 8003744:	e008      	b.n	8003758 <Report+0x34>
		if (HAL_GetTick() - stim) cnt--;
 8003746:	f002 f9d3 	bl	8005af0 <HAL_GetTick>
 800374a:	4602      	mov	r2, r0
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	4293      	cmp	r3, r2
 8003750:	d002      	beq.n	8003758 <Report+0x34>
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	3b01      	subs	r3, #1
 8003756:	61fb      	str	r3, [r7, #28]
	while (!uartRdy && cnt) {
 8003758:	4b2a      	ldr	r3, [pc, #168]	; (8003804 <Report+0xe0>)
 800375a:	781b      	ldrb	r3, [r3, #0]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d102      	bne.n	8003766 <Report+0x42>
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d1ef      	bne.n	8003746 <Report+0x22>
	}

	//if (buf) {
		*buf = '\0';
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	2200      	movs	r2, #0
 800376a:	701a      	strb	r2, [r3, #0]
		int dl = 0;
 800376c:	2300      	movs	r3, #0
 800376e:	61bb      	str	r3, [r7, #24]
		if (addTime) {
 8003770:	79fb      	ldrb	r3, [r7, #7]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d010      	beq.n	8003798 <Report+0x74>
			dl = sec2str(buf);
 8003776:	6938      	ldr	r0, [r7, #16]
 8003778:	f7ff ff3a 	bl	80035f0 <sec2str>
 800377c:	61b8      	str	r0, [r7, #24]
			strcat(buf, " | ");
 800377e:	6938      	ldr	r0, [r7, #16]
 8003780:	f7fc fd26 	bl	80001d0 <strlen>
 8003784:	4603      	mov	r3, r0
 8003786:	461a      	mov	r2, r3
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	4413      	add	r3, r2
 800378c:	4a1e      	ldr	r2, [pc, #120]	; (8003808 <Report+0xe4>)
 800378e:	6810      	ldr	r0, [r2, #0]
 8003790:	6018      	str	r0, [r3, #0]
			dl += 3;
 8003792:	69bb      	ldr	r3, [r7, #24]
 8003794:	3303      	adds	r3, #3
 8003796:	61bb      	str	r3, [r7, #24]
		}

		va_list args;
		va_start(args, fmt);
 8003798:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800379c:	60bb      	str	r3, [r7, #8]
		vsnprintf(buf + dl, len - dl, fmt, args);
 800379e:	69bb      	ldr	r3, [r7, #24]
 80037a0:	693a      	ldr	r2, [r7, #16]
 80037a2:	18d0      	adds	r0, r2, r3
 80037a4:	69bb      	ldr	r3, [r7, #24]
 80037a6:	697a      	ldr	r2, [r7, #20]
 80037a8:	1ad1      	subs	r1, r2, r3
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037ae:	f00b fc0d 	bl	800efcc <vsniprintf>

		uartRdy = false;
 80037b2:	4b14      	ldr	r3, [pc, #80]	; (8003804 <Report+0xe0>)
 80037b4:	2200      	movs	r2, #0
 80037b6:	701a      	strb	r2, [r3, #0]
		if (HAL_UART_Transmit_DMA(cmdPort, (uint8_t *)buf, strlen(buf)) != HAL_OK) devError |= devUART;
 80037b8:	4b14      	ldr	r3, [pc, #80]	; (800380c <Report+0xe8>)
 80037ba:	681c      	ldr	r4, [r3, #0]
 80037bc:	6938      	ldr	r0, [r7, #16]
 80037be:	f7fc fd07 	bl	80001d0 <strlen>
 80037c2:	4603      	mov	r3, r0
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	461a      	mov	r2, r3
 80037c8:	6939      	ldr	r1, [r7, #16]
 80037ca:	4620      	mov	r0, r4
 80037cc:	f008 fbd8 	bl	800bf80 <HAL_UART_Transmit_DMA>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d006      	beq.n	80037e4 <Report+0xc0>
 80037d6:	4b0e      	ldr	r3, [pc, #56]	; (8003810 <Report+0xec>)
 80037d8:	881b      	ldrh	r3, [r3, #0]
 80037da:	f043 0302 	orr.w	r3, r3, #2
 80037de:	b29a      	uxth	r2, r3
 80037e0:	4b0b      	ldr	r3, [pc, #44]	; (8003810 <Report+0xec>)
 80037e2:	801a      	strh	r2, [r3, #0]
		while (!uartRdy) {} //HAL_Delay(1)
 80037e4:	bf00      	nop
 80037e6:	4b07      	ldr	r3, [pc, #28]	; (8003804 <Report+0xe0>)
 80037e8:	781b      	ldrb	r3, [r3, #0]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d0fb      	beq.n	80037e6 <Report+0xc2>
	//	free(buf);
	//} else {
	//	devError |= devMEM;
	//}

}
 80037ee:	bf00      	nop
 80037f0:	bf00      	nop
 80037f2:	3720      	adds	r7, #32
 80037f4:	46bd      	mov	sp, r7
 80037f6:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80037fa:	b003      	add	sp, #12
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop
 8003800:	20001024 	.word	0x20001024
 8003804:	20000014 	.word	0x20000014
 8003808:	08012230 	.word	0x08012230
 800380c:	20000010 	.word	0x20000010
 8003810:	20001424 	.word	0x20001424

08003814 <HAL_TIM_PeriodElapsedCallback>:



//------------------------------------------------------------------------------------------
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003814:	b5b0      	push	{r4, r5, r7, lr}
 8003816:	b082      	sub	sp, #8
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM4) {
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a15      	ldr	r2, [pc, #84]	; (8003878 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d124      	bne.n	8003870 <HAL_TIM_PeriodElapsedCallback+0x5c>
		msCounter++;//inc_msCounter();
 8003826:	4b15      	ldr	r3, [pc, #84]	; (800387c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8003828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800382c:	1c54      	adds	r4, r2, #1
 800382e:	f143 0500 	adc.w	r5, r3, #0
 8003832:	4b12      	ldr	r3, [pc, #72]	; (800387c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8003834:	e9c3 4500 	strd	r4, r5, [r3]
		if (!(msCounter % _1s)) {// 1 seconda
 8003838:	4b10      	ldr	r3, [pc, #64]	; (800387c <HAL_TIM_PeriodElapsedCallback+0x68>)
 800383a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800383e:	f04f 0264 	mov.w	r2, #100	; 0x64
 8003842:	f04f 0300 	mov.w	r3, #0
 8003846:	f7fd fa6f 	bl	8000d28 <__aeabi_uldivmod>
 800384a:	4313      	orrs	r3, r2
 800384c:	d110      	bne.n	8003870 <HAL_TIM_PeriodElapsedCallback+0x5c>
			secCounter++;
 800384e:	4b0c      	ldr	r3, [pc, #48]	; (8003880 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	3301      	adds	r3, #1
 8003854:	4a0a      	ldr	r2, [pc, #40]	; (8003880 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8003856:	6013      	str	r3, [r2, #0]
		  	HAL_GPIO_TogglePin(TIK_LED_GPIO_Port, TIK_LED_Pin);
 8003858:	2101      	movs	r1, #1
 800385a:	480a      	ldr	r0, [pc, #40]	; (8003884 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800385c:	f002 ff1a 	bl	8006694 <HAL_GPIO_TogglePin>
#ifdef SET_DISPLAY
		  	if (startSec) putEvt(evt_Sec);
 8003860:	4b09      	ldr	r3, [pc, #36]	; (8003888 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8003862:	781b      	ldrb	r3, [r3, #0]
 8003864:	b2db      	uxtb	r3, r3
 8003866:	2b00      	cmp	r3, #0
 8003868:	d002      	beq.n	8003870 <HAL_TIM_PeriodElapsedCallback+0x5c>
 800386a:	2008      	movs	r0, #8
 800386c:	f7ff fd3e 	bl	80032ec <putEvt>
#endif
	  	}
	}
}
 8003870:	bf00      	nop
 8003872:	3708      	adds	r7, #8
 8003874:	46bd      	mov	sp, r7
 8003876:	bdb0      	pop	{r4, r5, r7, pc}
 8003878:	40000800 	.word	0x40000800
 800387c:	20001430 	.word	0x20001430
 8003880:	20001428 	.word	0x20001428
 8003884:	48000800 	.word	0x48000800
 8003888:	20002c5a 	.word	0x20002c5a

0800388c <HAL_UART_TxCpltCallback>:
//--------------------------------------------------------------------------------------------

//-------------------------------------------------------------------------------------------
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800388c:	b480      	push	{r7}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a05      	ldr	r2, [pc, #20]	; (80038b0 <HAL_UART_TxCpltCallback+0x24>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d102      	bne.n	80038a4 <HAL_UART_TxCpltCallback+0x18>
		uartRdy = 1;
 800389e:	4b05      	ldr	r3, [pc, #20]	; (80038b4 <HAL_UART_TxCpltCallback+0x28>)
 80038a0:	2201      	movs	r2, #1
 80038a2:	701a      	strb	r2, [r3, #0]
	}
}
 80038a4:	bf00      	nop
 80038a6:	370c      	adds	r7, #12
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr
 80038b0:	40004400 	.word	0x40004400
 80038b4:	20000014 	.word	0x20000014

080038b8 <HAL_UART_RxCpltCallback>:
//-------------------------------------------------------------------------------------------
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80038b8:	b590      	push	{r4, r7, lr}
 80038ba:	b08d      	sub	sp, #52	; 0x34
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4aa6      	ldr	r2, [pc, #664]	; (8003b60 <HAL_UART_RxCpltCallback+0x2a8>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	f040 8210 	bne.w	8003cec <HAL_UART_RxCpltCallback+0x434>
		rxBuf[rxInd++] = (char)rxByte;
 80038cc:	4ba5      	ldr	r3, [pc, #660]	; (8003b64 <HAL_UART_RxCpltCallback+0x2ac>)
 80038ce:	881b      	ldrh	r3, [r3, #0]
 80038d0:	1c5a      	adds	r2, r3, #1
 80038d2:	b291      	uxth	r1, r2
 80038d4:	4aa3      	ldr	r2, [pc, #652]	; (8003b64 <HAL_UART_RxCpltCallback+0x2ac>)
 80038d6:	8011      	strh	r1, [r2, #0]
 80038d8:	461a      	mov	r2, r3
 80038da:	4ba3      	ldr	r3, [pc, #652]	; (8003b68 <HAL_UART_RxCpltCallback+0x2b0>)
 80038dc:	7819      	ldrb	r1, [r3, #0]
 80038de:	4ba3      	ldr	r3, [pc, #652]	; (8003b6c <HAL_UART_RxCpltCallback+0x2b4>)
 80038e0:	5499      	strb	r1, [r3, r2]
		if (rxByte == 0x0a) {//end of line
 80038e2:	4ba1      	ldr	r3, [pc, #644]	; (8003b68 <HAL_UART_RxCpltCallback+0x2b0>)
 80038e4:	781b      	ldrb	r3, [r3, #0]
 80038e6:	2b0a      	cmp	r3, #10
 80038e8:	f040 81f1 	bne.w	8003cce <HAL_UART_RxCpltCallback+0x416>
			rxBuf[--rxInd] = '\0';
 80038ec:	4b9d      	ldr	r3, [pc, #628]	; (8003b64 <HAL_UART_RxCpltCallback+0x2ac>)
 80038ee:	881b      	ldrh	r3, [r3, #0]
 80038f0:	3b01      	subs	r3, #1
 80038f2:	b29a      	uxth	r2, r3
 80038f4:	4b9b      	ldr	r3, [pc, #620]	; (8003b64 <HAL_UART_RxCpltCallback+0x2ac>)
 80038f6:	801a      	strh	r2, [r3, #0]
 80038f8:	4b9a      	ldr	r3, [pc, #616]	; (8003b64 <HAL_UART_RxCpltCallback+0x2ac>)
 80038fa:	881b      	ldrh	r3, [r3, #0]
 80038fc:	461a      	mov	r2, r3
 80038fe:	4b9b      	ldr	r3, [pc, #620]	; (8003b6c <HAL_UART_RxCpltCallback+0x2b4>)
 8003900:	2100      	movs	r1, #0
 8003902:	5499      	strb	r1, [r3, r2]

			int i, ev = -1;
 8003904:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003908:	62bb      	str	r3, [r7, #40]	; 0x28
			if (strlen(rxBuf) > 2) {
 800390a:	4898      	ldr	r0, [pc, #608]	; (8003b6c <HAL_UART_RxCpltCallback+0x2b4>)
 800390c:	f7fc fc60 	bl	80001d0 <strlen>
 8003910:	4603      	mov	r3, r0
 8003912:	2b02      	cmp	r3, #2
 8003914:	f240 81d5 	bls.w	8003cc2 <HAL_UART_RxCpltCallback+0x40a>
				for (i = 0; i < MAX_CMDS; i++) {
 8003918:	2300      	movs	r3, #0
 800391a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800391c:	e1c2      	b.n	8003ca4 <HAL_UART_RxCpltCallback+0x3ec>
					if (!strncmp(rxBuf, s_cmds[i], strlen(s_cmds[i]))) {
 800391e:	4a94      	ldr	r2, [pc, #592]	; (8003b70 <HAL_UART_RxCpltCallback+0x2b8>)
 8003920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003922:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8003926:	4a92      	ldr	r2, [pc, #584]	; (8003b70 <HAL_UART_RxCpltCallback+0x2b8>)
 8003928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800392a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800392e:	4618      	mov	r0, r3
 8003930:	f7fc fc4e 	bl	80001d0 <strlen>
 8003934:	4603      	mov	r3, r0
 8003936:	461a      	mov	r2, r3
 8003938:	4621      	mov	r1, r4
 800393a:	488c      	ldr	r0, [pc, #560]	; (8003b6c <HAL_UART_RxCpltCallback+0x2b4>)
 800393c:	f00a fc35 	bl	800e1aa <strncmp>
 8003940:	4603      	mov	r3, r0
 8003942:	2b00      	cmp	r3, #0
 8003944:	f040 81ab 	bne.w	8003c9e <HAL_UART_RxCpltCallback+0x3e6>
						char *uk = rxBuf + strlen(s_cmds[i]);
 8003948:	4a89      	ldr	r2, [pc, #548]	; (8003b70 <HAL_UART_RxCpltCallback+0x2b8>)
 800394a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800394c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003950:	4618      	mov	r0, r3
 8003952:	f7fc fc3d 	bl	80001d0 <strlen>
 8003956:	4603      	mov	r3, r0
 8003958:	4a84      	ldr	r2, [pc, #528]	; (8003b6c <HAL_UART_RxCpltCallback+0x2b4>)
 800395a:	4413      	add	r3, r2
 800395c:	623b      	str	r3, [r7, #32]
						ev = -1;
 800395e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003962:	62bb      	str	r3, [r7, #40]	; 0x28
						switch (i) {
 8003964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003966:	2b0e      	cmp	r3, #14
 8003968:	f200 81a1 	bhi.w	8003cae <HAL_UART_RxCpltCallback+0x3f6>
 800396c:	a201      	add	r2, pc, #4	; (adr r2, 8003974 <HAL_UART_RxCpltCallback+0xbc>)
 800396e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003972:	bf00      	nop
 8003974:	08003aad 	.word	0x08003aad
 8003978:	08003ab3 	.word	0x08003ab3
 800397c:	08003ab9 	.word	0x08003ab9
 8003980:	08003caf 	.word	0x08003caf
 8003984:	08003b0b 	.word	0x08003b0b
 8003988:	08003b0b 	.word	0x08003b0b
 800398c:	08003c45 	.word	0x08003c45
 8003990:	08003ba9 	.word	0x08003ba9
 8003994:	08003caf 	.word	0x08003caf
 8003998:	08003aad 	.word	0x08003aad
 800399c:	08003aad 	.word	0x08003aad
 80039a0:	08003a7d 	.word	0x08003a7d
 80039a4:	08003a39 	.word	0x08003a39
 80039a8:	080039b1 	.word	0x080039b1
 80039ac:	08003a1b 	.word	0x08003a1b
							case cmdVol:
								if (strlen(uk) >= 1) {
 80039b0:	6a3b      	ldr	r3, [r7, #32]
 80039b2:	781b      	ldrb	r3, [r3, #0]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	f000 8162 	beq.w	8003c7e <HAL_UART_RxCpltCallback+0x3c6>
									uint8_t nv = Volume;
 80039ba:	4b6e      	ldr	r3, [pc, #440]	; (8003b74 <HAL_UART_RxCpltCallback+0x2bc>)
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
									if (strstr(uk, "up")) {
 80039c2:	496d      	ldr	r1, [pc, #436]	; (8003b78 <HAL_UART_RxCpltCallback+0x2c0>)
 80039c4:	6a38      	ldr	r0, [r7, #32]
 80039c6:	f00a fc04 	bl	800e1d2 <strstr>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d005      	beq.n	80039dc <HAL_UART_RxCpltCallback+0x124>
										nv++;
 80039d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80039d4:	3301      	adds	r3, #1
 80039d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80039da:	e012      	b.n	8003a02 <HAL_UART_RxCpltCallback+0x14a>
									} else if (strstr(uk, "down")) {
 80039dc:	4967      	ldr	r1, [pc, #412]	; (8003b7c <HAL_UART_RxCpltCallback+0x2c4>)
 80039de:	6a38      	ldr	r0, [r7, #32]
 80039e0:	f00a fbf7 	bl	800e1d2 <strstr>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d005      	beq.n	80039f6 <HAL_UART_RxCpltCallback+0x13e>
										nv--;
 80039ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80039ee:	3b01      	subs	r3, #1
 80039f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80039f4:	e005      	b.n	8003a02 <HAL_UART_RxCpltCallback+0x14a>
									} else {
										nv = (uint8_t)atol(uk);
 80039f6:	6a38      	ldr	r0, [r7, #32]
 80039f8:	f009 fe4f 	bl	800d69a <atol>
 80039fc:	4603      	mov	r3, r0
 80039fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
									}
									if ((nv >= 0) && (nv <= 15)) {
 8003a02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a06:	2b0f      	cmp	r3, #15
 8003a08:	f200 8139 	bhi.w	8003c7e <HAL_UART_RxCpltCallback+0x3c6>
										newVolume = nv;
 8003a0c:	4a5c      	ldr	r2, [pc, #368]	; (8003b80 <HAL_UART_RxCpltCallback+0x2c8>)
 8003a0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a12:	7013      	strb	r3, [r2, #0]
										ev = i;
 8003a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a16:	62bb      	str	r3, [r7, #40]	; 0x28
									}
								}
							break;
 8003a18:	e131      	b.n	8003c7e <HAL_UART_RxCpltCallback+0x3c6>
							case cmdBass:
								if (strlen(uk) >= 1) {
 8003a1a:	6a3b      	ldr	r3, [r7, #32]
 8003a1c:	781b      	ldrb	r3, [r3, #0]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	f000 812f 	beq.w	8003c82 <HAL_UART_RxCpltCallback+0x3ca>
									newBassBoost = (uint8_t)atol(uk);
 8003a24:	6a38      	ldr	r0, [r7, #32]
 8003a26:	f009 fe38 	bl	800d69a <atol>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	b2da      	uxtb	r2, r3
 8003a2e:	4b55      	ldr	r3, [pc, #340]	; (8003b84 <HAL_UART_RxCpltCallback+0x2cc>)
 8003a30:	701a      	strb	r2, [r3, #0]
									ev = i;
 8003a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a34:	62bb      	str	r3, [r7, #40]	; 0x28
								}
							break;
 8003a36:	e124      	b.n	8003c82 <HAL_UART_RxCpltCallback+0x3ca>
							case cmdFreq://"freq:95.1"
								if (strlen(uk) >= 2) {
 8003a38:	6a38      	ldr	r0, [r7, #32]
 8003a3a:	f7fc fbc9 	bl	80001d0 <strlen>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	f240 8120 	bls.w	8003c86 <HAL_UART_RxCpltCallback+0x3ce>
									newFreq = (float)atof(uk);
 8003a46:	6a38      	ldr	r0, [r7, #32]
 8003a48:	f009 fe20 	bl	800d68c <atof>
 8003a4c:	ec53 2b10 	vmov	r2, r3, d0
 8003a50:	4610      	mov	r0, r2
 8003a52:	4619      	mov	r1, r3
 8003a54:	f7fd f8c8 	bl	8000be8 <__aeabi_d2f>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	4a4b      	ldr	r2, [pc, #300]	; (8003b88 <HAL_UART_RxCpltCallback+0x2d0>)
 8003a5c:	6013      	str	r3, [r2, #0]
									if (newFreq != Freq) {
 8003a5e:	4b4a      	ldr	r3, [pc, #296]	; (8003b88 <HAL_UART_RxCpltCallback+0x2d0>)
 8003a60:	ed93 7a00 	vldr	s14, [r3]
 8003a64:	4b49      	ldr	r3, [pc, #292]	; (8003b8c <HAL_UART_RxCpltCallback+0x2d4>)
 8003a66:	edd3 7a00 	vldr	s15, [r3]
 8003a6a:	eeb4 7a67 	vcmp.f32	s14, s15
 8003a6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a72:	f000 8108 	beq.w	8003c86 <HAL_UART_RxCpltCallback+0x3ce>
										ev = i;
 8003a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a78:	62bb      	str	r3, [r7, #40]	; 0x28
									}
								}
							break;
 8003a7a:	e104      	b.n	8003c86 <HAL_UART_RxCpltCallback+0x3ce>
							case cmdScan://"scan"
								seek_up = 1;
 8003a7c:	4b44      	ldr	r3, [pc, #272]	; (8003b90 <HAL_UART_RxCpltCallback+0x2d8>)
 8003a7e:	2201      	movs	r2, #1
 8003a80:	701a      	strb	r2, [r3, #0]
								ev = i;
 8003a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a84:	62bb      	str	r3, [r7, #40]	; 0x28
								char *uki = strchr(uk, ':');
 8003a86:	213a      	movs	r1, #58	; 0x3a
 8003a88:	6a38      	ldr	r0, [r7, #32]
 8003a8a:	f00a fb81 	bl	800e190 <strchr>
 8003a8e:	61f8      	str	r0, [r7, #28]
								if (uki) {
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	f000 80f9 	beq.w	8003c8a <HAL_UART_RxCpltCallback+0x3d2>
									if (*(char *)(uki + 1) == '0') seek_up = 0;
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	3301      	adds	r3, #1
 8003a9c:	781b      	ldrb	r3, [r3, #0]
 8003a9e:	2b30      	cmp	r3, #48	; 0x30
 8003aa0:	f040 80f3 	bne.w	8003c8a <HAL_UART_RxCpltCallback+0x3d2>
 8003aa4:	4b3a      	ldr	r3, [pc, #232]	; (8003b90 <HAL_UART_RxCpltCallback+0x2d8>)
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	701a      	strb	r2, [r3, #0]
								}
							break;
 8003aaa:	e0ee      	b.n	8003c8a <HAL_UART_RxCpltCallback+0x3d2>
							case cmdClr://"clr"
							case cmdHelp://"help"
							case cmdVer://"ver"
								ev = i;
 8003aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aae:	62bb      	str	r3, [r7, #40]	; 0x28
							break;
 8003ab0:	e0f4      	b.n	8003c9c <HAL_UART_RxCpltCallback+0x3e4>
							case cmdRestart://"restart" -> restart = 1;
								ev = i;
 8003ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ab4:	62bb      	str	r3, [r7, #40]	; 0x28
							break;
 8003ab6:	e0f1      	b.n	8003c9c <HAL_UART_RxCpltCallback+0x3e4>
							case cmdEpoch://"epoch:1657191323"
								if (strlen(uk) >= 10) {
 8003ab8:	6a38      	ldr	r0, [r7, #32]
 8003aba:	f7fc fb89 	bl	80001d0 <strlen>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	2b09      	cmp	r3, #9
 8003ac2:	f240 80e4 	bls.w	8003c8e <HAL_UART_RxCpltCallback+0x3d6>
									char *uki = strchr(uk, ':');
 8003ac6:	213a      	movs	r1, #58	; 0x3a
 8003ac8:	6a38      	ldr	r0, [r7, #32]
 8003aca:	f00a fb61 	bl	800e190 <strchr>
 8003ace:	60b8      	str	r0, [r7, #8]
									if (uki) {
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d00c      	beq.n	8003af0 <HAL_UART_RxCpltCallback+0x238>
										tZone = (uint8_t)atol(uki + 1);
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	3301      	adds	r3, #1
 8003ada:	4618      	mov	r0, r3
 8003adc:	f009 fddd 	bl	800d69a <atol>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	b2da      	uxtb	r2, r3
 8003ae4:	4b2b      	ldr	r3, [pc, #172]	; (8003b94 <HAL_UART_RxCpltCallback+0x2dc>)
 8003ae6:	701a      	strb	r2, [r3, #0]
										*uki = '\0';
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	2200      	movs	r2, #0
 8003aec:	701a      	strb	r2, [r3, #0]
 8003aee:	e002      	b.n	8003af6 <HAL_UART_RxCpltCallback+0x23e>
									} else {
										tZone = 0;
 8003af0:	4b28      	ldr	r3, [pc, #160]	; (8003b94 <HAL_UART_RxCpltCallback+0x2dc>)
 8003af2:	2200      	movs	r2, #0
 8003af4:	701a      	strb	r2, [r3, #0]
									}
									epoch = (uint32_t)atol(uk);
 8003af6:	6a38      	ldr	r0, [r7, #32]
 8003af8:	f009 fdcf 	bl	800d69a <atol>
 8003afc:	4603      	mov	r3, r0
 8003afe:	461a      	mov	r2, r3
 8003b00:	4b25      	ldr	r3, [pc, #148]	; (8003b98 <HAL_UART_RxCpltCallback+0x2e0>)
 8003b02:	601a      	str	r2, [r3, #0]
									ev = i;
 8003b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b06:	62bb      	str	r3, [r7, #40]	; 0x28
								}
							break;
 8003b08:	e0c1      	b.n	8003c8e <HAL_UART_RxCpltCallback+0x3d6>
							case cmdsRead:// read:0
							case cmdsErase:// erase:0
								if (i == cmdsRead) cmd_sector = cmdsRead;
 8003b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b0c:	2b04      	cmp	r3, #4
 8003b0e:	d103      	bne.n	8003b18 <HAL_UART_RxCpltCallback+0x260>
 8003b10:	4b22      	ldr	r3, [pc, #136]	; (8003b9c <HAL_UART_RxCpltCallback+0x2e4>)
 8003b12:	2204      	movs	r2, #4
 8003b14:	601a      	str	r2, [r3, #0]
 8003b16:	e002      	b.n	8003b1e <HAL_UART_RxCpltCallback+0x266>
											  else cmd_sector = cmdsErase;
 8003b18:	4b20      	ldr	r3, [pc, #128]	; (8003b9c <HAL_UART_RxCpltCallback+0x2e4>)
 8003b1a:	2205      	movs	r2, #5
 8003b1c:	601a      	str	r2, [r3, #0]
								if (*uk == ':') {
 8003b1e:	6a3b      	ldr	r3, [r7, #32]
 8003b20:	781b      	ldrb	r3, [r3, #0]
 8003b22:	2b3a      	cmp	r3, #58	; 0x3a
 8003b24:	f040 80b5 	bne.w	8003c92 <HAL_UART_RxCpltCallback+0x3da>
									int sek = atoi(++uk);
 8003b28:	6a3b      	ldr	r3, [r7, #32]
 8003b2a:	3301      	adds	r3, #1
 8003b2c:	623b      	str	r3, [r7, #32]
 8003b2e:	6a38      	ldr	r0, [r7, #32]
 8003b30:	f009 fdaf 	bl	800d692 <atoi>
 8003b34:	60f8      	str	r0, [r7, #12]
									if ((sek >= 0) && (sek < W25qxx_getSectorCount())) {
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	f2c0 80aa 	blt.w	8003c92 <HAL_UART_RxCpltCallback+0x3da>
 8003b3e:	f001 fbbb 	bl	80052b8 <W25qxx_getSectorCount>
 8003b42:	4602      	mov	r2, r0
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	429a      	cmp	r2, r3
 8003b48:	f240 80a3 	bls.w	8003c92 <HAL_UART_RxCpltCallback+0x3da>
										adr_sector = sek;
 8003b4c:	4a14      	ldr	r2, [pc, #80]	; (8003ba0 <HAL_UART_RxCpltCallback+0x2e8>)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	6013      	str	r3, [r2, #0]
										offset_sector = 0;
 8003b52:	4b14      	ldr	r3, [pc, #80]	; (8003ba4 <HAL_UART_RxCpltCallback+0x2ec>)
 8003b54:	2200      	movs	r2, #0
 8003b56:	601a      	str	r2, [r3, #0]
										ev = i;//flag_sector = true;
 8003b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b5a:	62bb      	str	r3, [r7, #40]	; 0x28
									}
								}
							break;
 8003b5c:	e099      	b.n	8003c92 <HAL_UART_RxCpltCallback+0x3da>
 8003b5e:	bf00      	nop
 8003b60:	40004400 	.word	0x40004400
 8003b64:	2000143a 	.word	0x2000143a
 8003b68:	20001438 	.word	0x20001438
 8003b6c:	2000143c 	.word	0x2000143c
 8003b70:	2000001c 	.word	0x2000001c
 8003b74:	200001b1 	.word	0x200001b1
 8003b78:	08012234 	.word	0x08012234
 8003b7c:	08012238 	.word	0x08012238
 8003b80:	200001b2 	.word	0x200001b2
 8003b84:	20002c6f 	.word	0x20002c6f
 8003b88:	200001ac 	.word	0x200001ac
 8003b8c:	200001a8 	.word	0x200001a8
 8003b90:	200001b0 	.word	0x200001b0
 8003b94:	2000183e 	.word	0x2000183e
 8003b98:	20000018 	.word	0x20000018
 8003b9c:	2000019c 	.word	0x2000019c
 8003ba0:	20001848 	.word	0x20001848
 8003ba4:	2000184c 	.word	0x2000184c
							case cmdsWrite:// write:0:a5 | write:0:a5:256
								if (*uk == ':') {
 8003ba8:	6a3b      	ldr	r3, [r7, #32]
 8003baa:	781b      	ldrb	r3, [r3, #0]
 8003bac:	2b3a      	cmp	r3, #58	; 0x3a
 8003bae:	d172      	bne.n	8003c96 <HAL_UART_RxCpltCallback+0x3de>
									uk++;
 8003bb0:	6a3b      	ldr	r3, [r7, #32]
 8003bb2:	3301      	adds	r3, #1
 8003bb4:	623b      	str	r3, [r7, #32]
									int sek = atoi(uk);
 8003bb6:	6a38      	ldr	r0, [r7, #32]
 8003bb8:	f009 fd6b 	bl	800d692 <atoi>
 8003bbc:	61b8      	str	r0, [r7, #24]
									if ((sek >= 0) && (sek < W25qxx_getSectorCount())) {
 8003bbe:	69bb      	ldr	r3, [r7, #24]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	db68      	blt.n	8003c96 <HAL_UART_RxCpltCallback+0x3de>
 8003bc4:	f001 fb78 	bl	80052b8 <W25qxx_getSectorCount>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	69bb      	ldr	r3, [r7, #24]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d962      	bls.n	8003c96 <HAL_UART_RxCpltCallback+0x3de>
										char *ukn = strchr(uk, ':');
 8003bd0:	213a      	movs	r1, #58	; 0x3a
 8003bd2:	6a38      	ldr	r0, [r7, #32]
 8003bd4:	f00a fadc 	bl	800e190 <strchr>
 8003bd8:	6178      	str	r0, [r7, #20]
										if (ukn) {
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d05a      	beq.n	8003c96 <HAL_UART_RxCpltCallback+0x3de>
											len_write = -1;
 8003be0:	4b44      	ldr	r3, [pc, #272]	; (8003cf4 <HAL_UART_RxCpltCallback+0x43c>)
 8003be2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003be6:	601a      	str	r2, [r3, #0]
											ukn++;
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	3301      	adds	r3, #1
 8003bec:	617b      	str	r3, [r7, #20]
											byte_write = hexToBin(ukn);
 8003bee:	6978      	ldr	r0, [r7, #20]
 8003bf0:	f7ff fb02 	bl	80031f8 <hexToBin>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	4b3f      	ldr	r3, [pc, #252]	; (8003cf8 <HAL_UART_RxCpltCallback+0x440>)
 8003bfa:	701a      	strb	r2, [r3, #0]
											uk = strchr(ukn, ':');
 8003bfc:	213a      	movs	r1, #58	; 0x3a
 8003bfe:	6978      	ldr	r0, [r7, #20]
 8003c00:	f00a fac6 	bl	800e190 <strchr>
 8003c04:	6238      	str	r0, [r7, #32]
											if (uk) {
 8003c06:	6a3b      	ldr	r3, [r7, #32]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d012      	beq.n	8003c32 <HAL_UART_RxCpltCallback+0x37a>
												int l = atoi(++uk);
 8003c0c:	6a3b      	ldr	r3, [r7, #32]
 8003c0e:	3301      	adds	r3, #1
 8003c10:	623b      	str	r3, [r7, #32]
 8003c12:	6a38      	ldr	r0, [r7, #32]
 8003c14:	f009 fd3d 	bl	800d692 <atoi>
 8003c18:	6138      	str	r0, [r7, #16]
												if ((l > 0) && (l < W25qxx_getSectorSize())) len_write = l;
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	dd08      	ble.n	8003c32 <HAL_UART_RxCpltCallback+0x37a>
 8003c20:	f001 fb56 	bl	80052d0 <W25qxx_getSectorSize>
 8003c24:	4602      	mov	r2, r0
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d902      	bls.n	8003c32 <HAL_UART_RxCpltCallback+0x37a>
 8003c2c:	4a31      	ldr	r2, [pc, #196]	; (8003cf4 <HAL_UART_RxCpltCallback+0x43c>)
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	6013      	str	r3, [r2, #0]
											}
											adr_sector = sek;
 8003c32:	4a32      	ldr	r2, [pc, #200]	; (8003cfc <HAL_UART_RxCpltCallback+0x444>)
 8003c34:	69bb      	ldr	r3, [r7, #24]
 8003c36:	6013      	str	r3, [r2, #0]
											offset_sector = 0;
 8003c38:	4b31      	ldr	r3, [pc, #196]	; (8003d00 <HAL_UART_RxCpltCallback+0x448>)
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	601a      	str	r2, [r3, #0]
											ev = i;//flag_sector = true;
 8003c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c40:	62bb      	str	r3, [r7, #40]	; 0x28
										}
									}
								}
							break;
 8003c42:	e028      	b.n	8003c96 <HAL_UART_RxCpltCallback+0x3de>
							case cmdsNext:// next
								if ((last_cmd_sector == cmdsRead) || (last_cmd_sector == cmdsNext)) {
 8003c44:	4b2f      	ldr	r3, [pc, #188]	; (8003d04 <HAL_UART_RxCpltCallback+0x44c>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	2b04      	cmp	r3, #4
 8003c4a:	d003      	beq.n	8003c54 <HAL_UART_RxCpltCallback+0x39c>
 8003c4c:	4b2d      	ldr	r3, [pc, #180]	; (8003d04 <HAL_UART_RxCpltCallback+0x44c>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	2b06      	cmp	r3, #6
 8003c52:	d122      	bne.n	8003c9a <HAL_UART_RxCpltCallback+0x3e2>
									if ((offset_sector + list_sector) < W25qxx_getSectorSize()) {
 8003c54:	4b2a      	ldr	r3, [pc, #168]	; (8003d00 <HAL_UART_RxCpltCallback+0x448>)
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	4b2b      	ldr	r3, [pc, #172]	; (8003d08 <HAL_UART_RxCpltCallback+0x450>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4413      	add	r3, r2
 8003c5e:	461c      	mov	r4, r3
 8003c60:	f001 fb36 	bl	80052d0 <W25qxx_getSectorSize>
 8003c64:	4603      	mov	r3, r0
 8003c66:	429c      	cmp	r4, r3
 8003c68:	d217      	bcs.n	8003c9a <HAL_UART_RxCpltCallback+0x3e2>
										offset_sector += list_sector;
 8003c6a:	4b25      	ldr	r3, [pc, #148]	; (8003d00 <HAL_UART_RxCpltCallback+0x448>)
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	4b26      	ldr	r3, [pc, #152]	; (8003d08 <HAL_UART_RxCpltCallback+0x450>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4413      	add	r3, r2
 8003c74:	4a22      	ldr	r2, [pc, #136]	; (8003d00 <HAL_UART_RxCpltCallback+0x448>)
 8003c76:	6013      	str	r3, [r2, #0]
										ev = i;//flag_sector = true;
 8003c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c7a:	62bb      	str	r3, [r7, #40]	; 0x28
									}
								}
							break;
 8003c7c:	e00d      	b.n	8003c9a <HAL_UART_RxCpltCallback+0x3e2>
							break;
 8003c7e:	bf00      	nop
 8003c80:	e015      	b.n	8003cae <HAL_UART_RxCpltCallback+0x3f6>
							break;
 8003c82:	bf00      	nop
 8003c84:	e013      	b.n	8003cae <HAL_UART_RxCpltCallback+0x3f6>
							break;
 8003c86:	bf00      	nop
 8003c88:	e011      	b.n	8003cae <HAL_UART_RxCpltCallback+0x3f6>
							break;
 8003c8a:	bf00      	nop
 8003c8c:	e00f      	b.n	8003cae <HAL_UART_RxCpltCallback+0x3f6>
							break;
 8003c8e:	bf00      	nop
 8003c90:	e00d      	b.n	8003cae <HAL_UART_RxCpltCallback+0x3f6>
							break;
 8003c92:	bf00      	nop
 8003c94:	e00b      	b.n	8003cae <HAL_UART_RxCpltCallback+0x3f6>
							break;
 8003c96:	bf00      	nop
 8003c98:	e009      	b.n	8003cae <HAL_UART_RxCpltCallback+0x3f6>
							break;
 8003c9a:	bf00      	nop
						}
						break;
 8003c9c:	e007      	b.n	8003cae <HAL_UART_RxCpltCallback+0x3f6>
				for (i = 0; i < MAX_CMDS; i++) {
 8003c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ca0:	3301      	adds	r3, #1
 8003ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ca6:	2b0e      	cmp	r3, #14
 8003ca8:	f77f ae39 	ble.w	800391e <HAL_UART_RxCpltCallback+0x66>
 8003cac:	e000      	b.n	8003cb0 <HAL_UART_RxCpltCallback+0x3f8>
						break;
 8003cae:	bf00      	nop
					}
				}
				//
				if (ev == -1) ev = cmdErr;
 8003cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003cb6:	d101      	bne.n	8003cbc <HAL_UART_RxCpltCallback+0x404>
 8003cb8:	2303      	movs	r3, #3
 8003cba:	62bb      	str	r3, [r7, #40]	; 0x28
				putEvt(ev);
 8003cbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003cbe:	f7ff fb15 	bl	80032ec <putEvt>
				//
			}

			rxInd = 0;
 8003cc2:	4b12      	ldr	r3, [pc, #72]	; (8003d0c <HAL_UART_RxCpltCallback+0x454>)
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	801a      	strh	r2, [r3, #0]
			*rxBuf = '\0';
 8003cc8:	4b11      	ldr	r3, [pc, #68]	; (8003d10 <HAL_UART_RxCpltCallback+0x458>)
 8003cca:	2200      	movs	r2, #0
 8003ccc:	701a      	strb	r2, [r3, #0]
		}

		if (HAL_UART_Receive_IT(huart, &rxByte, 1) != HAL_OK) devError |= devUART;
 8003cce:	2201      	movs	r2, #1
 8003cd0:	4910      	ldr	r1, [pc, #64]	; (8003d14 <HAL_UART_RxCpltCallback+0x45c>)
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f008 f8fe 	bl	800bed4 <HAL_UART_Receive_IT>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d006      	beq.n	8003cec <HAL_UART_RxCpltCallback+0x434>
 8003cde:	4b0e      	ldr	r3, [pc, #56]	; (8003d18 <HAL_UART_RxCpltCallback+0x460>)
 8003ce0:	881b      	ldrh	r3, [r3, #0]
 8003ce2:	f043 0302 	orr.w	r3, r3, #2
 8003ce6:	b29a      	uxth	r2, r3
 8003ce8:	4b0b      	ldr	r3, [pc, #44]	; (8003d18 <HAL_UART_RxCpltCallback+0x460>)
 8003cea:	801a      	strh	r2, [r3, #0]
	}
}
 8003cec:	bf00      	nop
 8003cee:	3734      	adds	r7, #52	; 0x34
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd90      	pop	{r4, r7, pc}
 8003cf4:	20001854 	.word	0x20001854
 8003cf8:	200001a4 	.word	0x200001a4
 8003cfc:	20001848 	.word	0x20001848
 8003d00:	2000184c 	.word	0x2000184c
 8003d04:	200001a0 	.word	0x200001a0
 8003d08:	20001850 	.word	0x20001850
 8003d0c:	2000143a 	.word	0x2000143a
 8003d10:	2000143c 	.word	0x2000143c
 8003d14:	20001438 	.word	0x20001438
 8003d18:	20001424 	.word	0x20001424

08003d1c <HAL_UART_ErrorCallback>:
//-------------------------------------------------------------------------------------------
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a07      	ldr	r2, [pc, #28]	; (8003d48 <HAL_UART_ErrorCallback+0x2c>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d106      	bne.n	8003d3c <HAL_UART_ErrorCallback+0x20>
		devError |= devUART;
 8003d2e:	4b07      	ldr	r3, [pc, #28]	; (8003d4c <HAL_UART_ErrorCallback+0x30>)
 8003d30:	881b      	ldrh	r3, [r3, #0]
 8003d32:	f043 0302 	orr.w	r3, r3, #2
 8003d36:	b29a      	uxth	r2, r3
 8003d38:	4b04      	ldr	r3, [pc, #16]	; (8003d4c <HAL_UART_ErrorCallback+0x30>)
 8003d3a:	801a      	strh	r2, [r3, #0]
	}
}
 8003d3c:	bf00      	nop
 8003d3e:	370c      	adds	r7, #12
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr
 8003d48:	40004400 	.word	0x40004400
 8003d4c:	20001424 	.word	0x20001424

08003d50 <spiDone>:
//-------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------
//    Функция устанавливает в начальное состояние 'готов' служебные параметры порта SPI1:
//
void spiDone(SPI_HandleTypeDef *hspi)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b082      	sub	sp, #8
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
#ifdef SET_W25FLASH
	if (hspi->Instance == SPI2) {
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a0a      	ldr	r2, [pc, #40]	; (8003d88 <spiDone+0x38>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d105      	bne.n	8003d6e <spiDone+0x1e>
		W25_UNSELECT();
 8003d62:	f001 f8ef 	bl	8004f44 <W25_UNSELECT>
		spiRdy = 1;
 8003d66:	4b09      	ldr	r3, [pc, #36]	; (8003d8c <spiDone+0x3c>)
 8003d68:	2201      	movs	r2, #1
 8003d6a:	701a      	strb	r2, [r3, #0]
	else
	if (hspi->Instance == SPI1) {
		lcdRdy = 1;
	}
#endif
}
 8003d6c:	e007      	b.n	8003d7e <spiDone+0x2e>
	if (hspi->Instance == SPI1) {
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a07      	ldr	r2, [pc, #28]	; (8003d90 <spiDone+0x40>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d102      	bne.n	8003d7e <spiDone+0x2e>
		lcdRdy = 1;
 8003d78:	4b06      	ldr	r3, [pc, #24]	; (8003d94 <spiDone+0x44>)
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	701a      	strb	r2, [r3, #0]
}
 8003d7e:	bf00      	nop
 8003d80:	3708      	adds	r7, #8
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	40003800 	.word	0x40003800
 8003d8c:	20000198 	.word	0x20000198
 8003d90:	40013000 	.word	0x40013000
 8003d94:	20000001 	.word	0x20000001

08003d98 <HAL_SPI_RxCpltCallback>:
//-------------------------------------------------------------------------------------------
//    CallBack функция, вызывается по завершении приема данных от порта SPI
//
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b082      	sub	sp, #8
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
	spiDone(hspi);
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f7ff ffd5 	bl	8003d50 <spiDone>
}
 8003da6:	bf00      	nop
 8003da8:	3708      	adds	r7, #8
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}

08003dae <HAL_SPI_TxCpltCallback>:
//-------------------------------------------------------------------------------------------
//    CallBack функция, вызывается по завершении передачи данных в порт SPI
//
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003dae:	b580      	push	{r7, lr}
 8003db0:	b082      	sub	sp, #8
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	6078      	str	r0, [r7, #4]
	spiDone(hspi);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f7ff ffca 	bl	8003d50 <spiDone>
}
 8003dbc:	bf00      	nop
 8003dbe:	3708      	adds	r7, #8
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}

08003dc4 <HAL_SPI_TxRxCpltCallback>:
//-------------------------------------------------------------------------------------------
//    CallBack функция, вызывается по завершении приема/передачи данных порта SPI
//
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b082      	sub	sp, #8
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
	spiDone(hspi);
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f7ff ffbf 	bl	8003d50 <spiDone>
}
 8003dd2:	bf00      	nop
 8003dd4:	3708      	adds	r7, #8
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
	...

08003ddc <HAL_SPI_ErrorCallback>:
//--------------------------------------------------------------------------------------------
//    CallBack функция, вызывается при возникновении ошибки у модуля SPI
//
void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b082      	sub	sp, #8
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
	spiDone(hspi);
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f7ff ffb3 	bl	8003d50 <spiDone>
	devError |= devSPI;
 8003dea:	4b05      	ldr	r3, [pc, #20]	; (8003e00 <HAL_SPI_ErrorCallback+0x24>)
 8003dec:	881b      	ldrh	r3, [r3, #0]
 8003dee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003df2:	b29a      	uxth	r2, r3
 8003df4:	4b02      	ldr	r3, [pc, #8]	; (8003e00 <HAL_SPI_ErrorCallback+0x24>)
 8003df6:	801a      	strh	r2, [r3, #0]
}
 8003df8:	bf00      	nop
 8003dfa:	3708      	adds	r7, #8
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	20001424 	.word	0x20001424

08003e04 <HAL_I2C_ErrorCallback>:
	}
#endif
}
//--------------------------------------------------------------------------------------------
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
#if defined(SET_RDA_CHIP) || defined(SET_NEW_RDA)
	if (hi2c->Instance == I2C1) {
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a07      	ldr	r2, [pc, #28]	; (8003e30 <HAL_I2C_ErrorCallback+0x2c>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d106      	bne.n	8003e24 <HAL_I2C_ErrorCallback+0x20>
		devError |= devRDA;
 8003e16:	4b07      	ldr	r3, [pc, #28]	; (8003e34 <HAL_I2C_ErrorCallback+0x30>)
 8003e18:	881b      	ldrh	r3, [r3, #0]
 8003e1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e1e:	b29a      	uxth	r2, r3
 8003e20:	4b04      	ldr	r3, [pc, #16]	; (8003e34 <HAL_I2C_ErrorCallback+0x30>)
 8003e22:	801a      	strh	r2, [r3, #0]
	}
#endif
}
 8003e24:	bf00      	nop
 8003e26:	370c      	adds	r7, #12
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr
 8003e30:	40005400 	.word	0x40005400
 8003e34:	20001424 	.word	0x20001424

08003e38 <HAL_GPIO_EXTI_Callback>:
//--------------------------------------------------------------------------------------------
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b082      	sub	sp, #8
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	4603      	mov	r3, r0
 8003e40:	80fb      	strh	r3, [r7, #6]
	if ((GPIO_Pin != KEY0_Pin) && (GPIO_Pin != KEY1_Pin)) return;
 8003e42:	88fb      	ldrh	r3, [r7, #6]
 8003e44:	2b02      	cmp	r3, #2
 8003e46:	d002      	beq.n	8003e4e <HAL_GPIO_EXTI_Callback+0x16>
 8003e48:	88fb      	ldrh	r3, [r7, #6]
 8003e4a:	2b04      	cmp	r3, #4
 8003e4c:	d110      	bne.n	8003e70 <HAL_GPIO_EXTI_Callback+0x38>

	if (GPIO_Pin == KEY0_Pin) seek_up = 1;
 8003e4e:	88fb      	ldrh	r3, [r7, #6]
 8003e50:	2b02      	cmp	r3, #2
 8003e52:	d103      	bne.n	8003e5c <HAL_GPIO_EXTI_Callback+0x24>
 8003e54:	4b08      	ldr	r3, [pc, #32]	; (8003e78 <HAL_GPIO_EXTI_Callback+0x40>)
 8003e56:	2201      	movs	r2, #1
 8003e58:	701a      	strb	r2, [r3, #0]
 8003e5a:	e005      	b.n	8003e68 <HAL_GPIO_EXTI_Callback+0x30>
	else
	if (GPIO_Pin == KEY1_Pin) seek_up = 0;
 8003e5c:	88fb      	ldrh	r3, [r7, #6]
 8003e5e:	2b04      	cmp	r3, #4
 8003e60:	d102      	bne.n	8003e68 <HAL_GPIO_EXTI_Callback+0x30>
 8003e62:	4b05      	ldr	r3, [pc, #20]	; (8003e78 <HAL_GPIO_EXTI_Callback+0x40>)
 8003e64:	2200      	movs	r2, #0
 8003e66:	701a      	strb	r2, [r3, #0]

	putEvt(cmdScan);
 8003e68:	200b      	movs	r0, #11
 8003e6a:	f7ff fa3f 	bl	80032ec <putEvt>
 8003e6e:	e000      	b.n	8003e72 <HAL_GPIO_EXTI_Callback+0x3a>
	if ((GPIO_Pin != KEY0_Pin) && (GPIO_Pin != KEY1_Pin)) return;
 8003e70:	bf00      	nop
}
 8003e72:	3708      	adds	r7, #8
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}
 8003e78:	200001b0 	.word	0x200001b0

08003e7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003e80:	b672      	cpsid	i
}
 8003e82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  devError |= devSYS;
 8003e84:	4b05      	ldr	r3, [pc, #20]	; (8003e9c <Error_Handler+0x20>)
 8003e86:	881b      	ldrh	r3, [r3, #0]
 8003e88:	f043 0320 	orr.w	r3, r3, #32
 8003e8c:	b29a      	uxth	r2, r3
 8003e8e:	4b03      	ldr	r3, [pc, #12]	; (8003e9c <Error_Handler+0x20>)
 8003e90:	801a      	strh	r2, [r3, #0]
	  errLedOn(true);
 8003e92:	2001      	movs	r0, #1
 8003e94:	f7ff fb26 	bl	80034e4 <errLedOn>
	  devError |= devSYS;
 8003e98:	e7f4      	b.n	8003e84 <Error_Handler+0x8>
 8003e9a:	bf00      	nop
 8003e9c:	20001424 	.word	0x20001424

08003ea0 <rda5807_init>:

//==============================================================================
// Инициализация rda5807
//==============================================================================
uint8_t rda5807_init(float *freq)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b088      	sub	sp, #32
 8003ea4:	af04      	add	r7, sp, #16
 8003ea6:	6078      	str	r0, [r7, #4]
uint8_t buf[2] = {0, 0};
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	813b      	strh	r3, [r7, #8]
uint8_t *id = &buf[0];
 8003eac:	f107 0308 	add.w	r3, r7, #8
 8003eb0:	60fb      	str	r3, [r7, #12]

    if (HAL_I2C_Mem_Read(i2cRDA, RDA5807_RandAccess_Addr, 0, I2C_MEMADD_SIZE_8BIT, buf, 2, RDA5807_TO) != HAL_OK) {
 8003eb2:	4b30      	ldr	r3, [pc, #192]	; (8003f74 <rda5807_init+0xd4>)
 8003eb4:	6818      	ldr	r0, [r3, #0]
 8003eb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003eba:	9302      	str	r3, [sp, #8]
 8003ebc:	2302      	movs	r3, #2
 8003ebe:	9301      	str	r3, [sp, #4]
 8003ec0:	f107 0308 	add.w	r3, r7, #8
 8003ec4:	9300      	str	r3, [sp, #0]
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	2200      	movs	r2, #0
 8003eca:	2122      	movs	r1, #34	; 0x22
 8003ecc:	f002 feac 	bl	8006c28 <HAL_I2C_Mem_Read>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d13c      	bne.n	8003f50 <rda5807_init+0xb0>
    stx[0] = '\0';
    for (int i = 0; i < 64; i++) sprintf(stx+strlen(stx)," %02x", buf11[i]);
    Report(1, "[%s] %s\r\n", __func__, stx);
#endif

    rda5807_SoftReset();
 8003ed6:	f000 f927 	bl	8004128 <rda5807_SoftReset>
    if (devError & devRDA) goto err_out;
 8003eda:	4b27      	ldr	r3, [pc, #156]	; (8003f78 <rda5807_init+0xd8>)
 8003edc:	881b      	ldrh	r3, [r3, #0]
 8003ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d136      	bne.n	8003f54 <rda5807_init+0xb4>

    rda5807_SetupDefault();
 8003ee6:	f000 f949 	bl	800417c <rda5807_SetupDefault>
    if (devError & devRDA) goto err_out;
 8003eea:	4b23      	ldr	r3, [pc, #140]	; (8003f78 <rda5807_init+0xd8>)
 8003eec:	881b      	ldrh	r3, [r3, #0]
 8003eee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d130      	bne.n	8003f58 <rda5807_init+0xb8>

    uint16_t fr = (uint16_t)(*freq * 10);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	edd3 7a00 	vldr	s15, [r3]
 8003efc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003f00:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f08:	ee17 3a90 	vmov	r3, s15
 8003f0c:	817b      	strh	r3, [r7, #10]
    rda5807_SetFreq_In100Khz(fr);
 8003f0e:	897b      	ldrh	r3, [r7, #10]
 8003f10:	4618      	mov	r0, r3
 8003f12:	f000 fa73 	bl	80043fc <rda5807_SetFreq_In100Khz>
    //
    HAL_Delay(200);
 8003f16:	20c8      	movs	r0, #200	; 0xc8
 8003f18:	f001 fdf6 	bl	8005b08 <HAL_Delay>
    //
    *freq = (float)rda5807_GetFreq_In100Khz();
 8003f1c:	f000 fae8 	bl	80044f0 <rda5807_GetFreq_In100Khz>
 8003f20:	4603      	mov	r3, r0
 8003f22:	ee07 3a90 	vmov	s15, r3
 8003f26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	edc3 7a00 	vstr	s15, [r3]
    *freq /= 10;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	ed93 7a00 	vldr	s14, [r3]
 8003f36:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003f3a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	edc3 7a00 	vstr	s15, [r3]
#ifdef SET_RDA_DEBUG
    Report(1, "[%s] Freq: %.2f\r\n", __func__, *freq);//rda5807_GetFreq_In100Khz());
#endif

    HAL_Delay(100);
 8003f44:	2064      	movs	r0, #100	; 0x64
 8003f46:	f001 fddf 	bl	8005b08 <HAL_Delay>

    return *id;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	781b      	ldrb	r3, [r3, #0]
 8003f4e:	e00d      	b.n	8003f6c <rda5807_init+0xcc>
    	goto err_out;
 8003f50:	bf00      	nop
 8003f52:	e002      	b.n	8003f5a <rda5807_init+0xba>
    if (devError & devRDA) goto err_out;
 8003f54:	bf00      	nop
 8003f56:	e000      	b.n	8003f5a <rda5807_init+0xba>
    if (devError & devRDA) goto err_out;
 8003f58:	bf00      	nop

err_out:
	devError |= devRDA;
 8003f5a:	4b07      	ldr	r3, [pc, #28]	; (8003f78 <rda5807_init+0xd8>)
 8003f5c:	881b      	ldrh	r3, [r3, #0]
 8003f5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f62:	b29a      	uxth	r2, r3
 8003f64:	4b04      	ldr	r3, [pc, #16]	; (8003f78 <rda5807_init+0xd8>)
 8003f66:	801a      	strh	r2, [r3, #0]
    return *id;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	781b      	ldrb	r3, [r3, #0]
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3710      	adds	r7, #16
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}
 8003f74:	200001b4 	.word	0x200001b4
 8003f78:	20001424 	.word	0x20001424

08003f7c <rda5807_rssi>:
//==============================================================================
uint16_t rda5807_rssi()
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b082      	sub	sp, #8
 8003f80:	af00      	add	r7, sp, #0
uint16_t word = 0;
 8003f82:	2300      	movs	r3, #0
 8003f84:	80fb      	strh	r3, [r7, #6]

    rda5807_read(0x0B, &word, 1);
 8003f86:	1dbb      	adds	r3, r7, #6
 8003f88:	2201      	movs	r2, #1
 8003f8a:	4619      	mov	r1, r3
 8003f8c:	200b      	movs	r0, #11
 8003f8e:	f000 f85d 	bl	800404c <rda5807_read>

    return (word >> 9);
 8003f92:	88fb      	ldrh	r3, [r7, #6]
 8003f94:	0a5b      	lsrs	r3, r3, #9
 8003f96:	b29b      	uxth	r3, r3
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3708      	adds	r7, #8
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}

08003fa0 <rda5807_bytes_change>:

//==============================================================================
// Процедура меняет местами байты попарно в буфере pBuff 
//==============================================================================
void rda5807_bytes_change(uint8_t *pBuff, uint8_t count)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b085      	sub	sp, #20
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	460b      	mov	r3, r1
 8003faa:	70fb      	strb	r3, [r7, #3]
    while (count > 1) {    // Если осталась хотя бы пара байт
 8003fac:	e010      	b.n	8003fd0 <rda5807_bytes_change+0x30>
        uint8_t Temp = *(pBuff + 1);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	785b      	ldrb	r3, [r3, #1]
 8003fb2:	73fb      	strb	r3, [r7, #15]
        *(pBuff + 1) = *pBuff;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	3301      	adds	r3, #1
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	7812      	ldrb	r2, [r2, #0]
 8003fbc:	701a      	strb	r2, [r3, #0]
        *pBuff = Temp;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	7bfa      	ldrb	r2, [r7, #15]
 8003fc2:	701a      	strb	r2, [r3, #0]
        pBuff += 2;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	3302      	adds	r3, #2
 8003fc8:	607b      	str	r3, [r7, #4]
        count -= 2;
 8003fca:	78fb      	ldrb	r3, [r7, #3]
 8003fcc:	3b02      	subs	r3, #2
 8003fce:	70fb      	strb	r3, [r7, #3]
    while (count > 1) {    // Если осталась хотя бы пара байт
 8003fd0:	78fb      	ldrb	r3, [r7, #3]
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d8eb      	bhi.n	8003fae <rda5807_bytes_change+0xe>
    }
}
 8003fd6:	bf00      	nop
 8003fd8:	bf00      	nop
 8003fda:	3714      	adds	r7, #20
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr

08003fe4 <rda5807_write_regfile>:
//==============================================================================
// Процедура пишет в rda5807 группу регистров (кол-во RegNum) начиная с 0x02
// Используется I2C-адрес RDA5807_SeqAccess_Addr
//==============================================================================
void rda5807_write_regfile(uint16_t *pBuff, uint8_t RegNum)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b084      	sub	sp, #16
 8003fe8:	af02      	add	r7, sp, #8
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	460b      	mov	r3, r1
 8003fee:	70fb      	strb	r3, [r7, #3]
    err = i2cm_Start(I2Cx, RDA5807_SeqAccess_Addr, 0, RDA5807_TO);
    if (err) {
        Error_Handler();
    } //*/

    rda5807_bytes_change((uint8_t *)pBuff, RegNum << 1);
 8003ff0:	78fb      	ldrb	r3, [r7, #3]
 8003ff2:	005b      	lsls	r3, r3, #1
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	4619      	mov	r1, r3
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f7ff ffd1 	bl	8003fa0 <rda5807_bytes_change>

//    err = i2cm_WriteBuff(I2Cx, (uint8_t *) pBuff, RegNum << 1, RDA5807_TO);
//    i2cm_Stop(I2Cx, RDA5807_TO);

    if (HAL_I2C_Master_Transmit(i2cRDA, (uint16_t)RDA5807_SeqAccess_Addr, (uint8_t *)pBuff, RegNum << 1, RDA5807_TO) != HAL_OK) {
 8003ffe:	4b11      	ldr	r3, [pc, #68]	; (8004044 <rda5807_write_regfile+0x60>)
 8004000:	6818      	ldr	r0, [r3, #0]
 8004002:	78fb      	ldrb	r3, [r7, #3]
 8004004:	b29b      	uxth	r3, r3
 8004006:	005b      	lsls	r3, r3, #1
 8004008:	b29b      	uxth	r3, r3
 800400a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800400e:	9200      	str	r2, [sp, #0]
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	2120      	movs	r1, #32
 8004014:	f002 fc00 	bl	8006818 <HAL_I2C_Master_Transmit>
 8004018:	4603      	mov	r3, r0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d006      	beq.n	800402c <rda5807_write_regfile+0x48>
    	devError |= devRDA;
 800401e:	4b0a      	ldr	r3, [pc, #40]	; (8004048 <rda5807_write_regfile+0x64>)
 8004020:	881b      	ldrh	r3, [r3, #0]
 8004022:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004026:	b29a      	uxth	r2, r3
 8004028:	4b07      	ldr	r3, [pc, #28]	; (8004048 <rda5807_write_regfile+0x64>)
 800402a:	801a      	strh	r2, [r3, #0]
    }

    rda5807_bytes_change((uint8_t *)pBuff, RegNum << 1);
 800402c:	78fb      	ldrb	r3, [r7, #3]
 800402e:	005b      	lsls	r3, r3, #1
 8004030:	b2db      	uxtb	r3, r3
 8004032:	4619      	mov	r1, r3
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f7ff ffb3 	bl	8003fa0 <rda5807_bytes_change>
}
 800403a:	bf00      	nop
 800403c:	3708      	adds	r7, #8
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	200001b4 	.word	0x200001b4
 8004048:	20001424 	.word	0x20001424

0800404c <rda5807_read>:
//==============================================================================
// Процедура читает из rda5807 группу регистров (кол-во RegNum) начиная с RegAddr
// Используется I2C-адрес RDA5807_RandAccess_Addr (для режима совместимости с rda5800)
//==============================================================================
void rda5807_read(uint8_t RegAddr, uint16_t *pBuff, uint8_t RegNum)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b086      	sub	sp, #24
 8004050:	af04      	add	r7, sp, #16
 8004052:	4603      	mov	r3, r0
 8004054:	6039      	str	r1, [r7, #0]
 8004056:	71fb      	strb	r3, [r7, #7]
 8004058:	4613      	mov	r3, r2
 800405a:	71bb      	strb	r3, [r7, #6]
        Error_Handler();
    }
    // Читаем
    i2cm_ReadBuffAndStop(I2Cx, (uint8_t *) pBuff, RegNum << 1, RDA5807_TO); //*/

    if (HAL_I2C_Mem_Read(i2cRDA, RDA5807_RandAccess_Addr,
 800405c:	4b13      	ldr	r3, [pc, #76]	; (80040ac <rda5807_read+0x60>)
 800405e:	6818      	ldr	r0, [r3, #0]
 8004060:	79fb      	ldrb	r3, [r7, #7]
 8004062:	b29a      	uxth	r2, r3
 8004064:	79bb      	ldrb	r3, [r7, #6]
 8004066:	b29b      	uxth	r3, r3
 8004068:	005b      	lsls	r3, r3, #1
 800406a:	b29b      	uxth	r3, r3
 800406c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004070:	9102      	str	r1, [sp, #8]
 8004072:	9301      	str	r3, [sp, #4]
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	9300      	str	r3, [sp, #0]
 8004078:	2301      	movs	r3, #1
 800407a:	2122      	movs	r1, #34	; 0x22
 800407c:	f002 fdd4 	bl	8006c28 <HAL_I2C_Mem_Read>
 8004080:	4603      	mov	r3, r0
 8004082:	2b00      	cmp	r3, #0
 8004084:	d006      	beq.n	8004094 <rda5807_read+0x48>
    				     RegAddr, I2C_MEMADD_SIZE_8BIT,
						 (uint8_t *)pBuff, RegNum << 1,
						 RDA5807_TO) != HAL_OK) {
    	devError |= devRDA;
 8004086:	4b0a      	ldr	r3, [pc, #40]	; (80040b0 <rda5807_read+0x64>)
 8004088:	881b      	ldrh	r3, [r3, #0]
 800408a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800408e:	b29a      	uxth	r2, r3
 8004090:	4b07      	ldr	r3, [pc, #28]	; (80040b0 <rda5807_read+0x64>)
 8004092:	801a      	strh	r2, [r3, #0]
    }

    rda5807_bytes_change((uint8_t *)pBuff, RegNum << 1);
 8004094:	79bb      	ldrb	r3, [r7, #6]
 8004096:	005b      	lsls	r3, r3, #1
 8004098:	b2db      	uxtb	r3, r3
 800409a:	4619      	mov	r1, r3
 800409c:	6838      	ldr	r0, [r7, #0]
 800409e:	f7ff ff7f 	bl	8003fa0 <rda5807_bytes_change>
}
 80040a2:	bf00      	nop
 80040a4:	3708      	adds	r7, #8
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	bf00      	nop
 80040ac:	200001b4 	.word	0x200001b4
 80040b0:	20001424 	.word	0x20001424

080040b4 <rda5807_write>:
//==============================================================================
// Процедура пишет в rda5807 группу регистров (кол-во RegNum) начиная с RegAddr
// Используется I2C-адрес RDA5807_RandAccess_Addr (для режима совместимости с rda5800)
//==============================================================================
void rda5807_write(uint8_t RegAddr, uint16_t *pBuff, uint8_t RegNum)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b086      	sub	sp, #24
 80040b8:	af04      	add	r7, sp, #16
 80040ba:	4603      	mov	r3, r0
 80040bc:	6039      	str	r1, [r7, #0]
 80040be:	71fb      	strb	r3, [r7, #7]
 80040c0:	4613      	mov	r3, r2
 80040c2:	71bb      	strb	r3, [r7, #6]

    if (i2cm_WriteBuff(I2Cx, &RegAddr, 1, RDA5807_TO)) {
        Error_Handler();
    } //*/

    rda5807_bytes_change((uint8_t *)pBuff, RegNum << 1);
 80040c4:	79bb      	ldrb	r3, [r7, #6]
 80040c6:	005b      	lsls	r3, r3, #1
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	4619      	mov	r1, r3
 80040cc:	6838      	ldr	r0, [r7, #0]
 80040ce:	f7ff ff67 	bl	8003fa0 <rda5807_bytes_change>

    //err = i2cm_WriteBuff(I2Cx, (uint8_t *) pBuff, RegNum << 1, RDA5807_TO);
    //i2cm_Stop(I2Cx, RDA5807_TO);

    if (HAL_I2C_Mem_Write(i2cRDA,
 80040d2:	4b13      	ldr	r3, [pc, #76]	; (8004120 <rda5807_write+0x6c>)
 80040d4:	6818      	ldr	r0, [r3, #0]
 80040d6:	79fb      	ldrb	r3, [r7, #7]
 80040d8:	b29a      	uxth	r2, r3
 80040da:	79bb      	ldrb	r3, [r7, #6]
 80040dc:	b29b      	uxth	r3, r3
 80040de:	005b      	lsls	r3, r3, #1
 80040e0:	b29b      	uxth	r3, r3
 80040e2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80040e6:	9102      	str	r1, [sp, #8]
 80040e8:	9301      	str	r3, [sp, #4]
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	9300      	str	r3, [sp, #0]
 80040ee:	2301      	movs	r3, #1
 80040f0:	2122      	movs	r1, #34	; 0x22
 80040f2:	f002 fc85 	bl	8006a00 <HAL_I2C_Mem_Write>
 80040f6:	4603      	mov	r3, r0
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d006      	beq.n	800410a <rda5807_write+0x56>
    					  RDA5807_RandAccess_Addr,
						  RegAddr, I2C_MEMADD_SIZE_8BIT,
						  (uint8_t *)pBuff, RegNum << 1,
						  RDA5807_TO) != HAL_OK) {
    	devError |= devRDA;
 80040fc:	4b09      	ldr	r3, [pc, #36]	; (8004124 <rda5807_write+0x70>)
 80040fe:	881b      	ldrh	r3, [r3, #0]
 8004100:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004104:	b29a      	uxth	r2, r3
 8004106:	4b07      	ldr	r3, [pc, #28]	; (8004124 <rda5807_write+0x70>)
 8004108:	801a      	strh	r2, [r3, #0]
    }

    rda5807_bytes_change((uint8_t *)pBuff, RegNum << 1);
 800410a:	79bb      	ldrb	r3, [r7, #6]
 800410c:	005b      	lsls	r3, r3, #1
 800410e:	b2db      	uxtb	r3, r3
 8004110:	4619      	mov	r1, r3
 8004112:	6838      	ldr	r0, [r7, #0]
 8004114:	f7ff ff44 	bl	8003fa0 <rda5807_bytes_change>
}
 8004118:	bf00      	nop
 800411a:	3708      	adds	r7, #8
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}
 8004120:	200001b4 	.word	0x200001b4
 8004124:	20001424 	.word	0x20001424

08004128 <rda5807_SoftReset>:

//==============================================================================
// Процедура делает программный сброс rda5807
//==============================================================================
void rda5807_SoftReset()
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b082      	sub	sp, #8
 800412c:	af00      	add	r7, sp, #0
tReg02h reg02;

    rda5807_read(2, (uint16_t *)&reg02, 1);
 800412e:	1d3b      	adds	r3, r7, #4
 8004130:	2201      	movs	r2, #1
 8004132:	4619      	mov	r1, r3
 8004134:	2002      	movs	r0, #2
 8004136:	f7ff ff89 	bl	800404c <rda5807_read>

	reg02.bENABLE = 1;
 800413a:	793b      	ldrb	r3, [r7, #4]
 800413c:	f043 0301 	orr.w	r3, r3, #1
 8004140:	713b      	strb	r3, [r7, #4]
	reg02.bSOFT_RESET = 1;
 8004142:	793b      	ldrb	r3, [r7, #4]
 8004144:	f043 0302 	orr.w	r3, r3, #2
 8004148:	713b      	strb	r3, [r7, #4]
    rda5807_write(2, (uint16_t *)&reg02, 1);
 800414a:	1d3b      	adds	r3, r7, #4
 800414c:	2201      	movs	r2, #1
 800414e:	4619      	mov	r1, r3
 8004150:	2002      	movs	r0, #2
 8004152:	f7ff ffaf 	bl	80040b4 <rda5807_write>

    reg02.bENABLE = 1;
 8004156:	793b      	ldrb	r3, [r7, #4]
 8004158:	f043 0301 	orr.w	r3, r3, #1
 800415c:	713b      	strb	r3, [r7, #4]
    reg02.bSOFT_RESET = 0;
 800415e:	793b      	ldrb	r3, [r7, #4]
 8004160:	f36f 0341 	bfc	r3, #1, #1
 8004164:	713b      	strb	r3, [r7, #4]
    rda5807_write(2, (uint16_t *)&reg02, 1);
 8004166:	1d3b      	adds	r3, r7, #4
 8004168:	2201      	movs	r2, #1
 800416a:	4619      	mov	r1, r3
 800416c:	2002      	movs	r0, #2
 800416e:	f7ff ffa1 	bl	80040b4 <rda5807_write>
}
 8004172:	bf00      	nop
 8004174:	3708      	adds	r7, #8
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
	...

0800417c <rda5807_SetupDefault>:

//==============================================================================
// Процедура производит начальную настройку rda5807
//==============================================================================
void rda5807_SetupDefault()
{
 800417c:	b580      	push	{r7, lr}
 800417e:	af00      	add	r7, sp, #0
	tReg06h Reg06;
	tReg07h Reg07;
} Buffs;*/

    // Регистр 0x02
    Buffs.Reg02.bENABLE = 1;
 8004180:	4a69      	ldr	r2, [pc, #420]	; (8004328 <rda5807_SetupDefault+0x1ac>)
 8004182:	7813      	ldrb	r3, [r2, #0]
 8004184:	f043 0301 	orr.w	r3, r3, #1
 8004188:	7013      	strb	r3, [r2, #0]
    Buffs.Reg02.bSOFT_RESET = 0;
 800418a:	4a67      	ldr	r2, [pc, #412]	; (8004328 <rda5807_SetupDefault+0x1ac>)
 800418c:	7813      	ldrb	r3, [r2, #0]
 800418e:	f36f 0341 	bfc	r3, #1, #1
 8004192:	7013      	strb	r3, [r2, #0]
    Buffs.Reg02.bNEW_METHOD = 1;
 8004194:	4a64      	ldr	r2, [pc, #400]	; (8004328 <rda5807_SetupDefault+0x1ac>)
 8004196:	7813      	ldrb	r3, [r2, #0]
 8004198:	f043 0304 	orr.w	r3, r3, #4
 800419c:	7013      	strb	r3, [r2, #0]
    Buffs.Reg02.bRDS_EN = 1;
 800419e:	4a62      	ldr	r2, [pc, #392]	; (8004328 <rda5807_SetupDefault+0x1ac>)
 80041a0:	7813      	ldrb	r3, [r2, #0]
 80041a2:	f043 0308 	orr.w	r3, r3, #8
 80041a6:	7013      	strb	r3, [r2, #0]
    Buffs.Reg02.bCLK_MODE = 0;        // 32.768
 80041a8:	4a5f      	ldr	r2, [pc, #380]	; (8004328 <rda5807_SetupDefault+0x1ac>)
 80041aa:	7813      	ldrb	r3, [r2, #0]
 80041ac:	f36f 1306 	bfc	r3, #4, #3
 80041b0:	7013      	strb	r3, [r2, #0]
    Buffs.Reg02.bSKMODE = 0;
 80041b2:	4a5d      	ldr	r2, [pc, #372]	; (8004328 <rda5807_SetupDefault+0x1ac>)
 80041b4:	7813      	ldrb	r3, [r2, #0]
 80041b6:	f36f 13c7 	bfc	r3, #7, #1
 80041ba:	7013      	strb	r3, [r2, #0]
    Buffs.Reg02.bSEEK = 0;
 80041bc:	4a5a      	ldr	r2, [pc, #360]	; (8004328 <rda5807_SetupDefault+0x1ac>)
 80041be:	7853      	ldrb	r3, [r2, #1]
 80041c0:	f36f 0300 	bfc	r3, #0, #1
 80041c4:	7053      	strb	r3, [r2, #1]
    Buffs.Reg02.bSEEKUP = 1;
 80041c6:	4a58      	ldr	r2, [pc, #352]	; (8004328 <rda5807_SetupDefault+0x1ac>)
 80041c8:	7853      	ldrb	r3, [r2, #1]
 80041ca:	f043 0302 	orr.w	r3, r3, #2
 80041ce:	7053      	strb	r3, [r2, #1]
    Buffs.Reg02.bRCLK_DirectInput = 0;
 80041d0:	4a55      	ldr	r2, [pc, #340]	; (8004328 <rda5807_SetupDefault+0x1ac>)
 80041d2:	7853      	ldrb	r3, [r2, #1]
 80041d4:	f36f 0382 	bfc	r3, #2, #1
 80041d8:	7053      	strb	r3, [r2, #1]
    Buffs.Reg02.bRCLK_NonCalibMode = 0;
 80041da:	4a53      	ldr	r2, [pc, #332]	; (8004328 <rda5807_SetupDefault+0x1ac>)
 80041dc:	7853      	ldrb	r3, [r2, #1]
 80041de:	f36f 03c3 	bfc	r3, #3, #1
 80041e2:	7053      	strb	r3, [r2, #1]
    Buffs.Reg02.bBASS = 0;
 80041e4:	4a50      	ldr	r2, [pc, #320]	; (8004328 <rda5807_SetupDefault+0x1ac>)
 80041e6:	7853      	ldrb	r3, [r2, #1]
 80041e8:	f36f 1304 	bfc	r3, #4, #1
 80041ec:	7053      	strb	r3, [r2, #1]
    Buffs.Reg02.bMONO = 0;
 80041ee:	4a4e      	ldr	r2, [pc, #312]	; (8004328 <rda5807_SetupDefault+0x1ac>)
 80041f0:	7853      	ldrb	r3, [r2, #1]
 80041f2:	f36f 1345 	bfc	r3, #5, #1
 80041f6:	7053      	strb	r3, [r2, #1]
    Buffs.Reg02.bDMUTE = 1;
 80041f8:	4a4b      	ldr	r2, [pc, #300]	; (8004328 <rda5807_SetupDefault+0x1ac>)
 80041fa:	7853      	ldrb	r3, [r2, #1]
 80041fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004200:	7053      	strb	r3, [r2, #1]
    Buffs.Reg02.bDHIZ = 1;
 8004202:	4a49      	ldr	r2, [pc, #292]	; (8004328 <rda5807_SetupDefault+0x1ac>)
 8004204:	7853      	ldrb	r3, [r2, #1]
 8004206:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800420a:	7053      	strb	r3, [r2, #1]
    // Регистр 0x03
    Buffs.Reg03.bSPACE = 0;   // Шаг настройки = 100 КГц
 800420c:	4a46      	ldr	r2, [pc, #280]	; (8004328 <rda5807_SetupDefault+0x1ac>)
 800420e:	7893      	ldrb	r3, [r2, #2]
 8004210:	f36f 0301 	bfc	r3, #0, #2
 8004214:	7093      	strb	r3, [r2, #2]
    Buffs.Reg03.bBAND = 2;//0;    // Диапазон 87–108 MHz
 8004216:	4a44      	ldr	r2, [pc, #272]	; (8004328 <rda5807_SetupDefault+0x1ac>)
 8004218:	7893      	ldrb	r3, [r2, #2]
 800421a:	2102      	movs	r1, #2
 800421c:	f361 0383 	bfi	r3, r1, #2, #2
 8004220:	7093      	strb	r3, [r2, #2]
    Buffs.Reg03.bTUNE = 1;
 8004222:	4a41      	ldr	r2, [pc, #260]	; (8004328 <rda5807_SetupDefault+0x1ac>)
 8004224:	7893      	ldrb	r3, [r2, #2]
 8004226:	f043 0310 	orr.w	r3, r3, #16
 800422a:	7093      	strb	r3, [r2, #2]
    Buffs.Reg03.bDIRECT_MODE = 0;
 800422c:	4a3e      	ldr	r2, [pc, #248]	; (8004328 <rda5807_SetupDefault+0x1ac>)
 800422e:	7893      	ldrb	r3, [r2, #2]
 8004230:	f36f 1345 	bfc	r3, #5, #1
 8004234:	7093      	strb	r3, [r2, #2]
    Buffs.Reg03.bCHAN = 0;
 8004236:	4a3c      	ldr	r2, [pc, #240]	; (8004328 <rda5807_SetupDefault+0x1ac>)
 8004238:	8853      	ldrh	r3, [r2, #2]
 800423a:	f36f 138f 	bfc	r3, #6, #10
 800423e:	8053      	strh	r3, [r2, #2]
    // Регистр 0x04
    Buffs.Reg04.bRSVD1 = 0;
 8004240:	4b39      	ldr	r3, [pc, #228]	; (8004328 <rda5807_SetupDefault+0x1ac>)
 8004242:	2200      	movs	r2, #0
 8004244:	711a      	strb	r2, [r3, #4]
    Buffs.Reg04.bAFCD = 0;
 8004246:	4a38      	ldr	r2, [pc, #224]	; (8004328 <rda5807_SetupDefault+0x1ac>)
 8004248:	7953      	ldrb	r3, [r2, #5]
 800424a:	f36f 0300 	bfc	r3, #0, #1
 800424e:	7153      	strb	r3, [r2, #5]
    Buffs.Reg04.bSOFTMUTE_EN = 1;
 8004250:	4a35      	ldr	r2, [pc, #212]	; (8004328 <rda5807_SetupDefault+0x1ac>)
 8004252:	7953      	ldrb	r3, [r2, #5]
 8004254:	f043 0302 	orr.w	r3, r3, #2
 8004258:	7153      	strb	r3, [r2, #5]
    Buffs.Reg04.bRSVD2 = 0;
 800425a:	4a33      	ldr	r2, [pc, #204]	; (8004328 <rda5807_SetupDefault+0x1ac>)
 800425c:	7953      	ldrb	r3, [r2, #5]
 800425e:	f36f 0382 	bfc	r3, #2, #1
 8004262:	7153      	strb	r3, [r2, #5]
    Buffs.Reg04.bDE = 0;
 8004264:	4a30      	ldr	r2, [pc, #192]	; (8004328 <rda5807_SetupDefault+0x1ac>)
 8004266:	7953      	ldrb	r3, [r2, #5]
 8004268:	f36f 03c3 	bfc	r3, #3, #1
 800426c:	7153      	strb	r3, [r2, #5]
    Buffs.Reg04.bRSVD3 = 0;
 800426e:	4a2e      	ldr	r2, [pc, #184]	; (8004328 <rda5807_SetupDefault+0x1ac>)
 8004270:	7953      	ldrb	r3, [r2, #5]
 8004272:	f36f 1307 	bfc	r3, #4, #4
 8004276:	7153      	strb	r3, [r2, #5]
    // Регистр 0x05
    Buffs.Reg05.bVOLUME = 0;
 8004278:	4a2b      	ldr	r2, [pc, #172]	; (8004328 <rda5807_SetupDefault+0x1ac>)
 800427a:	7993      	ldrb	r3, [r2, #6]
 800427c:	f36f 0303 	bfc	r3, #0, #4
 8004280:	7193      	strb	r3, [r2, #6]
    Buffs.Reg05.bANT_GAIN = 0;
 8004282:	4a29      	ldr	r2, [pc, #164]	; (8004328 <rda5807_SetupDefault+0x1ac>)
 8004284:	7993      	ldrb	r3, [r2, #6]
 8004286:	f36f 1305 	bfc	r3, #4, #2
 800428a:	7193      	strb	r3, [r2, #6]
    Buffs.Reg05.bANT_TYPE = ANT_TYPE_Both;//ANT_TYPE_External;//ANT_TYPE_Headphones;//ANT_TYPE_Both;
 800428c:	4a26      	ldr	r2, [pc, #152]	; (8004328 <rda5807_SetupDefault+0x1ac>)
 800428e:	7993      	ldrb	r3, [r2, #6]
 8004290:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004294:	7193      	strb	r3, [r2, #6]
    Buffs.Reg05.bSEEKTH = 8;
 8004296:	4a24      	ldr	r2, [pc, #144]	; (8004328 <rda5807_SetupDefault+0x1ac>)
 8004298:	79d3      	ldrb	r3, [r2, #7]
 800429a:	2108      	movs	r1, #8
 800429c:	f361 0303 	bfi	r3, r1, #0, #4
 80042a0:	71d3      	strb	r3, [r2, #7]
    Buffs.Reg05.bRSVD3 = 0;
 80042a2:	4a21      	ldr	r2, [pc, #132]	; (8004328 <rda5807_SetupDefault+0x1ac>)
 80042a4:	79d3      	ldrb	r3, [r2, #7]
 80042a6:	f36f 1306 	bfc	r3, #4, #3
 80042aa:	71d3      	strb	r3, [r2, #7]
    Buffs.Reg05.bINT_MODE = 1;
 80042ac:	4a1e      	ldr	r2, [pc, #120]	; (8004328 <rda5807_SetupDefault+0x1ac>)
 80042ae:	79d3      	ldrb	r3, [r2, #7]
 80042b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042b4:	71d3      	strb	r3, [r2, #7]
    // Регистр 0x06
    Buffs.Reg06.bRSVD1 = 0;
 80042b6:	4a1c      	ldr	r2, [pc, #112]	; (8004328 <rda5807_SetupDefault+0x1ac>)
 80042b8:	8913      	ldrh	r3, [r2, #8]
 80042ba:	f36f 030c 	bfc	r3, #0, #13
 80042be:	8113      	strh	r3, [r2, #8]
    Buffs.Reg06.bOPEN_MODE = 0;
 80042c0:	4a19      	ldr	r2, [pc, #100]	; (8004328 <rda5807_SetupDefault+0x1ac>)
 80042c2:	7a53      	ldrb	r3, [r2, #9]
 80042c4:	f36f 1346 	bfc	r3, #5, #2
 80042c8:	7253      	strb	r3, [r2, #9]
    Buffs.Reg06.bRSVD2 = 0;
 80042ca:	4a17      	ldr	r2, [pc, #92]	; (8004328 <rda5807_SetupDefault+0x1ac>)
 80042cc:	7a53      	ldrb	r3, [r2, #9]
 80042ce:	f36f 13c7 	bfc	r3, #7, #1
 80042d2:	7253      	strb	r3, [r2, #9]
    // Регистр 0x07
    Buffs.Reg07.bFREQ_MODE = 0;
 80042d4:	4a14      	ldr	r2, [pc, #80]	; (8004328 <rda5807_SetupDefault+0x1ac>)
 80042d6:	7a93      	ldrb	r3, [r2, #10]
 80042d8:	f36f 0300 	bfc	r3, #0, #1
 80042dc:	7293      	strb	r3, [r2, #10]
    Buffs.Reg07.bSOFTBLEND_EN = 1;
 80042de:	4a12      	ldr	r2, [pc, #72]	; (8004328 <rda5807_SetupDefault+0x1ac>)
 80042e0:	7a93      	ldrb	r3, [r2, #10]
 80042e2:	f043 0302 	orr.w	r3, r3, #2
 80042e6:	7293      	strb	r3, [r2, #10]
    Buffs.Reg07.bSEEK_TH_OLD = 0;
 80042e8:	4a0f      	ldr	r2, [pc, #60]	; (8004328 <rda5807_SetupDefault+0x1ac>)
 80042ea:	7a93      	ldrb	r3, [r2, #10]
 80042ec:	f36f 0387 	bfc	r3, #2, #6
 80042f0:	7293      	strb	r3, [r2, #10]
    Buffs.Reg07.bRSVD1 = 0;
 80042f2:	4a0d      	ldr	r2, [pc, #52]	; (8004328 <rda5807_SetupDefault+0x1ac>)
 80042f4:	7ad3      	ldrb	r3, [r2, #11]
 80042f6:	f36f 0300 	bfc	r3, #0, #1
 80042fa:	72d3      	strb	r3, [r2, #11]
    Buffs.Reg07.b65M_50M_MODE = 1;
 80042fc:	4a0a      	ldr	r2, [pc, #40]	; (8004328 <rda5807_SetupDefault+0x1ac>)
 80042fe:	7ad3      	ldrb	r3, [r2, #11]
 8004300:	f043 0302 	orr.w	r3, r3, #2
 8004304:	72d3      	strb	r3, [r2, #11]
    Buffs.Reg07.bTH_SOFRBLEND = 16;
 8004306:	4a08      	ldr	r2, [pc, #32]	; (8004328 <rda5807_SetupDefault+0x1ac>)
 8004308:	7ad3      	ldrb	r3, [r2, #11]
 800430a:	2110      	movs	r1, #16
 800430c:	f361 0386 	bfi	r3, r1, #2, #5
 8004310:	72d3      	strb	r3, [r2, #11]
    Buffs.Reg07.bRSVD2 = 0;
 8004312:	4a05      	ldr	r2, [pc, #20]	; (8004328 <rda5807_SetupDefault+0x1ac>)
 8004314:	7ad3      	ldrb	r3, [r2, #11]
 8004316:	f36f 13c7 	bfc	r3, #7, #1
 800431a:	72d3      	strb	r3, [r2, #11]

    // Пишем регистры функцией записи регистрового файла
    rda5807_write_regfile((uint16_t *)&(Buffs.Reg02), 6);
 800431c:	2106      	movs	r1, #6
 800431e:	4802      	ldr	r0, [pc, #8]	; (8004328 <rda5807_SetupDefault+0x1ac>)
 8004320:	f7ff fe60 	bl	8003fe4 <rda5807_write_regfile>
}
 8004324:	bf00      	nop
 8004326:	bd80      	pop	{r7, pc}
 8004328:	20002c74 	.word	0x20002c74

0800432c <rda5807_SetVolume>:

//==============================================================================
// Процедура устанавливает уровень громкости (0..16) выхода rda5807. При Value=0 включает MUTE
//==============================================================================
void rda5807_SetVolume(uint8_t Value)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b084      	sub	sp, #16
 8004330:	af00      	add	r7, sp, #0
 8004332:	4603      	mov	r3, r0
 8004334:	71fb      	strb	r3, [r7, #7]
//tReg02h Reg02;
//tReg05h Reg05;
uint8_t Mute = Value ? 0 : 1;
 8004336:	79fb      	ldrb	r3, [r7, #7]
 8004338:	2b00      	cmp	r3, #0
 800433a:	bf0c      	ite	eq
 800433c:	2301      	moveq	r3, #1
 800433e:	2300      	movne	r3, #0
 8004340:	b2db      	uxtb	r3, r3
 8004342:	73fb      	strb	r3, [r7, #15]

    if (Value > 16) Value = 16;
 8004344:	79fb      	ldrb	r3, [r7, #7]
 8004346:	2b10      	cmp	r3, #16
 8004348:	d901      	bls.n	800434e <rda5807_SetVolume+0x22>
 800434a:	2310      	movs	r3, #16
 800434c:	71fb      	strb	r3, [r7, #7]

    Value--;    // Значение для поля Volume на 1 меньше, чем входной параметр функции
 800434e:	79fb      	ldrb	r3, [r7, #7]
 8004350:	3b01      	subs	r3, #1
 8004352:	71fb      	strb	r3, [r7, #7]

    if (!Mute) {
 8004354:	7bfb      	ldrb	r3, [r7, #15]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d112      	bne.n	8004380 <rda5807_SetVolume+0x54>
        // Читаем регистр 0x05
        rda5807_read(5, (uint16_t *)&Buffs.Reg05, 1);
 800435a:	2201      	movs	r2, #1
 800435c:	4915      	ldr	r1, [pc, #84]	; (80043b4 <rda5807_SetVolume+0x88>)
 800435e:	2005      	movs	r0, #5
 8004360:	f7ff fe74 	bl	800404c <rda5807_read>
        // Меняем значение поля VOLUME
        Buffs.Reg05.bVOLUME = Value;
 8004364:	79fb      	ldrb	r3, [r7, #7]
 8004366:	f003 030f 	and.w	r3, r3, #15
 800436a:	b2d9      	uxtb	r1, r3
 800436c:	4a12      	ldr	r2, [pc, #72]	; (80043b8 <rda5807_SetVolume+0x8c>)
 800436e:	7993      	ldrb	r3, [r2, #6]
 8004370:	f361 0303 	bfi	r3, r1, #0, #4
 8004374:	7193      	strb	r3, [r2, #6]
        // Пишем регистр 0x05
        rda5807_write(5, (uint16_t *)&Buffs.Reg05, 1);
 8004376:	2201      	movs	r2, #1
 8004378:	490e      	ldr	r1, [pc, #56]	; (80043b4 <rda5807_SetVolume+0x88>)
 800437a:	2005      	movs	r0, #5
 800437c:	f7ff fe9a 	bl	80040b4 <rda5807_write>
    }

    // Читаем регистр 0x02
    rda5807_read(2, (uint16_t *)&Buffs.Reg02, 1);
 8004380:	2201      	movs	r2, #1
 8004382:	490d      	ldr	r1, [pc, #52]	; (80043b8 <rda5807_SetVolume+0x8c>)
 8004384:	2002      	movs	r0, #2
 8004386:	f7ff fe61 	bl	800404c <rda5807_read>
    // Меняем значение поля VOLUME
    Buffs.Reg02.bDMUTE = Mute ? 0 : 1;
 800438a:	7bfb      	ldrb	r3, [r7, #15]
 800438c:	2b00      	cmp	r3, #0
 800438e:	bf0c      	ite	eq
 8004390:	2301      	moveq	r3, #1
 8004392:	2300      	movne	r3, #0
 8004394:	b2d9      	uxtb	r1, r3
 8004396:	4a08      	ldr	r2, [pc, #32]	; (80043b8 <rda5807_SetVolume+0x8c>)
 8004398:	7853      	ldrb	r3, [r2, #1]
 800439a:	f361 1386 	bfi	r3, r1, #6, #1
 800439e:	7053      	strb	r3, [r2, #1]
    // Пишем регистр 0x02
    rda5807_write(2, (uint16_t *)&Buffs.Reg02, 1);
 80043a0:	2201      	movs	r2, #1
 80043a2:	4905      	ldr	r1, [pc, #20]	; (80043b8 <rda5807_SetVolume+0x8c>)
 80043a4:	2002      	movs	r0, #2
 80043a6:	f7ff fe85 	bl	80040b4 <rda5807_write>
}
 80043aa:	bf00      	nop
 80043ac:	3710      	adds	r7, #16
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}
 80043b2:	bf00      	nop
 80043b4:	20002c7a 	.word	0x20002c7a
 80043b8:	20002c74 	.word	0x20002c74

080043bc <rda5807_SetBassBoost>:

//==============================================================================
// Процедура включает/выключает BassBoost
//==============================================================================
void rda5807_SetBassBoost(uint8_t Value)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b082      	sub	sp, #8
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	4603      	mov	r3, r0
 80043c4:	71fb      	strb	r3, [r7, #7]
//tReg02h Reg02;

    // Читаем регистр 0x02
    rda5807_read(2, (uint16_t *)&Buffs.Reg02, 1);
 80043c6:	2201      	movs	r2, #1
 80043c8:	490b      	ldr	r1, [pc, #44]	; (80043f8 <rda5807_SetBassBoost+0x3c>)
 80043ca:	2002      	movs	r0, #2
 80043cc:	f7ff fe3e 	bl	800404c <rda5807_read>
    // Меняем значение поля BASS
    Buffs.Reg02.bBASS = (Value) ? 1 : 0;
 80043d0:	79fb      	ldrb	r3, [r7, #7]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	bf14      	ite	ne
 80043d6:	2301      	movne	r3, #1
 80043d8:	2300      	moveq	r3, #0
 80043da:	b2d9      	uxtb	r1, r3
 80043dc:	4a06      	ldr	r2, [pc, #24]	; (80043f8 <rda5807_SetBassBoost+0x3c>)
 80043de:	7853      	ldrb	r3, [r2, #1]
 80043e0:	f361 1304 	bfi	r3, r1, #4, #1
 80043e4:	7053      	strb	r3, [r2, #1]
    // Пишем регистр 0x02
    rda5807_write(2, (uint16_t *)&Buffs.Reg02, 1);
 80043e6:	2201      	movs	r2, #1
 80043e8:	4903      	ldr	r1, [pc, #12]	; (80043f8 <rda5807_SetBassBoost+0x3c>)
 80043ea:	2002      	movs	r0, #2
 80043ec:	f7ff fe62 	bl	80040b4 <rda5807_write>
}
 80043f0:	bf00      	nop
 80043f2:	3708      	adds	r7, #8
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	20002c74 	.word	0x20002c74

080043fc <rda5807_SetFreq_In100Khz>:
//==============================================================================
// Процедура устанавливает текущую частоту Freq100kHz и стартует перенастройку rda5807 на эту частоту.
// Окончание процесса можно установки можно проконтроллировать по обнулению бита STR в регистре 0x0A (функцией rda5807_Get_SeekTuneReadyFlag)
//==============================================================================
void rda5807_SetFreq_In100Khz(uint16_t Freq100kHz)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b084      	sub	sp, #16
 8004400:	af00      	add	r7, sp, #0
 8004402:	4603      	mov	r3, r0
 8004404:	80fb      	strh	r3, [r7, #6]
//tReg03h Reg03;
uint16_t l = 870, r = 1080;
 8004406:	f240 3366 	movw	r3, #870	; 0x366
 800440a:	81fb      	strh	r3, [r7, #14]
 800440c:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8004410:	81bb      	strh	r3, [r7, #12]

    // Проверка входного параметра для диапазона Buffs.Reg03.bBAND
	switch (Buffs.Reg03.bBAND) {    // Диапазон 87–108 MHz
 8004412:	4b33      	ldr	r3, [pc, #204]	; (80044e0 <rda5807_SetFreq_In100Khz+0xe4>)
 8004414:	789b      	ldrb	r3, [r3, #2]
 8004416:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800441a:	b2db      	uxtb	r3, r3
 800441c:	2b03      	cmp	r3, #3
 800441e:	d011      	beq.n	8004444 <rda5807_SetFreq_In100Khz+0x48>
 8004420:	2b03      	cmp	r3, #3
 8004422:	dc16      	bgt.n	8004452 <rda5807_SetFreq_In100Khz+0x56>
 8004424:	2b01      	cmp	r3, #1
 8004426:	d002      	beq.n	800442e <rda5807_SetFreq_In100Khz+0x32>
 8004428:	2b02      	cmp	r3, #2
 800442a:	d007      	beq.n	800443c <rda5807_SetFreq_In100Khz+0x40>
 800442c:	e011      	b.n	8004452 <rda5807_SetFreq_In100Khz+0x56>
		//case 0:// 00 = 87–108 MHz (US/Europe)
		//break;
		case 1:// 01 = 76–91 MHz (Japan)
			l = 760;
 800442e:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 8004432:	81fb      	strh	r3, [r7, #14]
			r = 910;
 8004434:	f240 338e 	movw	r3, #910	; 0x38e
 8004438:	81bb      	strh	r3, [r7, #12]
		break;
 800443a:	e00a      	b.n	8004452 <rda5807_SetFreq_In100Khz+0x56>
		case 2:// 10 = 76–108 MHz (world wide)
			l = 760;
 800443c:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 8004440:	81fb      	strh	r3, [r7, #14]
		break;
 8004442:	e006      	b.n	8004452 <rda5807_SetFreq_In100Khz+0x56>
		case 3:// 11 = 65 –76 MHz (East Europe) or 50-65MHz
			l = 650;
 8004444:	f240 238a 	movw	r3, #650	; 0x28a
 8004448:	81fb      	strh	r3, [r7, #14]
			r = 760;
 800444a:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 800444e:	81bb      	strh	r3, [r7, #12]
		break;
 8004450:	bf00      	nop
	}
	lBand = ((float)l) / 10;
 8004452:	89fb      	ldrh	r3, [r7, #14]
 8004454:	ee07 3a90 	vmov	s15, r3
 8004458:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800445c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8004460:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004464:	4b1f      	ldr	r3, [pc, #124]	; (80044e4 <rda5807_SetFreq_In100Khz+0xe8>)
 8004466:	edc3 7a00 	vstr	s15, [r3]
	rBand = ((float)r) / 10;
 800446a:	89bb      	ldrh	r3, [r7, #12]
 800446c:	ee07 3a90 	vmov	s15, r3
 8004470:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004474:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8004478:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800447c:	4b1a      	ldr	r3, [pc, #104]	; (80044e8 <rda5807_SetFreq_In100Khz+0xec>)
 800447e:	edc3 7a00 	vstr	s15, [r3]

    if (Freq100kHz < l)  Freq100kHz = l;
 8004482:	88fa      	ldrh	r2, [r7, #6]
 8004484:	89fb      	ldrh	r3, [r7, #14]
 8004486:	429a      	cmp	r2, r3
 8004488:	d201      	bcs.n	800448e <rda5807_SetFreq_In100Khz+0x92>
 800448a:	89fb      	ldrh	r3, [r7, #14]
 800448c:	80fb      	strh	r3, [r7, #6]
    if (Freq100kHz > r) Freq100kHz = r;
 800448e:	88fa      	ldrh	r2, [r7, #6]
 8004490:	89bb      	ldrh	r3, [r7, #12]
 8004492:	429a      	cmp	r2, r3
 8004494:	d901      	bls.n	800449a <rda5807_SetFreq_In100Khz+0x9e>
 8004496:	89bb      	ldrh	r3, [r7, #12]
 8004498:	80fb      	strh	r3, [r7, #6]

    // Вычитаем начало диапазона (left)
    Freq100kHz -= l;
 800449a:	88fa      	ldrh	r2, [r7, #6]
 800449c:	89fb      	ldrh	r3, [r7, #14]
 800449e:	1ad3      	subs	r3, r2, r3
 80044a0:	80fb      	strh	r3, [r7, #6]

    // Читаем регистр 0x03
    rda5807_read(3, (uint16_t *)&Buffs.Reg03, 1);
 80044a2:	2201      	movs	r2, #1
 80044a4:	4911      	ldr	r1, [pc, #68]	; (80044ec <rda5807_SetFreq_In100Khz+0xf0>)
 80044a6:	2003      	movs	r0, #3
 80044a8:	f7ff fdd0 	bl	800404c <rda5807_read>
    // Меняем значение поля CHAN
    Buffs.Reg03.bCHAN = Freq100kHz;
 80044ac:	88fb      	ldrh	r3, [r7, #6]
 80044ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80044b2:	b299      	uxth	r1, r3
 80044b4:	4a0a      	ldr	r2, [pc, #40]	; (80044e0 <rda5807_SetFreq_In100Khz+0xe4>)
 80044b6:	8853      	ldrh	r3, [r2, #2]
 80044b8:	f361 138f 	bfi	r3, r1, #6, #10
 80044bc:	8053      	strh	r3, [r2, #2]
    // Выставляем флаг начала перенастройки на канал
    Buffs.Reg03.bTUNE = 1;
 80044be:	4a08      	ldr	r2, [pc, #32]	; (80044e0 <rda5807_SetFreq_In100Khz+0xe4>)
 80044c0:	7893      	ldrb	r3, [r2, #2]
 80044c2:	f043 0310 	orr.w	r3, r3, #16
 80044c6:	7093      	strb	r3, [r2, #2]
    // Пишем регистр 0x03
    rda5807_write(3, (uint16_t *)&Buffs.Reg03, 1);
 80044c8:	2201      	movs	r2, #1
 80044ca:	4908      	ldr	r1, [pc, #32]	; (80044ec <rda5807_SetFreq_In100Khz+0xf0>)
 80044cc:	2003      	movs	r0, #3
 80044ce:	f7ff fdf1 	bl	80040b4 <rda5807_write>

    HAL_Delay(50);
 80044d2:	2032      	movs	r0, #50	; 0x32
 80044d4:	f001 fb18 	bl	8005b08 <HAL_Delay>
}
 80044d8:	bf00      	nop
 80044da:	3710      	adds	r7, #16
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}
 80044e0:	20002c74 	.word	0x20002c74
 80044e4:	20002c60 	.word	0x20002c60
 80044e8:	20002c64 	.word	0x20002c64
 80044ec:	20002c76 	.word	0x20002c76

080044f0 <rda5807_GetFreq_In100Khz>:

//==============================================================================
// Функция читает текущую частоту, на которую настроен rda5807
//==============================================================================
uint16_t rda5807_GetFreq_In100Khz()
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b082      	sub	sp, #8
 80044f4:	af00      	add	r7, sp, #0
//tReg0Ah reg0A;

    // Читаем регистр 0x0A
    rda5807_read(0x0A, (uint16_t *)&Buffs.Reg0A, 1);
 80044f6:	2201      	movs	r2, #1
 80044f8:	491b      	ldr	r1, [pc, #108]	; (8004568 <rda5807_GetFreq_In100Khz+0x78>)
 80044fa:	200a      	movs	r0, #10
 80044fc:	f7ff fda6 	bl	800404c <rda5807_read>

    uint16_t Freq100kHz = Buffs.Reg0A.bREADCHAN;
 8004500:	4b1a      	ldr	r3, [pc, #104]	; (800456c <rda5807_GetFreq_In100Khz+0x7c>)
 8004502:	8a1b      	ldrh	r3, [r3, #16]
 8004504:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004508:	b29b      	uxth	r3, r3
 800450a:	80bb      	strh	r3, [r7, #4]

    if (Freq100kHz == 319) return 0;
 800450c:	88bb      	ldrh	r3, [r7, #4]
 800450e:	f240 123f 	movw	r2, #319	; 0x13f
 8004512:	4293      	cmp	r3, r2
 8004514:	d101      	bne.n	800451a <rda5807_GetFreq_In100Khz+0x2a>
 8004516:	2300      	movs	r3, #0
 8004518:	e021      	b.n	800455e <rda5807_GetFreq_In100Khz+0x6e>

    // Прибавляем начало диапазона (87 МГц)
    uint16_t left = 870;
 800451a:	f240 3366 	movw	r3, #870	; 0x366
 800451e:	80fb      	strh	r3, [r7, #6]
    switch (Buffs.Reg03.bBAND) {    // Диапазон 87–108 MHz
 8004520:	4b12      	ldr	r3, [pc, #72]	; (800456c <rda5807_GetFreq_In100Khz+0x7c>)
 8004522:	789b      	ldrb	r3, [r3, #2]
 8004524:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8004528:	b2db      	uxtb	r3, r3
 800452a:	2b03      	cmp	r3, #3
 800452c:	d00e      	beq.n	800454c <rda5807_GetFreq_In100Khz+0x5c>
 800452e:	2b03      	cmp	r3, #3
 8004530:	dc10      	bgt.n	8004554 <rda5807_GetFreq_In100Khz+0x64>
 8004532:	2b01      	cmp	r3, #1
 8004534:	d002      	beq.n	800453c <rda5807_GetFreq_In100Khz+0x4c>
 8004536:	2b02      	cmp	r3, #2
 8004538:	d004      	beq.n	8004544 <rda5807_GetFreq_In100Khz+0x54>
 800453a:	e00b      	b.n	8004554 <rda5807_GetFreq_In100Khz+0x64>
    	//case 0:// 00 = 87–108 MHz (US/Europe)
    	//break;
    	case 1:// 01 = 76–91 MHz (Japan)
    		left = 760;
 800453c:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 8004540:	80fb      	strh	r3, [r7, #6]
    	break;
 8004542:	e007      	b.n	8004554 <rda5807_GetFreq_In100Khz+0x64>
    	case 2:// 10 = 76–108 MHz (world wide)
    		left = 760;
 8004544:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 8004548:	80fb      	strh	r3, [r7, #6]
    	break;
 800454a:	e003      	b.n	8004554 <rda5807_GetFreq_In100Khz+0x64>
    	case 3:// 11 = 65 –76 MHz (East Europe) or 50-65MHz
    		left = 650;
 800454c:	f240 238a 	movw	r3, #650	; 0x28a
 8004550:	80fb      	strh	r3, [r7, #6]
    	break;
 8004552:	bf00      	nop
    }
    Freq100kHz += left;
 8004554:	88ba      	ldrh	r2, [r7, #4]
 8004556:	88fb      	ldrh	r3, [r7, #6]
 8004558:	4413      	add	r3, r2
 800455a:	80bb      	strh	r3, [r7, #4]

    return Freq100kHz;
 800455c:	88bb      	ldrh	r3, [r7, #4]
}
 800455e:	4618      	mov	r0, r3
 8004560:	3708      	adds	r7, #8
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	20002c84 	.word	0x20002c84
 800456c:	20002c74 	.word	0x20002c74

08004570 <rda5807_StartSeek>:

//==============================================================================
// Процедура стартует поиск радиостанции вверх/вниз
//==============================================================================
void rda5807_StartSeek(uint8_t Up)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b082      	sub	sp, #8
 8004574:	af00      	add	r7, sp, #0
 8004576:	4603      	mov	r3, r0
 8004578:	71fb      	strb	r3, [r7, #7]
//tReg02h Reg02;

    // Читаем регистр 0x02
    rda5807_read(0x02, (uint16_t *)&Buffs.Reg02, 1);
 800457a:	2201      	movs	r2, #1
 800457c:	4910      	ldr	r1, [pc, #64]	; (80045c0 <rda5807_StartSeek+0x50>)
 800457e:	2002      	movs	r0, #2
 8004580:	f7ff fd64 	bl	800404c <rda5807_read>

    Buffs.Reg02.bSKMODE = 1;          // 07 Seek Mode (0 = wrap at the upper or lower band limit and continue seeking; 1 = stop seeking at the upper or lower band limit)
 8004584:	4a0e      	ldr	r2, [pc, #56]	; (80045c0 <rda5807_StartSeek+0x50>)
 8004586:	7813      	ldrb	r3, [r2, #0]
 8004588:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800458c:	7013      	strb	r3, [r2, #0]
    Buffs.Reg02.bSEEK = 1;            // 08 Seek (0 = Disable stop seek; 1 = Enable)
 800458e:	4a0c      	ldr	r2, [pc, #48]	; (80045c0 <rda5807_StartSeek+0x50>)
 8004590:	7853      	ldrb	r3, [r2, #1]
 8004592:	f043 0301 	orr.w	r3, r3, #1
 8004596:	7053      	strb	r3, [r2, #1]
    Buffs.Reg02.bSEEKUP = Up ? 1 : 0; // 09 Seek Up (0 = Seek down; 1 = Seek up)
 8004598:	79fb      	ldrb	r3, [r7, #7]
 800459a:	2b00      	cmp	r3, #0
 800459c:	bf14      	ite	ne
 800459e:	2301      	movne	r3, #1
 80045a0:	2300      	moveq	r3, #0
 80045a2:	b2d9      	uxtb	r1, r3
 80045a4:	4a06      	ldr	r2, [pc, #24]	; (80045c0 <rda5807_StartSeek+0x50>)
 80045a6:	7853      	ldrb	r3, [r2, #1]
 80045a8:	f361 0341 	bfi	r3, r1, #1, #1
 80045ac:	7053      	strb	r3, [r2, #1]

    // Пишем регистр 0x02
    rda5807_write(0x02, (uint16_t *)&Buffs.Reg02, 1);
 80045ae:	2201      	movs	r2, #1
 80045b0:	4903      	ldr	r1, [pc, #12]	; (80045c0 <rda5807_StartSeek+0x50>)
 80045b2:	2002      	movs	r0, #2
 80045b4:	f7ff fd7e 	bl	80040b4 <rda5807_write>
}
 80045b8:	bf00      	nop
 80045ba:	3708      	adds	r7, #8
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}
 80045c0:	20002c74 	.word	0x20002c74

080045c4 <rda5807_Get_SeekTuneReadyFlag>:
//==============================================================================
// Функция возвращает состояние бита STR (SeekTuneReadyFlag)
// SeekTuneReadyFlag=1 пока идёт процесс настройки на частоту или поиск радиостанции.
//==============================================================================
uint8_t rda5807_Get_SeekTuneReadyFlag()
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	af00      	add	r7, sp, #0
//tReg0Ah reg0A;

    // Читаем регистр 0x0A
    rda5807_read(0x0A, (uint16_t *)&Buffs.Reg0A, 1);
 80045c8:	2201      	movs	r2, #1
 80045ca:	4905      	ldr	r1, [pc, #20]	; (80045e0 <rda5807_Get_SeekTuneReadyFlag+0x1c>)
 80045cc:	200a      	movs	r0, #10
 80045ce:	f7ff fd3d 	bl	800404c <rda5807_read>

    return Buffs.Reg0A.bSTC;
 80045d2:	4b04      	ldr	r3, [pc, #16]	; (80045e4 <rda5807_Get_SeekTuneReadyFlag+0x20>)
 80045d4:	7c5b      	ldrb	r3, [r3, #17]
 80045d6:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80045da:	b2db      	uxtb	r3, r3
}
 80045dc:	4618      	mov	r0, r3
 80045de:	bd80      	pop	{r7, pc}
 80045e0:	20002c84 	.word	0x20002c84
 80045e4:	20002c74 	.word	0x20002c74

080045e8 <rda5807_Get_StereoMonoFlag>:
//==============================================================================
//==============================================================================
bool rda5807_Get_StereoMonoFlag()
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	af00      	add	r7, sp, #0
//tReg0Ah reg0A;

    // Читаем регистр 0x0A
    rda5807_read(0x0A, (uint16_t *)&Buffs.Reg0A, 1);
 80045ec:	2201      	movs	r2, #1
 80045ee:	4908      	ldr	r1, [pc, #32]	; (8004610 <rda5807_Get_StereoMonoFlag+0x28>)
 80045f0:	200a      	movs	r0, #10
 80045f2:	f7ff fd2b 	bl	800404c <rda5807_read>

    return Buffs.Reg0A.bST;     // Stereo Indicator (0 = Mono; 1 = Stereo)
 80045f6:	4b07      	ldr	r3, [pc, #28]	; (8004614 <rda5807_Get_StereoMonoFlag+0x2c>)
 80045f8:	7c5b      	ldrb	r3, [r3, #17]
 80045fa:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	2b00      	cmp	r3, #0
 8004602:	bf14      	ite	ne
 8004604:	2301      	movne	r3, #1
 8004606:	2300      	moveq	r3, #0
 8004608:	b2db      	uxtb	r3, r3
}
 800460a:	4618      	mov	r0, r3
 800460c:	bd80      	pop	{r7, pc}
 800460e:	bf00      	nop
 8004610:	20002c84 	.word	0x20002c84
 8004614:	20002c74 	.word	0x20002c74

08004618 <rda5807_Get_Channel>:
//==============================================================================
uint16_t rda5807_Get_Channel()
{
 8004618:	b580      	push	{r7, lr}
 800461a:	af00      	add	r7, sp, #0
//tReg0Ah reg0A;

    // Читаем регистр 0x0A
    rda5807_read(0x0A, (uint16_t *)&Buffs.Reg0A, 1);
 800461c:	2201      	movs	r2, #1
 800461e:	4905      	ldr	r1, [pc, #20]	; (8004634 <rda5807_Get_Channel+0x1c>)
 8004620:	200a      	movs	r0, #10
 8004622:	f7ff fd13 	bl	800404c <rda5807_read>

    return Buffs.Reg0A.bREADCHAN;    // 0-9 Read Channel.
 8004626:	4b04      	ldr	r3, [pc, #16]	; (8004638 <rda5807_Get_Channel+0x20>)
 8004628:	8a1b      	ldrh	r3, [r3, #16]
 800462a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800462e:	b29b      	uxth	r3, r3
}
 8004630:	4618      	mov	r0, r3
 8004632:	bd80      	pop	{r7, pc}
 8004634:	20002c84 	.word	0x20002c84
 8004638:	20002c74 	.word	0x20002c74

0800463c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800463c:	b480      	push	{r7}
 800463e:	b083      	sub	sp, #12
 8004640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004642:	4b0f      	ldr	r3, [pc, #60]	; (8004680 <HAL_MspInit+0x44>)
 8004644:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004646:	4a0e      	ldr	r2, [pc, #56]	; (8004680 <HAL_MspInit+0x44>)
 8004648:	f043 0301 	orr.w	r3, r3, #1
 800464c:	6613      	str	r3, [r2, #96]	; 0x60
 800464e:	4b0c      	ldr	r3, [pc, #48]	; (8004680 <HAL_MspInit+0x44>)
 8004650:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004652:	f003 0301 	and.w	r3, r3, #1
 8004656:	607b      	str	r3, [r7, #4]
 8004658:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800465a:	4b09      	ldr	r3, [pc, #36]	; (8004680 <HAL_MspInit+0x44>)
 800465c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800465e:	4a08      	ldr	r2, [pc, #32]	; (8004680 <HAL_MspInit+0x44>)
 8004660:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004664:	6593      	str	r3, [r2, #88]	; 0x58
 8004666:	4b06      	ldr	r3, [pc, #24]	; (8004680 <HAL_MspInit+0x44>)
 8004668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800466a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800466e:	603b      	str	r3, [r7, #0]
 8004670:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004672:	bf00      	nop
 8004674:	370c      	adds	r7, #12
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr
 800467e:	bf00      	nop
 8004680:	40021000 	.word	0x40021000

08004684 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b0ac      	sub	sp, #176	; 0xb0
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800468c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004690:	2200      	movs	r2, #0
 8004692:	601a      	str	r2, [r3, #0]
 8004694:	605a      	str	r2, [r3, #4]
 8004696:	609a      	str	r2, [r3, #8]
 8004698:	60da      	str	r2, [r3, #12]
 800469a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800469c:	f107 0314 	add.w	r3, r7, #20
 80046a0:	2288      	movs	r2, #136	; 0x88
 80046a2:	2100      	movs	r1, #0
 80046a4:	4618      	mov	r0, r3
 80046a6:	f009 f8e1 	bl	800d86c <memset>
  if(hi2c->Instance==I2C1)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a57      	ldr	r2, [pc, #348]	; (800480c <HAL_I2C_MspInit+0x188>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	f040 80a7 	bne.w	8004804 <HAL_I2C_MspInit+0x180>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80046b6:	2340      	movs	r3, #64	; 0x40
 80046b8:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80046ba:	2300      	movs	r3, #0
 80046bc:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80046be:	f107 0314 	add.w	r3, r7, #20
 80046c2:	4618      	mov	r0, r3
 80046c4:	f004 faf6 	bl	8008cb4 <HAL_RCCEx_PeriphCLKConfig>
 80046c8:	4603      	mov	r3, r0
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d001      	beq.n	80046d2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80046ce:	f7ff fbd5 	bl	8003e7c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80046d2:	4b4f      	ldr	r3, [pc, #316]	; (8004810 <HAL_I2C_MspInit+0x18c>)
 80046d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046d6:	4a4e      	ldr	r2, [pc, #312]	; (8004810 <HAL_I2C_MspInit+0x18c>)
 80046d8:	f043 0302 	orr.w	r3, r3, #2
 80046dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80046de:	4b4c      	ldr	r3, [pc, #304]	; (8004810 <HAL_I2C_MspInit+0x18c>)
 80046e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046e2:	f003 0302 	and.w	r3, r3, #2
 80046e6:	613b      	str	r3, [r7, #16]
 80046e8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80046ea:	23c0      	movs	r3, #192	; 0xc0
 80046ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80046f0:	2312      	movs	r3, #18
 80046f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046f6:	2300      	movs	r3, #0
 80046f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80046fc:	2302      	movs	r3, #2
 80046fe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004702:	2304      	movs	r3, #4
 8004704:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004708:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800470c:	4619      	mov	r1, r3
 800470e:	4841      	ldr	r0, [pc, #260]	; (8004814 <HAL_I2C_MspInit+0x190>)
 8004710:	f001 fde6 	bl	80062e0 <HAL_GPIO_Init>

    HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_PB6);
 8004714:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8004718:	f003 fc48 	bl	8007fac <HAL_I2CEx_EnableFastModePlus>

    HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_PB7);
 800471c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8004720:	f003 fc44 	bl	8007fac <HAL_I2CEx_EnableFastModePlus>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004724:	4b3a      	ldr	r3, [pc, #232]	; (8004810 <HAL_I2C_MspInit+0x18c>)
 8004726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004728:	4a39      	ldr	r2, [pc, #228]	; (8004810 <HAL_I2C_MspInit+0x18c>)
 800472a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800472e:	6593      	str	r3, [r2, #88]	; 0x58
 8004730:	4b37      	ldr	r3, [pc, #220]	; (8004810 <HAL_I2C_MspInit+0x18c>)
 8004732:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004734:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004738:	60fb      	str	r3, [r7, #12]
 800473a:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA2_Channel6;
 800473c:	4b36      	ldr	r3, [pc, #216]	; (8004818 <HAL_I2C_MspInit+0x194>)
 800473e:	4a37      	ldr	r2, [pc, #220]	; (800481c <HAL_I2C_MspInit+0x198>)
 8004740:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_5;
 8004742:	4b35      	ldr	r3, [pc, #212]	; (8004818 <HAL_I2C_MspInit+0x194>)
 8004744:	2205      	movs	r2, #5
 8004746:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004748:	4b33      	ldr	r3, [pc, #204]	; (8004818 <HAL_I2C_MspInit+0x194>)
 800474a:	2200      	movs	r2, #0
 800474c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800474e:	4b32      	ldr	r3, [pc, #200]	; (8004818 <HAL_I2C_MspInit+0x194>)
 8004750:	2200      	movs	r2, #0
 8004752:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004754:	4b30      	ldr	r3, [pc, #192]	; (8004818 <HAL_I2C_MspInit+0x194>)
 8004756:	2280      	movs	r2, #128	; 0x80
 8004758:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800475a:	4b2f      	ldr	r3, [pc, #188]	; (8004818 <HAL_I2C_MspInit+0x194>)
 800475c:	2200      	movs	r2, #0
 800475e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004760:	4b2d      	ldr	r3, [pc, #180]	; (8004818 <HAL_I2C_MspInit+0x194>)
 8004762:	2200      	movs	r2, #0
 8004764:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8004766:	4b2c      	ldr	r3, [pc, #176]	; (8004818 <HAL_I2C_MspInit+0x194>)
 8004768:	2200      	movs	r2, #0
 800476a:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800476c:	4b2a      	ldr	r3, [pc, #168]	; (8004818 <HAL_I2C_MspInit+0x194>)
 800476e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004772:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8004774:	4828      	ldr	r0, [pc, #160]	; (8004818 <HAL_I2C_MspInit+0x194>)
 8004776:	f001 fb2f 	bl	8005dd8 <HAL_DMA_Init>
 800477a:	4603      	mov	r3, r0
 800477c:	2b00      	cmp	r3, #0
 800477e:	d001      	beq.n	8004784 <HAL_I2C_MspInit+0x100>
    {
      Error_Handler();
 8004780:	f7ff fb7c 	bl	8003e7c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	4a24      	ldr	r2, [pc, #144]	; (8004818 <HAL_I2C_MspInit+0x194>)
 8004788:	63da      	str	r2, [r3, #60]	; 0x3c
 800478a:	4a23      	ldr	r2, [pc, #140]	; (8004818 <HAL_I2C_MspInit+0x194>)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8004790:	4b23      	ldr	r3, [pc, #140]	; (8004820 <HAL_I2C_MspInit+0x19c>)
 8004792:	4a24      	ldr	r2, [pc, #144]	; (8004824 <HAL_I2C_MspInit+0x1a0>)
 8004794:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_3;
 8004796:	4b22      	ldr	r3, [pc, #136]	; (8004820 <HAL_I2C_MspInit+0x19c>)
 8004798:	2203      	movs	r2, #3
 800479a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800479c:	4b20      	ldr	r3, [pc, #128]	; (8004820 <HAL_I2C_MspInit+0x19c>)
 800479e:	2210      	movs	r2, #16
 80047a0:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80047a2:	4b1f      	ldr	r3, [pc, #124]	; (8004820 <HAL_I2C_MspInit+0x19c>)
 80047a4:	2200      	movs	r2, #0
 80047a6:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80047a8:	4b1d      	ldr	r3, [pc, #116]	; (8004820 <HAL_I2C_MspInit+0x19c>)
 80047aa:	2280      	movs	r2, #128	; 0x80
 80047ac:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80047ae:	4b1c      	ldr	r3, [pc, #112]	; (8004820 <HAL_I2C_MspInit+0x19c>)
 80047b0:	2200      	movs	r2, #0
 80047b2:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80047b4:	4b1a      	ldr	r3, [pc, #104]	; (8004820 <HAL_I2C_MspInit+0x19c>)
 80047b6:	2200      	movs	r2, #0
 80047b8:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80047ba:	4b19      	ldr	r3, [pc, #100]	; (8004820 <HAL_I2C_MspInit+0x19c>)
 80047bc:	2200      	movs	r2, #0
 80047be:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80047c0:	4b17      	ldr	r3, [pc, #92]	; (8004820 <HAL_I2C_MspInit+0x19c>)
 80047c2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80047c6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80047c8:	4815      	ldr	r0, [pc, #84]	; (8004820 <HAL_I2C_MspInit+0x19c>)
 80047ca:	f001 fb05 	bl	8005dd8 <HAL_DMA_Init>
 80047ce:	4603      	mov	r3, r0
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d001      	beq.n	80047d8 <HAL_I2C_MspInit+0x154>
    {
      Error_Handler();
 80047d4:	f7ff fb52 	bl	8003e7c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	4a11      	ldr	r2, [pc, #68]	; (8004820 <HAL_I2C_MspInit+0x19c>)
 80047dc:	639a      	str	r2, [r3, #56]	; 0x38
 80047de:	4a10      	ldr	r2, [pc, #64]	; (8004820 <HAL_I2C_MspInit+0x19c>)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80047e4:	2200      	movs	r2, #0
 80047e6:	2100      	movs	r1, #0
 80047e8:	201f      	movs	r0, #31
 80047ea:	f001 fab0 	bl	8005d4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80047ee:	201f      	movs	r0, #31
 80047f0:	f001 fac9 	bl	8005d86 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80047f4:	2200      	movs	r2, #0
 80047f6:	2100      	movs	r1, #0
 80047f8:	2020      	movs	r0, #32
 80047fa:	f001 faa8 	bl	8005d4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80047fe:	2020      	movs	r0, #32
 8004800:	f001 fac1 	bl	8005d86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004804:	bf00      	nop
 8004806:	37b0      	adds	r7, #176	; 0xb0
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}
 800480c:	40005400 	.word	0x40005400
 8004810:	40021000 	.word	0x40021000
 8004814:	48000400 	.word	0x48000400
 8004818:	20000838 	.word	0x20000838
 800481c:	4002046c 	.word	0x4002046c
 8004820:	20000880 	.word	0x20000880
 8004824:	4002006c 	.word	0x4002006c

08004828 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b0a4      	sub	sp, #144	; 0x90
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004830:	f107 0308 	add.w	r3, r7, #8
 8004834:	2288      	movs	r2, #136	; 0x88
 8004836:	2100      	movs	r1, #0
 8004838:	4618      	mov	r0, r3
 800483a:	f009 f817 	bl	800d86c <memset>
  if(hrtc->Instance==RTC)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a10      	ldr	r2, [pc, #64]	; (8004884 <HAL_RTC_MspInit+0x5c>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d118      	bne.n	800487a <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004848:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800484c:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800484e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004852:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004856:	f107 0308 	add.w	r3, r7, #8
 800485a:	4618      	mov	r0, r3
 800485c:	f004 fa2a 	bl	8008cb4 <HAL_RCCEx_PeriphCLKConfig>
 8004860:	4603      	mov	r3, r0
 8004862:	2b00      	cmp	r3, #0
 8004864:	d001      	beq.n	800486a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8004866:	f7ff fb09 	bl	8003e7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800486a:	4b07      	ldr	r3, [pc, #28]	; (8004888 <HAL_RTC_MspInit+0x60>)
 800486c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004870:	4a05      	ldr	r2, [pc, #20]	; (8004888 <HAL_RTC_MspInit+0x60>)
 8004872:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004876:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800487a:	bf00      	nop
 800487c:	3790      	adds	r7, #144	; 0x90
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
 8004882:	bf00      	nop
 8004884:	40002800 	.word	0x40002800
 8004888:	40021000 	.word	0x40021000

0800488c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b08c      	sub	sp, #48	; 0x30
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004894:	f107 031c 	add.w	r3, r7, #28
 8004898:	2200      	movs	r2, #0
 800489a:	601a      	str	r2, [r3, #0]
 800489c:	605a      	str	r2, [r3, #4]
 800489e:	609a      	str	r2, [r3, #8]
 80048a0:	60da      	str	r2, [r3, #12]
 80048a2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a76      	ldr	r2, [pc, #472]	; (8004a84 <HAL_SPI_MspInit+0x1f8>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d15b      	bne.n	8004966 <HAL_SPI_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80048ae:	4b76      	ldr	r3, [pc, #472]	; (8004a88 <HAL_SPI_MspInit+0x1fc>)
 80048b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048b2:	4a75      	ldr	r2, [pc, #468]	; (8004a88 <HAL_SPI_MspInit+0x1fc>)
 80048b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80048b8:	6613      	str	r3, [r2, #96]	; 0x60
 80048ba:	4b73      	ldr	r3, [pc, #460]	; (8004a88 <HAL_SPI_MspInit+0x1fc>)
 80048bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80048c2:	61bb      	str	r3, [r7, #24]
 80048c4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048c6:	4b70      	ldr	r3, [pc, #448]	; (8004a88 <HAL_SPI_MspInit+0x1fc>)
 80048c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048ca:	4a6f      	ldr	r2, [pc, #444]	; (8004a88 <HAL_SPI_MspInit+0x1fc>)
 80048cc:	f043 0301 	orr.w	r3, r3, #1
 80048d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80048d2:	4b6d      	ldr	r3, [pc, #436]	; (8004a88 <HAL_SPI_MspInit+0x1fc>)
 80048d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048d6:	f003 0301 	and.w	r3, r3, #1
 80048da:	617b      	str	r3, [r7, #20]
 80048dc:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80048de:	23a0      	movs	r3, #160	; 0xa0
 80048e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048e2:	2302      	movs	r3, #2
 80048e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048e6:	2300      	movs	r3, #0
 80048e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048ea:	2303      	movs	r3, #3
 80048ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80048ee:	2305      	movs	r3, #5
 80048f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048f2:	f107 031c 	add.w	r3, r7, #28
 80048f6:	4619      	mov	r1, r3
 80048f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80048fc:	f001 fcf0 	bl	80062e0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8004900:	4b62      	ldr	r3, [pc, #392]	; (8004a8c <HAL_SPI_MspInit+0x200>)
 8004902:	4a63      	ldr	r2, [pc, #396]	; (8004a90 <HAL_SPI_MspInit+0x204>)
 8004904:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 8004906:	4b61      	ldr	r3, [pc, #388]	; (8004a8c <HAL_SPI_MspInit+0x200>)
 8004908:	2201      	movs	r2, #1
 800490a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800490c:	4b5f      	ldr	r3, [pc, #380]	; (8004a8c <HAL_SPI_MspInit+0x200>)
 800490e:	2210      	movs	r2, #16
 8004910:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004912:	4b5e      	ldr	r3, [pc, #376]	; (8004a8c <HAL_SPI_MspInit+0x200>)
 8004914:	2200      	movs	r2, #0
 8004916:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004918:	4b5c      	ldr	r3, [pc, #368]	; (8004a8c <HAL_SPI_MspInit+0x200>)
 800491a:	2280      	movs	r2, #128	; 0x80
 800491c:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800491e:	4b5b      	ldr	r3, [pc, #364]	; (8004a8c <HAL_SPI_MspInit+0x200>)
 8004920:	2200      	movs	r2, #0
 8004922:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004924:	4b59      	ldr	r3, [pc, #356]	; (8004a8c <HAL_SPI_MspInit+0x200>)
 8004926:	2200      	movs	r2, #0
 8004928:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800492a:	4b58      	ldr	r3, [pc, #352]	; (8004a8c <HAL_SPI_MspInit+0x200>)
 800492c:	2200      	movs	r2, #0
 800492e:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8004930:	4b56      	ldr	r3, [pc, #344]	; (8004a8c <HAL_SPI_MspInit+0x200>)
 8004932:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004936:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8004938:	4854      	ldr	r0, [pc, #336]	; (8004a8c <HAL_SPI_MspInit+0x200>)
 800493a:	f001 fa4d 	bl	8005dd8 <HAL_DMA_Init>
 800493e:	4603      	mov	r3, r0
 8004940:	2b00      	cmp	r3, #0
 8004942:	d001      	beq.n	8004948 <HAL_SPI_MspInit+0xbc>
    {
      Error_Handler();
 8004944:	f7ff fa9a 	bl	8003e7c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	4a50      	ldr	r2, [pc, #320]	; (8004a8c <HAL_SPI_MspInit+0x200>)
 800494c:	655a      	str	r2, [r3, #84]	; 0x54
 800494e:	4a4f      	ldr	r2, [pc, #316]	; (8004a8c <HAL_SPI_MspInit+0x200>)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8004954:	2200      	movs	r2, #0
 8004956:	2100      	movs	r1, #0
 8004958:	2023      	movs	r0, #35	; 0x23
 800495a:	f001 f9f8 	bl	8005d4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800495e:	2023      	movs	r0, #35	; 0x23
 8004960:	f001 fa11 	bl	8005d86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004964:	e08a      	b.n	8004a7c <HAL_SPI_MspInit+0x1f0>
  else if(hspi->Instance==SPI2)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a4a      	ldr	r2, [pc, #296]	; (8004a94 <HAL_SPI_MspInit+0x208>)
 800496c:	4293      	cmp	r3, r2
 800496e:	f040 8085 	bne.w	8004a7c <HAL_SPI_MspInit+0x1f0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004972:	4b45      	ldr	r3, [pc, #276]	; (8004a88 <HAL_SPI_MspInit+0x1fc>)
 8004974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004976:	4a44      	ldr	r2, [pc, #272]	; (8004a88 <HAL_SPI_MspInit+0x1fc>)
 8004978:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800497c:	6593      	str	r3, [r2, #88]	; 0x58
 800497e:	4b42      	ldr	r3, [pc, #264]	; (8004a88 <HAL_SPI_MspInit+0x1fc>)
 8004980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004982:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004986:	613b      	str	r3, [r7, #16]
 8004988:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800498a:	4b3f      	ldr	r3, [pc, #252]	; (8004a88 <HAL_SPI_MspInit+0x1fc>)
 800498c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800498e:	4a3e      	ldr	r2, [pc, #248]	; (8004a88 <HAL_SPI_MspInit+0x1fc>)
 8004990:	f043 0302 	orr.w	r3, r3, #2
 8004994:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004996:	4b3c      	ldr	r3, [pc, #240]	; (8004a88 <HAL_SPI_MspInit+0x1fc>)
 8004998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800499a:	f003 0302 	and.w	r3, r3, #2
 800499e:	60fb      	str	r3, [r7, #12]
 80049a0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80049a2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80049a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049a8:	2302      	movs	r3, #2
 80049aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049ac:	2300      	movs	r3, #0
 80049ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049b0:	2303      	movs	r3, #3
 80049b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80049b4:	2305      	movs	r3, #5
 80049b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049b8:	f107 031c 	add.w	r3, r7, #28
 80049bc:	4619      	mov	r1, r3
 80049be:	4836      	ldr	r0, [pc, #216]	; (8004a98 <HAL_SPI_MspInit+0x20c>)
 80049c0:	f001 fc8e 	bl	80062e0 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Channel4;
 80049c4:	4b35      	ldr	r3, [pc, #212]	; (8004a9c <HAL_SPI_MspInit+0x210>)
 80049c6:	4a36      	ldr	r2, [pc, #216]	; (8004aa0 <HAL_SPI_MspInit+0x214>)
 80049c8:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_1;
 80049ca:	4b34      	ldr	r3, [pc, #208]	; (8004a9c <HAL_SPI_MspInit+0x210>)
 80049cc:	2201      	movs	r2, #1
 80049ce:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80049d0:	4b32      	ldr	r3, [pc, #200]	; (8004a9c <HAL_SPI_MspInit+0x210>)
 80049d2:	2200      	movs	r2, #0
 80049d4:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80049d6:	4b31      	ldr	r3, [pc, #196]	; (8004a9c <HAL_SPI_MspInit+0x210>)
 80049d8:	2200      	movs	r2, #0
 80049da:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80049dc:	4b2f      	ldr	r3, [pc, #188]	; (8004a9c <HAL_SPI_MspInit+0x210>)
 80049de:	2280      	movs	r2, #128	; 0x80
 80049e0:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80049e2:	4b2e      	ldr	r3, [pc, #184]	; (8004a9c <HAL_SPI_MspInit+0x210>)
 80049e4:	2200      	movs	r2, #0
 80049e6:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80049e8:	4b2c      	ldr	r3, [pc, #176]	; (8004a9c <HAL_SPI_MspInit+0x210>)
 80049ea:	2200      	movs	r2, #0
 80049ec:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 80049ee:	4b2b      	ldr	r3, [pc, #172]	; (8004a9c <HAL_SPI_MspInit+0x210>)
 80049f0:	2200      	movs	r2, #0
 80049f2:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80049f4:	4b29      	ldr	r3, [pc, #164]	; (8004a9c <HAL_SPI_MspInit+0x210>)
 80049f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80049fa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80049fc:	4827      	ldr	r0, [pc, #156]	; (8004a9c <HAL_SPI_MspInit+0x210>)
 80049fe:	f001 f9eb 	bl	8005dd8 <HAL_DMA_Init>
 8004a02:	4603      	mov	r3, r0
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d001      	beq.n	8004a0c <HAL_SPI_MspInit+0x180>
      Error_Handler();
 8004a08:	f7ff fa38 	bl	8003e7c <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	4a23      	ldr	r2, [pc, #140]	; (8004a9c <HAL_SPI_MspInit+0x210>)
 8004a10:	659a      	str	r2, [r3, #88]	; 0x58
 8004a12:	4a22      	ldr	r2, [pc, #136]	; (8004a9c <HAL_SPI_MspInit+0x210>)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8004a18:	4b22      	ldr	r3, [pc, #136]	; (8004aa4 <HAL_SPI_MspInit+0x218>)
 8004a1a:	4a23      	ldr	r2, [pc, #140]	; (8004aa8 <HAL_SPI_MspInit+0x21c>)
 8004a1c:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_1;
 8004a1e:	4b21      	ldr	r3, [pc, #132]	; (8004aa4 <HAL_SPI_MspInit+0x218>)
 8004a20:	2201      	movs	r2, #1
 8004a22:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004a24:	4b1f      	ldr	r3, [pc, #124]	; (8004aa4 <HAL_SPI_MspInit+0x218>)
 8004a26:	2210      	movs	r2, #16
 8004a28:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004a2a:	4b1e      	ldr	r3, [pc, #120]	; (8004aa4 <HAL_SPI_MspInit+0x218>)
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004a30:	4b1c      	ldr	r3, [pc, #112]	; (8004aa4 <HAL_SPI_MspInit+0x218>)
 8004a32:	2280      	movs	r2, #128	; 0x80
 8004a34:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004a36:	4b1b      	ldr	r3, [pc, #108]	; (8004aa4 <HAL_SPI_MspInit+0x218>)
 8004a38:	2200      	movs	r2, #0
 8004a3a:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004a3c:	4b19      	ldr	r3, [pc, #100]	; (8004aa4 <HAL_SPI_MspInit+0x218>)
 8004a3e:	2200      	movs	r2, #0
 8004a40:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8004a42:	4b18      	ldr	r3, [pc, #96]	; (8004aa4 <HAL_SPI_MspInit+0x218>)
 8004a44:	2200      	movs	r2, #0
 8004a46:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8004a48:	4b16      	ldr	r3, [pc, #88]	; (8004aa4 <HAL_SPI_MspInit+0x218>)
 8004a4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004a4e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8004a50:	4814      	ldr	r0, [pc, #80]	; (8004aa4 <HAL_SPI_MspInit+0x218>)
 8004a52:	f001 f9c1 	bl	8005dd8 <HAL_DMA_Init>
 8004a56:	4603      	mov	r3, r0
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d001      	beq.n	8004a60 <HAL_SPI_MspInit+0x1d4>
      Error_Handler();
 8004a5c:	f7ff fa0e 	bl	8003e7c <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	4a10      	ldr	r2, [pc, #64]	; (8004aa4 <HAL_SPI_MspInit+0x218>)
 8004a64:	655a      	str	r2, [r3, #84]	; 0x54
 8004a66:	4a0f      	ldr	r2, [pc, #60]	; (8004aa4 <HAL_SPI_MspInit+0x218>)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	2100      	movs	r1, #0
 8004a70:	2024      	movs	r0, #36	; 0x24
 8004a72:	f001 f96c 	bl	8005d4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8004a76:	2024      	movs	r0, #36	; 0x24
 8004a78:	f001 f985 	bl	8005d86 <HAL_NVIC_EnableIRQ>
}
 8004a7c:	bf00      	nop
 8004a7e:	3730      	adds	r7, #48	; 0x30
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}
 8004a84:	40013000 	.word	0x40013000
 8004a88:	40021000 	.word	0x40021000
 8004a8c:	200009b4 	.word	0x200009b4
 8004a90:	40020030 	.word	0x40020030
 8004a94:	40003800 	.word	0x40003800
 8004a98:	48000400 	.word	0x48000400
 8004a9c:	200009fc 	.word	0x200009fc
 8004aa0:	40020044 	.word	0x40020044
 8004aa4:	20000a44 	.word	0x20000a44
 8004aa8:	40020058 	.word	0x40020058

08004aac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b084      	sub	sp, #16
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a0d      	ldr	r2, [pc, #52]	; (8004af0 <HAL_TIM_Base_MspInit+0x44>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d113      	bne.n	8004ae6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004abe:	4b0d      	ldr	r3, [pc, #52]	; (8004af4 <HAL_TIM_Base_MspInit+0x48>)
 8004ac0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ac2:	4a0c      	ldr	r2, [pc, #48]	; (8004af4 <HAL_TIM_Base_MspInit+0x48>)
 8004ac4:	f043 0304 	orr.w	r3, r3, #4
 8004ac8:	6593      	str	r3, [r2, #88]	; 0x58
 8004aca:	4b0a      	ldr	r3, [pc, #40]	; (8004af4 <HAL_TIM_Base_MspInit+0x48>)
 8004acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ace:	f003 0304 	and.w	r3, r3, #4
 8004ad2:	60fb      	str	r3, [r7, #12]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 2, 0);
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	2102      	movs	r1, #2
 8004ada:	201e      	movs	r0, #30
 8004adc:	f001 f937 	bl	8005d4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004ae0:	201e      	movs	r0, #30
 8004ae2:	f001 f950 	bl	8005d86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8004ae6:	bf00      	nop
 8004ae8:	3710      	adds	r7, #16
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}
 8004aee:	bf00      	nop
 8004af0:	40000800 	.word	0x40000800
 8004af4:	40021000 	.word	0x40021000

08004af8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b0ac      	sub	sp, #176	; 0xb0
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b00:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004b04:	2200      	movs	r2, #0
 8004b06:	601a      	str	r2, [r3, #0]
 8004b08:	605a      	str	r2, [r3, #4]
 8004b0a:	609a      	str	r2, [r3, #8]
 8004b0c:	60da      	str	r2, [r3, #12]
 8004b0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004b10:	f107 0314 	add.w	r3, r7, #20
 8004b14:	2288      	movs	r2, #136	; 0x88
 8004b16:	2100      	movs	r1, #0
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f008 fea7 	bl	800d86c <memset>
  if(huart->Instance==USART2)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a3a      	ldr	r2, [pc, #232]	; (8004c0c <HAL_UART_MspInit+0x114>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d16d      	bne.n	8004c04 <HAL_UART_MspInit+0x10c>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004b28:	2302      	movs	r3, #2
 8004b2a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004b30:	f107 0314 	add.w	r3, r7, #20
 8004b34:	4618      	mov	r0, r3
 8004b36:	f004 f8bd 	bl	8008cb4 <HAL_RCCEx_PeriphCLKConfig>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d001      	beq.n	8004b44 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8004b40:	f7ff f99c 	bl	8003e7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004b44:	4b32      	ldr	r3, [pc, #200]	; (8004c10 <HAL_UART_MspInit+0x118>)
 8004b46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b48:	4a31      	ldr	r2, [pc, #196]	; (8004c10 <HAL_UART_MspInit+0x118>)
 8004b4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b4e:	6593      	str	r3, [r2, #88]	; 0x58
 8004b50:	4b2f      	ldr	r3, [pc, #188]	; (8004c10 <HAL_UART_MspInit+0x118>)
 8004b52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b58:	613b      	str	r3, [r7, #16]
 8004b5a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b5c:	4b2c      	ldr	r3, [pc, #176]	; (8004c10 <HAL_UART_MspInit+0x118>)
 8004b5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b60:	4a2b      	ldr	r2, [pc, #172]	; (8004c10 <HAL_UART_MspInit+0x118>)
 8004b62:	f043 0301 	orr.w	r3, r3, #1
 8004b66:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004b68:	4b29      	ldr	r3, [pc, #164]	; (8004c10 <HAL_UART_MspInit+0x118>)
 8004b6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b6c:	f003 0301 	and.w	r3, r3, #1
 8004b70:	60fb      	str	r3, [r7, #12]
 8004b72:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = LOG_TX_Pin|LOG_RX_Pin;
 8004b74:	230c      	movs	r3, #12
 8004b76:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b7a:	2302      	movs	r3, #2
 8004b7c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b80:	2300      	movs	r3, #0
 8004b82:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b86:	2303      	movs	r3, #3
 8004b88:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004b8c:	2307      	movs	r3, #7
 8004b8e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b92:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004b96:	4619      	mov	r1, r3
 8004b98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004b9c:	f001 fba0 	bl	80062e0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8004ba0:	4b1c      	ldr	r3, [pc, #112]	; (8004c14 <HAL_UART_MspInit+0x11c>)
 8004ba2:	4a1d      	ldr	r2, [pc, #116]	; (8004c18 <HAL_UART_MspInit+0x120>)
 8004ba4:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8004ba6:	4b1b      	ldr	r3, [pc, #108]	; (8004c14 <HAL_UART_MspInit+0x11c>)
 8004ba8:	2202      	movs	r2, #2
 8004baa:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004bac:	4b19      	ldr	r3, [pc, #100]	; (8004c14 <HAL_UART_MspInit+0x11c>)
 8004bae:	2210      	movs	r2, #16
 8004bb0:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004bb2:	4b18      	ldr	r3, [pc, #96]	; (8004c14 <HAL_UART_MspInit+0x11c>)
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004bb8:	4b16      	ldr	r3, [pc, #88]	; (8004c14 <HAL_UART_MspInit+0x11c>)
 8004bba:	2280      	movs	r2, #128	; 0x80
 8004bbc:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004bbe:	4b15      	ldr	r3, [pc, #84]	; (8004c14 <HAL_UART_MspInit+0x11c>)
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004bc4:	4b13      	ldr	r3, [pc, #76]	; (8004c14 <HAL_UART_MspInit+0x11c>)
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8004bca:	4b12      	ldr	r3, [pc, #72]	; (8004c14 <HAL_UART_MspInit+0x11c>)
 8004bcc:	2200      	movs	r2, #0
 8004bce:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004bd0:	4b10      	ldr	r3, [pc, #64]	; (8004c14 <HAL_UART_MspInit+0x11c>)
 8004bd2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004bd6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004bd8:	480e      	ldr	r0, [pc, #56]	; (8004c14 <HAL_UART_MspInit+0x11c>)
 8004bda:	f001 f8fd 	bl	8005dd8 <HAL_DMA_Init>
 8004bde:	4603      	mov	r3, r0
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d001      	beq.n	8004be8 <HAL_UART_MspInit+0xf0>
    {
      Error_Handler();
 8004be4:	f7ff f94a 	bl	8003e7c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	4a0a      	ldr	r2, [pc, #40]	; (8004c14 <HAL_UART_MspInit+0x11c>)
 8004bec:	66da      	str	r2, [r3, #108]	; 0x6c
 8004bee:	4a09      	ldr	r2, [pc, #36]	; (8004c14 <HAL_UART_MspInit+0x11c>)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	2101      	movs	r1, #1
 8004bf8:	2026      	movs	r0, #38	; 0x26
 8004bfa:	f001 f8a8 	bl	8005d4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004bfe:	2026      	movs	r0, #38	; 0x26
 8004c00:	f001 f8c1 	bl	8005d86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004c04:	bf00      	nop
 8004c06:	37b0      	adds	r7, #176	; 0xb0
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}
 8004c0c:	40004400 	.word	0x40004400
 8004c10:	40021000 	.word	0x40021000
 8004c14:	20000b5c 	.word	0x20000b5c
 8004c18:	40020080 	.word	0x40020080

08004c1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004c20:	e7fe      	b.n	8004c20 <NMI_Handler+0x4>

08004c22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004c22:	b480      	push	{r7}
 8004c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004c26:	e7fe      	b.n	8004c26 <HardFault_Handler+0x4>

08004c28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004c2c:	e7fe      	b.n	8004c2c <MemManage_Handler+0x4>

08004c2e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004c2e:	b480      	push	{r7}
 8004c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004c32:	e7fe      	b.n	8004c32 <BusFault_Handler+0x4>

08004c34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004c34:	b480      	push	{r7}
 8004c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004c38:	e7fe      	b.n	8004c38 <UsageFault_Handler+0x4>

08004c3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004c3a:	b480      	push	{r7}
 8004c3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004c3e:	bf00      	nop
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr

08004c48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004c4c:	bf00      	nop
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr

08004c56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004c56:	b480      	push	{r7}
 8004c58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004c5a:	bf00      	nop
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c62:	4770      	bx	lr

08004c64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004c68:	f000 ff2e 	bl	8005ac8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004c6c:	bf00      	nop
 8004c6e:	bd80      	pop	{r7, pc}

08004c70 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY0_Pin);
 8004c74:	2002      	movs	r0, #2
 8004c76:	f001 fd27 	bl	80066c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8004c7a:	bf00      	nop
 8004c7c:	bd80      	pop	{r7, pc}

08004c7e <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8004c7e:	b580      	push	{r7, lr}
 8004c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY1_Pin);
 8004c82:	2004      	movs	r0, #4
 8004c84:	f001 fd20 	bl	80066c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8004c88:	bf00      	nop
 8004c8a:	bd80      	pop	{r7, pc}

08004c8c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8004c90:	4802      	ldr	r0, [pc, #8]	; (8004c9c <DMA1_Channel3_IRQHandler+0x10>)
 8004c92:	f001 fa38 	bl	8006106 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8004c96:	bf00      	nop
 8004c98:	bd80      	pop	{r7, pc}
 8004c9a:	bf00      	nop
 8004c9c:	200009b4 	.word	0x200009b4

08004ca0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8004ca4:	4802      	ldr	r0, [pc, #8]	; (8004cb0 <DMA1_Channel4_IRQHandler+0x10>)
 8004ca6:	f001 fa2e 	bl	8006106 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8004caa:	bf00      	nop
 8004cac:	bd80      	pop	{r7, pc}
 8004cae:	bf00      	nop
 8004cb0:	200009fc 	.word	0x200009fc

08004cb4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8004cb8:	4802      	ldr	r0, [pc, #8]	; (8004cc4 <DMA1_Channel5_IRQHandler+0x10>)
 8004cba:	f001 fa24 	bl	8006106 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8004cbe:	bf00      	nop
 8004cc0:	bd80      	pop	{r7, pc}
 8004cc2:	bf00      	nop
 8004cc4:	20000a44 	.word	0x20000a44

08004cc8 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8004ccc:	4802      	ldr	r0, [pc, #8]	; (8004cd8 <DMA1_Channel6_IRQHandler+0x10>)
 8004cce:	f001 fa1a 	bl	8006106 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8004cd2:	bf00      	nop
 8004cd4:	bd80      	pop	{r7, pc}
 8004cd6:	bf00      	nop
 8004cd8:	20000880 	.word	0x20000880

08004cdc <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004ce0:	4802      	ldr	r0, [pc, #8]	; (8004cec <DMA1_Channel7_IRQHandler+0x10>)
 8004ce2:	f001 fa10 	bl	8006106 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8004ce6:	bf00      	nop
 8004ce8:	bd80      	pop	{r7, pc}
 8004cea:	bf00      	nop
 8004cec:	20000b5c 	.word	0x20000b5c

08004cf0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004cf4:	4802      	ldr	r0, [pc, #8]	; (8004d00 <TIM4_IRQHandler+0x10>)
 8004cf6:	f006 fcb4 	bl	800b662 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8004cfa:	bf00      	nop
 8004cfc:	bd80      	pop	{r7, pc}
 8004cfe:	bf00      	nop
 8004d00:	20000a8c 	.word	0x20000a8c

08004d04 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8004d08:	4802      	ldr	r0, [pc, #8]	; (8004d14 <I2C1_EV_IRQHandler+0x10>)
 8004d0a:	f002 f8a7 	bl	8006e5c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8004d0e:	bf00      	nop
 8004d10:	bd80      	pop	{r7, pc}
 8004d12:	bf00      	nop
 8004d14:	200007e4 	.word	0x200007e4

08004d18 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8004d1c:	4802      	ldr	r0, [pc, #8]	; (8004d28 <I2C1_ER_IRQHandler+0x10>)
 8004d1e:	f002 f8b7 	bl	8006e90 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8004d22:	bf00      	nop
 8004d24:	bd80      	pop	{r7, pc}
 8004d26:	bf00      	nop
 8004d28:	200007e4 	.word	0x200007e4

08004d2c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8004d30:	4802      	ldr	r0, [pc, #8]	; (8004d3c <SPI1_IRQHandler+0x10>)
 8004d32:	f005 ff69 	bl	800ac08 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8004d36:	bf00      	nop
 8004d38:	bd80      	pop	{r7, pc}
 8004d3a:	bf00      	nop
 8004d3c:	200008ec 	.word	0x200008ec

08004d40 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8004d44:	4802      	ldr	r0, [pc, #8]	; (8004d50 <SPI2_IRQHandler+0x10>)
 8004d46:	f005 ff5f 	bl	800ac08 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8004d4a:	bf00      	nop
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	bf00      	nop
 8004d50:	20000950 	.word	0x20000950

08004d54 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004d58:	4802      	ldr	r0, [pc, #8]	; (8004d64 <USART2_IRQHandler+0x10>)
 8004d5a:	f007 f9a1 	bl	800c0a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004d5e:	bf00      	nop
 8004d60:	bd80      	pop	{r7, pc}
 8004d62:	bf00      	nop
 8004d64:	20000ad8 	.word	0x20000ad8

08004d68 <DMA2_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA2 channel6 global interrupt.
  */
void DMA2_Channel6_IRQHandler(void)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel6_IRQn 0 */

  /* USER CODE END DMA2_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8004d6c:	4802      	ldr	r0, [pc, #8]	; (8004d78 <DMA2_Channel6_IRQHandler+0x10>)
 8004d6e:	f001 f9ca 	bl	8006106 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel6_IRQn 1 */

  /* USER CODE END DMA2_Channel6_IRQn 1 */
}
 8004d72:	bf00      	nop
 8004d74:	bd80      	pop	{r7, pc}
 8004d76:	bf00      	nop
 8004d78:	20000838 	.word	0x20000838

08004d7c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	af00      	add	r7, sp, #0
	return 1;
 8004d80:	2301      	movs	r3, #1
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr

08004d8c <_kill>:

int _kill(int pid, int sig)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b082      	sub	sp, #8
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004d96:	f008 fc85 	bl	800d6a4 <__errno>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	2216      	movs	r2, #22
 8004d9e:	601a      	str	r2, [r3, #0]
	return -1;
 8004da0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3708      	adds	r7, #8
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}

08004dac <_exit>:

void _exit (int status)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b082      	sub	sp, #8
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004db4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	f7ff ffe7 	bl	8004d8c <_kill>
	while (1) {}		/* Make sure we hang here */
 8004dbe:	e7fe      	b.n	8004dbe <_exit+0x12>

08004dc0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b086      	sub	sp, #24
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	60f8      	str	r0, [r7, #12]
 8004dc8:	60b9      	str	r1, [r7, #8]
 8004dca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004dcc:	2300      	movs	r3, #0
 8004dce:	617b      	str	r3, [r7, #20]
 8004dd0:	e00a      	b.n	8004de8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004dd2:	f3af 8000 	nop.w
 8004dd6:	4601      	mov	r1, r0
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	1c5a      	adds	r2, r3, #1
 8004ddc:	60ba      	str	r2, [r7, #8]
 8004dde:	b2ca      	uxtb	r2, r1
 8004de0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	3301      	adds	r3, #1
 8004de6:	617b      	str	r3, [r7, #20]
 8004de8:	697a      	ldr	r2, [r7, #20]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	429a      	cmp	r2, r3
 8004dee:	dbf0      	blt.n	8004dd2 <_read+0x12>
	}

return len;
 8004df0:	687b      	ldr	r3, [r7, #4]
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3718      	adds	r7, #24
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}

08004dfa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004dfa:	b580      	push	{r7, lr}
 8004dfc:	b086      	sub	sp, #24
 8004dfe:	af00      	add	r7, sp, #0
 8004e00:	60f8      	str	r0, [r7, #12]
 8004e02:	60b9      	str	r1, [r7, #8]
 8004e04:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004e06:	2300      	movs	r3, #0
 8004e08:	617b      	str	r3, [r7, #20]
 8004e0a:	e009      	b.n	8004e20 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	1c5a      	adds	r2, r3, #1
 8004e10:	60ba      	str	r2, [r7, #8]
 8004e12:	781b      	ldrb	r3, [r3, #0]
 8004e14:	4618      	mov	r0, r3
 8004e16:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	3301      	adds	r3, #1
 8004e1e:	617b      	str	r3, [r7, #20]
 8004e20:	697a      	ldr	r2, [r7, #20]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	429a      	cmp	r2, r3
 8004e26:	dbf1      	blt.n	8004e0c <_write+0x12>
	}
	return len;
 8004e28:	687b      	ldr	r3, [r7, #4]
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3718      	adds	r7, #24
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}

08004e32 <_close>:

int _close(int file)
{
 8004e32:	b480      	push	{r7}
 8004e34:	b083      	sub	sp, #12
 8004e36:	af00      	add	r7, sp, #0
 8004e38:	6078      	str	r0, [r7, #4]
	return -1;
 8004e3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	370c      	adds	r7, #12
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr

08004e4a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004e4a:	b480      	push	{r7}
 8004e4c:	b083      	sub	sp, #12
 8004e4e:	af00      	add	r7, sp, #0
 8004e50:	6078      	str	r0, [r7, #4]
 8004e52:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004e5a:	605a      	str	r2, [r3, #4]
	return 0;
 8004e5c:	2300      	movs	r3, #0
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	370c      	adds	r7, #12
 8004e62:	46bd      	mov	sp, r7
 8004e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e68:	4770      	bx	lr

08004e6a <_isatty>:

int _isatty(int file)
{
 8004e6a:	b480      	push	{r7}
 8004e6c:	b083      	sub	sp, #12
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	6078      	str	r0, [r7, #4]
	return 1;
 8004e72:	2301      	movs	r3, #1
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	370c      	adds	r7, #12
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr

08004e80 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b085      	sub	sp, #20
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	60f8      	str	r0, [r7, #12]
 8004e88:	60b9      	str	r1, [r7, #8]
 8004e8a:	607a      	str	r2, [r7, #4]
	return 0;
 8004e8c:	2300      	movs	r3, #0
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3714      	adds	r7, #20
 8004e92:	46bd      	mov	sp, r7
 8004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e98:	4770      	bx	lr
	...

08004e9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b086      	sub	sp, #24
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004ea4:	4a14      	ldr	r2, [pc, #80]	; (8004ef8 <_sbrk+0x5c>)
 8004ea6:	4b15      	ldr	r3, [pc, #84]	; (8004efc <_sbrk+0x60>)
 8004ea8:	1ad3      	subs	r3, r2, r3
 8004eaa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004eb0:	4b13      	ldr	r3, [pc, #76]	; (8004f00 <_sbrk+0x64>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d102      	bne.n	8004ebe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004eb8:	4b11      	ldr	r3, [pc, #68]	; (8004f00 <_sbrk+0x64>)
 8004eba:	4a12      	ldr	r2, [pc, #72]	; (8004f04 <_sbrk+0x68>)
 8004ebc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004ebe:	4b10      	ldr	r3, [pc, #64]	; (8004f00 <_sbrk+0x64>)
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	4413      	add	r3, r2
 8004ec6:	693a      	ldr	r2, [r7, #16]
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	d207      	bcs.n	8004edc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004ecc:	f008 fbea 	bl	800d6a4 <__errno>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	220c      	movs	r2, #12
 8004ed4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004ed6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004eda:	e009      	b.n	8004ef0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004edc:	4b08      	ldr	r3, [pc, #32]	; (8004f00 <_sbrk+0x64>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004ee2:	4b07      	ldr	r3, [pc, #28]	; (8004f00 <_sbrk+0x64>)
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	4413      	add	r3, r2
 8004eea:	4a05      	ldr	r2, [pc, #20]	; (8004f00 <_sbrk+0x64>)
 8004eec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004eee:	68fb      	ldr	r3, [r7, #12]
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	3718      	adds	r7, #24
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}
 8004ef8:	20018000 	.word	0x20018000
 8004efc:	00000c00 	.word	0x00000c00
 8004f00:	20002c88 	.word	0x20002c88
 8004f04:	20002dd0 	.word	0x20002dd0

08004f08 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8004f0c:	4b06      	ldr	r3, [pc, #24]	; (8004f28 <SystemInit+0x20>)
 8004f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f12:	4a05      	ldr	r2, [pc, #20]	; (8004f28 <SystemInit+0x20>)
 8004f14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004f18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8004f1c:	bf00      	nop
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr
 8004f26:	bf00      	nop
 8004f28:	e000ed00 	.word	0xe000ed00

08004f2c <W25_SELECT>:

extern void Report(const uint8_t addTime, const char *fmt, ...);

//------------------------------------------------------------------------------------------

void W25_SELECT()   { W25_SEL(); } //HAL_GPIO_WritePin(W25_CS_GPIO_Port, W25_CS_Pin, GPIO_PIN_RESET);//set to 0
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	af00      	add	r7, sp, #0
 8004f30:	2200      	movs	r2, #0
 8004f32:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004f36:	4802      	ldr	r0, [pc, #8]	; (8004f40 <W25_SELECT+0x14>)
 8004f38:	f001 fb94 	bl	8006664 <HAL_GPIO_WritePin>
 8004f3c:	bf00      	nop
 8004f3e:	bd80      	pop	{r7, pc}
 8004f40:	48000400 	.word	0x48000400

08004f44 <W25_UNSELECT>:
void W25_UNSELECT() { W25_UNSEL(); } //HAL_GPIO_WritePin(W25_CS_GPIO_Port, W25_CS_Pin, GPIO_PIN_SET);//set to 1
 8004f44:	b580      	push	{r7, lr}
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	2201      	movs	r2, #1
 8004f4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004f4e:	4802      	ldr	r0, [pc, #8]	; (8004f58 <W25_UNSELECT+0x14>)
 8004f50:	f001 fb88 	bl	8006664 <HAL_GPIO_WritePin>
 8004f54:	bf00      	nop
 8004f56:	bd80      	pop	{r7, pc}
 8004f58:	48000400 	.word	0x48000400

08004f5c <W25qxx_Spi>:
//void W25_SELECT()   { HAL_GPIO_WritePin(W25_CS_GPIO_Port, W25_CS_Pin, GPIO_PIN_RESET); }//set to 0
//void W25_UNSELECT() { HAL_GPIO_WritePin(W25_CS_GPIO_Port, W25_CS_Pin, GPIO_PIN_SET); }//set to 1

//------------------------------------------------------------------------------------------
uint8_t W25qxx_Spi(uint8_t Data)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b086      	sub	sp, #24
 8004f60:	af02      	add	r7, sp, #8
 8004f62:	4603      	mov	r3, r0
 8004f64:	71fb      	strb	r3, [r7, #7]
uint8_t ret;

    HAL_SPI_TransmitReceive(portFLASH, &Data, &ret, 1, min_wait_ms);//HAL_MAX_DELAY);
 8004f66:	4b07      	ldr	r3, [pc, #28]	; (8004f84 <W25qxx_Spi+0x28>)
 8004f68:	6818      	ldr	r0, [r3, #0]
 8004f6a:	23fa      	movs	r3, #250	; 0xfa
 8004f6c:	f107 020f 	add.w	r2, r7, #15
 8004f70:	1df9      	adds	r1, r7, #7
 8004f72:	9300      	str	r3, [sp, #0]
 8004f74:	2301      	movs	r3, #1
 8004f76:	f005 f9b4 	bl	800a2e2 <HAL_SPI_TransmitReceive>

    return ret;
 8004f7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3710      	adds	r7, #16
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}
 8004f84:	2000000c 	.word	0x2000000c

08004f88 <W25qxx_Reset>:
//------------------------------------------------------------------------------------------
void W25qxx_Reset(void)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	af00      	add	r7, sp, #0
	W25qxx_Delay(100);
 8004f8c:	2064      	movs	r0, #100	; 0x64
 8004f8e:	f000 fdbb 	bl	8005b08 <HAL_Delay>

	W25_SELECT();
 8004f92:	f7ff ffcb 	bl	8004f2c <W25_SELECT>
		W25qxx_Spi(EN_RESET);
 8004f96:	2066      	movs	r0, #102	; 0x66
 8004f98:	f7ff ffe0 	bl	8004f5c <W25qxx_Spi>
		W25qxx_Spi(CHIP_RESET);
 8004f9c:	2099      	movs	r0, #153	; 0x99
 8004f9e:	f7ff ffdd 	bl	8004f5c <W25qxx_Spi>
	W25_UNSELECT();
 8004fa2:	f7ff ffcf 	bl	8004f44 <W25_UNSELECT>

	W25qxx_Delay(100);
 8004fa6:	2064      	movs	r0, #100	; 0x64
 8004fa8:	f000 fdae 	bl	8005b08 <HAL_Delay>
}
 8004fac:	bf00      	nop
 8004fae:	bd80      	pop	{r7, pc}

08004fb0 <W25qxx_ReadID>:
//------------------------------------------------------------------------------------------
uint32_t W25qxx_ReadID(void)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b084      	sub	sp, #16
 8004fb4:	af00      	add	r7, sp, #0
uint32_t Temp[3] = {0};
 8004fb6:	1d3b      	adds	r3, r7, #4
 8004fb8:	2200      	movs	r2, #0
 8004fba:	601a      	str	r2, [r3, #0]
 8004fbc:	605a      	str	r2, [r3, #4]
 8004fbe:	609a      	str	r2, [r3, #8]

    W25_SELECT();//set to 0
 8004fc0:	f7ff ffb4 	bl	8004f2c <W25_SELECT>

    W25qxx_Spi(JEDEC_ID);
 8004fc4:	209f      	movs	r0, #159	; 0x9f
 8004fc6:	f7ff ffc9 	bl	8004f5c <W25qxx_Spi>
    Temp[0] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004fca:	20a5      	movs	r0, #165	; 0xa5
 8004fcc:	f7ff ffc6 	bl	8004f5c <W25qxx_Spi>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	607b      	str	r3, [r7, #4]
    Temp[1] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004fd4:	20a5      	movs	r0, #165	; 0xa5
 8004fd6:	f7ff ffc1 	bl	8004f5c <W25qxx_Spi>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	60bb      	str	r3, [r7, #8]
    Temp[2] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004fde:	20a5      	movs	r0, #165	; 0xa5
 8004fe0:	f7ff ffbc 	bl	8004f5c <W25qxx_Spi>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	60fb      	str	r3, [r7, #12]

    W25_UNSELECT();//set to 1
 8004fe8:	f7ff ffac 	bl	8004f44 <W25_UNSELECT>

    return ((Temp[0] << 16) | (Temp[1] << 8) | Temp[2]);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	041a      	lsls	r2, r3, #16
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	021b      	lsls	r3, r3, #8
 8004ff4:	431a      	orrs	r2, r3
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	4313      	orrs	r3, r2
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3710      	adds	r7, #16
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}
	...

08005004 <W25qxx_ReadUniqID>:
//------------------------------------------------------------------------------------------
void W25qxx_ReadUniqID(void)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b082      	sub	sp, #8
 8005008:	af00      	add	r7, sp, #0
	uint8_t dat[] = {READ_UID, W25QXX_DUMMY_BYTE, W25QXX_DUMMY_BYTE, W25QXX_DUMMY_BYTE, W25QXX_DUMMY_BYTE};
 800500a:	4a0e      	ldr	r2, [pc, #56]	; (8005044 <W25qxx_ReadUniqID+0x40>)
 800500c:	463b      	mov	r3, r7
 800500e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005012:	6018      	str	r0, [r3, #0]
 8005014:	3304      	adds	r3, #4
 8005016:	7019      	strb	r1, [r3, #0]
    W25_SELECT();
 8005018:	f7ff ff88 	bl	8004f2c <W25_SELECT>

    //W25qxx_Spi(READ_UID);
    //for (uint8_t i = 0; i < 4; i++) W25qxx_Spi(W25QXX_DUMMY_BYTE);
    //for (uint8_t i = 0; i < 8; i++) w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
    HAL_SPI_Transmit(portFLASH, dat, sizeof(dat), min_wait_ms);
 800501c:	4b0a      	ldr	r3, [pc, #40]	; (8005048 <W25qxx_ReadUniqID+0x44>)
 800501e:	6818      	ldr	r0, [r3, #0]
 8005020:	23fa      	movs	r3, #250	; 0xfa
 8005022:	4639      	mov	r1, r7
 8005024:	2205      	movs	r2, #5
 8005026:	f004 febe 	bl	8009da6 <HAL_SPI_Transmit>
    HAL_SPI_Receive(portFLASH, w25qxx.UniqID, 8, min_wait_ms);
 800502a:	4b07      	ldr	r3, [pc, #28]	; (8005048 <W25qxx_ReadUniqID+0x44>)
 800502c:	6818      	ldr	r0, [r3, #0]
 800502e:	23fa      	movs	r3, #250	; 0xfa
 8005030:	2208      	movs	r2, #8
 8005032:	4906      	ldr	r1, [pc, #24]	; (800504c <W25qxx_ReadUniqID+0x48>)
 8005034:	f005 f825 	bl	800a082 <HAL_SPI_Receive>

    W25_UNSELECT();
 8005038:	f7ff ff84 	bl	8004f44 <W25_UNSELECT>
}
 800503c:	bf00      	nop
 800503e:	3708      	adds	r7, #8
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}
 8005044:	08012294 	.word	0x08012294
 8005048:	2000000c 	.word	0x2000000c
 800504c:	20002c8d 	.word	0x20002c8d

08005050 <W25qxx_WriteEnable>:
//------------------------------------------------------------------------------------------
void W25qxx_WriteEnable(void)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	af00      	add	r7, sp, #0
    W25_SELECT();
 8005054:	f7ff ff6a 	bl	8004f2c <W25_SELECT>

    W25qxx_Spi(WRITE_ENABLE);
 8005058:	2006      	movs	r0, #6
 800505a:	f7ff ff7f 	bl	8004f5c <W25qxx_Spi>

    W25_UNSELECT();
 800505e:	f7ff ff71 	bl	8004f44 <W25_UNSELECT>

    W25qxx_Delay(1);
 8005062:	2001      	movs	r0, #1
 8005064:	f000 fd50 	bl	8005b08 <HAL_Delay>
}
 8005068:	bf00      	nop
 800506a:	bd80      	pop	{r7, pc}

0800506c <W25qxx_ReadStatusRegister>:

    W25qxx_Delay(1);
}
//------------------------------------------------------------------------------------------
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusReg)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b084      	sub	sp, #16
 8005070:	af00      	add	r7, sp, #0
 8005072:	4603      	mov	r3, r0
 8005074:	71fb      	strb	r3, [r7, #7]
uint8_t status = 0;
 8005076:	2300      	movs	r3, #0
 8005078:	73fb      	strb	r3, [r7, #15]

    W25_SELECT();
 800507a:	f7ff ff57 	bl	8004f2c <W25_SELECT>

    switch (SelectStatusReg) {
 800507e:	79fb      	ldrb	r3, [r7, #7]
 8005080:	2b01      	cmp	r3, #1
 8005082:	d002      	beq.n	800508a <W25qxx_ReadStatusRegister+0x1e>
 8005084:	2b02      	cmp	r3, #2
 8005086:	d00d      	beq.n	80050a4 <W25qxx_ReadStatusRegister+0x38>
 8005088:	e019      	b.n	80050be <W25qxx_ReadStatusRegister+0x52>
        case 1:
            W25qxx_Spi(READ_STAT_REG1);
 800508a:	2005      	movs	r0, #5
 800508c:	f7ff ff66 	bl	8004f5c <W25qxx_Spi>
            status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8005090:	20a5      	movs	r0, #165	; 0xa5
 8005092:	f7ff ff63 	bl	8004f5c <W25qxx_Spi>
 8005096:	4603      	mov	r3, r0
 8005098:	73fb      	strb	r3, [r7, #15]
            w25qxx.StatusRegister1 = status;
 800509a:	4a12      	ldr	r2, [pc, #72]	; (80050e4 <W25qxx_ReadStatusRegister+0x78>)
 800509c:	7bfb      	ldrb	r3, [r7, #15]
 800509e:	f882 3023 	strb.w	r3, [r2, #35]	; 0x23
        break;
 80050a2:	e018      	b.n	80050d6 <W25qxx_ReadStatusRegister+0x6a>
        case 2:
            W25qxx_Spi(READ_STAT_REG2);
 80050a4:	2035      	movs	r0, #53	; 0x35
 80050a6:	f7ff ff59 	bl	8004f5c <W25qxx_Spi>
            status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80050aa:	20a5      	movs	r0, #165	; 0xa5
 80050ac:	f7ff ff56 	bl	8004f5c <W25qxx_Spi>
 80050b0:	4603      	mov	r3, r0
 80050b2:	73fb      	strb	r3, [r7, #15]
            w25qxx.StatusRegister2 = status;
 80050b4:	4a0b      	ldr	r2, [pc, #44]	; (80050e4 <W25qxx_ReadStatusRegister+0x78>)
 80050b6:	7bfb      	ldrb	r3, [r7, #15]
 80050b8:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
        break;
 80050bc:	e00b      	b.n	80050d6 <W25qxx_ReadStatusRegister+0x6a>
        default : {
            W25qxx_Spi(READ_STAT_REG3);
 80050be:	2015      	movs	r0, #21
 80050c0:	f7ff ff4c 	bl	8004f5c <W25qxx_Spi>
            status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80050c4:	20a5      	movs	r0, #165	; 0xa5
 80050c6:	f7ff ff49 	bl	8004f5c <W25qxx_Spi>
 80050ca:	4603      	mov	r3, r0
 80050cc:	73fb      	strb	r3, [r7, #15]
            w25qxx.StatusRegister3 = status;
 80050ce:	4a05      	ldr	r2, [pc, #20]	; (80050e4 <W25qxx_ReadStatusRegister+0x78>)
 80050d0:	7bfb      	ldrb	r3, [r7, #15]
 80050d2:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
        }
    }

    W25_UNSELECT();
 80050d6:	f7ff ff35 	bl	8004f44 <W25_UNSELECT>

    return status;
 80050da:	7bfb      	ldrb	r3, [r7, #15]
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3710      	adds	r7, #16
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}
 80050e4:	20002c8c 	.word	0x20002c8c

080050e8 <W25qxx_WaitForWriteEnd>:

    W25_UNSELECT();
}
//------------------------------------------------------------------------------------------
void W25qxx_WaitForWriteEnd(void)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	af00      	add	r7, sp, #0
    W25qxx_Delay(1);
 80050ec:	2001      	movs	r0, #1
 80050ee:	f000 fd0b 	bl	8005b08 <HAL_Delay>

    W25_SELECT();
 80050f2:	f7ff ff1b 	bl	8004f2c <W25_SELECT>

    W25qxx_Spi(READ_STAT_REG1);
 80050f6:	2005      	movs	r0, #5
 80050f8:	f7ff ff30 	bl	8004f5c <W25qxx_Spi>
    do
    {
        w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80050fc:	20a5      	movs	r0, #165	; 0xa5
 80050fe:	f7ff ff2d 	bl	8004f5c <W25qxx_Spi>
 8005102:	4603      	mov	r3, r0
 8005104:	461a      	mov	r2, r3
 8005106:	4b08      	ldr	r3, [pc, #32]	; (8005128 <W25qxx_WaitForWriteEnd+0x40>)
 8005108:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
        W25qxx_Delay(1);
 800510c:	2001      	movs	r0, #1
 800510e:	f000 fcfb 	bl	8005b08 <HAL_Delay>
    } while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 8005112:	4b05      	ldr	r3, [pc, #20]	; (8005128 <W25qxx_WaitForWriteEnd+0x40>)
 8005114:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8005118:	f003 0301 	and.w	r3, r3, #1
 800511c:	2b00      	cmp	r3, #0
 800511e:	d1ed      	bne.n	80050fc <W25qxx_WaitForWriteEnd+0x14>

    W25_UNSELECT();
 8005120:	f7ff ff10 	bl	8004f44 <W25_UNSELECT>
}
 8005124:	bf00      	nop
 8005126:	bd80      	pop	{r7, pc}
 8005128:	20002c8c 	.word	0x20002c8c

0800512c <W25qxx_Init>:
//------------------------------------------------------------------------------------------
bool W25qxx_Init(void)
{
 800512c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800512e:	b089      	sub	sp, #36	; 0x24
 8005130:	af06      	add	r7, sp, #24

	W25qxx_Reset();
 8005132:	f7ff ff29 	bl	8004f88 <W25qxx_Reset>


    w25qxx.Lock = 1;
 8005136:	4b54      	ldr	r3, [pc, #336]	; (8005288 <W25qxx_Init+0x15c>)
 8005138:	2201      	movs	r2, #1
 800513a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    bool ret = false;
 800513e:	2300      	movs	r3, #0
 8005140:	71fb      	strb	r3, [r7, #7]

    W25_UNSELECT();
 8005142:	f7ff feff 	bl	8004f44 <W25_UNSELECT>

    uint32_t id = W25qxx_ReadID() & 0xffff;
 8005146:	f7ff ff33 	bl	8004fb0 <W25qxx_ReadID>
 800514a:	4603      	mov	r3, r0
 800514c:	b29b      	uxth	r3, r3
 800514e:	603b      	str	r3, [r7, #0]
//#ifdef W25QXX_DEBUG
    Report(1, "w25qxx Init Begin... Chip ID:0x%X\r\n", id);
 8005150:	683a      	ldr	r2, [r7, #0]
 8005152:	494e      	ldr	r1, [pc, #312]	; (800528c <W25qxx_Init+0x160>)
 8005154:	2001      	movs	r0, #1
 8005156:	f7fe fae5 	bl	8003724 <Report>
//#endif
    id &= 0xff;
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	b2db      	uxtb	r3, r3
 800515e:	603b      	str	r3, [r7, #0]
    id -= 0x10;//0x4010;
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	3b10      	subs	r3, #16
 8005164:	603b      	str	r3, [r7, #0]
    if (id > 0x0a) id = 0;
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	2b0a      	cmp	r3, #10
 800516a:	d901      	bls.n	8005170 <W25qxx_Init+0x44>
 800516c:	2300      	movs	r3, #0
 800516e:	603b      	str	r3, [r7, #0]
    w25qxx.ID         = id;              //W25Q10..W25Q512
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	b2da      	uxtb	r2, r3
 8005174:	4b44      	ldr	r3, [pc, #272]	; (8005288 <W25qxx_Init+0x15c>)
 8005176:	701a      	strb	r2, [r3, #0]
    w25qxx.BlockCount = all_chipBLK[id]; //0..1024;
 8005178:	4a45      	ldr	r2, [pc, #276]	; (8005290 <W25qxx_Init+0x164>)
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005180:	4a41      	ldr	r2, [pc, #260]	; (8005288 <W25qxx_Init+0x15c>)
 8005182:	f8c2 301b 	str.w	r3, [r2, #27]
//#ifdef W25QXX_DEBUG
    Report(1, "Chip %s\r\n", all_chipID[id]);
 8005186:	4a43      	ldr	r2, [pc, #268]	; (8005294 <W25qxx_Init+0x168>)
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800518e:	461a      	mov	r2, r3
 8005190:	4941      	ldr	r1, [pc, #260]	; (8005298 <W25qxx_Init+0x16c>)
 8005192:	2001      	movs	r0, #1
 8005194:	f7fe fac6 	bl	8003724 <Report>
//#endif

    if (id) {
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d06b      	beq.n	8005276 <W25qxx_Init+0x14a>
    	w25qxx.PageSize = 256;
 800519e:	4b3a      	ldr	r3, [pc, #232]	; (8005288 <W25qxx_Init+0x15c>)
 80051a0:	2200      	movs	r2, #0
 80051a2:	725a      	strb	r2, [r3, #9]
 80051a4:	2200      	movs	r2, #0
 80051a6:	f042 0201 	orr.w	r2, r2, #1
 80051aa:	729a      	strb	r2, [r3, #10]
    	w25qxx.SectorSize = 0x1000;
 80051ac:	4b36      	ldr	r3, [pc, #216]	; (8005288 <W25qxx_Init+0x15c>)
 80051ae:	2200      	movs	r2, #0
 80051b0:	73da      	strb	r2, [r3, #15]
 80051b2:	2200      	movs	r2, #0
 80051b4:	f042 0210 	orr.w	r2, r2, #16
 80051b8:	741a      	strb	r2, [r3, #16]
 80051ba:	2200      	movs	r2, #0
 80051bc:	745a      	strb	r2, [r3, #17]
 80051be:	2200      	movs	r2, #0
 80051c0:	749a      	strb	r2, [r3, #18]
    	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 80051c2:	4b31      	ldr	r3, [pc, #196]	; (8005288 <W25qxx_Init+0x15c>)
 80051c4:	f8d3 301b 	ldr.w	r3, [r3, #27]
 80051c8:	011b      	lsls	r3, r3, #4
 80051ca:	4a2f      	ldr	r2, [pc, #188]	; (8005288 <W25qxx_Init+0x15c>)
 80051cc:	f8c2 3013 	str.w	r3, [r2, #19]
    	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 80051d0:	4b2d      	ldr	r3, [pc, #180]	; (8005288 <W25qxx_Init+0x15c>)
 80051d2:	f8d3 3013 	ldr.w	r3, [r3, #19]
 80051d6:	4a2c      	ldr	r2, [pc, #176]	; (8005288 <W25qxx_Init+0x15c>)
 80051d8:	f8d2 200f 	ldr.w	r2, [r2, #15]
 80051dc:	fb02 f303 	mul.w	r3, r2, r3
 80051e0:	4a29      	ldr	r2, [pc, #164]	; (8005288 <W25qxx_Init+0x15c>)
 80051e2:	f8b2 2009 	ldrh.w	r2, [r2, #9]
 80051e6:	b292      	uxth	r2, r2
 80051e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80051ec:	4a26      	ldr	r2, [pc, #152]	; (8005288 <W25qxx_Init+0x15c>)
 80051ee:	f8c2 300b 	str.w	r3, [r2, #11]
    	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 80051f2:	4b25      	ldr	r3, [pc, #148]	; (8005288 <W25qxx_Init+0x15c>)
 80051f4:	f8d3 300f 	ldr.w	r3, [r3, #15]
 80051f8:	011b      	lsls	r3, r3, #4
 80051fa:	4a23      	ldr	r2, [pc, #140]	; (8005288 <W25qxx_Init+0x15c>)
 80051fc:	f8c2 3017 	str.w	r3, [r2, #23]
    	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 8005200:	4b21      	ldr	r3, [pc, #132]	; (8005288 <W25qxx_Init+0x15c>)
 8005202:	f8d3 3013 	ldr.w	r3, [r3, #19]
 8005206:	4a20      	ldr	r2, [pc, #128]	; (8005288 <W25qxx_Init+0x15c>)
 8005208:	f8d2 200f 	ldr.w	r2, [r2, #15]
 800520c:	fb02 f303 	mul.w	r3, r2, r3
 8005210:	0a9b      	lsrs	r3, r3, #10
 8005212:	4a1d      	ldr	r2, [pc, #116]	; (8005288 <W25qxx_Init+0x15c>)
 8005214:	f8c2 301f 	str.w	r3, [r2, #31]
    	W25qxx_ReadUniqID();
 8005218:	f7ff fef4 	bl	8005004 <W25qxx_ReadUniqID>
    	W25qxx_ReadStatusRegister(1);
 800521c:	2001      	movs	r0, #1
 800521e:	f7ff ff25 	bl	800506c <W25qxx_ReadStatusRegister>
    	W25qxx_ReadStatusRegister(2);
 8005222:	2002      	movs	r0, #2
 8005224:	f7ff ff22 	bl	800506c <W25qxx_ReadStatusRegister>
    	W25qxx_ReadStatusRegister(3);
 8005228:	2003      	movs	r0, #3
 800522a:	f7ff ff1f 	bl	800506c <W25qxx_ReadStatusRegister>
    	ret = true;
 800522e:	2301      	movs	r3, #1
 8005230:	71fb      	strb	r3, [r7, #7]
                 "\tSector Size:\t%u bytes\r\n"
                 "\tSector Count:\t%u\r\n"
                 "\tBlock Size:\t%u bytes\r\n"
                 "\tBlock Count:\t%u\r\n"
                 "\tCapacity:\t%u KBytes\r\n",
                 w25qxx.PageSize,
 8005232:	4b15      	ldr	r3, [pc, #84]	; (8005288 <W25qxx_Init+0x15c>)
 8005234:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8005238:	b29b      	uxth	r3, r3
    	Report(0,"\tPage Size:\t%u bytes\r\n"
 800523a:	461e      	mov	r6, r3
 800523c:	4b12      	ldr	r3, [pc, #72]	; (8005288 <W25qxx_Init+0x15c>)
 800523e:	f8d3 500b 	ldr.w	r5, [r3, #11]
 8005242:	4b11      	ldr	r3, [pc, #68]	; (8005288 <W25qxx_Init+0x15c>)
 8005244:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8005248:	4a0f      	ldr	r2, [pc, #60]	; (8005288 <W25qxx_Init+0x15c>)
 800524a:	f8d2 2013 	ldr.w	r2, [r2, #19]
 800524e:	490e      	ldr	r1, [pc, #56]	; (8005288 <W25qxx_Init+0x15c>)
 8005250:	f8d1 1017 	ldr.w	r1, [r1, #23]
 8005254:	480c      	ldr	r0, [pc, #48]	; (8005288 <W25qxx_Init+0x15c>)
 8005256:	f8d0 001b 	ldr.w	r0, [r0, #27]
 800525a:	4c0b      	ldr	r4, [pc, #44]	; (8005288 <W25qxx_Init+0x15c>)
 800525c:	f8d4 401f 	ldr.w	r4, [r4, #31]
 8005260:	9404      	str	r4, [sp, #16]
 8005262:	9003      	str	r0, [sp, #12]
 8005264:	9102      	str	r1, [sp, #8]
 8005266:	9201      	str	r2, [sp, #4]
 8005268:	9300      	str	r3, [sp, #0]
 800526a:	462b      	mov	r3, r5
 800526c:	4632      	mov	r2, r6
 800526e:	490b      	ldr	r1, [pc, #44]	; (800529c <W25qxx_Init+0x170>)
 8005270:	2000      	movs	r0, #0
 8005272:	f7fe fa57 	bl	8003724 <Report>
                 w25qxx.BlockCount,
                 w25qxx.CapacityInKiloByte);
//#endif
    }

    w25qxx.Lock = 0;
 8005276:	4b04      	ldr	r3, [pc, #16]	; (8005288 <W25qxx_Init+0x15c>)
 8005278:	2200      	movs	r2, #0
 800527a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

    return ret;
 800527e:	79fb      	ldrb	r3, [r7, #7]
}
 8005280:	4618      	mov	r0, r3
 8005282:	370c      	adds	r7, #12
 8005284:	46bd      	mov	sp, r7
 8005286:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005288:	20002c8c 	.word	0x20002c8c
 800528c:	0801229c 	.word	0x0801229c
 8005290:	08012e54 	.word	0x08012e54
 8005294:	200001bc 	.word	0x200001bc
 8005298:	080122c0 	.word	0x080122c0
 800529c:	080122cc 	.word	0x080122cc

080052a0 <W25qxx_getChipID>:
//------------------------------------------------------------------------------------------
uint32_t W25qxx_getChipID()
{
 80052a0:	b480      	push	{r7}
 80052a2:	af00      	add	r7, sp, #0
	return (uint32_t)w25qxx.ID;
 80052a4:	4b03      	ldr	r3, [pc, #12]	; (80052b4 <W25qxx_getChipID+0x14>)
 80052a6:	781b      	ldrb	r3, [r3, #0]
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	46bd      	mov	sp, r7
 80052ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b0:	4770      	bx	lr
 80052b2:	bf00      	nop
 80052b4:	20002c8c 	.word	0x20002c8c

080052b8 <W25qxx_getSectorCount>:
uint32_t W25qxx_getSectorCount()
{
 80052b8:	b480      	push	{r7}
 80052ba:	af00      	add	r7, sp, #0
	return w25qxx.SectorCount;
 80052bc:	4b03      	ldr	r3, [pc, #12]	; (80052cc <W25qxx_getSectorCount+0x14>)
 80052be:	f8d3 3013 	ldr.w	r3, [r3, #19]
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr
 80052cc:	20002c8c 	.word	0x20002c8c

080052d0 <W25qxx_getSectorSize>:
uint32_t W25qxx_getSectorSize()
{
 80052d0:	b480      	push	{r7}
 80052d2:	af00      	add	r7, sp, #0
	return w25qxx.SectorSize;
 80052d4:	4b03      	ldr	r3, [pc, #12]	; (80052e4 <W25qxx_getSectorSize+0x14>)
 80052d6:	f8d3 300f 	ldr.w	r3, [r3, #15]
}
 80052da:	4618      	mov	r0, r3
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr
 80052e4:	20002c8c 	.word	0x20002c8c

080052e8 <W25qxx_getPageSize>:
uint32_t W25qxx_getPageCount()
{
	return w25qxx.PageCount;
}
uint32_t W25qxx_getPageSize()
{
 80052e8:	b480      	push	{r7}
 80052ea:	af00      	add	r7, sp, #0
	return w25qxx.PageSize;
 80052ec:	4b04      	ldr	r3, [pc, #16]	; (8005300 <W25qxx_getPageSize+0x18>)
 80052ee:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 80052f2:	b29b      	uxth	r3, r3
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr
 80052fe:	bf00      	nop
 8005300:	20002c8c 	.word	0x20002c8c

08005304 <W25qxx_EraseSector>:

    w25qxx.Lock = 0;
}
//------------------------------------------------------------------------------------------
void W25qxx_EraseSector(uint32_t SectorAddr)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b082      	sub	sp, #8
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
    while (w25qxx.Lock) W25qxx_Delay(1);
 800530c:	e002      	b.n	8005314 <W25qxx_EraseSector+0x10>
 800530e:	2001      	movs	r0, #1
 8005310:	f000 fbfa 	bl	8005b08 <HAL_Delay>
 8005314:	4b1c      	ldr	r3, [pc, #112]	; (8005388 <W25qxx_EraseSector+0x84>)
 8005316:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800531a:	2b00      	cmp	r3, #0
 800531c:	d1f7      	bne.n	800530e <W25qxx_EraseSector+0xa>

    w25qxx.Lock = 1;
 800531e:	4b1a      	ldr	r3, [pc, #104]	; (8005388 <W25qxx_EraseSector+0x84>)
 8005320:	2201      	movs	r2, #1
 8005322:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
#ifdef W25QXX_DEBUG
    uint32_t StartTime = HAL_GetTick();
    Report(1, "%u Begin...", SectorAddr);
#endif

    W25qxx_WaitForWriteEnd();
 8005326:	f7ff fedf 	bl	80050e8 <W25qxx_WaitForWriteEnd>
    SectorAddr = SectorAddr * w25qxx.SectorSize;
 800532a:	4b17      	ldr	r3, [pc, #92]	; (8005388 <W25qxx_EraseSector+0x84>)
 800532c:	f8d3 200f 	ldr.w	r2, [r3, #15]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	fb02 f303 	mul.w	r3, r2, r3
 8005336:	607b      	str	r3, [r7, #4]
    W25qxx_WriteEnable();
 8005338:	f7ff fe8a 	bl	8005050 <W25qxx_WriteEnable>

    W25_SELECT();
 800533c:	f7ff fdf6 	bl	8004f2c <W25_SELECT>
    W25qxx_Spi(SECTOR_ERASE);
 8005340:	2020      	movs	r0, #32
 8005342:	f7ff fe0b 	bl	8004f5c <W25qxx_Spi>
    //if (w25qxx.ID >= W25Q256) W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
    W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	0c1b      	lsrs	r3, r3, #16
 800534a:	b2db      	uxtb	r3, r3
 800534c:	4618      	mov	r0, r3
 800534e:	f7ff fe05 	bl	8004f5c <W25qxx_Spi>
    W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	0a1b      	lsrs	r3, r3, #8
 8005356:	b2db      	uxtb	r3, r3
 8005358:	4618      	mov	r0, r3
 800535a:	f7ff fdff 	bl	8004f5c <W25qxx_Spi>
    W25qxx_Spi(SectorAddr & 0xFF);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	b2db      	uxtb	r3, r3
 8005362:	4618      	mov	r0, r3
 8005364:	f7ff fdfa 	bl	8004f5c <W25qxx_Spi>
    W25_UNSELECT();
 8005368:	f7ff fdec 	bl	8004f44 <W25_UNSELECT>

    W25qxx_WaitForWriteEnd();
 800536c:	f7ff febc 	bl	80050e8 <W25qxx_WaitForWriteEnd>

#ifdef W25QXX_DEBUG
    uint32_t dur = HAL_GetTick() - StartTime;
    Report(0, " done after %u ms (%u sec)!\r\n", dur, dur / 1000);
#endif
    W25qxx_Delay(1);
 8005370:	2001      	movs	r0, #1
 8005372:	f000 fbc9 	bl	8005b08 <HAL_Delay>

    w25qxx.Lock = 0;
 8005376:	4b04      	ldr	r3, [pc, #16]	; (8005388 <W25qxx_EraseSector+0x84>)
 8005378:	2200      	movs	r2, #0
 800537a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 800537e:	bf00      	nop
 8005380:	3708      	adds	r7, #8
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}
 8005386:	bf00      	nop
 8005388:	20002c8c 	.word	0x20002c8c

0800538c <W25qxx_SectorToPage>:
{
    return ((SectorAddress * w25qxx.SectorSize) / w25qxx.BlockSize);
}
//------------------------------------------------------------------------------------------
uint32_t W25qxx_SectorToPage(uint32_t SectorAddress)
{
 800538c:	b480      	push	{r7}
 800538e:	b083      	sub	sp, #12
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
    return (SectorAddress * w25qxx.SectorSize) / w25qxx.PageSize;
 8005394:	4b08      	ldr	r3, [pc, #32]	; (80053b8 <W25qxx_SectorToPage+0x2c>)
 8005396:	f8d3 300f 	ldr.w	r3, [r3, #15]
 800539a:	687a      	ldr	r2, [r7, #4]
 800539c:	fb02 f303 	mul.w	r3, r2, r3
 80053a0:	4a05      	ldr	r2, [pc, #20]	; (80053b8 <W25qxx_SectorToPage+0x2c>)
 80053a2:	f8b2 2009 	ldrh.w	r2, [r2, #9]
 80053a6:	b292      	uxth	r2, r2
 80053a8:	fbb3 f3f2 	udiv	r3, r3, r2
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	370c      	adds	r7, #12
 80053b0:	46bd      	mov	sp, r7
 80053b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b6:	4770      	bx	lr
 80053b8:	20002c8c 	.word	0x20002c8c

080053bc <W25qxx_IsEmptySector>:

    return false;
}
//------------------------------------------------------------------------------------------
bool W25qxx_IsEmptySector(uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToCheck_up_to_SectorSize)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b090      	sub	sp, #64	; 0x40
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	60f8      	str	r0, [r7, #12]
 80053c4:	60b9      	str	r1, [r7, #8]
 80053c6:	607a      	str	r2, [r7, #4]
    while (w25qxx.Lock) W25qxx_Delay(1);
 80053c8:	e002      	b.n	80053d0 <W25qxx_IsEmptySector+0x14>
 80053ca:	2001      	movs	r0, #1
 80053cc:	f000 fb9c 	bl	8005b08 <HAL_Delay>
 80053d0:	4b59      	ldr	r3, [pc, #356]	; (8005538 <W25qxx_IsEmptySector+0x17c>)
 80053d2:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d1f7      	bne.n	80053ca <W25qxx_IsEmptySector+0xe>

    w25qxx.Lock = 1;
 80053da:	4b57      	ldr	r3, [pc, #348]	; (8005538 <W25qxx_IsEmptySector+0x17c>)
 80053dc:	2201      	movs	r2, #1
 80053de:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

    if ( (NumByteToCheck_up_to_SectorSize > w25qxx.SectorSize) || (!NumByteToCheck_up_to_SectorSize) )
 80053e2:	4b55      	ldr	r3, [pc, #340]	; (8005538 <W25qxx_IsEmptySector+0x17c>)
 80053e4:	f8d3 300f 	ldr.w	r3, [r3, #15]
 80053e8:	687a      	ldr	r2, [r7, #4]
 80053ea:	429a      	cmp	r2, r3
 80053ec:	d802      	bhi.n	80053f4 <W25qxx_IsEmptySector+0x38>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d103      	bne.n	80053fc <W25qxx_IsEmptySector+0x40>
                NumByteToCheck_up_to_SectorSize = w25qxx.SectorSize;
 80053f4:	4b50      	ldr	r3, [pc, #320]	; (8005538 <W25qxx_IsEmptySector+0x17c>)
 80053f6:	f8d3 300f 	ldr.w	r3, [r3, #15]
 80053fa:	607b      	str	r3, [r7, #4]
    uint32_t StartTime = HAL_GetTick();
#endif

    uint8_t pBuffer[32];
    uint32_t i, WorkAddress;
    for ( i = OffsetInByte; i < w25qxx.SectorSize; i += sizeof(pBuffer)) {
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005400:	e040      	b.n	8005484 <W25qxx_IsEmptySector+0xc8>

    	W25_SELECT();
 8005402:	f7ff fd93 	bl	8004f2c <W25_SELECT>
        WorkAddress = (i + Sector_Address * w25qxx.SectorSize);
 8005406:	4b4c      	ldr	r3, [pc, #304]	; (8005538 <W25qxx_IsEmptySector+0x17c>)
 8005408:	f8d3 300f 	ldr.w	r3, [r3, #15]
 800540c:	68fa      	ldr	r2, [r7, #12]
 800540e:	fb02 f303 	mul.w	r3, r2, r3
 8005412:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005414:	4413      	add	r3, r2
 8005416:	637b      	str	r3, [r7, #52]	; 0x34
        W25qxx_Spi(DATA_READ);//FAST_READ);
 8005418:	2003      	movs	r0, #3
 800541a:	f7ff fd9f 	bl	8004f5c <W25qxx_Spi>
        //if (w25qxx.ID >= W25Q256) W25qxx_Spi((WorkAddress & 0xFF000000) >> 24);
        W25qxx_Spi((WorkAddress & 0xFF0000) >> 16);
 800541e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005420:	0c1b      	lsrs	r3, r3, #16
 8005422:	b2db      	uxtb	r3, r3
 8005424:	4618      	mov	r0, r3
 8005426:	f7ff fd99 	bl	8004f5c <W25qxx_Spi>
        W25qxx_Spi((WorkAddress & 0xFF00) >> 8);
 800542a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800542c:	0a1b      	lsrs	r3, r3, #8
 800542e:	b2db      	uxtb	r3, r3
 8005430:	4618      	mov	r0, r3
 8005432:	f7ff fd93 	bl	8004f5c <W25qxx_Spi>
        W25qxx_Spi(WorkAddress & 0xFF);
 8005436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005438:	b2db      	uxtb	r3, r3
 800543a:	4618      	mov	r0, r3
 800543c:	f7ff fd8e 	bl	8004f5c <W25qxx_Spi>
        //W25qxx_Spi(0);
        HAL_SPI_Receive(portFLASH, pBuffer, sizeof(pBuffer), min_wait_ms);
 8005440:	4b3e      	ldr	r3, [pc, #248]	; (800553c <W25qxx_IsEmptySector+0x180>)
 8005442:	6818      	ldr	r0, [r3, #0]
 8005444:	23fa      	movs	r3, #250	; 0xfa
 8005446:	f107 0114 	add.w	r1, r7, #20
 800544a:	2220      	movs	r2, #32
 800544c:	f004 fe19 	bl	800a082 <HAL_SPI_Receive>
        W25_UNSELECT();
 8005450:	f7ff fd78 	bl	8004f44 <W25_UNSELECT>

        for (uint8_t x = 0; x < sizeof(pBuffer); x++) {
 8005454:	2300      	movs	r3, #0
 8005456:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800545a:	e00c      	b.n	8005476 <W25qxx_IsEmptySector+0xba>
            if (pBuffer[x] != 0xFF) goto NOT_EMPTY;
 800545c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005460:	3340      	adds	r3, #64	; 0x40
 8005462:	443b      	add	r3, r7
 8005464:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8005468:	2bff      	cmp	r3, #255	; 0xff
 800546a:	d159      	bne.n	8005520 <W25qxx_IsEmptySector+0x164>
        for (uint8_t x = 0; x < sizeof(pBuffer); x++) {
 800546c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005470:	3301      	adds	r3, #1
 8005472:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005476:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800547a:	2b1f      	cmp	r3, #31
 800547c:	d9ee      	bls.n	800545c <W25qxx_IsEmptySector+0xa0>
    for ( i = OffsetInByte; i < w25qxx.SectorSize; i += sizeof(pBuffer)) {
 800547e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005480:	3320      	adds	r3, #32
 8005482:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005484:	4b2c      	ldr	r3, [pc, #176]	; (8005538 <W25qxx_IsEmptySector+0x17c>)
 8005486:	f8d3 300f 	ldr.w	r3, [r3, #15]
 800548a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800548c:	429a      	cmp	r2, r3
 800548e:	d3b8      	bcc.n	8005402 <W25qxx_IsEmptySector+0x46>
        }
    }
    if ((w25qxx.SectorSize + OffsetInByte) % sizeof(pBuffer) != 0) {
 8005490:	4b29      	ldr	r3, [pc, #164]	; (8005538 <W25qxx_IsEmptySector+0x17c>)
 8005492:	f8d3 200f 	ldr.w	r2, [r3, #15]
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	4413      	add	r3, r2
 800549a:	f003 031f 	and.w	r3, r3, #31
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d038      	beq.n	8005514 <W25qxx_IsEmptySector+0x158>
        i -= sizeof(pBuffer);
 80054a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054a4:	3b20      	subs	r3, #32
 80054a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        for( ; i < w25qxx.SectorSize; i++) {
 80054a8:	e02e      	b.n	8005508 <W25qxx_IsEmptySector+0x14c>

            W25_SELECT();
 80054aa:	f7ff fd3f 	bl	8004f2c <W25_SELECT>
            WorkAddress = (i + Sector_Address * w25qxx.SectorSize);
 80054ae:	4b22      	ldr	r3, [pc, #136]	; (8005538 <W25qxx_IsEmptySector+0x17c>)
 80054b0:	f8d3 300f 	ldr.w	r3, [r3, #15]
 80054b4:	68fa      	ldr	r2, [r7, #12]
 80054b6:	fb02 f303 	mul.w	r3, r2, r3
 80054ba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80054bc:	4413      	add	r3, r2
 80054be:	637b      	str	r3, [r7, #52]	; 0x34
            W25qxx_Spi(DATA_READ);//FAST_READ);
 80054c0:	2003      	movs	r0, #3
 80054c2:	f7ff fd4b 	bl	8004f5c <W25qxx_Spi>
            //if (w25qxx.ID >= W25Q256) W25qxx_Spi((WorkAddress & 0xFF000000) >> 24);
            W25qxx_Spi((WorkAddress & 0xFF0000) >> 16);
 80054c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054c8:	0c1b      	lsrs	r3, r3, #16
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	4618      	mov	r0, r3
 80054ce:	f7ff fd45 	bl	8004f5c <W25qxx_Spi>
            W25qxx_Spi((WorkAddress & 0xFF00) >> 8);
 80054d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054d4:	0a1b      	lsrs	r3, r3, #8
 80054d6:	b2db      	uxtb	r3, r3
 80054d8:	4618      	mov	r0, r3
 80054da:	f7ff fd3f 	bl	8004f5c <W25qxx_Spi>
            W25qxx_Spi(WorkAddress & 0xFF);
 80054de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054e0:	b2db      	uxtb	r3, r3
 80054e2:	4618      	mov	r0, r3
 80054e4:	f7ff fd3a 	bl	8004f5c <W25qxx_Spi>
            //W25qxx_Spi(0);
            HAL_SPI_Receive(portFLASH, pBuffer, 1, min_wait_ms);
 80054e8:	4b14      	ldr	r3, [pc, #80]	; (800553c <W25qxx_IsEmptySector+0x180>)
 80054ea:	6818      	ldr	r0, [r3, #0]
 80054ec:	23fa      	movs	r3, #250	; 0xfa
 80054ee:	f107 0114 	add.w	r1, r7, #20
 80054f2:	2201      	movs	r2, #1
 80054f4:	f004 fdc5 	bl	800a082 <HAL_SPI_Receive>
            W25_UNSELECT();
 80054f8:	f7ff fd24 	bl	8004f44 <W25_UNSELECT>

            if (pBuffer[0] != 0xFF) goto NOT_EMPTY;
 80054fc:	7d3b      	ldrb	r3, [r7, #20]
 80054fe:	2bff      	cmp	r3, #255	; 0xff
 8005500:	d110      	bne.n	8005524 <W25qxx_IsEmptySector+0x168>
        for( ; i < w25qxx.SectorSize; i++) {
 8005502:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005504:	3301      	adds	r3, #1
 8005506:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005508:	4b0b      	ldr	r3, [pc, #44]	; (8005538 <W25qxx_IsEmptySector+0x17c>)
 800550a:	f8d3 300f 	ldr.w	r3, [r3, #15]
 800550e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005510:	429a      	cmp	r2, r3
 8005512:	d3ca      	bcc.n	80054aa <W25qxx_IsEmptySector+0xee>
#ifdef W25QXX_DEBUG
    Report(1, "w25qxx CheckSector is Empty in %u ms\r\n", HAL_GetTick() - StartTime);
    //W25qxx_Delay(100);
#endif

    w25qxx.Lock = 0;
 8005514:	4b08      	ldr	r3, [pc, #32]	; (8005538 <W25qxx_IsEmptySector+0x17c>)
 8005516:	2200      	movs	r2, #0
 8005518:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

    return true;
 800551c:	2301      	movs	r3, #1
 800551e:	e007      	b.n	8005530 <W25qxx_IsEmptySector+0x174>
            if (pBuffer[x] != 0xFF) goto NOT_EMPTY;
 8005520:	bf00      	nop
 8005522:	e000      	b.n	8005526 <W25qxx_IsEmptySector+0x16a>
            if (pBuffer[0] != 0xFF) goto NOT_EMPTY;
 8005524:	bf00      	nop
#ifdef W25QXX_DEBUG
    Report(1, "w25qxx CheckSector is Not Empty in %u ms\r\n", HAL_GetTick() - StartTime);
    //W25qxx_Delay(100);
#endif

    w25qxx.Lock = 0;
 8005526:	4b04      	ldr	r3, [pc, #16]	; (8005538 <W25qxx_IsEmptySector+0x17c>)
 8005528:	2200      	movs	r2, #0
 800552a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

    return false;
 800552e:	2300      	movs	r3, #0
}
 8005530:	4618      	mov	r0, r3
 8005532:	3740      	adds	r7, #64	; 0x40
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}
 8005538:	20002c8c 	.word	0x20002c8c
 800553c:	2000000c 	.word	0x2000000c

08005540 <W25qxx_WritePage>:

    w25qxx.Lock = 0;
}
//------------------------------------------------------------------------------------------
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b086      	sub	sp, #24
 8005544:	af00      	add	r7, sp, #0
 8005546:	60f8      	str	r0, [r7, #12]
 8005548:	60b9      	str	r1, [r7, #8]
 800554a:	607a      	str	r2, [r7, #4]
 800554c:	603b      	str	r3, [r7, #0]
    while (w25qxx.Lock) W25qxx_Delay(1);
 800554e:	e002      	b.n	8005556 <W25qxx_WritePage+0x16>
 8005550:	2001      	movs	r0, #1
 8005552:	f000 fad9 	bl	8005b08 <HAL_Delay>
 8005556:	4b4d      	ldr	r3, [pc, #308]	; (800568c <W25qxx_WritePage+0x14c>)
 8005558:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800555c:	2b00      	cmp	r3, #0
 800555e:	d1f7      	bne.n	8005550 <W25qxx_WritePage+0x10>

    w25qxx.Lock = 1;
 8005560:	4b4a      	ldr	r3, [pc, #296]	; (800568c <W25qxx_WritePage+0x14c>)
 8005562:	2201      	movs	r2, #1
 8005564:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

    if ( ((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || !NumByteToWrite_up_to_PageSize )
 8005568:	683a      	ldr	r2, [r7, #0]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4413      	add	r3, r2
 800556e:	4a47      	ldr	r2, [pc, #284]	; (800568c <W25qxx_WritePage+0x14c>)
 8005570:	f8b2 2009 	ldrh.w	r2, [r2, #9]
 8005574:	b292      	uxth	r2, r2
 8005576:	4293      	cmp	r3, r2
 8005578:	d802      	bhi.n	8005580 <W25qxx_WritePage+0x40>
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d107      	bne.n	8005590 <W25qxx_WritePage+0x50>
                NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8005580:	4b42      	ldr	r3, [pc, #264]	; (800568c <W25qxx_WritePage+0x14c>)
 8005582:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8005586:	b29b      	uxth	r3, r3
 8005588:	461a      	mov	r2, r3
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	1ad3      	subs	r3, r2, r3
 800558e:	603b      	str	r3, [r7, #0]
    if ( (OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize )
 8005590:	687a      	ldr	r2, [r7, #4]
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	4413      	add	r3, r2
 8005596:	4a3d      	ldr	r2, [pc, #244]	; (800568c <W25qxx_WritePage+0x14c>)
 8005598:	f8b2 2009 	ldrh.w	r2, [r2, #9]
 800559c:	b292      	uxth	r2, r2
 800559e:	4293      	cmp	r3, r2
 80055a0:	d907      	bls.n	80055b2 <W25qxx_WritePage+0x72>
                NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 80055a2:	4b3a      	ldr	r3, [pc, #232]	; (800568c <W25qxx_WritePage+0x14c>)
 80055a4:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	461a      	mov	r2, r3
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	1ad3      	subs	r3, r2, r3
 80055b0:	603b      	str	r3, [r7, #0]
    Report(1, "%s WritePage:0x%X(%u), Offset:%u ,Writes %u Bytes, begin...\r\n",
                 __func__, Page_Address, Page_Address, OffsetInByte, NumByteToWrite_up_to_PageSize);
    uint32_t StartTime = HAL_GetTick();
#endif

    W25qxx_WaitForWriteEnd();
 80055b2:	f7ff fd99 	bl	80050e8 <W25qxx_WaitForWriteEnd>
    W25qxx_WriteEnable();
 80055b6:	f7ff fd4b 	bl	8005050 <W25qxx_WriteEnable>

    Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 80055ba:	4b34      	ldr	r3, [pc, #208]	; (800568c <W25qxx_WritePage+0x14c>)
 80055bc:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 80055c0:	b29b      	uxth	r3, r3
 80055c2:	461a      	mov	r2, r3
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	fb02 f303 	mul.w	r3, r2, r3
 80055ca:	687a      	ldr	r2, [r7, #4]
 80055cc:	4413      	add	r3, r2
 80055ce:	60bb      	str	r3, [r7, #8]
    W25qxx_Spi((Page_Address & 0xFF00) >> 8);
    W25qxx_Spi(Page_Address&0xFF);
    HAL_SPI_Transmit(portFLASH, pBuffer, NumByteToWrite_up_to_PageSize, min_wait_ms);
    W25_UNSELECT();*/

    uint16_t lens = NumByteToWrite_up_to_PageSize + PAGE_HDR_BYTES;
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	b29b      	uxth	r3, r3
 80055d4:	3304      	adds	r3, #4
 80055d6:	82fb      	strh	r3, [r7, #22]
    int idx = 0;
 80055d8:	2300      	movs	r3, #0
 80055da:	613b      	str	r3, [r7, #16]
    pageTmp[idx++] = PAGE_PROG;
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	1c5a      	adds	r2, r3, #1
 80055e0:	613a      	str	r2, [r7, #16]
 80055e2:	4a2b      	ldr	r2, [pc, #172]	; (8005690 <W25qxx_WritePage+0x150>)
 80055e4:	2102      	movs	r1, #2
 80055e6:	54d1      	strb	r1, [r2, r3]
    //if (w25qxx.ID >= W25Q256) pageTmp[idx++] = (Page_Address & 0xFF000000) >> 24;
    pageTmp[idx++] = (Page_Address & 0xFF0000) >> 16;
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	0c19      	lsrs	r1, r3, #16
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	1c5a      	adds	r2, r3, #1
 80055f0:	613a      	str	r2, [r7, #16]
 80055f2:	b2c9      	uxtb	r1, r1
 80055f4:	4a26      	ldr	r2, [pc, #152]	; (8005690 <W25qxx_WritePage+0x150>)
 80055f6:	54d1      	strb	r1, [r2, r3]
    pageTmp[idx++] = (Page_Address& 0xFF00) >> 8;
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	0a19      	lsrs	r1, r3, #8
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	1c5a      	adds	r2, r3, #1
 8005600:	613a      	str	r2, [r7, #16]
 8005602:	b2c9      	uxtb	r1, r1
 8005604:	4a22      	ldr	r2, [pc, #136]	; (8005690 <W25qxx_WritePage+0x150>)
 8005606:	54d1      	strb	r1, [r2, r3]
    pageTmp[idx++] = Page_Address & 0xFF;
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	1c5a      	adds	r2, r3, #1
 800560c:	613a      	str	r2, [r7, #16]
 800560e:	68ba      	ldr	r2, [r7, #8]
 8005610:	b2d1      	uxtb	r1, r2
 8005612:	4a1f      	ldr	r2, [pc, #124]	; (8005690 <W25qxx_WritePage+0x150>)
 8005614:	54d1      	strb	r1, [r2, r3]
    memcpy(&pageTmp[PAGE_HDR_BYTES], pBuffer, NumByteToWrite_up_to_PageSize);//w25qxx.PageSize);
 8005616:	683a      	ldr	r2, [r7, #0]
 8005618:	68f9      	ldr	r1, [r7, #12]
 800561a:	481e      	ldr	r0, [pc, #120]	; (8005694 <W25qxx_WritePage+0x154>)
 800561c:	f008 f918 	bl	800d850 <memcpy>

    spiRdy = 0;
 8005620:	4b1d      	ldr	r3, [pc, #116]	; (8005698 <W25qxx_WritePage+0x158>)
 8005622:	2200      	movs	r2, #0
 8005624:	701a      	strb	r2, [r3, #0]

w25_withDMA = 1;
 8005626:	4b1d      	ldr	r3, [pc, #116]	; (800569c <W25qxx_WritePage+0x15c>)
 8005628:	2201      	movs	r2, #1
 800562a:	701a      	strb	r2, [r3, #0]
    W25_SELECT();
 800562c:	f7ff fc7e 	bl	8004f2c <W25_SELECT>
    if (w25_withDMA) {
 8005630:	4b1a      	ldr	r3, [pc, #104]	; (800569c <W25qxx_WritePage+0x15c>)
 8005632:	781b      	ldrb	r3, [r3, #0]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d012      	beq.n	800565e <W25qxx_WritePage+0x11e>
    	HAL_SPI_Transmit_DMA(portFLASH, pageTmp, lens);
 8005638:	4b19      	ldr	r3, [pc, #100]	; (80056a0 <W25qxx_WritePage+0x160>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	8afa      	ldrh	r2, [r7, #22]
 800563e:	4914      	ldr	r1, [pc, #80]	; (8005690 <W25qxx_WritePage+0x150>)
 8005640:	4618      	mov	r0, r3
 8005642:	f005 f861 	bl	800a708 <HAL_SPI_Transmit_DMA>
    	while (!spiRdy) {
 8005646:	e002      	b.n	800564e <W25qxx_WritePage+0x10e>
    		W25qxx_Delay(1);
 8005648:	2001      	movs	r0, #1
 800564a:	f000 fa5d 	bl	8005b08 <HAL_Delay>
    	while (!spiRdy) {
 800564e:	4b12      	ldr	r3, [pc, #72]	; (8005698 <W25qxx_WritePage+0x158>)
 8005650:	781b      	ldrb	r3, [r3, #0]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d0f8      	beq.n	8005648 <W25qxx_WritePage+0x108>
    	}
w25_withDMA = 0;
 8005656:	4b11      	ldr	r3, [pc, #68]	; (800569c <W25qxx_WritePage+0x15c>)
 8005658:	2200      	movs	r2, #0
 800565a:	701a      	strb	r2, [r3, #0]
 800565c:	e00d      	b.n	800567a <W25qxx_WritePage+0x13a>
    } else {
    	HAL_SPI_Transmit(portFLASH, pageTmp, lens, min_wait_ms);
 800565e:	4b10      	ldr	r3, [pc, #64]	; (80056a0 <W25qxx_WritePage+0x160>)
 8005660:	6818      	ldr	r0, [r3, #0]
 8005662:	23fa      	movs	r3, #250	; 0xfa
 8005664:	8afa      	ldrh	r2, [r7, #22]
 8005666:	490a      	ldr	r1, [pc, #40]	; (8005690 <W25qxx_WritePage+0x150>)
 8005668:	f004 fb9d 	bl	8009da6 <HAL_SPI_Transmit>

    	W25_UNSELECT();
 800566c:	f7ff fc6a 	bl	8004f44 <W25_UNSELECT>

    	W25qxx_WaitForWriteEnd();
 8005670:	f7ff fd3a 	bl	80050e8 <W25qxx_WaitForWriteEnd>

    	spiRdy = 1;
 8005674:	4b08      	ldr	r3, [pc, #32]	; (8005698 <W25qxx_WritePage+0x158>)
 8005676:	2201      	movs	r2, #1
 8005678:	701a      	strb	r2, [r3, #0]
    	Report(0, "\r\n");
    	Report(1, "%s done after %u ms\r\n", __func__, StartTime);
#endif
    }

    w25qxx.Lock = 0;
 800567a:	4b04      	ldr	r3, [pc, #16]	; (800568c <W25qxx_WritePage+0x14c>)
 800567c:	2200      	movs	r2, #0
 800567e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 8005682:	bf00      	nop
 8005684:	3718      	adds	r7, #24
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}
 800568a:	bf00      	nop
 800568c:	20002c8c 	.word	0x20002c8c
 8005690:	20002cb4 	.word	0x20002cb4
 8005694:	20002cb8 	.word	0x20002cb8
 8005698:	20000198 	.word	0x20000198
 800569c:	20002db9 	.word	0x20002db9
 80056a0:	2000000c 	.word	0x2000000c

080056a4 <W25qxx_WriteSector>:
//------------------------------------------------------------------------------------------
void W25qxx_WriteSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_SectorSize)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b088      	sub	sp, #32
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	60f8      	str	r0, [r7, #12]
 80056ac:	60b9      	str	r1, [r7, #8]
 80056ae:	607a      	str	r2, [r7, #4]
 80056b0:	603b      	str	r3, [r7, #0]
    if ((NumByteToWrite_up_to_SectorSize > w25qxx.SectorSize) || !NumByteToWrite_up_to_SectorSize)
 80056b2:	4b31      	ldr	r3, [pc, #196]	; (8005778 <W25qxx_WriteSector+0xd4>)
 80056b4:	f8d3 300f 	ldr.w	r3, [r3, #15]
 80056b8:	683a      	ldr	r2, [r7, #0]
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d802      	bhi.n	80056c4 <W25qxx_WriteSector+0x20>
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d103      	bne.n	80056cc <W25qxx_WriteSector+0x28>
                NumByteToWrite_up_to_SectorSize = w25qxx.SectorSize;
 80056c4:	4b2c      	ldr	r3, [pc, #176]	; (8005778 <W25qxx_WriteSector+0xd4>)
 80056c6:	f8d3 300f 	ldr.w	r3, [r3, #15]
 80056ca:	603b      	str	r3, [r7, #0]
    Report(1, "%s WriteSector:0x%X(%u), Offset:%u ,Write %u Bytes, begin...\r\n",
                 __func__, Sector_Address, Sector_Address, OffsetInByte, NumByteToWrite_up_to_SectorSize);
    //W25qxx_Delay(100);
#endif

    if (OffsetInByte >= w25qxx.SectorSize) {
 80056cc:	4b2a      	ldr	r3, [pc, #168]	; (8005778 <W25qxx_WriteSector+0xd4>)
 80056ce:	f8d3 300f 	ldr.w	r3, [r3, #15]
 80056d2:	687a      	ldr	r2, [r7, #4]
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d24b      	bcs.n	8005770 <W25qxx_WriteSector+0xcc>
        return;
    }

    int32_t BytesToWrite;
    uint32_t LocalOffset, StartPage;
    if ((OffsetInByte + NumByteToWrite_up_to_SectorSize) > w25qxx.SectorSize)
 80056d8:	687a      	ldr	r2, [r7, #4]
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	441a      	add	r2, r3
 80056de:	4b26      	ldr	r3, [pc, #152]	; (8005778 <W25qxx_WriteSector+0xd4>)
 80056e0:	f8d3 300f 	ldr.w	r3, [r3, #15]
 80056e4:	429a      	cmp	r2, r3
 80056e6:	d906      	bls.n	80056f6 <W25qxx_WriteSector+0x52>
        BytesToWrite = w25qxx.SectorSize - OffsetInByte;
 80056e8:	4b23      	ldr	r3, [pc, #140]	; (8005778 <W25qxx_WriteSector+0xd4>)
 80056ea:	f8d3 200f 	ldr.w	r2, [r3, #15]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	1ad3      	subs	r3, r2, r3
 80056f2:	61fb      	str	r3, [r7, #28]
 80056f4:	e001      	b.n	80056fa <W25qxx_WriteSector+0x56>
    else
        BytesToWrite = NumByteToWrite_up_to_SectorSize;
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	61fb      	str	r3, [r7, #28]
    StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 80056fa:	68b8      	ldr	r0, [r7, #8]
 80056fc:	f7ff fe46 	bl	800538c <W25qxx_SectorToPage>
 8005700:	4602      	mov	r2, r0
 8005702:	4b1d      	ldr	r3, [pc, #116]	; (8005778 <W25qxx_WriteSector+0xd4>)
 8005704:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8005708:	b29b      	uxth	r3, r3
 800570a:	4619      	mov	r1, r3
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005712:	4413      	add	r3, r2
 8005714:	617b      	str	r3, [r7, #20]
    LocalOffset = OffsetInByte % w25qxx.PageSize;
 8005716:	4b18      	ldr	r3, [pc, #96]	; (8005778 <W25qxx_WriteSector+0xd4>)
 8005718:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 800571c:	b29b      	uxth	r3, r3
 800571e:	461a      	mov	r2, r3
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	fbb3 f1f2 	udiv	r1, r3, r2
 8005726:	fb01 f202 	mul.w	r2, r1, r2
 800572a:	1a9b      	subs	r3, r3, r2
 800572c:	61bb      	str	r3, [r7, #24]

    do
    {
        W25qxx_WritePage(pBuffer, StartPage, LocalOffset, BytesToWrite);
 800572e:	69fb      	ldr	r3, [r7, #28]
 8005730:	69ba      	ldr	r2, [r7, #24]
 8005732:	6979      	ldr	r1, [r7, #20]
 8005734:	68f8      	ldr	r0, [r7, #12]
 8005736:	f7ff ff03 	bl	8005540 <W25qxx_WritePage>
        StartPage++;
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	3301      	adds	r3, #1
 800573e:	617b      	str	r3, [r7, #20]
        BytesToWrite -= w25qxx.PageSize - LocalOffset;
 8005740:	4b0d      	ldr	r3, [pc, #52]	; (8005778 <W25qxx_WriteSector+0xd4>)
 8005742:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8005746:	b29b      	uxth	r3, r3
 8005748:	461a      	mov	r2, r3
 800574a:	69bb      	ldr	r3, [r7, #24]
 800574c:	1a9a      	subs	r2, r3, r2
 800574e:	69fb      	ldr	r3, [r7, #28]
 8005750:	4413      	add	r3, r2
 8005752:	61fb      	str	r3, [r7, #28]
        pBuffer += w25qxx.PageSize;
 8005754:	4b08      	ldr	r3, [pc, #32]	; (8005778 <W25qxx_WriteSector+0xd4>)
 8005756:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 800575a:	b29b      	uxth	r3, r3
 800575c:	461a      	mov	r2, r3
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	4413      	add	r3, r2
 8005762:	60fb      	str	r3, [r7, #12]
        LocalOffset = 0;
 8005764:	2300      	movs	r3, #0
 8005766:	61bb      	str	r3, [r7, #24]
    } while(BytesToWrite > 0);
 8005768:	69fb      	ldr	r3, [r7, #28]
 800576a:	2b00      	cmp	r3, #0
 800576c:	dcdf      	bgt.n	800572e <W25qxx_WriteSector+0x8a>
 800576e:	e000      	b.n	8005772 <W25qxx_WriteSector+0xce>
        return;
 8005770:	bf00      	nop
#ifdef W25QXX_DEBUG
    Report(1, "%s Done\r\n", __func__);
    //W25qxx_Delay(100);
#endif

}
 8005772:	3720      	adds	r7, #32
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}
 8005778:	20002c8c 	.word	0x20002c8c

0800577c <W25qxx_ReadPage>:

    w25qxx.Lock = 0;
}
//------------------------------------------------------------------------------------------
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b088      	sub	sp, #32
 8005780:	af02      	add	r7, sp, #8
 8005782:	60f8      	str	r0, [r7, #12]
 8005784:	60b9      	str	r1, [r7, #8]
 8005786:	607a      	str	r2, [r7, #4]
 8005788:	603b      	str	r3, [r7, #0]
    while (w25qxx.Lock) W25qxx_Delay(1);
 800578a:	e002      	b.n	8005792 <W25qxx_ReadPage+0x16>
 800578c:	2001      	movs	r0, #1
 800578e:	f000 f9bb 	bl	8005b08 <HAL_Delay>
 8005792:	4b51      	ldr	r3, [pc, #324]	; (80058d8 <W25qxx_ReadPage+0x15c>)
 8005794:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8005798:	2b00      	cmp	r3, #0
 800579a:	d1f7      	bne.n	800578c <W25qxx_ReadPage+0x10>

    w25qxx.Lock = 1;
 800579c:	4b4e      	ldr	r3, [pc, #312]	; (80058d8 <W25qxx_ReadPage+0x15c>)
 800579e:	2201      	movs	r2, #1
 80057a0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

    if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || !NumByteToRead_up_to_PageSize)
 80057a4:	4b4c      	ldr	r3, [pc, #304]	; (80058d8 <W25qxx_ReadPage+0x15c>)
 80057a6:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 80057aa:	b29b      	uxth	r3, r3
 80057ac:	461a      	mov	r2, r3
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d802      	bhi.n	80057ba <W25qxx_ReadPage+0x3e>
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d104      	bne.n	80057c4 <W25qxx_ReadPage+0x48>
        NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 80057ba:	4b47      	ldr	r3, [pc, #284]	; (80058d8 <W25qxx_ReadPage+0x15c>)
 80057bc:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	603b      	str	r3, [r7, #0]
    if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 80057c4:	687a      	ldr	r2, [r7, #4]
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	4413      	add	r3, r2
 80057ca:	4a43      	ldr	r2, [pc, #268]	; (80058d8 <W25qxx_ReadPage+0x15c>)
 80057cc:	f8b2 2009 	ldrh.w	r2, [r2, #9]
 80057d0:	b292      	uxth	r2, r2
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d907      	bls.n	80057e6 <W25qxx_ReadPage+0x6a>
        NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 80057d6:	4b40      	ldr	r3, [pc, #256]	; (80058d8 <W25qxx_ReadPage+0x15c>)
 80057d8:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 80057dc:	b29b      	uxth	r3, r3
 80057de:	461a      	mov	r2, r3
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	1ad3      	subs	r3, r2, r3
 80057e4:	603b      	str	r3, [r7, #0]
                 __func__, Page_Address, Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
    //W25qxx_Delay(100);
    uint32_t StartTime = HAL_GetTick();
#endif

    Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 80057e6:	4b3c      	ldr	r3, [pc, #240]	; (80058d8 <W25qxx_ReadPage+0x15c>)
 80057e8:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	461a      	mov	r2, r3
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	fb02 f303 	mul.w	r3, r2, r3
 80057f6:	687a      	ldr	r2, [r7, #4]
 80057f8:	4413      	add	r3, r2
 80057fa:	60bb      	str	r3, [r7, #8]
    W25qxx_Spi(Page_Address & 0xFF);
    //W25qxx_Spi(0);
    HAL_SPI_Receive(portFLASH, pBuffer, NumByteToRead_up_to_PageSize, min_wait_ms);
    W25_UNSELECT();
    */
    memset(pageTmp, 0, sizeof(pageTmp));
 80057fc:	f240 1205 	movw	r2, #261	; 0x105
 8005800:	2100      	movs	r1, #0
 8005802:	4836      	ldr	r0, [pc, #216]	; (80058dc <W25qxx_ReadPage+0x160>)
 8005804:	f008 f832 	bl	800d86c <memset>
    uint16_t lens = NumByteToRead_up_to_PageSize + PAGE_HDR_BYTES;// + 1;
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	b29b      	uxth	r3, r3
 800580c:	3304      	adds	r3, #4
 800580e:	82fb      	strh	r3, [r7, #22]
    int idx = 0;
 8005810:	2300      	movs	r3, #0
 8005812:	613b      	str	r3, [r7, #16]
    pageTmp[idx++] = DATA_READ;//FAST_READ;
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	1c5a      	adds	r2, r3, #1
 8005818:	613a      	str	r2, [r7, #16]
 800581a:	4a30      	ldr	r2, [pc, #192]	; (80058dc <W25qxx_ReadPage+0x160>)
 800581c:	2103      	movs	r1, #3
 800581e:	54d1      	strb	r1, [r2, r3]
    //if (w25qxx.ID >= W25Q256) pageTmp[idx++] = (Page_Address & 0xFF000000) >> 24;
    pageTmp[idx++] = (Page_Address & 0xFF0000) >> 16;
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	0c19      	lsrs	r1, r3, #16
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	1c5a      	adds	r2, r3, #1
 8005828:	613a      	str	r2, [r7, #16]
 800582a:	b2c9      	uxtb	r1, r1
 800582c:	4a2b      	ldr	r2, [pc, #172]	; (80058dc <W25qxx_ReadPage+0x160>)
 800582e:	54d1      	strb	r1, [r2, r3]
    pageTmp[idx++] = (Page_Address& 0xFF00) >> 8;
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	0a19      	lsrs	r1, r3, #8
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	1c5a      	adds	r2, r3, #1
 8005838:	613a      	str	r2, [r7, #16]
 800583a:	b2c9      	uxtb	r1, r1
 800583c:	4a27      	ldr	r2, [pc, #156]	; (80058dc <W25qxx_ReadPage+0x160>)
 800583e:	54d1      	strb	r1, [r2, r3]
    pageTmp[idx++] = Page_Address & 0xFF;
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	1c5a      	adds	r2, r3, #1
 8005844:	613a      	str	r2, [r7, #16]
 8005846:	68ba      	ldr	r2, [r7, #8]
 8005848:	b2d1      	uxtb	r1, r2
 800584a:	4a24      	ldr	r2, [pc, #144]	; (80058dc <W25qxx_ReadPage+0x160>)
 800584c:	54d1      	strb	r1, [r2, r3]
    //pageTmp[idx++] = 0;
    spiRdy = 0;
 800584e:	4b24      	ldr	r3, [pc, #144]	; (80058e0 <W25qxx_ReadPage+0x164>)
 8005850:	2200      	movs	r2, #0
 8005852:	701a      	strb	r2, [r3, #0]

w25_withDMA = 1;
 8005854:	4b23      	ldr	r3, [pc, #140]	; (80058e4 <W25qxx_ReadPage+0x168>)
 8005856:	2201      	movs	r2, #1
 8005858:	701a      	strb	r2, [r3, #0]
    W25_SELECT();
 800585a:	f7ff fb67 	bl	8004f2c <W25_SELECT>
    if (w25_withDMA) {
 800585e:	4b21      	ldr	r3, [pc, #132]	; (80058e4 <W25qxx_ReadPage+0x168>)
 8005860:	781b      	ldrb	r3, [r3, #0]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d012      	beq.n	800588c <W25qxx_ReadPage+0x110>
    	HAL_SPI_TransmitReceive_DMA(portFLASH, pageTmp, pageTmp, lens);
 8005866:	4b20      	ldr	r3, [pc, #128]	; (80058e8 <W25qxx_ReadPage+0x16c>)
 8005868:	6818      	ldr	r0, [r3, #0]
 800586a:	8afb      	ldrh	r3, [r7, #22]
 800586c:	4a1b      	ldr	r2, [pc, #108]	; (80058dc <W25qxx_ReadPage+0x160>)
 800586e:	491b      	ldr	r1, [pc, #108]	; (80058dc <W25qxx_ReadPage+0x160>)
 8005870:	f005 f83e 	bl	800a8f0 <HAL_SPI_TransmitReceive_DMA>
    	while (!spiRdy) {
 8005874:	e002      	b.n	800587c <W25qxx_ReadPage+0x100>
    		W25qxx_Delay(1);
 8005876:	2001      	movs	r0, #1
 8005878:	f000 f946 	bl	8005b08 <HAL_Delay>
    	while (!spiRdy) {
 800587c:	4b18      	ldr	r3, [pc, #96]	; (80058e0 <W25qxx_ReadPage+0x164>)
 800587e:	781b      	ldrb	r3, [r3, #0]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d0f8      	beq.n	8005876 <W25qxx_ReadPage+0xfa>
    	}
w25_withDMA = 0;
 8005884:	4b17      	ldr	r3, [pc, #92]	; (80058e4 <W25qxx_ReadPage+0x168>)
 8005886:	2200      	movs	r2, #0
 8005888:	701a      	strb	r2, [r3, #0]
 800588a:	e017      	b.n	80058bc <W25qxx_ReadPage+0x140>
    } else {
    	if (HAL_SPI_TransmitReceive(portFLASH, pageTmp, pageTmp, lens, min_wait_ms) != HAL_OK) devError |= devSPI;
 800588c:	4b16      	ldr	r3, [pc, #88]	; (80058e8 <W25qxx_ReadPage+0x16c>)
 800588e:	6818      	ldr	r0, [r3, #0]
 8005890:	22fa      	movs	r2, #250	; 0xfa
 8005892:	8afb      	ldrh	r3, [r7, #22]
 8005894:	9200      	str	r2, [sp, #0]
 8005896:	4a11      	ldr	r2, [pc, #68]	; (80058dc <W25qxx_ReadPage+0x160>)
 8005898:	4910      	ldr	r1, [pc, #64]	; (80058dc <W25qxx_ReadPage+0x160>)
 800589a:	f004 fd22 	bl	800a2e2 <HAL_SPI_TransmitReceive>
 800589e:	4603      	mov	r3, r0
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d006      	beq.n	80058b2 <W25qxx_ReadPage+0x136>
 80058a4:	4b11      	ldr	r3, [pc, #68]	; (80058ec <W25qxx_ReadPage+0x170>)
 80058a6:	881b      	ldrh	r3, [r3, #0]
 80058a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058ac:	b29a      	uxth	r2, r3
 80058ae:	4b0f      	ldr	r3, [pc, #60]	; (80058ec <W25qxx_ReadPage+0x170>)
 80058b0:	801a      	strh	r2, [r3, #0]
    	W25_UNSELECT();
 80058b2:	f7ff fb47 	bl	8004f44 <W25_UNSELECT>

    	spiRdy = 1;
 80058b6:	4b0a      	ldr	r3, [pc, #40]	; (80058e0 <W25qxx_ReadPage+0x164>)
 80058b8:	2201      	movs	r2, #1
 80058ba:	701a      	strb	r2, [r3, #0]
    }
	memcpy(pBuffer, &pageTmp[PAGE_HDR_BYTES], NumByteToRead_up_to_PageSize);//w25qxx.PageSize);
 80058bc:	683a      	ldr	r2, [r7, #0]
 80058be:	490c      	ldr	r1, [pc, #48]	; (80058f0 <W25qxx_ReadPage+0x174>)
 80058c0:	68f8      	ldr	r0, [r7, #12]
 80058c2:	f007 ffc5 	bl	800d850 <memcpy>
    	Report(0, "\r\n");
    	Report(1, "%s done after %u ms\r\n", __func__, StartTime);
#endif


    w25qxx.Lock = 0;
 80058c6:	4b04      	ldr	r3, [pc, #16]	; (80058d8 <W25qxx_ReadPage+0x15c>)
 80058c8:	2200      	movs	r2, #0
 80058ca:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 80058ce:	bf00      	nop
 80058d0:	3718      	adds	r7, #24
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}
 80058d6:	bf00      	nop
 80058d8:	20002c8c 	.word	0x20002c8c
 80058dc:	20002cb4 	.word	0x20002cb4
 80058e0:	20000198 	.word	0x20000198
 80058e4:	20002db9 	.word	0x20002db9
 80058e8:	2000000c 	.word	0x2000000c
 80058ec:	20001424 	.word	0x20001424
 80058f0:	20002cb8 	.word	0x20002cb8

080058f4 <W25qxx_ReadSector>:
//------------------------------------------------------------------------------------------
void W25qxx_ReadSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_SectorSize)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b088      	sub	sp, #32
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	60f8      	str	r0, [r7, #12]
 80058fc:	60b9      	str	r1, [r7, #8]
 80058fe:	607a      	str	r2, [r7, #4]
 8005900:	603b      	str	r3, [r7, #0]
    if ((NumByteToRead_up_to_SectorSize > w25qxx.SectorSize) || !NumByteToRead_up_to_SectorSize)
 8005902:	4b31      	ldr	r3, [pc, #196]	; (80059c8 <W25qxx_ReadSector+0xd4>)
 8005904:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8005908:	683a      	ldr	r2, [r7, #0]
 800590a:	429a      	cmp	r2, r3
 800590c:	d802      	bhi.n	8005914 <W25qxx_ReadSector+0x20>
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d103      	bne.n	800591c <W25qxx_ReadSector+0x28>
                NumByteToRead_up_to_SectorSize = w25qxx.SectorSize;
 8005914:	4b2c      	ldr	r3, [pc, #176]	; (80059c8 <W25qxx_ReadSector+0xd4>)
 8005916:	f8d3 300f 	ldr.w	r3, [r3, #15]
 800591a:	603b      	str	r3, [r7, #0]
    Report(1, "%s:0x%X(%u), Offset:%u ,Read %u Bytes, begin...\r\n",
                 __func__, Sector_Address, Sector_Address, OffsetInByte, NumByteToRead_up_to_SectorSize);
    //W25qxx_Delay(100);
#endif

    if (OffsetInByte >= w25qxx.SectorSize) {
 800591c:	4b2a      	ldr	r3, [pc, #168]	; (80059c8 <W25qxx_ReadSector+0xd4>)
 800591e:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8005922:	687a      	ldr	r2, [r7, #4]
 8005924:	429a      	cmp	r2, r3
 8005926:	d24b      	bcs.n	80059c0 <W25qxx_ReadSector+0xcc>
        return;
    }

    int32_t BytesToRead;
    uint32_t LocalOffset, StartPage;
    if ((OffsetInByte + NumByteToRead_up_to_SectorSize) > w25qxx.SectorSize)
 8005928:	687a      	ldr	r2, [r7, #4]
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	441a      	add	r2, r3
 800592e:	4b26      	ldr	r3, [pc, #152]	; (80059c8 <W25qxx_ReadSector+0xd4>)
 8005930:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8005934:	429a      	cmp	r2, r3
 8005936:	d906      	bls.n	8005946 <W25qxx_ReadSector+0x52>
        BytesToRead = w25qxx.SectorSize - OffsetInByte;
 8005938:	4b23      	ldr	r3, [pc, #140]	; (80059c8 <W25qxx_ReadSector+0xd4>)
 800593a:	f8d3 200f 	ldr.w	r2, [r3, #15]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	1ad3      	subs	r3, r2, r3
 8005942:	61fb      	str	r3, [r7, #28]
 8005944:	e001      	b.n	800594a <W25qxx_ReadSector+0x56>
    else
        BytesToRead = NumByteToRead_up_to_SectorSize;
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	61fb      	str	r3, [r7, #28]
    StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 800594a:	68b8      	ldr	r0, [r7, #8]
 800594c:	f7ff fd1e 	bl	800538c <W25qxx_SectorToPage>
 8005950:	4602      	mov	r2, r0
 8005952:	4b1d      	ldr	r3, [pc, #116]	; (80059c8 <W25qxx_ReadSector+0xd4>)
 8005954:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8005958:	b29b      	uxth	r3, r3
 800595a:	4619      	mov	r1, r3
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005962:	4413      	add	r3, r2
 8005964:	617b      	str	r3, [r7, #20]
    LocalOffset = OffsetInByte % w25qxx.PageSize;
 8005966:	4b18      	ldr	r3, [pc, #96]	; (80059c8 <W25qxx_ReadSector+0xd4>)
 8005968:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 800596c:	b29b      	uxth	r3, r3
 800596e:	461a      	mov	r2, r3
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	fbb3 f1f2 	udiv	r1, r3, r2
 8005976:	fb01 f202 	mul.w	r2, r1, r2
 800597a:	1a9b      	subs	r3, r3, r2
 800597c:	61bb      	str	r3, [r7, #24]
    do {
        W25qxx_ReadPage(pBuffer, StartPage, LocalOffset, BytesToRead);
 800597e:	69fb      	ldr	r3, [r7, #28]
 8005980:	69ba      	ldr	r2, [r7, #24]
 8005982:	6979      	ldr	r1, [r7, #20]
 8005984:	68f8      	ldr	r0, [r7, #12]
 8005986:	f7ff fef9 	bl	800577c <W25qxx_ReadPage>
        StartPage++;
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	3301      	adds	r3, #1
 800598e:	617b      	str	r3, [r7, #20]
        BytesToRead -= w25qxx.PageSize - LocalOffset;
 8005990:	4b0d      	ldr	r3, [pc, #52]	; (80059c8 <W25qxx_ReadSector+0xd4>)
 8005992:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8005996:	b29b      	uxth	r3, r3
 8005998:	461a      	mov	r2, r3
 800599a:	69bb      	ldr	r3, [r7, #24]
 800599c:	1a9a      	subs	r2, r3, r2
 800599e:	69fb      	ldr	r3, [r7, #28]
 80059a0:	4413      	add	r3, r2
 80059a2:	61fb      	str	r3, [r7, #28]
        pBuffer += w25qxx.PageSize;
 80059a4:	4b08      	ldr	r3, [pc, #32]	; (80059c8 <W25qxx_ReadSector+0xd4>)
 80059a6:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 80059aa:	b29b      	uxth	r3, r3
 80059ac:	461a      	mov	r2, r3
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	4413      	add	r3, r2
 80059b2:	60fb      	str	r3, [r7, #12]
        LocalOffset = 0;
 80059b4:	2300      	movs	r3, #0
 80059b6:	61bb      	str	r3, [r7, #24]
    } while(BytesToRead > 0);
 80059b8:	69fb      	ldr	r3, [r7, #28]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	dcdf      	bgt.n	800597e <W25qxx_ReadSector+0x8a>
 80059be:	e000      	b.n	80059c2 <W25qxx_ReadSector+0xce>
        return;
 80059c0:	bf00      	nop
#ifdef W25QXX_DEBUG
    Report(1, "%s done\r\n", __func__);
    //W25qxx_Delay(100);
#endif

}
 80059c2:	3720      	adds	r7, #32
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}
 80059c8:	20002c8c 	.word	0x20002c8c

080059cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80059cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005a04 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80059d0:	f7ff fa9a 	bl	8004f08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80059d4:	480c      	ldr	r0, [pc, #48]	; (8005a08 <LoopForever+0x6>)
  ldr r1, =_edata
 80059d6:	490d      	ldr	r1, [pc, #52]	; (8005a0c <LoopForever+0xa>)
  ldr r2, =_sidata
 80059d8:	4a0d      	ldr	r2, [pc, #52]	; (8005a10 <LoopForever+0xe>)
  movs r3, #0
 80059da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80059dc:	e002      	b.n	80059e4 <LoopCopyDataInit>

080059de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80059de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80059e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80059e2:	3304      	adds	r3, #4

080059e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80059e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80059e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80059e8:	d3f9      	bcc.n	80059de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80059ea:	4a0a      	ldr	r2, [pc, #40]	; (8005a14 <LoopForever+0x12>)
  ldr r4, =_ebss
 80059ec:	4c0a      	ldr	r4, [pc, #40]	; (8005a18 <LoopForever+0x16>)
  movs r3, #0
 80059ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80059f0:	e001      	b.n	80059f6 <LoopFillZerobss>

080059f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80059f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80059f4:	3204      	adds	r2, #4

080059f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80059f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80059f8:	d3fb      	bcc.n	80059f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80059fa:	f007 ff05 	bl	800d808 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80059fe:	f7fc f97d 	bl	8001cfc <main>

08005a02 <LoopForever>:

LoopForever:
    b LoopForever
 8005a02:	e7fe      	b.n	8005a02 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8005a04:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8005a08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005a0c:	200003c4 	.word	0x200003c4
  ldr r2, =_sidata
 8005a10:	08013334 	.word	0x08013334
  ldr r2, =_sbss
 8005a14:	200003c8 	.word	0x200003c8
  ldr r4, =_ebss
 8005a18:	20002dd0 	.word	0x20002dd0

08005a1c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005a1c:	e7fe      	b.n	8005a1c <ADC1_2_IRQHandler>

08005a1e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005a1e:	b580      	push	{r7, lr}
 8005a20:	b082      	sub	sp, #8
 8005a22:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005a24:	2300      	movs	r3, #0
 8005a26:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005a28:	2003      	movs	r0, #3
 8005a2a:	f000 f985 	bl	8005d38 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005a2e:	200f      	movs	r0, #15
 8005a30:	f000 f80e 	bl	8005a50 <HAL_InitTick>
 8005a34:	4603      	mov	r3, r0
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d002      	beq.n	8005a40 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	71fb      	strb	r3, [r7, #7]
 8005a3e:	e001      	b.n	8005a44 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005a40:	f7fe fdfc 	bl	800463c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005a44:	79fb      	ldrb	r3, [r7, #7]
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	3708      	adds	r7, #8
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}
	...

08005a50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b084      	sub	sp, #16
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8005a5c:	4b17      	ldr	r3, [pc, #92]	; (8005abc <HAL_InitTick+0x6c>)
 8005a5e:	781b      	ldrb	r3, [r3, #0]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d023      	beq.n	8005aac <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8005a64:	4b16      	ldr	r3, [pc, #88]	; (8005ac0 <HAL_InitTick+0x70>)
 8005a66:	681a      	ldr	r2, [r3, #0]
 8005a68:	4b14      	ldr	r3, [pc, #80]	; (8005abc <HAL_InitTick+0x6c>)
 8005a6a:	781b      	ldrb	r3, [r3, #0]
 8005a6c:	4619      	mov	r1, r3
 8005a6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005a72:	fbb3 f3f1 	udiv	r3, r3, r1
 8005a76:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f000 f99f 	bl	8005dbe <HAL_SYSTICK_Config>
 8005a80:	4603      	mov	r3, r0
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d10f      	bne.n	8005aa6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2b0f      	cmp	r3, #15
 8005a8a:	d809      	bhi.n	8005aa0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	6879      	ldr	r1, [r7, #4]
 8005a90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a94:	f000 f95b 	bl	8005d4e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005a98:	4a0a      	ldr	r2, [pc, #40]	; (8005ac4 <HAL_InitTick+0x74>)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6013      	str	r3, [r2, #0]
 8005a9e:	e007      	b.n	8005ab0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	73fb      	strb	r3, [r7, #15]
 8005aa4:	e004      	b.n	8005ab0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	73fb      	strb	r3, [r7, #15]
 8005aaa:	e001      	b.n	8005ab0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005aac:	2301      	movs	r3, #1
 8005aae:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005ab0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	3710      	adds	r7, #16
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}
 8005aba:	bf00      	nop
 8005abc:	200001ec 	.word	0x200001ec
 8005ac0:	200001b8 	.word	0x200001b8
 8005ac4:	200001e8 	.word	0x200001e8

08005ac8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005acc:	4b06      	ldr	r3, [pc, #24]	; (8005ae8 <HAL_IncTick+0x20>)
 8005ace:	781b      	ldrb	r3, [r3, #0]
 8005ad0:	461a      	mov	r2, r3
 8005ad2:	4b06      	ldr	r3, [pc, #24]	; (8005aec <HAL_IncTick+0x24>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4413      	add	r3, r2
 8005ad8:	4a04      	ldr	r2, [pc, #16]	; (8005aec <HAL_IncTick+0x24>)
 8005ada:	6013      	str	r3, [r2, #0]
}
 8005adc:	bf00      	nop
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae4:	4770      	bx	lr
 8005ae6:	bf00      	nop
 8005ae8:	200001ec 	.word	0x200001ec
 8005aec:	20002dbc 	.word	0x20002dbc

08005af0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005af0:	b480      	push	{r7}
 8005af2:	af00      	add	r7, sp, #0
  return uwTick;
 8005af4:	4b03      	ldr	r3, [pc, #12]	; (8005b04 <HAL_GetTick+0x14>)
 8005af6:	681b      	ldr	r3, [r3, #0]
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr
 8005b02:	bf00      	nop
 8005b04:	20002dbc 	.word	0x20002dbc

08005b08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b084      	sub	sp, #16
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005b10:	f7ff ffee 	bl	8005af0 <HAL_GetTick>
 8005b14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b20:	d005      	beq.n	8005b2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8005b22:	4b0a      	ldr	r3, [pc, #40]	; (8005b4c <HAL_Delay+0x44>)
 8005b24:	781b      	ldrb	r3, [r3, #0]
 8005b26:	461a      	mov	r2, r3
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	4413      	add	r3, r2
 8005b2c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005b2e:	bf00      	nop
 8005b30:	f7ff ffde 	bl	8005af0 <HAL_GetTick>
 8005b34:	4602      	mov	r2, r0
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	1ad3      	subs	r3, r2, r3
 8005b3a:	68fa      	ldr	r2, [r7, #12]
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d8f7      	bhi.n	8005b30 <HAL_Delay+0x28>
  {
  }
}
 8005b40:	bf00      	nop
 8005b42:	bf00      	nop
 8005b44:	3710      	adds	r7, #16
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}
 8005b4a:	bf00      	nop
 8005b4c:	200001ec 	.word	0x200001ec

08005b50 <__NVIC_SetPriorityGrouping>:
{
 8005b50:	b480      	push	{r7}
 8005b52:	b085      	sub	sp, #20
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f003 0307 	and.w	r3, r3, #7
 8005b5e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005b60:	4b0c      	ldr	r3, [pc, #48]	; (8005b94 <__NVIC_SetPriorityGrouping+0x44>)
 8005b62:	68db      	ldr	r3, [r3, #12]
 8005b64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005b66:	68ba      	ldr	r2, [r7, #8]
 8005b68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005b6c:	4013      	ands	r3, r2
 8005b6e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005b78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005b7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005b82:	4a04      	ldr	r2, [pc, #16]	; (8005b94 <__NVIC_SetPriorityGrouping+0x44>)
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	60d3      	str	r3, [r2, #12]
}
 8005b88:	bf00      	nop
 8005b8a:	3714      	adds	r7, #20
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr
 8005b94:	e000ed00 	.word	0xe000ed00

08005b98 <__NVIC_GetPriorityGrouping>:
{
 8005b98:	b480      	push	{r7}
 8005b9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005b9c:	4b04      	ldr	r3, [pc, #16]	; (8005bb0 <__NVIC_GetPriorityGrouping+0x18>)
 8005b9e:	68db      	ldr	r3, [r3, #12]
 8005ba0:	0a1b      	lsrs	r3, r3, #8
 8005ba2:	f003 0307 	and.w	r3, r3, #7
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bae:	4770      	bx	lr
 8005bb0:	e000ed00 	.word	0xe000ed00

08005bb4 <__NVIC_EnableIRQ>:
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b083      	sub	sp, #12
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	4603      	mov	r3, r0
 8005bbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	db0b      	blt.n	8005bde <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005bc6:	79fb      	ldrb	r3, [r7, #7]
 8005bc8:	f003 021f 	and.w	r2, r3, #31
 8005bcc:	4907      	ldr	r1, [pc, #28]	; (8005bec <__NVIC_EnableIRQ+0x38>)
 8005bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bd2:	095b      	lsrs	r3, r3, #5
 8005bd4:	2001      	movs	r0, #1
 8005bd6:	fa00 f202 	lsl.w	r2, r0, r2
 8005bda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005bde:	bf00      	nop
 8005be0:	370c      	adds	r7, #12
 8005be2:	46bd      	mov	sp, r7
 8005be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be8:	4770      	bx	lr
 8005bea:	bf00      	nop
 8005bec:	e000e100 	.word	0xe000e100

08005bf0 <__NVIC_DisableIRQ>:
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b083      	sub	sp, #12
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	db12      	blt.n	8005c28 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005c02:	79fb      	ldrb	r3, [r7, #7]
 8005c04:	f003 021f 	and.w	r2, r3, #31
 8005c08:	490a      	ldr	r1, [pc, #40]	; (8005c34 <__NVIC_DisableIRQ+0x44>)
 8005c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c0e:	095b      	lsrs	r3, r3, #5
 8005c10:	2001      	movs	r0, #1
 8005c12:	fa00 f202 	lsl.w	r2, r0, r2
 8005c16:	3320      	adds	r3, #32
 8005c18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8005c1c:	f3bf 8f4f 	dsb	sy
}
 8005c20:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005c22:	f3bf 8f6f 	isb	sy
}
 8005c26:	bf00      	nop
}
 8005c28:	bf00      	nop
 8005c2a:	370c      	adds	r7, #12
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c32:	4770      	bx	lr
 8005c34:	e000e100 	.word	0xe000e100

08005c38 <__NVIC_SetPriority>:
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b083      	sub	sp, #12
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	4603      	mov	r3, r0
 8005c40:	6039      	str	r1, [r7, #0]
 8005c42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005c44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	db0a      	blt.n	8005c62 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	b2da      	uxtb	r2, r3
 8005c50:	490c      	ldr	r1, [pc, #48]	; (8005c84 <__NVIC_SetPriority+0x4c>)
 8005c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c56:	0112      	lsls	r2, r2, #4
 8005c58:	b2d2      	uxtb	r2, r2
 8005c5a:	440b      	add	r3, r1
 8005c5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005c60:	e00a      	b.n	8005c78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	b2da      	uxtb	r2, r3
 8005c66:	4908      	ldr	r1, [pc, #32]	; (8005c88 <__NVIC_SetPriority+0x50>)
 8005c68:	79fb      	ldrb	r3, [r7, #7]
 8005c6a:	f003 030f 	and.w	r3, r3, #15
 8005c6e:	3b04      	subs	r3, #4
 8005c70:	0112      	lsls	r2, r2, #4
 8005c72:	b2d2      	uxtb	r2, r2
 8005c74:	440b      	add	r3, r1
 8005c76:	761a      	strb	r2, [r3, #24]
}
 8005c78:	bf00      	nop
 8005c7a:	370c      	adds	r7, #12
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c82:	4770      	bx	lr
 8005c84:	e000e100 	.word	0xe000e100
 8005c88:	e000ed00 	.word	0xe000ed00

08005c8c <NVIC_EncodePriority>:
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b089      	sub	sp, #36	; 0x24
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	60f8      	str	r0, [r7, #12]
 8005c94:	60b9      	str	r1, [r7, #8]
 8005c96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f003 0307 	and.w	r3, r3, #7
 8005c9e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005ca0:	69fb      	ldr	r3, [r7, #28]
 8005ca2:	f1c3 0307 	rsb	r3, r3, #7
 8005ca6:	2b04      	cmp	r3, #4
 8005ca8:	bf28      	it	cs
 8005caa:	2304      	movcs	r3, #4
 8005cac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005cae:	69fb      	ldr	r3, [r7, #28]
 8005cb0:	3304      	adds	r3, #4
 8005cb2:	2b06      	cmp	r3, #6
 8005cb4:	d902      	bls.n	8005cbc <NVIC_EncodePriority+0x30>
 8005cb6:	69fb      	ldr	r3, [r7, #28]
 8005cb8:	3b03      	subs	r3, #3
 8005cba:	e000      	b.n	8005cbe <NVIC_EncodePriority+0x32>
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005cc0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005cc4:	69bb      	ldr	r3, [r7, #24]
 8005cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8005cca:	43da      	mvns	r2, r3
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	401a      	ands	r2, r3
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005cd4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	fa01 f303 	lsl.w	r3, r1, r3
 8005cde:	43d9      	mvns	r1, r3
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ce4:	4313      	orrs	r3, r2
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3724      	adds	r7, #36	; 0x24
 8005cea:	46bd      	mov	sp, r7
 8005cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf0:	4770      	bx	lr
	...

08005cf4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b082      	sub	sp, #8
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	3b01      	subs	r3, #1
 8005d00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005d04:	d301      	bcc.n	8005d0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005d06:	2301      	movs	r3, #1
 8005d08:	e00f      	b.n	8005d2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005d0a:	4a0a      	ldr	r2, [pc, #40]	; (8005d34 <SysTick_Config+0x40>)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	3b01      	subs	r3, #1
 8005d10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005d12:	210f      	movs	r1, #15
 8005d14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005d18:	f7ff ff8e 	bl	8005c38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005d1c:	4b05      	ldr	r3, [pc, #20]	; (8005d34 <SysTick_Config+0x40>)
 8005d1e:	2200      	movs	r2, #0
 8005d20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005d22:	4b04      	ldr	r3, [pc, #16]	; (8005d34 <SysTick_Config+0x40>)
 8005d24:	2207      	movs	r2, #7
 8005d26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005d28:	2300      	movs	r3, #0
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3708      	adds	r7, #8
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}
 8005d32:	bf00      	nop
 8005d34:	e000e010 	.word	0xe000e010

08005d38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b082      	sub	sp, #8
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f7ff ff05 	bl	8005b50 <__NVIC_SetPriorityGrouping>
}
 8005d46:	bf00      	nop
 8005d48:	3708      	adds	r7, #8
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}

08005d4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005d4e:	b580      	push	{r7, lr}
 8005d50:	b086      	sub	sp, #24
 8005d52:	af00      	add	r7, sp, #0
 8005d54:	4603      	mov	r3, r0
 8005d56:	60b9      	str	r1, [r7, #8]
 8005d58:	607a      	str	r2, [r7, #4]
 8005d5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005d60:	f7ff ff1a 	bl	8005b98 <__NVIC_GetPriorityGrouping>
 8005d64:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005d66:	687a      	ldr	r2, [r7, #4]
 8005d68:	68b9      	ldr	r1, [r7, #8]
 8005d6a:	6978      	ldr	r0, [r7, #20]
 8005d6c:	f7ff ff8e 	bl	8005c8c <NVIC_EncodePriority>
 8005d70:	4602      	mov	r2, r0
 8005d72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d76:	4611      	mov	r1, r2
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f7ff ff5d 	bl	8005c38 <__NVIC_SetPriority>
}
 8005d7e:	bf00      	nop
 8005d80:	3718      	adds	r7, #24
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}

08005d86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005d86:	b580      	push	{r7, lr}
 8005d88:	b082      	sub	sp, #8
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005d90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d94:	4618      	mov	r0, r3
 8005d96:	f7ff ff0d 	bl	8005bb4 <__NVIC_EnableIRQ>
}
 8005d9a:	bf00      	nop
 8005d9c:	3708      	adds	r7, #8
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}

08005da2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005da2:	b580      	push	{r7, lr}
 8005da4:	b082      	sub	sp, #8
 8005da6:	af00      	add	r7, sp, #0
 8005da8:	4603      	mov	r3, r0
 8005daa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005dac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005db0:	4618      	mov	r0, r3
 8005db2:	f7ff ff1d 	bl	8005bf0 <__NVIC_DisableIRQ>
}
 8005db6:	bf00      	nop
 8005db8:	3708      	adds	r7, #8
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}

08005dbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005dbe:	b580      	push	{r7, lr}
 8005dc0:	b082      	sub	sp, #8
 8005dc2:	af00      	add	r7, sp, #0
 8005dc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f7ff ff94 	bl	8005cf4 <SysTick_Config>
 8005dcc:	4603      	mov	r3, r0
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3708      	adds	r7, #8
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}
	...

08005dd8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b085      	sub	sp, #20
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d101      	bne.n	8005dea <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005de6:	2301      	movs	r3, #1
 8005de8:	e098      	b.n	8005f1c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	461a      	mov	r2, r3
 8005df0:	4b4d      	ldr	r3, [pc, #308]	; (8005f28 <HAL_DMA_Init+0x150>)
 8005df2:	429a      	cmp	r2, r3
 8005df4:	d80f      	bhi.n	8005e16 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	461a      	mov	r2, r3
 8005dfc:	4b4b      	ldr	r3, [pc, #300]	; (8005f2c <HAL_DMA_Init+0x154>)
 8005dfe:	4413      	add	r3, r2
 8005e00:	4a4b      	ldr	r2, [pc, #300]	; (8005f30 <HAL_DMA_Init+0x158>)
 8005e02:	fba2 2303 	umull	r2, r3, r2, r3
 8005e06:	091b      	lsrs	r3, r3, #4
 8005e08:	009a      	lsls	r2, r3, #2
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	4a48      	ldr	r2, [pc, #288]	; (8005f34 <HAL_DMA_Init+0x15c>)
 8005e12:	641a      	str	r2, [r3, #64]	; 0x40
 8005e14:	e00e      	b.n	8005e34 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	461a      	mov	r2, r3
 8005e1c:	4b46      	ldr	r3, [pc, #280]	; (8005f38 <HAL_DMA_Init+0x160>)
 8005e1e:	4413      	add	r3, r2
 8005e20:	4a43      	ldr	r2, [pc, #268]	; (8005f30 <HAL_DMA_Init+0x158>)
 8005e22:	fba2 2303 	umull	r2, r3, r2, r3
 8005e26:	091b      	lsrs	r3, r3, #4
 8005e28:	009a      	lsls	r2, r3, #2
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	4a42      	ldr	r2, [pc, #264]	; (8005f3c <HAL_DMA_Init+0x164>)
 8005e32:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2202      	movs	r2, #2
 8005e38:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005e4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e4e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005e58:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	691b      	ldr	r3, [r3, #16]
 8005e5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005e64:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	699b      	ldr	r3, [r3, #24]
 8005e6a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005e70:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6a1b      	ldr	r3, [r3, #32]
 8005e76:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005e78:	68fa      	ldr	r2, [r7, #12]
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	68fa      	ldr	r2, [r7, #12]
 8005e84:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e8e:	d039      	beq.n	8005f04 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e94:	4a27      	ldr	r2, [pc, #156]	; (8005f34 <HAL_DMA_Init+0x15c>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d11a      	bne.n	8005ed0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005e9a:	4b29      	ldr	r3, [pc, #164]	; (8005f40 <HAL_DMA_Init+0x168>)
 8005e9c:	681a      	ldr	r2, [r3, #0]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ea2:	f003 031c 	and.w	r3, r3, #28
 8005ea6:	210f      	movs	r1, #15
 8005ea8:	fa01 f303 	lsl.w	r3, r1, r3
 8005eac:	43db      	mvns	r3, r3
 8005eae:	4924      	ldr	r1, [pc, #144]	; (8005f40 <HAL_DMA_Init+0x168>)
 8005eb0:	4013      	ands	r3, r2
 8005eb2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005eb4:	4b22      	ldr	r3, [pc, #136]	; (8005f40 <HAL_DMA_Init+0x168>)
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6859      	ldr	r1, [r3, #4]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ec0:	f003 031c 	and.w	r3, r3, #28
 8005ec4:	fa01 f303 	lsl.w	r3, r1, r3
 8005ec8:	491d      	ldr	r1, [pc, #116]	; (8005f40 <HAL_DMA_Init+0x168>)
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	600b      	str	r3, [r1, #0]
 8005ece:	e019      	b.n	8005f04 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005ed0:	4b1c      	ldr	r3, [pc, #112]	; (8005f44 <HAL_DMA_Init+0x16c>)
 8005ed2:	681a      	ldr	r2, [r3, #0]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ed8:	f003 031c 	and.w	r3, r3, #28
 8005edc:	210f      	movs	r1, #15
 8005ede:	fa01 f303 	lsl.w	r3, r1, r3
 8005ee2:	43db      	mvns	r3, r3
 8005ee4:	4917      	ldr	r1, [pc, #92]	; (8005f44 <HAL_DMA_Init+0x16c>)
 8005ee6:	4013      	ands	r3, r2
 8005ee8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005eea:	4b16      	ldr	r3, [pc, #88]	; (8005f44 <HAL_DMA_Init+0x16c>)
 8005eec:	681a      	ldr	r2, [r3, #0]
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6859      	ldr	r1, [r3, #4]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ef6:	f003 031c 	and.w	r3, r3, #28
 8005efa:	fa01 f303 	lsl.w	r3, r1, r3
 8005efe:	4911      	ldr	r1, [pc, #68]	; (8005f44 <HAL_DMA_Init+0x16c>)
 8005f00:	4313      	orrs	r3, r2
 8005f02:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2200      	movs	r2, #0
 8005f08:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2201      	movs	r2, #1
 8005f0e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2200      	movs	r2, #0
 8005f16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005f1a:	2300      	movs	r3, #0
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	3714      	adds	r7, #20
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr
 8005f28:	40020407 	.word	0x40020407
 8005f2c:	bffdfff8 	.word	0xbffdfff8
 8005f30:	cccccccd 	.word	0xcccccccd
 8005f34:	40020000 	.word	0x40020000
 8005f38:	bffdfbf8 	.word	0xbffdfbf8
 8005f3c:	40020400 	.word	0x40020400
 8005f40:	400200a8 	.word	0x400200a8
 8005f44:	400204a8 	.word	0x400204a8

08005f48 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b086      	sub	sp, #24
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	60f8      	str	r0, [r7, #12]
 8005f50:	60b9      	str	r1, [r7, #8]
 8005f52:	607a      	str	r2, [r7, #4]
 8005f54:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f56:	2300      	movs	r3, #0
 8005f58:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d101      	bne.n	8005f68 <HAL_DMA_Start_IT+0x20>
 8005f64:	2302      	movs	r3, #2
 8005f66:	e04b      	b.n	8006000 <HAL_DMA_Start_IT+0xb8>
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005f76:	b2db      	uxtb	r3, r3
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	d13a      	bne.n	8005ff2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	2202      	movs	r2, #2
 8005f80:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2200      	movs	r2, #0
 8005f88:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f022 0201 	bic.w	r2, r2, #1
 8005f98:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	687a      	ldr	r2, [r7, #4]
 8005f9e:	68b9      	ldr	r1, [r7, #8]
 8005fa0:	68f8      	ldr	r0, [r7, #12]
 8005fa2:	f000 f96d 	bl	8006280 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d008      	beq.n	8005fc0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	681a      	ldr	r2, [r3, #0]
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f042 020e 	orr.w	r2, r2, #14
 8005fbc:	601a      	str	r2, [r3, #0]
 8005fbe:	e00f      	b.n	8005fe0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	681a      	ldr	r2, [r3, #0]
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f022 0204 	bic.w	r2, r2, #4
 8005fce:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	681a      	ldr	r2, [r3, #0]
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f042 020a 	orr.w	r2, r2, #10
 8005fde:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	681a      	ldr	r2, [r3, #0]
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f042 0201 	orr.w	r2, r2, #1
 8005fee:	601a      	str	r2, [r3, #0]
 8005ff0:	e005      	b.n	8005ffe <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005ffa:	2302      	movs	r3, #2
 8005ffc:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005ffe:	7dfb      	ldrb	r3, [r7, #23]
}
 8006000:	4618      	mov	r0, r3
 8006002:	3718      	adds	r7, #24
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}

08006008 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006008:	b480      	push	{r7}
 800600a:	b085      	sub	sp, #20
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006010:	2300      	movs	r3, #0
 8006012:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800601a:	b2db      	uxtb	r3, r3
 800601c:	2b02      	cmp	r3, #2
 800601e:	d008      	beq.n	8006032 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2204      	movs	r2, #4
 8006024:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2200      	movs	r2, #0
 800602a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800602e:	2301      	movs	r3, #1
 8006030:	e022      	b.n	8006078 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	681a      	ldr	r2, [r3, #0]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f022 020e 	bic.w	r2, r2, #14
 8006040:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	681a      	ldr	r2, [r3, #0]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f022 0201 	bic.w	r2, r2, #1
 8006050:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006056:	f003 021c 	and.w	r2, r3, #28
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800605e:	2101      	movs	r1, #1
 8006060:	fa01 f202 	lsl.w	r2, r1, r2
 8006064:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2201      	movs	r2, #1
 800606a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2200      	movs	r2, #0
 8006072:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8006076:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8006078:	4618      	mov	r0, r3
 800607a:	3714      	adds	r7, #20
 800607c:	46bd      	mov	sp, r7
 800607e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006082:	4770      	bx	lr

08006084 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b084      	sub	sp, #16
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800608c:	2300      	movs	r3, #0
 800608e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006096:	b2db      	uxtb	r3, r3
 8006098:	2b02      	cmp	r3, #2
 800609a:	d005      	beq.n	80060a8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2204      	movs	r2, #4
 80060a0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80060a2:	2301      	movs	r3, #1
 80060a4:	73fb      	strb	r3, [r7, #15]
 80060a6:	e029      	b.n	80060fc <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	681a      	ldr	r2, [r3, #0]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f022 020e 	bic.w	r2, r2, #14
 80060b6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	681a      	ldr	r2, [r3, #0]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f022 0201 	bic.w	r2, r2, #1
 80060c6:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060cc:	f003 021c 	and.w	r2, r3, #28
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060d4:	2101      	movs	r1, #1
 80060d6:	fa01 f202 	lsl.w	r2, r1, r2
 80060da:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2201      	movs	r2, #1
 80060e0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2200      	movs	r2, #0
 80060e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d003      	beq.n	80060fc <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	4798      	blx	r3
    }
  }
  return status;
 80060fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80060fe:	4618      	mov	r0, r3
 8006100:	3710      	adds	r7, #16
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}

08006106 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006106:	b580      	push	{r7, lr}
 8006108:	b084      	sub	sp, #16
 800610a:	af00      	add	r7, sp, #0
 800610c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006122:	f003 031c 	and.w	r3, r3, #28
 8006126:	2204      	movs	r2, #4
 8006128:	409a      	lsls	r2, r3
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	4013      	ands	r3, r2
 800612e:	2b00      	cmp	r3, #0
 8006130:	d026      	beq.n	8006180 <HAL_DMA_IRQHandler+0x7a>
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	f003 0304 	and.w	r3, r3, #4
 8006138:	2b00      	cmp	r3, #0
 800613a:	d021      	beq.n	8006180 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f003 0320 	and.w	r3, r3, #32
 8006146:	2b00      	cmp	r3, #0
 8006148:	d107      	bne.n	800615a <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	681a      	ldr	r2, [r3, #0]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f022 0204 	bic.w	r2, r2, #4
 8006158:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800615e:	f003 021c 	and.w	r2, r3, #28
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006166:	2104      	movs	r1, #4
 8006168:	fa01 f202 	lsl.w	r2, r1, r2
 800616c:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006172:	2b00      	cmp	r3, #0
 8006174:	d071      	beq.n	800625a <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800617e:	e06c      	b.n	800625a <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006184:	f003 031c 	and.w	r3, r3, #28
 8006188:	2202      	movs	r2, #2
 800618a:	409a      	lsls	r2, r3
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	4013      	ands	r3, r2
 8006190:	2b00      	cmp	r3, #0
 8006192:	d02e      	beq.n	80061f2 <HAL_DMA_IRQHandler+0xec>
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	f003 0302 	and.w	r3, r3, #2
 800619a:	2b00      	cmp	r3, #0
 800619c:	d029      	beq.n	80061f2 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f003 0320 	and.w	r3, r3, #32
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d10b      	bne.n	80061c4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	681a      	ldr	r2, [r3, #0]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f022 020a 	bic.w	r2, r2, #10
 80061ba:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2201      	movs	r2, #1
 80061c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061c8:	f003 021c 	and.w	r2, r3, #28
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d0:	2102      	movs	r1, #2
 80061d2:	fa01 f202 	lsl.w	r2, r1, r2
 80061d6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2200      	movs	r2, #0
 80061dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d038      	beq.n	800625a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80061f0:	e033      	b.n	800625a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061f6:	f003 031c 	and.w	r3, r3, #28
 80061fa:	2208      	movs	r2, #8
 80061fc:	409a      	lsls	r2, r3
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	4013      	ands	r3, r2
 8006202:	2b00      	cmp	r3, #0
 8006204:	d02a      	beq.n	800625c <HAL_DMA_IRQHandler+0x156>
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	f003 0308 	and.w	r3, r3, #8
 800620c:	2b00      	cmp	r3, #0
 800620e:	d025      	beq.n	800625c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	681a      	ldr	r2, [r3, #0]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f022 020e 	bic.w	r2, r2, #14
 800621e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006224:	f003 021c 	and.w	r2, r3, #28
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800622c:	2101      	movs	r1, #1
 800622e:	fa01 f202 	lsl.w	r2, r1, r2
 8006232:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2201      	movs	r2, #1
 8006238:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2201      	movs	r2, #1
 800623e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2200      	movs	r2, #0
 8006246:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800624e:	2b00      	cmp	r3, #0
 8006250:	d004      	beq.n	800625c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800625a:	bf00      	nop
 800625c:	bf00      	nop
}
 800625e:	3710      	adds	r7, #16
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}

08006264 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8006264:	b480      	push	{r7}
 8006266:	b083      	sub	sp, #12
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006272:	b2db      	uxtb	r3, r3
}
 8006274:	4618      	mov	r0, r3
 8006276:	370c      	adds	r7, #12
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr

08006280 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006280:	b480      	push	{r7}
 8006282:	b085      	sub	sp, #20
 8006284:	af00      	add	r7, sp, #0
 8006286:	60f8      	str	r0, [r7, #12]
 8006288:	60b9      	str	r1, [r7, #8]
 800628a:	607a      	str	r2, [r7, #4]
 800628c:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006292:	f003 021c 	and.w	r2, r3, #28
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800629a:	2101      	movs	r1, #1
 800629c:	fa01 f202 	lsl.w	r2, r1, r2
 80062a0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	683a      	ldr	r2, [r7, #0]
 80062a8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	689b      	ldr	r3, [r3, #8]
 80062ae:	2b10      	cmp	r3, #16
 80062b0:	d108      	bne.n	80062c4 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	687a      	ldr	r2, [r7, #4]
 80062b8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	68ba      	ldr	r2, [r7, #8]
 80062c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80062c2:	e007      	b.n	80062d4 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	68ba      	ldr	r2, [r7, #8]
 80062ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	687a      	ldr	r2, [r7, #4]
 80062d2:	60da      	str	r2, [r3, #12]
}
 80062d4:	bf00      	nop
 80062d6:	3714      	adds	r7, #20
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr

080062e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b087      	sub	sp, #28
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
 80062e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80062ea:	2300      	movs	r3, #0
 80062ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80062ee:	e17f      	b.n	80065f0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	681a      	ldr	r2, [r3, #0]
 80062f4:	2101      	movs	r1, #1
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	fa01 f303 	lsl.w	r3, r1, r3
 80062fc:	4013      	ands	r3, r2
 80062fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2b00      	cmp	r3, #0
 8006304:	f000 8171 	beq.w	80065ea <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	f003 0303 	and.w	r3, r3, #3
 8006310:	2b01      	cmp	r3, #1
 8006312:	d005      	beq.n	8006320 <HAL_GPIO_Init+0x40>
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	f003 0303 	and.w	r3, r3, #3
 800631c:	2b02      	cmp	r3, #2
 800631e:	d130      	bne.n	8006382 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	005b      	lsls	r3, r3, #1
 800632a:	2203      	movs	r2, #3
 800632c:	fa02 f303 	lsl.w	r3, r2, r3
 8006330:	43db      	mvns	r3, r3
 8006332:	693a      	ldr	r2, [r7, #16]
 8006334:	4013      	ands	r3, r2
 8006336:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	68da      	ldr	r2, [r3, #12]
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	005b      	lsls	r3, r3, #1
 8006340:	fa02 f303 	lsl.w	r3, r2, r3
 8006344:	693a      	ldr	r2, [r7, #16]
 8006346:	4313      	orrs	r3, r2
 8006348:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	693a      	ldr	r2, [r7, #16]
 800634e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006356:	2201      	movs	r2, #1
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	fa02 f303 	lsl.w	r3, r2, r3
 800635e:	43db      	mvns	r3, r3
 8006360:	693a      	ldr	r2, [r7, #16]
 8006362:	4013      	ands	r3, r2
 8006364:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	091b      	lsrs	r3, r3, #4
 800636c:	f003 0201 	and.w	r2, r3, #1
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	fa02 f303 	lsl.w	r3, r2, r3
 8006376:	693a      	ldr	r2, [r7, #16]
 8006378:	4313      	orrs	r3, r2
 800637a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	693a      	ldr	r2, [r7, #16]
 8006380:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	f003 0303 	and.w	r3, r3, #3
 800638a:	2b03      	cmp	r3, #3
 800638c:	d118      	bne.n	80063c0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006392:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8006394:	2201      	movs	r2, #1
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	fa02 f303 	lsl.w	r3, r2, r3
 800639c:	43db      	mvns	r3, r3
 800639e:	693a      	ldr	r2, [r7, #16]
 80063a0:	4013      	ands	r3, r2
 80063a2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	08db      	lsrs	r3, r3, #3
 80063aa:	f003 0201 	and.w	r2, r3, #1
 80063ae:	697b      	ldr	r3, [r7, #20]
 80063b0:	fa02 f303 	lsl.w	r3, r2, r3
 80063b4:	693a      	ldr	r2, [r7, #16]
 80063b6:	4313      	orrs	r3, r2
 80063b8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	693a      	ldr	r2, [r7, #16]
 80063be:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	f003 0303 	and.w	r3, r3, #3
 80063c8:	2b03      	cmp	r3, #3
 80063ca:	d017      	beq.n	80063fc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	68db      	ldr	r3, [r3, #12]
 80063d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	005b      	lsls	r3, r3, #1
 80063d6:	2203      	movs	r2, #3
 80063d8:	fa02 f303 	lsl.w	r3, r2, r3
 80063dc:	43db      	mvns	r3, r3
 80063de:	693a      	ldr	r2, [r7, #16]
 80063e0:	4013      	ands	r3, r2
 80063e2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	689a      	ldr	r2, [r3, #8]
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	005b      	lsls	r3, r3, #1
 80063ec:	fa02 f303 	lsl.w	r3, r2, r3
 80063f0:	693a      	ldr	r2, [r7, #16]
 80063f2:	4313      	orrs	r3, r2
 80063f4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	693a      	ldr	r2, [r7, #16]
 80063fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	685b      	ldr	r3, [r3, #4]
 8006400:	f003 0303 	and.w	r3, r3, #3
 8006404:	2b02      	cmp	r3, #2
 8006406:	d123      	bne.n	8006450 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	08da      	lsrs	r2, r3, #3
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	3208      	adds	r2, #8
 8006410:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006414:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	f003 0307 	and.w	r3, r3, #7
 800641c:	009b      	lsls	r3, r3, #2
 800641e:	220f      	movs	r2, #15
 8006420:	fa02 f303 	lsl.w	r3, r2, r3
 8006424:	43db      	mvns	r3, r3
 8006426:	693a      	ldr	r2, [r7, #16]
 8006428:	4013      	ands	r3, r2
 800642a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	691a      	ldr	r2, [r3, #16]
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	f003 0307 	and.w	r3, r3, #7
 8006436:	009b      	lsls	r3, r3, #2
 8006438:	fa02 f303 	lsl.w	r3, r2, r3
 800643c:	693a      	ldr	r2, [r7, #16]
 800643e:	4313      	orrs	r3, r2
 8006440:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	08da      	lsrs	r2, r3, #3
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	3208      	adds	r2, #8
 800644a:	6939      	ldr	r1, [r7, #16]
 800644c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	005b      	lsls	r3, r3, #1
 800645a:	2203      	movs	r2, #3
 800645c:	fa02 f303 	lsl.w	r3, r2, r3
 8006460:	43db      	mvns	r3, r3
 8006462:	693a      	ldr	r2, [r7, #16]
 8006464:	4013      	ands	r3, r2
 8006466:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	f003 0203 	and.w	r2, r3, #3
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	005b      	lsls	r3, r3, #1
 8006474:	fa02 f303 	lsl.w	r3, r2, r3
 8006478:	693a      	ldr	r2, [r7, #16]
 800647a:	4313      	orrs	r3, r2
 800647c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	693a      	ldr	r2, [r7, #16]
 8006482:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800648c:	2b00      	cmp	r3, #0
 800648e:	f000 80ac 	beq.w	80065ea <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006492:	4b5f      	ldr	r3, [pc, #380]	; (8006610 <HAL_GPIO_Init+0x330>)
 8006494:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006496:	4a5e      	ldr	r2, [pc, #376]	; (8006610 <HAL_GPIO_Init+0x330>)
 8006498:	f043 0301 	orr.w	r3, r3, #1
 800649c:	6613      	str	r3, [r2, #96]	; 0x60
 800649e:	4b5c      	ldr	r3, [pc, #368]	; (8006610 <HAL_GPIO_Init+0x330>)
 80064a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064a2:	f003 0301 	and.w	r3, r3, #1
 80064a6:	60bb      	str	r3, [r7, #8]
 80064a8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80064aa:	4a5a      	ldr	r2, [pc, #360]	; (8006614 <HAL_GPIO_Init+0x334>)
 80064ac:	697b      	ldr	r3, [r7, #20]
 80064ae:	089b      	lsrs	r3, r3, #2
 80064b0:	3302      	adds	r3, #2
 80064b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	f003 0303 	and.w	r3, r3, #3
 80064be:	009b      	lsls	r3, r3, #2
 80064c0:	220f      	movs	r2, #15
 80064c2:	fa02 f303 	lsl.w	r3, r2, r3
 80064c6:	43db      	mvns	r3, r3
 80064c8:	693a      	ldr	r2, [r7, #16]
 80064ca:	4013      	ands	r3, r2
 80064cc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80064d4:	d025      	beq.n	8006522 <HAL_GPIO_Init+0x242>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	4a4f      	ldr	r2, [pc, #316]	; (8006618 <HAL_GPIO_Init+0x338>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d01f      	beq.n	800651e <HAL_GPIO_Init+0x23e>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	4a4e      	ldr	r2, [pc, #312]	; (800661c <HAL_GPIO_Init+0x33c>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d019      	beq.n	800651a <HAL_GPIO_Init+0x23a>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	4a4d      	ldr	r2, [pc, #308]	; (8006620 <HAL_GPIO_Init+0x340>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d013      	beq.n	8006516 <HAL_GPIO_Init+0x236>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	4a4c      	ldr	r2, [pc, #304]	; (8006624 <HAL_GPIO_Init+0x344>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d00d      	beq.n	8006512 <HAL_GPIO_Init+0x232>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	4a4b      	ldr	r2, [pc, #300]	; (8006628 <HAL_GPIO_Init+0x348>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d007      	beq.n	800650e <HAL_GPIO_Init+0x22e>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	4a4a      	ldr	r2, [pc, #296]	; (800662c <HAL_GPIO_Init+0x34c>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d101      	bne.n	800650a <HAL_GPIO_Init+0x22a>
 8006506:	2306      	movs	r3, #6
 8006508:	e00c      	b.n	8006524 <HAL_GPIO_Init+0x244>
 800650a:	2307      	movs	r3, #7
 800650c:	e00a      	b.n	8006524 <HAL_GPIO_Init+0x244>
 800650e:	2305      	movs	r3, #5
 8006510:	e008      	b.n	8006524 <HAL_GPIO_Init+0x244>
 8006512:	2304      	movs	r3, #4
 8006514:	e006      	b.n	8006524 <HAL_GPIO_Init+0x244>
 8006516:	2303      	movs	r3, #3
 8006518:	e004      	b.n	8006524 <HAL_GPIO_Init+0x244>
 800651a:	2302      	movs	r3, #2
 800651c:	e002      	b.n	8006524 <HAL_GPIO_Init+0x244>
 800651e:	2301      	movs	r3, #1
 8006520:	e000      	b.n	8006524 <HAL_GPIO_Init+0x244>
 8006522:	2300      	movs	r3, #0
 8006524:	697a      	ldr	r2, [r7, #20]
 8006526:	f002 0203 	and.w	r2, r2, #3
 800652a:	0092      	lsls	r2, r2, #2
 800652c:	4093      	lsls	r3, r2
 800652e:	693a      	ldr	r2, [r7, #16]
 8006530:	4313      	orrs	r3, r2
 8006532:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006534:	4937      	ldr	r1, [pc, #220]	; (8006614 <HAL_GPIO_Init+0x334>)
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	089b      	lsrs	r3, r3, #2
 800653a:	3302      	adds	r3, #2
 800653c:	693a      	ldr	r2, [r7, #16]
 800653e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006542:	4b3b      	ldr	r3, [pc, #236]	; (8006630 <HAL_GPIO_Init+0x350>)
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	43db      	mvns	r3, r3
 800654c:	693a      	ldr	r2, [r7, #16]
 800654e:	4013      	ands	r3, r2
 8006550:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800655a:	2b00      	cmp	r3, #0
 800655c:	d003      	beq.n	8006566 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800655e:	693a      	ldr	r2, [r7, #16]
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	4313      	orrs	r3, r2
 8006564:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006566:	4a32      	ldr	r2, [pc, #200]	; (8006630 <HAL_GPIO_Init+0x350>)
 8006568:	693b      	ldr	r3, [r7, #16]
 800656a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800656c:	4b30      	ldr	r3, [pc, #192]	; (8006630 <HAL_GPIO_Init+0x350>)
 800656e:	68db      	ldr	r3, [r3, #12]
 8006570:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	43db      	mvns	r3, r3
 8006576:	693a      	ldr	r2, [r7, #16]
 8006578:	4013      	ands	r3, r2
 800657a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006584:	2b00      	cmp	r3, #0
 8006586:	d003      	beq.n	8006590 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8006588:	693a      	ldr	r2, [r7, #16]
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	4313      	orrs	r3, r2
 800658e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006590:	4a27      	ldr	r2, [pc, #156]	; (8006630 <HAL_GPIO_Init+0x350>)
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8006596:	4b26      	ldr	r3, [pc, #152]	; (8006630 <HAL_GPIO_Init+0x350>)
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	43db      	mvns	r3, r3
 80065a0:	693a      	ldr	r2, [r7, #16]
 80065a2:	4013      	ands	r3, r2
 80065a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d003      	beq.n	80065ba <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80065b2:	693a      	ldr	r2, [r7, #16]
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	4313      	orrs	r3, r2
 80065b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80065ba:	4a1d      	ldr	r2, [pc, #116]	; (8006630 <HAL_GPIO_Init+0x350>)
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80065c0:	4b1b      	ldr	r3, [pc, #108]	; (8006630 <HAL_GPIO_Init+0x350>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	43db      	mvns	r3, r3
 80065ca:	693a      	ldr	r2, [r7, #16]
 80065cc:	4013      	ands	r3, r2
 80065ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	685b      	ldr	r3, [r3, #4]
 80065d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d003      	beq.n	80065e4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80065dc:	693a      	ldr	r2, [r7, #16]
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	4313      	orrs	r3, r2
 80065e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80065e4:	4a12      	ldr	r2, [pc, #72]	; (8006630 <HAL_GPIO_Init+0x350>)
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	3301      	adds	r3, #1
 80065ee:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	681a      	ldr	r2, [r3, #0]
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	fa22 f303 	lsr.w	r3, r2, r3
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	f47f ae78 	bne.w	80062f0 <HAL_GPIO_Init+0x10>
  }
}
 8006600:	bf00      	nop
 8006602:	bf00      	nop
 8006604:	371c      	adds	r7, #28
 8006606:	46bd      	mov	sp, r7
 8006608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660c:	4770      	bx	lr
 800660e:	bf00      	nop
 8006610:	40021000 	.word	0x40021000
 8006614:	40010000 	.word	0x40010000
 8006618:	48000400 	.word	0x48000400
 800661c:	48000800 	.word	0x48000800
 8006620:	48000c00 	.word	0x48000c00
 8006624:	48001000 	.word	0x48001000
 8006628:	48001400 	.word	0x48001400
 800662c:	48001800 	.word	0x48001800
 8006630:	40010400 	.word	0x40010400

08006634 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006634:	b480      	push	{r7}
 8006636:	b085      	sub	sp, #20
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
 800663c:	460b      	mov	r3, r1
 800663e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	691a      	ldr	r2, [r3, #16]
 8006644:	887b      	ldrh	r3, [r7, #2]
 8006646:	4013      	ands	r3, r2
 8006648:	2b00      	cmp	r3, #0
 800664a:	d002      	beq.n	8006652 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800664c:	2301      	movs	r3, #1
 800664e:	73fb      	strb	r3, [r7, #15]
 8006650:	e001      	b.n	8006656 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006652:	2300      	movs	r3, #0
 8006654:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006656:	7bfb      	ldrb	r3, [r7, #15]
}
 8006658:	4618      	mov	r0, r3
 800665a:	3714      	adds	r7, #20
 800665c:	46bd      	mov	sp, r7
 800665e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006662:	4770      	bx	lr

08006664 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006664:	b480      	push	{r7}
 8006666:	b083      	sub	sp, #12
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
 800666c:	460b      	mov	r3, r1
 800666e:	807b      	strh	r3, [r7, #2]
 8006670:	4613      	mov	r3, r2
 8006672:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006674:	787b      	ldrb	r3, [r7, #1]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d003      	beq.n	8006682 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800667a:	887a      	ldrh	r2, [r7, #2]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006680:	e002      	b.n	8006688 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006682:	887a      	ldrh	r2, [r7, #2]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006688:	bf00      	nop
 800668a:	370c      	adds	r7, #12
 800668c:	46bd      	mov	sp, r7
 800668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006692:	4770      	bx	lr

08006694 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006694:	b480      	push	{r7}
 8006696:	b085      	sub	sp, #20
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
 800669c:	460b      	mov	r3, r1
 800669e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	695b      	ldr	r3, [r3, #20]
 80066a4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80066a6:	887a      	ldrh	r2, [r7, #2]
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	4013      	ands	r3, r2
 80066ac:	041a      	lsls	r2, r3, #16
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	43d9      	mvns	r1, r3
 80066b2:	887b      	ldrh	r3, [r7, #2]
 80066b4:	400b      	ands	r3, r1
 80066b6:	431a      	orrs	r2, r3
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	619a      	str	r2, [r3, #24]
}
 80066bc:	bf00      	nop
 80066be:	3714      	adds	r7, #20
 80066c0:	46bd      	mov	sp, r7
 80066c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c6:	4770      	bx	lr

080066c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b082      	sub	sp, #8
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	4603      	mov	r3, r0
 80066d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80066d2:	4b08      	ldr	r3, [pc, #32]	; (80066f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80066d4:	695a      	ldr	r2, [r3, #20]
 80066d6:	88fb      	ldrh	r3, [r7, #6]
 80066d8:	4013      	ands	r3, r2
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d006      	beq.n	80066ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80066de:	4a05      	ldr	r2, [pc, #20]	; (80066f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80066e0:	88fb      	ldrh	r3, [r7, #6]
 80066e2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80066e4:	88fb      	ldrh	r3, [r7, #6]
 80066e6:	4618      	mov	r0, r3
 80066e8:	f7fd fba6 	bl	8003e38 <HAL_GPIO_EXTI_Callback>
  }
}
 80066ec:	bf00      	nop
 80066ee:	3708      	adds	r7, #8
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}
 80066f4:	40010400 	.word	0x40010400

080066f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b082      	sub	sp, #8
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d101      	bne.n	800670a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006706:	2301      	movs	r3, #1
 8006708:	e081      	b.n	800680e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006710:	b2db      	uxtb	r3, r3
 8006712:	2b00      	cmp	r3, #0
 8006714:	d106      	bne.n	8006724 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2200      	movs	r2, #0
 800671a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f7fd ffb0 	bl	8004684 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2224      	movs	r2, #36	; 0x24
 8006728:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	681a      	ldr	r2, [r3, #0]
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f022 0201 	bic.w	r2, r2, #1
 800673a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	685a      	ldr	r2, [r3, #4]
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006748:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	689a      	ldr	r2, [r3, #8]
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006758:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	68db      	ldr	r3, [r3, #12]
 800675e:	2b01      	cmp	r3, #1
 8006760:	d107      	bne.n	8006772 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	689a      	ldr	r2, [r3, #8]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800676e:	609a      	str	r2, [r3, #8]
 8006770:	e006      	b.n	8006780 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	689a      	ldr	r2, [r3, #8]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800677e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	68db      	ldr	r3, [r3, #12]
 8006784:	2b02      	cmp	r3, #2
 8006786:	d104      	bne.n	8006792 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006790:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	687a      	ldr	r2, [r7, #4]
 800679a:	6812      	ldr	r2, [r2, #0]
 800679c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80067a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067a4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	68da      	ldr	r2, [r3, #12]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80067b4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	691a      	ldr	r2, [r3, #16]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	695b      	ldr	r3, [r3, #20]
 80067be:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	699b      	ldr	r3, [r3, #24]
 80067c6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	430a      	orrs	r2, r1
 80067ce:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	69d9      	ldr	r1, [r3, #28]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6a1a      	ldr	r2, [r3, #32]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	430a      	orrs	r2, r1
 80067de:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	681a      	ldr	r2, [r3, #0]
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f042 0201 	orr.w	r2, r2, #1
 80067ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2200      	movs	r2, #0
 80067f4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2220      	movs	r2, #32
 80067fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2200      	movs	r2, #0
 8006802:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2200      	movs	r2, #0
 8006808:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800680c:	2300      	movs	r3, #0
}
 800680e:	4618      	mov	r0, r3
 8006810:	3708      	adds	r7, #8
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}
	...

08006818 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b088      	sub	sp, #32
 800681c:	af02      	add	r7, sp, #8
 800681e:	60f8      	str	r0, [r7, #12]
 8006820:	607a      	str	r2, [r7, #4]
 8006822:	461a      	mov	r2, r3
 8006824:	460b      	mov	r3, r1
 8006826:	817b      	strh	r3, [r7, #10]
 8006828:	4613      	mov	r3, r2
 800682a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006832:	b2db      	uxtb	r3, r3
 8006834:	2b20      	cmp	r3, #32
 8006836:	f040 80da 	bne.w	80069ee <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006840:	2b01      	cmp	r3, #1
 8006842:	d101      	bne.n	8006848 <HAL_I2C_Master_Transmit+0x30>
 8006844:	2302      	movs	r3, #2
 8006846:	e0d3      	b.n	80069f0 <HAL_I2C_Master_Transmit+0x1d8>
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	2201      	movs	r2, #1
 800684c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006850:	f7ff f94e 	bl	8005af0 <HAL_GetTick>
 8006854:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	9300      	str	r3, [sp, #0]
 800685a:	2319      	movs	r3, #25
 800685c:	2201      	movs	r2, #1
 800685e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006862:	68f8      	ldr	r0, [r7, #12]
 8006864:	f001 f8d1 	bl	8007a0a <I2C_WaitOnFlagUntilTimeout>
 8006868:	4603      	mov	r3, r0
 800686a:	2b00      	cmp	r3, #0
 800686c:	d001      	beq.n	8006872 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800686e:	2301      	movs	r3, #1
 8006870:	e0be      	b.n	80069f0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2221      	movs	r2, #33	; 0x21
 8006876:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2210      	movs	r2, #16
 800687e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	2200      	movs	r2, #0
 8006886:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	687a      	ldr	r2, [r7, #4]
 800688c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	893a      	ldrh	r2, [r7, #8]
 8006892:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2200      	movs	r2, #0
 8006898:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800689e:	b29b      	uxth	r3, r3
 80068a0:	2bff      	cmp	r3, #255	; 0xff
 80068a2:	d90e      	bls.n	80068c2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	22ff      	movs	r2, #255	; 0xff
 80068a8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068ae:	b2da      	uxtb	r2, r3
 80068b0:	8979      	ldrh	r1, [r7, #10]
 80068b2:	4b51      	ldr	r3, [pc, #324]	; (80069f8 <HAL_I2C_Master_Transmit+0x1e0>)
 80068b4:	9300      	str	r3, [sp, #0]
 80068b6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80068ba:	68f8      	ldr	r0, [r7, #12]
 80068bc:	f001 fa4e 	bl	8007d5c <I2C_TransferConfig>
 80068c0:	e06c      	b.n	800699c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068c6:	b29a      	uxth	r2, r3
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068d0:	b2da      	uxtb	r2, r3
 80068d2:	8979      	ldrh	r1, [r7, #10]
 80068d4:	4b48      	ldr	r3, [pc, #288]	; (80069f8 <HAL_I2C_Master_Transmit+0x1e0>)
 80068d6:	9300      	str	r3, [sp, #0]
 80068d8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80068dc:	68f8      	ldr	r0, [r7, #12]
 80068de:	f001 fa3d 	bl	8007d5c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80068e2:	e05b      	b.n	800699c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80068e4:	697a      	ldr	r2, [r7, #20]
 80068e6:	6a39      	ldr	r1, [r7, #32]
 80068e8:	68f8      	ldr	r0, [r7, #12]
 80068ea:	f001 f8ce 	bl	8007a8a <I2C_WaitOnTXISFlagUntilTimeout>
 80068ee:	4603      	mov	r3, r0
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d001      	beq.n	80068f8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80068f4:	2301      	movs	r3, #1
 80068f6:	e07b      	b.n	80069f0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068fc:	781a      	ldrb	r2, [r3, #0]
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006908:	1c5a      	adds	r2, r3, #1
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006912:	b29b      	uxth	r3, r3
 8006914:	3b01      	subs	r3, #1
 8006916:	b29a      	uxth	r2, r3
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006920:	3b01      	subs	r3, #1
 8006922:	b29a      	uxth	r2, r3
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800692c:	b29b      	uxth	r3, r3
 800692e:	2b00      	cmp	r3, #0
 8006930:	d034      	beq.n	800699c <HAL_I2C_Master_Transmit+0x184>
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006936:	2b00      	cmp	r3, #0
 8006938:	d130      	bne.n	800699c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	9300      	str	r3, [sp, #0]
 800693e:	6a3b      	ldr	r3, [r7, #32]
 8006940:	2200      	movs	r2, #0
 8006942:	2180      	movs	r1, #128	; 0x80
 8006944:	68f8      	ldr	r0, [r7, #12]
 8006946:	f001 f860 	bl	8007a0a <I2C_WaitOnFlagUntilTimeout>
 800694a:	4603      	mov	r3, r0
 800694c:	2b00      	cmp	r3, #0
 800694e:	d001      	beq.n	8006954 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8006950:	2301      	movs	r3, #1
 8006952:	e04d      	b.n	80069f0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006958:	b29b      	uxth	r3, r3
 800695a:	2bff      	cmp	r3, #255	; 0xff
 800695c:	d90e      	bls.n	800697c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	22ff      	movs	r2, #255	; 0xff
 8006962:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006968:	b2da      	uxtb	r2, r3
 800696a:	8979      	ldrh	r1, [r7, #10]
 800696c:	2300      	movs	r3, #0
 800696e:	9300      	str	r3, [sp, #0]
 8006970:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006974:	68f8      	ldr	r0, [r7, #12]
 8006976:	f001 f9f1 	bl	8007d5c <I2C_TransferConfig>
 800697a:	e00f      	b.n	800699c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006980:	b29a      	uxth	r2, r3
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800698a:	b2da      	uxtb	r2, r3
 800698c:	8979      	ldrh	r1, [r7, #10]
 800698e:	2300      	movs	r3, #0
 8006990:	9300      	str	r3, [sp, #0]
 8006992:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006996:	68f8      	ldr	r0, [r7, #12]
 8006998:	f001 f9e0 	bl	8007d5c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069a0:	b29b      	uxth	r3, r3
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d19e      	bne.n	80068e4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80069a6:	697a      	ldr	r2, [r7, #20]
 80069a8:	6a39      	ldr	r1, [r7, #32]
 80069aa:	68f8      	ldr	r0, [r7, #12]
 80069ac:	f001 f8ad 	bl	8007b0a <I2C_WaitOnSTOPFlagUntilTimeout>
 80069b0:	4603      	mov	r3, r0
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d001      	beq.n	80069ba <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80069b6:	2301      	movs	r3, #1
 80069b8:	e01a      	b.n	80069f0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	2220      	movs	r2, #32
 80069c0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	6859      	ldr	r1, [r3, #4]
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681a      	ldr	r2, [r3, #0]
 80069cc:	4b0b      	ldr	r3, [pc, #44]	; (80069fc <HAL_I2C_Master_Transmit+0x1e4>)
 80069ce:	400b      	ands	r3, r1
 80069d0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2220      	movs	r2, #32
 80069d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2200      	movs	r2, #0
 80069de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	2200      	movs	r2, #0
 80069e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80069ea:	2300      	movs	r3, #0
 80069ec:	e000      	b.n	80069f0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80069ee:	2302      	movs	r3, #2
  }
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	3718      	adds	r7, #24
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}
 80069f8:	80002000 	.word	0x80002000
 80069fc:	fe00e800 	.word	0xfe00e800

08006a00 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b088      	sub	sp, #32
 8006a04:	af02      	add	r7, sp, #8
 8006a06:	60f8      	str	r0, [r7, #12]
 8006a08:	4608      	mov	r0, r1
 8006a0a:	4611      	mov	r1, r2
 8006a0c:	461a      	mov	r2, r3
 8006a0e:	4603      	mov	r3, r0
 8006a10:	817b      	strh	r3, [r7, #10]
 8006a12:	460b      	mov	r3, r1
 8006a14:	813b      	strh	r3, [r7, #8]
 8006a16:	4613      	mov	r3, r2
 8006a18:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a20:	b2db      	uxtb	r3, r3
 8006a22:	2b20      	cmp	r3, #32
 8006a24:	f040 80f9 	bne.w	8006c1a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a28:	6a3b      	ldr	r3, [r7, #32]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d002      	beq.n	8006a34 <HAL_I2C_Mem_Write+0x34>
 8006a2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d105      	bne.n	8006a40 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a3a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	e0ed      	b.n	8006c1c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006a46:	2b01      	cmp	r3, #1
 8006a48:	d101      	bne.n	8006a4e <HAL_I2C_Mem_Write+0x4e>
 8006a4a:	2302      	movs	r3, #2
 8006a4c:	e0e6      	b.n	8006c1c <HAL_I2C_Mem_Write+0x21c>
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	2201      	movs	r2, #1
 8006a52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006a56:	f7ff f84b 	bl	8005af0 <HAL_GetTick>
 8006a5a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	9300      	str	r3, [sp, #0]
 8006a60:	2319      	movs	r3, #25
 8006a62:	2201      	movs	r2, #1
 8006a64:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006a68:	68f8      	ldr	r0, [r7, #12]
 8006a6a:	f000 ffce 	bl	8007a0a <I2C_WaitOnFlagUntilTimeout>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d001      	beq.n	8006a78 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006a74:	2301      	movs	r3, #1
 8006a76:	e0d1      	b.n	8006c1c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	2221      	movs	r2, #33	; 0x21
 8006a7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2240      	movs	r2, #64	; 0x40
 8006a84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	6a3a      	ldr	r2, [r7, #32]
 8006a92:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006a98:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006aa0:	88f8      	ldrh	r0, [r7, #6]
 8006aa2:	893a      	ldrh	r2, [r7, #8]
 8006aa4:	8979      	ldrh	r1, [r7, #10]
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	9301      	str	r3, [sp, #4]
 8006aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aac:	9300      	str	r3, [sp, #0]
 8006aae:	4603      	mov	r3, r0
 8006ab0:	68f8      	ldr	r0, [r7, #12]
 8006ab2:	f000 fb87 	bl	80071c4 <I2C_RequestMemoryWrite>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d005      	beq.n	8006ac8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	e0a9      	b.n	8006c1c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006acc:	b29b      	uxth	r3, r3
 8006ace:	2bff      	cmp	r3, #255	; 0xff
 8006ad0:	d90e      	bls.n	8006af0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	22ff      	movs	r2, #255	; 0xff
 8006ad6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006adc:	b2da      	uxtb	r2, r3
 8006ade:	8979      	ldrh	r1, [r7, #10]
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	9300      	str	r3, [sp, #0]
 8006ae4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006ae8:	68f8      	ldr	r0, [r7, #12]
 8006aea:	f001 f937 	bl	8007d5c <I2C_TransferConfig>
 8006aee:	e00f      	b.n	8006b10 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006af4:	b29a      	uxth	r2, r3
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006afe:	b2da      	uxtb	r2, r3
 8006b00:	8979      	ldrh	r1, [r7, #10]
 8006b02:	2300      	movs	r3, #0
 8006b04:	9300      	str	r3, [sp, #0]
 8006b06:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006b0a:	68f8      	ldr	r0, [r7, #12]
 8006b0c:	f001 f926 	bl	8007d5c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b10:	697a      	ldr	r2, [r7, #20]
 8006b12:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b14:	68f8      	ldr	r0, [r7, #12]
 8006b16:	f000 ffb8 	bl	8007a8a <I2C_WaitOnTXISFlagUntilTimeout>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d001      	beq.n	8006b24 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006b20:	2301      	movs	r3, #1
 8006b22:	e07b      	b.n	8006c1c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b28:	781a      	ldrb	r2, [r3, #0]
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b34:	1c5a      	adds	r2, r3, #1
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b3e:	b29b      	uxth	r3, r3
 8006b40:	3b01      	subs	r3, #1
 8006b42:	b29a      	uxth	r2, r3
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b4c:	3b01      	subs	r3, #1
 8006b4e:	b29a      	uxth	r2, r3
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b58:	b29b      	uxth	r3, r3
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d034      	beq.n	8006bc8 <HAL_I2C_Mem_Write+0x1c8>
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d130      	bne.n	8006bc8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	9300      	str	r3, [sp, #0]
 8006b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	2180      	movs	r1, #128	; 0x80
 8006b70:	68f8      	ldr	r0, [r7, #12]
 8006b72:	f000 ff4a 	bl	8007a0a <I2C_WaitOnFlagUntilTimeout>
 8006b76:	4603      	mov	r3, r0
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d001      	beq.n	8006b80 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	e04d      	b.n	8006c1c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b84:	b29b      	uxth	r3, r3
 8006b86:	2bff      	cmp	r3, #255	; 0xff
 8006b88:	d90e      	bls.n	8006ba8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	22ff      	movs	r2, #255	; 0xff
 8006b8e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b94:	b2da      	uxtb	r2, r3
 8006b96:	8979      	ldrh	r1, [r7, #10]
 8006b98:	2300      	movs	r3, #0
 8006b9a:	9300      	str	r3, [sp, #0]
 8006b9c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006ba0:	68f8      	ldr	r0, [r7, #12]
 8006ba2:	f001 f8db 	bl	8007d5c <I2C_TransferConfig>
 8006ba6:	e00f      	b.n	8006bc8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bac:	b29a      	uxth	r2, r3
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bb6:	b2da      	uxtb	r2, r3
 8006bb8:	8979      	ldrh	r1, [r7, #10]
 8006bba:	2300      	movs	r3, #0
 8006bbc:	9300      	str	r3, [sp, #0]
 8006bbe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006bc2:	68f8      	ldr	r0, [r7, #12]
 8006bc4:	f001 f8ca 	bl	8007d5c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bcc:	b29b      	uxth	r3, r3
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d19e      	bne.n	8006b10 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006bd2:	697a      	ldr	r2, [r7, #20]
 8006bd4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006bd6:	68f8      	ldr	r0, [r7, #12]
 8006bd8:	f000 ff97 	bl	8007b0a <I2C_WaitOnSTOPFlagUntilTimeout>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d001      	beq.n	8006be6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006be2:	2301      	movs	r3, #1
 8006be4:	e01a      	b.n	8006c1c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	2220      	movs	r2, #32
 8006bec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	6859      	ldr	r1, [r3, #4]
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681a      	ldr	r2, [r3, #0]
 8006bf8:	4b0a      	ldr	r3, [pc, #40]	; (8006c24 <HAL_I2C_Mem_Write+0x224>)
 8006bfa:	400b      	ands	r3, r1
 8006bfc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	2220      	movs	r2, #32
 8006c02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	2200      	movs	r2, #0
 8006c12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006c16:	2300      	movs	r3, #0
 8006c18:	e000      	b.n	8006c1c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006c1a:	2302      	movs	r3, #2
  }
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	3718      	adds	r7, #24
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}
 8006c24:	fe00e800 	.word	0xfe00e800

08006c28 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b088      	sub	sp, #32
 8006c2c:	af02      	add	r7, sp, #8
 8006c2e:	60f8      	str	r0, [r7, #12]
 8006c30:	4608      	mov	r0, r1
 8006c32:	4611      	mov	r1, r2
 8006c34:	461a      	mov	r2, r3
 8006c36:	4603      	mov	r3, r0
 8006c38:	817b      	strh	r3, [r7, #10]
 8006c3a:	460b      	mov	r3, r1
 8006c3c:	813b      	strh	r3, [r7, #8]
 8006c3e:	4613      	mov	r3, r2
 8006c40:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c48:	b2db      	uxtb	r3, r3
 8006c4a:	2b20      	cmp	r3, #32
 8006c4c:	f040 80fd 	bne.w	8006e4a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c50:	6a3b      	ldr	r3, [r7, #32]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d002      	beq.n	8006c5c <HAL_I2C_Mem_Read+0x34>
 8006c56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d105      	bne.n	8006c68 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006c62:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006c64:	2301      	movs	r3, #1
 8006c66:	e0f1      	b.n	8006e4c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006c6e:	2b01      	cmp	r3, #1
 8006c70:	d101      	bne.n	8006c76 <HAL_I2C_Mem_Read+0x4e>
 8006c72:	2302      	movs	r3, #2
 8006c74:	e0ea      	b.n	8006e4c <HAL_I2C_Mem_Read+0x224>
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	2201      	movs	r2, #1
 8006c7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006c7e:	f7fe ff37 	bl	8005af0 <HAL_GetTick>
 8006c82:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006c84:	697b      	ldr	r3, [r7, #20]
 8006c86:	9300      	str	r3, [sp, #0]
 8006c88:	2319      	movs	r3, #25
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006c90:	68f8      	ldr	r0, [r7, #12]
 8006c92:	f000 feba 	bl	8007a0a <I2C_WaitOnFlagUntilTimeout>
 8006c96:	4603      	mov	r3, r0
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d001      	beq.n	8006ca0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	e0d5      	b.n	8006e4c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	2222      	movs	r2, #34	; 0x22
 8006ca4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	2240      	movs	r2, #64	; 0x40
 8006cac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	6a3a      	ldr	r2, [r7, #32]
 8006cba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006cc0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006cc8:	88f8      	ldrh	r0, [r7, #6]
 8006cca:	893a      	ldrh	r2, [r7, #8]
 8006ccc:	8979      	ldrh	r1, [r7, #10]
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	9301      	str	r3, [sp, #4]
 8006cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cd4:	9300      	str	r3, [sp, #0]
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	68f8      	ldr	r0, [r7, #12]
 8006cda:	f000 fac7 	bl	800726c <I2C_RequestMemoryRead>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d005      	beq.n	8006cf0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006cec:	2301      	movs	r3, #1
 8006cee:	e0ad      	b.n	8006e4c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cf4:	b29b      	uxth	r3, r3
 8006cf6:	2bff      	cmp	r3, #255	; 0xff
 8006cf8:	d90e      	bls.n	8006d18 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	22ff      	movs	r2, #255	; 0xff
 8006cfe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d04:	b2da      	uxtb	r2, r3
 8006d06:	8979      	ldrh	r1, [r7, #10]
 8006d08:	4b52      	ldr	r3, [pc, #328]	; (8006e54 <HAL_I2C_Mem_Read+0x22c>)
 8006d0a:	9300      	str	r3, [sp, #0]
 8006d0c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006d10:	68f8      	ldr	r0, [r7, #12]
 8006d12:	f001 f823 	bl	8007d5c <I2C_TransferConfig>
 8006d16:	e00f      	b.n	8006d38 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d1c:	b29a      	uxth	r2, r3
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d26:	b2da      	uxtb	r2, r3
 8006d28:	8979      	ldrh	r1, [r7, #10]
 8006d2a:	4b4a      	ldr	r3, [pc, #296]	; (8006e54 <HAL_I2C_Mem_Read+0x22c>)
 8006d2c:	9300      	str	r3, [sp, #0]
 8006d2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006d32:	68f8      	ldr	r0, [r7, #12]
 8006d34:	f001 f812 	bl	8007d5c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	9300      	str	r3, [sp, #0]
 8006d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d3e:	2200      	movs	r2, #0
 8006d40:	2104      	movs	r1, #4
 8006d42:	68f8      	ldr	r0, [r7, #12]
 8006d44:	f000 fe61 	bl	8007a0a <I2C_WaitOnFlagUntilTimeout>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d001      	beq.n	8006d52 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006d4e:	2301      	movs	r3, #1
 8006d50:	e07c      	b.n	8006e4c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d5c:	b2d2      	uxtb	r2, r2
 8006d5e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d64:	1c5a      	adds	r2, r3, #1
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d6e:	3b01      	subs	r3, #1
 8006d70:	b29a      	uxth	r2, r3
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d7a:	b29b      	uxth	r3, r3
 8006d7c:	3b01      	subs	r3, #1
 8006d7e:	b29a      	uxth	r2, r3
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d88:	b29b      	uxth	r3, r3
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d034      	beq.n	8006df8 <HAL_I2C_Mem_Read+0x1d0>
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d130      	bne.n	8006df8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	9300      	str	r3, [sp, #0]
 8006d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	2180      	movs	r1, #128	; 0x80
 8006da0:	68f8      	ldr	r0, [r7, #12]
 8006da2:	f000 fe32 	bl	8007a0a <I2C_WaitOnFlagUntilTimeout>
 8006da6:	4603      	mov	r3, r0
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d001      	beq.n	8006db0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006dac:	2301      	movs	r3, #1
 8006dae:	e04d      	b.n	8006e4c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006db4:	b29b      	uxth	r3, r3
 8006db6:	2bff      	cmp	r3, #255	; 0xff
 8006db8:	d90e      	bls.n	8006dd8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	22ff      	movs	r2, #255	; 0xff
 8006dbe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dc4:	b2da      	uxtb	r2, r3
 8006dc6:	8979      	ldrh	r1, [r7, #10]
 8006dc8:	2300      	movs	r3, #0
 8006dca:	9300      	str	r3, [sp, #0]
 8006dcc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006dd0:	68f8      	ldr	r0, [r7, #12]
 8006dd2:	f000 ffc3 	bl	8007d5c <I2C_TransferConfig>
 8006dd6:	e00f      	b.n	8006df8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ddc:	b29a      	uxth	r2, r3
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006de6:	b2da      	uxtb	r2, r3
 8006de8:	8979      	ldrh	r1, [r7, #10]
 8006dea:	2300      	movs	r3, #0
 8006dec:	9300      	str	r3, [sp, #0]
 8006dee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006df2:	68f8      	ldr	r0, [r7, #12]
 8006df4:	f000 ffb2 	bl	8007d5c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dfc:	b29b      	uxth	r3, r3
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d19a      	bne.n	8006d38 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006e02:	697a      	ldr	r2, [r7, #20]
 8006e04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e06:	68f8      	ldr	r0, [r7, #12]
 8006e08:	f000 fe7f 	bl	8007b0a <I2C_WaitOnSTOPFlagUntilTimeout>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d001      	beq.n	8006e16 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006e12:	2301      	movs	r3, #1
 8006e14:	e01a      	b.n	8006e4c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	2220      	movs	r2, #32
 8006e1c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	6859      	ldr	r1, [r3, #4]
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681a      	ldr	r2, [r3, #0]
 8006e28:	4b0b      	ldr	r3, [pc, #44]	; (8006e58 <HAL_I2C_Mem_Read+0x230>)
 8006e2a:	400b      	ands	r3, r1
 8006e2c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	2220      	movs	r2, #32
 8006e32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	2200      	movs	r2, #0
 8006e42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006e46:	2300      	movs	r3, #0
 8006e48:	e000      	b.n	8006e4c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006e4a:	2302      	movs	r3, #2
  }
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	3718      	adds	r7, #24
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}
 8006e54:	80002400 	.word	0x80002400
 8006e58:	fe00e800 	.word	0xfe00e800

08006e5c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b084      	sub	sp, #16
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	699b      	ldr	r3, [r3, #24]
 8006e6a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d005      	beq.n	8006e88 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e80:	68ba      	ldr	r2, [r7, #8]
 8006e82:	68f9      	ldr	r1, [r7, #12]
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	4798      	blx	r3
  }
}
 8006e88:	bf00      	nop
 8006e8a:	3710      	adds	r7, #16
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}

08006e90 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b086      	sub	sp, #24
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	699b      	ldr	r3, [r3, #24]
 8006e9e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	0a1b      	lsrs	r3, r3, #8
 8006eac:	f003 0301 	and.w	r3, r3, #1
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d010      	beq.n	8006ed6 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006eb4:	693b      	ldr	r3, [r7, #16]
 8006eb6:	09db      	lsrs	r3, r3, #7
 8006eb8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d00a      	beq.n	8006ed6 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ec4:	f043 0201 	orr.w	r2, r3, #1
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006ed4:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	0a9b      	lsrs	r3, r3, #10
 8006eda:	f003 0301 	and.w	r3, r3, #1
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d010      	beq.n	8006f04 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	09db      	lsrs	r3, r3, #7
 8006ee6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d00a      	beq.n	8006f04 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ef2:	f043 0208 	orr.w	r2, r3, #8
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006f02:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	0a5b      	lsrs	r3, r3, #9
 8006f08:	f003 0301 	and.w	r3, r3, #1
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d010      	beq.n	8006f32 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	09db      	lsrs	r3, r3, #7
 8006f14:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d00a      	beq.n	8006f32 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f20:	f043 0202 	orr.w	r2, r3, #2
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f30:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f36:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	f003 030b 	and.w	r3, r3, #11
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d003      	beq.n	8006f4a <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8006f42:	68f9      	ldr	r1, [r7, #12]
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	f000 fc27 	bl	8007798 <I2C_ITError>
  }
}
 8006f4a:	bf00      	nop
 8006f4c:	3718      	adds	r7, #24
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bd80      	pop	{r7, pc}

08006f52 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006f52:	b480      	push	{r7}
 8006f54:	b083      	sub	sp, #12
 8006f56:	af00      	add	r7, sp, #0
 8006f58:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006f5a:	bf00      	nop
 8006f5c:	370c      	adds	r7, #12
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f64:	4770      	bx	lr

08006f66 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006f66:	b480      	push	{r7}
 8006f68:	b083      	sub	sp, #12
 8006f6a:	af00      	add	r7, sp, #0
 8006f6c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006f6e:	bf00      	nop
 8006f70:	370c      	adds	r7, #12
 8006f72:	46bd      	mov	sp, r7
 8006f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f78:	4770      	bx	lr

08006f7a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006f7a:	b480      	push	{r7}
 8006f7c:	b083      	sub	sp, #12
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	6078      	str	r0, [r7, #4]
 8006f82:	460b      	mov	r3, r1
 8006f84:	70fb      	strb	r3, [r7, #3]
 8006f86:	4613      	mov	r3, r2
 8006f88:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006f8a:	bf00      	nop
 8006f8c:	370c      	adds	r7, #12
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f94:	4770      	bx	lr

08006f96 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006f96:	b480      	push	{r7}
 8006f98:	b083      	sub	sp, #12
 8006f9a:	af00      	add	r7, sp, #0
 8006f9c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8006f9e:	bf00      	nop
 8006fa0:	370c      	adds	r7, #12
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa8:	4770      	bx	lr

08006faa <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006faa:	b480      	push	{r7}
 8006fac:	b083      	sub	sp, #12
 8006fae:	af00      	add	r7, sp, #0
 8006fb0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006fb2:	bf00      	nop
 8006fb4:	370c      	adds	r7, #12
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbc:	4770      	bx	lr

08006fbe <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8006fbe:	b580      	push	{r7, lr}
 8006fc0:	b086      	sub	sp, #24
 8006fc2:	af00      	add	r7, sp, #0
 8006fc4:	60f8      	str	r0, [r7, #12]
 8006fc6:	60b9      	str	r1, [r7, #8]
 8006fc8:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fce:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006fda:	2b01      	cmp	r3, #1
 8006fdc:	d101      	bne.n	8006fe2 <I2C_Slave_ISR_IT+0x24>
 8006fde:	2302      	movs	r3, #2
 8006fe0:	e0ec      	b.n	80071bc <I2C_Slave_ISR_IT+0x1fe>
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	2201      	movs	r2, #1
 8006fe6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006fea:	693b      	ldr	r3, [r7, #16]
 8006fec:	095b      	lsrs	r3, r3, #5
 8006fee:	f003 0301 	and.w	r3, r3, #1
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d009      	beq.n	800700a <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	095b      	lsrs	r3, r3, #5
 8006ffa:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d003      	beq.n	800700a <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8007002:	6939      	ldr	r1, [r7, #16]
 8007004:	68f8      	ldr	r0, [r7, #12]
 8007006:	f000 fa67 	bl	80074d8 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800700a:	693b      	ldr	r3, [r7, #16]
 800700c:	091b      	lsrs	r3, r3, #4
 800700e:	f003 0301 	and.w	r3, r3, #1
 8007012:	2b00      	cmp	r3, #0
 8007014:	d04d      	beq.n	80070b2 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	091b      	lsrs	r3, r3, #4
 800701a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800701e:	2b00      	cmp	r3, #0
 8007020:	d047      	beq.n	80070b2 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007026:	b29b      	uxth	r3, r3
 8007028:	2b00      	cmp	r3, #0
 800702a:	d128      	bne.n	800707e <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007032:	b2db      	uxtb	r3, r3
 8007034:	2b28      	cmp	r3, #40	; 0x28
 8007036:	d108      	bne.n	800704a <I2C_Slave_ISR_IT+0x8c>
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800703e:	d104      	bne.n	800704a <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8007040:	6939      	ldr	r1, [r7, #16]
 8007042:	68f8      	ldr	r0, [r7, #12]
 8007044:	f000 fb52 	bl	80076ec <I2C_ITListenCplt>
 8007048:	e032      	b.n	80070b0 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007050:	b2db      	uxtb	r3, r3
 8007052:	2b29      	cmp	r3, #41	; 0x29
 8007054:	d10e      	bne.n	8007074 <I2C_Slave_ISR_IT+0xb6>
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800705c:	d00a      	beq.n	8007074 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	2210      	movs	r2, #16
 8007064:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8007066:	68f8      	ldr	r0, [r7, #12]
 8007068:	f000 fc8d 	bl	8007986 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800706c:	68f8      	ldr	r0, [r7, #12]
 800706e:	f000 f9d5 	bl	800741c <I2C_ITSlaveSeqCplt>
 8007072:	e01d      	b.n	80070b0 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	2210      	movs	r2, #16
 800707a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800707c:	e096      	b.n	80071ac <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	2210      	movs	r2, #16
 8007084:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800708a:	f043 0204 	orr.w	r2, r3, #4
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d004      	beq.n	80070a2 <I2C_Slave_ISR_IT+0xe4>
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800709e:	f040 8085 	bne.w	80071ac <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070a6:	4619      	mov	r1, r3
 80070a8:	68f8      	ldr	r0, [r7, #12]
 80070aa:	f000 fb75 	bl	8007798 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80070ae:	e07d      	b.n	80071ac <I2C_Slave_ISR_IT+0x1ee>
 80070b0:	e07c      	b.n	80071ac <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80070b2:	693b      	ldr	r3, [r7, #16]
 80070b4:	089b      	lsrs	r3, r3, #2
 80070b6:	f003 0301 	and.w	r3, r3, #1
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d030      	beq.n	8007120 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	089b      	lsrs	r3, r3, #2
 80070c2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d02a      	beq.n	8007120 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070ce:	b29b      	uxth	r3, r3
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d018      	beq.n	8007106 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070de:	b2d2      	uxtb	r2, r2
 80070e0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e6:	1c5a      	adds	r2, r3, #1
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070f0:	3b01      	subs	r3, #1
 80070f2:	b29a      	uxth	r2, r3
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070fc:	b29b      	uxth	r3, r3
 80070fe:	3b01      	subs	r3, #1
 8007100:	b29a      	uxth	r2, r3
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800710a:	b29b      	uxth	r3, r3
 800710c:	2b00      	cmp	r3, #0
 800710e:	d14f      	bne.n	80071b0 <I2C_Slave_ISR_IT+0x1f2>
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007116:	d04b      	beq.n	80071b0 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8007118:	68f8      	ldr	r0, [r7, #12]
 800711a:	f000 f97f 	bl	800741c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800711e:	e047      	b.n	80071b0 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	08db      	lsrs	r3, r3, #3
 8007124:	f003 0301 	and.w	r3, r3, #1
 8007128:	2b00      	cmp	r3, #0
 800712a:	d00a      	beq.n	8007142 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	08db      	lsrs	r3, r3, #3
 8007130:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007134:	2b00      	cmp	r3, #0
 8007136:	d004      	beq.n	8007142 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8007138:	6939      	ldr	r1, [r7, #16]
 800713a:	68f8      	ldr	r0, [r7, #12]
 800713c:	f000 f8ea 	bl	8007314 <I2C_ITAddrCplt>
 8007140:	e037      	b.n	80071b2 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	085b      	lsrs	r3, r3, #1
 8007146:	f003 0301 	and.w	r3, r3, #1
 800714a:	2b00      	cmp	r3, #0
 800714c:	d031      	beq.n	80071b2 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	085b      	lsrs	r3, r3, #1
 8007152:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007156:	2b00      	cmp	r3, #0
 8007158:	d02b      	beq.n	80071b2 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800715e:	b29b      	uxth	r3, r3
 8007160:	2b00      	cmp	r3, #0
 8007162:	d018      	beq.n	8007196 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007168:	781a      	ldrb	r2, [r3, #0]
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007174:	1c5a      	adds	r2, r3, #1
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800717e:	b29b      	uxth	r3, r3
 8007180:	3b01      	subs	r3, #1
 8007182:	b29a      	uxth	r2, r3
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800718c:	3b01      	subs	r3, #1
 800718e:	b29a      	uxth	r2, r3
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	851a      	strh	r2, [r3, #40]	; 0x28
 8007194:	e00d      	b.n	80071b2 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800719c:	d002      	beq.n	80071a4 <I2C_Slave_ISR_IT+0x1e6>
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d106      	bne.n	80071b2 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80071a4:	68f8      	ldr	r0, [r7, #12]
 80071a6:	f000 f939 	bl	800741c <I2C_ITSlaveSeqCplt>
 80071aa:	e002      	b.n	80071b2 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 80071ac:	bf00      	nop
 80071ae:	e000      	b.n	80071b2 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 80071b0:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	2200      	movs	r2, #0
 80071b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80071ba:	2300      	movs	r3, #0
}
 80071bc:	4618      	mov	r0, r3
 80071be:	3718      	adds	r7, #24
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd80      	pop	{r7, pc}

080071c4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b086      	sub	sp, #24
 80071c8:	af02      	add	r7, sp, #8
 80071ca:	60f8      	str	r0, [r7, #12]
 80071cc:	4608      	mov	r0, r1
 80071ce:	4611      	mov	r1, r2
 80071d0:	461a      	mov	r2, r3
 80071d2:	4603      	mov	r3, r0
 80071d4:	817b      	strh	r3, [r7, #10]
 80071d6:	460b      	mov	r3, r1
 80071d8:	813b      	strh	r3, [r7, #8]
 80071da:	4613      	mov	r3, r2
 80071dc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80071de:	88fb      	ldrh	r3, [r7, #6]
 80071e0:	b2da      	uxtb	r2, r3
 80071e2:	8979      	ldrh	r1, [r7, #10]
 80071e4:	4b20      	ldr	r3, [pc, #128]	; (8007268 <I2C_RequestMemoryWrite+0xa4>)
 80071e6:	9300      	str	r3, [sp, #0]
 80071e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80071ec:	68f8      	ldr	r0, [r7, #12]
 80071ee:	f000 fdb5 	bl	8007d5c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80071f2:	69fa      	ldr	r2, [r7, #28]
 80071f4:	69b9      	ldr	r1, [r7, #24]
 80071f6:	68f8      	ldr	r0, [r7, #12]
 80071f8:	f000 fc47 	bl	8007a8a <I2C_WaitOnTXISFlagUntilTimeout>
 80071fc:	4603      	mov	r3, r0
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d001      	beq.n	8007206 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8007202:	2301      	movs	r3, #1
 8007204:	e02c      	b.n	8007260 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007206:	88fb      	ldrh	r3, [r7, #6]
 8007208:	2b01      	cmp	r3, #1
 800720a:	d105      	bne.n	8007218 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800720c:	893b      	ldrh	r3, [r7, #8]
 800720e:	b2da      	uxtb	r2, r3
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	629a      	str	r2, [r3, #40]	; 0x28
 8007216:	e015      	b.n	8007244 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007218:	893b      	ldrh	r3, [r7, #8]
 800721a:	0a1b      	lsrs	r3, r3, #8
 800721c:	b29b      	uxth	r3, r3
 800721e:	b2da      	uxtb	r2, r3
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007226:	69fa      	ldr	r2, [r7, #28]
 8007228:	69b9      	ldr	r1, [r7, #24]
 800722a:	68f8      	ldr	r0, [r7, #12]
 800722c:	f000 fc2d 	bl	8007a8a <I2C_WaitOnTXISFlagUntilTimeout>
 8007230:	4603      	mov	r3, r0
 8007232:	2b00      	cmp	r3, #0
 8007234:	d001      	beq.n	800723a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8007236:	2301      	movs	r3, #1
 8007238:	e012      	b.n	8007260 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800723a:	893b      	ldrh	r3, [r7, #8]
 800723c:	b2da      	uxtb	r2, r3
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007244:	69fb      	ldr	r3, [r7, #28]
 8007246:	9300      	str	r3, [sp, #0]
 8007248:	69bb      	ldr	r3, [r7, #24]
 800724a:	2200      	movs	r2, #0
 800724c:	2180      	movs	r1, #128	; 0x80
 800724e:	68f8      	ldr	r0, [r7, #12]
 8007250:	f000 fbdb 	bl	8007a0a <I2C_WaitOnFlagUntilTimeout>
 8007254:	4603      	mov	r3, r0
 8007256:	2b00      	cmp	r3, #0
 8007258:	d001      	beq.n	800725e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800725a:	2301      	movs	r3, #1
 800725c:	e000      	b.n	8007260 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800725e:	2300      	movs	r3, #0
}
 8007260:	4618      	mov	r0, r3
 8007262:	3710      	adds	r7, #16
 8007264:	46bd      	mov	sp, r7
 8007266:	bd80      	pop	{r7, pc}
 8007268:	80002000 	.word	0x80002000

0800726c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b086      	sub	sp, #24
 8007270:	af02      	add	r7, sp, #8
 8007272:	60f8      	str	r0, [r7, #12]
 8007274:	4608      	mov	r0, r1
 8007276:	4611      	mov	r1, r2
 8007278:	461a      	mov	r2, r3
 800727a:	4603      	mov	r3, r0
 800727c:	817b      	strh	r3, [r7, #10]
 800727e:	460b      	mov	r3, r1
 8007280:	813b      	strh	r3, [r7, #8]
 8007282:	4613      	mov	r3, r2
 8007284:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007286:	88fb      	ldrh	r3, [r7, #6]
 8007288:	b2da      	uxtb	r2, r3
 800728a:	8979      	ldrh	r1, [r7, #10]
 800728c:	4b20      	ldr	r3, [pc, #128]	; (8007310 <I2C_RequestMemoryRead+0xa4>)
 800728e:	9300      	str	r3, [sp, #0]
 8007290:	2300      	movs	r3, #0
 8007292:	68f8      	ldr	r0, [r7, #12]
 8007294:	f000 fd62 	bl	8007d5c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007298:	69fa      	ldr	r2, [r7, #28]
 800729a:	69b9      	ldr	r1, [r7, #24]
 800729c:	68f8      	ldr	r0, [r7, #12]
 800729e:	f000 fbf4 	bl	8007a8a <I2C_WaitOnTXISFlagUntilTimeout>
 80072a2:	4603      	mov	r3, r0
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d001      	beq.n	80072ac <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80072a8:	2301      	movs	r3, #1
 80072aa:	e02c      	b.n	8007306 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80072ac:	88fb      	ldrh	r3, [r7, #6]
 80072ae:	2b01      	cmp	r3, #1
 80072b0:	d105      	bne.n	80072be <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80072b2:	893b      	ldrh	r3, [r7, #8]
 80072b4:	b2da      	uxtb	r2, r3
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	629a      	str	r2, [r3, #40]	; 0x28
 80072bc:	e015      	b.n	80072ea <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80072be:	893b      	ldrh	r3, [r7, #8]
 80072c0:	0a1b      	lsrs	r3, r3, #8
 80072c2:	b29b      	uxth	r3, r3
 80072c4:	b2da      	uxtb	r2, r3
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80072cc:	69fa      	ldr	r2, [r7, #28]
 80072ce:	69b9      	ldr	r1, [r7, #24]
 80072d0:	68f8      	ldr	r0, [r7, #12]
 80072d2:	f000 fbda 	bl	8007a8a <I2C_WaitOnTXISFlagUntilTimeout>
 80072d6:	4603      	mov	r3, r0
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d001      	beq.n	80072e0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80072dc:	2301      	movs	r3, #1
 80072de:	e012      	b.n	8007306 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80072e0:	893b      	ldrh	r3, [r7, #8]
 80072e2:	b2da      	uxtb	r2, r3
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80072ea:	69fb      	ldr	r3, [r7, #28]
 80072ec:	9300      	str	r3, [sp, #0]
 80072ee:	69bb      	ldr	r3, [r7, #24]
 80072f0:	2200      	movs	r2, #0
 80072f2:	2140      	movs	r1, #64	; 0x40
 80072f4:	68f8      	ldr	r0, [r7, #12]
 80072f6:	f000 fb88 	bl	8007a0a <I2C_WaitOnFlagUntilTimeout>
 80072fa:	4603      	mov	r3, r0
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d001      	beq.n	8007304 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8007300:	2301      	movs	r3, #1
 8007302:	e000      	b.n	8007306 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8007304:	2300      	movs	r3, #0
}
 8007306:	4618      	mov	r0, r3
 8007308:	3710      	adds	r7, #16
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}
 800730e:	bf00      	nop
 8007310:	80002000 	.word	0x80002000

08007314 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b084      	sub	sp, #16
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
 800731c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007324:	b2db      	uxtb	r3, r3
 8007326:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800732a:	2b28      	cmp	r3, #40	; 0x28
 800732c:	d16a      	bne.n	8007404 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	699b      	ldr	r3, [r3, #24]
 8007334:	0c1b      	lsrs	r3, r3, #16
 8007336:	b2db      	uxtb	r3, r3
 8007338:	f003 0301 	and.w	r3, r3, #1
 800733c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	699b      	ldr	r3, [r3, #24]
 8007344:	0c1b      	lsrs	r3, r3, #16
 8007346:	b29b      	uxth	r3, r3
 8007348:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800734c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	689b      	ldr	r3, [r3, #8]
 8007354:	b29b      	uxth	r3, r3
 8007356:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800735a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	68db      	ldr	r3, [r3, #12]
 8007362:	b29b      	uxth	r3, r3
 8007364:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8007368:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	68db      	ldr	r3, [r3, #12]
 800736e:	2b02      	cmp	r3, #2
 8007370:	d138      	bne.n	80073e4 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8007372:	897b      	ldrh	r3, [r7, #10]
 8007374:	09db      	lsrs	r3, r3, #7
 8007376:	b29a      	uxth	r2, r3
 8007378:	89bb      	ldrh	r3, [r7, #12]
 800737a:	4053      	eors	r3, r2
 800737c:	b29b      	uxth	r3, r3
 800737e:	f003 0306 	and.w	r3, r3, #6
 8007382:	2b00      	cmp	r3, #0
 8007384:	d11c      	bne.n	80073c0 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8007386:	897b      	ldrh	r3, [r7, #10]
 8007388:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800738e:	1c5a      	adds	r2, r3, #1
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007398:	2b02      	cmp	r3, #2
 800739a:	d13b      	bne.n	8007414 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2200      	movs	r2, #0
 80073a0:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	2208      	movs	r2, #8
 80073a8:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2200      	movs	r2, #0
 80073ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80073b2:	89ba      	ldrh	r2, [r7, #12]
 80073b4:	7bfb      	ldrb	r3, [r7, #15]
 80073b6:	4619      	mov	r1, r3
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f7ff fdde 	bl	8006f7a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80073be:	e029      	b.n	8007414 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80073c0:	893b      	ldrh	r3, [r7, #8]
 80073c2:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80073c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f000 fcf9 	bl	8007dc0 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2200      	movs	r2, #0
 80073d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80073d6:	89ba      	ldrh	r2, [r7, #12]
 80073d8:	7bfb      	ldrb	r3, [r7, #15]
 80073da:	4619      	mov	r1, r3
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f7ff fdcc 	bl	8006f7a <HAL_I2C_AddrCallback>
}
 80073e2:	e017      	b.n	8007414 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80073e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f000 fce9 	bl	8007dc0 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2200      	movs	r2, #0
 80073f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80073f6:	89ba      	ldrh	r2, [r7, #12]
 80073f8:	7bfb      	ldrb	r3, [r7, #15]
 80073fa:	4619      	mov	r1, r3
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f7ff fdbc 	bl	8006f7a <HAL_I2C_AddrCallback>
}
 8007402:	e007      	b.n	8007414 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	2208      	movs	r2, #8
 800740a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2200      	movs	r2, #0
 8007410:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8007414:	bf00      	nop
 8007416:	3710      	adds	r7, #16
 8007418:	46bd      	mov	sp, r7
 800741a:	bd80      	pop	{r7, pc}

0800741c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b084      	sub	sp, #16
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2200      	movs	r2, #0
 8007430:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	0b9b      	lsrs	r3, r3, #14
 8007438:	f003 0301 	and.w	r3, r3, #1
 800743c:	2b00      	cmp	r3, #0
 800743e:	d008      	beq.n	8007452 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	681a      	ldr	r2, [r3, #0]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800744e:	601a      	str	r2, [r3, #0]
 8007450:	e00d      	b.n	800746e <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	0bdb      	lsrs	r3, r3, #15
 8007456:	f003 0301 	and.w	r3, r3, #1
 800745a:	2b00      	cmp	r3, #0
 800745c:	d007      	beq.n	800746e <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	681a      	ldr	r2, [r3, #0]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800746c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007474:	b2db      	uxtb	r3, r3
 8007476:	2b29      	cmp	r3, #41	; 0x29
 8007478:	d112      	bne.n	80074a0 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2228      	movs	r2, #40	; 0x28
 800747e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2221      	movs	r2, #33	; 0x21
 8007486:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007488:	2101      	movs	r1, #1
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f000 fc98 	bl	8007dc0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2200      	movs	r2, #0
 8007494:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f7ff fd5a 	bl	8006f52 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800749e:	e017      	b.n	80074d0 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80074a6:	b2db      	uxtb	r3, r3
 80074a8:	2b2a      	cmp	r3, #42	; 0x2a
 80074aa:	d111      	bne.n	80074d0 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2228      	movs	r2, #40	; 0x28
 80074b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2222      	movs	r2, #34	; 0x22
 80074b8:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80074ba:	2102      	movs	r1, #2
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f000 fc7f 	bl	8007dc0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2200      	movs	r2, #0
 80074c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f7ff fd4b 	bl	8006f66 <HAL_I2C_SlaveRxCpltCallback>
}
 80074d0:	bf00      	nop
 80074d2:	3710      	adds	r7, #16
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}

080074d8 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b086      	sub	sp, #24
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
 80074e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80074f4:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	2220      	movs	r2, #32
 80074fc:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80074fe:	7bfb      	ldrb	r3, [r7, #15]
 8007500:	2b21      	cmp	r3, #33	; 0x21
 8007502:	d002      	beq.n	800750a <I2C_ITSlaveCplt+0x32>
 8007504:	7bfb      	ldrb	r3, [r7, #15]
 8007506:	2b29      	cmp	r3, #41	; 0x29
 8007508:	d108      	bne.n	800751c <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800750a:	f248 0101 	movw	r1, #32769	; 0x8001
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f000 fc56 	bl	8007dc0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2221      	movs	r2, #33	; 0x21
 8007518:	631a      	str	r2, [r3, #48]	; 0x30
 800751a:	e00d      	b.n	8007538 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800751c:	7bfb      	ldrb	r3, [r7, #15]
 800751e:	2b22      	cmp	r3, #34	; 0x22
 8007520:	d002      	beq.n	8007528 <I2C_ITSlaveCplt+0x50>
 8007522:	7bfb      	ldrb	r3, [r7, #15]
 8007524:	2b2a      	cmp	r3, #42	; 0x2a
 8007526:	d107      	bne.n	8007538 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8007528:	f248 0102 	movw	r1, #32770	; 0x8002
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f000 fc47 	bl	8007dc0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2222      	movs	r2, #34	; 0x22
 8007536:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	685a      	ldr	r2, [r3, #4]
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007546:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	6859      	ldr	r1, [r3, #4]
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681a      	ldr	r2, [r3, #0]
 8007552:	4b64      	ldr	r3, [pc, #400]	; (80076e4 <I2C_ITSlaveCplt+0x20c>)
 8007554:	400b      	ands	r3, r1
 8007556:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f000 fa14 	bl	8007986 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800755e:	693b      	ldr	r3, [r7, #16]
 8007560:	0b9b      	lsrs	r3, r3, #14
 8007562:	f003 0301 	and.w	r3, r3, #1
 8007566:	2b00      	cmp	r3, #0
 8007568:	d013      	beq.n	8007592 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	681a      	ldr	r2, [r3, #0]
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007578:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800757e:	2b00      	cmp	r3, #0
 8007580:	d020      	beq.n	80075c4 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	685b      	ldr	r3, [r3, #4]
 800758a:	b29a      	uxth	r2, r3
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007590:	e018      	b.n	80075c4 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8007592:	693b      	ldr	r3, [r7, #16]
 8007594:	0bdb      	lsrs	r3, r3, #15
 8007596:	f003 0301 	and.w	r3, r3, #1
 800759a:	2b00      	cmp	r3, #0
 800759c:	d012      	beq.n	80075c4 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	681a      	ldr	r2, [r3, #0]
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80075ac:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d006      	beq.n	80075c4 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	685b      	ldr	r3, [r3, #4]
 80075be:	b29a      	uxth	r2, r3
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	089b      	lsrs	r3, r3, #2
 80075c8:	f003 0301 	and.w	r3, r3, #1
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d020      	beq.n	8007612 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80075d0:	697b      	ldr	r3, [r7, #20]
 80075d2:	f023 0304 	bic.w	r3, r3, #4
 80075d6:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075e2:	b2d2      	uxtb	r2, r2
 80075e4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ea:	1c5a      	adds	r2, r3, #1
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d00c      	beq.n	8007612 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075fc:	3b01      	subs	r3, #1
 80075fe:	b29a      	uxth	r2, r3
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007608:	b29b      	uxth	r3, r3
 800760a:	3b01      	subs	r3, #1
 800760c:	b29a      	uxth	r2, r3
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007616:	b29b      	uxth	r3, r3
 8007618:	2b00      	cmp	r3, #0
 800761a:	d005      	beq.n	8007628 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007620:	f043 0204 	orr.w	r2, r3, #4
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2200      	movs	r2, #0
 800762c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2200      	movs	r2, #0
 8007634:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800763a:	2b00      	cmp	r3, #0
 800763c:	d010      	beq.n	8007660 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007642:	4619      	mov	r1, r3
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f000 f8a7 	bl	8007798 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007650:	b2db      	uxtb	r3, r3
 8007652:	2b28      	cmp	r3, #40	; 0x28
 8007654:	d141      	bne.n	80076da <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8007656:	6979      	ldr	r1, [r7, #20]
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	f000 f847 	bl	80076ec <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800765e:	e03c      	b.n	80076da <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007664:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007668:	d014      	beq.n	8007694 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f7ff fed6 	bl	800741c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	4a1d      	ldr	r2, [pc, #116]	; (80076e8 <I2C_ITSlaveCplt+0x210>)
 8007674:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2220      	movs	r2, #32
 800767a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2200      	movs	r2, #0
 8007682:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2200      	movs	r2, #0
 8007688:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f7ff fc82 	bl	8006f96 <HAL_I2C_ListenCpltCallback>
}
 8007692:	e022      	b.n	80076da <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800769a:	b2db      	uxtb	r3, r3
 800769c:	2b22      	cmp	r3, #34	; 0x22
 800769e:	d10e      	bne.n	80076be <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2220      	movs	r2, #32
 80076a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2200      	movs	r2, #0
 80076ac:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2200      	movs	r2, #0
 80076b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f7ff fc55 	bl	8006f66 <HAL_I2C_SlaveRxCpltCallback>
}
 80076bc:	e00d      	b.n	80076da <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2220      	movs	r2, #32
 80076c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2200      	movs	r2, #0
 80076ca:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2200      	movs	r2, #0
 80076d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f7ff fc3c 	bl	8006f52 <HAL_I2C_SlaveTxCpltCallback>
}
 80076da:	bf00      	nop
 80076dc:	3718      	adds	r7, #24
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd80      	pop	{r7, pc}
 80076e2:	bf00      	nop
 80076e4:	fe00e800 	.word	0xfe00e800
 80076e8:	ffff0000 	.word	0xffff0000

080076ec <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b082      	sub	sp, #8
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
 80076f4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	4a26      	ldr	r2, [pc, #152]	; (8007794 <I2C_ITListenCplt+0xa8>)
 80076fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2200      	movs	r2, #0
 8007700:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2220      	movs	r2, #32
 8007706:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2200      	movs	r2, #0
 800770e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2200      	movs	r2, #0
 8007716:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	089b      	lsrs	r3, r3, #2
 800771c:	f003 0301 	and.w	r3, r3, #1
 8007720:	2b00      	cmp	r3, #0
 8007722:	d022      	beq.n	800776a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800772e:	b2d2      	uxtb	r2, r2
 8007730:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007736:	1c5a      	adds	r2, r3, #1
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007740:	2b00      	cmp	r3, #0
 8007742:	d012      	beq.n	800776a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007748:	3b01      	subs	r3, #1
 800774a:	b29a      	uxth	r2, r3
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007754:	b29b      	uxth	r3, r3
 8007756:	3b01      	subs	r3, #1
 8007758:	b29a      	uxth	r2, r3
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007762:	f043 0204 	orr.w	r2, r3, #4
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800776a:	f248 0103 	movw	r1, #32771	; 0x8003
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f000 fb26 	bl	8007dc0 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	2210      	movs	r2, #16
 800777a:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2200      	movs	r2, #0
 8007780:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	f7ff fc06 	bl	8006f96 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800778a:	bf00      	nop
 800778c:	3708      	adds	r7, #8
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}
 8007792:	bf00      	nop
 8007794:	ffff0000 	.word	0xffff0000

08007798 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b084      	sub	sp, #16
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
 80077a0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80077a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2200      	movs	r2, #0
 80077ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	4a5d      	ldr	r2, [pc, #372]	; (800792c <I2C_ITError+0x194>)
 80077b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2200      	movs	r2, #0
 80077bc:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	431a      	orrs	r2, r3
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80077ca:	7bfb      	ldrb	r3, [r7, #15]
 80077cc:	2b28      	cmp	r3, #40	; 0x28
 80077ce:	d005      	beq.n	80077dc <I2C_ITError+0x44>
 80077d0:	7bfb      	ldrb	r3, [r7, #15]
 80077d2:	2b29      	cmp	r3, #41	; 0x29
 80077d4:	d002      	beq.n	80077dc <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80077d6:	7bfb      	ldrb	r3, [r7, #15]
 80077d8:	2b2a      	cmp	r3, #42	; 0x2a
 80077da:	d10b      	bne.n	80077f4 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80077dc:	2103      	movs	r1, #3
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f000 faee 	bl	8007dc0 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2228      	movs	r2, #40	; 0x28
 80077e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	4a50      	ldr	r2, [pc, #320]	; (8007930 <I2C_ITError+0x198>)
 80077f0:	635a      	str	r2, [r3, #52]	; 0x34
 80077f2:	e011      	b.n	8007818 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80077f4:	f248 0103 	movw	r1, #32771	; 0x8003
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f000 fae1 	bl	8007dc0 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007804:	b2db      	uxtb	r3, r3
 8007806:	2b60      	cmp	r3, #96	; 0x60
 8007808:	d003      	beq.n	8007812 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2220      	movs	r2, #32
 800780e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2200      	movs	r2, #0
 8007816:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800781c:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007822:	2b00      	cmp	r3, #0
 8007824:	d039      	beq.n	800789a <I2C_ITError+0x102>
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	2b11      	cmp	r3, #17
 800782a:	d002      	beq.n	8007832 <I2C_ITError+0x9a>
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	2b21      	cmp	r3, #33	; 0x21
 8007830:	d133      	bne.n	800789a <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800783c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007840:	d107      	bne.n	8007852 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	681a      	ldr	r2, [r3, #0]
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007850:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007856:	4618      	mov	r0, r3
 8007858:	f7fe fd04 	bl	8006264 <HAL_DMA_GetState>
 800785c:	4603      	mov	r3, r0
 800785e:	2b01      	cmp	r3, #1
 8007860:	d017      	beq.n	8007892 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007866:	4a33      	ldr	r2, [pc, #204]	; (8007934 <I2C_ITError+0x19c>)
 8007868:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2200      	movs	r2, #0
 800786e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007876:	4618      	mov	r0, r3
 8007878:	f7fe fc04 	bl	8006084 <HAL_DMA_Abort_IT>
 800787c:	4603      	mov	r3, r0
 800787e:	2b00      	cmp	r3, #0
 8007880:	d04d      	beq.n	800791e <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007888:	687a      	ldr	r2, [r7, #4]
 800788a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800788c:	4610      	mov	r0, r2
 800788e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007890:	e045      	b.n	800791e <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f000 f850 	bl	8007938 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007898:	e041      	b.n	800791e <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d039      	beq.n	8007916 <I2C_ITError+0x17e>
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	2b12      	cmp	r3, #18
 80078a6:	d002      	beq.n	80078ae <I2C_ITError+0x116>
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	2b22      	cmp	r3, #34	; 0x22
 80078ac:	d133      	bne.n	8007916 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80078b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078bc:	d107      	bne.n	80078ce <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	681a      	ldr	r2, [r3, #0]
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80078cc:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078d2:	4618      	mov	r0, r3
 80078d4:	f7fe fcc6 	bl	8006264 <HAL_DMA_GetState>
 80078d8:	4603      	mov	r3, r0
 80078da:	2b01      	cmp	r3, #1
 80078dc:	d017      	beq.n	800790e <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078e2:	4a14      	ldr	r2, [pc, #80]	; (8007934 <I2C_ITError+0x19c>)
 80078e4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2200      	movs	r2, #0
 80078ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078f2:	4618      	mov	r0, r3
 80078f4:	f7fe fbc6 	bl	8006084 <HAL_DMA_Abort_IT>
 80078f8:	4603      	mov	r3, r0
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d011      	beq.n	8007922 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007904:	687a      	ldr	r2, [r7, #4]
 8007906:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007908:	4610      	mov	r0, r2
 800790a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800790c:	e009      	b.n	8007922 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f000 f812 	bl	8007938 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007914:	e005      	b.n	8007922 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f000 f80e 	bl	8007938 <I2C_TreatErrorCallback>
  }
}
 800791c:	e002      	b.n	8007924 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800791e:	bf00      	nop
 8007920:	e000      	b.n	8007924 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007922:	bf00      	nop
}
 8007924:	bf00      	nop
 8007926:	3710      	adds	r7, #16
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}
 800792c:	ffff0000 	.word	0xffff0000
 8007930:	08006fbf 	.word	0x08006fbf
 8007934:	080079cf 	.word	0x080079cf

08007938 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b082      	sub	sp, #8
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007946:	b2db      	uxtb	r3, r3
 8007948:	2b60      	cmp	r3, #96	; 0x60
 800794a:	d10e      	bne.n	800796a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2220      	movs	r2, #32
 8007950:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2200      	movs	r2, #0
 8007958:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2200      	movs	r2, #0
 800795e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f7ff fb21 	bl	8006faa <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007968:	e009      	b.n	800797e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2200      	movs	r2, #0
 800796e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2200      	movs	r2, #0
 8007974:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f7fc fa43 	bl	8003e04 <HAL_I2C_ErrorCallback>
}
 800797e:	bf00      	nop
 8007980:	3708      	adds	r7, #8
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}

08007986 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007986:	b480      	push	{r7}
 8007988:	b083      	sub	sp, #12
 800798a:	af00      	add	r7, sp, #0
 800798c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	699b      	ldr	r3, [r3, #24]
 8007994:	f003 0302 	and.w	r3, r3, #2
 8007998:	2b02      	cmp	r3, #2
 800799a:	d103      	bne.n	80079a4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	2200      	movs	r2, #0
 80079a2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	699b      	ldr	r3, [r3, #24]
 80079aa:	f003 0301 	and.w	r3, r3, #1
 80079ae:	2b01      	cmp	r3, #1
 80079b0:	d007      	beq.n	80079c2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	699a      	ldr	r2, [r3, #24]
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f042 0201 	orr.w	r2, r2, #1
 80079c0:	619a      	str	r2, [r3, #24]
  }
}
 80079c2:	bf00      	nop
 80079c4:	370c      	adds	r7, #12
 80079c6:	46bd      	mov	sp, r7
 80079c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079cc:	4770      	bx	lr

080079ce <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80079ce:	b580      	push	{r7, lr}
 80079d0:	b084      	sub	sp, #16
 80079d2:	af00      	add	r7, sp, #0
 80079d4:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079da:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d003      	beq.n	80079ec <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079e8:	2200      	movs	r2, #0
 80079ea:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d003      	beq.n	80079fc <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079f8:	2200      	movs	r2, #0
 80079fa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80079fc:	68f8      	ldr	r0, [r7, #12]
 80079fe:	f7ff ff9b 	bl	8007938 <I2C_TreatErrorCallback>
}
 8007a02:	bf00      	nop
 8007a04:	3710      	adds	r7, #16
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bd80      	pop	{r7, pc}

08007a0a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007a0a:	b580      	push	{r7, lr}
 8007a0c:	b084      	sub	sp, #16
 8007a0e:	af00      	add	r7, sp, #0
 8007a10:	60f8      	str	r0, [r7, #12]
 8007a12:	60b9      	str	r1, [r7, #8]
 8007a14:	603b      	str	r3, [r7, #0]
 8007a16:	4613      	mov	r3, r2
 8007a18:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007a1a:	e022      	b.n	8007a62 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a22:	d01e      	beq.n	8007a62 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a24:	f7fe f864 	bl	8005af0 <HAL_GetTick>
 8007a28:	4602      	mov	r2, r0
 8007a2a:	69bb      	ldr	r3, [r7, #24]
 8007a2c:	1ad3      	subs	r3, r2, r3
 8007a2e:	683a      	ldr	r2, [r7, #0]
 8007a30:	429a      	cmp	r2, r3
 8007a32:	d302      	bcc.n	8007a3a <I2C_WaitOnFlagUntilTimeout+0x30>
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d113      	bne.n	8007a62 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a3e:	f043 0220 	orr.w	r2, r3, #32
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	2220      	movs	r2, #32
 8007a4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	2200      	movs	r2, #0
 8007a52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8007a5e:	2301      	movs	r3, #1
 8007a60:	e00f      	b.n	8007a82 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	699a      	ldr	r2, [r3, #24]
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	4013      	ands	r3, r2
 8007a6c:	68ba      	ldr	r2, [r7, #8]
 8007a6e:	429a      	cmp	r2, r3
 8007a70:	bf0c      	ite	eq
 8007a72:	2301      	moveq	r3, #1
 8007a74:	2300      	movne	r3, #0
 8007a76:	b2db      	uxtb	r3, r3
 8007a78:	461a      	mov	r2, r3
 8007a7a:	79fb      	ldrb	r3, [r7, #7]
 8007a7c:	429a      	cmp	r2, r3
 8007a7e:	d0cd      	beq.n	8007a1c <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007a80:	2300      	movs	r3, #0
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	3710      	adds	r7, #16
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}

08007a8a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007a8a:	b580      	push	{r7, lr}
 8007a8c:	b084      	sub	sp, #16
 8007a8e:	af00      	add	r7, sp, #0
 8007a90:	60f8      	str	r0, [r7, #12]
 8007a92:	60b9      	str	r1, [r7, #8]
 8007a94:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007a96:	e02c      	b.n	8007af2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a98:	687a      	ldr	r2, [r7, #4]
 8007a9a:	68b9      	ldr	r1, [r7, #8]
 8007a9c:	68f8      	ldr	r0, [r7, #12]
 8007a9e:	f000 f871 	bl	8007b84 <I2C_IsErrorOccurred>
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d001      	beq.n	8007aac <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	e02a      	b.n	8007b02 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ab2:	d01e      	beq.n	8007af2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ab4:	f7fe f81c 	bl	8005af0 <HAL_GetTick>
 8007ab8:	4602      	mov	r2, r0
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	1ad3      	subs	r3, r2, r3
 8007abe:	68ba      	ldr	r2, [r7, #8]
 8007ac0:	429a      	cmp	r2, r3
 8007ac2:	d302      	bcc.n	8007aca <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d113      	bne.n	8007af2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ace:	f043 0220 	orr.w	r2, r3, #32
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	2220      	movs	r2, #32
 8007ada:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007aee:	2301      	movs	r3, #1
 8007af0:	e007      	b.n	8007b02 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	699b      	ldr	r3, [r3, #24]
 8007af8:	f003 0302 	and.w	r3, r3, #2
 8007afc:	2b02      	cmp	r3, #2
 8007afe:	d1cb      	bne.n	8007a98 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007b00:	2300      	movs	r3, #0
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	3710      	adds	r7, #16
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd80      	pop	{r7, pc}

08007b0a <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007b0a:	b580      	push	{r7, lr}
 8007b0c:	b084      	sub	sp, #16
 8007b0e:	af00      	add	r7, sp, #0
 8007b10:	60f8      	str	r0, [r7, #12]
 8007b12:	60b9      	str	r1, [r7, #8]
 8007b14:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007b16:	e028      	b.n	8007b6a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007b18:	687a      	ldr	r2, [r7, #4]
 8007b1a:	68b9      	ldr	r1, [r7, #8]
 8007b1c:	68f8      	ldr	r0, [r7, #12]
 8007b1e:	f000 f831 	bl	8007b84 <I2C_IsErrorOccurred>
 8007b22:	4603      	mov	r3, r0
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d001      	beq.n	8007b2c <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007b28:	2301      	movs	r3, #1
 8007b2a:	e026      	b.n	8007b7a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b2c:	f7fd ffe0 	bl	8005af0 <HAL_GetTick>
 8007b30:	4602      	mov	r2, r0
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	1ad3      	subs	r3, r2, r3
 8007b36:	68ba      	ldr	r2, [r7, #8]
 8007b38:	429a      	cmp	r2, r3
 8007b3a:	d302      	bcc.n	8007b42 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d113      	bne.n	8007b6a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b46:	f043 0220 	orr.w	r2, r3, #32
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	2220      	movs	r2, #32
 8007b52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	2200      	movs	r2, #0
 8007b62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007b66:	2301      	movs	r3, #1
 8007b68:	e007      	b.n	8007b7a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	699b      	ldr	r3, [r3, #24]
 8007b70:	f003 0320 	and.w	r3, r3, #32
 8007b74:	2b20      	cmp	r3, #32
 8007b76:	d1cf      	bne.n	8007b18 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007b78:	2300      	movs	r3, #0
}
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	3710      	adds	r7, #16
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd80      	pop	{r7, pc}
	...

08007b84 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b08a      	sub	sp, #40	; 0x28
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	60f8      	str	r0, [r7, #12]
 8007b8c:	60b9      	str	r1, [r7, #8]
 8007b8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007b90:	2300      	movs	r3, #0
 8007b92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	699b      	ldr	r3, [r3, #24]
 8007b9c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007ba6:	69bb      	ldr	r3, [r7, #24]
 8007ba8:	f003 0310 	and.w	r3, r3, #16
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d075      	beq.n	8007c9c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	2210      	movs	r2, #16
 8007bb6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007bb8:	e056      	b.n	8007c68 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007bba:	68bb      	ldr	r3, [r7, #8]
 8007bbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007bc0:	d052      	beq.n	8007c68 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007bc2:	f7fd ff95 	bl	8005af0 <HAL_GetTick>
 8007bc6:	4602      	mov	r2, r0
 8007bc8:	69fb      	ldr	r3, [r7, #28]
 8007bca:	1ad3      	subs	r3, r2, r3
 8007bcc:	68ba      	ldr	r2, [r7, #8]
 8007bce:	429a      	cmp	r2, r3
 8007bd0:	d302      	bcc.n	8007bd8 <I2C_IsErrorOccurred+0x54>
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d147      	bne.n	8007c68 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	685b      	ldr	r3, [r3, #4]
 8007bde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007be2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007bea:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	699b      	ldr	r3, [r3, #24]
 8007bf2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007bf6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007bfa:	d12e      	bne.n	8007c5a <I2C_IsErrorOccurred+0xd6>
 8007bfc:	697b      	ldr	r3, [r7, #20]
 8007bfe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007c02:	d02a      	beq.n	8007c5a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8007c04:	7cfb      	ldrb	r3, [r7, #19]
 8007c06:	2b20      	cmp	r3, #32
 8007c08:	d027      	beq.n	8007c5a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	685a      	ldr	r2, [r3, #4]
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007c18:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007c1a:	f7fd ff69 	bl	8005af0 <HAL_GetTick>
 8007c1e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007c20:	e01b      	b.n	8007c5a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007c22:	f7fd ff65 	bl	8005af0 <HAL_GetTick>
 8007c26:	4602      	mov	r2, r0
 8007c28:	69fb      	ldr	r3, [r7, #28]
 8007c2a:	1ad3      	subs	r3, r2, r3
 8007c2c:	2b19      	cmp	r3, #25
 8007c2e:	d914      	bls.n	8007c5a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c34:	f043 0220 	orr.w	r2, r3, #32
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	2220      	movs	r2, #32
 8007c40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	2200      	movs	r2, #0
 8007c48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8007c54:	2301      	movs	r3, #1
 8007c56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	699b      	ldr	r3, [r3, #24]
 8007c60:	f003 0320 	and.w	r3, r3, #32
 8007c64:	2b20      	cmp	r3, #32
 8007c66:	d1dc      	bne.n	8007c22 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	699b      	ldr	r3, [r3, #24]
 8007c6e:	f003 0320 	and.w	r3, r3, #32
 8007c72:	2b20      	cmp	r3, #32
 8007c74:	d003      	beq.n	8007c7e <I2C_IsErrorOccurred+0xfa>
 8007c76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d09d      	beq.n	8007bba <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007c7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d103      	bne.n	8007c8e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	2220      	movs	r2, #32
 8007c8c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007c8e:	6a3b      	ldr	r3, [r7, #32]
 8007c90:	f043 0304 	orr.w	r3, r3, #4
 8007c94:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007c96:	2301      	movs	r3, #1
 8007c98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	699b      	ldr	r3, [r3, #24]
 8007ca2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007ca4:	69bb      	ldr	r3, [r7, #24]
 8007ca6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d00b      	beq.n	8007cc6 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007cae:	6a3b      	ldr	r3, [r7, #32]
 8007cb0:	f043 0301 	orr.w	r3, r3, #1
 8007cb4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007cbe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007cc0:	2301      	movs	r3, #1
 8007cc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007cc6:	69bb      	ldr	r3, [r7, #24]
 8007cc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d00b      	beq.n	8007ce8 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007cd0:	6a3b      	ldr	r3, [r7, #32]
 8007cd2:	f043 0308 	orr.w	r3, r3, #8
 8007cd6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007ce0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007ce8:	69bb      	ldr	r3, [r7, #24]
 8007cea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d00b      	beq.n	8007d0a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007cf2:	6a3b      	ldr	r3, [r7, #32]
 8007cf4:	f043 0302 	orr.w	r3, r3, #2
 8007cf8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d02:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007d04:	2301      	movs	r3, #1
 8007d06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8007d0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d01c      	beq.n	8007d4c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007d12:	68f8      	ldr	r0, [r7, #12]
 8007d14:	f7ff fe37 	bl	8007986 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	6859      	ldr	r1, [r3, #4]
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681a      	ldr	r2, [r3, #0]
 8007d22:	4b0d      	ldr	r3, [pc, #52]	; (8007d58 <I2C_IsErrorOccurred+0x1d4>)
 8007d24:	400b      	ands	r3, r1
 8007d26:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d2c:	6a3b      	ldr	r3, [r7, #32]
 8007d2e:	431a      	orrs	r2, r3
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	2220      	movs	r2, #32
 8007d38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	2200      	movs	r2, #0
 8007d40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	2200      	movs	r2, #0
 8007d48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8007d4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	3728      	adds	r7, #40	; 0x28
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}
 8007d58:	fe00e800 	.word	0xfe00e800

08007d5c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b087      	sub	sp, #28
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	60f8      	str	r0, [r7, #12]
 8007d64:	607b      	str	r3, [r7, #4]
 8007d66:	460b      	mov	r3, r1
 8007d68:	817b      	strh	r3, [r7, #10]
 8007d6a:	4613      	mov	r3, r2
 8007d6c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007d6e:	897b      	ldrh	r3, [r7, #10]
 8007d70:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007d74:	7a7b      	ldrb	r3, [r7, #9]
 8007d76:	041b      	lsls	r3, r3, #16
 8007d78:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007d7c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007d82:	6a3b      	ldr	r3, [r7, #32]
 8007d84:	4313      	orrs	r3, r2
 8007d86:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007d8a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	685a      	ldr	r2, [r3, #4]
 8007d92:	6a3b      	ldr	r3, [r7, #32]
 8007d94:	0d5b      	lsrs	r3, r3, #21
 8007d96:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007d9a:	4b08      	ldr	r3, [pc, #32]	; (8007dbc <I2C_TransferConfig+0x60>)
 8007d9c:	430b      	orrs	r3, r1
 8007d9e:	43db      	mvns	r3, r3
 8007da0:	ea02 0103 	and.w	r1, r2, r3
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	697a      	ldr	r2, [r7, #20]
 8007daa:	430a      	orrs	r2, r1
 8007dac:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007dae:	bf00      	nop
 8007db0:	371c      	adds	r7, #28
 8007db2:	46bd      	mov	sp, r7
 8007db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db8:	4770      	bx	lr
 8007dba:	bf00      	nop
 8007dbc:	03ff63ff 	.word	0x03ff63ff

08007dc0 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	b085      	sub	sp, #20
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
 8007dc8:	460b      	mov	r3, r1
 8007dca:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8007dcc:	2300      	movs	r3, #0
 8007dce:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007dd0:	887b      	ldrh	r3, [r7, #2]
 8007dd2:	f003 0301 	and.w	r3, r3, #1
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d00f      	beq.n	8007dfa <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8007de0:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007de8:	b2db      	uxtb	r3, r3
 8007dea:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007dee:	2b28      	cmp	r3, #40	; 0x28
 8007df0:	d003      	beq.n	8007dfa <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8007df8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007dfa:	887b      	ldrh	r3, [r7, #2]
 8007dfc:	f003 0302 	and.w	r3, r3, #2
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d00f      	beq.n	8007e24 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8007e0a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007e12:	b2db      	uxtb	r3, r3
 8007e14:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007e18:	2b28      	cmp	r3, #40	; 0x28
 8007e1a:	d003      	beq.n	8007e24 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8007e22:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007e24:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	da03      	bge.n	8007e34 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8007e32:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007e34:	887b      	ldrh	r3, [r7, #2]
 8007e36:	2b10      	cmp	r3, #16
 8007e38:	d103      	bne.n	8007e42 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8007e40:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007e42:	887b      	ldrh	r3, [r7, #2]
 8007e44:	2b20      	cmp	r3, #32
 8007e46:	d103      	bne.n	8007e50 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	f043 0320 	orr.w	r3, r3, #32
 8007e4e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007e50:	887b      	ldrh	r3, [r7, #2]
 8007e52:	2b40      	cmp	r3, #64	; 0x40
 8007e54:	d103      	bne.n	8007e5e <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e5c:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	6819      	ldr	r1, [r3, #0]
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	43da      	mvns	r2, r3
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	400a      	ands	r2, r1
 8007e6e:	601a      	str	r2, [r3, #0]
}
 8007e70:	bf00      	nop
 8007e72:	3714      	adds	r7, #20
 8007e74:	46bd      	mov	sp, r7
 8007e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7a:	4770      	bx	lr

08007e7c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	b083      	sub	sp, #12
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
 8007e84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007e8c:	b2db      	uxtb	r3, r3
 8007e8e:	2b20      	cmp	r3, #32
 8007e90:	d138      	bne.n	8007f04 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007e98:	2b01      	cmp	r3, #1
 8007e9a:	d101      	bne.n	8007ea0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007e9c:	2302      	movs	r3, #2
 8007e9e:	e032      	b.n	8007f06 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2201      	movs	r2, #1
 8007ea4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2224      	movs	r2, #36	; 0x24
 8007eac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	681a      	ldr	r2, [r3, #0]
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f022 0201 	bic.w	r2, r2, #1
 8007ebe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	681a      	ldr	r2, [r3, #0]
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007ece:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	6819      	ldr	r1, [r3, #0]
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	683a      	ldr	r2, [r7, #0]
 8007edc:	430a      	orrs	r2, r1
 8007ede:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	681a      	ldr	r2, [r3, #0]
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f042 0201 	orr.w	r2, r2, #1
 8007eee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2220      	movs	r2, #32
 8007ef4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2200      	movs	r2, #0
 8007efc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007f00:	2300      	movs	r3, #0
 8007f02:	e000      	b.n	8007f06 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007f04:	2302      	movs	r3, #2
  }
}
 8007f06:	4618      	mov	r0, r3
 8007f08:	370c      	adds	r7, #12
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f10:	4770      	bx	lr

08007f12 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007f12:	b480      	push	{r7}
 8007f14:	b085      	sub	sp, #20
 8007f16:	af00      	add	r7, sp, #0
 8007f18:	6078      	str	r0, [r7, #4]
 8007f1a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f22:	b2db      	uxtb	r3, r3
 8007f24:	2b20      	cmp	r3, #32
 8007f26:	d139      	bne.n	8007f9c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007f2e:	2b01      	cmp	r3, #1
 8007f30:	d101      	bne.n	8007f36 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007f32:	2302      	movs	r3, #2
 8007f34:	e033      	b.n	8007f9e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2201      	movs	r2, #1
 8007f3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2224      	movs	r2, #36	; 0x24
 8007f42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	681a      	ldr	r2, [r3, #0]
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f022 0201 	bic.w	r2, r2, #1
 8007f54:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007f64:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	021b      	lsls	r3, r3, #8
 8007f6a:	68fa      	ldr	r2, [r7, #12]
 8007f6c:	4313      	orrs	r3, r2
 8007f6e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	68fa      	ldr	r2, [r7, #12]
 8007f76:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	681a      	ldr	r2, [r3, #0]
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f042 0201 	orr.w	r2, r2, #1
 8007f86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2220      	movs	r2, #32
 8007f8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2200      	movs	r2, #0
 8007f94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007f98:	2300      	movs	r3, #0
 8007f9a:	e000      	b.n	8007f9e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007f9c:	2302      	movs	r3, #2
  }
}
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	3714      	adds	r7, #20
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa8:	4770      	bx	lr
	...

08007fac <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8007fac:	b480      	push	{r7}
 8007fae:	b085      	sub	sp, #20
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007fb4:	4b0b      	ldr	r3, [pc, #44]	; (8007fe4 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8007fb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fb8:	4a0a      	ldr	r2, [pc, #40]	; (8007fe4 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8007fba:	f043 0301 	orr.w	r3, r3, #1
 8007fbe:	6613      	str	r3, [r2, #96]	; 0x60
 8007fc0:	4b08      	ldr	r3, [pc, #32]	; (8007fe4 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8007fc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fc4:	f003 0301 	and.w	r3, r3, #1
 8007fc8:	60fb      	str	r3, [r7, #12]
 8007fca:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8007fcc:	4b06      	ldr	r3, [pc, #24]	; (8007fe8 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8007fce:	685a      	ldr	r2, [r3, #4]
 8007fd0:	4905      	ldr	r1, [pc, #20]	; (8007fe8 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	4313      	orrs	r3, r2
 8007fd6:	604b      	str	r3, [r1, #4]
}
 8007fd8:	bf00      	nop
 8007fda:	3714      	adds	r7, #20
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe2:	4770      	bx	lr
 8007fe4:	40021000 	.word	0x40021000
 8007fe8:	40010000 	.word	0x40010000

08007fec <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8007fec:	b480      	push	{r7}
 8007fee:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8007ff0:	4b04      	ldr	r3, [pc, #16]	; (8008004 <HAL_PWREx_GetVoltageRange+0x18>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008000:	4770      	bx	lr
 8008002:	bf00      	nop
 8008004:	40007000 	.word	0x40007000

08008008 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008008:	b480      	push	{r7}
 800800a:	b085      	sub	sp, #20
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008016:	d130      	bne.n	800807a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8008018:	4b23      	ldr	r3, [pc, #140]	; (80080a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008020:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008024:	d038      	beq.n	8008098 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008026:	4b20      	ldr	r3, [pc, #128]	; (80080a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800802e:	4a1e      	ldr	r2, [pc, #120]	; (80080a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008030:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008034:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008036:	4b1d      	ldr	r3, [pc, #116]	; (80080ac <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	2232      	movs	r2, #50	; 0x32
 800803c:	fb02 f303 	mul.w	r3, r2, r3
 8008040:	4a1b      	ldr	r2, [pc, #108]	; (80080b0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8008042:	fba2 2303 	umull	r2, r3, r2, r3
 8008046:	0c9b      	lsrs	r3, r3, #18
 8008048:	3301      	adds	r3, #1
 800804a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800804c:	e002      	b.n	8008054 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	3b01      	subs	r3, #1
 8008052:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008054:	4b14      	ldr	r3, [pc, #80]	; (80080a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008056:	695b      	ldr	r3, [r3, #20]
 8008058:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800805c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008060:	d102      	bne.n	8008068 <HAL_PWREx_ControlVoltageScaling+0x60>
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d1f2      	bne.n	800804e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008068:	4b0f      	ldr	r3, [pc, #60]	; (80080a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800806a:	695b      	ldr	r3, [r3, #20]
 800806c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008070:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008074:	d110      	bne.n	8008098 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8008076:	2303      	movs	r3, #3
 8008078:	e00f      	b.n	800809a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800807a:	4b0b      	ldr	r3, [pc, #44]	; (80080a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008082:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008086:	d007      	beq.n	8008098 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008088:	4b07      	ldr	r3, [pc, #28]	; (80080a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008090:	4a05      	ldr	r2, [pc, #20]	; (80080a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008092:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008096:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8008098:	2300      	movs	r3, #0
}
 800809a:	4618      	mov	r0, r3
 800809c:	3714      	adds	r7, #20
 800809e:	46bd      	mov	sp, r7
 80080a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a4:	4770      	bx	lr
 80080a6:	bf00      	nop
 80080a8:	40007000 	.word	0x40007000
 80080ac:	200001b8 	.word	0x200001b8
 80080b0:	431bde83 	.word	0x431bde83

080080b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b088      	sub	sp, #32
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d101      	bne.n	80080c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80080c2:	2301      	movs	r3, #1
 80080c4:	e3ca      	b.n	800885c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80080c6:	4b97      	ldr	r3, [pc, #604]	; (8008324 <HAL_RCC_OscConfig+0x270>)
 80080c8:	689b      	ldr	r3, [r3, #8]
 80080ca:	f003 030c 	and.w	r3, r3, #12
 80080ce:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80080d0:	4b94      	ldr	r3, [pc, #592]	; (8008324 <HAL_RCC_OscConfig+0x270>)
 80080d2:	68db      	ldr	r3, [r3, #12]
 80080d4:	f003 0303 	and.w	r3, r3, #3
 80080d8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f003 0310 	and.w	r3, r3, #16
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	f000 80e4 	beq.w	80082b0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80080e8:	69bb      	ldr	r3, [r7, #24]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d007      	beq.n	80080fe <HAL_RCC_OscConfig+0x4a>
 80080ee:	69bb      	ldr	r3, [r7, #24]
 80080f0:	2b0c      	cmp	r3, #12
 80080f2:	f040 808b 	bne.w	800820c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80080f6:	697b      	ldr	r3, [r7, #20]
 80080f8:	2b01      	cmp	r3, #1
 80080fa:	f040 8087 	bne.w	800820c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80080fe:	4b89      	ldr	r3, [pc, #548]	; (8008324 <HAL_RCC_OscConfig+0x270>)
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f003 0302 	and.w	r3, r3, #2
 8008106:	2b00      	cmp	r3, #0
 8008108:	d005      	beq.n	8008116 <HAL_RCC_OscConfig+0x62>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	699b      	ldr	r3, [r3, #24]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d101      	bne.n	8008116 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8008112:	2301      	movs	r3, #1
 8008114:	e3a2      	b.n	800885c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6a1a      	ldr	r2, [r3, #32]
 800811a:	4b82      	ldr	r3, [pc, #520]	; (8008324 <HAL_RCC_OscConfig+0x270>)
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f003 0308 	and.w	r3, r3, #8
 8008122:	2b00      	cmp	r3, #0
 8008124:	d004      	beq.n	8008130 <HAL_RCC_OscConfig+0x7c>
 8008126:	4b7f      	ldr	r3, [pc, #508]	; (8008324 <HAL_RCC_OscConfig+0x270>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800812e:	e005      	b.n	800813c <HAL_RCC_OscConfig+0x88>
 8008130:	4b7c      	ldr	r3, [pc, #496]	; (8008324 <HAL_RCC_OscConfig+0x270>)
 8008132:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008136:	091b      	lsrs	r3, r3, #4
 8008138:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800813c:	4293      	cmp	r3, r2
 800813e:	d223      	bcs.n	8008188 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6a1b      	ldr	r3, [r3, #32]
 8008144:	4618      	mov	r0, r3
 8008146:	f000 fd55 	bl	8008bf4 <RCC_SetFlashLatencyFromMSIRange>
 800814a:	4603      	mov	r3, r0
 800814c:	2b00      	cmp	r3, #0
 800814e:	d001      	beq.n	8008154 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8008150:	2301      	movs	r3, #1
 8008152:	e383      	b.n	800885c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008154:	4b73      	ldr	r3, [pc, #460]	; (8008324 <HAL_RCC_OscConfig+0x270>)
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	4a72      	ldr	r2, [pc, #456]	; (8008324 <HAL_RCC_OscConfig+0x270>)
 800815a:	f043 0308 	orr.w	r3, r3, #8
 800815e:	6013      	str	r3, [r2, #0]
 8008160:	4b70      	ldr	r3, [pc, #448]	; (8008324 <HAL_RCC_OscConfig+0x270>)
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6a1b      	ldr	r3, [r3, #32]
 800816c:	496d      	ldr	r1, [pc, #436]	; (8008324 <HAL_RCC_OscConfig+0x270>)
 800816e:	4313      	orrs	r3, r2
 8008170:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008172:	4b6c      	ldr	r3, [pc, #432]	; (8008324 <HAL_RCC_OscConfig+0x270>)
 8008174:	685b      	ldr	r3, [r3, #4]
 8008176:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	69db      	ldr	r3, [r3, #28]
 800817e:	021b      	lsls	r3, r3, #8
 8008180:	4968      	ldr	r1, [pc, #416]	; (8008324 <HAL_RCC_OscConfig+0x270>)
 8008182:	4313      	orrs	r3, r2
 8008184:	604b      	str	r3, [r1, #4]
 8008186:	e025      	b.n	80081d4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008188:	4b66      	ldr	r3, [pc, #408]	; (8008324 <HAL_RCC_OscConfig+0x270>)
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	4a65      	ldr	r2, [pc, #404]	; (8008324 <HAL_RCC_OscConfig+0x270>)
 800818e:	f043 0308 	orr.w	r3, r3, #8
 8008192:	6013      	str	r3, [r2, #0]
 8008194:	4b63      	ldr	r3, [pc, #396]	; (8008324 <HAL_RCC_OscConfig+0x270>)
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6a1b      	ldr	r3, [r3, #32]
 80081a0:	4960      	ldr	r1, [pc, #384]	; (8008324 <HAL_RCC_OscConfig+0x270>)
 80081a2:	4313      	orrs	r3, r2
 80081a4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80081a6:	4b5f      	ldr	r3, [pc, #380]	; (8008324 <HAL_RCC_OscConfig+0x270>)
 80081a8:	685b      	ldr	r3, [r3, #4]
 80081aa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	69db      	ldr	r3, [r3, #28]
 80081b2:	021b      	lsls	r3, r3, #8
 80081b4:	495b      	ldr	r1, [pc, #364]	; (8008324 <HAL_RCC_OscConfig+0x270>)
 80081b6:	4313      	orrs	r3, r2
 80081b8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80081ba:	69bb      	ldr	r3, [r7, #24]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d109      	bne.n	80081d4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6a1b      	ldr	r3, [r3, #32]
 80081c4:	4618      	mov	r0, r3
 80081c6:	f000 fd15 	bl	8008bf4 <RCC_SetFlashLatencyFromMSIRange>
 80081ca:	4603      	mov	r3, r0
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d001      	beq.n	80081d4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80081d0:	2301      	movs	r3, #1
 80081d2:	e343      	b.n	800885c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80081d4:	f000 fc4a 	bl	8008a6c <HAL_RCC_GetSysClockFreq>
 80081d8:	4602      	mov	r2, r0
 80081da:	4b52      	ldr	r3, [pc, #328]	; (8008324 <HAL_RCC_OscConfig+0x270>)
 80081dc:	689b      	ldr	r3, [r3, #8]
 80081de:	091b      	lsrs	r3, r3, #4
 80081e0:	f003 030f 	and.w	r3, r3, #15
 80081e4:	4950      	ldr	r1, [pc, #320]	; (8008328 <HAL_RCC_OscConfig+0x274>)
 80081e6:	5ccb      	ldrb	r3, [r1, r3]
 80081e8:	f003 031f 	and.w	r3, r3, #31
 80081ec:	fa22 f303 	lsr.w	r3, r2, r3
 80081f0:	4a4e      	ldr	r2, [pc, #312]	; (800832c <HAL_RCC_OscConfig+0x278>)
 80081f2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80081f4:	4b4e      	ldr	r3, [pc, #312]	; (8008330 <HAL_RCC_OscConfig+0x27c>)
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	4618      	mov	r0, r3
 80081fa:	f7fd fc29 	bl	8005a50 <HAL_InitTick>
 80081fe:	4603      	mov	r3, r0
 8008200:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8008202:	7bfb      	ldrb	r3, [r7, #15]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d052      	beq.n	80082ae <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8008208:	7bfb      	ldrb	r3, [r7, #15]
 800820a:	e327      	b.n	800885c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	699b      	ldr	r3, [r3, #24]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d032      	beq.n	800827a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8008214:	4b43      	ldr	r3, [pc, #268]	; (8008324 <HAL_RCC_OscConfig+0x270>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	4a42      	ldr	r2, [pc, #264]	; (8008324 <HAL_RCC_OscConfig+0x270>)
 800821a:	f043 0301 	orr.w	r3, r3, #1
 800821e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008220:	f7fd fc66 	bl	8005af0 <HAL_GetTick>
 8008224:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008226:	e008      	b.n	800823a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008228:	f7fd fc62 	bl	8005af0 <HAL_GetTick>
 800822c:	4602      	mov	r2, r0
 800822e:	693b      	ldr	r3, [r7, #16]
 8008230:	1ad3      	subs	r3, r2, r3
 8008232:	2b02      	cmp	r3, #2
 8008234:	d901      	bls.n	800823a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8008236:	2303      	movs	r3, #3
 8008238:	e310      	b.n	800885c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800823a:	4b3a      	ldr	r3, [pc, #232]	; (8008324 <HAL_RCC_OscConfig+0x270>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f003 0302 	and.w	r3, r3, #2
 8008242:	2b00      	cmp	r3, #0
 8008244:	d0f0      	beq.n	8008228 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008246:	4b37      	ldr	r3, [pc, #220]	; (8008324 <HAL_RCC_OscConfig+0x270>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	4a36      	ldr	r2, [pc, #216]	; (8008324 <HAL_RCC_OscConfig+0x270>)
 800824c:	f043 0308 	orr.w	r3, r3, #8
 8008250:	6013      	str	r3, [r2, #0]
 8008252:	4b34      	ldr	r3, [pc, #208]	; (8008324 <HAL_RCC_OscConfig+0x270>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	6a1b      	ldr	r3, [r3, #32]
 800825e:	4931      	ldr	r1, [pc, #196]	; (8008324 <HAL_RCC_OscConfig+0x270>)
 8008260:	4313      	orrs	r3, r2
 8008262:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008264:	4b2f      	ldr	r3, [pc, #188]	; (8008324 <HAL_RCC_OscConfig+0x270>)
 8008266:	685b      	ldr	r3, [r3, #4]
 8008268:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	69db      	ldr	r3, [r3, #28]
 8008270:	021b      	lsls	r3, r3, #8
 8008272:	492c      	ldr	r1, [pc, #176]	; (8008324 <HAL_RCC_OscConfig+0x270>)
 8008274:	4313      	orrs	r3, r2
 8008276:	604b      	str	r3, [r1, #4]
 8008278:	e01a      	b.n	80082b0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800827a:	4b2a      	ldr	r3, [pc, #168]	; (8008324 <HAL_RCC_OscConfig+0x270>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	4a29      	ldr	r2, [pc, #164]	; (8008324 <HAL_RCC_OscConfig+0x270>)
 8008280:	f023 0301 	bic.w	r3, r3, #1
 8008284:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008286:	f7fd fc33 	bl	8005af0 <HAL_GetTick>
 800828a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800828c:	e008      	b.n	80082a0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800828e:	f7fd fc2f 	bl	8005af0 <HAL_GetTick>
 8008292:	4602      	mov	r2, r0
 8008294:	693b      	ldr	r3, [r7, #16]
 8008296:	1ad3      	subs	r3, r2, r3
 8008298:	2b02      	cmp	r3, #2
 800829a:	d901      	bls.n	80082a0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800829c:	2303      	movs	r3, #3
 800829e:	e2dd      	b.n	800885c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80082a0:	4b20      	ldr	r3, [pc, #128]	; (8008324 <HAL_RCC_OscConfig+0x270>)
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f003 0302 	and.w	r3, r3, #2
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d1f0      	bne.n	800828e <HAL_RCC_OscConfig+0x1da>
 80082ac:	e000      	b.n	80082b0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80082ae:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f003 0301 	and.w	r3, r3, #1
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d074      	beq.n	80083a6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80082bc:	69bb      	ldr	r3, [r7, #24]
 80082be:	2b08      	cmp	r3, #8
 80082c0:	d005      	beq.n	80082ce <HAL_RCC_OscConfig+0x21a>
 80082c2:	69bb      	ldr	r3, [r7, #24]
 80082c4:	2b0c      	cmp	r3, #12
 80082c6:	d10e      	bne.n	80082e6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80082c8:	697b      	ldr	r3, [r7, #20]
 80082ca:	2b03      	cmp	r3, #3
 80082cc:	d10b      	bne.n	80082e6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80082ce:	4b15      	ldr	r3, [pc, #84]	; (8008324 <HAL_RCC_OscConfig+0x270>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d064      	beq.n	80083a4 <HAL_RCC_OscConfig+0x2f0>
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	685b      	ldr	r3, [r3, #4]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d160      	bne.n	80083a4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80082e2:	2301      	movs	r3, #1
 80082e4:	e2ba      	b.n	800885c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	685b      	ldr	r3, [r3, #4]
 80082ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082ee:	d106      	bne.n	80082fe <HAL_RCC_OscConfig+0x24a>
 80082f0:	4b0c      	ldr	r3, [pc, #48]	; (8008324 <HAL_RCC_OscConfig+0x270>)
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	4a0b      	ldr	r2, [pc, #44]	; (8008324 <HAL_RCC_OscConfig+0x270>)
 80082f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80082fa:	6013      	str	r3, [r2, #0]
 80082fc:	e026      	b.n	800834c <HAL_RCC_OscConfig+0x298>
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	685b      	ldr	r3, [r3, #4]
 8008302:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008306:	d115      	bne.n	8008334 <HAL_RCC_OscConfig+0x280>
 8008308:	4b06      	ldr	r3, [pc, #24]	; (8008324 <HAL_RCC_OscConfig+0x270>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	4a05      	ldr	r2, [pc, #20]	; (8008324 <HAL_RCC_OscConfig+0x270>)
 800830e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008312:	6013      	str	r3, [r2, #0]
 8008314:	4b03      	ldr	r3, [pc, #12]	; (8008324 <HAL_RCC_OscConfig+0x270>)
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	4a02      	ldr	r2, [pc, #8]	; (8008324 <HAL_RCC_OscConfig+0x270>)
 800831a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800831e:	6013      	str	r3, [r2, #0]
 8008320:	e014      	b.n	800834c <HAL_RCC_OscConfig+0x298>
 8008322:	bf00      	nop
 8008324:	40021000 	.word	0x40021000
 8008328:	08012e0c 	.word	0x08012e0c
 800832c:	200001b8 	.word	0x200001b8
 8008330:	200001e8 	.word	0x200001e8
 8008334:	4ba0      	ldr	r3, [pc, #640]	; (80085b8 <HAL_RCC_OscConfig+0x504>)
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	4a9f      	ldr	r2, [pc, #636]	; (80085b8 <HAL_RCC_OscConfig+0x504>)
 800833a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800833e:	6013      	str	r3, [r2, #0]
 8008340:	4b9d      	ldr	r3, [pc, #628]	; (80085b8 <HAL_RCC_OscConfig+0x504>)
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	4a9c      	ldr	r2, [pc, #624]	; (80085b8 <HAL_RCC_OscConfig+0x504>)
 8008346:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800834a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	685b      	ldr	r3, [r3, #4]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d013      	beq.n	800837c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008354:	f7fd fbcc 	bl	8005af0 <HAL_GetTick>
 8008358:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800835a:	e008      	b.n	800836e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800835c:	f7fd fbc8 	bl	8005af0 <HAL_GetTick>
 8008360:	4602      	mov	r2, r0
 8008362:	693b      	ldr	r3, [r7, #16]
 8008364:	1ad3      	subs	r3, r2, r3
 8008366:	2b64      	cmp	r3, #100	; 0x64
 8008368:	d901      	bls.n	800836e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800836a:	2303      	movs	r3, #3
 800836c:	e276      	b.n	800885c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800836e:	4b92      	ldr	r3, [pc, #584]	; (80085b8 <HAL_RCC_OscConfig+0x504>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008376:	2b00      	cmp	r3, #0
 8008378:	d0f0      	beq.n	800835c <HAL_RCC_OscConfig+0x2a8>
 800837a:	e014      	b.n	80083a6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800837c:	f7fd fbb8 	bl	8005af0 <HAL_GetTick>
 8008380:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008382:	e008      	b.n	8008396 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008384:	f7fd fbb4 	bl	8005af0 <HAL_GetTick>
 8008388:	4602      	mov	r2, r0
 800838a:	693b      	ldr	r3, [r7, #16]
 800838c:	1ad3      	subs	r3, r2, r3
 800838e:	2b64      	cmp	r3, #100	; 0x64
 8008390:	d901      	bls.n	8008396 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8008392:	2303      	movs	r3, #3
 8008394:	e262      	b.n	800885c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008396:	4b88      	ldr	r3, [pc, #544]	; (80085b8 <HAL_RCC_OscConfig+0x504>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d1f0      	bne.n	8008384 <HAL_RCC_OscConfig+0x2d0>
 80083a2:	e000      	b.n	80083a6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80083a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f003 0302 	and.w	r3, r3, #2
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d060      	beq.n	8008474 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80083b2:	69bb      	ldr	r3, [r7, #24]
 80083b4:	2b04      	cmp	r3, #4
 80083b6:	d005      	beq.n	80083c4 <HAL_RCC_OscConfig+0x310>
 80083b8:	69bb      	ldr	r3, [r7, #24]
 80083ba:	2b0c      	cmp	r3, #12
 80083bc:	d119      	bne.n	80083f2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80083be:	697b      	ldr	r3, [r7, #20]
 80083c0:	2b02      	cmp	r3, #2
 80083c2:	d116      	bne.n	80083f2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80083c4:	4b7c      	ldr	r3, [pc, #496]	; (80085b8 <HAL_RCC_OscConfig+0x504>)
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d005      	beq.n	80083dc <HAL_RCC_OscConfig+0x328>
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	68db      	ldr	r3, [r3, #12]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d101      	bne.n	80083dc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80083d8:	2301      	movs	r3, #1
 80083da:	e23f      	b.n	800885c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80083dc:	4b76      	ldr	r3, [pc, #472]	; (80085b8 <HAL_RCC_OscConfig+0x504>)
 80083de:	685b      	ldr	r3, [r3, #4]
 80083e0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	691b      	ldr	r3, [r3, #16]
 80083e8:	061b      	lsls	r3, r3, #24
 80083ea:	4973      	ldr	r1, [pc, #460]	; (80085b8 <HAL_RCC_OscConfig+0x504>)
 80083ec:	4313      	orrs	r3, r2
 80083ee:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80083f0:	e040      	b.n	8008474 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	68db      	ldr	r3, [r3, #12]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d023      	beq.n	8008442 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80083fa:	4b6f      	ldr	r3, [pc, #444]	; (80085b8 <HAL_RCC_OscConfig+0x504>)
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	4a6e      	ldr	r2, [pc, #440]	; (80085b8 <HAL_RCC_OscConfig+0x504>)
 8008400:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008404:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008406:	f7fd fb73 	bl	8005af0 <HAL_GetTick>
 800840a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800840c:	e008      	b.n	8008420 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800840e:	f7fd fb6f 	bl	8005af0 <HAL_GetTick>
 8008412:	4602      	mov	r2, r0
 8008414:	693b      	ldr	r3, [r7, #16]
 8008416:	1ad3      	subs	r3, r2, r3
 8008418:	2b02      	cmp	r3, #2
 800841a:	d901      	bls.n	8008420 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800841c:	2303      	movs	r3, #3
 800841e:	e21d      	b.n	800885c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008420:	4b65      	ldr	r3, [pc, #404]	; (80085b8 <HAL_RCC_OscConfig+0x504>)
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008428:	2b00      	cmp	r3, #0
 800842a:	d0f0      	beq.n	800840e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800842c:	4b62      	ldr	r3, [pc, #392]	; (80085b8 <HAL_RCC_OscConfig+0x504>)
 800842e:	685b      	ldr	r3, [r3, #4]
 8008430:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	691b      	ldr	r3, [r3, #16]
 8008438:	061b      	lsls	r3, r3, #24
 800843a:	495f      	ldr	r1, [pc, #380]	; (80085b8 <HAL_RCC_OscConfig+0x504>)
 800843c:	4313      	orrs	r3, r2
 800843e:	604b      	str	r3, [r1, #4]
 8008440:	e018      	b.n	8008474 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008442:	4b5d      	ldr	r3, [pc, #372]	; (80085b8 <HAL_RCC_OscConfig+0x504>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	4a5c      	ldr	r2, [pc, #368]	; (80085b8 <HAL_RCC_OscConfig+0x504>)
 8008448:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800844c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800844e:	f7fd fb4f 	bl	8005af0 <HAL_GetTick>
 8008452:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008454:	e008      	b.n	8008468 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008456:	f7fd fb4b 	bl	8005af0 <HAL_GetTick>
 800845a:	4602      	mov	r2, r0
 800845c:	693b      	ldr	r3, [r7, #16]
 800845e:	1ad3      	subs	r3, r2, r3
 8008460:	2b02      	cmp	r3, #2
 8008462:	d901      	bls.n	8008468 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8008464:	2303      	movs	r3, #3
 8008466:	e1f9      	b.n	800885c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008468:	4b53      	ldr	r3, [pc, #332]	; (80085b8 <HAL_RCC_OscConfig+0x504>)
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008470:	2b00      	cmp	r3, #0
 8008472:	d1f0      	bne.n	8008456 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f003 0308 	and.w	r3, r3, #8
 800847c:	2b00      	cmp	r3, #0
 800847e:	d03c      	beq.n	80084fa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	695b      	ldr	r3, [r3, #20]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d01c      	beq.n	80084c2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008488:	4b4b      	ldr	r3, [pc, #300]	; (80085b8 <HAL_RCC_OscConfig+0x504>)
 800848a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800848e:	4a4a      	ldr	r2, [pc, #296]	; (80085b8 <HAL_RCC_OscConfig+0x504>)
 8008490:	f043 0301 	orr.w	r3, r3, #1
 8008494:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008498:	f7fd fb2a 	bl	8005af0 <HAL_GetTick>
 800849c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800849e:	e008      	b.n	80084b2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80084a0:	f7fd fb26 	bl	8005af0 <HAL_GetTick>
 80084a4:	4602      	mov	r2, r0
 80084a6:	693b      	ldr	r3, [r7, #16]
 80084a8:	1ad3      	subs	r3, r2, r3
 80084aa:	2b02      	cmp	r3, #2
 80084ac:	d901      	bls.n	80084b2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80084ae:	2303      	movs	r3, #3
 80084b0:	e1d4      	b.n	800885c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80084b2:	4b41      	ldr	r3, [pc, #260]	; (80085b8 <HAL_RCC_OscConfig+0x504>)
 80084b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80084b8:	f003 0302 	and.w	r3, r3, #2
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d0ef      	beq.n	80084a0 <HAL_RCC_OscConfig+0x3ec>
 80084c0:	e01b      	b.n	80084fa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80084c2:	4b3d      	ldr	r3, [pc, #244]	; (80085b8 <HAL_RCC_OscConfig+0x504>)
 80084c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80084c8:	4a3b      	ldr	r2, [pc, #236]	; (80085b8 <HAL_RCC_OscConfig+0x504>)
 80084ca:	f023 0301 	bic.w	r3, r3, #1
 80084ce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80084d2:	f7fd fb0d 	bl	8005af0 <HAL_GetTick>
 80084d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80084d8:	e008      	b.n	80084ec <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80084da:	f7fd fb09 	bl	8005af0 <HAL_GetTick>
 80084de:	4602      	mov	r2, r0
 80084e0:	693b      	ldr	r3, [r7, #16]
 80084e2:	1ad3      	subs	r3, r2, r3
 80084e4:	2b02      	cmp	r3, #2
 80084e6:	d901      	bls.n	80084ec <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80084e8:	2303      	movs	r3, #3
 80084ea:	e1b7      	b.n	800885c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80084ec:	4b32      	ldr	r3, [pc, #200]	; (80085b8 <HAL_RCC_OscConfig+0x504>)
 80084ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80084f2:	f003 0302 	and.w	r3, r3, #2
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d1ef      	bne.n	80084da <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f003 0304 	and.w	r3, r3, #4
 8008502:	2b00      	cmp	r3, #0
 8008504:	f000 80a6 	beq.w	8008654 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008508:	2300      	movs	r3, #0
 800850a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800850c:	4b2a      	ldr	r3, [pc, #168]	; (80085b8 <HAL_RCC_OscConfig+0x504>)
 800850e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008510:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008514:	2b00      	cmp	r3, #0
 8008516:	d10d      	bne.n	8008534 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008518:	4b27      	ldr	r3, [pc, #156]	; (80085b8 <HAL_RCC_OscConfig+0x504>)
 800851a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800851c:	4a26      	ldr	r2, [pc, #152]	; (80085b8 <HAL_RCC_OscConfig+0x504>)
 800851e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008522:	6593      	str	r3, [r2, #88]	; 0x58
 8008524:	4b24      	ldr	r3, [pc, #144]	; (80085b8 <HAL_RCC_OscConfig+0x504>)
 8008526:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008528:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800852c:	60bb      	str	r3, [r7, #8]
 800852e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008530:	2301      	movs	r3, #1
 8008532:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008534:	4b21      	ldr	r3, [pc, #132]	; (80085bc <HAL_RCC_OscConfig+0x508>)
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800853c:	2b00      	cmp	r3, #0
 800853e:	d118      	bne.n	8008572 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008540:	4b1e      	ldr	r3, [pc, #120]	; (80085bc <HAL_RCC_OscConfig+0x508>)
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	4a1d      	ldr	r2, [pc, #116]	; (80085bc <HAL_RCC_OscConfig+0x508>)
 8008546:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800854a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800854c:	f7fd fad0 	bl	8005af0 <HAL_GetTick>
 8008550:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008552:	e008      	b.n	8008566 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008554:	f7fd facc 	bl	8005af0 <HAL_GetTick>
 8008558:	4602      	mov	r2, r0
 800855a:	693b      	ldr	r3, [r7, #16]
 800855c:	1ad3      	subs	r3, r2, r3
 800855e:	2b02      	cmp	r3, #2
 8008560:	d901      	bls.n	8008566 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8008562:	2303      	movs	r3, #3
 8008564:	e17a      	b.n	800885c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008566:	4b15      	ldr	r3, [pc, #84]	; (80085bc <HAL_RCC_OscConfig+0x508>)
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800856e:	2b00      	cmp	r3, #0
 8008570:	d0f0      	beq.n	8008554 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	689b      	ldr	r3, [r3, #8]
 8008576:	2b01      	cmp	r3, #1
 8008578:	d108      	bne.n	800858c <HAL_RCC_OscConfig+0x4d8>
 800857a:	4b0f      	ldr	r3, [pc, #60]	; (80085b8 <HAL_RCC_OscConfig+0x504>)
 800857c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008580:	4a0d      	ldr	r2, [pc, #52]	; (80085b8 <HAL_RCC_OscConfig+0x504>)
 8008582:	f043 0301 	orr.w	r3, r3, #1
 8008586:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800858a:	e029      	b.n	80085e0 <HAL_RCC_OscConfig+0x52c>
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	689b      	ldr	r3, [r3, #8]
 8008590:	2b05      	cmp	r3, #5
 8008592:	d115      	bne.n	80085c0 <HAL_RCC_OscConfig+0x50c>
 8008594:	4b08      	ldr	r3, [pc, #32]	; (80085b8 <HAL_RCC_OscConfig+0x504>)
 8008596:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800859a:	4a07      	ldr	r2, [pc, #28]	; (80085b8 <HAL_RCC_OscConfig+0x504>)
 800859c:	f043 0304 	orr.w	r3, r3, #4
 80085a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80085a4:	4b04      	ldr	r3, [pc, #16]	; (80085b8 <HAL_RCC_OscConfig+0x504>)
 80085a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085aa:	4a03      	ldr	r2, [pc, #12]	; (80085b8 <HAL_RCC_OscConfig+0x504>)
 80085ac:	f043 0301 	orr.w	r3, r3, #1
 80085b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80085b4:	e014      	b.n	80085e0 <HAL_RCC_OscConfig+0x52c>
 80085b6:	bf00      	nop
 80085b8:	40021000 	.word	0x40021000
 80085bc:	40007000 	.word	0x40007000
 80085c0:	4b9c      	ldr	r3, [pc, #624]	; (8008834 <HAL_RCC_OscConfig+0x780>)
 80085c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085c6:	4a9b      	ldr	r2, [pc, #620]	; (8008834 <HAL_RCC_OscConfig+0x780>)
 80085c8:	f023 0301 	bic.w	r3, r3, #1
 80085cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80085d0:	4b98      	ldr	r3, [pc, #608]	; (8008834 <HAL_RCC_OscConfig+0x780>)
 80085d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085d6:	4a97      	ldr	r2, [pc, #604]	; (8008834 <HAL_RCC_OscConfig+0x780>)
 80085d8:	f023 0304 	bic.w	r3, r3, #4
 80085dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	689b      	ldr	r3, [r3, #8]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d016      	beq.n	8008616 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80085e8:	f7fd fa82 	bl	8005af0 <HAL_GetTick>
 80085ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80085ee:	e00a      	b.n	8008606 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80085f0:	f7fd fa7e 	bl	8005af0 <HAL_GetTick>
 80085f4:	4602      	mov	r2, r0
 80085f6:	693b      	ldr	r3, [r7, #16]
 80085f8:	1ad3      	subs	r3, r2, r3
 80085fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80085fe:	4293      	cmp	r3, r2
 8008600:	d901      	bls.n	8008606 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8008602:	2303      	movs	r3, #3
 8008604:	e12a      	b.n	800885c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008606:	4b8b      	ldr	r3, [pc, #556]	; (8008834 <HAL_RCC_OscConfig+0x780>)
 8008608:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800860c:	f003 0302 	and.w	r3, r3, #2
 8008610:	2b00      	cmp	r3, #0
 8008612:	d0ed      	beq.n	80085f0 <HAL_RCC_OscConfig+0x53c>
 8008614:	e015      	b.n	8008642 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008616:	f7fd fa6b 	bl	8005af0 <HAL_GetTick>
 800861a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800861c:	e00a      	b.n	8008634 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800861e:	f7fd fa67 	bl	8005af0 <HAL_GetTick>
 8008622:	4602      	mov	r2, r0
 8008624:	693b      	ldr	r3, [r7, #16]
 8008626:	1ad3      	subs	r3, r2, r3
 8008628:	f241 3288 	movw	r2, #5000	; 0x1388
 800862c:	4293      	cmp	r3, r2
 800862e:	d901      	bls.n	8008634 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8008630:	2303      	movs	r3, #3
 8008632:	e113      	b.n	800885c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008634:	4b7f      	ldr	r3, [pc, #508]	; (8008834 <HAL_RCC_OscConfig+0x780>)
 8008636:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800863a:	f003 0302 	and.w	r3, r3, #2
 800863e:	2b00      	cmp	r3, #0
 8008640:	d1ed      	bne.n	800861e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008642:	7ffb      	ldrb	r3, [r7, #31]
 8008644:	2b01      	cmp	r3, #1
 8008646:	d105      	bne.n	8008654 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008648:	4b7a      	ldr	r3, [pc, #488]	; (8008834 <HAL_RCC_OscConfig+0x780>)
 800864a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800864c:	4a79      	ldr	r2, [pc, #484]	; (8008834 <HAL_RCC_OscConfig+0x780>)
 800864e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008652:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008658:	2b00      	cmp	r3, #0
 800865a:	f000 80fe 	beq.w	800885a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008662:	2b02      	cmp	r3, #2
 8008664:	f040 80d0 	bne.w	8008808 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8008668:	4b72      	ldr	r3, [pc, #456]	; (8008834 <HAL_RCC_OscConfig+0x780>)
 800866a:	68db      	ldr	r3, [r3, #12]
 800866c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800866e:	697b      	ldr	r3, [r7, #20]
 8008670:	f003 0203 	and.w	r2, r3, #3
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008678:	429a      	cmp	r2, r3
 800867a:	d130      	bne.n	80086de <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800867c:	697b      	ldr	r3, [r7, #20]
 800867e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008686:	3b01      	subs	r3, #1
 8008688:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800868a:	429a      	cmp	r2, r3
 800868c:	d127      	bne.n	80086de <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800868e:	697b      	ldr	r3, [r7, #20]
 8008690:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008698:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800869a:	429a      	cmp	r2, r3
 800869c:	d11f      	bne.n	80086de <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800869e:	697b      	ldr	r3, [r7, #20]
 80086a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086a4:	687a      	ldr	r2, [r7, #4]
 80086a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80086a8:	2a07      	cmp	r2, #7
 80086aa:	bf14      	ite	ne
 80086ac:	2201      	movne	r2, #1
 80086ae:	2200      	moveq	r2, #0
 80086b0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80086b2:	4293      	cmp	r3, r2
 80086b4:	d113      	bne.n	80086de <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80086b6:	697b      	ldr	r3, [r7, #20]
 80086b8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086c0:	085b      	lsrs	r3, r3, #1
 80086c2:	3b01      	subs	r3, #1
 80086c4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80086c6:	429a      	cmp	r2, r3
 80086c8:	d109      	bne.n	80086de <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80086ca:	697b      	ldr	r3, [r7, #20]
 80086cc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086d4:	085b      	lsrs	r3, r3, #1
 80086d6:	3b01      	subs	r3, #1
 80086d8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80086da:	429a      	cmp	r2, r3
 80086dc:	d06e      	beq.n	80087bc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80086de:	69bb      	ldr	r3, [r7, #24]
 80086e0:	2b0c      	cmp	r3, #12
 80086e2:	d069      	beq.n	80087b8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80086e4:	4b53      	ldr	r3, [pc, #332]	; (8008834 <HAL_RCC_OscConfig+0x780>)
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d105      	bne.n	80086fc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80086f0:	4b50      	ldr	r3, [pc, #320]	; (8008834 <HAL_RCC_OscConfig+0x780>)
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d001      	beq.n	8008700 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80086fc:	2301      	movs	r3, #1
 80086fe:	e0ad      	b.n	800885c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8008700:	4b4c      	ldr	r3, [pc, #304]	; (8008834 <HAL_RCC_OscConfig+0x780>)
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	4a4b      	ldr	r2, [pc, #300]	; (8008834 <HAL_RCC_OscConfig+0x780>)
 8008706:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800870a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800870c:	f7fd f9f0 	bl	8005af0 <HAL_GetTick>
 8008710:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008712:	e008      	b.n	8008726 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008714:	f7fd f9ec 	bl	8005af0 <HAL_GetTick>
 8008718:	4602      	mov	r2, r0
 800871a:	693b      	ldr	r3, [r7, #16]
 800871c:	1ad3      	subs	r3, r2, r3
 800871e:	2b02      	cmp	r3, #2
 8008720:	d901      	bls.n	8008726 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8008722:	2303      	movs	r3, #3
 8008724:	e09a      	b.n	800885c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008726:	4b43      	ldr	r3, [pc, #268]	; (8008834 <HAL_RCC_OscConfig+0x780>)
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800872e:	2b00      	cmp	r3, #0
 8008730:	d1f0      	bne.n	8008714 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008732:	4b40      	ldr	r3, [pc, #256]	; (8008834 <HAL_RCC_OscConfig+0x780>)
 8008734:	68da      	ldr	r2, [r3, #12]
 8008736:	4b40      	ldr	r3, [pc, #256]	; (8008838 <HAL_RCC_OscConfig+0x784>)
 8008738:	4013      	ands	r3, r2
 800873a:	687a      	ldr	r2, [r7, #4]
 800873c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800873e:	687a      	ldr	r2, [r7, #4]
 8008740:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008742:	3a01      	subs	r2, #1
 8008744:	0112      	lsls	r2, r2, #4
 8008746:	4311      	orrs	r1, r2
 8008748:	687a      	ldr	r2, [r7, #4]
 800874a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800874c:	0212      	lsls	r2, r2, #8
 800874e:	4311      	orrs	r1, r2
 8008750:	687a      	ldr	r2, [r7, #4]
 8008752:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008754:	0852      	lsrs	r2, r2, #1
 8008756:	3a01      	subs	r2, #1
 8008758:	0552      	lsls	r2, r2, #21
 800875a:	4311      	orrs	r1, r2
 800875c:	687a      	ldr	r2, [r7, #4]
 800875e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8008760:	0852      	lsrs	r2, r2, #1
 8008762:	3a01      	subs	r2, #1
 8008764:	0652      	lsls	r2, r2, #25
 8008766:	4311      	orrs	r1, r2
 8008768:	687a      	ldr	r2, [r7, #4]
 800876a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800876c:	0912      	lsrs	r2, r2, #4
 800876e:	0452      	lsls	r2, r2, #17
 8008770:	430a      	orrs	r2, r1
 8008772:	4930      	ldr	r1, [pc, #192]	; (8008834 <HAL_RCC_OscConfig+0x780>)
 8008774:	4313      	orrs	r3, r2
 8008776:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8008778:	4b2e      	ldr	r3, [pc, #184]	; (8008834 <HAL_RCC_OscConfig+0x780>)
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	4a2d      	ldr	r2, [pc, #180]	; (8008834 <HAL_RCC_OscConfig+0x780>)
 800877e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008782:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008784:	4b2b      	ldr	r3, [pc, #172]	; (8008834 <HAL_RCC_OscConfig+0x780>)
 8008786:	68db      	ldr	r3, [r3, #12]
 8008788:	4a2a      	ldr	r2, [pc, #168]	; (8008834 <HAL_RCC_OscConfig+0x780>)
 800878a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800878e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008790:	f7fd f9ae 	bl	8005af0 <HAL_GetTick>
 8008794:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008796:	e008      	b.n	80087aa <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008798:	f7fd f9aa 	bl	8005af0 <HAL_GetTick>
 800879c:	4602      	mov	r2, r0
 800879e:	693b      	ldr	r3, [r7, #16]
 80087a0:	1ad3      	subs	r3, r2, r3
 80087a2:	2b02      	cmp	r3, #2
 80087a4:	d901      	bls.n	80087aa <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80087a6:	2303      	movs	r3, #3
 80087a8:	e058      	b.n	800885c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80087aa:	4b22      	ldr	r3, [pc, #136]	; (8008834 <HAL_RCC_OscConfig+0x780>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d0f0      	beq.n	8008798 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80087b6:	e050      	b.n	800885a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80087b8:	2301      	movs	r3, #1
 80087ba:	e04f      	b.n	800885c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80087bc:	4b1d      	ldr	r3, [pc, #116]	; (8008834 <HAL_RCC_OscConfig+0x780>)
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d148      	bne.n	800885a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80087c8:	4b1a      	ldr	r3, [pc, #104]	; (8008834 <HAL_RCC_OscConfig+0x780>)
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	4a19      	ldr	r2, [pc, #100]	; (8008834 <HAL_RCC_OscConfig+0x780>)
 80087ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80087d2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80087d4:	4b17      	ldr	r3, [pc, #92]	; (8008834 <HAL_RCC_OscConfig+0x780>)
 80087d6:	68db      	ldr	r3, [r3, #12]
 80087d8:	4a16      	ldr	r2, [pc, #88]	; (8008834 <HAL_RCC_OscConfig+0x780>)
 80087da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80087de:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80087e0:	f7fd f986 	bl	8005af0 <HAL_GetTick>
 80087e4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80087e6:	e008      	b.n	80087fa <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80087e8:	f7fd f982 	bl	8005af0 <HAL_GetTick>
 80087ec:	4602      	mov	r2, r0
 80087ee:	693b      	ldr	r3, [r7, #16]
 80087f0:	1ad3      	subs	r3, r2, r3
 80087f2:	2b02      	cmp	r3, #2
 80087f4:	d901      	bls.n	80087fa <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80087f6:	2303      	movs	r3, #3
 80087f8:	e030      	b.n	800885c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80087fa:	4b0e      	ldr	r3, [pc, #56]	; (8008834 <HAL_RCC_OscConfig+0x780>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008802:	2b00      	cmp	r3, #0
 8008804:	d0f0      	beq.n	80087e8 <HAL_RCC_OscConfig+0x734>
 8008806:	e028      	b.n	800885a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008808:	69bb      	ldr	r3, [r7, #24]
 800880a:	2b0c      	cmp	r3, #12
 800880c:	d023      	beq.n	8008856 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800880e:	4b09      	ldr	r3, [pc, #36]	; (8008834 <HAL_RCC_OscConfig+0x780>)
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	4a08      	ldr	r2, [pc, #32]	; (8008834 <HAL_RCC_OscConfig+0x780>)
 8008814:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008818:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800881a:	f7fd f969 	bl	8005af0 <HAL_GetTick>
 800881e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008820:	e00c      	b.n	800883c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008822:	f7fd f965 	bl	8005af0 <HAL_GetTick>
 8008826:	4602      	mov	r2, r0
 8008828:	693b      	ldr	r3, [r7, #16]
 800882a:	1ad3      	subs	r3, r2, r3
 800882c:	2b02      	cmp	r3, #2
 800882e:	d905      	bls.n	800883c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8008830:	2303      	movs	r3, #3
 8008832:	e013      	b.n	800885c <HAL_RCC_OscConfig+0x7a8>
 8008834:	40021000 	.word	0x40021000
 8008838:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800883c:	4b09      	ldr	r3, [pc, #36]	; (8008864 <HAL_RCC_OscConfig+0x7b0>)
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008844:	2b00      	cmp	r3, #0
 8008846:	d1ec      	bne.n	8008822 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8008848:	4b06      	ldr	r3, [pc, #24]	; (8008864 <HAL_RCC_OscConfig+0x7b0>)
 800884a:	68da      	ldr	r2, [r3, #12]
 800884c:	4905      	ldr	r1, [pc, #20]	; (8008864 <HAL_RCC_OscConfig+0x7b0>)
 800884e:	4b06      	ldr	r3, [pc, #24]	; (8008868 <HAL_RCC_OscConfig+0x7b4>)
 8008850:	4013      	ands	r3, r2
 8008852:	60cb      	str	r3, [r1, #12]
 8008854:	e001      	b.n	800885a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8008856:	2301      	movs	r3, #1
 8008858:	e000      	b.n	800885c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800885a:	2300      	movs	r3, #0
}
 800885c:	4618      	mov	r0, r3
 800885e:	3720      	adds	r7, #32
 8008860:	46bd      	mov	sp, r7
 8008862:	bd80      	pop	{r7, pc}
 8008864:	40021000 	.word	0x40021000
 8008868:	feeefffc 	.word	0xfeeefffc

0800886c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b084      	sub	sp, #16
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
 8008874:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d101      	bne.n	8008880 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800887c:	2301      	movs	r3, #1
 800887e:	e0e7      	b.n	8008a50 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008880:	4b75      	ldr	r3, [pc, #468]	; (8008a58 <HAL_RCC_ClockConfig+0x1ec>)
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f003 0307 	and.w	r3, r3, #7
 8008888:	683a      	ldr	r2, [r7, #0]
 800888a:	429a      	cmp	r2, r3
 800888c:	d910      	bls.n	80088b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800888e:	4b72      	ldr	r3, [pc, #456]	; (8008a58 <HAL_RCC_ClockConfig+0x1ec>)
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f023 0207 	bic.w	r2, r3, #7
 8008896:	4970      	ldr	r1, [pc, #448]	; (8008a58 <HAL_RCC_ClockConfig+0x1ec>)
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	4313      	orrs	r3, r2
 800889c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800889e:	4b6e      	ldr	r3, [pc, #440]	; (8008a58 <HAL_RCC_ClockConfig+0x1ec>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f003 0307 	and.w	r3, r3, #7
 80088a6:	683a      	ldr	r2, [r7, #0]
 80088a8:	429a      	cmp	r2, r3
 80088aa:	d001      	beq.n	80088b0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80088ac:	2301      	movs	r3, #1
 80088ae:	e0cf      	b.n	8008a50 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f003 0302 	and.w	r3, r3, #2
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d010      	beq.n	80088de <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	689a      	ldr	r2, [r3, #8]
 80088c0:	4b66      	ldr	r3, [pc, #408]	; (8008a5c <HAL_RCC_ClockConfig+0x1f0>)
 80088c2:	689b      	ldr	r3, [r3, #8]
 80088c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80088c8:	429a      	cmp	r2, r3
 80088ca:	d908      	bls.n	80088de <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80088cc:	4b63      	ldr	r3, [pc, #396]	; (8008a5c <HAL_RCC_ClockConfig+0x1f0>)
 80088ce:	689b      	ldr	r3, [r3, #8]
 80088d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	689b      	ldr	r3, [r3, #8]
 80088d8:	4960      	ldr	r1, [pc, #384]	; (8008a5c <HAL_RCC_ClockConfig+0x1f0>)
 80088da:	4313      	orrs	r3, r2
 80088dc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f003 0301 	and.w	r3, r3, #1
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d04c      	beq.n	8008984 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	685b      	ldr	r3, [r3, #4]
 80088ee:	2b03      	cmp	r3, #3
 80088f0:	d107      	bne.n	8008902 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80088f2:	4b5a      	ldr	r3, [pc, #360]	; (8008a5c <HAL_RCC_ClockConfig+0x1f0>)
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d121      	bne.n	8008942 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80088fe:	2301      	movs	r3, #1
 8008900:	e0a6      	b.n	8008a50 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	685b      	ldr	r3, [r3, #4]
 8008906:	2b02      	cmp	r3, #2
 8008908:	d107      	bne.n	800891a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800890a:	4b54      	ldr	r3, [pc, #336]	; (8008a5c <HAL_RCC_ClockConfig+0x1f0>)
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008912:	2b00      	cmp	r3, #0
 8008914:	d115      	bne.n	8008942 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8008916:	2301      	movs	r3, #1
 8008918:	e09a      	b.n	8008a50 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	685b      	ldr	r3, [r3, #4]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d107      	bne.n	8008932 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008922:	4b4e      	ldr	r3, [pc, #312]	; (8008a5c <HAL_RCC_ClockConfig+0x1f0>)
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f003 0302 	and.w	r3, r3, #2
 800892a:	2b00      	cmp	r3, #0
 800892c:	d109      	bne.n	8008942 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800892e:	2301      	movs	r3, #1
 8008930:	e08e      	b.n	8008a50 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008932:	4b4a      	ldr	r3, [pc, #296]	; (8008a5c <HAL_RCC_ClockConfig+0x1f0>)
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800893a:	2b00      	cmp	r3, #0
 800893c:	d101      	bne.n	8008942 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800893e:	2301      	movs	r3, #1
 8008940:	e086      	b.n	8008a50 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008942:	4b46      	ldr	r3, [pc, #280]	; (8008a5c <HAL_RCC_ClockConfig+0x1f0>)
 8008944:	689b      	ldr	r3, [r3, #8]
 8008946:	f023 0203 	bic.w	r2, r3, #3
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	685b      	ldr	r3, [r3, #4]
 800894e:	4943      	ldr	r1, [pc, #268]	; (8008a5c <HAL_RCC_ClockConfig+0x1f0>)
 8008950:	4313      	orrs	r3, r2
 8008952:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008954:	f7fd f8cc 	bl	8005af0 <HAL_GetTick>
 8008958:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800895a:	e00a      	b.n	8008972 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800895c:	f7fd f8c8 	bl	8005af0 <HAL_GetTick>
 8008960:	4602      	mov	r2, r0
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	1ad3      	subs	r3, r2, r3
 8008966:	f241 3288 	movw	r2, #5000	; 0x1388
 800896a:	4293      	cmp	r3, r2
 800896c:	d901      	bls.n	8008972 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800896e:	2303      	movs	r3, #3
 8008970:	e06e      	b.n	8008a50 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008972:	4b3a      	ldr	r3, [pc, #232]	; (8008a5c <HAL_RCC_ClockConfig+0x1f0>)
 8008974:	689b      	ldr	r3, [r3, #8]
 8008976:	f003 020c 	and.w	r2, r3, #12
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	685b      	ldr	r3, [r3, #4]
 800897e:	009b      	lsls	r3, r3, #2
 8008980:	429a      	cmp	r2, r3
 8008982:	d1eb      	bne.n	800895c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f003 0302 	and.w	r3, r3, #2
 800898c:	2b00      	cmp	r3, #0
 800898e:	d010      	beq.n	80089b2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	689a      	ldr	r2, [r3, #8]
 8008994:	4b31      	ldr	r3, [pc, #196]	; (8008a5c <HAL_RCC_ClockConfig+0x1f0>)
 8008996:	689b      	ldr	r3, [r3, #8]
 8008998:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800899c:	429a      	cmp	r2, r3
 800899e:	d208      	bcs.n	80089b2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80089a0:	4b2e      	ldr	r3, [pc, #184]	; (8008a5c <HAL_RCC_ClockConfig+0x1f0>)
 80089a2:	689b      	ldr	r3, [r3, #8]
 80089a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	689b      	ldr	r3, [r3, #8]
 80089ac:	492b      	ldr	r1, [pc, #172]	; (8008a5c <HAL_RCC_ClockConfig+0x1f0>)
 80089ae:	4313      	orrs	r3, r2
 80089b0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80089b2:	4b29      	ldr	r3, [pc, #164]	; (8008a58 <HAL_RCC_ClockConfig+0x1ec>)
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f003 0307 	and.w	r3, r3, #7
 80089ba:	683a      	ldr	r2, [r7, #0]
 80089bc:	429a      	cmp	r2, r3
 80089be:	d210      	bcs.n	80089e2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80089c0:	4b25      	ldr	r3, [pc, #148]	; (8008a58 <HAL_RCC_ClockConfig+0x1ec>)
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	f023 0207 	bic.w	r2, r3, #7
 80089c8:	4923      	ldr	r1, [pc, #140]	; (8008a58 <HAL_RCC_ClockConfig+0x1ec>)
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	4313      	orrs	r3, r2
 80089ce:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80089d0:	4b21      	ldr	r3, [pc, #132]	; (8008a58 <HAL_RCC_ClockConfig+0x1ec>)
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f003 0307 	and.w	r3, r3, #7
 80089d8:	683a      	ldr	r2, [r7, #0]
 80089da:	429a      	cmp	r2, r3
 80089dc:	d001      	beq.n	80089e2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80089de:	2301      	movs	r3, #1
 80089e0:	e036      	b.n	8008a50 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	f003 0304 	and.w	r3, r3, #4
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d008      	beq.n	8008a00 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80089ee:	4b1b      	ldr	r3, [pc, #108]	; (8008a5c <HAL_RCC_ClockConfig+0x1f0>)
 80089f0:	689b      	ldr	r3, [r3, #8]
 80089f2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	68db      	ldr	r3, [r3, #12]
 80089fa:	4918      	ldr	r1, [pc, #96]	; (8008a5c <HAL_RCC_ClockConfig+0x1f0>)
 80089fc:	4313      	orrs	r3, r2
 80089fe:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f003 0308 	and.w	r3, r3, #8
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d009      	beq.n	8008a20 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008a0c:	4b13      	ldr	r3, [pc, #76]	; (8008a5c <HAL_RCC_ClockConfig+0x1f0>)
 8008a0e:	689b      	ldr	r3, [r3, #8]
 8008a10:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	691b      	ldr	r3, [r3, #16]
 8008a18:	00db      	lsls	r3, r3, #3
 8008a1a:	4910      	ldr	r1, [pc, #64]	; (8008a5c <HAL_RCC_ClockConfig+0x1f0>)
 8008a1c:	4313      	orrs	r3, r2
 8008a1e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008a20:	f000 f824 	bl	8008a6c <HAL_RCC_GetSysClockFreq>
 8008a24:	4602      	mov	r2, r0
 8008a26:	4b0d      	ldr	r3, [pc, #52]	; (8008a5c <HAL_RCC_ClockConfig+0x1f0>)
 8008a28:	689b      	ldr	r3, [r3, #8]
 8008a2a:	091b      	lsrs	r3, r3, #4
 8008a2c:	f003 030f 	and.w	r3, r3, #15
 8008a30:	490b      	ldr	r1, [pc, #44]	; (8008a60 <HAL_RCC_ClockConfig+0x1f4>)
 8008a32:	5ccb      	ldrb	r3, [r1, r3]
 8008a34:	f003 031f 	and.w	r3, r3, #31
 8008a38:	fa22 f303 	lsr.w	r3, r2, r3
 8008a3c:	4a09      	ldr	r2, [pc, #36]	; (8008a64 <HAL_RCC_ClockConfig+0x1f8>)
 8008a3e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8008a40:	4b09      	ldr	r3, [pc, #36]	; (8008a68 <HAL_RCC_ClockConfig+0x1fc>)
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	4618      	mov	r0, r3
 8008a46:	f7fd f803 	bl	8005a50 <HAL_InitTick>
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	72fb      	strb	r3, [r7, #11]

  return status;
 8008a4e:	7afb      	ldrb	r3, [r7, #11]
}
 8008a50:	4618      	mov	r0, r3
 8008a52:	3710      	adds	r7, #16
 8008a54:	46bd      	mov	sp, r7
 8008a56:	bd80      	pop	{r7, pc}
 8008a58:	40022000 	.word	0x40022000
 8008a5c:	40021000 	.word	0x40021000
 8008a60:	08012e0c 	.word	0x08012e0c
 8008a64:	200001b8 	.word	0x200001b8
 8008a68:	200001e8 	.word	0x200001e8

08008a6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008a6c:	b480      	push	{r7}
 8008a6e:	b089      	sub	sp, #36	; 0x24
 8008a70:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8008a72:	2300      	movs	r3, #0
 8008a74:	61fb      	str	r3, [r7, #28]
 8008a76:	2300      	movs	r3, #0
 8008a78:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008a7a:	4b3e      	ldr	r3, [pc, #248]	; (8008b74 <HAL_RCC_GetSysClockFreq+0x108>)
 8008a7c:	689b      	ldr	r3, [r3, #8]
 8008a7e:	f003 030c 	and.w	r3, r3, #12
 8008a82:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008a84:	4b3b      	ldr	r3, [pc, #236]	; (8008b74 <HAL_RCC_GetSysClockFreq+0x108>)
 8008a86:	68db      	ldr	r3, [r3, #12]
 8008a88:	f003 0303 	and.w	r3, r3, #3
 8008a8c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8008a8e:	693b      	ldr	r3, [r7, #16]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d005      	beq.n	8008aa0 <HAL_RCC_GetSysClockFreq+0x34>
 8008a94:	693b      	ldr	r3, [r7, #16]
 8008a96:	2b0c      	cmp	r3, #12
 8008a98:	d121      	bne.n	8008ade <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	2b01      	cmp	r3, #1
 8008a9e:	d11e      	bne.n	8008ade <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8008aa0:	4b34      	ldr	r3, [pc, #208]	; (8008b74 <HAL_RCC_GetSysClockFreq+0x108>)
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f003 0308 	and.w	r3, r3, #8
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d107      	bne.n	8008abc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8008aac:	4b31      	ldr	r3, [pc, #196]	; (8008b74 <HAL_RCC_GetSysClockFreq+0x108>)
 8008aae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008ab2:	0a1b      	lsrs	r3, r3, #8
 8008ab4:	f003 030f 	and.w	r3, r3, #15
 8008ab8:	61fb      	str	r3, [r7, #28]
 8008aba:	e005      	b.n	8008ac8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8008abc:	4b2d      	ldr	r3, [pc, #180]	; (8008b74 <HAL_RCC_GetSysClockFreq+0x108>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	091b      	lsrs	r3, r3, #4
 8008ac2:	f003 030f 	and.w	r3, r3, #15
 8008ac6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8008ac8:	4a2b      	ldr	r2, [pc, #172]	; (8008b78 <HAL_RCC_GetSysClockFreq+0x10c>)
 8008aca:	69fb      	ldr	r3, [r7, #28]
 8008acc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ad0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008ad2:	693b      	ldr	r3, [r7, #16]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d10d      	bne.n	8008af4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8008ad8:	69fb      	ldr	r3, [r7, #28]
 8008ada:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008adc:	e00a      	b.n	8008af4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8008ade:	693b      	ldr	r3, [r7, #16]
 8008ae0:	2b04      	cmp	r3, #4
 8008ae2:	d102      	bne.n	8008aea <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008ae4:	4b25      	ldr	r3, [pc, #148]	; (8008b7c <HAL_RCC_GetSysClockFreq+0x110>)
 8008ae6:	61bb      	str	r3, [r7, #24]
 8008ae8:	e004      	b.n	8008af4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8008aea:	693b      	ldr	r3, [r7, #16]
 8008aec:	2b08      	cmp	r3, #8
 8008aee:	d101      	bne.n	8008af4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008af0:	4b23      	ldr	r3, [pc, #140]	; (8008b80 <HAL_RCC_GetSysClockFreq+0x114>)
 8008af2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8008af4:	693b      	ldr	r3, [r7, #16]
 8008af6:	2b0c      	cmp	r3, #12
 8008af8:	d134      	bne.n	8008b64 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008afa:	4b1e      	ldr	r3, [pc, #120]	; (8008b74 <HAL_RCC_GetSysClockFreq+0x108>)
 8008afc:	68db      	ldr	r3, [r3, #12]
 8008afe:	f003 0303 	and.w	r3, r3, #3
 8008b02:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008b04:	68bb      	ldr	r3, [r7, #8]
 8008b06:	2b02      	cmp	r3, #2
 8008b08:	d003      	beq.n	8008b12 <HAL_RCC_GetSysClockFreq+0xa6>
 8008b0a:	68bb      	ldr	r3, [r7, #8]
 8008b0c:	2b03      	cmp	r3, #3
 8008b0e:	d003      	beq.n	8008b18 <HAL_RCC_GetSysClockFreq+0xac>
 8008b10:	e005      	b.n	8008b1e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8008b12:	4b1a      	ldr	r3, [pc, #104]	; (8008b7c <HAL_RCC_GetSysClockFreq+0x110>)
 8008b14:	617b      	str	r3, [r7, #20]
      break;
 8008b16:	e005      	b.n	8008b24 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8008b18:	4b19      	ldr	r3, [pc, #100]	; (8008b80 <HAL_RCC_GetSysClockFreq+0x114>)
 8008b1a:	617b      	str	r3, [r7, #20]
      break;
 8008b1c:	e002      	b.n	8008b24 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8008b1e:	69fb      	ldr	r3, [r7, #28]
 8008b20:	617b      	str	r3, [r7, #20]
      break;
 8008b22:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008b24:	4b13      	ldr	r3, [pc, #76]	; (8008b74 <HAL_RCC_GetSysClockFreq+0x108>)
 8008b26:	68db      	ldr	r3, [r3, #12]
 8008b28:	091b      	lsrs	r3, r3, #4
 8008b2a:	f003 0307 	and.w	r3, r3, #7
 8008b2e:	3301      	adds	r3, #1
 8008b30:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8008b32:	4b10      	ldr	r3, [pc, #64]	; (8008b74 <HAL_RCC_GetSysClockFreq+0x108>)
 8008b34:	68db      	ldr	r3, [r3, #12]
 8008b36:	0a1b      	lsrs	r3, r3, #8
 8008b38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b3c:	697a      	ldr	r2, [r7, #20]
 8008b3e:	fb03 f202 	mul.w	r2, r3, r2
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b48:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008b4a:	4b0a      	ldr	r3, [pc, #40]	; (8008b74 <HAL_RCC_GetSysClockFreq+0x108>)
 8008b4c:	68db      	ldr	r3, [r3, #12]
 8008b4e:	0e5b      	lsrs	r3, r3, #25
 8008b50:	f003 0303 	and.w	r3, r3, #3
 8008b54:	3301      	adds	r3, #1
 8008b56:	005b      	lsls	r3, r3, #1
 8008b58:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8008b5a:	697a      	ldr	r2, [r7, #20]
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b62:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8008b64:	69bb      	ldr	r3, [r7, #24]
}
 8008b66:	4618      	mov	r0, r3
 8008b68:	3724      	adds	r7, #36	; 0x24
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b70:	4770      	bx	lr
 8008b72:	bf00      	nop
 8008b74:	40021000 	.word	0x40021000
 8008b78:	08012e24 	.word	0x08012e24
 8008b7c:	00f42400 	.word	0x00f42400
 8008b80:	007a1200 	.word	0x007a1200

08008b84 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008b84:	b480      	push	{r7}
 8008b86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008b88:	4b03      	ldr	r3, [pc, #12]	; (8008b98 <HAL_RCC_GetHCLKFreq+0x14>)
 8008b8a:	681b      	ldr	r3, [r3, #0]
}
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b94:	4770      	bx	lr
 8008b96:	bf00      	nop
 8008b98:	200001b8 	.word	0x200001b8

08008b9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008ba0:	f7ff fff0 	bl	8008b84 <HAL_RCC_GetHCLKFreq>
 8008ba4:	4602      	mov	r2, r0
 8008ba6:	4b06      	ldr	r3, [pc, #24]	; (8008bc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008ba8:	689b      	ldr	r3, [r3, #8]
 8008baa:	0a1b      	lsrs	r3, r3, #8
 8008bac:	f003 0307 	and.w	r3, r3, #7
 8008bb0:	4904      	ldr	r1, [pc, #16]	; (8008bc4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008bb2:	5ccb      	ldrb	r3, [r1, r3]
 8008bb4:	f003 031f 	and.w	r3, r3, #31
 8008bb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	bd80      	pop	{r7, pc}
 8008bc0:	40021000 	.word	0x40021000
 8008bc4:	08012e1c 	.word	0x08012e1c

08008bc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008bcc:	f7ff ffda 	bl	8008b84 <HAL_RCC_GetHCLKFreq>
 8008bd0:	4602      	mov	r2, r0
 8008bd2:	4b06      	ldr	r3, [pc, #24]	; (8008bec <HAL_RCC_GetPCLK2Freq+0x24>)
 8008bd4:	689b      	ldr	r3, [r3, #8]
 8008bd6:	0adb      	lsrs	r3, r3, #11
 8008bd8:	f003 0307 	and.w	r3, r3, #7
 8008bdc:	4904      	ldr	r1, [pc, #16]	; (8008bf0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008bde:	5ccb      	ldrb	r3, [r1, r3]
 8008be0:	f003 031f 	and.w	r3, r3, #31
 8008be4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008be8:	4618      	mov	r0, r3
 8008bea:	bd80      	pop	{r7, pc}
 8008bec:	40021000 	.word	0x40021000
 8008bf0:	08012e1c 	.word	0x08012e1c

08008bf4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b086      	sub	sp, #24
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8008c00:	4b2a      	ldr	r3, [pc, #168]	; (8008cac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008c02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d003      	beq.n	8008c14 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8008c0c:	f7ff f9ee 	bl	8007fec <HAL_PWREx_GetVoltageRange>
 8008c10:	6178      	str	r0, [r7, #20]
 8008c12:	e014      	b.n	8008c3e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8008c14:	4b25      	ldr	r3, [pc, #148]	; (8008cac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c18:	4a24      	ldr	r2, [pc, #144]	; (8008cac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008c1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c1e:	6593      	str	r3, [r2, #88]	; 0x58
 8008c20:	4b22      	ldr	r3, [pc, #136]	; (8008cac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008c22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008c28:	60fb      	str	r3, [r7, #12]
 8008c2a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8008c2c:	f7ff f9de 	bl	8007fec <HAL_PWREx_GetVoltageRange>
 8008c30:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8008c32:	4b1e      	ldr	r3, [pc, #120]	; (8008cac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c36:	4a1d      	ldr	r2, [pc, #116]	; (8008cac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008c38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008c3c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008c3e:	697b      	ldr	r3, [r7, #20]
 8008c40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c44:	d10b      	bne.n	8008c5e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2b80      	cmp	r3, #128	; 0x80
 8008c4a:	d919      	bls.n	8008c80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2ba0      	cmp	r3, #160	; 0xa0
 8008c50:	d902      	bls.n	8008c58 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008c52:	2302      	movs	r3, #2
 8008c54:	613b      	str	r3, [r7, #16]
 8008c56:	e013      	b.n	8008c80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008c58:	2301      	movs	r3, #1
 8008c5a:	613b      	str	r3, [r7, #16]
 8008c5c:	e010      	b.n	8008c80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2b80      	cmp	r3, #128	; 0x80
 8008c62:	d902      	bls.n	8008c6a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8008c64:	2303      	movs	r3, #3
 8008c66:	613b      	str	r3, [r7, #16]
 8008c68:	e00a      	b.n	8008c80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2b80      	cmp	r3, #128	; 0x80
 8008c6e:	d102      	bne.n	8008c76 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008c70:	2302      	movs	r3, #2
 8008c72:	613b      	str	r3, [r7, #16]
 8008c74:	e004      	b.n	8008c80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2b70      	cmp	r3, #112	; 0x70
 8008c7a:	d101      	bne.n	8008c80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008c7c:	2301      	movs	r3, #1
 8008c7e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8008c80:	4b0b      	ldr	r3, [pc, #44]	; (8008cb0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f023 0207 	bic.w	r2, r3, #7
 8008c88:	4909      	ldr	r1, [pc, #36]	; (8008cb0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008c8a:	693b      	ldr	r3, [r7, #16]
 8008c8c:	4313      	orrs	r3, r2
 8008c8e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8008c90:	4b07      	ldr	r3, [pc, #28]	; (8008cb0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f003 0307 	and.w	r3, r3, #7
 8008c98:	693a      	ldr	r2, [r7, #16]
 8008c9a:	429a      	cmp	r2, r3
 8008c9c:	d001      	beq.n	8008ca2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	e000      	b.n	8008ca4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8008ca2:	2300      	movs	r3, #0
}
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	3718      	adds	r7, #24
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bd80      	pop	{r7, pc}
 8008cac:	40021000 	.word	0x40021000
 8008cb0:	40022000 	.word	0x40022000

08008cb4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b086      	sub	sp, #24
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d041      	beq.n	8008d54 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008cd4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008cd8:	d02a      	beq.n	8008d30 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8008cda:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008cde:	d824      	bhi.n	8008d2a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008ce0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008ce4:	d008      	beq.n	8008cf8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8008ce6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008cea:	d81e      	bhi.n	8008d2a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d00a      	beq.n	8008d06 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8008cf0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008cf4:	d010      	beq.n	8008d18 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008cf6:	e018      	b.n	8008d2a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8008cf8:	4b86      	ldr	r3, [pc, #536]	; (8008f14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008cfa:	68db      	ldr	r3, [r3, #12]
 8008cfc:	4a85      	ldr	r2, [pc, #532]	; (8008f14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008cfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d02:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008d04:	e015      	b.n	8008d32 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	3304      	adds	r3, #4
 8008d0a:	2100      	movs	r1, #0
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f000 fabb 	bl	8009288 <RCCEx_PLLSAI1_Config>
 8008d12:	4603      	mov	r3, r0
 8008d14:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008d16:	e00c      	b.n	8008d32 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	3320      	adds	r3, #32
 8008d1c:	2100      	movs	r1, #0
 8008d1e:	4618      	mov	r0, r3
 8008d20:	f000 fba6 	bl	8009470 <RCCEx_PLLSAI2_Config>
 8008d24:	4603      	mov	r3, r0
 8008d26:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008d28:	e003      	b.n	8008d32 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	74fb      	strb	r3, [r7, #19]
      break;
 8008d2e:	e000      	b.n	8008d32 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8008d30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008d32:	7cfb      	ldrb	r3, [r7, #19]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d10b      	bne.n	8008d50 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008d38:	4b76      	ldr	r3, [pc, #472]	; (8008f14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d3e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d46:	4973      	ldr	r1, [pc, #460]	; (8008f14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008d48:	4313      	orrs	r3, r2
 8008d4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8008d4e:	e001      	b.n	8008d54 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d50:	7cfb      	ldrb	r3, [r7, #19]
 8008d52:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d041      	beq.n	8008de4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008d64:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008d68:	d02a      	beq.n	8008dc0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8008d6a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008d6e:	d824      	bhi.n	8008dba <HAL_RCCEx_PeriphCLKConfig+0x106>
 8008d70:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008d74:	d008      	beq.n	8008d88 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8008d76:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008d7a:	d81e      	bhi.n	8008dba <HAL_RCCEx_PeriphCLKConfig+0x106>
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d00a      	beq.n	8008d96 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8008d80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008d84:	d010      	beq.n	8008da8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8008d86:	e018      	b.n	8008dba <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8008d88:	4b62      	ldr	r3, [pc, #392]	; (8008f14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008d8a:	68db      	ldr	r3, [r3, #12]
 8008d8c:	4a61      	ldr	r2, [pc, #388]	; (8008f14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008d8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d92:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008d94:	e015      	b.n	8008dc2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	3304      	adds	r3, #4
 8008d9a:	2100      	movs	r1, #0
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	f000 fa73 	bl	8009288 <RCCEx_PLLSAI1_Config>
 8008da2:	4603      	mov	r3, r0
 8008da4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008da6:	e00c      	b.n	8008dc2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	3320      	adds	r3, #32
 8008dac:	2100      	movs	r1, #0
 8008dae:	4618      	mov	r0, r3
 8008db0:	f000 fb5e 	bl	8009470 <RCCEx_PLLSAI2_Config>
 8008db4:	4603      	mov	r3, r0
 8008db6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008db8:	e003      	b.n	8008dc2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008dba:	2301      	movs	r3, #1
 8008dbc:	74fb      	strb	r3, [r7, #19]
      break;
 8008dbe:	e000      	b.n	8008dc2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8008dc0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008dc2:	7cfb      	ldrb	r3, [r7, #19]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d10b      	bne.n	8008de0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008dc8:	4b52      	ldr	r3, [pc, #328]	; (8008f14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008dce:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008dd6:	494f      	ldr	r1, [pc, #316]	; (8008f14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008dd8:	4313      	orrs	r3, r2
 8008dda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8008dde:	e001      	b.n	8008de4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008de0:	7cfb      	ldrb	r3, [r7, #19]
 8008de2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	f000 80a0 	beq.w	8008f32 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008df2:	2300      	movs	r3, #0
 8008df4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008df6:	4b47      	ldr	r3, [pc, #284]	; (8008f14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008dfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d101      	bne.n	8008e06 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8008e02:	2301      	movs	r3, #1
 8008e04:	e000      	b.n	8008e08 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8008e06:	2300      	movs	r3, #0
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d00d      	beq.n	8008e28 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008e0c:	4b41      	ldr	r3, [pc, #260]	; (8008f14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008e0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e10:	4a40      	ldr	r2, [pc, #256]	; (8008f14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008e12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e16:	6593      	str	r3, [r2, #88]	; 0x58
 8008e18:	4b3e      	ldr	r3, [pc, #248]	; (8008f14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008e1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e20:	60bb      	str	r3, [r7, #8]
 8008e22:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008e24:	2301      	movs	r3, #1
 8008e26:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008e28:	4b3b      	ldr	r3, [pc, #236]	; (8008f18 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	4a3a      	ldr	r2, [pc, #232]	; (8008f18 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8008e2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e32:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008e34:	f7fc fe5c 	bl	8005af0 <HAL_GetTick>
 8008e38:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008e3a:	e009      	b.n	8008e50 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008e3c:	f7fc fe58 	bl	8005af0 <HAL_GetTick>
 8008e40:	4602      	mov	r2, r0
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	1ad3      	subs	r3, r2, r3
 8008e46:	2b02      	cmp	r3, #2
 8008e48:	d902      	bls.n	8008e50 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8008e4a:	2303      	movs	r3, #3
 8008e4c:	74fb      	strb	r3, [r7, #19]
        break;
 8008e4e:	e005      	b.n	8008e5c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008e50:	4b31      	ldr	r3, [pc, #196]	; (8008f18 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d0ef      	beq.n	8008e3c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8008e5c:	7cfb      	ldrb	r3, [r7, #19]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d15c      	bne.n	8008f1c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008e62:	4b2c      	ldr	r3, [pc, #176]	; (8008f14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008e64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e6c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008e6e:	697b      	ldr	r3, [r7, #20]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d01f      	beq.n	8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e7a:	697a      	ldr	r2, [r7, #20]
 8008e7c:	429a      	cmp	r2, r3
 8008e7e:	d019      	beq.n	8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008e80:	4b24      	ldr	r3, [pc, #144]	; (8008f14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e8a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008e8c:	4b21      	ldr	r3, [pc, #132]	; (8008f14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e92:	4a20      	ldr	r2, [pc, #128]	; (8008f14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008e94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008e9c:	4b1d      	ldr	r3, [pc, #116]	; (8008f14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ea2:	4a1c      	ldr	r2, [pc, #112]	; (8008f14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008ea4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008ea8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008eac:	4a19      	ldr	r2, [pc, #100]	; (8008f14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008eae:	697b      	ldr	r3, [r7, #20]
 8008eb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008eb4:	697b      	ldr	r3, [r7, #20]
 8008eb6:	f003 0301 	and.w	r3, r3, #1
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d016      	beq.n	8008eec <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ebe:	f7fc fe17 	bl	8005af0 <HAL_GetTick>
 8008ec2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008ec4:	e00b      	b.n	8008ede <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008ec6:	f7fc fe13 	bl	8005af0 <HAL_GetTick>
 8008eca:	4602      	mov	r2, r0
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	1ad3      	subs	r3, r2, r3
 8008ed0:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ed4:	4293      	cmp	r3, r2
 8008ed6:	d902      	bls.n	8008ede <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8008ed8:	2303      	movs	r3, #3
 8008eda:	74fb      	strb	r3, [r7, #19]
            break;
 8008edc:	e006      	b.n	8008eec <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008ede:	4b0d      	ldr	r3, [pc, #52]	; (8008f14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008ee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ee4:	f003 0302 	and.w	r3, r3, #2
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d0ec      	beq.n	8008ec6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8008eec:	7cfb      	ldrb	r3, [r7, #19]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d10c      	bne.n	8008f0c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008ef2:	4b08      	ldr	r3, [pc, #32]	; (8008f14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ef8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f02:	4904      	ldr	r1, [pc, #16]	; (8008f14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008f04:	4313      	orrs	r3, r2
 8008f06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8008f0a:	e009      	b.n	8008f20 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008f0c:	7cfb      	ldrb	r3, [r7, #19]
 8008f0e:	74bb      	strb	r3, [r7, #18]
 8008f10:	e006      	b.n	8008f20 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8008f12:	bf00      	nop
 8008f14:	40021000 	.word	0x40021000
 8008f18:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f1c:	7cfb      	ldrb	r3, [r7, #19]
 8008f1e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008f20:	7c7b      	ldrb	r3, [r7, #17]
 8008f22:	2b01      	cmp	r3, #1
 8008f24:	d105      	bne.n	8008f32 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008f26:	4b9e      	ldr	r3, [pc, #632]	; (80091a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f2a:	4a9d      	ldr	r2, [pc, #628]	; (80091a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008f2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008f30:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	f003 0301 	and.w	r3, r3, #1
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d00a      	beq.n	8008f54 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008f3e:	4b98      	ldr	r3, [pc, #608]	; (80091a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f44:	f023 0203 	bic.w	r2, r3, #3
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f4c:	4994      	ldr	r1, [pc, #592]	; (80091a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008f4e:	4313      	orrs	r3, r2
 8008f50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f003 0302 	and.w	r3, r3, #2
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d00a      	beq.n	8008f76 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008f60:	4b8f      	ldr	r3, [pc, #572]	; (80091a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f66:	f023 020c 	bic.w	r2, r3, #12
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f6e:	498c      	ldr	r1, [pc, #560]	; (80091a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008f70:	4313      	orrs	r3, r2
 8008f72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	f003 0304 	and.w	r3, r3, #4
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d00a      	beq.n	8008f98 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008f82:	4b87      	ldr	r3, [pc, #540]	; (80091a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f88:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f90:	4983      	ldr	r1, [pc, #524]	; (80091a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008f92:	4313      	orrs	r3, r2
 8008f94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f003 0308 	and.w	r3, r3, #8
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d00a      	beq.n	8008fba <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008fa4:	4b7e      	ldr	r3, [pc, #504]	; (80091a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008faa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fb2:	497b      	ldr	r1, [pc, #492]	; (80091a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008fb4:	4313      	orrs	r3, r2
 8008fb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	f003 0310 	and.w	r3, r3, #16
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d00a      	beq.n	8008fdc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008fc6:	4b76      	ldr	r3, [pc, #472]	; (80091a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fcc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008fd4:	4972      	ldr	r1, [pc, #456]	; (80091a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008fd6:	4313      	orrs	r3, r2
 8008fd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	f003 0320 	and.w	r3, r3, #32
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d00a      	beq.n	8008ffe <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008fe8:	4b6d      	ldr	r3, [pc, #436]	; (80091a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ff6:	496a      	ldr	r1, [pc, #424]	; (80091a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008ff8:	4313      	orrs	r3, r2
 8008ffa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009006:	2b00      	cmp	r3, #0
 8009008:	d00a      	beq.n	8009020 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800900a:	4b65      	ldr	r3, [pc, #404]	; (80091a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800900c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009010:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009018:	4961      	ldr	r1, [pc, #388]	; (80091a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800901a:	4313      	orrs	r3, r2
 800901c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009028:	2b00      	cmp	r3, #0
 800902a:	d00a      	beq.n	8009042 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800902c:	4b5c      	ldr	r3, [pc, #368]	; (80091a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800902e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009032:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800903a:	4959      	ldr	r1, [pc, #356]	; (80091a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800903c:	4313      	orrs	r3, r2
 800903e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800904a:	2b00      	cmp	r3, #0
 800904c:	d00a      	beq.n	8009064 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800904e:	4b54      	ldr	r3, [pc, #336]	; (80091a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009050:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009054:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800905c:	4950      	ldr	r1, [pc, #320]	; (80091a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800905e:	4313      	orrs	r3, r2
 8009060:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800906c:	2b00      	cmp	r3, #0
 800906e:	d00a      	beq.n	8009086 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009070:	4b4b      	ldr	r3, [pc, #300]	; (80091a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009076:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800907e:	4948      	ldr	r1, [pc, #288]	; (80091a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009080:	4313      	orrs	r3, r2
 8009082:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800908e:	2b00      	cmp	r3, #0
 8009090:	d00a      	beq.n	80090a8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009092:	4b43      	ldr	r3, [pc, #268]	; (80091a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009094:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009098:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090a0:	493f      	ldr	r1, [pc, #252]	; (80091a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80090a2:	4313      	orrs	r3, r2
 80090a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d028      	beq.n	8009106 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80090b4:	4b3a      	ldr	r3, [pc, #232]	; (80091a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80090b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090c2:	4937      	ldr	r1, [pc, #220]	; (80091a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80090c4:	4313      	orrs	r3, r2
 80090c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80090d2:	d106      	bne.n	80090e2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80090d4:	4b32      	ldr	r3, [pc, #200]	; (80091a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80090d6:	68db      	ldr	r3, [r3, #12]
 80090d8:	4a31      	ldr	r2, [pc, #196]	; (80091a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80090da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80090de:	60d3      	str	r3, [r2, #12]
 80090e0:	e011      	b.n	8009106 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80090ea:	d10c      	bne.n	8009106 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	3304      	adds	r3, #4
 80090f0:	2101      	movs	r1, #1
 80090f2:	4618      	mov	r0, r3
 80090f4:	f000 f8c8 	bl	8009288 <RCCEx_PLLSAI1_Config>
 80090f8:	4603      	mov	r3, r0
 80090fa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80090fc:	7cfb      	ldrb	r3, [r7, #19]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d001      	beq.n	8009106 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8009102:	7cfb      	ldrb	r3, [r7, #19]
 8009104:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800910e:	2b00      	cmp	r3, #0
 8009110:	d028      	beq.n	8009164 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8009112:	4b23      	ldr	r3, [pc, #140]	; (80091a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009114:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009118:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009120:	491f      	ldr	r1, [pc, #124]	; (80091a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009122:	4313      	orrs	r3, r2
 8009124:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800912c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009130:	d106      	bne.n	8009140 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009132:	4b1b      	ldr	r3, [pc, #108]	; (80091a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009134:	68db      	ldr	r3, [r3, #12]
 8009136:	4a1a      	ldr	r2, [pc, #104]	; (80091a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009138:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800913c:	60d3      	str	r3, [r2, #12]
 800913e:	e011      	b.n	8009164 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009144:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009148:	d10c      	bne.n	8009164 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	3304      	adds	r3, #4
 800914e:	2101      	movs	r1, #1
 8009150:	4618      	mov	r0, r3
 8009152:	f000 f899 	bl	8009288 <RCCEx_PLLSAI1_Config>
 8009156:	4603      	mov	r3, r0
 8009158:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800915a:	7cfb      	ldrb	r3, [r7, #19]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d001      	beq.n	8009164 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8009160:	7cfb      	ldrb	r3, [r7, #19]
 8009162:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800916c:	2b00      	cmp	r3, #0
 800916e:	d02b      	beq.n	80091c8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009170:	4b0b      	ldr	r3, [pc, #44]	; (80091a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009172:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009176:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800917e:	4908      	ldr	r1, [pc, #32]	; (80091a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009180:	4313      	orrs	r3, r2
 8009182:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800918a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800918e:	d109      	bne.n	80091a4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009190:	4b03      	ldr	r3, [pc, #12]	; (80091a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009192:	68db      	ldr	r3, [r3, #12]
 8009194:	4a02      	ldr	r2, [pc, #8]	; (80091a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009196:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800919a:	60d3      	str	r3, [r2, #12]
 800919c:	e014      	b.n	80091c8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800919e:	bf00      	nop
 80091a0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80091a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80091ac:	d10c      	bne.n	80091c8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	3304      	adds	r3, #4
 80091b2:	2101      	movs	r1, #1
 80091b4:	4618      	mov	r0, r3
 80091b6:	f000 f867 	bl	8009288 <RCCEx_PLLSAI1_Config>
 80091ba:	4603      	mov	r3, r0
 80091bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80091be:	7cfb      	ldrb	r3, [r7, #19]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d001      	beq.n	80091c8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80091c4:	7cfb      	ldrb	r3, [r7, #19]
 80091c6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d02f      	beq.n	8009234 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80091d4:	4b2b      	ldr	r3, [pc, #172]	; (8009284 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80091d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091da:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80091e2:	4928      	ldr	r1, [pc, #160]	; (8009284 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80091e4:	4313      	orrs	r3, r2
 80091e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80091ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80091f2:	d10d      	bne.n	8009210 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	3304      	adds	r3, #4
 80091f8:	2102      	movs	r1, #2
 80091fa:	4618      	mov	r0, r3
 80091fc:	f000 f844 	bl	8009288 <RCCEx_PLLSAI1_Config>
 8009200:	4603      	mov	r3, r0
 8009202:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009204:	7cfb      	ldrb	r3, [r7, #19]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d014      	beq.n	8009234 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800920a:	7cfb      	ldrb	r3, [r7, #19]
 800920c:	74bb      	strb	r3, [r7, #18]
 800920e:	e011      	b.n	8009234 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009214:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009218:	d10c      	bne.n	8009234 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	3320      	adds	r3, #32
 800921e:	2102      	movs	r1, #2
 8009220:	4618      	mov	r0, r3
 8009222:	f000 f925 	bl	8009470 <RCCEx_PLLSAI2_Config>
 8009226:	4603      	mov	r3, r0
 8009228:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800922a:	7cfb      	ldrb	r3, [r7, #19]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d001      	beq.n	8009234 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8009230:	7cfb      	ldrb	r3, [r7, #19]
 8009232:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800923c:	2b00      	cmp	r3, #0
 800923e:	d00a      	beq.n	8009256 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009240:	4b10      	ldr	r3, [pc, #64]	; (8009284 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8009242:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009246:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800924e:	490d      	ldr	r1, [pc, #52]	; (8009284 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8009250:	4313      	orrs	r3, r2
 8009252:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800925e:	2b00      	cmp	r3, #0
 8009260:	d00b      	beq.n	800927a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009262:	4b08      	ldr	r3, [pc, #32]	; (8009284 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8009264:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009268:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009272:	4904      	ldr	r1, [pc, #16]	; (8009284 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8009274:	4313      	orrs	r3, r2
 8009276:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800927a:	7cbb      	ldrb	r3, [r7, #18]
}
 800927c:	4618      	mov	r0, r3
 800927e:	3718      	adds	r7, #24
 8009280:	46bd      	mov	sp, r7
 8009282:	bd80      	pop	{r7, pc}
 8009284:	40021000 	.word	0x40021000

08009288 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b084      	sub	sp, #16
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
 8009290:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009292:	2300      	movs	r3, #0
 8009294:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8009296:	4b75      	ldr	r3, [pc, #468]	; (800946c <RCCEx_PLLSAI1_Config+0x1e4>)
 8009298:	68db      	ldr	r3, [r3, #12]
 800929a:	f003 0303 	and.w	r3, r3, #3
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d018      	beq.n	80092d4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80092a2:	4b72      	ldr	r3, [pc, #456]	; (800946c <RCCEx_PLLSAI1_Config+0x1e4>)
 80092a4:	68db      	ldr	r3, [r3, #12]
 80092a6:	f003 0203 	and.w	r2, r3, #3
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	429a      	cmp	r2, r3
 80092b0:	d10d      	bne.n	80092ce <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
       ||
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d009      	beq.n	80092ce <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80092ba:	4b6c      	ldr	r3, [pc, #432]	; (800946c <RCCEx_PLLSAI1_Config+0x1e4>)
 80092bc:	68db      	ldr	r3, [r3, #12]
 80092be:	091b      	lsrs	r3, r3, #4
 80092c0:	f003 0307 	and.w	r3, r3, #7
 80092c4:	1c5a      	adds	r2, r3, #1
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	685b      	ldr	r3, [r3, #4]
       ||
 80092ca:	429a      	cmp	r2, r3
 80092cc:	d047      	beq.n	800935e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80092ce:	2301      	movs	r3, #1
 80092d0:	73fb      	strb	r3, [r7, #15]
 80092d2:	e044      	b.n	800935e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	2b03      	cmp	r3, #3
 80092da:	d018      	beq.n	800930e <RCCEx_PLLSAI1_Config+0x86>
 80092dc:	2b03      	cmp	r3, #3
 80092de:	d825      	bhi.n	800932c <RCCEx_PLLSAI1_Config+0xa4>
 80092e0:	2b01      	cmp	r3, #1
 80092e2:	d002      	beq.n	80092ea <RCCEx_PLLSAI1_Config+0x62>
 80092e4:	2b02      	cmp	r3, #2
 80092e6:	d009      	beq.n	80092fc <RCCEx_PLLSAI1_Config+0x74>
 80092e8:	e020      	b.n	800932c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80092ea:	4b60      	ldr	r3, [pc, #384]	; (800946c <RCCEx_PLLSAI1_Config+0x1e4>)
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	f003 0302 	and.w	r3, r3, #2
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d11d      	bne.n	8009332 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80092f6:	2301      	movs	r3, #1
 80092f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80092fa:	e01a      	b.n	8009332 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80092fc:	4b5b      	ldr	r3, [pc, #364]	; (800946c <RCCEx_PLLSAI1_Config+0x1e4>)
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009304:	2b00      	cmp	r3, #0
 8009306:	d116      	bne.n	8009336 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8009308:	2301      	movs	r3, #1
 800930a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800930c:	e013      	b.n	8009336 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800930e:	4b57      	ldr	r3, [pc, #348]	; (800946c <RCCEx_PLLSAI1_Config+0x1e4>)
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009316:	2b00      	cmp	r3, #0
 8009318:	d10f      	bne.n	800933a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800931a:	4b54      	ldr	r3, [pc, #336]	; (800946c <RCCEx_PLLSAI1_Config+0x1e4>)
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009322:	2b00      	cmp	r3, #0
 8009324:	d109      	bne.n	800933a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8009326:	2301      	movs	r3, #1
 8009328:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800932a:	e006      	b.n	800933a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800932c:	2301      	movs	r3, #1
 800932e:	73fb      	strb	r3, [r7, #15]
      break;
 8009330:	e004      	b.n	800933c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8009332:	bf00      	nop
 8009334:	e002      	b.n	800933c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8009336:	bf00      	nop
 8009338:	e000      	b.n	800933c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800933a:	bf00      	nop
    }

    if(status == HAL_OK)
 800933c:	7bfb      	ldrb	r3, [r7, #15]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d10d      	bne.n	800935e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8009342:	4b4a      	ldr	r3, [pc, #296]	; (800946c <RCCEx_PLLSAI1_Config+0x1e4>)
 8009344:	68db      	ldr	r3, [r3, #12]
 8009346:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	6819      	ldr	r1, [r3, #0]
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	685b      	ldr	r3, [r3, #4]
 8009352:	3b01      	subs	r3, #1
 8009354:	011b      	lsls	r3, r3, #4
 8009356:	430b      	orrs	r3, r1
 8009358:	4944      	ldr	r1, [pc, #272]	; (800946c <RCCEx_PLLSAI1_Config+0x1e4>)
 800935a:	4313      	orrs	r3, r2
 800935c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800935e:	7bfb      	ldrb	r3, [r7, #15]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d17d      	bne.n	8009460 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8009364:	4b41      	ldr	r3, [pc, #260]	; (800946c <RCCEx_PLLSAI1_Config+0x1e4>)
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	4a40      	ldr	r2, [pc, #256]	; (800946c <RCCEx_PLLSAI1_Config+0x1e4>)
 800936a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800936e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009370:	f7fc fbbe 	bl	8005af0 <HAL_GetTick>
 8009374:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8009376:	e009      	b.n	800938c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009378:	f7fc fbba 	bl	8005af0 <HAL_GetTick>
 800937c:	4602      	mov	r2, r0
 800937e:	68bb      	ldr	r3, [r7, #8]
 8009380:	1ad3      	subs	r3, r2, r3
 8009382:	2b02      	cmp	r3, #2
 8009384:	d902      	bls.n	800938c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8009386:	2303      	movs	r3, #3
 8009388:	73fb      	strb	r3, [r7, #15]
        break;
 800938a:	e005      	b.n	8009398 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800938c:	4b37      	ldr	r3, [pc, #220]	; (800946c <RCCEx_PLLSAI1_Config+0x1e4>)
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009394:	2b00      	cmp	r3, #0
 8009396:	d1ef      	bne.n	8009378 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8009398:	7bfb      	ldrb	r3, [r7, #15]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d160      	bne.n	8009460 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d111      	bne.n	80093c8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80093a4:	4b31      	ldr	r3, [pc, #196]	; (800946c <RCCEx_PLLSAI1_Config+0x1e4>)
 80093a6:	691b      	ldr	r3, [r3, #16]
 80093a8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80093ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80093b0:	687a      	ldr	r2, [r7, #4]
 80093b2:	6892      	ldr	r2, [r2, #8]
 80093b4:	0211      	lsls	r1, r2, #8
 80093b6:	687a      	ldr	r2, [r7, #4]
 80093b8:	68d2      	ldr	r2, [r2, #12]
 80093ba:	0912      	lsrs	r2, r2, #4
 80093bc:	0452      	lsls	r2, r2, #17
 80093be:	430a      	orrs	r2, r1
 80093c0:	492a      	ldr	r1, [pc, #168]	; (800946c <RCCEx_PLLSAI1_Config+0x1e4>)
 80093c2:	4313      	orrs	r3, r2
 80093c4:	610b      	str	r3, [r1, #16]
 80093c6:	e027      	b.n	8009418 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	2b01      	cmp	r3, #1
 80093cc:	d112      	bne.n	80093f4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80093ce:	4b27      	ldr	r3, [pc, #156]	; (800946c <RCCEx_PLLSAI1_Config+0x1e4>)
 80093d0:	691b      	ldr	r3, [r3, #16]
 80093d2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80093d6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80093da:	687a      	ldr	r2, [r7, #4]
 80093dc:	6892      	ldr	r2, [r2, #8]
 80093de:	0211      	lsls	r1, r2, #8
 80093e0:	687a      	ldr	r2, [r7, #4]
 80093e2:	6912      	ldr	r2, [r2, #16]
 80093e4:	0852      	lsrs	r2, r2, #1
 80093e6:	3a01      	subs	r2, #1
 80093e8:	0552      	lsls	r2, r2, #21
 80093ea:	430a      	orrs	r2, r1
 80093ec:	491f      	ldr	r1, [pc, #124]	; (800946c <RCCEx_PLLSAI1_Config+0x1e4>)
 80093ee:	4313      	orrs	r3, r2
 80093f0:	610b      	str	r3, [r1, #16]
 80093f2:	e011      	b.n	8009418 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80093f4:	4b1d      	ldr	r3, [pc, #116]	; (800946c <RCCEx_PLLSAI1_Config+0x1e4>)
 80093f6:	691b      	ldr	r3, [r3, #16]
 80093f8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80093fc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8009400:	687a      	ldr	r2, [r7, #4]
 8009402:	6892      	ldr	r2, [r2, #8]
 8009404:	0211      	lsls	r1, r2, #8
 8009406:	687a      	ldr	r2, [r7, #4]
 8009408:	6952      	ldr	r2, [r2, #20]
 800940a:	0852      	lsrs	r2, r2, #1
 800940c:	3a01      	subs	r2, #1
 800940e:	0652      	lsls	r2, r2, #25
 8009410:	430a      	orrs	r2, r1
 8009412:	4916      	ldr	r1, [pc, #88]	; (800946c <RCCEx_PLLSAI1_Config+0x1e4>)
 8009414:	4313      	orrs	r3, r2
 8009416:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8009418:	4b14      	ldr	r3, [pc, #80]	; (800946c <RCCEx_PLLSAI1_Config+0x1e4>)
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	4a13      	ldr	r2, [pc, #76]	; (800946c <RCCEx_PLLSAI1_Config+0x1e4>)
 800941e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009422:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009424:	f7fc fb64 	bl	8005af0 <HAL_GetTick>
 8009428:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800942a:	e009      	b.n	8009440 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800942c:	f7fc fb60 	bl	8005af0 <HAL_GetTick>
 8009430:	4602      	mov	r2, r0
 8009432:	68bb      	ldr	r3, [r7, #8]
 8009434:	1ad3      	subs	r3, r2, r3
 8009436:	2b02      	cmp	r3, #2
 8009438:	d902      	bls.n	8009440 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800943a:	2303      	movs	r3, #3
 800943c:	73fb      	strb	r3, [r7, #15]
          break;
 800943e:	e005      	b.n	800944c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8009440:	4b0a      	ldr	r3, [pc, #40]	; (800946c <RCCEx_PLLSAI1_Config+0x1e4>)
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009448:	2b00      	cmp	r3, #0
 800944a:	d0ef      	beq.n	800942c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800944c:	7bfb      	ldrb	r3, [r7, #15]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d106      	bne.n	8009460 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8009452:	4b06      	ldr	r3, [pc, #24]	; (800946c <RCCEx_PLLSAI1_Config+0x1e4>)
 8009454:	691a      	ldr	r2, [r3, #16]
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	699b      	ldr	r3, [r3, #24]
 800945a:	4904      	ldr	r1, [pc, #16]	; (800946c <RCCEx_PLLSAI1_Config+0x1e4>)
 800945c:	4313      	orrs	r3, r2
 800945e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8009460:	7bfb      	ldrb	r3, [r7, #15]
}
 8009462:	4618      	mov	r0, r3
 8009464:	3710      	adds	r7, #16
 8009466:	46bd      	mov	sp, r7
 8009468:	bd80      	pop	{r7, pc}
 800946a:	bf00      	nop
 800946c:	40021000 	.word	0x40021000

08009470 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b084      	sub	sp, #16
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
 8009478:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800947a:	2300      	movs	r3, #0
 800947c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800947e:	4b6a      	ldr	r3, [pc, #424]	; (8009628 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009480:	68db      	ldr	r3, [r3, #12]
 8009482:	f003 0303 	and.w	r3, r3, #3
 8009486:	2b00      	cmp	r3, #0
 8009488:	d018      	beq.n	80094bc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800948a:	4b67      	ldr	r3, [pc, #412]	; (8009628 <RCCEx_PLLSAI2_Config+0x1b8>)
 800948c:	68db      	ldr	r3, [r3, #12]
 800948e:	f003 0203 	and.w	r2, r3, #3
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	429a      	cmp	r2, r3
 8009498:	d10d      	bne.n	80094b6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
       ||
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d009      	beq.n	80094b6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80094a2:	4b61      	ldr	r3, [pc, #388]	; (8009628 <RCCEx_PLLSAI2_Config+0x1b8>)
 80094a4:	68db      	ldr	r3, [r3, #12]
 80094a6:	091b      	lsrs	r3, r3, #4
 80094a8:	f003 0307 	and.w	r3, r3, #7
 80094ac:	1c5a      	adds	r2, r3, #1
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	685b      	ldr	r3, [r3, #4]
       ||
 80094b2:	429a      	cmp	r2, r3
 80094b4:	d047      	beq.n	8009546 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80094b6:	2301      	movs	r3, #1
 80094b8:	73fb      	strb	r3, [r7, #15]
 80094ba:	e044      	b.n	8009546 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	2b03      	cmp	r3, #3
 80094c2:	d018      	beq.n	80094f6 <RCCEx_PLLSAI2_Config+0x86>
 80094c4:	2b03      	cmp	r3, #3
 80094c6:	d825      	bhi.n	8009514 <RCCEx_PLLSAI2_Config+0xa4>
 80094c8:	2b01      	cmp	r3, #1
 80094ca:	d002      	beq.n	80094d2 <RCCEx_PLLSAI2_Config+0x62>
 80094cc:	2b02      	cmp	r3, #2
 80094ce:	d009      	beq.n	80094e4 <RCCEx_PLLSAI2_Config+0x74>
 80094d0:	e020      	b.n	8009514 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80094d2:	4b55      	ldr	r3, [pc, #340]	; (8009628 <RCCEx_PLLSAI2_Config+0x1b8>)
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	f003 0302 	and.w	r3, r3, #2
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d11d      	bne.n	800951a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80094de:	2301      	movs	r3, #1
 80094e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80094e2:	e01a      	b.n	800951a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80094e4:	4b50      	ldr	r3, [pc, #320]	; (8009628 <RCCEx_PLLSAI2_Config+0x1b8>)
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d116      	bne.n	800951e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80094f0:	2301      	movs	r3, #1
 80094f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80094f4:	e013      	b.n	800951e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80094f6:	4b4c      	ldr	r3, [pc, #304]	; (8009628 <RCCEx_PLLSAI2_Config+0x1b8>)
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d10f      	bne.n	8009522 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8009502:	4b49      	ldr	r3, [pc, #292]	; (8009628 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800950a:	2b00      	cmp	r3, #0
 800950c:	d109      	bne.n	8009522 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800950e:	2301      	movs	r3, #1
 8009510:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009512:	e006      	b.n	8009522 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8009514:	2301      	movs	r3, #1
 8009516:	73fb      	strb	r3, [r7, #15]
      break;
 8009518:	e004      	b.n	8009524 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800951a:	bf00      	nop
 800951c:	e002      	b.n	8009524 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800951e:	bf00      	nop
 8009520:	e000      	b.n	8009524 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8009522:	bf00      	nop
    }

    if(status == HAL_OK)
 8009524:	7bfb      	ldrb	r3, [r7, #15]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d10d      	bne.n	8009546 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800952a:	4b3f      	ldr	r3, [pc, #252]	; (8009628 <RCCEx_PLLSAI2_Config+0x1b8>)
 800952c:	68db      	ldr	r3, [r3, #12]
 800952e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	6819      	ldr	r1, [r3, #0]
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	685b      	ldr	r3, [r3, #4]
 800953a:	3b01      	subs	r3, #1
 800953c:	011b      	lsls	r3, r3, #4
 800953e:	430b      	orrs	r3, r1
 8009540:	4939      	ldr	r1, [pc, #228]	; (8009628 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009542:	4313      	orrs	r3, r2
 8009544:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8009546:	7bfb      	ldrb	r3, [r7, #15]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d167      	bne.n	800961c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800954c:	4b36      	ldr	r3, [pc, #216]	; (8009628 <RCCEx_PLLSAI2_Config+0x1b8>)
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	4a35      	ldr	r2, [pc, #212]	; (8009628 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009552:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009556:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009558:	f7fc faca 	bl	8005af0 <HAL_GetTick>
 800955c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800955e:	e009      	b.n	8009574 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8009560:	f7fc fac6 	bl	8005af0 <HAL_GetTick>
 8009564:	4602      	mov	r2, r0
 8009566:	68bb      	ldr	r3, [r7, #8]
 8009568:	1ad3      	subs	r3, r2, r3
 800956a:	2b02      	cmp	r3, #2
 800956c:	d902      	bls.n	8009574 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800956e:	2303      	movs	r3, #3
 8009570:	73fb      	strb	r3, [r7, #15]
        break;
 8009572:	e005      	b.n	8009580 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8009574:	4b2c      	ldr	r3, [pc, #176]	; (8009628 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800957c:	2b00      	cmp	r3, #0
 800957e:	d1ef      	bne.n	8009560 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8009580:	7bfb      	ldrb	r3, [r7, #15]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d14a      	bne.n	800961c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8009586:	683b      	ldr	r3, [r7, #0]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d111      	bne.n	80095b0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800958c:	4b26      	ldr	r3, [pc, #152]	; (8009628 <RCCEx_PLLSAI2_Config+0x1b8>)
 800958e:	695b      	ldr	r3, [r3, #20]
 8009590:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8009594:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009598:	687a      	ldr	r2, [r7, #4]
 800959a:	6892      	ldr	r2, [r2, #8]
 800959c:	0211      	lsls	r1, r2, #8
 800959e:	687a      	ldr	r2, [r7, #4]
 80095a0:	68d2      	ldr	r2, [r2, #12]
 80095a2:	0912      	lsrs	r2, r2, #4
 80095a4:	0452      	lsls	r2, r2, #17
 80095a6:	430a      	orrs	r2, r1
 80095a8:	491f      	ldr	r1, [pc, #124]	; (8009628 <RCCEx_PLLSAI2_Config+0x1b8>)
 80095aa:	4313      	orrs	r3, r2
 80095ac:	614b      	str	r3, [r1, #20]
 80095ae:	e011      	b.n	80095d4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80095b0:	4b1d      	ldr	r3, [pc, #116]	; (8009628 <RCCEx_PLLSAI2_Config+0x1b8>)
 80095b2:	695b      	ldr	r3, [r3, #20]
 80095b4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80095b8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80095bc:	687a      	ldr	r2, [r7, #4]
 80095be:	6892      	ldr	r2, [r2, #8]
 80095c0:	0211      	lsls	r1, r2, #8
 80095c2:	687a      	ldr	r2, [r7, #4]
 80095c4:	6912      	ldr	r2, [r2, #16]
 80095c6:	0852      	lsrs	r2, r2, #1
 80095c8:	3a01      	subs	r2, #1
 80095ca:	0652      	lsls	r2, r2, #25
 80095cc:	430a      	orrs	r2, r1
 80095ce:	4916      	ldr	r1, [pc, #88]	; (8009628 <RCCEx_PLLSAI2_Config+0x1b8>)
 80095d0:	4313      	orrs	r3, r2
 80095d2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80095d4:	4b14      	ldr	r3, [pc, #80]	; (8009628 <RCCEx_PLLSAI2_Config+0x1b8>)
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	4a13      	ldr	r2, [pc, #76]	; (8009628 <RCCEx_PLLSAI2_Config+0x1b8>)
 80095da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80095de:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80095e0:	f7fc fa86 	bl	8005af0 <HAL_GetTick>
 80095e4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80095e6:	e009      	b.n	80095fc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80095e8:	f7fc fa82 	bl	8005af0 <HAL_GetTick>
 80095ec:	4602      	mov	r2, r0
 80095ee:	68bb      	ldr	r3, [r7, #8]
 80095f0:	1ad3      	subs	r3, r2, r3
 80095f2:	2b02      	cmp	r3, #2
 80095f4:	d902      	bls.n	80095fc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80095f6:	2303      	movs	r3, #3
 80095f8:	73fb      	strb	r3, [r7, #15]
          break;
 80095fa:	e005      	b.n	8009608 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80095fc:	4b0a      	ldr	r3, [pc, #40]	; (8009628 <RCCEx_PLLSAI2_Config+0x1b8>)
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009604:	2b00      	cmp	r3, #0
 8009606:	d0ef      	beq.n	80095e8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8009608:	7bfb      	ldrb	r3, [r7, #15]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d106      	bne.n	800961c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800960e:	4b06      	ldr	r3, [pc, #24]	; (8009628 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009610:	695a      	ldr	r2, [r3, #20]
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	695b      	ldr	r3, [r3, #20]
 8009616:	4904      	ldr	r1, [pc, #16]	; (8009628 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009618:	4313      	orrs	r3, r2
 800961a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800961c:	7bfb      	ldrb	r3, [r7, #15]
}
 800961e:	4618      	mov	r0, r3
 8009620:	3710      	adds	r7, #16
 8009622:	46bd      	mov	sp, r7
 8009624:	bd80      	pop	{r7, pc}
 8009626:	bf00      	nop
 8009628:	40021000 	.word	0x40021000

0800962c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b084      	sub	sp, #16
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009634:	2301      	movs	r3, #1
 8009636:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d06c      	beq.n	8009718 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009644:	b2db      	uxtb	r3, r3
 8009646:	2b00      	cmp	r3, #0
 8009648:	d106      	bne.n	8009658 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	2200      	movs	r2, #0
 800964e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8009652:	6878      	ldr	r0, [r7, #4]
 8009654:	f7fb f8e8 	bl	8004828 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2202      	movs	r2, #2
 800965c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	22ca      	movs	r2, #202	; 0xca
 8009666:	625a      	str	r2, [r3, #36]	; 0x24
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	2253      	movs	r2, #83	; 0x53
 800966e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8009670:	6878      	ldr	r0, [r7, #4]
 8009672:	f000 fa49 	bl	8009b08 <RTC_EnterInitMode>
 8009676:	4603      	mov	r3, r0
 8009678:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800967a:	7bfb      	ldrb	r3, [r7, #15]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d14b      	bne.n	8009718 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	689b      	ldr	r3, [r3, #8]
 8009686:	687a      	ldr	r2, [r7, #4]
 8009688:	6812      	ldr	r2, [r2, #0]
 800968a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800968e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009692:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	6899      	ldr	r1, [r3, #8]
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	685a      	ldr	r2, [r3, #4]
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	691b      	ldr	r3, [r3, #16]
 80096a2:	431a      	orrs	r2, r3
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	699b      	ldr	r3, [r3, #24]
 80096a8:	431a      	orrs	r2, r3
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	430a      	orrs	r2, r1
 80096b0:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	687a      	ldr	r2, [r7, #4]
 80096b8:	68d2      	ldr	r2, [r2, #12]
 80096ba:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	6919      	ldr	r1, [r3, #16]
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	689b      	ldr	r3, [r3, #8]
 80096c6:	041a      	lsls	r2, r3, #16
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	430a      	orrs	r2, r1
 80096ce:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80096d0:	6878      	ldr	r0, [r7, #4]
 80096d2:	f000 fa4d 	bl	8009b70 <RTC_ExitInitMode>
 80096d6:	4603      	mov	r3, r0
 80096d8:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80096da:	7bfb      	ldrb	r3, [r7, #15]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d11b      	bne.n	8009718 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	f022 0203 	bic.w	r2, r2, #3
 80096ee:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	69da      	ldr	r2, [r3, #28]
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	695b      	ldr	r3, [r3, #20]
 80096fe:	431a      	orrs	r2, r3
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	430a      	orrs	r2, r1
 8009706:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	22ff      	movs	r2, #255	; 0xff
 800970e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	2201      	movs	r2, #1
 8009714:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8009718:	7bfb      	ldrb	r3, [r7, #15]
}
 800971a:	4618      	mov	r0, r3
 800971c:	3710      	adds	r7, #16
 800971e:	46bd      	mov	sp, r7
 8009720:	bd80      	pop	{r7, pc}

08009722 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009722:	b590      	push	{r4, r7, lr}
 8009724:	b087      	sub	sp, #28
 8009726:	af00      	add	r7, sp, #0
 8009728:	60f8      	str	r0, [r7, #12]
 800972a:	60b9      	str	r1, [r7, #8]
 800972c:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009734:	2b01      	cmp	r3, #1
 8009736:	d101      	bne.n	800973c <HAL_RTC_SetTime+0x1a>
 8009738:	2302      	movs	r3, #2
 800973a:	e08b      	b.n	8009854 <HAL_RTC_SetTime+0x132>
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	2201      	movs	r2, #1
 8009740:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	2202      	movs	r2, #2
 8009748:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	22ca      	movs	r2, #202	; 0xca
 8009752:	625a      	str	r2, [r3, #36]	; 0x24
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	2253      	movs	r2, #83	; 0x53
 800975a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800975c:	68f8      	ldr	r0, [r7, #12]
 800975e:	f000 f9d3 	bl	8009b08 <RTC_EnterInitMode>
 8009762:	4603      	mov	r3, r0
 8009764:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8009766:	7cfb      	ldrb	r3, [r7, #19]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d163      	bne.n	8009834 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d126      	bne.n	80097c0 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	689b      	ldr	r3, [r3, #8]
 8009778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800977c:	2b00      	cmp	r3, #0
 800977e:	d102      	bne.n	8009786 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8009780:	68bb      	ldr	r3, [r7, #8]
 8009782:	2200      	movs	r2, #0
 8009784:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8009786:	68bb      	ldr	r3, [r7, #8]
 8009788:	781b      	ldrb	r3, [r3, #0]
 800978a:	4618      	mov	r0, r3
 800978c:	f000 fa2e 	bl	8009bec <RTC_ByteToBcd2>
 8009790:	4603      	mov	r3, r0
 8009792:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009794:	68bb      	ldr	r3, [r7, #8]
 8009796:	785b      	ldrb	r3, [r3, #1]
 8009798:	4618      	mov	r0, r3
 800979a:	f000 fa27 	bl	8009bec <RTC_ByteToBcd2>
 800979e:	4603      	mov	r3, r0
 80097a0:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80097a2:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80097a4:	68bb      	ldr	r3, [r7, #8]
 80097a6:	789b      	ldrb	r3, [r3, #2]
 80097a8:	4618      	mov	r0, r3
 80097aa:	f000 fa1f 	bl	8009bec <RTC_ByteToBcd2>
 80097ae:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80097b0:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80097b4:	68bb      	ldr	r3, [r7, #8]
 80097b6:	78db      	ldrb	r3, [r3, #3]
 80097b8:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80097ba:	4313      	orrs	r3, r2
 80097bc:	617b      	str	r3, [r7, #20]
 80097be:	e018      	b.n	80097f2 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	689b      	ldr	r3, [r3, #8]
 80097c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d102      	bne.n	80097d4 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80097ce:	68bb      	ldr	r3, [r7, #8]
 80097d0:	2200      	movs	r2, #0
 80097d2:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80097d4:	68bb      	ldr	r3, [r7, #8]
 80097d6:	781b      	ldrb	r3, [r3, #0]
 80097d8:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80097da:	68bb      	ldr	r3, [r7, #8]
 80097dc:	785b      	ldrb	r3, [r3, #1]
 80097de:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80097e0:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80097e2:	68ba      	ldr	r2, [r7, #8]
 80097e4:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80097e6:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80097e8:	68bb      	ldr	r3, [r7, #8]
 80097ea:	78db      	ldrb	r3, [r3, #3]
 80097ec:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80097ee:	4313      	orrs	r3, r2
 80097f0:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	681a      	ldr	r2, [r3, #0]
 80097f6:	697b      	ldr	r3, [r7, #20]
 80097f8:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80097fc:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8009800:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	689a      	ldr	r2, [r3, #8]
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009810:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	6899      	ldr	r1, [r3, #8]
 8009818:	68bb      	ldr	r3, [r7, #8]
 800981a:	68da      	ldr	r2, [r3, #12]
 800981c:	68bb      	ldr	r3, [r7, #8]
 800981e:	691b      	ldr	r3, [r3, #16]
 8009820:	431a      	orrs	r2, r3
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	430a      	orrs	r2, r1
 8009828:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800982a:	68f8      	ldr	r0, [r7, #12]
 800982c:	f000 f9a0 	bl	8009b70 <RTC_ExitInitMode>
 8009830:	4603      	mov	r3, r0
 8009832:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	22ff      	movs	r2, #255	; 0xff
 800983a:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800983c:	7cfb      	ldrb	r3, [r7, #19]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d103      	bne.n	800984a <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	2201      	movs	r2, #1
 8009846:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	2200      	movs	r2, #0
 800984e:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8009852:	7cfb      	ldrb	r3, [r7, #19]
}
 8009854:	4618      	mov	r0, r3
 8009856:	371c      	adds	r7, #28
 8009858:	46bd      	mov	sp, r7
 800985a:	bd90      	pop	{r4, r7, pc}

0800985c <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800985c:	b580      	push	{r7, lr}
 800985e:	b086      	sub	sp, #24
 8009860:	af00      	add	r7, sp, #0
 8009862:	60f8      	str	r0, [r7, #12]
 8009864:	60b9      	str	r1, [r7, #8]
 8009866:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800986e:	68bb      	ldr	r3, [r7, #8]
 8009870:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	691b      	ldr	r3, [r3, #16]
 8009878:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800987c:	68bb      	ldr	r3, [r7, #8]
 800987e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800988a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800988e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8009890:	697b      	ldr	r3, [r7, #20]
 8009892:	0c1b      	lsrs	r3, r3, #16
 8009894:	b2db      	uxtb	r3, r3
 8009896:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800989a:	b2da      	uxtb	r2, r3
 800989c:	68bb      	ldr	r3, [r7, #8]
 800989e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80098a0:	697b      	ldr	r3, [r7, #20]
 80098a2:	0a1b      	lsrs	r3, r3, #8
 80098a4:	b2db      	uxtb	r3, r3
 80098a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098aa:	b2da      	uxtb	r2, r3
 80098ac:	68bb      	ldr	r3, [r7, #8]
 80098ae:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80098b0:	697b      	ldr	r3, [r7, #20]
 80098b2:	b2db      	uxtb	r3, r3
 80098b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098b8:	b2da      	uxtb	r2, r3
 80098ba:	68bb      	ldr	r3, [r7, #8]
 80098bc:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 80098be:	697b      	ldr	r3, [r7, #20]
 80098c0:	0d9b      	lsrs	r3, r3, #22
 80098c2:	b2db      	uxtb	r3, r3
 80098c4:	f003 0301 	and.w	r3, r3, #1
 80098c8:	b2da      	uxtb	r2, r3
 80098ca:	68bb      	ldr	r3, [r7, #8]
 80098cc:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d11a      	bne.n	800990a <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80098d4:	68bb      	ldr	r3, [r7, #8]
 80098d6:	781b      	ldrb	r3, [r3, #0]
 80098d8:	4618      	mov	r0, r3
 80098da:	f000 f9a7 	bl	8009c2c <RTC_Bcd2ToByte>
 80098de:	4603      	mov	r3, r0
 80098e0:	461a      	mov	r2, r3
 80098e2:	68bb      	ldr	r3, [r7, #8]
 80098e4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80098e6:	68bb      	ldr	r3, [r7, #8]
 80098e8:	785b      	ldrb	r3, [r3, #1]
 80098ea:	4618      	mov	r0, r3
 80098ec:	f000 f99e 	bl	8009c2c <RTC_Bcd2ToByte>
 80098f0:	4603      	mov	r3, r0
 80098f2:	461a      	mov	r2, r3
 80098f4:	68bb      	ldr	r3, [r7, #8]
 80098f6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80098f8:	68bb      	ldr	r3, [r7, #8]
 80098fa:	789b      	ldrb	r3, [r3, #2]
 80098fc:	4618      	mov	r0, r3
 80098fe:	f000 f995 	bl	8009c2c <RTC_Bcd2ToByte>
 8009902:	4603      	mov	r3, r0
 8009904:	461a      	mov	r2, r3
 8009906:	68bb      	ldr	r3, [r7, #8]
 8009908:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800990a:	2300      	movs	r3, #0
}
 800990c:	4618      	mov	r0, r3
 800990e:	3718      	adds	r7, #24
 8009910:	46bd      	mov	sp, r7
 8009912:	bd80      	pop	{r7, pc}

08009914 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009914:	b590      	push	{r4, r7, lr}
 8009916:	b087      	sub	sp, #28
 8009918:	af00      	add	r7, sp, #0
 800991a:	60f8      	str	r0, [r7, #12]
 800991c:	60b9      	str	r1, [r7, #8]
 800991e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009926:	2b01      	cmp	r3, #1
 8009928:	d101      	bne.n	800992e <HAL_RTC_SetDate+0x1a>
 800992a:	2302      	movs	r3, #2
 800992c:	e075      	b.n	8009a1a <HAL_RTC_SetDate+0x106>
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	2201      	movs	r2, #1
 8009932:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	2202      	movs	r2, #2
 800993a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d10e      	bne.n	8009962 <HAL_RTC_SetDate+0x4e>
 8009944:	68bb      	ldr	r3, [r7, #8]
 8009946:	785b      	ldrb	r3, [r3, #1]
 8009948:	f003 0310 	and.w	r3, r3, #16
 800994c:	2b00      	cmp	r3, #0
 800994e:	d008      	beq.n	8009962 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8009950:	68bb      	ldr	r3, [r7, #8]
 8009952:	785b      	ldrb	r3, [r3, #1]
 8009954:	f023 0310 	bic.w	r3, r3, #16
 8009958:	b2db      	uxtb	r3, r3
 800995a:	330a      	adds	r3, #10
 800995c:	b2da      	uxtb	r2, r3
 800995e:	68bb      	ldr	r3, [r7, #8]
 8009960:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d11c      	bne.n	80099a2 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8009968:	68bb      	ldr	r3, [r7, #8]
 800996a:	78db      	ldrb	r3, [r3, #3]
 800996c:	4618      	mov	r0, r3
 800996e:	f000 f93d 	bl	8009bec <RTC_ByteToBcd2>
 8009972:	4603      	mov	r3, r0
 8009974:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009976:	68bb      	ldr	r3, [r7, #8]
 8009978:	785b      	ldrb	r3, [r3, #1]
 800997a:	4618      	mov	r0, r3
 800997c:	f000 f936 	bl	8009bec <RTC_ByteToBcd2>
 8009980:	4603      	mov	r3, r0
 8009982:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8009984:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8009986:	68bb      	ldr	r3, [r7, #8]
 8009988:	789b      	ldrb	r3, [r3, #2]
 800998a:	4618      	mov	r0, r3
 800998c:	f000 f92e 	bl	8009bec <RTC_ByteToBcd2>
 8009990:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009992:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8009996:	68bb      	ldr	r3, [r7, #8]
 8009998:	781b      	ldrb	r3, [r3, #0]
 800999a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800999c:	4313      	orrs	r3, r2
 800999e:	617b      	str	r3, [r7, #20]
 80099a0:	e00e      	b.n	80099c0 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80099a2:	68bb      	ldr	r3, [r7, #8]
 80099a4:	78db      	ldrb	r3, [r3, #3]
 80099a6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80099a8:	68bb      	ldr	r3, [r7, #8]
 80099aa:	785b      	ldrb	r3, [r3, #1]
 80099ac:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80099ae:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80099b0:	68ba      	ldr	r2, [r7, #8]
 80099b2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80099b4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80099b6:	68bb      	ldr	r3, [r7, #8]
 80099b8:	781b      	ldrb	r3, [r3, #0]
 80099ba:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80099bc:	4313      	orrs	r3, r2
 80099be:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	22ca      	movs	r2, #202	; 0xca
 80099c6:	625a      	str	r2, [r3, #36]	; 0x24
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	2253      	movs	r2, #83	; 0x53
 80099ce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80099d0:	68f8      	ldr	r0, [r7, #12]
 80099d2:	f000 f899 	bl	8009b08 <RTC_EnterInitMode>
 80099d6:	4603      	mov	r3, r0
 80099d8:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80099da:	7cfb      	ldrb	r3, [r7, #19]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d10c      	bne.n	80099fa <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	681a      	ldr	r2, [r3, #0]
 80099e4:	697b      	ldr	r3, [r7, #20]
 80099e6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80099ea:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80099ee:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80099f0:	68f8      	ldr	r0, [r7, #12]
 80099f2:	f000 f8bd 	bl	8009b70 <RTC_ExitInitMode>
 80099f6:	4603      	mov	r3, r0
 80099f8:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	22ff      	movs	r2, #255	; 0xff
 8009a00:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8009a02:	7cfb      	ldrb	r3, [r7, #19]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d103      	bne.n	8009a10 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	2201      	movs	r2, #1
 8009a0c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	2200      	movs	r2, #0
 8009a14:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8009a18:	7cfb      	ldrb	r3, [r7, #19]
}
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	371c      	adds	r7, #28
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	bd90      	pop	{r4, r7, pc}

08009a22 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009a22:	b580      	push	{r7, lr}
 8009a24:	b086      	sub	sp, #24
 8009a26:	af00      	add	r7, sp, #0
 8009a28:	60f8      	str	r0, [r7, #12]
 8009a2a:	60b9      	str	r1, [r7, #8]
 8009a2c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	685b      	ldr	r3, [r3, #4]
 8009a34:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009a38:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009a3c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8009a3e:	697b      	ldr	r3, [r7, #20]
 8009a40:	0c1b      	lsrs	r3, r3, #16
 8009a42:	b2da      	uxtb	r2, r3
 8009a44:	68bb      	ldr	r3, [r7, #8]
 8009a46:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8009a48:	697b      	ldr	r3, [r7, #20]
 8009a4a:	0a1b      	lsrs	r3, r3, #8
 8009a4c:	b2db      	uxtb	r3, r3
 8009a4e:	f003 031f 	and.w	r3, r3, #31
 8009a52:	b2da      	uxtb	r2, r3
 8009a54:	68bb      	ldr	r3, [r7, #8]
 8009a56:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8009a58:	697b      	ldr	r3, [r7, #20]
 8009a5a:	b2db      	uxtb	r3, r3
 8009a5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009a60:	b2da      	uxtb	r2, r3
 8009a62:	68bb      	ldr	r3, [r7, #8]
 8009a64:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8009a66:	697b      	ldr	r3, [r7, #20]
 8009a68:	0b5b      	lsrs	r3, r3, #13
 8009a6a:	b2db      	uxtb	r3, r3
 8009a6c:	f003 0307 	and.w	r3, r3, #7
 8009a70:	b2da      	uxtb	r2, r3
 8009a72:	68bb      	ldr	r3, [r7, #8]
 8009a74:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d11a      	bne.n	8009ab2 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8009a7c:	68bb      	ldr	r3, [r7, #8]
 8009a7e:	78db      	ldrb	r3, [r3, #3]
 8009a80:	4618      	mov	r0, r3
 8009a82:	f000 f8d3 	bl	8009c2c <RTC_Bcd2ToByte>
 8009a86:	4603      	mov	r3, r0
 8009a88:	461a      	mov	r2, r3
 8009a8a:	68bb      	ldr	r3, [r7, #8]
 8009a8c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8009a8e:	68bb      	ldr	r3, [r7, #8]
 8009a90:	785b      	ldrb	r3, [r3, #1]
 8009a92:	4618      	mov	r0, r3
 8009a94:	f000 f8ca 	bl	8009c2c <RTC_Bcd2ToByte>
 8009a98:	4603      	mov	r3, r0
 8009a9a:	461a      	mov	r2, r3
 8009a9c:	68bb      	ldr	r3, [r7, #8]
 8009a9e:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8009aa0:	68bb      	ldr	r3, [r7, #8]
 8009aa2:	789b      	ldrb	r3, [r3, #2]
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	f000 f8c1 	bl	8009c2c <RTC_Bcd2ToByte>
 8009aaa:	4603      	mov	r3, r0
 8009aac:	461a      	mov	r2, r3
 8009aae:	68bb      	ldr	r3, [r7, #8]
 8009ab0:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8009ab2:	2300      	movs	r3, #0
}
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	3718      	adds	r7, #24
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	bd80      	pop	{r7, pc}

08009abc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b084      	sub	sp, #16
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	68da      	ldr	r2, [r3, #12]
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009ad2:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8009ad4:	f7fc f80c 	bl	8005af0 <HAL_GetTick>
 8009ad8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009ada:	e009      	b.n	8009af0 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009adc:	f7fc f808 	bl	8005af0 <HAL_GetTick>
 8009ae0:	4602      	mov	r2, r0
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	1ad3      	subs	r3, r2, r3
 8009ae6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009aea:	d901      	bls.n	8009af0 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8009aec:	2303      	movs	r3, #3
 8009aee:	e007      	b.n	8009b00 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	68db      	ldr	r3, [r3, #12]
 8009af6:	f003 0320 	and.w	r3, r3, #32
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d0ee      	beq.n	8009adc <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8009afe:	2300      	movs	r3, #0
}
 8009b00:	4618      	mov	r0, r3
 8009b02:	3710      	adds	r7, #16
 8009b04:	46bd      	mov	sp, r7
 8009b06:	bd80      	pop	{r7, pc}

08009b08 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b084      	sub	sp, #16
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009b10:	2300      	movs	r3, #0
 8009b12:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	68db      	ldr	r3, [r3, #12]
 8009b1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d120      	bne.n	8009b64 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009b2a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8009b2c:	f7fb ffe0 	bl	8005af0 <HAL_GetTick>
 8009b30:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009b32:	e00d      	b.n	8009b50 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8009b34:	f7fb ffdc 	bl	8005af0 <HAL_GetTick>
 8009b38:	4602      	mov	r2, r0
 8009b3a:	68bb      	ldr	r3, [r7, #8]
 8009b3c:	1ad3      	subs	r3, r2, r3
 8009b3e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009b42:	d905      	bls.n	8009b50 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8009b44:	2303      	movs	r3, #3
 8009b46:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2203      	movs	r2, #3
 8009b4c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	68db      	ldr	r3, [r3, #12]
 8009b56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d102      	bne.n	8009b64 <RTC_EnterInitMode+0x5c>
 8009b5e:	7bfb      	ldrb	r3, [r7, #15]
 8009b60:	2b03      	cmp	r3, #3
 8009b62:	d1e7      	bne.n	8009b34 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8009b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b66:	4618      	mov	r0, r3
 8009b68:	3710      	adds	r7, #16
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	bd80      	pop	{r7, pc}
	...

08009b70 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b084      	sub	sp, #16
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009b78:	2300      	movs	r3, #0
 8009b7a:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8009b7c:	4b1a      	ldr	r3, [pc, #104]	; (8009be8 <RTC_ExitInitMode+0x78>)
 8009b7e:	68db      	ldr	r3, [r3, #12]
 8009b80:	4a19      	ldr	r2, [pc, #100]	; (8009be8 <RTC_ExitInitMode+0x78>)
 8009b82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009b86:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8009b88:	4b17      	ldr	r3, [pc, #92]	; (8009be8 <RTC_ExitInitMode+0x78>)
 8009b8a:	689b      	ldr	r3, [r3, #8]
 8009b8c:	f003 0320 	and.w	r3, r3, #32
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d10c      	bne.n	8009bae <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009b94:	6878      	ldr	r0, [r7, #4]
 8009b96:	f7ff ff91 	bl	8009abc <HAL_RTC_WaitForSynchro>
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d01e      	beq.n	8009bde <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	2203      	movs	r2, #3
 8009ba4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8009ba8:	2303      	movs	r3, #3
 8009baa:	73fb      	strb	r3, [r7, #15]
 8009bac:	e017      	b.n	8009bde <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009bae:	4b0e      	ldr	r3, [pc, #56]	; (8009be8 <RTC_ExitInitMode+0x78>)
 8009bb0:	689b      	ldr	r3, [r3, #8]
 8009bb2:	4a0d      	ldr	r2, [pc, #52]	; (8009be8 <RTC_ExitInitMode+0x78>)
 8009bb4:	f023 0320 	bic.w	r3, r3, #32
 8009bb8:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009bba:	6878      	ldr	r0, [r7, #4]
 8009bbc:	f7ff ff7e 	bl	8009abc <HAL_RTC_WaitForSynchro>
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d005      	beq.n	8009bd2 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	2203      	movs	r2, #3
 8009bca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8009bce:	2303      	movs	r3, #3
 8009bd0:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009bd2:	4b05      	ldr	r3, [pc, #20]	; (8009be8 <RTC_ExitInitMode+0x78>)
 8009bd4:	689b      	ldr	r3, [r3, #8]
 8009bd6:	4a04      	ldr	r2, [pc, #16]	; (8009be8 <RTC_ExitInitMode+0x78>)
 8009bd8:	f043 0320 	orr.w	r3, r3, #32
 8009bdc:	6093      	str	r3, [r2, #8]
  }

  return status;
 8009bde:	7bfb      	ldrb	r3, [r7, #15]
}
 8009be0:	4618      	mov	r0, r3
 8009be2:	3710      	adds	r7, #16
 8009be4:	46bd      	mov	sp, r7
 8009be6:	bd80      	pop	{r7, pc}
 8009be8:	40002800 	.word	0x40002800

08009bec <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8009bec:	b480      	push	{r7}
 8009bee:	b085      	sub	sp, #20
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	4603      	mov	r3, r0
 8009bf4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8009bfa:	79fb      	ldrb	r3, [r7, #7]
 8009bfc:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8009bfe:	e005      	b.n	8009c0c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	3301      	adds	r3, #1
 8009c04:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8009c06:	7afb      	ldrb	r3, [r7, #11]
 8009c08:	3b0a      	subs	r3, #10
 8009c0a:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8009c0c:	7afb      	ldrb	r3, [r7, #11]
 8009c0e:	2b09      	cmp	r3, #9
 8009c10:	d8f6      	bhi.n	8009c00 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	b2db      	uxtb	r3, r3
 8009c16:	011b      	lsls	r3, r3, #4
 8009c18:	b2da      	uxtb	r2, r3
 8009c1a:	7afb      	ldrb	r3, [r7, #11]
 8009c1c:	4313      	orrs	r3, r2
 8009c1e:	b2db      	uxtb	r3, r3
}
 8009c20:	4618      	mov	r0, r3
 8009c22:	3714      	adds	r7, #20
 8009c24:	46bd      	mov	sp, r7
 8009c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2a:	4770      	bx	lr

08009c2c <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8009c2c:	b480      	push	{r7}
 8009c2e:	b085      	sub	sp, #20
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	4603      	mov	r3, r0
 8009c34:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8009c36:	79fb      	ldrb	r3, [r7, #7]
 8009c38:	091b      	lsrs	r3, r3, #4
 8009c3a:	b2db      	uxtb	r3, r3
 8009c3c:	461a      	mov	r2, r3
 8009c3e:	0092      	lsls	r2, r2, #2
 8009c40:	4413      	add	r3, r2
 8009c42:	005b      	lsls	r3, r3, #1
 8009c44:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8009c46:	79fb      	ldrb	r3, [r7, #7]
 8009c48:	f003 030f 	and.w	r3, r3, #15
 8009c4c:	b2da      	uxtb	r2, r3
 8009c4e:	7bfb      	ldrb	r3, [r7, #15]
 8009c50:	4413      	add	r3, r2
 8009c52:	b2db      	uxtb	r3, r3
}
 8009c54:	4618      	mov	r0, r3
 8009c56:	3714      	adds	r7, #20
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5e:	4770      	bx	lr

08009c60 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b084      	sub	sp, #16
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d101      	bne.n	8009c72 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009c6e:	2301      	movs	r3, #1
 8009c70:	e095      	b.n	8009d9e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d108      	bne.n	8009c8c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	685b      	ldr	r3, [r3, #4]
 8009c7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009c82:	d009      	beq.n	8009c98 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	2200      	movs	r2, #0
 8009c88:	61da      	str	r2, [r3, #28]
 8009c8a:	e005      	b.n	8009c98 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	2200      	movs	r2, #0
 8009c90:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	2200      	movs	r2, #0
 8009c96:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009ca4:	b2db      	uxtb	r3, r3
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d106      	bne.n	8009cb8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	2200      	movs	r2, #0
 8009cae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009cb2:	6878      	ldr	r0, [r7, #4]
 8009cb4:	f7fa fdea 	bl	800488c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2202      	movs	r2, #2
 8009cbc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	681a      	ldr	r2, [r3, #0]
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009cce:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	68db      	ldr	r3, [r3, #12]
 8009cd4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009cd8:	d902      	bls.n	8009ce0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009cda:	2300      	movs	r3, #0
 8009cdc:	60fb      	str	r3, [r7, #12]
 8009cde:	e002      	b.n	8009ce6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009ce0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009ce4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	68db      	ldr	r3, [r3, #12]
 8009cea:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8009cee:	d007      	beq.n	8009d00 <HAL_SPI_Init+0xa0>
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	68db      	ldr	r3, [r3, #12]
 8009cf4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009cf8:	d002      	beq.n	8009d00 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	685b      	ldr	r3, [r3, #4]
 8009d04:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	689b      	ldr	r3, [r3, #8]
 8009d0c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009d10:	431a      	orrs	r2, r3
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	691b      	ldr	r3, [r3, #16]
 8009d16:	f003 0302 	and.w	r3, r3, #2
 8009d1a:	431a      	orrs	r2, r3
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	695b      	ldr	r3, [r3, #20]
 8009d20:	f003 0301 	and.w	r3, r3, #1
 8009d24:	431a      	orrs	r2, r3
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	699b      	ldr	r3, [r3, #24]
 8009d2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009d2e:	431a      	orrs	r2, r3
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	69db      	ldr	r3, [r3, #28]
 8009d34:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009d38:	431a      	orrs	r2, r3
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	6a1b      	ldr	r3, [r3, #32]
 8009d3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d42:	ea42 0103 	orr.w	r1, r2, r3
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d4a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	430a      	orrs	r2, r1
 8009d54:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	699b      	ldr	r3, [r3, #24]
 8009d5a:	0c1b      	lsrs	r3, r3, #16
 8009d5c:	f003 0204 	and.w	r2, r3, #4
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d64:	f003 0310 	and.w	r3, r3, #16
 8009d68:	431a      	orrs	r2, r3
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d6e:	f003 0308 	and.w	r3, r3, #8
 8009d72:	431a      	orrs	r2, r3
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	68db      	ldr	r3, [r3, #12]
 8009d78:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8009d7c:	ea42 0103 	orr.w	r1, r2, r3
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	430a      	orrs	r2, r1
 8009d8c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	2200      	movs	r2, #0
 8009d92:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2201      	movs	r2, #1
 8009d98:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8009d9c:	2300      	movs	r3, #0
}
 8009d9e:	4618      	mov	r0, r3
 8009da0:	3710      	adds	r7, #16
 8009da2:	46bd      	mov	sp, r7
 8009da4:	bd80      	pop	{r7, pc}

08009da6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009da6:	b580      	push	{r7, lr}
 8009da8:	b088      	sub	sp, #32
 8009daa:	af00      	add	r7, sp, #0
 8009dac:	60f8      	str	r0, [r7, #12]
 8009dae:	60b9      	str	r1, [r7, #8]
 8009db0:	603b      	str	r3, [r7, #0]
 8009db2:	4613      	mov	r3, r2
 8009db4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009db6:	2300      	movs	r3, #0
 8009db8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009dc0:	2b01      	cmp	r3, #1
 8009dc2:	d101      	bne.n	8009dc8 <HAL_SPI_Transmit+0x22>
 8009dc4:	2302      	movs	r3, #2
 8009dc6:	e158      	b.n	800a07a <HAL_SPI_Transmit+0x2d4>
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	2201      	movs	r2, #1
 8009dcc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009dd0:	f7fb fe8e 	bl	8005af0 <HAL_GetTick>
 8009dd4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8009dd6:	88fb      	ldrh	r3, [r7, #6]
 8009dd8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009de0:	b2db      	uxtb	r3, r3
 8009de2:	2b01      	cmp	r3, #1
 8009de4:	d002      	beq.n	8009dec <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8009de6:	2302      	movs	r3, #2
 8009de8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009dea:	e13d      	b.n	800a068 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8009dec:	68bb      	ldr	r3, [r7, #8]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d002      	beq.n	8009df8 <HAL_SPI_Transmit+0x52>
 8009df2:	88fb      	ldrh	r3, [r7, #6]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d102      	bne.n	8009dfe <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8009df8:	2301      	movs	r3, #1
 8009dfa:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009dfc:	e134      	b.n	800a068 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	2203      	movs	r2, #3
 8009e02:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	2200      	movs	r2, #0
 8009e0a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	68ba      	ldr	r2, [r7, #8]
 8009e10:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	88fa      	ldrh	r2, [r7, #6]
 8009e16:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	88fa      	ldrh	r2, [r7, #6]
 8009e1c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	2200      	movs	r2, #0
 8009e22:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	2200      	movs	r2, #0
 8009e28:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	2200      	movs	r2, #0
 8009e30:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	2200      	movs	r2, #0
 8009e38:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	689b      	ldr	r3, [r3, #8]
 8009e44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009e48:	d10f      	bne.n	8009e6a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	681a      	ldr	r2, [r3, #0]
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009e58:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	681a      	ldr	r2, [r3, #0]
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009e68:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e74:	2b40      	cmp	r3, #64	; 0x40
 8009e76:	d007      	beq.n	8009e88 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	681a      	ldr	r2, [r3, #0]
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009e86:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	68db      	ldr	r3, [r3, #12]
 8009e8c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009e90:	d94b      	bls.n	8009f2a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	685b      	ldr	r3, [r3, #4]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d002      	beq.n	8009ea0 <HAL_SPI_Transmit+0xfa>
 8009e9a:	8afb      	ldrh	r3, [r7, #22]
 8009e9c:	2b01      	cmp	r3, #1
 8009e9e:	d13e      	bne.n	8009f1e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ea4:	881a      	ldrh	r2, [r3, #0]
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009eb0:	1c9a      	adds	r2, r3, #2
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009eba:	b29b      	uxth	r3, r3
 8009ebc:	3b01      	subs	r3, #1
 8009ebe:	b29a      	uxth	r2, r3
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009ec4:	e02b      	b.n	8009f1e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	689b      	ldr	r3, [r3, #8]
 8009ecc:	f003 0302 	and.w	r3, r3, #2
 8009ed0:	2b02      	cmp	r3, #2
 8009ed2:	d112      	bne.n	8009efa <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ed8:	881a      	ldrh	r2, [r3, #0]
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ee4:	1c9a      	adds	r2, r3, #2
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009eee:	b29b      	uxth	r3, r3
 8009ef0:	3b01      	subs	r3, #1
 8009ef2:	b29a      	uxth	r2, r3
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009ef8:	e011      	b.n	8009f1e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009efa:	f7fb fdf9 	bl	8005af0 <HAL_GetTick>
 8009efe:	4602      	mov	r2, r0
 8009f00:	69bb      	ldr	r3, [r7, #24]
 8009f02:	1ad3      	subs	r3, r2, r3
 8009f04:	683a      	ldr	r2, [r7, #0]
 8009f06:	429a      	cmp	r2, r3
 8009f08:	d803      	bhi.n	8009f12 <HAL_SPI_Transmit+0x16c>
 8009f0a:	683b      	ldr	r3, [r7, #0]
 8009f0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009f10:	d102      	bne.n	8009f18 <HAL_SPI_Transmit+0x172>
 8009f12:	683b      	ldr	r3, [r7, #0]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d102      	bne.n	8009f1e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8009f18:	2303      	movs	r3, #3
 8009f1a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009f1c:	e0a4      	b.n	800a068 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009f22:	b29b      	uxth	r3, r3
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d1ce      	bne.n	8009ec6 <HAL_SPI_Transmit+0x120>
 8009f28:	e07c      	b.n	800a024 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	685b      	ldr	r3, [r3, #4]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d002      	beq.n	8009f38 <HAL_SPI_Transmit+0x192>
 8009f32:	8afb      	ldrh	r3, [r7, #22]
 8009f34:	2b01      	cmp	r3, #1
 8009f36:	d170      	bne.n	800a01a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009f3c:	b29b      	uxth	r3, r3
 8009f3e:	2b01      	cmp	r3, #1
 8009f40:	d912      	bls.n	8009f68 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f46:	881a      	ldrh	r2, [r3, #0]
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f52:	1c9a      	adds	r2, r3, #2
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009f5c:	b29b      	uxth	r3, r3
 8009f5e:	3b02      	subs	r3, #2
 8009f60:	b29a      	uxth	r2, r3
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009f66:	e058      	b.n	800a01a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	330c      	adds	r3, #12
 8009f72:	7812      	ldrb	r2, [r2, #0]
 8009f74:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f7a:	1c5a      	adds	r2, r3, #1
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009f84:	b29b      	uxth	r3, r3
 8009f86:	3b01      	subs	r3, #1
 8009f88:	b29a      	uxth	r2, r3
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8009f8e:	e044      	b.n	800a01a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	689b      	ldr	r3, [r3, #8]
 8009f96:	f003 0302 	and.w	r3, r3, #2
 8009f9a:	2b02      	cmp	r3, #2
 8009f9c:	d12b      	bne.n	8009ff6 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009fa2:	b29b      	uxth	r3, r3
 8009fa4:	2b01      	cmp	r3, #1
 8009fa6:	d912      	bls.n	8009fce <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fac:	881a      	ldrh	r2, [r3, #0]
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fb8:	1c9a      	adds	r2, r3, #2
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009fc2:	b29b      	uxth	r3, r3
 8009fc4:	3b02      	subs	r3, #2
 8009fc6:	b29a      	uxth	r2, r3
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009fcc:	e025      	b.n	800a01a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	330c      	adds	r3, #12
 8009fd8:	7812      	ldrb	r2, [r2, #0]
 8009fda:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fe0:	1c5a      	adds	r2, r3, #1
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009fea:	b29b      	uxth	r3, r3
 8009fec:	3b01      	subs	r3, #1
 8009fee:	b29a      	uxth	r2, r3
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009ff4:	e011      	b.n	800a01a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009ff6:	f7fb fd7b 	bl	8005af0 <HAL_GetTick>
 8009ffa:	4602      	mov	r2, r0
 8009ffc:	69bb      	ldr	r3, [r7, #24]
 8009ffe:	1ad3      	subs	r3, r2, r3
 800a000:	683a      	ldr	r2, [r7, #0]
 800a002:	429a      	cmp	r2, r3
 800a004:	d803      	bhi.n	800a00e <HAL_SPI_Transmit+0x268>
 800a006:	683b      	ldr	r3, [r7, #0]
 800a008:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a00c:	d102      	bne.n	800a014 <HAL_SPI_Transmit+0x26e>
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d102      	bne.n	800a01a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800a014:	2303      	movs	r3, #3
 800a016:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a018:	e026      	b.n	800a068 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a01e:	b29b      	uxth	r3, r3
 800a020:	2b00      	cmp	r3, #0
 800a022:	d1b5      	bne.n	8009f90 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a024:	69ba      	ldr	r2, [r7, #24]
 800a026:	6839      	ldr	r1, [r7, #0]
 800a028:	68f8      	ldr	r0, [r7, #12]
 800a02a:	f001 f9dd 	bl	800b3e8 <SPI_EndRxTxTransaction>
 800a02e:	4603      	mov	r3, r0
 800a030:	2b00      	cmp	r3, #0
 800a032:	d002      	beq.n	800a03a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	2220      	movs	r2, #32
 800a038:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	689b      	ldr	r3, [r3, #8]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d10a      	bne.n	800a058 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a042:	2300      	movs	r3, #0
 800a044:	613b      	str	r3, [r7, #16]
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	68db      	ldr	r3, [r3, #12]
 800a04c:	613b      	str	r3, [r7, #16]
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	689b      	ldr	r3, [r3, #8]
 800a054:	613b      	str	r3, [r7, #16]
 800a056:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d002      	beq.n	800a066 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800a060:	2301      	movs	r3, #1
 800a062:	77fb      	strb	r3, [r7, #31]
 800a064:	e000      	b.n	800a068 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800a066:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	2201      	movs	r2, #1
 800a06c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	2200      	movs	r2, #0
 800a074:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800a078:	7ffb      	ldrb	r3, [r7, #31]
}
 800a07a:	4618      	mov	r0, r3
 800a07c:	3720      	adds	r7, #32
 800a07e:	46bd      	mov	sp, r7
 800a080:	bd80      	pop	{r7, pc}

0800a082 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a082:	b580      	push	{r7, lr}
 800a084:	b088      	sub	sp, #32
 800a086:	af02      	add	r7, sp, #8
 800a088:	60f8      	str	r0, [r7, #12]
 800a08a:	60b9      	str	r1, [r7, #8]
 800a08c:	603b      	str	r3, [r7, #0]
 800a08e:	4613      	mov	r3, r2
 800a090:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a092:	2300      	movs	r3, #0
 800a094:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	685b      	ldr	r3, [r3, #4]
 800a09a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a09e:	d112      	bne.n	800a0c6 <HAL_SPI_Receive+0x44>
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	689b      	ldr	r3, [r3, #8]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d10e      	bne.n	800a0c6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	2204      	movs	r2, #4
 800a0ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800a0b0:	88fa      	ldrh	r2, [r7, #6]
 800a0b2:	683b      	ldr	r3, [r7, #0]
 800a0b4:	9300      	str	r3, [sp, #0]
 800a0b6:	4613      	mov	r3, r2
 800a0b8:	68ba      	ldr	r2, [r7, #8]
 800a0ba:	68b9      	ldr	r1, [r7, #8]
 800a0bc:	68f8      	ldr	r0, [r7, #12]
 800a0be:	f000 f910 	bl	800a2e2 <HAL_SPI_TransmitReceive>
 800a0c2:	4603      	mov	r3, r0
 800a0c4:	e109      	b.n	800a2da <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a0cc:	2b01      	cmp	r3, #1
 800a0ce:	d101      	bne.n	800a0d4 <HAL_SPI_Receive+0x52>
 800a0d0:	2302      	movs	r3, #2
 800a0d2:	e102      	b.n	800a2da <HAL_SPI_Receive+0x258>
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	2201      	movs	r2, #1
 800a0d8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a0dc:	f7fb fd08 	bl	8005af0 <HAL_GetTick>
 800a0e0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a0e8:	b2db      	uxtb	r3, r3
 800a0ea:	2b01      	cmp	r3, #1
 800a0ec:	d002      	beq.n	800a0f4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800a0ee:	2302      	movs	r3, #2
 800a0f0:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a0f2:	e0e9      	b.n	800a2c8 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 800a0f4:	68bb      	ldr	r3, [r7, #8]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d002      	beq.n	800a100 <HAL_SPI_Receive+0x7e>
 800a0fa:	88fb      	ldrh	r3, [r7, #6]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d102      	bne.n	800a106 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800a100:	2301      	movs	r3, #1
 800a102:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a104:	e0e0      	b.n	800a2c8 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	2204      	movs	r2, #4
 800a10a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	2200      	movs	r2, #0
 800a112:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	68ba      	ldr	r2, [r7, #8]
 800a118:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	88fa      	ldrh	r2, [r7, #6]
 800a11e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	88fa      	ldrh	r2, [r7, #6]
 800a126:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	2200      	movs	r2, #0
 800a12e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	2200      	movs	r2, #0
 800a134:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	2200      	movs	r2, #0
 800a13a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	2200      	movs	r2, #0
 800a140:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	2200      	movs	r2, #0
 800a146:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	68db      	ldr	r3, [r3, #12]
 800a14c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a150:	d908      	bls.n	800a164 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	685a      	ldr	r2, [r3, #4]
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a160:	605a      	str	r2, [r3, #4]
 800a162:	e007      	b.n	800a174 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	685a      	ldr	r2, [r3, #4]
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a172:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	689b      	ldr	r3, [r3, #8]
 800a178:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a17c:	d10f      	bne.n	800a19e <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	681a      	ldr	r2, [r3, #0]
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a18c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	681a      	ldr	r2, [r3, #0]
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a19c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1a8:	2b40      	cmp	r3, #64	; 0x40
 800a1aa:	d007      	beq.n	800a1bc <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	681a      	ldr	r2, [r3, #0]
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a1ba:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	68db      	ldr	r3, [r3, #12]
 800a1c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a1c4:	d867      	bhi.n	800a296 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800a1c6:	e030      	b.n	800a22a <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	689b      	ldr	r3, [r3, #8]
 800a1ce:	f003 0301 	and.w	r3, r3, #1
 800a1d2:	2b01      	cmp	r3, #1
 800a1d4:	d117      	bne.n	800a206 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	f103 020c 	add.w	r2, r3, #12
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1e2:	7812      	ldrb	r2, [r2, #0]
 800a1e4:	b2d2      	uxtb	r2, r2
 800a1e6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1ec:	1c5a      	adds	r2, r3, #1
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a1f8:	b29b      	uxth	r3, r3
 800a1fa:	3b01      	subs	r3, #1
 800a1fc:	b29a      	uxth	r2, r3
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800a204:	e011      	b.n	800a22a <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a206:	f7fb fc73 	bl	8005af0 <HAL_GetTick>
 800a20a:	4602      	mov	r2, r0
 800a20c:	693b      	ldr	r3, [r7, #16]
 800a20e:	1ad3      	subs	r3, r2, r3
 800a210:	683a      	ldr	r2, [r7, #0]
 800a212:	429a      	cmp	r2, r3
 800a214:	d803      	bhi.n	800a21e <HAL_SPI_Receive+0x19c>
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a21c:	d102      	bne.n	800a224 <HAL_SPI_Receive+0x1a2>
 800a21e:	683b      	ldr	r3, [r7, #0]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d102      	bne.n	800a22a <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 800a224:	2303      	movs	r3, #3
 800a226:	75fb      	strb	r3, [r7, #23]
          goto error;
 800a228:	e04e      	b.n	800a2c8 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a230:	b29b      	uxth	r3, r3
 800a232:	2b00      	cmp	r3, #0
 800a234:	d1c8      	bne.n	800a1c8 <HAL_SPI_Receive+0x146>
 800a236:	e034      	b.n	800a2a2 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	689b      	ldr	r3, [r3, #8]
 800a23e:	f003 0301 	and.w	r3, r3, #1
 800a242:	2b01      	cmp	r3, #1
 800a244:	d115      	bne.n	800a272 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	68da      	ldr	r2, [r3, #12]
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a250:	b292      	uxth	r2, r2
 800a252:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a258:	1c9a      	adds	r2, r3, #2
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a264:	b29b      	uxth	r3, r3
 800a266:	3b01      	subs	r3, #1
 800a268:	b29a      	uxth	r2, r3
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800a270:	e011      	b.n	800a296 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a272:	f7fb fc3d 	bl	8005af0 <HAL_GetTick>
 800a276:	4602      	mov	r2, r0
 800a278:	693b      	ldr	r3, [r7, #16]
 800a27a:	1ad3      	subs	r3, r2, r3
 800a27c:	683a      	ldr	r2, [r7, #0]
 800a27e:	429a      	cmp	r2, r3
 800a280:	d803      	bhi.n	800a28a <HAL_SPI_Receive+0x208>
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a288:	d102      	bne.n	800a290 <HAL_SPI_Receive+0x20e>
 800a28a:	683b      	ldr	r3, [r7, #0]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d102      	bne.n	800a296 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 800a290:	2303      	movs	r3, #3
 800a292:	75fb      	strb	r3, [r7, #23]
          goto error;
 800a294:	e018      	b.n	800a2c8 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a29c:	b29b      	uxth	r3, r3
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d1ca      	bne.n	800a238 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a2a2:	693a      	ldr	r2, [r7, #16]
 800a2a4:	6839      	ldr	r1, [r7, #0]
 800a2a6:	68f8      	ldr	r0, [r7, #12]
 800a2a8:	f001 f846 	bl	800b338 <SPI_EndRxTransaction>
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d002      	beq.n	800a2b8 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	2220      	movs	r2, #32
 800a2b6:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d002      	beq.n	800a2c6 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 800a2c0:	2301      	movs	r3, #1
 800a2c2:	75fb      	strb	r3, [r7, #23]
 800a2c4:	e000      	b.n	800a2c8 <HAL_SPI_Receive+0x246>
  }

error :
 800a2c6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	2201      	movs	r2, #1
 800a2cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800a2d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2da:	4618      	mov	r0, r3
 800a2dc:	3718      	adds	r7, #24
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	bd80      	pop	{r7, pc}

0800a2e2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a2e2:	b580      	push	{r7, lr}
 800a2e4:	b08a      	sub	sp, #40	; 0x28
 800a2e6:	af00      	add	r7, sp, #0
 800a2e8:	60f8      	str	r0, [r7, #12]
 800a2ea:	60b9      	str	r1, [r7, #8]
 800a2ec:	607a      	str	r2, [r7, #4]
 800a2ee:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a2f0:	2301      	movs	r3, #1
 800a2f2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a300:	2b01      	cmp	r3, #1
 800a302:	d101      	bne.n	800a308 <HAL_SPI_TransmitReceive+0x26>
 800a304:	2302      	movs	r3, #2
 800a306:	e1fb      	b.n	800a700 <HAL_SPI_TransmitReceive+0x41e>
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	2201      	movs	r2, #1
 800a30c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a310:	f7fb fbee 	bl	8005af0 <HAL_GetTick>
 800a314:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a31c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	685b      	ldr	r3, [r3, #4]
 800a322:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800a324:	887b      	ldrh	r3, [r7, #2]
 800a326:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800a328:	887b      	ldrh	r3, [r7, #2]
 800a32a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a32c:	7efb      	ldrb	r3, [r7, #27]
 800a32e:	2b01      	cmp	r3, #1
 800a330:	d00e      	beq.n	800a350 <HAL_SPI_TransmitReceive+0x6e>
 800a332:	697b      	ldr	r3, [r7, #20]
 800a334:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a338:	d106      	bne.n	800a348 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	689b      	ldr	r3, [r3, #8]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d102      	bne.n	800a348 <HAL_SPI_TransmitReceive+0x66>
 800a342:	7efb      	ldrb	r3, [r7, #27]
 800a344:	2b04      	cmp	r3, #4
 800a346:	d003      	beq.n	800a350 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800a348:	2302      	movs	r3, #2
 800a34a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800a34e:	e1cd      	b.n	800a6ec <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a350:	68bb      	ldr	r3, [r7, #8]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d005      	beq.n	800a362 <HAL_SPI_TransmitReceive+0x80>
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d002      	beq.n	800a362 <HAL_SPI_TransmitReceive+0x80>
 800a35c:	887b      	ldrh	r3, [r7, #2]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d103      	bne.n	800a36a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800a362:	2301      	movs	r3, #1
 800a364:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800a368:	e1c0      	b.n	800a6ec <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a370:	b2db      	uxtb	r3, r3
 800a372:	2b04      	cmp	r3, #4
 800a374:	d003      	beq.n	800a37e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	2205      	movs	r2, #5
 800a37a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	2200      	movs	r2, #0
 800a382:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	687a      	ldr	r2, [r7, #4]
 800a388:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	887a      	ldrh	r2, [r7, #2]
 800a38e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	887a      	ldrh	r2, [r7, #2]
 800a396:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	68ba      	ldr	r2, [r7, #8]
 800a39e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	887a      	ldrh	r2, [r7, #2]
 800a3a4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	887a      	ldrh	r2, [r7, #2]
 800a3aa:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	68db      	ldr	r3, [r3, #12]
 800a3bc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a3c0:	d802      	bhi.n	800a3c8 <HAL_SPI_TransmitReceive+0xe6>
 800a3c2:	8a3b      	ldrh	r3, [r7, #16]
 800a3c4:	2b01      	cmp	r3, #1
 800a3c6:	d908      	bls.n	800a3da <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	685a      	ldr	r2, [r3, #4]
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a3d6:	605a      	str	r2, [r3, #4]
 800a3d8:	e007      	b.n	800a3ea <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	685a      	ldr	r2, [r3, #4]
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a3e8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3f4:	2b40      	cmp	r3, #64	; 0x40
 800a3f6:	d007      	beq.n	800a408 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	681a      	ldr	r2, [r3, #0]
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a406:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	68db      	ldr	r3, [r3, #12]
 800a40c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a410:	d97c      	bls.n	800a50c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	685b      	ldr	r3, [r3, #4]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d002      	beq.n	800a420 <HAL_SPI_TransmitReceive+0x13e>
 800a41a:	8a7b      	ldrh	r3, [r7, #18]
 800a41c:	2b01      	cmp	r3, #1
 800a41e:	d169      	bne.n	800a4f4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a424:	881a      	ldrh	r2, [r3, #0]
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a430:	1c9a      	adds	r2, r3, #2
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a43a:	b29b      	uxth	r3, r3
 800a43c:	3b01      	subs	r3, #1
 800a43e:	b29a      	uxth	r2, r3
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a444:	e056      	b.n	800a4f4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	689b      	ldr	r3, [r3, #8]
 800a44c:	f003 0302 	and.w	r3, r3, #2
 800a450:	2b02      	cmp	r3, #2
 800a452:	d11b      	bne.n	800a48c <HAL_SPI_TransmitReceive+0x1aa>
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a458:	b29b      	uxth	r3, r3
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d016      	beq.n	800a48c <HAL_SPI_TransmitReceive+0x1aa>
 800a45e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a460:	2b01      	cmp	r3, #1
 800a462:	d113      	bne.n	800a48c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a468:	881a      	ldrh	r2, [r3, #0]
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a474:	1c9a      	adds	r2, r3, #2
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a47e:	b29b      	uxth	r3, r3
 800a480:	3b01      	subs	r3, #1
 800a482:	b29a      	uxth	r2, r3
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a488:	2300      	movs	r3, #0
 800a48a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	689b      	ldr	r3, [r3, #8]
 800a492:	f003 0301 	and.w	r3, r3, #1
 800a496:	2b01      	cmp	r3, #1
 800a498:	d11c      	bne.n	800a4d4 <HAL_SPI_TransmitReceive+0x1f2>
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a4a0:	b29b      	uxth	r3, r3
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d016      	beq.n	800a4d4 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	68da      	ldr	r2, [r3, #12]
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4b0:	b292      	uxth	r2, r2
 800a4b2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4b8:	1c9a      	adds	r2, r3, #2
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a4c4:	b29b      	uxth	r3, r3
 800a4c6:	3b01      	subs	r3, #1
 800a4c8:	b29a      	uxth	r2, r3
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a4d0:	2301      	movs	r3, #1
 800a4d2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a4d4:	f7fb fb0c 	bl	8005af0 <HAL_GetTick>
 800a4d8:	4602      	mov	r2, r0
 800a4da:	69fb      	ldr	r3, [r7, #28]
 800a4dc:	1ad3      	subs	r3, r2, r3
 800a4de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a4e0:	429a      	cmp	r2, r3
 800a4e2:	d807      	bhi.n	800a4f4 <HAL_SPI_TransmitReceive+0x212>
 800a4e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a4ea:	d003      	beq.n	800a4f4 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800a4ec:	2303      	movs	r3, #3
 800a4ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800a4f2:	e0fb      	b.n	800a6ec <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a4f8:	b29b      	uxth	r3, r3
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d1a3      	bne.n	800a446 <HAL_SPI_TransmitReceive+0x164>
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a504:	b29b      	uxth	r3, r3
 800a506:	2b00      	cmp	r3, #0
 800a508:	d19d      	bne.n	800a446 <HAL_SPI_TransmitReceive+0x164>
 800a50a:	e0df      	b.n	800a6cc <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	685b      	ldr	r3, [r3, #4]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d003      	beq.n	800a51c <HAL_SPI_TransmitReceive+0x23a>
 800a514:	8a7b      	ldrh	r3, [r7, #18]
 800a516:	2b01      	cmp	r3, #1
 800a518:	f040 80cb 	bne.w	800a6b2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a520:	b29b      	uxth	r3, r3
 800a522:	2b01      	cmp	r3, #1
 800a524:	d912      	bls.n	800a54c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a52a:	881a      	ldrh	r2, [r3, #0]
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a536:	1c9a      	adds	r2, r3, #2
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a540:	b29b      	uxth	r3, r3
 800a542:	3b02      	subs	r3, #2
 800a544:	b29a      	uxth	r2, r3
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a54a:	e0b2      	b.n	800a6b2 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	330c      	adds	r3, #12
 800a556:	7812      	ldrb	r2, [r2, #0]
 800a558:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a55e:	1c5a      	adds	r2, r3, #1
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a568:	b29b      	uxth	r3, r3
 800a56a:	3b01      	subs	r3, #1
 800a56c:	b29a      	uxth	r2, r3
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a572:	e09e      	b.n	800a6b2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	689b      	ldr	r3, [r3, #8]
 800a57a:	f003 0302 	and.w	r3, r3, #2
 800a57e:	2b02      	cmp	r3, #2
 800a580:	d134      	bne.n	800a5ec <HAL_SPI_TransmitReceive+0x30a>
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a586:	b29b      	uxth	r3, r3
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d02f      	beq.n	800a5ec <HAL_SPI_TransmitReceive+0x30a>
 800a58c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a58e:	2b01      	cmp	r3, #1
 800a590:	d12c      	bne.n	800a5ec <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a596:	b29b      	uxth	r3, r3
 800a598:	2b01      	cmp	r3, #1
 800a59a:	d912      	bls.n	800a5c2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5a0:	881a      	ldrh	r2, [r3, #0]
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5ac:	1c9a      	adds	r2, r3, #2
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a5b6:	b29b      	uxth	r3, r3
 800a5b8:	3b02      	subs	r3, #2
 800a5ba:	b29a      	uxth	r2, r3
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a5c0:	e012      	b.n	800a5e8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	330c      	adds	r3, #12
 800a5cc:	7812      	ldrb	r2, [r2, #0]
 800a5ce:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5d4:	1c5a      	adds	r2, r3, #1
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a5de:	b29b      	uxth	r3, r3
 800a5e0:	3b01      	subs	r3, #1
 800a5e2:	b29a      	uxth	r2, r3
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	689b      	ldr	r3, [r3, #8]
 800a5f2:	f003 0301 	and.w	r3, r3, #1
 800a5f6:	2b01      	cmp	r3, #1
 800a5f8:	d148      	bne.n	800a68c <HAL_SPI_TransmitReceive+0x3aa>
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a600:	b29b      	uxth	r3, r3
 800a602:	2b00      	cmp	r3, #0
 800a604:	d042      	beq.n	800a68c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a60c:	b29b      	uxth	r3, r3
 800a60e:	2b01      	cmp	r3, #1
 800a610:	d923      	bls.n	800a65a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	68da      	ldr	r2, [r3, #12]
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a61c:	b292      	uxth	r2, r2
 800a61e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a624:	1c9a      	adds	r2, r3, #2
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a630:	b29b      	uxth	r3, r3
 800a632:	3b02      	subs	r3, #2
 800a634:	b29a      	uxth	r2, r3
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a642:	b29b      	uxth	r3, r3
 800a644:	2b01      	cmp	r3, #1
 800a646:	d81f      	bhi.n	800a688 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	685a      	ldr	r2, [r3, #4]
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a656:	605a      	str	r2, [r3, #4]
 800a658:	e016      	b.n	800a688 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	f103 020c 	add.w	r2, r3, #12
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a666:	7812      	ldrb	r2, [r2, #0]
 800a668:	b2d2      	uxtb	r2, r2
 800a66a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a670:	1c5a      	adds	r2, r3, #1
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a67c:	b29b      	uxth	r3, r3
 800a67e:	3b01      	subs	r3, #1
 800a680:	b29a      	uxth	r2, r3
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a688:	2301      	movs	r3, #1
 800a68a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a68c:	f7fb fa30 	bl	8005af0 <HAL_GetTick>
 800a690:	4602      	mov	r2, r0
 800a692:	69fb      	ldr	r3, [r7, #28]
 800a694:	1ad3      	subs	r3, r2, r3
 800a696:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a698:	429a      	cmp	r2, r3
 800a69a:	d803      	bhi.n	800a6a4 <HAL_SPI_TransmitReceive+0x3c2>
 800a69c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a69e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a6a2:	d102      	bne.n	800a6aa <HAL_SPI_TransmitReceive+0x3c8>
 800a6a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d103      	bne.n	800a6b2 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800a6aa:	2303      	movs	r3, #3
 800a6ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800a6b0:	e01c      	b.n	800a6ec <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a6b6:	b29b      	uxth	r3, r3
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	f47f af5b 	bne.w	800a574 <HAL_SPI_TransmitReceive+0x292>
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a6c4:	b29b      	uxth	r3, r3
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	f47f af54 	bne.w	800a574 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a6cc:	69fa      	ldr	r2, [r7, #28]
 800a6ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a6d0:	68f8      	ldr	r0, [r7, #12]
 800a6d2:	f000 fe89 	bl	800b3e8 <SPI_EndRxTxTransaction>
 800a6d6:	4603      	mov	r3, r0
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d006      	beq.n	800a6ea <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800a6dc:	2301      	movs	r3, #1
 800a6de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	2220      	movs	r2, #32
 800a6e6:	661a      	str	r2, [r3, #96]	; 0x60
 800a6e8:	e000      	b.n	800a6ec <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800a6ea:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	2201      	movs	r2, #1
 800a6f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800a6fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800a700:	4618      	mov	r0, r3
 800a702:	3728      	adds	r7, #40	; 0x28
 800a704:	46bd      	mov	sp, r7
 800a706:	bd80      	pop	{r7, pc}

0800a708 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	b086      	sub	sp, #24
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	60f8      	str	r0, [r7, #12]
 800a710:	60b9      	str	r1, [r7, #8]
 800a712:	4613      	mov	r3, r2
 800a714:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a716:	2300      	movs	r3, #0
 800a718:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a720:	2b01      	cmp	r3, #1
 800a722:	d101      	bne.n	800a728 <HAL_SPI_Transmit_DMA+0x20>
 800a724:	2302      	movs	r3, #2
 800a726:	e0d8      	b.n	800a8da <HAL_SPI_Transmit_DMA+0x1d2>
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	2201      	movs	r2, #1
 800a72c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a736:	b2db      	uxtb	r3, r3
 800a738:	2b01      	cmp	r3, #1
 800a73a:	d002      	beq.n	800a742 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800a73c:	2302      	movs	r3, #2
 800a73e:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a740:	e0c6      	b.n	800a8d0 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 800a742:	68bb      	ldr	r3, [r7, #8]
 800a744:	2b00      	cmp	r3, #0
 800a746:	d002      	beq.n	800a74e <HAL_SPI_Transmit_DMA+0x46>
 800a748:	88fb      	ldrh	r3, [r7, #6]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d102      	bne.n	800a754 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800a74e:	2301      	movs	r3, #1
 800a750:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a752:	e0bd      	b.n	800a8d0 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	2203      	movs	r2, #3
 800a758:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	2200      	movs	r2, #0
 800a760:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	68ba      	ldr	r2, [r7, #8]
 800a766:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	88fa      	ldrh	r2, [r7, #6]
 800a76c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	88fa      	ldrh	r2, [r7, #6]
 800a772:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	2200      	movs	r2, #0
 800a778:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	2200      	movs	r2, #0
 800a77e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	2200      	movs	r2, #0
 800a784:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	2200      	movs	r2, #0
 800a78a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	2200      	movs	r2, #0
 800a792:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	689b      	ldr	r3, [r3, #8]
 800a79a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a79e:	d10f      	bne.n	800a7c0 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	681a      	ldr	r2, [r3, #0]
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a7ae:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	681a      	ldr	r2, [r3, #0]
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a7be:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7c4:	4a47      	ldr	r2, [pc, #284]	; (800a8e4 <HAL_SPI_Transmit_DMA+0x1dc>)
 800a7c6:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7cc:	4a46      	ldr	r2, [pc, #280]	; (800a8e8 <HAL_SPI_Transmit_DMA+0x1e0>)
 800a7ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7d4:	4a45      	ldr	r2, [pc, #276]	; (800a8ec <HAL_SPI_Transmit_DMA+0x1e4>)
 800a7d6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7dc:	2200      	movs	r2, #0
 800a7de:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	685a      	ldr	r2, [r3, #4]
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a7ee:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	68db      	ldr	r3, [r3, #12]
 800a7f4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a7f8:	d82d      	bhi.n	800a856 <HAL_SPI_Transmit_DMA+0x14e>
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7fe:	699b      	ldr	r3, [r3, #24]
 800a800:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a804:	d127      	bne.n	800a856 <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a80a:	b29b      	uxth	r3, r3
 800a80c:	f003 0301 	and.w	r3, r3, #1
 800a810:	2b00      	cmp	r3, #0
 800a812:	d10f      	bne.n	800a834 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	685a      	ldr	r2, [r3, #4]
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a822:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a828:	b29b      	uxth	r3, r3
 800a82a:	085b      	lsrs	r3, r3, #1
 800a82c:	b29a      	uxth	r2, r3
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a832:	e010      	b.n	800a856 <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	685a      	ldr	r2, [r3, #4]
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a842:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a848:	b29b      	uxth	r3, r3
 800a84a:	085b      	lsrs	r3, r3, #1
 800a84c:	b29b      	uxth	r3, r3
 800a84e:	3301      	adds	r3, #1
 800a850:	b29a      	uxth	r2, r3
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a85e:	4619      	mov	r1, r3
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	330c      	adds	r3, #12
 800a866:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a86c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800a86e:	f7fb fb6b 	bl	8005f48 <HAL_DMA_Start_IT>
 800a872:	4603      	mov	r3, r0
 800a874:	2b00      	cmp	r3, #0
 800a876:	d00c      	beq.n	800a892 <HAL_SPI_Transmit_DMA+0x18a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a87c:	f043 0210 	orr.w	r2, r3, #16
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800a884:	2301      	movs	r3, #1
 800a886:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	2201      	movs	r2, #1
 800a88c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800a890:	e01e      	b.n	800a8d0 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a89c:	2b40      	cmp	r3, #64	; 0x40
 800a89e:	d007      	beq.n	800a8b0 <HAL_SPI_Transmit_DMA+0x1a8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	681a      	ldr	r2, [r3, #0]
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a8ae:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	685a      	ldr	r2, [r3, #4]
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	f042 0220 	orr.w	r2, r2, #32
 800a8be:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	685a      	ldr	r2, [r3, #4]
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	f042 0202 	orr.w	r2, r2, #2
 800a8ce:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800a8d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8da:	4618      	mov	r0, r3
 800a8dc:	3718      	adds	r7, #24
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	bd80      	pop	{r7, pc}
 800a8e2:	bf00      	nop
 800a8e4:	0800b03f 	.word	0x0800b03f
 800a8e8:	0800ae61 	.word	0x0800ae61
 800a8ec:	0800b093 	.word	0x0800b093

0800a8f0 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b086      	sub	sp, #24
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	60f8      	str	r0, [r7, #12]
 800a8f8:	60b9      	str	r1, [r7, #8]
 800a8fa:	607a      	str	r2, [r7, #4]
 800a8fc:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a8fe:	2300      	movs	r3, #0
 800a900:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a908:	2b01      	cmp	r3, #1
 800a90a:	d101      	bne.n	800a910 <HAL_SPI_TransmitReceive_DMA+0x20>
 800a90c:	2302      	movs	r3, #2
 800a90e:	e16c      	b.n	800abea <HAL_SPI_TransmitReceive_DMA+0x2fa>
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	2201      	movs	r2, #1
 800a914:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a91e:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	685b      	ldr	r3, [r3, #4]
 800a924:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800a926:	7dbb      	ldrb	r3, [r7, #22]
 800a928:	2b01      	cmp	r3, #1
 800a92a:	d00d      	beq.n	800a948 <HAL_SPI_TransmitReceive_DMA+0x58>
 800a92c:	693b      	ldr	r3, [r7, #16]
 800a92e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a932:	d106      	bne.n	800a942 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	689b      	ldr	r3, [r3, #8]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d102      	bne.n	800a942 <HAL_SPI_TransmitReceive_DMA+0x52>
 800a93c:	7dbb      	ldrb	r3, [r7, #22]
 800a93e:	2b04      	cmp	r3, #4
 800a940:	d002      	beq.n	800a948 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800a942:	2302      	movs	r3, #2
 800a944:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a946:	e14b      	b.n	800abe0 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a948:	68bb      	ldr	r3, [r7, #8]
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d005      	beq.n	800a95a <HAL_SPI_TransmitReceive_DMA+0x6a>
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	2b00      	cmp	r3, #0
 800a952:	d002      	beq.n	800a95a <HAL_SPI_TransmitReceive_DMA+0x6a>
 800a954:	887b      	ldrh	r3, [r7, #2]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d102      	bne.n	800a960 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800a95a:	2301      	movs	r3, #1
 800a95c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a95e:	e13f      	b.n	800abe0 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a966:	b2db      	uxtb	r3, r3
 800a968:	2b04      	cmp	r3, #4
 800a96a:	d003      	beq.n	800a974 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	2205      	movs	r2, #5
 800a970:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	2200      	movs	r2, #0
 800a978:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	68ba      	ldr	r2, [r7, #8]
 800a97e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	887a      	ldrh	r2, [r7, #2]
 800a984:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	887a      	ldrh	r2, [r7, #2]
 800a98a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	687a      	ldr	r2, [r7, #4]
 800a990:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	887a      	ldrh	r2, [r7, #2]
 800a996:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	887a      	ldrh	r2, [r7, #2]
 800a99e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	685a      	ldr	r2, [r3, #4]
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 800a9bc:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	68db      	ldr	r3, [r3, #12]
 800a9c2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a9c6:	d908      	bls.n	800a9da <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	685a      	ldr	r2, [r3, #4]
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a9d6:	605a      	str	r2, [r3, #4]
 800a9d8:	e06f      	b.n	800aaba <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	685a      	ldr	r2, [r3, #4]
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a9e8:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9ee:	699b      	ldr	r3, [r3, #24]
 800a9f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a9f4:	d126      	bne.n	800aa44 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800a9fa:	f003 0301 	and.w	r3, r3, #1
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d10f      	bne.n	800aa22 <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	685a      	ldr	r2, [r3, #4]
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800aa10:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aa16:	b29b      	uxth	r3, r3
 800aa18:	085b      	lsrs	r3, r3, #1
 800aa1a:	b29a      	uxth	r2, r3
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800aa20:	e010      	b.n	800aa44 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	685a      	ldr	r2, [r3, #4]
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800aa30:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aa36:	b29b      	uxth	r3, r3
 800aa38:	085b      	lsrs	r3, r3, #1
 800aa3a:	b29b      	uxth	r3, r3
 800aa3c:	3301      	adds	r3, #1
 800aa3e:	b29a      	uxth	r2, r3
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa48:	699b      	ldr	r3, [r3, #24]
 800aa4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aa4e:	d134      	bne.n	800aaba <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	685a      	ldr	r2, [r3, #4]
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800aa5e:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800aa66:	b29b      	uxth	r3, r3
 800aa68:	f003 0301 	and.w	r3, r3, #1
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d111      	bne.n	800aa94 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	685a      	ldr	r2, [r3, #4]
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800aa7e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800aa86:	b29b      	uxth	r3, r3
 800aa88:	085b      	lsrs	r3, r3, #1
 800aa8a:	b29a      	uxth	r2, r3
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800aa92:	e012      	b.n	800aaba <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	685a      	ldr	r2, [r3, #4]
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800aaa2:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800aaaa:	b29b      	uxth	r3, r3
 800aaac:	085b      	lsrs	r3, r3, #1
 800aaae:	b29b      	uxth	r3, r3
 800aab0:	3301      	adds	r3, #1
 800aab2:	b29a      	uxth	r2, r3
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800aac0:	b2db      	uxtb	r3, r3
 800aac2:	2b04      	cmp	r3, #4
 800aac4:	d108      	bne.n	800aad8 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aaca:	4a4a      	ldr	r2, [pc, #296]	; (800abf4 <HAL_SPI_TransmitReceive_DMA+0x304>)
 800aacc:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aad2:	4a49      	ldr	r2, [pc, #292]	; (800abf8 <HAL_SPI_TransmitReceive_DMA+0x308>)
 800aad4:	62da      	str	r2, [r3, #44]	; 0x2c
 800aad6:	e007      	b.n	800aae8 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aadc:	4a47      	ldr	r2, [pc, #284]	; (800abfc <HAL_SPI_TransmitReceive_DMA+0x30c>)
 800aade:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aae4:	4a46      	ldr	r2, [pc, #280]	; (800ac00 <HAL_SPI_TransmitReceive_DMA+0x310>)
 800aae6:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aaec:	4a45      	ldr	r2, [pc, #276]	; (800ac04 <HAL_SPI_TransmitReceive_DMA+0x314>)
 800aaee:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	330c      	adds	r3, #12
 800ab02:	4619      	mov	r1, r3
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab08:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ab10:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800ab12:	f7fb fa19 	bl	8005f48 <HAL_DMA_Start_IT>
 800ab16:	4603      	mov	r3, r0
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d00c      	beq.n	800ab36 <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ab20:	f043 0210 	orr.w	r2, r3, #16
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800ab28:	2301      	movs	r3, #1
 800ab2a:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	2201      	movs	r2, #1
 800ab30:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800ab34:	e054      	b.n	800abe0 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	685a      	ldr	r2, [r3, #4]
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	f042 0201 	orr.w	r2, r2, #1
 800ab44:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab4a:	2200      	movs	r2, #0
 800ab4c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab52:	2200      	movs	r2, #0
 800ab54:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab62:	2200      	movs	r2, #0
 800ab64:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab6e:	4619      	mov	r1, r3
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	330c      	adds	r3, #12
 800ab76:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ab7c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800ab7e:	f7fb f9e3 	bl	8005f48 <HAL_DMA_Start_IT>
 800ab82:	4603      	mov	r3, r0
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d00c      	beq.n	800aba2 <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ab8c:	f043 0210 	orr.w	r2, r3, #16
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800ab94:	2301      	movs	r3, #1
 800ab96:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	2201      	movs	r2, #1
 800ab9c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800aba0:	e01e      	b.n	800abe0 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abac:	2b40      	cmp	r3, #64	; 0x40
 800abae:	d007      	beq.n	800abc0 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	681a      	ldr	r2, [r3, #0]
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800abbe:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	685a      	ldr	r2, [r3, #4]
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	f042 0220 	orr.w	r2, r2, #32
 800abce:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	685a      	ldr	r2, [r3, #4]
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	f042 0202 	orr.w	r2, r2, #2
 800abde:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	2200      	movs	r2, #0
 800abe4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800abe8:	7dfb      	ldrb	r3, [r7, #23]
}
 800abea:	4618      	mov	r0, r3
 800abec:	3718      	adds	r7, #24
 800abee:	46bd      	mov	sp, r7
 800abf0:	bd80      	pop	{r7, pc}
 800abf2:	bf00      	nop
 800abf4:	0800b05b 	.word	0x0800b05b
 800abf8:	0800af07 	.word	0x0800af07
 800abfc:	0800b077 	.word	0x0800b077
 800ac00:	0800afaf 	.word	0x0800afaf
 800ac04:	0800b093 	.word	0x0800b093

0800ac08 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	b088      	sub	sp, #32
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	685b      	ldr	r3, [r3, #4]
 800ac16:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	689b      	ldr	r3, [r3, #8]
 800ac1e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800ac20:	69bb      	ldr	r3, [r7, #24]
 800ac22:	099b      	lsrs	r3, r3, #6
 800ac24:	f003 0301 	and.w	r3, r3, #1
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d10f      	bne.n	800ac4c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800ac2c:	69bb      	ldr	r3, [r7, #24]
 800ac2e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d00a      	beq.n	800ac4c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800ac36:	69fb      	ldr	r3, [r7, #28]
 800ac38:	099b      	lsrs	r3, r3, #6
 800ac3a:	f003 0301 	and.w	r3, r3, #1
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d004      	beq.n	800ac4c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac46:	6878      	ldr	r0, [r7, #4]
 800ac48:	4798      	blx	r3
    return;
 800ac4a:	e0d7      	b.n	800adfc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800ac4c:	69bb      	ldr	r3, [r7, #24]
 800ac4e:	085b      	lsrs	r3, r3, #1
 800ac50:	f003 0301 	and.w	r3, r3, #1
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d00a      	beq.n	800ac6e <HAL_SPI_IRQHandler+0x66>
 800ac58:	69fb      	ldr	r3, [r7, #28]
 800ac5a:	09db      	lsrs	r3, r3, #7
 800ac5c:	f003 0301 	and.w	r3, r3, #1
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d004      	beq.n	800ac6e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac68:	6878      	ldr	r0, [r7, #4]
 800ac6a:	4798      	blx	r3
    return;
 800ac6c:	e0c6      	b.n	800adfc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800ac6e:	69bb      	ldr	r3, [r7, #24]
 800ac70:	095b      	lsrs	r3, r3, #5
 800ac72:	f003 0301 	and.w	r3, r3, #1
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d10c      	bne.n	800ac94 <HAL_SPI_IRQHandler+0x8c>
 800ac7a:	69bb      	ldr	r3, [r7, #24]
 800ac7c:	099b      	lsrs	r3, r3, #6
 800ac7e:	f003 0301 	and.w	r3, r3, #1
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d106      	bne.n	800ac94 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800ac86:	69bb      	ldr	r3, [r7, #24]
 800ac88:	0a1b      	lsrs	r3, r3, #8
 800ac8a:	f003 0301 	and.w	r3, r3, #1
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	f000 80b4 	beq.w	800adfc <HAL_SPI_IRQHandler+0x1f4>
 800ac94:	69fb      	ldr	r3, [r7, #28]
 800ac96:	095b      	lsrs	r3, r3, #5
 800ac98:	f003 0301 	and.w	r3, r3, #1
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	f000 80ad 	beq.w	800adfc <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800aca2:	69bb      	ldr	r3, [r7, #24]
 800aca4:	099b      	lsrs	r3, r3, #6
 800aca6:	f003 0301 	and.w	r3, r3, #1
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d023      	beq.n	800acf6 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800acb4:	b2db      	uxtb	r3, r3
 800acb6:	2b03      	cmp	r3, #3
 800acb8:	d011      	beq.n	800acde <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800acbe:	f043 0204 	orr.w	r2, r3, #4
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800acc6:	2300      	movs	r3, #0
 800acc8:	617b      	str	r3, [r7, #20]
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	68db      	ldr	r3, [r3, #12]
 800acd0:	617b      	str	r3, [r7, #20]
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	689b      	ldr	r3, [r3, #8]
 800acd8:	617b      	str	r3, [r7, #20]
 800acda:	697b      	ldr	r3, [r7, #20]
 800acdc:	e00b      	b.n	800acf6 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800acde:	2300      	movs	r3, #0
 800ace0:	613b      	str	r3, [r7, #16]
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	68db      	ldr	r3, [r3, #12]
 800ace8:	613b      	str	r3, [r7, #16]
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	689b      	ldr	r3, [r3, #8]
 800acf0:	613b      	str	r3, [r7, #16]
 800acf2:	693b      	ldr	r3, [r7, #16]
        return;
 800acf4:	e082      	b.n	800adfc <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800acf6:	69bb      	ldr	r3, [r7, #24]
 800acf8:	095b      	lsrs	r3, r3, #5
 800acfa:	f003 0301 	and.w	r3, r3, #1
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d014      	beq.n	800ad2c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ad06:	f043 0201 	orr.w	r2, r3, #1
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800ad0e:	2300      	movs	r3, #0
 800ad10:	60fb      	str	r3, [r7, #12]
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	689b      	ldr	r3, [r3, #8]
 800ad18:	60fb      	str	r3, [r7, #12]
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	681a      	ldr	r2, [r3, #0]
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ad28:	601a      	str	r2, [r3, #0]
 800ad2a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800ad2c:	69bb      	ldr	r3, [r7, #24]
 800ad2e:	0a1b      	lsrs	r3, r3, #8
 800ad30:	f003 0301 	and.w	r3, r3, #1
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d00c      	beq.n	800ad52 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ad3c:	f043 0208 	orr.w	r2, r3, #8
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800ad44:	2300      	movs	r3, #0
 800ad46:	60bb      	str	r3, [r7, #8]
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	689b      	ldr	r3, [r3, #8]
 800ad4e:	60bb      	str	r3, [r7, #8]
 800ad50:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d04f      	beq.n	800adfa <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	685a      	ldr	r2, [r3, #4]
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ad68:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	2201      	movs	r2, #1
 800ad6e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800ad72:	69fb      	ldr	r3, [r7, #28]
 800ad74:	f003 0302 	and.w	r3, r3, #2
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d104      	bne.n	800ad86 <HAL_SPI_IRQHandler+0x17e>
 800ad7c:	69fb      	ldr	r3, [r7, #28]
 800ad7e:	f003 0301 	and.w	r3, r3, #1
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d034      	beq.n	800adf0 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	685a      	ldr	r2, [r3, #4]
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	f022 0203 	bic.w	r2, r2, #3
 800ad94:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d011      	beq.n	800adc2 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ada2:	4a18      	ldr	r2, [pc, #96]	; (800ae04 <HAL_SPI_IRQHandler+0x1fc>)
 800ada4:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800adaa:	4618      	mov	r0, r3
 800adac:	f7fb f96a 	bl	8006084 <HAL_DMA_Abort_IT>
 800adb0:	4603      	mov	r3, r0
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d005      	beq.n	800adc2 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800adba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d016      	beq.n	800adf8 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800adce:	4a0d      	ldr	r2, [pc, #52]	; (800ae04 <HAL_SPI_IRQHandler+0x1fc>)
 800add0:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800add6:	4618      	mov	r0, r3
 800add8:	f7fb f954 	bl	8006084 <HAL_DMA_Abort_IT>
 800addc:	4603      	mov	r3, r0
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d00a      	beq.n	800adf8 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ade6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800adee:	e003      	b.n	800adf8 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800adf0:	6878      	ldr	r0, [r7, #4]
 800adf2:	f7f8 fff3 	bl	8003ddc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800adf6:	e000      	b.n	800adfa <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800adf8:	bf00      	nop
    return;
 800adfa:	bf00      	nop
  }
}
 800adfc:	3720      	adds	r7, #32
 800adfe:	46bd      	mov	sp, r7
 800ae00:	bd80      	pop	{r7, pc}
 800ae02:	bf00      	nop
 800ae04:	0800b0d3 	.word	0x0800b0d3

0800ae08 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800ae08:	b480      	push	{r7}
 800ae0a:	b083      	sub	sp, #12
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800ae10:	bf00      	nop
 800ae12:	370c      	adds	r7, #12
 800ae14:	46bd      	mov	sp, r7
 800ae16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1a:	4770      	bx	lr

0800ae1c <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800ae1c:	b480      	push	{r7}
 800ae1e:	b083      	sub	sp, #12
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800ae24:	bf00      	nop
 800ae26:	370c      	adds	r7, #12
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2e:	4770      	bx	lr

0800ae30 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800ae30:	b480      	push	{r7}
 800ae32:	b083      	sub	sp, #12
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800ae38:	bf00      	nop
 800ae3a:	370c      	adds	r7, #12
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae42:	4770      	bx	lr

0800ae44 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800ae44:	b480      	push	{r7}
 800ae46:	b083      	sub	sp, #12
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ae52:	b2db      	uxtb	r3, r3
}
 800ae54:	4618      	mov	r0, r3
 800ae56:	370c      	adds	r7, #12
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5e:	4770      	bx	lr

0800ae60 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b086      	sub	sp, #24
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae6c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ae6e:	f7fa fe3f 	bl	8005af0 <HAL_GetTick>
 800ae72:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	f003 0320 	and.w	r3, r3, #32
 800ae7e:	2b20      	cmp	r3, #32
 800ae80:	d03b      	beq.n	800aefa <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800ae82:	697b      	ldr	r3, [r7, #20]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	685a      	ldr	r2, [r3, #4]
 800ae88:	697b      	ldr	r3, [r7, #20]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	f022 0220 	bic.w	r2, r2, #32
 800ae90:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800ae92:	697b      	ldr	r3, [r7, #20]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	685a      	ldr	r2, [r3, #4]
 800ae98:	697b      	ldr	r3, [r7, #20]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	f022 0202 	bic.w	r2, r2, #2
 800aea0:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800aea2:	693a      	ldr	r2, [r7, #16]
 800aea4:	2164      	movs	r1, #100	; 0x64
 800aea6:	6978      	ldr	r0, [r7, #20]
 800aea8:	f000 fa9e 	bl	800b3e8 <SPI_EndRxTxTransaction>
 800aeac:	4603      	mov	r3, r0
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d005      	beq.n	800aebe <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800aeb2:	697b      	ldr	r3, [r7, #20]
 800aeb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aeb6:	f043 0220 	orr.w	r2, r3, #32
 800aeba:	697b      	ldr	r3, [r7, #20]
 800aebc:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800aebe:	697b      	ldr	r3, [r7, #20]
 800aec0:	689b      	ldr	r3, [r3, #8]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d10a      	bne.n	800aedc <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800aec6:	2300      	movs	r3, #0
 800aec8:	60fb      	str	r3, [r7, #12]
 800aeca:	697b      	ldr	r3, [r7, #20]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	68db      	ldr	r3, [r3, #12]
 800aed0:	60fb      	str	r3, [r7, #12]
 800aed2:	697b      	ldr	r3, [r7, #20]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	689b      	ldr	r3, [r3, #8]
 800aed8:	60fb      	str	r3, [r7, #12]
 800aeda:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800aedc:	697b      	ldr	r3, [r7, #20]
 800aede:	2200      	movs	r2, #0
 800aee0:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800aee2:	697b      	ldr	r3, [r7, #20]
 800aee4:	2201      	movs	r2, #1
 800aee6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800aeea:	697b      	ldr	r3, [r7, #20]
 800aeec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d003      	beq.n	800aefa <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800aef2:	6978      	ldr	r0, [r7, #20]
 800aef4:	f7f8 ff72 	bl	8003ddc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800aef8:	e002      	b.n	800af00 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800aefa:	6978      	ldr	r0, [r7, #20]
 800aefc:	f7f8 ff57 	bl	8003dae <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800af00:	3718      	adds	r7, #24
 800af02:	46bd      	mov	sp, r7
 800af04:	bd80      	pop	{r7, pc}

0800af06 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800af06:	b580      	push	{r7, lr}
 800af08:	b084      	sub	sp, #16
 800af0a:	af00      	add	r7, sp, #0
 800af0c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af12:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800af14:	f7fa fdec 	bl	8005af0 <HAL_GetTick>
 800af18:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	f003 0320 	and.w	r3, r3, #32
 800af24:	2b20      	cmp	r3, #32
 800af26:	d03c      	beq.n	800afa2 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	685a      	ldr	r2, [r3, #4]
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	f022 0220 	bic.w	r2, r2, #32
 800af36:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	689b      	ldr	r3, [r3, #8]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d10d      	bne.n	800af5c <SPI_DMAReceiveCplt+0x56>
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	685b      	ldr	r3, [r3, #4]
 800af44:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800af48:	d108      	bne.n	800af5c <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	685a      	ldr	r2, [r3, #4]
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	f022 0203 	bic.w	r2, r2, #3
 800af58:	605a      	str	r2, [r3, #4]
 800af5a:	e007      	b.n	800af6c <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	685a      	ldr	r2, [r3, #4]
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	f022 0201 	bic.w	r2, r2, #1
 800af6a:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800af6c:	68ba      	ldr	r2, [r7, #8]
 800af6e:	2164      	movs	r1, #100	; 0x64
 800af70:	68f8      	ldr	r0, [r7, #12]
 800af72:	f000 f9e1 	bl	800b338 <SPI_EndRxTransaction>
 800af76:	4603      	mov	r3, r0
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d002      	beq.n	800af82 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	2220      	movs	r2, #32
 800af80:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	2200      	movs	r2, #0
 800af86:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	2201      	movs	r2, #1
 800af8e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800af96:	2b00      	cmp	r3, #0
 800af98:	d003      	beq.n	800afa2 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800af9a:	68f8      	ldr	r0, [r7, #12]
 800af9c:	f7f8 ff1e 	bl	8003ddc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800afa0:	e002      	b.n	800afa8 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800afa2:	68f8      	ldr	r0, [r7, #12]
 800afa4:	f7f8 fef8 	bl	8003d98 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800afa8:	3710      	adds	r7, #16
 800afaa:	46bd      	mov	sp, r7
 800afac:	bd80      	pop	{r7, pc}

0800afae <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800afae:	b580      	push	{r7, lr}
 800afb0:	b084      	sub	sp, #16
 800afb2:	af00      	add	r7, sp, #0
 800afb4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afba:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800afbc:	f7fa fd98 	bl	8005af0 <HAL_GetTick>
 800afc0:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	f003 0320 	and.w	r3, r3, #32
 800afcc:	2b20      	cmp	r3, #32
 800afce:	d030      	beq.n	800b032 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	685a      	ldr	r2, [r3, #4]
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	f022 0220 	bic.w	r2, r2, #32
 800afde:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800afe0:	68ba      	ldr	r2, [r7, #8]
 800afe2:	2164      	movs	r1, #100	; 0x64
 800afe4:	68f8      	ldr	r0, [r7, #12]
 800afe6:	f000 f9ff 	bl	800b3e8 <SPI_EndRxTxTransaction>
 800afea:	4603      	mov	r3, r0
 800afec:	2b00      	cmp	r3, #0
 800afee:	d005      	beq.n	800affc <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aff4:	f043 0220 	orr.w	r2, r3, #32
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	685a      	ldr	r2, [r3, #4]
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	f022 0203 	bic.w	r2, r2, #3
 800b00a:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	2200      	movs	r2, #0
 800b010:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	2200      	movs	r2, #0
 800b016:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	2201      	movs	r2, #1
 800b01e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b026:	2b00      	cmp	r3, #0
 800b028:	d003      	beq.n	800b032 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800b02a:	68f8      	ldr	r0, [r7, #12]
 800b02c:	f7f8 fed6 	bl	8003ddc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800b030:	e002      	b.n	800b038 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800b032:	68f8      	ldr	r0, [r7, #12]
 800b034:	f7f8 fec6 	bl	8003dc4 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b038:	3710      	adds	r7, #16
 800b03a:	46bd      	mov	sp, r7
 800b03c:	bd80      	pop	{r7, pc}

0800b03e <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b03e:	b580      	push	{r7, lr}
 800b040:	b084      	sub	sp, #16
 800b042:	af00      	add	r7, sp, #0
 800b044:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b04a:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800b04c:	68f8      	ldr	r0, [r7, #12]
 800b04e:	f7ff fedb 	bl	800ae08 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b052:	bf00      	nop
 800b054:	3710      	adds	r7, #16
 800b056:	46bd      	mov	sp, r7
 800b058:	bd80      	pop	{r7, pc}

0800b05a <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b05a:	b580      	push	{r7, lr}
 800b05c:	b084      	sub	sp, #16
 800b05e:	af00      	add	r7, sp, #0
 800b060:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b066:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800b068:	68f8      	ldr	r0, [r7, #12]
 800b06a:	f7ff fed7 	bl	800ae1c <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b06e:	bf00      	nop
 800b070:	3710      	adds	r7, #16
 800b072:	46bd      	mov	sp, r7
 800b074:	bd80      	pop	{r7, pc}

0800b076 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b076:	b580      	push	{r7, lr}
 800b078:	b084      	sub	sp, #16
 800b07a:	af00      	add	r7, sp, #0
 800b07c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b082:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800b084:	68f8      	ldr	r0, [r7, #12]
 800b086:	f7ff fed3 	bl	800ae30 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b08a:	bf00      	nop
 800b08c:	3710      	adds	r7, #16
 800b08e:	46bd      	mov	sp, r7
 800b090:	bd80      	pop	{r7, pc}

0800b092 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800b092:	b580      	push	{r7, lr}
 800b094:	b084      	sub	sp, #16
 800b096:	af00      	add	r7, sp, #0
 800b098:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b09e:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	685a      	ldr	r2, [r3, #4]
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	f022 0203 	bic.w	r2, r2, #3
 800b0ae:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b0b4:	f043 0210 	orr.w	r2, r3, #16
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	2201      	movs	r2, #1
 800b0c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800b0c4:	68f8      	ldr	r0, [r7, #12]
 800b0c6:	f7f8 fe89 	bl	8003ddc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b0ca:	bf00      	nop
 800b0cc:	3710      	adds	r7, #16
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	bd80      	pop	{r7, pc}

0800b0d2 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b0d2:	b580      	push	{r7, lr}
 800b0d4:	b084      	sub	sp, #16
 800b0d6:	af00      	add	r7, sp, #0
 800b0d8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0de:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	2200      	movs	r2, #0
 800b0ec:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800b0ee:	68f8      	ldr	r0, [r7, #12]
 800b0f0:	f7f8 fe74 	bl	8003ddc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b0f4:	bf00      	nop
 800b0f6:	3710      	adds	r7, #16
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	bd80      	pop	{r7, pc}

0800b0fc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b0fc:	b580      	push	{r7, lr}
 800b0fe:	b088      	sub	sp, #32
 800b100:	af00      	add	r7, sp, #0
 800b102:	60f8      	str	r0, [r7, #12]
 800b104:	60b9      	str	r1, [r7, #8]
 800b106:	603b      	str	r3, [r7, #0]
 800b108:	4613      	mov	r3, r2
 800b10a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800b10c:	f7fa fcf0 	bl	8005af0 <HAL_GetTick>
 800b110:	4602      	mov	r2, r0
 800b112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b114:	1a9b      	subs	r3, r3, r2
 800b116:	683a      	ldr	r2, [r7, #0]
 800b118:	4413      	add	r3, r2
 800b11a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800b11c:	f7fa fce8 	bl	8005af0 <HAL_GetTick>
 800b120:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800b122:	4b39      	ldr	r3, [pc, #228]	; (800b208 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	015b      	lsls	r3, r3, #5
 800b128:	0d1b      	lsrs	r3, r3, #20
 800b12a:	69fa      	ldr	r2, [r7, #28]
 800b12c:	fb02 f303 	mul.w	r3, r2, r3
 800b130:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b132:	e054      	b.n	800b1de <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b134:	683b      	ldr	r3, [r7, #0]
 800b136:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b13a:	d050      	beq.n	800b1de <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b13c:	f7fa fcd8 	bl	8005af0 <HAL_GetTick>
 800b140:	4602      	mov	r2, r0
 800b142:	69bb      	ldr	r3, [r7, #24]
 800b144:	1ad3      	subs	r3, r2, r3
 800b146:	69fa      	ldr	r2, [r7, #28]
 800b148:	429a      	cmp	r2, r3
 800b14a:	d902      	bls.n	800b152 <SPI_WaitFlagStateUntilTimeout+0x56>
 800b14c:	69fb      	ldr	r3, [r7, #28]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d13d      	bne.n	800b1ce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	685a      	ldr	r2, [r3, #4]
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b160:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	685b      	ldr	r3, [r3, #4]
 800b166:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b16a:	d111      	bne.n	800b190 <SPI_WaitFlagStateUntilTimeout+0x94>
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	689b      	ldr	r3, [r3, #8]
 800b170:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b174:	d004      	beq.n	800b180 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	689b      	ldr	r3, [r3, #8]
 800b17a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b17e:	d107      	bne.n	800b190 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	681a      	ldr	r2, [r3, #0]
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b18e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b194:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b198:	d10f      	bne.n	800b1ba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	681a      	ldr	r2, [r3, #0]
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b1a8:	601a      	str	r2, [r3, #0]
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	681a      	ldr	r2, [r3, #0]
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b1b8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	2201      	movs	r2, #1
 800b1be:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	2200      	movs	r2, #0
 800b1c6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800b1ca:	2303      	movs	r3, #3
 800b1cc:	e017      	b.n	800b1fe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b1ce:	697b      	ldr	r3, [r7, #20]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d101      	bne.n	800b1d8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800b1d4:	2300      	movs	r3, #0
 800b1d6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800b1d8:	697b      	ldr	r3, [r7, #20]
 800b1da:	3b01      	subs	r3, #1
 800b1dc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	689a      	ldr	r2, [r3, #8]
 800b1e4:	68bb      	ldr	r3, [r7, #8]
 800b1e6:	4013      	ands	r3, r2
 800b1e8:	68ba      	ldr	r2, [r7, #8]
 800b1ea:	429a      	cmp	r2, r3
 800b1ec:	bf0c      	ite	eq
 800b1ee:	2301      	moveq	r3, #1
 800b1f0:	2300      	movne	r3, #0
 800b1f2:	b2db      	uxtb	r3, r3
 800b1f4:	461a      	mov	r2, r3
 800b1f6:	79fb      	ldrb	r3, [r7, #7]
 800b1f8:	429a      	cmp	r2, r3
 800b1fa:	d19b      	bne.n	800b134 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800b1fc:	2300      	movs	r3, #0
}
 800b1fe:	4618      	mov	r0, r3
 800b200:	3720      	adds	r7, #32
 800b202:	46bd      	mov	sp, r7
 800b204:	bd80      	pop	{r7, pc}
 800b206:	bf00      	nop
 800b208:	200001b8 	.word	0x200001b8

0800b20c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b20c:	b580      	push	{r7, lr}
 800b20e:	b08a      	sub	sp, #40	; 0x28
 800b210:	af00      	add	r7, sp, #0
 800b212:	60f8      	str	r0, [r7, #12]
 800b214:	60b9      	str	r1, [r7, #8]
 800b216:	607a      	str	r2, [r7, #4]
 800b218:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800b21a:	2300      	movs	r3, #0
 800b21c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800b21e:	f7fa fc67 	bl	8005af0 <HAL_GetTick>
 800b222:	4602      	mov	r2, r0
 800b224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b226:	1a9b      	subs	r3, r3, r2
 800b228:	683a      	ldr	r2, [r7, #0]
 800b22a:	4413      	add	r3, r2
 800b22c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800b22e:	f7fa fc5f 	bl	8005af0 <HAL_GetTick>
 800b232:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	330c      	adds	r3, #12
 800b23a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800b23c:	4b3d      	ldr	r3, [pc, #244]	; (800b334 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800b23e:	681a      	ldr	r2, [r3, #0]
 800b240:	4613      	mov	r3, r2
 800b242:	009b      	lsls	r3, r3, #2
 800b244:	4413      	add	r3, r2
 800b246:	00da      	lsls	r2, r3, #3
 800b248:	1ad3      	subs	r3, r2, r3
 800b24a:	0d1b      	lsrs	r3, r3, #20
 800b24c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b24e:	fb02 f303 	mul.w	r3, r2, r3
 800b252:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800b254:	e060      	b.n	800b318 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800b256:	68bb      	ldr	r3, [r7, #8]
 800b258:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800b25c:	d107      	bne.n	800b26e <SPI_WaitFifoStateUntilTimeout+0x62>
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d104      	bne.n	800b26e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800b264:	69fb      	ldr	r3, [r7, #28]
 800b266:	781b      	ldrb	r3, [r3, #0]
 800b268:	b2db      	uxtb	r3, r3
 800b26a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800b26c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800b26e:	683b      	ldr	r3, [r7, #0]
 800b270:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b274:	d050      	beq.n	800b318 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b276:	f7fa fc3b 	bl	8005af0 <HAL_GetTick>
 800b27a:	4602      	mov	r2, r0
 800b27c:	6a3b      	ldr	r3, [r7, #32]
 800b27e:	1ad3      	subs	r3, r2, r3
 800b280:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b282:	429a      	cmp	r2, r3
 800b284:	d902      	bls.n	800b28c <SPI_WaitFifoStateUntilTimeout+0x80>
 800b286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d13d      	bne.n	800b308 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	685a      	ldr	r2, [r3, #4]
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b29a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	685b      	ldr	r3, [r3, #4]
 800b2a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b2a4:	d111      	bne.n	800b2ca <SPI_WaitFifoStateUntilTimeout+0xbe>
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	689b      	ldr	r3, [r3, #8]
 800b2aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b2ae:	d004      	beq.n	800b2ba <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	689b      	ldr	r3, [r3, #8]
 800b2b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b2b8:	d107      	bne.n	800b2ca <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	681a      	ldr	r2, [r3, #0]
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b2c8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b2d2:	d10f      	bne.n	800b2f4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	681a      	ldr	r2, [r3, #0]
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b2e2:	601a      	str	r2, [r3, #0]
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	681a      	ldr	r2, [r3, #0]
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b2f2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	2201      	movs	r2, #1
 800b2f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	2200      	movs	r2, #0
 800b300:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800b304:	2303      	movs	r3, #3
 800b306:	e010      	b.n	800b32a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b308:	69bb      	ldr	r3, [r7, #24]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d101      	bne.n	800b312 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800b30e:	2300      	movs	r3, #0
 800b310:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800b312:	69bb      	ldr	r3, [r7, #24]
 800b314:	3b01      	subs	r3, #1
 800b316:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	689a      	ldr	r2, [r3, #8]
 800b31e:	68bb      	ldr	r3, [r7, #8]
 800b320:	4013      	ands	r3, r2
 800b322:	687a      	ldr	r2, [r7, #4]
 800b324:	429a      	cmp	r2, r3
 800b326:	d196      	bne.n	800b256 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800b328:	2300      	movs	r3, #0
}
 800b32a:	4618      	mov	r0, r3
 800b32c:	3728      	adds	r7, #40	; 0x28
 800b32e:	46bd      	mov	sp, r7
 800b330:	bd80      	pop	{r7, pc}
 800b332:	bf00      	nop
 800b334:	200001b8 	.word	0x200001b8

0800b338 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800b338:	b580      	push	{r7, lr}
 800b33a:	b086      	sub	sp, #24
 800b33c:	af02      	add	r7, sp, #8
 800b33e:	60f8      	str	r0, [r7, #12]
 800b340:	60b9      	str	r1, [r7, #8]
 800b342:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	685b      	ldr	r3, [r3, #4]
 800b348:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b34c:	d111      	bne.n	800b372 <SPI_EndRxTransaction+0x3a>
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	689b      	ldr	r3, [r3, #8]
 800b352:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b356:	d004      	beq.n	800b362 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	689b      	ldr	r3, [r3, #8]
 800b35c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b360:	d107      	bne.n	800b372 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	681a      	ldr	r2, [r3, #0]
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b370:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	9300      	str	r3, [sp, #0]
 800b376:	68bb      	ldr	r3, [r7, #8]
 800b378:	2200      	movs	r2, #0
 800b37a:	2180      	movs	r1, #128	; 0x80
 800b37c:	68f8      	ldr	r0, [r7, #12]
 800b37e:	f7ff febd 	bl	800b0fc <SPI_WaitFlagStateUntilTimeout>
 800b382:	4603      	mov	r3, r0
 800b384:	2b00      	cmp	r3, #0
 800b386:	d007      	beq.n	800b398 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b38c:	f043 0220 	orr.w	r2, r3, #32
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800b394:	2303      	movs	r3, #3
 800b396:	e023      	b.n	800b3e0 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	685b      	ldr	r3, [r3, #4]
 800b39c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b3a0:	d11d      	bne.n	800b3de <SPI_EndRxTransaction+0xa6>
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	689b      	ldr	r3, [r3, #8]
 800b3a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b3aa:	d004      	beq.n	800b3b6 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	689b      	ldr	r3, [r3, #8]
 800b3b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b3b4:	d113      	bne.n	800b3de <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	9300      	str	r3, [sp, #0]
 800b3ba:	68bb      	ldr	r3, [r7, #8]
 800b3bc:	2200      	movs	r2, #0
 800b3be:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800b3c2:	68f8      	ldr	r0, [r7, #12]
 800b3c4:	f7ff ff22 	bl	800b20c <SPI_WaitFifoStateUntilTimeout>
 800b3c8:	4603      	mov	r3, r0
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d007      	beq.n	800b3de <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b3d2:	f043 0220 	orr.w	r2, r3, #32
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800b3da:	2303      	movs	r3, #3
 800b3dc:	e000      	b.n	800b3e0 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800b3de:	2300      	movs	r3, #0
}
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	3710      	adds	r7, #16
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	bd80      	pop	{r7, pc}

0800b3e8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b3e8:	b580      	push	{r7, lr}
 800b3ea:	b086      	sub	sp, #24
 800b3ec:	af02      	add	r7, sp, #8
 800b3ee:	60f8      	str	r0, [r7, #12]
 800b3f0:	60b9      	str	r1, [r7, #8]
 800b3f2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	9300      	str	r3, [sp, #0]
 800b3f8:	68bb      	ldr	r3, [r7, #8]
 800b3fa:	2200      	movs	r2, #0
 800b3fc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800b400:	68f8      	ldr	r0, [r7, #12]
 800b402:	f7ff ff03 	bl	800b20c <SPI_WaitFifoStateUntilTimeout>
 800b406:	4603      	mov	r3, r0
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d007      	beq.n	800b41c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b410:	f043 0220 	orr.w	r2, r3, #32
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800b418:	2303      	movs	r3, #3
 800b41a:	e027      	b.n	800b46c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	9300      	str	r3, [sp, #0]
 800b420:	68bb      	ldr	r3, [r7, #8]
 800b422:	2200      	movs	r2, #0
 800b424:	2180      	movs	r1, #128	; 0x80
 800b426:	68f8      	ldr	r0, [r7, #12]
 800b428:	f7ff fe68 	bl	800b0fc <SPI_WaitFlagStateUntilTimeout>
 800b42c:	4603      	mov	r3, r0
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d007      	beq.n	800b442 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b436:	f043 0220 	orr.w	r2, r3, #32
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800b43e:	2303      	movs	r3, #3
 800b440:	e014      	b.n	800b46c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	9300      	str	r3, [sp, #0]
 800b446:	68bb      	ldr	r3, [r7, #8]
 800b448:	2200      	movs	r2, #0
 800b44a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800b44e:	68f8      	ldr	r0, [r7, #12]
 800b450:	f7ff fedc 	bl	800b20c <SPI_WaitFifoStateUntilTimeout>
 800b454:	4603      	mov	r3, r0
 800b456:	2b00      	cmp	r3, #0
 800b458:	d007      	beq.n	800b46a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b45e:	f043 0220 	orr.w	r2, r3, #32
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800b466:	2303      	movs	r3, #3
 800b468:	e000      	b.n	800b46c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800b46a:	2300      	movs	r3, #0
}
 800b46c:	4618      	mov	r0, r3
 800b46e:	3710      	adds	r7, #16
 800b470:	46bd      	mov	sp, r7
 800b472:	bd80      	pop	{r7, pc}

0800b474 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b474:	b580      	push	{r7, lr}
 800b476:	b082      	sub	sp, #8
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d101      	bne.n	800b486 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b482:	2301      	movs	r3, #1
 800b484:	e049      	b.n	800b51a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b48c:	b2db      	uxtb	r3, r3
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d106      	bne.n	800b4a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	2200      	movs	r2, #0
 800b496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b49a:	6878      	ldr	r0, [r7, #4]
 800b49c:	f7f9 fb06 	bl	8004aac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	2202      	movs	r2, #2
 800b4a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	681a      	ldr	r2, [r3, #0]
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	3304      	adds	r3, #4
 800b4b0:	4619      	mov	r1, r3
 800b4b2:	4610      	mov	r0, r2
 800b4b4:	f000 fae6 	bl	800ba84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	2201      	movs	r2, #1
 800b4bc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	2201      	movs	r2, #1
 800b4c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	2201      	movs	r2, #1
 800b4cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	2201      	movs	r2, #1
 800b4d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	2201      	movs	r2, #1
 800b4dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	2201      	movs	r2, #1
 800b4e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	2201      	movs	r2, #1
 800b4ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	2201      	movs	r2, #1
 800b4f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	2201      	movs	r2, #1
 800b4fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	2201      	movs	r2, #1
 800b504:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	2201      	movs	r2, #1
 800b50c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	2201      	movs	r2, #1
 800b514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b518:	2300      	movs	r3, #0
}
 800b51a:	4618      	mov	r0, r3
 800b51c:	3708      	adds	r7, #8
 800b51e:	46bd      	mov	sp, r7
 800b520:	bd80      	pop	{r7, pc}
	...

0800b524 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b524:	b480      	push	{r7}
 800b526:	b085      	sub	sp, #20
 800b528:	af00      	add	r7, sp, #0
 800b52a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b532:	b2db      	uxtb	r3, r3
 800b534:	2b01      	cmp	r3, #1
 800b536:	d001      	beq.n	800b53c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b538:	2301      	movs	r3, #1
 800b53a:	e04f      	b.n	800b5dc <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	2202      	movs	r2, #2
 800b540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	68da      	ldr	r2, [r3, #12]
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	f042 0201 	orr.w	r2, r2, #1
 800b552:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	4a23      	ldr	r2, [pc, #140]	; (800b5e8 <HAL_TIM_Base_Start_IT+0xc4>)
 800b55a:	4293      	cmp	r3, r2
 800b55c:	d01d      	beq.n	800b59a <HAL_TIM_Base_Start_IT+0x76>
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b566:	d018      	beq.n	800b59a <HAL_TIM_Base_Start_IT+0x76>
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	4a1f      	ldr	r2, [pc, #124]	; (800b5ec <HAL_TIM_Base_Start_IT+0xc8>)
 800b56e:	4293      	cmp	r3, r2
 800b570:	d013      	beq.n	800b59a <HAL_TIM_Base_Start_IT+0x76>
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	4a1e      	ldr	r2, [pc, #120]	; (800b5f0 <HAL_TIM_Base_Start_IT+0xcc>)
 800b578:	4293      	cmp	r3, r2
 800b57a:	d00e      	beq.n	800b59a <HAL_TIM_Base_Start_IT+0x76>
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	4a1c      	ldr	r2, [pc, #112]	; (800b5f4 <HAL_TIM_Base_Start_IT+0xd0>)
 800b582:	4293      	cmp	r3, r2
 800b584:	d009      	beq.n	800b59a <HAL_TIM_Base_Start_IT+0x76>
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	4a1b      	ldr	r2, [pc, #108]	; (800b5f8 <HAL_TIM_Base_Start_IT+0xd4>)
 800b58c:	4293      	cmp	r3, r2
 800b58e:	d004      	beq.n	800b59a <HAL_TIM_Base_Start_IT+0x76>
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	4a19      	ldr	r2, [pc, #100]	; (800b5fc <HAL_TIM_Base_Start_IT+0xd8>)
 800b596:	4293      	cmp	r3, r2
 800b598:	d115      	bne.n	800b5c6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	689a      	ldr	r2, [r3, #8]
 800b5a0:	4b17      	ldr	r3, [pc, #92]	; (800b600 <HAL_TIM_Base_Start_IT+0xdc>)
 800b5a2:	4013      	ands	r3, r2
 800b5a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	2b06      	cmp	r3, #6
 800b5aa:	d015      	beq.n	800b5d8 <HAL_TIM_Base_Start_IT+0xb4>
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b5b2:	d011      	beq.n	800b5d8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	681a      	ldr	r2, [r3, #0]
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	f042 0201 	orr.w	r2, r2, #1
 800b5c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b5c4:	e008      	b.n	800b5d8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	681a      	ldr	r2, [r3, #0]
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	f042 0201 	orr.w	r2, r2, #1
 800b5d4:	601a      	str	r2, [r3, #0]
 800b5d6:	e000      	b.n	800b5da <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b5d8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b5da:	2300      	movs	r3, #0
}
 800b5dc:	4618      	mov	r0, r3
 800b5de:	3714      	adds	r7, #20
 800b5e0:	46bd      	mov	sp, r7
 800b5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e6:	4770      	bx	lr
 800b5e8:	40012c00 	.word	0x40012c00
 800b5ec:	40000400 	.word	0x40000400
 800b5f0:	40000800 	.word	0x40000800
 800b5f4:	40000c00 	.word	0x40000c00
 800b5f8:	40013400 	.word	0x40013400
 800b5fc:	40014000 	.word	0x40014000
 800b600:	00010007 	.word	0x00010007

0800b604 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800b604:	b480      	push	{r7}
 800b606:	b083      	sub	sp, #12
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	68da      	ldr	r2, [r3, #12]
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	f022 0201 	bic.w	r2, r2, #1
 800b61a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	6a1a      	ldr	r2, [r3, #32]
 800b622:	f241 1311 	movw	r3, #4369	; 0x1111
 800b626:	4013      	ands	r3, r2
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d10f      	bne.n	800b64c <HAL_TIM_Base_Stop_IT+0x48>
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	6a1a      	ldr	r2, [r3, #32]
 800b632:	f240 4344 	movw	r3, #1092	; 0x444
 800b636:	4013      	ands	r3, r2
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d107      	bne.n	800b64c <HAL_TIM_Base_Stop_IT+0x48>
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	681a      	ldr	r2, [r3, #0]
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	f022 0201 	bic.w	r2, r2, #1
 800b64a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	2201      	movs	r2, #1
 800b650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800b654:	2300      	movs	r3, #0
}
 800b656:	4618      	mov	r0, r3
 800b658:	370c      	adds	r7, #12
 800b65a:	46bd      	mov	sp, r7
 800b65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b660:	4770      	bx	lr

0800b662 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b662:	b580      	push	{r7, lr}
 800b664:	b082      	sub	sp, #8
 800b666:	af00      	add	r7, sp, #0
 800b668:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	691b      	ldr	r3, [r3, #16]
 800b670:	f003 0302 	and.w	r3, r3, #2
 800b674:	2b02      	cmp	r3, #2
 800b676:	d122      	bne.n	800b6be <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	68db      	ldr	r3, [r3, #12]
 800b67e:	f003 0302 	and.w	r3, r3, #2
 800b682:	2b02      	cmp	r3, #2
 800b684:	d11b      	bne.n	800b6be <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	f06f 0202 	mvn.w	r2, #2
 800b68e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	2201      	movs	r2, #1
 800b694:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	699b      	ldr	r3, [r3, #24]
 800b69c:	f003 0303 	and.w	r3, r3, #3
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d003      	beq.n	800b6ac <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b6a4:	6878      	ldr	r0, [r7, #4]
 800b6a6:	f000 f9ce 	bl	800ba46 <HAL_TIM_IC_CaptureCallback>
 800b6aa:	e005      	b.n	800b6b8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b6ac:	6878      	ldr	r0, [r7, #4]
 800b6ae:	f000 f9c0 	bl	800ba32 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b6b2:	6878      	ldr	r0, [r7, #4]
 800b6b4:	f000 f9d1 	bl	800ba5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	691b      	ldr	r3, [r3, #16]
 800b6c4:	f003 0304 	and.w	r3, r3, #4
 800b6c8:	2b04      	cmp	r3, #4
 800b6ca:	d122      	bne.n	800b712 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	68db      	ldr	r3, [r3, #12]
 800b6d2:	f003 0304 	and.w	r3, r3, #4
 800b6d6:	2b04      	cmp	r3, #4
 800b6d8:	d11b      	bne.n	800b712 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	f06f 0204 	mvn.w	r2, #4
 800b6e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	2202      	movs	r2, #2
 800b6e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	699b      	ldr	r3, [r3, #24]
 800b6f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d003      	beq.n	800b700 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b6f8:	6878      	ldr	r0, [r7, #4]
 800b6fa:	f000 f9a4 	bl	800ba46 <HAL_TIM_IC_CaptureCallback>
 800b6fe:	e005      	b.n	800b70c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b700:	6878      	ldr	r0, [r7, #4]
 800b702:	f000 f996 	bl	800ba32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b706:	6878      	ldr	r0, [r7, #4]
 800b708:	f000 f9a7 	bl	800ba5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	2200      	movs	r2, #0
 800b710:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	691b      	ldr	r3, [r3, #16]
 800b718:	f003 0308 	and.w	r3, r3, #8
 800b71c:	2b08      	cmp	r3, #8
 800b71e:	d122      	bne.n	800b766 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	68db      	ldr	r3, [r3, #12]
 800b726:	f003 0308 	and.w	r3, r3, #8
 800b72a:	2b08      	cmp	r3, #8
 800b72c:	d11b      	bne.n	800b766 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	f06f 0208 	mvn.w	r2, #8
 800b736:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	2204      	movs	r2, #4
 800b73c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	69db      	ldr	r3, [r3, #28]
 800b744:	f003 0303 	and.w	r3, r3, #3
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d003      	beq.n	800b754 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b74c:	6878      	ldr	r0, [r7, #4]
 800b74e:	f000 f97a 	bl	800ba46 <HAL_TIM_IC_CaptureCallback>
 800b752:	e005      	b.n	800b760 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b754:	6878      	ldr	r0, [r7, #4]
 800b756:	f000 f96c 	bl	800ba32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b75a:	6878      	ldr	r0, [r7, #4]
 800b75c:	f000 f97d 	bl	800ba5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	2200      	movs	r2, #0
 800b764:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	691b      	ldr	r3, [r3, #16]
 800b76c:	f003 0310 	and.w	r3, r3, #16
 800b770:	2b10      	cmp	r3, #16
 800b772:	d122      	bne.n	800b7ba <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	68db      	ldr	r3, [r3, #12]
 800b77a:	f003 0310 	and.w	r3, r3, #16
 800b77e:	2b10      	cmp	r3, #16
 800b780:	d11b      	bne.n	800b7ba <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	f06f 0210 	mvn.w	r2, #16
 800b78a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	2208      	movs	r2, #8
 800b790:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	69db      	ldr	r3, [r3, #28]
 800b798:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d003      	beq.n	800b7a8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b7a0:	6878      	ldr	r0, [r7, #4]
 800b7a2:	f000 f950 	bl	800ba46 <HAL_TIM_IC_CaptureCallback>
 800b7a6:	e005      	b.n	800b7b4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b7a8:	6878      	ldr	r0, [r7, #4]
 800b7aa:	f000 f942 	bl	800ba32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b7ae:	6878      	ldr	r0, [r7, #4]
 800b7b0:	f000 f953 	bl	800ba5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	2200      	movs	r2, #0
 800b7b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	691b      	ldr	r3, [r3, #16]
 800b7c0:	f003 0301 	and.w	r3, r3, #1
 800b7c4:	2b01      	cmp	r3, #1
 800b7c6:	d10e      	bne.n	800b7e6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	68db      	ldr	r3, [r3, #12]
 800b7ce:	f003 0301 	and.w	r3, r3, #1
 800b7d2:	2b01      	cmp	r3, #1
 800b7d4:	d107      	bne.n	800b7e6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	f06f 0201 	mvn.w	r2, #1
 800b7de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b7e0:	6878      	ldr	r0, [r7, #4]
 800b7e2:	f7f8 f817 	bl	8003814 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	691b      	ldr	r3, [r3, #16]
 800b7ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b7f0:	2b80      	cmp	r3, #128	; 0x80
 800b7f2:	d10e      	bne.n	800b812 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	68db      	ldr	r3, [r3, #12]
 800b7fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b7fe:	2b80      	cmp	r3, #128	; 0x80
 800b800:	d107      	bne.n	800b812 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b80a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b80c:	6878      	ldr	r0, [r7, #4]
 800b80e:	f000 faff 	bl	800be10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	691b      	ldr	r3, [r3, #16]
 800b818:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b81c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b820:	d10e      	bne.n	800b840 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	68db      	ldr	r3, [r3, #12]
 800b828:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b82c:	2b80      	cmp	r3, #128	; 0x80
 800b82e:	d107      	bne.n	800b840 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b838:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b83a:	6878      	ldr	r0, [r7, #4]
 800b83c:	f000 faf2 	bl	800be24 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	691b      	ldr	r3, [r3, #16]
 800b846:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b84a:	2b40      	cmp	r3, #64	; 0x40
 800b84c:	d10e      	bne.n	800b86c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	68db      	ldr	r3, [r3, #12]
 800b854:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b858:	2b40      	cmp	r3, #64	; 0x40
 800b85a:	d107      	bne.n	800b86c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b864:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b866:	6878      	ldr	r0, [r7, #4]
 800b868:	f000 f901 	bl	800ba6e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	691b      	ldr	r3, [r3, #16]
 800b872:	f003 0320 	and.w	r3, r3, #32
 800b876:	2b20      	cmp	r3, #32
 800b878:	d10e      	bne.n	800b898 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	68db      	ldr	r3, [r3, #12]
 800b880:	f003 0320 	and.w	r3, r3, #32
 800b884:	2b20      	cmp	r3, #32
 800b886:	d107      	bne.n	800b898 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	f06f 0220 	mvn.w	r2, #32
 800b890:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b892:	6878      	ldr	r0, [r7, #4]
 800b894:	f000 fab2 	bl	800bdfc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b898:	bf00      	nop
 800b89a:	3708      	adds	r7, #8
 800b89c:	46bd      	mov	sp, r7
 800b89e:	bd80      	pop	{r7, pc}

0800b8a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b8a0:	b580      	push	{r7, lr}
 800b8a2:	b084      	sub	sp, #16
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]
 800b8a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b8b4:	2b01      	cmp	r3, #1
 800b8b6:	d101      	bne.n	800b8bc <HAL_TIM_ConfigClockSource+0x1c>
 800b8b8:	2302      	movs	r3, #2
 800b8ba:	e0b6      	b.n	800ba2a <HAL_TIM_ConfigClockSource+0x18a>
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	2201      	movs	r2, #1
 800b8c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	2202      	movs	r2, #2
 800b8c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	689b      	ldr	r3, [r3, #8]
 800b8d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b8d4:	68bb      	ldr	r3, [r7, #8]
 800b8d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b8da:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b8de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b8e0:	68bb      	ldr	r3, [r7, #8]
 800b8e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b8e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	68ba      	ldr	r2, [r7, #8]
 800b8ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b8f0:	683b      	ldr	r3, [r7, #0]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b8f8:	d03e      	beq.n	800b978 <HAL_TIM_ConfigClockSource+0xd8>
 800b8fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b8fe:	f200 8087 	bhi.w	800ba10 <HAL_TIM_ConfigClockSource+0x170>
 800b902:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b906:	f000 8086 	beq.w	800ba16 <HAL_TIM_ConfigClockSource+0x176>
 800b90a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b90e:	d87f      	bhi.n	800ba10 <HAL_TIM_ConfigClockSource+0x170>
 800b910:	2b70      	cmp	r3, #112	; 0x70
 800b912:	d01a      	beq.n	800b94a <HAL_TIM_ConfigClockSource+0xaa>
 800b914:	2b70      	cmp	r3, #112	; 0x70
 800b916:	d87b      	bhi.n	800ba10 <HAL_TIM_ConfigClockSource+0x170>
 800b918:	2b60      	cmp	r3, #96	; 0x60
 800b91a:	d050      	beq.n	800b9be <HAL_TIM_ConfigClockSource+0x11e>
 800b91c:	2b60      	cmp	r3, #96	; 0x60
 800b91e:	d877      	bhi.n	800ba10 <HAL_TIM_ConfigClockSource+0x170>
 800b920:	2b50      	cmp	r3, #80	; 0x50
 800b922:	d03c      	beq.n	800b99e <HAL_TIM_ConfigClockSource+0xfe>
 800b924:	2b50      	cmp	r3, #80	; 0x50
 800b926:	d873      	bhi.n	800ba10 <HAL_TIM_ConfigClockSource+0x170>
 800b928:	2b40      	cmp	r3, #64	; 0x40
 800b92a:	d058      	beq.n	800b9de <HAL_TIM_ConfigClockSource+0x13e>
 800b92c:	2b40      	cmp	r3, #64	; 0x40
 800b92e:	d86f      	bhi.n	800ba10 <HAL_TIM_ConfigClockSource+0x170>
 800b930:	2b30      	cmp	r3, #48	; 0x30
 800b932:	d064      	beq.n	800b9fe <HAL_TIM_ConfigClockSource+0x15e>
 800b934:	2b30      	cmp	r3, #48	; 0x30
 800b936:	d86b      	bhi.n	800ba10 <HAL_TIM_ConfigClockSource+0x170>
 800b938:	2b20      	cmp	r3, #32
 800b93a:	d060      	beq.n	800b9fe <HAL_TIM_ConfigClockSource+0x15e>
 800b93c:	2b20      	cmp	r3, #32
 800b93e:	d867      	bhi.n	800ba10 <HAL_TIM_ConfigClockSource+0x170>
 800b940:	2b00      	cmp	r3, #0
 800b942:	d05c      	beq.n	800b9fe <HAL_TIM_ConfigClockSource+0x15e>
 800b944:	2b10      	cmp	r3, #16
 800b946:	d05a      	beq.n	800b9fe <HAL_TIM_ConfigClockSource+0x15e>
 800b948:	e062      	b.n	800ba10 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	6818      	ldr	r0, [r3, #0]
 800b94e:	683b      	ldr	r3, [r7, #0]
 800b950:	6899      	ldr	r1, [r3, #8]
 800b952:	683b      	ldr	r3, [r7, #0]
 800b954:	685a      	ldr	r2, [r3, #4]
 800b956:	683b      	ldr	r3, [r7, #0]
 800b958:	68db      	ldr	r3, [r3, #12]
 800b95a:	f000 f9a7 	bl	800bcac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	689b      	ldr	r3, [r3, #8]
 800b964:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b966:	68bb      	ldr	r3, [r7, #8]
 800b968:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b96c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	68ba      	ldr	r2, [r7, #8]
 800b974:	609a      	str	r2, [r3, #8]
      break;
 800b976:	e04f      	b.n	800ba18 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	6818      	ldr	r0, [r3, #0]
 800b97c:	683b      	ldr	r3, [r7, #0]
 800b97e:	6899      	ldr	r1, [r3, #8]
 800b980:	683b      	ldr	r3, [r7, #0]
 800b982:	685a      	ldr	r2, [r3, #4]
 800b984:	683b      	ldr	r3, [r7, #0]
 800b986:	68db      	ldr	r3, [r3, #12]
 800b988:	f000 f990 	bl	800bcac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	689a      	ldr	r2, [r3, #8]
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b99a:	609a      	str	r2, [r3, #8]
      break;
 800b99c:	e03c      	b.n	800ba18 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	6818      	ldr	r0, [r3, #0]
 800b9a2:	683b      	ldr	r3, [r7, #0]
 800b9a4:	6859      	ldr	r1, [r3, #4]
 800b9a6:	683b      	ldr	r3, [r7, #0]
 800b9a8:	68db      	ldr	r3, [r3, #12]
 800b9aa:	461a      	mov	r2, r3
 800b9ac:	f000 f904 	bl	800bbb8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	2150      	movs	r1, #80	; 0x50
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	f000 f95d 	bl	800bc76 <TIM_ITRx_SetConfig>
      break;
 800b9bc:	e02c      	b.n	800ba18 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	6818      	ldr	r0, [r3, #0]
 800b9c2:	683b      	ldr	r3, [r7, #0]
 800b9c4:	6859      	ldr	r1, [r3, #4]
 800b9c6:	683b      	ldr	r3, [r7, #0]
 800b9c8:	68db      	ldr	r3, [r3, #12]
 800b9ca:	461a      	mov	r2, r3
 800b9cc:	f000 f923 	bl	800bc16 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	2160      	movs	r1, #96	; 0x60
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	f000 f94d 	bl	800bc76 <TIM_ITRx_SetConfig>
      break;
 800b9dc:	e01c      	b.n	800ba18 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	6818      	ldr	r0, [r3, #0]
 800b9e2:	683b      	ldr	r3, [r7, #0]
 800b9e4:	6859      	ldr	r1, [r3, #4]
 800b9e6:	683b      	ldr	r3, [r7, #0]
 800b9e8:	68db      	ldr	r3, [r3, #12]
 800b9ea:	461a      	mov	r2, r3
 800b9ec:	f000 f8e4 	bl	800bbb8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	2140      	movs	r1, #64	; 0x40
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	f000 f93d 	bl	800bc76 <TIM_ITRx_SetConfig>
      break;
 800b9fc:	e00c      	b.n	800ba18 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	681a      	ldr	r2, [r3, #0]
 800ba02:	683b      	ldr	r3, [r7, #0]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	4619      	mov	r1, r3
 800ba08:	4610      	mov	r0, r2
 800ba0a:	f000 f934 	bl	800bc76 <TIM_ITRx_SetConfig>
      break;
 800ba0e:	e003      	b.n	800ba18 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800ba10:	2301      	movs	r3, #1
 800ba12:	73fb      	strb	r3, [r7, #15]
      break;
 800ba14:	e000      	b.n	800ba18 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800ba16:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	2201      	movs	r2, #1
 800ba1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	2200      	movs	r2, #0
 800ba24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ba28:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	3710      	adds	r7, #16
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	bd80      	pop	{r7, pc}

0800ba32 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ba32:	b480      	push	{r7}
 800ba34:	b083      	sub	sp, #12
 800ba36:	af00      	add	r7, sp, #0
 800ba38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ba3a:	bf00      	nop
 800ba3c:	370c      	adds	r7, #12
 800ba3e:	46bd      	mov	sp, r7
 800ba40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba44:	4770      	bx	lr

0800ba46 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ba46:	b480      	push	{r7}
 800ba48:	b083      	sub	sp, #12
 800ba4a:	af00      	add	r7, sp, #0
 800ba4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ba4e:	bf00      	nop
 800ba50:	370c      	adds	r7, #12
 800ba52:	46bd      	mov	sp, r7
 800ba54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba58:	4770      	bx	lr

0800ba5a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ba5a:	b480      	push	{r7}
 800ba5c:	b083      	sub	sp, #12
 800ba5e:	af00      	add	r7, sp, #0
 800ba60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ba62:	bf00      	nop
 800ba64:	370c      	adds	r7, #12
 800ba66:	46bd      	mov	sp, r7
 800ba68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba6c:	4770      	bx	lr

0800ba6e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ba6e:	b480      	push	{r7}
 800ba70:	b083      	sub	sp, #12
 800ba72:	af00      	add	r7, sp, #0
 800ba74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ba76:	bf00      	nop
 800ba78:	370c      	adds	r7, #12
 800ba7a:	46bd      	mov	sp, r7
 800ba7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba80:	4770      	bx	lr
	...

0800ba84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ba84:	b480      	push	{r7}
 800ba86:	b085      	sub	sp, #20
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	6078      	str	r0, [r7, #4]
 800ba8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	4a40      	ldr	r2, [pc, #256]	; (800bb98 <TIM_Base_SetConfig+0x114>)
 800ba98:	4293      	cmp	r3, r2
 800ba9a:	d013      	beq.n	800bac4 <TIM_Base_SetConfig+0x40>
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800baa2:	d00f      	beq.n	800bac4 <TIM_Base_SetConfig+0x40>
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	4a3d      	ldr	r2, [pc, #244]	; (800bb9c <TIM_Base_SetConfig+0x118>)
 800baa8:	4293      	cmp	r3, r2
 800baaa:	d00b      	beq.n	800bac4 <TIM_Base_SetConfig+0x40>
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	4a3c      	ldr	r2, [pc, #240]	; (800bba0 <TIM_Base_SetConfig+0x11c>)
 800bab0:	4293      	cmp	r3, r2
 800bab2:	d007      	beq.n	800bac4 <TIM_Base_SetConfig+0x40>
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	4a3b      	ldr	r2, [pc, #236]	; (800bba4 <TIM_Base_SetConfig+0x120>)
 800bab8:	4293      	cmp	r3, r2
 800baba:	d003      	beq.n	800bac4 <TIM_Base_SetConfig+0x40>
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	4a3a      	ldr	r2, [pc, #232]	; (800bba8 <TIM_Base_SetConfig+0x124>)
 800bac0:	4293      	cmp	r3, r2
 800bac2:	d108      	bne.n	800bad6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800baca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bacc:	683b      	ldr	r3, [r7, #0]
 800bace:	685b      	ldr	r3, [r3, #4]
 800bad0:	68fa      	ldr	r2, [r7, #12]
 800bad2:	4313      	orrs	r3, r2
 800bad4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	4a2f      	ldr	r2, [pc, #188]	; (800bb98 <TIM_Base_SetConfig+0x114>)
 800bada:	4293      	cmp	r3, r2
 800badc:	d01f      	beq.n	800bb1e <TIM_Base_SetConfig+0x9a>
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bae4:	d01b      	beq.n	800bb1e <TIM_Base_SetConfig+0x9a>
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	4a2c      	ldr	r2, [pc, #176]	; (800bb9c <TIM_Base_SetConfig+0x118>)
 800baea:	4293      	cmp	r3, r2
 800baec:	d017      	beq.n	800bb1e <TIM_Base_SetConfig+0x9a>
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	4a2b      	ldr	r2, [pc, #172]	; (800bba0 <TIM_Base_SetConfig+0x11c>)
 800baf2:	4293      	cmp	r3, r2
 800baf4:	d013      	beq.n	800bb1e <TIM_Base_SetConfig+0x9a>
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	4a2a      	ldr	r2, [pc, #168]	; (800bba4 <TIM_Base_SetConfig+0x120>)
 800bafa:	4293      	cmp	r3, r2
 800bafc:	d00f      	beq.n	800bb1e <TIM_Base_SetConfig+0x9a>
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	4a29      	ldr	r2, [pc, #164]	; (800bba8 <TIM_Base_SetConfig+0x124>)
 800bb02:	4293      	cmp	r3, r2
 800bb04:	d00b      	beq.n	800bb1e <TIM_Base_SetConfig+0x9a>
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	4a28      	ldr	r2, [pc, #160]	; (800bbac <TIM_Base_SetConfig+0x128>)
 800bb0a:	4293      	cmp	r3, r2
 800bb0c:	d007      	beq.n	800bb1e <TIM_Base_SetConfig+0x9a>
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	4a27      	ldr	r2, [pc, #156]	; (800bbb0 <TIM_Base_SetConfig+0x12c>)
 800bb12:	4293      	cmp	r3, r2
 800bb14:	d003      	beq.n	800bb1e <TIM_Base_SetConfig+0x9a>
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	4a26      	ldr	r2, [pc, #152]	; (800bbb4 <TIM_Base_SetConfig+0x130>)
 800bb1a:	4293      	cmp	r3, r2
 800bb1c:	d108      	bne.n	800bb30 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bb24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bb26:	683b      	ldr	r3, [r7, #0]
 800bb28:	68db      	ldr	r3, [r3, #12]
 800bb2a:	68fa      	ldr	r2, [r7, #12]
 800bb2c:	4313      	orrs	r3, r2
 800bb2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bb36:	683b      	ldr	r3, [r7, #0]
 800bb38:	695b      	ldr	r3, [r3, #20]
 800bb3a:	4313      	orrs	r3, r2
 800bb3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	68fa      	ldr	r2, [r7, #12]
 800bb42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bb44:	683b      	ldr	r3, [r7, #0]
 800bb46:	689a      	ldr	r2, [r3, #8]
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bb4c:	683b      	ldr	r3, [r7, #0]
 800bb4e:	681a      	ldr	r2, [r3, #0]
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	4a10      	ldr	r2, [pc, #64]	; (800bb98 <TIM_Base_SetConfig+0x114>)
 800bb58:	4293      	cmp	r3, r2
 800bb5a:	d00f      	beq.n	800bb7c <TIM_Base_SetConfig+0xf8>
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	4a12      	ldr	r2, [pc, #72]	; (800bba8 <TIM_Base_SetConfig+0x124>)
 800bb60:	4293      	cmp	r3, r2
 800bb62:	d00b      	beq.n	800bb7c <TIM_Base_SetConfig+0xf8>
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	4a11      	ldr	r2, [pc, #68]	; (800bbac <TIM_Base_SetConfig+0x128>)
 800bb68:	4293      	cmp	r3, r2
 800bb6a:	d007      	beq.n	800bb7c <TIM_Base_SetConfig+0xf8>
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	4a10      	ldr	r2, [pc, #64]	; (800bbb0 <TIM_Base_SetConfig+0x12c>)
 800bb70:	4293      	cmp	r3, r2
 800bb72:	d003      	beq.n	800bb7c <TIM_Base_SetConfig+0xf8>
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	4a0f      	ldr	r2, [pc, #60]	; (800bbb4 <TIM_Base_SetConfig+0x130>)
 800bb78:	4293      	cmp	r3, r2
 800bb7a:	d103      	bne.n	800bb84 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bb7c:	683b      	ldr	r3, [r7, #0]
 800bb7e:	691a      	ldr	r2, [r3, #16]
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	2201      	movs	r2, #1
 800bb88:	615a      	str	r2, [r3, #20]
}
 800bb8a:	bf00      	nop
 800bb8c:	3714      	adds	r7, #20
 800bb8e:	46bd      	mov	sp, r7
 800bb90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb94:	4770      	bx	lr
 800bb96:	bf00      	nop
 800bb98:	40012c00 	.word	0x40012c00
 800bb9c:	40000400 	.word	0x40000400
 800bba0:	40000800 	.word	0x40000800
 800bba4:	40000c00 	.word	0x40000c00
 800bba8:	40013400 	.word	0x40013400
 800bbac:	40014000 	.word	0x40014000
 800bbb0:	40014400 	.word	0x40014400
 800bbb4:	40014800 	.word	0x40014800

0800bbb8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bbb8:	b480      	push	{r7}
 800bbba:	b087      	sub	sp, #28
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	60f8      	str	r0, [r7, #12]
 800bbc0:	60b9      	str	r1, [r7, #8]
 800bbc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	6a1b      	ldr	r3, [r3, #32]
 800bbc8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	6a1b      	ldr	r3, [r3, #32]
 800bbce:	f023 0201 	bic.w	r2, r3, #1
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	699b      	ldr	r3, [r3, #24]
 800bbda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bbdc:	693b      	ldr	r3, [r7, #16]
 800bbde:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bbe2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	011b      	lsls	r3, r3, #4
 800bbe8:	693a      	ldr	r2, [r7, #16]
 800bbea:	4313      	orrs	r3, r2
 800bbec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bbee:	697b      	ldr	r3, [r7, #20]
 800bbf0:	f023 030a 	bic.w	r3, r3, #10
 800bbf4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bbf6:	697a      	ldr	r2, [r7, #20]
 800bbf8:	68bb      	ldr	r3, [r7, #8]
 800bbfa:	4313      	orrs	r3, r2
 800bbfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	693a      	ldr	r2, [r7, #16]
 800bc02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	697a      	ldr	r2, [r7, #20]
 800bc08:	621a      	str	r2, [r3, #32]
}
 800bc0a:	bf00      	nop
 800bc0c:	371c      	adds	r7, #28
 800bc0e:	46bd      	mov	sp, r7
 800bc10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc14:	4770      	bx	lr

0800bc16 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bc16:	b480      	push	{r7}
 800bc18:	b087      	sub	sp, #28
 800bc1a:	af00      	add	r7, sp, #0
 800bc1c:	60f8      	str	r0, [r7, #12]
 800bc1e:	60b9      	str	r1, [r7, #8]
 800bc20:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	6a1b      	ldr	r3, [r3, #32]
 800bc26:	f023 0210 	bic.w	r2, r3, #16
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	699b      	ldr	r3, [r3, #24]
 800bc32:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	6a1b      	ldr	r3, [r3, #32]
 800bc38:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bc3a:	697b      	ldr	r3, [r7, #20]
 800bc3c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bc40:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	031b      	lsls	r3, r3, #12
 800bc46:	697a      	ldr	r2, [r7, #20]
 800bc48:	4313      	orrs	r3, r2
 800bc4a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bc4c:	693b      	ldr	r3, [r7, #16]
 800bc4e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800bc52:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bc54:	68bb      	ldr	r3, [r7, #8]
 800bc56:	011b      	lsls	r3, r3, #4
 800bc58:	693a      	ldr	r2, [r7, #16]
 800bc5a:	4313      	orrs	r3, r2
 800bc5c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	697a      	ldr	r2, [r7, #20]
 800bc62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	693a      	ldr	r2, [r7, #16]
 800bc68:	621a      	str	r2, [r3, #32]
}
 800bc6a:	bf00      	nop
 800bc6c:	371c      	adds	r7, #28
 800bc6e:	46bd      	mov	sp, r7
 800bc70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc74:	4770      	bx	lr

0800bc76 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bc76:	b480      	push	{r7}
 800bc78:	b085      	sub	sp, #20
 800bc7a:	af00      	add	r7, sp, #0
 800bc7c:	6078      	str	r0, [r7, #4]
 800bc7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	689b      	ldr	r3, [r3, #8]
 800bc84:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bc8c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bc8e:	683a      	ldr	r2, [r7, #0]
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	4313      	orrs	r3, r2
 800bc94:	f043 0307 	orr.w	r3, r3, #7
 800bc98:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	68fa      	ldr	r2, [r7, #12]
 800bc9e:	609a      	str	r2, [r3, #8]
}
 800bca0:	bf00      	nop
 800bca2:	3714      	adds	r7, #20
 800bca4:	46bd      	mov	sp, r7
 800bca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcaa:	4770      	bx	lr

0800bcac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bcac:	b480      	push	{r7}
 800bcae:	b087      	sub	sp, #28
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	60f8      	str	r0, [r7, #12]
 800bcb4:	60b9      	str	r1, [r7, #8]
 800bcb6:	607a      	str	r2, [r7, #4]
 800bcb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	689b      	ldr	r3, [r3, #8]
 800bcbe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bcc0:	697b      	ldr	r3, [r7, #20]
 800bcc2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bcc6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bcc8:	683b      	ldr	r3, [r7, #0]
 800bcca:	021a      	lsls	r2, r3, #8
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	431a      	orrs	r2, r3
 800bcd0:	68bb      	ldr	r3, [r7, #8]
 800bcd2:	4313      	orrs	r3, r2
 800bcd4:	697a      	ldr	r2, [r7, #20]
 800bcd6:	4313      	orrs	r3, r2
 800bcd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	697a      	ldr	r2, [r7, #20]
 800bcde:	609a      	str	r2, [r3, #8]
}
 800bce0:	bf00      	nop
 800bce2:	371c      	adds	r7, #28
 800bce4:	46bd      	mov	sp, r7
 800bce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcea:	4770      	bx	lr

0800bcec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bcec:	b480      	push	{r7}
 800bcee:	b085      	sub	sp, #20
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	6078      	str	r0, [r7, #4]
 800bcf4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bcfc:	2b01      	cmp	r3, #1
 800bcfe:	d101      	bne.n	800bd04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bd00:	2302      	movs	r3, #2
 800bd02:	e068      	b.n	800bdd6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	2201      	movs	r2, #1
 800bd08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	2202      	movs	r2, #2
 800bd10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	685b      	ldr	r3, [r3, #4]
 800bd1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	689b      	ldr	r3, [r3, #8]
 800bd22:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	4a2e      	ldr	r2, [pc, #184]	; (800bde4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800bd2a:	4293      	cmp	r3, r2
 800bd2c:	d004      	beq.n	800bd38 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	4a2d      	ldr	r2, [pc, #180]	; (800bde8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800bd34:	4293      	cmp	r3, r2
 800bd36:	d108      	bne.n	800bd4a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800bd3e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bd40:	683b      	ldr	r3, [r7, #0]
 800bd42:	685b      	ldr	r3, [r3, #4]
 800bd44:	68fa      	ldr	r2, [r7, #12]
 800bd46:	4313      	orrs	r3, r2
 800bd48:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bd50:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bd52:	683b      	ldr	r3, [r7, #0]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	68fa      	ldr	r2, [r7, #12]
 800bd58:	4313      	orrs	r3, r2
 800bd5a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	68fa      	ldr	r2, [r7, #12]
 800bd62:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	4a1e      	ldr	r2, [pc, #120]	; (800bde4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800bd6a:	4293      	cmp	r3, r2
 800bd6c:	d01d      	beq.n	800bdaa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bd76:	d018      	beq.n	800bdaa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	4a1b      	ldr	r2, [pc, #108]	; (800bdec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800bd7e:	4293      	cmp	r3, r2
 800bd80:	d013      	beq.n	800bdaa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	4a1a      	ldr	r2, [pc, #104]	; (800bdf0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800bd88:	4293      	cmp	r3, r2
 800bd8a:	d00e      	beq.n	800bdaa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	4a18      	ldr	r2, [pc, #96]	; (800bdf4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800bd92:	4293      	cmp	r3, r2
 800bd94:	d009      	beq.n	800bdaa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	4a13      	ldr	r2, [pc, #76]	; (800bde8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800bd9c:	4293      	cmp	r3, r2
 800bd9e:	d004      	beq.n	800bdaa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	4a14      	ldr	r2, [pc, #80]	; (800bdf8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800bda6:	4293      	cmp	r3, r2
 800bda8:	d10c      	bne.n	800bdc4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bdaa:	68bb      	ldr	r3, [r7, #8]
 800bdac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bdb0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bdb2:	683b      	ldr	r3, [r7, #0]
 800bdb4:	689b      	ldr	r3, [r3, #8]
 800bdb6:	68ba      	ldr	r2, [r7, #8]
 800bdb8:	4313      	orrs	r3, r2
 800bdba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	68ba      	ldr	r2, [r7, #8]
 800bdc2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	2201      	movs	r2, #1
 800bdc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	2200      	movs	r2, #0
 800bdd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bdd4:	2300      	movs	r3, #0
}
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	3714      	adds	r7, #20
 800bdda:	46bd      	mov	sp, r7
 800bddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde0:	4770      	bx	lr
 800bde2:	bf00      	nop
 800bde4:	40012c00 	.word	0x40012c00
 800bde8:	40013400 	.word	0x40013400
 800bdec:	40000400 	.word	0x40000400
 800bdf0:	40000800 	.word	0x40000800
 800bdf4:	40000c00 	.word	0x40000c00
 800bdf8:	40014000 	.word	0x40014000

0800bdfc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bdfc:	b480      	push	{r7}
 800bdfe:	b083      	sub	sp, #12
 800be00:	af00      	add	r7, sp, #0
 800be02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800be04:	bf00      	nop
 800be06:	370c      	adds	r7, #12
 800be08:	46bd      	mov	sp, r7
 800be0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0e:	4770      	bx	lr

0800be10 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800be10:	b480      	push	{r7}
 800be12:	b083      	sub	sp, #12
 800be14:	af00      	add	r7, sp, #0
 800be16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800be18:	bf00      	nop
 800be1a:	370c      	adds	r7, #12
 800be1c:	46bd      	mov	sp, r7
 800be1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be22:	4770      	bx	lr

0800be24 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800be24:	b480      	push	{r7}
 800be26:	b083      	sub	sp, #12
 800be28:	af00      	add	r7, sp, #0
 800be2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800be2c:	bf00      	nop
 800be2e:	370c      	adds	r7, #12
 800be30:	46bd      	mov	sp, r7
 800be32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be36:	4770      	bx	lr

0800be38 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800be38:	b580      	push	{r7, lr}
 800be3a:	b082      	sub	sp, #8
 800be3c:	af00      	add	r7, sp, #0
 800be3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	2b00      	cmp	r3, #0
 800be44:	d101      	bne.n	800be4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800be46:	2301      	movs	r3, #1
 800be48:	e040      	b.n	800becc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d106      	bne.n	800be60 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	2200      	movs	r2, #0
 800be56:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800be5a:	6878      	ldr	r0, [r7, #4]
 800be5c:	f7f8 fe4c 	bl	8004af8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	2224      	movs	r2, #36	; 0x24
 800be64:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	681a      	ldr	r2, [r3, #0]
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	f022 0201 	bic.w	r2, r2, #1
 800be74:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800be76:	6878      	ldr	r0, [r7, #4]
 800be78:	f000 fc0a 	bl	800c690 <UART_SetConfig>
 800be7c:	4603      	mov	r3, r0
 800be7e:	2b01      	cmp	r3, #1
 800be80:	d101      	bne.n	800be86 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800be82:	2301      	movs	r3, #1
 800be84:	e022      	b.n	800becc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d002      	beq.n	800be94 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800be8e:	6878      	ldr	r0, [r7, #4]
 800be90:	f000 feb6 	bl	800cc00 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	685a      	ldr	r2, [r3, #4]
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bea2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	689a      	ldr	r2, [r3, #8]
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800beb2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	681a      	ldr	r2, [r3, #0]
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	f042 0201 	orr.w	r2, r2, #1
 800bec2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bec4:	6878      	ldr	r0, [r7, #4]
 800bec6:	f000 ff3d 	bl	800cd44 <UART_CheckIdleState>
 800beca:	4603      	mov	r3, r0
}
 800becc:	4618      	mov	r0, r3
 800bece:	3708      	adds	r7, #8
 800bed0:	46bd      	mov	sp, r7
 800bed2:	bd80      	pop	{r7, pc}

0800bed4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bed4:	b580      	push	{r7, lr}
 800bed6:	b08a      	sub	sp, #40	; 0x28
 800bed8:	af00      	add	r7, sp, #0
 800beda:	60f8      	str	r0, [r7, #12]
 800bedc:	60b9      	str	r1, [r7, #8]
 800bede:	4613      	mov	r3, r2
 800bee0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bee6:	2b20      	cmp	r3, #32
 800bee8:	d142      	bne.n	800bf70 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800beea:	68bb      	ldr	r3, [r7, #8]
 800beec:	2b00      	cmp	r3, #0
 800beee:	d002      	beq.n	800bef6 <HAL_UART_Receive_IT+0x22>
 800bef0:	88fb      	ldrh	r3, [r7, #6]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d101      	bne.n	800befa <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800bef6:	2301      	movs	r3, #1
 800bef8:	e03b      	b.n	800bf72 <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800bf00:	2b01      	cmp	r3, #1
 800bf02:	d101      	bne.n	800bf08 <HAL_UART_Receive_IT+0x34>
 800bf04:	2302      	movs	r3, #2
 800bf06:	e034      	b.n	800bf72 <HAL_UART_Receive_IT+0x9e>
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	2201      	movs	r2, #1
 800bf0c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	2200      	movs	r2, #0
 800bf14:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	4a18      	ldr	r2, [pc, #96]	; (800bf7c <HAL_UART_Receive_IT+0xa8>)
 800bf1c:	4293      	cmp	r3, r2
 800bf1e:	d01f      	beq.n	800bf60 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	685b      	ldr	r3, [r3, #4]
 800bf26:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d018      	beq.n	800bf60 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf34:	697b      	ldr	r3, [r7, #20]
 800bf36:	e853 3f00 	ldrex	r3, [r3]
 800bf3a:	613b      	str	r3, [r7, #16]
   return(result);
 800bf3c:	693b      	ldr	r3, [r7, #16]
 800bf3e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800bf42:	627b      	str	r3, [r7, #36]	; 0x24
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	461a      	mov	r2, r3
 800bf4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf4c:	623b      	str	r3, [r7, #32]
 800bf4e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf50:	69f9      	ldr	r1, [r7, #28]
 800bf52:	6a3a      	ldr	r2, [r7, #32]
 800bf54:	e841 2300 	strex	r3, r2, [r1]
 800bf58:	61bb      	str	r3, [r7, #24]
   return(result);
 800bf5a:	69bb      	ldr	r3, [r7, #24]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d1e6      	bne.n	800bf2e <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800bf60:	88fb      	ldrh	r3, [r7, #6]
 800bf62:	461a      	mov	r2, r3
 800bf64:	68b9      	ldr	r1, [r7, #8]
 800bf66:	68f8      	ldr	r0, [r7, #12]
 800bf68:	f000 fffa 	bl	800cf60 <UART_Start_Receive_IT>
 800bf6c:	4603      	mov	r3, r0
 800bf6e:	e000      	b.n	800bf72 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800bf70:	2302      	movs	r3, #2
  }
}
 800bf72:	4618      	mov	r0, r3
 800bf74:	3728      	adds	r7, #40	; 0x28
 800bf76:	46bd      	mov	sp, r7
 800bf78:	bd80      	pop	{r7, pc}
 800bf7a:	bf00      	nop
 800bf7c:	40008000 	.word	0x40008000

0800bf80 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800bf80:	b580      	push	{r7, lr}
 800bf82:	b08a      	sub	sp, #40	; 0x28
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	60f8      	str	r0, [r7, #12]
 800bf88:	60b9      	str	r1, [r7, #8]
 800bf8a:	4613      	mov	r3, r2
 800bf8c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bf92:	2b20      	cmp	r3, #32
 800bf94:	d178      	bne.n	800c088 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800bf96:	68bb      	ldr	r3, [r7, #8]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d002      	beq.n	800bfa2 <HAL_UART_Transmit_DMA+0x22>
 800bf9c:	88fb      	ldrh	r3, [r7, #6]
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d101      	bne.n	800bfa6 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800bfa2:	2301      	movs	r3, #1
 800bfa4:	e071      	b.n	800c08a <HAL_UART_Transmit_DMA+0x10a>
    }

    __HAL_LOCK(huart);
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800bfac:	2b01      	cmp	r3, #1
 800bfae:	d101      	bne.n	800bfb4 <HAL_UART_Transmit_DMA+0x34>
 800bfb0:	2302      	movs	r3, #2
 800bfb2:	e06a      	b.n	800c08a <HAL_UART_Transmit_DMA+0x10a>
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	2201      	movs	r2, #1
 800bfb8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	68ba      	ldr	r2, [r7, #8]
 800bfc0:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	88fa      	ldrh	r2, [r7, #6]
 800bfc6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	88fa      	ldrh	r2, [r7, #6]
 800bfce:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	2200      	movs	r2, #0
 800bfd6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	2221      	movs	r2, #33	; 0x21
 800bfde:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d02b      	beq.n	800c040 <HAL_UART_Transmit_DMA+0xc0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bfec:	4a29      	ldr	r2, [pc, #164]	; (800c094 <HAL_UART_Transmit_DMA+0x114>)
 800bfee:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bff4:	4a28      	ldr	r2, [pc, #160]	; (800c098 <HAL_UART_Transmit_DMA+0x118>)
 800bff6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bffc:	4a27      	ldr	r2, [pc, #156]	; (800c09c <HAL_UART_Transmit_DMA+0x11c>)
 800bffe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c004:	2200      	movs	r2, #0
 800c006:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c010:	4619      	mov	r1, r3
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	3328      	adds	r3, #40	; 0x28
 800c018:	461a      	mov	r2, r3
 800c01a:	88fb      	ldrh	r3, [r7, #6]
 800c01c:	f7f9 ff94 	bl	8005f48 <HAL_DMA_Start_IT>
 800c020:	4603      	mov	r3, r0
 800c022:	2b00      	cmp	r3, #0
 800c024:	d00c      	beq.n	800c040 <HAL_UART_Transmit_DMA+0xc0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	2210      	movs	r2, #16
 800c02a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	2200      	movs	r2, #0
 800c032:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	2220      	movs	r2, #32
 800c03a:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 800c03c:	2301      	movs	r3, #1
 800c03e:	e024      	b.n	800c08a <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	2240      	movs	r2, #64	; 0x40
 800c046:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	2200      	movs	r2, #0
 800c04c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	3308      	adds	r3, #8
 800c056:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c058:	697b      	ldr	r3, [r7, #20]
 800c05a:	e853 3f00 	ldrex	r3, [r3]
 800c05e:	613b      	str	r3, [r7, #16]
   return(result);
 800c060:	693b      	ldr	r3, [r7, #16]
 800c062:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c066:	627b      	str	r3, [r7, #36]	; 0x24
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	3308      	adds	r3, #8
 800c06e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c070:	623a      	str	r2, [r7, #32]
 800c072:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c074:	69f9      	ldr	r1, [r7, #28]
 800c076:	6a3a      	ldr	r2, [r7, #32]
 800c078:	e841 2300 	strex	r3, r2, [r1]
 800c07c:	61bb      	str	r3, [r7, #24]
   return(result);
 800c07e:	69bb      	ldr	r3, [r7, #24]
 800c080:	2b00      	cmp	r3, #0
 800c082:	d1e5      	bne.n	800c050 <HAL_UART_Transmit_DMA+0xd0>

    return HAL_OK;
 800c084:	2300      	movs	r3, #0
 800c086:	e000      	b.n	800c08a <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800c088:	2302      	movs	r3, #2
  }
}
 800c08a:	4618      	mov	r0, r3
 800c08c:	3728      	adds	r7, #40	; 0x28
 800c08e:	46bd      	mov	sp, r7
 800c090:	bd80      	pop	{r7, pc}
 800c092:	bf00      	nop
 800c094:	0800d207 	.word	0x0800d207
 800c098:	0800d2a1 	.word	0x0800d2a1
 800c09c:	0800d2bd 	.word	0x0800d2bd

0800c0a0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c0a0:	b580      	push	{r7, lr}
 800c0a2:	b0ba      	sub	sp, #232	; 0xe8
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	69db      	ldr	r3, [r3, #28]
 800c0ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	689b      	ldr	r3, [r3, #8]
 800c0c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c0c6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800c0ca:	f640 030f 	movw	r3, #2063	; 0x80f
 800c0ce:	4013      	ands	r3, r2
 800c0d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800c0d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d115      	bne.n	800c108 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800c0dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c0e0:	f003 0320 	and.w	r3, r3, #32
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d00f      	beq.n	800c108 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800c0e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c0ec:	f003 0320 	and.w	r3, r3, #32
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d009      	beq.n	800c108 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	f000 82a6 	beq.w	800c64a <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c102:	6878      	ldr	r0, [r7, #4]
 800c104:	4798      	blx	r3
      }
      return;
 800c106:	e2a0      	b.n	800c64a <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800c108:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	f000 8117 	beq.w	800c340 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800c112:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c116:	f003 0301 	and.w	r3, r3, #1
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d106      	bne.n	800c12c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800c11e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800c122:	4b85      	ldr	r3, [pc, #532]	; (800c338 <HAL_UART_IRQHandler+0x298>)
 800c124:	4013      	ands	r3, r2
 800c126:	2b00      	cmp	r3, #0
 800c128:	f000 810a 	beq.w	800c340 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c12c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c130:	f003 0301 	and.w	r3, r3, #1
 800c134:	2b00      	cmp	r3, #0
 800c136:	d011      	beq.n	800c15c <HAL_UART_IRQHandler+0xbc>
 800c138:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c13c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c140:	2b00      	cmp	r3, #0
 800c142:	d00b      	beq.n	800c15c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	2201      	movs	r2, #1
 800c14a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c152:	f043 0201 	orr.w	r2, r3, #1
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c15c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c160:	f003 0302 	and.w	r3, r3, #2
 800c164:	2b00      	cmp	r3, #0
 800c166:	d011      	beq.n	800c18c <HAL_UART_IRQHandler+0xec>
 800c168:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c16c:	f003 0301 	and.w	r3, r3, #1
 800c170:	2b00      	cmp	r3, #0
 800c172:	d00b      	beq.n	800c18c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	2202      	movs	r2, #2
 800c17a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c182:	f043 0204 	orr.w	r2, r3, #4
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c18c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c190:	f003 0304 	and.w	r3, r3, #4
 800c194:	2b00      	cmp	r3, #0
 800c196:	d011      	beq.n	800c1bc <HAL_UART_IRQHandler+0x11c>
 800c198:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c19c:	f003 0301 	and.w	r3, r3, #1
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d00b      	beq.n	800c1bc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	2204      	movs	r2, #4
 800c1aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c1b2:	f043 0202 	orr.w	r2, r3, #2
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c1bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c1c0:	f003 0308 	and.w	r3, r3, #8
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d017      	beq.n	800c1f8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800c1c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c1cc:	f003 0320 	and.w	r3, r3, #32
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d105      	bne.n	800c1e0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800c1d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c1d8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d00b      	beq.n	800c1f8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	2208      	movs	r2, #8
 800c1e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c1ee:	f043 0208 	orr.w	r2, r3, #8
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c1f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c1fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c200:	2b00      	cmp	r3, #0
 800c202:	d012      	beq.n	800c22a <HAL_UART_IRQHandler+0x18a>
 800c204:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c208:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d00c      	beq.n	800c22a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c218:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c220:	f043 0220 	orr.w	r2, r3, #32
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c230:	2b00      	cmp	r3, #0
 800c232:	f000 820c 	beq.w	800c64e <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800c236:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c23a:	f003 0320 	and.w	r3, r3, #32
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d00d      	beq.n	800c25e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800c242:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c246:	f003 0320 	and.w	r3, r3, #32
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d007      	beq.n	800c25e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c252:	2b00      	cmp	r3, #0
 800c254:	d003      	beq.n	800c25e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c25a:	6878      	ldr	r0, [r7, #4]
 800c25c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c264:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	689b      	ldr	r3, [r3, #8]
 800c26e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c272:	2b40      	cmp	r3, #64	; 0x40
 800c274:	d005      	beq.n	800c282 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c276:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c27a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d04f      	beq.n	800c322 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c282:	6878      	ldr	r0, [r7, #4]
 800c284:	f000 ff5c 	bl	800d140 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	689b      	ldr	r3, [r3, #8]
 800c28e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c292:	2b40      	cmp	r3, #64	; 0x40
 800c294:	d141      	bne.n	800c31a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	3308      	adds	r3, #8
 800c29c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c2a4:	e853 3f00 	ldrex	r3, [r3]
 800c2a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c2ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c2b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c2b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	3308      	adds	r3, #8
 800c2be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c2c2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c2c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c2ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c2d2:	e841 2300 	strex	r3, r2, [r1]
 800c2d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c2da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d1d9      	bne.n	800c296 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d013      	beq.n	800c312 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c2ee:	4a13      	ldr	r2, [pc, #76]	; (800c33c <HAL_UART_IRQHandler+0x29c>)
 800c2f0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c2f6:	4618      	mov	r0, r3
 800c2f8:	f7f9 fec4 	bl	8006084 <HAL_DMA_Abort_IT>
 800c2fc:	4603      	mov	r3, r0
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d017      	beq.n	800c332 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c308:	687a      	ldr	r2, [r7, #4]
 800c30a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800c30c:	4610      	mov	r0, r2
 800c30e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c310:	e00f      	b.n	800c332 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c312:	6878      	ldr	r0, [r7, #4]
 800c314:	f7f7 fd02 	bl	8003d1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c318:	e00b      	b.n	800c332 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c31a:	6878      	ldr	r0, [r7, #4]
 800c31c:	f7f7 fcfe 	bl	8003d1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c320:	e007      	b.n	800c332 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c322:	6878      	ldr	r0, [r7, #4]
 800c324:	f7f7 fcfa 	bl	8003d1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	2200      	movs	r2, #0
 800c32c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800c330:	e18d      	b.n	800c64e <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c332:	bf00      	nop
    return;
 800c334:	e18b      	b.n	800c64e <HAL_UART_IRQHandler+0x5ae>
 800c336:	bf00      	nop
 800c338:	04000120 	.word	0x04000120
 800c33c:	0800d339 	.word	0x0800d339

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c344:	2b01      	cmp	r3, #1
 800c346:	f040 8146 	bne.w	800c5d6 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c34a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c34e:	f003 0310 	and.w	r3, r3, #16
 800c352:	2b00      	cmp	r3, #0
 800c354:	f000 813f 	beq.w	800c5d6 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c358:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c35c:	f003 0310 	and.w	r3, r3, #16
 800c360:	2b00      	cmp	r3, #0
 800c362:	f000 8138 	beq.w	800c5d6 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	2210      	movs	r2, #16
 800c36c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	689b      	ldr	r3, [r3, #8]
 800c374:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c378:	2b40      	cmp	r3, #64	; 0x40
 800c37a:	f040 80b4 	bne.w	800c4e6 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	685b      	ldr	r3, [r3, #4]
 800c386:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c38a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c38e:	2b00      	cmp	r3, #0
 800c390:	f000 815f 	beq.w	800c652 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c39a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c39e:	429a      	cmp	r2, r3
 800c3a0:	f080 8157 	bcs.w	800c652 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c3aa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	f003 0320 	and.w	r3, r3, #32
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	f040 8085 	bne.w	800c4ca <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c3cc:	e853 3f00 	ldrex	r3, [r3]
 800c3d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c3d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c3d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c3dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	461a      	mov	r2, r3
 800c3e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c3ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c3ee:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3f2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c3f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c3fa:	e841 2300 	strex	r3, r2, [r1]
 800c3fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c402:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c406:	2b00      	cmp	r3, #0
 800c408:	d1da      	bne.n	800c3c0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	3308      	adds	r3, #8
 800c410:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c412:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c414:	e853 3f00 	ldrex	r3, [r3]
 800c418:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c41a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c41c:	f023 0301 	bic.w	r3, r3, #1
 800c420:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	3308      	adds	r3, #8
 800c42a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c42e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c432:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c434:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c436:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c43a:	e841 2300 	strex	r3, r2, [r1]
 800c43e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c440:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c442:	2b00      	cmp	r3, #0
 800c444:	d1e1      	bne.n	800c40a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	3308      	adds	r3, #8
 800c44c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c44e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c450:	e853 3f00 	ldrex	r3, [r3]
 800c454:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c456:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c458:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c45c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	3308      	adds	r3, #8
 800c466:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c46a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c46c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c46e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c470:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c472:	e841 2300 	strex	r3, r2, [r1]
 800c476:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c478:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d1e3      	bne.n	800c446 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	2220      	movs	r2, #32
 800c482:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	2200      	movs	r2, #0
 800c488:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c490:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c492:	e853 3f00 	ldrex	r3, [r3]
 800c496:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c498:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c49a:	f023 0310 	bic.w	r3, r3, #16
 800c49e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	461a      	mov	r2, r3
 800c4a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c4ac:	65bb      	str	r3, [r7, #88]	; 0x58
 800c4ae:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4b0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c4b2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c4b4:	e841 2300 	strex	r3, r2, [r1]
 800c4b8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c4ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d1e4      	bne.n	800c48a <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c4c4:	4618      	mov	r0, r3
 800c4c6:	f7f9 fd9f 	bl	8006008 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c4d6:	b29b      	uxth	r3, r3
 800c4d8:	1ad3      	subs	r3, r2, r3
 800c4da:	b29b      	uxth	r3, r3
 800c4dc:	4619      	mov	r1, r3
 800c4de:	6878      	ldr	r0, [r7, #4]
 800c4e0:	f000 f8ca 	bl	800c678 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c4e4:	e0b5      	b.n	800c652 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c4f2:	b29b      	uxth	r3, r3
 800c4f4:	1ad3      	subs	r3, r2, r3
 800c4f6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c500:	b29b      	uxth	r3, r3
 800c502:	2b00      	cmp	r3, #0
 800c504:	f000 80a7 	beq.w	800c656 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 800c508:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	f000 80a2 	beq.w	800c656 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c51a:	e853 3f00 	ldrex	r3, [r3]
 800c51e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c520:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c522:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c526:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	461a      	mov	r2, r3
 800c530:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c534:	647b      	str	r3, [r7, #68]	; 0x44
 800c536:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c538:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c53a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c53c:	e841 2300 	strex	r3, r2, [r1]
 800c540:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c542:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c544:	2b00      	cmp	r3, #0
 800c546:	d1e4      	bne.n	800c512 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	3308      	adds	r3, #8
 800c54e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c552:	e853 3f00 	ldrex	r3, [r3]
 800c556:	623b      	str	r3, [r7, #32]
   return(result);
 800c558:	6a3b      	ldr	r3, [r7, #32]
 800c55a:	f023 0301 	bic.w	r3, r3, #1
 800c55e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	3308      	adds	r3, #8
 800c568:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c56c:	633a      	str	r2, [r7, #48]	; 0x30
 800c56e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c570:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c572:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c574:	e841 2300 	strex	r3, r2, [r1]
 800c578:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c57a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d1e3      	bne.n	800c548 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	2220      	movs	r2, #32
 800c584:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	2200      	movs	r2, #0
 800c58a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	2200      	movs	r2, #0
 800c590:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c598:	693b      	ldr	r3, [r7, #16]
 800c59a:	e853 3f00 	ldrex	r3, [r3]
 800c59e:	60fb      	str	r3, [r7, #12]
   return(result);
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	f023 0310 	bic.w	r3, r3, #16
 800c5a6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	461a      	mov	r2, r3
 800c5b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c5b4:	61fb      	str	r3, [r7, #28]
 800c5b6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5b8:	69b9      	ldr	r1, [r7, #24]
 800c5ba:	69fa      	ldr	r2, [r7, #28]
 800c5bc:	e841 2300 	strex	r3, r2, [r1]
 800c5c0:	617b      	str	r3, [r7, #20]
   return(result);
 800c5c2:	697b      	ldr	r3, [r7, #20]
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d1e4      	bne.n	800c592 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c5c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c5cc:	4619      	mov	r1, r3
 800c5ce:	6878      	ldr	r0, [r7, #4]
 800c5d0:	f000 f852 	bl	800c678 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c5d4:	e03f      	b.n	800c656 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c5d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c5da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d00e      	beq.n	800c600 <HAL_UART_IRQHandler+0x560>
 800c5e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c5e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d008      	beq.n	800c600 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800c5f6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c5f8:	6878      	ldr	r0, [r7, #4]
 800c5fa:	f001 f83d 	bl	800d678 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c5fe:	e02d      	b.n	800c65c <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800c600:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c604:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d00e      	beq.n	800c62a <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800c60c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c610:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c614:	2b00      	cmp	r3, #0
 800c616:	d008      	beq.n	800c62a <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d01c      	beq.n	800c65a <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c624:	6878      	ldr	r0, [r7, #4]
 800c626:	4798      	blx	r3
    }
    return;
 800c628:	e017      	b.n	800c65a <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c62a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c62e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c632:	2b00      	cmp	r3, #0
 800c634:	d012      	beq.n	800c65c <HAL_UART_IRQHandler+0x5bc>
 800c636:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c63a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d00c      	beq.n	800c65c <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800c642:	6878      	ldr	r0, [r7, #4]
 800c644:	f000 fe8e 	bl	800d364 <UART_EndTransmit_IT>
    return;
 800c648:	e008      	b.n	800c65c <HAL_UART_IRQHandler+0x5bc>
      return;
 800c64a:	bf00      	nop
 800c64c:	e006      	b.n	800c65c <HAL_UART_IRQHandler+0x5bc>
    return;
 800c64e:	bf00      	nop
 800c650:	e004      	b.n	800c65c <HAL_UART_IRQHandler+0x5bc>
      return;
 800c652:	bf00      	nop
 800c654:	e002      	b.n	800c65c <HAL_UART_IRQHandler+0x5bc>
      return;
 800c656:	bf00      	nop
 800c658:	e000      	b.n	800c65c <HAL_UART_IRQHandler+0x5bc>
    return;
 800c65a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800c65c:	37e8      	adds	r7, #232	; 0xe8
 800c65e:	46bd      	mov	sp, r7
 800c660:	bd80      	pop	{r7, pc}
 800c662:	bf00      	nop

0800c664 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c664:	b480      	push	{r7}
 800c666:	b083      	sub	sp, #12
 800c668:	af00      	add	r7, sp, #0
 800c66a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800c66c:	bf00      	nop
 800c66e:	370c      	adds	r7, #12
 800c670:	46bd      	mov	sp, r7
 800c672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c676:	4770      	bx	lr

0800c678 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c678:	b480      	push	{r7}
 800c67a:	b083      	sub	sp, #12
 800c67c:	af00      	add	r7, sp, #0
 800c67e:	6078      	str	r0, [r7, #4]
 800c680:	460b      	mov	r3, r1
 800c682:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c684:	bf00      	nop
 800c686:	370c      	adds	r7, #12
 800c688:	46bd      	mov	sp, r7
 800c68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c68e:	4770      	bx	lr

0800c690 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c690:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c694:	b08a      	sub	sp, #40	; 0x28
 800c696:	af00      	add	r7, sp, #0
 800c698:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c69a:	2300      	movs	r3, #0
 800c69c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	689a      	ldr	r2, [r3, #8]
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	691b      	ldr	r3, [r3, #16]
 800c6a8:	431a      	orrs	r2, r3
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	695b      	ldr	r3, [r3, #20]
 800c6ae:	431a      	orrs	r2, r3
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	69db      	ldr	r3, [r3, #28]
 800c6b4:	4313      	orrs	r3, r2
 800c6b6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	681a      	ldr	r2, [r3, #0]
 800c6be:	4ba4      	ldr	r3, [pc, #656]	; (800c950 <UART_SetConfig+0x2c0>)
 800c6c0:	4013      	ands	r3, r2
 800c6c2:	68fa      	ldr	r2, [r7, #12]
 800c6c4:	6812      	ldr	r2, [r2, #0]
 800c6c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c6c8:	430b      	orrs	r3, r1
 800c6ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	685b      	ldr	r3, [r3, #4]
 800c6d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	68da      	ldr	r2, [r3, #12]
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	430a      	orrs	r2, r1
 800c6e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	699b      	ldr	r3, [r3, #24]
 800c6e6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	4a99      	ldr	r2, [pc, #612]	; (800c954 <UART_SetConfig+0x2c4>)
 800c6ee:	4293      	cmp	r3, r2
 800c6f0:	d004      	beq.n	800c6fc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	6a1b      	ldr	r3, [r3, #32]
 800c6f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c6f8:	4313      	orrs	r3, r2
 800c6fa:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	689b      	ldr	r3, [r3, #8]
 800c702:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c70c:	430a      	orrs	r2, r1
 800c70e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	4a90      	ldr	r2, [pc, #576]	; (800c958 <UART_SetConfig+0x2c8>)
 800c716:	4293      	cmp	r3, r2
 800c718:	d126      	bne.n	800c768 <UART_SetConfig+0xd8>
 800c71a:	4b90      	ldr	r3, [pc, #576]	; (800c95c <UART_SetConfig+0x2cc>)
 800c71c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c720:	f003 0303 	and.w	r3, r3, #3
 800c724:	2b03      	cmp	r3, #3
 800c726:	d81b      	bhi.n	800c760 <UART_SetConfig+0xd0>
 800c728:	a201      	add	r2, pc, #4	; (adr r2, 800c730 <UART_SetConfig+0xa0>)
 800c72a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c72e:	bf00      	nop
 800c730:	0800c741 	.word	0x0800c741
 800c734:	0800c751 	.word	0x0800c751
 800c738:	0800c749 	.word	0x0800c749
 800c73c:	0800c759 	.word	0x0800c759
 800c740:	2301      	movs	r3, #1
 800c742:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c746:	e116      	b.n	800c976 <UART_SetConfig+0x2e6>
 800c748:	2302      	movs	r3, #2
 800c74a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c74e:	e112      	b.n	800c976 <UART_SetConfig+0x2e6>
 800c750:	2304      	movs	r3, #4
 800c752:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c756:	e10e      	b.n	800c976 <UART_SetConfig+0x2e6>
 800c758:	2308      	movs	r3, #8
 800c75a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c75e:	e10a      	b.n	800c976 <UART_SetConfig+0x2e6>
 800c760:	2310      	movs	r3, #16
 800c762:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c766:	e106      	b.n	800c976 <UART_SetConfig+0x2e6>
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	4a7c      	ldr	r2, [pc, #496]	; (800c960 <UART_SetConfig+0x2d0>)
 800c76e:	4293      	cmp	r3, r2
 800c770:	d138      	bne.n	800c7e4 <UART_SetConfig+0x154>
 800c772:	4b7a      	ldr	r3, [pc, #488]	; (800c95c <UART_SetConfig+0x2cc>)
 800c774:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c778:	f003 030c 	and.w	r3, r3, #12
 800c77c:	2b0c      	cmp	r3, #12
 800c77e:	d82d      	bhi.n	800c7dc <UART_SetConfig+0x14c>
 800c780:	a201      	add	r2, pc, #4	; (adr r2, 800c788 <UART_SetConfig+0xf8>)
 800c782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c786:	bf00      	nop
 800c788:	0800c7bd 	.word	0x0800c7bd
 800c78c:	0800c7dd 	.word	0x0800c7dd
 800c790:	0800c7dd 	.word	0x0800c7dd
 800c794:	0800c7dd 	.word	0x0800c7dd
 800c798:	0800c7cd 	.word	0x0800c7cd
 800c79c:	0800c7dd 	.word	0x0800c7dd
 800c7a0:	0800c7dd 	.word	0x0800c7dd
 800c7a4:	0800c7dd 	.word	0x0800c7dd
 800c7a8:	0800c7c5 	.word	0x0800c7c5
 800c7ac:	0800c7dd 	.word	0x0800c7dd
 800c7b0:	0800c7dd 	.word	0x0800c7dd
 800c7b4:	0800c7dd 	.word	0x0800c7dd
 800c7b8:	0800c7d5 	.word	0x0800c7d5
 800c7bc:	2300      	movs	r3, #0
 800c7be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c7c2:	e0d8      	b.n	800c976 <UART_SetConfig+0x2e6>
 800c7c4:	2302      	movs	r3, #2
 800c7c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c7ca:	e0d4      	b.n	800c976 <UART_SetConfig+0x2e6>
 800c7cc:	2304      	movs	r3, #4
 800c7ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c7d2:	e0d0      	b.n	800c976 <UART_SetConfig+0x2e6>
 800c7d4:	2308      	movs	r3, #8
 800c7d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c7da:	e0cc      	b.n	800c976 <UART_SetConfig+0x2e6>
 800c7dc:	2310      	movs	r3, #16
 800c7de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c7e2:	e0c8      	b.n	800c976 <UART_SetConfig+0x2e6>
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	4a5e      	ldr	r2, [pc, #376]	; (800c964 <UART_SetConfig+0x2d4>)
 800c7ea:	4293      	cmp	r3, r2
 800c7ec:	d125      	bne.n	800c83a <UART_SetConfig+0x1aa>
 800c7ee:	4b5b      	ldr	r3, [pc, #364]	; (800c95c <UART_SetConfig+0x2cc>)
 800c7f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c7f4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800c7f8:	2b30      	cmp	r3, #48	; 0x30
 800c7fa:	d016      	beq.n	800c82a <UART_SetConfig+0x19a>
 800c7fc:	2b30      	cmp	r3, #48	; 0x30
 800c7fe:	d818      	bhi.n	800c832 <UART_SetConfig+0x1a2>
 800c800:	2b20      	cmp	r3, #32
 800c802:	d00a      	beq.n	800c81a <UART_SetConfig+0x18a>
 800c804:	2b20      	cmp	r3, #32
 800c806:	d814      	bhi.n	800c832 <UART_SetConfig+0x1a2>
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d002      	beq.n	800c812 <UART_SetConfig+0x182>
 800c80c:	2b10      	cmp	r3, #16
 800c80e:	d008      	beq.n	800c822 <UART_SetConfig+0x192>
 800c810:	e00f      	b.n	800c832 <UART_SetConfig+0x1a2>
 800c812:	2300      	movs	r3, #0
 800c814:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c818:	e0ad      	b.n	800c976 <UART_SetConfig+0x2e6>
 800c81a:	2302      	movs	r3, #2
 800c81c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c820:	e0a9      	b.n	800c976 <UART_SetConfig+0x2e6>
 800c822:	2304      	movs	r3, #4
 800c824:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c828:	e0a5      	b.n	800c976 <UART_SetConfig+0x2e6>
 800c82a:	2308      	movs	r3, #8
 800c82c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c830:	e0a1      	b.n	800c976 <UART_SetConfig+0x2e6>
 800c832:	2310      	movs	r3, #16
 800c834:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c838:	e09d      	b.n	800c976 <UART_SetConfig+0x2e6>
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	4a4a      	ldr	r2, [pc, #296]	; (800c968 <UART_SetConfig+0x2d8>)
 800c840:	4293      	cmp	r3, r2
 800c842:	d125      	bne.n	800c890 <UART_SetConfig+0x200>
 800c844:	4b45      	ldr	r3, [pc, #276]	; (800c95c <UART_SetConfig+0x2cc>)
 800c846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c84a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800c84e:	2bc0      	cmp	r3, #192	; 0xc0
 800c850:	d016      	beq.n	800c880 <UART_SetConfig+0x1f0>
 800c852:	2bc0      	cmp	r3, #192	; 0xc0
 800c854:	d818      	bhi.n	800c888 <UART_SetConfig+0x1f8>
 800c856:	2b80      	cmp	r3, #128	; 0x80
 800c858:	d00a      	beq.n	800c870 <UART_SetConfig+0x1e0>
 800c85a:	2b80      	cmp	r3, #128	; 0x80
 800c85c:	d814      	bhi.n	800c888 <UART_SetConfig+0x1f8>
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d002      	beq.n	800c868 <UART_SetConfig+0x1d8>
 800c862:	2b40      	cmp	r3, #64	; 0x40
 800c864:	d008      	beq.n	800c878 <UART_SetConfig+0x1e8>
 800c866:	e00f      	b.n	800c888 <UART_SetConfig+0x1f8>
 800c868:	2300      	movs	r3, #0
 800c86a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c86e:	e082      	b.n	800c976 <UART_SetConfig+0x2e6>
 800c870:	2302      	movs	r3, #2
 800c872:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c876:	e07e      	b.n	800c976 <UART_SetConfig+0x2e6>
 800c878:	2304      	movs	r3, #4
 800c87a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c87e:	e07a      	b.n	800c976 <UART_SetConfig+0x2e6>
 800c880:	2308      	movs	r3, #8
 800c882:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c886:	e076      	b.n	800c976 <UART_SetConfig+0x2e6>
 800c888:	2310      	movs	r3, #16
 800c88a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c88e:	e072      	b.n	800c976 <UART_SetConfig+0x2e6>
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	4a35      	ldr	r2, [pc, #212]	; (800c96c <UART_SetConfig+0x2dc>)
 800c896:	4293      	cmp	r3, r2
 800c898:	d12a      	bne.n	800c8f0 <UART_SetConfig+0x260>
 800c89a:	4b30      	ldr	r3, [pc, #192]	; (800c95c <UART_SetConfig+0x2cc>)
 800c89c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c8a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c8a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c8a8:	d01a      	beq.n	800c8e0 <UART_SetConfig+0x250>
 800c8aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c8ae:	d81b      	bhi.n	800c8e8 <UART_SetConfig+0x258>
 800c8b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c8b4:	d00c      	beq.n	800c8d0 <UART_SetConfig+0x240>
 800c8b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c8ba:	d815      	bhi.n	800c8e8 <UART_SetConfig+0x258>
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d003      	beq.n	800c8c8 <UART_SetConfig+0x238>
 800c8c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c8c4:	d008      	beq.n	800c8d8 <UART_SetConfig+0x248>
 800c8c6:	e00f      	b.n	800c8e8 <UART_SetConfig+0x258>
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c8ce:	e052      	b.n	800c976 <UART_SetConfig+0x2e6>
 800c8d0:	2302      	movs	r3, #2
 800c8d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c8d6:	e04e      	b.n	800c976 <UART_SetConfig+0x2e6>
 800c8d8:	2304      	movs	r3, #4
 800c8da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c8de:	e04a      	b.n	800c976 <UART_SetConfig+0x2e6>
 800c8e0:	2308      	movs	r3, #8
 800c8e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c8e6:	e046      	b.n	800c976 <UART_SetConfig+0x2e6>
 800c8e8:	2310      	movs	r3, #16
 800c8ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c8ee:	e042      	b.n	800c976 <UART_SetConfig+0x2e6>
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	4a17      	ldr	r2, [pc, #92]	; (800c954 <UART_SetConfig+0x2c4>)
 800c8f6:	4293      	cmp	r3, r2
 800c8f8:	d13a      	bne.n	800c970 <UART_SetConfig+0x2e0>
 800c8fa:	4b18      	ldr	r3, [pc, #96]	; (800c95c <UART_SetConfig+0x2cc>)
 800c8fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c900:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800c904:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c908:	d01a      	beq.n	800c940 <UART_SetConfig+0x2b0>
 800c90a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c90e:	d81b      	bhi.n	800c948 <UART_SetConfig+0x2b8>
 800c910:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c914:	d00c      	beq.n	800c930 <UART_SetConfig+0x2a0>
 800c916:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c91a:	d815      	bhi.n	800c948 <UART_SetConfig+0x2b8>
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d003      	beq.n	800c928 <UART_SetConfig+0x298>
 800c920:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c924:	d008      	beq.n	800c938 <UART_SetConfig+0x2a8>
 800c926:	e00f      	b.n	800c948 <UART_SetConfig+0x2b8>
 800c928:	2300      	movs	r3, #0
 800c92a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c92e:	e022      	b.n	800c976 <UART_SetConfig+0x2e6>
 800c930:	2302      	movs	r3, #2
 800c932:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c936:	e01e      	b.n	800c976 <UART_SetConfig+0x2e6>
 800c938:	2304      	movs	r3, #4
 800c93a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c93e:	e01a      	b.n	800c976 <UART_SetConfig+0x2e6>
 800c940:	2308      	movs	r3, #8
 800c942:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c946:	e016      	b.n	800c976 <UART_SetConfig+0x2e6>
 800c948:	2310      	movs	r3, #16
 800c94a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c94e:	e012      	b.n	800c976 <UART_SetConfig+0x2e6>
 800c950:	efff69f3 	.word	0xefff69f3
 800c954:	40008000 	.word	0x40008000
 800c958:	40013800 	.word	0x40013800
 800c95c:	40021000 	.word	0x40021000
 800c960:	40004400 	.word	0x40004400
 800c964:	40004800 	.word	0x40004800
 800c968:	40004c00 	.word	0x40004c00
 800c96c:	40005000 	.word	0x40005000
 800c970:	2310      	movs	r3, #16
 800c972:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	4a9f      	ldr	r2, [pc, #636]	; (800cbf8 <UART_SetConfig+0x568>)
 800c97c:	4293      	cmp	r3, r2
 800c97e:	d17a      	bne.n	800ca76 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c980:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c984:	2b08      	cmp	r3, #8
 800c986:	d824      	bhi.n	800c9d2 <UART_SetConfig+0x342>
 800c988:	a201      	add	r2, pc, #4	; (adr r2, 800c990 <UART_SetConfig+0x300>)
 800c98a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c98e:	bf00      	nop
 800c990:	0800c9b5 	.word	0x0800c9b5
 800c994:	0800c9d3 	.word	0x0800c9d3
 800c998:	0800c9bd 	.word	0x0800c9bd
 800c99c:	0800c9d3 	.word	0x0800c9d3
 800c9a0:	0800c9c3 	.word	0x0800c9c3
 800c9a4:	0800c9d3 	.word	0x0800c9d3
 800c9a8:	0800c9d3 	.word	0x0800c9d3
 800c9ac:	0800c9d3 	.word	0x0800c9d3
 800c9b0:	0800c9cb 	.word	0x0800c9cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c9b4:	f7fc f8f2 	bl	8008b9c <HAL_RCC_GetPCLK1Freq>
 800c9b8:	61f8      	str	r0, [r7, #28]
        break;
 800c9ba:	e010      	b.n	800c9de <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c9bc:	4b8f      	ldr	r3, [pc, #572]	; (800cbfc <UART_SetConfig+0x56c>)
 800c9be:	61fb      	str	r3, [r7, #28]
        break;
 800c9c0:	e00d      	b.n	800c9de <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c9c2:	f7fc f853 	bl	8008a6c <HAL_RCC_GetSysClockFreq>
 800c9c6:	61f8      	str	r0, [r7, #28]
        break;
 800c9c8:	e009      	b.n	800c9de <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c9ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c9ce:	61fb      	str	r3, [r7, #28]
        break;
 800c9d0:	e005      	b.n	800c9de <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800c9d2:	2300      	movs	r3, #0
 800c9d4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800c9d6:	2301      	movs	r3, #1
 800c9d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800c9dc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c9de:	69fb      	ldr	r3, [r7, #28]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	f000 80fb 	beq.w	800cbdc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	685a      	ldr	r2, [r3, #4]
 800c9ea:	4613      	mov	r3, r2
 800c9ec:	005b      	lsls	r3, r3, #1
 800c9ee:	4413      	add	r3, r2
 800c9f0:	69fa      	ldr	r2, [r7, #28]
 800c9f2:	429a      	cmp	r2, r3
 800c9f4:	d305      	bcc.n	800ca02 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	685b      	ldr	r3, [r3, #4]
 800c9fa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800c9fc:	69fa      	ldr	r2, [r7, #28]
 800c9fe:	429a      	cmp	r2, r3
 800ca00:	d903      	bls.n	800ca0a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800ca02:	2301      	movs	r3, #1
 800ca04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800ca08:	e0e8      	b.n	800cbdc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800ca0a:	69fb      	ldr	r3, [r7, #28]
 800ca0c:	2200      	movs	r2, #0
 800ca0e:	461c      	mov	r4, r3
 800ca10:	4615      	mov	r5, r2
 800ca12:	f04f 0200 	mov.w	r2, #0
 800ca16:	f04f 0300 	mov.w	r3, #0
 800ca1a:	022b      	lsls	r3, r5, #8
 800ca1c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800ca20:	0222      	lsls	r2, r4, #8
 800ca22:	68f9      	ldr	r1, [r7, #12]
 800ca24:	6849      	ldr	r1, [r1, #4]
 800ca26:	0849      	lsrs	r1, r1, #1
 800ca28:	2000      	movs	r0, #0
 800ca2a:	4688      	mov	r8, r1
 800ca2c:	4681      	mov	r9, r0
 800ca2e:	eb12 0a08 	adds.w	sl, r2, r8
 800ca32:	eb43 0b09 	adc.w	fp, r3, r9
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	685b      	ldr	r3, [r3, #4]
 800ca3a:	2200      	movs	r2, #0
 800ca3c:	603b      	str	r3, [r7, #0]
 800ca3e:	607a      	str	r2, [r7, #4]
 800ca40:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ca44:	4650      	mov	r0, sl
 800ca46:	4659      	mov	r1, fp
 800ca48:	f7f4 f96e 	bl	8000d28 <__aeabi_uldivmod>
 800ca4c:	4602      	mov	r2, r0
 800ca4e:	460b      	mov	r3, r1
 800ca50:	4613      	mov	r3, r2
 800ca52:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ca54:	69bb      	ldr	r3, [r7, #24]
 800ca56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ca5a:	d308      	bcc.n	800ca6e <UART_SetConfig+0x3de>
 800ca5c:	69bb      	ldr	r3, [r7, #24]
 800ca5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ca62:	d204      	bcs.n	800ca6e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	69ba      	ldr	r2, [r7, #24]
 800ca6a:	60da      	str	r2, [r3, #12]
 800ca6c:	e0b6      	b.n	800cbdc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800ca6e:	2301      	movs	r3, #1
 800ca70:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800ca74:	e0b2      	b.n	800cbdc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	69db      	ldr	r3, [r3, #28]
 800ca7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ca7e:	d15e      	bne.n	800cb3e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800ca80:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ca84:	2b08      	cmp	r3, #8
 800ca86:	d828      	bhi.n	800cada <UART_SetConfig+0x44a>
 800ca88:	a201      	add	r2, pc, #4	; (adr r2, 800ca90 <UART_SetConfig+0x400>)
 800ca8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca8e:	bf00      	nop
 800ca90:	0800cab5 	.word	0x0800cab5
 800ca94:	0800cabd 	.word	0x0800cabd
 800ca98:	0800cac5 	.word	0x0800cac5
 800ca9c:	0800cadb 	.word	0x0800cadb
 800caa0:	0800cacb 	.word	0x0800cacb
 800caa4:	0800cadb 	.word	0x0800cadb
 800caa8:	0800cadb 	.word	0x0800cadb
 800caac:	0800cadb 	.word	0x0800cadb
 800cab0:	0800cad3 	.word	0x0800cad3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cab4:	f7fc f872 	bl	8008b9c <HAL_RCC_GetPCLK1Freq>
 800cab8:	61f8      	str	r0, [r7, #28]
        break;
 800caba:	e014      	b.n	800cae6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cabc:	f7fc f884 	bl	8008bc8 <HAL_RCC_GetPCLK2Freq>
 800cac0:	61f8      	str	r0, [r7, #28]
        break;
 800cac2:	e010      	b.n	800cae6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cac4:	4b4d      	ldr	r3, [pc, #308]	; (800cbfc <UART_SetConfig+0x56c>)
 800cac6:	61fb      	str	r3, [r7, #28]
        break;
 800cac8:	e00d      	b.n	800cae6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800caca:	f7fb ffcf 	bl	8008a6c <HAL_RCC_GetSysClockFreq>
 800cace:	61f8      	str	r0, [r7, #28]
        break;
 800cad0:	e009      	b.n	800cae6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cad2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cad6:	61fb      	str	r3, [r7, #28]
        break;
 800cad8:	e005      	b.n	800cae6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800cada:	2300      	movs	r3, #0
 800cadc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800cade:	2301      	movs	r3, #1
 800cae0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800cae4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800cae6:	69fb      	ldr	r3, [r7, #28]
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d077      	beq.n	800cbdc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800caec:	69fb      	ldr	r3, [r7, #28]
 800caee:	005a      	lsls	r2, r3, #1
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	685b      	ldr	r3, [r3, #4]
 800caf4:	085b      	lsrs	r3, r3, #1
 800caf6:	441a      	add	r2, r3
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	685b      	ldr	r3, [r3, #4]
 800cafc:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb00:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cb02:	69bb      	ldr	r3, [r7, #24]
 800cb04:	2b0f      	cmp	r3, #15
 800cb06:	d916      	bls.n	800cb36 <UART_SetConfig+0x4a6>
 800cb08:	69bb      	ldr	r3, [r7, #24]
 800cb0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cb0e:	d212      	bcs.n	800cb36 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cb10:	69bb      	ldr	r3, [r7, #24]
 800cb12:	b29b      	uxth	r3, r3
 800cb14:	f023 030f 	bic.w	r3, r3, #15
 800cb18:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cb1a:	69bb      	ldr	r3, [r7, #24]
 800cb1c:	085b      	lsrs	r3, r3, #1
 800cb1e:	b29b      	uxth	r3, r3
 800cb20:	f003 0307 	and.w	r3, r3, #7
 800cb24:	b29a      	uxth	r2, r3
 800cb26:	8afb      	ldrh	r3, [r7, #22]
 800cb28:	4313      	orrs	r3, r2
 800cb2a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	8afa      	ldrh	r2, [r7, #22]
 800cb32:	60da      	str	r2, [r3, #12]
 800cb34:	e052      	b.n	800cbdc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800cb36:	2301      	movs	r3, #1
 800cb38:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800cb3c:	e04e      	b.n	800cbdc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800cb3e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cb42:	2b08      	cmp	r3, #8
 800cb44:	d827      	bhi.n	800cb96 <UART_SetConfig+0x506>
 800cb46:	a201      	add	r2, pc, #4	; (adr r2, 800cb4c <UART_SetConfig+0x4bc>)
 800cb48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb4c:	0800cb71 	.word	0x0800cb71
 800cb50:	0800cb79 	.word	0x0800cb79
 800cb54:	0800cb81 	.word	0x0800cb81
 800cb58:	0800cb97 	.word	0x0800cb97
 800cb5c:	0800cb87 	.word	0x0800cb87
 800cb60:	0800cb97 	.word	0x0800cb97
 800cb64:	0800cb97 	.word	0x0800cb97
 800cb68:	0800cb97 	.word	0x0800cb97
 800cb6c:	0800cb8f 	.word	0x0800cb8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cb70:	f7fc f814 	bl	8008b9c <HAL_RCC_GetPCLK1Freq>
 800cb74:	61f8      	str	r0, [r7, #28]
        break;
 800cb76:	e014      	b.n	800cba2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cb78:	f7fc f826 	bl	8008bc8 <HAL_RCC_GetPCLK2Freq>
 800cb7c:	61f8      	str	r0, [r7, #28]
        break;
 800cb7e:	e010      	b.n	800cba2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cb80:	4b1e      	ldr	r3, [pc, #120]	; (800cbfc <UART_SetConfig+0x56c>)
 800cb82:	61fb      	str	r3, [r7, #28]
        break;
 800cb84:	e00d      	b.n	800cba2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cb86:	f7fb ff71 	bl	8008a6c <HAL_RCC_GetSysClockFreq>
 800cb8a:	61f8      	str	r0, [r7, #28]
        break;
 800cb8c:	e009      	b.n	800cba2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cb8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cb92:	61fb      	str	r3, [r7, #28]
        break;
 800cb94:	e005      	b.n	800cba2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800cb96:	2300      	movs	r3, #0
 800cb98:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800cb9a:	2301      	movs	r3, #1
 800cb9c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800cba0:	bf00      	nop
    }

    if (pclk != 0U)
 800cba2:	69fb      	ldr	r3, [r7, #28]
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d019      	beq.n	800cbdc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	685b      	ldr	r3, [r3, #4]
 800cbac:	085a      	lsrs	r2, r3, #1
 800cbae:	69fb      	ldr	r3, [r7, #28]
 800cbb0:	441a      	add	r2, r3
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	685b      	ldr	r3, [r3, #4]
 800cbb6:	fbb2 f3f3 	udiv	r3, r2, r3
 800cbba:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cbbc:	69bb      	ldr	r3, [r7, #24]
 800cbbe:	2b0f      	cmp	r3, #15
 800cbc0:	d909      	bls.n	800cbd6 <UART_SetConfig+0x546>
 800cbc2:	69bb      	ldr	r3, [r7, #24]
 800cbc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cbc8:	d205      	bcs.n	800cbd6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800cbca:	69bb      	ldr	r3, [r7, #24]
 800cbcc:	b29a      	uxth	r2, r3
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	60da      	str	r2, [r3, #12]
 800cbd4:	e002      	b.n	800cbdc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800cbd6:	2301      	movs	r3, #1
 800cbd8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	2200      	movs	r2, #0
 800cbe0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	2200      	movs	r2, #0
 800cbe6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800cbe8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800cbec:	4618      	mov	r0, r3
 800cbee:	3728      	adds	r7, #40	; 0x28
 800cbf0:	46bd      	mov	sp, r7
 800cbf2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cbf6:	bf00      	nop
 800cbf8:	40008000 	.word	0x40008000
 800cbfc:	00f42400 	.word	0x00f42400

0800cc00 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800cc00:	b480      	push	{r7}
 800cc02:	b083      	sub	sp, #12
 800cc04:	af00      	add	r7, sp, #0
 800cc06:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc0c:	f003 0301 	and.w	r3, r3, #1
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d00a      	beq.n	800cc2a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	685b      	ldr	r3, [r3, #4]
 800cc1a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	430a      	orrs	r2, r1
 800cc28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc2e:	f003 0302 	and.w	r3, r3, #2
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d00a      	beq.n	800cc4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	685b      	ldr	r3, [r3, #4]
 800cc3c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	430a      	orrs	r2, r1
 800cc4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc50:	f003 0304 	and.w	r3, r3, #4
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d00a      	beq.n	800cc6e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	685b      	ldr	r3, [r3, #4]
 800cc5e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	430a      	orrs	r2, r1
 800cc6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc72:	f003 0308 	and.w	r3, r3, #8
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d00a      	beq.n	800cc90 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	685b      	ldr	r3, [r3, #4]
 800cc80:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	430a      	orrs	r2, r1
 800cc8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc94:	f003 0310 	and.w	r3, r3, #16
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d00a      	beq.n	800ccb2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	689b      	ldr	r3, [r3, #8]
 800cca2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	430a      	orrs	r2, r1
 800ccb0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccb6:	f003 0320 	and.w	r3, r3, #32
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d00a      	beq.n	800ccd4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	689b      	ldr	r3, [r3, #8]
 800ccc4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	430a      	orrs	r2, r1
 800ccd2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d01a      	beq.n	800cd16 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	685b      	ldr	r3, [r3, #4]
 800cce6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	430a      	orrs	r2, r1
 800ccf4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccfa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ccfe:	d10a      	bne.n	800cd16 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	685b      	ldr	r3, [r3, #4]
 800cd06:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	430a      	orrs	r2, r1
 800cd14:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d00a      	beq.n	800cd38 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	685b      	ldr	r3, [r3, #4]
 800cd28:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	430a      	orrs	r2, r1
 800cd36:	605a      	str	r2, [r3, #4]
  }
}
 800cd38:	bf00      	nop
 800cd3a:	370c      	adds	r7, #12
 800cd3c:	46bd      	mov	sp, r7
 800cd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd42:	4770      	bx	lr

0800cd44 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cd44:	b580      	push	{r7, lr}
 800cd46:	b086      	sub	sp, #24
 800cd48:	af02      	add	r7, sp, #8
 800cd4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	2200      	movs	r2, #0
 800cd50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cd54:	f7f8 fecc 	bl	8005af0 <HAL_GetTick>
 800cd58:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	f003 0308 	and.w	r3, r3, #8
 800cd64:	2b08      	cmp	r3, #8
 800cd66:	d10e      	bne.n	800cd86 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cd68:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cd6c:	9300      	str	r3, [sp, #0]
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	2200      	movs	r2, #0
 800cd72:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800cd76:	6878      	ldr	r0, [r7, #4]
 800cd78:	f000 f82d 	bl	800cdd6 <UART_WaitOnFlagUntilTimeout>
 800cd7c:	4603      	mov	r3, r0
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d001      	beq.n	800cd86 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cd82:	2303      	movs	r3, #3
 800cd84:	e023      	b.n	800cdce <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	f003 0304 	and.w	r3, r3, #4
 800cd90:	2b04      	cmp	r3, #4
 800cd92:	d10e      	bne.n	800cdb2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cd94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cd98:	9300      	str	r3, [sp, #0]
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	2200      	movs	r2, #0
 800cd9e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800cda2:	6878      	ldr	r0, [r7, #4]
 800cda4:	f000 f817 	bl	800cdd6 <UART_WaitOnFlagUntilTimeout>
 800cda8:	4603      	mov	r3, r0
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d001      	beq.n	800cdb2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cdae:	2303      	movs	r3, #3
 800cdb0:	e00d      	b.n	800cdce <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	2220      	movs	r2, #32
 800cdb6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	2220      	movs	r2, #32
 800cdbc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	2200      	movs	r2, #0
 800cdc2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	2200      	movs	r2, #0
 800cdc8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800cdcc:	2300      	movs	r3, #0
}
 800cdce:	4618      	mov	r0, r3
 800cdd0:	3710      	adds	r7, #16
 800cdd2:	46bd      	mov	sp, r7
 800cdd4:	bd80      	pop	{r7, pc}

0800cdd6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cdd6:	b580      	push	{r7, lr}
 800cdd8:	b09c      	sub	sp, #112	; 0x70
 800cdda:	af00      	add	r7, sp, #0
 800cddc:	60f8      	str	r0, [r7, #12]
 800cdde:	60b9      	str	r1, [r7, #8]
 800cde0:	603b      	str	r3, [r7, #0]
 800cde2:	4613      	mov	r3, r2
 800cde4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cde6:	e0a5      	b.n	800cf34 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cde8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cdea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cdee:	f000 80a1 	beq.w	800cf34 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cdf2:	f7f8 fe7d 	bl	8005af0 <HAL_GetTick>
 800cdf6:	4602      	mov	r2, r0
 800cdf8:	683b      	ldr	r3, [r7, #0]
 800cdfa:	1ad3      	subs	r3, r2, r3
 800cdfc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800cdfe:	429a      	cmp	r2, r3
 800ce00:	d302      	bcc.n	800ce08 <UART_WaitOnFlagUntilTimeout+0x32>
 800ce02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d13e      	bne.n	800ce86 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ce10:	e853 3f00 	ldrex	r3, [r3]
 800ce14:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ce16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ce18:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ce1c:	667b      	str	r3, [r7, #100]	; 0x64
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	461a      	mov	r2, r3
 800ce24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ce26:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ce28:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce2a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ce2c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ce2e:	e841 2300 	strex	r3, r2, [r1]
 800ce32:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800ce34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d1e6      	bne.n	800ce08 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	3308      	adds	r3, #8
 800ce40:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce44:	e853 3f00 	ldrex	r3, [r3]
 800ce48:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ce4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce4c:	f023 0301 	bic.w	r3, r3, #1
 800ce50:	663b      	str	r3, [r7, #96]	; 0x60
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	3308      	adds	r3, #8
 800ce58:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ce5a:	64ba      	str	r2, [r7, #72]	; 0x48
 800ce5c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce5e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ce60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ce62:	e841 2300 	strex	r3, r2, [r1]
 800ce66:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ce68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d1e5      	bne.n	800ce3a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	2220      	movs	r2, #32
 800ce72:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	2220      	movs	r2, #32
 800ce78:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	2200      	movs	r2, #0
 800ce7e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800ce82:	2303      	movs	r3, #3
 800ce84:	e067      	b.n	800cf56 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	f003 0304 	and.w	r3, r3, #4
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d04f      	beq.n	800cf34 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	69db      	ldr	r3, [r3, #28]
 800ce9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ce9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cea2:	d147      	bne.n	800cf34 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ceac:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ceb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceb6:	e853 3f00 	ldrex	r3, [r3]
 800ceba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cebe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800cec2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	461a      	mov	r2, r3
 800ceca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cecc:	637b      	str	r3, [r7, #52]	; 0x34
 800cece:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ced0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ced2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ced4:	e841 2300 	strex	r3, r2, [r1]
 800ced8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ceda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d1e6      	bne.n	800ceae <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	3308      	adds	r3, #8
 800cee6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cee8:	697b      	ldr	r3, [r7, #20]
 800ceea:	e853 3f00 	ldrex	r3, [r3]
 800ceee:	613b      	str	r3, [r7, #16]
   return(result);
 800cef0:	693b      	ldr	r3, [r7, #16]
 800cef2:	f023 0301 	bic.w	r3, r3, #1
 800cef6:	66bb      	str	r3, [r7, #104]	; 0x68
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	3308      	adds	r3, #8
 800cefe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800cf00:	623a      	str	r2, [r7, #32]
 800cf02:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf04:	69f9      	ldr	r1, [r7, #28]
 800cf06:	6a3a      	ldr	r2, [r7, #32]
 800cf08:	e841 2300 	strex	r3, r2, [r1]
 800cf0c:	61bb      	str	r3, [r7, #24]
   return(result);
 800cf0e:	69bb      	ldr	r3, [r7, #24]
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d1e5      	bne.n	800cee0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	2220      	movs	r2, #32
 800cf18:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	2220      	movs	r2, #32
 800cf1e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	2220      	movs	r2, #32
 800cf24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	2200      	movs	r2, #0
 800cf2c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800cf30:	2303      	movs	r3, #3
 800cf32:	e010      	b.n	800cf56 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	69da      	ldr	r2, [r3, #28]
 800cf3a:	68bb      	ldr	r3, [r7, #8]
 800cf3c:	4013      	ands	r3, r2
 800cf3e:	68ba      	ldr	r2, [r7, #8]
 800cf40:	429a      	cmp	r2, r3
 800cf42:	bf0c      	ite	eq
 800cf44:	2301      	moveq	r3, #1
 800cf46:	2300      	movne	r3, #0
 800cf48:	b2db      	uxtb	r3, r3
 800cf4a:	461a      	mov	r2, r3
 800cf4c:	79fb      	ldrb	r3, [r7, #7]
 800cf4e:	429a      	cmp	r2, r3
 800cf50:	f43f af4a 	beq.w	800cde8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cf54:	2300      	movs	r3, #0
}
 800cf56:	4618      	mov	r0, r3
 800cf58:	3770      	adds	r7, #112	; 0x70
 800cf5a:	46bd      	mov	sp, r7
 800cf5c:	bd80      	pop	{r7, pc}
	...

0800cf60 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cf60:	b480      	push	{r7}
 800cf62:	b097      	sub	sp, #92	; 0x5c
 800cf64:	af00      	add	r7, sp, #0
 800cf66:	60f8      	str	r0, [r7, #12]
 800cf68:	60b9      	str	r1, [r7, #8]
 800cf6a:	4613      	mov	r3, r2
 800cf6c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	68ba      	ldr	r2, [r7, #8]
 800cf72:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	88fa      	ldrh	r2, [r7, #6]
 800cf78:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	88fa      	ldrh	r2, [r7, #6]
 800cf80:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	2200      	movs	r2, #0
 800cf88:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	689b      	ldr	r3, [r3, #8]
 800cf8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cf92:	d10e      	bne.n	800cfb2 <UART_Start_Receive_IT+0x52>
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	691b      	ldr	r3, [r3, #16]
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d105      	bne.n	800cfa8 <UART_Start_Receive_IT+0x48>
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	f240 12ff 	movw	r2, #511	; 0x1ff
 800cfa2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800cfa6:	e02d      	b.n	800d004 <UART_Start_Receive_IT+0xa4>
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	22ff      	movs	r2, #255	; 0xff
 800cfac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800cfb0:	e028      	b.n	800d004 <UART_Start_Receive_IT+0xa4>
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	689b      	ldr	r3, [r3, #8]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d10d      	bne.n	800cfd6 <UART_Start_Receive_IT+0x76>
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	691b      	ldr	r3, [r3, #16]
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d104      	bne.n	800cfcc <UART_Start_Receive_IT+0x6c>
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	22ff      	movs	r2, #255	; 0xff
 800cfc6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800cfca:	e01b      	b.n	800d004 <UART_Start_Receive_IT+0xa4>
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	227f      	movs	r2, #127	; 0x7f
 800cfd0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800cfd4:	e016      	b.n	800d004 <UART_Start_Receive_IT+0xa4>
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	689b      	ldr	r3, [r3, #8]
 800cfda:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cfde:	d10d      	bne.n	800cffc <UART_Start_Receive_IT+0x9c>
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	691b      	ldr	r3, [r3, #16]
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d104      	bne.n	800cff2 <UART_Start_Receive_IT+0x92>
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	227f      	movs	r2, #127	; 0x7f
 800cfec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800cff0:	e008      	b.n	800d004 <UART_Start_Receive_IT+0xa4>
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	223f      	movs	r2, #63	; 0x3f
 800cff6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800cffa:	e003      	b.n	800d004 <UART_Start_Receive_IT+0xa4>
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	2200      	movs	r2, #0
 800d000:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	2200      	movs	r2, #0
 800d008:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	2222      	movs	r2, #34	; 0x22
 800d010:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	3308      	adds	r3, #8
 800d018:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d01a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d01c:	e853 3f00 	ldrex	r3, [r3]
 800d020:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d024:	f043 0301 	orr.w	r3, r3, #1
 800d028:	657b      	str	r3, [r7, #84]	; 0x54
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	3308      	adds	r3, #8
 800d030:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d032:	64ba      	str	r2, [r7, #72]	; 0x48
 800d034:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d036:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d038:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d03a:	e841 2300 	strex	r3, r2, [r1]
 800d03e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d040:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d042:	2b00      	cmp	r3, #0
 800d044:	d1e5      	bne.n	800d012 <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	689b      	ldr	r3, [r3, #8]
 800d04a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d04e:	d107      	bne.n	800d060 <UART_Start_Receive_IT+0x100>
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	691b      	ldr	r3, [r3, #16]
 800d054:	2b00      	cmp	r3, #0
 800d056:	d103      	bne.n	800d060 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	4a24      	ldr	r2, [pc, #144]	; (800d0ec <UART_Start_Receive_IT+0x18c>)
 800d05c:	665a      	str	r2, [r3, #100]	; 0x64
 800d05e:	e002      	b.n	800d066 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	4a23      	ldr	r2, [pc, #140]	; (800d0f0 <UART_Start_Receive_IT+0x190>)
 800d064:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	2200      	movs	r2, #0
 800d06a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	691b      	ldr	r3, [r3, #16]
 800d072:	2b00      	cmp	r3, #0
 800d074:	d019      	beq.n	800d0aa <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d07c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d07e:	e853 3f00 	ldrex	r3, [r3]
 800d082:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d086:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800d08a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	461a      	mov	r2, r3
 800d092:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d094:	637b      	str	r3, [r7, #52]	; 0x34
 800d096:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d098:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d09a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d09c:	e841 2300 	strex	r3, r2, [r1]
 800d0a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d0a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d1e6      	bne.n	800d076 <UART_Start_Receive_IT+0x116>
 800d0a8:	e018      	b.n	800d0dc <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0b0:	697b      	ldr	r3, [r7, #20]
 800d0b2:	e853 3f00 	ldrex	r3, [r3]
 800d0b6:	613b      	str	r3, [r7, #16]
   return(result);
 800d0b8:	693b      	ldr	r3, [r7, #16]
 800d0ba:	f043 0320 	orr.w	r3, r3, #32
 800d0be:	653b      	str	r3, [r7, #80]	; 0x50
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	461a      	mov	r2, r3
 800d0c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d0c8:	623b      	str	r3, [r7, #32]
 800d0ca:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0cc:	69f9      	ldr	r1, [r7, #28]
 800d0ce:	6a3a      	ldr	r2, [r7, #32]
 800d0d0:	e841 2300 	strex	r3, r2, [r1]
 800d0d4:	61bb      	str	r3, [r7, #24]
   return(result);
 800d0d6:	69bb      	ldr	r3, [r7, #24]
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d1e6      	bne.n	800d0aa <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800d0dc:	2300      	movs	r3, #0
}
 800d0de:	4618      	mov	r0, r3
 800d0e0:	375c      	adds	r7, #92	; 0x5c
 800d0e2:	46bd      	mov	sp, r7
 800d0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e8:	4770      	bx	lr
 800d0ea:	bf00      	nop
 800d0ec:	0800d519 	.word	0x0800d519
 800d0f0:	0800d3b9 	.word	0x0800d3b9

0800d0f4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d0f4:	b480      	push	{r7}
 800d0f6:	b089      	sub	sp, #36	; 0x24
 800d0f8:	af00      	add	r7, sp, #0
 800d0fa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	e853 3f00 	ldrex	r3, [r3]
 800d108:	60bb      	str	r3, [r7, #8]
   return(result);
 800d10a:	68bb      	ldr	r3, [r7, #8]
 800d10c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800d110:	61fb      	str	r3, [r7, #28]
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	461a      	mov	r2, r3
 800d118:	69fb      	ldr	r3, [r7, #28]
 800d11a:	61bb      	str	r3, [r7, #24]
 800d11c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d11e:	6979      	ldr	r1, [r7, #20]
 800d120:	69ba      	ldr	r2, [r7, #24]
 800d122:	e841 2300 	strex	r3, r2, [r1]
 800d126:	613b      	str	r3, [r7, #16]
   return(result);
 800d128:	693b      	ldr	r3, [r7, #16]
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d1e6      	bne.n	800d0fc <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	2220      	movs	r2, #32
 800d132:	679a      	str	r2, [r3, #120]	; 0x78
}
 800d134:	bf00      	nop
 800d136:	3724      	adds	r7, #36	; 0x24
 800d138:	46bd      	mov	sp, r7
 800d13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d13e:	4770      	bx	lr

0800d140 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d140:	b480      	push	{r7}
 800d142:	b095      	sub	sp, #84	; 0x54
 800d144:	af00      	add	r7, sp, #0
 800d146:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d14e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d150:	e853 3f00 	ldrex	r3, [r3]
 800d154:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d158:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d15c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	461a      	mov	r2, r3
 800d164:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d166:	643b      	str	r3, [r7, #64]	; 0x40
 800d168:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d16a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d16c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d16e:	e841 2300 	strex	r3, r2, [r1]
 800d172:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d176:	2b00      	cmp	r3, #0
 800d178:	d1e6      	bne.n	800d148 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	3308      	adds	r3, #8
 800d180:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d182:	6a3b      	ldr	r3, [r7, #32]
 800d184:	e853 3f00 	ldrex	r3, [r3]
 800d188:	61fb      	str	r3, [r7, #28]
   return(result);
 800d18a:	69fb      	ldr	r3, [r7, #28]
 800d18c:	f023 0301 	bic.w	r3, r3, #1
 800d190:	64bb      	str	r3, [r7, #72]	; 0x48
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	3308      	adds	r3, #8
 800d198:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d19a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d19c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d19e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d1a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d1a2:	e841 2300 	strex	r3, r2, [r1]
 800d1a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d1a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d1e5      	bne.n	800d17a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d1b2:	2b01      	cmp	r3, #1
 800d1b4:	d118      	bne.n	800d1e8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	e853 3f00 	ldrex	r3, [r3]
 800d1c2:	60bb      	str	r3, [r7, #8]
   return(result);
 800d1c4:	68bb      	ldr	r3, [r7, #8]
 800d1c6:	f023 0310 	bic.w	r3, r3, #16
 800d1ca:	647b      	str	r3, [r7, #68]	; 0x44
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	461a      	mov	r2, r3
 800d1d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d1d4:	61bb      	str	r3, [r7, #24]
 800d1d6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1d8:	6979      	ldr	r1, [r7, #20]
 800d1da:	69ba      	ldr	r2, [r7, #24]
 800d1dc:	e841 2300 	strex	r3, r2, [r1]
 800d1e0:	613b      	str	r3, [r7, #16]
   return(result);
 800d1e2:	693b      	ldr	r3, [r7, #16]
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d1e6      	bne.n	800d1b6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	2220      	movs	r2, #32
 800d1ec:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	2200      	movs	r2, #0
 800d1f2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	2200      	movs	r2, #0
 800d1f8:	665a      	str	r2, [r3, #100]	; 0x64
}
 800d1fa:	bf00      	nop
 800d1fc:	3754      	adds	r7, #84	; 0x54
 800d1fe:	46bd      	mov	sp, r7
 800d200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d204:	4770      	bx	lr

0800d206 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d206:	b580      	push	{r7, lr}
 800d208:	b090      	sub	sp, #64	; 0x40
 800d20a:	af00      	add	r7, sp, #0
 800d20c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d212:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	f003 0320 	and.w	r3, r3, #32
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d137      	bne.n	800d292 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800d222:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d224:	2200      	movs	r2, #0
 800d226:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d22a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	3308      	adds	r3, #8
 800d230:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d234:	e853 3f00 	ldrex	r3, [r3]
 800d238:	623b      	str	r3, [r7, #32]
   return(result);
 800d23a:	6a3b      	ldr	r3, [r7, #32]
 800d23c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d240:	63bb      	str	r3, [r7, #56]	; 0x38
 800d242:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	3308      	adds	r3, #8
 800d248:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d24a:	633a      	str	r2, [r7, #48]	; 0x30
 800d24c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d24e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d250:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d252:	e841 2300 	strex	r3, r2, [r1]
 800d256:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d1e5      	bne.n	800d22a <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d25e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d264:	693b      	ldr	r3, [r7, #16]
 800d266:	e853 3f00 	ldrex	r3, [r3]
 800d26a:	60fb      	str	r3, [r7, #12]
   return(result);
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d272:	637b      	str	r3, [r7, #52]	; 0x34
 800d274:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	461a      	mov	r2, r3
 800d27a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d27c:	61fb      	str	r3, [r7, #28]
 800d27e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d280:	69b9      	ldr	r1, [r7, #24]
 800d282:	69fa      	ldr	r2, [r7, #28]
 800d284:	e841 2300 	strex	r3, r2, [r1]
 800d288:	617b      	str	r3, [r7, #20]
   return(result);
 800d28a:	697b      	ldr	r3, [r7, #20]
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d1e6      	bne.n	800d25e <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d290:	e002      	b.n	800d298 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800d292:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d294:	f7f6 fafa 	bl	800388c <HAL_UART_TxCpltCallback>
}
 800d298:	bf00      	nop
 800d29a:	3740      	adds	r7, #64	; 0x40
 800d29c:	46bd      	mov	sp, r7
 800d29e:	bd80      	pop	{r7, pc}

0800d2a0 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d2a0:	b580      	push	{r7, lr}
 800d2a2:	b084      	sub	sp, #16
 800d2a4:	af00      	add	r7, sp, #0
 800d2a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2ac:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800d2ae:	68f8      	ldr	r0, [r7, #12]
 800d2b0:	f7ff f9d8 	bl	800c664 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d2b4:	bf00      	nop
 800d2b6:	3710      	adds	r7, #16
 800d2b8:	46bd      	mov	sp, r7
 800d2ba:	bd80      	pop	{r7, pc}

0800d2bc <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800d2bc:	b580      	push	{r7, lr}
 800d2be:	b086      	sub	sp, #24
 800d2c0:	af00      	add	r7, sp, #0
 800d2c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2c8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800d2ca:	697b      	ldr	r3, [r7, #20]
 800d2cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d2ce:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800d2d0:	697b      	ldr	r3, [r7, #20]
 800d2d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d2d4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800d2d6:	697b      	ldr	r3, [r7, #20]
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	689b      	ldr	r3, [r3, #8]
 800d2dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d2e0:	2b80      	cmp	r3, #128	; 0x80
 800d2e2:	d109      	bne.n	800d2f8 <UART_DMAError+0x3c>
 800d2e4:	693b      	ldr	r3, [r7, #16]
 800d2e6:	2b21      	cmp	r3, #33	; 0x21
 800d2e8:	d106      	bne.n	800d2f8 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800d2ea:	697b      	ldr	r3, [r7, #20]
 800d2ec:	2200      	movs	r2, #0
 800d2ee:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800d2f2:	6978      	ldr	r0, [r7, #20]
 800d2f4:	f7ff fefe 	bl	800d0f4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800d2f8:	697b      	ldr	r3, [r7, #20]
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	689b      	ldr	r3, [r3, #8]
 800d2fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d302:	2b40      	cmp	r3, #64	; 0x40
 800d304:	d109      	bne.n	800d31a <UART_DMAError+0x5e>
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	2b22      	cmp	r3, #34	; 0x22
 800d30a:	d106      	bne.n	800d31a <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800d30c:	697b      	ldr	r3, [r7, #20]
 800d30e:	2200      	movs	r2, #0
 800d310:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800d314:	6978      	ldr	r0, [r7, #20]
 800d316:	f7ff ff13 	bl	800d140 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800d31a:	697b      	ldr	r3, [r7, #20]
 800d31c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d320:	f043 0210 	orr.w	r2, r3, #16
 800d324:	697b      	ldr	r3, [r7, #20]
 800d326:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d32a:	6978      	ldr	r0, [r7, #20]
 800d32c:	f7f6 fcf6 	bl	8003d1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d330:	bf00      	nop
 800d332:	3718      	adds	r7, #24
 800d334:	46bd      	mov	sp, r7
 800d336:	bd80      	pop	{r7, pc}

0800d338 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d338:	b580      	push	{r7, lr}
 800d33a:	b084      	sub	sp, #16
 800d33c:	af00      	add	r7, sp, #0
 800d33e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d344:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	2200      	movs	r2, #0
 800d34a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	2200      	movs	r2, #0
 800d352:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d356:	68f8      	ldr	r0, [r7, #12]
 800d358:	f7f6 fce0 	bl	8003d1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d35c:	bf00      	nop
 800d35e:	3710      	adds	r7, #16
 800d360:	46bd      	mov	sp, r7
 800d362:	bd80      	pop	{r7, pc}

0800d364 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d364:	b580      	push	{r7, lr}
 800d366:	b088      	sub	sp, #32
 800d368:	af00      	add	r7, sp, #0
 800d36a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	e853 3f00 	ldrex	r3, [r3]
 800d378:	60bb      	str	r3, [r7, #8]
   return(result);
 800d37a:	68bb      	ldr	r3, [r7, #8]
 800d37c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d380:	61fb      	str	r3, [r7, #28]
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	461a      	mov	r2, r3
 800d388:	69fb      	ldr	r3, [r7, #28]
 800d38a:	61bb      	str	r3, [r7, #24]
 800d38c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d38e:	6979      	ldr	r1, [r7, #20]
 800d390:	69ba      	ldr	r2, [r7, #24]
 800d392:	e841 2300 	strex	r3, r2, [r1]
 800d396:	613b      	str	r3, [r7, #16]
   return(result);
 800d398:	693b      	ldr	r3, [r7, #16]
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d1e6      	bne.n	800d36c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	2220      	movs	r2, #32
 800d3a2:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	2200      	movs	r2, #0
 800d3a8:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d3aa:	6878      	ldr	r0, [r7, #4]
 800d3ac:	f7f6 fa6e 	bl	800388c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d3b0:	bf00      	nop
 800d3b2:	3720      	adds	r7, #32
 800d3b4:	46bd      	mov	sp, r7
 800d3b6:	bd80      	pop	{r7, pc}

0800d3b8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800d3b8:	b580      	push	{r7, lr}
 800d3ba:	b096      	sub	sp, #88	; 0x58
 800d3bc:	af00      	add	r7, sp, #0
 800d3be:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d3c6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d3ce:	2b22      	cmp	r3, #34	; 0x22
 800d3d0:	f040 8094 	bne.w	800d4fc <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d3da:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800d3de:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800d3e2:	b2d9      	uxtb	r1, r3
 800d3e4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800d3e8:	b2da      	uxtb	r2, r3
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d3ee:	400a      	ands	r2, r1
 800d3f0:	b2d2      	uxtb	r2, r2
 800d3f2:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d3f8:	1c5a      	adds	r2, r3, #1
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800d404:	b29b      	uxth	r3, r3
 800d406:	3b01      	subs	r3, #1
 800d408:	b29a      	uxth	r2, r3
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800d416:	b29b      	uxth	r3, r3
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d179      	bne.n	800d510 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d424:	e853 3f00 	ldrex	r3, [r3]
 800d428:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d42a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d42c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d430:	653b      	str	r3, [r7, #80]	; 0x50
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	461a      	mov	r2, r3
 800d438:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d43a:	647b      	str	r3, [r7, #68]	; 0x44
 800d43c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d43e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d440:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d442:	e841 2300 	strex	r3, r2, [r1]
 800d446:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d448:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d1e6      	bne.n	800d41c <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	3308      	adds	r3, #8
 800d454:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d458:	e853 3f00 	ldrex	r3, [r3]
 800d45c:	623b      	str	r3, [r7, #32]
   return(result);
 800d45e:	6a3b      	ldr	r3, [r7, #32]
 800d460:	f023 0301 	bic.w	r3, r3, #1
 800d464:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	3308      	adds	r3, #8
 800d46c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d46e:	633a      	str	r2, [r7, #48]	; 0x30
 800d470:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d472:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d474:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d476:	e841 2300 	strex	r3, r2, [r1]
 800d47a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d47c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d1e5      	bne.n	800d44e <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	2220      	movs	r2, #32
 800d486:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	2200      	movs	r2, #0
 800d48c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d492:	2b01      	cmp	r3, #1
 800d494:	d12e      	bne.n	800d4f4 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	2200      	movs	r2, #0
 800d49a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4a2:	693b      	ldr	r3, [r7, #16]
 800d4a4:	e853 3f00 	ldrex	r3, [r3]
 800d4a8:	60fb      	str	r3, [r7, #12]
   return(result);
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	f023 0310 	bic.w	r3, r3, #16
 800d4b0:	64bb      	str	r3, [r7, #72]	; 0x48
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	461a      	mov	r2, r3
 800d4b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d4ba:	61fb      	str	r3, [r7, #28]
 800d4bc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4be:	69b9      	ldr	r1, [r7, #24]
 800d4c0:	69fa      	ldr	r2, [r7, #28]
 800d4c2:	e841 2300 	strex	r3, r2, [r1]
 800d4c6:	617b      	str	r3, [r7, #20]
   return(result);
 800d4c8:	697b      	ldr	r3, [r7, #20]
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d1e6      	bne.n	800d49c <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	69db      	ldr	r3, [r3, #28]
 800d4d4:	f003 0310 	and.w	r3, r3, #16
 800d4d8:	2b10      	cmp	r3, #16
 800d4da:	d103      	bne.n	800d4e4 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	2210      	movs	r2, #16
 800d4e2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800d4ea:	4619      	mov	r1, r3
 800d4ec:	6878      	ldr	r0, [r7, #4]
 800d4ee:	f7ff f8c3 	bl	800c678 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d4f2:	e00d      	b.n	800d510 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800d4f4:	6878      	ldr	r0, [r7, #4]
 800d4f6:	f7f6 f9df 	bl	80038b8 <HAL_UART_RxCpltCallback>
}
 800d4fa:	e009      	b.n	800d510 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	8b1b      	ldrh	r3, [r3, #24]
 800d502:	b29a      	uxth	r2, r3
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	f042 0208 	orr.w	r2, r2, #8
 800d50c:	b292      	uxth	r2, r2
 800d50e:	831a      	strh	r2, [r3, #24]
}
 800d510:	bf00      	nop
 800d512:	3758      	adds	r7, #88	; 0x58
 800d514:	46bd      	mov	sp, r7
 800d516:	bd80      	pop	{r7, pc}

0800d518 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800d518:	b580      	push	{r7, lr}
 800d51a:	b096      	sub	sp, #88	; 0x58
 800d51c:	af00      	add	r7, sp, #0
 800d51e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d526:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d52e:	2b22      	cmp	r3, #34	; 0x22
 800d530:	f040 8094 	bne.w	800d65c <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d53a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d542:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800d544:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800d548:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800d54c:	4013      	ands	r3, r2
 800d54e:	b29a      	uxth	r2, r3
 800d550:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d552:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d558:	1c9a      	adds	r2, r3, #2
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800d564:	b29b      	uxth	r3, r3
 800d566:	3b01      	subs	r3, #1
 800d568:	b29a      	uxth	r2, r3
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800d576:	b29b      	uxth	r3, r3
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d179      	bne.n	800d670 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d582:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d584:	e853 3f00 	ldrex	r3, [r3]
 800d588:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d58a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d58c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d590:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	461a      	mov	r2, r3
 800d598:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d59a:	643b      	str	r3, [r7, #64]	; 0x40
 800d59c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d59e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d5a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d5a2:	e841 2300 	strex	r3, r2, [r1]
 800d5a6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d5a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d1e6      	bne.n	800d57c <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	3308      	adds	r3, #8
 800d5b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5b6:	6a3b      	ldr	r3, [r7, #32]
 800d5b8:	e853 3f00 	ldrex	r3, [r3]
 800d5bc:	61fb      	str	r3, [r7, #28]
   return(result);
 800d5be:	69fb      	ldr	r3, [r7, #28]
 800d5c0:	f023 0301 	bic.w	r3, r3, #1
 800d5c4:	64bb      	str	r3, [r7, #72]	; 0x48
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	3308      	adds	r3, #8
 800d5cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d5ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d5d0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d5d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d5d6:	e841 2300 	strex	r3, r2, [r1]
 800d5da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d5dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d1e5      	bne.n	800d5ae <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	2220      	movs	r2, #32
 800d5e6:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	2200      	movs	r2, #0
 800d5ec:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d5f2:	2b01      	cmp	r3, #1
 800d5f4:	d12e      	bne.n	800d654 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	2200      	movs	r2, #0
 800d5fa:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	e853 3f00 	ldrex	r3, [r3]
 800d608:	60bb      	str	r3, [r7, #8]
   return(result);
 800d60a:	68bb      	ldr	r3, [r7, #8]
 800d60c:	f023 0310 	bic.w	r3, r3, #16
 800d610:	647b      	str	r3, [r7, #68]	; 0x44
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	461a      	mov	r2, r3
 800d618:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d61a:	61bb      	str	r3, [r7, #24]
 800d61c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d61e:	6979      	ldr	r1, [r7, #20]
 800d620:	69ba      	ldr	r2, [r7, #24]
 800d622:	e841 2300 	strex	r3, r2, [r1]
 800d626:	613b      	str	r3, [r7, #16]
   return(result);
 800d628:	693b      	ldr	r3, [r7, #16]
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d1e6      	bne.n	800d5fc <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	69db      	ldr	r3, [r3, #28]
 800d634:	f003 0310 	and.w	r3, r3, #16
 800d638:	2b10      	cmp	r3, #16
 800d63a:	d103      	bne.n	800d644 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	2210      	movs	r2, #16
 800d642:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800d64a:	4619      	mov	r1, r3
 800d64c:	6878      	ldr	r0, [r7, #4]
 800d64e:	f7ff f813 	bl	800c678 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d652:	e00d      	b.n	800d670 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800d654:	6878      	ldr	r0, [r7, #4]
 800d656:	f7f6 f92f 	bl	80038b8 <HAL_UART_RxCpltCallback>
}
 800d65a:	e009      	b.n	800d670 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	8b1b      	ldrh	r3, [r3, #24]
 800d662:	b29a      	uxth	r2, r3
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	f042 0208 	orr.w	r2, r2, #8
 800d66c:	b292      	uxth	r2, r2
 800d66e:	831a      	strh	r2, [r3, #24]
}
 800d670:	bf00      	nop
 800d672:	3758      	adds	r7, #88	; 0x58
 800d674:	46bd      	mov	sp, r7
 800d676:	bd80      	pop	{r7, pc}

0800d678 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d678:	b480      	push	{r7}
 800d67a:	b083      	sub	sp, #12
 800d67c:	af00      	add	r7, sp, #0
 800d67e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d680:	bf00      	nop
 800d682:	370c      	adds	r7, #12
 800d684:	46bd      	mov	sp, r7
 800d686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d68a:	4770      	bx	lr

0800d68c <atof>:
 800d68c:	2100      	movs	r1, #0
 800d68e:	f001 bbd9 	b.w	800ee44 <strtod>

0800d692 <atoi>:
 800d692:	220a      	movs	r2, #10
 800d694:	2100      	movs	r1, #0
 800d696:	f001 bc63 	b.w	800ef60 <strtol>

0800d69a <atol>:
 800d69a:	220a      	movs	r2, #10
 800d69c:	2100      	movs	r1, #0
 800d69e:	f001 bc5f 	b.w	800ef60 <strtol>
	...

0800d6a4 <__errno>:
 800d6a4:	4b01      	ldr	r3, [pc, #4]	; (800d6ac <__errno+0x8>)
 800d6a6:	6818      	ldr	r0, [r3, #0]
 800d6a8:	4770      	bx	lr
 800d6aa:	bf00      	nop
 800d6ac:	200001f0 	.word	0x200001f0

0800d6b0 <gmtime_r>:
 800d6b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6b4:	e9d0 6700 	ldrd	r6, r7, [r0]
 800d6b8:	460c      	mov	r4, r1
 800d6ba:	4a4f      	ldr	r2, [pc, #316]	; (800d7f8 <gmtime_r+0x148>)
 800d6bc:	2300      	movs	r3, #0
 800d6be:	4630      	mov	r0, r6
 800d6c0:	4639      	mov	r1, r7
 800d6c2:	f7f3 fae1 	bl	8000c88 <__aeabi_ldivmod>
 800d6c6:	4639      	mov	r1, r7
 800d6c8:	4605      	mov	r5, r0
 800d6ca:	4a4b      	ldr	r2, [pc, #300]	; (800d7f8 <gmtime_r+0x148>)
 800d6cc:	4630      	mov	r0, r6
 800d6ce:	2300      	movs	r3, #0
 800d6d0:	f7f3 fada 	bl	8000c88 <__aeabi_ldivmod>
 800d6d4:	2a00      	cmp	r2, #0
 800d6d6:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 800d6da:	bfb7      	itett	lt
 800d6dc:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 800d6e0:	f600 236c 	addwge	r3, r0, #2668	; 0xa6c
 800d6e4:	f600 236b 	addwlt	r3, r0, #2667	; 0xa6b
 800d6e8:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 800d6ec:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 800d6f0:	fbb2 f1f0 	udiv	r1, r2, r0
 800d6f4:	fb00 2211 	mls	r2, r0, r1, r2
 800d6f8:	203c      	movs	r0, #60	; 0x3c
 800d6fa:	60a1      	str	r1, [r4, #8]
 800d6fc:	fbb2 f1f0 	udiv	r1, r2, r0
 800d700:	fb00 2211 	mls	r2, r0, r1, r2
 800d704:	6061      	str	r1, [r4, #4]
 800d706:	6022      	str	r2, [r4, #0]
 800d708:	2107      	movs	r1, #7
 800d70a:	1cda      	adds	r2, r3, #3
 800d70c:	fb92 f1f1 	sdiv	r1, r2, r1
 800d710:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800d714:	1a52      	subs	r2, r2, r1
 800d716:	bf48      	it	mi
 800d718:	3207      	addmi	r2, #7
 800d71a:	4d38      	ldr	r5, [pc, #224]	; (800d7fc <gmtime_r+0x14c>)
 800d71c:	4838      	ldr	r0, [pc, #224]	; (800d800 <gmtime_r+0x150>)
 800d71e:	61a2      	str	r2, [r4, #24]
 800d720:	2b00      	cmp	r3, #0
 800d722:	bfb7      	itett	lt
 800d724:	f5a3 320e 	sublt.w	r2, r3, #145408	; 0x23800
 800d728:	fb93 f5f5 	sdivge	r5, r3, r5
 800d72c:	f5a2 722c 	sublt.w	r2, r2, #688	; 0x2b0
 800d730:	fb92 f5f5 	sdivlt	r5, r2, r5
 800d734:	fb00 3005 	mla	r0, r0, r5, r3
 800d738:	f648 62ac 	movw	r2, #36524	; 0x8eac
 800d73c:	fbb0 f2f2 	udiv	r2, r0, r2
 800d740:	4402      	add	r2, r0
 800d742:	f240 53b4 	movw	r3, #1460	; 0x5b4
 800d746:	fbb0 f1f3 	udiv	r1, r0, r3
 800d74a:	1a52      	subs	r2, r2, r1
 800d74c:	f240 1c6d 	movw	ip, #365	; 0x16d
 800d750:	492c      	ldr	r1, [pc, #176]	; (800d804 <gmtime_r+0x154>)
 800d752:	fbb0 f1f1 	udiv	r1, r0, r1
 800d756:	2764      	movs	r7, #100	; 0x64
 800d758:	1a52      	subs	r2, r2, r1
 800d75a:	fbb2 f1fc 	udiv	r1, r2, ip
 800d75e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d762:	fbb1 f6f7 	udiv	r6, r1, r7
 800d766:	1af3      	subs	r3, r6, r3
 800d768:	4403      	add	r3, r0
 800d76a:	fb0c 3311 	mls	r3, ip, r1, r3
 800d76e:	2299      	movs	r2, #153	; 0x99
 800d770:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 800d774:	f10e 0e02 	add.w	lr, lr, #2
 800d778:	f103 0c01 	add.w	ip, r3, #1
 800d77c:	fbbe f0f2 	udiv	r0, lr, r2
 800d780:	4342      	muls	r2, r0
 800d782:	3202      	adds	r2, #2
 800d784:	f04f 0805 	mov.w	r8, #5
 800d788:	fbb2 f2f8 	udiv	r2, r2, r8
 800d78c:	ebac 0c02 	sub.w	ip, ip, r2
 800d790:	f240 52f9 	movw	r2, #1529	; 0x5f9
 800d794:	4596      	cmp	lr, r2
 800d796:	bf94      	ite	ls
 800d798:	2202      	movls	r2, #2
 800d79a:	f06f 0209 	mvnhi.w	r2, #9
 800d79e:	4410      	add	r0, r2
 800d7a0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800d7a4:	fb02 1505 	mla	r5, r2, r5, r1
 800d7a8:	2801      	cmp	r0, #1
 800d7aa:	bf98      	it	ls
 800d7ac:	3501      	addls	r5, #1
 800d7ae:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 800d7b2:	d30d      	bcc.n	800d7d0 <gmtime_r+0x120>
 800d7b4:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800d7b8:	61e3      	str	r3, [r4, #28]
 800d7ba:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 800d7be:	2300      	movs	r3, #0
 800d7c0:	e9c4 0504 	strd	r0, r5, [r4, #16]
 800d7c4:	f8c4 c00c 	str.w	ip, [r4, #12]
 800d7c8:	6223      	str	r3, [r4, #32]
 800d7ca:	4620      	mov	r0, r4
 800d7cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d7d0:	078a      	lsls	r2, r1, #30
 800d7d2:	d102      	bne.n	800d7da <gmtime_r+0x12a>
 800d7d4:	fb07 1616 	mls	r6, r7, r6, r1
 800d7d8:	b95e      	cbnz	r6, 800d7f2 <gmtime_r+0x142>
 800d7da:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800d7de:	fbb1 f6f2 	udiv	r6, r1, r2
 800d7e2:	fb02 1216 	mls	r2, r2, r6, r1
 800d7e6:	fab2 f282 	clz	r2, r2
 800d7ea:	0952      	lsrs	r2, r2, #5
 800d7ec:	333b      	adds	r3, #59	; 0x3b
 800d7ee:	4413      	add	r3, r2
 800d7f0:	e7e2      	b.n	800d7b8 <gmtime_r+0x108>
 800d7f2:	2201      	movs	r2, #1
 800d7f4:	e7fa      	b.n	800d7ec <gmtime_r+0x13c>
 800d7f6:	bf00      	nop
 800d7f8:	00015180 	.word	0x00015180
 800d7fc:	00023ab1 	.word	0x00023ab1
 800d800:	fffdc54f 	.word	0xfffdc54f
 800d804:	00023ab0 	.word	0x00023ab0

0800d808 <__libc_init_array>:
 800d808:	b570      	push	{r4, r5, r6, lr}
 800d80a:	4d0d      	ldr	r5, [pc, #52]	; (800d840 <__libc_init_array+0x38>)
 800d80c:	4c0d      	ldr	r4, [pc, #52]	; (800d844 <__libc_init_array+0x3c>)
 800d80e:	1b64      	subs	r4, r4, r5
 800d810:	10a4      	asrs	r4, r4, #2
 800d812:	2600      	movs	r6, #0
 800d814:	42a6      	cmp	r6, r4
 800d816:	d109      	bne.n	800d82c <__libc_init_array+0x24>
 800d818:	4d0b      	ldr	r5, [pc, #44]	; (800d848 <__libc_init_array+0x40>)
 800d81a:	4c0c      	ldr	r4, [pc, #48]	; (800d84c <__libc_init_array+0x44>)
 800d81c:	f004 fae2 	bl	8011de4 <_init>
 800d820:	1b64      	subs	r4, r4, r5
 800d822:	10a4      	asrs	r4, r4, #2
 800d824:	2600      	movs	r6, #0
 800d826:	42a6      	cmp	r6, r4
 800d828:	d105      	bne.n	800d836 <__libc_init_array+0x2e>
 800d82a:	bd70      	pop	{r4, r5, r6, pc}
 800d82c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d830:	4798      	blx	r3
 800d832:	3601      	adds	r6, #1
 800d834:	e7ee      	b.n	800d814 <__libc_init_array+0xc>
 800d836:	f855 3b04 	ldr.w	r3, [r5], #4
 800d83a:	4798      	blx	r3
 800d83c:	3601      	adds	r6, #1
 800d83e:	e7f2      	b.n	800d826 <__libc_init_array+0x1e>
 800d840:	0801332c 	.word	0x0801332c
 800d844:	0801332c 	.word	0x0801332c
 800d848:	0801332c 	.word	0x0801332c
 800d84c:	08013330 	.word	0x08013330

0800d850 <memcpy>:
 800d850:	440a      	add	r2, r1
 800d852:	4291      	cmp	r1, r2
 800d854:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800d858:	d100      	bne.n	800d85c <memcpy+0xc>
 800d85a:	4770      	bx	lr
 800d85c:	b510      	push	{r4, lr}
 800d85e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d862:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d866:	4291      	cmp	r1, r2
 800d868:	d1f9      	bne.n	800d85e <memcpy+0xe>
 800d86a:	bd10      	pop	{r4, pc}

0800d86c <memset>:
 800d86c:	4402      	add	r2, r0
 800d86e:	4603      	mov	r3, r0
 800d870:	4293      	cmp	r3, r2
 800d872:	d100      	bne.n	800d876 <memset+0xa>
 800d874:	4770      	bx	lr
 800d876:	f803 1b01 	strb.w	r1, [r3], #1
 800d87a:	e7f9      	b.n	800d870 <memset+0x4>

0800d87c <__cvt>:
 800d87c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d880:	ec55 4b10 	vmov	r4, r5, d0
 800d884:	2d00      	cmp	r5, #0
 800d886:	460e      	mov	r6, r1
 800d888:	4619      	mov	r1, r3
 800d88a:	462b      	mov	r3, r5
 800d88c:	bfbb      	ittet	lt
 800d88e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800d892:	461d      	movlt	r5, r3
 800d894:	2300      	movge	r3, #0
 800d896:	232d      	movlt	r3, #45	; 0x2d
 800d898:	700b      	strb	r3, [r1, #0]
 800d89a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d89c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800d8a0:	4691      	mov	r9, r2
 800d8a2:	f023 0820 	bic.w	r8, r3, #32
 800d8a6:	bfbc      	itt	lt
 800d8a8:	4622      	movlt	r2, r4
 800d8aa:	4614      	movlt	r4, r2
 800d8ac:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d8b0:	d005      	beq.n	800d8be <__cvt+0x42>
 800d8b2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800d8b6:	d100      	bne.n	800d8ba <__cvt+0x3e>
 800d8b8:	3601      	adds	r6, #1
 800d8ba:	2102      	movs	r1, #2
 800d8bc:	e000      	b.n	800d8c0 <__cvt+0x44>
 800d8be:	2103      	movs	r1, #3
 800d8c0:	ab03      	add	r3, sp, #12
 800d8c2:	9301      	str	r3, [sp, #4]
 800d8c4:	ab02      	add	r3, sp, #8
 800d8c6:	9300      	str	r3, [sp, #0]
 800d8c8:	ec45 4b10 	vmov	d0, r4, r5
 800d8cc:	4653      	mov	r3, sl
 800d8ce:	4632      	mov	r2, r6
 800d8d0:	f001 fc16 	bl	800f100 <_dtoa_r>
 800d8d4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800d8d8:	4607      	mov	r7, r0
 800d8da:	d102      	bne.n	800d8e2 <__cvt+0x66>
 800d8dc:	f019 0f01 	tst.w	r9, #1
 800d8e0:	d022      	beq.n	800d928 <__cvt+0xac>
 800d8e2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d8e6:	eb07 0906 	add.w	r9, r7, r6
 800d8ea:	d110      	bne.n	800d90e <__cvt+0x92>
 800d8ec:	783b      	ldrb	r3, [r7, #0]
 800d8ee:	2b30      	cmp	r3, #48	; 0x30
 800d8f0:	d10a      	bne.n	800d908 <__cvt+0x8c>
 800d8f2:	2200      	movs	r2, #0
 800d8f4:	2300      	movs	r3, #0
 800d8f6:	4620      	mov	r0, r4
 800d8f8:	4629      	mov	r1, r5
 800d8fa:	f7f3 f8e5 	bl	8000ac8 <__aeabi_dcmpeq>
 800d8fe:	b918      	cbnz	r0, 800d908 <__cvt+0x8c>
 800d900:	f1c6 0601 	rsb	r6, r6, #1
 800d904:	f8ca 6000 	str.w	r6, [sl]
 800d908:	f8da 3000 	ldr.w	r3, [sl]
 800d90c:	4499      	add	r9, r3
 800d90e:	2200      	movs	r2, #0
 800d910:	2300      	movs	r3, #0
 800d912:	4620      	mov	r0, r4
 800d914:	4629      	mov	r1, r5
 800d916:	f7f3 f8d7 	bl	8000ac8 <__aeabi_dcmpeq>
 800d91a:	b108      	cbz	r0, 800d920 <__cvt+0xa4>
 800d91c:	f8cd 900c 	str.w	r9, [sp, #12]
 800d920:	2230      	movs	r2, #48	; 0x30
 800d922:	9b03      	ldr	r3, [sp, #12]
 800d924:	454b      	cmp	r3, r9
 800d926:	d307      	bcc.n	800d938 <__cvt+0xbc>
 800d928:	9b03      	ldr	r3, [sp, #12]
 800d92a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d92c:	1bdb      	subs	r3, r3, r7
 800d92e:	4638      	mov	r0, r7
 800d930:	6013      	str	r3, [r2, #0]
 800d932:	b004      	add	sp, #16
 800d934:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d938:	1c59      	adds	r1, r3, #1
 800d93a:	9103      	str	r1, [sp, #12]
 800d93c:	701a      	strb	r2, [r3, #0]
 800d93e:	e7f0      	b.n	800d922 <__cvt+0xa6>

0800d940 <__exponent>:
 800d940:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d942:	4603      	mov	r3, r0
 800d944:	2900      	cmp	r1, #0
 800d946:	bfb8      	it	lt
 800d948:	4249      	neglt	r1, r1
 800d94a:	f803 2b02 	strb.w	r2, [r3], #2
 800d94e:	bfb4      	ite	lt
 800d950:	222d      	movlt	r2, #45	; 0x2d
 800d952:	222b      	movge	r2, #43	; 0x2b
 800d954:	2909      	cmp	r1, #9
 800d956:	7042      	strb	r2, [r0, #1]
 800d958:	dd2a      	ble.n	800d9b0 <__exponent+0x70>
 800d95a:	f10d 0407 	add.w	r4, sp, #7
 800d95e:	46a4      	mov	ip, r4
 800d960:	270a      	movs	r7, #10
 800d962:	46a6      	mov	lr, r4
 800d964:	460a      	mov	r2, r1
 800d966:	fb91 f6f7 	sdiv	r6, r1, r7
 800d96a:	fb07 1516 	mls	r5, r7, r6, r1
 800d96e:	3530      	adds	r5, #48	; 0x30
 800d970:	2a63      	cmp	r2, #99	; 0x63
 800d972:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800d976:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800d97a:	4631      	mov	r1, r6
 800d97c:	dcf1      	bgt.n	800d962 <__exponent+0x22>
 800d97e:	3130      	adds	r1, #48	; 0x30
 800d980:	f1ae 0502 	sub.w	r5, lr, #2
 800d984:	f804 1c01 	strb.w	r1, [r4, #-1]
 800d988:	1c44      	adds	r4, r0, #1
 800d98a:	4629      	mov	r1, r5
 800d98c:	4561      	cmp	r1, ip
 800d98e:	d30a      	bcc.n	800d9a6 <__exponent+0x66>
 800d990:	f10d 0209 	add.w	r2, sp, #9
 800d994:	eba2 020e 	sub.w	r2, r2, lr
 800d998:	4565      	cmp	r5, ip
 800d99a:	bf88      	it	hi
 800d99c:	2200      	movhi	r2, #0
 800d99e:	4413      	add	r3, r2
 800d9a0:	1a18      	subs	r0, r3, r0
 800d9a2:	b003      	add	sp, #12
 800d9a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d9a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d9aa:	f804 2f01 	strb.w	r2, [r4, #1]!
 800d9ae:	e7ed      	b.n	800d98c <__exponent+0x4c>
 800d9b0:	2330      	movs	r3, #48	; 0x30
 800d9b2:	3130      	adds	r1, #48	; 0x30
 800d9b4:	7083      	strb	r3, [r0, #2]
 800d9b6:	70c1      	strb	r1, [r0, #3]
 800d9b8:	1d03      	adds	r3, r0, #4
 800d9ba:	e7f1      	b.n	800d9a0 <__exponent+0x60>

0800d9bc <_printf_float>:
 800d9bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9c0:	ed2d 8b02 	vpush	{d8}
 800d9c4:	b08d      	sub	sp, #52	; 0x34
 800d9c6:	460c      	mov	r4, r1
 800d9c8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800d9cc:	4616      	mov	r6, r2
 800d9ce:	461f      	mov	r7, r3
 800d9d0:	4605      	mov	r5, r0
 800d9d2:	f002 fcf3 	bl	80103bc <_localeconv_r>
 800d9d6:	f8d0 a000 	ldr.w	sl, [r0]
 800d9da:	4650      	mov	r0, sl
 800d9dc:	f7f2 fbf8 	bl	80001d0 <strlen>
 800d9e0:	2300      	movs	r3, #0
 800d9e2:	930a      	str	r3, [sp, #40]	; 0x28
 800d9e4:	6823      	ldr	r3, [r4, #0]
 800d9e6:	9305      	str	r3, [sp, #20]
 800d9e8:	f8d8 3000 	ldr.w	r3, [r8]
 800d9ec:	f894 b018 	ldrb.w	fp, [r4, #24]
 800d9f0:	3307      	adds	r3, #7
 800d9f2:	f023 0307 	bic.w	r3, r3, #7
 800d9f6:	f103 0208 	add.w	r2, r3, #8
 800d9fa:	f8c8 2000 	str.w	r2, [r8]
 800d9fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da02:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800da06:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800da0a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800da0e:	9307      	str	r3, [sp, #28]
 800da10:	f8cd 8018 	str.w	r8, [sp, #24]
 800da14:	ee08 0a10 	vmov	s16, r0
 800da18:	4b9f      	ldr	r3, [pc, #636]	; (800dc98 <_printf_float+0x2dc>)
 800da1a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800da1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800da22:	f7f3 f883 	bl	8000b2c <__aeabi_dcmpun>
 800da26:	bb88      	cbnz	r0, 800da8c <_printf_float+0xd0>
 800da28:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800da2c:	4b9a      	ldr	r3, [pc, #616]	; (800dc98 <_printf_float+0x2dc>)
 800da2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800da32:	f7f3 f85d 	bl	8000af0 <__aeabi_dcmple>
 800da36:	bb48      	cbnz	r0, 800da8c <_printf_float+0xd0>
 800da38:	2200      	movs	r2, #0
 800da3a:	2300      	movs	r3, #0
 800da3c:	4640      	mov	r0, r8
 800da3e:	4649      	mov	r1, r9
 800da40:	f7f3 f84c 	bl	8000adc <__aeabi_dcmplt>
 800da44:	b110      	cbz	r0, 800da4c <_printf_float+0x90>
 800da46:	232d      	movs	r3, #45	; 0x2d
 800da48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800da4c:	4b93      	ldr	r3, [pc, #588]	; (800dc9c <_printf_float+0x2e0>)
 800da4e:	4894      	ldr	r0, [pc, #592]	; (800dca0 <_printf_float+0x2e4>)
 800da50:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800da54:	bf94      	ite	ls
 800da56:	4698      	movls	r8, r3
 800da58:	4680      	movhi	r8, r0
 800da5a:	2303      	movs	r3, #3
 800da5c:	6123      	str	r3, [r4, #16]
 800da5e:	9b05      	ldr	r3, [sp, #20]
 800da60:	f023 0204 	bic.w	r2, r3, #4
 800da64:	6022      	str	r2, [r4, #0]
 800da66:	f04f 0900 	mov.w	r9, #0
 800da6a:	9700      	str	r7, [sp, #0]
 800da6c:	4633      	mov	r3, r6
 800da6e:	aa0b      	add	r2, sp, #44	; 0x2c
 800da70:	4621      	mov	r1, r4
 800da72:	4628      	mov	r0, r5
 800da74:	f000 f9d8 	bl	800de28 <_printf_common>
 800da78:	3001      	adds	r0, #1
 800da7a:	f040 8090 	bne.w	800db9e <_printf_float+0x1e2>
 800da7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800da82:	b00d      	add	sp, #52	; 0x34
 800da84:	ecbd 8b02 	vpop	{d8}
 800da88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da8c:	4642      	mov	r2, r8
 800da8e:	464b      	mov	r3, r9
 800da90:	4640      	mov	r0, r8
 800da92:	4649      	mov	r1, r9
 800da94:	f7f3 f84a 	bl	8000b2c <__aeabi_dcmpun>
 800da98:	b140      	cbz	r0, 800daac <_printf_float+0xf0>
 800da9a:	464b      	mov	r3, r9
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	bfbc      	itt	lt
 800daa0:	232d      	movlt	r3, #45	; 0x2d
 800daa2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800daa6:	487f      	ldr	r0, [pc, #508]	; (800dca4 <_printf_float+0x2e8>)
 800daa8:	4b7f      	ldr	r3, [pc, #508]	; (800dca8 <_printf_float+0x2ec>)
 800daaa:	e7d1      	b.n	800da50 <_printf_float+0x94>
 800daac:	6863      	ldr	r3, [r4, #4]
 800daae:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800dab2:	9206      	str	r2, [sp, #24]
 800dab4:	1c5a      	adds	r2, r3, #1
 800dab6:	d13f      	bne.n	800db38 <_printf_float+0x17c>
 800dab8:	2306      	movs	r3, #6
 800daba:	6063      	str	r3, [r4, #4]
 800dabc:	9b05      	ldr	r3, [sp, #20]
 800dabe:	6861      	ldr	r1, [r4, #4]
 800dac0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800dac4:	2300      	movs	r3, #0
 800dac6:	9303      	str	r3, [sp, #12]
 800dac8:	ab0a      	add	r3, sp, #40	; 0x28
 800daca:	e9cd b301 	strd	fp, r3, [sp, #4]
 800dace:	ab09      	add	r3, sp, #36	; 0x24
 800dad0:	ec49 8b10 	vmov	d0, r8, r9
 800dad4:	9300      	str	r3, [sp, #0]
 800dad6:	6022      	str	r2, [r4, #0]
 800dad8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800dadc:	4628      	mov	r0, r5
 800dade:	f7ff fecd 	bl	800d87c <__cvt>
 800dae2:	9b06      	ldr	r3, [sp, #24]
 800dae4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dae6:	2b47      	cmp	r3, #71	; 0x47
 800dae8:	4680      	mov	r8, r0
 800daea:	d108      	bne.n	800dafe <_printf_float+0x142>
 800daec:	1cc8      	adds	r0, r1, #3
 800daee:	db02      	blt.n	800daf6 <_printf_float+0x13a>
 800daf0:	6863      	ldr	r3, [r4, #4]
 800daf2:	4299      	cmp	r1, r3
 800daf4:	dd41      	ble.n	800db7a <_printf_float+0x1be>
 800daf6:	f1ab 0b02 	sub.w	fp, fp, #2
 800dafa:	fa5f fb8b 	uxtb.w	fp, fp
 800dafe:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800db02:	d820      	bhi.n	800db46 <_printf_float+0x18a>
 800db04:	3901      	subs	r1, #1
 800db06:	465a      	mov	r2, fp
 800db08:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800db0c:	9109      	str	r1, [sp, #36]	; 0x24
 800db0e:	f7ff ff17 	bl	800d940 <__exponent>
 800db12:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800db14:	1813      	adds	r3, r2, r0
 800db16:	2a01      	cmp	r2, #1
 800db18:	4681      	mov	r9, r0
 800db1a:	6123      	str	r3, [r4, #16]
 800db1c:	dc02      	bgt.n	800db24 <_printf_float+0x168>
 800db1e:	6822      	ldr	r2, [r4, #0]
 800db20:	07d2      	lsls	r2, r2, #31
 800db22:	d501      	bpl.n	800db28 <_printf_float+0x16c>
 800db24:	3301      	adds	r3, #1
 800db26:	6123      	str	r3, [r4, #16]
 800db28:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d09c      	beq.n	800da6a <_printf_float+0xae>
 800db30:	232d      	movs	r3, #45	; 0x2d
 800db32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800db36:	e798      	b.n	800da6a <_printf_float+0xae>
 800db38:	9a06      	ldr	r2, [sp, #24]
 800db3a:	2a47      	cmp	r2, #71	; 0x47
 800db3c:	d1be      	bne.n	800dabc <_printf_float+0x100>
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d1bc      	bne.n	800dabc <_printf_float+0x100>
 800db42:	2301      	movs	r3, #1
 800db44:	e7b9      	b.n	800daba <_printf_float+0xfe>
 800db46:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800db4a:	d118      	bne.n	800db7e <_printf_float+0x1c2>
 800db4c:	2900      	cmp	r1, #0
 800db4e:	6863      	ldr	r3, [r4, #4]
 800db50:	dd0b      	ble.n	800db6a <_printf_float+0x1ae>
 800db52:	6121      	str	r1, [r4, #16]
 800db54:	b913      	cbnz	r3, 800db5c <_printf_float+0x1a0>
 800db56:	6822      	ldr	r2, [r4, #0]
 800db58:	07d0      	lsls	r0, r2, #31
 800db5a:	d502      	bpl.n	800db62 <_printf_float+0x1a6>
 800db5c:	3301      	adds	r3, #1
 800db5e:	440b      	add	r3, r1
 800db60:	6123      	str	r3, [r4, #16]
 800db62:	65a1      	str	r1, [r4, #88]	; 0x58
 800db64:	f04f 0900 	mov.w	r9, #0
 800db68:	e7de      	b.n	800db28 <_printf_float+0x16c>
 800db6a:	b913      	cbnz	r3, 800db72 <_printf_float+0x1b6>
 800db6c:	6822      	ldr	r2, [r4, #0]
 800db6e:	07d2      	lsls	r2, r2, #31
 800db70:	d501      	bpl.n	800db76 <_printf_float+0x1ba>
 800db72:	3302      	adds	r3, #2
 800db74:	e7f4      	b.n	800db60 <_printf_float+0x1a4>
 800db76:	2301      	movs	r3, #1
 800db78:	e7f2      	b.n	800db60 <_printf_float+0x1a4>
 800db7a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800db7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db80:	4299      	cmp	r1, r3
 800db82:	db05      	blt.n	800db90 <_printf_float+0x1d4>
 800db84:	6823      	ldr	r3, [r4, #0]
 800db86:	6121      	str	r1, [r4, #16]
 800db88:	07d8      	lsls	r0, r3, #31
 800db8a:	d5ea      	bpl.n	800db62 <_printf_float+0x1a6>
 800db8c:	1c4b      	adds	r3, r1, #1
 800db8e:	e7e7      	b.n	800db60 <_printf_float+0x1a4>
 800db90:	2900      	cmp	r1, #0
 800db92:	bfd4      	ite	le
 800db94:	f1c1 0202 	rsble	r2, r1, #2
 800db98:	2201      	movgt	r2, #1
 800db9a:	4413      	add	r3, r2
 800db9c:	e7e0      	b.n	800db60 <_printf_float+0x1a4>
 800db9e:	6823      	ldr	r3, [r4, #0]
 800dba0:	055a      	lsls	r2, r3, #21
 800dba2:	d407      	bmi.n	800dbb4 <_printf_float+0x1f8>
 800dba4:	6923      	ldr	r3, [r4, #16]
 800dba6:	4642      	mov	r2, r8
 800dba8:	4631      	mov	r1, r6
 800dbaa:	4628      	mov	r0, r5
 800dbac:	47b8      	blx	r7
 800dbae:	3001      	adds	r0, #1
 800dbb0:	d12c      	bne.n	800dc0c <_printf_float+0x250>
 800dbb2:	e764      	b.n	800da7e <_printf_float+0xc2>
 800dbb4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800dbb8:	f240 80e0 	bls.w	800dd7c <_printf_float+0x3c0>
 800dbbc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800dbc0:	2200      	movs	r2, #0
 800dbc2:	2300      	movs	r3, #0
 800dbc4:	f7f2 ff80 	bl	8000ac8 <__aeabi_dcmpeq>
 800dbc8:	2800      	cmp	r0, #0
 800dbca:	d034      	beq.n	800dc36 <_printf_float+0x27a>
 800dbcc:	4a37      	ldr	r2, [pc, #220]	; (800dcac <_printf_float+0x2f0>)
 800dbce:	2301      	movs	r3, #1
 800dbd0:	4631      	mov	r1, r6
 800dbd2:	4628      	mov	r0, r5
 800dbd4:	47b8      	blx	r7
 800dbd6:	3001      	adds	r0, #1
 800dbd8:	f43f af51 	beq.w	800da7e <_printf_float+0xc2>
 800dbdc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dbe0:	429a      	cmp	r2, r3
 800dbe2:	db02      	blt.n	800dbea <_printf_float+0x22e>
 800dbe4:	6823      	ldr	r3, [r4, #0]
 800dbe6:	07d8      	lsls	r0, r3, #31
 800dbe8:	d510      	bpl.n	800dc0c <_printf_float+0x250>
 800dbea:	ee18 3a10 	vmov	r3, s16
 800dbee:	4652      	mov	r2, sl
 800dbf0:	4631      	mov	r1, r6
 800dbf2:	4628      	mov	r0, r5
 800dbf4:	47b8      	blx	r7
 800dbf6:	3001      	adds	r0, #1
 800dbf8:	f43f af41 	beq.w	800da7e <_printf_float+0xc2>
 800dbfc:	f04f 0800 	mov.w	r8, #0
 800dc00:	f104 091a 	add.w	r9, r4, #26
 800dc04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dc06:	3b01      	subs	r3, #1
 800dc08:	4543      	cmp	r3, r8
 800dc0a:	dc09      	bgt.n	800dc20 <_printf_float+0x264>
 800dc0c:	6823      	ldr	r3, [r4, #0]
 800dc0e:	079b      	lsls	r3, r3, #30
 800dc10:	f100 8105 	bmi.w	800de1e <_printf_float+0x462>
 800dc14:	68e0      	ldr	r0, [r4, #12]
 800dc16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dc18:	4298      	cmp	r0, r3
 800dc1a:	bfb8      	it	lt
 800dc1c:	4618      	movlt	r0, r3
 800dc1e:	e730      	b.n	800da82 <_printf_float+0xc6>
 800dc20:	2301      	movs	r3, #1
 800dc22:	464a      	mov	r2, r9
 800dc24:	4631      	mov	r1, r6
 800dc26:	4628      	mov	r0, r5
 800dc28:	47b8      	blx	r7
 800dc2a:	3001      	adds	r0, #1
 800dc2c:	f43f af27 	beq.w	800da7e <_printf_float+0xc2>
 800dc30:	f108 0801 	add.w	r8, r8, #1
 800dc34:	e7e6      	b.n	800dc04 <_printf_float+0x248>
 800dc36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	dc39      	bgt.n	800dcb0 <_printf_float+0x2f4>
 800dc3c:	4a1b      	ldr	r2, [pc, #108]	; (800dcac <_printf_float+0x2f0>)
 800dc3e:	2301      	movs	r3, #1
 800dc40:	4631      	mov	r1, r6
 800dc42:	4628      	mov	r0, r5
 800dc44:	47b8      	blx	r7
 800dc46:	3001      	adds	r0, #1
 800dc48:	f43f af19 	beq.w	800da7e <_printf_float+0xc2>
 800dc4c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dc50:	4313      	orrs	r3, r2
 800dc52:	d102      	bne.n	800dc5a <_printf_float+0x29e>
 800dc54:	6823      	ldr	r3, [r4, #0]
 800dc56:	07d9      	lsls	r1, r3, #31
 800dc58:	d5d8      	bpl.n	800dc0c <_printf_float+0x250>
 800dc5a:	ee18 3a10 	vmov	r3, s16
 800dc5e:	4652      	mov	r2, sl
 800dc60:	4631      	mov	r1, r6
 800dc62:	4628      	mov	r0, r5
 800dc64:	47b8      	blx	r7
 800dc66:	3001      	adds	r0, #1
 800dc68:	f43f af09 	beq.w	800da7e <_printf_float+0xc2>
 800dc6c:	f04f 0900 	mov.w	r9, #0
 800dc70:	f104 0a1a 	add.w	sl, r4, #26
 800dc74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc76:	425b      	negs	r3, r3
 800dc78:	454b      	cmp	r3, r9
 800dc7a:	dc01      	bgt.n	800dc80 <_printf_float+0x2c4>
 800dc7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dc7e:	e792      	b.n	800dba6 <_printf_float+0x1ea>
 800dc80:	2301      	movs	r3, #1
 800dc82:	4652      	mov	r2, sl
 800dc84:	4631      	mov	r1, r6
 800dc86:	4628      	mov	r0, r5
 800dc88:	47b8      	blx	r7
 800dc8a:	3001      	adds	r0, #1
 800dc8c:	f43f aef7 	beq.w	800da7e <_printf_float+0xc2>
 800dc90:	f109 0901 	add.w	r9, r9, #1
 800dc94:	e7ee      	b.n	800dc74 <_printf_float+0x2b8>
 800dc96:	bf00      	nop
 800dc98:	7fefffff 	.word	0x7fefffff
 800dc9c:	08012f88 	.word	0x08012f88
 800dca0:	08012f8c 	.word	0x08012f8c
 800dca4:	08012f94 	.word	0x08012f94
 800dca8:	08012f90 	.word	0x08012f90
 800dcac:	08012f98 	.word	0x08012f98
 800dcb0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dcb2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800dcb4:	429a      	cmp	r2, r3
 800dcb6:	bfa8      	it	ge
 800dcb8:	461a      	movge	r2, r3
 800dcba:	2a00      	cmp	r2, #0
 800dcbc:	4691      	mov	r9, r2
 800dcbe:	dc37      	bgt.n	800dd30 <_printf_float+0x374>
 800dcc0:	f04f 0b00 	mov.w	fp, #0
 800dcc4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dcc8:	f104 021a 	add.w	r2, r4, #26
 800dccc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800dcce:	9305      	str	r3, [sp, #20]
 800dcd0:	eba3 0309 	sub.w	r3, r3, r9
 800dcd4:	455b      	cmp	r3, fp
 800dcd6:	dc33      	bgt.n	800dd40 <_printf_float+0x384>
 800dcd8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dcdc:	429a      	cmp	r2, r3
 800dcde:	db3b      	blt.n	800dd58 <_printf_float+0x39c>
 800dce0:	6823      	ldr	r3, [r4, #0]
 800dce2:	07da      	lsls	r2, r3, #31
 800dce4:	d438      	bmi.n	800dd58 <_printf_float+0x39c>
 800dce6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dce8:	9a05      	ldr	r2, [sp, #20]
 800dcea:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dcec:	1a9a      	subs	r2, r3, r2
 800dcee:	eba3 0901 	sub.w	r9, r3, r1
 800dcf2:	4591      	cmp	r9, r2
 800dcf4:	bfa8      	it	ge
 800dcf6:	4691      	movge	r9, r2
 800dcf8:	f1b9 0f00 	cmp.w	r9, #0
 800dcfc:	dc35      	bgt.n	800dd6a <_printf_float+0x3ae>
 800dcfe:	f04f 0800 	mov.w	r8, #0
 800dd02:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dd06:	f104 0a1a 	add.w	sl, r4, #26
 800dd0a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dd0e:	1a9b      	subs	r3, r3, r2
 800dd10:	eba3 0309 	sub.w	r3, r3, r9
 800dd14:	4543      	cmp	r3, r8
 800dd16:	f77f af79 	ble.w	800dc0c <_printf_float+0x250>
 800dd1a:	2301      	movs	r3, #1
 800dd1c:	4652      	mov	r2, sl
 800dd1e:	4631      	mov	r1, r6
 800dd20:	4628      	mov	r0, r5
 800dd22:	47b8      	blx	r7
 800dd24:	3001      	adds	r0, #1
 800dd26:	f43f aeaa 	beq.w	800da7e <_printf_float+0xc2>
 800dd2a:	f108 0801 	add.w	r8, r8, #1
 800dd2e:	e7ec      	b.n	800dd0a <_printf_float+0x34e>
 800dd30:	4613      	mov	r3, r2
 800dd32:	4631      	mov	r1, r6
 800dd34:	4642      	mov	r2, r8
 800dd36:	4628      	mov	r0, r5
 800dd38:	47b8      	blx	r7
 800dd3a:	3001      	adds	r0, #1
 800dd3c:	d1c0      	bne.n	800dcc0 <_printf_float+0x304>
 800dd3e:	e69e      	b.n	800da7e <_printf_float+0xc2>
 800dd40:	2301      	movs	r3, #1
 800dd42:	4631      	mov	r1, r6
 800dd44:	4628      	mov	r0, r5
 800dd46:	9205      	str	r2, [sp, #20]
 800dd48:	47b8      	blx	r7
 800dd4a:	3001      	adds	r0, #1
 800dd4c:	f43f ae97 	beq.w	800da7e <_printf_float+0xc2>
 800dd50:	9a05      	ldr	r2, [sp, #20]
 800dd52:	f10b 0b01 	add.w	fp, fp, #1
 800dd56:	e7b9      	b.n	800dccc <_printf_float+0x310>
 800dd58:	ee18 3a10 	vmov	r3, s16
 800dd5c:	4652      	mov	r2, sl
 800dd5e:	4631      	mov	r1, r6
 800dd60:	4628      	mov	r0, r5
 800dd62:	47b8      	blx	r7
 800dd64:	3001      	adds	r0, #1
 800dd66:	d1be      	bne.n	800dce6 <_printf_float+0x32a>
 800dd68:	e689      	b.n	800da7e <_printf_float+0xc2>
 800dd6a:	9a05      	ldr	r2, [sp, #20]
 800dd6c:	464b      	mov	r3, r9
 800dd6e:	4442      	add	r2, r8
 800dd70:	4631      	mov	r1, r6
 800dd72:	4628      	mov	r0, r5
 800dd74:	47b8      	blx	r7
 800dd76:	3001      	adds	r0, #1
 800dd78:	d1c1      	bne.n	800dcfe <_printf_float+0x342>
 800dd7a:	e680      	b.n	800da7e <_printf_float+0xc2>
 800dd7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dd7e:	2a01      	cmp	r2, #1
 800dd80:	dc01      	bgt.n	800dd86 <_printf_float+0x3ca>
 800dd82:	07db      	lsls	r3, r3, #31
 800dd84:	d538      	bpl.n	800ddf8 <_printf_float+0x43c>
 800dd86:	2301      	movs	r3, #1
 800dd88:	4642      	mov	r2, r8
 800dd8a:	4631      	mov	r1, r6
 800dd8c:	4628      	mov	r0, r5
 800dd8e:	47b8      	blx	r7
 800dd90:	3001      	adds	r0, #1
 800dd92:	f43f ae74 	beq.w	800da7e <_printf_float+0xc2>
 800dd96:	ee18 3a10 	vmov	r3, s16
 800dd9a:	4652      	mov	r2, sl
 800dd9c:	4631      	mov	r1, r6
 800dd9e:	4628      	mov	r0, r5
 800dda0:	47b8      	blx	r7
 800dda2:	3001      	adds	r0, #1
 800dda4:	f43f ae6b 	beq.w	800da7e <_printf_float+0xc2>
 800dda8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ddac:	2200      	movs	r2, #0
 800ddae:	2300      	movs	r3, #0
 800ddb0:	f7f2 fe8a 	bl	8000ac8 <__aeabi_dcmpeq>
 800ddb4:	b9d8      	cbnz	r0, 800ddee <_printf_float+0x432>
 800ddb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ddb8:	f108 0201 	add.w	r2, r8, #1
 800ddbc:	3b01      	subs	r3, #1
 800ddbe:	4631      	mov	r1, r6
 800ddc0:	4628      	mov	r0, r5
 800ddc2:	47b8      	blx	r7
 800ddc4:	3001      	adds	r0, #1
 800ddc6:	d10e      	bne.n	800dde6 <_printf_float+0x42a>
 800ddc8:	e659      	b.n	800da7e <_printf_float+0xc2>
 800ddca:	2301      	movs	r3, #1
 800ddcc:	4652      	mov	r2, sl
 800ddce:	4631      	mov	r1, r6
 800ddd0:	4628      	mov	r0, r5
 800ddd2:	47b8      	blx	r7
 800ddd4:	3001      	adds	r0, #1
 800ddd6:	f43f ae52 	beq.w	800da7e <_printf_float+0xc2>
 800ddda:	f108 0801 	add.w	r8, r8, #1
 800ddde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dde0:	3b01      	subs	r3, #1
 800dde2:	4543      	cmp	r3, r8
 800dde4:	dcf1      	bgt.n	800ddca <_printf_float+0x40e>
 800dde6:	464b      	mov	r3, r9
 800dde8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ddec:	e6dc      	b.n	800dba8 <_printf_float+0x1ec>
 800ddee:	f04f 0800 	mov.w	r8, #0
 800ddf2:	f104 0a1a 	add.w	sl, r4, #26
 800ddf6:	e7f2      	b.n	800ddde <_printf_float+0x422>
 800ddf8:	2301      	movs	r3, #1
 800ddfa:	4642      	mov	r2, r8
 800ddfc:	e7df      	b.n	800ddbe <_printf_float+0x402>
 800ddfe:	2301      	movs	r3, #1
 800de00:	464a      	mov	r2, r9
 800de02:	4631      	mov	r1, r6
 800de04:	4628      	mov	r0, r5
 800de06:	47b8      	blx	r7
 800de08:	3001      	adds	r0, #1
 800de0a:	f43f ae38 	beq.w	800da7e <_printf_float+0xc2>
 800de0e:	f108 0801 	add.w	r8, r8, #1
 800de12:	68e3      	ldr	r3, [r4, #12]
 800de14:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800de16:	1a5b      	subs	r3, r3, r1
 800de18:	4543      	cmp	r3, r8
 800de1a:	dcf0      	bgt.n	800ddfe <_printf_float+0x442>
 800de1c:	e6fa      	b.n	800dc14 <_printf_float+0x258>
 800de1e:	f04f 0800 	mov.w	r8, #0
 800de22:	f104 0919 	add.w	r9, r4, #25
 800de26:	e7f4      	b.n	800de12 <_printf_float+0x456>

0800de28 <_printf_common>:
 800de28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de2c:	4616      	mov	r6, r2
 800de2e:	4699      	mov	r9, r3
 800de30:	688a      	ldr	r2, [r1, #8]
 800de32:	690b      	ldr	r3, [r1, #16]
 800de34:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800de38:	4293      	cmp	r3, r2
 800de3a:	bfb8      	it	lt
 800de3c:	4613      	movlt	r3, r2
 800de3e:	6033      	str	r3, [r6, #0]
 800de40:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800de44:	4607      	mov	r7, r0
 800de46:	460c      	mov	r4, r1
 800de48:	b10a      	cbz	r2, 800de4e <_printf_common+0x26>
 800de4a:	3301      	adds	r3, #1
 800de4c:	6033      	str	r3, [r6, #0]
 800de4e:	6823      	ldr	r3, [r4, #0]
 800de50:	0699      	lsls	r1, r3, #26
 800de52:	bf42      	ittt	mi
 800de54:	6833      	ldrmi	r3, [r6, #0]
 800de56:	3302      	addmi	r3, #2
 800de58:	6033      	strmi	r3, [r6, #0]
 800de5a:	6825      	ldr	r5, [r4, #0]
 800de5c:	f015 0506 	ands.w	r5, r5, #6
 800de60:	d106      	bne.n	800de70 <_printf_common+0x48>
 800de62:	f104 0a19 	add.w	sl, r4, #25
 800de66:	68e3      	ldr	r3, [r4, #12]
 800de68:	6832      	ldr	r2, [r6, #0]
 800de6a:	1a9b      	subs	r3, r3, r2
 800de6c:	42ab      	cmp	r3, r5
 800de6e:	dc26      	bgt.n	800debe <_printf_common+0x96>
 800de70:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800de74:	1e13      	subs	r3, r2, #0
 800de76:	6822      	ldr	r2, [r4, #0]
 800de78:	bf18      	it	ne
 800de7a:	2301      	movne	r3, #1
 800de7c:	0692      	lsls	r2, r2, #26
 800de7e:	d42b      	bmi.n	800ded8 <_printf_common+0xb0>
 800de80:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800de84:	4649      	mov	r1, r9
 800de86:	4638      	mov	r0, r7
 800de88:	47c0      	blx	r8
 800de8a:	3001      	adds	r0, #1
 800de8c:	d01e      	beq.n	800decc <_printf_common+0xa4>
 800de8e:	6823      	ldr	r3, [r4, #0]
 800de90:	68e5      	ldr	r5, [r4, #12]
 800de92:	6832      	ldr	r2, [r6, #0]
 800de94:	f003 0306 	and.w	r3, r3, #6
 800de98:	2b04      	cmp	r3, #4
 800de9a:	bf08      	it	eq
 800de9c:	1aad      	subeq	r5, r5, r2
 800de9e:	68a3      	ldr	r3, [r4, #8]
 800dea0:	6922      	ldr	r2, [r4, #16]
 800dea2:	bf0c      	ite	eq
 800dea4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dea8:	2500      	movne	r5, #0
 800deaa:	4293      	cmp	r3, r2
 800deac:	bfc4      	itt	gt
 800deae:	1a9b      	subgt	r3, r3, r2
 800deb0:	18ed      	addgt	r5, r5, r3
 800deb2:	2600      	movs	r6, #0
 800deb4:	341a      	adds	r4, #26
 800deb6:	42b5      	cmp	r5, r6
 800deb8:	d11a      	bne.n	800def0 <_printf_common+0xc8>
 800deba:	2000      	movs	r0, #0
 800debc:	e008      	b.n	800ded0 <_printf_common+0xa8>
 800debe:	2301      	movs	r3, #1
 800dec0:	4652      	mov	r2, sl
 800dec2:	4649      	mov	r1, r9
 800dec4:	4638      	mov	r0, r7
 800dec6:	47c0      	blx	r8
 800dec8:	3001      	adds	r0, #1
 800deca:	d103      	bne.n	800ded4 <_printf_common+0xac>
 800decc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ded0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ded4:	3501      	adds	r5, #1
 800ded6:	e7c6      	b.n	800de66 <_printf_common+0x3e>
 800ded8:	18e1      	adds	r1, r4, r3
 800deda:	1c5a      	adds	r2, r3, #1
 800dedc:	2030      	movs	r0, #48	; 0x30
 800dede:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800dee2:	4422      	add	r2, r4
 800dee4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800dee8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800deec:	3302      	adds	r3, #2
 800deee:	e7c7      	b.n	800de80 <_printf_common+0x58>
 800def0:	2301      	movs	r3, #1
 800def2:	4622      	mov	r2, r4
 800def4:	4649      	mov	r1, r9
 800def6:	4638      	mov	r0, r7
 800def8:	47c0      	blx	r8
 800defa:	3001      	adds	r0, #1
 800defc:	d0e6      	beq.n	800decc <_printf_common+0xa4>
 800defe:	3601      	adds	r6, #1
 800df00:	e7d9      	b.n	800deb6 <_printf_common+0x8e>
	...

0800df04 <_printf_i>:
 800df04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800df08:	7e0f      	ldrb	r7, [r1, #24]
 800df0a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800df0c:	2f78      	cmp	r7, #120	; 0x78
 800df0e:	4691      	mov	r9, r2
 800df10:	4680      	mov	r8, r0
 800df12:	460c      	mov	r4, r1
 800df14:	469a      	mov	sl, r3
 800df16:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800df1a:	d807      	bhi.n	800df2c <_printf_i+0x28>
 800df1c:	2f62      	cmp	r7, #98	; 0x62
 800df1e:	d80a      	bhi.n	800df36 <_printf_i+0x32>
 800df20:	2f00      	cmp	r7, #0
 800df22:	f000 80d8 	beq.w	800e0d6 <_printf_i+0x1d2>
 800df26:	2f58      	cmp	r7, #88	; 0x58
 800df28:	f000 80a3 	beq.w	800e072 <_printf_i+0x16e>
 800df2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800df30:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800df34:	e03a      	b.n	800dfac <_printf_i+0xa8>
 800df36:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800df3a:	2b15      	cmp	r3, #21
 800df3c:	d8f6      	bhi.n	800df2c <_printf_i+0x28>
 800df3e:	a101      	add	r1, pc, #4	; (adr r1, 800df44 <_printf_i+0x40>)
 800df40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800df44:	0800df9d 	.word	0x0800df9d
 800df48:	0800dfb1 	.word	0x0800dfb1
 800df4c:	0800df2d 	.word	0x0800df2d
 800df50:	0800df2d 	.word	0x0800df2d
 800df54:	0800df2d 	.word	0x0800df2d
 800df58:	0800df2d 	.word	0x0800df2d
 800df5c:	0800dfb1 	.word	0x0800dfb1
 800df60:	0800df2d 	.word	0x0800df2d
 800df64:	0800df2d 	.word	0x0800df2d
 800df68:	0800df2d 	.word	0x0800df2d
 800df6c:	0800df2d 	.word	0x0800df2d
 800df70:	0800e0bd 	.word	0x0800e0bd
 800df74:	0800dfe1 	.word	0x0800dfe1
 800df78:	0800e09f 	.word	0x0800e09f
 800df7c:	0800df2d 	.word	0x0800df2d
 800df80:	0800df2d 	.word	0x0800df2d
 800df84:	0800e0df 	.word	0x0800e0df
 800df88:	0800df2d 	.word	0x0800df2d
 800df8c:	0800dfe1 	.word	0x0800dfe1
 800df90:	0800df2d 	.word	0x0800df2d
 800df94:	0800df2d 	.word	0x0800df2d
 800df98:	0800e0a7 	.word	0x0800e0a7
 800df9c:	682b      	ldr	r3, [r5, #0]
 800df9e:	1d1a      	adds	r2, r3, #4
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	602a      	str	r2, [r5, #0]
 800dfa4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dfa8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800dfac:	2301      	movs	r3, #1
 800dfae:	e0a3      	b.n	800e0f8 <_printf_i+0x1f4>
 800dfb0:	6820      	ldr	r0, [r4, #0]
 800dfb2:	6829      	ldr	r1, [r5, #0]
 800dfb4:	0606      	lsls	r6, r0, #24
 800dfb6:	f101 0304 	add.w	r3, r1, #4
 800dfba:	d50a      	bpl.n	800dfd2 <_printf_i+0xce>
 800dfbc:	680e      	ldr	r6, [r1, #0]
 800dfbe:	602b      	str	r3, [r5, #0]
 800dfc0:	2e00      	cmp	r6, #0
 800dfc2:	da03      	bge.n	800dfcc <_printf_i+0xc8>
 800dfc4:	232d      	movs	r3, #45	; 0x2d
 800dfc6:	4276      	negs	r6, r6
 800dfc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dfcc:	485e      	ldr	r0, [pc, #376]	; (800e148 <_printf_i+0x244>)
 800dfce:	230a      	movs	r3, #10
 800dfd0:	e019      	b.n	800e006 <_printf_i+0x102>
 800dfd2:	680e      	ldr	r6, [r1, #0]
 800dfd4:	602b      	str	r3, [r5, #0]
 800dfd6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800dfda:	bf18      	it	ne
 800dfdc:	b236      	sxthne	r6, r6
 800dfde:	e7ef      	b.n	800dfc0 <_printf_i+0xbc>
 800dfe0:	682b      	ldr	r3, [r5, #0]
 800dfe2:	6820      	ldr	r0, [r4, #0]
 800dfe4:	1d19      	adds	r1, r3, #4
 800dfe6:	6029      	str	r1, [r5, #0]
 800dfe8:	0601      	lsls	r1, r0, #24
 800dfea:	d501      	bpl.n	800dff0 <_printf_i+0xec>
 800dfec:	681e      	ldr	r6, [r3, #0]
 800dfee:	e002      	b.n	800dff6 <_printf_i+0xf2>
 800dff0:	0646      	lsls	r6, r0, #25
 800dff2:	d5fb      	bpl.n	800dfec <_printf_i+0xe8>
 800dff4:	881e      	ldrh	r6, [r3, #0]
 800dff6:	4854      	ldr	r0, [pc, #336]	; (800e148 <_printf_i+0x244>)
 800dff8:	2f6f      	cmp	r7, #111	; 0x6f
 800dffa:	bf0c      	ite	eq
 800dffc:	2308      	moveq	r3, #8
 800dffe:	230a      	movne	r3, #10
 800e000:	2100      	movs	r1, #0
 800e002:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e006:	6865      	ldr	r5, [r4, #4]
 800e008:	60a5      	str	r5, [r4, #8]
 800e00a:	2d00      	cmp	r5, #0
 800e00c:	bfa2      	ittt	ge
 800e00e:	6821      	ldrge	r1, [r4, #0]
 800e010:	f021 0104 	bicge.w	r1, r1, #4
 800e014:	6021      	strge	r1, [r4, #0]
 800e016:	b90e      	cbnz	r6, 800e01c <_printf_i+0x118>
 800e018:	2d00      	cmp	r5, #0
 800e01a:	d04d      	beq.n	800e0b8 <_printf_i+0x1b4>
 800e01c:	4615      	mov	r5, r2
 800e01e:	fbb6 f1f3 	udiv	r1, r6, r3
 800e022:	fb03 6711 	mls	r7, r3, r1, r6
 800e026:	5dc7      	ldrb	r7, [r0, r7]
 800e028:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e02c:	4637      	mov	r7, r6
 800e02e:	42bb      	cmp	r3, r7
 800e030:	460e      	mov	r6, r1
 800e032:	d9f4      	bls.n	800e01e <_printf_i+0x11a>
 800e034:	2b08      	cmp	r3, #8
 800e036:	d10b      	bne.n	800e050 <_printf_i+0x14c>
 800e038:	6823      	ldr	r3, [r4, #0]
 800e03a:	07de      	lsls	r6, r3, #31
 800e03c:	d508      	bpl.n	800e050 <_printf_i+0x14c>
 800e03e:	6923      	ldr	r3, [r4, #16]
 800e040:	6861      	ldr	r1, [r4, #4]
 800e042:	4299      	cmp	r1, r3
 800e044:	bfde      	ittt	le
 800e046:	2330      	movle	r3, #48	; 0x30
 800e048:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e04c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800e050:	1b52      	subs	r2, r2, r5
 800e052:	6122      	str	r2, [r4, #16]
 800e054:	f8cd a000 	str.w	sl, [sp]
 800e058:	464b      	mov	r3, r9
 800e05a:	aa03      	add	r2, sp, #12
 800e05c:	4621      	mov	r1, r4
 800e05e:	4640      	mov	r0, r8
 800e060:	f7ff fee2 	bl	800de28 <_printf_common>
 800e064:	3001      	adds	r0, #1
 800e066:	d14c      	bne.n	800e102 <_printf_i+0x1fe>
 800e068:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e06c:	b004      	add	sp, #16
 800e06e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e072:	4835      	ldr	r0, [pc, #212]	; (800e148 <_printf_i+0x244>)
 800e074:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e078:	6829      	ldr	r1, [r5, #0]
 800e07a:	6823      	ldr	r3, [r4, #0]
 800e07c:	f851 6b04 	ldr.w	r6, [r1], #4
 800e080:	6029      	str	r1, [r5, #0]
 800e082:	061d      	lsls	r5, r3, #24
 800e084:	d514      	bpl.n	800e0b0 <_printf_i+0x1ac>
 800e086:	07df      	lsls	r7, r3, #31
 800e088:	bf44      	itt	mi
 800e08a:	f043 0320 	orrmi.w	r3, r3, #32
 800e08e:	6023      	strmi	r3, [r4, #0]
 800e090:	b91e      	cbnz	r6, 800e09a <_printf_i+0x196>
 800e092:	6823      	ldr	r3, [r4, #0]
 800e094:	f023 0320 	bic.w	r3, r3, #32
 800e098:	6023      	str	r3, [r4, #0]
 800e09a:	2310      	movs	r3, #16
 800e09c:	e7b0      	b.n	800e000 <_printf_i+0xfc>
 800e09e:	6823      	ldr	r3, [r4, #0]
 800e0a0:	f043 0320 	orr.w	r3, r3, #32
 800e0a4:	6023      	str	r3, [r4, #0]
 800e0a6:	2378      	movs	r3, #120	; 0x78
 800e0a8:	4828      	ldr	r0, [pc, #160]	; (800e14c <_printf_i+0x248>)
 800e0aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e0ae:	e7e3      	b.n	800e078 <_printf_i+0x174>
 800e0b0:	0659      	lsls	r1, r3, #25
 800e0b2:	bf48      	it	mi
 800e0b4:	b2b6      	uxthmi	r6, r6
 800e0b6:	e7e6      	b.n	800e086 <_printf_i+0x182>
 800e0b8:	4615      	mov	r5, r2
 800e0ba:	e7bb      	b.n	800e034 <_printf_i+0x130>
 800e0bc:	682b      	ldr	r3, [r5, #0]
 800e0be:	6826      	ldr	r6, [r4, #0]
 800e0c0:	6961      	ldr	r1, [r4, #20]
 800e0c2:	1d18      	adds	r0, r3, #4
 800e0c4:	6028      	str	r0, [r5, #0]
 800e0c6:	0635      	lsls	r5, r6, #24
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	d501      	bpl.n	800e0d0 <_printf_i+0x1cc>
 800e0cc:	6019      	str	r1, [r3, #0]
 800e0ce:	e002      	b.n	800e0d6 <_printf_i+0x1d2>
 800e0d0:	0670      	lsls	r0, r6, #25
 800e0d2:	d5fb      	bpl.n	800e0cc <_printf_i+0x1c8>
 800e0d4:	8019      	strh	r1, [r3, #0]
 800e0d6:	2300      	movs	r3, #0
 800e0d8:	6123      	str	r3, [r4, #16]
 800e0da:	4615      	mov	r5, r2
 800e0dc:	e7ba      	b.n	800e054 <_printf_i+0x150>
 800e0de:	682b      	ldr	r3, [r5, #0]
 800e0e0:	1d1a      	adds	r2, r3, #4
 800e0e2:	602a      	str	r2, [r5, #0]
 800e0e4:	681d      	ldr	r5, [r3, #0]
 800e0e6:	6862      	ldr	r2, [r4, #4]
 800e0e8:	2100      	movs	r1, #0
 800e0ea:	4628      	mov	r0, r5
 800e0ec:	f7f2 f878 	bl	80001e0 <memchr>
 800e0f0:	b108      	cbz	r0, 800e0f6 <_printf_i+0x1f2>
 800e0f2:	1b40      	subs	r0, r0, r5
 800e0f4:	6060      	str	r0, [r4, #4]
 800e0f6:	6863      	ldr	r3, [r4, #4]
 800e0f8:	6123      	str	r3, [r4, #16]
 800e0fa:	2300      	movs	r3, #0
 800e0fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e100:	e7a8      	b.n	800e054 <_printf_i+0x150>
 800e102:	6923      	ldr	r3, [r4, #16]
 800e104:	462a      	mov	r2, r5
 800e106:	4649      	mov	r1, r9
 800e108:	4640      	mov	r0, r8
 800e10a:	47d0      	blx	sl
 800e10c:	3001      	adds	r0, #1
 800e10e:	d0ab      	beq.n	800e068 <_printf_i+0x164>
 800e110:	6823      	ldr	r3, [r4, #0]
 800e112:	079b      	lsls	r3, r3, #30
 800e114:	d413      	bmi.n	800e13e <_printf_i+0x23a>
 800e116:	68e0      	ldr	r0, [r4, #12]
 800e118:	9b03      	ldr	r3, [sp, #12]
 800e11a:	4298      	cmp	r0, r3
 800e11c:	bfb8      	it	lt
 800e11e:	4618      	movlt	r0, r3
 800e120:	e7a4      	b.n	800e06c <_printf_i+0x168>
 800e122:	2301      	movs	r3, #1
 800e124:	4632      	mov	r2, r6
 800e126:	4649      	mov	r1, r9
 800e128:	4640      	mov	r0, r8
 800e12a:	47d0      	blx	sl
 800e12c:	3001      	adds	r0, #1
 800e12e:	d09b      	beq.n	800e068 <_printf_i+0x164>
 800e130:	3501      	adds	r5, #1
 800e132:	68e3      	ldr	r3, [r4, #12]
 800e134:	9903      	ldr	r1, [sp, #12]
 800e136:	1a5b      	subs	r3, r3, r1
 800e138:	42ab      	cmp	r3, r5
 800e13a:	dcf2      	bgt.n	800e122 <_printf_i+0x21e>
 800e13c:	e7eb      	b.n	800e116 <_printf_i+0x212>
 800e13e:	2500      	movs	r5, #0
 800e140:	f104 0619 	add.w	r6, r4, #25
 800e144:	e7f5      	b.n	800e132 <_printf_i+0x22e>
 800e146:	bf00      	nop
 800e148:	08012f9a 	.word	0x08012f9a
 800e14c:	08012fab 	.word	0x08012fab

0800e150 <siprintf>:
 800e150:	b40e      	push	{r1, r2, r3}
 800e152:	b500      	push	{lr}
 800e154:	b09c      	sub	sp, #112	; 0x70
 800e156:	ab1d      	add	r3, sp, #116	; 0x74
 800e158:	9002      	str	r0, [sp, #8]
 800e15a:	9006      	str	r0, [sp, #24]
 800e15c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e160:	4809      	ldr	r0, [pc, #36]	; (800e188 <siprintf+0x38>)
 800e162:	9107      	str	r1, [sp, #28]
 800e164:	9104      	str	r1, [sp, #16]
 800e166:	4909      	ldr	r1, [pc, #36]	; (800e18c <siprintf+0x3c>)
 800e168:	f853 2b04 	ldr.w	r2, [r3], #4
 800e16c:	9105      	str	r1, [sp, #20]
 800e16e:	6800      	ldr	r0, [r0, #0]
 800e170:	9301      	str	r3, [sp, #4]
 800e172:	a902      	add	r1, sp, #8
 800e174:	f002 ff58 	bl	8011028 <_svfiprintf_r>
 800e178:	9b02      	ldr	r3, [sp, #8]
 800e17a:	2200      	movs	r2, #0
 800e17c:	701a      	strb	r2, [r3, #0]
 800e17e:	b01c      	add	sp, #112	; 0x70
 800e180:	f85d eb04 	ldr.w	lr, [sp], #4
 800e184:	b003      	add	sp, #12
 800e186:	4770      	bx	lr
 800e188:	200001f0 	.word	0x200001f0
 800e18c:	ffff0208 	.word	0xffff0208

0800e190 <strchr>:
 800e190:	b2c9      	uxtb	r1, r1
 800e192:	4603      	mov	r3, r0
 800e194:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e198:	b11a      	cbz	r2, 800e1a2 <strchr+0x12>
 800e19a:	428a      	cmp	r2, r1
 800e19c:	d1f9      	bne.n	800e192 <strchr+0x2>
 800e19e:	4618      	mov	r0, r3
 800e1a0:	4770      	bx	lr
 800e1a2:	2900      	cmp	r1, #0
 800e1a4:	bf18      	it	ne
 800e1a6:	2300      	movne	r3, #0
 800e1a8:	e7f9      	b.n	800e19e <strchr+0xe>

0800e1aa <strncmp>:
 800e1aa:	b510      	push	{r4, lr}
 800e1ac:	b17a      	cbz	r2, 800e1ce <strncmp+0x24>
 800e1ae:	4603      	mov	r3, r0
 800e1b0:	3901      	subs	r1, #1
 800e1b2:	1884      	adds	r4, r0, r2
 800e1b4:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e1b8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800e1bc:	4290      	cmp	r0, r2
 800e1be:	d101      	bne.n	800e1c4 <strncmp+0x1a>
 800e1c0:	42a3      	cmp	r3, r4
 800e1c2:	d101      	bne.n	800e1c8 <strncmp+0x1e>
 800e1c4:	1a80      	subs	r0, r0, r2
 800e1c6:	bd10      	pop	{r4, pc}
 800e1c8:	2800      	cmp	r0, #0
 800e1ca:	d1f3      	bne.n	800e1b4 <strncmp+0xa>
 800e1cc:	e7fa      	b.n	800e1c4 <strncmp+0x1a>
 800e1ce:	4610      	mov	r0, r2
 800e1d0:	e7f9      	b.n	800e1c6 <strncmp+0x1c>

0800e1d2 <strstr>:
 800e1d2:	780a      	ldrb	r2, [r1, #0]
 800e1d4:	b570      	push	{r4, r5, r6, lr}
 800e1d6:	b96a      	cbnz	r2, 800e1f4 <strstr+0x22>
 800e1d8:	bd70      	pop	{r4, r5, r6, pc}
 800e1da:	429a      	cmp	r2, r3
 800e1dc:	d109      	bne.n	800e1f2 <strstr+0x20>
 800e1de:	460c      	mov	r4, r1
 800e1e0:	4605      	mov	r5, r0
 800e1e2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d0f6      	beq.n	800e1d8 <strstr+0x6>
 800e1ea:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800e1ee:	429e      	cmp	r6, r3
 800e1f0:	d0f7      	beq.n	800e1e2 <strstr+0x10>
 800e1f2:	3001      	adds	r0, #1
 800e1f4:	7803      	ldrb	r3, [r0, #0]
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d1ef      	bne.n	800e1da <strstr+0x8>
 800e1fa:	4618      	mov	r0, r3
 800e1fc:	e7ec      	b.n	800e1d8 <strstr+0x6>

0800e1fe <sulp>:
 800e1fe:	b570      	push	{r4, r5, r6, lr}
 800e200:	4604      	mov	r4, r0
 800e202:	460d      	mov	r5, r1
 800e204:	ec45 4b10 	vmov	d0, r4, r5
 800e208:	4616      	mov	r6, r2
 800e20a:	f002 fc6b 	bl	8010ae4 <__ulp>
 800e20e:	ec51 0b10 	vmov	r0, r1, d0
 800e212:	b17e      	cbz	r6, 800e234 <sulp+0x36>
 800e214:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e218:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	dd09      	ble.n	800e234 <sulp+0x36>
 800e220:	051b      	lsls	r3, r3, #20
 800e222:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800e226:	2400      	movs	r4, #0
 800e228:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800e22c:	4622      	mov	r2, r4
 800e22e:	462b      	mov	r3, r5
 800e230:	f7f2 f9e2 	bl	80005f8 <__aeabi_dmul>
 800e234:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e238 <_strtod_l>:
 800e238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e23c:	ed2d 8b02 	vpush	{d8}
 800e240:	b09d      	sub	sp, #116	; 0x74
 800e242:	461f      	mov	r7, r3
 800e244:	2300      	movs	r3, #0
 800e246:	9318      	str	r3, [sp, #96]	; 0x60
 800e248:	4ba2      	ldr	r3, [pc, #648]	; (800e4d4 <_strtod_l+0x29c>)
 800e24a:	9213      	str	r2, [sp, #76]	; 0x4c
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	9305      	str	r3, [sp, #20]
 800e250:	4604      	mov	r4, r0
 800e252:	4618      	mov	r0, r3
 800e254:	4688      	mov	r8, r1
 800e256:	f7f1 ffbb 	bl	80001d0 <strlen>
 800e25a:	f04f 0a00 	mov.w	sl, #0
 800e25e:	4605      	mov	r5, r0
 800e260:	f04f 0b00 	mov.w	fp, #0
 800e264:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800e268:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e26a:	781a      	ldrb	r2, [r3, #0]
 800e26c:	2a2b      	cmp	r2, #43	; 0x2b
 800e26e:	d04e      	beq.n	800e30e <_strtod_l+0xd6>
 800e270:	d83b      	bhi.n	800e2ea <_strtod_l+0xb2>
 800e272:	2a0d      	cmp	r2, #13
 800e274:	d834      	bhi.n	800e2e0 <_strtod_l+0xa8>
 800e276:	2a08      	cmp	r2, #8
 800e278:	d834      	bhi.n	800e2e4 <_strtod_l+0xac>
 800e27a:	2a00      	cmp	r2, #0
 800e27c:	d03e      	beq.n	800e2fc <_strtod_l+0xc4>
 800e27e:	2300      	movs	r3, #0
 800e280:	930a      	str	r3, [sp, #40]	; 0x28
 800e282:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800e284:	7833      	ldrb	r3, [r6, #0]
 800e286:	2b30      	cmp	r3, #48	; 0x30
 800e288:	f040 80b0 	bne.w	800e3ec <_strtod_l+0x1b4>
 800e28c:	7873      	ldrb	r3, [r6, #1]
 800e28e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e292:	2b58      	cmp	r3, #88	; 0x58
 800e294:	d168      	bne.n	800e368 <_strtod_l+0x130>
 800e296:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e298:	9301      	str	r3, [sp, #4]
 800e29a:	ab18      	add	r3, sp, #96	; 0x60
 800e29c:	9702      	str	r7, [sp, #8]
 800e29e:	9300      	str	r3, [sp, #0]
 800e2a0:	4a8d      	ldr	r2, [pc, #564]	; (800e4d8 <_strtod_l+0x2a0>)
 800e2a2:	ab19      	add	r3, sp, #100	; 0x64
 800e2a4:	a917      	add	r1, sp, #92	; 0x5c
 800e2a6:	4620      	mov	r0, r4
 800e2a8:	f001 fd80 	bl	800fdac <__gethex>
 800e2ac:	f010 0707 	ands.w	r7, r0, #7
 800e2b0:	4605      	mov	r5, r0
 800e2b2:	d005      	beq.n	800e2c0 <_strtod_l+0x88>
 800e2b4:	2f06      	cmp	r7, #6
 800e2b6:	d12c      	bne.n	800e312 <_strtod_l+0xda>
 800e2b8:	3601      	adds	r6, #1
 800e2ba:	2300      	movs	r3, #0
 800e2bc:	9617      	str	r6, [sp, #92]	; 0x5c
 800e2be:	930a      	str	r3, [sp, #40]	; 0x28
 800e2c0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	f040 8590 	bne.w	800ede8 <_strtod_l+0xbb0>
 800e2c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e2ca:	b1eb      	cbz	r3, 800e308 <_strtod_l+0xd0>
 800e2cc:	4652      	mov	r2, sl
 800e2ce:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800e2d2:	ec43 2b10 	vmov	d0, r2, r3
 800e2d6:	b01d      	add	sp, #116	; 0x74
 800e2d8:	ecbd 8b02 	vpop	{d8}
 800e2dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2e0:	2a20      	cmp	r2, #32
 800e2e2:	d1cc      	bne.n	800e27e <_strtod_l+0x46>
 800e2e4:	3301      	adds	r3, #1
 800e2e6:	9317      	str	r3, [sp, #92]	; 0x5c
 800e2e8:	e7be      	b.n	800e268 <_strtod_l+0x30>
 800e2ea:	2a2d      	cmp	r2, #45	; 0x2d
 800e2ec:	d1c7      	bne.n	800e27e <_strtod_l+0x46>
 800e2ee:	2201      	movs	r2, #1
 800e2f0:	920a      	str	r2, [sp, #40]	; 0x28
 800e2f2:	1c5a      	adds	r2, r3, #1
 800e2f4:	9217      	str	r2, [sp, #92]	; 0x5c
 800e2f6:	785b      	ldrb	r3, [r3, #1]
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d1c2      	bne.n	800e282 <_strtod_l+0x4a>
 800e2fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e2fe:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800e302:	2b00      	cmp	r3, #0
 800e304:	f040 856e 	bne.w	800ede4 <_strtod_l+0xbac>
 800e308:	4652      	mov	r2, sl
 800e30a:	465b      	mov	r3, fp
 800e30c:	e7e1      	b.n	800e2d2 <_strtod_l+0x9a>
 800e30e:	2200      	movs	r2, #0
 800e310:	e7ee      	b.n	800e2f0 <_strtod_l+0xb8>
 800e312:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800e314:	b13a      	cbz	r2, 800e326 <_strtod_l+0xee>
 800e316:	2135      	movs	r1, #53	; 0x35
 800e318:	a81a      	add	r0, sp, #104	; 0x68
 800e31a:	f002 fcee 	bl	8010cfa <__copybits>
 800e31e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e320:	4620      	mov	r0, r4
 800e322:	f002 f8ad 	bl	8010480 <_Bfree>
 800e326:	3f01      	subs	r7, #1
 800e328:	2f04      	cmp	r7, #4
 800e32a:	d806      	bhi.n	800e33a <_strtod_l+0x102>
 800e32c:	e8df f007 	tbb	[pc, r7]
 800e330:	1714030a 	.word	0x1714030a
 800e334:	0a          	.byte	0x0a
 800e335:	00          	.byte	0x00
 800e336:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800e33a:	0728      	lsls	r0, r5, #28
 800e33c:	d5c0      	bpl.n	800e2c0 <_strtod_l+0x88>
 800e33e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800e342:	e7bd      	b.n	800e2c0 <_strtod_l+0x88>
 800e344:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800e348:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800e34a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800e34e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800e352:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800e356:	e7f0      	b.n	800e33a <_strtod_l+0x102>
 800e358:	f8df b180 	ldr.w	fp, [pc, #384]	; 800e4dc <_strtod_l+0x2a4>
 800e35c:	e7ed      	b.n	800e33a <_strtod_l+0x102>
 800e35e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800e362:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800e366:	e7e8      	b.n	800e33a <_strtod_l+0x102>
 800e368:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e36a:	1c5a      	adds	r2, r3, #1
 800e36c:	9217      	str	r2, [sp, #92]	; 0x5c
 800e36e:	785b      	ldrb	r3, [r3, #1]
 800e370:	2b30      	cmp	r3, #48	; 0x30
 800e372:	d0f9      	beq.n	800e368 <_strtod_l+0x130>
 800e374:	2b00      	cmp	r3, #0
 800e376:	d0a3      	beq.n	800e2c0 <_strtod_l+0x88>
 800e378:	2301      	movs	r3, #1
 800e37a:	f04f 0900 	mov.w	r9, #0
 800e37e:	9304      	str	r3, [sp, #16]
 800e380:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e382:	9308      	str	r3, [sp, #32]
 800e384:	f8cd 901c 	str.w	r9, [sp, #28]
 800e388:	464f      	mov	r7, r9
 800e38a:	220a      	movs	r2, #10
 800e38c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800e38e:	7806      	ldrb	r6, [r0, #0]
 800e390:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800e394:	b2d9      	uxtb	r1, r3
 800e396:	2909      	cmp	r1, #9
 800e398:	d92a      	bls.n	800e3f0 <_strtod_l+0x1b8>
 800e39a:	9905      	ldr	r1, [sp, #20]
 800e39c:	462a      	mov	r2, r5
 800e39e:	f7ff ff04 	bl	800e1aa <strncmp>
 800e3a2:	b398      	cbz	r0, 800e40c <_strtod_l+0x1d4>
 800e3a4:	2000      	movs	r0, #0
 800e3a6:	4632      	mov	r2, r6
 800e3a8:	463d      	mov	r5, r7
 800e3aa:	9005      	str	r0, [sp, #20]
 800e3ac:	4603      	mov	r3, r0
 800e3ae:	2a65      	cmp	r2, #101	; 0x65
 800e3b0:	d001      	beq.n	800e3b6 <_strtod_l+0x17e>
 800e3b2:	2a45      	cmp	r2, #69	; 0x45
 800e3b4:	d118      	bne.n	800e3e8 <_strtod_l+0x1b0>
 800e3b6:	b91d      	cbnz	r5, 800e3c0 <_strtod_l+0x188>
 800e3b8:	9a04      	ldr	r2, [sp, #16]
 800e3ba:	4302      	orrs	r2, r0
 800e3bc:	d09e      	beq.n	800e2fc <_strtod_l+0xc4>
 800e3be:	2500      	movs	r5, #0
 800e3c0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800e3c4:	f108 0201 	add.w	r2, r8, #1
 800e3c8:	9217      	str	r2, [sp, #92]	; 0x5c
 800e3ca:	f898 2001 	ldrb.w	r2, [r8, #1]
 800e3ce:	2a2b      	cmp	r2, #43	; 0x2b
 800e3d0:	d075      	beq.n	800e4be <_strtod_l+0x286>
 800e3d2:	2a2d      	cmp	r2, #45	; 0x2d
 800e3d4:	d07b      	beq.n	800e4ce <_strtod_l+0x296>
 800e3d6:	f04f 0c00 	mov.w	ip, #0
 800e3da:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800e3de:	2909      	cmp	r1, #9
 800e3e0:	f240 8082 	bls.w	800e4e8 <_strtod_l+0x2b0>
 800e3e4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800e3e8:	2600      	movs	r6, #0
 800e3ea:	e09d      	b.n	800e528 <_strtod_l+0x2f0>
 800e3ec:	2300      	movs	r3, #0
 800e3ee:	e7c4      	b.n	800e37a <_strtod_l+0x142>
 800e3f0:	2f08      	cmp	r7, #8
 800e3f2:	bfd8      	it	le
 800e3f4:	9907      	ldrle	r1, [sp, #28]
 800e3f6:	f100 0001 	add.w	r0, r0, #1
 800e3fa:	bfda      	itte	le
 800e3fc:	fb02 3301 	mlale	r3, r2, r1, r3
 800e400:	9307      	strle	r3, [sp, #28]
 800e402:	fb02 3909 	mlagt	r9, r2, r9, r3
 800e406:	3701      	adds	r7, #1
 800e408:	9017      	str	r0, [sp, #92]	; 0x5c
 800e40a:	e7bf      	b.n	800e38c <_strtod_l+0x154>
 800e40c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e40e:	195a      	adds	r2, r3, r5
 800e410:	9217      	str	r2, [sp, #92]	; 0x5c
 800e412:	5d5a      	ldrb	r2, [r3, r5]
 800e414:	2f00      	cmp	r7, #0
 800e416:	d037      	beq.n	800e488 <_strtod_l+0x250>
 800e418:	9005      	str	r0, [sp, #20]
 800e41a:	463d      	mov	r5, r7
 800e41c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800e420:	2b09      	cmp	r3, #9
 800e422:	d912      	bls.n	800e44a <_strtod_l+0x212>
 800e424:	2301      	movs	r3, #1
 800e426:	e7c2      	b.n	800e3ae <_strtod_l+0x176>
 800e428:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e42a:	1c5a      	adds	r2, r3, #1
 800e42c:	9217      	str	r2, [sp, #92]	; 0x5c
 800e42e:	785a      	ldrb	r2, [r3, #1]
 800e430:	3001      	adds	r0, #1
 800e432:	2a30      	cmp	r2, #48	; 0x30
 800e434:	d0f8      	beq.n	800e428 <_strtod_l+0x1f0>
 800e436:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800e43a:	2b08      	cmp	r3, #8
 800e43c:	f200 84d9 	bhi.w	800edf2 <_strtod_l+0xbba>
 800e440:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e442:	9005      	str	r0, [sp, #20]
 800e444:	2000      	movs	r0, #0
 800e446:	9308      	str	r3, [sp, #32]
 800e448:	4605      	mov	r5, r0
 800e44a:	3a30      	subs	r2, #48	; 0x30
 800e44c:	f100 0301 	add.w	r3, r0, #1
 800e450:	d014      	beq.n	800e47c <_strtod_l+0x244>
 800e452:	9905      	ldr	r1, [sp, #20]
 800e454:	4419      	add	r1, r3
 800e456:	9105      	str	r1, [sp, #20]
 800e458:	462b      	mov	r3, r5
 800e45a:	eb00 0e05 	add.w	lr, r0, r5
 800e45e:	210a      	movs	r1, #10
 800e460:	4573      	cmp	r3, lr
 800e462:	d113      	bne.n	800e48c <_strtod_l+0x254>
 800e464:	182b      	adds	r3, r5, r0
 800e466:	2b08      	cmp	r3, #8
 800e468:	f105 0501 	add.w	r5, r5, #1
 800e46c:	4405      	add	r5, r0
 800e46e:	dc1c      	bgt.n	800e4aa <_strtod_l+0x272>
 800e470:	9907      	ldr	r1, [sp, #28]
 800e472:	230a      	movs	r3, #10
 800e474:	fb03 2301 	mla	r3, r3, r1, r2
 800e478:	9307      	str	r3, [sp, #28]
 800e47a:	2300      	movs	r3, #0
 800e47c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e47e:	1c51      	adds	r1, r2, #1
 800e480:	9117      	str	r1, [sp, #92]	; 0x5c
 800e482:	7852      	ldrb	r2, [r2, #1]
 800e484:	4618      	mov	r0, r3
 800e486:	e7c9      	b.n	800e41c <_strtod_l+0x1e4>
 800e488:	4638      	mov	r0, r7
 800e48a:	e7d2      	b.n	800e432 <_strtod_l+0x1fa>
 800e48c:	2b08      	cmp	r3, #8
 800e48e:	dc04      	bgt.n	800e49a <_strtod_l+0x262>
 800e490:	9e07      	ldr	r6, [sp, #28]
 800e492:	434e      	muls	r6, r1
 800e494:	9607      	str	r6, [sp, #28]
 800e496:	3301      	adds	r3, #1
 800e498:	e7e2      	b.n	800e460 <_strtod_l+0x228>
 800e49a:	f103 0c01 	add.w	ip, r3, #1
 800e49e:	f1bc 0f10 	cmp.w	ip, #16
 800e4a2:	bfd8      	it	le
 800e4a4:	fb01 f909 	mulle.w	r9, r1, r9
 800e4a8:	e7f5      	b.n	800e496 <_strtod_l+0x25e>
 800e4aa:	2d10      	cmp	r5, #16
 800e4ac:	bfdc      	itt	le
 800e4ae:	230a      	movle	r3, #10
 800e4b0:	fb03 2909 	mlale	r9, r3, r9, r2
 800e4b4:	e7e1      	b.n	800e47a <_strtod_l+0x242>
 800e4b6:	2300      	movs	r3, #0
 800e4b8:	9305      	str	r3, [sp, #20]
 800e4ba:	2301      	movs	r3, #1
 800e4bc:	e77c      	b.n	800e3b8 <_strtod_l+0x180>
 800e4be:	f04f 0c00 	mov.w	ip, #0
 800e4c2:	f108 0202 	add.w	r2, r8, #2
 800e4c6:	9217      	str	r2, [sp, #92]	; 0x5c
 800e4c8:	f898 2002 	ldrb.w	r2, [r8, #2]
 800e4cc:	e785      	b.n	800e3da <_strtod_l+0x1a2>
 800e4ce:	f04f 0c01 	mov.w	ip, #1
 800e4d2:	e7f6      	b.n	800e4c2 <_strtod_l+0x28a>
 800e4d4:	08013108 	.word	0x08013108
 800e4d8:	08012fbc 	.word	0x08012fbc
 800e4dc:	7ff00000 	.word	0x7ff00000
 800e4e0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e4e2:	1c51      	adds	r1, r2, #1
 800e4e4:	9117      	str	r1, [sp, #92]	; 0x5c
 800e4e6:	7852      	ldrb	r2, [r2, #1]
 800e4e8:	2a30      	cmp	r2, #48	; 0x30
 800e4ea:	d0f9      	beq.n	800e4e0 <_strtod_l+0x2a8>
 800e4ec:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800e4f0:	2908      	cmp	r1, #8
 800e4f2:	f63f af79 	bhi.w	800e3e8 <_strtod_l+0x1b0>
 800e4f6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800e4fa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e4fc:	9206      	str	r2, [sp, #24]
 800e4fe:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e500:	1c51      	adds	r1, r2, #1
 800e502:	9117      	str	r1, [sp, #92]	; 0x5c
 800e504:	7852      	ldrb	r2, [r2, #1]
 800e506:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800e50a:	2e09      	cmp	r6, #9
 800e50c:	d937      	bls.n	800e57e <_strtod_l+0x346>
 800e50e:	9e06      	ldr	r6, [sp, #24]
 800e510:	1b89      	subs	r1, r1, r6
 800e512:	2908      	cmp	r1, #8
 800e514:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800e518:	dc02      	bgt.n	800e520 <_strtod_l+0x2e8>
 800e51a:	4576      	cmp	r6, lr
 800e51c:	bfa8      	it	ge
 800e51e:	4676      	movge	r6, lr
 800e520:	f1bc 0f00 	cmp.w	ip, #0
 800e524:	d000      	beq.n	800e528 <_strtod_l+0x2f0>
 800e526:	4276      	negs	r6, r6
 800e528:	2d00      	cmp	r5, #0
 800e52a:	d14d      	bne.n	800e5c8 <_strtod_l+0x390>
 800e52c:	9904      	ldr	r1, [sp, #16]
 800e52e:	4301      	orrs	r1, r0
 800e530:	f47f aec6 	bne.w	800e2c0 <_strtod_l+0x88>
 800e534:	2b00      	cmp	r3, #0
 800e536:	f47f aee1 	bne.w	800e2fc <_strtod_l+0xc4>
 800e53a:	2a69      	cmp	r2, #105	; 0x69
 800e53c:	d027      	beq.n	800e58e <_strtod_l+0x356>
 800e53e:	dc24      	bgt.n	800e58a <_strtod_l+0x352>
 800e540:	2a49      	cmp	r2, #73	; 0x49
 800e542:	d024      	beq.n	800e58e <_strtod_l+0x356>
 800e544:	2a4e      	cmp	r2, #78	; 0x4e
 800e546:	f47f aed9 	bne.w	800e2fc <_strtod_l+0xc4>
 800e54a:	499f      	ldr	r1, [pc, #636]	; (800e7c8 <_strtod_l+0x590>)
 800e54c:	a817      	add	r0, sp, #92	; 0x5c
 800e54e:	f001 fe85 	bl	801025c <__match>
 800e552:	2800      	cmp	r0, #0
 800e554:	f43f aed2 	beq.w	800e2fc <_strtod_l+0xc4>
 800e558:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e55a:	781b      	ldrb	r3, [r3, #0]
 800e55c:	2b28      	cmp	r3, #40	; 0x28
 800e55e:	d12d      	bne.n	800e5bc <_strtod_l+0x384>
 800e560:	499a      	ldr	r1, [pc, #616]	; (800e7cc <_strtod_l+0x594>)
 800e562:	aa1a      	add	r2, sp, #104	; 0x68
 800e564:	a817      	add	r0, sp, #92	; 0x5c
 800e566:	f001 fe8d 	bl	8010284 <__hexnan>
 800e56a:	2805      	cmp	r0, #5
 800e56c:	d126      	bne.n	800e5bc <_strtod_l+0x384>
 800e56e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e570:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800e574:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800e578:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800e57c:	e6a0      	b.n	800e2c0 <_strtod_l+0x88>
 800e57e:	210a      	movs	r1, #10
 800e580:	fb01 2e0e 	mla	lr, r1, lr, r2
 800e584:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800e588:	e7b9      	b.n	800e4fe <_strtod_l+0x2c6>
 800e58a:	2a6e      	cmp	r2, #110	; 0x6e
 800e58c:	e7db      	b.n	800e546 <_strtod_l+0x30e>
 800e58e:	4990      	ldr	r1, [pc, #576]	; (800e7d0 <_strtod_l+0x598>)
 800e590:	a817      	add	r0, sp, #92	; 0x5c
 800e592:	f001 fe63 	bl	801025c <__match>
 800e596:	2800      	cmp	r0, #0
 800e598:	f43f aeb0 	beq.w	800e2fc <_strtod_l+0xc4>
 800e59c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e59e:	498d      	ldr	r1, [pc, #564]	; (800e7d4 <_strtod_l+0x59c>)
 800e5a0:	3b01      	subs	r3, #1
 800e5a2:	a817      	add	r0, sp, #92	; 0x5c
 800e5a4:	9317      	str	r3, [sp, #92]	; 0x5c
 800e5a6:	f001 fe59 	bl	801025c <__match>
 800e5aa:	b910      	cbnz	r0, 800e5b2 <_strtod_l+0x37a>
 800e5ac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e5ae:	3301      	adds	r3, #1
 800e5b0:	9317      	str	r3, [sp, #92]	; 0x5c
 800e5b2:	f8df b230 	ldr.w	fp, [pc, #560]	; 800e7e4 <_strtod_l+0x5ac>
 800e5b6:	f04f 0a00 	mov.w	sl, #0
 800e5ba:	e681      	b.n	800e2c0 <_strtod_l+0x88>
 800e5bc:	4886      	ldr	r0, [pc, #536]	; (800e7d8 <_strtod_l+0x5a0>)
 800e5be:	f002 fe33 	bl	8011228 <nan>
 800e5c2:	ec5b ab10 	vmov	sl, fp, d0
 800e5c6:	e67b      	b.n	800e2c0 <_strtod_l+0x88>
 800e5c8:	9b05      	ldr	r3, [sp, #20]
 800e5ca:	9807      	ldr	r0, [sp, #28]
 800e5cc:	1af3      	subs	r3, r6, r3
 800e5ce:	2f00      	cmp	r7, #0
 800e5d0:	bf08      	it	eq
 800e5d2:	462f      	moveq	r7, r5
 800e5d4:	2d10      	cmp	r5, #16
 800e5d6:	9306      	str	r3, [sp, #24]
 800e5d8:	46a8      	mov	r8, r5
 800e5da:	bfa8      	it	ge
 800e5dc:	f04f 0810 	movge.w	r8, #16
 800e5e0:	f7f1 ff90 	bl	8000504 <__aeabi_ui2d>
 800e5e4:	2d09      	cmp	r5, #9
 800e5e6:	4682      	mov	sl, r0
 800e5e8:	468b      	mov	fp, r1
 800e5ea:	dd13      	ble.n	800e614 <_strtod_l+0x3dc>
 800e5ec:	4b7b      	ldr	r3, [pc, #492]	; (800e7dc <_strtod_l+0x5a4>)
 800e5ee:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800e5f2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800e5f6:	f7f1 ffff 	bl	80005f8 <__aeabi_dmul>
 800e5fa:	4682      	mov	sl, r0
 800e5fc:	4648      	mov	r0, r9
 800e5fe:	468b      	mov	fp, r1
 800e600:	f7f1 ff80 	bl	8000504 <__aeabi_ui2d>
 800e604:	4602      	mov	r2, r0
 800e606:	460b      	mov	r3, r1
 800e608:	4650      	mov	r0, sl
 800e60a:	4659      	mov	r1, fp
 800e60c:	f7f1 fe3e 	bl	800028c <__adddf3>
 800e610:	4682      	mov	sl, r0
 800e612:	468b      	mov	fp, r1
 800e614:	2d0f      	cmp	r5, #15
 800e616:	dc38      	bgt.n	800e68a <_strtod_l+0x452>
 800e618:	9b06      	ldr	r3, [sp, #24]
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	f43f ae50 	beq.w	800e2c0 <_strtod_l+0x88>
 800e620:	dd24      	ble.n	800e66c <_strtod_l+0x434>
 800e622:	2b16      	cmp	r3, #22
 800e624:	dc0b      	bgt.n	800e63e <_strtod_l+0x406>
 800e626:	496d      	ldr	r1, [pc, #436]	; (800e7dc <_strtod_l+0x5a4>)
 800e628:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e62c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e630:	4652      	mov	r2, sl
 800e632:	465b      	mov	r3, fp
 800e634:	f7f1 ffe0 	bl	80005f8 <__aeabi_dmul>
 800e638:	4682      	mov	sl, r0
 800e63a:	468b      	mov	fp, r1
 800e63c:	e640      	b.n	800e2c0 <_strtod_l+0x88>
 800e63e:	9a06      	ldr	r2, [sp, #24]
 800e640:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800e644:	4293      	cmp	r3, r2
 800e646:	db20      	blt.n	800e68a <_strtod_l+0x452>
 800e648:	4c64      	ldr	r4, [pc, #400]	; (800e7dc <_strtod_l+0x5a4>)
 800e64a:	f1c5 050f 	rsb	r5, r5, #15
 800e64e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800e652:	4652      	mov	r2, sl
 800e654:	465b      	mov	r3, fp
 800e656:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e65a:	f7f1 ffcd 	bl	80005f8 <__aeabi_dmul>
 800e65e:	9b06      	ldr	r3, [sp, #24]
 800e660:	1b5d      	subs	r5, r3, r5
 800e662:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800e666:	e9d4 2300 	ldrd	r2, r3, [r4]
 800e66a:	e7e3      	b.n	800e634 <_strtod_l+0x3fc>
 800e66c:	9b06      	ldr	r3, [sp, #24]
 800e66e:	3316      	adds	r3, #22
 800e670:	db0b      	blt.n	800e68a <_strtod_l+0x452>
 800e672:	9b05      	ldr	r3, [sp, #20]
 800e674:	1b9e      	subs	r6, r3, r6
 800e676:	4b59      	ldr	r3, [pc, #356]	; (800e7dc <_strtod_l+0x5a4>)
 800e678:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800e67c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e680:	4650      	mov	r0, sl
 800e682:	4659      	mov	r1, fp
 800e684:	f7f2 f8e2 	bl	800084c <__aeabi_ddiv>
 800e688:	e7d6      	b.n	800e638 <_strtod_l+0x400>
 800e68a:	9b06      	ldr	r3, [sp, #24]
 800e68c:	eba5 0808 	sub.w	r8, r5, r8
 800e690:	4498      	add	r8, r3
 800e692:	f1b8 0f00 	cmp.w	r8, #0
 800e696:	dd74      	ble.n	800e782 <_strtod_l+0x54a>
 800e698:	f018 030f 	ands.w	r3, r8, #15
 800e69c:	d00a      	beq.n	800e6b4 <_strtod_l+0x47c>
 800e69e:	494f      	ldr	r1, [pc, #316]	; (800e7dc <_strtod_l+0x5a4>)
 800e6a0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e6a4:	4652      	mov	r2, sl
 800e6a6:	465b      	mov	r3, fp
 800e6a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e6ac:	f7f1 ffa4 	bl	80005f8 <__aeabi_dmul>
 800e6b0:	4682      	mov	sl, r0
 800e6b2:	468b      	mov	fp, r1
 800e6b4:	f038 080f 	bics.w	r8, r8, #15
 800e6b8:	d04f      	beq.n	800e75a <_strtod_l+0x522>
 800e6ba:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800e6be:	dd22      	ble.n	800e706 <_strtod_l+0x4ce>
 800e6c0:	2500      	movs	r5, #0
 800e6c2:	462e      	mov	r6, r5
 800e6c4:	9507      	str	r5, [sp, #28]
 800e6c6:	9505      	str	r5, [sp, #20]
 800e6c8:	2322      	movs	r3, #34	; 0x22
 800e6ca:	f8df b118 	ldr.w	fp, [pc, #280]	; 800e7e4 <_strtod_l+0x5ac>
 800e6ce:	6023      	str	r3, [r4, #0]
 800e6d0:	f04f 0a00 	mov.w	sl, #0
 800e6d4:	9b07      	ldr	r3, [sp, #28]
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	f43f adf2 	beq.w	800e2c0 <_strtod_l+0x88>
 800e6dc:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e6de:	4620      	mov	r0, r4
 800e6e0:	f001 fece 	bl	8010480 <_Bfree>
 800e6e4:	9905      	ldr	r1, [sp, #20]
 800e6e6:	4620      	mov	r0, r4
 800e6e8:	f001 feca 	bl	8010480 <_Bfree>
 800e6ec:	4631      	mov	r1, r6
 800e6ee:	4620      	mov	r0, r4
 800e6f0:	f001 fec6 	bl	8010480 <_Bfree>
 800e6f4:	9907      	ldr	r1, [sp, #28]
 800e6f6:	4620      	mov	r0, r4
 800e6f8:	f001 fec2 	bl	8010480 <_Bfree>
 800e6fc:	4629      	mov	r1, r5
 800e6fe:	4620      	mov	r0, r4
 800e700:	f001 febe 	bl	8010480 <_Bfree>
 800e704:	e5dc      	b.n	800e2c0 <_strtod_l+0x88>
 800e706:	4b36      	ldr	r3, [pc, #216]	; (800e7e0 <_strtod_l+0x5a8>)
 800e708:	9304      	str	r3, [sp, #16]
 800e70a:	2300      	movs	r3, #0
 800e70c:	ea4f 1828 	mov.w	r8, r8, asr #4
 800e710:	4650      	mov	r0, sl
 800e712:	4659      	mov	r1, fp
 800e714:	4699      	mov	r9, r3
 800e716:	f1b8 0f01 	cmp.w	r8, #1
 800e71a:	dc21      	bgt.n	800e760 <_strtod_l+0x528>
 800e71c:	b10b      	cbz	r3, 800e722 <_strtod_l+0x4ea>
 800e71e:	4682      	mov	sl, r0
 800e720:	468b      	mov	fp, r1
 800e722:	4b2f      	ldr	r3, [pc, #188]	; (800e7e0 <_strtod_l+0x5a8>)
 800e724:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800e728:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800e72c:	4652      	mov	r2, sl
 800e72e:	465b      	mov	r3, fp
 800e730:	e9d9 0100 	ldrd	r0, r1, [r9]
 800e734:	f7f1 ff60 	bl	80005f8 <__aeabi_dmul>
 800e738:	4b2a      	ldr	r3, [pc, #168]	; (800e7e4 <_strtod_l+0x5ac>)
 800e73a:	460a      	mov	r2, r1
 800e73c:	400b      	ands	r3, r1
 800e73e:	492a      	ldr	r1, [pc, #168]	; (800e7e8 <_strtod_l+0x5b0>)
 800e740:	428b      	cmp	r3, r1
 800e742:	4682      	mov	sl, r0
 800e744:	d8bc      	bhi.n	800e6c0 <_strtod_l+0x488>
 800e746:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800e74a:	428b      	cmp	r3, r1
 800e74c:	bf86      	itte	hi
 800e74e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800e7ec <_strtod_l+0x5b4>
 800e752:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 800e756:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800e75a:	2300      	movs	r3, #0
 800e75c:	9304      	str	r3, [sp, #16]
 800e75e:	e084      	b.n	800e86a <_strtod_l+0x632>
 800e760:	f018 0f01 	tst.w	r8, #1
 800e764:	d005      	beq.n	800e772 <_strtod_l+0x53a>
 800e766:	9b04      	ldr	r3, [sp, #16]
 800e768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e76c:	f7f1 ff44 	bl	80005f8 <__aeabi_dmul>
 800e770:	2301      	movs	r3, #1
 800e772:	9a04      	ldr	r2, [sp, #16]
 800e774:	3208      	adds	r2, #8
 800e776:	f109 0901 	add.w	r9, r9, #1
 800e77a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800e77e:	9204      	str	r2, [sp, #16]
 800e780:	e7c9      	b.n	800e716 <_strtod_l+0x4de>
 800e782:	d0ea      	beq.n	800e75a <_strtod_l+0x522>
 800e784:	f1c8 0800 	rsb	r8, r8, #0
 800e788:	f018 020f 	ands.w	r2, r8, #15
 800e78c:	d00a      	beq.n	800e7a4 <_strtod_l+0x56c>
 800e78e:	4b13      	ldr	r3, [pc, #76]	; (800e7dc <_strtod_l+0x5a4>)
 800e790:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e794:	4650      	mov	r0, sl
 800e796:	4659      	mov	r1, fp
 800e798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e79c:	f7f2 f856 	bl	800084c <__aeabi_ddiv>
 800e7a0:	4682      	mov	sl, r0
 800e7a2:	468b      	mov	fp, r1
 800e7a4:	ea5f 1828 	movs.w	r8, r8, asr #4
 800e7a8:	d0d7      	beq.n	800e75a <_strtod_l+0x522>
 800e7aa:	f1b8 0f1f 	cmp.w	r8, #31
 800e7ae:	dd1f      	ble.n	800e7f0 <_strtod_l+0x5b8>
 800e7b0:	2500      	movs	r5, #0
 800e7b2:	462e      	mov	r6, r5
 800e7b4:	9507      	str	r5, [sp, #28]
 800e7b6:	9505      	str	r5, [sp, #20]
 800e7b8:	2322      	movs	r3, #34	; 0x22
 800e7ba:	f04f 0a00 	mov.w	sl, #0
 800e7be:	f04f 0b00 	mov.w	fp, #0
 800e7c2:	6023      	str	r3, [r4, #0]
 800e7c4:	e786      	b.n	800e6d4 <_strtod_l+0x49c>
 800e7c6:	bf00      	nop
 800e7c8:	08012f95 	.word	0x08012f95
 800e7cc:	08012fd0 	.word	0x08012fd0
 800e7d0:	08012f8d 	.word	0x08012f8d
 800e7d4:	08013013 	.word	0x08013013
 800e7d8:	080132c0 	.word	0x080132c0
 800e7dc:	080131a0 	.word	0x080131a0
 800e7e0:	08013178 	.word	0x08013178
 800e7e4:	7ff00000 	.word	0x7ff00000
 800e7e8:	7ca00000 	.word	0x7ca00000
 800e7ec:	7fefffff 	.word	0x7fefffff
 800e7f0:	f018 0310 	ands.w	r3, r8, #16
 800e7f4:	bf18      	it	ne
 800e7f6:	236a      	movne	r3, #106	; 0x6a
 800e7f8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800eba8 <_strtod_l+0x970>
 800e7fc:	9304      	str	r3, [sp, #16]
 800e7fe:	4650      	mov	r0, sl
 800e800:	4659      	mov	r1, fp
 800e802:	2300      	movs	r3, #0
 800e804:	f018 0f01 	tst.w	r8, #1
 800e808:	d004      	beq.n	800e814 <_strtod_l+0x5dc>
 800e80a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800e80e:	f7f1 fef3 	bl	80005f8 <__aeabi_dmul>
 800e812:	2301      	movs	r3, #1
 800e814:	ea5f 0868 	movs.w	r8, r8, asr #1
 800e818:	f109 0908 	add.w	r9, r9, #8
 800e81c:	d1f2      	bne.n	800e804 <_strtod_l+0x5cc>
 800e81e:	b10b      	cbz	r3, 800e824 <_strtod_l+0x5ec>
 800e820:	4682      	mov	sl, r0
 800e822:	468b      	mov	fp, r1
 800e824:	9b04      	ldr	r3, [sp, #16]
 800e826:	b1c3      	cbz	r3, 800e85a <_strtod_l+0x622>
 800e828:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800e82c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800e830:	2b00      	cmp	r3, #0
 800e832:	4659      	mov	r1, fp
 800e834:	dd11      	ble.n	800e85a <_strtod_l+0x622>
 800e836:	2b1f      	cmp	r3, #31
 800e838:	f340 8124 	ble.w	800ea84 <_strtod_l+0x84c>
 800e83c:	2b34      	cmp	r3, #52	; 0x34
 800e83e:	bfde      	ittt	le
 800e840:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800e844:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 800e848:	fa03 f202 	lslle.w	r2, r3, r2
 800e84c:	f04f 0a00 	mov.w	sl, #0
 800e850:	bfcc      	ite	gt
 800e852:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800e856:	ea02 0b01 	andle.w	fp, r2, r1
 800e85a:	2200      	movs	r2, #0
 800e85c:	2300      	movs	r3, #0
 800e85e:	4650      	mov	r0, sl
 800e860:	4659      	mov	r1, fp
 800e862:	f7f2 f931 	bl	8000ac8 <__aeabi_dcmpeq>
 800e866:	2800      	cmp	r0, #0
 800e868:	d1a2      	bne.n	800e7b0 <_strtod_l+0x578>
 800e86a:	9b07      	ldr	r3, [sp, #28]
 800e86c:	9300      	str	r3, [sp, #0]
 800e86e:	9908      	ldr	r1, [sp, #32]
 800e870:	462b      	mov	r3, r5
 800e872:	463a      	mov	r2, r7
 800e874:	4620      	mov	r0, r4
 800e876:	f001 fe6b 	bl	8010550 <__s2b>
 800e87a:	9007      	str	r0, [sp, #28]
 800e87c:	2800      	cmp	r0, #0
 800e87e:	f43f af1f 	beq.w	800e6c0 <_strtod_l+0x488>
 800e882:	9b05      	ldr	r3, [sp, #20]
 800e884:	1b9e      	subs	r6, r3, r6
 800e886:	9b06      	ldr	r3, [sp, #24]
 800e888:	2b00      	cmp	r3, #0
 800e88a:	bfb4      	ite	lt
 800e88c:	4633      	movlt	r3, r6
 800e88e:	2300      	movge	r3, #0
 800e890:	930c      	str	r3, [sp, #48]	; 0x30
 800e892:	9b06      	ldr	r3, [sp, #24]
 800e894:	2500      	movs	r5, #0
 800e896:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e89a:	9312      	str	r3, [sp, #72]	; 0x48
 800e89c:	462e      	mov	r6, r5
 800e89e:	9b07      	ldr	r3, [sp, #28]
 800e8a0:	4620      	mov	r0, r4
 800e8a2:	6859      	ldr	r1, [r3, #4]
 800e8a4:	f001 fdac 	bl	8010400 <_Balloc>
 800e8a8:	9005      	str	r0, [sp, #20]
 800e8aa:	2800      	cmp	r0, #0
 800e8ac:	f43f af0c 	beq.w	800e6c8 <_strtod_l+0x490>
 800e8b0:	9b07      	ldr	r3, [sp, #28]
 800e8b2:	691a      	ldr	r2, [r3, #16]
 800e8b4:	3202      	adds	r2, #2
 800e8b6:	f103 010c 	add.w	r1, r3, #12
 800e8ba:	0092      	lsls	r2, r2, #2
 800e8bc:	300c      	adds	r0, #12
 800e8be:	f7fe ffc7 	bl	800d850 <memcpy>
 800e8c2:	ec4b ab10 	vmov	d0, sl, fp
 800e8c6:	aa1a      	add	r2, sp, #104	; 0x68
 800e8c8:	a919      	add	r1, sp, #100	; 0x64
 800e8ca:	4620      	mov	r0, r4
 800e8cc:	f002 f986 	bl	8010bdc <__d2b>
 800e8d0:	ec4b ab18 	vmov	d8, sl, fp
 800e8d4:	9018      	str	r0, [sp, #96]	; 0x60
 800e8d6:	2800      	cmp	r0, #0
 800e8d8:	f43f aef6 	beq.w	800e6c8 <_strtod_l+0x490>
 800e8dc:	2101      	movs	r1, #1
 800e8de:	4620      	mov	r0, r4
 800e8e0:	f001 fed0 	bl	8010684 <__i2b>
 800e8e4:	4606      	mov	r6, r0
 800e8e6:	2800      	cmp	r0, #0
 800e8e8:	f43f aeee 	beq.w	800e6c8 <_strtod_l+0x490>
 800e8ec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e8ee:	9904      	ldr	r1, [sp, #16]
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	bfab      	itete	ge
 800e8f4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800e8f6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800e8f8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800e8fa:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800e8fe:	bfac      	ite	ge
 800e900:	eb03 0902 	addge.w	r9, r3, r2
 800e904:	1ad7      	sublt	r7, r2, r3
 800e906:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800e908:	eba3 0801 	sub.w	r8, r3, r1
 800e90c:	4490      	add	r8, r2
 800e90e:	4ba1      	ldr	r3, [pc, #644]	; (800eb94 <_strtod_l+0x95c>)
 800e910:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800e914:	4598      	cmp	r8, r3
 800e916:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800e91a:	f280 80c7 	bge.w	800eaac <_strtod_l+0x874>
 800e91e:	eba3 0308 	sub.w	r3, r3, r8
 800e922:	2b1f      	cmp	r3, #31
 800e924:	eba2 0203 	sub.w	r2, r2, r3
 800e928:	f04f 0101 	mov.w	r1, #1
 800e92c:	f300 80b1 	bgt.w	800ea92 <_strtod_l+0x85a>
 800e930:	fa01 f303 	lsl.w	r3, r1, r3
 800e934:	930d      	str	r3, [sp, #52]	; 0x34
 800e936:	2300      	movs	r3, #0
 800e938:	9308      	str	r3, [sp, #32]
 800e93a:	eb09 0802 	add.w	r8, r9, r2
 800e93e:	9b04      	ldr	r3, [sp, #16]
 800e940:	45c1      	cmp	r9, r8
 800e942:	4417      	add	r7, r2
 800e944:	441f      	add	r7, r3
 800e946:	464b      	mov	r3, r9
 800e948:	bfa8      	it	ge
 800e94a:	4643      	movge	r3, r8
 800e94c:	42bb      	cmp	r3, r7
 800e94e:	bfa8      	it	ge
 800e950:	463b      	movge	r3, r7
 800e952:	2b00      	cmp	r3, #0
 800e954:	bfc2      	ittt	gt
 800e956:	eba8 0803 	subgt.w	r8, r8, r3
 800e95a:	1aff      	subgt	r7, r7, r3
 800e95c:	eba9 0903 	subgt.w	r9, r9, r3
 800e960:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e962:	2b00      	cmp	r3, #0
 800e964:	dd17      	ble.n	800e996 <_strtod_l+0x75e>
 800e966:	4631      	mov	r1, r6
 800e968:	461a      	mov	r2, r3
 800e96a:	4620      	mov	r0, r4
 800e96c:	f001 ff4a 	bl	8010804 <__pow5mult>
 800e970:	4606      	mov	r6, r0
 800e972:	2800      	cmp	r0, #0
 800e974:	f43f aea8 	beq.w	800e6c8 <_strtod_l+0x490>
 800e978:	4601      	mov	r1, r0
 800e97a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800e97c:	4620      	mov	r0, r4
 800e97e:	f001 fe97 	bl	80106b0 <__multiply>
 800e982:	900b      	str	r0, [sp, #44]	; 0x2c
 800e984:	2800      	cmp	r0, #0
 800e986:	f43f ae9f 	beq.w	800e6c8 <_strtod_l+0x490>
 800e98a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e98c:	4620      	mov	r0, r4
 800e98e:	f001 fd77 	bl	8010480 <_Bfree>
 800e992:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e994:	9318      	str	r3, [sp, #96]	; 0x60
 800e996:	f1b8 0f00 	cmp.w	r8, #0
 800e99a:	f300 808c 	bgt.w	800eab6 <_strtod_l+0x87e>
 800e99e:	9b06      	ldr	r3, [sp, #24]
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	dd08      	ble.n	800e9b6 <_strtod_l+0x77e>
 800e9a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e9a6:	9905      	ldr	r1, [sp, #20]
 800e9a8:	4620      	mov	r0, r4
 800e9aa:	f001 ff2b 	bl	8010804 <__pow5mult>
 800e9ae:	9005      	str	r0, [sp, #20]
 800e9b0:	2800      	cmp	r0, #0
 800e9b2:	f43f ae89 	beq.w	800e6c8 <_strtod_l+0x490>
 800e9b6:	2f00      	cmp	r7, #0
 800e9b8:	dd08      	ble.n	800e9cc <_strtod_l+0x794>
 800e9ba:	9905      	ldr	r1, [sp, #20]
 800e9bc:	463a      	mov	r2, r7
 800e9be:	4620      	mov	r0, r4
 800e9c0:	f001 ff7a 	bl	80108b8 <__lshift>
 800e9c4:	9005      	str	r0, [sp, #20]
 800e9c6:	2800      	cmp	r0, #0
 800e9c8:	f43f ae7e 	beq.w	800e6c8 <_strtod_l+0x490>
 800e9cc:	f1b9 0f00 	cmp.w	r9, #0
 800e9d0:	dd08      	ble.n	800e9e4 <_strtod_l+0x7ac>
 800e9d2:	4631      	mov	r1, r6
 800e9d4:	464a      	mov	r2, r9
 800e9d6:	4620      	mov	r0, r4
 800e9d8:	f001 ff6e 	bl	80108b8 <__lshift>
 800e9dc:	4606      	mov	r6, r0
 800e9de:	2800      	cmp	r0, #0
 800e9e0:	f43f ae72 	beq.w	800e6c8 <_strtod_l+0x490>
 800e9e4:	9a05      	ldr	r2, [sp, #20]
 800e9e6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e9e8:	4620      	mov	r0, r4
 800e9ea:	f001 fff1 	bl	80109d0 <__mdiff>
 800e9ee:	4605      	mov	r5, r0
 800e9f0:	2800      	cmp	r0, #0
 800e9f2:	f43f ae69 	beq.w	800e6c8 <_strtod_l+0x490>
 800e9f6:	68c3      	ldr	r3, [r0, #12]
 800e9f8:	930b      	str	r3, [sp, #44]	; 0x2c
 800e9fa:	2300      	movs	r3, #0
 800e9fc:	60c3      	str	r3, [r0, #12]
 800e9fe:	4631      	mov	r1, r6
 800ea00:	f001 ffca 	bl	8010998 <__mcmp>
 800ea04:	2800      	cmp	r0, #0
 800ea06:	da60      	bge.n	800eaca <_strtod_l+0x892>
 800ea08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ea0a:	ea53 030a 	orrs.w	r3, r3, sl
 800ea0e:	f040 8082 	bne.w	800eb16 <_strtod_l+0x8de>
 800ea12:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d17d      	bne.n	800eb16 <_strtod_l+0x8de>
 800ea1a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ea1e:	0d1b      	lsrs	r3, r3, #20
 800ea20:	051b      	lsls	r3, r3, #20
 800ea22:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800ea26:	d976      	bls.n	800eb16 <_strtod_l+0x8de>
 800ea28:	696b      	ldr	r3, [r5, #20]
 800ea2a:	b913      	cbnz	r3, 800ea32 <_strtod_l+0x7fa>
 800ea2c:	692b      	ldr	r3, [r5, #16]
 800ea2e:	2b01      	cmp	r3, #1
 800ea30:	dd71      	ble.n	800eb16 <_strtod_l+0x8de>
 800ea32:	4629      	mov	r1, r5
 800ea34:	2201      	movs	r2, #1
 800ea36:	4620      	mov	r0, r4
 800ea38:	f001 ff3e 	bl	80108b8 <__lshift>
 800ea3c:	4631      	mov	r1, r6
 800ea3e:	4605      	mov	r5, r0
 800ea40:	f001 ffaa 	bl	8010998 <__mcmp>
 800ea44:	2800      	cmp	r0, #0
 800ea46:	dd66      	ble.n	800eb16 <_strtod_l+0x8de>
 800ea48:	9904      	ldr	r1, [sp, #16]
 800ea4a:	4a53      	ldr	r2, [pc, #332]	; (800eb98 <_strtod_l+0x960>)
 800ea4c:	465b      	mov	r3, fp
 800ea4e:	2900      	cmp	r1, #0
 800ea50:	f000 8081 	beq.w	800eb56 <_strtod_l+0x91e>
 800ea54:	ea02 010b 	and.w	r1, r2, fp
 800ea58:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800ea5c:	dc7b      	bgt.n	800eb56 <_strtod_l+0x91e>
 800ea5e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800ea62:	f77f aea9 	ble.w	800e7b8 <_strtod_l+0x580>
 800ea66:	4b4d      	ldr	r3, [pc, #308]	; (800eb9c <_strtod_l+0x964>)
 800ea68:	4650      	mov	r0, sl
 800ea6a:	4659      	mov	r1, fp
 800ea6c:	2200      	movs	r2, #0
 800ea6e:	f7f1 fdc3 	bl	80005f8 <__aeabi_dmul>
 800ea72:	460b      	mov	r3, r1
 800ea74:	4303      	orrs	r3, r0
 800ea76:	bf08      	it	eq
 800ea78:	2322      	moveq	r3, #34	; 0x22
 800ea7a:	4682      	mov	sl, r0
 800ea7c:	468b      	mov	fp, r1
 800ea7e:	bf08      	it	eq
 800ea80:	6023      	streq	r3, [r4, #0]
 800ea82:	e62b      	b.n	800e6dc <_strtod_l+0x4a4>
 800ea84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ea88:	fa02 f303 	lsl.w	r3, r2, r3
 800ea8c:	ea03 0a0a 	and.w	sl, r3, sl
 800ea90:	e6e3      	b.n	800e85a <_strtod_l+0x622>
 800ea92:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800ea96:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800ea9a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800ea9e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800eaa2:	fa01 f308 	lsl.w	r3, r1, r8
 800eaa6:	9308      	str	r3, [sp, #32]
 800eaa8:	910d      	str	r1, [sp, #52]	; 0x34
 800eaaa:	e746      	b.n	800e93a <_strtod_l+0x702>
 800eaac:	2300      	movs	r3, #0
 800eaae:	9308      	str	r3, [sp, #32]
 800eab0:	2301      	movs	r3, #1
 800eab2:	930d      	str	r3, [sp, #52]	; 0x34
 800eab4:	e741      	b.n	800e93a <_strtod_l+0x702>
 800eab6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800eab8:	4642      	mov	r2, r8
 800eaba:	4620      	mov	r0, r4
 800eabc:	f001 fefc 	bl	80108b8 <__lshift>
 800eac0:	9018      	str	r0, [sp, #96]	; 0x60
 800eac2:	2800      	cmp	r0, #0
 800eac4:	f47f af6b 	bne.w	800e99e <_strtod_l+0x766>
 800eac8:	e5fe      	b.n	800e6c8 <_strtod_l+0x490>
 800eaca:	465f      	mov	r7, fp
 800eacc:	d16e      	bne.n	800ebac <_strtod_l+0x974>
 800eace:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ead0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ead4:	b342      	cbz	r2, 800eb28 <_strtod_l+0x8f0>
 800ead6:	4a32      	ldr	r2, [pc, #200]	; (800eba0 <_strtod_l+0x968>)
 800ead8:	4293      	cmp	r3, r2
 800eada:	d128      	bne.n	800eb2e <_strtod_l+0x8f6>
 800eadc:	9b04      	ldr	r3, [sp, #16]
 800eade:	4651      	mov	r1, sl
 800eae0:	b1eb      	cbz	r3, 800eb1e <_strtod_l+0x8e6>
 800eae2:	4b2d      	ldr	r3, [pc, #180]	; (800eb98 <_strtod_l+0x960>)
 800eae4:	403b      	ands	r3, r7
 800eae6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800eaea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800eaee:	d819      	bhi.n	800eb24 <_strtod_l+0x8ec>
 800eaf0:	0d1b      	lsrs	r3, r3, #20
 800eaf2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800eaf6:	fa02 f303 	lsl.w	r3, r2, r3
 800eafa:	4299      	cmp	r1, r3
 800eafc:	d117      	bne.n	800eb2e <_strtod_l+0x8f6>
 800eafe:	4b29      	ldr	r3, [pc, #164]	; (800eba4 <_strtod_l+0x96c>)
 800eb00:	429f      	cmp	r7, r3
 800eb02:	d102      	bne.n	800eb0a <_strtod_l+0x8d2>
 800eb04:	3101      	adds	r1, #1
 800eb06:	f43f addf 	beq.w	800e6c8 <_strtod_l+0x490>
 800eb0a:	4b23      	ldr	r3, [pc, #140]	; (800eb98 <_strtod_l+0x960>)
 800eb0c:	403b      	ands	r3, r7
 800eb0e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800eb12:	f04f 0a00 	mov.w	sl, #0
 800eb16:	9b04      	ldr	r3, [sp, #16]
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d1a4      	bne.n	800ea66 <_strtod_l+0x82e>
 800eb1c:	e5de      	b.n	800e6dc <_strtod_l+0x4a4>
 800eb1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800eb22:	e7ea      	b.n	800eafa <_strtod_l+0x8c2>
 800eb24:	4613      	mov	r3, r2
 800eb26:	e7e8      	b.n	800eafa <_strtod_l+0x8c2>
 800eb28:	ea53 030a 	orrs.w	r3, r3, sl
 800eb2c:	d08c      	beq.n	800ea48 <_strtod_l+0x810>
 800eb2e:	9b08      	ldr	r3, [sp, #32]
 800eb30:	b1db      	cbz	r3, 800eb6a <_strtod_l+0x932>
 800eb32:	423b      	tst	r3, r7
 800eb34:	d0ef      	beq.n	800eb16 <_strtod_l+0x8de>
 800eb36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eb38:	9a04      	ldr	r2, [sp, #16]
 800eb3a:	4650      	mov	r0, sl
 800eb3c:	4659      	mov	r1, fp
 800eb3e:	b1c3      	cbz	r3, 800eb72 <_strtod_l+0x93a>
 800eb40:	f7ff fb5d 	bl	800e1fe <sulp>
 800eb44:	4602      	mov	r2, r0
 800eb46:	460b      	mov	r3, r1
 800eb48:	ec51 0b18 	vmov	r0, r1, d8
 800eb4c:	f7f1 fb9e 	bl	800028c <__adddf3>
 800eb50:	4682      	mov	sl, r0
 800eb52:	468b      	mov	fp, r1
 800eb54:	e7df      	b.n	800eb16 <_strtod_l+0x8de>
 800eb56:	4013      	ands	r3, r2
 800eb58:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800eb5c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800eb60:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800eb64:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800eb68:	e7d5      	b.n	800eb16 <_strtod_l+0x8de>
 800eb6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800eb6c:	ea13 0f0a 	tst.w	r3, sl
 800eb70:	e7e0      	b.n	800eb34 <_strtod_l+0x8fc>
 800eb72:	f7ff fb44 	bl	800e1fe <sulp>
 800eb76:	4602      	mov	r2, r0
 800eb78:	460b      	mov	r3, r1
 800eb7a:	ec51 0b18 	vmov	r0, r1, d8
 800eb7e:	f7f1 fb83 	bl	8000288 <__aeabi_dsub>
 800eb82:	2200      	movs	r2, #0
 800eb84:	2300      	movs	r3, #0
 800eb86:	4682      	mov	sl, r0
 800eb88:	468b      	mov	fp, r1
 800eb8a:	f7f1 ff9d 	bl	8000ac8 <__aeabi_dcmpeq>
 800eb8e:	2800      	cmp	r0, #0
 800eb90:	d0c1      	beq.n	800eb16 <_strtod_l+0x8de>
 800eb92:	e611      	b.n	800e7b8 <_strtod_l+0x580>
 800eb94:	fffffc02 	.word	0xfffffc02
 800eb98:	7ff00000 	.word	0x7ff00000
 800eb9c:	39500000 	.word	0x39500000
 800eba0:	000fffff 	.word	0x000fffff
 800eba4:	7fefffff 	.word	0x7fefffff
 800eba8:	08012fe8 	.word	0x08012fe8
 800ebac:	4631      	mov	r1, r6
 800ebae:	4628      	mov	r0, r5
 800ebb0:	f002 f870 	bl	8010c94 <__ratio>
 800ebb4:	ec59 8b10 	vmov	r8, r9, d0
 800ebb8:	ee10 0a10 	vmov	r0, s0
 800ebbc:	2200      	movs	r2, #0
 800ebbe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ebc2:	4649      	mov	r1, r9
 800ebc4:	f7f1 ff94 	bl	8000af0 <__aeabi_dcmple>
 800ebc8:	2800      	cmp	r0, #0
 800ebca:	d07a      	beq.n	800ecc2 <_strtod_l+0xa8a>
 800ebcc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d04a      	beq.n	800ec68 <_strtod_l+0xa30>
 800ebd2:	4b95      	ldr	r3, [pc, #596]	; (800ee28 <_strtod_l+0xbf0>)
 800ebd4:	2200      	movs	r2, #0
 800ebd6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ebda:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800ee28 <_strtod_l+0xbf0>
 800ebde:	f04f 0800 	mov.w	r8, #0
 800ebe2:	4b92      	ldr	r3, [pc, #584]	; (800ee2c <_strtod_l+0xbf4>)
 800ebe4:	403b      	ands	r3, r7
 800ebe6:	930d      	str	r3, [sp, #52]	; 0x34
 800ebe8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ebea:	4b91      	ldr	r3, [pc, #580]	; (800ee30 <_strtod_l+0xbf8>)
 800ebec:	429a      	cmp	r2, r3
 800ebee:	f040 80b0 	bne.w	800ed52 <_strtod_l+0xb1a>
 800ebf2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ebf6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800ebfa:	ec4b ab10 	vmov	d0, sl, fp
 800ebfe:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ec02:	f001 ff6f 	bl	8010ae4 <__ulp>
 800ec06:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ec0a:	ec53 2b10 	vmov	r2, r3, d0
 800ec0e:	f7f1 fcf3 	bl	80005f8 <__aeabi_dmul>
 800ec12:	4652      	mov	r2, sl
 800ec14:	465b      	mov	r3, fp
 800ec16:	f7f1 fb39 	bl	800028c <__adddf3>
 800ec1a:	460b      	mov	r3, r1
 800ec1c:	4983      	ldr	r1, [pc, #524]	; (800ee2c <_strtod_l+0xbf4>)
 800ec1e:	4a85      	ldr	r2, [pc, #532]	; (800ee34 <_strtod_l+0xbfc>)
 800ec20:	4019      	ands	r1, r3
 800ec22:	4291      	cmp	r1, r2
 800ec24:	4682      	mov	sl, r0
 800ec26:	d960      	bls.n	800ecea <_strtod_l+0xab2>
 800ec28:	ee18 3a90 	vmov	r3, s17
 800ec2c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800ec30:	4293      	cmp	r3, r2
 800ec32:	d104      	bne.n	800ec3e <_strtod_l+0xa06>
 800ec34:	ee18 3a10 	vmov	r3, s16
 800ec38:	3301      	adds	r3, #1
 800ec3a:	f43f ad45 	beq.w	800e6c8 <_strtod_l+0x490>
 800ec3e:	f8df b200 	ldr.w	fp, [pc, #512]	; 800ee40 <_strtod_l+0xc08>
 800ec42:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800ec46:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ec48:	4620      	mov	r0, r4
 800ec4a:	f001 fc19 	bl	8010480 <_Bfree>
 800ec4e:	9905      	ldr	r1, [sp, #20]
 800ec50:	4620      	mov	r0, r4
 800ec52:	f001 fc15 	bl	8010480 <_Bfree>
 800ec56:	4631      	mov	r1, r6
 800ec58:	4620      	mov	r0, r4
 800ec5a:	f001 fc11 	bl	8010480 <_Bfree>
 800ec5e:	4629      	mov	r1, r5
 800ec60:	4620      	mov	r0, r4
 800ec62:	f001 fc0d 	bl	8010480 <_Bfree>
 800ec66:	e61a      	b.n	800e89e <_strtod_l+0x666>
 800ec68:	f1ba 0f00 	cmp.w	sl, #0
 800ec6c:	d11b      	bne.n	800eca6 <_strtod_l+0xa6e>
 800ec6e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ec72:	b9f3      	cbnz	r3, 800ecb2 <_strtod_l+0xa7a>
 800ec74:	4b6c      	ldr	r3, [pc, #432]	; (800ee28 <_strtod_l+0xbf0>)
 800ec76:	2200      	movs	r2, #0
 800ec78:	4640      	mov	r0, r8
 800ec7a:	4649      	mov	r1, r9
 800ec7c:	f7f1 ff2e 	bl	8000adc <__aeabi_dcmplt>
 800ec80:	b9d0      	cbnz	r0, 800ecb8 <_strtod_l+0xa80>
 800ec82:	4640      	mov	r0, r8
 800ec84:	4649      	mov	r1, r9
 800ec86:	4b6c      	ldr	r3, [pc, #432]	; (800ee38 <_strtod_l+0xc00>)
 800ec88:	2200      	movs	r2, #0
 800ec8a:	f7f1 fcb5 	bl	80005f8 <__aeabi_dmul>
 800ec8e:	4680      	mov	r8, r0
 800ec90:	4689      	mov	r9, r1
 800ec92:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ec96:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800ec9a:	9315      	str	r3, [sp, #84]	; 0x54
 800ec9c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800eca0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800eca4:	e79d      	b.n	800ebe2 <_strtod_l+0x9aa>
 800eca6:	f1ba 0f01 	cmp.w	sl, #1
 800ecaa:	d102      	bne.n	800ecb2 <_strtod_l+0xa7a>
 800ecac:	2f00      	cmp	r7, #0
 800ecae:	f43f ad83 	beq.w	800e7b8 <_strtod_l+0x580>
 800ecb2:	4b62      	ldr	r3, [pc, #392]	; (800ee3c <_strtod_l+0xc04>)
 800ecb4:	2200      	movs	r2, #0
 800ecb6:	e78e      	b.n	800ebd6 <_strtod_l+0x99e>
 800ecb8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800ee38 <_strtod_l+0xc00>
 800ecbc:	f04f 0800 	mov.w	r8, #0
 800ecc0:	e7e7      	b.n	800ec92 <_strtod_l+0xa5a>
 800ecc2:	4b5d      	ldr	r3, [pc, #372]	; (800ee38 <_strtod_l+0xc00>)
 800ecc4:	4640      	mov	r0, r8
 800ecc6:	4649      	mov	r1, r9
 800ecc8:	2200      	movs	r2, #0
 800ecca:	f7f1 fc95 	bl	80005f8 <__aeabi_dmul>
 800ecce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ecd0:	4680      	mov	r8, r0
 800ecd2:	4689      	mov	r9, r1
 800ecd4:	b933      	cbnz	r3, 800ece4 <_strtod_l+0xaac>
 800ecd6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ecda:	900e      	str	r0, [sp, #56]	; 0x38
 800ecdc:	930f      	str	r3, [sp, #60]	; 0x3c
 800ecde:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800ece2:	e7dd      	b.n	800eca0 <_strtod_l+0xa68>
 800ece4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800ece8:	e7f9      	b.n	800ecde <_strtod_l+0xaa6>
 800ecea:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800ecee:	9b04      	ldr	r3, [sp, #16]
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d1a8      	bne.n	800ec46 <_strtod_l+0xa0e>
 800ecf4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ecf8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ecfa:	0d1b      	lsrs	r3, r3, #20
 800ecfc:	051b      	lsls	r3, r3, #20
 800ecfe:	429a      	cmp	r2, r3
 800ed00:	d1a1      	bne.n	800ec46 <_strtod_l+0xa0e>
 800ed02:	4640      	mov	r0, r8
 800ed04:	4649      	mov	r1, r9
 800ed06:	f7f2 f827 	bl	8000d58 <__aeabi_d2lz>
 800ed0a:	f7f1 fc47 	bl	800059c <__aeabi_l2d>
 800ed0e:	4602      	mov	r2, r0
 800ed10:	460b      	mov	r3, r1
 800ed12:	4640      	mov	r0, r8
 800ed14:	4649      	mov	r1, r9
 800ed16:	f7f1 fab7 	bl	8000288 <__aeabi_dsub>
 800ed1a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ed1c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ed20:	ea43 030a 	orr.w	r3, r3, sl
 800ed24:	4313      	orrs	r3, r2
 800ed26:	4680      	mov	r8, r0
 800ed28:	4689      	mov	r9, r1
 800ed2a:	d055      	beq.n	800edd8 <_strtod_l+0xba0>
 800ed2c:	a336      	add	r3, pc, #216	; (adr r3, 800ee08 <_strtod_l+0xbd0>)
 800ed2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed32:	f7f1 fed3 	bl	8000adc <__aeabi_dcmplt>
 800ed36:	2800      	cmp	r0, #0
 800ed38:	f47f acd0 	bne.w	800e6dc <_strtod_l+0x4a4>
 800ed3c:	a334      	add	r3, pc, #208	; (adr r3, 800ee10 <_strtod_l+0xbd8>)
 800ed3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed42:	4640      	mov	r0, r8
 800ed44:	4649      	mov	r1, r9
 800ed46:	f7f1 fee7 	bl	8000b18 <__aeabi_dcmpgt>
 800ed4a:	2800      	cmp	r0, #0
 800ed4c:	f43f af7b 	beq.w	800ec46 <_strtod_l+0xa0e>
 800ed50:	e4c4      	b.n	800e6dc <_strtod_l+0x4a4>
 800ed52:	9b04      	ldr	r3, [sp, #16]
 800ed54:	b333      	cbz	r3, 800eda4 <_strtod_l+0xb6c>
 800ed56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ed58:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ed5c:	d822      	bhi.n	800eda4 <_strtod_l+0xb6c>
 800ed5e:	a32e      	add	r3, pc, #184	; (adr r3, 800ee18 <_strtod_l+0xbe0>)
 800ed60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed64:	4640      	mov	r0, r8
 800ed66:	4649      	mov	r1, r9
 800ed68:	f7f1 fec2 	bl	8000af0 <__aeabi_dcmple>
 800ed6c:	b1a0      	cbz	r0, 800ed98 <_strtod_l+0xb60>
 800ed6e:	4649      	mov	r1, r9
 800ed70:	4640      	mov	r0, r8
 800ed72:	f7f1 ff19 	bl	8000ba8 <__aeabi_d2uiz>
 800ed76:	2801      	cmp	r0, #1
 800ed78:	bf38      	it	cc
 800ed7a:	2001      	movcc	r0, #1
 800ed7c:	f7f1 fbc2 	bl	8000504 <__aeabi_ui2d>
 800ed80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ed82:	4680      	mov	r8, r0
 800ed84:	4689      	mov	r9, r1
 800ed86:	bb23      	cbnz	r3, 800edd2 <_strtod_l+0xb9a>
 800ed88:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ed8c:	9010      	str	r0, [sp, #64]	; 0x40
 800ed8e:	9311      	str	r3, [sp, #68]	; 0x44
 800ed90:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ed94:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ed98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ed9a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ed9c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800eda0:	1a9b      	subs	r3, r3, r2
 800eda2:	9309      	str	r3, [sp, #36]	; 0x24
 800eda4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800eda8:	eeb0 0a48 	vmov.f32	s0, s16
 800edac:	eef0 0a68 	vmov.f32	s1, s17
 800edb0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800edb4:	f001 fe96 	bl	8010ae4 <__ulp>
 800edb8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800edbc:	ec53 2b10 	vmov	r2, r3, d0
 800edc0:	f7f1 fc1a 	bl	80005f8 <__aeabi_dmul>
 800edc4:	ec53 2b18 	vmov	r2, r3, d8
 800edc8:	f7f1 fa60 	bl	800028c <__adddf3>
 800edcc:	4682      	mov	sl, r0
 800edce:	468b      	mov	fp, r1
 800edd0:	e78d      	b.n	800ecee <_strtod_l+0xab6>
 800edd2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800edd6:	e7db      	b.n	800ed90 <_strtod_l+0xb58>
 800edd8:	a311      	add	r3, pc, #68	; (adr r3, 800ee20 <_strtod_l+0xbe8>)
 800edda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edde:	f7f1 fe7d 	bl	8000adc <__aeabi_dcmplt>
 800ede2:	e7b2      	b.n	800ed4a <_strtod_l+0xb12>
 800ede4:	2300      	movs	r3, #0
 800ede6:	930a      	str	r3, [sp, #40]	; 0x28
 800ede8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800edea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800edec:	6013      	str	r3, [r2, #0]
 800edee:	f7ff ba6b 	b.w	800e2c8 <_strtod_l+0x90>
 800edf2:	2a65      	cmp	r2, #101	; 0x65
 800edf4:	f43f ab5f 	beq.w	800e4b6 <_strtod_l+0x27e>
 800edf8:	2a45      	cmp	r2, #69	; 0x45
 800edfa:	f43f ab5c 	beq.w	800e4b6 <_strtod_l+0x27e>
 800edfe:	2301      	movs	r3, #1
 800ee00:	f7ff bb94 	b.w	800e52c <_strtod_l+0x2f4>
 800ee04:	f3af 8000 	nop.w
 800ee08:	94a03595 	.word	0x94a03595
 800ee0c:	3fdfffff 	.word	0x3fdfffff
 800ee10:	35afe535 	.word	0x35afe535
 800ee14:	3fe00000 	.word	0x3fe00000
 800ee18:	ffc00000 	.word	0xffc00000
 800ee1c:	41dfffff 	.word	0x41dfffff
 800ee20:	94a03595 	.word	0x94a03595
 800ee24:	3fcfffff 	.word	0x3fcfffff
 800ee28:	3ff00000 	.word	0x3ff00000
 800ee2c:	7ff00000 	.word	0x7ff00000
 800ee30:	7fe00000 	.word	0x7fe00000
 800ee34:	7c9fffff 	.word	0x7c9fffff
 800ee38:	3fe00000 	.word	0x3fe00000
 800ee3c:	bff00000 	.word	0xbff00000
 800ee40:	7fefffff 	.word	0x7fefffff

0800ee44 <strtod>:
 800ee44:	460a      	mov	r2, r1
 800ee46:	4601      	mov	r1, r0
 800ee48:	4802      	ldr	r0, [pc, #8]	; (800ee54 <strtod+0x10>)
 800ee4a:	4b03      	ldr	r3, [pc, #12]	; (800ee58 <strtod+0x14>)
 800ee4c:	6800      	ldr	r0, [r0, #0]
 800ee4e:	f7ff b9f3 	b.w	800e238 <_strtod_l>
 800ee52:	bf00      	nop
 800ee54:	200001f0 	.word	0x200001f0
 800ee58:	20000258 	.word	0x20000258

0800ee5c <_strtol_l.constprop.0>:
 800ee5c:	2b01      	cmp	r3, #1
 800ee5e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee62:	d001      	beq.n	800ee68 <_strtol_l.constprop.0+0xc>
 800ee64:	2b24      	cmp	r3, #36	; 0x24
 800ee66:	d906      	bls.n	800ee76 <_strtol_l.constprop.0+0x1a>
 800ee68:	f7fe fc1c 	bl	800d6a4 <__errno>
 800ee6c:	2316      	movs	r3, #22
 800ee6e:	6003      	str	r3, [r0, #0]
 800ee70:	2000      	movs	r0, #0
 800ee72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee76:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800ef5c <_strtol_l.constprop.0+0x100>
 800ee7a:	460d      	mov	r5, r1
 800ee7c:	462e      	mov	r6, r5
 800ee7e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ee82:	f814 700c 	ldrb.w	r7, [r4, ip]
 800ee86:	f017 0708 	ands.w	r7, r7, #8
 800ee8a:	d1f7      	bne.n	800ee7c <_strtol_l.constprop.0+0x20>
 800ee8c:	2c2d      	cmp	r4, #45	; 0x2d
 800ee8e:	d132      	bne.n	800eef6 <_strtol_l.constprop.0+0x9a>
 800ee90:	782c      	ldrb	r4, [r5, #0]
 800ee92:	2701      	movs	r7, #1
 800ee94:	1cb5      	adds	r5, r6, #2
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d05b      	beq.n	800ef52 <_strtol_l.constprop.0+0xf6>
 800ee9a:	2b10      	cmp	r3, #16
 800ee9c:	d109      	bne.n	800eeb2 <_strtol_l.constprop.0+0x56>
 800ee9e:	2c30      	cmp	r4, #48	; 0x30
 800eea0:	d107      	bne.n	800eeb2 <_strtol_l.constprop.0+0x56>
 800eea2:	782c      	ldrb	r4, [r5, #0]
 800eea4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800eea8:	2c58      	cmp	r4, #88	; 0x58
 800eeaa:	d14d      	bne.n	800ef48 <_strtol_l.constprop.0+0xec>
 800eeac:	786c      	ldrb	r4, [r5, #1]
 800eeae:	2310      	movs	r3, #16
 800eeb0:	3502      	adds	r5, #2
 800eeb2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800eeb6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800eeba:	f04f 0c00 	mov.w	ip, #0
 800eebe:	fbb8 f9f3 	udiv	r9, r8, r3
 800eec2:	4666      	mov	r6, ip
 800eec4:	fb03 8a19 	mls	sl, r3, r9, r8
 800eec8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800eecc:	f1be 0f09 	cmp.w	lr, #9
 800eed0:	d816      	bhi.n	800ef00 <_strtol_l.constprop.0+0xa4>
 800eed2:	4674      	mov	r4, lr
 800eed4:	42a3      	cmp	r3, r4
 800eed6:	dd24      	ble.n	800ef22 <_strtol_l.constprop.0+0xc6>
 800eed8:	f1bc 0f00 	cmp.w	ip, #0
 800eedc:	db1e      	blt.n	800ef1c <_strtol_l.constprop.0+0xc0>
 800eede:	45b1      	cmp	r9, r6
 800eee0:	d31c      	bcc.n	800ef1c <_strtol_l.constprop.0+0xc0>
 800eee2:	d101      	bne.n	800eee8 <_strtol_l.constprop.0+0x8c>
 800eee4:	45a2      	cmp	sl, r4
 800eee6:	db19      	blt.n	800ef1c <_strtol_l.constprop.0+0xc0>
 800eee8:	fb06 4603 	mla	r6, r6, r3, r4
 800eeec:	f04f 0c01 	mov.w	ip, #1
 800eef0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800eef4:	e7e8      	b.n	800eec8 <_strtol_l.constprop.0+0x6c>
 800eef6:	2c2b      	cmp	r4, #43	; 0x2b
 800eef8:	bf04      	itt	eq
 800eefa:	782c      	ldrbeq	r4, [r5, #0]
 800eefc:	1cb5      	addeq	r5, r6, #2
 800eefe:	e7ca      	b.n	800ee96 <_strtol_l.constprop.0+0x3a>
 800ef00:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800ef04:	f1be 0f19 	cmp.w	lr, #25
 800ef08:	d801      	bhi.n	800ef0e <_strtol_l.constprop.0+0xb2>
 800ef0a:	3c37      	subs	r4, #55	; 0x37
 800ef0c:	e7e2      	b.n	800eed4 <_strtol_l.constprop.0+0x78>
 800ef0e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800ef12:	f1be 0f19 	cmp.w	lr, #25
 800ef16:	d804      	bhi.n	800ef22 <_strtol_l.constprop.0+0xc6>
 800ef18:	3c57      	subs	r4, #87	; 0x57
 800ef1a:	e7db      	b.n	800eed4 <_strtol_l.constprop.0+0x78>
 800ef1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800ef20:	e7e6      	b.n	800eef0 <_strtol_l.constprop.0+0x94>
 800ef22:	f1bc 0f00 	cmp.w	ip, #0
 800ef26:	da05      	bge.n	800ef34 <_strtol_l.constprop.0+0xd8>
 800ef28:	2322      	movs	r3, #34	; 0x22
 800ef2a:	6003      	str	r3, [r0, #0]
 800ef2c:	4646      	mov	r6, r8
 800ef2e:	b942      	cbnz	r2, 800ef42 <_strtol_l.constprop.0+0xe6>
 800ef30:	4630      	mov	r0, r6
 800ef32:	e79e      	b.n	800ee72 <_strtol_l.constprop.0+0x16>
 800ef34:	b107      	cbz	r7, 800ef38 <_strtol_l.constprop.0+0xdc>
 800ef36:	4276      	negs	r6, r6
 800ef38:	2a00      	cmp	r2, #0
 800ef3a:	d0f9      	beq.n	800ef30 <_strtol_l.constprop.0+0xd4>
 800ef3c:	f1bc 0f00 	cmp.w	ip, #0
 800ef40:	d000      	beq.n	800ef44 <_strtol_l.constprop.0+0xe8>
 800ef42:	1e69      	subs	r1, r5, #1
 800ef44:	6011      	str	r1, [r2, #0]
 800ef46:	e7f3      	b.n	800ef30 <_strtol_l.constprop.0+0xd4>
 800ef48:	2430      	movs	r4, #48	; 0x30
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d1b1      	bne.n	800eeb2 <_strtol_l.constprop.0+0x56>
 800ef4e:	2308      	movs	r3, #8
 800ef50:	e7af      	b.n	800eeb2 <_strtol_l.constprop.0+0x56>
 800ef52:	2c30      	cmp	r4, #48	; 0x30
 800ef54:	d0a5      	beq.n	800eea2 <_strtol_l.constprop.0+0x46>
 800ef56:	230a      	movs	r3, #10
 800ef58:	e7ab      	b.n	800eeb2 <_strtol_l.constprop.0+0x56>
 800ef5a:	bf00      	nop
 800ef5c:	08012e81 	.word	0x08012e81

0800ef60 <strtol>:
 800ef60:	4613      	mov	r3, r2
 800ef62:	460a      	mov	r2, r1
 800ef64:	4601      	mov	r1, r0
 800ef66:	4802      	ldr	r0, [pc, #8]	; (800ef70 <strtol+0x10>)
 800ef68:	6800      	ldr	r0, [r0, #0]
 800ef6a:	f7ff bf77 	b.w	800ee5c <_strtol_l.constprop.0>
 800ef6e:	bf00      	nop
 800ef70:	200001f0 	.word	0x200001f0

0800ef74 <_vsniprintf_r>:
 800ef74:	b530      	push	{r4, r5, lr}
 800ef76:	4614      	mov	r4, r2
 800ef78:	2c00      	cmp	r4, #0
 800ef7a:	b09b      	sub	sp, #108	; 0x6c
 800ef7c:	4605      	mov	r5, r0
 800ef7e:	461a      	mov	r2, r3
 800ef80:	da05      	bge.n	800ef8e <_vsniprintf_r+0x1a>
 800ef82:	238b      	movs	r3, #139	; 0x8b
 800ef84:	6003      	str	r3, [r0, #0]
 800ef86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ef8a:	b01b      	add	sp, #108	; 0x6c
 800ef8c:	bd30      	pop	{r4, r5, pc}
 800ef8e:	f44f 7302 	mov.w	r3, #520	; 0x208
 800ef92:	f8ad 300c 	strh.w	r3, [sp, #12]
 800ef96:	bf14      	ite	ne
 800ef98:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800ef9c:	4623      	moveq	r3, r4
 800ef9e:	9302      	str	r3, [sp, #8]
 800efa0:	9305      	str	r3, [sp, #20]
 800efa2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800efa6:	9100      	str	r1, [sp, #0]
 800efa8:	9104      	str	r1, [sp, #16]
 800efaa:	f8ad 300e 	strh.w	r3, [sp, #14]
 800efae:	4669      	mov	r1, sp
 800efb0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800efb2:	f002 f839 	bl	8011028 <_svfiprintf_r>
 800efb6:	1c43      	adds	r3, r0, #1
 800efb8:	bfbc      	itt	lt
 800efba:	238b      	movlt	r3, #139	; 0x8b
 800efbc:	602b      	strlt	r3, [r5, #0]
 800efbe:	2c00      	cmp	r4, #0
 800efc0:	d0e3      	beq.n	800ef8a <_vsniprintf_r+0x16>
 800efc2:	9b00      	ldr	r3, [sp, #0]
 800efc4:	2200      	movs	r2, #0
 800efc6:	701a      	strb	r2, [r3, #0]
 800efc8:	e7df      	b.n	800ef8a <_vsniprintf_r+0x16>
	...

0800efcc <vsniprintf>:
 800efcc:	b507      	push	{r0, r1, r2, lr}
 800efce:	9300      	str	r3, [sp, #0]
 800efd0:	4613      	mov	r3, r2
 800efd2:	460a      	mov	r2, r1
 800efd4:	4601      	mov	r1, r0
 800efd6:	4803      	ldr	r0, [pc, #12]	; (800efe4 <vsniprintf+0x18>)
 800efd8:	6800      	ldr	r0, [r0, #0]
 800efda:	f7ff ffcb 	bl	800ef74 <_vsniprintf_r>
 800efde:	b003      	add	sp, #12
 800efe0:	f85d fb04 	ldr.w	pc, [sp], #4
 800efe4:	200001f0 	.word	0x200001f0

0800efe8 <quorem>:
 800efe8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efec:	6903      	ldr	r3, [r0, #16]
 800efee:	690c      	ldr	r4, [r1, #16]
 800eff0:	42a3      	cmp	r3, r4
 800eff2:	4607      	mov	r7, r0
 800eff4:	f2c0 8081 	blt.w	800f0fa <quorem+0x112>
 800eff8:	3c01      	subs	r4, #1
 800effa:	f101 0814 	add.w	r8, r1, #20
 800effe:	f100 0514 	add.w	r5, r0, #20
 800f002:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f006:	9301      	str	r3, [sp, #4]
 800f008:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f00c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f010:	3301      	adds	r3, #1
 800f012:	429a      	cmp	r2, r3
 800f014:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800f018:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f01c:	fbb2 f6f3 	udiv	r6, r2, r3
 800f020:	d331      	bcc.n	800f086 <quorem+0x9e>
 800f022:	f04f 0e00 	mov.w	lr, #0
 800f026:	4640      	mov	r0, r8
 800f028:	46ac      	mov	ip, r5
 800f02a:	46f2      	mov	sl, lr
 800f02c:	f850 2b04 	ldr.w	r2, [r0], #4
 800f030:	b293      	uxth	r3, r2
 800f032:	fb06 e303 	mla	r3, r6, r3, lr
 800f036:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800f03a:	b29b      	uxth	r3, r3
 800f03c:	ebaa 0303 	sub.w	r3, sl, r3
 800f040:	f8dc a000 	ldr.w	sl, [ip]
 800f044:	0c12      	lsrs	r2, r2, #16
 800f046:	fa13 f38a 	uxtah	r3, r3, sl
 800f04a:	fb06 e202 	mla	r2, r6, r2, lr
 800f04e:	9300      	str	r3, [sp, #0]
 800f050:	9b00      	ldr	r3, [sp, #0]
 800f052:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f056:	b292      	uxth	r2, r2
 800f058:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800f05c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f060:	f8bd 3000 	ldrh.w	r3, [sp]
 800f064:	4581      	cmp	r9, r0
 800f066:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f06a:	f84c 3b04 	str.w	r3, [ip], #4
 800f06e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800f072:	d2db      	bcs.n	800f02c <quorem+0x44>
 800f074:	f855 300b 	ldr.w	r3, [r5, fp]
 800f078:	b92b      	cbnz	r3, 800f086 <quorem+0x9e>
 800f07a:	9b01      	ldr	r3, [sp, #4]
 800f07c:	3b04      	subs	r3, #4
 800f07e:	429d      	cmp	r5, r3
 800f080:	461a      	mov	r2, r3
 800f082:	d32e      	bcc.n	800f0e2 <quorem+0xfa>
 800f084:	613c      	str	r4, [r7, #16]
 800f086:	4638      	mov	r0, r7
 800f088:	f001 fc86 	bl	8010998 <__mcmp>
 800f08c:	2800      	cmp	r0, #0
 800f08e:	db24      	blt.n	800f0da <quorem+0xf2>
 800f090:	3601      	adds	r6, #1
 800f092:	4628      	mov	r0, r5
 800f094:	f04f 0c00 	mov.w	ip, #0
 800f098:	f858 2b04 	ldr.w	r2, [r8], #4
 800f09c:	f8d0 e000 	ldr.w	lr, [r0]
 800f0a0:	b293      	uxth	r3, r2
 800f0a2:	ebac 0303 	sub.w	r3, ip, r3
 800f0a6:	0c12      	lsrs	r2, r2, #16
 800f0a8:	fa13 f38e 	uxtah	r3, r3, lr
 800f0ac:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800f0b0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f0b4:	b29b      	uxth	r3, r3
 800f0b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f0ba:	45c1      	cmp	r9, r8
 800f0bc:	f840 3b04 	str.w	r3, [r0], #4
 800f0c0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800f0c4:	d2e8      	bcs.n	800f098 <quorem+0xb0>
 800f0c6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f0ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f0ce:	b922      	cbnz	r2, 800f0da <quorem+0xf2>
 800f0d0:	3b04      	subs	r3, #4
 800f0d2:	429d      	cmp	r5, r3
 800f0d4:	461a      	mov	r2, r3
 800f0d6:	d30a      	bcc.n	800f0ee <quorem+0x106>
 800f0d8:	613c      	str	r4, [r7, #16]
 800f0da:	4630      	mov	r0, r6
 800f0dc:	b003      	add	sp, #12
 800f0de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0e2:	6812      	ldr	r2, [r2, #0]
 800f0e4:	3b04      	subs	r3, #4
 800f0e6:	2a00      	cmp	r2, #0
 800f0e8:	d1cc      	bne.n	800f084 <quorem+0x9c>
 800f0ea:	3c01      	subs	r4, #1
 800f0ec:	e7c7      	b.n	800f07e <quorem+0x96>
 800f0ee:	6812      	ldr	r2, [r2, #0]
 800f0f0:	3b04      	subs	r3, #4
 800f0f2:	2a00      	cmp	r2, #0
 800f0f4:	d1f0      	bne.n	800f0d8 <quorem+0xf0>
 800f0f6:	3c01      	subs	r4, #1
 800f0f8:	e7eb      	b.n	800f0d2 <quorem+0xea>
 800f0fa:	2000      	movs	r0, #0
 800f0fc:	e7ee      	b.n	800f0dc <quorem+0xf4>
	...

0800f100 <_dtoa_r>:
 800f100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f104:	ed2d 8b04 	vpush	{d8-d9}
 800f108:	ec57 6b10 	vmov	r6, r7, d0
 800f10c:	b093      	sub	sp, #76	; 0x4c
 800f10e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f110:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800f114:	9106      	str	r1, [sp, #24]
 800f116:	ee10 aa10 	vmov	sl, s0
 800f11a:	4604      	mov	r4, r0
 800f11c:	9209      	str	r2, [sp, #36]	; 0x24
 800f11e:	930c      	str	r3, [sp, #48]	; 0x30
 800f120:	46bb      	mov	fp, r7
 800f122:	b975      	cbnz	r5, 800f142 <_dtoa_r+0x42>
 800f124:	2010      	movs	r0, #16
 800f126:	f001 f951 	bl	80103cc <malloc>
 800f12a:	4602      	mov	r2, r0
 800f12c:	6260      	str	r0, [r4, #36]	; 0x24
 800f12e:	b920      	cbnz	r0, 800f13a <_dtoa_r+0x3a>
 800f130:	4ba7      	ldr	r3, [pc, #668]	; (800f3d0 <_dtoa_r+0x2d0>)
 800f132:	21ea      	movs	r1, #234	; 0xea
 800f134:	48a7      	ldr	r0, [pc, #668]	; (800f3d4 <_dtoa_r+0x2d4>)
 800f136:	f002 f8f1 	bl	801131c <__assert_func>
 800f13a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f13e:	6005      	str	r5, [r0, #0]
 800f140:	60c5      	str	r5, [r0, #12]
 800f142:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f144:	6819      	ldr	r1, [r3, #0]
 800f146:	b151      	cbz	r1, 800f15e <_dtoa_r+0x5e>
 800f148:	685a      	ldr	r2, [r3, #4]
 800f14a:	604a      	str	r2, [r1, #4]
 800f14c:	2301      	movs	r3, #1
 800f14e:	4093      	lsls	r3, r2
 800f150:	608b      	str	r3, [r1, #8]
 800f152:	4620      	mov	r0, r4
 800f154:	f001 f994 	bl	8010480 <_Bfree>
 800f158:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f15a:	2200      	movs	r2, #0
 800f15c:	601a      	str	r2, [r3, #0]
 800f15e:	1e3b      	subs	r3, r7, #0
 800f160:	bfaa      	itet	ge
 800f162:	2300      	movge	r3, #0
 800f164:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800f168:	f8c8 3000 	strge.w	r3, [r8]
 800f16c:	4b9a      	ldr	r3, [pc, #616]	; (800f3d8 <_dtoa_r+0x2d8>)
 800f16e:	bfbc      	itt	lt
 800f170:	2201      	movlt	r2, #1
 800f172:	f8c8 2000 	strlt.w	r2, [r8]
 800f176:	ea33 030b 	bics.w	r3, r3, fp
 800f17a:	d11b      	bne.n	800f1b4 <_dtoa_r+0xb4>
 800f17c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f17e:	f242 730f 	movw	r3, #9999	; 0x270f
 800f182:	6013      	str	r3, [r2, #0]
 800f184:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f188:	4333      	orrs	r3, r6
 800f18a:	f000 8592 	beq.w	800fcb2 <_dtoa_r+0xbb2>
 800f18e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f190:	b963      	cbnz	r3, 800f1ac <_dtoa_r+0xac>
 800f192:	4b92      	ldr	r3, [pc, #584]	; (800f3dc <_dtoa_r+0x2dc>)
 800f194:	e022      	b.n	800f1dc <_dtoa_r+0xdc>
 800f196:	4b92      	ldr	r3, [pc, #584]	; (800f3e0 <_dtoa_r+0x2e0>)
 800f198:	9301      	str	r3, [sp, #4]
 800f19a:	3308      	adds	r3, #8
 800f19c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f19e:	6013      	str	r3, [r2, #0]
 800f1a0:	9801      	ldr	r0, [sp, #4]
 800f1a2:	b013      	add	sp, #76	; 0x4c
 800f1a4:	ecbd 8b04 	vpop	{d8-d9}
 800f1a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1ac:	4b8b      	ldr	r3, [pc, #556]	; (800f3dc <_dtoa_r+0x2dc>)
 800f1ae:	9301      	str	r3, [sp, #4]
 800f1b0:	3303      	adds	r3, #3
 800f1b2:	e7f3      	b.n	800f19c <_dtoa_r+0x9c>
 800f1b4:	2200      	movs	r2, #0
 800f1b6:	2300      	movs	r3, #0
 800f1b8:	4650      	mov	r0, sl
 800f1ba:	4659      	mov	r1, fp
 800f1bc:	f7f1 fc84 	bl	8000ac8 <__aeabi_dcmpeq>
 800f1c0:	ec4b ab19 	vmov	d9, sl, fp
 800f1c4:	4680      	mov	r8, r0
 800f1c6:	b158      	cbz	r0, 800f1e0 <_dtoa_r+0xe0>
 800f1c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f1ca:	2301      	movs	r3, #1
 800f1cc:	6013      	str	r3, [r2, #0]
 800f1ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	f000 856b 	beq.w	800fcac <_dtoa_r+0xbac>
 800f1d6:	4883      	ldr	r0, [pc, #524]	; (800f3e4 <_dtoa_r+0x2e4>)
 800f1d8:	6018      	str	r0, [r3, #0]
 800f1da:	1e43      	subs	r3, r0, #1
 800f1dc:	9301      	str	r3, [sp, #4]
 800f1de:	e7df      	b.n	800f1a0 <_dtoa_r+0xa0>
 800f1e0:	ec4b ab10 	vmov	d0, sl, fp
 800f1e4:	aa10      	add	r2, sp, #64	; 0x40
 800f1e6:	a911      	add	r1, sp, #68	; 0x44
 800f1e8:	4620      	mov	r0, r4
 800f1ea:	f001 fcf7 	bl	8010bdc <__d2b>
 800f1ee:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800f1f2:	ee08 0a10 	vmov	s16, r0
 800f1f6:	2d00      	cmp	r5, #0
 800f1f8:	f000 8084 	beq.w	800f304 <_dtoa_r+0x204>
 800f1fc:	ee19 3a90 	vmov	r3, s19
 800f200:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f204:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800f208:	4656      	mov	r6, sl
 800f20a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800f20e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f212:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800f216:	4b74      	ldr	r3, [pc, #464]	; (800f3e8 <_dtoa_r+0x2e8>)
 800f218:	2200      	movs	r2, #0
 800f21a:	4630      	mov	r0, r6
 800f21c:	4639      	mov	r1, r7
 800f21e:	f7f1 f833 	bl	8000288 <__aeabi_dsub>
 800f222:	a365      	add	r3, pc, #404	; (adr r3, 800f3b8 <_dtoa_r+0x2b8>)
 800f224:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f228:	f7f1 f9e6 	bl	80005f8 <__aeabi_dmul>
 800f22c:	a364      	add	r3, pc, #400	; (adr r3, 800f3c0 <_dtoa_r+0x2c0>)
 800f22e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f232:	f7f1 f82b 	bl	800028c <__adddf3>
 800f236:	4606      	mov	r6, r0
 800f238:	4628      	mov	r0, r5
 800f23a:	460f      	mov	r7, r1
 800f23c:	f7f1 f972 	bl	8000524 <__aeabi_i2d>
 800f240:	a361      	add	r3, pc, #388	; (adr r3, 800f3c8 <_dtoa_r+0x2c8>)
 800f242:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f246:	f7f1 f9d7 	bl	80005f8 <__aeabi_dmul>
 800f24a:	4602      	mov	r2, r0
 800f24c:	460b      	mov	r3, r1
 800f24e:	4630      	mov	r0, r6
 800f250:	4639      	mov	r1, r7
 800f252:	f7f1 f81b 	bl	800028c <__adddf3>
 800f256:	4606      	mov	r6, r0
 800f258:	460f      	mov	r7, r1
 800f25a:	f7f1 fc7d 	bl	8000b58 <__aeabi_d2iz>
 800f25e:	2200      	movs	r2, #0
 800f260:	9000      	str	r0, [sp, #0]
 800f262:	2300      	movs	r3, #0
 800f264:	4630      	mov	r0, r6
 800f266:	4639      	mov	r1, r7
 800f268:	f7f1 fc38 	bl	8000adc <__aeabi_dcmplt>
 800f26c:	b150      	cbz	r0, 800f284 <_dtoa_r+0x184>
 800f26e:	9800      	ldr	r0, [sp, #0]
 800f270:	f7f1 f958 	bl	8000524 <__aeabi_i2d>
 800f274:	4632      	mov	r2, r6
 800f276:	463b      	mov	r3, r7
 800f278:	f7f1 fc26 	bl	8000ac8 <__aeabi_dcmpeq>
 800f27c:	b910      	cbnz	r0, 800f284 <_dtoa_r+0x184>
 800f27e:	9b00      	ldr	r3, [sp, #0]
 800f280:	3b01      	subs	r3, #1
 800f282:	9300      	str	r3, [sp, #0]
 800f284:	9b00      	ldr	r3, [sp, #0]
 800f286:	2b16      	cmp	r3, #22
 800f288:	d85a      	bhi.n	800f340 <_dtoa_r+0x240>
 800f28a:	9a00      	ldr	r2, [sp, #0]
 800f28c:	4b57      	ldr	r3, [pc, #348]	; (800f3ec <_dtoa_r+0x2ec>)
 800f28e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f292:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f296:	ec51 0b19 	vmov	r0, r1, d9
 800f29a:	f7f1 fc1f 	bl	8000adc <__aeabi_dcmplt>
 800f29e:	2800      	cmp	r0, #0
 800f2a0:	d050      	beq.n	800f344 <_dtoa_r+0x244>
 800f2a2:	9b00      	ldr	r3, [sp, #0]
 800f2a4:	3b01      	subs	r3, #1
 800f2a6:	9300      	str	r3, [sp, #0]
 800f2a8:	2300      	movs	r3, #0
 800f2aa:	930b      	str	r3, [sp, #44]	; 0x2c
 800f2ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f2ae:	1b5d      	subs	r5, r3, r5
 800f2b0:	1e6b      	subs	r3, r5, #1
 800f2b2:	9305      	str	r3, [sp, #20]
 800f2b4:	bf45      	ittet	mi
 800f2b6:	f1c5 0301 	rsbmi	r3, r5, #1
 800f2ba:	9304      	strmi	r3, [sp, #16]
 800f2bc:	2300      	movpl	r3, #0
 800f2be:	2300      	movmi	r3, #0
 800f2c0:	bf4c      	ite	mi
 800f2c2:	9305      	strmi	r3, [sp, #20]
 800f2c4:	9304      	strpl	r3, [sp, #16]
 800f2c6:	9b00      	ldr	r3, [sp, #0]
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	db3d      	blt.n	800f348 <_dtoa_r+0x248>
 800f2cc:	9b05      	ldr	r3, [sp, #20]
 800f2ce:	9a00      	ldr	r2, [sp, #0]
 800f2d0:	920a      	str	r2, [sp, #40]	; 0x28
 800f2d2:	4413      	add	r3, r2
 800f2d4:	9305      	str	r3, [sp, #20]
 800f2d6:	2300      	movs	r3, #0
 800f2d8:	9307      	str	r3, [sp, #28]
 800f2da:	9b06      	ldr	r3, [sp, #24]
 800f2dc:	2b09      	cmp	r3, #9
 800f2de:	f200 8089 	bhi.w	800f3f4 <_dtoa_r+0x2f4>
 800f2e2:	2b05      	cmp	r3, #5
 800f2e4:	bfc4      	itt	gt
 800f2e6:	3b04      	subgt	r3, #4
 800f2e8:	9306      	strgt	r3, [sp, #24]
 800f2ea:	9b06      	ldr	r3, [sp, #24]
 800f2ec:	f1a3 0302 	sub.w	r3, r3, #2
 800f2f0:	bfcc      	ite	gt
 800f2f2:	2500      	movgt	r5, #0
 800f2f4:	2501      	movle	r5, #1
 800f2f6:	2b03      	cmp	r3, #3
 800f2f8:	f200 8087 	bhi.w	800f40a <_dtoa_r+0x30a>
 800f2fc:	e8df f003 	tbb	[pc, r3]
 800f300:	59383a2d 	.word	0x59383a2d
 800f304:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800f308:	441d      	add	r5, r3
 800f30a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800f30e:	2b20      	cmp	r3, #32
 800f310:	bfc1      	itttt	gt
 800f312:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f316:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800f31a:	fa0b f303 	lslgt.w	r3, fp, r3
 800f31e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800f322:	bfda      	itte	le
 800f324:	f1c3 0320 	rsble	r3, r3, #32
 800f328:	fa06 f003 	lslle.w	r0, r6, r3
 800f32c:	4318      	orrgt	r0, r3
 800f32e:	f7f1 f8e9 	bl	8000504 <__aeabi_ui2d>
 800f332:	2301      	movs	r3, #1
 800f334:	4606      	mov	r6, r0
 800f336:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800f33a:	3d01      	subs	r5, #1
 800f33c:	930e      	str	r3, [sp, #56]	; 0x38
 800f33e:	e76a      	b.n	800f216 <_dtoa_r+0x116>
 800f340:	2301      	movs	r3, #1
 800f342:	e7b2      	b.n	800f2aa <_dtoa_r+0x1aa>
 800f344:	900b      	str	r0, [sp, #44]	; 0x2c
 800f346:	e7b1      	b.n	800f2ac <_dtoa_r+0x1ac>
 800f348:	9b04      	ldr	r3, [sp, #16]
 800f34a:	9a00      	ldr	r2, [sp, #0]
 800f34c:	1a9b      	subs	r3, r3, r2
 800f34e:	9304      	str	r3, [sp, #16]
 800f350:	4253      	negs	r3, r2
 800f352:	9307      	str	r3, [sp, #28]
 800f354:	2300      	movs	r3, #0
 800f356:	930a      	str	r3, [sp, #40]	; 0x28
 800f358:	e7bf      	b.n	800f2da <_dtoa_r+0x1da>
 800f35a:	2300      	movs	r3, #0
 800f35c:	9308      	str	r3, [sp, #32]
 800f35e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f360:	2b00      	cmp	r3, #0
 800f362:	dc55      	bgt.n	800f410 <_dtoa_r+0x310>
 800f364:	2301      	movs	r3, #1
 800f366:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800f36a:	461a      	mov	r2, r3
 800f36c:	9209      	str	r2, [sp, #36]	; 0x24
 800f36e:	e00c      	b.n	800f38a <_dtoa_r+0x28a>
 800f370:	2301      	movs	r3, #1
 800f372:	e7f3      	b.n	800f35c <_dtoa_r+0x25c>
 800f374:	2300      	movs	r3, #0
 800f376:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f378:	9308      	str	r3, [sp, #32]
 800f37a:	9b00      	ldr	r3, [sp, #0]
 800f37c:	4413      	add	r3, r2
 800f37e:	9302      	str	r3, [sp, #8]
 800f380:	3301      	adds	r3, #1
 800f382:	2b01      	cmp	r3, #1
 800f384:	9303      	str	r3, [sp, #12]
 800f386:	bfb8      	it	lt
 800f388:	2301      	movlt	r3, #1
 800f38a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f38c:	2200      	movs	r2, #0
 800f38e:	6042      	str	r2, [r0, #4]
 800f390:	2204      	movs	r2, #4
 800f392:	f102 0614 	add.w	r6, r2, #20
 800f396:	429e      	cmp	r6, r3
 800f398:	6841      	ldr	r1, [r0, #4]
 800f39a:	d93d      	bls.n	800f418 <_dtoa_r+0x318>
 800f39c:	4620      	mov	r0, r4
 800f39e:	f001 f82f 	bl	8010400 <_Balloc>
 800f3a2:	9001      	str	r0, [sp, #4]
 800f3a4:	2800      	cmp	r0, #0
 800f3a6:	d13b      	bne.n	800f420 <_dtoa_r+0x320>
 800f3a8:	4b11      	ldr	r3, [pc, #68]	; (800f3f0 <_dtoa_r+0x2f0>)
 800f3aa:	4602      	mov	r2, r0
 800f3ac:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f3b0:	e6c0      	b.n	800f134 <_dtoa_r+0x34>
 800f3b2:	2301      	movs	r3, #1
 800f3b4:	e7df      	b.n	800f376 <_dtoa_r+0x276>
 800f3b6:	bf00      	nop
 800f3b8:	636f4361 	.word	0x636f4361
 800f3bc:	3fd287a7 	.word	0x3fd287a7
 800f3c0:	8b60c8b3 	.word	0x8b60c8b3
 800f3c4:	3fc68a28 	.word	0x3fc68a28
 800f3c8:	509f79fb 	.word	0x509f79fb
 800f3cc:	3fd34413 	.word	0x3fd34413
 800f3d0:	0801301d 	.word	0x0801301d
 800f3d4:	08013034 	.word	0x08013034
 800f3d8:	7ff00000 	.word	0x7ff00000
 800f3dc:	08013019 	.word	0x08013019
 800f3e0:	08013010 	.word	0x08013010
 800f3e4:	08012f99 	.word	0x08012f99
 800f3e8:	3ff80000 	.word	0x3ff80000
 800f3ec:	080131a0 	.word	0x080131a0
 800f3f0:	0801308f 	.word	0x0801308f
 800f3f4:	2501      	movs	r5, #1
 800f3f6:	2300      	movs	r3, #0
 800f3f8:	9306      	str	r3, [sp, #24]
 800f3fa:	9508      	str	r5, [sp, #32]
 800f3fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f400:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800f404:	2200      	movs	r2, #0
 800f406:	2312      	movs	r3, #18
 800f408:	e7b0      	b.n	800f36c <_dtoa_r+0x26c>
 800f40a:	2301      	movs	r3, #1
 800f40c:	9308      	str	r3, [sp, #32]
 800f40e:	e7f5      	b.n	800f3fc <_dtoa_r+0x2fc>
 800f410:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f412:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800f416:	e7b8      	b.n	800f38a <_dtoa_r+0x28a>
 800f418:	3101      	adds	r1, #1
 800f41a:	6041      	str	r1, [r0, #4]
 800f41c:	0052      	lsls	r2, r2, #1
 800f41e:	e7b8      	b.n	800f392 <_dtoa_r+0x292>
 800f420:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f422:	9a01      	ldr	r2, [sp, #4]
 800f424:	601a      	str	r2, [r3, #0]
 800f426:	9b03      	ldr	r3, [sp, #12]
 800f428:	2b0e      	cmp	r3, #14
 800f42a:	f200 809d 	bhi.w	800f568 <_dtoa_r+0x468>
 800f42e:	2d00      	cmp	r5, #0
 800f430:	f000 809a 	beq.w	800f568 <_dtoa_r+0x468>
 800f434:	9b00      	ldr	r3, [sp, #0]
 800f436:	2b00      	cmp	r3, #0
 800f438:	dd32      	ble.n	800f4a0 <_dtoa_r+0x3a0>
 800f43a:	4ab7      	ldr	r2, [pc, #732]	; (800f718 <_dtoa_r+0x618>)
 800f43c:	f003 030f 	and.w	r3, r3, #15
 800f440:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f444:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f448:	9b00      	ldr	r3, [sp, #0]
 800f44a:	05d8      	lsls	r0, r3, #23
 800f44c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800f450:	d516      	bpl.n	800f480 <_dtoa_r+0x380>
 800f452:	4bb2      	ldr	r3, [pc, #712]	; (800f71c <_dtoa_r+0x61c>)
 800f454:	ec51 0b19 	vmov	r0, r1, d9
 800f458:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f45c:	f7f1 f9f6 	bl	800084c <__aeabi_ddiv>
 800f460:	f007 070f 	and.w	r7, r7, #15
 800f464:	4682      	mov	sl, r0
 800f466:	468b      	mov	fp, r1
 800f468:	2503      	movs	r5, #3
 800f46a:	4eac      	ldr	r6, [pc, #688]	; (800f71c <_dtoa_r+0x61c>)
 800f46c:	b957      	cbnz	r7, 800f484 <_dtoa_r+0x384>
 800f46e:	4642      	mov	r2, r8
 800f470:	464b      	mov	r3, r9
 800f472:	4650      	mov	r0, sl
 800f474:	4659      	mov	r1, fp
 800f476:	f7f1 f9e9 	bl	800084c <__aeabi_ddiv>
 800f47a:	4682      	mov	sl, r0
 800f47c:	468b      	mov	fp, r1
 800f47e:	e028      	b.n	800f4d2 <_dtoa_r+0x3d2>
 800f480:	2502      	movs	r5, #2
 800f482:	e7f2      	b.n	800f46a <_dtoa_r+0x36a>
 800f484:	07f9      	lsls	r1, r7, #31
 800f486:	d508      	bpl.n	800f49a <_dtoa_r+0x39a>
 800f488:	4640      	mov	r0, r8
 800f48a:	4649      	mov	r1, r9
 800f48c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f490:	f7f1 f8b2 	bl	80005f8 <__aeabi_dmul>
 800f494:	3501      	adds	r5, #1
 800f496:	4680      	mov	r8, r0
 800f498:	4689      	mov	r9, r1
 800f49a:	107f      	asrs	r7, r7, #1
 800f49c:	3608      	adds	r6, #8
 800f49e:	e7e5      	b.n	800f46c <_dtoa_r+0x36c>
 800f4a0:	f000 809b 	beq.w	800f5da <_dtoa_r+0x4da>
 800f4a4:	9b00      	ldr	r3, [sp, #0]
 800f4a6:	4f9d      	ldr	r7, [pc, #628]	; (800f71c <_dtoa_r+0x61c>)
 800f4a8:	425e      	negs	r6, r3
 800f4aa:	4b9b      	ldr	r3, [pc, #620]	; (800f718 <_dtoa_r+0x618>)
 800f4ac:	f006 020f 	and.w	r2, r6, #15
 800f4b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f4b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4b8:	ec51 0b19 	vmov	r0, r1, d9
 800f4bc:	f7f1 f89c 	bl	80005f8 <__aeabi_dmul>
 800f4c0:	1136      	asrs	r6, r6, #4
 800f4c2:	4682      	mov	sl, r0
 800f4c4:	468b      	mov	fp, r1
 800f4c6:	2300      	movs	r3, #0
 800f4c8:	2502      	movs	r5, #2
 800f4ca:	2e00      	cmp	r6, #0
 800f4cc:	d17a      	bne.n	800f5c4 <_dtoa_r+0x4c4>
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d1d3      	bne.n	800f47a <_dtoa_r+0x37a>
 800f4d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	f000 8082 	beq.w	800f5de <_dtoa_r+0x4de>
 800f4da:	4b91      	ldr	r3, [pc, #580]	; (800f720 <_dtoa_r+0x620>)
 800f4dc:	2200      	movs	r2, #0
 800f4de:	4650      	mov	r0, sl
 800f4e0:	4659      	mov	r1, fp
 800f4e2:	f7f1 fafb 	bl	8000adc <__aeabi_dcmplt>
 800f4e6:	2800      	cmp	r0, #0
 800f4e8:	d079      	beq.n	800f5de <_dtoa_r+0x4de>
 800f4ea:	9b03      	ldr	r3, [sp, #12]
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d076      	beq.n	800f5de <_dtoa_r+0x4de>
 800f4f0:	9b02      	ldr	r3, [sp, #8]
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	dd36      	ble.n	800f564 <_dtoa_r+0x464>
 800f4f6:	9b00      	ldr	r3, [sp, #0]
 800f4f8:	4650      	mov	r0, sl
 800f4fa:	4659      	mov	r1, fp
 800f4fc:	1e5f      	subs	r7, r3, #1
 800f4fe:	2200      	movs	r2, #0
 800f500:	4b88      	ldr	r3, [pc, #544]	; (800f724 <_dtoa_r+0x624>)
 800f502:	f7f1 f879 	bl	80005f8 <__aeabi_dmul>
 800f506:	9e02      	ldr	r6, [sp, #8]
 800f508:	4682      	mov	sl, r0
 800f50a:	468b      	mov	fp, r1
 800f50c:	3501      	adds	r5, #1
 800f50e:	4628      	mov	r0, r5
 800f510:	f7f1 f808 	bl	8000524 <__aeabi_i2d>
 800f514:	4652      	mov	r2, sl
 800f516:	465b      	mov	r3, fp
 800f518:	f7f1 f86e 	bl	80005f8 <__aeabi_dmul>
 800f51c:	4b82      	ldr	r3, [pc, #520]	; (800f728 <_dtoa_r+0x628>)
 800f51e:	2200      	movs	r2, #0
 800f520:	f7f0 feb4 	bl	800028c <__adddf3>
 800f524:	46d0      	mov	r8, sl
 800f526:	46d9      	mov	r9, fp
 800f528:	4682      	mov	sl, r0
 800f52a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800f52e:	2e00      	cmp	r6, #0
 800f530:	d158      	bne.n	800f5e4 <_dtoa_r+0x4e4>
 800f532:	4b7e      	ldr	r3, [pc, #504]	; (800f72c <_dtoa_r+0x62c>)
 800f534:	2200      	movs	r2, #0
 800f536:	4640      	mov	r0, r8
 800f538:	4649      	mov	r1, r9
 800f53a:	f7f0 fea5 	bl	8000288 <__aeabi_dsub>
 800f53e:	4652      	mov	r2, sl
 800f540:	465b      	mov	r3, fp
 800f542:	4680      	mov	r8, r0
 800f544:	4689      	mov	r9, r1
 800f546:	f7f1 fae7 	bl	8000b18 <__aeabi_dcmpgt>
 800f54a:	2800      	cmp	r0, #0
 800f54c:	f040 8295 	bne.w	800fa7a <_dtoa_r+0x97a>
 800f550:	4652      	mov	r2, sl
 800f552:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800f556:	4640      	mov	r0, r8
 800f558:	4649      	mov	r1, r9
 800f55a:	f7f1 fabf 	bl	8000adc <__aeabi_dcmplt>
 800f55e:	2800      	cmp	r0, #0
 800f560:	f040 8289 	bne.w	800fa76 <_dtoa_r+0x976>
 800f564:	ec5b ab19 	vmov	sl, fp, d9
 800f568:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	f2c0 8148 	blt.w	800f800 <_dtoa_r+0x700>
 800f570:	9a00      	ldr	r2, [sp, #0]
 800f572:	2a0e      	cmp	r2, #14
 800f574:	f300 8144 	bgt.w	800f800 <_dtoa_r+0x700>
 800f578:	4b67      	ldr	r3, [pc, #412]	; (800f718 <_dtoa_r+0x618>)
 800f57a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f57e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f582:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f584:	2b00      	cmp	r3, #0
 800f586:	f280 80d5 	bge.w	800f734 <_dtoa_r+0x634>
 800f58a:	9b03      	ldr	r3, [sp, #12]
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	f300 80d1 	bgt.w	800f734 <_dtoa_r+0x634>
 800f592:	f040 826f 	bne.w	800fa74 <_dtoa_r+0x974>
 800f596:	4b65      	ldr	r3, [pc, #404]	; (800f72c <_dtoa_r+0x62c>)
 800f598:	2200      	movs	r2, #0
 800f59a:	4640      	mov	r0, r8
 800f59c:	4649      	mov	r1, r9
 800f59e:	f7f1 f82b 	bl	80005f8 <__aeabi_dmul>
 800f5a2:	4652      	mov	r2, sl
 800f5a4:	465b      	mov	r3, fp
 800f5a6:	f7f1 faad 	bl	8000b04 <__aeabi_dcmpge>
 800f5aa:	9e03      	ldr	r6, [sp, #12]
 800f5ac:	4637      	mov	r7, r6
 800f5ae:	2800      	cmp	r0, #0
 800f5b0:	f040 8245 	bne.w	800fa3e <_dtoa_r+0x93e>
 800f5b4:	9d01      	ldr	r5, [sp, #4]
 800f5b6:	2331      	movs	r3, #49	; 0x31
 800f5b8:	f805 3b01 	strb.w	r3, [r5], #1
 800f5bc:	9b00      	ldr	r3, [sp, #0]
 800f5be:	3301      	adds	r3, #1
 800f5c0:	9300      	str	r3, [sp, #0]
 800f5c2:	e240      	b.n	800fa46 <_dtoa_r+0x946>
 800f5c4:	07f2      	lsls	r2, r6, #31
 800f5c6:	d505      	bpl.n	800f5d4 <_dtoa_r+0x4d4>
 800f5c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f5cc:	f7f1 f814 	bl	80005f8 <__aeabi_dmul>
 800f5d0:	3501      	adds	r5, #1
 800f5d2:	2301      	movs	r3, #1
 800f5d4:	1076      	asrs	r6, r6, #1
 800f5d6:	3708      	adds	r7, #8
 800f5d8:	e777      	b.n	800f4ca <_dtoa_r+0x3ca>
 800f5da:	2502      	movs	r5, #2
 800f5dc:	e779      	b.n	800f4d2 <_dtoa_r+0x3d2>
 800f5de:	9f00      	ldr	r7, [sp, #0]
 800f5e0:	9e03      	ldr	r6, [sp, #12]
 800f5e2:	e794      	b.n	800f50e <_dtoa_r+0x40e>
 800f5e4:	9901      	ldr	r1, [sp, #4]
 800f5e6:	4b4c      	ldr	r3, [pc, #304]	; (800f718 <_dtoa_r+0x618>)
 800f5e8:	4431      	add	r1, r6
 800f5ea:	910d      	str	r1, [sp, #52]	; 0x34
 800f5ec:	9908      	ldr	r1, [sp, #32]
 800f5ee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800f5f2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f5f6:	2900      	cmp	r1, #0
 800f5f8:	d043      	beq.n	800f682 <_dtoa_r+0x582>
 800f5fa:	494d      	ldr	r1, [pc, #308]	; (800f730 <_dtoa_r+0x630>)
 800f5fc:	2000      	movs	r0, #0
 800f5fe:	f7f1 f925 	bl	800084c <__aeabi_ddiv>
 800f602:	4652      	mov	r2, sl
 800f604:	465b      	mov	r3, fp
 800f606:	f7f0 fe3f 	bl	8000288 <__aeabi_dsub>
 800f60a:	9d01      	ldr	r5, [sp, #4]
 800f60c:	4682      	mov	sl, r0
 800f60e:	468b      	mov	fp, r1
 800f610:	4649      	mov	r1, r9
 800f612:	4640      	mov	r0, r8
 800f614:	f7f1 faa0 	bl	8000b58 <__aeabi_d2iz>
 800f618:	4606      	mov	r6, r0
 800f61a:	f7f0 ff83 	bl	8000524 <__aeabi_i2d>
 800f61e:	4602      	mov	r2, r0
 800f620:	460b      	mov	r3, r1
 800f622:	4640      	mov	r0, r8
 800f624:	4649      	mov	r1, r9
 800f626:	f7f0 fe2f 	bl	8000288 <__aeabi_dsub>
 800f62a:	3630      	adds	r6, #48	; 0x30
 800f62c:	f805 6b01 	strb.w	r6, [r5], #1
 800f630:	4652      	mov	r2, sl
 800f632:	465b      	mov	r3, fp
 800f634:	4680      	mov	r8, r0
 800f636:	4689      	mov	r9, r1
 800f638:	f7f1 fa50 	bl	8000adc <__aeabi_dcmplt>
 800f63c:	2800      	cmp	r0, #0
 800f63e:	d163      	bne.n	800f708 <_dtoa_r+0x608>
 800f640:	4642      	mov	r2, r8
 800f642:	464b      	mov	r3, r9
 800f644:	4936      	ldr	r1, [pc, #216]	; (800f720 <_dtoa_r+0x620>)
 800f646:	2000      	movs	r0, #0
 800f648:	f7f0 fe1e 	bl	8000288 <__aeabi_dsub>
 800f64c:	4652      	mov	r2, sl
 800f64e:	465b      	mov	r3, fp
 800f650:	f7f1 fa44 	bl	8000adc <__aeabi_dcmplt>
 800f654:	2800      	cmp	r0, #0
 800f656:	f040 80b5 	bne.w	800f7c4 <_dtoa_r+0x6c4>
 800f65a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f65c:	429d      	cmp	r5, r3
 800f65e:	d081      	beq.n	800f564 <_dtoa_r+0x464>
 800f660:	4b30      	ldr	r3, [pc, #192]	; (800f724 <_dtoa_r+0x624>)
 800f662:	2200      	movs	r2, #0
 800f664:	4650      	mov	r0, sl
 800f666:	4659      	mov	r1, fp
 800f668:	f7f0 ffc6 	bl	80005f8 <__aeabi_dmul>
 800f66c:	4b2d      	ldr	r3, [pc, #180]	; (800f724 <_dtoa_r+0x624>)
 800f66e:	4682      	mov	sl, r0
 800f670:	468b      	mov	fp, r1
 800f672:	4640      	mov	r0, r8
 800f674:	4649      	mov	r1, r9
 800f676:	2200      	movs	r2, #0
 800f678:	f7f0 ffbe 	bl	80005f8 <__aeabi_dmul>
 800f67c:	4680      	mov	r8, r0
 800f67e:	4689      	mov	r9, r1
 800f680:	e7c6      	b.n	800f610 <_dtoa_r+0x510>
 800f682:	4650      	mov	r0, sl
 800f684:	4659      	mov	r1, fp
 800f686:	f7f0 ffb7 	bl	80005f8 <__aeabi_dmul>
 800f68a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f68c:	9d01      	ldr	r5, [sp, #4]
 800f68e:	930f      	str	r3, [sp, #60]	; 0x3c
 800f690:	4682      	mov	sl, r0
 800f692:	468b      	mov	fp, r1
 800f694:	4649      	mov	r1, r9
 800f696:	4640      	mov	r0, r8
 800f698:	f7f1 fa5e 	bl	8000b58 <__aeabi_d2iz>
 800f69c:	4606      	mov	r6, r0
 800f69e:	f7f0 ff41 	bl	8000524 <__aeabi_i2d>
 800f6a2:	3630      	adds	r6, #48	; 0x30
 800f6a4:	4602      	mov	r2, r0
 800f6a6:	460b      	mov	r3, r1
 800f6a8:	4640      	mov	r0, r8
 800f6aa:	4649      	mov	r1, r9
 800f6ac:	f7f0 fdec 	bl	8000288 <__aeabi_dsub>
 800f6b0:	f805 6b01 	strb.w	r6, [r5], #1
 800f6b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f6b6:	429d      	cmp	r5, r3
 800f6b8:	4680      	mov	r8, r0
 800f6ba:	4689      	mov	r9, r1
 800f6bc:	f04f 0200 	mov.w	r2, #0
 800f6c0:	d124      	bne.n	800f70c <_dtoa_r+0x60c>
 800f6c2:	4b1b      	ldr	r3, [pc, #108]	; (800f730 <_dtoa_r+0x630>)
 800f6c4:	4650      	mov	r0, sl
 800f6c6:	4659      	mov	r1, fp
 800f6c8:	f7f0 fde0 	bl	800028c <__adddf3>
 800f6cc:	4602      	mov	r2, r0
 800f6ce:	460b      	mov	r3, r1
 800f6d0:	4640      	mov	r0, r8
 800f6d2:	4649      	mov	r1, r9
 800f6d4:	f7f1 fa20 	bl	8000b18 <__aeabi_dcmpgt>
 800f6d8:	2800      	cmp	r0, #0
 800f6da:	d173      	bne.n	800f7c4 <_dtoa_r+0x6c4>
 800f6dc:	4652      	mov	r2, sl
 800f6de:	465b      	mov	r3, fp
 800f6e0:	4913      	ldr	r1, [pc, #76]	; (800f730 <_dtoa_r+0x630>)
 800f6e2:	2000      	movs	r0, #0
 800f6e4:	f7f0 fdd0 	bl	8000288 <__aeabi_dsub>
 800f6e8:	4602      	mov	r2, r0
 800f6ea:	460b      	mov	r3, r1
 800f6ec:	4640      	mov	r0, r8
 800f6ee:	4649      	mov	r1, r9
 800f6f0:	f7f1 f9f4 	bl	8000adc <__aeabi_dcmplt>
 800f6f4:	2800      	cmp	r0, #0
 800f6f6:	f43f af35 	beq.w	800f564 <_dtoa_r+0x464>
 800f6fa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800f6fc:	1e6b      	subs	r3, r5, #1
 800f6fe:	930f      	str	r3, [sp, #60]	; 0x3c
 800f700:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f704:	2b30      	cmp	r3, #48	; 0x30
 800f706:	d0f8      	beq.n	800f6fa <_dtoa_r+0x5fa>
 800f708:	9700      	str	r7, [sp, #0]
 800f70a:	e049      	b.n	800f7a0 <_dtoa_r+0x6a0>
 800f70c:	4b05      	ldr	r3, [pc, #20]	; (800f724 <_dtoa_r+0x624>)
 800f70e:	f7f0 ff73 	bl	80005f8 <__aeabi_dmul>
 800f712:	4680      	mov	r8, r0
 800f714:	4689      	mov	r9, r1
 800f716:	e7bd      	b.n	800f694 <_dtoa_r+0x594>
 800f718:	080131a0 	.word	0x080131a0
 800f71c:	08013178 	.word	0x08013178
 800f720:	3ff00000 	.word	0x3ff00000
 800f724:	40240000 	.word	0x40240000
 800f728:	401c0000 	.word	0x401c0000
 800f72c:	40140000 	.word	0x40140000
 800f730:	3fe00000 	.word	0x3fe00000
 800f734:	9d01      	ldr	r5, [sp, #4]
 800f736:	4656      	mov	r6, sl
 800f738:	465f      	mov	r7, fp
 800f73a:	4642      	mov	r2, r8
 800f73c:	464b      	mov	r3, r9
 800f73e:	4630      	mov	r0, r6
 800f740:	4639      	mov	r1, r7
 800f742:	f7f1 f883 	bl	800084c <__aeabi_ddiv>
 800f746:	f7f1 fa07 	bl	8000b58 <__aeabi_d2iz>
 800f74a:	4682      	mov	sl, r0
 800f74c:	f7f0 feea 	bl	8000524 <__aeabi_i2d>
 800f750:	4642      	mov	r2, r8
 800f752:	464b      	mov	r3, r9
 800f754:	f7f0 ff50 	bl	80005f8 <__aeabi_dmul>
 800f758:	4602      	mov	r2, r0
 800f75a:	460b      	mov	r3, r1
 800f75c:	4630      	mov	r0, r6
 800f75e:	4639      	mov	r1, r7
 800f760:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800f764:	f7f0 fd90 	bl	8000288 <__aeabi_dsub>
 800f768:	f805 6b01 	strb.w	r6, [r5], #1
 800f76c:	9e01      	ldr	r6, [sp, #4]
 800f76e:	9f03      	ldr	r7, [sp, #12]
 800f770:	1bae      	subs	r6, r5, r6
 800f772:	42b7      	cmp	r7, r6
 800f774:	4602      	mov	r2, r0
 800f776:	460b      	mov	r3, r1
 800f778:	d135      	bne.n	800f7e6 <_dtoa_r+0x6e6>
 800f77a:	f7f0 fd87 	bl	800028c <__adddf3>
 800f77e:	4642      	mov	r2, r8
 800f780:	464b      	mov	r3, r9
 800f782:	4606      	mov	r6, r0
 800f784:	460f      	mov	r7, r1
 800f786:	f7f1 f9c7 	bl	8000b18 <__aeabi_dcmpgt>
 800f78a:	b9d0      	cbnz	r0, 800f7c2 <_dtoa_r+0x6c2>
 800f78c:	4642      	mov	r2, r8
 800f78e:	464b      	mov	r3, r9
 800f790:	4630      	mov	r0, r6
 800f792:	4639      	mov	r1, r7
 800f794:	f7f1 f998 	bl	8000ac8 <__aeabi_dcmpeq>
 800f798:	b110      	cbz	r0, 800f7a0 <_dtoa_r+0x6a0>
 800f79a:	f01a 0f01 	tst.w	sl, #1
 800f79e:	d110      	bne.n	800f7c2 <_dtoa_r+0x6c2>
 800f7a0:	4620      	mov	r0, r4
 800f7a2:	ee18 1a10 	vmov	r1, s16
 800f7a6:	f000 fe6b 	bl	8010480 <_Bfree>
 800f7aa:	2300      	movs	r3, #0
 800f7ac:	9800      	ldr	r0, [sp, #0]
 800f7ae:	702b      	strb	r3, [r5, #0]
 800f7b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f7b2:	3001      	adds	r0, #1
 800f7b4:	6018      	str	r0, [r3, #0]
 800f7b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	f43f acf1 	beq.w	800f1a0 <_dtoa_r+0xa0>
 800f7be:	601d      	str	r5, [r3, #0]
 800f7c0:	e4ee      	b.n	800f1a0 <_dtoa_r+0xa0>
 800f7c2:	9f00      	ldr	r7, [sp, #0]
 800f7c4:	462b      	mov	r3, r5
 800f7c6:	461d      	mov	r5, r3
 800f7c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f7cc:	2a39      	cmp	r2, #57	; 0x39
 800f7ce:	d106      	bne.n	800f7de <_dtoa_r+0x6de>
 800f7d0:	9a01      	ldr	r2, [sp, #4]
 800f7d2:	429a      	cmp	r2, r3
 800f7d4:	d1f7      	bne.n	800f7c6 <_dtoa_r+0x6c6>
 800f7d6:	9901      	ldr	r1, [sp, #4]
 800f7d8:	2230      	movs	r2, #48	; 0x30
 800f7da:	3701      	adds	r7, #1
 800f7dc:	700a      	strb	r2, [r1, #0]
 800f7de:	781a      	ldrb	r2, [r3, #0]
 800f7e0:	3201      	adds	r2, #1
 800f7e2:	701a      	strb	r2, [r3, #0]
 800f7e4:	e790      	b.n	800f708 <_dtoa_r+0x608>
 800f7e6:	4ba6      	ldr	r3, [pc, #664]	; (800fa80 <_dtoa_r+0x980>)
 800f7e8:	2200      	movs	r2, #0
 800f7ea:	f7f0 ff05 	bl	80005f8 <__aeabi_dmul>
 800f7ee:	2200      	movs	r2, #0
 800f7f0:	2300      	movs	r3, #0
 800f7f2:	4606      	mov	r6, r0
 800f7f4:	460f      	mov	r7, r1
 800f7f6:	f7f1 f967 	bl	8000ac8 <__aeabi_dcmpeq>
 800f7fa:	2800      	cmp	r0, #0
 800f7fc:	d09d      	beq.n	800f73a <_dtoa_r+0x63a>
 800f7fe:	e7cf      	b.n	800f7a0 <_dtoa_r+0x6a0>
 800f800:	9a08      	ldr	r2, [sp, #32]
 800f802:	2a00      	cmp	r2, #0
 800f804:	f000 80d7 	beq.w	800f9b6 <_dtoa_r+0x8b6>
 800f808:	9a06      	ldr	r2, [sp, #24]
 800f80a:	2a01      	cmp	r2, #1
 800f80c:	f300 80ba 	bgt.w	800f984 <_dtoa_r+0x884>
 800f810:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f812:	2a00      	cmp	r2, #0
 800f814:	f000 80b2 	beq.w	800f97c <_dtoa_r+0x87c>
 800f818:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f81c:	9e07      	ldr	r6, [sp, #28]
 800f81e:	9d04      	ldr	r5, [sp, #16]
 800f820:	9a04      	ldr	r2, [sp, #16]
 800f822:	441a      	add	r2, r3
 800f824:	9204      	str	r2, [sp, #16]
 800f826:	9a05      	ldr	r2, [sp, #20]
 800f828:	2101      	movs	r1, #1
 800f82a:	441a      	add	r2, r3
 800f82c:	4620      	mov	r0, r4
 800f82e:	9205      	str	r2, [sp, #20]
 800f830:	f000 ff28 	bl	8010684 <__i2b>
 800f834:	4607      	mov	r7, r0
 800f836:	2d00      	cmp	r5, #0
 800f838:	dd0c      	ble.n	800f854 <_dtoa_r+0x754>
 800f83a:	9b05      	ldr	r3, [sp, #20]
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	dd09      	ble.n	800f854 <_dtoa_r+0x754>
 800f840:	42ab      	cmp	r3, r5
 800f842:	9a04      	ldr	r2, [sp, #16]
 800f844:	bfa8      	it	ge
 800f846:	462b      	movge	r3, r5
 800f848:	1ad2      	subs	r2, r2, r3
 800f84a:	9204      	str	r2, [sp, #16]
 800f84c:	9a05      	ldr	r2, [sp, #20]
 800f84e:	1aed      	subs	r5, r5, r3
 800f850:	1ad3      	subs	r3, r2, r3
 800f852:	9305      	str	r3, [sp, #20]
 800f854:	9b07      	ldr	r3, [sp, #28]
 800f856:	b31b      	cbz	r3, 800f8a0 <_dtoa_r+0x7a0>
 800f858:	9b08      	ldr	r3, [sp, #32]
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	f000 80af 	beq.w	800f9be <_dtoa_r+0x8be>
 800f860:	2e00      	cmp	r6, #0
 800f862:	dd13      	ble.n	800f88c <_dtoa_r+0x78c>
 800f864:	4639      	mov	r1, r7
 800f866:	4632      	mov	r2, r6
 800f868:	4620      	mov	r0, r4
 800f86a:	f000 ffcb 	bl	8010804 <__pow5mult>
 800f86e:	ee18 2a10 	vmov	r2, s16
 800f872:	4601      	mov	r1, r0
 800f874:	4607      	mov	r7, r0
 800f876:	4620      	mov	r0, r4
 800f878:	f000 ff1a 	bl	80106b0 <__multiply>
 800f87c:	ee18 1a10 	vmov	r1, s16
 800f880:	4680      	mov	r8, r0
 800f882:	4620      	mov	r0, r4
 800f884:	f000 fdfc 	bl	8010480 <_Bfree>
 800f888:	ee08 8a10 	vmov	s16, r8
 800f88c:	9b07      	ldr	r3, [sp, #28]
 800f88e:	1b9a      	subs	r2, r3, r6
 800f890:	d006      	beq.n	800f8a0 <_dtoa_r+0x7a0>
 800f892:	ee18 1a10 	vmov	r1, s16
 800f896:	4620      	mov	r0, r4
 800f898:	f000 ffb4 	bl	8010804 <__pow5mult>
 800f89c:	ee08 0a10 	vmov	s16, r0
 800f8a0:	2101      	movs	r1, #1
 800f8a2:	4620      	mov	r0, r4
 800f8a4:	f000 feee 	bl	8010684 <__i2b>
 800f8a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	4606      	mov	r6, r0
 800f8ae:	f340 8088 	ble.w	800f9c2 <_dtoa_r+0x8c2>
 800f8b2:	461a      	mov	r2, r3
 800f8b4:	4601      	mov	r1, r0
 800f8b6:	4620      	mov	r0, r4
 800f8b8:	f000 ffa4 	bl	8010804 <__pow5mult>
 800f8bc:	9b06      	ldr	r3, [sp, #24]
 800f8be:	2b01      	cmp	r3, #1
 800f8c0:	4606      	mov	r6, r0
 800f8c2:	f340 8081 	ble.w	800f9c8 <_dtoa_r+0x8c8>
 800f8c6:	f04f 0800 	mov.w	r8, #0
 800f8ca:	6933      	ldr	r3, [r6, #16]
 800f8cc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800f8d0:	6918      	ldr	r0, [r3, #16]
 800f8d2:	f000 fe87 	bl	80105e4 <__hi0bits>
 800f8d6:	f1c0 0020 	rsb	r0, r0, #32
 800f8da:	9b05      	ldr	r3, [sp, #20]
 800f8dc:	4418      	add	r0, r3
 800f8de:	f010 001f 	ands.w	r0, r0, #31
 800f8e2:	f000 8092 	beq.w	800fa0a <_dtoa_r+0x90a>
 800f8e6:	f1c0 0320 	rsb	r3, r0, #32
 800f8ea:	2b04      	cmp	r3, #4
 800f8ec:	f340 808a 	ble.w	800fa04 <_dtoa_r+0x904>
 800f8f0:	f1c0 001c 	rsb	r0, r0, #28
 800f8f4:	9b04      	ldr	r3, [sp, #16]
 800f8f6:	4403      	add	r3, r0
 800f8f8:	9304      	str	r3, [sp, #16]
 800f8fa:	9b05      	ldr	r3, [sp, #20]
 800f8fc:	4403      	add	r3, r0
 800f8fe:	4405      	add	r5, r0
 800f900:	9305      	str	r3, [sp, #20]
 800f902:	9b04      	ldr	r3, [sp, #16]
 800f904:	2b00      	cmp	r3, #0
 800f906:	dd07      	ble.n	800f918 <_dtoa_r+0x818>
 800f908:	ee18 1a10 	vmov	r1, s16
 800f90c:	461a      	mov	r2, r3
 800f90e:	4620      	mov	r0, r4
 800f910:	f000 ffd2 	bl	80108b8 <__lshift>
 800f914:	ee08 0a10 	vmov	s16, r0
 800f918:	9b05      	ldr	r3, [sp, #20]
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	dd05      	ble.n	800f92a <_dtoa_r+0x82a>
 800f91e:	4631      	mov	r1, r6
 800f920:	461a      	mov	r2, r3
 800f922:	4620      	mov	r0, r4
 800f924:	f000 ffc8 	bl	80108b8 <__lshift>
 800f928:	4606      	mov	r6, r0
 800f92a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d06e      	beq.n	800fa0e <_dtoa_r+0x90e>
 800f930:	ee18 0a10 	vmov	r0, s16
 800f934:	4631      	mov	r1, r6
 800f936:	f001 f82f 	bl	8010998 <__mcmp>
 800f93a:	2800      	cmp	r0, #0
 800f93c:	da67      	bge.n	800fa0e <_dtoa_r+0x90e>
 800f93e:	9b00      	ldr	r3, [sp, #0]
 800f940:	3b01      	subs	r3, #1
 800f942:	ee18 1a10 	vmov	r1, s16
 800f946:	9300      	str	r3, [sp, #0]
 800f948:	220a      	movs	r2, #10
 800f94a:	2300      	movs	r3, #0
 800f94c:	4620      	mov	r0, r4
 800f94e:	f000 fdb9 	bl	80104c4 <__multadd>
 800f952:	9b08      	ldr	r3, [sp, #32]
 800f954:	ee08 0a10 	vmov	s16, r0
 800f958:	2b00      	cmp	r3, #0
 800f95a:	f000 81b1 	beq.w	800fcc0 <_dtoa_r+0xbc0>
 800f95e:	2300      	movs	r3, #0
 800f960:	4639      	mov	r1, r7
 800f962:	220a      	movs	r2, #10
 800f964:	4620      	mov	r0, r4
 800f966:	f000 fdad 	bl	80104c4 <__multadd>
 800f96a:	9b02      	ldr	r3, [sp, #8]
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	4607      	mov	r7, r0
 800f970:	f300 808e 	bgt.w	800fa90 <_dtoa_r+0x990>
 800f974:	9b06      	ldr	r3, [sp, #24]
 800f976:	2b02      	cmp	r3, #2
 800f978:	dc51      	bgt.n	800fa1e <_dtoa_r+0x91e>
 800f97a:	e089      	b.n	800fa90 <_dtoa_r+0x990>
 800f97c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f97e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f982:	e74b      	b.n	800f81c <_dtoa_r+0x71c>
 800f984:	9b03      	ldr	r3, [sp, #12]
 800f986:	1e5e      	subs	r6, r3, #1
 800f988:	9b07      	ldr	r3, [sp, #28]
 800f98a:	42b3      	cmp	r3, r6
 800f98c:	bfbf      	itttt	lt
 800f98e:	9b07      	ldrlt	r3, [sp, #28]
 800f990:	9607      	strlt	r6, [sp, #28]
 800f992:	1af2      	sublt	r2, r6, r3
 800f994:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800f996:	bfb6      	itet	lt
 800f998:	189b      	addlt	r3, r3, r2
 800f99a:	1b9e      	subge	r6, r3, r6
 800f99c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800f99e:	9b03      	ldr	r3, [sp, #12]
 800f9a0:	bfb8      	it	lt
 800f9a2:	2600      	movlt	r6, #0
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	bfb7      	itett	lt
 800f9a8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800f9ac:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800f9b0:	1a9d      	sublt	r5, r3, r2
 800f9b2:	2300      	movlt	r3, #0
 800f9b4:	e734      	b.n	800f820 <_dtoa_r+0x720>
 800f9b6:	9e07      	ldr	r6, [sp, #28]
 800f9b8:	9d04      	ldr	r5, [sp, #16]
 800f9ba:	9f08      	ldr	r7, [sp, #32]
 800f9bc:	e73b      	b.n	800f836 <_dtoa_r+0x736>
 800f9be:	9a07      	ldr	r2, [sp, #28]
 800f9c0:	e767      	b.n	800f892 <_dtoa_r+0x792>
 800f9c2:	9b06      	ldr	r3, [sp, #24]
 800f9c4:	2b01      	cmp	r3, #1
 800f9c6:	dc18      	bgt.n	800f9fa <_dtoa_r+0x8fa>
 800f9c8:	f1ba 0f00 	cmp.w	sl, #0
 800f9cc:	d115      	bne.n	800f9fa <_dtoa_r+0x8fa>
 800f9ce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f9d2:	b993      	cbnz	r3, 800f9fa <_dtoa_r+0x8fa>
 800f9d4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f9d8:	0d1b      	lsrs	r3, r3, #20
 800f9da:	051b      	lsls	r3, r3, #20
 800f9dc:	b183      	cbz	r3, 800fa00 <_dtoa_r+0x900>
 800f9de:	9b04      	ldr	r3, [sp, #16]
 800f9e0:	3301      	adds	r3, #1
 800f9e2:	9304      	str	r3, [sp, #16]
 800f9e4:	9b05      	ldr	r3, [sp, #20]
 800f9e6:	3301      	adds	r3, #1
 800f9e8:	9305      	str	r3, [sp, #20]
 800f9ea:	f04f 0801 	mov.w	r8, #1
 800f9ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	f47f af6a 	bne.w	800f8ca <_dtoa_r+0x7ca>
 800f9f6:	2001      	movs	r0, #1
 800f9f8:	e76f      	b.n	800f8da <_dtoa_r+0x7da>
 800f9fa:	f04f 0800 	mov.w	r8, #0
 800f9fe:	e7f6      	b.n	800f9ee <_dtoa_r+0x8ee>
 800fa00:	4698      	mov	r8, r3
 800fa02:	e7f4      	b.n	800f9ee <_dtoa_r+0x8ee>
 800fa04:	f43f af7d 	beq.w	800f902 <_dtoa_r+0x802>
 800fa08:	4618      	mov	r0, r3
 800fa0a:	301c      	adds	r0, #28
 800fa0c:	e772      	b.n	800f8f4 <_dtoa_r+0x7f4>
 800fa0e:	9b03      	ldr	r3, [sp, #12]
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	dc37      	bgt.n	800fa84 <_dtoa_r+0x984>
 800fa14:	9b06      	ldr	r3, [sp, #24]
 800fa16:	2b02      	cmp	r3, #2
 800fa18:	dd34      	ble.n	800fa84 <_dtoa_r+0x984>
 800fa1a:	9b03      	ldr	r3, [sp, #12]
 800fa1c:	9302      	str	r3, [sp, #8]
 800fa1e:	9b02      	ldr	r3, [sp, #8]
 800fa20:	b96b      	cbnz	r3, 800fa3e <_dtoa_r+0x93e>
 800fa22:	4631      	mov	r1, r6
 800fa24:	2205      	movs	r2, #5
 800fa26:	4620      	mov	r0, r4
 800fa28:	f000 fd4c 	bl	80104c4 <__multadd>
 800fa2c:	4601      	mov	r1, r0
 800fa2e:	4606      	mov	r6, r0
 800fa30:	ee18 0a10 	vmov	r0, s16
 800fa34:	f000 ffb0 	bl	8010998 <__mcmp>
 800fa38:	2800      	cmp	r0, #0
 800fa3a:	f73f adbb 	bgt.w	800f5b4 <_dtoa_r+0x4b4>
 800fa3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fa40:	9d01      	ldr	r5, [sp, #4]
 800fa42:	43db      	mvns	r3, r3
 800fa44:	9300      	str	r3, [sp, #0]
 800fa46:	f04f 0800 	mov.w	r8, #0
 800fa4a:	4631      	mov	r1, r6
 800fa4c:	4620      	mov	r0, r4
 800fa4e:	f000 fd17 	bl	8010480 <_Bfree>
 800fa52:	2f00      	cmp	r7, #0
 800fa54:	f43f aea4 	beq.w	800f7a0 <_dtoa_r+0x6a0>
 800fa58:	f1b8 0f00 	cmp.w	r8, #0
 800fa5c:	d005      	beq.n	800fa6a <_dtoa_r+0x96a>
 800fa5e:	45b8      	cmp	r8, r7
 800fa60:	d003      	beq.n	800fa6a <_dtoa_r+0x96a>
 800fa62:	4641      	mov	r1, r8
 800fa64:	4620      	mov	r0, r4
 800fa66:	f000 fd0b 	bl	8010480 <_Bfree>
 800fa6a:	4639      	mov	r1, r7
 800fa6c:	4620      	mov	r0, r4
 800fa6e:	f000 fd07 	bl	8010480 <_Bfree>
 800fa72:	e695      	b.n	800f7a0 <_dtoa_r+0x6a0>
 800fa74:	2600      	movs	r6, #0
 800fa76:	4637      	mov	r7, r6
 800fa78:	e7e1      	b.n	800fa3e <_dtoa_r+0x93e>
 800fa7a:	9700      	str	r7, [sp, #0]
 800fa7c:	4637      	mov	r7, r6
 800fa7e:	e599      	b.n	800f5b4 <_dtoa_r+0x4b4>
 800fa80:	40240000 	.word	0x40240000
 800fa84:	9b08      	ldr	r3, [sp, #32]
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	f000 80ca 	beq.w	800fc20 <_dtoa_r+0xb20>
 800fa8c:	9b03      	ldr	r3, [sp, #12]
 800fa8e:	9302      	str	r3, [sp, #8]
 800fa90:	2d00      	cmp	r5, #0
 800fa92:	dd05      	ble.n	800faa0 <_dtoa_r+0x9a0>
 800fa94:	4639      	mov	r1, r7
 800fa96:	462a      	mov	r2, r5
 800fa98:	4620      	mov	r0, r4
 800fa9a:	f000 ff0d 	bl	80108b8 <__lshift>
 800fa9e:	4607      	mov	r7, r0
 800faa0:	f1b8 0f00 	cmp.w	r8, #0
 800faa4:	d05b      	beq.n	800fb5e <_dtoa_r+0xa5e>
 800faa6:	6879      	ldr	r1, [r7, #4]
 800faa8:	4620      	mov	r0, r4
 800faaa:	f000 fca9 	bl	8010400 <_Balloc>
 800faae:	4605      	mov	r5, r0
 800fab0:	b928      	cbnz	r0, 800fabe <_dtoa_r+0x9be>
 800fab2:	4b87      	ldr	r3, [pc, #540]	; (800fcd0 <_dtoa_r+0xbd0>)
 800fab4:	4602      	mov	r2, r0
 800fab6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800faba:	f7ff bb3b 	b.w	800f134 <_dtoa_r+0x34>
 800fabe:	693a      	ldr	r2, [r7, #16]
 800fac0:	3202      	adds	r2, #2
 800fac2:	0092      	lsls	r2, r2, #2
 800fac4:	f107 010c 	add.w	r1, r7, #12
 800fac8:	300c      	adds	r0, #12
 800faca:	f7fd fec1 	bl	800d850 <memcpy>
 800face:	2201      	movs	r2, #1
 800fad0:	4629      	mov	r1, r5
 800fad2:	4620      	mov	r0, r4
 800fad4:	f000 fef0 	bl	80108b8 <__lshift>
 800fad8:	9b01      	ldr	r3, [sp, #4]
 800fada:	f103 0901 	add.w	r9, r3, #1
 800fade:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800fae2:	4413      	add	r3, r2
 800fae4:	9305      	str	r3, [sp, #20]
 800fae6:	f00a 0301 	and.w	r3, sl, #1
 800faea:	46b8      	mov	r8, r7
 800faec:	9304      	str	r3, [sp, #16]
 800faee:	4607      	mov	r7, r0
 800faf0:	4631      	mov	r1, r6
 800faf2:	ee18 0a10 	vmov	r0, s16
 800faf6:	f7ff fa77 	bl	800efe8 <quorem>
 800fafa:	4641      	mov	r1, r8
 800fafc:	9002      	str	r0, [sp, #8]
 800fafe:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800fb02:	ee18 0a10 	vmov	r0, s16
 800fb06:	f000 ff47 	bl	8010998 <__mcmp>
 800fb0a:	463a      	mov	r2, r7
 800fb0c:	9003      	str	r0, [sp, #12]
 800fb0e:	4631      	mov	r1, r6
 800fb10:	4620      	mov	r0, r4
 800fb12:	f000 ff5d 	bl	80109d0 <__mdiff>
 800fb16:	68c2      	ldr	r2, [r0, #12]
 800fb18:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800fb1c:	4605      	mov	r5, r0
 800fb1e:	bb02      	cbnz	r2, 800fb62 <_dtoa_r+0xa62>
 800fb20:	4601      	mov	r1, r0
 800fb22:	ee18 0a10 	vmov	r0, s16
 800fb26:	f000 ff37 	bl	8010998 <__mcmp>
 800fb2a:	4602      	mov	r2, r0
 800fb2c:	4629      	mov	r1, r5
 800fb2e:	4620      	mov	r0, r4
 800fb30:	9207      	str	r2, [sp, #28]
 800fb32:	f000 fca5 	bl	8010480 <_Bfree>
 800fb36:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800fb3a:	ea43 0102 	orr.w	r1, r3, r2
 800fb3e:	9b04      	ldr	r3, [sp, #16]
 800fb40:	430b      	orrs	r3, r1
 800fb42:	464d      	mov	r5, r9
 800fb44:	d10f      	bne.n	800fb66 <_dtoa_r+0xa66>
 800fb46:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800fb4a:	d02a      	beq.n	800fba2 <_dtoa_r+0xaa2>
 800fb4c:	9b03      	ldr	r3, [sp, #12]
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	dd02      	ble.n	800fb58 <_dtoa_r+0xa58>
 800fb52:	9b02      	ldr	r3, [sp, #8]
 800fb54:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800fb58:	f88b a000 	strb.w	sl, [fp]
 800fb5c:	e775      	b.n	800fa4a <_dtoa_r+0x94a>
 800fb5e:	4638      	mov	r0, r7
 800fb60:	e7ba      	b.n	800fad8 <_dtoa_r+0x9d8>
 800fb62:	2201      	movs	r2, #1
 800fb64:	e7e2      	b.n	800fb2c <_dtoa_r+0xa2c>
 800fb66:	9b03      	ldr	r3, [sp, #12]
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	db04      	blt.n	800fb76 <_dtoa_r+0xa76>
 800fb6c:	9906      	ldr	r1, [sp, #24]
 800fb6e:	430b      	orrs	r3, r1
 800fb70:	9904      	ldr	r1, [sp, #16]
 800fb72:	430b      	orrs	r3, r1
 800fb74:	d122      	bne.n	800fbbc <_dtoa_r+0xabc>
 800fb76:	2a00      	cmp	r2, #0
 800fb78:	ddee      	ble.n	800fb58 <_dtoa_r+0xa58>
 800fb7a:	ee18 1a10 	vmov	r1, s16
 800fb7e:	2201      	movs	r2, #1
 800fb80:	4620      	mov	r0, r4
 800fb82:	f000 fe99 	bl	80108b8 <__lshift>
 800fb86:	4631      	mov	r1, r6
 800fb88:	ee08 0a10 	vmov	s16, r0
 800fb8c:	f000 ff04 	bl	8010998 <__mcmp>
 800fb90:	2800      	cmp	r0, #0
 800fb92:	dc03      	bgt.n	800fb9c <_dtoa_r+0xa9c>
 800fb94:	d1e0      	bne.n	800fb58 <_dtoa_r+0xa58>
 800fb96:	f01a 0f01 	tst.w	sl, #1
 800fb9a:	d0dd      	beq.n	800fb58 <_dtoa_r+0xa58>
 800fb9c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800fba0:	d1d7      	bne.n	800fb52 <_dtoa_r+0xa52>
 800fba2:	2339      	movs	r3, #57	; 0x39
 800fba4:	f88b 3000 	strb.w	r3, [fp]
 800fba8:	462b      	mov	r3, r5
 800fbaa:	461d      	mov	r5, r3
 800fbac:	3b01      	subs	r3, #1
 800fbae:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800fbb2:	2a39      	cmp	r2, #57	; 0x39
 800fbb4:	d071      	beq.n	800fc9a <_dtoa_r+0xb9a>
 800fbb6:	3201      	adds	r2, #1
 800fbb8:	701a      	strb	r2, [r3, #0]
 800fbba:	e746      	b.n	800fa4a <_dtoa_r+0x94a>
 800fbbc:	2a00      	cmp	r2, #0
 800fbbe:	dd07      	ble.n	800fbd0 <_dtoa_r+0xad0>
 800fbc0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800fbc4:	d0ed      	beq.n	800fba2 <_dtoa_r+0xaa2>
 800fbc6:	f10a 0301 	add.w	r3, sl, #1
 800fbca:	f88b 3000 	strb.w	r3, [fp]
 800fbce:	e73c      	b.n	800fa4a <_dtoa_r+0x94a>
 800fbd0:	9b05      	ldr	r3, [sp, #20]
 800fbd2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800fbd6:	4599      	cmp	r9, r3
 800fbd8:	d047      	beq.n	800fc6a <_dtoa_r+0xb6a>
 800fbda:	ee18 1a10 	vmov	r1, s16
 800fbde:	2300      	movs	r3, #0
 800fbe0:	220a      	movs	r2, #10
 800fbe2:	4620      	mov	r0, r4
 800fbe4:	f000 fc6e 	bl	80104c4 <__multadd>
 800fbe8:	45b8      	cmp	r8, r7
 800fbea:	ee08 0a10 	vmov	s16, r0
 800fbee:	f04f 0300 	mov.w	r3, #0
 800fbf2:	f04f 020a 	mov.w	r2, #10
 800fbf6:	4641      	mov	r1, r8
 800fbf8:	4620      	mov	r0, r4
 800fbfa:	d106      	bne.n	800fc0a <_dtoa_r+0xb0a>
 800fbfc:	f000 fc62 	bl	80104c4 <__multadd>
 800fc00:	4680      	mov	r8, r0
 800fc02:	4607      	mov	r7, r0
 800fc04:	f109 0901 	add.w	r9, r9, #1
 800fc08:	e772      	b.n	800faf0 <_dtoa_r+0x9f0>
 800fc0a:	f000 fc5b 	bl	80104c4 <__multadd>
 800fc0e:	4639      	mov	r1, r7
 800fc10:	4680      	mov	r8, r0
 800fc12:	2300      	movs	r3, #0
 800fc14:	220a      	movs	r2, #10
 800fc16:	4620      	mov	r0, r4
 800fc18:	f000 fc54 	bl	80104c4 <__multadd>
 800fc1c:	4607      	mov	r7, r0
 800fc1e:	e7f1      	b.n	800fc04 <_dtoa_r+0xb04>
 800fc20:	9b03      	ldr	r3, [sp, #12]
 800fc22:	9302      	str	r3, [sp, #8]
 800fc24:	9d01      	ldr	r5, [sp, #4]
 800fc26:	ee18 0a10 	vmov	r0, s16
 800fc2a:	4631      	mov	r1, r6
 800fc2c:	f7ff f9dc 	bl	800efe8 <quorem>
 800fc30:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800fc34:	9b01      	ldr	r3, [sp, #4]
 800fc36:	f805 ab01 	strb.w	sl, [r5], #1
 800fc3a:	1aea      	subs	r2, r5, r3
 800fc3c:	9b02      	ldr	r3, [sp, #8]
 800fc3e:	4293      	cmp	r3, r2
 800fc40:	dd09      	ble.n	800fc56 <_dtoa_r+0xb56>
 800fc42:	ee18 1a10 	vmov	r1, s16
 800fc46:	2300      	movs	r3, #0
 800fc48:	220a      	movs	r2, #10
 800fc4a:	4620      	mov	r0, r4
 800fc4c:	f000 fc3a 	bl	80104c4 <__multadd>
 800fc50:	ee08 0a10 	vmov	s16, r0
 800fc54:	e7e7      	b.n	800fc26 <_dtoa_r+0xb26>
 800fc56:	9b02      	ldr	r3, [sp, #8]
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	bfc8      	it	gt
 800fc5c:	461d      	movgt	r5, r3
 800fc5e:	9b01      	ldr	r3, [sp, #4]
 800fc60:	bfd8      	it	le
 800fc62:	2501      	movle	r5, #1
 800fc64:	441d      	add	r5, r3
 800fc66:	f04f 0800 	mov.w	r8, #0
 800fc6a:	ee18 1a10 	vmov	r1, s16
 800fc6e:	2201      	movs	r2, #1
 800fc70:	4620      	mov	r0, r4
 800fc72:	f000 fe21 	bl	80108b8 <__lshift>
 800fc76:	4631      	mov	r1, r6
 800fc78:	ee08 0a10 	vmov	s16, r0
 800fc7c:	f000 fe8c 	bl	8010998 <__mcmp>
 800fc80:	2800      	cmp	r0, #0
 800fc82:	dc91      	bgt.n	800fba8 <_dtoa_r+0xaa8>
 800fc84:	d102      	bne.n	800fc8c <_dtoa_r+0xb8c>
 800fc86:	f01a 0f01 	tst.w	sl, #1
 800fc8a:	d18d      	bne.n	800fba8 <_dtoa_r+0xaa8>
 800fc8c:	462b      	mov	r3, r5
 800fc8e:	461d      	mov	r5, r3
 800fc90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fc94:	2a30      	cmp	r2, #48	; 0x30
 800fc96:	d0fa      	beq.n	800fc8e <_dtoa_r+0xb8e>
 800fc98:	e6d7      	b.n	800fa4a <_dtoa_r+0x94a>
 800fc9a:	9a01      	ldr	r2, [sp, #4]
 800fc9c:	429a      	cmp	r2, r3
 800fc9e:	d184      	bne.n	800fbaa <_dtoa_r+0xaaa>
 800fca0:	9b00      	ldr	r3, [sp, #0]
 800fca2:	3301      	adds	r3, #1
 800fca4:	9300      	str	r3, [sp, #0]
 800fca6:	2331      	movs	r3, #49	; 0x31
 800fca8:	7013      	strb	r3, [r2, #0]
 800fcaa:	e6ce      	b.n	800fa4a <_dtoa_r+0x94a>
 800fcac:	4b09      	ldr	r3, [pc, #36]	; (800fcd4 <_dtoa_r+0xbd4>)
 800fcae:	f7ff ba95 	b.w	800f1dc <_dtoa_r+0xdc>
 800fcb2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	f47f aa6e 	bne.w	800f196 <_dtoa_r+0x96>
 800fcba:	4b07      	ldr	r3, [pc, #28]	; (800fcd8 <_dtoa_r+0xbd8>)
 800fcbc:	f7ff ba8e 	b.w	800f1dc <_dtoa_r+0xdc>
 800fcc0:	9b02      	ldr	r3, [sp, #8]
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	dcae      	bgt.n	800fc24 <_dtoa_r+0xb24>
 800fcc6:	9b06      	ldr	r3, [sp, #24]
 800fcc8:	2b02      	cmp	r3, #2
 800fcca:	f73f aea8 	bgt.w	800fa1e <_dtoa_r+0x91e>
 800fcce:	e7a9      	b.n	800fc24 <_dtoa_r+0xb24>
 800fcd0:	0801308f 	.word	0x0801308f
 800fcd4:	08012f98 	.word	0x08012f98
 800fcd8:	08013010 	.word	0x08013010

0800fcdc <rshift>:
 800fcdc:	6903      	ldr	r3, [r0, #16]
 800fcde:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800fce2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fce6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800fcea:	f100 0414 	add.w	r4, r0, #20
 800fcee:	dd45      	ble.n	800fd7c <rshift+0xa0>
 800fcf0:	f011 011f 	ands.w	r1, r1, #31
 800fcf4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800fcf8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800fcfc:	d10c      	bne.n	800fd18 <rshift+0x3c>
 800fcfe:	f100 0710 	add.w	r7, r0, #16
 800fd02:	4629      	mov	r1, r5
 800fd04:	42b1      	cmp	r1, r6
 800fd06:	d334      	bcc.n	800fd72 <rshift+0x96>
 800fd08:	1a9b      	subs	r3, r3, r2
 800fd0a:	009b      	lsls	r3, r3, #2
 800fd0c:	1eea      	subs	r2, r5, #3
 800fd0e:	4296      	cmp	r6, r2
 800fd10:	bf38      	it	cc
 800fd12:	2300      	movcc	r3, #0
 800fd14:	4423      	add	r3, r4
 800fd16:	e015      	b.n	800fd44 <rshift+0x68>
 800fd18:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800fd1c:	f1c1 0820 	rsb	r8, r1, #32
 800fd20:	40cf      	lsrs	r7, r1
 800fd22:	f105 0e04 	add.w	lr, r5, #4
 800fd26:	46a1      	mov	r9, r4
 800fd28:	4576      	cmp	r6, lr
 800fd2a:	46f4      	mov	ip, lr
 800fd2c:	d815      	bhi.n	800fd5a <rshift+0x7e>
 800fd2e:	1a9a      	subs	r2, r3, r2
 800fd30:	0092      	lsls	r2, r2, #2
 800fd32:	3a04      	subs	r2, #4
 800fd34:	3501      	adds	r5, #1
 800fd36:	42ae      	cmp	r6, r5
 800fd38:	bf38      	it	cc
 800fd3a:	2200      	movcc	r2, #0
 800fd3c:	18a3      	adds	r3, r4, r2
 800fd3e:	50a7      	str	r7, [r4, r2]
 800fd40:	b107      	cbz	r7, 800fd44 <rshift+0x68>
 800fd42:	3304      	adds	r3, #4
 800fd44:	1b1a      	subs	r2, r3, r4
 800fd46:	42a3      	cmp	r3, r4
 800fd48:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800fd4c:	bf08      	it	eq
 800fd4e:	2300      	moveq	r3, #0
 800fd50:	6102      	str	r2, [r0, #16]
 800fd52:	bf08      	it	eq
 800fd54:	6143      	streq	r3, [r0, #20]
 800fd56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fd5a:	f8dc c000 	ldr.w	ip, [ip]
 800fd5e:	fa0c fc08 	lsl.w	ip, ip, r8
 800fd62:	ea4c 0707 	orr.w	r7, ip, r7
 800fd66:	f849 7b04 	str.w	r7, [r9], #4
 800fd6a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800fd6e:	40cf      	lsrs	r7, r1
 800fd70:	e7da      	b.n	800fd28 <rshift+0x4c>
 800fd72:	f851 cb04 	ldr.w	ip, [r1], #4
 800fd76:	f847 cf04 	str.w	ip, [r7, #4]!
 800fd7a:	e7c3      	b.n	800fd04 <rshift+0x28>
 800fd7c:	4623      	mov	r3, r4
 800fd7e:	e7e1      	b.n	800fd44 <rshift+0x68>

0800fd80 <__hexdig_fun>:
 800fd80:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800fd84:	2b09      	cmp	r3, #9
 800fd86:	d802      	bhi.n	800fd8e <__hexdig_fun+0xe>
 800fd88:	3820      	subs	r0, #32
 800fd8a:	b2c0      	uxtb	r0, r0
 800fd8c:	4770      	bx	lr
 800fd8e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800fd92:	2b05      	cmp	r3, #5
 800fd94:	d801      	bhi.n	800fd9a <__hexdig_fun+0x1a>
 800fd96:	3847      	subs	r0, #71	; 0x47
 800fd98:	e7f7      	b.n	800fd8a <__hexdig_fun+0xa>
 800fd9a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800fd9e:	2b05      	cmp	r3, #5
 800fda0:	d801      	bhi.n	800fda6 <__hexdig_fun+0x26>
 800fda2:	3827      	subs	r0, #39	; 0x27
 800fda4:	e7f1      	b.n	800fd8a <__hexdig_fun+0xa>
 800fda6:	2000      	movs	r0, #0
 800fda8:	4770      	bx	lr
	...

0800fdac <__gethex>:
 800fdac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdb0:	ed2d 8b02 	vpush	{d8}
 800fdb4:	b089      	sub	sp, #36	; 0x24
 800fdb6:	ee08 0a10 	vmov	s16, r0
 800fdba:	9304      	str	r3, [sp, #16]
 800fdbc:	4bb4      	ldr	r3, [pc, #720]	; (8010090 <__gethex+0x2e4>)
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	9301      	str	r3, [sp, #4]
 800fdc2:	4618      	mov	r0, r3
 800fdc4:	468b      	mov	fp, r1
 800fdc6:	4690      	mov	r8, r2
 800fdc8:	f7f0 fa02 	bl	80001d0 <strlen>
 800fdcc:	9b01      	ldr	r3, [sp, #4]
 800fdce:	f8db 2000 	ldr.w	r2, [fp]
 800fdd2:	4403      	add	r3, r0
 800fdd4:	4682      	mov	sl, r0
 800fdd6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800fdda:	9305      	str	r3, [sp, #20]
 800fddc:	1c93      	adds	r3, r2, #2
 800fdde:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800fde2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800fde6:	32fe      	adds	r2, #254	; 0xfe
 800fde8:	18d1      	adds	r1, r2, r3
 800fdea:	461f      	mov	r7, r3
 800fdec:	f813 0b01 	ldrb.w	r0, [r3], #1
 800fdf0:	9100      	str	r1, [sp, #0]
 800fdf2:	2830      	cmp	r0, #48	; 0x30
 800fdf4:	d0f8      	beq.n	800fde8 <__gethex+0x3c>
 800fdf6:	f7ff ffc3 	bl	800fd80 <__hexdig_fun>
 800fdfa:	4604      	mov	r4, r0
 800fdfc:	2800      	cmp	r0, #0
 800fdfe:	d13a      	bne.n	800fe76 <__gethex+0xca>
 800fe00:	9901      	ldr	r1, [sp, #4]
 800fe02:	4652      	mov	r2, sl
 800fe04:	4638      	mov	r0, r7
 800fe06:	f7fe f9d0 	bl	800e1aa <strncmp>
 800fe0a:	4605      	mov	r5, r0
 800fe0c:	2800      	cmp	r0, #0
 800fe0e:	d168      	bne.n	800fee2 <__gethex+0x136>
 800fe10:	f817 000a 	ldrb.w	r0, [r7, sl]
 800fe14:	eb07 060a 	add.w	r6, r7, sl
 800fe18:	f7ff ffb2 	bl	800fd80 <__hexdig_fun>
 800fe1c:	2800      	cmp	r0, #0
 800fe1e:	d062      	beq.n	800fee6 <__gethex+0x13a>
 800fe20:	4633      	mov	r3, r6
 800fe22:	7818      	ldrb	r0, [r3, #0]
 800fe24:	2830      	cmp	r0, #48	; 0x30
 800fe26:	461f      	mov	r7, r3
 800fe28:	f103 0301 	add.w	r3, r3, #1
 800fe2c:	d0f9      	beq.n	800fe22 <__gethex+0x76>
 800fe2e:	f7ff ffa7 	bl	800fd80 <__hexdig_fun>
 800fe32:	2301      	movs	r3, #1
 800fe34:	fab0 f480 	clz	r4, r0
 800fe38:	0964      	lsrs	r4, r4, #5
 800fe3a:	4635      	mov	r5, r6
 800fe3c:	9300      	str	r3, [sp, #0]
 800fe3e:	463a      	mov	r2, r7
 800fe40:	4616      	mov	r6, r2
 800fe42:	3201      	adds	r2, #1
 800fe44:	7830      	ldrb	r0, [r6, #0]
 800fe46:	f7ff ff9b 	bl	800fd80 <__hexdig_fun>
 800fe4a:	2800      	cmp	r0, #0
 800fe4c:	d1f8      	bne.n	800fe40 <__gethex+0x94>
 800fe4e:	9901      	ldr	r1, [sp, #4]
 800fe50:	4652      	mov	r2, sl
 800fe52:	4630      	mov	r0, r6
 800fe54:	f7fe f9a9 	bl	800e1aa <strncmp>
 800fe58:	b980      	cbnz	r0, 800fe7c <__gethex+0xd0>
 800fe5a:	b94d      	cbnz	r5, 800fe70 <__gethex+0xc4>
 800fe5c:	eb06 050a 	add.w	r5, r6, sl
 800fe60:	462a      	mov	r2, r5
 800fe62:	4616      	mov	r6, r2
 800fe64:	3201      	adds	r2, #1
 800fe66:	7830      	ldrb	r0, [r6, #0]
 800fe68:	f7ff ff8a 	bl	800fd80 <__hexdig_fun>
 800fe6c:	2800      	cmp	r0, #0
 800fe6e:	d1f8      	bne.n	800fe62 <__gethex+0xb6>
 800fe70:	1bad      	subs	r5, r5, r6
 800fe72:	00ad      	lsls	r5, r5, #2
 800fe74:	e004      	b.n	800fe80 <__gethex+0xd4>
 800fe76:	2400      	movs	r4, #0
 800fe78:	4625      	mov	r5, r4
 800fe7a:	e7e0      	b.n	800fe3e <__gethex+0x92>
 800fe7c:	2d00      	cmp	r5, #0
 800fe7e:	d1f7      	bne.n	800fe70 <__gethex+0xc4>
 800fe80:	7833      	ldrb	r3, [r6, #0]
 800fe82:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800fe86:	2b50      	cmp	r3, #80	; 0x50
 800fe88:	d13b      	bne.n	800ff02 <__gethex+0x156>
 800fe8a:	7873      	ldrb	r3, [r6, #1]
 800fe8c:	2b2b      	cmp	r3, #43	; 0x2b
 800fe8e:	d02c      	beq.n	800feea <__gethex+0x13e>
 800fe90:	2b2d      	cmp	r3, #45	; 0x2d
 800fe92:	d02e      	beq.n	800fef2 <__gethex+0x146>
 800fe94:	1c71      	adds	r1, r6, #1
 800fe96:	f04f 0900 	mov.w	r9, #0
 800fe9a:	7808      	ldrb	r0, [r1, #0]
 800fe9c:	f7ff ff70 	bl	800fd80 <__hexdig_fun>
 800fea0:	1e43      	subs	r3, r0, #1
 800fea2:	b2db      	uxtb	r3, r3
 800fea4:	2b18      	cmp	r3, #24
 800fea6:	d82c      	bhi.n	800ff02 <__gethex+0x156>
 800fea8:	f1a0 0210 	sub.w	r2, r0, #16
 800feac:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800feb0:	f7ff ff66 	bl	800fd80 <__hexdig_fun>
 800feb4:	1e43      	subs	r3, r0, #1
 800feb6:	b2db      	uxtb	r3, r3
 800feb8:	2b18      	cmp	r3, #24
 800feba:	d91d      	bls.n	800fef8 <__gethex+0x14c>
 800febc:	f1b9 0f00 	cmp.w	r9, #0
 800fec0:	d000      	beq.n	800fec4 <__gethex+0x118>
 800fec2:	4252      	negs	r2, r2
 800fec4:	4415      	add	r5, r2
 800fec6:	f8cb 1000 	str.w	r1, [fp]
 800feca:	b1e4      	cbz	r4, 800ff06 <__gethex+0x15a>
 800fecc:	9b00      	ldr	r3, [sp, #0]
 800fece:	2b00      	cmp	r3, #0
 800fed0:	bf14      	ite	ne
 800fed2:	2700      	movne	r7, #0
 800fed4:	2706      	moveq	r7, #6
 800fed6:	4638      	mov	r0, r7
 800fed8:	b009      	add	sp, #36	; 0x24
 800feda:	ecbd 8b02 	vpop	{d8}
 800fede:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fee2:	463e      	mov	r6, r7
 800fee4:	4625      	mov	r5, r4
 800fee6:	2401      	movs	r4, #1
 800fee8:	e7ca      	b.n	800fe80 <__gethex+0xd4>
 800feea:	f04f 0900 	mov.w	r9, #0
 800feee:	1cb1      	adds	r1, r6, #2
 800fef0:	e7d3      	b.n	800fe9a <__gethex+0xee>
 800fef2:	f04f 0901 	mov.w	r9, #1
 800fef6:	e7fa      	b.n	800feee <__gethex+0x142>
 800fef8:	230a      	movs	r3, #10
 800fefa:	fb03 0202 	mla	r2, r3, r2, r0
 800fefe:	3a10      	subs	r2, #16
 800ff00:	e7d4      	b.n	800feac <__gethex+0x100>
 800ff02:	4631      	mov	r1, r6
 800ff04:	e7df      	b.n	800fec6 <__gethex+0x11a>
 800ff06:	1bf3      	subs	r3, r6, r7
 800ff08:	3b01      	subs	r3, #1
 800ff0a:	4621      	mov	r1, r4
 800ff0c:	2b07      	cmp	r3, #7
 800ff0e:	dc0b      	bgt.n	800ff28 <__gethex+0x17c>
 800ff10:	ee18 0a10 	vmov	r0, s16
 800ff14:	f000 fa74 	bl	8010400 <_Balloc>
 800ff18:	4604      	mov	r4, r0
 800ff1a:	b940      	cbnz	r0, 800ff2e <__gethex+0x182>
 800ff1c:	4b5d      	ldr	r3, [pc, #372]	; (8010094 <__gethex+0x2e8>)
 800ff1e:	4602      	mov	r2, r0
 800ff20:	21de      	movs	r1, #222	; 0xde
 800ff22:	485d      	ldr	r0, [pc, #372]	; (8010098 <__gethex+0x2ec>)
 800ff24:	f001 f9fa 	bl	801131c <__assert_func>
 800ff28:	3101      	adds	r1, #1
 800ff2a:	105b      	asrs	r3, r3, #1
 800ff2c:	e7ee      	b.n	800ff0c <__gethex+0x160>
 800ff2e:	f100 0914 	add.w	r9, r0, #20
 800ff32:	f04f 0b00 	mov.w	fp, #0
 800ff36:	f1ca 0301 	rsb	r3, sl, #1
 800ff3a:	f8cd 9008 	str.w	r9, [sp, #8]
 800ff3e:	f8cd b000 	str.w	fp, [sp]
 800ff42:	9306      	str	r3, [sp, #24]
 800ff44:	42b7      	cmp	r7, r6
 800ff46:	d340      	bcc.n	800ffca <__gethex+0x21e>
 800ff48:	9802      	ldr	r0, [sp, #8]
 800ff4a:	9b00      	ldr	r3, [sp, #0]
 800ff4c:	f840 3b04 	str.w	r3, [r0], #4
 800ff50:	eba0 0009 	sub.w	r0, r0, r9
 800ff54:	1080      	asrs	r0, r0, #2
 800ff56:	0146      	lsls	r6, r0, #5
 800ff58:	6120      	str	r0, [r4, #16]
 800ff5a:	4618      	mov	r0, r3
 800ff5c:	f000 fb42 	bl	80105e4 <__hi0bits>
 800ff60:	1a30      	subs	r0, r6, r0
 800ff62:	f8d8 6000 	ldr.w	r6, [r8]
 800ff66:	42b0      	cmp	r0, r6
 800ff68:	dd63      	ble.n	8010032 <__gethex+0x286>
 800ff6a:	1b87      	subs	r7, r0, r6
 800ff6c:	4639      	mov	r1, r7
 800ff6e:	4620      	mov	r0, r4
 800ff70:	f000 fee6 	bl	8010d40 <__any_on>
 800ff74:	4682      	mov	sl, r0
 800ff76:	b1a8      	cbz	r0, 800ffa4 <__gethex+0x1f8>
 800ff78:	1e7b      	subs	r3, r7, #1
 800ff7a:	1159      	asrs	r1, r3, #5
 800ff7c:	f003 021f 	and.w	r2, r3, #31
 800ff80:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800ff84:	f04f 0a01 	mov.w	sl, #1
 800ff88:	fa0a f202 	lsl.w	r2, sl, r2
 800ff8c:	420a      	tst	r2, r1
 800ff8e:	d009      	beq.n	800ffa4 <__gethex+0x1f8>
 800ff90:	4553      	cmp	r3, sl
 800ff92:	dd05      	ble.n	800ffa0 <__gethex+0x1f4>
 800ff94:	1eb9      	subs	r1, r7, #2
 800ff96:	4620      	mov	r0, r4
 800ff98:	f000 fed2 	bl	8010d40 <__any_on>
 800ff9c:	2800      	cmp	r0, #0
 800ff9e:	d145      	bne.n	801002c <__gethex+0x280>
 800ffa0:	f04f 0a02 	mov.w	sl, #2
 800ffa4:	4639      	mov	r1, r7
 800ffa6:	4620      	mov	r0, r4
 800ffa8:	f7ff fe98 	bl	800fcdc <rshift>
 800ffac:	443d      	add	r5, r7
 800ffae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ffb2:	42ab      	cmp	r3, r5
 800ffb4:	da4c      	bge.n	8010050 <__gethex+0x2a4>
 800ffb6:	ee18 0a10 	vmov	r0, s16
 800ffba:	4621      	mov	r1, r4
 800ffbc:	f000 fa60 	bl	8010480 <_Bfree>
 800ffc0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ffc2:	2300      	movs	r3, #0
 800ffc4:	6013      	str	r3, [r2, #0]
 800ffc6:	27a3      	movs	r7, #163	; 0xa3
 800ffc8:	e785      	b.n	800fed6 <__gethex+0x12a>
 800ffca:	1e73      	subs	r3, r6, #1
 800ffcc:	9a05      	ldr	r2, [sp, #20]
 800ffce:	9303      	str	r3, [sp, #12]
 800ffd0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ffd4:	4293      	cmp	r3, r2
 800ffd6:	d019      	beq.n	801000c <__gethex+0x260>
 800ffd8:	f1bb 0f20 	cmp.w	fp, #32
 800ffdc:	d107      	bne.n	800ffee <__gethex+0x242>
 800ffde:	9b02      	ldr	r3, [sp, #8]
 800ffe0:	9a00      	ldr	r2, [sp, #0]
 800ffe2:	f843 2b04 	str.w	r2, [r3], #4
 800ffe6:	9302      	str	r3, [sp, #8]
 800ffe8:	2300      	movs	r3, #0
 800ffea:	9300      	str	r3, [sp, #0]
 800ffec:	469b      	mov	fp, r3
 800ffee:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800fff2:	f7ff fec5 	bl	800fd80 <__hexdig_fun>
 800fff6:	9b00      	ldr	r3, [sp, #0]
 800fff8:	f000 000f 	and.w	r0, r0, #15
 800fffc:	fa00 f00b 	lsl.w	r0, r0, fp
 8010000:	4303      	orrs	r3, r0
 8010002:	9300      	str	r3, [sp, #0]
 8010004:	f10b 0b04 	add.w	fp, fp, #4
 8010008:	9b03      	ldr	r3, [sp, #12]
 801000a:	e00d      	b.n	8010028 <__gethex+0x27c>
 801000c:	9b03      	ldr	r3, [sp, #12]
 801000e:	9a06      	ldr	r2, [sp, #24]
 8010010:	4413      	add	r3, r2
 8010012:	42bb      	cmp	r3, r7
 8010014:	d3e0      	bcc.n	800ffd8 <__gethex+0x22c>
 8010016:	4618      	mov	r0, r3
 8010018:	9901      	ldr	r1, [sp, #4]
 801001a:	9307      	str	r3, [sp, #28]
 801001c:	4652      	mov	r2, sl
 801001e:	f7fe f8c4 	bl	800e1aa <strncmp>
 8010022:	9b07      	ldr	r3, [sp, #28]
 8010024:	2800      	cmp	r0, #0
 8010026:	d1d7      	bne.n	800ffd8 <__gethex+0x22c>
 8010028:	461e      	mov	r6, r3
 801002a:	e78b      	b.n	800ff44 <__gethex+0x198>
 801002c:	f04f 0a03 	mov.w	sl, #3
 8010030:	e7b8      	b.n	800ffa4 <__gethex+0x1f8>
 8010032:	da0a      	bge.n	801004a <__gethex+0x29e>
 8010034:	1a37      	subs	r7, r6, r0
 8010036:	4621      	mov	r1, r4
 8010038:	ee18 0a10 	vmov	r0, s16
 801003c:	463a      	mov	r2, r7
 801003e:	f000 fc3b 	bl	80108b8 <__lshift>
 8010042:	1bed      	subs	r5, r5, r7
 8010044:	4604      	mov	r4, r0
 8010046:	f100 0914 	add.w	r9, r0, #20
 801004a:	f04f 0a00 	mov.w	sl, #0
 801004e:	e7ae      	b.n	800ffae <__gethex+0x202>
 8010050:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8010054:	42a8      	cmp	r0, r5
 8010056:	dd72      	ble.n	801013e <__gethex+0x392>
 8010058:	1b45      	subs	r5, r0, r5
 801005a:	42ae      	cmp	r6, r5
 801005c:	dc36      	bgt.n	80100cc <__gethex+0x320>
 801005e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010062:	2b02      	cmp	r3, #2
 8010064:	d02a      	beq.n	80100bc <__gethex+0x310>
 8010066:	2b03      	cmp	r3, #3
 8010068:	d02c      	beq.n	80100c4 <__gethex+0x318>
 801006a:	2b01      	cmp	r3, #1
 801006c:	d11c      	bne.n	80100a8 <__gethex+0x2fc>
 801006e:	42ae      	cmp	r6, r5
 8010070:	d11a      	bne.n	80100a8 <__gethex+0x2fc>
 8010072:	2e01      	cmp	r6, #1
 8010074:	d112      	bne.n	801009c <__gethex+0x2f0>
 8010076:	9a04      	ldr	r2, [sp, #16]
 8010078:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801007c:	6013      	str	r3, [r2, #0]
 801007e:	2301      	movs	r3, #1
 8010080:	6123      	str	r3, [r4, #16]
 8010082:	f8c9 3000 	str.w	r3, [r9]
 8010086:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010088:	2762      	movs	r7, #98	; 0x62
 801008a:	601c      	str	r4, [r3, #0]
 801008c:	e723      	b.n	800fed6 <__gethex+0x12a>
 801008e:	bf00      	nop
 8010090:	08013108 	.word	0x08013108
 8010094:	0801308f 	.word	0x0801308f
 8010098:	080130a0 	.word	0x080130a0
 801009c:	1e71      	subs	r1, r6, #1
 801009e:	4620      	mov	r0, r4
 80100a0:	f000 fe4e 	bl	8010d40 <__any_on>
 80100a4:	2800      	cmp	r0, #0
 80100a6:	d1e6      	bne.n	8010076 <__gethex+0x2ca>
 80100a8:	ee18 0a10 	vmov	r0, s16
 80100ac:	4621      	mov	r1, r4
 80100ae:	f000 f9e7 	bl	8010480 <_Bfree>
 80100b2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80100b4:	2300      	movs	r3, #0
 80100b6:	6013      	str	r3, [r2, #0]
 80100b8:	2750      	movs	r7, #80	; 0x50
 80100ba:	e70c      	b.n	800fed6 <__gethex+0x12a>
 80100bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80100be:	2b00      	cmp	r3, #0
 80100c0:	d1f2      	bne.n	80100a8 <__gethex+0x2fc>
 80100c2:	e7d8      	b.n	8010076 <__gethex+0x2ca>
 80100c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	d1d5      	bne.n	8010076 <__gethex+0x2ca>
 80100ca:	e7ed      	b.n	80100a8 <__gethex+0x2fc>
 80100cc:	1e6f      	subs	r7, r5, #1
 80100ce:	f1ba 0f00 	cmp.w	sl, #0
 80100d2:	d131      	bne.n	8010138 <__gethex+0x38c>
 80100d4:	b127      	cbz	r7, 80100e0 <__gethex+0x334>
 80100d6:	4639      	mov	r1, r7
 80100d8:	4620      	mov	r0, r4
 80100da:	f000 fe31 	bl	8010d40 <__any_on>
 80100de:	4682      	mov	sl, r0
 80100e0:	117b      	asrs	r3, r7, #5
 80100e2:	2101      	movs	r1, #1
 80100e4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80100e8:	f007 071f 	and.w	r7, r7, #31
 80100ec:	fa01 f707 	lsl.w	r7, r1, r7
 80100f0:	421f      	tst	r7, r3
 80100f2:	4629      	mov	r1, r5
 80100f4:	4620      	mov	r0, r4
 80100f6:	bf18      	it	ne
 80100f8:	f04a 0a02 	orrne.w	sl, sl, #2
 80100fc:	1b76      	subs	r6, r6, r5
 80100fe:	f7ff fded 	bl	800fcdc <rshift>
 8010102:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8010106:	2702      	movs	r7, #2
 8010108:	f1ba 0f00 	cmp.w	sl, #0
 801010c:	d048      	beq.n	80101a0 <__gethex+0x3f4>
 801010e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010112:	2b02      	cmp	r3, #2
 8010114:	d015      	beq.n	8010142 <__gethex+0x396>
 8010116:	2b03      	cmp	r3, #3
 8010118:	d017      	beq.n	801014a <__gethex+0x39e>
 801011a:	2b01      	cmp	r3, #1
 801011c:	d109      	bne.n	8010132 <__gethex+0x386>
 801011e:	f01a 0f02 	tst.w	sl, #2
 8010122:	d006      	beq.n	8010132 <__gethex+0x386>
 8010124:	f8d9 0000 	ldr.w	r0, [r9]
 8010128:	ea4a 0a00 	orr.w	sl, sl, r0
 801012c:	f01a 0f01 	tst.w	sl, #1
 8010130:	d10e      	bne.n	8010150 <__gethex+0x3a4>
 8010132:	f047 0710 	orr.w	r7, r7, #16
 8010136:	e033      	b.n	80101a0 <__gethex+0x3f4>
 8010138:	f04f 0a01 	mov.w	sl, #1
 801013c:	e7d0      	b.n	80100e0 <__gethex+0x334>
 801013e:	2701      	movs	r7, #1
 8010140:	e7e2      	b.n	8010108 <__gethex+0x35c>
 8010142:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010144:	f1c3 0301 	rsb	r3, r3, #1
 8010148:	9315      	str	r3, [sp, #84]	; 0x54
 801014a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801014c:	2b00      	cmp	r3, #0
 801014e:	d0f0      	beq.n	8010132 <__gethex+0x386>
 8010150:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8010154:	f104 0314 	add.w	r3, r4, #20
 8010158:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801015c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8010160:	f04f 0c00 	mov.w	ip, #0
 8010164:	4618      	mov	r0, r3
 8010166:	f853 2b04 	ldr.w	r2, [r3], #4
 801016a:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 801016e:	d01c      	beq.n	80101aa <__gethex+0x3fe>
 8010170:	3201      	adds	r2, #1
 8010172:	6002      	str	r2, [r0, #0]
 8010174:	2f02      	cmp	r7, #2
 8010176:	f104 0314 	add.w	r3, r4, #20
 801017a:	d13f      	bne.n	80101fc <__gethex+0x450>
 801017c:	f8d8 2000 	ldr.w	r2, [r8]
 8010180:	3a01      	subs	r2, #1
 8010182:	42b2      	cmp	r2, r6
 8010184:	d10a      	bne.n	801019c <__gethex+0x3f0>
 8010186:	1171      	asrs	r1, r6, #5
 8010188:	2201      	movs	r2, #1
 801018a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801018e:	f006 061f 	and.w	r6, r6, #31
 8010192:	fa02 f606 	lsl.w	r6, r2, r6
 8010196:	421e      	tst	r6, r3
 8010198:	bf18      	it	ne
 801019a:	4617      	movne	r7, r2
 801019c:	f047 0720 	orr.w	r7, r7, #32
 80101a0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80101a2:	601c      	str	r4, [r3, #0]
 80101a4:	9b04      	ldr	r3, [sp, #16]
 80101a6:	601d      	str	r5, [r3, #0]
 80101a8:	e695      	b.n	800fed6 <__gethex+0x12a>
 80101aa:	4299      	cmp	r1, r3
 80101ac:	f843 cc04 	str.w	ip, [r3, #-4]
 80101b0:	d8d8      	bhi.n	8010164 <__gethex+0x3b8>
 80101b2:	68a3      	ldr	r3, [r4, #8]
 80101b4:	459b      	cmp	fp, r3
 80101b6:	db19      	blt.n	80101ec <__gethex+0x440>
 80101b8:	6861      	ldr	r1, [r4, #4]
 80101ba:	ee18 0a10 	vmov	r0, s16
 80101be:	3101      	adds	r1, #1
 80101c0:	f000 f91e 	bl	8010400 <_Balloc>
 80101c4:	4681      	mov	r9, r0
 80101c6:	b918      	cbnz	r0, 80101d0 <__gethex+0x424>
 80101c8:	4b1a      	ldr	r3, [pc, #104]	; (8010234 <__gethex+0x488>)
 80101ca:	4602      	mov	r2, r0
 80101cc:	2184      	movs	r1, #132	; 0x84
 80101ce:	e6a8      	b.n	800ff22 <__gethex+0x176>
 80101d0:	6922      	ldr	r2, [r4, #16]
 80101d2:	3202      	adds	r2, #2
 80101d4:	f104 010c 	add.w	r1, r4, #12
 80101d8:	0092      	lsls	r2, r2, #2
 80101da:	300c      	adds	r0, #12
 80101dc:	f7fd fb38 	bl	800d850 <memcpy>
 80101e0:	4621      	mov	r1, r4
 80101e2:	ee18 0a10 	vmov	r0, s16
 80101e6:	f000 f94b 	bl	8010480 <_Bfree>
 80101ea:	464c      	mov	r4, r9
 80101ec:	6923      	ldr	r3, [r4, #16]
 80101ee:	1c5a      	adds	r2, r3, #1
 80101f0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80101f4:	6122      	str	r2, [r4, #16]
 80101f6:	2201      	movs	r2, #1
 80101f8:	615a      	str	r2, [r3, #20]
 80101fa:	e7bb      	b.n	8010174 <__gethex+0x3c8>
 80101fc:	6922      	ldr	r2, [r4, #16]
 80101fe:	455a      	cmp	r2, fp
 8010200:	dd0b      	ble.n	801021a <__gethex+0x46e>
 8010202:	2101      	movs	r1, #1
 8010204:	4620      	mov	r0, r4
 8010206:	f7ff fd69 	bl	800fcdc <rshift>
 801020a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801020e:	3501      	adds	r5, #1
 8010210:	42ab      	cmp	r3, r5
 8010212:	f6ff aed0 	blt.w	800ffb6 <__gethex+0x20a>
 8010216:	2701      	movs	r7, #1
 8010218:	e7c0      	b.n	801019c <__gethex+0x3f0>
 801021a:	f016 061f 	ands.w	r6, r6, #31
 801021e:	d0fa      	beq.n	8010216 <__gethex+0x46a>
 8010220:	4453      	add	r3, sl
 8010222:	f1c6 0620 	rsb	r6, r6, #32
 8010226:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801022a:	f000 f9db 	bl	80105e4 <__hi0bits>
 801022e:	42b0      	cmp	r0, r6
 8010230:	dbe7      	blt.n	8010202 <__gethex+0x456>
 8010232:	e7f0      	b.n	8010216 <__gethex+0x46a>
 8010234:	0801308f 	.word	0x0801308f

08010238 <L_shift>:
 8010238:	f1c2 0208 	rsb	r2, r2, #8
 801023c:	0092      	lsls	r2, r2, #2
 801023e:	b570      	push	{r4, r5, r6, lr}
 8010240:	f1c2 0620 	rsb	r6, r2, #32
 8010244:	6843      	ldr	r3, [r0, #4]
 8010246:	6804      	ldr	r4, [r0, #0]
 8010248:	fa03 f506 	lsl.w	r5, r3, r6
 801024c:	432c      	orrs	r4, r5
 801024e:	40d3      	lsrs	r3, r2
 8010250:	6004      	str	r4, [r0, #0]
 8010252:	f840 3f04 	str.w	r3, [r0, #4]!
 8010256:	4288      	cmp	r0, r1
 8010258:	d3f4      	bcc.n	8010244 <L_shift+0xc>
 801025a:	bd70      	pop	{r4, r5, r6, pc}

0801025c <__match>:
 801025c:	b530      	push	{r4, r5, lr}
 801025e:	6803      	ldr	r3, [r0, #0]
 8010260:	3301      	adds	r3, #1
 8010262:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010266:	b914      	cbnz	r4, 801026e <__match+0x12>
 8010268:	6003      	str	r3, [r0, #0]
 801026a:	2001      	movs	r0, #1
 801026c:	bd30      	pop	{r4, r5, pc}
 801026e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010272:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8010276:	2d19      	cmp	r5, #25
 8010278:	bf98      	it	ls
 801027a:	3220      	addls	r2, #32
 801027c:	42a2      	cmp	r2, r4
 801027e:	d0f0      	beq.n	8010262 <__match+0x6>
 8010280:	2000      	movs	r0, #0
 8010282:	e7f3      	b.n	801026c <__match+0x10>

08010284 <__hexnan>:
 8010284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010288:	680b      	ldr	r3, [r1, #0]
 801028a:	115e      	asrs	r6, r3, #5
 801028c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010290:	f013 031f 	ands.w	r3, r3, #31
 8010294:	b087      	sub	sp, #28
 8010296:	bf18      	it	ne
 8010298:	3604      	addne	r6, #4
 801029a:	2500      	movs	r5, #0
 801029c:	1f37      	subs	r7, r6, #4
 801029e:	4690      	mov	r8, r2
 80102a0:	6802      	ldr	r2, [r0, #0]
 80102a2:	9301      	str	r3, [sp, #4]
 80102a4:	4682      	mov	sl, r0
 80102a6:	f846 5c04 	str.w	r5, [r6, #-4]
 80102aa:	46b9      	mov	r9, r7
 80102ac:	463c      	mov	r4, r7
 80102ae:	9502      	str	r5, [sp, #8]
 80102b0:	46ab      	mov	fp, r5
 80102b2:	7851      	ldrb	r1, [r2, #1]
 80102b4:	1c53      	adds	r3, r2, #1
 80102b6:	9303      	str	r3, [sp, #12]
 80102b8:	b341      	cbz	r1, 801030c <__hexnan+0x88>
 80102ba:	4608      	mov	r0, r1
 80102bc:	9205      	str	r2, [sp, #20]
 80102be:	9104      	str	r1, [sp, #16]
 80102c0:	f7ff fd5e 	bl	800fd80 <__hexdig_fun>
 80102c4:	2800      	cmp	r0, #0
 80102c6:	d14f      	bne.n	8010368 <__hexnan+0xe4>
 80102c8:	9904      	ldr	r1, [sp, #16]
 80102ca:	9a05      	ldr	r2, [sp, #20]
 80102cc:	2920      	cmp	r1, #32
 80102ce:	d818      	bhi.n	8010302 <__hexnan+0x7e>
 80102d0:	9b02      	ldr	r3, [sp, #8]
 80102d2:	459b      	cmp	fp, r3
 80102d4:	dd13      	ble.n	80102fe <__hexnan+0x7a>
 80102d6:	454c      	cmp	r4, r9
 80102d8:	d206      	bcs.n	80102e8 <__hexnan+0x64>
 80102da:	2d07      	cmp	r5, #7
 80102dc:	dc04      	bgt.n	80102e8 <__hexnan+0x64>
 80102de:	462a      	mov	r2, r5
 80102e0:	4649      	mov	r1, r9
 80102e2:	4620      	mov	r0, r4
 80102e4:	f7ff ffa8 	bl	8010238 <L_shift>
 80102e8:	4544      	cmp	r4, r8
 80102ea:	d950      	bls.n	801038e <__hexnan+0x10a>
 80102ec:	2300      	movs	r3, #0
 80102ee:	f1a4 0904 	sub.w	r9, r4, #4
 80102f2:	f844 3c04 	str.w	r3, [r4, #-4]
 80102f6:	f8cd b008 	str.w	fp, [sp, #8]
 80102fa:	464c      	mov	r4, r9
 80102fc:	461d      	mov	r5, r3
 80102fe:	9a03      	ldr	r2, [sp, #12]
 8010300:	e7d7      	b.n	80102b2 <__hexnan+0x2e>
 8010302:	2929      	cmp	r1, #41	; 0x29
 8010304:	d156      	bne.n	80103b4 <__hexnan+0x130>
 8010306:	3202      	adds	r2, #2
 8010308:	f8ca 2000 	str.w	r2, [sl]
 801030c:	f1bb 0f00 	cmp.w	fp, #0
 8010310:	d050      	beq.n	80103b4 <__hexnan+0x130>
 8010312:	454c      	cmp	r4, r9
 8010314:	d206      	bcs.n	8010324 <__hexnan+0xa0>
 8010316:	2d07      	cmp	r5, #7
 8010318:	dc04      	bgt.n	8010324 <__hexnan+0xa0>
 801031a:	462a      	mov	r2, r5
 801031c:	4649      	mov	r1, r9
 801031e:	4620      	mov	r0, r4
 8010320:	f7ff ff8a 	bl	8010238 <L_shift>
 8010324:	4544      	cmp	r4, r8
 8010326:	d934      	bls.n	8010392 <__hexnan+0x10e>
 8010328:	f1a8 0204 	sub.w	r2, r8, #4
 801032c:	4623      	mov	r3, r4
 801032e:	f853 1b04 	ldr.w	r1, [r3], #4
 8010332:	f842 1f04 	str.w	r1, [r2, #4]!
 8010336:	429f      	cmp	r7, r3
 8010338:	d2f9      	bcs.n	801032e <__hexnan+0xaa>
 801033a:	1b3b      	subs	r3, r7, r4
 801033c:	f023 0303 	bic.w	r3, r3, #3
 8010340:	3304      	adds	r3, #4
 8010342:	3401      	adds	r4, #1
 8010344:	3e03      	subs	r6, #3
 8010346:	42b4      	cmp	r4, r6
 8010348:	bf88      	it	hi
 801034a:	2304      	movhi	r3, #4
 801034c:	4443      	add	r3, r8
 801034e:	2200      	movs	r2, #0
 8010350:	f843 2b04 	str.w	r2, [r3], #4
 8010354:	429f      	cmp	r7, r3
 8010356:	d2fb      	bcs.n	8010350 <__hexnan+0xcc>
 8010358:	683b      	ldr	r3, [r7, #0]
 801035a:	b91b      	cbnz	r3, 8010364 <__hexnan+0xe0>
 801035c:	4547      	cmp	r7, r8
 801035e:	d127      	bne.n	80103b0 <__hexnan+0x12c>
 8010360:	2301      	movs	r3, #1
 8010362:	603b      	str	r3, [r7, #0]
 8010364:	2005      	movs	r0, #5
 8010366:	e026      	b.n	80103b6 <__hexnan+0x132>
 8010368:	3501      	adds	r5, #1
 801036a:	2d08      	cmp	r5, #8
 801036c:	f10b 0b01 	add.w	fp, fp, #1
 8010370:	dd06      	ble.n	8010380 <__hexnan+0xfc>
 8010372:	4544      	cmp	r4, r8
 8010374:	d9c3      	bls.n	80102fe <__hexnan+0x7a>
 8010376:	2300      	movs	r3, #0
 8010378:	f844 3c04 	str.w	r3, [r4, #-4]
 801037c:	2501      	movs	r5, #1
 801037e:	3c04      	subs	r4, #4
 8010380:	6822      	ldr	r2, [r4, #0]
 8010382:	f000 000f 	and.w	r0, r0, #15
 8010386:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801038a:	6022      	str	r2, [r4, #0]
 801038c:	e7b7      	b.n	80102fe <__hexnan+0x7a>
 801038e:	2508      	movs	r5, #8
 8010390:	e7b5      	b.n	80102fe <__hexnan+0x7a>
 8010392:	9b01      	ldr	r3, [sp, #4]
 8010394:	2b00      	cmp	r3, #0
 8010396:	d0df      	beq.n	8010358 <__hexnan+0xd4>
 8010398:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801039c:	f1c3 0320 	rsb	r3, r3, #32
 80103a0:	fa22 f303 	lsr.w	r3, r2, r3
 80103a4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80103a8:	401a      	ands	r2, r3
 80103aa:	f846 2c04 	str.w	r2, [r6, #-4]
 80103ae:	e7d3      	b.n	8010358 <__hexnan+0xd4>
 80103b0:	3f04      	subs	r7, #4
 80103b2:	e7d1      	b.n	8010358 <__hexnan+0xd4>
 80103b4:	2004      	movs	r0, #4
 80103b6:	b007      	add	sp, #28
 80103b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080103bc <_localeconv_r>:
 80103bc:	4800      	ldr	r0, [pc, #0]	; (80103c0 <_localeconv_r+0x4>)
 80103be:	4770      	bx	lr
 80103c0:	20000348 	.word	0x20000348

080103c4 <__retarget_lock_init_recursive>:
 80103c4:	4770      	bx	lr

080103c6 <__retarget_lock_acquire_recursive>:
 80103c6:	4770      	bx	lr

080103c8 <__retarget_lock_release_recursive>:
 80103c8:	4770      	bx	lr
	...

080103cc <malloc>:
 80103cc:	4b02      	ldr	r3, [pc, #8]	; (80103d8 <malloc+0xc>)
 80103ce:	4601      	mov	r1, r0
 80103d0:	6818      	ldr	r0, [r3, #0]
 80103d2:	f000 bd59 	b.w	8010e88 <_malloc_r>
 80103d6:	bf00      	nop
 80103d8:	200001f0 	.word	0x200001f0

080103dc <__ascii_mbtowc>:
 80103dc:	b082      	sub	sp, #8
 80103de:	b901      	cbnz	r1, 80103e2 <__ascii_mbtowc+0x6>
 80103e0:	a901      	add	r1, sp, #4
 80103e2:	b142      	cbz	r2, 80103f6 <__ascii_mbtowc+0x1a>
 80103e4:	b14b      	cbz	r3, 80103fa <__ascii_mbtowc+0x1e>
 80103e6:	7813      	ldrb	r3, [r2, #0]
 80103e8:	600b      	str	r3, [r1, #0]
 80103ea:	7812      	ldrb	r2, [r2, #0]
 80103ec:	1e10      	subs	r0, r2, #0
 80103ee:	bf18      	it	ne
 80103f0:	2001      	movne	r0, #1
 80103f2:	b002      	add	sp, #8
 80103f4:	4770      	bx	lr
 80103f6:	4610      	mov	r0, r2
 80103f8:	e7fb      	b.n	80103f2 <__ascii_mbtowc+0x16>
 80103fa:	f06f 0001 	mvn.w	r0, #1
 80103fe:	e7f8      	b.n	80103f2 <__ascii_mbtowc+0x16>

08010400 <_Balloc>:
 8010400:	b570      	push	{r4, r5, r6, lr}
 8010402:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010404:	4604      	mov	r4, r0
 8010406:	460d      	mov	r5, r1
 8010408:	b976      	cbnz	r6, 8010428 <_Balloc+0x28>
 801040a:	2010      	movs	r0, #16
 801040c:	f7ff ffde 	bl	80103cc <malloc>
 8010410:	4602      	mov	r2, r0
 8010412:	6260      	str	r0, [r4, #36]	; 0x24
 8010414:	b920      	cbnz	r0, 8010420 <_Balloc+0x20>
 8010416:	4b18      	ldr	r3, [pc, #96]	; (8010478 <_Balloc+0x78>)
 8010418:	4818      	ldr	r0, [pc, #96]	; (801047c <_Balloc+0x7c>)
 801041a:	2166      	movs	r1, #102	; 0x66
 801041c:	f000 ff7e 	bl	801131c <__assert_func>
 8010420:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010424:	6006      	str	r6, [r0, #0]
 8010426:	60c6      	str	r6, [r0, #12]
 8010428:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801042a:	68f3      	ldr	r3, [r6, #12]
 801042c:	b183      	cbz	r3, 8010450 <_Balloc+0x50>
 801042e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010430:	68db      	ldr	r3, [r3, #12]
 8010432:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010436:	b9b8      	cbnz	r0, 8010468 <_Balloc+0x68>
 8010438:	2101      	movs	r1, #1
 801043a:	fa01 f605 	lsl.w	r6, r1, r5
 801043e:	1d72      	adds	r2, r6, #5
 8010440:	0092      	lsls	r2, r2, #2
 8010442:	4620      	mov	r0, r4
 8010444:	f000 fc9d 	bl	8010d82 <_calloc_r>
 8010448:	b160      	cbz	r0, 8010464 <_Balloc+0x64>
 801044a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801044e:	e00e      	b.n	801046e <_Balloc+0x6e>
 8010450:	2221      	movs	r2, #33	; 0x21
 8010452:	2104      	movs	r1, #4
 8010454:	4620      	mov	r0, r4
 8010456:	f000 fc94 	bl	8010d82 <_calloc_r>
 801045a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801045c:	60f0      	str	r0, [r6, #12]
 801045e:	68db      	ldr	r3, [r3, #12]
 8010460:	2b00      	cmp	r3, #0
 8010462:	d1e4      	bne.n	801042e <_Balloc+0x2e>
 8010464:	2000      	movs	r0, #0
 8010466:	bd70      	pop	{r4, r5, r6, pc}
 8010468:	6802      	ldr	r2, [r0, #0]
 801046a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801046e:	2300      	movs	r3, #0
 8010470:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010474:	e7f7      	b.n	8010466 <_Balloc+0x66>
 8010476:	bf00      	nop
 8010478:	0801301d 	.word	0x0801301d
 801047c:	0801311c 	.word	0x0801311c

08010480 <_Bfree>:
 8010480:	b570      	push	{r4, r5, r6, lr}
 8010482:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010484:	4605      	mov	r5, r0
 8010486:	460c      	mov	r4, r1
 8010488:	b976      	cbnz	r6, 80104a8 <_Bfree+0x28>
 801048a:	2010      	movs	r0, #16
 801048c:	f7ff ff9e 	bl	80103cc <malloc>
 8010490:	4602      	mov	r2, r0
 8010492:	6268      	str	r0, [r5, #36]	; 0x24
 8010494:	b920      	cbnz	r0, 80104a0 <_Bfree+0x20>
 8010496:	4b09      	ldr	r3, [pc, #36]	; (80104bc <_Bfree+0x3c>)
 8010498:	4809      	ldr	r0, [pc, #36]	; (80104c0 <_Bfree+0x40>)
 801049a:	218a      	movs	r1, #138	; 0x8a
 801049c:	f000 ff3e 	bl	801131c <__assert_func>
 80104a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80104a4:	6006      	str	r6, [r0, #0]
 80104a6:	60c6      	str	r6, [r0, #12]
 80104a8:	b13c      	cbz	r4, 80104ba <_Bfree+0x3a>
 80104aa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80104ac:	6862      	ldr	r2, [r4, #4]
 80104ae:	68db      	ldr	r3, [r3, #12]
 80104b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80104b4:	6021      	str	r1, [r4, #0]
 80104b6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80104ba:	bd70      	pop	{r4, r5, r6, pc}
 80104bc:	0801301d 	.word	0x0801301d
 80104c0:	0801311c 	.word	0x0801311c

080104c4 <__multadd>:
 80104c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80104c8:	690d      	ldr	r5, [r1, #16]
 80104ca:	4607      	mov	r7, r0
 80104cc:	460c      	mov	r4, r1
 80104ce:	461e      	mov	r6, r3
 80104d0:	f101 0c14 	add.w	ip, r1, #20
 80104d4:	2000      	movs	r0, #0
 80104d6:	f8dc 3000 	ldr.w	r3, [ip]
 80104da:	b299      	uxth	r1, r3
 80104dc:	fb02 6101 	mla	r1, r2, r1, r6
 80104e0:	0c1e      	lsrs	r6, r3, #16
 80104e2:	0c0b      	lsrs	r3, r1, #16
 80104e4:	fb02 3306 	mla	r3, r2, r6, r3
 80104e8:	b289      	uxth	r1, r1
 80104ea:	3001      	adds	r0, #1
 80104ec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80104f0:	4285      	cmp	r5, r0
 80104f2:	f84c 1b04 	str.w	r1, [ip], #4
 80104f6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80104fa:	dcec      	bgt.n	80104d6 <__multadd+0x12>
 80104fc:	b30e      	cbz	r6, 8010542 <__multadd+0x7e>
 80104fe:	68a3      	ldr	r3, [r4, #8]
 8010500:	42ab      	cmp	r3, r5
 8010502:	dc19      	bgt.n	8010538 <__multadd+0x74>
 8010504:	6861      	ldr	r1, [r4, #4]
 8010506:	4638      	mov	r0, r7
 8010508:	3101      	adds	r1, #1
 801050a:	f7ff ff79 	bl	8010400 <_Balloc>
 801050e:	4680      	mov	r8, r0
 8010510:	b928      	cbnz	r0, 801051e <__multadd+0x5a>
 8010512:	4602      	mov	r2, r0
 8010514:	4b0c      	ldr	r3, [pc, #48]	; (8010548 <__multadd+0x84>)
 8010516:	480d      	ldr	r0, [pc, #52]	; (801054c <__multadd+0x88>)
 8010518:	21b5      	movs	r1, #181	; 0xb5
 801051a:	f000 feff 	bl	801131c <__assert_func>
 801051e:	6922      	ldr	r2, [r4, #16]
 8010520:	3202      	adds	r2, #2
 8010522:	f104 010c 	add.w	r1, r4, #12
 8010526:	0092      	lsls	r2, r2, #2
 8010528:	300c      	adds	r0, #12
 801052a:	f7fd f991 	bl	800d850 <memcpy>
 801052e:	4621      	mov	r1, r4
 8010530:	4638      	mov	r0, r7
 8010532:	f7ff ffa5 	bl	8010480 <_Bfree>
 8010536:	4644      	mov	r4, r8
 8010538:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801053c:	3501      	adds	r5, #1
 801053e:	615e      	str	r6, [r3, #20]
 8010540:	6125      	str	r5, [r4, #16]
 8010542:	4620      	mov	r0, r4
 8010544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010548:	0801308f 	.word	0x0801308f
 801054c:	0801311c 	.word	0x0801311c

08010550 <__s2b>:
 8010550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010554:	460c      	mov	r4, r1
 8010556:	4615      	mov	r5, r2
 8010558:	461f      	mov	r7, r3
 801055a:	2209      	movs	r2, #9
 801055c:	3308      	adds	r3, #8
 801055e:	4606      	mov	r6, r0
 8010560:	fb93 f3f2 	sdiv	r3, r3, r2
 8010564:	2100      	movs	r1, #0
 8010566:	2201      	movs	r2, #1
 8010568:	429a      	cmp	r2, r3
 801056a:	db09      	blt.n	8010580 <__s2b+0x30>
 801056c:	4630      	mov	r0, r6
 801056e:	f7ff ff47 	bl	8010400 <_Balloc>
 8010572:	b940      	cbnz	r0, 8010586 <__s2b+0x36>
 8010574:	4602      	mov	r2, r0
 8010576:	4b19      	ldr	r3, [pc, #100]	; (80105dc <__s2b+0x8c>)
 8010578:	4819      	ldr	r0, [pc, #100]	; (80105e0 <__s2b+0x90>)
 801057a:	21ce      	movs	r1, #206	; 0xce
 801057c:	f000 fece 	bl	801131c <__assert_func>
 8010580:	0052      	lsls	r2, r2, #1
 8010582:	3101      	adds	r1, #1
 8010584:	e7f0      	b.n	8010568 <__s2b+0x18>
 8010586:	9b08      	ldr	r3, [sp, #32]
 8010588:	6143      	str	r3, [r0, #20]
 801058a:	2d09      	cmp	r5, #9
 801058c:	f04f 0301 	mov.w	r3, #1
 8010590:	6103      	str	r3, [r0, #16]
 8010592:	dd16      	ble.n	80105c2 <__s2b+0x72>
 8010594:	f104 0909 	add.w	r9, r4, #9
 8010598:	46c8      	mov	r8, r9
 801059a:	442c      	add	r4, r5
 801059c:	f818 3b01 	ldrb.w	r3, [r8], #1
 80105a0:	4601      	mov	r1, r0
 80105a2:	3b30      	subs	r3, #48	; 0x30
 80105a4:	220a      	movs	r2, #10
 80105a6:	4630      	mov	r0, r6
 80105a8:	f7ff ff8c 	bl	80104c4 <__multadd>
 80105ac:	45a0      	cmp	r8, r4
 80105ae:	d1f5      	bne.n	801059c <__s2b+0x4c>
 80105b0:	f1a5 0408 	sub.w	r4, r5, #8
 80105b4:	444c      	add	r4, r9
 80105b6:	1b2d      	subs	r5, r5, r4
 80105b8:	1963      	adds	r3, r4, r5
 80105ba:	42bb      	cmp	r3, r7
 80105bc:	db04      	blt.n	80105c8 <__s2b+0x78>
 80105be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80105c2:	340a      	adds	r4, #10
 80105c4:	2509      	movs	r5, #9
 80105c6:	e7f6      	b.n	80105b6 <__s2b+0x66>
 80105c8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80105cc:	4601      	mov	r1, r0
 80105ce:	3b30      	subs	r3, #48	; 0x30
 80105d0:	220a      	movs	r2, #10
 80105d2:	4630      	mov	r0, r6
 80105d4:	f7ff ff76 	bl	80104c4 <__multadd>
 80105d8:	e7ee      	b.n	80105b8 <__s2b+0x68>
 80105da:	bf00      	nop
 80105dc:	0801308f 	.word	0x0801308f
 80105e0:	0801311c 	.word	0x0801311c

080105e4 <__hi0bits>:
 80105e4:	0c03      	lsrs	r3, r0, #16
 80105e6:	041b      	lsls	r3, r3, #16
 80105e8:	b9d3      	cbnz	r3, 8010620 <__hi0bits+0x3c>
 80105ea:	0400      	lsls	r0, r0, #16
 80105ec:	2310      	movs	r3, #16
 80105ee:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80105f2:	bf04      	itt	eq
 80105f4:	0200      	lsleq	r0, r0, #8
 80105f6:	3308      	addeq	r3, #8
 80105f8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80105fc:	bf04      	itt	eq
 80105fe:	0100      	lsleq	r0, r0, #4
 8010600:	3304      	addeq	r3, #4
 8010602:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8010606:	bf04      	itt	eq
 8010608:	0080      	lsleq	r0, r0, #2
 801060a:	3302      	addeq	r3, #2
 801060c:	2800      	cmp	r0, #0
 801060e:	db05      	blt.n	801061c <__hi0bits+0x38>
 8010610:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010614:	f103 0301 	add.w	r3, r3, #1
 8010618:	bf08      	it	eq
 801061a:	2320      	moveq	r3, #32
 801061c:	4618      	mov	r0, r3
 801061e:	4770      	bx	lr
 8010620:	2300      	movs	r3, #0
 8010622:	e7e4      	b.n	80105ee <__hi0bits+0xa>

08010624 <__lo0bits>:
 8010624:	6803      	ldr	r3, [r0, #0]
 8010626:	f013 0207 	ands.w	r2, r3, #7
 801062a:	4601      	mov	r1, r0
 801062c:	d00b      	beq.n	8010646 <__lo0bits+0x22>
 801062e:	07da      	lsls	r2, r3, #31
 8010630:	d423      	bmi.n	801067a <__lo0bits+0x56>
 8010632:	0798      	lsls	r0, r3, #30
 8010634:	bf49      	itett	mi
 8010636:	085b      	lsrmi	r3, r3, #1
 8010638:	089b      	lsrpl	r3, r3, #2
 801063a:	2001      	movmi	r0, #1
 801063c:	600b      	strmi	r3, [r1, #0]
 801063e:	bf5c      	itt	pl
 8010640:	600b      	strpl	r3, [r1, #0]
 8010642:	2002      	movpl	r0, #2
 8010644:	4770      	bx	lr
 8010646:	b298      	uxth	r0, r3
 8010648:	b9a8      	cbnz	r0, 8010676 <__lo0bits+0x52>
 801064a:	0c1b      	lsrs	r3, r3, #16
 801064c:	2010      	movs	r0, #16
 801064e:	b2da      	uxtb	r2, r3
 8010650:	b90a      	cbnz	r2, 8010656 <__lo0bits+0x32>
 8010652:	3008      	adds	r0, #8
 8010654:	0a1b      	lsrs	r3, r3, #8
 8010656:	071a      	lsls	r2, r3, #28
 8010658:	bf04      	itt	eq
 801065a:	091b      	lsreq	r3, r3, #4
 801065c:	3004      	addeq	r0, #4
 801065e:	079a      	lsls	r2, r3, #30
 8010660:	bf04      	itt	eq
 8010662:	089b      	lsreq	r3, r3, #2
 8010664:	3002      	addeq	r0, #2
 8010666:	07da      	lsls	r2, r3, #31
 8010668:	d403      	bmi.n	8010672 <__lo0bits+0x4e>
 801066a:	085b      	lsrs	r3, r3, #1
 801066c:	f100 0001 	add.w	r0, r0, #1
 8010670:	d005      	beq.n	801067e <__lo0bits+0x5a>
 8010672:	600b      	str	r3, [r1, #0]
 8010674:	4770      	bx	lr
 8010676:	4610      	mov	r0, r2
 8010678:	e7e9      	b.n	801064e <__lo0bits+0x2a>
 801067a:	2000      	movs	r0, #0
 801067c:	4770      	bx	lr
 801067e:	2020      	movs	r0, #32
 8010680:	4770      	bx	lr
	...

08010684 <__i2b>:
 8010684:	b510      	push	{r4, lr}
 8010686:	460c      	mov	r4, r1
 8010688:	2101      	movs	r1, #1
 801068a:	f7ff feb9 	bl	8010400 <_Balloc>
 801068e:	4602      	mov	r2, r0
 8010690:	b928      	cbnz	r0, 801069e <__i2b+0x1a>
 8010692:	4b05      	ldr	r3, [pc, #20]	; (80106a8 <__i2b+0x24>)
 8010694:	4805      	ldr	r0, [pc, #20]	; (80106ac <__i2b+0x28>)
 8010696:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801069a:	f000 fe3f 	bl	801131c <__assert_func>
 801069e:	2301      	movs	r3, #1
 80106a0:	6144      	str	r4, [r0, #20]
 80106a2:	6103      	str	r3, [r0, #16]
 80106a4:	bd10      	pop	{r4, pc}
 80106a6:	bf00      	nop
 80106a8:	0801308f 	.word	0x0801308f
 80106ac:	0801311c 	.word	0x0801311c

080106b0 <__multiply>:
 80106b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106b4:	4691      	mov	r9, r2
 80106b6:	690a      	ldr	r2, [r1, #16]
 80106b8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80106bc:	429a      	cmp	r2, r3
 80106be:	bfb8      	it	lt
 80106c0:	460b      	movlt	r3, r1
 80106c2:	460c      	mov	r4, r1
 80106c4:	bfbc      	itt	lt
 80106c6:	464c      	movlt	r4, r9
 80106c8:	4699      	movlt	r9, r3
 80106ca:	6927      	ldr	r7, [r4, #16]
 80106cc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80106d0:	68a3      	ldr	r3, [r4, #8]
 80106d2:	6861      	ldr	r1, [r4, #4]
 80106d4:	eb07 060a 	add.w	r6, r7, sl
 80106d8:	42b3      	cmp	r3, r6
 80106da:	b085      	sub	sp, #20
 80106dc:	bfb8      	it	lt
 80106de:	3101      	addlt	r1, #1
 80106e0:	f7ff fe8e 	bl	8010400 <_Balloc>
 80106e4:	b930      	cbnz	r0, 80106f4 <__multiply+0x44>
 80106e6:	4602      	mov	r2, r0
 80106e8:	4b44      	ldr	r3, [pc, #272]	; (80107fc <__multiply+0x14c>)
 80106ea:	4845      	ldr	r0, [pc, #276]	; (8010800 <__multiply+0x150>)
 80106ec:	f240 115d 	movw	r1, #349	; 0x15d
 80106f0:	f000 fe14 	bl	801131c <__assert_func>
 80106f4:	f100 0514 	add.w	r5, r0, #20
 80106f8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80106fc:	462b      	mov	r3, r5
 80106fe:	2200      	movs	r2, #0
 8010700:	4543      	cmp	r3, r8
 8010702:	d321      	bcc.n	8010748 <__multiply+0x98>
 8010704:	f104 0314 	add.w	r3, r4, #20
 8010708:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801070c:	f109 0314 	add.w	r3, r9, #20
 8010710:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8010714:	9202      	str	r2, [sp, #8]
 8010716:	1b3a      	subs	r2, r7, r4
 8010718:	3a15      	subs	r2, #21
 801071a:	f022 0203 	bic.w	r2, r2, #3
 801071e:	3204      	adds	r2, #4
 8010720:	f104 0115 	add.w	r1, r4, #21
 8010724:	428f      	cmp	r7, r1
 8010726:	bf38      	it	cc
 8010728:	2204      	movcc	r2, #4
 801072a:	9201      	str	r2, [sp, #4]
 801072c:	9a02      	ldr	r2, [sp, #8]
 801072e:	9303      	str	r3, [sp, #12]
 8010730:	429a      	cmp	r2, r3
 8010732:	d80c      	bhi.n	801074e <__multiply+0x9e>
 8010734:	2e00      	cmp	r6, #0
 8010736:	dd03      	ble.n	8010740 <__multiply+0x90>
 8010738:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801073c:	2b00      	cmp	r3, #0
 801073e:	d05a      	beq.n	80107f6 <__multiply+0x146>
 8010740:	6106      	str	r6, [r0, #16]
 8010742:	b005      	add	sp, #20
 8010744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010748:	f843 2b04 	str.w	r2, [r3], #4
 801074c:	e7d8      	b.n	8010700 <__multiply+0x50>
 801074e:	f8b3 a000 	ldrh.w	sl, [r3]
 8010752:	f1ba 0f00 	cmp.w	sl, #0
 8010756:	d024      	beq.n	80107a2 <__multiply+0xf2>
 8010758:	f104 0e14 	add.w	lr, r4, #20
 801075c:	46a9      	mov	r9, r5
 801075e:	f04f 0c00 	mov.w	ip, #0
 8010762:	f85e 2b04 	ldr.w	r2, [lr], #4
 8010766:	f8d9 1000 	ldr.w	r1, [r9]
 801076a:	fa1f fb82 	uxth.w	fp, r2
 801076e:	b289      	uxth	r1, r1
 8010770:	fb0a 110b 	mla	r1, sl, fp, r1
 8010774:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8010778:	f8d9 2000 	ldr.w	r2, [r9]
 801077c:	4461      	add	r1, ip
 801077e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010782:	fb0a c20b 	mla	r2, sl, fp, ip
 8010786:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801078a:	b289      	uxth	r1, r1
 801078c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010790:	4577      	cmp	r7, lr
 8010792:	f849 1b04 	str.w	r1, [r9], #4
 8010796:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801079a:	d8e2      	bhi.n	8010762 <__multiply+0xb2>
 801079c:	9a01      	ldr	r2, [sp, #4]
 801079e:	f845 c002 	str.w	ip, [r5, r2]
 80107a2:	9a03      	ldr	r2, [sp, #12]
 80107a4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80107a8:	3304      	adds	r3, #4
 80107aa:	f1b9 0f00 	cmp.w	r9, #0
 80107ae:	d020      	beq.n	80107f2 <__multiply+0x142>
 80107b0:	6829      	ldr	r1, [r5, #0]
 80107b2:	f104 0c14 	add.w	ip, r4, #20
 80107b6:	46ae      	mov	lr, r5
 80107b8:	f04f 0a00 	mov.w	sl, #0
 80107bc:	f8bc b000 	ldrh.w	fp, [ip]
 80107c0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80107c4:	fb09 220b 	mla	r2, r9, fp, r2
 80107c8:	4492      	add	sl, r2
 80107ca:	b289      	uxth	r1, r1
 80107cc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80107d0:	f84e 1b04 	str.w	r1, [lr], #4
 80107d4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80107d8:	f8be 1000 	ldrh.w	r1, [lr]
 80107dc:	0c12      	lsrs	r2, r2, #16
 80107de:	fb09 1102 	mla	r1, r9, r2, r1
 80107e2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80107e6:	4567      	cmp	r7, ip
 80107e8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80107ec:	d8e6      	bhi.n	80107bc <__multiply+0x10c>
 80107ee:	9a01      	ldr	r2, [sp, #4]
 80107f0:	50a9      	str	r1, [r5, r2]
 80107f2:	3504      	adds	r5, #4
 80107f4:	e79a      	b.n	801072c <__multiply+0x7c>
 80107f6:	3e01      	subs	r6, #1
 80107f8:	e79c      	b.n	8010734 <__multiply+0x84>
 80107fa:	bf00      	nop
 80107fc:	0801308f 	.word	0x0801308f
 8010800:	0801311c 	.word	0x0801311c

08010804 <__pow5mult>:
 8010804:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010808:	4615      	mov	r5, r2
 801080a:	f012 0203 	ands.w	r2, r2, #3
 801080e:	4606      	mov	r6, r0
 8010810:	460f      	mov	r7, r1
 8010812:	d007      	beq.n	8010824 <__pow5mult+0x20>
 8010814:	4c25      	ldr	r4, [pc, #148]	; (80108ac <__pow5mult+0xa8>)
 8010816:	3a01      	subs	r2, #1
 8010818:	2300      	movs	r3, #0
 801081a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801081e:	f7ff fe51 	bl	80104c4 <__multadd>
 8010822:	4607      	mov	r7, r0
 8010824:	10ad      	asrs	r5, r5, #2
 8010826:	d03d      	beq.n	80108a4 <__pow5mult+0xa0>
 8010828:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801082a:	b97c      	cbnz	r4, 801084c <__pow5mult+0x48>
 801082c:	2010      	movs	r0, #16
 801082e:	f7ff fdcd 	bl	80103cc <malloc>
 8010832:	4602      	mov	r2, r0
 8010834:	6270      	str	r0, [r6, #36]	; 0x24
 8010836:	b928      	cbnz	r0, 8010844 <__pow5mult+0x40>
 8010838:	4b1d      	ldr	r3, [pc, #116]	; (80108b0 <__pow5mult+0xac>)
 801083a:	481e      	ldr	r0, [pc, #120]	; (80108b4 <__pow5mult+0xb0>)
 801083c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8010840:	f000 fd6c 	bl	801131c <__assert_func>
 8010844:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010848:	6004      	str	r4, [r0, #0]
 801084a:	60c4      	str	r4, [r0, #12]
 801084c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010850:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010854:	b94c      	cbnz	r4, 801086a <__pow5mult+0x66>
 8010856:	f240 2171 	movw	r1, #625	; 0x271
 801085a:	4630      	mov	r0, r6
 801085c:	f7ff ff12 	bl	8010684 <__i2b>
 8010860:	2300      	movs	r3, #0
 8010862:	f8c8 0008 	str.w	r0, [r8, #8]
 8010866:	4604      	mov	r4, r0
 8010868:	6003      	str	r3, [r0, #0]
 801086a:	f04f 0900 	mov.w	r9, #0
 801086e:	07eb      	lsls	r3, r5, #31
 8010870:	d50a      	bpl.n	8010888 <__pow5mult+0x84>
 8010872:	4639      	mov	r1, r7
 8010874:	4622      	mov	r2, r4
 8010876:	4630      	mov	r0, r6
 8010878:	f7ff ff1a 	bl	80106b0 <__multiply>
 801087c:	4639      	mov	r1, r7
 801087e:	4680      	mov	r8, r0
 8010880:	4630      	mov	r0, r6
 8010882:	f7ff fdfd 	bl	8010480 <_Bfree>
 8010886:	4647      	mov	r7, r8
 8010888:	106d      	asrs	r5, r5, #1
 801088a:	d00b      	beq.n	80108a4 <__pow5mult+0xa0>
 801088c:	6820      	ldr	r0, [r4, #0]
 801088e:	b938      	cbnz	r0, 80108a0 <__pow5mult+0x9c>
 8010890:	4622      	mov	r2, r4
 8010892:	4621      	mov	r1, r4
 8010894:	4630      	mov	r0, r6
 8010896:	f7ff ff0b 	bl	80106b0 <__multiply>
 801089a:	6020      	str	r0, [r4, #0]
 801089c:	f8c0 9000 	str.w	r9, [r0]
 80108a0:	4604      	mov	r4, r0
 80108a2:	e7e4      	b.n	801086e <__pow5mult+0x6a>
 80108a4:	4638      	mov	r0, r7
 80108a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80108aa:	bf00      	nop
 80108ac:	08013268 	.word	0x08013268
 80108b0:	0801301d 	.word	0x0801301d
 80108b4:	0801311c 	.word	0x0801311c

080108b8 <__lshift>:
 80108b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80108bc:	460c      	mov	r4, r1
 80108be:	6849      	ldr	r1, [r1, #4]
 80108c0:	6923      	ldr	r3, [r4, #16]
 80108c2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80108c6:	68a3      	ldr	r3, [r4, #8]
 80108c8:	4607      	mov	r7, r0
 80108ca:	4691      	mov	r9, r2
 80108cc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80108d0:	f108 0601 	add.w	r6, r8, #1
 80108d4:	42b3      	cmp	r3, r6
 80108d6:	db0b      	blt.n	80108f0 <__lshift+0x38>
 80108d8:	4638      	mov	r0, r7
 80108da:	f7ff fd91 	bl	8010400 <_Balloc>
 80108de:	4605      	mov	r5, r0
 80108e0:	b948      	cbnz	r0, 80108f6 <__lshift+0x3e>
 80108e2:	4602      	mov	r2, r0
 80108e4:	4b2a      	ldr	r3, [pc, #168]	; (8010990 <__lshift+0xd8>)
 80108e6:	482b      	ldr	r0, [pc, #172]	; (8010994 <__lshift+0xdc>)
 80108e8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80108ec:	f000 fd16 	bl	801131c <__assert_func>
 80108f0:	3101      	adds	r1, #1
 80108f2:	005b      	lsls	r3, r3, #1
 80108f4:	e7ee      	b.n	80108d4 <__lshift+0x1c>
 80108f6:	2300      	movs	r3, #0
 80108f8:	f100 0114 	add.w	r1, r0, #20
 80108fc:	f100 0210 	add.w	r2, r0, #16
 8010900:	4618      	mov	r0, r3
 8010902:	4553      	cmp	r3, sl
 8010904:	db37      	blt.n	8010976 <__lshift+0xbe>
 8010906:	6920      	ldr	r0, [r4, #16]
 8010908:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801090c:	f104 0314 	add.w	r3, r4, #20
 8010910:	f019 091f 	ands.w	r9, r9, #31
 8010914:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010918:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801091c:	d02f      	beq.n	801097e <__lshift+0xc6>
 801091e:	f1c9 0e20 	rsb	lr, r9, #32
 8010922:	468a      	mov	sl, r1
 8010924:	f04f 0c00 	mov.w	ip, #0
 8010928:	681a      	ldr	r2, [r3, #0]
 801092a:	fa02 f209 	lsl.w	r2, r2, r9
 801092e:	ea42 020c 	orr.w	r2, r2, ip
 8010932:	f84a 2b04 	str.w	r2, [sl], #4
 8010936:	f853 2b04 	ldr.w	r2, [r3], #4
 801093a:	4298      	cmp	r0, r3
 801093c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8010940:	d8f2      	bhi.n	8010928 <__lshift+0x70>
 8010942:	1b03      	subs	r3, r0, r4
 8010944:	3b15      	subs	r3, #21
 8010946:	f023 0303 	bic.w	r3, r3, #3
 801094a:	3304      	adds	r3, #4
 801094c:	f104 0215 	add.w	r2, r4, #21
 8010950:	4290      	cmp	r0, r2
 8010952:	bf38      	it	cc
 8010954:	2304      	movcc	r3, #4
 8010956:	f841 c003 	str.w	ip, [r1, r3]
 801095a:	f1bc 0f00 	cmp.w	ip, #0
 801095e:	d001      	beq.n	8010964 <__lshift+0xac>
 8010960:	f108 0602 	add.w	r6, r8, #2
 8010964:	3e01      	subs	r6, #1
 8010966:	4638      	mov	r0, r7
 8010968:	612e      	str	r6, [r5, #16]
 801096a:	4621      	mov	r1, r4
 801096c:	f7ff fd88 	bl	8010480 <_Bfree>
 8010970:	4628      	mov	r0, r5
 8010972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010976:	f842 0f04 	str.w	r0, [r2, #4]!
 801097a:	3301      	adds	r3, #1
 801097c:	e7c1      	b.n	8010902 <__lshift+0x4a>
 801097e:	3904      	subs	r1, #4
 8010980:	f853 2b04 	ldr.w	r2, [r3], #4
 8010984:	f841 2f04 	str.w	r2, [r1, #4]!
 8010988:	4298      	cmp	r0, r3
 801098a:	d8f9      	bhi.n	8010980 <__lshift+0xc8>
 801098c:	e7ea      	b.n	8010964 <__lshift+0xac>
 801098e:	bf00      	nop
 8010990:	0801308f 	.word	0x0801308f
 8010994:	0801311c 	.word	0x0801311c

08010998 <__mcmp>:
 8010998:	b530      	push	{r4, r5, lr}
 801099a:	6902      	ldr	r2, [r0, #16]
 801099c:	690c      	ldr	r4, [r1, #16]
 801099e:	1b12      	subs	r2, r2, r4
 80109a0:	d10e      	bne.n	80109c0 <__mcmp+0x28>
 80109a2:	f100 0314 	add.w	r3, r0, #20
 80109a6:	3114      	adds	r1, #20
 80109a8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80109ac:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80109b0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80109b4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80109b8:	42a5      	cmp	r5, r4
 80109ba:	d003      	beq.n	80109c4 <__mcmp+0x2c>
 80109bc:	d305      	bcc.n	80109ca <__mcmp+0x32>
 80109be:	2201      	movs	r2, #1
 80109c0:	4610      	mov	r0, r2
 80109c2:	bd30      	pop	{r4, r5, pc}
 80109c4:	4283      	cmp	r3, r0
 80109c6:	d3f3      	bcc.n	80109b0 <__mcmp+0x18>
 80109c8:	e7fa      	b.n	80109c0 <__mcmp+0x28>
 80109ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80109ce:	e7f7      	b.n	80109c0 <__mcmp+0x28>

080109d0 <__mdiff>:
 80109d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109d4:	460c      	mov	r4, r1
 80109d6:	4606      	mov	r6, r0
 80109d8:	4611      	mov	r1, r2
 80109da:	4620      	mov	r0, r4
 80109dc:	4690      	mov	r8, r2
 80109de:	f7ff ffdb 	bl	8010998 <__mcmp>
 80109e2:	1e05      	subs	r5, r0, #0
 80109e4:	d110      	bne.n	8010a08 <__mdiff+0x38>
 80109e6:	4629      	mov	r1, r5
 80109e8:	4630      	mov	r0, r6
 80109ea:	f7ff fd09 	bl	8010400 <_Balloc>
 80109ee:	b930      	cbnz	r0, 80109fe <__mdiff+0x2e>
 80109f0:	4b3a      	ldr	r3, [pc, #232]	; (8010adc <__mdiff+0x10c>)
 80109f2:	4602      	mov	r2, r0
 80109f4:	f240 2132 	movw	r1, #562	; 0x232
 80109f8:	4839      	ldr	r0, [pc, #228]	; (8010ae0 <__mdiff+0x110>)
 80109fa:	f000 fc8f 	bl	801131c <__assert_func>
 80109fe:	2301      	movs	r3, #1
 8010a00:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010a04:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a08:	bfa4      	itt	ge
 8010a0a:	4643      	movge	r3, r8
 8010a0c:	46a0      	movge	r8, r4
 8010a0e:	4630      	mov	r0, r6
 8010a10:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010a14:	bfa6      	itte	ge
 8010a16:	461c      	movge	r4, r3
 8010a18:	2500      	movge	r5, #0
 8010a1a:	2501      	movlt	r5, #1
 8010a1c:	f7ff fcf0 	bl	8010400 <_Balloc>
 8010a20:	b920      	cbnz	r0, 8010a2c <__mdiff+0x5c>
 8010a22:	4b2e      	ldr	r3, [pc, #184]	; (8010adc <__mdiff+0x10c>)
 8010a24:	4602      	mov	r2, r0
 8010a26:	f44f 7110 	mov.w	r1, #576	; 0x240
 8010a2a:	e7e5      	b.n	80109f8 <__mdiff+0x28>
 8010a2c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010a30:	6926      	ldr	r6, [r4, #16]
 8010a32:	60c5      	str	r5, [r0, #12]
 8010a34:	f104 0914 	add.w	r9, r4, #20
 8010a38:	f108 0514 	add.w	r5, r8, #20
 8010a3c:	f100 0e14 	add.w	lr, r0, #20
 8010a40:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8010a44:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8010a48:	f108 0210 	add.w	r2, r8, #16
 8010a4c:	46f2      	mov	sl, lr
 8010a4e:	2100      	movs	r1, #0
 8010a50:	f859 3b04 	ldr.w	r3, [r9], #4
 8010a54:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010a58:	fa1f f883 	uxth.w	r8, r3
 8010a5c:	fa11 f18b 	uxtah	r1, r1, fp
 8010a60:	0c1b      	lsrs	r3, r3, #16
 8010a62:	eba1 0808 	sub.w	r8, r1, r8
 8010a66:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010a6a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010a6e:	fa1f f888 	uxth.w	r8, r8
 8010a72:	1419      	asrs	r1, r3, #16
 8010a74:	454e      	cmp	r6, r9
 8010a76:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8010a7a:	f84a 3b04 	str.w	r3, [sl], #4
 8010a7e:	d8e7      	bhi.n	8010a50 <__mdiff+0x80>
 8010a80:	1b33      	subs	r3, r6, r4
 8010a82:	3b15      	subs	r3, #21
 8010a84:	f023 0303 	bic.w	r3, r3, #3
 8010a88:	3304      	adds	r3, #4
 8010a8a:	3415      	adds	r4, #21
 8010a8c:	42a6      	cmp	r6, r4
 8010a8e:	bf38      	it	cc
 8010a90:	2304      	movcc	r3, #4
 8010a92:	441d      	add	r5, r3
 8010a94:	4473      	add	r3, lr
 8010a96:	469e      	mov	lr, r3
 8010a98:	462e      	mov	r6, r5
 8010a9a:	4566      	cmp	r6, ip
 8010a9c:	d30e      	bcc.n	8010abc <__mdiff+0xec>
 8010a9e:	f10c 0203 	add.w	r2, ip, #3
 8010aa2:	1b52      	subs	r2, r2, r5
 8010aa4:	f022 0203 	bic.w	r2, r2, #3
 8010aa8:	3d03      	subs	r5, #3
 8010aaa:	45ac      	cmp	ip, r5
 8010aac:	bf38      	it	cc
 8010aae:	2200      	movcc	r2, #0
 8010ab0:	441a      	add	r2, r3
 8010ab2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8010ab6:	b17b      	cbz	r3, 8010ad8 <__mdiff+0x108>
 8010ab8:	6107      	str	r7, [r0, #16]
 8010aba:	e7a3      	b.n	8010a04 <__mdiff+0x34>
 8010abc:	f856 8b04 	ldr.w	r8, [r6], #4
 8010ac0:	fa11 f288 	uxtah	r2, r1, r8
 8010ac4:	1414      	asrs	r4, r2, #16
 8010ac6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8010aca:	b292      	uxth	r2, r2
 8010acc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8010ad0:	f84e 2b04 	str.w	r2, [lr], #4
 8010ad4:	1421      	asrs	r1, r4, #16
 8010ad6:	e7e0      	b.n	8010a9a <__mdiff+0xca>
 8010ad8:	3f01      	subs	r7, #1
 8010ada:	e7ea      	b.n	8010ab2 <__mdiff+0xe2>
 8010adc:	0801308f 	.word	0x0801308f
 8010ae0:	0801311c 	.word	0x0801311c

08010ae4 <__ulp>:
 8010ae4:	b082      	sub	sp, #8
 8010ae6:	ed8d 0b00 	vstr	d0, [sp]
 8010aea:	9b01      	ldr	r3, [sp, #4]
 8010aec:	4912      	ldr	r1, [pc, #72]	; (8010b38 <__ulp+0x54>)
 8010aee:	4019      	ands	r1, r3
 8010af0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8010af4:	2900      	cmp	r1, #0
 8010af6:	dd05      	ble.n	8010b04 <__ulp+0x20>
 8010af8:	2200      	movs	r2, #0
 8010afa:	460b      	mov	r3, r1
 8010afc:	ec43 2b10 	vmov	d0, r2, r3
 8010b00:	b002      	add	sp, #8
 8010b02:	4770      	bx	lr
 8010b04:	4249      	negs	r1, r1
 8010b06:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8010b0a:	ea4f 5021 	mov.w	r0, r1, asr #20
 8010b0e:	f04f 0200 	mov.w	r2, #0
 8010b12:	f04f 0300 	mov.w	r3, #0
 8010b16:	da04      	bge.n	8010b22 <__ulp+0x3e>
 8010b18:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8010b1c:	fa41 f300 	asr.w	r3, r1, r0
 8010b20:	e7ec      	b.n	8010afc <__ulp+0x18>
 8010b22:	f1a0 0114 	sub.w	r1, r0, #20
 8010b26:	291e      	cmp	r1, #30
 8010b28:	bfda      	itte	le
 8010b2a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8010b2e:	fa20 f101 	lsrle.w	r1, r0, r1
 8010b32:	2101      	movgt	r1, #1
 8010b34:	460a      	mov	r2, r1
 8010b36:	e7e1      	b.n	8010afc <__ulp+0x18>
 8010b38:	7ff00000 	.word	0x7ff00000

08010b3c <__b2d>:
 8010b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b3e:	6905      	ldr	r5, [r0, #16]
 8010b40:	f100 0714 	add.w	r7, r0, #20
 8010b44:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8010b48:	1f2e      	subs	r6, r5, #4
 8010b4a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8010b4e:	4620      	mov	r0, r4
 8010b50:	f7ff fd48 	bl	80105e4 <__hi0bits>
 8010b54:	f1c0 0320 	rsb	r3, r0, #32
 8010b58:	280a      	cmp	r0, #10
 8010b5a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8010bd8 <__b2d+0x9c>
 8010b5e:	600b      	str	r3, [r1, #0]
 8010b60:	dc14      	bgt.n	8010b8c <__b2d+0x50>
 8010b62:	f1c0 0e0b 	rsb	lr, r0, #11
 8010b66:	fa24 f10e 	lsr.w	r1, r4, lr
 8010b6a:	42b7      	cmp	r7, r6
 8010b6c:	ea41 030c 	orr.w	r3, r1, ip
 8010b70:	bf34      	ite	cc
 8010b72:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8010b76:	2100      	movcs	r1, #0
 8010b78:	3015      	adds	r0, #21
 8010b7a:	fa04 f000 	lsl.w	r0, r4, r0
 8010b7e:	fa21 f10e 	lsr.w	r1, r1, lr
 8010b82:	ea40 0201 	orr.w	r2, r0, r1
 8010b86:	ec43 2b10 	vmov	d0, r2, r3
 8010b8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010b8c:	42b7      	cmp	r7, r6
 8010b8e:	bf3a      	itte	cc
 8010b90:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8010b94:	f1a5 0608 	subcc.w	r6, r5, #8
 8010b98:	2100      	movcs	r1, #0
 8010b9a:	380b      	subs	r0, #11
 8010b9c:	d017      	beq.n	8010bce <__b2d+0x92>
 8010b9e:	f1c0 0c20 	rsb	ip, r0, #32
 8010ba2:	fa04 f500 	lsl.w	r5, r4, r0
 8010ba6:	42be      	cmp	r6, r7
 8010ba8:	fa21 f40c 	lsr.w	r4, r1, ip
 8010bac:	ea45 0504 	orr.w	r5, r5, r4
 8010bb0:	bf8c      	ite	hi
 8010bb2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8010bb6:	2400      	movls	r4, #0
 8010bb8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8010bbc:	fa01 f000 	lsl.w	r0, r1, r0
 8010bc0:	fa24 f40c 	lsr.w	r4, r4, ip
 8010bc4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8010bc8:	ea40 0204 	orr.w	r2, r0, r4
 8010bcc:	e7db      	b.n	8010b86 <__b2d+0x4a>
 8010bce:	ea44 030c 	orr.w	r3, r4, ip
 8010bd2:	460a      	mov	r2, r1
 8010bd4:	e7d7      	b.n	8010b86 <__b2d+0x4a>
 8010bd6:	bf00      	nop
 8010bd8:	3ff00000 	.word	0x3ff00000

08010bdc <__d2b>:
 8010bdc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010be0:	4689      	mov	r9, r1
 8010be2:	2101      	movs	r1, #1
 8010be4:	ec57 6b10 	vmov	r6, r7, d0
 8010be8:	4690      	mov	r8, r2
 8010bea:	f7ff fc09 	bl	8010400 <_Balloc>
 8010bee:	4604      	mov	r4, r0
 8010bf0:	b930      	cbnz	r0, 8010c00 <__d2b+0x24>
 8010bf2:	4602      	mov	r2, r0
 8010bf4:	4b25      	ldr	r3, [pc, #148]	; (8010c8c <__d2b+0xb0>)
 8010bf6:	4826      	ldr	r0, [pc, #152]	; (8010c90 <__d2b+0xb4>)
 8010bf8:	f240 310a 	movw	r1, #778	; 0x30a
 8010bfc:	f000 fb8e 	bl	801131c <__assert_func>
 8010c00:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8010c04:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010c08:	bb35      	cbnz	r5, 8010c58 <__d2b+0x7c>
 8010c0a:	2e00      	cmp	r6, #0
 8010c0c:	9301      	str	r3, [sp, #4]
 8010c0e:	d028      	beq.n	8010c62 <__d2b+0x86>
 8010c10:	4668      	mov	r0, sp
 8010c12:	9600      	str	r6, [sp, #0]
 8010c14:	f7ff fd06 	bl	8010624 <__lo0bits>
 8010c18:	9900      	ldr	r1, [sp, #0]
 8010c1a:	b300      	cbz	r0, 8010c5e <__d2b+0x82>
 8010c1c:	9a01      	ldr	r2, [sp, #4]
 8010c1e:	f1c0 0320 	rsb	r3, r0, #32
 8010c22:	fa02 f303 	lsl.w	r3, r2, r3
 8010c26:	430b      	orrs	r3, r1
 8010c28:	40c2      	lsrs	r2, r0
 8010c2a:	6163      	str	r3, [r4, #20]
 8010c2c:	9201      	str	r2, [sp, #4]
 8010c2e:	9b01      	ldr	r3, [sp, #4]
 8010c30:	61a3      	str	r3, [r4, #24]
 8010c32:	2b00      	cmp	r3, #0
 8010c34:	bf14      	ite	ne
 8010c36:	2202      	movne	r2, #2
 8010c38:	2201      	moveq	r2, #1
 8010c3a:	6122      	str	r2, [r4, #16]
 8010c3c:	b1d5      	cbz	r5, 8010c74 <__d2b+0x98>
 8010c3e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010c42:	4405      	add	r5, r0
 8010c44:	f8c9 5000 	str.w	r5, [r9]
 8010c48:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010c4c:	f8c8 0000 	str.w	r0, [r8]
 8010c50:	4620      	mov	r0, r4
 8010c52:	b003      	add	sp, #12
 8010c54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010c58:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010c5c:	e7d5      	b.n	8010c0a <__d2b+0x2e>
 8010c5e:	6161      	str	r1, [r4, #20]
 8010c60:	e7e5      	b.n	8010c2e <__d2b+0x52>
 8010c62:	a801      	add	r0, sp, #4
 8010c64:	f7ff fcde 	bl	8010624 <__lo0bits>
 8010c68:	9b01      	ldr	r3, [sp, #4]
 8010c6a:	6163      	str	r3, [r4, #20]
 8010c6c:	2201      	movs	r2, #1
 8010c6e:	6122      	str	r2, [r4, #16]
 8010c70:	3020      	adds	r0, #32
 8010c72:	e7e3      	b.n	8010c3c <__d2b+0x60>
 8010c74:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010c78:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010c7c:	f8c9 0000 	str.w	r0, [r9]
 8010c80:	6918      	ldr	r0, [r3, #16]
 8010c82:	f7ff fcaf 	bl	80105e4 <__hi0bits>
 8010c86:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010c8a:	e7df      	b.n	8010c4c <__d2b+0x70>
 8010c8c:	0801308f 	.word	0x0801308f
 8010c90:	0801311c 	.word	0x0801311c

08010c94 <__ratio>:
 8010c94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c98:	4688      	mov	r8, r1
 8010c9a:	4669      	mov	r1, sp
 8010c9c:	4681      	mov	r9, r0
 8010c9e:	f7ff ff4d 	bl	8010b3c <__b2d>
 8010ca2:	a901      	add	r1, sp, #4
 8010ca4:	4640      	mov	r0, r8
 8010ca6:	ec55 4b10 	vmov	r4, r5, d0
 8010caa:	f7ff ff47 	bl	8010b3c <__b2d>
 8010cae:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010cb2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8010cb6:	eba3 0c02 	sub.w	ip, r3, r2
 8010cba:	e9dd 3200 	ldrd	r3, r2, [sp]
 8010cbe:	1a9b      	subs	r3, r3, r2
 8010cc0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8010cc4:	ec51 0b10 	vmov	r0, r1, d0
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	bfd6      	itet	le
 8010ccc:	460a      	movle	r2, r1
 8010cce:	462a      	movgt	r2, r5
 8010cd0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8010cd4:	468b      	mov	fp, r1
 8010cd6:	462f      	mov	r7, r5
 8010cd8:	bfd4      	ite	le
 8010cda:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8010cde:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8010ce2:	4620      	mov	r0, r4
 8010ce4:	ee10 2a10 	vmov	r2, s0
 8010ce8:	465b      	mov	r3, fp
 8010cea:	4639      	mov	r1, r7
 8010cec:	f7ef fdae 	bl	800084c <__aeabi_ddiv>
 8010cf0:	ec41 0b10 	vmov	d0, r0, r1
 8010cf4:	b003      	add	sp, #12
 8010cf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010cfa <__copybits>:
 8010cfa:	3901      	subs	r1, #1
 8010cfc:	b570      	push	{r4, r5, r6, lr}
 8010cfe:	1149      	asrs	r1, r1, #5
 8010d00:	6914      	ldr	r4, [r2, #16]
 8010d02:	3101      	adds	r1, #1
 8010d04:	f102 0314 	add.w	r3, r2, #20
 8010d08:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010d0c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010d10:	1f05      	subs	r5, r0, #4
 8010d12:	42a3      	cmp	r3, r4
 8010d14:	d30c      	bcc.n	8010d30 <__copybits+0x36>
 8010d16:	1aa3      	subs	r3, r4, r2
 8010d18:	3b11      	subs	r3, #17
 8010d1a:	f023 0303 	bic.w	r3, r3, #3
 8010d1e:	3211      	adds	r2, #17
 8010d20:	42a2      	cmp	r2, r4
 8010d22:	bf88      	it	hi
 8010d24:	2300      	movhi	r3, #0
 8010d26:	4418      	add	r0, r3
 8010d28:	2300      	movs	r3, #0
 8010d2a:	4288      	cmp	r0, r1
 8010d2c:	d305      	bcc.n	8010d3a <__copybits+0x40>
 8010d2e:	bd70      	pop	{r4, r5, r6, pc}
 8010d30:	f853 6b04 	ldr.w	r6, [r3], #4
 8010d34:	f845 6f04 	str.w	r6, [r5, #4]!
 8010d38:	e7eb      	b.n	8010d12 <__copybits+0x18>
 8010d3a:	f840 3b04 	str.w	r3, [r0], #4
 8010d3e:	e7f4      	b.n	8010d2a <__copybits+0x30>

08010d40 <__any_on>:
 8010d40:	f100 0214 	add.w	r2, r0, #20
 8010d44:	6900      	ldr	r0, [r0, #16]
 8010d46:	114b      	asrs	r3, r1, #5
 8010d48:	4298      	cmp	r0, r3
 8010d4a:	b510      	push	{r4, lr}
 8010d4c:	db11      	blt.n	8010d72 <__any_on+0x32>
 8010d4e:	dd0a      	ble.n	8010d66 <__any_on+0x26>
 8010d50:	f011 011f 	ands.w	r1, r1, #31
 8010d54:	d007      	beq.n	8010d66 <__any_on+0x26>
 8010d56:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8010d5a:	fa24 f001 	lsr.w	r0, r4, r1
 8010d5e:	fa00 f101 	lsl.w	r1, r0, r1
 8010d62:	428c      	cmp	r4, r1
 8010d64:	d10b      	bne.n	8010d7e <__any_on+0x3e>
 8010d66:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010d6a:	4293      	cmp	r3, r2
 8010d6c:	d803      	bhi.n	8010d76 <__any_on+0x36>
 8010d6e:	2000      	movs	r0, #0
 8010d70:	bd10      	pop	{r4, pc}
 8010d72:	4603      	mov	r3, r0
 8010d74:	e7f7      	b.n	8010d66 <__any_on+0x26>
 8010d76:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010d7a:	2900      	cmp	r1, #0
 8010d7c:	d0f5      	beq.n	8010d6a <__any_on+0x2a>
 8010d7e:	2001      	movs	r0, #1
 8010d80:	e7f6      	b.n	8010d70 <__any_on+0x30>

08010d82 <_calloc_r>:
 8010d82:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010d84:	fba1 2402 	umull	r2, r4, r1, r2
 8010d88:	b94c      	cbnz	r4, 8010d9e <_calloc_r+0x1c>
 8010d8a:	4611      	mov	r1, r2
 8010d8c:	9201      	str	r2, [sp, #4]
 8010d8e:	f000 f87b 	bl	8010e88 <_malloc_r>
 8010d92:	9a01      	ldr	r2, [sp, #4]
 8010d94:	4605      	mov	r5, r0
 8010d96:	b930      	cbnz	r0, 8010da6 <_calloc_r+0x24>
 8010d98:	4628      	mov	r0, r5
 8010d9a:	b003      	add	sp, #12
 8010d9c:	bd30      	pop	{r4, r5, pc}
 8010d9e:	220c      	movs	r2, #12
 8010da0:	6002      	str	r2, [r0, #0]
 8010da2:	2500      	movs	r5, #0
 8010da4:	e7f8      	b.n	8010d98 <_calloc_r+0x16>
 8010da6:	4621      	mov	r1, r4
 8010da8:	f7fc fd60 	bl	800d86c <memset>
 8010dac:	e7f4      	b.n	8010d98 <_calloc_r+0x16>
	...

08010db0 <_free_r>:
 8010db0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010db2:	2900      	cmp	r1, #0
 8010db4:	d044      	beq.n	8010e40 <_free_r+0x90>
 8010db6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010dba:	9001      	str	r0, [sp, #4]
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	f1a1 0404 	sub.w	r4, r1, #4
 8010dc2:	bfb8      	it	lt
 8010dc4:	18e4      	addlt	r4, r4, r3
 8010dc6:	f000 fb15 	bl	80113f4 <__malloc_lock>
 8010dca:	4a1e      	ldr	r2, [pc, #120]	; (8010e44 <_free_r+0x94>)
 8010dcc:	9801      	ldr	r0, [sp, #4]
 8010dce:	6813      	ldr	r3, [r2, #0]
 8010dd0:	b933      	cbnz	r3, 8010de0 <_free_r+0x30>
 8010dd2:	6063      	str	r3, [r4, #4]
 8010dd4:	6014      	str	r4, [r2, #0]
 8010dd6:	b003      	add	sp, #12
 8010dd8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010ddc:	f000 bb10 	b.w	8011400 <__malloc_unlock>
 8010de0:	42a3      	cmp	r3, r4
 8010de2:	d908      	bls.n	8010df6 <_free_r+0x46>
 8010de4:	6825      	ldr	r5, [r4, #0]
 8010de6:	1961      	adds	r1, r4, r5
 8010de8:	428b      	cmp	r3, r1
 8010dea:	bf01      	itttt	eq
 8010dec:	6819      	ldreq	r1, [r3, #0]
 8010dee:	685b      	ldreq	r3, [r3, #4]
 8010df0:	1949      	addeq	r1, r1, r5
 8010df2:	6021      	streq	r1, [r4, #0]
 8010df4:	e7ed      	b.n	8010dd2 <_free_r+0x22>
 8010df6:	461a      	mov	r2, r3
 8010df8:	685b      	ldr	r3, [r3, #4]
 8010dfa:	b10b      	cbz	r3, 8010e00 <_free_r+0x50>
 8010dfc:	42a3      	cmp	r3, r4
 8010dfe:	d9fa      	bls.n	8010df6 <_free_r+0x46>
 8010e00:	6811      	ldr	r1, [r2, #0]
 8010e02:	1855      	adds	r5, r2, r1
 8010e04:	42a5      	cmp	r5, r4
 8010e06:	d10b      	bne.n	8010e20 <_free_r+0x70>
 8010e08:	6824      	ldr	r4, [r4, #0]
 8010e0a:	4421      	add	r1, r4
 8010e0c:	1854      	adds	r4, r2, r1
 8010e0e:	42a3      	cmp	r3, r4
 8010e10:	6011      	str	r1, [r2, #0]
 8010e12:	d1e0      	bne.n	8010dd6 <_free_r+0x26>
 8010e14:	681c      	ldr	r4, [r3, #0]
 8010e16:	685b      	ldr	r3, [r3, #4]
 8010e18:	6053      	str	r3, [r2, #4]
 8010e1a:	4421      	add	r1, r4
 8010e1c:	6011      	str	r1, [r2, #0]
 8010e1e:	e7da      	b.n	8010dd6 <_free_r+0x26>
 8010e20:	d902      	bls.n	8010e28 <_free_r+0x78>
 8010e22:	230c      	movs	r3, #12
 8010e24:	6003      	str	r3, [r0, #0]
 8010e26:	e7d6      	b.n	8010dd6 <_free_r+0x26>
 8010e28:	6825      	ldr	r5, [r4, #0]
 8010e2a:	1961      	adds	r1, r4, r5
 8010e2c:	428b      	cmp	r3, r1
 8010e2e:	bf04      	itt	eq
 8010e30:	6819      	ldreq	r1, [r3, #0]
 8010e32:	685b      	ldreq	r3, [r3, #4]
 8010e34:	6063      	str	r3, [r4, #4]
 8010e36:	bf04      	itt	eq
 8010e38:	1949      	addeq	r1, r1, r5
 8010e3a:	6021      	streq	r1, [r4, #0]
 8010e3c:	6054      	str	r4, [r2, #4]
 8010e3e:	e7ca      	b.n	8010dd6 <_free_r+0x26>
 8010e40:	b003      	add	sp, #12
 8010e42:	bd30      	pop	{r4, r5, pc}
 8010e44:	20002dc4 	.word	0x20002dc4

08010e48 <sbrk_aligned>:
 8010e48:	b570      	push	{r4, r5, r6, lr}
 8010e4a:	4e0e      	ldr	r6, [pc, #56]	; (8010e84 <sbrk_aligned+0x3c>)
 8010e4c:	460c      	mov	r4, r1
 8010e4e:	6831      	ldr	r1, [r6, #0]
 8010e50:	4605      	mov	r5, r0
 8010e52:	b911      	cbnz	r1, 8010e5a <sbrk_aligned+0x12>
 8010e54:	f000 f9f0 	bl	8011238 <_sbrk_r>
 8010e58:	6030      	str	r0, [r6, #0]
 8010e5a:	4621      	mov	r1, r4
 8010e5c:	4628      	mov	r0, r5
 8010e5e:	f000 f9eb 	bl	8011238 <_sbrk_r>
 8010e62:	1c43      	adds	r3, r0, #1
 8010e64:	d00a      	beq.n	8010e7c <sbrk_aligned+0x34>
 8010e66:	1cc4      	adds	r4, r0, #3
 8010e68:	f024 0403 	bic.w	r4, r4, #3
 8010e6c:	42a0      	cmp	r0, r4
 8010e6e:	d007      	beq.n	8010e80 <sbrk_aligned+0x38>
 8010e70:	1a21      	subs	r1, r4, r0
 8010e72:	4628      	mov	r0, r5
 8010e74:	f000 f9e0 	bl	8011238 <_sbrk_r>
 8010e78:	3001      	adds	r0, #1
 8010e7a:	d101      	bne.n	8010e80 <sbrk_aligned+0x38>
 8010e7c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8010e80:	4620      	mov	r0, r4
 8010e82:	bd70      	pop	{r4, r5, r6, pc}
 8010e84:	20002dc8 	.word	0x20002dc8

08010e88 <_malloc_r>:
 8010e88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e8c:	1ccd      	adds	r5, r1, #3
 8010e8e:	f025 0503 	bic.w	r5, r5, #3
 8010e92:	3508      	adds	r5, #8
 8010e94:	2d0c      	cmp	r5, #12
 8010e96:	bf38      	it	cc
 8010e98:	250c      	movcc	r5, #12
 8010e9a:	2d00      	cmp	r5, #0
 8010e9c:	4607      	mov	r7, r0
 8010e9e:	db01      	blt.n	8010ea4 <_malloc_r+0x1c>
 8010ea0:	42a9      	cmp	r1, r5
 8010ea2:	d905      	bls.n	8010eb0 <_malloc_r+0x28>
 8010ea4:	230c      	movs	r3, #12
 8010ea6:	603b      	str	r3, [r7, #0]
 8010ea8:	2600      	movs	r6, #0
 8010eaa:	4630      	mov	r0, r6
 8010eac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010eb0:	4e2e      	ldr	r6, [pc, #184]	; (8010f6c <_malloc_r+0xe4>)
 8010eb2:	f000 fa9f 	bl	80113f4 <__malloc_lock>
 8010eb6:	6833      	ldr	r3, [r6, #0]
 8010eb8:	461c      	mov	r4, r3
 8010eba:	bb34      	cbnz	r4, 8010f0a <_malloc_r+0x82>
 8010ebc:	4629      	mov	r1, r5
 8010ebe:	4638      	mov	r0, r7
 8010ec0:	f7ff ffc2 	bl	8010e48 <sbrk_aligned>
 8010ec4:	1c43      	adds	r3, r0, #1
 8010ec6:	4604      	mov	r4, r0
 8010ec8:	d14d      	bne.n	8010f66 <_malloc_r+0xde>
 8010eca:	6834      	ldr	r4, [r6, #0]
 8010ecc:	4626      	mov	r6, r4
 8010ece:	2e00      	cmp	r6, #0
 8010ed0:	d140      	bne.n	8010f54 <_malloc_r+0xcc>
 8010ed2:	6823      	ldr	r3, [r4, #0]
 8010ed4:	4631      	mov	r1, r6
 8010ed6:	4638      	mov	r0, r7
 8010ed8:	eb04 0803 	add.w	r8, r4, r3
 8010edc:	f000 f9ac 	bl	8011238 <_sbrk_r>
 8010ee0:	4580      	cmp	r8, r0
 8010ee2:	d13a      	bne.n	8010f5a <_malloc_r+0xd2>
 8010ee4:	6821      	ldr	r1, [r4, #0]
 8010ee6:	3503      	adds	r5, #3
 8010ee8:	1a6d      	subs	r5, r5, r1
 8010eea:	f025 0503 	bic.w	r5, r5, #3
 8010eee:	3508      	adds	r5, #8
 8010ef0:	2d0c      	cmp	r5, #12
 8010ef2:	bf38      	it	cc
 8010ef4:	250c      	movcc	r5, #12
 8010ef6:	4629      	mov	r1, r5
 8010ef8:	4638      	mov	r0, r7
 8010efa:	f7ff ffa5 	bl	8010e48 <sbrk_aligned>
 8010efe:	3001      	adds	r0, #1
 8010f00:	d02b      	beq.n	8010f5a <_malloc_r+0xd2>
 8010f02:	6823      	ldr	r3, [r4, #0]
 8010f04:	442b      	add	r3, r5
 8010f06:	6023      	str	r3, [r4, #0]
 8010f08:	e00e      	b.n	8010f28 <_malloc_r+0xa0>
 8010f0a:	6822      	ldr	r2, [r4, #0]
 8010f0c:	1b52      	subs	r2, r2, r5
 8010f0e:	d41e      	bmi.n	8010f4e <_malloc_r+0xc6>
 8010f10:	2a0b      	cmp	r2, #11
 8010f12:	d916      	bls.n	8010f42 <_malloc_r+0xba>
 8010f14:	1961      	adds	r1, r4, r5
 8010f16:	42a3      	cmp	r3, r4
 8010f18:	6025      	str	r5, [r4, #0]
 8010f1a:	bf18      	it	ne
 8010f1c:	6059      	strne	r1, [r3, #4]
 8010f1e:	6863      	ldr	r3, [r4, #4]
 8010f20:	bf08      	it	eq
 8010f22:	6031      	streq	r1, [r6, #0]
 8010f24:	5162      	str	r2, [r4, r5]
 8010f26:	604b      	str	r3, [r1, #4]
 8010f28:	4638      	mov	r0, r7
 8010f2a:	f104 060b 	add.w	r6, r4, #11
 8010f2e:	f000 fa67 	bl	8011400 <__malloc_unlock>
 8010f32:	f026 0607 	bic.w	r6, r6, #7
 8010f36:	1d23      	adds	r3, r4, #4
 8010f38:	1af2      	subs	r2, r6, r3
 8010f3a:	d0b6      	beq.n	8010eaa <_malloc_r+0x22>
 8010f3c:	1b9b      	subs	r3, r3, r6
 8010f3e:	50a3      	str	r3, [r4, r2]
 8010f40:	e7b3      	b.n	8010eaa <_malloc_r+0x22>
 8010f42:	6862      	ldr	r2, [r4, #4]
 8010f44:	42a3      	cmp	r3, r4
 8010f46:	bf0c      	ite	eq
 8010f48:	6032      	streq	r2, [r6, #0]
 8010f4a:	605a      	strne	r2, [r3, #4]
 8010f4c:	e7ec      	b.n	8010f28 <_malloc_r+0xa0>
 8010f4e:	4623      	mov	r3, r4
 8010f50:	6864      	ldr	r4, [r4, #4]
 8010f52:	e7b2      	b.n	8010eba <_malloc_r+0x32>
 8010f54:	4634      	mov	r4, r6
 8010f56:	6876      	ldr	r6, [r6, #4]
 8010f58:	e7b9      	b.n	8010ece <_malloc_r+0x46>
 8010f5a:	230c      	movs	r3, #12
 8010f5c:	603b      	str	r3, [r7, #0]
 8010f5e:	4638      	mov	r0, r7
 8010f60:	f000 fa4e 	bl	8011400 <__malloc_unlock>
 8010f64:	e7a1      	b.n	8010eaa <_malloc_r+0x22>
 8010f66:	6025      	str	r5, [r4, #0]
 8010f68:	e7de      	b.n	8010f28 <_malloc_r+0xa0>
 8010f6a:	bf00      	nop
 8010f6c:	20002dc4 	.word	0x20002dc4

08010f70 <__ssputs_r>:
 8010f70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010f74:	688e      	ldr	r6, [r1, #8]
 8010f76:	429e      	cmp	r6, r3
 8010f78:	4682      	mov	sl, r0
 8010f7a:	460c      	mov	r4, r1
 8010f7c:	4690      	mov	r8, r2
 8010f7e:	461f      	mov	r7, r3
 8010f80:	d838      	bhi.n	8010ff4 <__ssputs_r+0x84>
 8010f82:	898a      	ldrh	r2, [r1, #12]
 8010f84:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010f88:	d032      	beq.n	8010ff0 <__ssputs_r+0x80>
 8010f8a:	6825      	ldr	r5, [r4, #0]
 8010f8c:	6909      	ldr	r1, [r1, #16]
 8010f8e:	eba5 0901 	sub.w	r9, r5, r1
 8010f92:	6965      	ldr	r5, [r4, #20]
 8010f94:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010f98:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010f9c:	3301      	adds	r3, #1
 8010f9e:	444b      	add	r3, r9
 8010fa0:	106d      	asrs	r5, r5, #1
 8010fa2:	429d      	cmp	r5, r3
 8010fa4:	bf38      	it	cc
 8010fa6:	461d      	movcc	r5, r3
 8010fa8:	0553      	lsls	r3, r2, #21
 8010faa:	d531      	bpl.n	8011010 <__ssputs_r+0xa0>
 8010fac:	4629      	mov	r1, r5
 8010fae:	f7ff ff6b 	bl	8010e88 <_malloc_r>
 8010fb2:	4606      	mov	r6, r0
 8010fb4:	b950      	cbnz	r0, 8010fcc <__ssputs_r+0x5c>
 8010fb6:	230c      	movs	r3, #12
 8010fb8:	f8ca 3000 	str.w	r3, [sl]
 8010fbc:	89a3      	ldrh	r3, [r4, #12]
 8010fbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010fc2:	81a3      	strh	r3, [r4, #12]
 8010fc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010fc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010fcc:	6921      	ldr	r1, [r4, #16]
 8010fce:	464a      	mov	r2, r9
 8010fd0:	f7fc fc3e 	bl	800d850 <memcpy>
 8010fd4:	89a3      	ldrh	r3, [r4, #12]
 8010fd6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010fda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010fde:	81a3      	strh	r3, [r4, #12]
 8010fe0:	6126      	str	r6, [r4, #16]
 8010fe2:	6165      	str	r5, [r4, #20]
 8010fe4:	444e      	add	r6, r9
 8010fe6:	eba5 0509 	sub.w	r5, r5, r9
 8010fea:	6026      	str	r6, [r4, #0]
 8010fec:	60a5      	str	r5, [r4, #8]
 8010fee:	463e      	mov	r6, r7
 8010ff0:	42be      	cmp	r6, r7
 8010ff2:	d900      	bls.n	8010ff6 <__ssputs_r+0x86>
 8010ff4:	463e      	mov	r6, r7
 8010ff6:	6820      	ldr	r0, [r4, #0]
 8010ff8:	4632      	mov	r2, r6
 8010ffa:	4641      	mov	r1, r8
 8010ffc:	f000 f9e0 	bl	80113c0 <memmove>
 8011000:	68a3      	ldr	r3, [r4, #8]
 8011002:	1b9b      	subs	r3, r3, r6
 8011004:	60a3      	str	r3, [r4, #8]
 8011006:	6823      	ldr	r3, [r4, #0]
 8011008:	4433      	add	r3, r6
 801100a:	6023      	str	r3, [r4, #0]
 801100c:	2000      	movs	r0, #0
 801100e:	e7db      	b.n	8010fc8 <__ssputs_r+0x58>
 8011010:	462a      	mov	r2, r5
 8011012:	f000 f9fb 	bl	801140c <_realloc_r>
 8011016:	4606      	mov	r6, r0
 8011018:	2800      	cmp	r0, #0
 801101a:	d1e1      	bne.n	8010fe0 <__ssputs_r+0x70>
 801101c:	6921      	ldr	r1, [r4, #16]
 801101e:	4650      	mov	r0, sl
 8011020:	f7ff fec6 	bl	8010db0 <_free_r>
 8011024:	e7c7      	b.n	8010fb6 <__ssputs_r+0x46>
	...

08011028 <_svfiprintf_r>:
 8011028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801102c:	4698      	mov	r8, r3
 801102e:	898b      	ldrh	r3, [r1, #12]
 8011030:	061b      	lsls	r3, r3, #24
 8011032:	b09d      	sub	sp, #116	; 0x74
 8011034:	4607      	mov	r7, r0
 8011036:	460d      	mov	r5, r1
 8011038:	4614      	mov	r4, r2
 801103a:	d50e      	bpl.n	801105a <_svfiprintf_r+0x32>
 801103c:	690b      	ldr	r3, [r1, #16]
 801103e:	b963      	cbnz	r3, 801105a <_svfiprintf_r+0x32>
 8011040:	2140      	movs	r1, #64	; 0x40
 8011042:	f7ff ff21 	bl	8010e88 <_malloc_r>
 8011046:	6028      	str	r0, [r5, #0]
 8011048:	6128      	str	r0, [r5, #16]
 801104a:	b920      	cbnz	r0, 8011056 <_svfiprintf_r+0x2e>
 801104c:	230c      	movs	r3, #12
 801104e:	603b      	str	r3, [r7, #0]
 8011050:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011054:	e0d1      	b.n	80111fa <_svfiprintf_r+0x1d2>
 8011056:	2340      	movs	r3, #64	; 0x40
 8011058:	616b      	str	r3, [r5, #20]
 801105a:	2300      	movs	r3, #0
 801105c:	9309      	str	r3, [sp, #36]	; 0x24
 801105e:	2320      	movs	r3, #32
 8011060:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011064:	f8cd 800c 	str.w	r8, [sp, #12]
 8011068:	2330      	movs	r3, #48	; 0x30
 801106a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8011214 <_svfiprintf_r+0x1ec>
 801106e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011072:	f04f 0901 	mov.w	r9, #1
 8011076:	4623      	mov	r3, r4
 8011078:	469a      	mov	sl, r3
 801107a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801107e:	b10a      	cbz	r2, 8011084 <_svfiprintf_r+0x5c>
 8011080:	2a25      	cmp	r2, #37	; 0x25
 8011082:	d1f9      	bne.n	8011078 <_svfiprintf_r+0x50>
 8011084:	ebba 0b04 	subs.w	fp, sl, r4
 8011088:	d00b      	beq.n	80110a2 <_svfiprintf_r+0x7a>
 801108a:	465b      	mov	r3, fp
 801108c:	4622      	mov	r2, r4
 801108e:	4629      	mov	r1, r5
 8011090:	4638      	mov	r0, r7
 8011092:	f7ff ff6d 	bl	8010f70 <__ssputs_r>
 8011096:	3001      	adds	r0, #1
 8011098:	f000 80aa 	beq.w	80111f0 <_svfiprintf_r+0x1c8>
 801109c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801109e:	445a      	add	r2, fp
 80110a0:	9209      	str	r2, [sp, #36]	; 0x24
 80110a2:	f89a 3000 	ldrb.w	r3, [sl]
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	f000 80a2 	beq.w	80111f0 <_svfiprintf_r+0x1c8>
 80110ac:	2300      	movs	r3, #0
 80110ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80110b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80110b6:	f10a 0a01 	add.w	sl, sl, #1
 80110ba:	9304      	str	r3, [sp, #16]
 80110bc:	9307      	str	r3, [sp, #28]
 80110be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80110c2:	931a      	str	r3, [sp, #104]	; 0x68
 80110c4:	4654      	mov	r4, sl
 80110c6:	2205      	movs	r2, #5
 80110c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80110cc:	4851      	ldr	r0, [pc, #324]	; (8011214 <_svfiprintf_r+0x1ec>)
 80110ce:	f7ef f887 	bl	80001e0 <memchr>
 80110d2:	9a04      	ldr	r2, [sp, #16]
 80110d4:	b9d8      	cbnz	r0, 801110e <_svfiprintf_r+0xe6>
 80110d6:	06d0      	lsls	r0, r2, #27
 80110d8:	bf44      	itt	mi
 80110da:	2320      	movmi	r3, #32
 80110dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80110e0:	0711      	lsls	r1, r2, #28
 80110e2:	bf44      	itt	mi
 80110e4:	232b      	movmi	r3, #43	; 0x2b
 80110e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80110ea:	f89a 3000 	ldrb.w	r3, [sl]
 80110ee:	2b2a      	cmp	r3, #42	; 0x2a
 80110f0:	d015      	beq.n	801111e <_svfiprintf_r+0xf6>
 80110f2:	9a07      	ldr	r2, [sp, #28]
 80110f4:	4654      	mov	r4, sl
 80110f6:	2000      	movs	r0, #0
 80110f8:	f04f 0c0a 	mov.w	ip, #10
 80110fc:	4621      	mov	r1, r4
 80110fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011102:	3b30      	subs	r3, #48	; 0x30
 8011104:	2b09      	cmp	r3, #9
 8011106:	d94e      	bls.n	80111a6 <_svfiprintf_r+0x17e>
 8011108:	b1b0      	cbz	r0, 8011138 <_svfiprintf_r+0x110>
 801110a:	9207      	str	r2, [sp, #28]
 801110c:	e014      	b.n	8011138 <_svfiprintf_r+0x110>
 801110e:	eba0 0308 	sub.w	r3, r0, r8
 8011112:	fa09 f303 	lsl.w	r3, r9, r3
 8011116:	4313      	orrs	r3, r2
 8011118:	9304      	str	r3, [sp, #16]
 801111a:	46a2      	mov	sl, r4
 801111c:	e7d2      	b.n	80110c4 <_svfiprintf_r+0x9c>
 801111e:	9b03      	ldr	r3, [sp, #12]
 8011120:	1d19      	adds	r1, r3, #4
 8011122:	681b      	ldr	r3, [r3, #0]
 8011124:	9103      	str	r1, [sp, #12]
 8011126:	2b00      	cmp	r3, #0
 8011128:	bfbb      	ittet	lt
 801112a:	425b      	neglt	r3, r3
 801112c:	f042 0202 	orrlt.w	r2, r2, #2
 8011130:	9307      	strge	r3, [sp, #28]
 8011132:	9307      	strlt	r3, [sp, #28]
 8011134:	bfb8      	it	lt
 8011136:	9204      	strlt	r2, [sp, #16]
 8011138:	7823      	ldrb	r3, [r4, #0]
 801113a:	2b2e      	cmp	r3, #46	; 0x2e
 801113c:	d10c      	bne.n	8011158 <_svfiprintf_r+0x130>
 801113e:	7863      	ldrb	r3, [r4, #1]
 8011140:	2b2a      	cmp	r3, #42	; 0x2a
 8011142:	d135      	bne.n	80111b0 <_svfiprintf_r+0x188>
 8011144:	9b03      	ldr	r3, [sp, #12]
 8011146:	1d1a      	adds	r2, r3, #4
 8011148:	681b      	ldr	r3, [r3, #0]
 801114a:	9203      	str	r2, [sp, #12]
 801114c:	2b00      	cmp	r3, #0
 801114e:	bfb8      	it	lt
 8011150:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8011154:	3402      	adds	r4, #2
 8011156:	9305      	str	r3, [sp, #20]
 8011158:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8011224 <_svfiprintf_r+0x1fc>
 801115c:	7821      	ldrb	r1, [r4, #0]
 801115e:	2203      	movs	r2, #3
 8011160:	4650      	mov	r0, sl
 8011162:	f7ef f83d 	bl	80001e0 <memchr>
 8011166:	b140      	cbz	r0, 801117a <_svfiprintf_r+0x152>
 8011168:	2340      	movs	r3, #64	; 0x40
 801116a:	eba0 000a 	sub.w	r0, r0, sl
 801116e:	fa03 f000 	lsl.w	r0, r3, r0
 8011172:	9b04      	ldr	r3, [sp, #16]
 8011174:	4303      	orrs	r3, r0
 8011176:	3401      	adds	r4, #1
 8011178:	9304      	str	r3, [sp, #16]
 801117a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801117e:	4826      	ldr	r0, [pc, #152]	; (8011218 <_svfiprintf_r+0x1f0>)
 8011180:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011184:	2206      	movs	r2, #6
 8011186:	f7ef f82b 	bl	80001e0 <memchr>
 801118a:	2800      	cmp	r0, #0
 801118c:	d038      	beq.n	8011200 <_svfiprintf_r+0x1d8>
 801118e:	4b23      	ldr	r3, [pc, #140]	; (801121c <_svfiprintf_r+0x1f4>)
 8011190:	bb1b      	cbnz	r3, 80111da <_svfiprintf_r+0x1b2>
 8011192:	9b03      	ldr	r3, [sp, #12]
 8011194:	3307      	adds	r3, #7
 8011196:	f023 0307 	bic.w	r3, r3, #7
 801119a:	3308      	adds	r3, #8
 801119c:	9303      	str	r3, [sp, #12]
 801119e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80111a0:	4433      	add	r3, r6
 80111a2:	9309      	str	r3, [sp, #36]	; 0x24
 80111a4:	e767      	b.n	8011076 <_svfiprintf_r+0x4e>
 80111a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80111aa:	460c      	mov	r4, r1
 80111ac:	2001      	movs	r0, #1
 80111ae:	e7a5      	b.n	80110fc <_svfiprintf_r+0xd4>
 80111b0:	2300      	movs	r3, #0
 80111b2:	3401      	adds	r4, #1
 80111b4:	9305      	str	r3, [sp, #20]
 80111b6:	4619      	mov	r1, r3
 80111b8:	f04f 0c0a 	mov.w	ip, #10
 80111bc:	4620      	mov	r0, r4
 80111be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80111c2:	3a30      	subs	r2, #48	; 0x30
 80111c4:	2a09      	cmp	r2, #9
 80111c6:	d903      	bls.n	80111d0 <_svfiprintf_r+0x1a8>
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	d0c5      	beq.n	8011158 <_svfiprintf_r+0x130>
 80111cc:	9105      	str	r1, [sp, #20]
 80111ce:	e7c3      	b.n	8011158 <_svfiprintf_r+0x130>
 80111d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80111d4:	4604      	mov	r4, r0
 80111d6:	2301      	movs	r3, #1
 80111d8:	e7f0      	b.n	80111bc <_svfiprintf_r+0x194>
 80111da:	ab03      	add	r3, sp, #12
 80111dc:	9300      	str	r3, [sp, #0]
 80111de:	462a      	mov	r2, r5
 80111e0:	4b0f      	ldr	r3, [pc, #60]	; (8011220 <_svfiprintf_r+0x1f8>)
 80111e2:	a904      	add	r1, sp, #16
 80111e4:	4638      	mov	r0, r7
 80111e6:	f7fc fbe9 	bl	800d9bc <_printf_float>
 80111ea:	1c42      	adds	r2, r0, #1
 80111ec:	4606      	mov	r6, r0
 80111ee:	d1d6      	bne.n	801119e <_svfiprintf_r+0x176>
 80111f0:	89ab      	ldrh	r3, [r5, #12]
 80111f2:	065b      	lsls	r3, r3, #25
 80111f4:	f53f af2c 	bmi.w	8011050 <_svfiprintf_r+0x28>
 80111f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80111fa:	b01d      	add	sp, #116	; 0x74
 80111fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011200:	ab03      	add	r3, sp, #12
 8011202:	9300      	str	r3, [sp, #0]
 8011204:	462a      	mov	r2, r5
 8011206:	4b06      	ldr	r3, [pc, #24]	; (8011220 <_svfiprintf_r+0x1f8>)
 8011208:	a904      	add	r1, sp, #16
 801120a:	4638      	mov	r0, r7
 801120c:	f7fc fe7a 	bl	800df04 <_printf_i>
 8011210:	e7eb      	b.n	80111ea <_svfiprintf_r+0x1c2>
 8011212:	bf00      	nop
 8011214:	08013274 	.word	0x08013274
 8011218:	0801327e 	.word	0x0801327e
 801121c:	0800d9bd 	.word	0x0800d9bd
 8011220:	08010f71 	.word	0x08010f71
 8011224:	0801327a 	.word	0x0801327a

08011228 <nan>:
 8011228:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011230 <nan+0x8>
 801122c:	4770      	bx	lr
 801122e:	bf00      	nop
 8011230:	00000000 	.word	0x00000000
 8011234:	7ff80000 	.word	0x7ff80000

08011238 <_sbrk_r>:
 8011238:	b538      	push	{r3, r4, r5, lr}
 801123a:	4d06      	ldr	r5, [pc, #24]	; (8011254 <_sbrk_r+0x1c>)
 801123c:	2300      	movs	r3, #0
 801123e:	4604      	mov	r4, r0
 8011240:	4608      	mov	r0, r1
 8011242:	602b      	str	r3, [r5, #0]
 8011244:	f7f3 fe2a 	bl	8004e9c <_sbrk>
 8011248:	1c43      	adds	r3, r0, #1
 801124a:	d102      	bne.n	8011252 <_sbrk_r+0x1a>
 801124c:	682b      	ldr	r3, [r5, #0]
 801124e:	b103      	cbz	r3, 8011252 <_sbrk_r+0x1a>
 8011250:	6023      	str	r3, [r4, #0]
 8011252:	bd38      	pop	{r3, r4, r5, pc}
 8011254:	20002dcc 	.word	0x20002dcc

08011258 <__sread>:
 8011258:	b510      	push	{r4, lr}
 801125a:	460c      	mov	r4, r1
 801125c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011260:	f000 fa5c 	bl	801171c <_read_r>
 8011264:	2800      	cmp	r0, #0
 8011266:	bfab      	itete	ge
 8011268:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801126a:	89a3      	ldrhlt	r3, [r4, #12]
 801126c:	181b      	addge	r3, r3, r0
 801126e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011272:	bfac      	ite	ge
 8011274:	6563      	strge	r3, [r4, #84]	; 0x54
 8011276:	81a3      	strhlt	r3, [r4, #12]
 8011278:	bd10      	pop	{r4, pc}

0801127a <__swrite>:
 801127a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801127e:	461f      	mov	r7, r3
 8011280:	898b      	ldrh	r3, [r1, #12]
 8011282:	05db      	lsls	r3, r3, #23
 8011284:	4605      	mov	r5, r0
 8011286:	460c      	mov	r4, r1
 8011288:	4616      	mov	r6, r2
 801128a:	d505      	bpl.n	8011298 <__swrite+0x1e>
 801128c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011290:	2302      	movs	r3, #2
 8011292:	2200      	movs	r2, #0
 8011294:	f000 f882 	bl	801139c <_lseek_r>
 8011298:	89a3      	ldrh	r3, [r4, #12]
 801129a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801129e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80112a2:	81a3      	strh	r3, [r4, #12]
 80112a4:	4632      	mov	r2, r6
 80112a6:	463b      	mov	r3, r7
 80112a8:	4628      	mov	r0, r5
 80112aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80112ae:	f000 b823 	b.w	80112f8 <_write_r>

080112b2 <__sseek>:
 80112b2:	b510      	push	{r4, lr}
 80112b4:	460c      	mov	r4, r1
 80112b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80112ba:	f000 f86f 	bl	801139c <_lseek_r>
 80112be:	1c43      	adds	r3, r0, #1
 80112c0:	89a3      	ldrh	r3, [r4, #12]
 80112c2:	bf15      	itete	ne
 80112c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80112c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80112ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80112ce:	81a3      	strheq	r3, [r4, #12]
 80112d0:	bf18      	it	ne
 80112d2:	81a3      	strhne	r3, [r4, #12]
 80112d4:	bd10      	pop	{r4, pc}

080112d6 <__sclose>:
 80112d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80112da:	f000 b83d 	b.w	8011358 <_close_r>

080112de <__ascii_wctomb>:
 80112de:	b149      	cbz	r1, 80112f4 <__ascii_wctomb+0x16>
 80112e0:	2aff      	cmp	r2, #255	; 0xff
 80112e2:	bf85      	ittet	hi
 80112e4:	238a      	movhi	r3, #138	; 0x8a
 80112e6:	6003      	strhi	r3, [r0, #0]
 80112e8:	700a      	strbls	r2, [r1, #0]
 80112ea:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80112ee:	bf98      	it	ls
 80112f0:	2001      	movls	r0, #1
 80112f2:	4770      	bx	lr
 80112f4:	4608      	mov	r0, r1
 80112f6:	4770      	bx	lr

080112f8 <_write_r>:
 80112f8:	b538      	push	{r3, r4, r5, lr}
 80112fa:	4d07      	ldr	r5, [pc, #28]	; (8011318 <_write_r+0x20>)
 80112fc:	4604      	mov	r4, r0
 80112fe:	4608      	mov	r0, r1
 8011300:	4611      	mov	r1, r2
 8011302:	2200      	movs	r2, #0
 8011304:	602a      	str	r2, [r5, #0]
 8011306:	461a      	mov	r2, r3
 8011308:	f7f3 fd77 	bl	8004dfa <_write>
 801130c:	1c43      	adds	r3, r0, #1
 801130e:	d102      	bne.n	8011316 <_write_r+0x1e>
 8011310:	682b      	ldr	r3, [r5, #0]
 8011312:	b103      	cbz	r3, 8011316 <_write_r+0x1e>
 8011314:	6023      	str	r3, [r4, #0]
 8011316:	bd38      	pop	{r3, r4, r5, pc}
 8011318:	20002dcc 	.word	0x20002dcc

0801131c <__assert_func>:
 801131c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801131e:	4614      	mov	r4, r2
 8011320:	461a      	mov	r2, r3
 8011322:	4b09      	ldr	r3, [pc, #36]	; (8011348 <__assert_func+0x2c>)
 8011324:	681b      	ldr	r3, [r3, #0]
 8011326:	4605      	mov	r5, r0
 8011328:	68d8      	ldr	r0, [r3, #12]
 801132a:	b14c      	cbz	r4, 8011340 <__assert_func+0x24>
 801132c:	4b07      	ldr	r3, [pc, #28]	; (801134c <__assert_func+0x30>)
 801132e:	9100      	str	r1, [sp, #0]
 8011330:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011334:	4906      	ldr	r1, [pc, #24]	; (8011350 <__assert_func+0x34>)
 8011336:	462b      	mov	r3, r5
 8011338:	f000 f81e 	bl	8011378 <fiprintf>
 801133c:	f000 fac0 	bl	80118c0 <abort>
 8011340:	4b04      	ldr	r3, [pc, #16]	; (8011354 <__assert_func+0x38>)
 8011342:	461c      	mov	r4, r3
 8011344:	e7f3      	b.n	801132e <__assert_func+0x12>
 8011346:	bf00      	nop
 8011348:	200001f0 	.word	0x200001f0
 801134c:	08013285 	.word	0x08013285
 8011350:	08013292 	.word	0x08013292
 8011354:	080132c0 	.word	0x080132c0

08011358 <_close_r>:
 8011358:	b538      	push	{r3, r4, r5, lr}
 801135a:	4d06      	ldr	r5, [pc, #24]	; (8011374 <_close_r+0x1c>)
 801135c:	2300      	movs	r3, #0
 801135e:	4604      	mov	r4, r0
 8011360:	4608      	mov	r0, r1
 8011362:	602b      	str	r3, [r5, #0]
 8011364:	f7f3 fd65 	bl	8004e32 <_close>
 8011368:	1c43      	adds	r3, r0, #1
 801136a:	d102      	bne.n	8011372 <_close_r+0x1a>
 801136c:	682b      	ldr	r3, [r5, #0]
 801136e:	b103      	cbz	r3, 8011372 <_close_r+0x1a>
 8011370:	6023      	str	r3, [r4, #0]
 8011372:	bd38      	pop	{r3, r4, r5, pc}
 8011374:	20002dcc 	.word	0x20002dcc

08011378 <fiprintf>:
 8011378:	b40e      	push	{r1, r2, r3}
 801137a:	b503      	push	{r0, r1, lr}
 801137c:	4601      	mov	r1, r0
 801137e:	ab03      	add	r3, sp, #12
 8011380:	4805      	ldr	r0, [pc, #20]	; (8011398 <fiprintf+0x20>)
 8011382:	f853 2b04 	ldr.w	r2, [r3], #4
 8011386:	6800      	ldr	r0, [r0, #0]
 8011388:	9301      	str	r3, [sp, #4]
 801138a:	f000 f897 	bl	80114bc <_vfiprintf_r>
 801138e:	b002      	add	sp, #8
 8011390:	f85d eb04 	ldr.w	lr, [sp], #4
 8011394:	b003      	add	sp, #12
 8011396:	4770      	bx	lr
 8011398:	200001f0 	.word	0x200001f0

0801139c <_lseek_r>:
 801139c:	b538      	push	{r3, r4, r5, lr}
 801139e:	4d07      	ldr	r5, [pc, #28]	; (80113bc <_lseek_r+0x20>)
 80113a0:	4604      	mov	r4, r0
 80113a2:	4608      	mov	r0, r1
 80113a4:	4611      	mov	r1, r2
 80113a6:	2200      	movs	r2, #0
 80113a8:	602a      	str	r2, [r5, #0]
 80113aa:	461a      	mov	r2, r3
 80113ac:	f7f3 fd68 	bl	8004e80 <_lseek>
 80113b0:	1c43      	adds	r3, r0, #1
 80113b2:	d102      	bne.n	80113ba <_lseek_r+0x1e>
 80113b4:	682b      	ldr	r3, [r5, #0]
 80113b6:	b103      	cbz	r3, 80113ba <_lseek_r+0x1e>
 80113b8:	6023      	str	r3, [r4, #0]
 80113ba:	bd38      	pop	{r3, r4, r5, pc}
 80113bc:	20002dcc 	.word	0x20002dcc

080113c0 <memmove>:
 80113c0:	4288      	cmp	r0, r1
 80113c2:	b510      	push	{r4, lr}
 80113c4:	eb01 0402 	add.w	r4, r1, r2
 80113c8:	d902      	bls.n	80113d0 <memmove+0x10>
 80113ca:	4284      	cmp	r4, r0
 80113cc:	4623      	mov	r3, r4
 80113ce:	d807      	bhi.n	80113e0 <memmove+0x20>
 80113d0:	1e43      	subs	r3, r0, #1
 80113d2:	42a1      	cmp	r1, r4
 80113d4:	d008      	beq.n	80113e8 <memmove+0x28>
 80113d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80113da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80113de:	e7f8      	b.n	80113d2 <memmove+0x12>
 80113e0:	4402      	add	r2, r0
 80113e2:	4601      	mov	r1, r0
 80113e4:	428a      	cmp	r2, r1
 80113e6:	d100      	bne.n	80113ea <memmove+0x2a>
 80113e8:	bd10      	pop	{r4, pc}
 80113ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80113ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80113f2:	e7f7      	b.n	80113e4 <memmove+0x24>

080113f4 <__malloc_lock>:
 80113f4:	4801      	ldr	r0, [pc, #4]	; (80113fc <__malloc_lock+0x8>)
 80113f6:	f7fe bfe6 	b.w	80103c6 <__retarget_lock_acquire_recursive>
 80113fa:	bf00      	nop
 80113fc:	20002dc0 	.word	0x20002dc0

08011400 <__malloc_unlock>:
 8011400:	4801      	ldr	r0, [pc, #4]	; (8011408 <__malloc_unlock+0x8>)
 8011402:	f7fe bfe1 	b.w	80103c8 <__retarget_lock_release_recursive>
 8011406:	bf00      	nop
 8011408:	20002dc0 	.word	0x20002dc0

0801140c <_realloc_r>:
 801140c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011410:	4680      	mov	r8, r0
 8011412:	4614      	mov	r4, r2
 8011414:	460e      	mov	r6, r1
 8011416:	b921      	cbnz	r1, 8011422 <_realloc_r+0x16>
 8011418:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801141c:	4611      	mov	r1, r2
 801141e:	f7ff bd33 	b.w	8010e88 <_malloc_r>
 8011422:	b92a      	cbnz	r2, 8011430 <_realloc_r+0x24>
 8011424:	f7ff fcc4 	bl	8010db0 <_free_r>
 8011428:	4625      	mov	r5, r4
 801142a:	4628      	mov	r0, r5
 801142c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011430:	f000 fc6a 	bl	8011d08 <_malloc_usable_size_r>
 8011434:	4284      	cmp	r4, r0
 8011436:	4607      	mov	r7, r0
 8011438:	d802      	bhi.n	8011440 <_realloc_r+0x34>
 801143a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801143e:	d812      	bhi.n	8011466 <_realloc_r+0x5a>
 8011440:	4621      	mov	r1, r4
 8011442:	4640      	mov	r0, r8
 8011444:	f7ff fd20 	bl	8010e88 <_malloc_r>
 8011448:	4605      	mov	r5, r0
 801144a:	2800      	cmp	r0, #0
 801144c:	d0ed      	beq.n	801142a <_realloc_r+0x1e>
 801144e:	42bc      	cmp	r4, r7
 8011450:	4622      	mov	r2, r4
 8011452:	4631      	mov	r1, r6
 8011454:	bf28      	it	cs
 8011456:	463a      	movcs	r2, r7
 8011458:	f7fc f9fa 	bl	800d850 <memcpy>
 801145c:	4631      	mov	r1, r6
 801145e:	4640      	mov	r0, r8
 8011460:	f7ff fca6 	bl	8010db0 <_free_r>
 8011464:	e7e1      	b.n	801142a <_realloc_r+0x1e>
 8011466:	4635      	mov	r5, r6
 8011468:	e7df      	b.n	801142a <_realloc_r+0x1e>

0801146a <__sfputc_r>:
 801146a:	6893      	ldr	r3, [r2, #8]
 801146c:	3b01      	subs	r3, #1
 801146e:	2b00      	cmp	r3, #0
 8011470:	b410      	push	{r4}
 8011472:	6093      	str	r3, [r2, #8]
 8011474:	da08      	bge.n	8011488 <__sfputc_r+0x1e>
 8011476:	6994      	ldr	r4, [r2, #24]
 8011478:	42a3      	cmp	r3, r4
 801147a:	db01      	blt.n	8011480 <__sfputc_r+0x16>
 801147c:	290a      	cmp	r1, #10
 801147e:	d103      	bne.n	8011488 <__sfputc_r+0x1e>
 8011480:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011484:	f000 b95c 	b.w	8011740 <__swbuf_r>
 8011488:	6813      	ldr	r3, [r2, #0]
 801148a:	1c58      	adds	r0, r3, #1
 801148c:	6010      	str	r0, [r2, #0]
 801148e:	7019      	strb	r1, [r3, #0]
 8011490:	4608      	mov	r0, r1
 8011492:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011496:	4770      	bx	lr

08011498 <__sfputs_r>:
 8011498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801149a:	4606      	mov	r6, r0
 801149c:	460f      	mov	r7, r1
 801149e:	4614      	mov	r4, r2
 80114a0:	18d5      	adds	r5, r2, r3
 80114a2:	42ac      	cmp	r4, r5
 80114a4:	d101      	bne.n	80114aa <__sfputs_r+0x12>
 80114a6:	2000      	movs	r0, #0
 80114a8:	e007      	b.n	80114ba <__sfputs_r+0x22>
 80114aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80114ae:	463a      	mov	r2, r7
 80114b0:	4630      	mov	r0, r6
 80114b2:	f7ff ffda 	bl	801146a <__sfputc_r>
 80114b6:	1c43      	adds	r3, r0, #1
 80114b8:	d1f3      	bne.n	80114a2 <__sfputs_r+0xa>
 80114ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080114bc <_vfiprintf_r>:
 80114bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114c0:	460d      	mov	r5, r1
 80114c2:	b09d      	sub	sp, #116	; 0x74
 80114c4:	4614      	mov	r4, r2
 80114c6:	4698      	mov	r8, r3
 80114c8:	4606      	mov	r6, r0
 80114ca:	b118      	cbz	r0, 80114d4 <_vfiprintf_r+0x18>
 80114cc:	6983      	ldr	r3, [r0, #24]
 80114ce:	b90b      	cbnz	r3, 80114d4 <_vfiprintf_r+0x18>
 80114d0:	f000 fb18 	bl	8011b04 <__sinit>
 80114d4:	4b89      	ldr	r3, [pc, #548]	; (80116fc <_vfiprintf_r+0x240>)
 80114d6:	429d      	cmp	r5, r3
 80114d8:	d11b      	bne.n	8011512 <_vfiprintf_r+0x56>
 80114da:	6875      	ldr	r5, [r6, #4]
 80114dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80114de:	07d9      	lsls	r1, r3, #31
 80114e0:	d405      	bmi.n	80114ee <_vfiprintf_r+0x32>
 80114e2:	89ab      	ldrh	r3, [r5, #12]
 80114e4:	059a      	lsls	r2, r3, #22
 80114e6:	d402      	bmi.n	80114ee <_vfiprintf_r+0x32>
 80114e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80114ea:	f7fe ff6c 	bl	80103c6 <__retarget_lock_acquire_recursive>
 80114ee:	89ab      	ldrh	r3, [r5, #12]
 80114f0:	071b      	lsls	r3, r3, #28
 80114f2:	d501      	bpl.n	80114f8 <_vfiprintf_r+0x3c>
 80114f4:	692b      	ldr	r3, [r5, #16]
 80114f6:	b9eb      	cbnz	r3, 8011534 <_vfiprintf_r+0x78>
 80114f8:	4629      	mov	r1, r5
 80114fa:	4630      	mov	r0, r6
 80114fc:	f000 f972 	bl	80117e4 <__swsetup_r>
 8011500:	b1c0      	cbz	r0, 8011534 <_vfiprintf_r+0x78>
 8011502:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011504:	07dc      	lsls	r4, r3, #31
 8011506:	d50e      	bpl.n	8011526 <_vfiprintf_r+0x6a>
 8011508:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801150c:	b01d      	add	sp, #116	; 0x74
 801150e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011512:	4b7b      	ldr	r3, [pc, #492]	; (8011700 <_vfiprintf_r+0x244>)
 8011514:	429d      	cmp	r5, r3
 8011516:	d101      	bne.n	801151c <_vfiprintf_r+0x60>
 8011518:	68b5      	ldr	r5, [r6, #8]
 801151a:	e7df      	b.n	80114dc <_vfiprintf_r+0x20>
 801151c:	4b79      	ldr	r3, [pc, #484]	; (8011704 <_vfiprintf_r+0x248>)
 801151e:	429d      	cmp	r5, r3
 8011520:	bf08      	it	eq
 8011522:	68f5      	ldreq	r5, [r6, #12]
 8011524:	e7da      	b.n	80114dc <_vfiprintf_r+0x20>
 8011526:	89ab      	ldrh	r3, [r5, #12]
 8011528:	0598      	lsls	r0, r3, #22
 801152a:	d4ed      	bmi.n	8011508 <_vfiprintf_r+0x4c>
 801152c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801152e:	f7fe ff4b 	bl	80103c8 <__retarget_lock_release_recursive>
 8011532:	e7e9      	b.n	8011508 <_vfiprintf_r+0x4c>
 8011534:	2300      	movs	r3, #0
 8011536:	9309      	str	r3, [sp, #36]	; 0x24
 8011538:	2320      	movs	r3, #32
 801153a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801153e:	f8cd 800c 	str.w	r8, [sp, #12]
 8011542:	2330      	movs	r3, #48	; 0x30
 8011544:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011708 <_vfiprintf_r+0x24c>
 8011548:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801154c:	f04f 0901 	mov.w	r9, #1
 8011550:	4623      	mov	r3, r4
 8011552:	469a      	mov	sl, r3
 8011554:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011558:	b10a      	cbz	r2, 801155e <_vfiprintf_r+0xa2>
 801155a:	2a25      	cmp	r2, #37	; 0x25
 801155c:	d1f9      	bne.n	8011552 <_vfiprintf_r+0x96>
 801155e:	ebba 0b04 	subs.w	fp, sl, r4
 8011562:	d00b      	beq.n	801157c <_vfiprintf_r+0xc0>
 8011564:	465b      	mov	r3, fp
 8011566:	4622      	mov	r2, r4
 8011568:	4629      	mov	r1, r5
 801156a:	4630      	mov	r0, r6
 801156c:	f7ff ff94 	bl	8011498 <__sfputs_r>
 8011570:	3001      	adds	r0, #1
 8011572:	f000 80aa 	beq.w	80116ca <_vfiprintf_r+0x20e>
 8011576:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011578:	445a      	add	r2, fp
 801157a:	9209      	str	r2, [sp, #36]	; 0x24
 801157c:	f89a 3000 	ldrb.w	r3, [sl]
 8011580:	2b00      	cmp	r3, #0
 8011582:	f000 80a2 	beq.w	80116ca <_vfiprintf_r+0x20e>
 8011586:	2300      	movs	r3, #0
 8011588:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801158c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011590:	f10a 0a01 	add.w	sl, sl, #1
 8011594:	9304      	str	r3, [sp, #16]
 8011596:	9307      	str	r3, [sp, #28]
 8011598:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801159c:	931a      	str	r3, [sp, #104]	; 0x68
 801159e:	4654      	mov	r4, sl
 80115a0:	2205      	movs	r2, #5
 80115a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80115a6:	4858      	ldr	r0, [pc, #352]	; (8011708 <_vfiprintf_r+0x24c>)
 80115a8:	f7ee fe1a 	bl	80001e0 <memchr>
 80115ac:	9a04      	ldr	r2, [sp, #16]
 80115ae:	b9d8      	cbnz	r0, 80115e8 <_vfiprintf_r+0x12c>
 80115b0:	06d1      	lsls	r1, r2, #27
 80115b2:	bf44      	itt	mi
 80115b4:	2320      	movmi	r3, #32
 80115b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80115ba:	0713      	lsls	r3, r2, #28
 80115bc:	bf44      	itt	mi
 80115be:	232b      	movmi	r3, #43	; 0x2b
 80115c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80115c4:	f89a 3000 	ldrb.w	r3, [sl]
 80115c8:	2b2a      	cmp	r3, #42	; 0x2a
 80115ca:	d015      	beq.n	80115f8 <_vfiprintf_r+0x13c>
 80115cc:	9a07      	ldr	r2, [sp, #28]
 80115ce:	4654      	mov	r4, sl
 80115d0:	2000      	movs	r0, #0
 80115d2:	f04f 0c0a 	mov.w	ip, #10
 80115d6:	4621      	mov	r1, r4
 80115d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80115dc:	3b30      	subs	r3, #48	; 0x30
 80115de:	2b09      	cmp	r3, #9
 80115e0:	d94e      	bls.n	8011680 <_vfiprintf_r+0x1c4>
 80115e2:	b1b0      	cbz	r0, 8011612 <_vfiprintf_r+0x156>
 80115e4:	9207      	str	r2, [sp, #28]
 80115e6:	e014      	b.n	8011612 <_vfiprintf_r+0x156>
 80115e8:	eba0 0308 	sub.w	r3, r0, r8
 80115ec:	fa09 f303 	lsl.w	r3, r9, r3
 80115f0:	4313      	orrs	r3, r2
 80115f2:	9304      	str	r3, [sp, #16]
 80115f4:	46a2      	mov	sl, r4
 80115f6:	e7d2      	b.n	801159e <_vfiprintf_r+0xe2>
 80115f8:	9b03      	ldr	r3, [sp, #12]
 80115fa:	1d19      	adds	r1, r3, #4
 80115fc:	681b      	ldr	r3, [r3, #0]
 80115fe:	9103      	str	r1, [sp, #12]
 8011600:	2b00      	cmp	r3, #0
 8011602:	bfbb      	ittet	lt
 8011604:	425b      	neglt	r3, r3
 8011606:	f042 0202 	orrlt.w	r2, r2, #2
 801160a:	9307      	strge	r3, [sp, #28]
 801160c:	9307      	strlt	r3, [sp, #28]
 801160e:	bfb8      	it	lt
 8011610:	9204      	strlt	r2, [sp, #16]
 8011612:	7823      	ldrb	r3, [r4, #0]
 8011614:	2b2e      	cmp	r3, #46	; 0x2e
 8011616:	d10c      	bne.n	8011632 <_vfiprintf_r+0x176>
 8011618:	7863      	ldrb	r3, [r4, #1]
 801161a:	2b2a      	cmp	r3, #42	; 0x2a
 801161c:	d135      	bne.n	801168a <_vfiprintf_r+0x1ce>
 801161e:	9b03      	ldr	r3, [sp, #12]
 8011620:	1d1a      	adds	r2, r3, #4
 8011622:	681b      	ldr	r3, [r3, #0]
 8011624:	9203      	str	r2, [sp, #12]
 8011626:	2b00      	cmp	r3, #0
 8011628:	bfb8      	it	lt
 801162a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801162e:	3402      	adds	r4, #2
 8011630:	9305      	str	r3, [sp, #20]
 8011632:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011718 <_vfiprintf_r+0x25c>
 8011636:	7821      	ldrb	r1, [r4, #0]
 8011638:	2203      	movs	r2, #3
 801163a:	4650      	mov	r0, sl
 801163c:	f7ee fdd0 	bl	80001e0 <memchr>
 8011640:	b140      	cbz	r0, 8011654 <_vfiprintf_r+0x198>
 8011642:	2340      	movs	r3, #64	; 0x40
 8011644:	eba0 000a 	sub.w	r0, r0, sl
 8011648:	fa03 f000 	lsl.w	r0, r3, r0
 801164c:	9b04      	ldr	r3, [sp, #16]
 801164e:	4303      	orrs	r3, r0
 8011650:	3401      	adds	r4, #1
 8011652:	9304      	str	r3, [sp, #16]
 8011654:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011658:	482c      	ldr	r0, [pc, #176]	; (801170c <_vfiprintf_r+0x250>)
 801165a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801165e:	2206      	movs	r2, #6
 8011660:	f7ee fdbe 	bl	80001e0 <memchr>
 8011664:	2800      	cmp	r0, #0
 8011666:	d03f      	beq.n	80116e8 <_vfiprintf_r+0x22c>
 8011668:	4b29      	ldr	r3, [pc, #164]	; (8011710 <_vfiprintf_r+0x254>)
 801166a:	bb1b      	cbnz	r3, 80116b4 <_vfiprintf_r+0x1f8>
 801166c:	9b03      	ldr	r3, [sp, #12]
 801166e:	3307      	adds	r3, #7
 8011670:	f023 0307 	bic.w	r3, r3, #7
 8011674:	3308      	adds	r3, #8
 8011676:	9303      	str	r3, [sp, #12]
 8011678:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801167a:	443b      	add	r3, r7
 801167c:	9309      	str	r3, [sp, #36]	; 0x24
 801167e:	e767      	b.n	8011550 <_vfiprintf_r+0x94>
 8011680:	fb0c 3202 	mla	r2, ip, r2, r3
 8011684:	460c      	mov	r4, r1
 8011686:	2001      	movs	r0, #1
 8011688:	e7a5      	b.n	80115d6 <_vfiprintf_r+0x11a>
 801168a:	2300      	movs	r3, #0
 801168c:	3401      	adds	r4, #1
 801168e:	9305      	str	r3, [sp, #20]
 8011690:	4619      	mov	r1, r3
 8011692:	f04f 0c0a 	mov.w	ip, #10
 8011696:	4620      	mov	r0, r4
 8011698:	f810 2b01 	ldrb.w	r2, [r0], #1
 801169c:	3a30      	subs	r2, #48	; 0x30
 801169e:	2a09      	cmp	r2, #9
 80116a0:	d903      	bls.n	80116aa <_vfiprintf_r+0x1ee>
 80116a2:	2b00      	cmp	r3, #0
 80116a4:	d0c5      	beq.n	8011632 <_vfiprintf_r+0x176>
 80116a6:	9105      	str	r1, [sp, #20]
 80116a8:	e7c3      	b.n	8011632 <_vfiprintf_r+0x176>
 80116aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80116ae:	4604      	mov	r4, r0
 80116b0:	2301      	movs	r3, #1
 80116b2:	e7f0      	b.n	8011696 <_vfiprintf_r+0x1da>
 80116b4:	ab03      	add	r3, sp, #12
 80116b6:	9300      	str	r3, [sp, #0]
 80116b8:	462a      	mov	r2, r5
 80116ba:	4b16      	ldr	r3, [pc, #88]	; (8011714 <_vfiprintf_r+0x258>)
 80116bc:	a904      	add	r1, sp, #16
 80116be:	4630      	mov	r0, r6
 80116c0:	f7fc f97c 	bl	800d9bc <_printf_float>
 80116c4:	4607      	mov	r7, r0
 80116c6:	1c78      	adds	r0, r7, #1
 80116c8:	d1d6      	bne.n	8011678 <_vfiprintf_r+0x1bc>
 80116ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80116cc:	07d9      	lsls	r1, r3, #31
 80116ce:	d405      	bmi.n	80116dc <_vfiprintf_r+0x220>
 80116d0:	89ab      	ldrh	r3, [r5, #12]
 80116d2:	059a      	lsls	r2, r3, #22
 80116d4:	d402      	bmi.n	80116dc <_vfiprintf_r+0x220>
 80116d6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80116d8:	f7fe fe76 	bl	80103c8 <__retarget_lock_release_recursive>
 80116dc:	89ab      	ldrh	r3, [r5, #12]
 80116de:	065b      	lsls	r3, r3, #25
 80116e0:	f53f af12 	bmi.w	8011508 <_vfiprintf_r+0x4c>
 80116e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80116e6:	e711      	b.n	801150c <_vfiprintf_r+0x50>
 80116e8:	ab03      	add	r3, sp, #12
 80116ea:	9300      	str	r3, [sp, #0]
 80116ec:	462a      	mov	r2, r5
 80116ee:	4b09      	ldr	r3, [pc, #36]	; (8011714 <_vfiprintf_r+0x258>)
 80116f0:	a904      	add	r1, sp, #16
 80116f2:	4630      	mov	r0, r6
 80116f4:	f7fc fc06 	bl	800df04 <_printf_i>
 80116f8:	e7e4      	b.n	80116c4 <_vfiprintf_r+0x208>
 80116fa:	bf00      	nop
 80116fc:	080132e4 	.word	0x080132e4
 8011700:	08013304 	.word	0x08013304
 8011704:	080132c4 	.word	0x080132c4
 8011708:	08013274 	.word	0x08013274
 801170c:	0801327e 	.word	0x0801327e
 8011710:	0800d9bd 	.word	0x0800d9bd
 8011714:	08011499 	.word	0x08011499
 8011718:	0801327a 	.word	0x0801327a

0801171c <_read_r>:
 801171c:	b538      	push	{r3, r4, r5, lr}
 801171e:	4d07      	ldr	r5, [pc, #28]	; (801173c <_read_r+0x20>)
 8011720:	4604      	mov	r4, r0
 8011722:	4608      	mov	r0, r1
 8011724:	4611      	mov	r1, r2
 8011726:	2200      	movs	r2, #0
 8011728:	602a      	str	r2, [r5, #0]
 801172a:	461a      	mov	r2, r3
 801172c:	f7f3 fb48 	bl	8004dc0 <_read>
 8011730:	1c43      	adds	r3, r0, #1
 8011732:	d102      	bne.n	801173a <_read_r+0x1e>
 8011734:	682b      	ldr	r3, [r5, #0]
 8011736:	b103      	cbz	r3, 801173a <_read_r+0x1e>
 8011738:	6023      	str	r3, [r4, #0]
 801173a:	bd38      	pop	{r3, r4, r5, pc}
 801173c:	20002dcc 	.word	0x20002dcc

08011740 <__swbuf_r>:
 8011740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011742:	460e      	mov	r6, r1
 8011744:	4614      	mov	r4, r2
 8011746:	4605      	mov	r5, r0
 8011748:	b118      	cbz	r0, 8011752 <__swbuf_r+0x12>
 801174a:	6983      	ldr	r3, [r0, #24]
 801174c:	b90b      	cbnz	r3, 8011752 <__swbuf_r+0x12>
 801174e:	f000 f9d9 	bl	8011b04 <__sinit>
 8011752:	4b21      	ldr	r3, [pc, #132]	; (80117d8 <__swbuf_r+0x98>)
 8011754:	429c      	cmp	r4, r3
 8011756:	d12b      	bne.n	80117b0 <__swbuf_r+0x70>
 8011758:	686c      	ldr	r4, [r5, #4]
 801175a:	69a3      	ldr	r3, [r4, #24]
 801175c:	60a3      	str	r3, [r4, #8]
 801175e:	89a3      	ldrh	r3, [r4, #12]
 8011760:	071a      	lsls	r2, r3, #28
 8011762:	d52f      	bpl.n	80117c4 <__swbuf_r+0x84>
 8011764:	6923      	ldr	r3, [r4, #16]
 8011766:	b36b      	cbz	r3, 80117c4 <__swbuf_r+0x84>
 8011768:	6923      	ldr	r3, [r4, #16]
 801176a:	6820      	ldr	r0, [r4, #0]
 801176c:	1ac0      	subs	r0, r0, r3
 801176e:	6963      	ldr	r3, [r4, #20]
 8011770:	b2f6      	uxtb	r6, r6
 8011772:	4283      	cmp	r3, r0
 8011774:	4637      	mov	r7, r6
 8011776:	dc04      	bgt.n	8011782 <__swbuf_r+0x42>
 8011778:	4621      	mov	r1, r4
 801177a:	4628      	mov	r0, r5
 801177c:	f000 f92e 	bl	80119dc <_fflush_r>
 8011780:	bb30      	cbnz	r0, 80117d0 <__swbuf_r+0x90>
 8011782:	68a3      	ldr	r3, [r4, #8]
 8011784:	3b01      	subs	r3, #1
 8011786:	60a3      	str	r3, [r4, #8]
 8011788:	6823      	ldr	r3, [r4, #0]
 801178a:	1c5a      	adds	r2, r3, #1
 801178c:	6022      	str	r2, [r4, #0]
 801178e:	701e      	strb	r6, [r3, #0]
 8011790:	6963      	ldr	r3, [r4, #20]
 8011792:	3001      	adds	r0, #1
 8011794:	4283      	cmp	r3, r0
 8011796:	d004      	beq.n	80117a2 <__swbuf_r+0x62>
 8011798:	89a3      	ldrh	r3, [r4, #12]
 801179a:	07db      	lsls	r3, r3, #31
 801179c:	d506      	bpl.n	80117ac <__swbuf_r+0x6c>
 801179e:	2e0a      	cmp	r6, #10
 80117a0:	d104      	bne.n	80117ac <__swbuf_r+0x6c>
 80117a2:	4621      	mov	r1, r4
 80117a4:	4628      	mov	r0, r5
 80117a6:	f000 f919 	bl	80119dc <_fflush_r>
 80117aa:	b988      	cbnz	r0, 80117d0 <__swbuf_r+0x90>
 80117ac:	4638      	mov	r0, r7
 80117ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80117b0:	4b0a      	ldr	r3, [pc, #40]	; (80117dc <__swbuf_r+0x9c>)
 80117b2:	429c      	cmp	r4, r3
 80117b4:	d101      	bne.n	80117ba <__swbuf_r+0x7a>
 80117b6:	68ac      	ldr	r4, [r5, #8]
 80117b8:	e7cf      	b.n	801175a <__swbuf_r+0x1a>
 80117ba:	4b09      	ldr	r3, [pc, #36]	; (80117e0 <__swbuf_r+0xa0>)
 80117bc:	429c      	cmp	r4, r3
 80117be:	bf08      	it	eq
 80117c0:	68ec      	ldreq	r4, [r5, #12]
 80117c2:	e7ca      	b.n	801175a <__swbuf_r+0x1a>
 80117c4:	4621      	mov	r1, r4
 80117c6:	4628      	mov	r0, r5
 80117c8:	f000 f80c 	bl	80117e4 <__swsetup_r>
 80117cc:	2800      	cmp	r0, #0
 80117ce:	d0cb      	beq.n	8011768 <__swbuf_r+0x28>
 80117d0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80117d4:	e7ea      	b.n	80117ac <__swbuf_r+0x6c>
 80117d6:	bf00      	nop
 80117d8:	080132e4 	.word	0x080132e4
 80117dc:	08013304 	.word	0x08013304
 80117e0:	080132c4 	.word	0x080132c4

080117e4 <__swsetup_r>:
 80117e4:	4b32      	ldr	r3, [pc, #200]	; (80118b0 <__swsetup_r+0xcc>)
 80117e6:	b570      	push	{r4, r5, r6, lr}
 80117e8:	681d      	ldr	r5, [r3, #0]
 80117ea:	4606      	mov	r6, r0
 80117ec:	460c      	mov	r4, r1
 80117ee:	b125      	cbz	r5, 80117fa <__swsetup_r+0x16>
 80117f0:	69ab      	ldr	r3, [r5, #24]
 80117f2:	b913      	cbnz	r3, 80117fa <__swsetup_r+0x16>
 80117f4:	4628      	mov	r0, r5
 80117f6:	f000 f985 	bl	8011b04 <__sinit>
 80117fa:	4b2e      	ldr	r3, [pc, #184]	; (80118b4 <__swsetup_r+0xd0>)
 80117fc:	429c      	cmp	r4, r3
 80117fe:	d10f      	bne.n	8011820 <__swsetup_r+0x3c>
 8011800:	686c      	ldr	r4, [r5, #4]
 8011802:	89a3      	ldrh	r3, [r4, #12]
 8011804:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011808:	0719      	lsls	r1, r3, #28
 801180a:	d42c      	bmi.n	8011866 <__swsetup_r+0x82>
 801180c:	06dd      	lsls	r5, r3, #27
 801180e:	d411      	bmi.n	8011834 <__swsetup_r+0x50>
 8011810:	2309      	movs	r3, #9
 8011812:	6033      	str	r3, [r6, #0]
 8011814:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011818:	81a3      	strh	r3, [r4, #12]
 801181a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801181e:	e03e      	b.n	801189e <__swsetup_r+0xba>
 8011820:	4b25      	ldr	r3, [pc, #148]	; (80118b8 <__swsetup_r+0xd4>)
 8011822:	429c      	cmp	r4, r3
 8011824:	d101      	bne.n	801182a <__swsetup_r+0x46>
 8011826:	68ac      	ldr	r4, [r5, #8]
 8011828:	e7eb      	b.n	8011802 <__swsetup_r+0x1e>
 801182a:	4b24      	ldr	r3, [pc, #144]	; (80118bc <__swsetup_r+0xd8>)
 801182c:	429c      	cmp	r4, r3
 801182e:	bf08      	it	eq
 8011830:	68ec      	ldreq	r4, [r5, #12]
 8011832:	e7e6      	b.n	8011802 <__swsetup_r+0x1e>
 8011834:	0758      	lsls	r0, r3, #29
 8011836:	d512      	bpl.n	801185e <__swsetup_r+0x7a>
 8011838:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801183a:	b141      	cbz	r1, 801184e <__swsetup_r+0x6a>
 801183c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011840:	4299      	cmp	r1, r3
 8011842:	d002      	beq.n	801184a <__swsetup_r+0x66>
 8011844:	4630      	mov	r0, r6
 8011846:	f7ff fab3 	bl	8010db0 <_free_r>
 801184a:	2300      	movs	r3, #0
 801184c:	6363      	str	r3, [r4, #52]	; 0x34
 801184e:	89a3      	ldrh	r3, [r4, #12]
 8011850:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011854:	81a3      	strh	r3, [r4, #12]
 8011856:	2300      	movs	r3, #0
 8011858:	6063      	str	r3, [r4, #4]
 801185a:	6923      	ldr	r3, [r4, #16]
 801185c:	6023      	str	r3, [r4, #0]
 801185e:	89a3      	ldrh	r3, [r4, #12]
 8011860:	f043 0308 	orr.w	r3, r3, #8
 8011864:	81a3      	strh	r3, [r4, #12]
 8011866:	6923      	ldr	r3, [r4, #16]
 8011868:	b94b      	cbnz	r3, 801187e <__swsetup_r+0x9a>
 801186a:	89a3      	ldrh	r3, [r4, #12]
 801186c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011870:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011874:	d003      	beq.n	801187e <__swsetup_r+0x9a>
 8011876:	4621      	mov	r1, r4
 8011878:	4630      	mov	r0, r6
 801187a:	f000 fa05 	bl	8011c88 <__smakebuf_r>
 801187e:	89a0      	ldrh	r0, [r4, #12]
 8011880:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011884:	f010 0301 	ands.w	r3, r0, #1
 8011888:	d00a      	beq.n	80118a0 <__swsetup_r+0xbc>
 801188a:	2300      	movs	r3, #0
 801188c:	60a3      	str	r3, [r4, #8]
 801188e:	6963      	ldr	r3, [r4, #20]
 8011890:	425b      	negs	r3, r3
 8011892:	61a3      	str	r3, [r4, #24]
 8011894:	6923      	ldr	r3, [r4, #16]
 8011896:	b943      	cbnz	r3, 80118aa <__swsetup_r+0xc6>
 8011898:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801189c:	d1ba      	bne.n	8011814 <__swsetup_r+0x30>
 801189e:	bd70      	pop	{r4, r5, r6, pc}
 80118a0:	0781      	lsls	r1, r0, #30
 80118a2:	bf58      	it	pl
 80118a4:	6963      	ldrpl	r3, [r4, #20]
 80118a6:	60a3      	str	r3, [r4, #8]
 80118a8:	e7f4      	b.n	8011894 <__swsetup_r+0xb0>
 80118aa:	2000      	movs	r0, #0
 80118ac:	e7f7      	b.n	801189e <__swsetup_r+0xba>
 80118ae:	bf00      	nop
 80118b0:	200001f0 	.word	0x200001f0
 80118b4:	080132e4 	.word	0x080132e4
 80118b8:	08013304 	.word	0x08013304
 80118bc:	080132c4 	.word	0x080132c4

080118c0 <abort>:
 80118c0:	b508      	push	{r3, lr}
 80118c2:	2006      	movs	r0, #6
 80118c4:	f000 fa50 	bl	8011d68 <raise>
 80118c8:	2001      	movs	r0, #1
 80118ca:	f7f3 fa6f 	bl	8004dac <_exit>
	...

080118d0 <__sflush_r>:
 80118d0:	898a      	ldrh	r2, [r1, #12]
 80118d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80118d6:	4605      	mov	r5, r0
 80118d8:	0710      	lsls	r0, r2, #28
 80118da:	460c      	mov	r4, r1
 80118dc:	d458      	bmi.n	8011990 <__sflush_r+0xc0>
 80118de:	684b      	ldr	r3, [r1, #4]
 80118e0:	2b00      	cmp	r3, #0
 80118e2:	dc05      	bgt.n	80118f0 <__sflush_r+0x20>
 80118e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80118e6:	2b00      	cmp	r3, #0
 80118e8:	dc02      	bgt.n	80118f0 <__sflush_r+0x20>
 80118ea:	2000      	movs	r0, #0
 80118ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80118f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80118f2:	2e00      	cmp	r6, #0
 80118f4:	d0f9      	beq.n	80118ea <__sflush_r+0x1a>
 80118f6:	2300      	movs	r3, #0
 80118f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80118fc:	682f      	ldr	r7, [r5, #0]
 80118fe:	602b      	str	r3, [r5, #0]
 8011900:	d032      	beq.n	8011968 <__sflush_r+0x98>
 8011902:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011904:	89a3      	ldrh	r3, [r4, #12]
 8011906:	075a      	lsls	r2, r3, #29
 8011908:	d505      	bpl.n	8011916 <__sflush_r+0x46>
 801190a:	6863      	ldr	r3, [r4, #4]
 801190c:	1ac0      	subs	r0, r0, r3
 801190e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011910:	b10b      	cbz	r3, 8011916 <__sflush_r+0x46>
 8011912:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011914:	1ac0      	subs	r0, r0, r3
 8011916:	2300      	movs	r3, #0
 8011918:	4602      	mov	r2, r0
 801191a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801191c:	6a21      	ldr	r1, [r4, #32]
 801191e:	4628      	mov	r0, r5
 8011920:	47b0      	blx	r6
 8011922:	1c43      	adds	r3, r0, #1
 8011924:	89a3      	ldrh	r3, [r4, #12]
 8011926:	d106      	bne.n	8011936 <__sflush_r+0x66>
 8011928:	6829      	ldr	r1, [r5, #0]
 801192a:	291d      	cmp	r1, #29
 801192c:	d82c      	bhi.n	8011988 <__sflush_r+0xb8>
 801192e:	4a2a      	ldr	r2, [pc, #168]	; (80119d8 <__sflush_r+0x108>)
 8011930:	40ca      	lsrs	r2, r1
 8011932:	07d6      	lsls	r6, r2, #31
 8011934:	d528      	bpl.n	8011988 <__sflush_r+0xb8>
 8011936:	2200      	movs	r2, #0
 8011938:	6062      	str	r2, [r4, #4]
 801193a:	04d9      	lsls	r1, r3, #19
 801193c:	6922      	ldr	r2, [r4, #16]
 801193e:	6022      	str	r2, [r4, #0]
 8011940:	d504      	bpl.n	801194c <__sflush_r+0x7c>
 8011942:	1c42      	adds	r2, r0, #1
 8011944:	d101      	bne.n	801194a <__sflush_r+0x7a>
 8011946:	682b      	ldr	r3, [r5, #0]
 8011948:	b903      	cbnz	r3, 801194c <__sflush_r+0x7c>
 801194a:	6560      	str	r0, [r4, #84]	; 0x54
 801194c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801194e:	602f      	str	r7, [r5, #0]
 8011950:	2900      	cmp	r1, #0
 8011952:	d0ca      	beq.n	80118ea <__sflush_r+0x1a>
 8011954:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011958:	4299      	cmp	r1, r3
 801195a:	d002      	beq.n	8011962 <__sflush_r+0x92>
 801195c:	4628      	mov	r0, r5
 801195e:	f7ff fa27 	bl	8010db0 <_free_r>
 8011962:	2000      	movs	r0, #0
 8011964:	6360      	str	r0, [r4, #52]	; 0x34
 8011966:	e7c1      	b.n	80118ec <__sflush_r+0x1c>
 8011968:	6a21      	ldr	r1, [r4, #32]
 801196a:	2301      	movs	r3, #1
 801196c:	4628      	mov	r0, r5
 801196e:	47b0      	blx	r6
 8011970:	1c41      	adds	r1, r0, #1
 8011972:	d1c7      	bne.n	8011904 <__sflush_r+0x34>
 8011974:	682b      	ldr	r3, [r5, #0]
 8011976:	2b00      	cmp	r3, #0
 8011978:	d0c4      	beq.n	8011904 <__sflush_r+0x34>
 801197a:	2b1d      	cmp	r3, #29
 801197c:	d001      	beq.n	8011982 <__sflush_r+0xb2>
 801197e:	2b16      	cmp	r3, #22
 8011980:	d101      	bne.n	8011986 <__sflush_r+0xb6>
 8011982:	602f      	str	r7, [r5, #0]
 8011984:	e7b1      	b.n	80118ea <__sflush_r+0x1a>
 8011986:	89a3      	ldrh	r3, [r4, #12]
 8011988:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801198c:	81a3      	strh	r3, [r4, #12]
 801198e:	e7ad      	b.n	80118ec <__sflush_r+0x1c>
 8011990:	690f      	ldr	r7, [r1, #16]
 8011992:	2f00      	cmp	r7, #0
 8011994:	d0a9      	beq.n	80118ea <__sflush_r+0x1a>
 8011996:	0793      	lsls	r3, r2, #30
 8011998:	680e      	ldr	r6, [r1, #0]
 801199a:	bf08      	it	eq
 801199c:	694b      	ldreq	r3, [r1, #20]
 801199e:	600f      	str	r7, [r1, #0]
 80119a0:	bf18      	it	ne
 80119a2:	2300      	movne	r3, #0
 80119a4:	eba6 0807 	sub.w	r8, r6, r7
 80119a8:	608b      	str	r3, [r1, #8]
 80119aa:	f1b8 0f00 	cmp.w	r8, #0
 80119ae:	dd9c      	ble.n	80118ea <__sflush_r+0x1a>
 80119b0:	6a21      	ldr	r1, [r4, #32]
 80119b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80119b4:	4643      	mov	r3, r8
 80119b6:	463a      	mov	r2, r7
 80119b8:	4628      	mov	r0, r5
 80119ba:	47b0      	blx	r6
 80119bc:	2800      	cmp	r0, #0
 80119be:	dc06      	bgt.n	80119ce <__sflush_r+0xfe>
 80119c0:	89a3      	ldrh	r3, [r4, #12]
 80119c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80119c6:	81a3      	strh	r3, [r4, #12]
 80119c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80119cc:	e78e      	b.n	80118ec <__sflush_r+0x1c>
 80119ce:	4407      	add	r7, r0
 80119d0:	eba8 0800 	sub.w	r8, r8, r0
 80119d4:	e7e9      	b.n	80119aa <__sflush_r+0xda>
 80119d6:	bf00      	nop
 80119d8:	20400001 	.word	0x20400001

080119dc <_fflush_r>:
 80119dc:	b538      	push	{r3, r4, r5, lr}
 80119de:	690b      	ldr	r3, [r1, #16]
 80119e0:	4605      	mov	r5, r0
 80119e2:	460c      	mov	r4, r1
 80119e4:	b913      	cbnz	r3, 80119ec <_fflush_r+0x10>
 80119e6:	2500      	movs	r5, #0
 80119e8:	4628      	mov	r0, r5
 80119ea:	bd38      	pop	{r3, r4, r5, pc}
 80119ec:	b118      	cbz	r0, 80119f6 <_fflush_r+0x1a>
 80119ee:	6983      	ldr	r3, [r0, #24]
 80119f0:	b90b      	cbnz	r3, 80119f6 <_fflush_r+0x1a>
 80119f2:	f000 f887 	bl	8011b04 <__sinit>
 80119f6:	4b14      	ldr	r3, [pc, #80]	; (8011a48 <_fflush_r+0x6c>)
 80119f8:	429c      	cmp	r4, r3
 80119fa:	d11b      	bne.n	8011a34 <_fflush_r+0x58>
 80119fc:	686c      	ldr	r4, [r5, #4]
 80119fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	d0ef      	beq.n	80119e6 <_fflush_r+0xa>
 8011a06:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011a08:	07d0      	lsls	r0, r2, #31
 8011a0a:	d404      	bmi.n	8011a16 <_fflush_r+0x3a>
 8011a0c:	0599      	lsls	r1, r3, #22
 8011a0e:	d402      	bmi.n	8011a16 <_fflush_r+0x3a>
 8011a10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011a12:	f7fe fcd8 	bl	80103c6 <__retarget_lock_acquire_recursive>
 8011a16:	4628      	mov	r0, r5
 8011a18:	4621      	mov	r1, r4
 8011a1a:	f7ff ff59 	bl	80118d0 <__sflush_r>
 8011a1e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011a20:	07da      	lsls	r2, r3, #31
 8011a22:	4605      	mov	r5, r0
 8011a24:	d4e0      	bmi.n	80119e8 <_fflush_r+0xc>
 8011a26:	89a3      	ldrh	r3, [r4, #12]
 8011a28:	059b      	lsls	r3, r3, #22
 8011a2a:	d4dd      	bmi.n	80119e8 <_fflush_r+0xc>
 8011a2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011a2e:	f7fe fccb 	bl	80103c8 <__retarget_lock_release_recursive>
 8011a32:	e7d9      	b.n	80119e8 <_fflush_r+0xc>
 8011a34:	4b05      	ldr	r3, [pc, #20]	; (8011a4c <_fflush_r+0x70>)
 8011a36:	429c      	cmp	r4, r3
 8011a38:	d101      	bne.n	8011a3e <_fflush_r+0x62>
 8011a3a:	68ac      	ldr	r4, [r5, #8]
 8011a3c:	e7df      	b.n	80119fe <_fflush_r+0x22>
 8011a3e:	4b04      	ldr	r3, [pc, #16]	; (8011a50 <_fflush_r+0x74>)
 8011a40:	429c      	cmp	r4, r3
 8011a42:	bf08      	it	eq
 8011a44:	68ec      	ldreq	r4, [r5, #12]
 8011a46:	e7da      	b.n	80119fe <_fflush_r+0x22>
 8011a48:	080132e4 	.word	0x080132e4
 8011a4c:	08013304 	.word	0x08013304
 8011a50:	080132c4 	.word	0x080132c4

08011a54 <std>:
 8011a54:	2300      	movs	r3, #0
 8011a56:	b510      	push	{r4, lr}
 8011a58:	4604      	mov	r4, r0
 8011a5a:	e9c0 3300 	strd	r3, r3, [r0]
 8011a5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011a62:	6083      	str	r3, [r0, #8]
 8011a64:	8181      	strh	r1, [r0, #12]
 8011a66:	6643      	str	r3, [r0, #100]	; 0x64
 8011a68:	81c2      	strh	r2, [r0, #14]
 8011a6a:	6183      	str	r3, [r0, #24]
 8011a6c:	4619      	mov	r1, r3
 8011a6e:	2208      	movs	r2, #8
 8011a70:	305c      	adds	r0, #92	; 0x5c
 8011a72:	f7fb fefb 	bl	800d86c <memset>
 8011a76:	4b05      	ldr	r3, [pc, #20]	; (8011a8c <std+0x38>)
 8011a78:	6263      	str	r3, [r4, #36]	; 0x24
 8011a7a:	4b05      	ldr	r3, [pc, #20]	; (8011a90 <std+0x3c>)
 8011a7c:	62a3      	str	r3, [r4, #40]	; 0x28
 8011a7e:	4b05      	ldr	r3, [pc, #20]	; (8011a94 <std+0x40>)
 8011a80:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011a82:	4b05      	ldr	r3, [pc, #20]	; (8011a98 <std+0x44>)
 8011a84:	6224      	str	r4, [r4, #32]
 8011a86:	6323      	str	r3, [r4, #48]	; 0x30
 8011a88:	bd10      	pop	{r4, pc}
 8011a8a:	bf00      	nop
 8011a8c:	08011259 	.word	0x08011259
 8011a90:	0801127b 	.word	0x0801127b
 8011a94:	080112b3 	.word	0x080112b3
 8011a98:	080112d7 	.word	0x080112d7

08011a9c <_cleanup_r>:
 8011a9c:	4901      	ldr	r1, [pc, #4]	; (8011aa4 <_cleanup_r+0x8>)
 8011a9e:	f000 b8af 	b.w	8011c00 <_fwalk_reent>
 8011aa2:	bf00      	nop
 8011aa4:	080119dd 	.word	0x080119dd

08011aa8 <__sfmoreglue>:
 8011aa8:	b570      	push	{r4, r5, r6, lr}
 8011aaa:	2268      	movs	r2, #104	; 0x68
 8011aac:	1e4d      	subs	r5, r1, #1
 8011aae:	4355      	muls	r5, r2
 8011ab0:	460e      	mov	r6, r1
 8011ab2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011ab6:	f7ff f9e7 	bl	8010e88 <_malloc_r>
 8011aba:	4604      	mov	r4, r0
 8011abc:	b140      	cbz	r0, 8011ad0 <__sfmoreglue+0x28>
 8011abe:	2100      	movs	r1, #0
 8011ac0:	e9c0 1600 	strd	r1, r6, [r0]
 8011ac4:	300c      	adds	r0, #12
 8011ac6:	60a0      	str	r0, [r4, #8]
 8011ac8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011acc:	f7fb fece 	bl	800d86c <memset>
 8011ad0:	4620      	mov	r0, r4
 8011ad2:	bd70      	pop	{r4, r5, r6, pc}

08011ad4 <__sfp_lock_acquire>:
 8011ad4:	4801      	ldr	r0, [pc, #4]	; (8011adc <__sfp_lock_acquire+0x8>)
 8011ad6:	f7fe bc76 	b.w	80103c6 <__retarget_lock_acquire_recursive>
 8011ada:	bf00      	nop
 8011adc:	20002dc1 	.word	0x20002dc1

08011ae0 <__sfp_lock_release>:
 8011ae0:	4801      	ldr	r0, [pc, #4]	; (8011ae8 <__sfp_lock_release+0x8>)
 8011ae2:	f7fe bc71 	b.w	80103c8 <__retarget_lock_release_recursive>
 8011ae6:	bf00      	nop
 8011ae8:	20002dc1 	.word	0x20002dc1

08011aec <__sinit_lock_acquire>:
 8011aec:	4801      	ldr	r0, [pc, #4]	; (8011af4 <__sinit_lock_acquire+0x8>)
 8011aee:	f7fe bc6a 	b.w	80103c6 <__retarget_lock_acquire_recursive>
 8011af2:	bf00      	nop
 8011af4:	20002dc2 	.word	0x20002dc2

08011af8 <__sinit_lock_release>:
 8011af8:	4801      	ldr	r0, [pc, #4]	; (8011b00 <__sinit_lock_release+0x8>)
 8011afa:	f7fe bc65 	b.w	80103c8 <__retarget_lock_release_recursive>
 8011afe:	bf00      	nop
 8011b00:	20002dc2 	.word	0x20002dc2

08011b04 <__sinit>:
 8011b04:	b510      	push	{r4, lr}
 8011b06:	4604      	mov	r4, r0
 8011b08:	f7ff fff0 	bl	8011aec <__sinit_lock_acquire>
 8011b0c:	69a3      	ldr	r3, [r4, #24]
 8011b0e:	b11b      	cbz	r3, 8011b18 <__sinit+0x14>
 8011b10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011b14:	f7ff bff0 	b.w	8011af8 <__sinit_lock_release>
 8011b18:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011b1c:	6523      	str	r3, [r4, #80]	; 0x50
 8011b1e:	4b13      	ldr	r3, [pc, #76]	; (8011b6c <__sinit+0x68>)
 8011b20:	4a13      	ldr	r2, [pc, #76]	; (8011b70 <__sinit+0x6c>)
 8011b22:	681b      	ldr	r3, [r3, #0]
 8011b24:	62a2      	str	r2, [r4, #40]	; 0x28
 8011b26:	42a3      	cmp	r3, r4
 8011b28:	bf04      	itt	eq
 8011b2a:	2301      	moveq	r3, #1
 8011b2c:	61a3      	streq	r3, [r4, #24]
 8011b2e:	4620      	mov	r0, r4
 8011b30:	f000 f820 	bl	8011b74 <__sfp>
 8011b34:	6060      	str	r0, [r4, #4]
 8011b36:	4620      	mov	r0, r4
 8011b38:	f000 f81c 	bl	8011b74 <__sfp>
 8011b3c:	60a0      	str	r0, [r4, #8]
 8011b3e:	4620      	mov	r0, r4
 8011b40:	f000 f818 	bl	8011b74 <__sfp>
 8011b44:	2200      	movs	r2, #0
 8011b46:	60e0      	str	r0, [r4, #12]
 8011b48:	2104      	movs	r1, #4
 8011b4a:	6860      	ldr	r0, [r4, #4]
 8011b4c:	f7ff ff82 	bl	8011a54 <std>
 8011b50:	68a0      	ldr	r0, [r4, #8]
 8011b52:	2201      	movs	r2, #1
 8011b54:	2109      	movs	r1, #9
 8011b56:	f7ff ff7d 	bl	8011a54 <std>
 8011b5a:	68e0      	ldr	r0, [r4, #12]
 8011b5c:	2202      	movs	r2, #2
 8011b5e:	2112      	movs	r1, #18
 8011b60:	f7ff ff78 	bl	8011a54 <std>
 8011b64:	2301      	movs	r3, #1
 8011b66:	61a3      	str	r3, [r4, #24]
 8011b68:	e7d2      	b.n	8011b10 <__sinit+0xc>
 8011b6a:	bf00      	nop
 8011b6c:	08012f84 	.word	0x08012f84
 8011b70:	08011a9d 	.word	0x08011a9d

08011b74 <__sfp>:
 8011b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b76:	4607      	mov	r7, r0
 8011b78:	f7ff ffac 	bl	8011ad4 <__sfp_lock_acquire>
 8011b7c:	4b1e      	ldr	r3, [pc, #120]	; (8011bf8 <__sfp+0x84>)
 8011b7e:	681e      	ldr	r6, [r3, #0]
 8011b80:	69b3      	ldr	r3, [r6, #24]
 8011b82:	b913      	cbnz	r3, 8011b8a <__sfp+0x16>
 8011b84:	4630      	mov	r0, r6
 8011b86:	f7ff ffbd 	bl	8011b04 <__sinit>
 8011b8a:	3648      	adds	r6, #72	; 0x48
 8011b8c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011b90:	3b01      	subs	r3, #1
 8011b92:	d503      	bpl.n	8011b9c <__sfp+0x28>
 8011b94:	6833      	ldr	r3, [r6, #0]
 8011b96:	b30b      	cbz	r3, 8011bdc <__sfp+0x68>
 8011b98:	6836      	ldr	r6, [r6, #0]
 8011b9a:	e7f7      	b.n	8011b8c <__sfp+0x18>
 8011b9c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011ba0:	b9d5      	cbnz	r5, 8011bd8 <__sfp+0x64>
 8011ba2:	4b16      	ldr	r3, [pc, #88]	; (8011bfc <__sfp+0x88>)
 8011ba4:	60e3      	str	r3, [r4, #12]
 8011ba6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011baa:	6665      	str	r5, [r4, #100]	; 0x64
 8011bac:	f7fe fc0a 	bl	80103c4 <__retarget_lock_init_recursive>
 8011bb0:	f7ff ff96 	bl	8011ae0 <__sfp_lock_release>
 8011bb4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011bb8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011bbc:	6025      	str	r5, [r4, #0]
 8011bbe:	61a5      	str	r5, [r4, #24]
 8011bc0:	2208      	movs	r2, #8
 8011bc2:	4629      	mov	r1, r5
 8011bc4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011bc8:	f7fb fe50 	bl	800d86c <memset>
 8011bcc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011bd0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011bd4:	4620      	mov	r0, r4
 8011bd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011bd8:	3468      	adds	r4, #104	; 0x68
 8011bda:	e7d9      	b.n	8011b90 <__sfp+0x1c>
 8011bdc:	2104      	movs	r1, #4
 8011bde:	4638      	mov	r0, r7
 8011be0:	f7ff ff62 	bl	8011aa8 <__sfmoreglue>
 8011be4:	4604      	mov	r4, r0
 8011be6:	6030      	str	r0, [r6, #0]
 8011be8:	2800      	cmp	r0, #0
 8011bea:	d1d5      	bne.n	8011b98 <__sfp+0x24>
 8011bec:	f7ff ff78 	bl	8011ae0 <__sfp_lock_release>
 8011bf0:	230c      	movs	r3, #12
 8011bf2:	603b      	str	r3, [r7, #0]
 8011bf4:	e7ee      	b.n	8011bd4 <__sfp+0x60>
 8011bf6:	bf00      	nop
 8011bf8:	08012f84 	.word	0x08012f84
 8011bfc:	ffff0001 	.word	0xffff0001

08011c00 <_fwalk_reent>:
 8011c00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011c04:	4606      	mov	r6, r0
 8011c06:	4688      	mov	r8, r1
 8011c08:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011c0c:	2700      	movs	r7, #0
 8011c0e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011c12:	f1b9 0901 	subs.w	r9, r9, #1
 8011c16:	d505      	bpl.n	8011c24 <_fwalk_reent+0x24>
 8011c18:	6824      	ldr	r4, [r4, #0]
 8011c1a:	2c00      	cmp	r4, #0
 8011c1c:	d1f7      	bne.n	8011c0e <_fwalk_reent+0xe>
 8011c1e:	4638      	mov	r0, r7
 8011c20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011c24:	89ab      	ldrh	r3, [r5, #12]
 8011c26:	2b01      	cmp	r3, #1
 8011c28:	d907      	bls.n	8011c3a <_fwalk_reent+0x3a>
 8011c2a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011c2e:	3301      	adds	r3, #1
 8011c30:	d003      	beq.n	8011c3a <_fwalk_reent+0x3a>
 8011c32:	4629      	mov	r1, r5
 8011c34:	4630      	mov	r0, r6
 8011c36:	47c0      	blx	r8
 8011c38:	4307      	orrs	r7, r0
 8011c3a:	3568      	adds	r5, #104	; 0x68
 8011c3c:	e7e9      	b.n	8011c12 <_fwalk_reent+0x12>

08011c3e <__swhatbuf_r>:
 8011c3e:	b570      	push	{r4, r5, r6, lr}
 8011c40:	460e      	mov	r6, r1
 8011c42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011c46:	2900      	cmp	r1, #0
 8011c48:	b096      	sub	sp, #88	; 0x58
 8011c4a:	4614      	mov	r4, r2
 8011c4c:	461d      	mov	r5, r3
 8011c4e:	da08      	bge.n	8011c62 <__swhatbuf_r+0x24>
 8011c50:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8011c54:	2200      	movs	r2, #0
 8011c56:	602a      	str	r2, [r5, #0]
 8011c58:	061a      	lsls	r2, r3, #24
 8011c5a:	d410      	bmi.n	8011c7e <__swhatbuf_r+0x40>
 8011c5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011c60:	e00e      	b.n	8011c80 <__swhatbuf_r+0x42>
 8011c62:	466a      	mov	r2, sp
 8011c64:	f000 f89c 	bl	8011da0 <_fstat_r>
 8011c68:	2800      	cmp	r0, #0
 8011c6a:	dbf1      	blt.n	8011c50 <__swhatbuf_r+0x12>
 8011c6c:	9a01      	ldr	r2, [sp, #4]
 8011c6e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011c72:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011c76:	425a      	negs	r2, r3
 8011c78:	415a      	adcs	r2, r3
 8011c7a:	602a      	str	r2, [r5, #0]
 8011c7c:	e7ee      	b.n	8011c5c <__swhatbuf_r+0x1e>
 8011c7e:	2340      	movs	r3, #64	; 0x40
 8011c80:	2000      	movs	r0, #0
 8011c82:	6023      	str	r3, [r4, #0]
 8011c84:	b016      	add	sp, #88	; 0x58
 8011c86:	bd70      	pop	{r4, r5, r6, pc}

08011c88 <__smakebuf_r>:
 8011c88:	898b      	ldrh	r3, [r1, #12]
 8011c8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011c8c:	079d      	lsls	r5, r3, #30
 8011c8e:	4606      	mov	r6, r0
 8011c90:	460c      	mov	r4, r1
 8011c92:	d507      	bpl.n	8011ca4 <__smakebuf_r+0x1c>
 8011c94:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011c98:	6023      	str	r3, [r4, #0]
 8011c9a:	6123      	str	r3, [r4, #16]
 8011c9c:	2301      	movs	r3, #1
 8011c9e:	6163      	str	r3, [r4, #20]
 8011ca0:	b002      	add	sp, #8
 8011ca2:	bd70      	pop	{r4, r5, r6, pc}
 8011ca4:	ab01      	add	r3, sp, #4
 8011ca6:	466a      	mov	r2, sp
 8011ca8:	f7ff ffc9 	bl	8011c3e <__swhatbuf_r>
 8011cac:	9900      	ldr	r1, [sp, #0]
 8011cae:	4605      	mov	r5, r0
 8011cb0:	4630      	mov	r0, r6
 8011cb2:	f7ff f8e9 	bl	8010e88 <_malloc_r>
 8011cb6:	b948      	cbnz	r0, 8011ccc <__smakebuf_r+0x44>
 8011cb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011cbc:	059a      	lsls	r2, r3, #22
 8011cbe:	d4ef      	bmi.n	8011ca0 <__smakebuf_r+0x18>
 8011cc0:	f023 0303 	bic.w	r3, r3, #3
 8011cc4:	f043 0302 	orr.w	r3, r3, #2
 8011cc8:	81a3      	strh	r3, [r4, #12]
 8011cca:	e7e3      	b.n	8011c94 <__smakebuf_r+0xc>
 8011ccc:	4b0d      	ldr	r3, [pc, #52]	; (8011d04 <__smakebuf_r+0x7c>)
 8011cce:	62b3      	str	r3, [r6, #40]	; 0x28
 8011cd0:	89a3      	ldrh	r3, [r4, #12]
 8011cd2:	6020      	str	r0, [r4, #0]
 8011cd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011cd8:	81a3      	strh	r3, [r4, #12]
 8011cda:	9b00      	ldr	r3, [sp, #0]
 8011cdc:	6163      	str	r3, [r4, #20]
 8011cde:	9b01      	ldr	r3, [sp, #4]
 8011ce0:	6120      	str	r0, [r4, #16]
 8011ce2:	b15b      	cbz	r3, 8011cfc <__smakebuf_r+0x74>
 8011ce4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011ce8:	4630      	mov	r0, r6
 8011cea:	f000 f86b 	bl	8011dc4 <_isatty_r>
 8011cee:	b128      	cbz	r0, 8011cfc <__smakebuf_r+0x74>
 8011cf0:	89a3      	ldrh	r3, [r4, #12]
 8011cf2:	f023 0303 	bic.w	r3, r3, #3
 8011cf6:	f043 0301 	orr.w	r3, r3, #1
 8011cfa:	81a3      	strh	r3, [r4, #12]
 8011cfc:	89a0      	ldrh	r0, [r4, #12]
 8011cfe:	4305      	orrs	r5, r0
 8011d00:	81a5      	strh	r5, [r4, #12]
 8011d02:	e7cd      	b.n	8011ca0 <__smakebuf_r+0x18>
 8011d04:	08011a9d 	.word	0x08011a9d

08011d08 <_malloc_usable_size_r>:
 8011d08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011d0c:	1f18      	subs	r0, r3, #4
 8011d0e:	2b00      	cmp	r3, #0
 8011d10:	bfbc      	itt	lt
 8011d12:	580b      	ldrlt	r3, [r1, r0]
 8011d14:	18c0      	addlt	r0, r0, r3
 8011d16:	4770      	bx	lr

08011d18 <_raise_r>:
 8011d18:	291f      	cmp	r1, #31
 8011d1a:	b538      	push	{r3, r4, r5, lr}
 8011d1c:	4604      	mov	r4, r0
 8011d1e:	460d      	mov	r5, r1
 8011d20:	d904      	bls.n	8011d2c <_raise_r+0x14>
 8011d22:	2316      	movs	r3, #22
 8011d24:	6003      	str	r3, [r0, #0]
 8011d26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011d2a:	bd38      	pop	{r3, r4, r5, pc}
 8011d2c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011d2e:	b112      	cbz	r2, 8011d36 <_raise_r+0x1e>
 8011d30:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011d34:	b94b      	cbnz	r3, 8011d4a <_raise_r+0x32>
 8011d36:	4620      	mov	r0, r4
 8011d38:	f000 f830 	bl	8011d9c <_getpid_r>
 8011d3c:	462a      	mov	r2, r5
 8011d3e:	4601      	mov	r1, r0
 8011d40:	4620      	mov	r0, r4
 8011d42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011d46:	f000 b817 	b.w	8011d78 <_kill_r>
 8011d4a:	2b01      	cmp	r3, #1
 8011d4c:	d00a      	beq.n	8011d64 <_raise_r+0x4c>
 8011d4e:	1c59      	adds	r1, r3, #1
 8011d50:	d103      	bne.n	8011d5a <_raise_r+0x42>
 8011d52:	2316      	movs	r3, #22
 8011d54:	6003      	str	r3, [r0, #0]
 8011d56:	2001      	movs	r0, #1
 8011d58:	e7e7      	b.n	8011d2a <_raise_r+0x12>
 8011d5a:	2400      	movs	r4, #0
 8011d5c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011d60:	4628      	mov	r0, r5
 8011d62:	4798      	blx	r3
 8011d64:	2000      	movs	r0, #0
 8011d66:	e7e0      	b.n	8011d2a <_raise_r+0x12>

08011d68 <raise>:
 8011d68:	4b02      	ldr	r3, [pc, #8]	; (8011d74 <raise+0xc>)
 8011d6a:	4601      	mov	r1, r0
 8011d6c:	6818      	ldr	r0, [r3, #0]
 8011d6e:	f7ff bfd3 	b.w	8011d18 <_raise_r>
 8011d72:	bf00      	nop
 8011d74:	200001f0 	.word	0x200001f0

08011d78 <_kill_r>:
 8011d78:	b538      	push	{r3, r4, r5, lr}
 8011d7a:	4d07      	ldr	r5, [pc, #28]	; (8011d98 <_kill_r+0x20>)
 8011d7c:	2300      	movs	r3, #0
 8011d7e:	4604      	mov	r4, r0
 8011d80:	4608      	mov	r0, r1
 8011d82:	4611      	mov	r1, r2
 8011d84:	602b      	str	r3, [r5, #0]
 8011d86:	f7f3 f801 	bl	8004d8c <_kill>
 8011d8a:	1c43      	adds	r3, r0, #1
 8011d8c:	d102      	bne.n	8011d94 <_kill_r+0x1c>
 8011d8e:	682b      	ldr	r3, [r5, #0]
 8011d90:	b103      	cbz	r3, 8011d94 <_kill_r+0x1c>
 8011d92:	6023      	str	r3, [r4, #0]
 8011d94:	bd38      	pop	{r3, r4, r5, pc}
 8011d96:	bf00      	nop
 8011d98:	20002dcc 	.word	0x20002dcc

08011d9c <_getpid_r>:
 8011d9c:	f7f2 bfee 	b.w	8004d7c <_getpid>

08011da0 <_fstat_r>:
 8011da0:	b538      	push	{r3, r4, r5, lr}
 8011da2:	4d07      	ldr	r5, [pc, #28]	; (8011dc0 <_fstat_r+0x20>)
 8011da4:	2300      	movs	r3, #0
 8011da6:	4604      	mov	r4, r0
 8011da8:	4608      	mov	r0, r1
 8011daa:	4611      	mov	r1, r2
 8011dac:	602b      	str	r3, [r5, #0]
 8011dae:	f7f3 f84c 	bl	8004e4a <_fstat>
 8011db2:	1c43      	adds	r3, r0, #1
 8011db4:	d102      	bne.n	8011dbc <_fstat_r+0x1c>
 8011db6:	682b      	ldr	r3, [r5, #0]
 8011db8:	b103      	cbz	r3, 8011dbc <_fstat_r+0x1c>
 8011dba:	6023      	str	r3, [r4, #0]
 8011dbc:	bd38      	pop	{r3, r4, r5, pc}
 8011dbe:	bf00      	nop
 8011dc0:	20002dcc 	.word	0x20002dcc

08011dc4 <_isatty_r>:
 8011dc4:	b538      	push	{r3, r4, r5, lr}
 8011dc6:	4d06      	ldr	r5, [pc, #24]	; (8011de0 <_isatty_r+0x1c>)
 8011dc8:	2300      	movs	r3, #0
 8011dca:	4604      	mov	r4, r0
 8011dcc:	4608      	mov	r0, r1
 8011dce:	602b      	str	r3, [r5, #0]
 8011dd0:	f7f3 f84b 	bl	8004e6a <_isatty>
 8011dd4:	1c43      	adds	r3, r0, #1
 8011dd6:	d102      	bne.n	8011dde <_isatty_r+0x1a>
 8011dd8:	682b      	ldr	r3, [r5, #0]
 8011dda:	b103      	cbz	r3, 8011dde <_isatty_r+0x1a>
 8011ddc:	6023      	str	r3, [r4, #0]
 8011dde:	bd38      	pop	{r3, r4, r5, pc}
 8011de0:	20002dcc 	.word	0x20002dcc

08011de4 <_init>:
 8011de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011de6:	bf00      	nop
 8011de8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011dea:	bc08      	pop	{r3}
 8011dec:	469e      	mov	lr, r3
 8011dee:	4770      	bx	lr

08011df0 <_fini>:
 8011df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011df2:	bf00      	nop
 8011df4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011df6:	bc08      	pop	{r3}
 8011df8:	469e      	mov	lr, r3
 8011dfa:	4770      	bx	lr
